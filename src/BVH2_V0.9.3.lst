

HI-TECH Software PIC PRO Macro Assembler V9.81 build 7612 
                                                                                               Fri Apr 22 13:16:23 2016

HI-TECH Software Omniscient Code Generator (PRO mode) build 7612
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK1,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	text2029,local,class=CODE,delta=2
    25                           	psect	text2030,local,class=CODE,delta=2
    26                           	psect	text2039,local,class=CODE,delta=2
    27                           	psect	swtext1,local,class=CONST,delta=2
    28                           	psect	text2047,local,class=CODE,delta=2
    29                           	psect	swtext2,local,class=CONST,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text2078,local,class=CODE,delta=2
    32                           	psect	swtext3,local,class=CONST,delta=2
    33                           	psect	swtext4,local,class=CONST,delta=2
    34                           	psect	text2082,local,class=CODE,delta=2
    35                           	psect	text2087,local,class=CODE,delta=2
    36                           	psect	text2088,local,class=CODE,delta=2
    37                           	psect	text2089,local,class=CODE,delta=2
    38                           	psect	text2090,local,class=CODE,delta=2
    39                           	psect	pa_nodes,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  000A                     	;#
    42                           
    43                           	psect	config
    44  8007  FFBC               	dw	65468	;#
    45  8008  DBFF               	dw	56319	;#
    46                           
    47                           	psect	idataBANK0
    48  0000                     __pidataBANK0:	
    49                           
    50                           	psect	idataBANK2
    51  0000                     __pidataBANK2:	
    52                           
    53                           	psect	idataBANK1
    54  0000                     __pidataBANK1:	
    55                           
    56                           	psect	strings
    57  002C                     __pstrings:	
    58  002C                     __stringtab:	
    59  002C  3400               	retlw	0
    60  002D                     _PWM_trans_table:	
    61  002D  346E               	retlw	110
    62  002E  346E               	retlw	110
    63  002F  346E               	retlw	110
    64  0030  3400               	retlw	0
    65  0031  3400               	retlw	0
    66  0032  3400               	retlw	0
    67  0033  3400               	retlw	0
    68  0034  3400               	retlw	0
    69  0035  3400               	retlw	0
    70  0036  3400               	retlw	0
    71  0037  34D3               	retlw	211
    72  0038  34D3               	retlw	211
    73  0039  34D3               	retlw	211
    74  003A  34D0               	retlw	208
    75  003B  34CE               	retlw	206
    76  003C  34CC               	retlw	204
    77  003D  34C9               	retlw	201
    78  003E  34C7               	retlw	199
    79  003F  34C5               	retlw	197
    80  0040  34C3               	retlw	195
    81  0041  34C1               	retlw	193
    82  0042  34BF               	retlw	191
    83  0043  34BD               	retlw	189
    84  0044  34BB               	retlw	187
    85  0045  34BA               	retlw	186
    86  0046  34B8               	retlw	184
    87  0047  34B6               	retlw	182
    88  0048  34B4               	retlw	180
    89  0049  34B2               	retlw	178
    90  004A  34B1               	retlw	177
    91  004B  34AF               	retlw	175
    92  004C  34AD               	retlw	173
    93  004D  34AC               	retlw	172
    94  004E  34AA               	retlw	170
    95  004F  34A9               	retlw	169
    96  0050  34A7               	retlw	167
    97  0051  34A6               	retlw	166
    98  0052  34A4               	retlw	164
    99  0053  34A3               	retlw	163
   100  0054  34A2               	retlw	162
   101  0055  34A0               	retlw	160
   102  0056  349F               	retlw	159
   103  0057  349D               	retlw	157
   104  0058  349C               	retlw	156
   105  0059  349B               	retlw	155
   106  005A  349A               	retlw	154
   107  005B  3498               	retlw	152
   108  005C  3497               	retlw	151
   109  005D  3496               	retlw	150
   110  005E  3495               	retlw	149
   111  005F  3494               	retlw	148
   112  0060  3492               	retlw	146
   113  0061  3491               	retlw	145
   114  0062  3490               	retlw	144
   115  0063  348F               	retlw	143
   116  0064  348E               	retlw	142
   117  0065  348D               	retlw	141
   118  0066  348C               	retlw	140
   119  0067  348B               	retlw	139
   120  0068  348A               	retlw	138
   121  0069  3489               	retlw	137
   122  006A  3488               	retlw	136
   123  006B  3487               	retlw	135
   124  006C  3486               	retlw	134
   125  006D  3485               	retlw	133
   126  006E  3484               	retlw	132
   127  006F  3483               	retlw	131
   128  0070  3482               	retlw	130
   129  0071  3481               	retlw	129
   130  0072  3480               	retlw	128
   131  0073  347F               	retlw	127
   132  0074  347F               	retlw	127
   133  0075  347E               	retlw	126
   134  0076  347D               	retlw	125
   135  0077  347C               	retlw	124
   136  0078  347B               	retlw	123
   137  0079  347A               	retlw	122
   138  007A  347A               	retlw	122
   139  007B  3479               	retlw	121
   140  007C  3478               	retlw	120
   141  007D  3477               	retlw	119
   142  007E  3477               	retlw	119
   143  007F  3476               	retlw	118
   144  0080  3475               	retlw	117
   145  0081  3474               	retlw	116
   146  0082  3474               	retlw	116
   147  0083  3473               	retlw	115
   148  0084  3472               	retlw	114
   149  0085  3472               	retlw	114
   150  0086  3471               	retlw	113
   151  0087  3470               	retlw	112
   152  0088  3470               	retlw	112
   153  0089  346F               	retlw	111
   154  008A  346E               	retlw	110
   155  008B  346E               	retlw	110
   156  008C  346E               	retlw	110
   157  008D  346E               	retlw	110
   158  008E  346E               	retlw	110
   159  008F  346E               	retlw	110
   160  0090  346E               	retlw	110
   161  0091  346E               	retlw	110
   162                           
   163                           	psect	nvBANK3
   164  01EC                     __pnvBANK3:	
   165  01EC                     _ui16_Current_Thresh:	
   166  01EC                     	ds	2
   167  01EE                     _ui16_dryRun_Thresh:	
   168  01EE                     	ds	2
   169  000B                     _INTCON	set	11
   170  001B                     _PR2	set	27
   171  0018                     _T1CON	set	24
   172  001C                     _T2CON	set	28
   173  0015                     _TMR0	set	21
   174  0017                     _TMR1H	set	23
   175  0016                     _TMR1L	set	22
   176  001A                     _TMR2	set	26
   177  008A                     _CCP1IF	set	138
   178  0090                     _CCP2IF	set	144
   179  009C                     _CCP3IF	set	156
   180  009D                     _CCP4IF	set	157
   181  009E                     _CCP5IF	set	158
   182  005F                     _GIE	set	95
   183  005E                     _PEIE	set	94
   184  0075                     _RC5	set	117
   185  008D                     _RCIF	set	141
   186  005D                     _TMR0IE	set	93
   187  0088                     _TMR1IF	set	136
   188  0089                     _TMR2IF	set	137
   189  0099                     _TMR4IF	set	153
   190  009B                     _TMR6IF	set	155
   191  009D                     _ADCON0	set	157
   192  009E                     _ADCON1	set	158
   193  009C                     _ADRESH	set	156
   194  009B                     _ADRESL	set	155
   195  0095                     _OPTION_REG	set	149
   196  0099                     _OSCCON	set	153
   197  0091                     _PIE1	set	145
   198  0092                     _PIE2	set	146
   199  0093                     _PIE3	set	147
   200  008C                     _TRISA	set	140
   201  008D                     _TRISB	set	141
   202  008E                     _TRISC	set	142
   203  0097                     _WDTCON	set	151
   204  04E8                     _ADON	set	1256
   205  0495                     _C1IE	set	1173
   206  048A                     _CCP1IE	set	1162
   207  0490                     _CCP2IE	set	1168
   208  049C                     _CCP3IE	set	1180
   209  049D                     _CCP4IE	set	1181
   210  049E                     _CCP5IE	set	1182
   211  04E9                     _GO_nDONE	set	1257
   212  0488                     _TMR1IE	set	1160
   213  0489                     _TMR2IE	set	1161
   214  0499                     _TMR4IE	set	1177
   215  049B                     _TMR6IE	set	1179
   216  0111                     _CM1CON0	set	273
   217  0112                     _CM1CON1	set	274
   218  0117                     _FVRCON	set	279
   219  010C                     _LATA	set	268
   220  010D                     _LATB	set	269
   221  010E                     _LATC	set	270
   222  088E                     _C1OUT	set	2190
   223  0869                     _LATB1	set	2153
   224  086A                     _LATB2	set	2154
   225  0870                     _LATC0	set	2160
   226  0871                     _LATC1	set	2161
   227  0872                     _LATC2	set	2162
   228  0873                     _LATC3	set	2163
   229  0874                     _LATC4	set	2164
   230  018C                     _ANSELA	set	396
   231  018D                     _ANSELB	set	397
   232  019F                     _BAUDCON	set	415
   233  0192                     _EEADRH	set	402
   234  0191                     _EEADRL	set	401
   235  0195                     _EECON1	set	405
   236  0196                     _EECON2	set	406
   237  0193                     _EEDATA	set	403
   238  0194                     _EEDATH	set	404
   239  0193                     _EEDATL	set	403
   240  0199                     _RCREG	set	409
   241  019D                     _RCSTA	set	413
   242  019B                     _SPBRG	set	411
   243  019C                     _SPBRGH	set	412
   244  019A                     _TXREG	set	410
   245  019E                     _TXSTA	set	414
   246  0CAE                     _CFGS	set	3246
   247  0CAF                     _EEPGD	set	3247
   248  0CA8                     _RD	set	3240
   249  0CF3                     _SENDB	set	3315
   250  0CA9                     _WR	set	3241
   251  0CAA                     _WREN	set	3242
   252  0295                     _CCP1AS	set	661
   253  0293                     _CCP1CON	set	659
   254  029A                     _CCP2CON	set	666
   255  0292                     _CCPR1H	set	658
   256  0291                     _CCPR1L	set	657
   257  0299                     _CCPR2H	set	665
   258  0298                     _CCPR2L	set	664
   259  0296                     _PSTR1CON	set	662
   260  0294                     _PWM1CON	set	660
   261  14AF                     _CCP1ASE	set	5295
   262  0313                     _CCP3CON	set	787
   263  031A                     _CCP4CON	set	794
   264  031E                     _CCP5CON	set	798
   265  0312                     _CCPR3H	set	786
   266  0311                     _CCPR3L	set	785
   267  0319                     _CCPR4H	set	793
   268  0318                     _CCPR4L	set	792
   269  031D                     _CCPR5H	set	797
   270  031C                     _CCPR5L	set	796
   271  0417                     _T4CON	set	1047
   272  041E                     _T6CON	set	1054
   273  0415                     _TMR4	set	1045
   274  041C                     _TMR6	set	1052
   275                           
   276                           	psect	nvBANK1
   277  00EF                     __pnvBANK1:	
   278  00EF                     _ui8_ResetMatlab:	
   279  00EF                     	ds	1
   280                           
   281                           	psect	bitbssBANK0
   282  0298                     __pbitbssBANK0:	
   283  0298                     _rising_bemf_flag:	
   284  0298                     	ds	1
   285                           
   286                           	psect	bssBANK0
   287  0048                     __pbssBANK0:	
   288  0048                     _comm_time:	
   289  0048                     	ds	2
   290  004A                     _Cb34_idPWM:	
   291  004A                     	ds	1
   292  004B                     _MotorFlags:	
   293  004B                     	ds	1
   294  004C                     __ELINMIntStatus:	
   295  004C                     	ds	1
   296  004D                     _pt:	
   297  004D                     	ds	1
   298  004E                     _ui8_b_DResB0_c:	
   299  004E                     	ds	1
   300  004F                     _ui8_b_DResLocID_c:	
   301  004F                     	ds	1
   302  0050                     _ui8_duty_cycle_BLDC:	
   303  0050                     	ds	1
   304  0051                     _ui16_Ubat_bldc:	
   305  0051                     	ds	2
   306                           
   307                           	psect	dataBANK0
   308  0054                     __pdataBANK0:	
   309  0054                     _ui8_selected_lid:	
   310  0054                     	ds	1
   311                           
   312                           	psect	bssBANK1
   313  00A0                     __pbssBANK1:	
   314  00A0                     BVH2_Appl_Layer@Cb24_StateCnt:	
   315  00A0                     	ds	2
   316  00A2                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
   317  00A2                     	ds	2
   318  00A4                     _Cb1_StateCnt:	
   319  00A4                     	ds	2
   320  00A6                     _Cb44_StateCnt:	
   321  00A6                     	ds	2
   322  00A8                     _analog_value:	
   323  00A8                     	ds	2
   324  00AA                     _ui16_Capt_Val0:	
   325  00AA                     	ds	2
   326  00AC                     _ui16_Capt_Val1:	
   327  00AC                     	ds	2
   328  00AE                     _ui16_Capt_Val2:	
   329  00AE                     	ds	2
   330  00B0                     _ui16_IPhase_bldc:	
   331  00B0                     	ds	2
   332  00B2                     _ui16_Speed_mat:	
   333  00B2                     	ds	2
   334  00B4                     _ui16_Ubemf_bldc:	
   335  00B4                     	ds	2
   336  00B6                     _ui16_comm_time_max:	
   337  00B6                     	ds	2
   338  00B8                     _ui16_mat_Current:	
   339  00B8                     	ds	2
   340  00BA                     _ui16_phase_advancement:	
   341  00BA                     	ds	2
   342  00BC                     _ui16_speed_fil:	
   343  00BC                     	ds	2
   344  00BE                     _ui16_step_cnt:	
   345  00BE                     	ds	2
   346  00C0                     _ui8_BattVolt_mat:	
   347  00C0                     	ds	2
   348  00C2                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
   349  00C2                     	ds	1
   350  00C3                     BVH2_Appl_Layer@Cb9_StateCnt:	
   351  00C3                     	ds	1
   352  00C4                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
   353  00C4                     	ds	1
   354  00C5                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
   355  00C5                     	ds	1
   356  00C6                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
   357  00C6                     	ds	1
   358  00C7                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
   359  00C7                     	ds	1
   360  00C8                     _Bcnt:	
   361  00C8                     	ds	1
   362  00C9                     _Cb56_odFixedValueSel:	
   363  00C9                     	ds	1
   364  00CA                     _ErrorCode:	
   365  00CA                     	ds	1
   366  00CB                     _SIBFS_Current_Analysis_High_b:	
   367  00CB                     	ds	1
   368  00CC                     _SIBFS_PWM_Detection_b:	
   369  00CC                     	ds	1
   370  00CD                     _SIBFS_Pic_etat_monitor_b:	
   371  00CD                     	ds	1
   372  00CE                     _SIBFS_UbatHandling_b:	
   373  00CE                     	ds	1
   374  00CF                     __ELINMIntMessageBufferPointer:	
   375  00CF                     	ds	1
   376  00D0                     __ELINMIntMessageSize:	
   377  00D0                     	ds	1
   378  00D1                     __ELINMIntReadBack:	
   379  00D1                     	ds	1
   380  00D2                     __ELINMIntStatus1:	
   381  00D2                     	ds	1
   382  00D3                     _bool_CPU_TempAlarm:	
   383  00D3                     	ds	1
   384  00D4                     _bool_ControlLoopMode:	
   385  00D4                     	ds	1
   386  00D5                     _bool_DryRunningAlarm:	
   387  00D5                     	ds	1
   388  00D6                     _bool_HighCurrentAlarm:	
   389  00D6                     	ds	1
   390  00D7                     _bool_MotorStalled:	
   391  00D7                     	ds	1
   392  00D8                     _bool_mat_currAlarm_bldc:	
   393  00D8                     	ds	1
   394  00D9                     _comm_state:	
   395  00D9                     	ds	1
   396  00DA                     _phaseCal:	
   397  00DA                     	ds	1
   398  00DB                     _ui8_BlankingCount:	
   399  00DB                     	ds	1
   400  00DC                     _ui8_IPhase_sel:	
   401  00DC                     	ds	1
   402  00DD                     _ui8_PWM_FreqCnt:	
   403  00DD                     	ds	1
   404  00DE                     _ui8_PWM_dc_mat:	
   405  00DE                     	ds	1
   406  00DF                     _ui8_PWMinDC_sav:	
   407  00DF                     	ds	1
   408  00E0                     _ui8_StartupPWM:	
   409  00E0                     	ds	1
   410  00E1                     _ui8_Task_Cont100ms:	
   411  00E1                     	ds	1
   412  00E2                     _ui8_Task_Cont1ms:	
   413  00E2                     	ds	1
   414  00E3                     _ui8_UPhase_sel:	
   415  00E3                     	ds	1
   416  00E4                     _ui8_duty_cycle_mat:	
   417  00E4                     	ds	1
   418  00E5                     _ui8_error_Flags:	
   419  00E5                     	ds	1
   420  00E6                     _ui8_given_supply:	
   421  00E6                     	ds	1
   422  00E7                     _windowPtr1:	
   423  00E7                     	ds	1
   424                           
   425                           	psect	dataBANK1
   426  00E8                     __pdataBANK1:	
   427  00E8                     _ui16_I_cal_Ph1:	
   428  00E8                     	ds	2
   429  00EA                     _ui16_I_cal_Ph2:	
   430  00EA                     	ds	2
   431  00EC                     _ui16_I_cal_Ph3:	
   432  00EC                     	ds	2
   433  00EE                     _wkpoint:	
   434  00EE                     	ds	1
   435                           
   436                           	psect	bssBANK2
   437  0120                     __pbssBANK2:	
   438  0120                     _ui8_current_cal:	
   439  0120                     	ds	3
   440  0123                     __ELINMIntTFrameMin:	
   441  0123                     	ds	2
   442  0125                     __ELINMIntTHeaderMin:	
   443  0125                     	ds	2
   444  0127                     _sum:	
   445  0127                     	ds	2
   446  0129                     _ui16_IPhase1_bldc:	
   447  0129                     	ds	2
   448  012B                     _ui16_NTC_Temp_bldc_mean:	
   449  012B                     	ds	2
   450  012D                     _ui16_PWM_Freq_mat:	
   451  012D                     	ds	2
   452  012F                     _ui16_fir_Bat_mittel:	
   453  012F                     	ds	2
   454  0131                     _ui16_fir_IPhase_mean:	
   455  0131                     	ds	2
   456  0133                     _ui16_speed_rar:	
   457  0133                     	ds	2
   458  0135                     BVH2_Appl_Layer@Cb19_oDryRun55:	
   459  0135                     	ds	1
   460  0136                     BVH2_Appl_Layer@Cb19_oDryRun66:	
   461  0136                     	ds	1
   462  0137                     BVH2_Appl_Layer@Cb24_RestartCounter:	
   463  0137                     	ds	1
   464  0138                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
   465  0138                     	ds	1
   466  0139                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
   467  0139                     	ds	1
   468  013A                     BVH2_Appl_Layer@Cb51_Counter:	
   469  013A                     	ds	1
   470  013B                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
   471  013B                     	ds	1
   472  013C                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
   473  013C                     	ds	1
   474  013D                     BVH2_Appl_Layer@Cb51_odPumpOff:	
   475  013D                     	ds	1
   476  013E                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
   477  013E                     	ds	1
   478  013F                     _Cb1_RestartCounter:	
   479  013F                     	ds	1
   480  0140                     _Cb1_oCurrentAlarm:	
   481  0140                     	ds	1
   482  0141                     _Cb1_oShutoff:	
   483  0141                     	ds	1
   484  0142                     _Cb34_oPWM_Alarm:	
   485  0142                     	ds	1
   486  0143                     _Cb34_oPWM_SC_Alarm:	
   487  0143                     	ds	1
   488  0144                     _Cb34_odFixedLowValueSel:	
   489  0144                     	ds	1
   490  0145                     _Cb34_odFixedValueSel:	
   491  0145                     	ds	1
   492  0146                     _Cb34_odPumpOff:	
   493  0146                     	ds	1
   494  0147                     _Cb44_oShutoff:	
   495  0147                     	ds	1
   496  0148                     _Cb56_oUbat_Alarm_High:	
   497  0148                     	ds	1
   498  0149                     _Cb56_odPumpOff:	
   499  0149                     	ds	1
   500  014A                     __ELINMIntRXMessageSize:	
   501  014A                     	ds	1
   502  014B                     __ELINMIntSpace:	
   503  014B                     	ds	1
   504  014C                     _bool_CPU_TempRedAlarm:	
   505  014C                     	ds	1
   506  014D                     _bool_PWMin_Freq_err_Alarm:	
   507  014D                     	ds	1
   508  014E                     _bool_PWMin_err_Alarm:	
   509  014E                     	ds	1
   510  014F                     _bool_UbatAlarm:	
   511  014F                     	ds	1
   512  0150                     _bool_start_demand_mat:	
   513  0150                     	ds	1
   514  0151                     _ui8_CompFlag:	
   515  0151                     	ds	1
   516  0152                     _ui8_Duty_Cycle_In_Ratio:	
   517  0152                     	ds	1
   518  0153                     _ui8_Kp_mat:	
   519  0153                     	ds	1
   520  0154                     _ui8_PWMin_failCnt:	
   521  0154                     	ds	1
   522  0155                     _ui8_PWMoutvalue:	
   523  0155                     	ds	1
   524  0156                     _ui8_Pulse_State:	
   525  0156                     	ds	1
   526  0157                     _ui8_Task_Cont3ms:	
   527  0157                     	ds	1
   528  0158                     _ui8_Task_Cont5ms:	
   529  0158                     	ds	1
   530  0159                     _ui8_Ubemf_sel:	
   531  0159                     	ds	1
   532  015A                     _ui8_b_DResB1_c:	
   533  015A                     	ds	1
   534  015B                     _ui8_b_DResB2_c:	
   535  015B                     	ds	1
   536  015C                     _ui8_b_DResB3_c:	
   537  015C                     	ds	1
   538  015D                     _ui8_b_DResB4_c:	
   539  015D                     	ds	1
   540  015E                     _ui8_b_DResServID_c:	
   541  015E                     	ds	1
   542  015F                     _ui8_lastTaskvalue:	
   543  015F                     	ds	1
   544  0160                     _ui8_sampleState:	
   545  0160                     	ds	1
   546  0161                     _ui16_IPhase1_bldc_cal:	
   547  0161                     	ds	2
   548  0163                     _ui16_IPhase2_bldc_cal:	
   549  0163                     	ds	2
   550  0165                     _ui16_IPhase3_bldc_cal:	
   551  0165                     	ds	2
   552                           
   553                           	psect	dataBANK2
   554  0167                     __pdataBANK2:	
   555  0167                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
   556  0167                     	ds	4
   557  016B                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
   558  016B                     	ds	1
   559  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
   560  016C                     	ds	1
   561  016D                     _ict_stamp:	
   562  016D                     	ds	1
   563  016E                     _ui8_failure:	
   564  016E                     	ds	1
   565                           
   566                           	psect	bssBANK3
   567  01A0                     __pbssBANK3:	
   568  01A0                     _B:	
   569  01A0                     	ds	16
   570  01B0                     _my_msg:	
   571  01B0                     	ds	8
   572  01B8                     _checksum:	
   573  01B8                     	ds	6
   574  01BE                     BVH2_Appl_Layer@Cb14_StateCnt:	
   575  01BE                     	ds	2
   576  01C0                     BVH2_Appl_Layer@Cb19_Counter:	
   577  01C0                     	ds	2
   578  01C2                     BVH2_Appl_Layer@Cb24_BadCnt:	
   579  01C2                     	ds	2
   580  01C4                     __ELINMIntRXCRC:	
   581  01C4                     	ds	2
   582  01C6                     __ELINMIntTFrameMax:	
   583  01C6                     	ds	2
   584  01C8                     __ELINMIntTHeaderMax:	
   585  01C8                     	ds	2
   586  01CA                     _filter1:	
   587  01CA                     	ds	2
   588  01CC                     _filter3:	
   589  01CC                     	ds	2
   590  01CE                     _filterTempNTC:	
   591  01CE                     	ds	2
   592  01D0                     _phase_delay_counter:	
   593  01D0                     	ds	2
   594  01D2                     _ui16_IPhase2_bldc:	
   595  01D2                     	ds	2
   596  01D4                     _ui16_IPhase3_bldc:	
   597  01D4                     	ds	2
   598  01D6                     _ui16_NTC_Temp_bldc:	
   599  01D6                     	ds	2
   600  01D8                     _ui16_NTC_Temp_bldc_mean_cal:	
   601  01D8                     	ds	2
   602  01DA                     _ui16_PWM_Freq_In:	
   603  01DA                     	ds	2
   604  01DC                     _ui16_Speed_demand_mat:	
   605  01DC                     	ds	2
   606  01DE                     _ui16_Speed_demand_mat_Max:	
   607  01DE                     	ds	2
   608  01E0                     _ui16_Speed_demand_mat_min:	
   609  01E0                     	ds	2
   610  01E2                     _ui16_Temp_cal:	
   611  01E2                     	ds	2
   612  01E4                     _ui16_mat_inpTemp:	
   613  01E4                     	ds	2
   614  01E6                     _ui8_Ki_mat:	
   615  01E6                     	ds	2
   616  01E8                     _ui8_fixed_start_speed_mat:	
   617  01E8                     	ds	2
   618  01EA                     _ui16_Duty_Cycle_In:	
   619  01EA                     	ds	2
   620                           
   621                           	psect	bssBANK4
   622  0240                     __pbssBANK4:	
   623  0240                     _inputArray1:	
   624  0240                     	ds	16
   625  0250                     __ELINMIntSleepTimeout:	
   626  0250                     	ds	4
   627  0254                     __ELINMIntMessageBuffer:	
   628  0254                     	ds	11
   629                           
   630                           	psect	clrtext
   631  081C                     clear_ram:	
   632                           ;	Called with FSR0 containing the base address, and
   633                           ;	WREG with the size to clear
   634                           
   635  081C  0064               	clrwdt	;clear the watchdog before getting into this loop
   636  081D                     clrloop:	
   637  081D  0180               	clrf	0	;clear RAM location pointed to by FSR
   638  081E  3101               	addfsr 0,1
   639  081F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   640  0820  281D               	goto	clrloop	;have we reached the end yet?
   641  0821  3400               	retlw	0	;all done for this memory range, return
   642                           
   643                           	psect	cstackBANK4
   644  0220                     __pcstackBANK4:	
   645  0220                     EOL@_dcnt:	
   646  0220                     _BVH2_Appl_Layer$20288:	
   647                           ; 1 bytes @ 0x0
   648                           
   649                           
   650                           ; 4 bytes @ 0x0
   651  0220                     	ds	1
   652  0221                     EOL@_dcnt_9400:	
   653                           
   654                           ; 1 bytes @ 0x1
   655  0221                     	ds	1
   656  0222                     EOL@_dcnt_9401:	
   657                           
   658                           ; 1 bytes @ 0x2
   659  0222                     	ds	1
   660  0223                     EOL@_dcnt_9402:	
   661                           
   662                           ; 1 bytes @ 0x3
   663  0223                     	ds	1
   664  0224                     EOL@_dcnt_9403:	
   665  0224                     _BVH2_Appl_Layer$20285:	
   666                           ; 1 bytes @ 0x4
   667                           
   668                           
   669                           ; 2 bytes @ 0x4
   670  0224                     	ds	1
   671  0225                     EOL@_dcnt_9404:	
   672                           
   673                           ; 1 bytes @ 0x5
   674  0225                     	ds	1
   675  0226                     EOL@_dcnt_9405:	
   676  0226                     _BVH2_Appl_Layer$20287:	
   677                           ; 1 bytes @ 0x6
   678                           
   679                           
   680                           ; 2 bytes @ 0x6
   681  0226                     	ds	1
   682  0227                     EOL@_dcnt_9406:	
   683                           
   684                           ; 1 bytes @ 0x7
   685  0227                     	ds	1
   686  0228                     EOL@_dcnt_9407:	
   687  0228                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
   688                           ; 1 bytes @ 0x8
   689                           
   690                           
   691                           ; 1 bytes @ 0x8
   692  0228                     	ds	1
   693  0229                     EOL@_dcnt_9408:	
   694  0229                     _BVH2_Appl_Layer$20277:	
   695                           ; 1 bytes @ 0x9
   696                           
   697                           
   698                           ; 1 bytes @ 0x9
   699  0229                     	ds	1
   700  022A                     EOL@_dcnt_9409:	
   701  022A                     _BVH2_Appl_Layer$20278:	
   702                           ; 1 bytes @ 0xA
   703                           
   704                           
   705                           ; 1 bytes @ 0xA
   706  022A                     	ds	1
   707  022B                     EOL@_dcnt_9410:	
   708  022B                     _BVH2_Appl_Layer$20279:	
   709                           ; 1 bytes @ 0xB
   710                           
   711                           
   712                           ; 1 bytes @ 0xB
   713  022B                     	ds	1
   714  022C                     EOL@_dcnt_9411:	
   715  022C                     _BVH2_Appl_Layer$20280:	
   716                           ; 1 bytes @ 0xC
   717                           
   718                           
   719                           ; 1 bytes @ 0xC
   720  022C                     	ds	1
   721  022D                     EOL@_dcnt_9412:	
   722  022D                     _BVH2_Appl_Layer$20281:	
   723                           ; 1 bytes @ 0xD
   724                           
   725                           
   726                           ; 1 bytes @ 0xD
   727  022D                     	ds	1
   728  022E                     EOL@_dcnt_9413:	
   729  022E                     _BVH2_Appl_Layer$20282:	
   730                           ; 1 bytes @ 0xE
   731                           
   732                           
   733                           ; 1 bytes @ 0xE
   734  022E                     	ds	1
   735  022F                     EOL@_dcnt_9414:	
   736                           
   737                           ; 1 bytes @ 0xF
   738  022F                     	ds	1
   739  0230                     EOL@_dcnt_9415:	
   740                           
   741                           ; 1 bytes @ 0x10
   742  0230                     	ds	1
   743  0231                     EOL@_dcnt_9416:	
   744  0231                     BVH2_Appl_Layer@Sb2_Switch5:	
   745                           ; 1 bytes @ 0x11
   746                           
   747                           
   748                           ; 2 bytes @ 0x11
   749  0231                     	ds	1
   750  0232                     EOL@ui8_b_DResB5_RD:	
   751                           
   752                           ; 1 bytes @ 0x12
   753  0232                     	ds	1
   754  0233                     EOL@ui8_b_DResB4_RD:	
   755  0233                     BVH2_Appl_Layer@Cb24_Reset:	
   756                           ; 1 bytes @ 0x13
   757                           
   758                           
   759                           ; 1 bytes @ 0x13
   760  0233                     	ds	1
   761  0234                     EOL@ui8_b_DResB0_RD:	
   762  0234                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
   763                           ; 1 bytes @ 0x14
   764                           
   765                           
   766                           ; 1 bytes @ 0x14
   767  0234                     	ds	1
   768  0235                     EOL@ui8_b_DResB1_RD:	
   769  0235                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
   770                           ; 1 bytes @ 0x15
   771                           
   772                           
   773                           ; 1 bytes @ 0x15
   774  0235                     	ds	1
   775  0236                     EOL@ui8_b_DResB2_RD:	
   776  0236                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
   777                           ; 1 bytes @ 0x16
   778                           
   779                           
   780                           ; 1 bytes @ 0x16
   781  0236                     	ds	1
   782  0237                     EOL@ui8_b_DResB3_RD:	
   783  0237                     BVH2_Appl_Layer@Sb2_Error:	
   784                           ; 1 bytes @ 0x17
   785                           
   786                           
   787                           ; 2 bytes @ 0x17
   788  0237                     	ds	2
   789  0239                     BVH2_Appl_Layer@Sb2_Switch2:	
   790                           
   791                           ; 2 bytes @ 0x19
   792  0239                     	ds	2
   793  023B                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
   794                           
   795                           ; 1 bytes @ 0x1B
   796  023B                     	ds	1
   797  023C                     BVH2_Appl_Layer@Sb3_Sum1:	
   798                           
   799                           ; 2 bytes @ 0x1C
   800  023C                     	ds	2
   801  023E                     BVH2_Appl_Layer@Sb4_PI_sum:	
   802                           
   803                           ; 2 bytes @ 0x1E
   804  023E                     	ds	2
   805                           
   806                           	psect	cstackCOMMON
   807  0070                     __pcstackCOMMON:	
   808  0070                     ?_InitMotorRun:	
   809  0070                     ?_commutate:	
   810                           ; 0 bytes @ 0x0
   811                           
   812  0070                     ?_PWM_Write_Out:	
   813                           ; 0 bytes @ 0x0
   814                           
   815  0070                     ?_NegativeAnswer:	
   816                           ; 0 bytes @ 0x0
   817                           
   818  0070                     ?_PWM_CTRL:	
   819                           ; 0 bytes @ 0x0
   820                           
   821  0070                     ??_PWM_CTRL:	
   822                           ; 0 bytes @ 0x0
   823                           
   824  0070                     ?_ELINMIntHandler:	
   825                           ; 0 bytes @ 0x0
   826                           
   827  0070                     ?_interrupt_PWMCapture:	
   828                           ; 0 bytes @ 0x0
   829                           
   830  0070                     ??_interrupt_PWMCapture:	
   831                           ; 0 bytes @ 0x0
   832                           
   833  0070                     ?_Oscill_Source_Block:	
   834                           ; 0 bytes @ 0x0
   835                           
   836  0070                     ?_timer_init:	
   837                           ; 0 bytes @ 0x0
   838                           
   839  0070                     ?_PWM_Capture_init:	
   840                           ; 0 bytes @ 0x0
   841                           
   842  0070                     ?_clear_timer:	
   843                           ; 0 bytes @ 0x0
   844                           
   845  0070                     ?_BVH2_Appl_Layer:	
   846                           ; 0 bytes @ 0x0
   847                           
   848  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
   849                           ; 0 bytes @ 0x0
   850                           
   851  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
   852                           ; 0 bytes @ 0x0
   853                           
   854  0070                     ?_Cb56_UbatHandling_node_fcn2:	
   855                           ; 0 bytes @ 0x0
   856                           
   857  0070                     ?_Cb1_Current_An___High_node_fcn1:	
   858                           ; 0 bytes @ 0x0
   859                           
   860  0070                     ?_ADC_Init:	
   861                           ; 0 bytes @ 0x0
   862                           
   863  0070                     ?_ADC_Wait:	
   864                           ; 0 bytes @ 0x0
   865                           
   866  0070                     ?_FILTER_Init:	
   867                           ; 0 bytes @ 0x0
   868                           
   869  0070                     ?_FILTER_Ubat:	
   870                           ; 0 bytes @ 0x0
   871                           
   872  0070                     ?_FILTER_IPhase:	
   873                           ; 0 bytes @ 0x0
   874                           
   875  0070                     ?_FILTER_Temp:	
   876                           ; 0 bytes @ 0x0
   877                           
   878  0070                     ?_Get_Analog_Value:	
   879                           ; 0 bytes @ 0x0
   880                           
   881  0070                     ?_BLDCWait:	
   882                           ; 0 bytes @ 0x0
   883                           
   884  0070                     ??_BLDCWait:	
   885                           ; 0 bytes @ 0x0
   886                           
   887  0070                     ?_init_bldc:	
   888                           ; 0 bytes @ 0x0
   889                           
   890  0070                     ?_interrrupt_bldc:	
   891                           ; 0 bytes @ 0x0
   892                           
   893  0070                     ?_InitMotorStop:	
   894                           ; 0 bytes @ 0x0
   895                           
   896  0070                     ?_DiagInit:	
   897                           ; 0 bytes @ 0x0
   898                           
   899  0070                     ?_SetDiagAlarm:	
   900                           ; 0 bytes @ 0x0
   901                           
   902  0070                     ?_EOL:	
   903                           ; 0 bytes @ 0x0
   904                           
   905  0070                     ?_Task1ms:	
   906                           ; 0 bytes @ 0x0
   907                           
   908  0070                     ??_Task1ms:	
   909                           ; 0 bytes @ 0x0
   910                           
   911  0070                     ?_interrupt_handler:	
   912                           ; 0 bytes @ 0x0
   913                           
   914  0070                     ?_Receive_Diag:	
   915                           ; 0 bytes @ 0x0
   916                           
   917  0070                     ?_EnableMCP201:	
   918                           ; 0 bytes @ 0x0
   919                           
   920  0070                     ?__ELINMIntResetProtocol:	
   921                           ; 0 bytes @ 0x0
   922                           
   923  0070                     ??__ELINMIntResetProtocol:	
   924                           ; 0 bytes @ 0x0
   925                           
   926  0070                     ?_I_calibrationInit:	
   927                           ; 0 bytes @ 0x0
   928                           
   929  0070                     ?_init_ports:	
   930                           ; 0 bytes @ 0x0
   931                           
   932  0070                     ?_system_init:	
   933                           ; 0 bytes @ 0x0
   934                           
   935  0070                     ?_main:	
   936                           ; 0 bytes @ 0x0
   937                           
   938  0070                     ?i1_ADC_Wait:	
   939                           ; 0 bytes @ 0x0
   940                           
   941  0070                     ??i1_ADC_Wait:	
   942                           ; 0 bytes @ 0x0
   943                           
   944  0070                     ?i1_commutate:	
   945                           ; 0 bytes @ 0x0
   946                           
   947  0070                     ?_read_eeprom_data:	
   948                           ; 0 bytes @ 0x0
   949                           
   950  0070                     ?_PWMReadDC:	
   951                           ; 1 bytes @ 0x0
   952                           
   953  0070                     ?__ELINMIntInitialize:	
   954                           ; 1 bytes @ 0x0
   955                           
   956  0070                     ?__ELINMIntCalcIDParity:	
   957                           ; 1 bytes @ 0x0
   958                           
   959  0070                     ?i1_ADC_Read:	
   960                           ; 1 bytes @ 0x0
   961                           
   962  0070                     ?i1___wmul:	
   963                           ; 2 bytes @ 0x0
   964                           
   965  0070                     ?i1___lwdiv:	
   966                           ; 2 bytes @ 0x0
   967                           
   968  0070                     __ELINMIntResetProtocol@code:	
   969                           ; 2 bytes @ 0x0
   970                           
   971  0070                     i1___wmul@multiplier:	
   972                           ; 1 bytes @ 0x0
   973                           
   974  0070                     i1___lwdiv@divisor:	
   975                           ; 2 bytes @ 0x0
   976                           
   977                           
   978                           ; 2 bytes @ 0x0
   979  0070                     	ds	1
   980  0071                     ??_ELINMIntHandler:	
   981                           
   982                           ; 0 bytes @ 0x1
   983  0071                     	ds	1
   984  0072                     ??i1_ADC_Read:	
   985  0072                     i1ADC_Read@i:	
   986                           ; 0 bytes @ 0x2
   987                           
   988  0072                     i1___wmul@multiplicand:	
   989                           ; 1 bytes @ 0x2
   990                           
   991  0072                     i1___lwdiv@dividend:	
   992                           ; 2 bytes @ 0x2
   993                           
   994                           
   995                           ; 2 bytes @ 0x2
   996  0072                     	ds	2
   997  0074                     ??i1___wmul:	
   998  0074                     ??i1___lwdiv:	
   999                           ; 0 bytes @ 0x4
  1000                           
  1001  0074                     i1___lwdiv@counter:	
  1002                           ; 0 bytes @ 0x4
  1003                           
  1004  0074                     i1___wmul@product:	
  1005                           ; 1 bytes @ 0x4
  1006                           
  1007                           
  1008                           ; 2 bytes @ 0x4
  1009  0074                     	ds	1
  1010  0075                     i1___lwdiv@quotient:	
  1011                           
  1012                           ; 2 bytes @ 0x5
  1013  0075                     	ds	2
  1014  0077                     ??_interrrupt_bldc:	
  1015                           
  1016                           ; 0 bytes @ 0x7
  1017  0077                     	ds	2
  1018  0079                     interrrupt_bldc@ui32_tmp:	
  1019                           
  1020                           ; 4 bytes @ 0x9
  1021  0079                     	ds	4
  1022  007D                     ??_interrupt_handler:	
  1023                           
  1024                           	psect	cstackBANK0
  1025  0020                     __pcstackBANK0:	
  1026                           ; 0 bytes @ 0xD
  1027                           
  1028  0020                     ??i1_commutate:	
  1029                           
  1030                           ; 0 bytes @ 0x0
  1031  0020                     	ds	12
  1032  002C                     ??_PWM_Write_Out:	
  1033  002C                     ??_read_eeprom_data:	
  1034                           ; 0 bytes @ 0xC
  1035                           
  1036  002C                     ??_Oscill_Source_Block:	
  1037                           ; 0 bytes @ 0xC
  1038                           
  1039  002C                     ??_PWM_Capture_init:	
  1040                           ; 0 bytes @ 0xC
  1041                           
  1042  002C                     ??_clear_timer:	
  1043                           ; 0 bytes @ 0xC
  1044                           
  1045  002C                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  1046                           ; 0 bytes @ 0xC
  1047                           
  1048  002C                     ??_Cb34_PWM_Detection_node_fcn1:	
  1049                           ; 0 bytes @ 0xC
  1050                           
  1051  002C                     ??_Cb56_UbatHandling_node_fcn2:	
  1052                           ; 0 bytes @ 0xC
  1053                           
  1054  002C                     ??_Cb1_Current_An___High_node_fcn1:	
  1055                           ; 0 bytes @ 0xC
  1056                           
  1057  002C                     ??_ADC_Init:	
  1058                           ; 0 bytes @ 0xC
  1059                           
  1060  002C                     ??_ADC_Wait:	
  1061                           ; 0 bytes @ 0xC
  1062                           
  1063  002C                     ??_FILTER_Ubat:	
  1064                           ; 0 bytes @ 0xC
  1065                           
  1066  002C                     ??_FILTER_IPhase:	
  1067                           ; 0 bytes @ 0xC
  1068                           
  1069  002C                     ??_FILTER_Temp:	
  1070                           ; 0 bytes @ 0xC
  1071                           
  1072  002C                     ??_InitMotorStop:	
  1073                           ; 0 bytes @ 0xC
  1074                           
  1075  002C                     ??_EnableMCP201:	
  1076                           ; 0 bytes @ 0xC
  1077                           
  1078  002C                     ??__ELINMIntInitialize:	
  1079                           ; 0 bytes @ 0xC
  1080                           
  1081  002C                     ??__ELINMIntCalcIDParity:	
  1082                           ; 0 bytes @ 0xC
  1083                           
  1084  002C                     ?__ELINMIntGetPointer:	
  1085                           ; 0 bytes @ 0xC
  1086                           
  1087  002C                     ?_ADC_Read:	
  1088                           ; 1 bytes @ 0xC
  1089                           
  1090  002C                     ?_cksum:	
  1091                           ; 2 bytes @ 0xC
  1092                           
  1093  002C                     ?___wmul:	
  1094                           ; 2 bytes @ 0xC
  1095                           
  1096  002C                     ?___lwdiv:	
  1097                           ; 2 bytes @ 0xC
  1098                           
  1099  002C                     ?___tmul:	
  1100                           ; 2 bytes @ 0xC
  1101                           
  1102  002C                     ?___lmul:	
  1103                           ; 3 bytes @ 0xC
  1104                           
  1105  002C                     ?___aldiv:	
  1106                           ; 4 bytes @ 0xC
  1107                           
  1108  002C                     read_eeprom_data@ui8_adress:	
  1109                           ; 4 bytes @ 0xC
  1110                           
  1111  002C                     EnableMCP201@_dcnt:	
  1112                           ; 1 bytes @ 0xC
  1113                           
  1114  002C                     __ELINMIntCalcIDParity@ELINM_idtr:	
  1115                           ; 1 bytes @ 0xC
  1116                           
  1117  002C                     __ELINMIntGetPointer@_ELINMInt_position:	
  1118                           ; 1 bytes @ 0xC
  1119                           
  1120  002C                     PWM_Capture_init@ui8_CCP_Nb:	
  1121                           ; 1 bytes @ 0xC
  1122                           
  1123  002C                     PWM_Write_Out@ui8_DutyCycle_Out:	
  1124                           ; 1 bytes @ 0xC
  1125                           
  1126  002C                     clear_timer@ui8_TmrNb:	
  1127                           ; 1 bytes @ 0xC
  1128                           
  1129  002C                     ___wmul@multiplier:	
  1130                           ; 1 bytes @ 0xC
  1131                           
  1132  002C                     ___lwdiv@divisor:	
  1133                           ; 2 bytes @ 0xC
  1134                           
  1135  002C                     ___tmul@multiplier:	
  1136                           ; 2 bytes @ 0xC
  1137                           
  1138  002C                     ___lmul@multiplier:	
  1139                           ; 3 bytes @ 0xC
  1140                           
  1141  002C                     ___aldiv@divisor:	
  1142                           ; 4 bytes @ 0xC
  1143                           
  1144                           
  1145                           ; 4 bytes @ 0xC
  1146  002C                     	ds	1
  1147  002D                     ??__ELINMIntGetPointer:	
  1148  002D                     ?__ELINMIntSendMessage:	
  1149                           ; 0 bytes @ 0xD
  1150                           
  1151  002D                     ??_timer_init:	
  1152                           ; 0 bytes @ 0xD
  1153                           
  1154  002D                     ??_DiagInit:	
  1155                           ; 0 bytes @ 0xD
  1156                           
  1157  002D                     ??_SetDiagAlarm:	
  1158                           ; 0 bytes @ 0xD
  1159                           
  1160  002D                     read_eeprom_data@ui8_adress_data:	
  1161                           ; 0 bytes @ 0xD
  1162                           
  1163  002D                     EnableMCP201@_dcnt_15776:	
  1164                           ; 1 bytes @ 0xD
  1165                           
  1166  002D                     __ELINMIntSendMessage@_ELINM_size:	
  1167                           ; 1 bytes @ 0xD
  1168                           
  1169  002D                     __ELINMIntGetPointer@_ELINMInt_tag:	
  1170                           ; 1 bytes @ 0xD
  1171                           
  1172  002D                     timer_init@ui8_TmrNb:	
  1173                           ; 1 bytes @ 0xD
  1174                           
  1175                           
  1176                           ; 1 bytes @ 0xD
  1177  002D                     	ds	1
  1178  002E                     ??_ADC_Read:	
  1179  002E                     ??_cksum:	
  1180                           ; 0 bytes @ 0xE
  1181                           
  1182  002E                     ??_init_ports:	
  1183                           ; 0 bytes @ 0xE
  1184                           
  1185  002E                     ADC_Read@i:	
  1186                           ; 0 bytes @ 0xE
  1187                           
  1188  002E                     EnableMCP201@_dcnt_15777:	
  1189                           ; 1 bytes @ 0xE
  1190                           
  1191  002E                     cksum@counter:	
  1192                           ; 1 bytes @ 0xE
  1193                           
  1194  002E                     __ELINMIntSendMessage@_ELINM_fmin:	
  1195                           ; 2 bytes @ 0xE
  1196                           
  1197  002E                     ___wmul@multiplicand:	
  1198                           ; 2 bytes @ 0xE
  1199                           
  1200  002E                     ___lwdiv@dividend:	
  1201                           ; 2 bytes @ 0xE
  1202                           
  1203                           
  1204                           ; 2 bytes @ 0xE
  1205  002E                     	ds	1
  1206  002F                     ??_FILTER_Init:	
  1207  002F                     ??_I_calibrationInit:	
  1208                           ; 0 bytes @ 0xF
  1209                           
  1210  002F                     ___tmul@multiplicand:	
  1211                           ; 0 bytes @ 0xF
  1212                           
  1213                           
  1214                           ; 3 bytes @ 0xF
  1215  002F                     	ds	1
  1216  0030                     ??___wmul:	
  1217  0030                     ??___lwdiv:	
  1218                           ; 0 bytes @ 0x10
  1219                           
  1220  0030                     ___lwdiv@counter:	
  1221                           ; 0 bytes @ 0x10
  1222                           
  1223  0030                     cksum@sum:	
  1224                           ; 1 bytes @ 0x10
  1225                           
  1226  0030                     __ELINMIntSendMessage@_ELINM_fmax:	
  1227                           ; 2 bytes @ 0x10
  1228                           
  1229  0030                     ___wmul@product:	
  1230                           ; 2 bytes @ 0x10
  1231                           
  1232  0030                     ___lmul@multiplicand:	
  1233                           ; 2 bytes @ 0x10
  1234                           
  1235  0030                     ___aldiv@dividend:	
  1236                           ; 4 bytes @ 0x10
  1237                           
  1238                           
  1239                           ; 4 bytes @ 0x10
  1240  0030                     	ds	1
  1241  0031                     ___lwdiv@quotient:	
  1242                           
  1243                           ; 2 bytes @ 0x11
  1244  0031                     	ds	1
  1245  0032                     ??_commutate:	
  1246  0032                     ??__ELINMIntSendMessage:	
  1247                           ; 0 bytes @ 0x12
  1248                           
  1249  0032                     ??___tmul:	
  1250                           ; 0 bytes @ 0x12
  1251                           
  1252  0032                     ?___awdiv:	
  1253                           ; 0 bytes @ 0x12
  1254                           
  1255  0032                     __ELINMIntSendMessage@_ELINM_idr:	
  1256                           ; 2 bytes @ 0x12
  1257                           
  1258  0032                     cksum@addr:	
  1259                           ; 1 bytes @ 0x12
  1260                           
  1261  0032                     ___awdiv@divisor:	
  1262                           ; 2 bytes @ 0x12
  1263                           
  1264  0032                     ___tmul@product:	
  1265                           ; 2 bytes @ 0x12
  1266                           
  1267                           
  1268                           ; 3 bytes @ 0x12
  1269  0032                     	ds	1
  1270  0033                     ?_write_eeprom_data:	
  1271  0033                     write_eeprom_data@ui8_adress_data:	
  1272                           ; 0 bytes @ 0x13
  1273                           
  1274  0033                     __ELINMIntSendMessage@_ELINM_tid:	
  1275                           ; 1 bytes @ 0x13
  1276                           
  1277                           
  1278                           ; 1 bytes @ 0x13
  1279  0033                     	ds	1
  1280  0034                     ??_write_eeprom_data:	
  1281  0034                     ??___lmul:	
  1282                           ; 0 bytes @ 0x14
  1283                           
  1284  0034                     ??___aldiv:	
  1285                           ; 0 bytes @ 0x14
  1286                           
  1287  0034                     write_eeprom_data@ui8_adress:	
  1288                           ; 0 bytes @ 0x14
  1289                           
  1290  0034                     ___aldiv@counter:	
  1291                           ; 1 bytes @ 0x14
  1292                           
  1293  0034                     __ELINMIntSendMessage@_ELINM_chk:	
  1294                           ; 1 bytes @ 0x14
  1295                           
  1296  0034                     ___awdiv@dividend:	
  1297                           ; 2 bytes @ 0x14
  1298                           
  1299  0034                     ___lmul@product:	
  1300                           ; 2 bytes @ 0x14
  1301                           
  1302                           
  1303                           ; 4 bytes @ 0x14
  1304  0034                     	ds	1
  1305  0035                     ?___ltdiv:	
  1306  0035                     ___aldiv@sign:	
  1307                           ; 3 bytes @ 0x15
  1308                           
  1309  0035                     ___ltdiv@divisor:	
  1310                           ; 1 bytes @ 0x15
  1311                           
  1312                           
  1313                           ; 3 bytes @ 0x15
  1314  0035                     	ds	1
  1315  0036                     ??___awdiv:	
  1316  0036                     __ELINMIntSendMessage@_ELINM_i:	
  1317                           ; 0 bytes @ 0x16
  1318                           
  1319  0036                     ___awdiv@counter:	
  1320                           ; 1 bytes @ 0x16
  1321                           
  1322  0036                     ___aldiv@quotient:	
  1323                           ; 1 bytes @ 0x16
  1324                           
  1325                           
  1326                           ; 4 bytes @ 0x16
  1327  0036                     	ds	1
  1328  0037                     ?_Transmit_LIN_8Bytes:	
  1329  0037                     ?__ELINMIntReceiveMessage:	
  1330                           ; 0 bytes @ 0x17
  1331                           
  1332  0037                     Transmit_LIN_8Bytes@B0:	
  1333                           ; 0 bytes @ 0x17
  1334                           
  1335  0037                     __ELINMIntReceiveMessage@_ELINM_id:	
  1336                           ; 1 bytes @ 0x17
  1337                           
  1338  0037                     ___awdiv@sign:	
  1339                           ; 1 bytes @ 0x17
  1340                           
  1341                           
  1342                           ; 1 bytes @ 0x17
  1343  0037                     	ds	1
  1344  0038                     ??_Get_Analog_Value:	
  1345  0038                     Transmit_LIN_8Bytes@B1:	
  1346                           ; 0 bytes @ 0x18
  1347                           
  1348  0038                     __ELINMIntReceiveMessage@_ELINM_size:	
  1349                           ; 1 bytes @ 0x18
  1350                           
  1351  0038                     ___awdiv@quotient:	
  1352                           ; 1 bytes @ 0x18
  1353                           
  1354  0038                     ___ltdiv@dividend:	
  1355                           ; 2 bytes @ 0x18
  1356                           
  1357                           
  1358                           ; 3 bytes @ 0x18
  1359  0038                     	ds	1
  1360  0039                     ??__ELINMIntReceiveMessage:	
  1361  0039                     Transmit_LIN_8Bytes@B2:	
  1362                           ; 0 bytes @ 0x19
  1363                           
  1364  0039                     __ELINMIntReceiveMessage@_ELINM_tag:	
  1365                           ; 1 bytes @ 0x19
  1366                           
  1367                           
  1368                           ; 1 bytes @ 0x19
  1369  0039                     	ds	1
  1370  003A                     ??_BVH2_Appl_Layer:	
  1371  003A                     ??_Receive_Diag:	
  1372                           ; 0 bytes @ 0x1A
  1373                           
  1374  003A                     Transmit_LIN_8Bytes@B3:	
  1375                           ; 0 bytes @ 0x1A
  1376                           
  1377                           
  1378                           ; 1 bytes @ 0x1A
  1379  003A                     	ds	1
  1380  003B                     ??___ltdiv:	
  1381  003B                     Transmit_LIN_8Bytes@B4:	
  1382                           ; 0 bytes @ 0x1B
  1383                           
  1384  003B                     Receive_Diag@id:	
  1385                           ; 1 bytes @ 0x1B
  1386                           
  1387  003B                     ___ltdiv@quotient:	
  1388                           ; 1 bytes @ 0x1B
  1389                           
  1390                           
  1391                           ; 3 bytes @ 0x1B
  1392  003B                     	ds	1
  1393  003C                     Transmit_LIN_8Bytes@B5:	
  1394                           
  1395                           ; 1 bytes @ 0x1C
  1396  003C                     	ds	1
  1397  003D                     Transmit_LIN_8Bytes@B6:	
  1398                           
  1399                           ; 1 bytes @ 0x1D
  1400  003D                     	ds	1
  1401  003E                     ??_InitMotorRun:	
  1402  003E                     ??_init_bldc:	
  1403                           ; 0 bytes @ 0x1E
  1404                           
  1405  003E                     ??_system_init:	
  1406                           ; 0 bytes @ 0x1E
  1407                           
  1408  003E                     Transmit_LIN_8Bytes@B7:	
  1409                           ; 0 bytes @ 0x1E
  1410                           
  1411  003E                     ___ltdiv@counter:	
  1412                           ; 1 bytes @ 0x1E
  1413                           
  1414                           
  1415                           ; 1 bytes @ 0x1E
  1416  003E                     	ds	1
  1417  003F                     ??_Transmit_LIN_8Bytes:	
  1418  003F                     ??_PWMReadDC:	
  1419                           ; 0 bytes @ 0x1F
  1420                           
  1421  003F                     Transmit_LIN_8Bytes@ID:	
  1422                           ; 0 bytes @ 0x1F
  1423                           
  1424                           
  1425                           ; 1 bytes @ 0x1F
  1426  003F                     	ds	1
  1427  0040                     ??_NegativeAnswer:	
  1428  0040                     NegativeAnswer@LID:	
  1429                           ; 0 bytes @ 0x20
  1430                           
  1431                           
  1432                           ; 1 bytes @ 0x20
  1433  0040                     	ds	1
  1434  0041                     ??_EOL:	
  1435                           
  1436                           ; 0 bytes @ 0x21
  1437  0041                     	ds	3
  1438  0044                     ??_main:	
  1439                           
  1440                           ; 0 bytes @ 0x24
  1441  0044                     	ds	4
  1442                           
  1443                           	psect	text2029
  1444  0856                     __ptext2029:	
  1445 ;; =============== function _main ends ============
  1446                           
  1447                           
  1448 ;; *************** function _system_init *****************
  1449 ;; Defined at:
  1450 ;;		line 537 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\main.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;		None
  1455 ;; Return value:  Size  Location     Type
  1456 ;;		None               void
  1457 ;; Registers used:
  1458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 17F/0
  1461 ;;		On exit  : 1F/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1464 ;;      Params:         0       0       0       0       0       0       0       0
  1465 ;;      Locals:         0       0       0       0       0       0       0       0
  1466 ;;      Temps:          0       0       0       0       0       0       0       0
  1467 ;;      Totals:         0       0       0       0       0       0       0       0
  1468 ;;Total ram usage:        0 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:    8
  1471 ;; This function calls:
  1472 ;;		_init_ports
  1473 ;;		_EnableMCP201
  1474 ;;		__ELINMIntInitialize
  1475 ;;		_Oscill_Source_Block
  1476 ;;		_timer_init
  1477 ;;		_PWM_Capture_init
  1478 ;;		_ADC_Init
  1479 ;;		_DiagInit
  1480 ;;		_FILTER_Init
  1481 ;;		_I_calibrationInit
  1482 ;;		_init_bldc
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487  0856                     _system_init:	
  1488                           
  1489                           ;main.c: 539: OPTION_REG = 0b10000001;
  1490                           
  1491                           ; Regs used in _system_init: [wreg-status,0+pclath+cstack]
  1492  0856  3081               	movlw	129
  1493  0857  0021               	movlb	1	; select bank1
  1494  0858  0095               	movwf	21	;volatile
  1495                           
  1496                           ;main.c: 548: ui8_ResetMatlab = 1;
  1497  0859  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  1498  085A  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  1499                           
  1500                           ;main.c: 549: GIE = 0;
  1501  085B  138B               	bcf	11,7
  1502                           
  1503                           ;main.c: 550: INTCON = 0;
  1504  085C  018B               	clrf	11	;volatile
  1505                           
  1506                           ;main.c: 551: PIE1 = 0;
  1507  085D  0191               	clrf	17	;volatile
  1508                           
  1509                           ;main.c: 552: PIE2 = 0;
  1510  085E  0192               	clrf	18	;volatile
  1511                           
  1512                           ;main.c: 555: ui16_Timer_VaL1 = 0;
  1513  085F  0193               	clrf	19	;volatile
  1514                           
  1515                           ;main.c: 556: ui8_Task_Cont3ms = 0;
  1516  0860  0022               	movlb	2	; select bank2
  1517  0861  01D7               	clrf	_ui8_Task_Cont3ms^(0+256)
  1518                           
  1519                           ;main.c: 557: ui8_Task_Cont5ms = 0;
  1520  0862  01D8               	clrf	_ui8_Task_Cont5ms^(0+256)
  1521                           
  1522                           ;main.c: 561: ui8_Sync_Cont10ms = 0;
  1523  0863  0021               	movlb	1	; select bank1
  1524  0864  3049               	movlw	73
  1525  0865  01E1               	clrf	_ui8_Task_Cont100ms^(0+128)
  1526                           
  1527                           ;main.c: 563: ui16_dryRun_Thresh = 73;
  1528  0866  0023               	movlb	3	; select bank3
  1529  0867  00EE               	movwf	_ui16_dryRun_Thresh^(0+384)
  1530  0868  30CD               	movlw	205
  1531  0869  01EF               	clrf	(_ui16_dryRun_Thresh+1)^(0+384)
  1532                           
  1533                           ;main.c: 564: ui16_Current_Thresh = 205;
  1534  086A  00EC               	movwf	_ui16_Current_Thresh^(0+384)
  1535  086B  01ED               	clrf	(_ui16_Current_Thresh+1)^(0+384)
  1536                           
  1537                           ;main.c: 566: init_ports( );
  1538  086C  216C  3188         	fcall	_init_ports
  1539                           
  1540                           ;main.c: 570: EnableMCP201( );
  1541  086E  20D1  3188         	fcall	_EnableMCP201
  1542                           
  1543                           ;main.c: 571: _ELINMIntInitialize( );
  1544  0870  20EC  3188         	fcall	__ELINMIntInitialize
  1545                           
  1546                           ;main.c: 577: Oscill_Source_Block( );
  1547  0872  2104  3188         	fcall	_Oscill_Source_Block
  1548                           
  1549                           ;main.c: 578: timer_init( 1 );
  1550  0874  3001               	movlw	1
  1551  0875  208F  3188         	fcall	_timer_init
  1552                           
  1553                           ;main.c: 579: timer_init( 4 );
  1554  0877  3004               	movlw	4
  1555  0878  208F  3188         	fcall	_timer_init
  1556                           
  1557                           ;main.c: 580: timer_init( 6 );
  1558  087A  3006               	movlw	6
  1559  087B  208F  3188         	fcall	_timer_init
  1560                           
  1561                           ;main.c: 583: PWM_Capture_init( 5 );
  1562  087D  3005               	movlw	5
  1563  087E  210A  3188         	fcall	_PWM_Capture_init
  1564                           
  1565                           ;main.c: 584: ADC_Init( );
  1566  0880  20C8  3188         	fcall	_ADC_Init
  1567                           
  1568                           ;main.c: 585: DiagInit( );
  1569  0882  2160  3188         	fcall	_DiagInit
  1570                           
  1571                           ;main.c: 586: FILTER_Init( );
  1572  0884  218C  3188         	fcall	_FILTER_Init
  1573                           
  1574                           ;main.c: 589: ui16_Temp_cal = 0;
  1575  0886  0023               	movlb	3	; select bank3
  1576  0887  01E2               	clrf	_ui16_Temp_cal^(0+384)
  1577  0888  01E3               	clrf	(_ui16_Temp_cal+1)^(0+384)
  1578                           
  1579                           ;main.c: 599: I_calibrationInit();
  1580  0889  21A4  3188         	fcall	_I_calibrationInit
  1581                           
  1582                           ;main.c: 601: init_bldc( );
  1583  088B  26CB               	fcall	_init_bldc
  1584                           
  1585                           ;main.c: 603: PEIE = 1;
  1586  088C  170B               	bsf	11,6
  1587                           
  1588                           ;main.c: 604: GIE = 1;
  1589  088D  178B               	bsf	11,7
  1590  088E  0008               	return
  1591  088F                     __end_of_system_init:	
  1592  088F                     __ptext2040:	
  1593 ;; =============== function _BVH2_Appl_Layer ends ============
  1594                           
  1595                           
  1596 ;; *************** function _timer_init *****************
  1597 ;; Defined at:
  1598 ;;		line 75 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\timer.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  ui8_TmrNb       1    wreg     unsigned char 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  ui8_TmrNb       1   13[BANK0 ] unsigned char 
  1603 ;; Return value:  Size  Location     Type
  1604 ;;		None               void
  1605 ;; Registers used:
  1606 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1607 ;; Tracked objects:
  1608 ;;		On entry : 16/1
  1609 ;;		On exit  : 16/0
  1610 ;;		Unchanged: FFFE0/0
  1611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1612 ;;      Params:         0       0       0       0       0       0       0       0
  1613 ;;      Locals:         0       1       0       0       0       0       0       0
  1614 ;;      Temps:          0       0       0       0       0       0       0       0
  1615 ;;      Totals:         0       1       0       0       0       0       0       0
  1616 ;;Total ram usage:        1 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; Hardware stack levels required when called:    5
  1619 ;; This function calls:
  1620 ;;		_clear_timer
  1621 ;; This function is called by:
  1622 ;;		_system_init
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625  088F                     _timer_init:	
  1626                           
  1627                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1628                           ;timer_init@ui8_TmrNb stored from wreg
  1629  088F  0020               	movlb	0	; select bank0
  1630  0890  00AD               	movwf	timer_init@ui8_TmrNb
  1631                           
  1632                           ;timer.c: 77: switch( ui8_TmrNb )
  1633  0891  28B6               	goto	l26417
  1634  0892                     l26387:	
  1635                           
  1636                           ;timer.c: 83: {
  1637                           ;timer.c: 86: clear_timer( 0 );
  1638  0892  3000               	movlw	0
  1639  0893  2437               	fcall	_clear_timer
  1640                           
  1641                           ;timer.c: 87: TMR0IE = 0;
  1642  0894  128B               	bcf	11,5
  1643                           
  1644                           ;timer.c: 88: break;
  1645  0895  0008               	return
  1646  0896                     l26391:	
  1647                           
  1648                           ;timer.c: 95: {
  1649                           ;timer.c: 98: clear_timer( 1 );
  1650  0896  3001               	movlw	1
  1651  0897  2437               	fcall	_clear_timer
  1652                           
  1653                           ;timer.c: 99: T1CON = 0b01110101;
  1654  0898  3075               	movlw	117
  1655  0899  0020               	movlb	0	; select bank0
  1656  089A  0098               	movwf	24	;volatile
  1657                           
  1658                           ;timer.c: 100: TMR1IE = 0;
  1659  089B  0021               	movlb	1	; select bank1
  1660  089C  1011               	bcf	17,0
  1661                           
  1662                           ;timer.c: 101: break;
  1663  089D  0008               	return
  1664  089E                     l26397:	
  1665                           
  1666                           ;timer.c: 108: {
  1667                           ;timer.c: 111: clear_timer( 2 );
  1668  089E  3002               	movlw	2
  1669  089F  2437               	fcall	_clear_timer
  1670                           
  1671                           ;timer.c: 112: T2CON = 0b00000111;
  1672  08A0  3007               	movlw	7
  1673  08A1  0020               	movlb	0	; select bank0
  1674  08A2  009C               	movwf	28	;volatile
  1675                           
  1676                           ;timer.c: 113: TMR2IE = 0;
  1677  08A3  0021               	movlb	1	; select bank1
  1678  08A4  1091               	bcf	17,1
  1679                           
  1680                           ;timer.c: 114: break;
  1681  08A5  0008               	return
  1682  08A6                     l26403:	
  1683                           
  1684                           ;timer.c: 121: {
  1685                           ;timer.c: 124: clear_timer( 4 );
  1686  08A6  3004               	movlw	4
  1687  08A7  2437               	fcall	_clear_timer
  1688                           
  1689                           ;timer.c: 125: T4CON = 0b00001110;
  1690  08A8  300E               	movlw	14
  1691  08A9  0028               	movlb	8	; select bank8
  1692  08AA  0097               	movwf	23	;volatile
  1693                           
  1694                           ;timer.c: 129: TMR4IE = 1;
  1695  08AB  0021               	movlb	1	; select bank1
  1696  08AC  1493               	bsf	19,1
  1697                           
  1698                           ;timer.c: 131: break;
  1699  08AD  0008               	return
  1700  08AE                     l26409:	
  1701                           
  1702                           ;timer.c: 138: {
  1703                           ;timer.c: 141: clear_timer( 6 );
  1704  08AE  3006               	movlw	6
  1705  08AF  2437               	fcall	_clear_timer
  1706                           
  1707                           ;timer.c: 142: T6CON = 0b00000101;
  1708  08B0  3005               	movlw	5
  1709  08B1  0028               	movlb	8	; select bank8
  1710  08B2  009E               	movwf	30	;volatile
  1711                           
  1712                           ;timer.c: 147: TMR6IE = 1;
  1713  08B3  0021               	movlb	1	; select bank1
  1714  08B4  1593               	bsf	19,3
  1715                           
  1716                           ;timer.c: 169: break;
  1717  08B5  0008               	return
  1718  08B6                     l26417:	
  1719  08B6  082D               	movf	timer_init@ui8_TmrNb,w
  1720                           
  1721                           ; Switch size 1, requested type "space"
  1722                           ; Number of cases is 5, Range of values is 0 to 6
  1723                           ; switch strategies available:
  1724                           ; Name         Instructions Cycles
  1725                           ; simple_byte           16     9 (average)
  1726                           ; direct_byte           20     6 (fixed)
  1727                           ; jumptable            260     6 (fixed)
  1728                           ; rangetable            11     4 (fixed)
  1729                           ; spacedrange           19     6 (fixed)
  1730                           ; locatedrange           7     3 (fixed)
  1731                           ;	Chosen strategy is simple_byte
  1732  08B7  3A00               	xorlw	0	; case 0
  1733  08B8  1903               	skipnz
  1734  08B9  2892               	goto	l26387
  1735  08BA  3A01               	xorlw	1	; case 1
  1736  08BB  1903               	skipnz
  1737  08BC  2896               	goto	l26391
  1738  08BD  3A03               	xorlw	3	; case 2
  1739  08BE  1903               	skipnz
  1740  08BF  289E               	goto	l26397
  1741  08C0  3A06               	xorlw	6	; case 4
  1742  08C1  1903               	skipnz
  1743  08C2  28A6               	goto	l26403
  1744  08C3  3A02               	xorlw	2	; case 6
  1745  08C4  1903               	skipnz
  1746  08C5  28AE               	goto	l26409
  1747  08C6  28C7               	goto	l19641
  1748  08C7                     l19641:	
  1749  08C7  0008               	return
  1750  08C8                     __end_of_timer_init:	
  1751  08C8                     __ptext2076:	
  1752 ;; =============== function _ADC_Read ends ============
  1753                           
  1754                           
  1755 ;; *************** function _ADC_Init *****************
  1756 ;; Defined at:
  1757 ;;		line 104 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;		None               void
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 18/1
  1768 ;;		On exit  : 1F/2
  1769 ;;		Unchanged: FFFE0/0
  1770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1771 ;;      Params:         0       0       0       0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0       0
  1774 ;;      Totals:         0       0       0       0       0       0       0       0
  1775 ;;Total ram usage:        0 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    4
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_system_init
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784  08C8                     _ADC_Init:	
  1785                           
  1786                           ;adc.c: 106: ADCON1 = 0b10100000;
  1787                           
  1788                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  1789  08C8  30A0               	movlw	160
  1790  08C9  0021               	movlb	1	; select bank1
  1791  08CA  009E               	movwf	30	;volatile
  1792                           
  1793                           ;adc.c: 108: ADCON0 = 0b00000000;
  1794  08CB  019D               	clrf	29	;volatile
  1795  08CC  3030               	movlw	48
  1796                           
  1797                           ;adc.c: 109: ADON = 1;
  1798  08CD  141D               	bsf	29,0
  1799                           
  1800                           ;adc.c: 111: ui8_temp_calibration = 0;
  1801  08CE  0022               	movlb	2	; select bank2
  1802  08CF  0497               	iorwf	23,f	;volatile
  1803  08D0  0008               	return
  1804  08D1                     __end_of_ADC_Init:	
  1805  08D1                     __ptext2066:	
  1806 ;; =============== function __ELINMIntInitialize ends ============
  1807                           
  1808                           
  1809 ;; *************** function _EnableMCP201 *****************
  1810 ;; Defined at:
  1811 ;;		line 436 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  _dcnt           1   14[BANK0 ] unsigned char 
  1816 ;;  _dcnt           1   13[BANK0 ] unsigned char 
  1817 ;;  _dcnt           1   12[BANK0 ] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;		None               void
  1820 ;; Registers used:
  1821 ;;		status,2
  1822 ;; Tracked objects:
  1823 ;;		On entry : 17F/1
  1824 ;;		On exit  : 1F/0
  1825 ;;		Unchanged: FFE00/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1827 ;;      Params:         0       0       0       0       0       0       0       0
  1828 ;;      Locals:         0       3       0       0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0       0       0       0
  1830 ;;      Totals:         0       3       0       0       0       0       0       0
  1831 ;;Total ram usage:        3 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    4
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_system_init
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840  08D1                     _EnableMCP201:	
  1841                           
  1842                           ;lin.c: 448: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  1843                           
  1844                           ; Regs used in _EnableMCP201: [status,2]
  1845  08D1  0020               	movlb	0	; select bank0
  1846  08D2  128E               	bcf	14,5
  1847  08D3  01AC               	clrf	EnableMCP201@_dcnt
  1848  08D4  28D7               	goto	l13400
  1849  08D5                     l13401:	
  1850  08D5  0000               	nop	;#
  1851  08D6  0000               	nop	;#
  1852  08D7                     l13400:	
  1853  08D7  0020               	movlb	0	; select bank0
  1854  08D8  0BAC               	decfsz	EnableMCP201@_dcnt,f
  1855  08D9  28D5               	goto	l13401
  1856                           
  1857                           ;lin.c: 450: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  1858  08DA  168E               	bsf	14,5
  1859  08DB  01AD               	clrf	EnableMCP201@_dcnt_15776
  1860  08DC  28DF               	goto	l13405
  1861  08DD                     l13406:	
  1862  08DD  0000               	nop	;#
  1863  08DE  0000               	nop	;#
  1864  08DF                     l13405:	
  1865  08DF  0020               	movlb	0	; select bank0
  1866  08E0  0BAD               	decfsz	EnableMCP201@_dcnt_15776,f
  1867  08E1  28DD               	goto	l13406
  1868                           
  1869                           ;lin.c: 452: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  1870  08E2  128E               	bcf	14,5
  1871  08E3  01AE               	clrf	EnableMCP201@_dcnt_15777
  1872  08E4  28E7               	goto	l13410
  1873  08E5                     l13411:	
  1874  08E5  0000               	nop	;#
  1875  08E6  0000               	nop	;#
  1876  08E7                     l13410:	
  1877  08E7  0020               	movlb	0	; select bank0
  1878  08E8  0BAE               	decfsz	EnableMCP201@_dcnt_15777,f
  1879  08E9  28E5               	goto	l13411
  1880                           
  1881                           ;lin.c: 453: RC5 = 1;
  1882  08EA  168E               	bsf	14,5
  1883  08EB  0008               	return
  1884  08EC                     __end_of_EnableMCP201:	
  1885  08EC                     __ptext2065:	
  1886 ;; =============== function __ELINMIntCalcIDParity ends ============
  1887                           
  1888                           
  1889 ;; *************** function __ELINMIntInitialize *****************
  1890 ;; Defined at:
  1891 ;;		line 485 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      unsigned char 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2
  1900 ;; Tracked objects:
  1901 ;;		On entry : 1F/0
  1902 ;;		On exit  : 1F/0
  1903 ;;		Unchanged: FFFE0/0
  1904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1905 ;;      Params:         0       0       0       0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    4
  1912 ;; This function calls:
  1913 ;;		Nothing
  1914 ;; This function is called by:
  1915 ;;		_system_init
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918  08EC                     __ELINMIntInitialize:	
  1919                           
  1920                           ;lin.c: 487: SPBRG = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)&0x00FF);
  1921                           
  1922                           ; Regs used in __ELINMIntInitialize: [wreg+status,2]
  1923  08EC  309F               	movlw	159
  1924  08ED  0023               	movlb	3	; select bank3
  1925  08EE  009B               	movwf	27	;volatile
  1926                           
  1927                           ;lin.c: 488: SPBRGH = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)>>8);
  1928  08EF  3001               	movlw	1
  1929  08F0  009C               	movwf	28	;volatile
  1930                           
  1931                           ;lin.c: 489: TXSTA = 0x26;
  1932  08F1  3026               	movlw	38
  1933  08F2  009E               	movwf	30	;volatile
  1934                           
  1935                           ;lin.c: 490: RCSTA = 0x90;
  1936  08F3  3090               	movlw	144
  1937  08F4  009D               	movwf	29	;volatile
  1938                           
  1939                           ;lin.c: 491: BAUDCON = 0x48;
  1940  08F5  3048               	movlw	72
  1941  08F6  009F               	movwf	31	;volatile
  1942                           
  1943                           ;lin.c: 492: PIE1 = 0x00;
  1944  08F7  0021               	movlb	1	; select bank1
  1945  08F8  0191               	clrf	17	;volatile
  1946                           
  1947                           ;lin.c: 493: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  1948  08F9  0024               	movlb	4	; select bank4
  1949  08FA  27F3               	fcall	PL25	;call to abstracted procedure
  1950                           
  1951                           ;lin.c: 494: _ELINMIntSpace = (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)/
      +                          2;
  1952  08FB  0022               	movlb	2	; select bank2
  1953  08FC  01CB               	clrf	__ELINMIntSpace^(0+256)
  1954                           
  1955                           ;lin.c: 495: _ELINMIntStatus.ELINMIntStatusByte = 0;
  1956  08FD  0020               	movlb	0	; select bank0
  1957  08FE  01CC               	clrf	__ELINMIntStatus
  1958                           
  1959                           ;lin.c: 496: _ELINMIntStatus1.ELINMIntStatusByte = 0;
  1960  08FF  0021               	movlb	1	; select bank1
  1961  0900  01D2               	clrf	__ELINMIntStatus1^(0+128)
  1962                           
  1963                           ;lin.c: 497: _ELINMIntStatus.ELINMINTSTS.IDLE = 1;
  1964  0901  0020               	movlb	0	; select bank0
  1965  0902  15CC               	bsf	__ELINMIntStatus,3
  1966  0903  0008               	return
  1967  0904                     __end_of__ELINMIntInitialize:	
  1968  0904                     __ptext2063:	
  1969 ;; =============== function _PWM_Capture_init ends ============
  1970                           
  1971                           
  1972 ;; *************** function _Oscill_Source_Block *****************
  1973 ;; Defined at:
  1974 ;;		line 480 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\timer.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;		None
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;		None
  1979 ;; Return value:  Size  Location     Type
  1980 ;;		None               void
  1981 ;; Registers used:
  1982 ;;		wreg
  1983 ;; Tracked objects:
  1984 ;;		On entry : 1F/0
  1985 ;;		On exit  : 1F/1
  1986 ;;		Unchanged: FFFE0/0
  1987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1988 ;;      Params:         0       0       0       0       0       0       0       0
  1989 ;;      Locals:         0       0       0       0       0       0       0       0
  1990 ;;      Temps:          0       0       0       0       0       0       0       0
  1991 ;;      Totals:         0       0       0       0       0       0       0       0
  1992 ;;Total ram usage:        0 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; Hardware stack levels required when called:    4
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_system_init
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001  0904                     _Oscill_Source_Block:	
  2002                           
  2003                           ;timer.c: 482: OSCCON = 0xF0;
  2004                           
  2005                           ; Regs used in _Oscill_Source_Block: [wreg]
  2006  0904  30F0               	movlw	240
  2007  0905  0021               	movlb	1	; select bank1
  2008  0906  0099               	movwf	25	;volatile
  2009                           
  2010                           ;timer.c: 483: WDTCON = 0b00010001;
  2011  0907  3011               	movlw	17
  2012  0908  0097               	movwf	23	;volatile
  2013  0909  0008               	return
  2014  090A                     __end_of_Oscill_Source_Block:	
  2015  090A                     __ptext2062:	
  2016 ;; =============== function _clear_timer ends ============
  2017                           
  2018                           
  2019 ;; *************** function _PWM_Capture_init *****************
  2020 ;; Defined at:
  2021 ;;		line 80 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\pwm.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  ui8_CCP_Nb      1   12[BANK0 ] unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;		None               void
  2028 ;; Registers used:
  2029 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2030 ;; Tracked objects:
  2031 ;;		On entry : 16/1
  2032 ;;		On exit  : 18/0
  2033 ;;		Unchanged: FFFE0/0
  2034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2035 ;;      Params:         0       0       0       0       0       0       0       0
  2036 ;;      Locals:         0       1       0       0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0       0
  2038 ;;      Totals:         0       1       0       0       0       0       0       0
  2039 ;;Total ram usage:        1 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    4
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_system_init
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048  090A                     _PWM_Capture_init:	
  2049                           
  2050                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  2051                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  2052  090A  0020               	movlb	0	; select bank0
  2053  090B  00AC               	movwf	PWM_Capture_init@ui8_CCP_Nb
  2054                           
  2055                           ;pwm.c: 83: ui8_PWMinDC_sav = 0;
  2056  090C  0021               	movlb	1	; select bank1
  2057  090D  01DF               	clrf	_ui8_PWMinDC_sav^(0+128)
  2058                           
  2059                           ;pwm.c: 84: ui8_PWMin_failCnt = 0;
  2060  090E  0022               	movlb	2	; select bank2
  2061  090F  01D4               	clrf	_ui8_PWMin_failCnt^(0+256)
  2062                           
  2063                           ;pwm.c: 93: switch( ui8_CCP_Nb )
  2064  0910  294D               	goto	l25267
  2065  0911                     l25225:	
  2066                           
  2067                           ;pwm.c: 99: {
  2068                           ;pwm.c: 101: CCP1CON = 0x00;
  2069  0911  0025               	movlb	5	; select bank5
  2070  0912  0193               	clrf	19	;volatile
  2071                           
  2072                           ;pwm.c: 102: CCPR1L = 0x00;
  2073  0913  0191               	clrf	17	;volatile
  2074                           
  2075                           ;pwm.c: 103: CCPR1H = 0x00;
  2076  0914  0192               	clrf	18	;volatile
  2077                           
  2078                           ;pwm.c: 104: CCP1IE = 1;
  2079  0915  0021               	movlb	1	; select bank1
  2080  0916  1511               	bsf	17,2
  2081                           
  2082                           ;pwm.c: 105: CCP1IF = 0;
  2083  0917  0020               	movlb	0	; select bank0
  2084  0918  3005               	movlw	5
  2085  0919  1111               	bcf	17,2
  2086                           
  2087                           ;pwm.c: 106: CCP1CON = 0x05;
  2088  091A  0025               	movlb	5	; select bank5
  2089  091B  0093               	movwf	19	;volatile
  2090                           
  2091                           ;pwm.c: 107: break;
  2092  091C  0008               	return
  2093  091D                     l25233:	
  2094                           
  2095                           ;pwm.c: 114: {
  2096                           ;pwm.c: 116: CCP2CON = 0x00;
  2097  091D  0025               	movlb	5	; select bank5
  2098  091E  019A               	clrf	26	;volatile
  2099                           
  2100                           ;pwm.c: 117: CCPR2L = 0x00;
  2101  091F  0198               	clrf	24	;volatile
  2102                           
  2103                           ;pwm.c: 118: CCPR2H = 0x00;
  2104  0920  0199               	clrf	25	;volatile
  2105                           
  2106                           ;pwm.c: 119: CCP2IE = 1;
  2107  0921  0021               	movlb	1	; select bank1
  2108  0922  1412               	bsf	18,0
  2109                           
  2110                           ;pwm.c: 120: CCP2IF = 0;
  2111  0923  0020               	movlb	0	; select bank0
  2112  0924  3005               	movlw	5
  2113  0925  1012               	bcf	18,0
  2114                           
  2115                           ;pwm.c: 121: CCP2CON = 0x05;
  2116  0926  0025               	movlb	5	; select bank5
  2117  0927  009A               	movwf	26	;volatile
  2118                           
  2119                           ;pwm.c: 122: break;
  2120  0928  0008               	return
  2121  0929                     l25241:	
  2122                           
  2123                           ;pwm.c: 129: {
  2124                           ;pwm.c: 131: CCP3CON = 0x00;
  2125  0929  0026               	movlb	6	; select bank6
  2126  092A  0193               	clrf	19	;volatile
  2127                           
  2128                           ;pwm.c: 132: CCPR3L = 0x00;
  2129  092B  0191               	clrf	17	;volatile
  2130                           
  2131                           ;pwm.c: 133: CCPR3H = 0x00;
  2132  092C  0192               	clrf	18	;volatile
  2133                           
  2134                           ;pwm.c: 134: CCP3IE = 1;
  2135  092D  0021               	movlb	1	; select bank1
  2136  092E  1613               	bsf	19,4
  2137                           
  2138                           ;pwm.c: 135: CCP3IF = 0;
  2139  092F  0020               	movlb	0	; select bank0
  2140  0930  3005               	movlw	5
  2141  0931  1213               	bcf	19,4
  2142                           
  2143                           ;pwm.c: 136: CCP3CON = 0x05;
  2144  0932  0026               	movlb	6	; select bank6
  2145  0933  0093               	movwf	19	;volatile
  2146                           
  2147                           ;pwm.c: 137: break;
  2148  0934  0008               	return
  2149  0935                     l25249:	
  2150                           
  2151                           ;pwm.c: 144: {
  2152                           ;pwm.c: 146: CCP4CON = 0x00;
  2153  0935  0026               	movlb	6	; select bank6
  2154  0936  019A               	clrf	26	;volatile
  2155                           
  2156                           ;pwm.c: 147: CCPR4L = 0x00;
  2157  0937  0198               	clrf	24	;volatile
  2158                           
  2159                           ;pwm.c: 148: CCPR4H = 0x00;
  2160  0938  0199               	clrf	25	;volatile
  2161                           
  2162                           ;pwm.c: 149: CCP4IE = 1;
  2163  0939  0021               	movlb	1	; select bank1
  2164  093A  1693               	bsf	19,5
  2165                           
  2166                           ;pwm.c: 150: CCP4IF = 0;
  2167  093B  0020               	movlb	0	; select bank0
  2168  093C  3005               	movlw	5
  2169  093D  1293               	bcf	19,5
  2170                           
  2171                           ;pwm.c: 151: CCP4CON = 0x05;
  2172  093E  0026               	movlb	6	; select bank6
  2173  093F  009A               	movwf	26	;volatile
  2174                           
  2175                           ;pwm.c: 152: break;
  2176  0940  0008               	return
  2177  0941                     l25257:	
  2178                           
  2179                           ;pwm.c: 159: {
  2180                           ;pwm.c: 161: CCP5CON = 0x00;
  2181  0941  0026               	movlb	6	; select bank6
  2182  0942  019E               	clrf	30	;volatile
  2183                           
  2184                           ;pwm.c: 162: CCPR5L = 0x00;
  2185  0943  019C               	clrf	28	;volatile
  2186                           
  2187                           ;pwm.c: 163: CCPR5H = 0x00;
  2188  0944  019D               	clrf	29	;volatile
  2189                           
  2190                           ;pwm.c: 164: CCP5IE = 1;
  2191  0945  0021               	movlb	1	; select bank1
  2192  0946  1713               	bsf	19,6
  2193                           
  2194                           ;pwm.c: 165: CCP5IF = 0;
  2195  0947  0020               	movlb	0	; select bank0
  2196  0948  3005               	movlw	5
  2197  0949  1313               	bcf	19,6
  2198                           
  2199                           ;pwm.c: 166: CCP5CON = 0x05;
  2200  094A  0026               	movlb	6	; select bank6
  2201  094B  009E               	movwf	30	;volatile
  2202                           
  2203                           ;pwm.c: 167: break;
  2204  094C  0008               	return
  2205  094D                     l25267:	
  2206  094D  0020               	movlb	0	; select bank0
  2207  094E  082C               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  2208                           
  2209                           ; Switch size 1, requested type "space"
  2210                           ; Number of cases is 5, Range of values is 1 to 5
  2211                           ; switch strategies available:
  2212                           ; Name         Instructions Cycles
  2213                           ; simple_byte           16     9 (average)
  2214                           ; direct_byte           19     9 (fixed)
  2215                           ; jumptable            263     9 (fixed)
  2216                           ;	Chosen strategy is simple_byte
  2217  094F  3A01               	xorlw	1	; case 1
  2218  0950  1903               	skipnz
  2219  0951  2911               	goto	l25225
  2220  0952  3A03               	xorlw	3	; case 2
  2221  0953  1903               	skipnz
  2222  0954  291D               	goto	l25233
  2223  0955  3A01               	xorlw	1	; case 3
  2224  0956  1903               	skipnz
  2225  0957  2929               	goto	l25241
  2226  0958  3A07               	xorlw	7	; case 4
  2227  0959  1903               	skipnz
  2228  095A  2935               	goto	l25249
  2229  095B  3A01               	xorlw	1	; case 5
  2230  095C  1903               	skipnz
  2231  095D  2941               	goto	l25257
  2232  095E  295F               	goto	l17334
  2233  095F                     l17334:	
  2234  095F  0008               	return
  2235  0960                     __end_of_PWM_Capture_init:	
  2236  0960                     __ptext2045:	
  2237 ;; =============== function _SetDiagAlarm ends ============
  2238                           
  2239                           
  2240 ;; *************** function _DiagInit *****************
  2241 ;; Defined at:
  2242 ;;		line 150 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\diag.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;		None
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;		None               void
  2249 ;; Registers used:
  2250 ;;		wreg, status,2, status,0, pclath, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 1F/2
  2253 ;;		On exit  : 1F/2
  2254 ;;		Unchanged: FFFE0/0
  2255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2256 ;;      Params:         0       0       0       0       0       0       0       0
  2257 ;;      Locals:         0       0       0       0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0
  2259 ;;      Totals:         0       0       0       0       0       0       0       0
  2260 ;;Total ram usage:        0 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    5
  2263 ;; This function calls:
  2264 ;;		_PWM_Write_Out
  2265 ;; This function is called by:
  2266 ;;		_system_init
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269  0960                     _DiagInit:	
  2270                           
  2271                           ;diag.c: 162: ui8_error_Flags.b = 0;
  2272                           
  2273                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  2274  0960  0021               	movlb	1	; select bank1
  2275  0961  300B               	movlw	11
  2276  0962  01E5               	clrf	_ui8_error_Flags^(0+128)
  2277                           
  2278                           ;diag.c: 163: PWM_Write_Out( 11 );
  2279  0963  3186  2675         	fcall	_PWM_Write_Out
  2280                           
  2281                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  2282  0965  01E1               	clrf	_ui16_IPhase1_bldc_cal^(0+256)
  2283  0966  01E2               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  2284                           
  2285                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  2286  0967  01E3               	clrf	_ui16_IPhase2_bldc_cal^(0+256)
  2287  0968  01E4               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  2288                           
  2289                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  2290  0969  01E5               	clrf	_ui16_IPhase3_bldc_cal^(0+256)
  2291  096A  01E6               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  2292  096B  0008               	return
  2293  096C                     __end_of_DiagInit:	
  2294  096C                     __ptext2041:	
  2295 ;; =============== function _timer_init ends ============
  2296                           
  2297                           
  2298 ;; *************** function _init_ports *****************
  2299 ;; Defined at:
  2300 ;;		line 396 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\main.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;		None               void
  2307 ;; Registers used:
  2308 ;;		wreg, status,2, pclath, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 17F/3
  2311 ;;		On exit  : 17F/1
  2312 ;;		Unchanged: FFE80/0
  2313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2314 ;;      Params:         0       0       0       0       0       0       0       0
  2315 ;;      Locals:         0       0       0       0       0       0       0       0
  2316 ;;      Temps:          0       0       0       0       0       0       0       0
  2317 ;;      Totals:         0       0       0       0       0       0       0       0
  2318 ;;Total ram usage:        0 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    5
  2321 ;; This function calls:
  2322 ;;		_read_eeprom_data
  2323 ;; This function is called by:
  2324 ;;		_system_init
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327  096C                     _init_ports:	
  2328                           
  2329                           ;main.c: 401: ANSELA = 0b00100111;
  2330                           
  2331                           ; Regs used in _init_ports: [wreg+status,2+pclath+cstack]
  2332  096C  3027               	movlw	39
  2333  096D  008C               	movwf	12	;volatile
  2334                           
  2335                           ;main.c: 402: ANSELB = 0b00101001;
  2336  096E  3029               	movlw	41
  2337  096F  008D               	movwf	13	;volatile
  2338                           
  2339                           ;main.c: 405: LATA = 0;
  2340  0970  0022               	movlb	2	; select bank2
  2341  0971  018C               	clrf	12	;volatile
  2342                           
  2343                           ;main.c: 406: LATB = 0;
  2344  0972  018D               	clrf	13	;volatile
  2345                           
  2346                           ;main.c: 407: LATC = 0;
  2347  0973  018E               	clrf	14	;volatile
  2348                           
  2349                           ;main.c: 412: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  2350  0974  3055               	movlw	85
  2351  0975  3185  25D5  3188   	fcall	_read_eeprom_data
  2352  0978  3A55               	xorlw	85
  2353  0979  1903               	skipnz
  2354  097A  297D               	goto	l29737
  2355  097B  1A8E               	btfsc	14,5
  2356  097C  2984               	goto	l29741
  2357  097D                     l29737:	
  2358                           
  2359                           ;main.c: 414: {
  2360                           ;main.c: 416: TRISA = 0b01111111;
  2361  097D  307F               	movlw	127
  2362  097E  0021               	movlb	1	; select bank1
  2363  097F  008C               	movwf	12	;volatile
  2364                           
  2365                           ;main.c: 425: TRISB = 0b00111001;
  2366  0980  3039               	movlw	57
  2367  0981  008D               	movwf	13	;volatile
  2368                           
  2369                           ;main.c: 434: TRISC = 0b00000000;
  2370  0982  018E               	clrf	14	;volatile
  2371                           
  2372                           ;main.c: 445: }
  2373  0983  0008               	return
  2374  0984                     l29741:	
  2375                           
  2376                           ;main.c: 448: else
  2377                           ;main.c: 449: {
  2378                           ;main.c: 451: TRISA = 0b01111111;
  2379  0984  307F               	movlw	127
  2380  0985  0021               	movlb	1	; select bank1
  2381  0986  008C               	movwf	12	;volatile
  2382                           
  2383                           ;main.c: 460: TRISB = 0b00111001;
  2384  0987  3039               	movlw	57
  2385  0988  008D               	movwf	13	;volatile
  2386                           
  2387                           ;main.c: 469: TRISC = 0b10000000;
  2388  0989  3080               	movlw	128
  2389  098A  008E               	movwf	14	;volatile
  2390  098B  0008               	return
  2391  098C                     __end_of_init_ports:	
  2392  098C                     __ptext2038:	
  2393 ;; =============== function _InitMotorRun ends ============
  2394                           
  2395                           
  2396 ;; *************** function _FILTER_Init *****************
  2397 ;; Defined at:
  2398 ;;		line 228 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;		None               void
  2405 ;; Registers used:
  2406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 1F/2
  2409 ;;		On exit  : 1F/1
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2412 ;;      Params:         0       0       0       0       0       0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0
  2415 ;;      Totals:         0       0       0       0       0       0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    5
  2419 ;; This function calls:
  2420 ;;		_ADC_Wait
  2421 ;;		_ADC_Read
  2422 ;; This function is called by:
  2423 ;;		_system_init
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426  098C                     _FILTER_Init:	
  2427                           
  2428                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  2429                           
  2430                           ; Regs used in _FILTER_Init: [wreg+fsr1l-status,0+pclath+cstack]
  2431  098C  0021               	movlb	1	; select bank1
  2432  098D  01E7               	clrf	_windowPtr1^(0+128)
  2433  098E                     l30461:	
  2434  098E  3008               	movlw	8
  2435  098F  0267               	subwf	_windowPtr1^(0+128),w
  2436  0990  1803               	btfsc	3,0
  2437  0991  0008               	return
  2438                           
  2439                           ;adc.c: 232: {
  2440                           ;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  2441  0992  3031               	movlw	49
  2442  0993  009D               	movwf	29	;volatile
  2443                           
  2444                           ;adc.c: 235: ADC_Wait( );
  2445  0994  2238  3188         	fcall	_ADC_Wait
  2446                           
  2447                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  2448  0996  2251  3188         	fcall	_ADC_Read
  2449  0998  082D               	movf	?_ADC_Read+1,w
  2450  0999  00D2               	movwf	_ui16_Ubat_bldc+1	;volatile
  2451  099A  082C               	movf	?_ADC_Read,w
  2452  099B  00D1               	movwf	_ui16_Ubat_bldc	;volatile
  2453                           
  2454                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  2455  099C  2700  3188         	fcall	PL36	;call to abstracted procedure
  2456  099E  305E               	movlw	94
  2457  099F  3FC0               	movwi [0]fsr1
  2458  09A0  3001               	movlw	1
  2459  09A1  3FC1               	movwi [1]fsr1
  2460  09A2  0AE7               	incf	_windowPtr1^(0+128),f
  2461  09A3  298E               	goto	l30461
  2462  09A4                     __end_of_FILTER_Init:	
  2463  09A4                     __ptext2034:	
  2464 ;; =============== function _init_bldc ends ============
  2465                           
  2466                           
  2467 ;; *************** function _I_calibrationInit *****************
  2468 ;; Defined at:
  2469 ;;		line 166 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\main.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;		None
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;		None
  2474 ;; Return value:  Size  Location     Type
  2475 ;;		None               void
  2476 ;; Registers used:
  2477 ;;		wreg, status,2, status,0, pclath, cstack
  2478 ;; Tracked objects:
  2479 ;;		On entry : 1F/3
  2480 ;;		On exit  : 1F/2
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2483 ;;      Params:         0       0       0       0       0       0       0       0
  2484 ;;      Locals:         0       0       0       0       0       0       0       0
  2485 ;;      Temps:          0       1       0       0       0       0       0       0
  2486 ;;      Totals:         0       1       0       0       0       0       0       0
  2487 ;;Total ram usage:        1 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    5
  2490 ;; This function calls:
  2491 ;;		_read_eeprom_data
  2492 ;;		_ADC_Wait
  2493 ;;		_ADC_Read
  2494 ;; This function is called by:
  2495 ;;		_system_init
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498  09A4                     _I_calibrationInit:	
  2499                           
  2500                           ;main.c: 168: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  2501                           
  2502                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  2503  09A4  3003               	movlw	3
  2504  09A5  3185  25D5  3188   	fcall	_read_eeprom_data
  2505  09A8  3A00               	xorlw	0
  2506  09A9  1903               	skipnz
  2507  09AA  29C2               	goto	l30565
  2508  09AB  3003               	movlw	3
  2509  09AC  3185  25D5  3188   	fcall	_read_eeprom_data
  2510  09AF  3AFF               	xorlw	255
  2511  09B0  1903               	skipnz
  2512  09B1  29C2               	goto	l30565
  2513                           
  2514                           ;main.c: 170: {
  2515                           ;main.c: 172: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03 
      +                          );
  2516  09B2  3003               	movlw	3
  2517  09B3  3185  25D5  3188   	fcall	_read_eeprom_data
  2518  09B6  00AF               	movwf	??_I_calibrationInit
  2519  09B7  3002               	movlw	2
  2520  09B8  3185  25D5  3188   	fcall	_read_eeprom_data
  2521  09BB  0021               	movlb	1	; select bank1
  2522  09BC  00E9               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  2523  09BD  0020               	movlb	0	; select bank0
  2524  09BE  082F               	movf	??_I_calibrationInit,w
  2525  09BF  0021               	movlb	1	; select bank1
  2526  09C0  00E8               	movwf	_ui16_I_cal_Ph1^(0+128)
  2527                           
  2528                           ;main.c: 175: }
  2529  09C1  29C6               	goto	l30567
  2530  09C2                     l30565:	
  2531                           
  2532                           ;main.c: 178: else
  2533                           ;main.c: 179: {
  2534                           ;main.c: 181: ui16_I_cal_Ph1 = 0x0100;
  2535  09C2  0021               	movlb	1	; select bank1
  2536  09C3  3001               	movlw	1
  2537  09C4  01E8               	clrf	_ui16_I_cal_Ph1^(0+128)
  2538  09C5  00E9               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
  2539  09C6                     l30567:	
  2540                           
  2541                           ;main.c: 184: }
  2542                           ;main.c: 187: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 0x05 ) != 0xFF)
  2543  09C6  3005               	movlw	5
  2544  09C7  3185  25D5  3188   	fcall	_read_eeprom_data
  2545  09CA  3A00               	xorlw	0
  2546  09CB  1903               	skipnz
  2547  09CC  29E4               	goto	l30573
  2548  09CD  3005               	movlw	5
  2549  09CE  3185  25D5  3188   	fcall	_read_eeprom_data
  2550  09D1  3AFF               	xorlw	255
  2551  09D2  1903               	skipnz
  2552  09D3  29E4               	goto	l30573
  2553                           
  2554                           ;main.c: 189: {
  2555                           ;main.c: 191: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05 
      +                          );
  2556  09D4  3005               	movlw	5
  2557  09D5  3185  25D5  3188   	fcall	_read_eeprom_data
  2558  09D8  00AF               	movwf	??_I_calibrationInit
  2559  09D9  3004               	movlw	4
  2560  09DA  3185  25D5  3188   	fcall	_read_eeprom_data
  2561  09DD  0021               	movlb	1	; select bank1
  2562  09DE  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  2563  09DF  0020               	movlb	0	; select bank0
  2564  09E0  082F               	movf	??_I_calibrationInit,w
  2565  09E1  0021               	movlb	1	; select bank1
  2566  09E2  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  2567                           
  2568                           ;main.c: 194: }
  2569  09E3  29E8               	goto	l30575
  2570  09E4                     l30573:	
  2571                           
  2572                           ;main.c: 197: else
  2573                           ;main.c: 198: {
  2574                           ;main.c: 200: ui16_I_cal_Ph2 = 0x0100;
  2575  09E4  0021               	movlb	1	; select bank1
  2576  09E5  3001               	movlw	1
  2577  09E6  01EA               	clrf	_ui16_I_cal_Ph2^(0+128)
  2578  09E7  00EB               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
  2579  09E8                     l30575:	
  2580                           
  2581                           ;main.c: 203: }
  2582                           ;main.c: 206: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 0x07 ) != 0xFF)
  2583  09E8  3007               	movlw	7
  2584  09E9  3185  25D5  3188   	fcall	_read_eeprom_data
  2585  09EC  3A00               	xorlw	0
  2586  09ED  1903               	skipnz
  2587  09EE  2A06               	goto	l30581
  2588  09EF  3007               	movlw	7
  2589  09F0  3185  25D5  3188   	fcall	_read_eeprom_data
  2590  09F3  3AFF               	xorlw	255
  2591  09F4  1903               	skipnz
  2592  09F5  2A06               	goto	l30581
  2593                           
  2594                           ;main.c: 208: {
  2595                           ;main.c: 210: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07 
      +                          );
  2596  09F6  3007               	movlw	7
  2597  09F7  3185  25D5  3188   	fcall	_read_eeprom_data
  2598  09FA  00AF               	movwf	??_I_calibrationInit
  2599  09FB  3006               	movlw	6
  2600  09FC  3185  25D5  3188   	fcall	_read_eeprom_data
  2601  09FF  0021               	movlb	1	; select bank1
  2602  0A00  00ED               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  2603  0A01  0020               	movlb	0	; select bank0
  2604  0A02  082F               	movf	??_I_calibrationInit,w
  2605  0A03  0021               	movlb	1	; select bank1
  2606  0A04  00EC               	movwf	_ui16_I_cal_Ph3^(0+128)
  2607                           
  2608                           ;main.c: 212: }
  2609  0A05  2A0A               	goto	l30583
  2610  0A06                     l30581:	
  2611                           
  2612                           ;main.c: 215: else
  2613                           ;main.c: 216: {
  2614                           ;main.c: 218: ui16_I_cal_Ph3 = 0x0100;
  2615  0A06  0021               	movlb	1	; select bank1
  2616  0A07  3001               	movlw	1
  2617  0A08  01EC               	clrf	_ui16_I_cal_Ph3^(0+128)
  2618  0A09  00ED               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
  2619  0A0A                     l30583:	
  2620                           
  2621                           ;main.c: 221: }
  2622                           ;main.c: 314: LATC2 = 0;
  2623  0A0A  0022               	movlb	2	; select bank2
  2624  0A0B  301A               	movlw	26
  2625  0A0C  110E               	bcf	14,2
  2626                           
  2627                           ;main.c: 315: LATB2 = 0;
  2628  0A0D  110D               	bcf	13,2
  2629                           
  2630                           ;main.c: 316: LATB1 = 0;
  2631  0A0E  108D               	bcf	13,1
  2632                           
  2633                           ;main.c: 317: LATC = LATC | 0b00011010;
  2634  0A0F  048E               	iorwf	14,f	;volatile
  2635                           
  2636                           ;main.c: 319: ADC_Wait();
  2637  0A10  2238  3188         	fcall	_ADC_Wait
  2638                           
  2639                           ;main.c: 320: ADC_Wait();
  2640  0A12  2238  3188         	fcall	_ADC_Wait
  2641                           
  2642                           ;main.c: 322: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  2643  0A14  3011               	movlw	17
  2644  0A15  0021               	movlb	1	; select bank1
  2645  0A16  009D               	movwf	29	;volatile
  2646                           
  2647                           ;main.c: 323: ADC_Wait();
  2648  0A17  2238  3188         	fcall	_ADC_Wait
  2649                           
  2650                           ;main.c: 324: ( GO_nDONE = 1 );
  2651  0A19  0021               	movlb	1	; select bank1
  2652  0A1A  149D               	bsf	29,1
  2653                           
  2654                           ;main.c: 327: ui8_current_cal[2] = ADC_Read();
  2655  0A1B  2251  3188         	fcall	_ADC_Read
  2656  0A1D  082C               	movf	?_ADC_Read,w
  2657  0A1E  0022               	movlb	2	; select bank2
  2658  0A1F  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  2659                           
  2660                           ;main.c: 329: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  2661  0A20  3035               	movlw	53
  2662  0A21  0021               	movlb	1	; select bank1
  2663  0A22  009D               	movwf	29	;volatile
  2664                           
  2665                           ;main.c: 330: ADC_Wait();
  2666  0A23  2238  3188         	fcall	_ADC_Wait
  2667                           
  2668                           ;main.c: 331: ( GO_nDONE = 1 );
  2669  0A25  0021               	movlb	1	; select bank1
  2670  0A26  149D               	bsf	29,1
  2671                           
  2672                           ;main.c: 334: ui8_current_cal[1] = ADC_Read();
  2673  0A27  2251  3188         	fcall	_ADC_Read
  2674  0A29  082C               	movf	?_ADC_Read,w
  2675  0A2A  0022               	movlb	2	; select bank2
  2676  0A2B  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  2677                           
  2678                           ;main.c: 336: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  2679  0A2C  3009               	movlw	9
  2680  0A2D  0021               	movlb	1	; select bank1
  2681  0A2E  009D               	movwf	29	;volatile
  2682                           
  2683                           ;main.c: 337: ADC_Wait();
  2684  0A2F  2238  3188         	fcall	_ADC_Wait
  2685                           
  2686                           ;main.c: 338: ( GO_nDONE = 1 );
  2687  0A31  0021               	movlb	1	; select bank1
  2688  0A32  149D               	bsf	29,1
  2689                           
  2690                           ;main.c: 341: ui8_current_cal[0] = ADC_Read();
  2691  0A33  2251               	fcall	_ADC_Read
  2692  0A34  082C               	movf	?_ADC_Read,w
  2693  0A35  0022               	movlb	2	; select bank2
  2694  0A36  00A0               	movwf	_ui8_current_cal^(0+256)
  2695  0A37  0008               	return
  2696  0A38                     __end_of_I_calibrationInit:	
  2697  0A38                     __ptext2049:	
  2698 ;; =============== function _Get_Analog_Value ends ============
  2699                           
  2700                           
  2701 ;; *************** function _ADC_Wait *****************
  2702 ;; Defined at:
  2703 ;;		line 130 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;		None
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;		None
  2708 ;; Return value:  Size  Location     Type
  2709 ;;		None               void
  2710 ;; Registers used:
  2711 ;;		None
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/4
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2717 ;;      Params:         0       0       0       0       0       0       0       0
  2718 ;;      Locals:         0       0       0       0       0       0       0       0
  2719 ;;      Temps:          0       0       0       0       0       0       0       0
  2720 ;;      Totals:         0       0       0       0       0       0       0       0
  2721 ;;Total ram usage:        0 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    4
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_FILTER_Init
  2728 ;;		_EOL
  2729 ;;		_I_calibrationInit
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732  0A38                     _ADC_Wait:	
  2733                           
  2734                           ;adc.c: 133: _nop();
  2735                           
  2736                           ; Regs used in _ADC_Wait: []
  2737  0A38  0000               	nop
  2738                           
  2739                           ;adc.c: 134: _nop();
  2740  0A39  0000               	nop
  2741                           
  2742                           ;adc.c: 135: _nop();
  2743  0A3A  0000               	nop
  2744                           
  2745                           ;adc.c: 136: _nop();
  2746  0A3B  0000               	nop
  2747                           
  2748                           ;adc.c: 137: _nop();
  2749  0A3C  0000               	nop
  2750                           
  2751                           ;adc.c: 138: _nop();
  2752  0A3D  0000               	nop
  2753                           
  2754                           ;adc.c: 139: _nop();
  2755  0A3E  0000               	nop
  2756                           
  2757                           ;adc.c: 140: _nop();
  2758  0A3F  0000               	nop
  2759                           
  2760                           ;adc.c: 142: _nop();
  2761  0A40  0000               	nop
  2762                           
  2763                           ;adc.c: 143: _nop();
  2764  0A41  0000               	nop
  2765                           
  2766                           ;adc.c: 144: _nop();
  2767  0A42  0000               	nop
  2768                           
  2769                           ;adc.c: 145: _nop();
  2770  0A43  0000               	nop
  2771                           
  2772                           ;adc.c: 146: _nop();
  2773  0A44  0000               	nop
  2774                           
  2775                           ;adc.c: 147: _nop();
  2776  0A45  0000               	nop
  2777                           
  2778                           ;adc.c: 148: _nop();
  2779  0A46  0000               	nop
  2780                           
  2781                           ;adc.c: 149: _nop();
  2782  0A47  0000               	nop
  2783                           
  2784                           ;adc.c: 151: _nop();
  2785  0A48  0000               	nop
  2786                           
  2787                           ;adc.c: 152: _nop();
  2788  0A49  0000               	nop
  2789                           
  2790                           ;adc.c: 153: _nop();
  2791  0A4A  0000               	nop
  2792                           
  2793                           ;adc.c: 154: _nop();
  2794  0A4B  0000               	nop
  2795                           
  2796                           ;adc.c: 155: _nop();
  2797  0A4C  0000               	nop
  2798                           
  2799                           ;adc.c: 156: _nop();
  2800  0A4D  0000               	nop
  2801                           
  2802                           ;adc.c: 157: _nop();
  2803  0A4E  0000               	nop
  2804                           
  2805                           ;adc.c: 158: _nop();
  2806  0A4F  0000               	nop
  2807  0A50  0008               	return
  2808  0A51                     __end_of_ADC_Wait:	
  2809  0A51                     __ptext2075:	
  2810 ;; =============== function _FILTER_Ubat ends ============
  2811                           
  2812                           
  2813 ;; *************** function _ADC_Read *****************
  2814 ;; Defined at:
  2815 ;;		line 177 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;		None
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;  i               1   14[BANK0 ] unsigned char 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  2   12[BANK0 ] unsigned int 
  2822 ;; Registers used:
  2823 ;;		wreg, status,2, status,0
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/1
  2826 ;;		On exit  : 1F/0
  2827 ;;		Unchanged: FFFE0/0
  2828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2829 ;;      Params:         0       2       0       0       0       0       0       0
  2830 ;;      Locals:         0       1       0       0       0       0       0       0
  2831 ;;      Temps:          0       0       0       0       0       0       0       0
  2832 ;;      Totals:         0       3       0       0       0       0       0       0
  2833 ;;Total ram usage:        3 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    4
  2836 ;; This function calls:
  2837 ;;		Nothing
  2838 ;; This function is called by:
  2839 ;;		_FILTER_Init
  2840 ;;		_EOL
  2841 ;;		_I_calibrationInit
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844  0A51                     _ADC_Read:	
  2845                           
  2846                           ;adc.c: 179: unsigned char i;
  2847                           ;adc.c: 180: i = 0;
  2848                           
  2849                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  2850  0A51  0020               	movlb	0	; select bank0
  2851  0A52  01AE               	clrf	ADC_Read@i
  2852  0A53                     l1857:	
  2853                           ;adc.c: 182: while( GO_nDONE )
  2854                           
  2855  0A53  0021               	movlb	1	; select bank1
  2856  0A54  1C9D               	btfss	29,1
  2857  0A55  2A5C               	goto	l28345
  2858                           
  2859                           ;adc.c: 184: {
  2860                           ;adc.c: 186: i++;
  2861  0A56  0020               	movlb	0	; select bank0
  2862  0A57  3041               	movlw	65
  2863  0A58  0AAE               	incf	ADC_Read@i,f
  2864                           
  2865                           ;adc.c: 189: if( i > 64 )
  2866  0A59  022E               	subwf	ADC_Read@i,w
  2867  0A5A  1C03               	skipc
  2868  0A5B  2A53               	goto	l1857
  2869  0A5C                     l28345:	
  2870                           
  2871                           ;adc.c: 195: }
  2872                           ;adc.c: 198: }
  2873                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  2874  0A5C  0021               	movlb	1	; select bank1
  2875  0A5D  081C               	movf	28,w	;volatile
  2876  0A5E  00A9               	movwf	(_analog_value^(0+128)+1)	;volatile
  2877                           
  2878                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  2879  0A5F  081B               	movf	27,w	;volatile
  2880  0A60  00A8               	movwf	_analog_value^(0+128)	;volatile
  2881                           
  2882                           ;adc.c: 204: return analog_value.w;
  2883  0A61  0829               	movf	(_analog_value+1)^(0+128),w	;volatile
  2884  0A62  0020               	movlb	0	; select bank0
  2885  0A63  00AD               	movwf	?_ADC_Read+1
  2886  0A64  0021               	movlb	1	; select bank1
  2887  0A65  0828               	movf	_analog_value^(0+128),w	;volatile
  2888  0A66  0020               	movlb	0	; select bank0
  2889  0A67  00AC               	movwf	?_ADC_Read
  2890  0A68  0008               	return
  2891  0A69                     __end_of_ADC_Read:	
  2892  0A69                     start_initialization:	
  2893  0A69  3048               	movlw	low __pbssBANK0
  2894                           
  2895                           ; Clear objects allocated to BITBANK0
  2896  0A6A  01D3               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2897                           
  2898                           ; Clear objects allocated to BANK0
  2899  0A6B  0084               	movwf	4
  2900  0A6C  3000               	movlw	high __pbssBANK0
  2901  0A6D  0085               	movwf	5
  2902  0A6E  300B               	movlw	11
  2903  0A6F  3188  201C  3188   	fcall	clear_ram
  2904                           
  2905                           ; Clear objects allocated to BANK1
  2906  0A72  30A0               	movlw	low __pbssBANK1
  2907  0A73  0084               	movwf	4
  2908  0A74  3000               	movlw	high __pbssBANK1
  2909  0A75  0085               	movwf	5
  2910  0A76  3048               	movlw	72
  2911  0A77  3188  201C  3188   	fcall	clear_ram
  2912                           
  2913                           ; Clear objects allocated to BANK2
  2914  0A7A  3020               	movlw	low __pbssBANK2
  2915  0A7B  0084               	movwf	4
  2916  0A7C  3001               	movlw	high __pbssBANK2
  2917  0A7D  0085               	movwf	5
  2918  0A7E  3047               	movlw	71
  2919  0A7F  3188  201C  3188   	fcall	clear_ram
  2920                           
  2921                           ; Clear objects allocated to BANK3
  2922  0A82  30A0               	movlw	low __pbssBANK3
  2923  0A83  0084               	movwf	4
  2924  0A84  3001               	movlw	high __pbssBANK3
  2925  0A85  0085               	movwf	5
  2926  0A86  304C               	movlw	76
  2927  0A87  3188  201C  3188   	fcall	clear_ram
  2928                           
  2929                           ; Clear objects allocated to BANK4
  2930  0A8A  3040               	movlw	low __pbssBANK4
  2931  0A8B  0084               	movwf	4
  2932  0A8C  3002               	movlw	high __pbssBANK4
  2933  0A8D  0085               	movwf	5
  2934  0A8E  301F               	movlw	31
  2935  0A8F  3188  201C  3188   	fcall	clear_ram
  2936                           
  2937                           ;initializer for _ui8_selected_lid
  2938  0A92  3080               	movlw	128
  2939  0A93  00D4               	movwf	__pdataBANK0& (0+127)
  2940                           
  2941                           ; Initialize objects allocated to BANK1
  2942  0A94  0021               	movlb	1	; select bank1
  2943                           
  2944                           ;initializer for _ui16_I_cal_Ph1
  2945  0A95  3001               	movlw	1
  2946  0A96  00E8               	movwf	__pdataBANK1& (0+127)
  2947  0A97  01E9               	clrf	(__pdataBANK1+1)& (0+127)
  2948                           
  2949                           ;initializer for _ui16_I_cal_Ph2
  2950  0A98  00EA               	movwf	(__pdataBANK1+2)& (0+127)
  2951  0A99  01EB               	clrf	(__pdataBANK1+3)& (0+127)
  2952                           
  2953                           ;initializer for _ui16_I_cal_Ph3
  2954  0A9A  00EC               	movwf	(__pdataBANK1+4)& (0+127)
  2955  0A9B  01ED               	clrf	(__pdataBANK1+5)& (0+127)
  2956                           
  2957                           ;initializer for _wkpoint
  2958  0A9C  00EE               	movwf	(__pdataBANK1+6)& (0+127)
  2959                           
  2960                           ; Initialize objects allocated to BANK2
  2961  0A9D  0022               	movlb	2	; select bank2
  2962                           
  2963                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  2964  0A9E  3080               	movlw	128
  2965  0A9F  00E7               	movwf	__pdataBANK2& (0+127)
  2966  0AA0  3038               	movlw	56
  2967  0AA1  00E8               	movwf	(__pdataBANK2+1)& (0+127)
  2968  0AA2  3001               	movlw	1
  2969  0AA3  00E9               	movwf	(__pdataBANK2+2)& (0+127)
  2970  0AA4  01EA               	clrf	(__pdataBANK2+3)& (0+127)
  2971                           
  2972                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  2973  0AA5  00EB               	movwf	(__pdataBANK2+4)& (0+127)
  2974                           
  2975                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  2976  0AA6  00EC               	movwf	(__pdataBANK2+5)& (0+127)
  2977                           
  2978                           ;initializer for _ict_stamp
  2979  0AA7  00ED               	movwf	(__pdataBANK2+6)& (0+127)
  2980                           
  2981                           ;initializer for _ui8_failure
  2982  0AA8  3007               	movlw	7
  2983  0AA9  00EE               	movwf	(__pdataBANK2+7)& (0+127)
  2984  0AAA                     end_of_initialization:	
  2985                           ;End of C runtime variable initialization code
  2986                           
  2987  0AAA  0020               	movlb	0
  2988  0AAB  2AAC               	ljmp	_main	;jump to C main() function
  2989  0AAC                     __pmaintext:	
  2990 ;;Data sizes: Strings 0, constant 101, data 16, bss 261, persistent 5 stack 0
  2991 ;;Auto spaces:   Size  Autos    Used
  2992 ;; COMMON          14     13      13
  2993 ;; BANK0           80     40      53
  2994 ;; BANK1           80      0      80
  2995 ;; BANK2           80      0      79
  2996 ;; BANK3           80      0      80
  2997 ;; BANK4           80     32      63
  2998 ;; BANK5           80      0       0
  2999 ;; BANK6           16      0       0
  3000 ;;
  3001 ;; Pointer list with targets:
  3002 ;; ?i1_ADC_Read	unsigned int  size(1) Largest target is 0
  3003 ;;
  3004 ;; ?i1___lwdiv	unsigned int  size(1) Largest target is 0
  3005 ;;
  3006 ;; ?i1___wmul	unsigned int  size(1) Largest target is 0
  3007 ;;
  3008 ;; ?___aldiv	long  size(1) Largest target is 0
  3009 ;;
  3010 ;; ?___lmul	unsigned long  size(1) Largest target is 0
  3011 ;;
  3012 ;; ?___tmul	unsigned um size(1) Largest target is 0
  3013 ;;
  3014 ;; ?___ltdiv	unsigned um size(1) Largest target is 0
  3015 ;;
  3016 ;; ?___awdiv	int  size(1) Largest target is 0
  3017 ;;
  3018 ;; ?__ELINMIntGetPointer	PTR unsigned char  size(1) Largest target is 11
  3019 ;;		 -> _ELINMIntMessageBuffer(BANK4[11]), 
  3020 ;;
  3021 ;; ?_cksum	unsigned int  size(1) Largest target is 0
  3022 ;;
  3023 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
  3024 ;;
  3025 ;; ?___wmul	unsigned int  size(1) Largest target is 0
  3026 ;;
  3027 ;; ?_ADC_Read	unsigned int  size(1) Largest target is 0
  3028 ;;
  3029 ;; sp___ELINMIntGetPointer	PTR unsigned char  size(1) Largest target is 11
  3030 ;;		 -> _ELINMIntMessageBuffer(BANK4[11]), 
  3031 ;;
  3032 ;; pt	PTR unsigned char  size(1) Largest target is 11
  3033 ;;		 -> NULL(NULL[0]), _ELINMIntMessageBuffer(BANK4[11]), 
  3034 ;;
  3035 ;;
  3036 ;; Critical Paths under _main in COMMON
  3037 ;;
  3038 ;;   None.
  3039 ;;
  3040 ;; Critical Paths under _interrupt_handler in COMMON
  3041 ;;
  3042 ;;   _interrupt_handler->_interrrupt_bldc
  3043 ;;   _interrrupt_bldc->i1___lwdiv
  3044 ;;   i1_commutate->i1___wmul
  3045 ;;   _ELINMIntHandler->__ELINMIntResetProtocol
  3046 ;;
  3047 ;; Critical Paths under _main in BANK0
  3048 ;;
  3049 ;;   _main->_EOL
  3050 ;;   _EOL->_NegativeAnswer
  3051 ;;   _Receive_Diag->__ELINMIntReceiveMessage
  3052 ;;   _NegativeAnswer->_Transmit_LIN_8Bytes
  3053 ;;   _I_calibrationInit->_ADC_Read
  3054 ;;   __ELINMIntReceiveMessage->__ELINMIntSendMessage
  3055 ;;   _Transmit_LIN_8Bytes->__ELINMIntSendMessage
  3056 ;;   _InitMotorRun->_commutate
  3057 ;;   _FILTER_Init->_ADC_Read
  3058 ;;   _BVH2_Appl_Layer->___aldiv
  3059 ;;   _timer_init->_clear_timer
  3060 ;;   _init_ports->_read_eeprom_data
  3061 ;;   __ELINMIntSendMessage->__ELINMIntCalcIDParity
  3062 ;;   _PWMReadDC->___ltdiv
  3063 ;;   _SetDiagAlarm->_PWM_Write_Out
  3064 ;;   _DiagInit->_PWM_Write_Out
  3065 ;;   _commutate->___wmul
  3066 ;;   _Get_Analog_Value->_FILTER_Ubat
  3067 ;;   ___ltdiv->___tmul
  3068 ;;   ___awdiv->___wmul
  3069 ;;   _write_eeprom_data->___lwdiv
  3070 ;;
  3071 ;; Critical Paths under _interrupt_handler in BANK0
  3072 ;;
  3073 ;;   _interrrupt_bldc->i1_commutate
  3074 ;;
  3075 ;; Critical Paths under _main in BANK1
  3076 ;;
  3077 ;;   None.
  3078 ;;
  3079 ;; Critical Paths under _interrupt_handler in BANK1
  3080 ;;
  3081 ;;   None.
  3082 ;;
  3083 ;; Critical Paths under _main in BANK2
  3084 ;;
  3085 ;;   None.
  3086 ;;
  3087 ;; Critical Paths under _interrupt_handler in BANK2
  3088 ;;
  3089 ;;   None.
  3090 ;;
  3091 ;; Critical Paths under _main in BANK3
  3092 ;;
  3093 ;;   None.
  3094 ;;
  3095 ;; Critical Paths under _interrupt_handler in BANK3
  3096 ;;
  3097 ;;   None.
  3098 ;;
  3099 ;; Critical Paths under _main in BANK4
  3100 ;;
  3101 ;;   _main->_BVH2_Appl_Layer
  3102 ;;
  3103 ;; Critical Paths under _interrupt_handler in BANK4
  3104 ;;
  3105 ;;   None.
  3106 ;;
  3107 ;; Critical Paths under _main in BANK5
  3108 ;;
  3109 ;;   None.
  3110 ;;
  3111 ;; Critical Paths under _interrupt_handler in BANK5
  3112 ;;
  3113 ;;   None.
  3114 ;;
  3115 ;; Critical Paths under _main in BANK6
  3116 ;;
  3117 ;;   None.
  3118 ;;
  3119 ;; Critical Paths under _interrupt_handler in BANK6
  3120 ;;
  3121 ;;   None.
  3122 ;;
  3123 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3124 ;;
  3125 ;;
  3126 ;;Call Graph Tables:
  3127 ;;
  3128 ;; ---------------------------------------------------------------------------------
  3129 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  3130 ;; ---------------------------------------------------------------------------------
  3131 ;; (0) _main                                                 4     4      0   11774
  3132 ;;                                             36 BANK0      4     4      0
  3133 ;;                        _system_init
  3134 ;;                        _clear_timer
  3135 ;;                             ___wmul
  3136 ;;                            ___awdiv
  3137 ;;                   _Get_Analog_Value
  3138 ;;                          _PWMReadDC
  3139 ;;                    _BVH2_Appl_Layer
  3140 ;;                      _InitMotorStop
  3141 ;;                       _InitMotorRun
  3142 ;;                       _SetDiagAlarm
  3143 ;;                   _read_eeprom_data
  3144 ;;                       _Receive_Diag
  3145 ;;                                _EOL
  3146 ;; ---------------------------------------------------------------------------------
  3147 ;; (1) _system_init                                          0     0      0     509
  3148 ;;                         _init_ports
  3149 ;;                       _EnableMCP201
  3150 ;;                __ELINMIntInitialize
  3151 ;;                _Oscill_Source_Block
  3152 ;;                         _timer_init
  3153 ;;                   _PWM_Capture_init
  3154 ;;                           _ADC_Init
  3155 ;;                           _DiagInit
  3156 ;;                        _FILTER_Init
  3157 ;;                  _I_calibrationInit
  3158 ;;                          _init_bldc
  3159 ;; ---------------------------------------------------------------------------------
  3160 ;; (1) _EOL                                                 27    27      0    7491
  3161 ;;                                             33 BANK0      3     3      0
  3162 ;;                                              0 BANK4     24    24      0
  3163 ;;                _Transmit_LIN_8Bytes
  3164 ;;                   _read_eeprom_data
  3165 ;;                     _NegativeAnswer
  3166 ;;                              _cksum
  3167 ;;                      _InitMotorStop
  3168 ;;                           _ADC_Wait
  3169 ;;                           _ADC_Read
  3170 ;;                            ___lwdiv
  3171 ;;                  _write_eeprom_data
  3172 ;;                             ___wmul
  3173 ;;                          _PWMReadDC
  3174 ;;                      _PWM_Write_Out
  3175 ;; ---------------------------------------------------------------------------------
  3176 ;; (1) _Receive_Diag                                         2     2      0     753
  3177 ;;                                             26 BANK0      2     2      0
  3178 ;;            __ELINMIntReceiveMessage
  3179 ;;                __ELINMIntGetPointer
  3180 ;; ---------------------------------------------------------------------------------
  3181 ;; (2) _NegativeAnswer                                       1     1      0     957
  3182 ;;                                             32 BANK0      1     1      0
  3183 ;;                _Transmit_LIN_8Bytes
  3184 ;; ---------------------------------------------------------------------------------
  3185 ;; (2) _init_bldc                                            0     0      0     136
  3186 ;;                       _InitMotorRun
  3187 ;; ---------------------------------------------------------------------------------
  3188 ;; (2) _I_calibrationInit                                    1     1      0     102
  3189 ;;                                             15 BANK0      1     1      0
  3190 ;;                   _read_eeprom_data
  3191 ;;                           _ADC_Wait
  3192 ;;                           _ADC_Read
  3193 ;; ---------------------------------------------------------------------------------
  3194 ;; (2) __ELINMIntReceiveMessage                              3     1      2     678
  3195 ;;                                             23 BANK0      3     1      2
  3196 ;;               __ELINMIntSendMessage
  3197 ;; ---------------------------------------------------------------------------------
  3198 ;; (3) _Transmit_LIN_8Bytes                                  9     1      8     926
  3199 ;;                                             23 BANK0      9     1      8
  3200 ;;                __ELINMIntGetPointer
  3201 ;;               __ELINMIntSendMessage
  3202 ;; ---------------------------------------------------------------------------------
  3203 ;; (1) _InitMotorRun                                         0     0      0     136
  3204 ;;                          _commutate
  3205 ;; ---------------------------------------------------------------------------------
  3206 ;; (2) _FILTER_Init                                          0     0      0      37
  3207 ;;                           _ADC_Wait
  3208 ;;                           _ADC_Read
  3209 ;; ---------------------------------------------------------------------------------
  3210 ;; (1) _BVH2_Appl_Layer                                     38    38      0    1954
  3211 ;;                                             26 BANK0      6     6      0
  3212 ;;                                              0 BANK4     32    32      0
  3213 ;;    _Cb44_Pic_etat_monitor_node_fcn1
  3214 ;;       _Cb34_PWM_Detection_node_fcn1
  3215 ;;        _Cb56_UbatHandling_node_fcn2
  3216 ;;    _Cb1_Current_An___High_node_fcn1
  3217 ;;                             ___lmul
  3218 ;;                            ___aldiv
  3219 ;;                             ___wmul
  3220 ;; ---------------------------------------------------------------------------------
  3221 ;; (2) _timer_init                                           1     1      0      44
  3222 ;;                                             13 BANK0      1     1      0
  3223 ;;                        _clear_timer
  3224 ;; ---------------------------------------------------------------------------------
  3225 ;; (2) _init_ports                                           0     0      0      65
  3226 ;;                   _read_eeprom_data
  3227 ;; ---------------------------------------------------------------------------------
  3228 ;; (4) __ELINMIntSendMessage                                10     5      5     603
  3229 ;;                                             13 BANK0     10     5      5
  3230 ;;              __ELINMIntCalcIDParity
  3231 ;; ---------------------------------------------------------------------------------
  3232 ;; (2) _PWMReadDC                                            0     0      0     377
  3233 ;;                             ___tmul
  3234 ;;                            ___ltdiv
  3235 ;; ---------------------------------------------------------------------------------
  3236 ;; (1) _SetDiagAlarm                                         0     0      0      31
  3237 ;;                      _PWM_Write_Out
  3238 ;; ---------------------------------------------------------------------------------
  3239 ;; (2) _DiagInit                                             0     0      0      31
  3240 ;;                      _PWM_Write_Out
  3241 ;; ---------------------------------------------------------------------------------
  3242 ;; (2) _cksum                                                8     6      2     139
  3243 ;;                                             12 BANK0      8     6      2
  3244 ;; ---------------------------------------------------------------------------------
  3245 ;; (2) _commutate                                           12    12      0     136
  3246 ;;                                             18 BANK0     12    12      0
  3247 ;;                             ___wmul
  3248 ;; ---------------------------------------------------------------------------------
  3249 ;; (1) _Get_Analog_Value                                     0     0      0       0
  3250 ;;                        _FILTER_Ubat
  3251 ;;                      _FILTER_IPhase
  3252 ;;                        _FILTER_Temp
  3253 ;; ---------------------------------------------------------------------------------
  3254 ;; (2) _ADC_Wait                                             0     0      0       0
  3255 ;; ---------------------------------------------------------------------------------
  3256 ;; (3) ___tmul                                               9     3      6     136
  3257 ;;                                             12 BANK0      9     3      6
  3258 ;; ---------------------------------------------------------------------------------
  3259 ;; (3) ___ltdiv                                             10     4      6     241
  3260 ;;                                             21 BANK0     10     4      6
  3261 ;;                             ___tmul (ARG)
  3262 ;; ---------------------------------------------------------------------------------
  3263 ;; (2) ___aldiv                                             14     6      8     445
  3264 ;;                                             12 BANK0     14     6      8
  3265 ;; ---------------------------------------------------------------------------------
  3266 ;; (1) ___awdiv                                              8     4      4     300
  3267 ;;                                             18 BANK0      8     4      4
  3268 ;;                             ___wmul (ARG)
  3269 ;; ---------------------------------------------------------------------------------
  3270 ;; (2) ___lmul                                              12     4      8     136
  3271 ;;                                             12 BANK0     12     4      8
  3272 ;; ---------------------------------------------------------------------------------
  3273 ;; (2) ___lwdiv                                              7     3      4     241
  3274 ;;                                             12 BANK0      7     3      4
  3275 ;; ---------------------------------------------------------------------------------
  3276 ;; (2) ___wmul                                               6     2      4     136
  3277 ;;                                             12 BANK0      6     2      4
  3278 ;; ---------------------------------------------------------------------------------
  3279 ;; (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
  3280 ;; ---------------------------------------------------------------------------------
  3281 ;; (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
  3282 ;; ---------------------------------------------------------------------------------
  3283 ;; (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
  3284 ;; ---------------------------------------------------------------------------------
  3285 ;; (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
  3286 ;; ---------------------------------------------------------------------------------
  3287 ;; (1) _clear_timer                                          1     1      0      22
  3288 ;;                                             12 BANK0      1     1      0
  3289 ;; ---------------------------------------------------------------------------------
  3290 ;; (2) _PWM_Capture_init                                     1     1      0      22
  3291 ;;                                             12 BANK0      1     1      0
  3292 ;; ---------------------------------------------------------------------------------
  3293 ;; (2) _Oscill_Source_Block                                  0     0      0       0
  3294 ;; ---------------------------------------------------------------------------------
  3295 ;; (5) __ELINMIntCalcIDParity                                1     1      0     309
  3296 ;;                                             12 BANK0      1     1      0
  3297 ;; ---------------------------------------------------------------------------------
  3298 ;; (2) __ELINMIntInitialize                                  0     0      0       0
  3299 ;; ---------------------------------------------------------------------------------
  3300 ;; (2) _EnableMCP201                                         3     3      0      72
  3301 ;;                                             12 BANK0      3     3      0
  3302 ;; ---------------------------------------------------------------------------------
  3303 ;; (4) __ELINMIntGetPointer                                  2     1      1      44
  3304 ;;                                             12 BANK0      2     1      1
  3305 ;; ---------------------------------------------------------------------------------
  3306 ;; (2) _write_eeprom_data                                    2     1      1      62
  3307 ;;                                             19 BANK0      2     1      1
  3308 ;;                            ___lwdiv (ARG)
  3309 ;; ---------------------------------------------------------------------------------
  3310 ;; (2) _read_eeprom_data                                     2     2      0      65
  3311 ;;                                             12 BANK0      2     2      0
  3312 ;; ---------------------------------------------------------------------------------
  3313 ;; (2) _PWM_Write_Out                                        1     1      0      31
  3314 ;;                                             12 BANK0      1     1      0
  3315 ;; ---------------------------------------------------------------------------------
  3316 ;; (2) _InitMotorStop                                        0     0      0       0
  3317 ;; ---------------------------------------------------------------------------------
  3318 ;; (2) _FILTER_Temp                                          0     0      0       0
  3319 ;; ---------------------------------------------------------------------------------
  3320 ;; (2) _FILTER_IPhase                                        0     0      0       0
  3321 ;; ---------------------------------------------------------------------------------
  3322 ;; (2) _FILTER_Ubat                                         12    12      0       0
  3323 ;;                                             12 BANK0     12    12      0
  3324 ;; ---------------------------------------------------------------------------------
  3325 ;; (2) _ADC_Read                                             3     1      2      37
  3326 ;;                                             12 BANK0      3     1      2
  3327 ;; ---------------------------------------------------------------------------------
  3328 ;; (2) _ADC_Init                                             0     0      0       0
  3329 ;; ---------------------------------------------------------------------------------
  3330 ;; Estimated maximum stack depth 5
  3331 ;; ---------------------------------------------------------------------------------
  3332 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  3333 ;; ---------------------------------------------------------------------------------
  3334 ;; (6) _interrupt_handler                                    0     0      0    1557
  3335 ;;                           _PWM_CTRL
  3336 ;;                            _Task1ms
  3337 ;;                    _interrrupt_bldc
  3338 ;;                    _ELINMIntHandler
  3339 ;;               _interrupt_PWMCapture
  3340 ;; ---------------------------------------------------------------------------------
  3341 ;; (7) _interrrupt_bldc                                      6     6      0    1535
  3342 ;;                                              7 COMMON     6     6      0
  3343 ;;                        i1_commutate
  3344 ;;                           _BLDCWait
  3345 ;;                         i1_ADC_Wait
  3346 ;;                         i1_ADC_Read
  3347 ;;                           i1___wmul
  3348 ;;                          i1___lwdiv
  3349 ;; ---------------------------------------------------------------------------------
  3350 ;; (8) i1_commutate                                         12    12      0     372
  3351 ;;                                              0 BANK0     12    12      0
  3352 ;;                           i1___wmul
  3353 ;; ---------------------------------------------------------------------------------
  3354 ;; (8) i1_ADC_Wait                                           0     0      0       0
  3355 ;; ---------------------------------------------------------------------------------
  3356 ;; (7) _ELINMIntHandler                                      4     4      0      22
  3357 ;;                                              1 COMMON     4     4      0
  3358 ;;             __ELINMIntResetProtocol
  3359 ;; ---------------------------------------------------------------------------------
  3360 ;; (8) _BLDCWait                                             0     0      0       0
  3361 ;; ---------------------------------------------------------------------------------
  3362 ;; (8) i1___lwdiv                                            7     3      4     656
  3363 ;;                                              0 COMMON     7     3      4
  3364 ;; ---------------------------------------------------------------------------------
  3365 ;; (8) i1___wmul                                             6     2      4     372
  3366 ;;                                              0 COMMON     6     2      4
  3367 ;; ---------------------------------------------------------------------------------
  3368 ;; (8) i1_ADC_Read                                           3     1      2      98
  3369 ;;                                              0 COMMON     3     1      2
  3370 ;; ---------------------------------------------------------------------------------
  3371 ;; (8) __ELINMIntResetProtocol                               1     1      0      22
  3372 ;;                                              0 COMMON     1     1      0
  3373 ;; ---------------------------------------------------------------------------------
  3374 ;; (7) _interrupt_PWMCapture                                 0     0      0       0
  3375 ;; ---------------------------------------------------------------------------------
  3376 ;; (7) _PWM_CTRL                                             0     0      0       0
  3377 ;; ---------------------------------------------------------------------------------
  3378 ;; (7) _Task1ms                                              0     0      0       0
  3379 ;; ---------------------------------------------------------------------------------
  3380 ;; Estimated maximum stack depth 8
  3381 ;; ---------------------------------------------------------------------------------
  3382 ;; Call Graph Graphs:
  3383 ;; _main (ROOT)
  3384 ;;   _system_init
  3385 ;;     _init_ports
  3386 ;;       _read_eeprom_data
  3387 ;;     _EnableMCP201
  3388 ;;     __ELINMIntInitialize
  3389 ;;     _Oscill_Source_Block
  3390 ;;     _timer_init
  3391 ;;       _clear_timer
  3392 ;;     _PWM_Capture_init
  3393 ;;     _ADC_Init
  3394 ;;     _DiagInit
  3395 ;;       _PWM_Write_Out
  3396 ;;     _FILTER_Init
  3397 ;;       _ADC_Wait
  3398 ;;       _ADC_Read
  3399 ;;     _I_calibrationInit
  3400 ;;       _read_eeprom_data
  3401 ;;       _ADC_Wait
  3402 ;;       _ADC_Read
  3403 ;;     _init_bldc
  3404 ;;       _InitMotorRun
  3405 ;;         _commutate
  3406 ;;           ___wmul
  3407 ;;   _clear_timer
  3408 ;;   ___wmul
  3409 ;;   ___awdiv
  3410 ;;     ___wmul (ARG)
  3411 ;;   _Get_Analog_Value
  3412 ;;     _FILTER_Ubat
  3413 ;;     _FILTER_IPhase
  3414 ;;     _FILTER_Temp
  3415 ;;   _PWMReadDC
  3416 ;;     ___tmul
  3417 ;;     ___ltdiv
  3418 ;;       ___tmul (ARG)
  3419 ;;   _BVH2_Appl_Layer
  3420 ;;     _Cb44_Pic_etat_monitor_node_fcn1
  3421 ;;     _Cb34_PWM_Detection_node_fcn1
  3422 ;;     _Cb56_UbatHandling_node_fcn2
  3423 ;;     _Cb1_Current_An___High_node_fcn1
  3424 ;;     ___lmul
  3425 ;;     ___aldiv
  3426 ;;     ___wmul
  3427 ;;   _InitMotorStop
  3428 ;;   _InitMotorRun
  3429 ;;     _commutate
  3430 ;;       ___wmul
  3431 ;;   _SetDiagAlarm
  3432 ;;     _PWM_Write_Out
  3433 ;;   _read_eeprom_data
  3434 ;;   _Receive_Diag
  3435 ;;     __ELINMIntReceiveMessage
  3436 ;;       __ELINMIntSendMessage
  3437 ;;         __ELINMIntCalcIDParity
  3438 ;;     __ELINMIntGetPointer
  3439 ;;   _EOL
  3440 ;;     _Transmit_LIN_8Bytes
  3441 ;;       __ELINMIntGetPointer
  3442 ;;       __ELINMIntSendMessage
  3443 ;;         __ELINMIntCalcIDParity
  3444 ;;     _read_eeprom_data
  3445 ;;     _NegativeAnswer
  3446 ;;       _Transmit_LIN_8Bytes
  3447 ;;         __ELINMIntGetPointer
  3448 ;;         __ELINMIntSendMessage
  3449 ;;           __ELINMIntCalcIDParity
  3450 ;;     _cksum
  3451 ;;     _InitMotorStop
  3452 ;;     _ADC_Wait
  3453 ;;     _ADC_Read
  3454 ;;     ___lwdiv
  3455 ;;     _write_eeprom_data
  3456 ;;       ___lwdiv (ARG)
  3457 ;;     ___wmul
  3458 ;;     _PWMReadDC
  3459 ;;       ___tmul
  3460 ;;       ___ltdiv
  3461 ;;         ___tmul (ARG)
  3462 ;;     _PWM_Write_Out
  3463 ;;
  3464 ;; _interrupt_handler (ROOT)
  3465 ;;   _PWM_CTRL
  3466 ;;   _Task1ms
  3467 ;;   _interrrupt_bldc
  3468 ;;     i1_commutate
  3469 ;;       i1___wmul
  3470 ;;     _BLDCWait
  3471 ;;     i1_ADC_Wait
  3472 ;;     i1_ADC_Read
  3473 ;;     i1___wmul
  3474 ;;     i1___lwdiv
  3475 ;;   _ELINMIntHandler
  3476 ;;     __ELINMIntResetProtocol
  3477 ;;   _interrupt_PWMCapture
  3478 ;;
  3479 ;; Address spaces:
  3480 ;;Name               Size   Autos  Total    Cost      Usage
  3481 ;;BIGRAM             1F0      0       0       0        0.0%
  3482 ;;EEDATA             100      0       0       0        0.0%
  3483 ;;NULL                 0      0       0       0        0.0%
  3484 ;;CODE                 0      0       0       0        0.0%
  3485 ;;BITCOMMON            E      0       0       1        0.0%
  3486 ;;BITSFR0              0      0       0       1        0.0%
  3487 ;;SFR0                 0      0       0       1        0.0%
  3488 ;;COMMON               E      D       D       2       92.9%
  3489 ;;BITSFR1              0      0       0       2        0.0%
  3490 ;;SFR1                 0      0       0       2        0.0%
  3491 ;;BITSFR2              0      0       0       3        0.0%
  3492 ;;SFR2                 0      0       0       3        0.0%
  3493 ;;STACK                0      0       D       3        0.0%
  3494 ;;BITSFR3              0      0       0       4        0.0%
  3495 ;;SFR3                 0      0       0       4        0.0%
  3496 ;;ABS                  0      0     170       4        0.0%
  3497 ;;BITBANK0            50      0       1       5        1.3%
  3498 ;;BITSFR4              0      0       0       5        0.0%
  3499 ;;SFR4                 0      0       0       5        0.0%
  3500 ;;BANK0               50     28      35       6       66.3%
  3501 ;;BITSFR5              0      0       0       6        0.0%
  3502 ;;SFR5                 0      0       0       6        0.0%
  3503 ;;BITBANK1            50      0       0       7        0.0%
  3504 ;;BITSFR6              0      0       0       7        0.0%
  3505 ;;SFR6                 0      0       0       7        0.0%
  3506 ;;BANK1               50      0      50       8      100.0%
  3507 ;;BITSFR7              0      0       0       8        0.0%
  3508 ;;SFR7                 0      0       0       8        0.0%
  3509 ;;BITBANK2            50      0       0       9        0.0%
  3510 ;;BITSFR8              0      0       0       9        0.0%
  3511 ;;SFR8                 0      0       0       9        0.0%
  3512 ;;BANK2               50      0      4F      10       98.8%
  3513 ;;BITSFR9              0      0       0      10        0.0%
  3514 ;;SFR9                 0      0       0      10        0.0%
  3515 ;;BITBANK3            50      0       0      11        0.0%
  3516 ;;BITSFR10             0      0       0      11        0.0%
  3517 ;;SFR10                0      0       0      11        0.0%
  3518 ;;BANK3               50      0      50      12      100.0%
  3519 ;;BITSFR11             0      0       0      12        0.0%
  3520 ;;SFR11                0      0       0      12        0.0%
  3521 ;;BITBANK4            50      0       0      13        0.0%
  3522 ;;BITSFR12             0      0       0      13        0.0%
  3523 ;;SFR12                0      0       0      13        0.0%
  3524 ;;BANK4               50     20      3F      14       78.8%
  3525 ;;BITSFR13             0      0       0      14        0.0%
  3526 ;;SFR13                0      0       0      14        0.0%
  3527 ;;BITBANK5            50      0       0      15        0.0%
  3528 ;;BITSFR14             0      0       0      15        0.0%
  3529 ;;SFR14                0      0       0      15        0.0%
  3530 ;;BANK5               50      0       0      16        0.0%
  3531 ;;BITSFR15             0      0       0      16        0.0%
  3532 ;;SFR15                0      0       0      16        0.0%
  3533 ;;BITBANK6            10      0       0      17        0.0%
  3534 ;;BITSFR16             0      0       0      17        0.0%
  3535 ;;SFR16                0      0       0      17        0.0%
  3536 ;;BANK6               10      0       0      18        0.0%
  3537 ;;BITSFR17             0      0       0      18        0.0%
  3538 ;;SFR17                0      0       0      18        0.0%
  3539 ;;BITSFR18             0      0       0      19        0.0%
  3540 ;;SFR18                0      0       0      19        0.0%
  3541 ;;DATA                 0      0     17D      19        0.0%
  3542 ;;BITSFR19             0      0       0      20        0.0%
  3543 ;;SFR19                0      0       0      20        0.0%
  3544 ;;BITSFR20             0      0       0      21        0.0%
  3545 ;;SFR20                0      0       0      21        0.0%
  3546 ;;BITSFR21             0      0       0      22        0.0%
  3547 ;;SFR21                0      0       0      22        0.0%
  3548 ;;BITSFR22             0      0       0      23        0.0%
  3549 ;;SFR22                0      0       0      23        0.0%
  3550 ;;BITSFR23             0      0       0      24        0.0%
  3551 ;;SFR23                0      0       0      24        0.0%
  3552 ;;BITSFR24             0      0       0      25        0.0%
  3553 ;;SFR24                0      0       0      25        0.0%
  3554 ;;BITSFR25             0      0       0      26        0.0%
  3555 ;;SFR25                0      0       0      26        0.0%
  3556 ;;BITSFR26             0      0       0      27        0.0%
  3557 ;;SFR26                0      0       0      27        0.0%
  3558 ;;BITSFR27             0      0       0      28        0.0%
  3559 ;;SFR27                0      0       0      28        0.0%
  3560 ;;BITSFR28             0      0       0      29        0.0%
  3561 ;;SFR28                0      0       0      29        0.0%
  3562 ;;BITSFR29             0      0       0      30        0.0%
  3563 ;;SFR29                0      0       0      30        0.0%
  3564 ;;BITSFR30             0      0       0      31        0.0%
  3565 ;;SFR30                0      0       0      31        0.0%
  3566 ;;BITSFR31             0      0       0      32        0.0%
  3567 ;;SFR31                0      0       0      32        0.0%
  3568                           
  3569                           
  3570 ;; *************** function _main *****************
  3571 ;; Defined at:
  3572 ;;		line 621 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\main.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;		None               void
  3579 ;; Registers used:
  3580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 17F/0
  3583 ;;		On exit  : 1F/2
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3586 ;;      Params:         0       0       0       0       0       0       0       0
  3587 ;;      Locals:         0       0       0       0       0       0       0       0
  3588 ;;      Temps:          0       4       0       0       0       0       0       0
  3589 ;;      Totals:         0       4       0       0       0       0       0       0
  3590 ;;Total ram usage:        4 bytes
  3591 ;; Hardware stack levels required when called:    9
  3592 ;; This function calls:
  3593 ;;		_system_init
  3594 ;;		_clear_timer
  3595 ;;		___wmul
  3596 ;;		___awdiv
  3597 ;;		_Get_Analog_Value
  3598 ;;		_PWMReadDC
  3599 ;;		_BVH2_Appl_Layer
  3600 ;;		_InitMotorStop
  3601 ;;		_InitMotorRun
  3602 ;;		_SetDiagAlarm
  3603 ;;		_read_eeprom_data
  3604 ;;		_Receive_Diag
  3605 ;;		_EOL
  3606 ;; This function is called by:
  3607 ;;		Startup code after reset
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610  0AAC                     _main:	
  3611                           
  3612                           ;main.c: 631: system_init( );
  3613                           
  3614                           ; Regs used in _main: [allreg]
  3615  0AAC  2056  3188         	fcall	_system_init
  3616                           
  3617                           ;main.c: 632: clear_timer( 4 );
  3618  0AAE  3004               	movlw	4
  3619  0AAF  2437  3188         	fcall	_clear_timer
  3620                           
  3621                           ;main.c: 633: ui8_lastTaskvalue = 0;
  3622  0AB1  0022               	movlb	2	; select bank2
  3623  0AB2  01DF               	clrf	_ui8_lastTaskvalue^(0+256)
  3624  0AB3                     l31323:	
  3625                           
  3626                           ;main.c: 686: {
  3627                           ;main.c: 688: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  3628  0AB3  0021               	movlb	1	; select bank1
  3629  0AB4  0862               	movf	_ui8_Task_Cont1ms^(0+128),w
  3630  0AB5  0020               	movlb	0	; select bank0
  3631  0AB6  00C4               	movwf	??_main
  3632  0AB7  01C5               	clrf	??_main+1
  3633  0AB8  0845               	movf	??_main+1,w
  3634  0AB9  00C7               	movwf	??_main+3
  3635  0ABA  0022               	movlb	2	; select bank2
  3636  0ABB  085F               	movf	_ui8_lastTaskvalue^(0+256),w
  3637  0ABC  0020               	movlb	0	; select bank0
  3638  0ABD  0244               	subwf	??_main,w
  3639  0ABE  00C6               	movwf	??_main+2
  3640  0ABF  1C03               	skipc
  3641  0AC0  03C7               	decf	??_main+3,f
  3642  0AC1  0447               	iorwf	??_main+3,w
  3643  0AC2  1903               	skipnz
  3644  0AC3  2AB3               	goto	l31323
  3645                           
  3646                           ;main.c: 690: {
  3647                           ;main.c: 696: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  3648  0AC4  0021               	movlb	1	; select bank1
  3649  0AC5  0862               	movf	_ui8_Task_Cont1ms^(0+128),w
  3650  0AC6  0022               	movlb	2	; select bank2
  3651  0AC7  00DF               	movwf	_ui8_lastTaskvalue^(0+256)
  3652                           
  3653                           ;main.c: 699: ui8_Task_Cont3ms++;
  3654  0AC8  0AD7               	incf	_ui8_Task_Cont3ms^(0+256),f
  3655                           
  3656                           ;main.c: 700: ui8_Task_Cont5ms++;
  3657  0AC9  0AD8               	incf	_ui8_Task_Cont5ms^(0+256),f
  3658                           
  3659                           ;main.c: 701: ui8_Task_Cont100ms++;
  3660  0ACA  0021               	movlb	1	; select bank1
  3661  0ACB  0AE1               	incf	_ui8_Task_Cont100ms^(0+128),f
  3662                           
  3663                           ;main.c: 760: if( ui8_error_Flags.bits.B1 == 1)
  3664  0ACC  1CE5               	btfss	_ui8_error_Flags^(0+128),1
  3665  0ACD  2AD5               	goto	l31339
  3666                           
  3667                           ;main.c: 762: {
  3668                           ;main.c: 808: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 2;
  3669  0ACE  30C8               	movlw	200
  3670  0ACF  0020               	movlb	0	; select bank0
  3671  0AD0  009B               	movwf	27	;volatile
  3672                           
  3673                           ;main.c: 809: ui8_duty_cycle_BLDC = ui8_duty_cycle_mat * 2;
  3674  0AD1  0021               	movlb	1	; select bank1
  3675  0AD2  3564               	lslf	_ui8_duty_cycle_mat^(0+128),w
  3676  0AD3  0020               	movlb	0	; select bank0
  3677  0AD4  2AED               	goto	L1
  3678  0AD5                     l31339:	
  3679                           ;main.c: 818: }
  3680                           
  3681                           
  3682                           ;main.c: 821: else
  3683                           ;main.c: 822: {
  3684                           ;main.c: 869: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  3685  0AD5  307D               	movlw	125
  3686  0AD6  0020               	movlb	0	; select bank0
  3687  0AD7  009B               	movwf	27	;volatile
  3688                           
  3689                           ;main.c: 870: ui8_duty_cycle_BLDC = ui8_duty_cycle_mat * 5 / 4;
  3690  0AD8  3004               	movlw	4
  3691  0AD9  00B2               	movwf	?___awdiv
  3692  0ADA  01B3               	clrf	?___awdiv+1
  3693  0ADB  0021               	movlb	1	; select bank1
  3694  0ADC  0864               	movf	_ui8_duty_cycle_mat^(0+128),w
  3695  0ADD  0020               	movlb	0	; select bank0
  3696  0ADE  00AC               	movwf	?___wmul
  3697  0ADF  3005               	movlw	5
  3698  0AE0  01AD               	clrf	?___wmul+1
  3699  0AE1  00AE               	movwf	?___wmul+2
  3700  0AE2  01AF               	clrf	?___wmul+3
  3701  0AE3  3186  263B  3188   	fcall	___wmul
  3702  0AE6  082D               	movf	?___wmul+1,w
  3703  0AE7  00B5               	movwf	?___awdiv+3
  3704  0AE8  082C               	movf	?___wmul,w
  3705  0AE9  00B4               	movwf	?___awdiv+2
  3706  0AEA  23E9  3188         	fcall	___awdiv
  3707  0AEC  0832               	movf	?___awdiv,w
  3708  0AED                     L1:	
  3709  0AED  00D0               	movwf	_ui8_duty_cycle_BLDC
  3710                           
  3711                           ;main.c: 880: }
  3712                           ;main.c: 936: Get_Analog_Value( );
  3713  0AEE  2458  3188         	fcall	_Get_Analog_Value
  3714                           
  3715                           ;main.c: 982: if( ui8_Task_Cont3ms > 2 )
  3716  0AF0  3003               	movlw	3
  3717  0AF1  0022               	movlb	2	; select bank2
  3718  0AF2  0257               	subwf	_ui8_Task_Cont3ms^(0+256),w
  3719  0AF3  1803               	btfsc	3,0
  3720                           
  3721                           ;main.c: 984: {
  3722                           ;main.c: 986: ui8_Task_Cont3ms = 0;
  3723  0AF4  01D7               	clrf	_ui8_Task_Cont3ms^(0+256)
  3724                           
  3725                           ;main.c: 1021: }
  3726                           ;main.c: 1027: if( ui8_Task_Cont5ms > 4 )
  3727  0AF5  3005               	movlw	5
  3728  0AF6  0258               	subwf	_ui8_Task_Cont5ms^(0+256),w
  3729  0AF7  1C03               	skipc
  3730  0AF8  2BC0               	goto	l31409
  3731                           
  3732                           ;main.c: 1029: {
  3733                           ;main.c: 1033: ui8_Task_Cont5ms = 0;
  3734  0AF9  01D8               	clrf	_ui8_Task_Cont5ms^(0+256)
  3735  0AFA  0064               	clrwdt	;#
  3736                           
  3737                           ;main.c: 1041: ui8_PWM_dc_mat = PWMReadDC( );
  3738  0AFB  24EB  3188         	fcall	_PWMReadDC
  3739  0AFD  0021               	movlb	1	; select bank1
  3740  0AFE  00DE               	movwf	_ui8_PWM_dc_mat^(0+128)
  3741                           
  3742                           ;main.c: 1042: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  3743  0AFF  0023               	movlb	3	; select bank3
  3744  0B00  085B               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  3745  0B01  0022               	movlb	2	; select bank2
  3746  0B02  00AE               	movwf	(_ui16_PWM_Freq_mat+1)^(0+256)
  3747  0B03  0023               	movlb	3	; select bank3
  3748  0B04  085A               	movf	_ui16_PWM_Freq_In^(0+384),w
  3749  0B05  0022               	movlb	2	; select bank2
  3750  0B06  00AD               	movwf	_ui16_PWM_Freq_mat^(0+256)
  3751                           
  3752                           ;main.c: 1043: ui16_Speed_mat = ui16_speed_fil;
  3753  0B07  0021               	movlb	1	; select bank1
  3754  0B08  083D               	movf	(_ui16_speed_fil+1)^(0+128),w
  3755  0B09  00B3               	movwf	(_ui16_Speed_mat+1)^(0+128)
  3756  0B0A  083C               	movf	_ui16_speed_fil^(0+128),w
  3757  0B0B  00B2               	movwf	_ui16_Speed_mat^(0+128)
  3758                           
  3759                           ;main.c: 1044: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  3760  0B0C  0023               	movlb	3	; select bank3
  3761  0B0D  0859               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  3762  0B0E  00E5               	movwf	(_ui16_mat_inpTemp+1)^(0+384)
  3763  0B0F  0858               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  3764  0B10  00E4               	movwf	_ui16_mat_inpTemp^(0+384)
  3765                           
  3766                           ;main.c: 1045: ui8_Ki_mat = 5;
  3767  0B11  3005               	movlw	5
  3768  0B12  00E6               	movwf	_ui8_Ki_mat^(0+384)
  3769  0B13  01E7               	clrf	(_ui8_Ki_mat+1)^(0+384)
  3770                           
  3771                           ;main.c: 1046: ui8_Kp_mat = 0;
  3772  0B14  0022               	movlb	2	; select bank2
  3773  0B15  01D3               	clrf	_ui8_Kp_mat^(0+256)
  3774                           
  3775                           ;main.c: 1056: if( ui8_error_Flags.bits.B1 == 1 )
  3776  0B16  0021               	movlb	1	; select bank1
  3777  0B17  1CE5               	btfss	_ui8_error_Flags^(0+128),1
  3778  0B18  2B30               	goto	l31371
  3779                           
  3780                           ;main.c: 1058: {
  3781                           ;main.c: 1061: ui16_Speed_demand_mat = ( PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] )>>1;
  3782  0B19  365E               	lsrf	_ui8_PWM_dc_mat^(0+128),w
  3783  0B1A  3E2D               	addlw	low (_PWM_trans_table| (0+32768))
  3784  0B1B  3180               	movlp	high __stringtab
  3785  0B1C  000A               	callw
  3786  0B1D  3689               	lsrf	9,f
  3787  0B1E  0023               	movlb	3	; select bank3
  3788  0B1F  00DC               	movwf	_ui16_Speed_demand_mat^(0+384)
  3789  0B20  308C               	movlw	low ((_PWM_trans_table| (0+32768)+95))
  3790  0B21  01DD               	clrf	(_ui16_Speed_demand_mat+1)^(0+384)
  3791                           
  3792                           ;main.c: 1064: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] )>>1;
  3793  0B22  3180               	movlp	high __stringtab
  3794  0B23  000A               	callw
  3795  0B24  3689               	lsrf	9,f
  3796  0B25  00DE               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  3797  0B26  3038               	movlw	low ((_PWM_trans_table| (0+32768)+11))
  3798  0B27  01DF               	clrf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  3799                           
  3800                           ;main.c: 1067: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] )>>1;
  3801  0B28  3180               	movlp	high __stringtab
  3802  0B29  000A               	callw
  3803  0B2A  3188               	pagesel	$
  3804  0B2B  3689               	lsrf	9,f
  3805  0B2C  00E0               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  3806  0B2D  01E1               	clrf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  3807                           
  3808                           ;main.c: 1069: }
  3809  0B2E  318B  2B6A         	goto	l31373
  3810  0B30                     l31371:	
  3811                           
  3812                           ;main.c: 1072: else
  3813                           ;main.c: 1073: {
  3814                           ;main.c: 1076: ui16_Speed_demand_mat = PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] * 4 / 5;
  3815  0B30  3005               	movlw	5
  3816  0B31  0020               	movlb	0	; select bank0
  3817  0B32  00B2               	movwf	?___awdiv
  3818  0B33  01B3               	clrf	?___awdiv+1
  3819  0B34  0021               	movlb	1	; select bank1
  3820  0B35  365E               	lsrf	_ui8_PWM_dc_mat^(0+128),w
  3821  0B36  3E2D               	addlw	low (_PWM_trans_table| (0+32768))
  3822  0B37  3180               	movlp	high __stringtab
  3823  0B38  000A               	callw
  3824  0B39  3188               	pagesel	$
  3825  0B3A  0020               	movlb	0	; select bank0
  3826  0B3B  318E  26F5  3188   	fcall	PL16	;call to abstracted procedure
  3827  0B3E  23E9               	fcall	___awdiv
  3828  0B3F  0833               	movf	?___awdiv+1,w
  3829  0B40  0023               	movlb	3	; select bank3
  3830  0B41  00DD               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  3831  0B42  0020               	movlb	0	; select bank0
  3832  0B43  0832               	movf	?___awdiv,w
  3833  0B44  0023               	movlb	3	; select bank3
  3834  0B45  00DC               	movwf	_ui16_Speed_demand_mat^(0+384)
  3835                           
  3836                           ;main.c: 1079: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] ) * 4 / 5;
  3837  0B46  3005               	movlw	5
  3838  0B47  0020               	movlb	0	; select bank0
  3839  0B48  00B2               	movwf	?___awdiv
  3840  0B49  308C               	movlw	low ((_PWM_trans_table| (0+32768)+95))
  3841  0B4A  01B3               	clrf	?___awdiv+1
  3842  0B4B  3180               	movlp	high __stringtab
  3843  0B4C  000A               	callw
  3844  0B4D  3188               	pagesel	$
  3845  0B4E  26F5  3188         	fcall	PL16	;call to abstracted procedure
  3846  0B50  23E9               	fcall	___awdiv
  3847  0B51  0833               	movf	?___awdiv+1,w
  3848  0B52  0023               	movlb	3	; select bank3
  3849  0B53  00DF               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  3850  0B54  0020               	movlb	0	; select bank0
  3851  0B55  0832               	movf	?___awdiv,w
  3852  0B56  0023               	movlb	3	; select bank3
  3853  0B57  00DE               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  3854                           
  3855                           ;main.c: 1082: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] ) * 4 / 5;
  3856  0B58  3005               	movlw	5
  3857  0B59  0020               	movlb	0	; select bank0
  3858  0B5A  00B2               	movwf	?___awdiv
  3859  0B5B  3038               	movlw	low ((_PWM_trans_table| (0+32768)+11))
  3860  0B5C  01B3               	clrf	?___awdiv+1
  3861  0B5D  3180               	movlp	high __stringtab
  3862  0B5E  000A               	callw
  3863  0B5F  3188               	pagesel	$
  3864  0B60  26F5  3188         	fcall	PL16	;call to abstracted procedure
  3865  0B62  23E9               	fcall	___awdiv
  3866  0B63  0833               	movf	?___awdiv+1,w
  3867  0B64  0023               	movlb	3	; select bank3
  3868  0B65  00E1               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  3869  0B66  0020               	movlb	0	; select bank0
  3870  0B67  0832               	movf	?___awdiv,w
  3871  0B68  0023               	movlb	3	; select bank3
  3872  0B69  00E0               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  3873  0B6A                     l31373:	
  3874                           
  3875                           ;main.c: 1084: }
  3876                           ;main.c: 1119: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  3877  0B6A  0022               	movlb	2	; select bank2
  3878  0B6B  0830               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  3879  0B6C  0020               	movlb	0	; select bank0
  3880  0B6D  00C5               	movwf	??_main+1
  3881  0B6E  0022               	movlb	2	; select bank2
  3882  0B6F  082F               	movf	_ui16_fir_Bat_mittel^(0+256),w
  3883  0B70  0020               	movlb	0	; select bank0
  3884  0B71  00C4               	movwf	??_main
  3885  0B72  36C5               	lsrf	??_main+1,f
  3886  0B73  0CC4               	rrf	??_main,f
  3887  0B74  36C5               	lsrf	??_main+1,f
  3888  0B75  0CC4               	rrf	??_main,f
  3889  0B76  0844               	movf	??_main,w
  3890  0B77  0021               	movlb	1	; select bank1
  3891  0B78  00C0               	movwf	_ui8_BattVolt_mat^(0+128)
  3892  0B79  01C1               	clrf	(_ui8_BattVolt_mat+1)^(0+128)
  3893                           
  3894                           ;main.c: 1120: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  3895  0B7A  0022               	movlb	2	; select bank2
  3896  0B7B  0832               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  3897  0B7C  0021               	movlb	1	; select bank1
  3898  0B7D  00B9               	movwf	(_ui16_mat_Current+1)^(0+128)
  3899  0B7E  0022               	movlb	2	; select bank2
  3900  0B7F  0831               	movf	_ui16_fir_IPhase_mean^(0+256),w
  3901  0B80  0021               	movlb	1	; select bank1
  3902  0B81  00B8               	movwf	_ui16_mat_Current^(0+128)
  3903                           
  3904                           ;main.c: 1121: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  3905  0B82  3000               	movlw	0
  3906  0B83  0020               	movlb	0	; select bank0
  3907  0B84  184B               	btfsc	_MotorFlags,0
  3908  0B85  3001               	movlw	1
  3909  0B86  0021               	movlb	1	; select bank1
  3910  0B87  00D8               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  3911                           
  3912                           ;main.c: 1132: bool_ControlLoopMode = 0;
  3913  0B88  01D4               	clrf	_bool_ControlLoopMode^(0+128)
  3914                           
  3915                           ;main.c: 1140: BVH2_Appl_Layer( );
  3916  0B89  3190  2082  3188   	fcall	_BVH2_Appl_Layer
  3917                           
  3918                           ;main.c: 1143: ui8_ResetMatlab = 0;
  3919  0B8C  0021               	movlb	1	; select bank1
  3920  0B8D  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  3921                           
  3922                           ;main.c: 1149: if( ui8_duty_cycle_mat == 0 )
  3923  0B8E  08E4               	movf	_ui8_duty_cycle_mat^(0+128),f
  3924  0B8F  1D03               	skipz
  3925  0B90  2B94               	goto	l31389
  3926                           
  3927                           ;main.c: 1151: {
  3928                           ;main.c: 1153: InitMotorStop( );
  3929  0B91  2429  3188         	fcall	_InitMotorStop
  3930                           
  3931                           ;main.c: 1156: }
  3932  0B93  2B96               	goto	l31391
  3933  0B94                     l31389:	
  3934                           
  3935                           ;main.c: 1159: else
  3936                           ;main.c: 1160: {
  3937                           ;main.c: 1162: InitMotorRun( );
  3938  0B94  2578  3188         	fcall	_InitMotorRun
  3939  0B96                     l31391:	
  3940                           
  3941                           ;main.c: 1165: }
  3942                           ;main.c: 1172: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  3943  0B96  0022               	movlb	2	; select bank2
  3944  0B97  084E               	movf	_bool_PWMin_err_Alarm^(0+256),w
  3945  0B98  0021               	movlb	1	; select bank1
  3946  0B99  1065               	bcf	_ui8_error_Flags^(0+128),0
  3947  0B9A  1D03               	skipz
  3948  0B9B  1465               	bsf	_ui8_error_Flags^(0+128),0
  3949                           
  3950                           ;main.c: 1173: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  3951  0B9C  0853               	movf	_bool_CPU_TempAlarm^(0+128),w
  3952  0B9D  10E5               	bcf	_ui8_error_Flags^(0+128),1
  3953  0B9E  1D03               	skipz
  3954  0B9F  14E5               	bsf	_ui8_error_Flags^(0+128),1
  3955                           
  3956                           ;main.c: 1174: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  3957  0BA0  0022               	movlb	2	; select bank2
  3958  0BA1  084C               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  3959  0BA2  0021               	movlb	1	; select bank1
  3960  0BA3  13E5               	bcf	_ui8_error_Flags^(0+128),7
  3961  0BA4  1D03               	skipz
  3962  0BA5  17E5               	bsf	_ui8_error_Flags^(0+128),7
  3963                           
  3964                           ;main.c: 1175: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  3965  0BA6  0856               	movf	_bool_HighCurrentAlarm^(0+128),w
  3966  0BA7  1165               	bcf	_ui8_error_Flags^(0+128),2
  3967  0BA8  1D03               	skipz
  3968  0BA9  1565               	bsf	_ui8_error_Flags^(0+128),2
  3969                           
  3970                           ;main.c: 1176: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  3971  0BAA  0857               	movf	_bool_MotorStalled^(0+128),w
  3972  0BAB  11E5               	bcf	_ui8_error_Flags^(0+128),3
  3973  0BAC  1D03               	skipz
  3974  0BAD  15E5               	bsf	_ui8_error_Flags^(0+128),3
  3975                           
  3976                           ;main.c: 1177: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  3977  0BAE  0855               	movf	_bool_DryRunningAlarm^(0+128),w
  3978  0BAF  1265               	bcf	_ui8_error_Flags^(0+128),4
  3979  0BB0  1D03               	skipz
  3980  0BB1  1665               	bsf	_ui8_error_Flags^(0+128),4
  3981                           
  3982                           ;main.c: 1178: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  3983  0BB2  0022               	movlb	2	; select bank2
  3984  0BB3  084F               	movf	_bool_UbatAlarm^(0+256),w
  3985  0BB4  0021               	movlb	1	; select bank1
  3986  0BB5  1365               	bcf	_ui8_error_Flags^(0+128),6
  3987  0BB6  1D03               	skipz
  3988  0BB7  1765               	bsf	_ui8_error_Flags^(0+128),6
  3989                           
  3990                           ;main.c: 1179: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  3991  0BB8  0022               	movlb	2	; select bank2
  3992  0BB9  084D               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  3993  0BBA  0021               	movlb	1	; select bank1
  3994  0BBB  12E5               	bcf	_ui8_error_Flags^(0+128),5
  3995  0BBC  1D03               	skipz
  3996  0BBD  16E5               	bsf	_ui8_error_Flags^(0+128),5
  3997                           
  3998                           ;main.c: 1184: MotorFlags.bits.B0 = 0;
  3999  0BBE  0020               	movlb	0	; select bank0
  4000  0BBF  104B               	bcf	_MotorFlags,0
  4001  0BC0                     l31409:	
  4002                           
  4003                           ;main.c: 1240: }
  4004                           ;main.c: 1246: if( ui8_Task_Cont100ms == 25 )
  4005  0BC0  0021               	movlb	1	; select bank1
  4006  0BC1  0861               	movf	_ui8_Task_Cont100ms^(0+128),w
  4007  0BC2  3A19               	xorlw	25
  4008  0BC3  1D03               	skipz
  4009  0BC4  2BD1               	goto	l31419
  4010                           
  4011                           ;main.c: 1248: {
  4012                           ;main.c: 1259: SetDiagAlarm( );
  4013  0BC5  24C1               	fcall	_SetDiagAlarm
  4014                           
  4015                           ;main.c: 1298: if ((read_eeprom_data(0x55)==0x55) || (RC5 == 0))
  4016  0BC6  3055               	movlw	85
  4017  0BC7  3185  25D5  3188   	fcall	_read_eeprom_data
  4018  0BCA  3A55               	xorlw	85
  4019  0BCB  1D03               	btfss	3,2
  4020  0BCC  1E8E               	btfss	14,5
  4021  0BCD  2BD1               	goto	l31419
  4022                           
  4023                           ;main.c: 1307: else
  4024                           ;main.c: 1308: {
  4025                           ;main.c: 1311: Receive_Diag(0x11);
  4026  0BCE  3011               	movlw	17
  4027  0BCF  259A  3188         	fcall	_Receive_Diag
  4028  0BD1                     l31419:	
  4029                           
  4030                           ;main.c: 1315: }
  4031                           ;main.c: 1323: }
  4032                           ;main.c: 1329: if( ui8_Task_Cont100ms == 37 )
  4033  0BD1  0021               	movlb	1	; select bank1
  4034  0BD2  0861               	movf	_ui8_Task_Cont100ms^(0+128),w
  4035  0BD3  3A25               	xorlw	37
  4036  0BD4  1D03               	skipz
  4037  0BD5  2BE1               	goto	l31431
  4038                           
  4039                           ;main.c: 1331: {
  4040                           ;main.c: 1337: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  4041  0BD6  3055               	movlw	85
  4042  0BD7  3185  25D5  3188   	fcall	_read_eeprom_data
  4043  0BDA  3A55               	xorlw	85
  4044  0BDB  1D03               	btfss	3,2
  4045  0BDC  1E8E               	btfss	14,5
  4046  0BDD  2BE1               	goto	l31431
  4047                           
  4048                           ;main.c: 1346: else
  4049                           ;main.c: 1347: {
  4050                           ;main.c: 1350: EOL();
  4051  0BDE  3180  20DE  3188   	fcall	_EOL
  4052  0BE1                     l31431:	
  4053                           
  4054                           ;main.c: 1461: }
  4055                           ;main.c: 1467: if( ui8_Task_Cont100ms > 100 )
  4056  0BE1  3065               	movlw	101
  4057  0BE2  0021               	movlb	1	; select bank1
  4058  0BE3  0261               	subwf	_ui8_Task_Cont100ms^(0+128),w
  4059  0BE4  1803               	btfsc	3,0
  4060                           
  4061                           ;main.c: 1469: {
  4062                           ;main.c: 1473: ui8_Task_Cont100ms = 0;
  4063  0BE5  01E1               	clrf	_ui8_Task_Cont100ms^(0+128)
  4064                           
  4065                           ;main.c: 1513: }
  4066                           ;main.c: 1541: bool_start_demand_mat = 0;
  4067  0BE6  0022               	movlb	2	; select bank2
  4068  0BE7  01D0               	clrf	_bool_start_demand_mat^(0+256)
  4069                           
  4070                           ;main.c: 1547: }
  4071  0BE8  2AB3               	goto	l31323
  4072  0BE9                     __end_of_main:	
  4073  0BE9                     __ptext2053:	
  4074 ;; =============== function ___aldiv ends ============
  4075                           
  4076                           
  4077 ;; *************** function ___awdiv *****************
  4078 ;; Defined at:
  4079 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\awdiv.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  divisor         2   18[BANK0 ] int 
  4082 ;;  dividend        2   20[BANK0 ] int 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  quotient        2   24[BANK0 ] int 
  4085 ;;  sign            1   23[BANK0 ] unsigned char 
  4086 ;;  counter         1   22[BANK0 ] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  2   18[BANK0 ] int 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0
  4091 ;; Tracked objects:
  4092 ;;		On entry : 1F/0
  4093 ;;		On exit  : 1F/0
  4094 ;;		Unchanged: FFFE0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4096 ;;      Params:         0       4       0       0       0       0       0       0
  4097 ;;      Locals:         0       4       0       0       0       0       0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0       0
  4099 ;;      Totals:         0       8       0       0       0       0       0       0
  4100 ;;Total ram usage:        8 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    4
  4103 ;; This function calls:
  4104 ;;		Nothing
  4105 ;; This function is called by:
  4106 ;;		_main
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109  0BE9                     ___awdiv:	
  4110                           
  4111                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4112  0BE9  01B7               	clrf	___awdiv@sign
  4113  0BEA  1FB3               	btfss	___awdiv@divisor+1,7
  4114  0BEB  2BF3               	goto	l25525
  4115  0BEC  09B2               	comf	___awdiv@divisor,f
  4116  0BED  09B3               	comf	___awdiv@divisor+1,f
  4117  0BEE  0AB2               	incf	___awdiv@divisor,f
  4118  0BEF  1903               	skipnz
  4119  0BF0  0AB3               	incf	___awdiv@divisor+1,f
  4120  0BF1  01B7               	clrf	___awdiv@sign
  4121  0BF2  0AB7               	incf	___awdiv@sign,f
  4122  0BF3                     l25525:	
  4123  0BF3  1FB5               	btfss	___awdiv@dividend+1,7
  4124  0BF4  2BFC               	goto	l25531
  4125  0BF5  09B4               	comf	___awdiv@dividend,f
  4126  0BF6  09B5               	comf	___awdiv@dividend+1,f
  4127  0BF7  0AB4               	incf	___awdiv@dividend,f
  4128  0BF8  1903               	skipnz
  4129  0BF9  0AB5               	incf	___awdiv@dividend+1,f
  4130  0BFA  3001               	movlw	1
  4131  0BFB  06B7               	xorwf	___awdiv@sign,f
  4132  0BFC                     l25531:	
  4133  0BFC  01B8               	clrf	___awdiv@quotient
  4134  0BFD  01B9               	clrf	___awdiv@quotient+1
  4135  0BFE  0833               	movf	___awdiv@divisor+1,w
  4136  0BFF  0432               	iorwf	___awdiv@divisor,w
  4137  0C00  1903               	skipnz
  4138  0C01  2C1C               	goto	l25553
  4139  0C02  01B6               	clrf	___awdiv@counter
  4140  0C03                     L41:	
  4141  0C03  0AB6               	incf	___awdiv@counter,f
  4142  0C04  1BB3               	btfsc	___awdiv@divisor+1,7
  4143  0C05  2C09               	goto	l25541
  4144  0C06  35B2               	lslf	___awdiv@divisor,f
  4145  0C07  0DB3               	rlf	___awdiv@divisor+1,f
  4146  0C08  2C03               	goto	L41
  4147  0C09                     l25541:	
  4148  0C09  35B8               	lslf	___awdiv@quotient,f
  4149  0C0A  0DB9               	rlf	___awdiv@quotient+1,f
  4150  0C0B  0833               	movf	___awdiv@divisor+1,w
  4151  0C0C  0235               	subwf	___awdiv@dividend+1,w
  4152  0C0D  1D03               	skipz
  4153  0C0E  2C11               	goto	u5445
  4154  0C0F  0832               	movf	___awdiv@divisor,w
  4155  0C10  0234               	subwf	___awdiv@dividend,w
  4156  0C11                     u5445:	
  4157  0C11  1C03               	skipc
  4158  0C12  2C18               	goto	l25549
  4159  0C13  0832               	movf	___awdiv@divisor,w
  4160  0C14  02B4               	subwf	___awdiv@dividend,f
  4161  0C15  0833               	movf	___awdiv@divisor+1,w
  4162  0C16  3BB5               	subwfb	___awdiv@dividend+1,f
  4163  0C17  1438               	bsf	___awdiv@quotient,0
  4164  0C18                     l25549:	
  4165  0C18  36B3               	lsrf	___awdiv@divisor+1,f
  4166  0C19  0CB2               	rrf	___awdiv@divisor,f
  4167  0C1A  0BB6               	decfsz	___awdiv@counter,f
  4168  0C1B  2C09               	goto	l25541
  4169  0C1C                     l25553:	
  4170  0C1C  0837               	movf	___awdiv@sign,w
  4171  0C1D  1903               	btfsc	3,2
  4172  0C1E  2C24               	goto	l25557
  4173  0C1F  09B8               	comf	___awdiv@quotient,f
  4174  0C20  09B9               	comf	___awdiv@quotient+1,f
  4175  0C21  0AB8               	incf	___awdiv@quotient,f
  4176  0C22  1903               	skipnz
  4177  0C23  0AB9               	incf	___awdiv@quotient+1,f
  4178  0C24                     l25557:	
  4179  0C24  0839               	movf	___awdiv@quotient+1,w
  4180  0C25  00B3               	movwf	?___awdiv+1
  4181  0C26  0838               	movf	___awdiv@quotient,w
  4182  0C27  00B2               	movwf	?___awdiv
  4183  0C28  0008               	return
  4184  0C29                     __end_of___awdiv:	
  4185  0C29                     __ptext2071:	
  4186 ;; =============== function _PWM_Write_Out ends ============
  4187                           
  4188                           
  4189 ;; *************** function _InitMotorStop *****************
  4190 ;; Defined at:
  4191 ;;		line 2224 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\bldc.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;		None               void
  4198 ;; Registers used:
  4199 ;;		status,2
  4200 ;; Tracked objects:
  4201 ;;		On entry : 1E/1
  4202 ;;		On exit  : 1F/0
  4203 ;;		Unchanged: FFFE0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4205 ;;      Params:         0       0       0       0       0       0       0       0
  4206 ;;      Locals:         0       0       0       0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0       0       0
  4208 ;;      Totals:         0       0       0       0       0       0       0       0
  4209 ;;Total ram usage:        0 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    4
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_EOL
  4216 ;;		_main
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219  0C29                     _InitMotorStop:	
  4220                           
  4221                           ;bldc.c: 2226: if( 1 == MotorFlags.bits.B6 )
  4222                           
  4223                           ; Regs used in _InitMotorStop: [status,2]
  4224  0C29  0020               	movlb	0	; select bank0
  4225  0C2A  1F4B               	btfss	_MotorFlags,6
  4226  0C2B  0008               	return
  4227                           
  4228                           ;bldc.c: 2229: {
  4229                           ;bldc.c: 2231: LATC1 = 0;
  4230  0C2C  0022               	movlb	2	; select bank2
  4231  0C2D  108E               	bcf	14,1
  4232                           
  4233                           ;bldc.c: 2232: LATC3 = 0;
  4234  0C2E  118E               	bcf	14,3
  4235                           
  4236                           ;bldc.c: 2233: LATC4 = 0;
  4237  0C2F  120E               	bcf	14,4
  4238                           
  4239                           ;bldc.c: 2235: CCP1ASE = 0;
  4240  0C30  0025               	movlb	5	; select bank5
  4241  0C31  1395               	bcf	21,7
  4242                           
  4243                           ;bldc.c: 2236: CCPR1L = 0;
  4244  0C32  0191               	clrf	17	;volatile
  4245                           
  4246                           ;bldc.c: 2237: MotorFlags.bits.B6 = 0;
  4247  0C33  0020               	movlb	0	; select bank0
  4248  0C34  134B               	bcf	_MotorFlags,6
  4249                           
  4250                           ;bldc.c: 2238: MotorFlags.bits.B7 = 0;
  4251  0C35  13CB               	bcf	_MotorFlags,7
  4252  0C36  0008               	return
  4253  0C37                     __end_of_InitMotorStop:	
  4254  0C37                     __ptext2061:	
  4255 ;; =============== function _Cb44_Pic_etat_monitor_node_fcn1 ends ============
  4256                           
  4257                           
  4258 ;; *************** function _clear_timer *****************
  4259 ;; Defined at:
  4260 ;;		line 304 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\timer.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  ui8_TmrNb       1   12[BANK0 ] unsigned char 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;		None               void
  4267 ;; Registers used:
  4268 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4269 ;; Tracked objects:
  4270 ;;		On entry : 1F/0
  4271 ;;		On exit  : 17/0
  4272 ;;		Unchanged: FFFE0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4274 ;;      Params:         0       0       0       0       0       0       0       0
  4275 ;;      Locals:         0       1       0       0       0       0       0       0
  4276 ;;      Temps:          0       0       0       0       0       0       0       0
  4277 ;;      Totals:         0       1       0       0       0       0       0       0
  4278 ;;Total ram usage:        1 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    4
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_main
  4285 ;;		_timer_init
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288  0C37                     _clear_timer:	
  4289                           
  4290                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  4291                           ;clear_timer@ui8_TmrNb stored from wreg
  4292  0C37  00AC               	movwf	clear_timer@ui8_TmrNb
  4293                           
  4294                           ;timer.c: 306: switch( ui8_TmrNb )
  4295  0C38  2C46               	goto	l25283
  4296  0C39                     l25271:	
  4297                           
  4298                           ;timer.c: 312: {
  4299                           ;timer.c: 314: TMR0 = 0;
  4300  0C39  0195               	clrf	21	;volatile
  4301                           
  4302                           ;timer.c: 315: break;
  4303  0C3A  0008               	return
  4304  0C3B                     l25273:	
  4305                           
  4306                           ;timer.c: 322: {
  4307                           ;timer.c: 324: TMR1L = 0x00;
  4308  0C3B  0196               	clrf	22	;volatile
  4309                           
  4310                           ;timer.c: 325: TMR1H = 0x00;
  4311  0C3C  0197               	clrf	23	;volatile
  4312                           
  4313                           ;timer.c: 326: break;
  4314  0C3D  0008               	return
  4315  0C3E                     l25275:	
  4316                           
  4317                           ;timer.c: 333: {
  4318                           ;timer.c: 335: TMR2 = 0;
  4319  0C3E  019A               	clrf	26	;volatile
  4320                           
  4321                           ;timer.c: 336: break;
  4322  0C3F  0008               	return
  4323  0C40                     l25277:	
  4324                           
  4325                           ;timer.c: 343: {
  4326                           ;timer.c: 345: TMR4 = 0;
  4327  0C40  0028               	movlb	8	; select bank8
  4328  0C41  0195               	clrf	21	;volatile
  4329                           
  4330                           ;timer.c: 346: break;
  4331  0C42  0008               	return
  4332  0C43                     l25279:	
  4333                           
  4334                           ;timer.c: 353: {
  4335                           ;timer.c: 355: TMR6 = 0;
  4336  0C43  0028               	movlb	8	; select bank8
  4337  0C44  019C               	clrf	28	;volatile
  4338                           
  4339                           ;timer.c: 356: break;
  4340  0C45  0008               	return
  4341  0C46                     l25283:	
  4342  0C46  082C               	movf	clear_timer@ui8_TmrNb,w
  4343                           
  4344                           ; Switch size 1, requested type "space"
  4345                           ; Number of cases is 5, Range of values is 0 to 6
  4346                           ; switch strategies available:
  4347                           ; Name         Instructions Cycles
  4348                           ; simple_byte           16     9 (average)
  4349                           ; direct_byte           20     6 (fixed)
  4350                           ; jumptable            260     6 (fixed)
  4351                           ; rangetable            11     4 (fixed)
  4352                           ; spacedrange           19     6 (fixed)
  4353                           ; locatedrange           7     3 (fixed)
  4354                           ;	Chosen strategy is simple_byte
  4355  0C47  3A00               	xorlw	0	; case 0
  4356  0C48  1903               	skipnz
  4357  0C49  2C39               	goto	l25271
  4358  0C4A  3A01               	xorlw	1	; case 1
  4359  0C4B  1903               	skipnz
  4360  0C4C  2C3B               	goto	l25273
  4361  0C4D  3A03               	xorlw	3	; case 2
  4362  0C4E  1903               	skipnz
  4363  0C4F  2C3E               	goto	l25275
  4364  0C50  3A06               	xorlw	6	; case 4
  4365  0C51  1903               	skipnz
  4366  0C52  2C40               	goto	l25277
  4367  0C53  3A02               	xorlw	2	; case 6
  4368  0C54  1903               	skipnz
  4369  0C55  2C43               	goto	l25279
  4370  0C56  2C57               	goto	l19664
  4371  0C57                     l19664:	
  4372  0C57  0008               	return
  4373  0C58                     __end_of_clear_timer:	
  4374  0C58                     __ptext2048:	
  4375 ;; =============== function _commutate ends ============
  4376                           
  4377                           
  4378 ;; *************** function _Get_Analog_Value *****************
  4379 ;; Defined at:
  4380 ;;		line 444 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;		None
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;		None               void
  4387 ;; Registers used:
  4388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 1F/0
  4391 ;;		On exit  : 1F/3
  4392 ;;		Unchanged: FFFE0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4394 ;;      Params:         0       0       0       0       0       0       0       0
  4395 ;;      Locals:         0       0       0       0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0
  4397 ;;      Totals:         0       0       0       0       0       0       0       0
  4398 ;;Total ram usage:        0 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    5
  4401 ;; This function calls:
  4402 ;;		_FILTER_Ubat
  4403 ;;		_FILTER_IPhase
  4404 ;;		_FILTER_Temp
  4405 ;; This function is called by:
  4406 ;;		_main
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409  0C58                     _Get_Analog_Value:	
  4410                           
  4411                           ;adc.c: 446: FILTER_Ubat( );
  4412                           
  4413                           ; Regs used in _Get_Analog_Value: [wreg-status,0+pclath+cstack]
  4414  0C58  245D  3188         	fcall	_FILTER_Ubat
  4415                           
  4416                           ;adc.c: 447: FILTER_IPhase( );
  4417  0C5A  25FE  3188         	fcall	_FILTER_IPhase
  4418                           
  4419                           ;adc.c: 448: FILTER_Temp( );
  4420  0C5C  2E1A               	ljmp	l24703
  4421  0C5D                     __end_of_Get_Analog_Value:	
  4422  0C5D                     __ptext2074:	
  4423 ;; =============== function _FILTER_IPhase ends ============
  4424                           
  4425                           
  4426 ;; *************** function _FILTER_Ubat *****************
  4427 ;; Defined at:
  4428 ;;		line 266 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;		None
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;		None
  4433 ;; Return value:  Size  Location     Type
  4434 ;;		None               void
  4435 ;; Registers used:
  4436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4437 ;; Tracked objects:
  4438 ;;		On entry : 1F/0
  4439 ;;		On exit  : 1D/1
  4440 ;;		Unchanged: FFFE0/0
  4441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4442 ;;      Params:         0       0       0       0       0       0       0       0
  4443 ;;      Locals:         0       0       0       0       0       0       0       0
  4444 ;;      Temps:          0      12       0       0       0       0       0       0
  4445 ;;      Totals:         0      12       0       0       0       0       0       0
  4446 ;;Total ram usage:       12 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    4
  4449 ;; This function calls:
  4450 ;;		Nothing
  4451 ;; This function is called by:
  4452 ;;		_Get_Analog_Value
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455  0C5D                     _FILTER_Ubat:	
  4456                           
  4457                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  4458                           
  4459                           ; Regs used in _FILTER_Ubat: [wreg-status,0]
  4460  0C5D  2700  3188         	fcall	PL36	;call to abstracted procedure
  4461  0C5F  0020               	movlb	0	; select bank0
  4462  0C60  0851               	movf	_ui16_Ubat_bldc,w	;volatile
  4463  0C61  3FC0               	movwi [0]fsr1
  4464  0C62  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
  4465  0C63  3FC1               	movwi [1]fsr1
  4466                           
  4467                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  4468  0C64  304E               	movlw	(_inputArray1& (0+255)+14)
  4469  0C65  0086               	movwf	6
  4470  0C66  304C               	movlw	(_inputArray1& (0+255)+12)
  4471  0C67  0084               	movwf	4
  4472  0C68  3002               	movlw	2	; select bank4/5
  4473  0C69  0085               	movwf	5
  4474  0C6A  0024               	movlb	4	; select bank4
  4475  0C6B  0844               	movf	(_inputArray1^(0+512)+4),w
  4476  0C6C  0742               	addwf	(_inputArray1^(0+512)+2),w
  4477  0C6D  0020               	movlb	0	; select bank0
  4478  0C6E  00AC               	movwf	??_FILTER_Ubat
  4479  0C6F  0024               	movlb	4	; select bank4
  4480  0C70  0845               	movf	((_inputArray1+1)^(0+512)+4),w
  4481  0C71  3D43               	addwfc	((_inputArray1+1)^(0+512)+2),w
  4482  0C72  0020               	movlb	0	; select bank0
  4483  0C73  00AD               	movwf	??_FILTER_Ubat+1
  4484  0C74  0024               	movlb	4	; select bank4
  4485  0C75  0846               	movf	(_inputArray1^(0+512)+6),w
  4486  0C76  0020               	movlb	0	; select bank0
  4487  0C77  072C               	addwf	??_FILTER_Ubat,w
  4488  0C78  00AE               	movwf	??_FILTER_Ubat+2
  4489  0C79  0024               	movlb	4	; select bank4
  4490  0C7A  0847               	movf	((_inputArray1+1)^(0+512)+6),w
  4491  0C7B  0020               	movlb	0	; select bank0
  4492  0C7C  3D2D               	addwfc	??_FILTER_Ubat+1,w
  4493  0C7D  00AF               	movwf	??_FILTER_Ubat+3
  4494  0C7E  0024               	movlb	4	; select bank4
  4495  0C7F  0848               	movf	(_inputArray1^(0+512)+8),w
  4496  0C80  0020               	movlb	0	; select bank0
  4497  0C81  072E               	addwf	??_FILTER_Ubat+2,w
  4498  0C82  00B0               	movwf	??_FILTER_Ubat+4
  4499  0C83  0024               	movlb	4	; select bank4
  4500  0C84  0849               	movf	((_inputArray1+1)^(0+512)+8),w
  4501  0C85  0020               	movlb	0	; select bank0
  4502  0C86  3D2F               	addwfc	??_FILTER_Ubat+3,w
  4503  0C87  00B1               	movwf	??_FILTER_Ubat+5
  4504  0C88  0024               	movlb	4	; select bank4
  4505  0C89  084A               	movf	(_inputArray1^(0+512)+10),w
  4506  0C8A  0020               	movlb	0	; select bank0
  4507  0C8B  0730               	addwf	??_FILTER_Ubat+4,w
  4508  0C8C  00B2               	movwf	??_FILTER_Ubat+6
  4509  0C8D  0024               	movlb	4	; select bank4
  4510  0C8E  084B               	movf	((_inputArray1+1)^(0+512)+10),w
  4511  0C8F  0020               	movlb	0	; select bank0
  4512  0C90  3D31               	addwfc	??_FILTER_Ubat+5,w
  4513  0C91  00B3               	movwf	??_FILTER_Ubat+7
  4514  0C92  3F00               	moviw [0]fsr0
  4515  0C93  0732               	addwf	??_FILTER_Ubat+6,w
  4516  0C94  00B4               	movwf	??_FILTER_Ubat+8
  4517  0C95  3F01               	moviw [1]fsr0
  4518  0C96  3D33               	addwfc	??_FILTER_Ubat+7,w
  4519  0C97  00B5               	movwf	??_FILTER_Ubat+9
  4520  0C98  3F40               	moviw [0]fsr1
  4521  0C99  0734               	addwf	??_FILTER_Ubat+8,w
  4522  0C9A  00B6               	movwf	??_FILTER_Ubat+10
  4523  0C9B  3F41               	moviw [1]fsr1
  4524  0C9C  3D35               	addwfc	??_FILTER_Ubat+9,w
  4525  0C9D  00B7               	movwf	??_FILTER_Ubat+11
  4526  0C9E  0024               	movlb	4	; select bank4
  4527  0C9F  0840               	movf	_inputArray1^(0+512),w
  4528  0CA0  0020               	movlb	0	; select bank0
  4529  0CA1  0736               	addwf	??_FILTER_Ubat+10,w
  4530  0CA2  0023               	movlb	3	; select bank3
  4531  0CA3  00CA               	movwf	_filter1^(0+384)
  4532  0CA4  0024               	movlb	4	; select bank4
  4533  0CA5  0841               	movf	(_inputArray1+1)^(0+512),w
  4534  0CA6  0020               	movlb	0	; select bank0
  4535  0CA7  3D37               	addwfc	??_FILTER_Ubat+11,w
  4536  0CA8  0023               	movlb	3	; select bank3
  4537  0CA9  00CB               	movwf	(_filter1+1)^(0+384)
  4538                           
  4539                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  4540  0CAA  0022               	movlb	2	; select bank2
  4541  0CAB  00B0               	movwf	(_ui16_fir_Bat_mittel+1)^(0+256)
  4542  0CAC  0023               	movlb	3	; select bank3
  4543  0CAD  084A               	movf	_filter1^(0+384),w
  4544  0CAE  0022               	movlb	2	; select bank2
  4545  0CAF  00AF               	movwf	_ui16_fir_Bat_mittel^(0+256)
  4546  0CB0  3008               	movlw	8
  4547  0CB1  36B0               	lsrf	(_ui16_fir_Bat_mittel+1)^(0+256),f
  4548  0CB2  0CAF               	rrf	_ui16_fir_Bat_mittel^(0+256),f
  4549  0CB3  36B0               	lsrf	(_ui16_fir_Bat_mittel+1)^(0+256),f
  4550  0CB4  0CAF               	rrf	_ui16_fir_Bat_mittel^(0+256),f
  4551  0CB5  36B0               	lsrf	(_ui16_fir_Bat_mittel+1)^(0+256),f
  4552  0CB6  0CAF               	rrf	_ui16_fir_Bat_mittel^(0+256),f
  4553                           
  4554                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  4555  0CB7  0021               	movlb	1	; select bank1
  4556  0CB8  0AE7               	incf	_windowPtr1^(0+128),f
  4557  0CB9  0267               	subwf	_windowPtr1^(0+128),w
  4558  0CBA  1C03               	skipc
  4559  0CBB  0008               	return
  4560                           
  4561                           ;adc.c: 277: {
  4562                           ;adc.c: 279: windowPtr1 = 0;
  4563  0CBC  01E7               	clrf	_windowPtr1^(0+128)
  4564                           
  4565                           ;adc.c: 280: filter1 = 0;
  4566  0CBD  0023               	movlb	3	; select bank3
  4567  0CBE  01CA               	clrf	_filter1^(0+384)
  4568  0CBF  01CB               	clrf	(_filter1+1)^(0+384)
  4569  0CC0  0008               	return
  4570  0CC1                     __end_of_FILTER_Ubat:	
  4571  0CC1                     __ptext2044:	
  4572 ;; =============== function _PWMReadDC ends ============
  4573                           
  4574                           
  4575 ;; *************** function _SetDiagAlarm *****************
  4576 ;; Defined at:
  4577 ;;		line 213 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\diag.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;		None               void
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, status,0, pclath, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 1F/1
  4588 ;;		On exit  : 1F/2
  4589 ;;		Unchanged: FFFE0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4591 ;;      Params:         0       0       0       0       0       0       0       0
  4592 ;;      Locals:         0       0       0       0       0       0       0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0       0
  4594 ;;      Totals:         0       0       0       0       0       0       0       0
  4595 ;;Total ram usage:        0 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    5
  4598 ;; This function calls:
  4599 ;;		_PWM_Write_Out
  4600 ;; This function is called by:
  4601 ;;		_main
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604  0CC1                     _SetDiagAlarm:	
  4605                           
  4606                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  4607                           
  4608                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  4609  0CC1  1F65               	btfss	_ui8_error_Flags^(0+128),6
  4610  0CC2  2CC6               	goto	l29627
  4611                           
  4612                           ;diag.c: 221: {
  4613                           ;diag.c: 223: PWM_Write_Out( 88 );
  4614  0CC3  3058               	movlw	88
  4615  0CC4  3186  2E75         	ljmp	_PWM_Write_Out
  4616  0CC6                     l29627:	
  4617                           ;diag.c: 226: }
  4618                           
  4619                           
  4620                           ;diag.c: 229: else
  4621                           ;diag.c: 230: {
  4622                           ;diag.c: 232: if( bool_CPU_TempAlarm )
  4623  0CC6  0853               	movf	_bool_CPU_TempAlarm^(0+128),w
  4624  0CC7  1903               	btfsc	3,2
  4625  0CC8  2CCC               	goto	l29631
  4626                           
  4627                           ;diag.c: 235: {
  4628                           ;diag.c: 237: PWM_Write_Out( 33 );
  4629  0CC9  3021               	movlw	33
  4630  0CCA  3186  2E75         	ljmp	_PWM_Write_Out
  4631  0CCC                     l29631:	
  4632                           ;diag.c: 240: }
  4633                           
  4634                           
  4635                           ;diag.c: 243: else
  4636                           ;diag.c: 244: {
  4637                           ;diag.c: 246: if( bool_DryRunningAlarm )
  4638  0CCC  0855               	movf	_bool_DryRunningAlarm^(0+128),w
  4639  0CCD  1903               	btfsc	3,2
  4640  0CCE  2CD2               	goto	l29635
  4641                           
  4642                           ;diag.c: 248: {
  4643                           ;diag.c: 250: PWM_Write_Out( 66 );
  4644  0CCF  3042               	movlw	66
  4645  0CD0  3186  2E75         	ljmp	_PWM_Write_Out
  4646  0CD2                     l29635:	
  4647                           ;diag.c: 253: }
  4648                           
  4649                           
  4650                           ;diag.c: 256: else
  4651                           ;diag.c: 257: {
  4652                           ;diag.c: 259: if( bool_MotorStalled )
  4653  0CD2  0857               	movf	_bool_MotorStalled^(0+128),w
  4654  0CD3  1903               	btfsc	3,2
  4655  0CD4  2CD8               	goto	l29639
  4656                           
  4657                           ;diag.c: 261: {
  4658                           ;diag.c: 263: PWM_Write_Out( 55 );
  4659  0CD5  3037               	movlw	55
  4660  0CD6  3186  2E75         	ljmp	_PWM_Write_Out
  4661  0CD8                     l29639:	
  4662                           ;diag.c: 266: }
  4663                           
  4664                           
  4665                           ;diag.c: 269: else
  4666                           ;diag.c: 270: {
  4667                           ;diag.c: 272: if( bool_HighCurrentAlarm )
  4668  0CD8  0856               	movf	_bool_HighCurrentAlarm^(0+128),w
  4669  0CD9  1903               	btfsc	3,2
  4670  0CDA  2CDE               	goto	l7640
  4671                           
  4672                           ;diag.c: 274: {
  4673                           ;diag.c: 276: PWM_Write_Out( 44 );
  4674  0CDB  302C               	movlw	44
  4675  0CDC  3186  2E75         	ljmp	_PWM_Write_Out
  4676  0CDE                     l7640:	
  4677                           ;diag.c: 278: }
  4678                           
  4679                           
  4680                           ;diag.c: 281: else
  4681                           ;diag.c: 282: {
  4682                           ;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  4683  0CDE  1EE5               	btfss	_ui8_error_Flags^(0+128),5
  4684  0CDF  2CE3               	goto	l7642
  4685                           
  4686                           ;diag.c: 287: {
  4687                           ;diag.c: 289: PWM_Write_Out( 77 );
  4688  0CE0  304D               	movlw	77
  4689  0CE1  3186  2E75         	ljmp	_PWM_Write_Out
  4690  0CE3                     l7642:	
  4691                           ;diag.c: 292: }
  4692                           
  4693                           
  4694                           ;diag.c: 295: else
  4695                           ;diag.c: 296: {
  4696                           ;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  4697  0CE3  1C65               	btfss	_ui8_error_Flags^(0+128),0
  4698  0CE4  2CE8               	goto	l29647
  4699                           
  4700                           ;diag.c: 300: {
  4701                           ;diag.c: 302: PWM_Write_Out( 22 );
  4702  0CE5  3016               	movlw	22
  4703  0CE6  3186  2E75         	ljmp	_PWM_Write_Out
  4704  0CE8                     l29647:	
  4705                           ;diag.c: 305: }
  4706                           
  4707                           
  4708                           ;diag.c: 308: else
  4709                           ;diag.c: 309: {
  4710                           ;diag.c: 311: PWM_Write_Out( 11 );
  4711  0CE8  300B               	movlw	11
  4712  0CE9  3186  2E75         	ljmp	_PWM_Write_Out
  4713  0CEB                     __end_of_SetDiagAlarm:	
  4714  0CEB                     __ptext2043:	
  4715 ;; =============== function __ELINMIntSendMessage ends ============
  4716                           
  4717                           
  4718 ;; *************** function _PWMReadDC *****************
  4719 ;; Defined at:
  4720 ;;		line 363 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\pwm.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      unsigned char 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/2
  4731 ;;		On exit  : 1F/2
  4732 ;;		Unchanged: FFFE0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4734 ;;      Params:         0       0       0       0       0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0
  4737 ;;      Totals:         0       0       0       0       0       0       0       0
  4738 ;;Total ram usage:        0 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    5
  4741 ;; This function calls:
  4742 ;;		___tmul
  4743 ;;		___ltdiv
  4744 ;; This function is called by:
  4745 ;;		_EOL
  4746 ;;		_main
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749  0CEB                     _PWMReadDC:	
  4750                           
  4751                           ;pwm.c: 366: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
  4752                           
  4753                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
  4754  0CEB  0023               	movlb	3	; select bank3
  4755  0CEC  085A               	movf	_ui16_PWM_Freq_In^(0+384),w
  4756  0CED  0020               	movlb	0	; select bank0
  4757  0CEE  00B5               	movwf	?___ltdiv
  4758  0CEF  0023               	movlb	3	; select bank3
  4759  0CF0  085B               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  4760  0CF1  0020               	movlb	0	; select bank0
  4761  0CF2  00B6               	movwf	?___ltdiv+1
  4762  0CF3  01B7               	clrf	?___ltdiv+2
  4763  0CF4  0023               	movlb	3	; select bank3
  4764  0CF5  086A               	movf	_ui16_Duty_Cycle_In^(0+384),w
  4765  0CF6  0020               	movlb	0	; select bank0
  4766  0CF7  00AC               	movwf	?___tmul
  4767  0CF8  0023               	movlb	3	; select bank3
  4768  0CF9  086B               	movf	(_ui16_Duty_Cycle_In+1)^(0+384),w
  4769  0CFA  0020               	movlb	0	; select bank0
  4770  0CFB  00AD               	movwf	?___tmul+1
  4771  0CFC  30C8               	movlw	200
  4772  0CFD  01AE               	clrf	?___tmul+2
  4773  0CFE  00AF               	movwf	?___tmul+3
  4774  0CFF  01B0               	clrf	?___tmul+4
  4775  0D00  01B1               	clrf	?___tmul+5
  4776  0D01  255B  3188         	fcall	___tmul
  4777  0D03  082C               	movf	?___tmul,w
  4778  0D04  00B8               	movwf	?___ltdiv+3
  4779  0D05  082D               	movf	?___tmul+1,w
  4780  0D06  00B9               	movwf	?___ltdiv+4
  4781  0D07  082E               	movf	?___tmul+2,w
  4782  0D08  00BA               	movwf	?___ltdiv+5
  4783  0D09  2529  3188         	fcall	___ltdiv
  4784  0D0B  0835               	movf	?___ltdiv,w
  4785  0D0C  0021               	movlb	1	; select bank1
  4786  0D0D  00DF               	movwf	_ui8_PWMinDC_sav^(0+128)
  4787                           
  4788                           ;pwm.c: 368: if( ui8_PWMinDC_sav == 0 )
  4789  0D0E  08DF               	movf	_ui8_PWMinDC_sav^(0+128),f
  4790  0D0F  1D03               	skipz
  4791  0D10  2D1C               	goto	l29659
  4792                           
  4793                           ;pwm.c: 370: {
  4794                           ;pwm.c: 374: ui8_PWMin_failCnt++;
  4795  0D11  0022               	movlb	2	; select bank2
  4796  0D12  3005               	movlw	5
  4797  0D13  0AD4               	incf	_ui8_PWMin_failCnt^(0+256),f
  4798                           
  4799                           ;pwm.c: 376: if( ui8_PWMin_failCnt >= 5 )
  4800  0D14  0254               	subwf	_ui8_PWMin_failCnt^(0+256),w
  4801  0D15  1C03               	skipc
  4802  0D16  2D25               	goto	l29665
  4803                           
  4804                           ;pwm.c: 378: {
  4805                           ;pwm.c: 380: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  4806  0D17  0021               	movlb	1	; select bank1
  4807  0D18  085F               	movf	_ui8_PWMinDC_sav^(0+128),w
  4808  0D19  0022               	movlb	2	; select bank2
  4809  0D1A  00D2               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  4810  0D1B  2D25               	goto	l29665
  4811  0D1C                     l29659:	
  4812                           
  4813                           ;pwm.c: 391: else
  4814                           ;pwm.c: 392: {
  4815                           ;pwm.c: 396: ui8_PWMin_failCnt = 0;
  4816  0D1C  0022               	movlb	2	; select bank2
  4817  0D1D  01D4               	clrf	_ui8_PWMin_failCnt^(0+256)
  4818                           
  4819                           ;pwm.c: 399: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  4820  0D1E  0021               	movlb	1	; select bank1
  4821  0D1F  085F               	movf	_ui8_PWMinDC_sav^(0+128),w
  4822  0D20  0022               	movlb	2	; select bank2
  4823  0D21  00D2               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  4824                           
  4825                           ;pwm.c: 401: ui16_Duty_Cycle_In = 0;
  4826  0D22  0023               	movlb	3	; select bank3
  4827  0D23  01EA               	clrf	_ui16_Duty_Cycle_In^(0+384)
  4828  0D24  01EB               	clrf	(_ui16_Duty_Cycle_In+1)^(0+384)
  4829  0D25                     l29665:	
  4830                           
  4831                           ;pwm.c: 403: }
  4832                           ;pwm.c: 408: return ( 200 - ui8_Duty_Cycle_In_Ratio );
  4833  0D25  0022               	movlb	2	; select bank2
  4834  0D26  0852               	movf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
  4835  0D27  3CC8               	sublw	200
  4836  0D28  0008               	return
  4837  0D29                     __end_of_PWMReadDC:	
  4838  0D29                     __ptext2051:	
  4839 ;; =============== function ___tmul ends ============
  4840                           
  4841                           
  4842 ;; *************** function ___ltdiv *****************
  4843 ;; Defined at:
  4844 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\ltdiv.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  divisor         3   21[BANK0 ] unsigned um
  4847 ;;  dividend        3   24[BANK0 ] unsigned um
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  quotient        3   27[BANK0 ] unsigned um
  4850 ;;  counter         1   30[BANK0 ] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  3   21[BANK0 ] unsigned um
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 1F/0
  4857 ;;		On exit  : 1F/0
  4858 ;;		Unchanged: FFFE0/0
  4859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4860 ;;      Params:         0       6       0       0       0       0       0       0
  4861 ;;      Locals:         0       4       0       0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0
  4863 ;;      Totals:         0      10       0       0       0       0       0       0
  4864 ;;Total ram usage:       10 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    4
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_PWMReadDC
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873  0D29                     ___ltdiv:	
  4874                           
  4875                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  4876  0D29  01BB               	clrf	___ltdiv@quotient
  4877  0D2A  01BC               	clrf	___ltdiv@quotient+1
  4878  0D2B  01BD               	clrf	___ltdiv@quotient+2
  4879  0D2C  0837               	movf	___ltdiv@divisor+2,w
  4880  0D2D  0436               	iorwf	___ltdiv@divisor+1,w
  4881  0D2E  0435               	iorwf	___ltdiv@divisor,w
  4882  0D2F  1903               	skipnz
  4883  0D30  2D54               	goto	l28987
  4884  0D31  01BE               	clrf	___ltdiv@counter
  4885  0D32                     L39:	
  4886  0D32  0ABE               	incf	___ltdiv@counter,f
  4887  0D33  1BB7               	btfsc	___ltdiv@divisor+2,7
  4888  0D34  2D39               	goto	l28975
  4889  0D35  35B5               	lslf	___ltdiv@divisor,f
  4890  0D36  0DB6               	rlf	___ltdiv@divisor+1,f
  4891  0D37  0DB7               	rlf	___ltdiv@divisor+2,f
  4892  0D38  2D32               	goto	L39
  4893  0D39                     l28975:	
  4894  0D39  35BB               	lslf	___ltdiv@quotient,f
  4895  0D3A  0DBC               	rlf	___ltdiv@quotient+1,f
  4896  0D3B  0DBD               	rlf	___ltdiv@quotient+2,f
  4897  0D3C  0837               	movf	___ltdiv@divisor+2,w
  4898  0D3D  023A               	subwf	___ltdiv@dividend+2,w
  4899  0D3E  1D03               	skipz
  4900  0D3F  2D46               	goto	u9155
  4901  0D40  0836               	movf	___ltdiv@divisor+1,w
  4902  0D41  0239               	subwf	___ltdiv@dividend+1,w
  4903  0D42  1D03               	skipz
  4904  0D43  2D46               	goto	u9155
  4905  0D44  0835               	movf	___ltdiv@divisor,w
  4906  0D45  0238               	subwf	___ltdiv@dividend,w
  4907  0D46                     u9155:	
  4908  0D46  1C03               	skipc
  4909  0D47  2D4F               	goto	l28983
  4910  0D48  0835               	movf	___ltdiv@divisor,w
  4911  0D49  02B8               	subwf	___ltdiv@dividend,f
  4912  0D4A  0836               	movf	___ltdiv@divisor+1,w
  4913  0D4B  3BB9               	subwfb	___ltdiv@dividend+1,f
  4914  0D4C  0837               	movf	___ltdiv@divisor+2,w
  4915  0D4D  3BBA               	subwfb	___ltdiv@dividend+2,f
  4916  0D4E  143B               	bsf	___ltdiv@quotient,0
  4917  0D4F                     l28983:	
  4918  0D4F  36B7               	lsrf	___ltdiv@divisor+2,f
  4919  0D50  0CB6               	rrf	___ltdiv@divisor+1,f
  4920  0D51  0CB5               	rrf	___ltdiv@divisor,f
  4921  0D52  0BBE               	decfsz	___ltdiv@counter,f
  4922  0D53  2D39               	goto	l28975
  4923  0D54                     l28987:	
  4924  0D54  083B               	movf	___ltdiv@quotient,w
  4925  0D55  00B5               	movwf	?___ltdiv
  4926  0D56  083C               	movf	___ltdiv@quotient+1,w
  4927  0D57  00B6               	movwf	?___ltdiv+1
  4928  0D58  083D               	movf	___ltdiv@quotient+2,w
  4929  0D59  00B7               	movwf	?___ltdiv+2
  4930  0D5A  0008               	return
  4931  0D5B                     __end_of___ltdiv:	
  4932  0D5B                     __ptext2050:	
  4933 ;; =============== function _ADC_Wait ends ============
  4934                           
  4935                           
  4936 ;; *************** function ___tmul *****************
  4937 ;; Defined at:
  4938 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\tmul.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  multiplier      3   12[BANK0 ] unsigned um
  4941 ;;  multiplicand    3   15[BANK0 ] unsigned um
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  product         3   18[BANK0 ] unsigned um
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  3   12[BANK0 ] unsigned um
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0
  4948 ;; Tracked objects:
  4949 ;;		On entry : 1F/0
  4950 ;;		On exit  : 1F/0
  4951 ;;		Unchanged: FFFE0/0
  4952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4953 ;;      Params:         0       6       0       0       0       0       0       0
  4954 ;;      Locals:         0       3       0       0       0       0       0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0
  4956 ;;      Totals:         0       9       0       0       0       0       0       0
  4957 ;;Total ram usage:        9 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    4
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_PWMReadDC
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966  0D5B                     ___tmul:	
  4967                           
  4968                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  4969  0D5B  01B2               	clrf	___tmul@product
  4970  0D5C  01B3               	clrf	___tmul@product+1
  4971  0D5D  01B4               	clrf	___tmul@product+2
  4972  0D5E                     l20013:	
  4973  0D5E  1C2C               	btfss	___tmul@multiplier,0
  4974  0D5F  2D66               	goto	l28995
  4975  0D60  082F               	movf	___tmul@multiplicand,w
  4976  0D61  07B2               	addwf	___tmul@product,f
  4977  0D62  0830               	movf	___tmul@multiplicand+1,w
  4978  0D63  3DB3               	addwfc	___tmul@product+1,f
  4979  0D64  0831               	movf	___tmul@multiplicand+2,w
  4980  0D65  3DB4               	addwfc	___tmul@product+2,f
  4981  0D66                     l28995:	
  4982  0D66  35AF               	lslf	___tmul@multiplicand,f
  4983  0D67  0DB0               	rlf	___tmul@multiplicand+1,f
  4984  0D68  0DB1               	rlf	___tmul@multiplicand+2,f
  4985  0D69  36AE               	lsrf	___tmul@multiplier+2,f
  4986  0D6A  0CAD               	rrf	___tmul@multiplier+1,f
  4987  0D6B  0CAC               	rrf	___tmul@multiplier,f
  4988  0D6C  082E               	movf	___tmul@multiplier+2,w
  4989  0D6D  042D               	iorwf	___tmul@multiplier+1,w
  4990  0D6E  042C               	iorwf	___tmul@multiplier,w
  4991  0D6F  1D03               	skipz
  4992  0D70  2D5E               	goto	l20013
  4993  0D71  0832               	movf	___tmul@product,w
  4994  0D72  00AC               	movwf	?___tmul
  4995  0D73  0833               	movf	___tmul@product+1,w
  4996  0D74  00AD               	movwf	?___tmul+1
  4997  0D75  0834               	movf	___tmul@product+2,w
  4998  0D76  00AE               	movwf	?___tmul+2
  4999  0D77  0008               	return
  5000  0D78                     __end_of___tmul:	
  5001  0D78                     __ptext2037:	
  5002 ;; =============== function _Transmit_LIN_8Bytes ends ============
  5003                           
  5004                           
  5005 ;; *************** function _InitMotorRun *****************
  5006 ;; Defined at:
  5007 ;;		line 2173 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\bldc.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;		None
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;		None
  5012 ;; Return value:  Size  Location     Type
  5013 ;;		None               void
  5014 ;; Registers used:
  5015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5016 ;; Tracked objects:
  5017 ;;		On entry : 1E/1
  5018 ;;		On exit  : 1F/0
  5019 ;;		Unchanged: FFFE0/0
  5020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5021 ;;      Params:         0       0       0       0       0       0       0       0
  5022 ;;      Locals:         0       0       0       0       0       0       0       0
  5023 ;;      Temps:          0       0       0       0       0       0       0       0
  5024 ;;      Totals:         0       0       0       0       0       0       0       0
  5025 ;;Total ram usage:        0 bytes
  5026 ;; Hardware stack levels used:    1
  5027 ;; Hardware stack levels required when called:    6
  5028 ;; This function calls:
  5029 ;;		_commutate
  5030 ;; This function is called by:
  5031 ;;		_init_bldc
  5032 ;;		_main
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035  0D78                     _InitMotorRun:	
  5036  0D78                     l30475:	
  5037                           ; Regs used in _InitMotorRun: [wreg-status,0+pclath+cstack]
  5038                           
  5039                           
  5040                           ;bldc.c: 2175: if( 0 == MotorFlags.bits.B6 )
  5041  0D78  0020               	movlb	0	; select bank0
  5042  0D79  1B4B               	btfsc	_MotorFlags,6
  5043  0D7A  0008               	return
  5044  0D7B  30A6               	movlw	166
  5045                           
  5046                           ;bldc.c: 2178: {
  5047                           ;bldc.c: 2180: MotorFlags.bits.B5 = 0;
  5048  0D7C  12CB               	bcf	_MotorFlags,5
  5049                           
  5050                           ;bldc.c: 2181: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  5051  0D7D  0021               	movlb	1	; select bank1
  5052  0D7E  00B6               	movwf	_ui16_comm_time_max^(0+128)
  5053  0D7F  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
  5054                           
  5055                           ;bldc.c: 2182: comm_state = 1;
  5056  0D80  01D9               	clrf	_comm_state^(0+128)
  5057  0D81  0AD9               	incf	_comm_state^(0+128),f
  5058                           
  5059                           ;bldc.c: 2183: ui16_step_cnt = 0;
  5060  0D82  01BE               	clrf	_ui16_step_cnt^(0+128)
  5061  0D83  01BF               	clrf	(_ui16_step_cnt+1)^(0+128)
  5062                           
  5063                           ;bldc.c: 2184: ui8_duty_cycle_BLDC = 0;
  5064  0D84  0020               	movlb	0	; select bank0
  5065  0D85  01D0               	clrf	_ui8_duty_cycle_BLDC
  5066                           
  5067                           ;bldc.c: 2186: bemf_filter = 0;
  5068  0D86  01C8               	clrf	_comm_time
  5069  0D87  01C9               	clrf	_comm_time+1
  5070                           
  5071                           ;bldc.c: 2188: phase_delay_counter_debug = 0;
  5072  0D88  0023               	movlb	3	; select bank3
  5073  0D89  01D0               	clrf	_phase_delay_counter^(0+384)
  5074  0D8A  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
  5075                           
  5076                           ;bldc.c: 2189: PSTR1CON = 0;
  5077  0D8B  0025               	movlb	5	; select bank5
  5078  0D8C  0196               	clrf	22	;volatile
  5079                           
  5080                           ;bldc.c: 2192: MotorFlags.bits.B3 = 1 ;
  5081  0D8D  0020               	movlb	0	; select bank0
  5082  0D8E  15CB               	bsf	_MotorFlags,3
  5083                           
  5084                           ;bldc.c: 2194: ui16_phase_angle = 128;
  5085  0D8F  174B               	bsf	_MotorFlags,6
  5086                           
  5087                           ;bldc.c: 2195: ui8_StartupPWM = 0 ;
  5088  0D90  0021               	movlb	1	; select bank1
  5089  0D91  01E0               	clrf	_ui8_StartupPWM^(0+128)
  5090                           
  5091                           ;bldc.c: 2196: CCPR1L = 0 ;
  5092  0D92  0025               	movlb	5	; select bank5
  5093  0D93  0191               	clrf	17	;volatile
  5094                           
  5095                           ;bldc.c: 2198: ui8_zero_cros_cnt = 0 ;
  5096  0D94  0022               	movlb	2	; select bank2
  5097  0D95  01E0               	clrf	_ui8_sampleState^(0+256)
  5098                           
  5099                           ;bldc.c: 2199: MotorFlags.bits.B4 = 1 ;
  5100  0D96  0020               	movlb	0	; select bank0
  5101  0D97  164B               	bsf	_MotorFlags,4
  5102                           
  5103                           ;bldc.c: 2207: commutate( );
  5104  0D98  319A  2A0F         	ljmp	l29325
  5105  0D9A                     __end_of_InitMotorRun:	
  5106  0D9A                     __ptext2031:	
  5107 ;; =============== function _EOL ends ============
  5108                           
  5109                           
  5110 ;; *************** function _Receive_Diag *****************
  5111 ;; Defined at:
  5112 ;;		line 317 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  id              1    wreg     unsigned char 
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;  id              1   27[BANK0 ] unsigned char 
  5117 ;; Return value:  Size  Location     Type
  5118 ;;		None               void
  5119 ;; Registers used:
  5120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5121 ;; Tracked objects:
  5122 ;;		On entry : 1F/0
  5123 ;;		On exit  : 1C/0
  5124 ;;		Unchanged: FFFE0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5126 ;;      Params:         0       0       0       0       0       0       0       0
  5127 ;;      Locals:         0       1       0       0       0       0       0       0
  5128 ;;      Temps:          0       1       0       0       0       0       0       0
  5129 ;;      Totals:         0       2       0       0       0       0       0       0
  5130 ;;Total ram usage:        2 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:    7
  5133 ;; This function calls:
  5134 ;;		__ELINMIntReceiveMessage
  5135 ;;		__ELINMIntGetPointer
  5136 ;; This function is called by:
  5137 ;;		_main
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140  0D9A                     _Receive_Diag:	
  5141                           
  5142                           ; Regs used in _Receive_Diag: [wreg+fsr1l-status,0+pclath+cstack]
  5143                           ;Receive_Diag@id stored from wreg
  5144  0D9A  00BB               	movwf	Receive_Diag@id
  5145  0D9B                     l13376:	
  5146                           ;lin.c: 320: {
  5147                           ;lin.c: 321: ;
  5148                           
  5149  0D9B  1DCC               	btfss	__ELINMIntStatus,3
  5150  0D9C  2D9B               	goto	l13376
  5151                           
  5152                           ;lin.c: 322: }
  5153                           ;lin.c: 323: ;
  5154                           ;lin.c: 324: _ELINMIntReceiveMessage ( 5, id, 8 );
  5155  0D9D  083B               	movf	Receive_Diag@id,w
  5156  0D9E  00B7               	movwf	?__ELINMIntReceiveMessage
  5157  0D9F  3008               	movlw	8
  5158  0DA0  00B8               	movwf	?__ELINMIntReceiveMessage+1
  5159  0DA1  3005               	movlw	5
  5160  0DA2  25EA  3188         	fcall	__ELINMIntReceiveMessage
  5161  0DA4                     l13379:	
  5162                           ;lin.c: 326: {
  5163                           
  5164  0DA4  1DCC               	btfss	__ELINMIntStatus,3
  5165  0DA5  2DA4               	goto	l13379
  5166                           
  5167                           ;lin.c: 328: }
  5168                           ;lin.c: 329: ;
  5169                           ;lin.c: 330: if( ( ErrorCode == ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  5170  0DA6  30F0               	movlw	240
  5171  0DA7  054C               	andwf	__ELINMIntStatus,w
  5172  0DA8  00BA               	movwf	??_Receive_Diag
  5173  0DA9  0021               	movlb	1	; select bank1
  5174  0DAA  064A               	xorwf	_ErrorCode^(0+128),w
  5175  0DAB  1903               	btfsc	3,2
  5176  0DAC  0008               	return
  5177                           
  5178                           ;lin.c: 335: else
  5179                           ;lin.c: 336: {
  5180                           ;lin.c: 337: pt = _ELINMIntGetPointer ( 5, 0 );
  5181  0DAD  0020               	movlb	0	; select bank0
  5182  0DAE  3005               	movlw	5
  5183  0DAF  01AC               	clrf	?__ELINMIntGetPointer
  5184  0DB0  3186  267A  3188   	fcall	__ELINMIntGetPointer
  5185  0DB3  00CD               	movwf	_pt
  5186                           
  5187                           ;lin.c: 338: my_msg[ 0 ] = *pt;
  5188  0DB4  0086               	movwf	6
  5189  0DB5  3002               	movlw	2	; select bank4/5
  5190  0DB6  0087               	movwf	7
  5191  0DB7  0801               	movf	1,w
  5192  0DB8  0023               	movlb	3	; select bank3
  5193  0DB9  00B0               	movwf	_my_msg^(0+384)
  5194                           
  5195                           ;lin.c: 339: pt++;
  5196                           
  5197                           ;lin.c: 340: my_msg[ 1 ] = *pt;
  5198  0DBA  26EE  3188         	fcall	PL14	;call to abstracted procedure
  5199  0DBC  00B1               	movwf	(_my_msg^(0+384)+1)
  5200                           
  5201                           ;lin.c: 341: pt++;
  5202                           
  5203                           ;lin.c: 342: my_msg[ 2 ] = *pt;
  5204  0DBD  26EE  3188         	fcall	PL14	;call to abstracted procedure
  5205  0DBF  00B2               	movwf	(_my_msg^(0+384)+2)
  5206                           
  5207                           ;lin.c: 343: pt++;
  5208                           
  5209                           ;lin.c: 344: my_msg[ 3 ] = *pt;
  5210  0DC0  26EE  3188         	fcall	PL14	;call to abstracted procedure
  5211  0DC2  00B3               	movwf	(_my_msg^(0+384)+3)
  5212                           
  5213                           ;lin.c: 345: pt++;
  5214                           
  5215                           ;lin.c: 346: my_msg[ 4 ] = *pt;
  5216  0DC3  26EE  3188         	fcall	PL14	;call to abstracted procedure
  5217  0DC5  00B4               	movwf	(_my_msg^(0+384)+4)
  5218                           
  5219                           ;lin.c: 347: pt++;
  5220                           
  5221                           ;lin.c: 348: my_msg[ 5 ] = *pt;
  5222  0DC6  26EE  3188         	fcall	PL14	;call to abstracted procedure
  5223  0DC8  00B5               	movwf	(_my_msg^(0+384)+5)
  5224                           
  5225                           ;lin.c: 349: pt++;
  5226                           
  5227                           ;lin.c: 350: my_msg[ 6 ] = *pt;
  5228  0DC9  26EE  3188         	fcall	PL14	;call to abstracted procedure
  5229  0DCB  00B6               	movwf	(_my_msg^(0+384)+6)
  5230                           
  5231                           ;lin.c: 351: pt++;
  5232                           
  5233                           ;lin.c: 352: my_msg[ 7 ] = *pt;
  5234  0DCC  26EE               	fcall	PL14	;call to abstracted procedure
  5235  0DCD  00B7               	movwf	(_my_msg^(0+384)+7)
  5236                           
  5237                           ;lin.c: 354: ui8_b_DResServID_c = my_msg[ 0 ];
  5238  0DCE  0830               	movf	_my_msg^(0+384),w
  5239  0DCF  0022               	movlb	2	; select bank2
  5240  0DD0  00DE               	movwf	_ui8_b_DResServID_c^(0+256)
  5241                           
  5242                           ;lin.c: 355: ui8_b_DResLocID_c = my_msg[ 1 ];
  5243  0DD1  0023               	movlb	3	; select bank3
  5244  0DD2  0831               	movf	(_my_msg^(0+384)+1),w
  5245  0DD3  0020               	movlb	0	; select bank0
  5246  0DD4  00CF               	movwf	_ui8_b_DResLocID_c
  5247                           
  5248                           ;lin.c: 356: ui8_b_DResB0_c = my_msg[ 2 ];
  5249  0DD5  0023               	movlb	3	; select bank3
  5250  0DD6  0832               	movf	(_my_msg^(0+384)+2),w
  5251  0DD7  0020               	movlb	0	; select bank0
  5252  0DD8  00CE               	movwf	_ui8_b_DResB0_c
  5253                           
  5254                           ;lin.c: 357: ui8_b_DResB1_c = my_msg[ 3 ];
  5255  0DD9  0023               	movlb	3	; select bank3
  5256  0DDA  0833               	movf	(_my_msg^(0+384)+3),w
  5257  0DDB  0022               	movlb	2	; select bank2
  5258  0DDC  00DA               	movwf	_ui8_b_DResB1_c^(0+256)
  5259                           
  5260                           ;lin.c: 358: ui8_b_DResB2_c = my_msg[ 4 ];
  5261  0DDD  0023               	movlb	3	; select bank3
  5262  0DDE  0834               	movf	(_my_msg^(0+384)+4),w
  5263  0DDF  0022               	movlb	2	; select bank2
  5264  0DE0  00DB               	movwf	_ui8_b_DResB2_c^(0+256)
  5265                           
  5266                           ;lin.c: 359: ui8_b_DResB3_c = my_msg[ 5 ];
  5267  0DE1  0023               	movlb	3	; select bank3
  5268  0DE2  0835               	movf	(_my_msg^(0+384)+5),w
  5269  0DE3  0022               	movlb	2	; select bank2
  5270  0DE4  00DC               	movwf	_ui8_b_DResB3_c^(0+256)
  5271                           
  5272                           ;lin.c: 361: ui8_b_DResB5_c = my_msg[ 7 ];
  5273  0DE5  0023               	movlb	3	; select bank3
  5274  0DE6  0836               	movf	(_my_msg^(0+384)+6),w
  5275  0DE7  0022               	movlb	2	; select bank2
  5276  0DE8  00DD               	movwf	_ui8_b_DResB4_c^(0+256)
  5277  0DE9  0008               	return
  5278  0DEA                     __end_of_Receive_Diag:	
  5279  0DEA                     __ptext2035:	
  5280 ;; =============== function _I_calibrationInit ends ============
  5281                           
  5282                           
  5283 ;; *************** function __ELINMIntReceiveMessage *****************
  5284 ;; Defined at:
  5285 ;;		line 1326 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;  _ELINM_tag      1    wreg     unsigned char 
  5288 ;;  _ELINM_id       1   23[BANK0 ] unsigned char 
  5289 ;;  _ELINM_size     1   24[BANK0 ] unsigned char 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  _ELINM_tag      1   25[BANK0 ] unsigned char 
  5292 ;; Return value:  Size  Location     Type
  5293 ;;		None               void
  5294 ;; Registers used:
  5295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 1F/0
  5298 ;;		On exit  : 1F/0
  5299 ;;		Unchanged: FFFE0/0
  5300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5301 ;;      Params:         0       2       0       0       0       0       0       0
  5302 ;;      Locals:         0       1       0       0       0       0       0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0
  5304 ;;      Totals:         0       3       0       0       0       0       0       0
  5305 ;;Total ram usage:        3 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    6
  5308 ;; This function calls:
  5309 ;;		__ELINMIntSendMessage
  5310 ;; This function is called by:
  5311 ;;		_Receive_Diag
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314  0DEA                     __ELINMIntReceiveMessage:	
  5315                           
  5316                           ;lin.c: 1331: {
  5317                           ;lin.c: 1333: _ELINMIntMessageTag = _ELINM_tag;
  5318                           
  5319                           ; Regs used in __ELINMIntReceiveMessage: [wreg+fsr1l-status,0+pclath+cstack]
  5320  0DEA  1DCC               	btfss	__ELINMIntStatus,3
  5321  0DEB  0008               	return
  5322                           
  5323                           ;lin.c: 1334: _ELINMIntRXMessageSize.SIZE = _ELINM_size;
  5324  0DEC  0838               	movf	__ELINMIntReceiveMessage@_ELINM_size,w
  5325  0DED  0022               	movlb	2	; select bank2
  5326  0DEE  00CA               	movwf	__ELINMIntRXMessageSize^(0+256)
  5327                           
  5328                           ;lin.c: 1335: _ELINMIntStatus.ELINMINTSTS.RX = 1;
  5329  0DEF  0020               	movlb	0	; select bank0
  5330  0DF0  14CC               	bsf	__ELINMIntStatus,1
  5331                           
  5332                           ;lin.c: 1336: _ELINMIntRXCRC.CRC = 0;
  5333  0DF1  0023               	movlb	3	; select bank3
  5334  0DF2  01C4               	clrf	__ELINMIntRXCRC^(0+384)
  5335  0DF3  01C5               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  5336                           
  5337                           ;lin.c: 1337: _ELINMIntSendMessage ( _ELINM_id, 0, ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) * (
      +                           100L * 1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) +
      +                           1L ) * 14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  5338  0DF4  0020               	movlb	0	; select bank0
  5339  0DF5  3024               	movlw	36
  5340  0DF6  01AD               	clrf	?__ELINMIntSendMessage
  5341  0DF7  00AE               	movwf	?__ELINMIntSendMessage+1
  5342  0DF8  3033               	movlw	51
  5343  0DF9  01AF               	clrf	?__ELINMIntSendMessage+2
  5344  0DFA  00B0               	movwf	?__ELINMIntSendMessage+3
  5345  0DFB  01B1               	clrf	?__ELINMIntSendMessage+4
  5346  0DFC  0837               	movf	__ELINMIntReceiveMessage@_ELINM_id,w
  5347  0DFD  2E3E               	ljmp	__ELINMIntSendMessage
  5348  0DFE                     __end_of__ELINMIntReceiveMessage:	
  5349  0DFE                     __ptext2073:	
  5350 ;; =============== function _FILTER_Temp ends ============
  5351                           
  5352                           
  5353 ;; *************** function _FILTER_IPhase *****************
  5354 ;; Defined at:
  5355 ;;		line 359 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0
  5364 ;; Tracked objects:
  5365 ;;		On entry : 1D/1
  5366 ;;		On exit  : 1F/3
  5367 ;;		Unchanged: FFFE0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5369 ;;      Params:         0       0       0       0       0       0       0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    4
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_Get_Analog_Value
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382  0DFE                     _FILTER_IPhase:	
  5383                           
  5384                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
  5385                           
  5386                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
  5387  0DFE  0022               	movlb	2	; select bank2
  5388  0DFF  0829               	movf	_ui16_IPhase1_bldc^(0+256),w	;volatile
  5389  0E00  0023               	movlb	3	; select bank3
  5390  0E01  07CC               	addwf	_filter3^(0+384),f
  5391  0E02  0022               	movlb	2	; select bank2
  5392  0E03  082A               	movf	(_ui16_IPhase1_bldc+1)^(0+256),w	;volatile
  5393  0E04  0023               	movlb	3	; select bank3
  5394  0E05  3DCD               	addwfc	(_filter3+1)^(0+384),f
  5395                           
  5396                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
  5397  0E06  084D               	movf	(_filter3+1)^(0+384),w
  5398  0E07  0022               	movlb	2	; select bank2
  5399  0E08  00B2               	movwf	(_ui16_fir_IPhase_mean+1)^(0+256)
  5400  0E09  0023               	movlb	3	; select bank3
  5401  0E0A  084C               	movf	_filter3^(0+384),w
  5402  0E0B  0022               	movlb	2	; select bank2
  5403  0E0C  00B1               	movwf	_ui16_fir_IPhase_mean^(0+256)
  5404  0E0D  3006               	movlw	6
  5405  0E0E                     u4355:	
  5406  0E0E  36B2               	lsrf	(_ui16_fir_IPhase_mean+1)^(0+256),f
  5407  0E0F  0CB1               	rrf	_ui16_fir_IPhase_mean^(0+256),f
  5408  0E10  0B89               	decfsz	9,f
  5409  0E11  2E0E               	goto	u4355
  5410                           
  5411                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
  5412  0E12  0831               	movf	_ui16_fir_IPhase_mean^(0+256),w
  5413  0E13  0023               	movlb	3	; select bank3
  5414  0E14  02CC               	subwf	_filter3^(0+384),f
  5415  0E15  0022               	movlb	2	; select bank2
  5416  0E16  0832               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  5417  0E17  0023               	movlb	3	; select bank3
  5418  0E18  3BCD               	subwfb	(_filter3+1)^(0+384),f
  5419  0E19  0008               	return
  5420  0E1A                     __end_of_FILTER_IPhase:	
  5421  0E1A                     __ptext2072:	
  5422 ;; =============== function _InitMotorStop ends ============
  5423                           
  5424                           
  5425 ;; *************** function _FILTER_Temp *****************
  5426 ;; Defined at:
  5427 ;;		line 402 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;		None
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;		None
  5432 ;; Return value:  Size  Location     Type
  5433 ;;		None               void
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0
  5436 ;; Tracked objects:
  5437 ;;		On entry : 1F/3
  5438 ;;		On exit  : 1F/3
  5439 ;;		Unchanged: FFFE0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5441 ;;      Params:         0       0       0       0       0       0       0       0
  5442 ;;      Locals:         0       0       0       0       0       0       0       0
  5443 ;;      Temps:          0       0       0       0       0       0       0       0
  5444 ;;      Totals:         0       0       0       0       0       0       0       0
  5445 ;;Total ram usage:        0 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    4
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_Get_Analog_Value
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454  0E1A                     _FILTER_Temp:	
  5455  0E1A                     l24703:	
  5456                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
  5457                           
  5458                           
  5459                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
  5460  0E1A  0856               	movf	_ui16_NTC_Temp_bldc^(0+384),w
  5461  0E1B  07CE               	addwf	_filterTempNTC^(0+384),f
  5462  0E1C  0857               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
  5463  0E1D  3DCF               	addwfc	(_filterTempNTC+1)^(0+384),f
  5464                           
  5465                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
  5466  0E1E  084F               	movf	(_filterTempNTC+1)^(0+384),w
  5467  0E1F  0022               	movlb	2	; select bank2
  5468  0E20  00AC               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256)
  5469  0E21  0023               	movlb	3	; select bank3
  5470  0E22  084E               	movf	_filterTempNTC^(0+384),w
  5471  0E23  0022               	movlb	2	; select bank2
  5472  0E24  00AB               	movwf	_ui16_NTC_Temp_bldc_mean^(0+256)
  5473  0E25  3006               	movlw	6
  5474  0E26                     u4365:	
  5475  0E26  36AC               	lsrf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),f
  5476  0E27  0CAB               	rrf	_ui16_NTC_Temp_bldc_mean^(0+256),f
  5477  0E28  0B89               	decfsz	9,f
  5478  0E29  2E26               	goto	u4365
  5479                           
  5480                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
  5481  0E2A  082B               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
  5482  0E2B  0023               	movlb	3	; select bank3
  5483  0E2C  02CE               	subwf	_filterTempNTC^(0+384),f
  5484  0E2D  0022               	movlb	2	; select bank2
  5485  0E2E  082C               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
  5486  0E2F  0023               	movlb	3	; select bank3
  5487  0E30  3BCF               	subwfb	(_filterTempNTC+1)^(0+384),f
  5488                           
  5489                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
  5490  0E31  0022               	movlb	2	; select bank2
  5491  0E32  082C               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
  5492  0E33  0023               	movlb	3	; select bank3
  5493  0E34  00D9               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
  5494  0E35  0022               	movlb	2	; select bank2
  5495  0E36  082B               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
  5496  0E37  0023               	movlb	3	; select bank3
  5497  0E38  00D8               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
  5498  0E39  0862               	movf	_ui16_Temp_cal^(0+384),w
  5499  0E3A  07D8               	addwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),f
  5500  0E3B  0863               	movf	(_ui16_Temp_cal+1)^(0+384),w
  5501  0E3C  3DD9               	addwfc	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),f
  5502  0E3D  0008               	return
  5503  0E3E                     __end_of_FILTER_Temp:	
  5504  0E3E                     __ptext2042:	
  5505 ;; =============== function _init_ports ends ============
  5506                           
  5507                           
  5508 ;; *************** function __ELINMIntSendMessage *****************
  5509 ;; Defined at:
  5510 ;;		line 1184 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  _ELINM_idr      1    wreg     unsigned char 
  5513 ;;  _ELINM_size     1   13[BANK0 ] unsigned char 
  5514 ;;  _ELINM_fmin     2   14[BANK0 ] unsigned int 
  5515 ;;  _ELINM_fmax     2   16[BANK0 ] unsigned int 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  _ELINM_idr      1   18[BANK0 ] unsigned char 
  5518 ;;  _ELINM_chk      2   20[BANK0 ] unsigned int 
  5519 ;;  _ELINM_i        1   22[BANK0 ] unsigned char 
  5520 ;;  _ELINM_tid      1   19[BANK0 ] struct ELINMINT_ID
  5521 ;; Return value:  Size  Location     Type
  5522 ;;		None               void
  5523 ;; Registers used:
  5524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 1F/0
  5527 ;;		On exit  : 1F/0
  5528 ;;		Unchanged: FFFE0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5530 ;;      Params:         0       5       0       0       0       0       0       0
  5531 ;;      Locals:         0       5       0       0       0       0       0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0       0
  5533 ;;      Totals:         0      10       0       0       0       0       0       0
  5534 ;;Total ram usage:       10 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    5
  5537 ;; This function calls:
  5538 ;;		__ELINMIntCalcIDParity
  5539 ;; This function is called by:
  5540 ;;		_Transmit_LIN_8Bytes
  5541 ;;		__ELINMIntReceiveMessage
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544  0E3E                     __ELINMIntSendMessage:	
  5545                           
  5546                           ; Regs used in __ELINMIntSendMessage: [wreg+fsr1l-status,0+pclath+cstack]
  5547                           ;__ELINMIntSendMessage@_ELINM_idr stored from wreg
  5548  0E3E  00B2               	movwf	__ELINMIntSendMessage@_ELINM_idr
  5549                           
  5550                           ;lin.c: 1186: char _ELINM_i;
  5551                           ;lin.c: 1187: ELINMINT_ID _ELINM_tid;
  5552                           ;lin.c: 1188: unsigned int _ELINM_chk;
  5553                           ;lin.c: 1191: _ELINM_tid.ID = _ELINM_idr;
  5554  0E3F  00B3               	movwf	__ELINMIntSendMessage@_ELINM_tid
  5555                           
  5556                           ;lin.c: 1192: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
  5557  0E40  300F               	movlw	15
  5558  0E41  05CC               	andwf	__ELINMIntStatus,f
  5559                           
  5560                           ;lin.c: 1194: _ELINMIntTHeaderMin = ( 34L * ( 100L * 1000000L / 19200L ) / 128L ) / 100;
  5561  0E42  300D               	movlw	13
  5562  0E43  0022               	movlb	2	; select bank2
  5563  0E44  00A5               	movwf	__ELINMIntTHeaderMin^(0+256)
  5564  0E45  3013               	movlw	19
  5565  0E46  01A6               	clrf	(__ELINMIntTHeaderMin+1)^(0+256)
  5566                           
  5567                           ;lin.c: 1195: _ELINMIntTHeaderMax = ( ( ( ( 34L + 1 ) * 14L ) / 10L ) * ( 100L * 1000000
      +                          L / 19200L ) / 128L ) / 100;
  5568  0E47  0023               	movlb	3	; select bank3
  5569  0E48  00C8               	movwf	__ELINMIntTHeaderMax^(0+384)
  5570  0E49  01C9               	clrf	(__ELINMIntTHeaderMax+1)^(0+384)
  5571                           
  5572                           ;lin.c: 1196: _ELINMIntTFrameMin = _ELINM_fmin;
  5573  0E4A  0020               	movlb	0	; select bank0
  5574  0E4B  082F               	movf	__ELINMIntSendMessage@_ELINM_fmin+1,w
  5575  0E4C  0022               	movlb	2	; select bank2
  5576  0E4D  00A4               	movwf	(__ELINMIntTFrameMin+1)^(0+256)
  5577  0E4E  0020               	movlb	0	; select bank0
  5578  0E4F  082E               	movf	__ELINMIntSendMessage@_ELINM_fmin,w
  5579  0E50  0022               	movlb	2	; select bank2
  5580  0E51  00A3               	movwf	__ELINMIntTFrameMin^(0+256)
  5581                           
  5582                           ;lin.c: 1197: _ELINMIntTFrameMax = _ELINM_fmax;
  5583  0E52  0020               	movlb	0	; select bank0
  5584  0E53  0831               	movf	__ELINMIntSendMessage@_ELINM_fmax+1,w
  5585  0E54  0023               	movlb	3	; select bank3
  5586  0E55  00C7               	movwf	(__ELINMIntTFrameMax+1)^(0+384)
  5587  0E56  0020               	movlb	0	; select bank0
  5588  0E57  0830               	movf	__ELINMIntSendMessage@_ELINM_fmax,w
  5589  0E58  0023               	movlb	3	; select bank3
  5590  0E59  00C6               	movwf	__ELINMIntTFrameMax^(0+384)
  5591                           
  5592                           ;lin.c: 1207: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
  5593  0E5A  0020               	movlb	0	; select bank0
  5594  0E5B  1DCC               	btfss	__ELINMIntStatus,3
  5595  0E5C  0008               	return
  5596                           
  5597                           ;lin.c: 1210: {
  5598                           ;lin.c: 1229: _ELINMIntMessageBuffer[ 0 ] = 0x55;
  5599  0E5D  3055               	movlw	85
  5600  0E5E  0024               	movlb	4	; select bank4
  5601  0E5F  00D4               	movwf	__ELINMIntMessageBuffer^(0+512)
  5602                           
  5603                           ;lin.c: 1230: _ELINMIntMessageBuffer[ 1 ] = _ELINMIntCalcIDParity( _ELINM_tid );
  5604  0E60  0020               	movlb	0	; select bank0
  5605  0E61  0833               	movf	__ELINMIntSendMessage@_ELINM_tid,w
  5606  0E62  26A5  3188         	fcall	__ELINMIntCalcIDParity
  5607  0E64  0024               	movlb	4	; select bank4
  5608  0E65  00D5               	movwf	(__ELINMIntMessageBuffer^(0+512)+1)
  5609                           
  5610                           ;lin.c: 1231: _ELINMIntMessageBufferPointer = 0;
  5611  0E66  0021               	movlb	1	; select bank1
  5612  0E67  01CF               	clrf	__ELINMIntMessageBufferPointer^(0+128)
  5613                           
  5614                           ;lin.c: 1238: if( _ELINMIntStatus.ELINMINTSTS.RX )
  5615  0E68  0020               	movlb	0	; select bank0
  5616  0E69  1CCC               	btfss	__ELINMIntStatus,1
  5617  0E6A  2E6F               	goto	l29693
  5618                           
  5619                           ;lin.c: 1241: {
  5620                           ;lin.c: 1243: _ELINMIntMessageSize.SIZE = 2;
  5621  0E6B  3002               	movlw	2
  5622  0E6C  0021               	movlb	1	; select bank1
  5623  0E6D  00D0               	movwf	__ELINMIntMessageSize^(0+128)
  5624                           
  5625                           ;lin.c: 1246: }
  5626  0E6E  2E96               	goto	l29709
  5627  0E6F                     l29693:	
  5628                           
  5629                           ;lin.c: 1249: else
  5630                           ;lin.c: 1250: {
  5631                           ;lin.c: 1252: _ELINMIntMessageSize.SIZE = _ELINM_size + 2;
  5632  0E6F  082D               	movf	__ELINMIntSendMessage@_ELINM_size,w
  5633  0E70  3E02               	addlw	2
  5634  0E71  0021               	movlb	1	; select bank1
  5635  0E72  00D0               	movwf	__ELINMIntMessageSize^(0+128)
  5636                           
  5637                           ;lin.c: 1253: _ELINM_chk = 0;
  5638  0E73  0020               	movlb	0	; select bank0
  5639  0E74  3002               	movlw	2
  5640  0E75  01B4               	clrf	__ELINMIntSendMessage@_ELINM_chk
  5641  0E76  01B5               	clrf	__ELINMIntSendMessage@_ELINM_chk+1
  5642                           
  5643                           ;lin.c: 1256: for( _ELINM_i = 2;
  5644  0E77  00B6               	movwf	__ELINMIntSendMessage@_ELINM_i
  5645  0E78                     l29703:	
  5646                           ;lin.c: 1257: _ELINM_i < _ELINMIntMessageSize.SIZE;
  5647                           ;lin.c: 1258: _ELINM_i++ )
  5648                           
  5649  0E78  0021               	movlb	1	; select bank1
  5650  0E79  0850               	movf	__ELINMIntMessageSize^(0+128),w
  5651  0E7A  0020               	movlb	0	; select bank0
  5652  0E7B  0236               	subwf	__ELINMIntSendMessage@_ELINM_i,w
  5653  0E7C  1803               	btfsc	3,0
  5654  0E7D  2E89               	goto	l29705
  5655                           
  5656                           ;lin.c: 1261: {
  5657                           ;lin.c: 1263: _ELINM_chk += _ELINMIntMessageBuffer[ _ELINM_i ];
  5658  0E7E  0836               	movf	__ELINMIntSendMessage@_ELINM_i,w
  5659  0E7F  3E54               	addlw	__ELINMIntMessageBuffer& (0+255)
  5660  0E80  0086               	movwf	6
  5661  0E81  3002               	movlw	2	; select bank4/5
  5662  0E82  0087               	movwf	7
  5663  0E83  0801               	movf	1,w
  5664  0E84  07B4               	addwf	__ELINMIntSendMessage@_ELINM_chk,f
  5665  0E85  1803               	skipnc
  5666  0E86  0AB5               	incf	__ELINMIntSendMessage@_ELINM_chk+1,f
  5667  0E87  0AB6               	incf	__ELINMIntSendMessage@_ELINM_i,f
  5668  0E88  2E78               	goto	l29703
  5669  0E89                     l29705:	
  5670                           
  5671                           ;lin.c: 1266: }
  5672                           ;lin.c: 1269: _ELINMIntMessageBuffer[ _ELINMIntMessageSize.SIZE ]
  5673                           ;lin.c: 1270: = ( ~( _ELINM_chk + ( _ELINM_chk>>8 ) ) );
  5674  0E89  0021               	movlb	1	; select bank1
  5675  0E8A  0850               	movf	__ELINMIntMessageSize^(0+128),w
  5676  0E8B  3E54               	addlw	__ELINMIntMessageBuffer& (0+255)
  5677  0E8C  0086               	movwf	6
  5678  0E8D  3002               	movlw	2	; select bank4/5
  5679  0E8E  0087               	movwf	7
  5680  0E8F  0020               	movlb	0	; select bank0
  5681  0E90  0835               	movf	__ELINMIntSendMessage@_ELINM_chk+1,w
  5682  0E91  0734               	addwf	__ELINMIntSendMessage@_ELINM_chk,w
  5683  0E92  3AFF               	xorlw	255
  5684  0E93  0081               	movwf	1
  5685                           
  5686                           ;lin.c: 1271: _ELINMIntMessageSize.SIZE++;
  5687  0E94  0021               	movlb	1	; select bank1
  5688  0E95  0AD0               	incf	__ELINMIntMessageSize^(0+128),f
  5689  0E96                     l29709:	
  5690                           
  5691                           ;lin.c: 1274: }
  5692                           ;lin.c: 1277: SENDB = 1;
  5693  0E96  0023               	movlb	3	; select bank3
  5694  0E97  30FF               	movlw	255
  5695  0E98  159E               	bsf	30,3
  5696                           
  5697                           ;lin.c: 1278: TXREG = 0xFF;
  5698  0E99  009A               	movwf	26	;volatile
  5699                           
  5700                           ;lin.c: 1279: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
  5701  0E9A  300F               	movlw	15
  5702  0E9B  0020               	movlb	0	; select bank0
  5703  0E9C  05CC               	andwf	__ELINMIntStatus,f
  5704                           
  5705                           ;lin.c: 1280: _ELINMIntStatus.ELINMINTSTS.TX = 1;
  5706  0E9D  144C               	bsf	__ELINMIntStatus,0
  5707                           
  5708                           ;lin.c: 1281: _ELINMIntStatus1.ELINMINTSTS.HEADER = 1;
  5709  0E9E  0021               	movlb	1	; select bank1
  5710  0E9F  14D2               	bsf	__ELINMIntStatus1^(0+128),1
  5711                           
  5712                           ;lin.c: 1282: _ELINMIntStatus1.ELINMINTSTS.FRAME = 1;
  5713  0EA0  1552               	bsf	__ELINMIntStatus1^(0+128),2
  5714                           
  5715                           ;lin.c: 1283: _ELINMIntReadBack = 0x00;
  5716  0EA1  01D1               	clrf	__ELINMIntReadBack^(0+128)
  5717                           
  5718                           ;lin.c: 1284: _ELINMIntStatus.ELINMINTSTS.IDLE = 0;
  5719  0EA2  0020               	movlb	0	; select bank0
  5720  0EA3  11CC               	bcf	__ELINMIntStatus,3
  5721  0EA4  0008               	return
  5722  0EA5                     __end_of__ELINMIntSendMessage:	
  5723  0EA5                     __ptext2064:	
  5724 ;; =============== function _Oscill_Source_Block ends ============
  5725                           
  5726                           
  5727 ;; *************** function __ELINMIntCalcIDParity *****************
  5728 ;; Defined at:
  5729 ;;		line 1051 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  ELINM_idtr      1    wreg     struct ELINMINT_ID
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  ELINM_idtr      1   12[BANK0 ] struct ELINMINT_ID
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      unsigned char 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0
  5738 ;; Tracked objects:
  5739 ;;		On entry : 1F/0
  5740 ;;		On exit  : 1F/0
  5741 ;;		Unchanged: FFFE0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5743 ;;      Params:         0       0       0       0       0       0       0       0
  5744 ;;      Locals:         0       1       0       0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0       0
  5746 ;;      Totals:         0       1       0       0       0       0       0       0
  5747 ;;Total ram usage:        1 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    4
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		__ELINMIntSendMessage
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756  0EA5                     __ELINMIntCalcIDParity:	
  5757                           
  5758                           ; Regs used in __ELINMIntCalcIDParity: [wreg+status,2+status,0]
  5759                           ;__ELINMIntCalcIDParity@ELINM_idtr stored from wreg
  5760  0EA5  00AC               	movwf	__ELINMIntCalcIDParity@ELINM_idtr
  5761                           
  5762                           ;lin.c: 1053: ELINM_idtr.ID &= 0x3F;
  5763  0EA6  303F               	movlw	63
  5764  0EA7  05AC               	andwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5765                           
  5766                           ;lin.c: 1056: if( ELINM_idtr.IDbits.ID0)
  5767  0EA8  1C2C               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,0
  5768  0EA9  2EAC               	goto	l13471
  5769                           
  5770                           ;lin.c: 1059: {
  5771                           ;lin.c: 1061: ELINM_idtr.ID ^= 0x40;
  5772  0EAA  3040               	movlw	64
  5773  0EAB  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5774  0EAC                     l13471:	
  5775                           
  5776                           ;lin.c: 1064: }
  5777                           ;lin.c: 1067: if( ELINM_idtr.IDbits.ID1 )
  5778  0EAC  1CAC               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
  5779  0EAD  2EB0               	goto	l13472
  5780                           
  5781                           ;lin.c: 1070: {
  5782                           ;lin.c: 1072: ELINM_idtr.ID ^= 0x40;
  5783  0EAE  3040               	movlw	64
  5784  0EAF  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5785  0EB0                     l13472:	
  5786                           
  5787                           ;lin.c: 1075: }
  5788                           ;lin.c: 1078: if( ELINM_idtr.IDbits.ID2 )
  5789  0EB0  1D2C               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,2
  5790  0EB1  2EB4               	goto	l13473
  5791                           
  5792                           ;lin.c: 1081: {
  5793                           ;lin.c: 1083: ELINM_idtr.ID ^= 0x40;
  5794  0EB2  3040               	movlw	64
  5795  0EB3  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5796  0EB4                     l13473:	
  5797                           
  5798                           ;lin.c: 1086: }
  5799                           ;lin.c: 1089: if( ELINM_idtr.IDbits.ID4 )
  5800  0EB4  1E2C               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
  5801  0EB5  2EB8               	goto	l13474
  5802                           
  5803                           ;lin.c: 1092: {
  5804                           ;lin.c: 1094: ELINM_idtr.ID ^= 0x40;
  5805  0EB6  3040               	movlw	64
  5806  0EB7  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5807  0EB8                     l13474:	
  5808                           
  5809                           ;lin.c: 1097: }
  5810                           ;lin.c: 1100: ELINM_idtr.IDbits.ID7 = 1;
  5811  0EB8  17AC               	bsf	__ELINMIntCalcIDParity@ELINM_idtr,7
  5812                           
  5813                           ;lin.c: 1103: if( ELINM_idtr.IDbits.ID1 )
  5814  0EB9  1CAC               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
  5815  0EBA  2EBD               	goto	l13475
  5816                           
  5817                           ;lin.c: 1106: {
  5818                           ;lin.c: 1108: ELINM_idtr.ID ^= 0x80;
  5819  0EBB  3080               	movlw	128
  5820  0EBC  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5821  0EBD                     l13475:	
  5822                           
  5823                           ;lin.c: 1111: }
  5824                           ;lin.c: 1114: if( ELINM_idtr.IDbits.ID3 )
  5825  0EBD  1DAC               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,3
  5826  0EBE  2EC1               	goto	l13476
  5827                           
  5828                           ;lin.c: 1117: {
  5829                           ;lin.c: 1119: ELINM_idtr.ID ^= 0x80;
  5830  0EBF  3080               	movlw	128
  5831  0EC0  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5832  0EC1                     l13476:	
  5833                           
  5834                           ;lin.c: 1122: }
  5835                           ;lin.c: 1125: if( ELINM_idtr.IDbits.ID4 )
  5836  0EC1  1E2C               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
  5837  0EC2  2EC5               	goto	l13477
  5838                           
  5839                           ;lin.c: 1128: {
  5840                           ;lin.c: 1130: ELINM_idtr.ID ^= 0x80;
  5841  0EC3  3080               	movlw	128
  5842  0EC4  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5843  0EC5                     l13477:	
  5844                           
  5845                           ;lin.c: 1133: }
  5846                           ;lin.c: 1136: if( ELINM_idtr.IDbits.ID5 )
  5847  0EC5  1EAC               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,5
  5848  0EC6  2EC9               	goto	l13478
  5849                           
  5850                           ;lin.c: 1139: {
  5851                           ;lin.c: 1141: ELINM_idtr.ID ^= 0x80;
  5852  0EC7  3080               	movlw	128
  5853  0EC8  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  5854  0EC9                     l13478:	
  5855                           
  5856                           ;lin.c: 1144: }
  5857                           ;lin.c: 1147: return ( ( BYTE )ELINM_idtr.ID );
  5858  0EC9  082C               	movf	__ELINMIntCalcIDParity@ELINM_idtr,w
  5859  0ECA  0008               	return
  5860  0ECB                     __end_of__ELINMIntCalcIDParity:	
  5861  0ECB                     __ptext2033:	
  5862 ;; =============== function _NegativeAnswer ends ============
  5863                           
  5864                           
  5865 ;; *************** function _init_bldc *****************
  5866 ;; Defined at:
  5867 ;;		line 210 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\bldc.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;		None               void
  5874 ;; Registers used:
  5875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 1F/2
  5878 ;;		On exit  : 1F/0
  5879 ;;		Unchanged: FFFE0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5881 ;;      Params:         0       0       0       0       0       0       0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0       0
  5884 ;;      Totals:         0       0       0       0       0       0       0       0
  5885 ;;Total ram usage:        0 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    7
  5888 ;; This function calls:
  5889 ;;		_InitMotorRun
  5890 ;; This function is called by:
  5891 ;;		_system_init
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894  0ECB                     _init_bldc:	
  5895                           
  5896                           ;bldc.c: 218: PSTR1CON = 0;
  5897                           
  5898                           ; Regs used in _init_bldc: [wreg-status,0+pclath+cstack]
  5899  0ECB  0025               	movlb	5	; select bank5
  5900  0ECC  0196               	clrf	22	;volatile
  5901                           
  5902                           ;bldc.c: 222: CM1CON0 = 0x80;
  5903  0ECD  3080               	movlw	128
  5904  0ECE  0022               	movlb	2	; select bank2
  5905  0ECF  0091               	movwf	17	;volatile
  5906                           
  5907                           ;bldc.c: 228: CM1CON1 = 0x00;
  5908  0ED0  0192               	clrf	18	;volatile
  5909                           
  5910                           ;bldc.c: 230: C1IE = 0;
  5911  0ED1  0021               	movlb	1	; select bank1
  5912  0ED2  3087               	movlw	135
  5913  0ED3  1292               	bcf	18,5
  5914                           
  5915                           ;bldc.c: 235: PWM1CON = 0x87;
  5916  0ED4  0025               	movlb	5	; select bank5
  5917  0ED5  0094               	movwf	20	;volatile
  5918                           
  5919                           ;bldc.c: 239: CCP1AS = 0x800;
  5920  0ED6  0195               	clrf	21	;volatile
  5921                           
  5922                           ;bldc.c: 240: CCP1CON = 0x0C;
  5923  0ED7  300C               	movlw	12
  5924  0ED8  0093               	movwf	19	;volatile
  5925                           
  5926                           ;bldc.c: 246: CCPR1L = 0;
  5927  0ED9  0191               	clrf	17	;volatile
  5928                           
  5929                           ;bldc.c: 248: CCP2IE = 0;
  5930  0EDA  0021               	movlb	1	; select bank1
  5931  0EDB  3004               	movlw	4
  5932  0EDC  1012               	bcf	18,0
  5933                           
  5934                           ;bldc.c: 249: CCP2CON = 0x04;
  5935  0EDD  0025               	movlb	5	; select bank5
  5936  0EDE  009A               	movwf	26	;volatile
  5937                           
  5938                           ;bldc.c: 250: CCPR2L = 0xff;
  5939  0EDF  30FF               	movlw	255
  5940  0EE0  0098               	movwf	24	;volatile
  5941                           
  5942                           ;bldc.c: 251: CCPR2H = 0xff;
  5943  0EE1  0099               	movwf	25	;volatile
  5944                           
  5945                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  5946  0EE2  3064               	movlw	100
  5947  0EE3  0020               	movlb	0	; select bank0
  5948  0EE4  009B               	movwf	27	;volatile
  5949                           
  5950                           ;bldc.c: 255: T2CON = 0x05;
  5951  0EE5  3005               	movlw	5
  5952  0EE6  009C               	movwf	28	;volatile
  5953                           
  5954                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  5955  0EE7  3028               	movlw	40
  5956  0EE8  0021               	movlb	1	; select bank1
  5957  0EE9  00DB               	movwf	_ui8_BlankingCount^(0+128)
  5958                           
  5959                           ;bldc.c: 264: TMR2IE = 1;
  5960  0EEA  1491               	bsf	17,1
  5961                           
  5962                           ;bldc.c: 267: MotorFlags.b = 0;
  5963  0EEB  0020               	movlb	0	; select bank0
  5964  0EEC  01CB               	clrf	_MotorFlags
  5965                           
  5966                           ;bldc.c: 270: InitMotorRun( );
  5967  0EED  2D78               	ljmp	l30475
  5968  0EEE                     __end_of_init_bldc:	
  5969  0EEE                     PL14:	
  5970  0EEE  0020               	movlb	0	; select bank0
  5971  0EEF  0ACD               	incf	_pt,f
  5972  0EF0  084D               	movf	_pt,w
  5973  0EF1  0086               	movwf	6
  5974  0EF2  0801               	movf	1,w
  5975  0EF3  0023               	movlb	3	; select bank3
  5976  0EF4  0008               	return
  5977  0EF5                     PL16:	
  5978  0EF5  00C4               	movwf	??_main
  5979  0EF6  01C5               	clrf	??_main+1
  5980  0EF7  35C4               	lslf	??_main,f
  5981  0EF8  0DC5               	rlf	??_main+1,f
  5982  0EF9  35C4               	lslf	??_main,f
  5983  0EFA  0DC5               	rlf	??_main+1,f
  5984  0EFB  0844               	movf	??_main,w
  5985  0EFC  00B4               	movwf	?___awdiv+2
  5986  0EFD  0845               	movf	??_main+1,w
  5987  0EFE  00B5               	movwf	?___awdiv+3
  5988  0EFF  0008               	return
  5989  0F00                     PL36:	
  5990  0F00  0021               	movlb	1	; select bank1
  5991  0F01  3567               	lslf	_windowPtr1^(0+128),w
  5992  0F02  3E40               	addlw	_inputArray1& (0+255)
  5993  0F03  0086               	movwf	6
  5994  0F04  3002               	movlw	2	; select bank4/5
  5995  0F05  0087               	movwf	7
  5996  0F06  0008               	return
  5997  0F07                     __ptext2081:	
  5998 ;; =============== function i1_ADC_Wait ends ============
  5999                           
  6000                           
  6001 ;; *************** function _ELINMIntHandler *****************
  6002 ;; Defined at:
  6003 ;;		line 558 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;		None
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;		None
  6008 ;; Return value:  Size  Location     Type
  6009 ;;		None               void
  6010 ;; Registers used:
  6011 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6012 ;; Tracked objects:
  6013 ;;		On entry : 1F/0
  6014 ;;		On exit  : 18/0
  6015 ;;		Unchanged: FFFE0/0
  6016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6017 ;;      Params:         0       0       0       0       0       0       0       0
  6018 ;;      Locals:         0       0       0       0       0       0       0       0
  6019 ;;      Temps:          4       0       0       0       0       0       0       0
  6020 ;;      Totals:         4       0       0       0       0       0       0       0
  6021 ;;Total ram usage:        4 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    1
  6024 ;; This function calls:
  6025 ;;		__ELINMIntResetProtocol
  6026 ;; This function is called by:
  6027 ;;		_interrupt_handler
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030  0F07                     _ELINMIntHandler:	
  6031                           
  6032                           ;lin.c: 560: if( SENDB == 0)
  6033                           
  6034                           ; Regs used in _ELINMIntHandler: [wreg+fsr1l-status,0+pclath+cstack]
  6035  0F07  0023               	movlb	3	; select bank3
  6036  0F08  199E               	btfsc	30,3
  6037  0F09  2F89               	goto	i1l25123
  6038                           
  6039                           ;lin.c: 563: {
  6040                           ;lin.c: 565: if( RCIF)
  6041  0F0A  0020               	movlb	0	; select bank0
  6042  0F0B  1E91               	btfss	17,5
  6043  0F0C  2F89               	goto	i1l25123
  6044                           
  6045                           ;lin.c: 568: {
  6046                           ;lin.c: 572: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
  6047  0F0D  1DCC               	btfss	__ELINMIntStatus,3
  6048  0F0E  2F25               	goto	i1l13424
  6049                           
  6050                           ;lin.c: 575: {
  6051                           ;lin.c: 577: if( ( RCSTA & 0x06 ) == 0)
  6052  0F0F  0023               	movlb	3	; select bank3
  6053  0F10  081D               	movf	29,w
  6054  0F11  3906               	andlw	6
  6055  0F12  1D03               	btfss	3,2
  6056  0F13  2F89               	goto	i1l25123
  6057                           
  6058                           ;lin.c: 580: {
  6059                           ;lin.c: 584: if( RCREG == 0x80)
  6060  0F14  0819               	movf	25,w	;volatile
  6061  0F15  3A80               	xorlw	128
  6062  0F16  1D03               	skipz
  6063  0F17  2F89               	goto	i1l25123
  6064                           
  6065                           ;lin.c: 587: {
  6066                           ;lin.c: 589: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  6067  0F18  0024               	movlb	4	; select bank4
  6068  0F19  27F3  3188         	fcall	PL25	;call to abstracted procedure
  6069                           
  6070                           ;lin.c: 590: _ELINMIntReadBack = RCREG;
  6071  0F1B  0023               	movlb	3	; select bank3
  6072  0F1C  0819               	movf	25,w	;volatile
  6073  0F1D  0021               	movlb	1	; select bank1
  6074  0F1E  00D1               	movwf	__ELINMIntReadBack^(0+128)
  6075                           
  6076                           ;lin.c: 593: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT)
  6077  0F1F  1ED2               	btfss	__ELINMIntStatus1^(0+128),5
  6078  0F20  2F23               	goto	i1l13427
  6079                           
  6080                           ;lin.c: 596: {
  6081                           ;lin.c: 598: _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT = 0;
  6082  0F21  12D2               	bcf	__ELINMIntStatus1^(0+128),5
  6083                           
  6084                           ;lin.c: 601: }
  6085  0F22  2F89               	goto	i1l25123
  6086  0F23                     i1l13427:	
  6087                           
  6088                           ;lin.c: 604: else
  6089                           ;lin.c: 605: {
  6090                           ;lin.c: 607: _ELINMIntStatus1.ELINMINTSTS.WAKEUP = 1;
  6091  0F23  1452               	bsf	__ELINMIntStatus1^(0+128),0
  6092  0F24  2F89               	goto	i1l25123
  6093  0F25                     i1l13424:	
  6094                           
  6095                           ;lin.c: 623: else
  6096                           ;lin.c: 624: {
  6097                           ;lin.c: 626: if( _ELINMIntStatus.ELINMINTSTS.TX)
  6098  0F25  1C4C               	btfss	__ELINMIntStatus,0
  6099  0F26  2F60               	goto	i1l13430
  6100                           
  6101                           ;lin.c: 629: {
  6102                           ;lin.c: 633: if( ( RCSTA & 0x06 ) && _ELINMIntMessageBufferPointer)
  6103  0F27  0023               	movlb	3	; select bank3
  6104  0F28  081D               	movf	29,w
  6105  0F29  3906               	andlw	6
  6106  0F2A  1903               	btfsc	3,2
  6107  0F2B  2F30               	goto	i1l25069
  6108  0F2C  0021               	movlb	1	; select bank1
  6109  0F2D  084F               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  6110  0F2E  1D03               	skipz
  6111  0F2F  2F67               	goto	i1l25101
  6112  0F30                     i1l25069:	
  6113                           ;lin.c: 642: }
  6114                           
  6115                           ;lin.c: 636: {
  6116                           ;lin.c: 638: _ELINMIntResetProtocol(
  6117                           ;lin.c: 639: 0x08 + 0x04 + 0x70 );
  6118                           
  6119                           
  6120                           ;lin.c: 645: else
  6121                           ;lin.c: 646: {
  6122                           ;lin.c: 651: if( _ELINMIntMessageBufferPointer == 2)
  6123  0F30  0021               	movlb	1	; select bank1
  6124  0F31  084F               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  6125  0F32  3A02               	xorlw	2
  6126  0F33  1903               	btfsc	3,2
  6127                           
  6128                           ;lin.c: 654: {
  6129                           ;lin.c: 656: _ELINMIntStatus1.ELINMINTSTS.HEADER = 0;
  6130  0F34  10D2               	bcf	__ELINMIntStatus1^(0+128),1
  6131                           
  6132                           ;lin.c: 659: }
  6133                           ;lin.c: 662: if( _ELINMIntSpace)
  6134  0F35  0022               	movlb	2	; select bank2
  6135  0F36  084B               	movf	__ELINMIntSpace^(0+256),w
  6136  0F37  1903               	btfsc	3,2
  6137  0F38  2F3B               	goto	i1l25077
  6138                           
  6139                           ;lin.c: 665: {
  6140                           ;lin.c: 667: _ELINMIntSpace--;
  6141  0F39  03CB               	decf	__ELINMIntSpace^(0+256),f
  6142                           
  6143                           ;lin.c: 670: }
  6144  0F3A  2F89               	goto	i1l25123
  6145  0F3B                     i1l25077:	
  6146                           
  6147                           ;lin.c: 673: else
  6148                           ;lin.c: 674: {
  6149                           ;lin.c: 676: if( _ELINMIntReadBack != RCREG)
  6150  0F3B  0021               	movlb	1	; select bank1
  6151  0F3C  0851               	movf	__ELINMIntReadBack^(0+128),w
  6152  0F3D  0023               	movlb	3	; select bank3
  6153  0F3E  0619               	xorwf	25,w	;volatile
  6154  0F3F  1903               	skipnz
  6155  0F40  2F43               	goto	i1l25081
  6156                           
  6157                           ;lin.c: 679: {
  6158                           ;lin.c: 681: _ELINMIntResetProtocol(0x08 + 0x04 + 0x60 );
  6159  0F41  306C               	movlw	108
  6160  0F42  2F87               	goto	L66
  6161  0F43                     i1l25081:	
  6162                           ;lin.c: 684: }
  6163                           
  6164                           
  6165                           ;lin.c: 687: else
  6166                           ;lin.c: 688: {
  6167                           ;lin.c: 693: if( _ELINMIntMessageSize.SIZE)
  6168  0F43  0021               	movlb	1	; select bank1
  6169  0F44  0850               	movf	__ELINMIntMessageSize^(0+128),w
  6170  0F45  1903               	btfsc	3,2
  6171  0F46  2F56               	goto	i1l13438
  6172                           
  6173                           ;lin.c: 696: {
  6174                           ;lin.c: 698: _ELINMIntReadBack = RCREG;
  6175  0F47  0023               	movlb	3	; select bank3
  6176  0F48  0819               	movf	25,w	;volatile
  6177  0F49  0021               	movlb	1	; select bank1
  6178  0F4A  00D1               	movwf	__ELINMIntReadBack^(0+128)
  6179                           
  6180                           ;lin.c: 699: _ELINMIntReadBack = _ELINMIntMessageBuffer[ _ELINMIntMessageBufferPointer ];
  6181  0F4B  27FA  3188         	fcall	PL39	;call to abstracted procedure
  6182  0F4D  0801               	movf	1,w
  6183  0F4E  00D1               	movwf	__ELINMIntReadBack^(0+128)
  6184                           
  6185                           ;lin.c: 700: TXREG = _ELINMIntReadBack; _ELINMIntMessageSize.SIZE--;
  6186  0F4F  0023               	movlb	3	; select bank3
  6187  0F50  009A               	movwf	26	;volatile
  6188  0F51  0021               	movlb	1	; select bank1
  6189  0F52  03D0               	decf	__ELINMIntMessageSize^(0+128),f
  6190  0F53                     i1l25091:	
  6191                           
  6192                           ;lin.c: 702: _ELINMIntSpace += (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)
      +                          /2;
  6193  0F53  0021               	movlb	1	; select bank1
  6194  0F54  0ACF               	incf	__ELINMIntMessageBufferPointer^(0+128),f
  6195                           
  6196                           ;lin.c: 705: }
  6197  0F55  2F89               	goto	i1l25123
  6198  0F56                     i1l13438:	
  6199                           
  6200                           ;lin.c: 708: else
  6201                           ;lin.c: 709: {
  6202                           ;lin.c: 714: if( _ELINMIntStatus.ELINMINTSTS.RX)
  6203  0F56  0020               	movlb	0	; select bank0
  6204  0F57  1CCC               	btfss	__ELINMIntStatus,1
  6205  0F58  2F5D               	goto	i1l13440
  6206                           
  6207                           ;lin.c: 717: {
  6208                           ;lin.c: 719: _ELINMIntStatus.ELINMINTSTS.TX = 0;
  6209  0F59  104C               	bcf	__ELINMIntStatus,0
  6210                           
  6211                           ;lin.c: 720: _ELINMIntMessageBufferPointer = 0;
  6212  0F5A  0021               	movlb	1	; select bank1
  6213  0F5B  01CF               	clrf	__ELINMIntMessageBufferPointer^(0+128)
  6214                           
  6215                           ;lin.c: 723: }
  6216  0F5C  2F89               	goto	i1l25123
  6217  0F5D                     i1l13440:	
  6218                           
  6219                           ;lin.c: 726: else
  6220                           ;lin.c: 727: {
  6221                           ;lin.c: 732: _ELINMIntStatus1.ELINMINTSTS.FRAME = 0;
  6222  0F5D  0021               	movlb	1	; select bank1
  6223  0F5E  1152               	bcf	__ELINMIntStatus1^(0+128),2
  6224  0F5F  2F86               	goto	i1l25121
  6225  0F60                     i1l13430:	
  6226                           ;lin.c: 733: _ELINMIntResetProtocol( 0x08 );
  6227                           
  6228                           
  6229                           ;lin.c: 755: else
  6230                           ;lin.c: 756: {
  6231                           ;lin.c: 758: if( _ELINMIntStatus.ELINMINTSTS.RX)
  6232  0F60  1CCC               	btfss	__ELINMIntStatus,1
  6233  0F61  2F89               	goto	i1l25123
  6234                           
  6235                           ;lin.c: 761: {
  6236                           ;lin.c: 765: if( RCSTA & 0x06)
  6237  0F62  0023               	movlb	3	; select bank3
  6238  0F63  081D               	movf	29,w
  6239  0F64  3906               	andlw	6
  6240  0F65  1903               	btfsc	3,2
  6241  0F66  2F69               	goto	i1l25103
  6242  0F67                     i1l25101:	
  6243                           
  6244                           ;lin.c: 768: {
  6245                           ;lin.c: 770: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x70 );
  6246  0F67  307C               	movlw	124
  6247  0F68  2F87               	goto	L66
  6248  0F69                     i1l25103:	
  6249                           ;lin.c: 773: }
  6250                           
  6251                           
  6252                           ;lin.c: 776: else
  6253                           ;lin.c: 777: {
  6254                           ;lin.c: 779: if( _ELINMIntRXMessageSize.SIZE)
  6255  0F69  0022               	movlb	2	; select bank2
  6256  0F6A  084A               	movf	__ELINMIntRXMessageSize^(0+256),w
  6257  0F6B  1903               	btfsc	3,2
  6258  0F6C  2F7E               	goto	i1l25115
  6259                           
  6260                           ;lin.c: 782: {
  6261                           ;lin.c: 784: _ELINMIntMessageBuffer [ _ELINMIntMessageBufferPointer ] = RCREG;
  6262  0F6D  0021               	movlb	1	; select bank1
  6263  0F6E  27FA  3188         	fcall	PL39	;call to abstracted procedure
  6264  0F70  0023               	movlb	3	; select bank3
  6265  0F71  0819               	movf	25,w	;volatile
  6266  0F72  0081               	movwf	1
  6267                           
  6268                           ;lin.c: 785: _ELINMIntRXMessageSize.SIZE--;
  6269  0F73  0022               	movlb	2	; select bank2
  6270  0F74  03CA               	decf	__ELINMIntRXMessageSize^(0+256),f
  6271                           
  6272                           ;lin.c: 786: _ELINMIntRXCRC.CRC += RCREG;
  6273  0F75  0023               	movlb	3	; select bank3
  6274  0F76  0819               	movf	25,w	;volatile
  6275  0F77  07C4               	addwf	__ELINMIntRXCRC^(0+384),f
  6276  0F78  1803               	skipnc
  6277  0F79  0AC5               	incf	(__ELINMIntRXCRC+1)^(0+384),f
  6278                           
  6279                           ;lin.c: 789: if( _ELINMIntRXCRC.CRCbits.CRC8)
  6280  0F7A  1C45               	btfss	(__ELINMIntRXCRC^(0+384)+1),0
  6281  0F7B  2F53               	goto	i1l25091
  6282                           
  6283                           ;lin.c: 792: {
  6284                           ;lin.c: 794: _ELINMIntRXCRC.CRCL++;
  6285  0F7C  0AC4               	incf	__ELINMIntRXCRC^(0+384),f
  6286  0F7D  2F53               	goto	i1l25091
  6287  0F7E                     i1l25115:	
  6288                           
  6289                           ;lin.c: 813: _ELINMIntRXCRC.CRCL += RCREG + 1;
  6290  0F7E  0023               	movlb	3	; select bank3
  6291  0F7F  0A19               	incf	25,w	;volatile
  6292  0F80  07C4               	addwf	__ELINMIntRXCRC^(0+384),f
  6293                           
  6294                           ;lin.c: 816: if( _ELINMIntRXCRC.CRCL )
  6295  0F81  0844               	movf	__ELINMIntRXCRC^(0+384),w
  6296  0F82  1903               	btfsc	3,2
  6297  0F83  2F86               	goto	i1l25121
  6298                           
  6299                           ;lin.c: 819: {
  6300                           ;lin.c: 821: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x50 );
  6301  0F84  305C               	movlw	92
  6302  0F85  2F87               	goto	L66
  6303  0F86                     i1l25121:	
  6304                           ;lin.c: 824: }
  6305                           
  6306                           
  6307                           ;lin.c: 827: else
  6308                           ;lin.c: 828: {
  6309                           ;lin.c: 830: _ELINMIntResetProtocol( 0x08 );
  6310  0F86  3008               	movlw	8
  6311  0F87                     L66:	
  6312  0F87  27E4  3188         	fcall	__ELINMIntResetProtocol
  6313  0F89                     i1l25123:	
  6314                           
  6315                           ;lin.c: 833: }
  6316                           ;lin.c: 836: }
  6317                           ;lin.c: 839: }
  6318                           ;lin.c: 843: }
  6319                           ;lin.c: 846: }
  6320                           ;lin.c: 849: }
  6321                           ;lin.c: 853: }
  6322                           ;lin.c: 856: }
  6323                           ;lin.c: 859: if( _ELINMIntStatus.ELINMINTSTS.IDLE == 0 )
  6324  0F89  0020               	movlb	0	; select bank0
  6325  0F8A  19CC               	btfsc	__ELINMIntStatus,3
  6326  0F8B  2FCA               	goto	i1l13451
  6327                           
  6328                           ;lin.c: 862: {
  6329                           ;lin.c: 866: if( _ELINMIntStatus1.ELINMINTSTS.FRAME == 1)
  6330  0F8C  0021               	movlb	1	; select bank1
  6331  0F8D  1D52               	btfss	__ELINMIntStatus1^(0+128),2
  6332  0F8E  2FC3               	goto	i1l25149
  6333                           
  6334                           ;lin.c: 869: {
  6335                           ;lin.c: 871: if( _ELINMIntStatus1.ELINMINTSTS.HEADER == 1)
  6336  0F8F  1CD2               	btfss	__ELINMIntStatus1^(0+128),1
  6337  0F90  2FA6               	goto	i1l25137
  6338                           
  6339                           ;lin.c: 874: {
  6340                           ;lin.c: 876: if( _ELINMIntTHeaderMin)
  6341  0F91  0022               	movlb	2	; select bank2
  6342  0F92  0826               	movf	(__ELINMIntTHeaderMin+1)^(0+256),w
  6343  0F93  0425               	iorwf	__ELINMIntTHeaderMin^(0+256),w
  6344  0F94  1903               	skipnz
  6345  0F95  2F9A               	goto	i1l13454
  6346                           
  6347                           ;lin.c: 879: {
  6348                           ;lin.c: 881: _ELINMIntTHeaderMin--;
  6349  0F96  3001               	movlw	1
  6350  0F97  02A5               	subwf	__ELINMIntTHeaderMin^(0+256),f
  6351  0F98  3000               	movlw	0
  6352  0F99  3BA6               	subwfb	(__ELINMIntTHeaderMin+1)^(0+256),f
  6353  0F9A                     i1l13454:	
  6354                           
  6355                           ;lin.c: 884: }
  6356                           ;lin.c: 887: if( _ELINMIntTHeaderMax)
  6357  0F9A  0023               	movlb	3	; select bank3
  6358  0F9B  0849               	movf	(__ELINMIntTHeaderMax+1)^(0+384),w
  6359  0F9C  0448               	iorwf	__ELINMIntTHeaderMax^(0+384),w
  6360  0F9D  1903               	skipnz
  6361  0F9E  2FA4               	goto	i1l25135
  6362                           
  6363                           ;lin.c: 890: {
  6364                           ;lin.c: 892: _ELINMIntTHeaderMax--;
  6365  0F9F  3001               	movlw	1
  6366  0FA0  02C8               	subwf	__ELINMIntTHeaderMax^(0+384),f
  6367  0FA1  3000               	movlw	0
  6368  0FA2  3BC9               	subwfb	(__ELINMIntTHeaderMax+1)^(0+384),f
  6369                           
  6370                           ;lin.c: 895: }
  6371  0FA3  2FAE               	goto	i1l25141
  6372  0FA4                     i1l25135:	
  6373                           
  6374                           ;lin.c: 898: else
  6375                           ;lin.c: 899: {
  6376                           ;lin.c: 902: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x20 );
  6377  0FA4  302C               	movlw	44
  6378  0FA5  2FAC               	goto	L67
  6379  0FA6                     i1l25137:	
  6380                           
  6381                           ;lin.c: 911: else
  6382                           ;lin.c: 912: {
  6383                           ;lin.c: 917: if( _ELINMIntTHeaderMin)
  6384  0FA6  0022               	movlb	2	; select bank2
  6385  0FA7  0826               	movf	(__ELINMIntTHeaderMin+1)^(0+256),w
  6386  0FA8  0425               	iorwf	__ELINMIntTHeaderMin^(0+256),w
  6387  0FA9  1903               	skipnz
  6388  0FAA  2FAE               	goto	i1l25141
  6389                           
  6390                           ;lin.c: 920: {
  6391                           ;lin.c: 922: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x10 );
  6392  0FAB  301C               	movlw	28
  6393  0FAC                     L67:	
  6394  0FAC  27E4  3188         	fcall	__ELINMIntResetProtocol
  6395  0FAE                     i1l25141:	
  6396                           
  6397                           ;lin.c: 925: }
  6398                           ;lin.c: 928: }
  6399                           ;lin.c: 931: if( _ELINMIntTFrameMin)
  6400  0FAE  0022               	movlb	2	; select bank2
  6401  0FAF  0824               	movf	(__ELINMIntTFrameMin+1)^(0+256),w
  6402  0FB0  0423               	iorwf	__ELINMIntTFrameMin^(0+256),w
  6403  0FB1  1903               	skipnz
  6404  0FB2  2FB7               	goto	i1l13459
  6405                           
  6406                           ;lin.c: 934: {
  6407                           ;lin.c: 936: _ELINMIntTFrameMin--;
  6408  0FB3  3001               	movlw	1
  6409  0FB4  02A3               	subwf	__ELINMIntTFrameMin^(0+256),f
  6410  0FB5  3000               	movlw	0
  6411  0FB6  3BA4               	subwfb	(__ELINMIntTFrameMin+1)^(0+256),f
  6412  0FB7                     i1l13459:	
  6413                           
  6414                           ;lin.c: 939: }
  6415                           ;lin.c: 942: if( _ELINMIntTFrameMax)
  6416  0FB7  0023               	movlb	3	; select bank3
  6417  0FB8  0847               	movf	(__ELINMIntTFrameMax+1)^(0+384),w
  6418  0FB9  0446               	iorwf	__ELINMIntTFrameMax^(0+384),w
  6419  0FBA  1903               	skipnz
  6420  0FBB  2FC1               	goto	i1l25147
  6421                           
  6422                           ;lin.c: 945: {
  6423                           ;lin.c: 947: _ELINMIntTFrameMax--;
  6424  0FBC  3001               	movlw	1
  6425  0FBD  02C6               	subwf	__ELINMIntTFrameMax^(0+384),f
  6426  0FBE  3000               	movlw	0
  6427  0FBF  3BC7               	subwfb	(__ELINMIntTFrameMax+1)^(0+384),f
  6428                           
  6429                           ;lin.c: 950: }
  6430  0FC0  0008               	return
  6431  0FC1                     i1l25147:	
  6432                           
  6433                           ;lin.c: 953: else
  6434                           ;lin.c: 954: {
  6435                           ;lin.c: 957: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x40 );
  6436  0FC1  304C               	movlw	76
  6437  0FC2  2FE4               	ljmp	__ELINMIntResetProtocol
  6438  0FC3                     i1l25149:	
  6439                           
  6440                           ;lin.c: 966: else
  6441                           ;lin.c: 967: {
  6442                           ;lin.c: 972: if( _ELINMIntTFrameMin)
  6443  0FC3  0022               	movlb	2	; select bank2
  6444  0FC4  0824               	movf	(__ELINMIntTFrameMin+1)^(0+256),w
  6445  0FC5  0423               	iorwf	__ELINMIntTFrameMin^(0+256),w
  6446  0FC6  1903               	skipnz
  6447  0FC7  0008               	return
  6448                           
  6449                           ;lin.c: 975: {
  6450                           ;lin.c: 977: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x30 );
  6451  0FC8  303C               	movlw	60
  6452  0FC9  2FE4               	ljmp	__ELINMIntResetProtocol
  6453  0FCA                     i1l13451:	
  6454                           
  6455                           ;lin.c: 990: else
  6456                           ;lin.c: 991: {
  6457                           ;lin.c: 993: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT == 0)
  6458  0FCA  0021               	movlb	1	; select bank1
  6459  0FCB  1AD2               	btfsc	__ELINMIntStatus1^(0+128),5
  6460  0FCC  0008               	return
  6461                           
  6462                           ;lin.c: 996: {
  6463                           ;lin.c: 998: if( _ELINMIntSleepTimeout)
  6464  0FCD  0024               	movlb	4	; select bank4
  6465  0FCE  0853               	movf	(__ELINMIntSleepTimeout+3)^(0+512),w
  6466  0FCF  0452               	iorwf	(__ELINMIntSleepTimeout+2)^(0+512),w
  6467  0FD0  0451               	iorwf	(__ELINMIntSleepTimeout+1)^(0+512),w
  6468  0FD1  0450               	iorwf	__ELINMIntSleepTimeout^(0+512),w
  6469  0FD2  1903               	skipnz
  6470  0FD3  2FE1               	goto	i1l13466
  6471                           
  6472                           ;lin.c: 1001: {
  6473                           ;lin.c: 1003: _ELINMIntSleepTimeout--;
  6474  0FD4  3001               	movlw	1
  6475  0FD5  00F1               	movwf	??_ELINMIntHandler
  6476  0FD6  01F2               	clrf	??_ELINMIntHandler+1
  6477  0FD7  01F3               	clrf	??_ELINMIntHandler+2
  6478  0FD8  01F4               	clrf	??_ELINMIntHandler+3
  6479  0FD9  02D0               	subwf	__ELINMIntSleepTimeout^(0+512),f
  6480  0FDA  0872               	movf	??_ELINMIntHandler+1,w
  6481  0FDB  3BD1               	subwfb	(__ELINMIntSleepTimeout+1)^(0+512),f
  6482  0FDC  0873               	movf	??_ELINMIntHandler+2,w
  6483  0FDD  3BD2               	subwfb	(__ELINMIntSleepTimeout+2)^(0+512),f
  6484  0FDE  0874               	movf	??_ELINMIntHandler+3,w
  6485  0FDF  3BD3               	subwfb	(__ELINMIntSleepTimeout+3)^(0+512),f
  6486                           
  6487                           ;lin.c: 1006: }
  6488  0FE0  0008               	return
  6489  0FE1                     i1l13466:	
  6490                           
  6491                           ;lin.c: 1009: else
  6492                           ;lin.c: 1010: {
  6493                           ;lin.c: 1012: _ELINMIntStatus1.ELINMINTSTS.SLEEP_TIMEOUT = 1;
  6494  0FE1  0021               	movlb	1	; select bank1
  6495  0FE2  1752               	bsf	__ELINMIntStatus1^(0+128),6
  6496  0FE3  0008               	return
  6497  0FE4                     __end_of_ELINMIntHandler:	
  6498  0FE4                     __ptext2086:	
  6499 ;; =============== function i1_ADC_Read ends ============
  6500                           
  6501                           
  6502 ;; *************** function __ELINMIntResetProtocol *****************
  6503 ;; Defined at:
  6504 ;;		line 527 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  code            1    wreg     unsigned char 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;  code            1    0[COMMON] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;		None               void
  6511 ;; Registers used:
  6512 ;;		wreg, status,2
  6513 ;; Tracked objects:
  6514 ;;		On entry : 1C/1
  6515 ;;		On exit  : 1F/4
  6516 ;;		Unchanged: FFFE0/0
  6517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6518 ;;      Params:         0       0       0       0       0       0       0       0
  6519 ;;      Locals:         1       0       0       0       0       0       0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0       0
  6521 ;;      Totals:         1       0       0       0       0       0       0       0
  6522 ;;Total ram usage:        1 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; This function calls:
  6525 ;;		Nothing
  6526 ;; This function is called by:
  6527 ;;		_ELINMIntHandler
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530  0FE4                     __ELINMIntResetProtocol:	
  6531                           
  6532                           ; Regs used in __ELINMIntResetProtocol: [wreg+status,2]
  6533                           ;__ELINMIntResetProtocol@code stored from wreg
  6534  0FE4  00F0               	movwf	__ELINMIntResetProtocol@code
  6535                           
  6536                           ;lin.c: 529: _ELINMIntReadBack = RCREG;
  6537  0FE5  0023               	movlb	3	; select bank3
  6538  0FE6  0819               	movf	25,w	;volatile
  6539  0FE7  0021               	movlb	1	; select bank1
  6540  0FE8  00D1               	movwf	__ELINMIntReadBack^(0+128)
  6541                           
  6542                           ;lin.c: 530: _ELINMIntStatus1.ELINMIntStatusByte = 0;
  6543  0FE9  01D2               	clrf	__ELINMIntStatus1^(0+128)
  6544                           
  6545                           ;lin.c: 531: _ELINMIntRXCRC.CRC = 0;
  6546  0FEA  0023               	movlb	3	; select bank3
  6547  0FEB  01C4               	clrf	__ELINMIntRXCRC^(0+384)
  6548  0FEC  01C5               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  6549                           
  6550                           ;lin.c: 532: _ELINMIntStatus.ELINMIntStatusByte = code;
  6551  0FED  0870               	movf	__ELINMIntResetProtocol@code,w
  6552  0FEE  0020               	movlb	0	; select bank0
  6553  0FEF  00CC               	movwf	__ELINMIntStatus
  6554                           
  6555                           ;lin.c: 533: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  6556  0FF0  0024               	movlb	4	; select bank4
  6557  0FF1  27F3               	fcall	PL25	;call to abstracted procedure
  6558  0FF2  0008               	return
  6559  0FF3                     __end_of__ELINMIntResetProtocol:	
  6560  0FF3                     PL25:	
  6561  0FF3  3027               	movlw	39
  6562  0FF4  01D3               	clrf	(__ELINMIntSleepTimeout+3)^(0+512)
  6563  0FF5  01D2               	clrf	(__ELINMIntSleepTimeout+2)^(0+512)
  6564  0FF6  00D1               	movwf	(__ELINMIntSleepTimeout+1)^(0+512)
  6565  0FF7  30BB               	movlw	187
  6566  0FF8  00D0               	movwf	__ELINMIntSleepTimeout^(0+512)
  6567  0FF9  0008               	return
  6568  0FFA                     PL39:	
  6569  0FFA  084F               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  6570  0FFB  3E54               	addlw	__ELINMIntMessageBuffer& (0+255)
  6571  0FFC  0086               	movwf	6
  6572  0FFD  3002               	movlw	2	; select bank4/5
  6573  0FFE  0087               	movwf	7
  6574  0FFF  0008               	return
  6575                           
  6576                           	psect	text2030
  6577  00DE                     __ptext2030:	
  6578 ;; =============== function _system_init ends ============
  6579                           
  6580                           
  6581 ;; *************** function _EOL *****************
  6582 ;; Defined at:
  6583 ;;		line 458 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\diag.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  _dcnt           1   17[BANK4 ] unsigned char 
  6588 ;;  _dcnt           1   16[BANK4 ] unsigned char 
  6589 ;;  _dcnt           1   15[BANK4 ] unsigned char 
  6590 ;;  _dcnt           1   14[BANK4 ] unsigned char 
  6591 ;;  _dcnt           1   13[BANK4 ] unsigned char 
  6592 ;;  _dcnt           1   12[BANK4 ] unsigned char 
  6593 ;;  _dcnt           1   11[BANK4 ] unsigned char 
  6594 ;;  _dcnt           1   10[BANK4 ] unsigned char 
  6595 ;;  _dcnt           1    9[BANK4 ] unsigned char 
  6596 ;;  _dcnt           1    8[BANK4 ] unsigned char 
  6597 ;;  _dcnt           1    7[BANK4 ] unsigned char 
  6598 ;;  _dcnt           1    6[BANK4 ] unsigned char 
  6599 ;;  _dcnt           1    5[BANK4 ] unsigned char 
  6600 ;;  _dcnt           1    4[BANK4 ] unsigned char 
  6601 ;;  _dcnt           1    3[BANK4 ] unsigned char 
  6602 ;;  _dcnt           1    2[BANK4 ] unsigned char 
  6603 ;;  _dcnt           1    1[BANK4 ] unsigned char 
  6604 ;;  _dcnt           1    0[BANK4 ] unsigned char 
  6605 ;;  ui8_b_DResB3    1   23[BANK4 ] unsigned char 
  6606 ;;  ui8_b_DResB2    1   22[BANK4 ] unsigned char 
  6607 ;;  ui8_b_DResB1    1   21[BANK4 ] unsigned char 
  6608 ;;  ui8_b_DResB0    1   20[BANK4 ] unsigned char 
  6609 ;;  ui8_b_DResB4    1   19[BANK4 ] unsigned char 
  6610 ;;  ui8_b_DResB5    1   18[BANK4 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;		None               void
  6613 ;; Registers used:
  6614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 1F/0
  6617 ;;		On exit  : 1E/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6620 ;;      Params:         0       0       0       0       0       0       0       0
  6621 ;;      Locals:         0       0       0       0       0      24       0       0
  6622 ;;      Temps:          0       3       0       0       0       0       0       0
  6623 ;;      Totals:         0       3       0       0       0      24       0       0
  6624 ;;Total ram usage:       27 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    8
  6627 ;; This function calls:
  6628 ;;		_Transmit_LIN_8Bytes
  6629 ;;		_read_eeprom_data
  6630 ;;		_NegativeAnswer
  6631 ;;		_cksum
  6632 ;;		_InitMotorStop
  6633 ;;		_ADC_Wait
  6634 ;;		_ADC_Read
  6635 ;;		___lwdiv
  6636 ;;		_write_eeprom_data
  6637 ;;		___wmul
  6638 ;;		_PWMReadDC
  6639 ;;		_PWM_Write_Out
  6640 ;; This function is called by:
  6641 ;;		_main
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644  00DE                     _EOL:	
  6645                           
  6646                           ;diag.c: 460: unsigned char ui8_b_DResB0_RD;
  6647                           ;diag.c: 461: unsigned char ui8_b_DResB1_RD;
  6648                           ;diag.c: 462: unsigned char ui8_b_DResB2_RD;
  6649                           ;diag.c: 463: unsigned char ui8_b_DResB3_RD;
  6650                           ;diag.c: 464: unsigned char ui8_b_DResB4_RD;
  6651                           ;diag.c: 465: unsigned char ui8_b_DResB5_RD;
  6652                           ;diag.c: 469: if( ui8_b_DResServID_c == 0x3b )
  6653                           
  6654                           ; Regs used in _EOL: [wreg-status,0+pclath+cstack]
  6655  00DE  0022               	movlb	2	; select bank2
  6656  00DF  085E               	movf	_ui8_b_DResServID_c^(0+256),w
  6657  00E0  3A3B               	xorlw	59
  6658  00E1  1D03               	skipz
  6659  00E2  2DD2               	goto	l31259
  6660                           
  6661                           ;diag.c: 471: {
  6662                           ;diag.c: 477: ui8_selected_lid = ui8_b_DResLocID_c;
  6663  00E3  0020               	movlb	0	; select bank0
  6664  00E4  084F               	movf	_ui8_b_DResLocID_c,w
  6665  00E5  00D4               	movwf	_ui8_selected_lid
  6666                           
  6667                           ;diag.c: 2406: break;
  6668                           
  6669                           ;diag.c: 482: switch( ui8_b_DResLocID_c)
  6670  00E6  084F               	movf	_ui8_b_DResLocID_c,w
  6671                           
  6672                           ; Switch size 1, requested type "space"
  6673                           ; Number of cases is 10, Range of values is 128 to 250
  6674                           ; switch strategies available:
  6675                           ; Name         Instructions Cycles
  6676                           ; simple_byte           31    16 (average)
  6677                           ; direct_byte          255     9 (fixed)
  6678                           ; jumptable            263     9 (fixed)
  6679                           ;	Chosen strategy is simple_byte
  6680  00E7  3A80               	xorlw	128	; case 128
  6681  00E8  1903               	skipnz
  6682  00E9  2906               	goto	l30711
  6683  00EA  3A10               	xorlw	16	; case 144
  6684  00EB  1903               	skipnz
  6685  00EC  2916               	goto	l30719
  6686  00ED  3A01               	xorlw	1	; case 145
  6687  00EE  1903               	skipnz
  6688  00EF  2988               	goto	l30759
  6689  00F0  3A02               	xorlw	2	; case 147
  6690  00F1  1903               	skipnz
  6691  00F2  29C8               	goto	l30781
  6692  00F3  3A07               	xorlw	7	; case 148
  6693  00F4  1903               	skipnz
  6694  00F5  2A3E               	goto	l30839
  6695  00F6  3A01               	xorlw	1	; case 149
  6696  00F7  1903               	skipnz
  6697  00F8  2A95               	goto	l30869
  6698  00F9  3A0D               	xorlw	13	; case 152
  6699  00FA  1903               	skipnz
  6700  00FB  2C63               	goto	l31037
  6701  00FC  3A07               	xorlw	7	; case 159
  6702  00FD  1903               	skipnz
  6703  00FE  2D0F               	goto	l31135
  6704  00FF  3A3F               	xorlw	63	; case 160
  6705  0100  1903               	skipnz
  6706  0101  2D5D               	goto	l31213
  6707  0102  3A5A               	xorlw	90	; case 250
  6708  0103  1903               	skipnz
  6709  0104  2DBE               	goto	l31245
  6710  0105  2DD0               	goto	l31253
  6711  0106                     l30711:	
  6712                           
  6713                           ;diag.c: 490: {
  6714                           ;diag.c: 492: if( 0x80 == ui8_selected_lid )
  6715  0106  0854               	movf	_ui8_selected_lid,w
  6716  0107  3A80               	xorlw	128
  6717  0108  1D03               	skipz
  6718  0109  0008               	return
  6719                           
  6720                           ;diag.c: 494: {
  6721                           ;diag.c: 496: ui8_selected_lid = 0x90;
  6722  010A  3090               	movlw	144
  6723  010B  00D4               	movwf	_ui8_selected_lid
  6724                           
  6725                           ;diag.c: 497: ict_stamp = 1;
  6726  010C  0022               	movlb	2	; select bank2
  6727  010D  303A               	movlw	58
  6728  010E  01ED               	clrf	_ict_stamp^(0+256)
  6729  010F  0AED               	incf	_ict_stamp^(0+256),f
  6730                           
  6731                           ;diag.c: 499: Transmit_LIN_8Bytes( 0x10, 0x3A, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
      +                          );
  6732  0110  0020               	movlb	0	; select bank0
  6733  0111  00B7               	movwf	?_Transmit_LIN_8Bytes
  6734  0112  3080               	movlw	128
  6735  0113  2737  3180         	fcall	PL30	;call to abstracted procedure
  6736  0115  2DF8               	ljmp	_Transmit_LIN_8Bytes
  6737  0116                     l30719:	
  6738                           ;diag.c: 516: }
  6739                           ;diag.c: 519: break;
  6740                           
  6741                           ;diag.c: 506: else
  6742                           ;diag.c: 507: {
  6743                           
  6744                           ;diag.c: 503: }
  6745                           
  6746                           
  6747                           ;diag.c: 529: {
  6748                           ;diag.c: 531: if( 0x90 == ui8_selected_lid )
  6749  0116  0854               	movf	_ui8_selected_lid,w
  6750  0117  3A90               	xorlw	144
  6751  0118  1D03               	skipz
  6752  0119  0008               	return
  6753  011A  2957               	goto	l30741
  6754  011B                     l30723:	
  6755                           
  6756                           ;diag.c: 557: {
  6757                           ;diag.c: 559: ui8_b_DResB0_RD = read_eeprom_data( 0xf0 );
  6758  011B  30F0               	movlw	240
  6759  011C  25D5  3180         	fcall	_read_eeprom_data
  6760  011E  0024               	movlb	4	; select bank4
  6761  011F  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  6762                           
  6763                           ;diag.c: 560: ui8_b_DResB1_RD = read_eeprom_data( 0xf1 );
  6764  0120  30F1               	movlw	241
  6765  0121  25D5  3180         	fcall	_read_eeprom_data
  6766  0123  0024               	movlb	4	; select bank4
  6767  0124  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  6768                           
  6769                           ;diag.c: 561: ui8_b_DResB2_RD = read_eeprom_data( 0xf2 );
  6770  0125  30F2               	movlw	242
  6771  0126  25D5  3180         	fcall	_read_eeprom_data
  6772  0128  0024               	movlb	4	; select bank4
  6773  0129  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  6774                           
  6775                           ;diag.c: 562: ui8_b_DResB3_RD = read_eeprom_data( 0xf3 );
  6776  012A  30F3               	movlw	243
  6777  012B  25D5  3180         	fcall	_read_eeprom_data
  6778  012D  0024               	movlb	4	; select bank4
  6779  012E  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  6780  012F  3002               	movlw	2
  6781                           
  6782                           ;diag.c: 563: ui8_b_DResB4_RD = 0;
  6783  0130  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
  6784                           
  6785                           ;diag.c: 564: ui8_b_DResB5_RD = 0;
  6786  0131  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
  6787                           
  6788                           ;diag.c: 566: ict_stamp = 2;
  6789  0132  0022               	movlb	2	; select bank2
  6790  0133  00ED               	movwf	_ict_stamp^(0+256)
  6791                           
  6792                           ;diag.c: 567: break;
  6793  0134  2960               	goto	l30743
  6794  0135                     l30731:	
  6795                           
  6796                           ;diag.c: 574: {
  6797                           ;diag.c: 576: ui8_b_DResB0_RD = read_eeprom_data( 0xeb );
  6798  0135  30EB               	movlw	235
  6799  0136  25D5  3180         	fcall	_read_eeprom_data
  6800  0138  0024               	movlb	4	; select bank4
  6801  0139  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  6802                           
  6803                           ;diag.c: 577: ui8_b_DResB1_RD = read_eeprom_data( 0xec );
  6804  013A  30EC               	movlw	236
  6805  013B  25D5  3180         	fcall	_read_eeprom_data
  6806  013D  0024               	movlb	4	; select bank4
  6807  013E  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  6808                           
  6809                           ;diag.c: 578: ui8_b_DResB2_RD = read_eeprom_data( 0xed );
  6810  013F  30ED               	movlw	237
  6811  0140  25D5  3180         	fcall	_read_eeprom_data
  6812  0142  0024               	movlb	4	; select bank4
  6813  0143  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  6814                           
  6815                           ;diag.c: 579: ui8_b_DResB3_RD = read_eeprom_data( 0xee );
  6816  0144  30EE               	movlw	238
  6817  0145  25D5  3180         	fcall	_read_eeprom_data
  6818  0147  0024               	movlb	4	; select bank4
  6819  0148  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  6820                           
  6821                           ;diag.c: 580: ui8_b_DResB4_RD = read_eeprom_data( 0xef );
  6822  0149  30EF               	movlw	239
  6823  014A  25D5  3180         	fcall	_read_eeprom_data
  6824  014C  0024               	movlb	4	; select bank4
  6825  014D  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
  6826  014E  3091               	movlw	145
  6827                           
  6828                           ;diag.c: 581: ui8_b_DResB5_RD = 0;
  6829  014F  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
  6830                           
  6831                           ;diag.c: 583: ui8_selected_lid = 0x91;
  6832  0150  0020               	movlb	0	; select bank0
  6833  0151  00D4               	movwf	_ui8_selected_lid
  6834                           
  6835                           ;diag.c: 584: break;
  6836  0152  2960               	goto	l30743
  6837  0153                     l30737:	
  6838                           
  6839                           ;diag.c: 591: {
  6840                           ;diag.c: 594: NegativeAnswer(0x90);
  6841  0153  3090               	movlw	144
  6842  0154  2765  3180         	fcall	_NegativeAnswer
  6843                           
  6844                           ;diag.c: 595: break;
  6845  0156  2960               	goto	l30743
  6846  0157                     l30741:	
  6847  0157  0022               	movlb	2	; select bank2
  6848  0158  086D               	movf	_ict_stamp^(0+256),w
  6849                           
  6850                           ; Switch size 1, requested type "space"
  6851                           ; Number of cases is 2, Range of values is 1 to 2
  6852                           ; switch strategies available:
  6853                           ; Name         Instructions Cycles
  6854                           ; simple_byte            7     4 (average)
  6855                           ; direct_byte           13     9 (fixed)
  6856                           ; jumptable            263     9 (fixed)
  6857                           ;	Chosen strategy is simple_byte
  6858  0159  3A01               	xorlw	1	; case 1
  6859  015A  1903               	skipnz
  6860  015B  291B               	goto	l30723
  6861  015C  3A03               	xorlw	3	; case 2
  6862  015D  1903               	skipnz
  6863  015E  2935               	goto	l30731
  6864  015F  2953               	goto	l30737
  6865  0160                     l30743:	
  6866                           
  6867                           ;diag.c: 602: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DResB
      +                          2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF) && (ui8_b_DResB5
      +                          _RD != 0xFF))
  6868  0160  0024               	movlb	4	; select bank4
  6869  0161  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  6870  0162  3AFF               	xorlw	255
  6871  0163  1903               	skipnz
  6872  0164  2981               	goto	l30757
  6873  0165  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  6874  0166  3AFF               	xorlw	255
  6875  0167  1903               	skipnz
  6876  0168  2981               	goto	l30757
  6877  0169  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  6878  016A  3AFF               	xorlw	255
  6879  016B  1903               	skipnz
  6880  016C  2981               	goto	l30757
  6881  016D  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  6882  016E  3AFF               	xorlw	255
  6883  016F  1903               	skipnz
  6884  0170  2981               	goto	l30757
  6885  0171  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  6886  0172  3AFF               	xorlw	255
  6887  0173  1903               	skipnz
  6888  0174  2981               	goto	l30757
  6889  0175  0832               	movf	EOL@ui8_b_DResB5_RD^(0+512),w
  6890  0176  3AFF               	xorlw	255
  6891  0177  1903               	skipnz
  6892  0178  2981               	goto	l30757
  6893                           
  6894                           ;diag.c: 604: {
  6895                           ;diag.c: 606: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6896  0179  303A               	movlw	58
  6897  017A  267D  3180         	fcall	PL2	;call to abstracted procedure
  6898  017C  2748  3180         	fcall	PL33	;call to abstracted procedure
  6899  017E  00BE               	movwf	?_Transmit_LIN_8Bytes+7
  6900  017F  3010               	movlw	16
  6901  0180  2DF8               	ljmp	_Transmit_LIN_8Bytes
  6902  0181                     l30757:	
  6903                           ;diag.c: 609: }
  6904                           
  6905                           
  6906                           ;diag.c: 612: else
  6907                           ;diag.c: 613: {
  6908                           ;diag.c: 615: Transmit_LIN_8Bytes( 0x10, 0x7F, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
  6909  0181  307F               	movlw	127
  6910  0182  0020               	movlb	0	; select bank0
  6911  0183  00B7               	movwf	?_Transmit_LIN_8Bytes
  6912  0184  3090               	movlw	144
  6913  0185  2702  3180         	fcall	PL11	;call to abstracted procedure
  6914  0187  2DF8               	ljmp	_Transmit_LIN_8Bytes
  6915  0188                     l30759:	
  6916                           
  6917                           ;diag.c: 657: {
  6918                           ;diag.c: 659: if( 0x91 == ui8_selected_lid )
  6919  0188  0854               	movf	_ui8_selected_lid,w
  6920  0189  3A91               	xorlw	145
  6921  018A  1D03               	skipz
  6922  018B  0008               	return
  6923                           
  6924                           ;diag.c: 661: {
  6925                           ;diag.c: 672: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
  6926  018C  30F4               	movlw	244
  6927  018D  25D5  3180         	fcall	_read_eeprom_data
  6928  018F  0024               	movlb	4	; select bank4
  6929  0190  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  6930                           
  6931                           ;diag.c: 673: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
  6932  0191  30F5               	movlw	245
  6933  0192  25D5  3180         	fcall	_read_eeprom_data
  6934  0194  0024               	movlb	4	; select bank4
  6935  0195  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  6936                           
  6937                           ;diag.c: 674: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
  6938  0196  30F6               	movlw	246
  6939  0197  25D5  3180         	fcall	_read_eeprom_data
  6940  0199  0024               	movlb	4	; select bank4
  6941  019A  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  6942                           
  6943                           ;diag.c: 675: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
  6944  019B  30F7               	movlw	247
  6945  019C  25D5  3180         	fcall	_read_eeprom_data
  6946  019E  0024               	movlb	4	; select bank4
  6947  019F  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  6948                           
  6949                           ;diag.c: 676: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
  6950  01A0  30F8               	movlw	248
  6951  01A1  25D5  3180         	fcall	_read_eeprom_data
  6952                           
  6953                           ;diag.c: 679: if ((ui8_b_DResB0_RD == 0xFF) && (ui8_b_DResB1_RD == 0xFF) && (ui8_b_DResB
      +                          2_RD == 0xFF) && (ui8_b_DResB3_RD == 0xFF) && (ui8_b_DResB4_RD == 0xFF))
  6954  01A3  2760  3180         	fcall	PL50	;call to abstracted procedure
  6955  01A5  1D03               	skipz
  6956  01A6  29BD               	goto	l30777
  6957  01A7  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  6958  01A8  3AFF               	xorlw	255
  6959  01A9  1D03               	skipz
  6960  01AA  29BD               	goto	l30777
  6961  01AB  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  6962  01AC  3AFF               	xorlw	255
  6963  01AD  1D03               	skipz
  6964  01AE  29BD               	goto	l30777
  6965  01AF  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  6966  01B0  3AFF               	xorlw	255
  6967  01B1  1D03               	skipz
  6968  01B2  29BD               	goto	l30777
  6969  01B3  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  6970  01B4  3AFF               	xorlw	255
  6971  01B5  1D03               	skipz
  6972  01B6  29BD               	goto	l30777
  6973                           
  6974                           ;diag.c: 681: {
  6975                           ;diag.c: 683: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6976  01B7  303A               	movlw	58
  6977  01B8  267D  3180         	fcall	PL2	;call to abstracted procedure
  6978  01BA  270B  3180         	fcall	PL19	;call to abstracted procedure
  6979  01BC  29C3               	goto	L2
  6980  01BD                     l30777:	
  6981                           ;diag.c: 686: }
  6982                           
  6983                           
  6984                           ;diag.c: 689: else
  6985                           ;diag.c: 690: {
  6986                           ;diag.c: 692: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  6987  01BD  307F               	movlw	127
  6988  01BE  0020               	movlb	0	; select bank0
  6989  01BF  00B7               	movwf	?_Transmit_LIN_8Bytes
  6990  01C0  084F               	movf	_ui8_b_DResLocID_c,w
  6991  01C1  2702  3180         	fcall	PL11	;call to abstracted procedure
  6992  01C3                     L2:	
  6993  01C3  25F8               	fcall	_Transmit_LIN_8Bytes
  6994                           
  6995                           ;diag.c: 702: }
  6996                           ;diag.c: 705: ui8_selected_lid = 0x92;
  6997  01C4  3092               	movlw	146
  6998  01C5  0020               	movlb	0	; select bank0
  6999  01C6  00D4               	movwf	_ui8_selected_lid
  7000                           
  7001                           ;diag.c: 708: }
  7002  01C7  0008               	return
  7003  01C8                     l30781:	
  7004                           
  7005                           ;diag.c: 834: {
  7006                           ;diag.c: 836: if( 0x93 == ui8_selected_lid )
  7007  01C8  0854               	movf	_ui8_selected_lid,w
  7008  01C9  3A93               	xorlw	147
  7009  01CA  1D03               	skipz
  7010  01CB  0008               	return
  7011                           
  7012                           ;diag.c: 838: {
  7013                           ;diag.c: 850: sum = cksum( );
  7014  01CC  2775  3180         	fcall	_cksum
  7015  01CE  082D               	movf	?_cksum+1,w
  7016  01CF  0022               	movlb	2	; select bank2
  7017  01D0  00A8               	movwf	(_sum+1)^(0+256)
  7018  01D1  0020               	movlb	0	; select bank0
  7019  01D2  082C               	movf	?_cksum,w
  7020  01D3  0022               	movlb	2	; select bank2
  7021  01D4  00A7               	movwf	_sum^(0+256)
  7022                           
  7023                           ;diag.c: 851: checksum[ 1 ] = ( (EEADRL=(0x1FFF)&0xff, EEADRH=(0x1FFF)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, _nop(), _nop(), (EEDATH << 8) | EEDATA) );
  7024  01D5  30FF               	movlw	255
  7025  01D6  0023               	movlb	3	; select bank3
  7026  01D7  2750  3180         	fcall	PL40	;call to abstracted procedure
  7027  01D9  1415               	bsf	21,0
  7028  01DA  0000               	nop
  7029  01DB  0000               	nop
  7030  01DC  0023               	movlb	3	; select bank3
  7031  01DD  0814               	movf	20,w	;volatile
  7032  01DE  00BB               	movwf	((_checksum+1)^(0+384)+2)
  7033  01DF  0813               	movf	19,w	;volatile
  7034  01E0  00BA               	movwf	(_checksum^(0+384)+2)
  7035                           
  7036                           ;diag.c: 852: checksum[ 2 ] = ( (EEADRL=(0x1FFE)&0xff, EEADRH=(0x1FFE)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, _nop(), _nop(), (EEDATH << 8) | EEDATA) );
  7037  01E1  30FE               	movlw	254
  7038  01E2  2750  3180         	fcall	PL40	;call to abstracted procedure
  7039  01E4  1415               	bsf	21,0
  7040  01E5  0000               	nop
  7041  01E6  0000               	nop
  7042  01E7  0023               	movlb	3	; select bank3
  7043  01E8  0814               	movf	20,w	;volatile
  7044  01E9  00BD               	movwf	((_checksum+1)^(0+384)+4)
  7045  01EA  0813               	movf	19,w	;volatile
  7046  01EB  00BC               	movwf	(_checksum^(0+384)+4)
  7047                           
  7048                           ;diag.c: 853: checksum[ 0 ] = ( checksum[ 1 ]<<8 ) + checksum[ 2 ];
  7049  01EC  3004               	movlw	4
  7050  01ED  3EB8               	addlw	_checksum& (0+255)
  7051  01EE  0086               	movwf	6
  7052  01EF  3001               	movlw	1	; select bank3/4
  7053  01F0  0087               	movwf	7
  7054  01F1  083A               	movf	(_checksum^(0+384)+2),w
  7055  01F2  0020               	movlb	0	; select bank0
  7056  01F3  00C2               	movwf	??_EOL+1
  7057  01F4  01C1               	clrf	??_EOL
  7058  01F5  3F40               	moviw [0]fsr1
  7059  01F6  0741               	addwf	??_EOL,w
  7060  01F7  0023               	movlb	3	; select bank3
  7061  01F8  00B8               	movwf	_checksum^(0+384)
  7062  01F9  3F41               	moviw [1]fsr1
  7063  01FA  0020               	movlb	0	; select bank0
  7064  01FB  3D42               	addwfc	??_EOL+1,w
  7065  01FC  0023               	movlb	3	; select bank3
  7066  01FD  00B9               	movwf	(_checksum^(0+384)+1)
  7067                           
  7068                           ;diag.c: 858: ui8_b_DResB2_RD = checksum[1] ;
  7069  01FE  083A               	movf	(_checksum^(0+384)+2),w
  7070  01FF  0024               	movlb	4	; select bank4
  7071  0200  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  7072                           
  7073                           ;diag.c: 859: ui8_b_DResB3_RD = checksum[2] ;
  7074  0201  0023               	movlb	3	; select bank3
  7075  0202  083C               	movf	(_checksum^(0+384)+4),w
  7076  0203  0024               	movlb	4	; select bank4
  7077  0204  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7078                           
  7079                           ;diag.c: 860: ui8_b_DResB4_RD = (unsigned int)((sum)>>8) ;
  7080  0205  0022               	movlb	2	; select bank2
  7081  0206  0828               	movf	(_sum+1)^(0+256),w
  7082  0207  0024               	movlb	4	; select bank4
  7083  0208  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
  7084                           
  7085                           ;diag.c: 861: ui8_b_DResB5_RD = (unsigned int)(sum) ;
  7086  0209  0022               	movlb	2	; select bank2
  7087  020A  0827               	movf	_sum^(0+256),w
  7088  020B  0024               	movlb	4	; select bank4
  7089  020C  00B2               	movwf	EOL@ui8_b_DResB5_RD^(0+512)
  7090                           
  7091                           ;diag.c: 865: if (checksum[0] == sum)
  7092  020D  0022               	movlb	2	; select bank2
  7093  020E  0828               	movf	(_sum+1)^(0+256),w
  7094  020F  0023               	movlb	3	; select bank3
  7095  0210  0639               	xorwf	(_checksum+1)^(0+384),w
  7096  0211  1D03               	skipz
  7097  0212  2A17               	goto	u11375
  7098  0213  0022               	movlb	2	; select bank2
  7099  0214  0827               	movf	_sum^(0+256),w
  7100  0215  0023               	movlb	3	; select bank3
  7101  0216  0638               	xorwf	_checksum^(0+384),w
  7102  0217                     u11375:	
  7103  0217  1D03               	skipz
  7104  0218  2A2C               	goto	l30835
  7105                           
  7106                           ;diag.c: 867: {
  7107                           ;diag.c: 869: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
  7108                           ;diag.c: 870: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  7109  0219  303A               	movlw	58
  7110  021A  0020               	movlb	0	; select bank0
  7111  021B  00B7               	movwf	?_Transmit_LIN_8Bytes
  7112  021C  084F               	movf	_ui8_b_DResLocID_c,w
  7113  021D  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  7114  021E  3002               	movlw	2
  7115  021F  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  7116  0220  01BA               	clrf	?_Transmit_LIN_8Bytes+3
  7117  0221  0024               	movlb	4	; select bank4
  7118  0222  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  7119  0223  0020               	movlb	0	; select bank0
  7120  0224  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  7121  0225  0024               	movlb	4	; select bank4
  7122  0226  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  7123  0227  0020               	movlb	0	; select bank0
  7124  0228  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  7125  0229  2748  3180         	fcall	PL33	;call to abstracted procedure
  7126  022B  2A37               	goto	L3
  7127  022C                     l30835:	
  7128                           ;diag.c: 873: }
  7129                           
  7130                           
  7131                           ;diag.c: 876: else
  7132                           ;diag.c: 877: {
  7133                           ;diag.c: 879: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  7134  022C  307F               	movlw	127
  7135  022D  0020               	movlb	0	; select bank0
  7136  022E  00B7               	movwf	?_Transmit_LIN_8Bytes
  7137  022F  084F               	movf	_ui8_b_DResLocID_c,w
  7138  0230  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  7139  0231  30FF               	movlw	255
  7140  0232  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  7141  0233  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  7142  0234  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  7143  0235  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  7144  0236  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  7145  0237                     L3:	
  7146  0237  00BE               	movwf	?_Transmit_LIN_8Bytes+7
  7147  0238  3010               	movlw	16
  7148  0239  25F8               	fcall	_Transmit_LIN_8Bytes
  7149                           
  7150                           ;diag.c: 889: }
  7151                           ;diag.c: 892: ui8_selected_lid = 0x94;
  7152  023A  3094               	movlw	148
  7153  023B  0020               	movlb	0	; select bank0
  7154  023C  00D4               	movwf	_ui8_selected_lid
  7155                           
  7156                           ;diag.c: 896: }
  7157  023D  0008               	return
  7158  023E                     l30839:	
  7159                           
  7160                           ;diag.c: 923: {
  7161                           ;diag.c: 925: if( 0x94 == ui8_selected_lid )
  7162  023E  0854               	movf	_ui8_selected_lid,w
  7163  023F  3A94               	xorlw	148
  7164  0240  1D03               	skipz
  7165  0241  0008               	return
  7166                           
  7167                           ;diag.c: 927: {
  7168                           ;diag.c: 940: ui8_given_supply = (ui8_b_DResB0_c);
  7169  0242  084E               	movf	_ui8_b_DResB0_c,w
  7170  0243  0021               	movlb	1	; select bank1
  7171  0244  00E6               	movwf	_ui8_given_supply^(0+128)
  7172                           
  7173                           ;diag.c: 942: if (ui8_given_supply == 0)
  7174  0245  08E6               	movf	_ui8_given_supply^(0+128),f
  7175  0246  1D03               	skipz
  7176  0247  2A4A               	goto	l30847
  7177                           
  7178                           ;diag.c: 944: {
  7179                           ;diag.c: 946: ui8_given_supply = 0x6F;
  7180  0248  306F               	movlw	111
  7181  0249  00E6               	movwf	_ui8_given_supply^(0+128)
  7182  024A                     l30847:	
  7183                           
  7184                           ;diag.c: 948: }
  7185                           ;diag.c: 951: ui8_b_DResB0_RD = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  7186  024A  0022               	movlb	2	; select bank2
  7187  024B  0830               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  7188  024C  0020               	movlb	0	; select bank0
  7189  024D  00C2               	movwf	??_EOL+1
  7190  024E  0022               	movlb	2	; select bank2
  7191  024F  082F               	movf	_ui16_fir_Bat_mittel^(0+256),w
  7192  0250  0020               	movlb	0	; select bank0
  7193  0251  00C1               	movwf	??_EOL
  7194  0252  36C2               	lsrf	??_EOL+1,f
  7195  0253  0CC1               	rrf	??_EOL,f
  7196  0254  36C2               	lsrf	??_EOL+1,f
  7197  0255  0CC1               	rrf	??_EOL,f
  7198  0256  0841               	movf	??_EOL,w
  7199  0257  0024               	movlb	4	; select bank4
  7200  0258  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7201                           
  7202                           ;diag.c: 961: if ((ui8_b_DResB0_RD > ui8_given_supply - 3) && (ui8_b_DResB0_RD < ui8_giv
      +                          en_supply + 3) )
  7203  0259  0021               	movlb	1	; select bank1
  7204  025A  0866               	movf	_ui8_given_supply^(0+128),w
  7205  025B  3EFD               	addlw	253
  7206  025C  0020               	movlb	0	; select bank0
  7207  025D  00C1               	movwf	??_EOL
  7208  025E  30FF               	movlw	255
  7209  025F  1803               	skipnc
  7210  0260  3000               	movlw	0
  7211  0261  00C2               	movwf	??_EOL+1
  7212  0262  3A80               	xorlw	128
  7213  0263  00C3               	movwf	??_EOL+2
  7214  0264  3080               	movlw	128
  7215  0265  0243               	subwf	??_EOL+2,w
  7216  0266  1D03               	skipz
  7217  0267  2A6C               	goto	u11405
  7218  0268  0024               	movlb	4	; select bank4
  7219  0269  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  7220  026A  0020               	movlb	0	; select bank0
  7221  026B  0241               	subwf	??_EOL,w
  7222  026C                     u11405:	
  7223  026C  1803               	skipnc
  7224  026D  2A8A               	goto	l30865
  7225  026E  0021               	movlb	1	; select bank1
  7226  026F  0866               	movf	_ui8_given_supply^(0+128),w
  7227  0270  3E03               	addlw	3
  7228  0271  0020               	movlb	0	; select bank0
  7229  0272  00C1               	movwf	??_EOL
  7230  0273  3000               	movlw	0
  7231  0274  1803               	skipnc
  7232  0275  3001               	movlw	1
  7233  0276  00C2               	movwf	??_EOL+1
  7234  0277  3A80               	xorlw	128
  7235  0278  3C80               	sublw	128
  7236  0279  1D03               	skipz
  7237  027A  2A7E               	goto	u11415
  7238  027B  0841               	movf	??_EOL,w
  7239  027C  0024               	movlb	4	; select bank4
  7240  027D  0234               	subwf	EOL@ui8_b_DResB0_RD^(0+512),w
  7241  027E                     u11415:	
  7242  027E  1803               	skipnc
  7243  027F  2A8A               	goto	l30865
  7244                           
  7245                           ;diag.c: 965: {
  7246                           ;diag.c: 967: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
  7247                           ;diag.c: 968: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  7248  0280  303A               	movlw	58
  7249  0281  0020               	movlb	0	; select bank0
  7250  0282  00B7               	movwf	?_Transmit_LIN_8Bytes
  7251  0283  26A9  3180         	fcall	PL4	;call to abstracted procedure
  7252  0285  3010               	movlw	16
  7253  0286  01BA               	clrf	?_Transmit_LIN_8Bytes+3
  7254  0287  275B  3180         	fcall	PL46	;call to abstracted procedure
  7255  0289  2A90               	goto	L4
  7256  028A                     l30865:	
  7257                           ;diag.c: 971: }
  7258                           
  7259                           
  7260                           ;diag.c: 974: else
  7261                           ;diag.c: 975: {
  7262                           ;diag.c: 977: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  7263  028A  307F               	movlw	127
  7264  028B  0020               	movlb	0	; select bank0
  7265  028C  00B7               	movwf	?_Transmit_LIN_8Bytes
  7266  028D  084F               	movf	_ui8_b_DResLocID_c,w
  7267  028E  2702  3180         	fcall	PL11	;call to abstracted procedure
  7268  0290                     L4:	
  7269  0290  25F8               	fcall	_Transmit_LIN_8Bytes
  7270                           
  7271                           ;diag.c: 987: }
  7272                           ;diag.c: 990: ui8_selected_lid = 0x95;
  7273  0291  3095               	movlw	149
  7274  0292  0020               	movlb	0	; select bank0
  7275  0293  00D4               	movwf	_ui8_selected_lid
  7276                           
  7277                           ;diag.c: 993: }
  7278  0294  0008               	return
  7279  0295                     l30869:	
  7280                           
  7281                           ;diag.c: 1022: {
  7282                           ;diag.c: 1024: if( 0x95 == ui8_selected_lid )
  7283  0295  0854               	movf	_ui8_selected_lid,w
  7284  0296  3A95               	xorlw	149
  7285  0297  1903               	btfsc	3,2
  7286  0298  2C52               	goto	l31033
  7287  0299  2C61               	goto	l31035
  7288  029A                     l30873:	
  7289                           
  7290                           ;diag.c: 1037: {
  7291                           ;diag.c: 1039: InitMotorStop( );
  7292  029A  318C  2429  3180   	fcall	_InitMotorStop
  7293                           
  7294                           ;diag.c: 1042: PEIE = 0;
  7295  029D  130B               	bcf	11,6
  7296                           
  7297                           ;diag.c: 1043: GIE = 0;
  7298  029E  138B               	bcf	11,7
  7299                           
  7300                           ;diag.c: 1044: CCP1CON = 0x00;
  7301  029F  0025               	movlb	5	; select bank5
  7302  02A0  0193               	clrf	19	;volatile
  7303                           
  7304                           ;diag.c: 1050: LATB2 = 1;
  7305  02A1  0022               	movlb	2	; select bank2
  7306  02A2  3035               	movlw	53
  7307  02A3  150D               	bsf	13,2
  7308                           
  7309                           ;diag.c: 1051: LATC3 = 1;
  7310  02A4  158E               	bsf	14,3
  7311                           
  7312                           ;diag.c: 1054: LATC1 = 0;
  7313  02A5  108E               	bcf	14,1
  7314                           
  7315                           ;diag.c: 1055: LATC4 = 0;
  7316  02A6  120E               	bcf	14,4
  7317                           
  7318                           ;diag.c: 1061: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  7319  02A7  0021               	movlb	1	; select bank1
  7320  02A8  009D               	movwf	29	;volatile
  7321  02A9  0024               	movlb	4	; select bank4
  7322  02AA  01A0               	clrf	EOL@_dcnt^(0+512)
  7323  02AB  2AAE               	goto	l7690
  7324  02AC                     l7691:	
  7325  02AC  0000               	nop	;#
  7326  02AD  0000               	nop	;#
  7327  02AE                     l7690:	
  7328  02AE  0024               	movlb	4	; select bank4
  7329  02AF  0BA0               	decfsz	EOL@_dcnt^(0+512),f
  7330  02B0  2AAC               	goto	l7691
  7331  02B1  01A1               	clrf	EOL@_dcnt_9400^(0+512)
  7332  02B2  2AB5               	goto	l7695
  7333  02B3                     l7696:	
  7334  02B3  0000               	nop	;#
  7335  02B4  0000               	nop	;#
  7336  02B5                     l7695:	
  7337  02B5  0024               	movlb	4	; select bank4
  7338  02B6  0BA1               	decfsz	EOL@_dcnt_9400^(0+512),f
  7339  02B7  2AB3               	goto	l7696
  7340  02B8  01A2               	clrf	EOL@_dcnt_9401^(0+512)
  7341  02B9  2ABC               	goto	l7700
  7342  02BA                     l7701:	
  7343  02BA  0000               	nop	;#
  7344  02BB  0000               	nop	;#
  7345  02BC                     l7700:	
  7346  02BC  0024               	movlb	4	; select bank4
  7347  02BD  0BA2               	decfsz	EOL@_dcnt_9401^(0+512),f
  7348  02BE  2ABA               	goto	l7701
  7349  02BF  01A3               	clrf	EOL@_dcnt_9402^(0+512)
  7350  02C0  2AC3               	goto	l7705
  7351  02C1                     l7706:	
  7352  02C1  0000               	nop	;#
  7353  02C2  0000               	nop	;#
  7354  02C3                     l7705:	
  7355  02C3  0024               	movlb	4	; select bank4
  7356  02C4  0BA3               	decfsz	EOL@_dcnt_9402^(0+512),f
  7357  02C5  2AC1               	goto	l7706
  7358  02C6  01A4               	clrf	EOL@_dcnt_9403^(0+512)
  7359  02C7  2ACA               	goto	l7710
  7360  02C8                     l7711:	
  7361  02C8  0000               	nop	;#
  7362  02C9  0000               	nop	;#
  7363  02CA                     l7710:	
  7364  02CA  0024               	movlb	4	; select bank4
  7365  02CB  0BA4               	decfsz	EOL@_dcnt_9403^(0+512),f
  7366  02CC  2AC8               	goto	l7711
  7367  02CD  01A5               	clrf	EOL@_dcnt_9404^(0+512)
  7368  02CE  2AD1               	goto	l7715
  7369  02CF                     l7716:	
  7370  02CF  0000               	nop	;#
  7371  02D0  0000               	nop	;#
  7372  02D1                     l7715:	
  7373  02D1  0024               	movlb	4	; select bank4
  7374  02D2  0BA5               	decfsz	EOL@_dcnt_9404^(0+512),f
  7375  02D3  2ACF               	goto	l7716
  7376                           
  7377                           ;diag.c: 1069: ADC_Wait();
  7378  02D4  318A  2238  3180   	fcall	_ADC_Wait
  7379                           
  7380                           ;diag.c: 1070: ( GO_nDONE = 1 );
  7381  02D7  0021               	movlb	1	; select bank1
  7382  02D8  149D               	bsf	29,1
  7383                           
  7384                           ;diag.c: 1071: ui16_IPhase2_bldc_cal.w = ADC_Read() - ui8_current_cal[1];
  7385  02D9  318A  2251  3180   	fcall	_ADC_Read
  7386  02DC  082D               	movf	?_ADC_Read+1,w
  7387  02DD  0022               	movlb	2	; select bank2
  7388  02DE  00E4               	movwf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  7389  02DF  0020               	movlb	0	; select bank0
  7390  02E0  082C               	movf	?_ADC_Read,w
  7391  02E1  0022               	movlb	2	; select bank2
  7392  02E2  00E3               	movwf	_ui16_IPhase2_bldc_cal^(0+256)
  7393  02E3  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  7394  02E4  02E3               	subwf	_ui16_IPhase2_bldc_cal^(0+256),f
  7395  02E5  1C03               	skipc
  7396  02E6  03E4               	decf	(_ui16_IPhase2_bldc_cal+1)^(0+256),f
  7397  02E7  3009               	movlw	9
  7398                           
  7399                           ;diag.c: 1077: LATC2 = 1;
  7400  02E8  150E               	bsf	14,2
  7401                           
  7402                           ;diag.c: 1078: LATC1 = 1;
  7403  02E9  148E               	bsf	14,1
  7404                           
  7405                           ;diag.c: 1081: LATC3 = 0;
  7406  02EA  118E               	bcf	14,3
  7407  02EB  120E               	bcf	14,4
  7408                           
  7409                           ;diag.c: 1088: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  7410  02EC  0021               	movlb	1	; select bank1
  7411  02ED  009D               	movwf	29	;volatile
  7412  02EE  0024               	movlb	4	; select bank4
  7413  02EF  01A6               	clrf	EOL@_dcnt_9405^(0+512)
  7414  02F0  2AF3               	goto	l7720
  7415  02F1                     l7721:	
  7416  02F1  0000               	nop	;#
  7417  02F2  0000               	nop	;#
  7418  02F3                     l7720:	
  7419  02F3  0024               	movlb	4	; select bank4
  7420  02F4  0BA6               	decfsz	EOL@_dcnt_9405^(0+512),f
  7421  02F5  2AF1               	goto	l7721
  7422  02F6  01A7               	clrf	EOL@_dcnt_9406^(0+512)
  7423  02F7  2AFA               	goto	l7725
  7424  02F8                     l7726:	
  7425  02F8  0000               	nop	;#
  7426  02F9  0000               	nop	;#
  7427  02FA                     l7725:	
  7428  02FA  0024               	movlb	4	; select bank4
  7429  02FB  0BA7               	decfsz	EOL@_dcnt_9406^(0+512),f
  7430  02FC  2AF8               	goto	l7726
  7431  02FD  01A8               	clrf	EOL@_dcnt_9407^(0+512)
  7432  02FE  2B01               	goto	l7730
  7433  02FF                     l7731:	
  7434  02FF  0000               	nop	;#
  7435  0300  0000               	nop	;#
  7436  0301                     l7730:	
  7437  0301  0024               	movlb	4	; select bank4
  7438  0302  0BA8               	decfsz	EOL@_dcnt_9407^(0+512),f
  7439  0303  2AFF               	goto	l7731
  7440  0304  01A9               	clrf	EOL@_dcnt_9408^(0+512)
  7441  0305  2B08               	goto	l7735
  7442  0306                     l7736:	
  7443  0306  0000               	nop	;#
  7444  0307  0000               	nop	;#
  7445  0308                     l7735:	
  7446  0308  0024               	movlb	4	; select bank4
  7447  0309  0BA9               	decfsz	EOL@_dcnt_9408^(0+512),f
  7448  030A  2B06               	goto	l7736
  7449  030B  01AA               	clrf	EOL@_dcnt_9409^(0+512)
  7450  030C  2B0F               	goto	l7740
  7451  030D                     l7741:	
  7452  030D  0000               	nop	;#
  7453  030E  0000               	nop	;#
  7454  030F                     l7740:	
  7455  030F  0024               	movlb	4	; select bank4
  7456  0310  0BAA               	decfsz	EOL@_dcnt_9409^(0+512),f
  7457  0311  2B0D               	goto	l7741
  7458  0312  01AB               	clrf	EOL@_dcnt_9410^(0+512)
  7459  0313  2B16               	goto	l7745
  7460  0314                     l7746:	
  7461  0314  0000               	nop	;#
  7462  0315  0000               	nop	;#
  7463  0316                     l7745:	
  7464  0316  0024               	movlb	4	; select bank4
  7465  0317  0BAB               	decfsz	EOL@_dcnt_9410^(0+512),f
  7466  0318  2B14               	goto	l7746
  7467                           
  7468                           ;diag.c: 1096: ADC_Wait();
  7469  0319  318A  2238  3180   	fcall	_ADC_Wait
  7470                           
  7471                           ;diag.c: 1097: ( GO_nDONE = 1 );
  7472  031C  0021               	movlb	1	; select bank1
  7473  031D  149D               	bsf	29,1
  7474                           
  7475                           ;diag.c: 1098: ui16_IPhase1_bldc_cal.w = ADC_Read() - ui8_current_cal[0];
  7476  031E  318A  2251  3180   	fcall	_ADC_Read
  7477  0321  082D               	movf	?_ADC_Read+1,w
  7478  0322  0022               	movlb	2	; select bank2
  7479  0323  00E2               	movwf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  7480  0324  0020               	movlb	0	; select bank0
  7481  0325  082C               	movf	?_ADC_Read,w
  7482  0326  0022               	movlb	2	; select bank2
  7483  0327  00E1               	movwf	_ui16_IPhase1_bldc_cal^(0+256)
  7484  0328  0820               	movf	_ui8_current_cal^(0+256),w
  7485  0329  02E1               	subwf	_ui16_IPhase1_bldc_cal^(0+256),f
  7486  032A  1C03               	skipc
  7487  032B  03E2               	decf	(_ui16_IPhase1_bldc_cal+1)^(0+256),f
  7488  032C  3011               	movlw	17
  7489                           
  7490                           ;diag.c: 1104: LATB1 = 1;
  7491  032D  148D               	bsf	13,1
  7492                           
  7493                           ;diag.c: 1105: LATC4 = 1;
  7494  032E  160E               	bsf	14,4
  7495                           
  7496                           ;diag.c: 1107: LATC1 = 0;
  7497  032F  108E               	bcf	14,1
  7498  0330  118E               	bcf	14,3
  7499                           
  7500                           ;diag.c: 1115: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  7501  0331  0021               	movlb	1	; select bank1
  7502  0332  009D               	movwf	29	;volatile
  7503  0333  0024               	movlb	4	; select bank4
  7504  0334  01AC               	clrf	EOL@_dcnt_9411^(0+512)
  7505  0335  2B38               	goto	l7750
  7506  0336                     l7751:	
  7507  0336  0000               	nop	;#
  7508  0337  0000               	nop	;#
  7509  0338                     l7750:	
  7510  0338  0024               	movlb	4	; select bank4
  7511  0339  0BAC               	decfsz	EOL@_dcnt_9411^(0+512),f
  7512  033A  2B36               	goto	l7751
  7513  033B  01AD               	clrf	EOL@_dcnt_9412^(0+512)
  7514  033C  2B3F               	goto	l7755
  7515  033D                     l7756:	
  7516  033D  0000               	nop	;#
  7517  033E  0000               	nop	;#
  7518  033F                     l7755:	
  7519  033F  0024               	movlb	4	; select bank4
  7520  0340  0BAD               	decfsz	EOL@_dcnt_9412^(0+512),f
  7521  0341  2B3D               	goto	l7756
  7522  0342  01AE               	clrf	EOL@_dcnt_9413^(0+512)
  7523  0343  2B46               	goto	l7760
  7524  0344                     l7761:	
  7525  0344  0000               	nop	;#
  7526  0345  0000               	nop	;#
  7527  0346                     l7760:	
  7528  0346  0024               	movlb	4	; select bank4
  7529  0347  0BAE               	decfsz	EOL@_dcnt_9413^(0+512),f
  7530  0348  2B44               	goto	l7761
  7531  0349  01AF               	clrf	EOL@_dcnt_9414^(0+512)
  7532  034A  2B4D               	goto	l7765
  7533  034B                     l7766:	
  7534  034B  0000               	nop	;#
  7535  034C  0000               	nop	;#
  7536  034D                     l7765:	
  7537  034D  0024               	movlb	4	; select bank4
  7538  034E  0BAF               	decfsz	EOL@_dcnt_9414^(0+512),f
  7539  034F  2B4B               	goto	l7766
  7540  0350  01B0               	clrf	EOL@_dcnt_9415^(0+512)
  7541  0351  2B54               	goto	l7770
  7542  0352                     l7771:	
  7543  0352  0000               	nop	;#
  7544  0353  0000               	nop	;#
  7545  0354                     l7770:	
  7546  0354  0024               	movlb	4	; select bank4
  7547  0355  0BB0               	decfsz	EOL@_dcnt_9415^(0+512),f
  7548  0356  2B52               	goto	l7771
  7549  0357  01B1               	clrf	EOL@_dcnt_9416^(0+512)
  7550  0358  2B5B               	goto	l7775
  7551  0359                     l7776:	
  7552  0359  0000               	nop	;#
  7553  035A  0000               	nop	;#
  7554  035B                     l7775:	
  7555  035B  0024               	movlb	4	; select bank4
  7556  035C  0BB1               	decfsz	EOL@_dcnt_9416^(0+512),f
  7557  035D  2B59               	goto	l7776
  7558                           
  7559                           ;diag.c: 1123: ADC_Wait();
  7560  035E  318A  2238  3180   	fcall	_ADC_Wait
  7561                           
  7562                           ;diag.c: 1124: ( GO_nDONE = 1 );
  7563  0361  0021               	movlb	1	; select bank1
  7564  0362  149D               	bsf	29,1
  7565                           
  7566                           ;diag.c: 1125: ui16_IPhase3_bldc_cal.w = ADC_Read() - ui8_current_cal[2];
  7567  0363  318A  2251         	fcall	_ADC_Read
  7568  0365  082D               	movf	?_ADC_Read+1,w
  7569  0366  0022               	movlb	2	; select bank2
  7570  0367  00E6               	movwf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  7571  0368  0020               	movlb	0	; select bank0
  7572  0369  082C               	movf	?_ADC_Read,w
  7573  036A  0022               	movlb	2	; select bank2
  7574  036B  00E5               	movwf	_ui16_IPhase3_bldc_cal^(0+256)
  7575  036C  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  7576  036D  02E5               	subwf	_ui16_IPhase3_bldc_cal^(0+256),f
  7577  036E  1C03               	skipc
  7578  036F  03E6               	decf	(_ui16_IPhase3_bldc_cal+1)^(0+256),f
  7579                           
  7580                           ;diag.c: 1128: LATC = LATC & 0b11100101;
  7581  0370  30E5               	movlw	229
  7582  0371  058E               	andwf	14,f	;volatile
  7583                           
  7584                           ;diag.c: 1131: CCP1CON = 0x0c;
  7585  0372  300C               	movlw	12
  7586  0373  0025               	movlb	5	; select bank5
  7587  0374  0093               	movwf	19	;volatile
  7588                           
  7589                           ;diag.c: 1132: PEIE = 1;
  7590  0375  170B               	bsf	11,6
  7591                           
  7592                           ;diag.c: 1133: GIE = 1;
  7593  0376  178B               	bsf	11,7
  7594                           
  7595                           ;diag.c: 1136: phaseCal = 1;
  7596  0377  0021               	movlb	1	; select bank1
  7597  0378  01DA               	clrf	_phaseCal^(0+128)
  7598  0379  0ADA               	incf	_phaseCal^(0+128),f
  7599                           
  7600                           ;diag.c: 1139: break;
  7601  037A  0008               	return
  7602  037B                     l30971:	
  7603                           
  7604                           ;diag.c: 1146: {
  7605                           ;diag.c: 1151: write_eeprom_data( 0x02, ( unsigned char )( ( 0x7800 / ui16_IPhase1_bldc_
      +                          cal.w )>>8 ) );
  7606  037B  271E  3180         	fcall	PL21	;call to abstracted procedure
  7607  037D  2650  3180         	fcall	___lwdiv
  7608  037F  082D               	movf	?___lwdiv+1,w
  7609  0380  00B3               	movwf	?_write_eeprom_data
  7610  0381  3002               	movlw	2
  7611  0382  25E0  3180         	fcall	_write_eeprom_data
  7612                           
  7613                           ;diag.c: 1152: write_eeprom_data( 0x03, ( unsigned char )( 0x7800 / ui16_IPhase1_bldc_ca
      +                          l.w ) );
  7614  0384  271E  3180         	fcall	PL21	;call to abstracted procedure
  7615  0386  2650  3180         	fcall	___lwdiv
  7616  0388  082C               	movf	?___lwdiv,w
  7617  0389  00B3               	movwf	?_write_eeprom_data
  7618  038A  3003               	movlw	3
  7619  038B  25E0  3180         	fcall	_write_eeprom_data
  7620                           
  7621                           ;diag.c: 1155: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03
      +                           );
  7622  038D  3003               	movlw	3
  7623  038E  25D5  3180         	fcall	_read_eeprom_data
  7624  0390  00C1               	movwf	??_EOL
  7625  0391  3002               	movlw	2
  7626  0392  25D5  3180         	fcall	_read_eeprom_data
  7627  0394  0021               	movlb	1	; select bank1
  7628  0395  00E9               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  7629  0396  0020               	movlb	0	; select bank0
  7630  0397  0841               	movf	??_EOL,w
  7631  0398  0021               	movlb	1	; select bank1
  7632  0399  00E8               	movwf	_ui16_I_cal_Ph1^(0+128)
  7633                           
  7634                           ;diag.c: 1167: ui8_b_DResB0_RD = phaseCal;
  7635  039A  085A               	movf	_phaseCal^(0+128),w
  7636  039B  0024               	movlb	4	; select bank4
  7637  039C  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7638                           
  7639                           ;diag.c: 1169: ui8_b_DResB2_RD = ( unsigned char )( ( ui16_IPhase1_bldc_cal.w * ui16_I_c
      +                          al_Ph1 )>>8 );
  7640  039D  0022               	movlb	2	; select bank2
  7641  039E  0862               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
  7642  039F  0020               	movlb	0	; select bank0
  7643  03A0  00AD               	movwf	?___wmul+1
  7644  03A1  0022               	movlb	2	; select bank2
  7645  03A2  0861               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
  7646  03A3  0020               	movlb	0	; select bank0
  7647  03A4  00AC               	movwf	?___wmul
  7648  03A5  0021               	movlb	1	; select bank1
  7649  03A6  0869               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
  7650  03A7  0020               	movlb	0	; select bank0
  7651  03A8  00AF               	movwf	?___wmul+3
  7652  03A9  0021               	movlb	1	; select bank1
  7653  03AA  0868               	movf	_ui16_I_cal_Ph1^(0+128),w
  7654  03AB  0020               	movlb	0	; select bank0
  7655  03AC  00AE               	movwf	?___wmul+2
  7656  03AD  263B  3180         	fcall	___wmul
  7657  03AF  082D               	movf	?___wmul+1,w
  7658  03B0  0024               	movlb	4	; select bank4
  7659  03B1  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  7660                           
  7661                           ;diag.c: 1170: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph1 >> 8);
  7662  03B2  0021               	movlb	1	; select bank1
  7663  03B3  0869               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
  7664  03B4  0024               	movlb	4	; select bank4
  7665  03B5  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7666                           
  7667                           ;diag.c: 1171: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph1 );
  7668  03B6  0021               	movlb	1	; select bank1
  7669  03B7  0868               	movf	_ui16_I_cal_Ph1^(0+128),w
  7670                           
  7671                           ;diag.c: 1177: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7672                           ;diag.c: 1178: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7673                           ;diag.c: 1179: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7674                           ;diag.c: 1180: ui8_b_DResB5_RD );
  7675  03B8  26B0  3180         	fcall	PL5	;call to abstracted procedure
  7676  03BA  2692  3180         	fcall	PL3	;call to abstracted procedure
  7677  03BC  25F8               	fcall	_Transmit_LIN_8Bytes
  7678                           
  7679                           ;diag.c: 1182: phaseCal = 2;
  7680  03BD  3002               	movlw	2
  7681  03BE  00DA               	movwf	_phaseCal^(0+128)
  7682                           
  7683                           ;diag.c: 1184: break;
  7684  03BF  0008               	return
  7685  03C0                     l30991:	
  7686                           
  7687                           ;diag.c: 1191: {
  7688                           ;diag.c: 1195: write_eeprom_data( 0x04, ( unsigned char )( ( 0x7800 / ui16_IPhase2_bldc_
      +                          cal.w )>>8 ) );
  7689  03C0  2712  3180         	fcall	PL20	;call to abstracted procedure
  7690  03C2  2650  3180         	fcall	___lwdiv
  7691  03C4  082D               	movf	?___lwdiv+1,w
  7692  03C5  00B3               	movwf	?_write_eeprom_data
  7693  03C6  3004               	movlw	4
  7694  03C7  25E0  3180         	fcall	_write_eeprom_data
  7695                           
  7696                           ;diag.c: 1196: write_eeprom_data( 0x05, ( unsigned char )( 0x7800 / ui16_IPhase2_bldc_ca
      +                          l.w ) );
  7697  03C9  2712  3180         	fcall	PL20	;call to abstracted procedure
  7698  03CB  2650  3180         	fcall	___lwdiv
  7699  03CD  082C               	movf	?___lwdiv,w
  7700  03CE  00B3               	movwf	?_write_eeprom_data
  7701  03CF  3005               	movlw	5
  7702  03D0  25E0  3180         	fcall	_write_eeprom_data
  7703                           
  7704                           ;diag.c: 1199: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05
      +                           );
  7705  03D2  3005               	movlw	5
  7706  03D3  25D5  3180         	fcall	_read_eeprom_data
  7707  03D5  00C1               	movwf	??_EOL
  7708  03D6  3004               	movlw	4
  7709  03D7  25D5  3180         	fcall	_read_eeprom_data
  7710  03D9  0021               	movlb	1	; select bank1
  7711  03DA  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  7712  03DB  0020               	movlb	0	; select bank0
  7713  03DC  0841               	movf	??_EOL,w
  7714  03DD  0021               	movlb	1	; select bank1
  7715  03DE  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  7716                           
  7717                           ;diag.c: 1211: ui8_b_DResB0_RD = phaseCal;
  7718  03DF  085A               	movf	_phaseCal^(0+128),w
  7719  03E0  0024               	movlb	4	; select bank4
  7720  03E1  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7721                           
  7722                           ;diag.c: 1213: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 ) );
  7723  03E2  0022               	movlb	2	; select bank2
  7724  03E3  0864               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
  7725  03E4  0020               	movlb	0	; select bank0
  7726  03E5  00AD               	movwf	?___wmul+1
  7727  03E6  0022               	movlb	2	; select bank2
  7728  03E7  0863               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
  7729  03E8  0020               	movlb	0	; select bank0
  7730  03E9  00AC               	movwf	?___wmul
  7731  03EA  0021               	movlb	1	; select bank1
  7732  03EB  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
  7733  03EC  0020               	movlb	0	; select bank0
  7734  03ED  00AF               	movwf	?___wmul+3
  7735  03EE  0021               	movlb	1	; select bank1
  7736  03EF  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
  7737  03F0  0020               	movlb	0	; select bank0
  7738  03F1  00AE               	movwf	?___wmul+2
  7739  03F2  263B  3180         	fcall	___wmul
  7740  03F4  082D               	movf	?___wmul+1,w
  7741  03F5  0024               	movlb	4	; select bank4
  7742  03F6  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  7743                           
  7744                           ;diag.c: 1214: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph2>>8 );
  7745  03F7  0021               	movlb	1	; select bank1
  7746  03F8  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
  7747  03F9  0024               	movlb	4	; select bank4
  7748  03FA  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7749                           
  7750                           ;diag.c: 1215: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph2 );
  7751  03FB  0021               	movlb	1	; select bank1
  7752  03FC  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
  7753                           
  7754                           ;diag.c: 1221: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7755                           ;diag.c: 1222: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7756                           ;diag.c: 1223: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7757                           ;diag.c: 1224: ui8_b_DResB5_RD );
  7758  03FD  26B0  3180         	fcall	PL5	;call to abstracted procedure
  7759  03FF  2692  3180         	fcall	PL3	;call to abstracted procedure
  7760  0401  25F8               	fcall	_Transmit_LIN_8Bytes
  7761                           
  7762                           ;diag.c: 1227: phaseCal = 3;
  7763  0402  3003               	movlw	3
  7764  0403  00DA               	movwf	_phaseCal^(0+128)
  7765                           
  7766                           ;diag.c: 1229: break;
  7767  0404  0008               	return
  7768  0405                     l31011:	
  7769                           
  7770                           ;diag.c: 1236: {
  7771                           ;diag.c: 1240: write_eeprom_data( 0x06, ( unsigned char )( ( 0x7800 / ui16_IPhase3_bldc_
      +                          cal.w )>>8 ) );
  7772  0405  2730  3180         	fcall	PL23	;call to abstracted procedure
  7773  0407  272A  3180         	fcall	PL22	;call to abstracted procedure
  7774  0409  2650  3180         	fcall	___lwdiv
  7775  040B  082D               	movf	?___lwdiv+1,w
  7776  040C  00B3               	movwf	?_write_eeprom_data
  7777  040D  3006               	movlw	6
  7778  040E  25E0  3180         	fcall	_write_eeprom_data
  7779                           
  7780                           ;diag.c: 1241: write_eeprom_data( 0x07, ( unsigned char )( 0x7800 / ui16_IPhase3_bldc_ca
      +                          l.w ) );
  7781  0410  2730  3180         	fcall	PL23	;call to abstracted procedure
  7782  0412  272A  3180         	fcall	PL22	;call to abstracted procedure
  7783  0414  2650  3180         	fcall	___lwdiv
  7784  0416  082C               	movf	?___lwdiv,w
  7785  0417  00B3               	movwf	?_write_eeprom_data
  7786  0418  3007               	movlw	7
  7787  0419  25E0  3180         	fcall	_write_eeprom_data
  7788                           
  7789                           ;diag.c: 1245: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07
      +                           );
  7790  041B  3007               	movlw	7
  7791  041C  25D5  3180         	fcall	_read_eeprom_data
  7792  041E  00C1               	movwf	??_EOL
  7793  041F  3006               	movlw	6
  7794  0420  25D5  3180         	fcall	_read_eeprom_data
  7795  0422  0021               	movlb	1	; select bank1
  7796  0423  00ED               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  7797  0424  0020               	movlb	0	; select bank0
  7798  0425  0841               	movf	??_EOL,w
  7799  0426  0021               	movlb	1	; select bank1
  7800  0427  00EC               	movwf	_ui16_I_cal_Ph3^(0+128)
  7801                           
  7802                           ;diag.c: 1258: ui8_b_DResB0_RD = phaseCal;
  7803  0428  085A               	movf	_phaseCal^(0+128),w
  7804  0429  0024               	movlb	4	; select bank4
  7805  042A  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7806                           
  7807                           ;diag.c: 1260: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 ) );
  7808  042B  0022               	movlb	2	; select bank2
  7809  042C  0866               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
  7810  042D  0020               	movlb	0	; select bank0
  7811  042E  00AD               	movwf	?___wmul+1
  7812  042F  0022               	movlb	2	; select bank2
  7813  0430  0865               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
  7814  0431  0020               	movlb	0	; select bank0
  7815  0432  00AC               	movwf	?___wmul
  7816  0433  0021               	movlb	1	; select bank1
  7817  0434  086D               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
  7818  0435  0020               	movlb	0	; select bank0
  7819  0436  00AF               	movwf	?___wmul+3
  7820  0437  0021               	movlb	1	; select bank1
  7821  0438  086C               	movf	_ui16_I_cal_Ph3^(0+128),w
  7822  0439  0020               	movlb	0	; select bank0
  7823  043A  00AE               	movwf	?___wmul+2
  7824  043B  263B  3180         	fcall	___wmul
  7825  043D  082D               	movf	?___wmul+1,w
  7826  043E  0024               	movlb	4	; select bank4
  7827  043F  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  7828                           
  7829                           ;diag.c: 1261: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph3>>8 );
  7830  0440  0021               	movlb	1	; select bank1
  7831  0441  086D               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
  7832  0442  0024               	movlb	4	; select bank4
  7833  0443  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7834                           
  7835                           ;diag.c: 1262: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph3 );
  7836  0444  0021               	movlb	1	; select bank1
  7837  0445  086C               	movf	_ui16_I_cal_Ph3^(0+128),w
  7838                           
  7839                           ;diag.c: 1267: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7840                           ;diag.c: 1268: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7841                           ;diag.c: 1269: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7842                           ;diag.c: 1270: ui8_b_DResB5_RD );
  7843  0446  26B0  3180         	fcall	PL5	;call to abstracted procedure
  7844  0448  2692  3180         	fcall	PL3	;call to abstracted procedure
  7845  044A  25F8               	fcall	_Transmit_LIN_8Bytes
  7846                           
  7847                           ;diag.c: 1271: ui8_selected_lid = 0x98;
  7848  044B  3098               	movlw	152
  7849  044C  0020               	movlb	0	; select bank0
  7850  044D  00D4               	movwf	_ui8_selected_lid
  7851                           
  7852                           ;diag.c: 1274: break;
  7853  044E  0008               	return
  7854  044F                     l31031:	
  7855                           
  7856                           ;diag.c: 1281: {
  7857                           ;diag.c: 1283: NegativeAnswer(ui8_b_DResLocID_c);
  7858  044F  0020               	movlb	0	; select bank0
  7859  0450  084F               	movf	_ui8_b_DResLocID_c,w
  7860  0451  2F65               	ljmp	_NegativeAnswer
  7861  0452                     l31033:	
  7862                           ;diag.c: 1285: }
  7863                           ;diag.c: 1287: }
  7864                           
  7865  0452  0021               	movlb	1	; select bank1
  7866  0453  085A               	movf	_phaseCal^(0+128),w
  7867                           
  7868                           ; Switch size 1, requested type "space"
  7869                           ; Number of cases is 4, Range of values is 0 to 3
  7870                           ; switch strategies available:
  7871                           ; Name         Instructions Cycles
  7872                           ; simple_byte           13     7 (average)
  7873                           ; direct_byte           14     6 (fixed)
  7874                           ; jumptable            260     6 (fixed)
  7875                           ; rangetable             8     4 (fixed)
  7876                           ; spacedrange           13     6 (fixed)
  7877                           ; locatedrange           4     3 (fixed)
  7878                           ;	Chosen strategy is simple_byte
  7879  0454  3A00               	xorlw	0	; case 0
  7880  0455  1903               	skipnz
  7881  0456  2A9A               	goto	l30873
  7882  0457  3A01               	xorlw	1	; case 1
  7883  0458  1903               	skipnz
  7884  0459  2B7B               	goto	l30971
  7885  045A  3A03               	xorlw	3	; case 2
  7886  045B  1903               	skipnz
  7887  045C  2BC0               	goto	l30991
  7888  045D  3A01               	xorlw	1	; case 3
  7889  045E  1903               	skipnz
  7890  045F  2C05               	goto	l31011
  7891  0460  2C4F               	goto	l31031
  7892  0461                     l31035:	
  7893                           
  7894                           ;diag.c: 1293: else
  7895                           ;diag.c: 1294: {
  7896                           ;diag.c: 1296: NegativeAnswer(ui8_b_DResLocID_c);
  7897  0461  084F               	movf	_ui8_b_DResLocID_c,w
  7898  0462  2F65               	ljmp	_NegativeAnswer
  7899  0463                     l31037:	
  7900                           
  7901                           ;diag.c: 1311: {
  7902                           ;diag.c: 1313: if( 0x98 == ui8_selected_lid )
  7903  0463  0854               	movf	_ui8_selected_lid,w
  7904  0464  3A98               	xorlw	152
  7905  0465  1D03               	skipz
  7906  0466  0008               	return
  7907                           
  7908                           ;diag.c: 1315: {
  7909                           ;diag.c: 1328: wkpoint = ui8_b_DResB0_c;
  7910  0467  084E               	movf	_ui8_b_DResB0_c,w
  7911  0468  0021               	movlb	1	; select bank1
  7912  0469  00EE               	movwf	_wkpoint^(0+128)
  7913                           
  7914                           ;diag.c: 1953: break;
  7915                           
  7916                           ;diag.c: 1334: switch( ui8_b_DResB0_c )
  7917  046A  0020               	movlb	0	; select bank0
  7918  046B  084E               	movf	_ui8_b_DResB0_c,w
  7919                           
  7920                           ; Switch size 1, requested type "space"
  7921                           ; Number of cases is 4, Range of values is 1 to 5
  7922                           ; switch strategies available:
  7923                           ; Name         Instructions Cycles
  7924                           ; simple_byte           13     7 (average)
  7925                           ; direct_byte           19     9 (fixed)
  7926                           ; jumptable            263     9 (fixed)
  7927                           ;	Chosen strategy is simple_byte
  7928  046C  3A01               	xorlw	1	; case 1
  7929  046D  1903               	skipnz
  7930  046E  2C79               	goto	l31041
  7931  046F  3A02               	xorlw	2	; case 3
  7932  0470  1903               	skipnz
  7933  0471  2C9E               	goto	l31063
  7934  0472  3A07               	xorlw	7	; case 4
  7935  0473  1903               	skipnz
  7936  0474  2CC3               	goto	l31085
  7937  0475  3A01               	xorlw	1	; case 5
  7938  0476  1903               	skipnz
  7939  0477  2CE8               	goto	l31107
  7940  0478  2D0D               	goto	l31129
  7941  0479                     l31041:	
  7942                           
  7943                           ;diag.c: 1342: {
  7944                           ;diag.c: 1344: if( wkpoint == ui8_b_DResB0_c )
  7945  0479  2756  3180         	fcall	PL43	;call to abstracted procedure
  7946  047B  1D03               	skipz
  7947  047C  0008               	return
  7948                           
  7949                           ;diag.c: 1346: {
  7950                           ;diag.c: 1348: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7951  047D  084E               	movf	_ui8_b_DResB0_c,w
  7952  047E  0024               	movlb	4	; select bank4
  7953  047F  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7954                           
  7955                           ;diag.c: 1349: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7956  0480  318C  24EB  3180   	fcall	_PWMReadDC
  7957                           
  7958                           ;diag.c: 1350: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7959  0483  26E5  3180         	fcall	PL9	;call to abstracted procedure
  7960  0485  263B  3180         	fcall	___wmul
  7961                           
  7962                           ;diag.c: 1351: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7963  0487  26F4               	fcall	PL10	;call to abstracted procedure
  7964  0488  3180               	movlp	high __stringtab
  7965  0489  000A               	callw
  7966  048A  3180               	pagesel	$
  7967                           
  7968                           ;diag.c: 1356: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7969  048B  26C7  3180         	fcall	PL7	;call to abstracted procedure
  7970  048D  1803               	skipnc
  7971  048E  2C9B               	goto	l31061
  7972  048F  0024               	movlb	4	; select bank4
  7973  0490  26B4  3180         	fcall	PL6	;call to abstracted procedure
  7974  0492  1803               	skipnc
  7975  0493  2C9B               	goto	l31061
  7976                           
  7977                           ;diag.c: 1358: {
  7978                           ;diag.c: 1360: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  7979  0494  303A               	movlw	58
  7980  0495  267D  3180         	fcall	PL2	;call to abstracted procedure
  7981  0497  3010               	movlw	16
  7982  0498  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  7983  0499  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  7984  049A  2DF8               	ljmp	_Transmit_LIN_8Bytes
  7985  049B                     l31061:	
  7986                           ;diag.c: 1363: }
  7987                           
  7988                           
  7989                           ;diag.c: 1366: else
  7990                           ;diag.c: 1367: {
  7991                           ;diag.c: 1369: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7992  049B  26D7  3180         	fcall	PL8	;call to abstracted procedure
  7993  049D  2DF8               	ljmp	_Transmit_LIN_8Bytes
  7994  049E                     l31063:	
  7995                           
  7996                           ;diag.c: 1519: {
  7997                           ;diag.c: 1521: if( wkpoint == ui8_b_DResB0_c )
  7998  049E  2756  3180         	fcall	PL43	;call to abstracted procedure
  7999  04A0  1D03               	skipz
  8000  04A1  0008               	return
  8001                           
  8002                           ;diag.c: 1523: {
  8003                           ;diag.c: 1525: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  8004  04A2  084E               	movf	_ui8_b_DResB0_c,w
  8005  04A3  0024               	movlb	4	; select bank4
  8006  04A4  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  8007                           
  8008                           ;diag.c: 1526: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  8009  04A5  318C  24EB  3180   	fcall	_PWMReadDC
  8010                           
  8011                           ;diag.c: 1527: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  8012  04A8  26E5  3180         	fcall	PL9	;call to abstracted procedure
  8013  04AA  263B  3180         	fcall	___wmul
  8014                           
  8015                           ;diag.c: 1528: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  8016  04AC  26F4               	fcall	PL10	;call to abstracted procedure
  8017  04AD  3180               	movlp	high __stringtab
  8018  04AE  000A               	callw
  8019  04AF  3180               	pagesel	$
  8020                           
  8021                           ;diag.c: 1534: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  8022  04B0  26C7  3180         	fcall	PL7	;call to abstracted procedure
  8023  04B2  1803               	skipnc
  8024  04B3  2CC0               	goto	l31083
  8025  04B4  0024               	movlb	4	; select bank4
  8026  04B5  26B4  3180         	fcall	PL6	;call to abstracted procedure
  8027  04B7  1803               	skipnc
  8028  04B8  2CC0               	goto	l31083
  8029                           
  8030                           ;diag.c: 1536: {
  8031                           ;diag.c: 1538: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  8032                           ;diag.c: 1539: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  8033                           ;diag.c: 1540: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  8034                           ;diag.c: 1541: ui8_b_DResB4_RD,
  8035                           ;diag.c: 1542: ui8_b_DResB5_RD );
  8036  04B9  303A               	movlw	58
  8037  04BA  267D  3180         	fcall	PL2	;call to abstracted procedure
  8038  04BC  3010               	movlw	16
  8039  04BD  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  8040  04BE  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  8041  04BF  2DF8               	ljmp	_Transmit_LIN_8Bytes
  8042  04C0                     l31083:	
  8043                           ;diag.c: 1545: }
  8044                           
  8045                           
  8046                           ;diag.c: 1548: else
  8047                           ;diag.c: 1549: {
  8048                           ;diag.c: 1551: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  8049  04C0  26D7  3180         	fcall	PL8	;call to abstracted procedure
  8050  04C2  2DF8               	ljmp	_Transmit_LIN_8Bytes
  8051  04C3                     l31085:	
  8052                           
  8053                           ;diag.c: 1607: {
  8054                           ;diag.c: 1609: if( wkpoint == ui8_b_DResB0_c )
  8055  04C3  2756  3180         	fcall	PL43	;call to abstracted procedure
  8056  04C5  1D03               	skipz
  8057  04C6  0008               	return
  8058                           
  8059                           ;diag.c: 1611: {
  8060                           ;diag.c: 1613: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  8061  04C7  084E               	movf	_ui8_b_DResB0_c,w
  8062  04C8  0024               	movlb	4	; select bank4
  8063  04C9  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  8064                           
  8065                           ;diag.c: 1614: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  8066  04CA  318C  24EB  3180   	fcall	_PWMReadDC
  8067                           
  8068                           ;diag.c: 1615: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  8069  04CD  26E5  3180         	fcall	PL9	;call to abstracted procedure
  8070  04CF  263B  3180         	fcall	___wmul
  8071                           
  8072                           ;diag.c: 1616: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  8073  04D1  26F4               	fcall	PL10	;call to abstracted procedure
  8074  04D2  3180               	movlp	high __stringtab
  8075  04D3  000A               	callw
  8076  04D4  3180               	pagesel	$
  8077                           
  8078                           ;diag.c: 1622: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  8079  04D5  26C7  3180         	fcall	PL7	;call to abstracted procedure
  8080  04D7  1803               	skipnc
  8081  04D8  2CE5               	goto	l31105
  8082  04D9  0024               	movlb	4	; select bank4
  8083  04DA  26B4  3180         	fcall	PL6	;call to abstracted procedure
  8084  04DC  1803               	skipnc
  8085  04DD  2CE5               	goto	l31105
  8086                           
  8087                           ;diag.c: 1624: {
  8088                           ;diag.c: 1626: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  8089                           ;diag.c: 1627: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  8090                           ;diag.c: 1628: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  8091                           ;diag.c: 1629: ui8_b_DResB4_RD,
  8092                           ;diag.c: 1630: ui8_b_DResB5_RD );
  8093  04DE  303A               	movlw	58
  8094  04DF  267D  3180         	fcall	PL2	;call to abstracted procedure
  8095  04E1  3010               	movlw	16
  8096  04E2  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  8097  04E3  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  8098  04E4  2DF8               	ljmp	_Transmit_LIN_8Bytes
  8099  04E5                     l31105:	
  8100                           ;diag.c: 1633: }
  8101                           
  8102                           
  8103                           ;diag.c: 1636: else
  8104                           ;diag.c: 1637: {
  8105                           ;diag.c: 1639: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  8106  04E5  26D7  3180         	fcall	PL8	;call to abstracted procedure
  8107  04E7  2DF8               	ljmp	_Transmit_LIN_8Bytes
  8108  04E8                     l31107:	
  8109                           
  8110                           ;diag.c: 1693: {
  8111                           ;diag.c: 1695: if( wkpoint == ui8_b_DResB0_c )
  8112  04E8  2756  3180         	fcall	PL43	;call to abstracted procedure
  8113  04EA  1D03               	skipz
  8114  04EB  0008               	return
  8115                           
  8116                           ;diag.c: 1697: {
  8117                           ;diag.c: 1699: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  8118  04EC  084E               	movf	_ui8_b_DResB0_c,w
  8119  04ED  0024               	movlb	4	; select bank4
  8120  04EE  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  8121                           
  8122                           ;diag.c: 1700: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  8123  04EF  318C  24EB  3180   	fcall	_PWMReadDC
  8124                           
  8125                           ;diag.c: 1701: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  8126  04F2  26E5  3180         	fcall	PL9	;call to abstracted procedure
  8127  04F4  263B  3180         	fcall	___wmul
  8128                           
  8129                           ;diag.c: 1702: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  8130  04F6  26F4               	fcall	PL10	;call to abstracted procedure
  8131  04F7  3180               	movlp	high __stringtab
  8132  04F8  000A               	callw
  8133  04F9  3180               	pagesel	$
  8134                           
  8135                           ;diag.c: 1707: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  8136  04FA  26C7  3180         	fcall	PL7	;call to abstracted procedure
  8137  04FC  1803               	skipnc
  8138  04FD  2D0A               	goto	l31127
  8139  04FE  0024               	movlb	4	; select bank4
  8140  04FF  26B4  3180         	fcall	PL6	;call to abstracted procedure
  8141  0501  1803               	skipnc
  8142  0502  2D0A               	goto	l31127
  8143                           
  8144                           ;diag.c: 1709: {
  8145                           ;diag.c: 1711: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  8146                           ;diag.c: 1712: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  8147                           ;diag.c: 1713: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  8148                           ;diag.c: 1714: ui8_b_DResB4_RD,
  8149                           ;diag.c: 1715: ui8_b_DResB5_RD );
  8150  0503  303A               	movlw	58
  8151  0504  267D  3180         	fcall	PL2	;call to abstracted procedure
  8152  0506  3010               	movlw	16
  8153  0507  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  8154  0508  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  8155  0509  2DF8               	ljmp	_Transmit_LIN_8Bytes
  8156  050A                     l31127:	
  8157                           ;diag.c: 1718: }
  8158                           
  8159                           
  8160                           ;diag.c: 1721: else
  8161                           ;diag.c: 1722: {
  8162                           ;diag.c: 1724: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  8163  050A  26D7  3180         	fcall	PL8	;call to abstracted procedure
  8164  050C  2DF8               	ljmp	_Transmit_LIN_8Bytes
  8165  050D                     l31129:	
  8166                           
  8167                           ;diag.c: 1948: {
  8168                           ;diag.c: 1952: NegativeAnswer(ui8_b_DResLocID_c);
  8169  050D  084F               	movf	_ui8_b_DResLocID_c,w
  8170  050E  2F65               	ljmp	_NegativeAnswer
  8171  050F                     l31135:	
  8172                           
  8173                           ;diag.c: 1992: {
  8174                           ;diag.c: 1994: if( 0x9f == ui8_selected_lid )
  8175  050F  0854               	movf	_ui8_selected_lid,w
  8176  0510  3A9F               	xorlw	159
  8177  0511  1D03               	skipz
  8178  0512  0008               	return
  8179                           
  8180                           ;diag.c: 1996: {
  8181                           ;diag.c: 2000: ui8_failure = ui8_b_DResB0_c;
  8182  0513  084E               	movf	_ui8_b_DResB0_c,w
  8183  0514  0022               	movlb	2	; select bank2
  8184  0515  00EE               	movwf	_ui8_failure^(0+256)
  8185                           
  8186                           ;diag.c: 2005: switch (ui8_failure)
  8187  0516  2D44               	goto	l31207
  8188  0517                     l31139:	
  8189                           
  8190                           ;diag.c: 2098: {
  8191                           ;diag.c: 2102: PWM_Write_Out( 55 );
  8192  0517  3037               	movlw	55
  8193  0518  2675  3180         	fcall	_PWM_Write_Out
  8194                           
  8195                           ;diag.c: 2103: ui8_error_Flags.bits.B0 = 0;
  8196  051A  0021               	movlb	1	; select bank1
  8197  051B  3037               	movlw	55
  8198  051C  1065               	bcf	_ui8_error_Flags^(0+128),0
  8199                           
  8200                           ;diag.c: 2104: ui8_error_Flags.bits.B1 = 0;
  8201  051D  10E5               	bcf	_ui8_error_Flags^(0+128),1
  8202                           
  8203                           ;diag.c: 2105: ui8_error_Flags.bits.B7 = 0;
  8204  051E  13E5               	bcf	_ui8_error_Flags^(0+128),7
  8205                           
  8206                           ;diag.c: 2106: ui8_error_Flags.bits.B2 = 0;
  8207  051F  1165               	bcf	_ui8_error_Flags^(0+128),2
  8208                           
  8209                           ;diag.c: 2107: ui8_error_Flags.bits.B3 = 1;
  8210  0520  15E5               	bsf	_ui8_error_Flags^(0+128),3
  8211                           
  8212                           ;diag.c: 2108: ui8_error_Flags.bits.B4 = 0;
  8213  0521  1265               	bcf	_ui8_error_Flags^(0+128),4
  8214                           
  8215                           ;diag.c: 2109: ui8_error_Flags.bits.B6 = 0;
  8216  0522  1365               	bcf	_ui8_error_Flags^(0+128),6
  8217                           
  8218                           ;diag.c: 2110: ui8_error_Flags.bits.B5 = 0;
  8219  0523  12E5               	bcf	_ui8_error_Flags^(0+128),5
  8220                           
  8221                           ;diag.c: 2111: ui8_b_DResB1_RD = 55;
  8222  0524  0024               	movlb	4	; select bank4
  8223  0525  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  8224                           
  8225                           ;diag.c: 2112: ui8_b_DResB0_RD = 8;
  8226  0526  3008               	movlw	8
  8227  0527  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  8228                           
  8229                           ;diag.c: 2113: ui8_failure = 3;
  8230  0528  3003               	movlw	3
  8231  0529  0022               	movlb	2	; select bank2
  8232  052A  00EE               	movwf	_ui8_failure^(0+256)
  8233                           
  8234                           ;diag.c: 2114: break;
  8235  052B  2D4C               	goto	l31209
  8236  052C                     l31163:	
  8237                           
  8238                           ;diag.c: 2151: {
  8239                           ;diag.c: 2155: PWM_Write_Out( 77 );
  8240  052C  304D               	movlw	77
  8241  052D  2675  3180         	fcall	_PWM_Write_Out
  8242                           
  8243                           ;diag.c: 2156: ui8_error_Flags.bits.B0 = 0;
  8244  052F  0021               	movlb	1	; select bank1
  8245  0530  304D               	movlw	77
  8246                           
  8247                           ;diag.c: 2157: ui8_error_Flags.bits.B1 = 0;
  8248                           
  8249                           ;diag.c: 2158: ui8_error_Flags.bits.B7 = 0;
  8250                           
  8251                           ;diag.c: 2159: ui8_error_Flags.bits.B2 = 0;
  8252                           
  8253                           ;diag.c: 2160: ui8_error_Flags.bits.B3 = 0;
  8254                           
  8255                           ;diag.c: 2161: ui8_error_Flags.bits.B4 = 0;
  8256                           
  8257                           ;diag.c: 2162: ui8_error_Flags.bits.B6 = 0;
  8258  0531  2740  3180         	fcall	PL32	;call to abstracted procedure
  8259                           
  8260                           ;diag.c: 2163: ui8_error_Flags.bits.B5 = 1;
  8261  0533  16E5               	bsf	_ui8_error_Flags^(0+128),5
  8262                           
  8263                           ;diag.c: 2165: ui8_b_DResB1_RD = 77;
  8264  0534  0024               	movlb	4	; select bank4
  8265  0535  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  8266                           
  8267                           ;diag.c: 2166: ui8_b_DResB0_RD= 1;
  8268  0536  01B4               	clrf	EOL@ui8_b_DResB0_RD^(0+512)
  8269  0537  0AB4               	incf	EOL@ui8_b_DResB0_RD^(0+512),f
  8270                           
  8271                           ;diag.c: 2167: ui8_failure = 1;
  8272  0538  0022               	movlb	2	; select bank2
  8273  0539  01EE               	clrf	_ui8_failure^(0+256)
  8274  053A  0AEE               	incf	_ui8_failure^(0+256),f
  8275                           
  8276                           ;diag.c: 2168: break;
  8277  053B  2D4C               	goto	l31209
  8278  053C                     l31187:	
  8279                           
  8280                           ;diag.c: 2205: {
  8281                           ;diag.c: 2209: PWM_Write_Out( 11 );
  8282  053C  300B               	movlw	11
  8283  053D  2675  3180         	fcall	_PWM_Write_Out
  8284                           
  8285                           ;diag.c: 2210: ui8_error_Flags.bits.B0 = 0;
  8286  053F  0021               	movlb	1	; select bank1
  8287                           
  8288                           ;diag.c: 2211: ui8_error_Flags.bits.B1 = 0;
  8289                           
  8290                           ;diag.c: 2212: ui8_error_Flags.bits.B7 = 0;
  8291                           
  8292                           ;diag.c: 2213: ui8_error_Flags.bits.B2 = 0;
  8293                           
  8294                           ;diag.c: 2214: ui8_error_Flags.bits.B3 = 0;
  8295                           
  8296                           ;diag.c: 2215: ui8_error_Flags.bits.B4 = 0;
  8297                           
  8298                           ;diag.c: 2216: ui8_error_Flags.bits.B6 = 0;
  8299  0540  2740  3180         	fcall	PL32	;call to abstracted procedure
  8300                           
  8301                           ;diag.c: 2217: ui8_error_Flags.bits.B5 = 0;
  8302  0542  12E5               	bcf	_ui8_error_Flags^(0+128),5
  8303                           
  8304                           ;diag.c: 2218: break;
  8305  0543  2D4C               	goto	l31209
  8306  0544                     l31207:	
  8307  0544  086E               	movf	_ui8_failure^(0+256),w
  8308                           
  8309                           ; Switch size 1, requested type "space"
  8310                           ; Number of cases is 2, Range of values is 2 to 4
  8311                           ; switch strategies available:
  8312                           ; Name         Instructions Cycles
  8313                           ; simple_byte            7     4 (average)
  8314                           ; direct_byte           15     9 (fixed)
  8315                           ; jumptable            263     9 (fixed)
  8316                           ;	Chosen strategy is simple_byte
  8317  0545  3A02               	xorlw	2	; case 2
  8318  0546  1903               	skipnz
  8319  0547  2D2C               	goto	l31163
  8320  0548  3A06               	xorlw	6	; case 4
  8321  0549  1903               	skipnz
  8322  054A  2D17               	goto	l31139
  8323  054B  2D3C               	goto	l31187
  8324  054C                     l31209:	
  8325                           
  8326                           ;diag.c: 2232: ui8_b_DResB3_RD = 0;
  8327  054C  0024               	movlb	4	; select bank4
  8328  054D  303A               	movlw	58
  8329  054E  01B7               	clrf	EOL@ui8_b_DResB3_RD^(0+512)
  8330                           
  8331                           ;diag.c: 2233: ui8_b_DResB4_RD = 0;
  8332  054F  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
  8333                           
  8334                           ;diag.c: 2234: ui8_b_DResB5_RD = 0;
  8335  0550  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
  8336                           
  8337                           ;diag.c: 2237: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  8338                           ;diag.c: 2238: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  8339                           ;diag.c: 2239: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  8340                           ;diag.c: 2240: ui8_b_DResB5_RD );
  8341  0551  0020               	movlb	0	; select bank0
  8342  0552  00B7               	movwf	?_Transmit_LIN_8Bytes
  8343  0553  26A9  3180         	fcall	PL4	;call to abstracted procedure
  8344  0555  0024               	movlb	4	; select bank4
  8345  0556  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  8346  0557  0020               	movlb	0	; select bank0
  8347  0558  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  8348  0559  3010               	movlw	16
  8349  055A  275B  3180         	fcall	PL46	;call to abstracted procedure
  8350  055C  2DF8               	ljmp	_Transmit_LIN_8Bytes
  8351  055D                     l31213:	
  8352                           ;diag.c: 2243: }
  8353                           
  8354                           
  8355                           ;diag.c: 2271: {
  8356                           ;diag.c: 2273: if( 0xa0 == ui8_selected_lid )
  8357  055D  0854               	movf	_ui8_selected_lid,w
  8358  055E  3AA0               	xorlw	160
  8359  055F  1D03               	skipz
  8360  0560  0008               	return
  8361                           
  8362                           ;diag.c: 2275: {
  8363                           ;diag.c: 2285: write_eeprom_data( 0xf4, ui8_b_DResB0_c );
  8364  0561  084E               	movf	_ui8_b_DResB0_c,w
  8365  0562  00B3               	movwf	?_write_eeprom_data
  8366  0563  30F4               	movlw	244
  8367  0564  25E0  3180         	fcall	_write_eeprom_data
  8368                           
  8369                           ;diag.c: 2286: write_eeprom_data( 0xf5, ui8_b_DResB1_c );
  8370  0566  0022               	movlb	2	; select bank2
  8371  0567  085A               	movf	_ui8_b_DResB1_c^(0+256),w
  8372  0568  0020               	movlb	0	; select bank0
  8373  0569  00B3               	movwf	?_write_eeprom_data
  8374  056A  30F5               	movlw	245
  8375  056B  25E0  3180         	fcall	_write_eeprom_data
  8376                           
  8377                           ;diag.c: 2287: write_eeprom_data( 0xf6, ui8_b_DResB2_c );
  8378  056D  0022               	movlb	2	; select bank2
  8379  056E  085B               	movf	_ui8_b_DResB2_c^(0+256),w
  8380  056F  0020               	movlb	0	; select bank0
  8381  0570  00B3               	movwf	?_write_eeprom_data
  8382  0571  30F6               	movlw	246
  8383  0572  25E0  3180         	fcall	_write_eeprom_data
  8384                           
  8385                           ;diag.c: 2288: write_eeprom_data( 0xf7, ui8_b_DResB3_c );
  8386  0574  0022               	movlb	2	; select bank2
  8387  0575  085C               	movf	_ui8_b_DResB3_c^(0+256),w
  8388  0576  0020               	movlb	0	; select bank0
  8389  0577  00B3               	movwf	?_write_eeprom_data
  8390  0578  30F7               	movlw	247
  8391  0579  25E0  3180         	fcall	_write_eeprom_data
  8392                           
  8393                           ;diag.c: 2289: write_eeprom_data( 0xf8, ui8_b_DResB4_c );
  8394  057B  0022               	movlb	2	; select bank2
  8395  057C  085D               	movf	_ui8_b_DResB4_c^(0+256),w
  8396  057D  0020               	movlb	0	; select bank0
  8397  057E  00B3               	movwf	?_write_eeprom_data
  8398  057F  30F8               	movlw	248
  8399  0580  25E0  3180         	fcall	_write_eeprom_data
  8400                           
  8401                           ;diag.c: 2301: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
  8402  0582  30F4               	movlw	244
  8403  0583  25D5  3180         	fcall	_read_eeprom_data
  8404  0585  0024               	movlb	4	; select bank4
  8405  0586  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  8406                           
  8407                           ;diag.c: 2302: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
  8408  0587  30F5               	movlw	245
  8409  0588  25D5  3180         	fcall	_read_eeprom_data
  8410  058A  0024               	movlb	4	; select bank4
  8411  058B  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  8412                           
  8413                           ;diag.c: 2303: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
  8414  058C  30F6               	movlw	246
  8415  058D  25D5  3180         	fcall	_read_eeprom_data
  8416  058F  0024               	movlb	4	; select bank4
  8417  0590  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  8418                           
  8419                           ;diag.c: 2304: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
  8420  0591  30F7               	movlw	247
  8421  0592  25D5  3180         	fcall	_read_eeprom_data
  8422  0594  0024               	movlb	4	; select bank4
  8423  0595  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  8424                           
  8425                           ;diag.c: 2305: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
  8426  0596  30F8               	movlw	248
  8427  0597  25D5  3180         	fcall	_read_eeprom_data
  8428                           
  8429                           ;diag.c: 2309: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DRes
      +                          B2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF))
  8430  0599  2760  3180         	fcall	PL50	;call to abstracted procedure
  8431  059B  1903               	skipnz
  8432  059C  2DB3               	goto	l31241
  8433  059D  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  8434  059E  3AFF               	xorlw	255
  8435  059F  1903               	skipnz
  8436  05A0  2DB3               	goto	l31241
  8437  05A1  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  8438  05A2  3AFF               	xorlw	255
  8439  05A3  1903               	skipnz
  8440  05A4  2DB3               	goto	l31241
  8441  05A5  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  8442  05A6  3AFF               	xorlw	255
  8443  05A7  1903               	skipnz
  8444  05A8  2DB3               	goto	l31241
  8445  05A9  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  8446  05AA  3AFF               	xorlw	255
  8447  05AB  1903               	skipnz
  8448  05AC  2DB3               	goto	l31241
  8449                           
  8450                           ;diag.c: 2311: {
  8451                           ;diag.c: 2313: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  8452  05AD  303A               	movlw	58
  8453  05AE  267D  3180         	fcall	PL2	;call to abstracted procedure
  8454  05B0  270B  3180         	fcall	PL19	;call to abstracted procedure
  8455  05B2  2DB9               	goto	L5
  8456  05B3                     l31241:	
  8457                           ;diag.c: 2316: }
  8458                           
  8459                           
  8460                           ;diag.c: 2319: else
  8461                           ;diag.c: 2320: {
  8462                           ;diag.c: 2322: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF,0xFF
      +                          , 0xFF, 0xFF );
  8463  05B3  307F               	movlw	127
  8464  05B4  0020               	movlb	0	; select bank0
  8465  05B5  00B7               	movwf	?_Transmit_LIN_8Bytes
  8466  05B6  084F               	movf	_ui8_b_DResLocID_c,w
  8467  05B7  2702  3180         	fcall	PL11	;call to abstracted procedure
  8468  05B9                     L5:	
  8469  05B9  25F8               	fcall	_Transmit_LIN_8Bytes
  8470                           
  8471                           ;diag.c: 2332: }
  8472                           ;diag.c: 2336: ui8_selected_lid = 0xfa;
  8473  05BA  30FA               	movlw	250
  8474  05BB  0020               	movlb	0	; select bank0
  8475  05BC  00D4               	movwf	_ui8_selected_lid
  8476                           
  8477                           ;diag.c: 2339: }
  8478  05BD  0008               	return
  8479  05BE                     l31245:	
  8480                           
  8481                           ;diag.c: 2365: {
  8482                           ;diag.c: 2367: if( 0xfa == ui8_selected_lid )
  8483  05BE  0854               	movf	_ui8_selected_lid,w
  8484  05BF  3AFA               	xorlw	250
  8485  05C0  1D03               	skipz
  8486  05C1  0008               	return
  8487                           
  8488                           ;diag.c: 2369: {
  8489                           ;diag.c: 2371: Transmit_LIN_8Bytes( 0x10, 0x3a, ui8_b_DResLocID_c, 0x00, 0x00, 0x00, 0x0
      +                          0, 0x00, 0x00 );
  8490  05C2  303A               	movlw	58
  8491  05C3  00B7               	movwf	?_Transmit_LIN_8Bytes
  8492  05C4  084F               	movf	_ui8_b_DResLocID_c,w
  8493  05C5  2737  3180         	fcall	PL30	;call to abstracted procedure
  8494  05C7  25F8  3180         	fcall	_Transmit_LIN_8Bytes
  8495                           
  8496                           ;diag.c: 2372: write_eeprom_data(0x55,0x55);
  8497  05C9  3055               	movlw	85
  8498  05CA  0020               	movlb	0	; select bank0
  8499  05CB  00B3               	movwf	?_write_eeprom_data
  8500  05CC  25E0               	fcall	_write_eeprom_data
  8501                           
  8502                           ;diag.c: 2373: RC5 = 0;
  8503  05CD  0020               	movlb	0	; select bank0
  8504  05CE  128E               	bcf	14,5
  8505                           
  8506                           ;diag.c: 2375: }
  8507  05CF  0008               	return
  8508  05D0                     l31253:	
  8509                           
  8510                           ;diag.c: 2399: {
  8511                           ;diag.c: 2405: NegativeAnswer(ui8_selected_lid);
  8512  05D0  0854               	movf	_ui8_selected_lid,w
  8513  05D1  2F65               	ljmp	_NegativeAnswer
  8514  05D2                     l31259:	
  8515                           
  8516                           ;diag.c: 2417: else
  8517                           ;diag.c: 2418: {
  8518                           ;diag.c: 2424: NegativeAnswer(ui8_selected_lid);
  8519  05D2  0020               	movlb	0	; select bank0
  8520  05D3  0854               	movf	_ui8_selected_lid,w
  8521  05D4  2F65               	ljmp	_NegativeAnswer
  8522  05D5                     __end_of_EOL:	
  8523  05D5                     __ptext2069:	
  8524 ;; =============== function _write_eeprom_data ends ============
  8525                           
  8526                           
  8527 ;; *************** function _read_eeprom_data *****************
  8528 ;; Defined at:
  8529 ;;		line 54 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\eeprom.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  ui8_adress      1    wreg     unsigned char 
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;  ui8_adress      1   12[BANK0 ] unsigned char 
  8534 ;;  ui8_adress_d    1   13[BANK0 ] unsigned char 
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  1    wreg      unsigned char 
  8537 ;; Registers used:
  8538 ;;		wreg
  8539 ;; Tracked objects:
  8540 ;;		On entry : 18/2
  8541 ;;		On exit  : 1F/0
  8542 ;;		Unchanged: FFFE0/0
  8543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8544 ;;      Params:         0       0       0       0       0       0       0       0
  8545 ;;      Locals:         0       2       0       0       0       0       0       0
  8546 ;;      Temps:          0       0       0       0       0       0       0       0
  8547 ;;      Totals:         0       2       0       0       0       0       0       0
  8548 ;;Total ram usage:        2 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    4
  8551 ;; This function calls:
  8552 ;;		Nothing
  8553 ;; This function is called by:
  8554 ;;		_EOL
  8555 ;;		_I_calibrationInit
  8556 ;;		_init_ports
  8557 ;;		_main
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560  05D5                     _read_eeprom_data:	
  8561                           
  8562                           ; Regs used in _read_eeprom_data: [wreg]
  8563                           ;read_eeprom_data@ui8_adress stored from wreg
  8564  05D5  0020               	movlb	0	; select bank0
  8565  05D6  00AC               	movwf	read_eeprom_data@ui8_adress
  8566                           
  8567                           ;eeprom.c: 56: unsigned char ui8_adress_data;
  8568                           ;eeprom.c: 58: EEADRL = ui8_adress;
  8569  05D7  0023               	movlb	3	; select bank3
  8570  05D8  0091               	movwf	17	;volatile
  8571                           
  8572                           ;eeprom.c: 59: EEPGD = 0;
  8573  05D9  1395               	bcf	21,7
  8574                           
  8575                           ;eeprom.c: 60: CFGS = 0;
  8576  05DA  1315               	bcf	21,6
  8577                           
  8578                           ;eeprom.c: 61: RD = 1;
  8579  05DB  1415               	bsf	21,0
  8580                           
  8581                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  8582  05DC  0813               	movf	19,w	;volatile
  8583  05DD  0020               	movlb	0	; select bank0
  8584  05DE  00AD               	movwf	read_eeprom_data@ui8_adress_data
  8585                           
  8586                           ;eeprom.c: 64: return ui8_adress_data;
  8587  05DF  0008               	return
  8588  05E0                     __end_of_read_eeprom_data:	
  8589  05E0                     __ptext2068:	
  8590 ;; =============== function __ELINMIntGetPointer ends ============
  8591                           
  8592                           
  8593 ;; *************** function _write_eeprom_data *****************
  8594 ;; Defined at:
  8595 ;;		line 86 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\eeprom.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;  ui8_adress      1    wreg     unsigned char 
  8598 ;;  ui8_adress_d    1   19[BANK0 ] unsigned char 
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;  ui8_adress      1   20[BANK0 ] unsigned char 
  8601 ;; Return value:  Size  Location     Type
  8602 ;;		None               void
  8603 ;; Registers used:
  8604 ;;		wreg
  8605 ;; Tracked objects:
  8606 ;;		On entry : 1F/0
  8607 ;;		On exit  : 1F/3
  8608 ;;		Unchanged: FFE00/0
  8609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8610 ;;      Params:         0       1       0       0       0       0       0       0
  8611 ;;      Locals:         0       1       0       0       0       0       0       0
  8612 ;;      Temps:          0       0       0       0       0       0       0       0
  8613 ;;      Totals:         0       2       0       0       0       0       0       0
  8614 ;;Total ram usage:        2 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    4
  8617 ;; This function calls:
  8618 ;;		Nothing
  8619 ;; This function is called by:
  8620 ;;		_EOL
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623  05E0                     _write_eeprom_data:	
  8624                           
  8625                           ; Regs used in _write_eeprom_data: [wreg]
  8626                           ;write_eeprom_data@ui8_adress stored from wreg
  8627  05E0  00B4               	movwf	write_eeprom_data@ui8_adress
  8628                           
  8629                           ;eeprom.c: 89: EEADRL = ui8_adress;
  8630  05E1  0023               	movlb	3	; select bank3
  8631  05E2  0091               	movwf	17	;volatile
  8632                           
  8633                           ;eeprom.c: 90: EEDATL = ui8_adress_data;
  8634  05E3  0020               	movlb	0	; select bank0
  8635  05E4  0833               	movf	write_eeprom_data@ui8_adress_data,w
  8636  05E5  0023               	movlb	3	; select bank3
  8637  05E6  0093               	movwf	19	;volatile
  8638  05E7  3055               	movlw	85
  8639                           
  8640                           ;eeprom.c: 91: CFGS = 0;
  8641  05E8  1315               	bcf	21,6
  8642                           
  8643                           ;eeprom.c: 92: EEPGD = 0;
  8644  05E9  1395               	bcf	21,7
  8645                           
  8646                           ;eeprom.c: 93: WREN = 1;
  8647  05EA  1515               	bsf	21,2
  8648  05EB  138B               	bcf	11,7
  8649                           
  8650                           ;eeprom.c: 96: EECON2 = 0x55;
  8651  05EC  0096               	movwf	22	;volatile
  8652                           
  8653                           ;eeprom.c: 97: EECON2 = 0xAA;
  8654  05ED  30AA               	movlw	170
  8655  05EE  0096               	movwf	22	;volatile
  8656                           
  8657                           ;eeprom.c: 98: WR = 1;
  8658  05EF  1495               	bsf	21,1
  8659                           
  8660                           ;eeprom.c: 99: GIE = 1;
  8661  05F0  178B               	bsf	11,7
  8662                           
  8663                           ;eeprom.c: 100: WREN = 0;
  8664  05F1  1115               	bcf	21,2
  8665  05F2                     l9641:	
  8666                           ;eeprom.c: 103: while( WR )
  8667                           
  8668  05F2  0023               	movlb	3	; select bank3
  8669  05F3  1C95               	btfss	21,1
  8670  05F4  0008               	return
  8671  05F5  0000               	nop	;#
  8672  05F6  0000               	nop	;#
  8673  05F7  2DF2               	goto	l9641
  8674  05F8                     __end_of_write_eeprom_data:	
  8675  05F8                     __ptext2036:	
  8676 ;; =============== function __ELINMIntReceiveMessage ends ============
  8677                           
  8678                           
  8679 ;; *************** function _Transmit_LIN_8Bytes *****************
  8680 ;; Defined at:
  8681 ;;		line 171 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;  ID              1    wreg     unsigned char 
  8684 ;;  B0              1   23[BANK0 ] unsigned char 
  8685 ;;  B1              1   24[BANK0 ] unsigned char 
  8686 ;;  B2              1   25[BANK0 ] unsigned char 
  8687 ;;  B3              1   26[BANK0 ] unsigned char 
  8688 ;;  B4              1   27[BANK0 ] unsigned char 
  8689 ;;  B5              1   28[BANK0 ] unsigned char 
  8690 ;;  B6              1   29[BANK0 ] unsigned char 
  8691 ;;  B7              1   30[BANK0 ] unsigned char 
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;  ID              1   31[BANK0 ] unsigned char 
  8694 ;; Return value:  Size  Location     Type
  8695 ;;		None               void
  8696 ;; Registers used:
  8697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8698 ;; Tracked objects:
  8699 ;;		On entry : 1F/0
  8700 ;;		On exit  : 1F/1
  8701 ;;		Unchanged: FFFE0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8703 ;;      Params:         0       8       0       0       0       0       0       0
  8704 ;;      Locals:         0       1       0       0       0       0       0       0
  8705 ;;      Temps:          0       0       0       0       0       0       0       0
  8706 ;;      Totals:         0       9       0       0       0       0       0       0
  8707 ;;Total ram usage:        9 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:    6
  8710 ;; This function calls:
  8711 ;;		__ELINMIntGetPointer
  8712 ;;		__ELINMIntSendMessage
  8713 ;; This function is called by:
  8714 ;;		_EOL
  8715 ;;		_NegativeAnswer
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718  05F8                     _Transmit_LIN_8Bytes:	
  8719                           
  8720                           ; Regs used in _Transmit_LIN_8Bytes: [wreg+fsr1l-status,0+pclath+cstack]
  8721                           ;Transmit_LIN_8Bytes@ID stored from wreg
  8722  05F8  00BF               	movwf	Transmit_LIN_8Bytes@ID
  8723  05F9                     l13355:	
  8724                           ;lin.c: 179: {
  8725                           ;lin.c: 180: ;
  8726                           
  8727  05F9  1DCC               	btfss	__ELINMIntStatus,3
  8728  05FA  2DF9               	goto	l13355
  8729                           
  8730                           ;lin.c: 181: }
  8731                           ;lin.c: 182: pt = _ELINMIntGetPointer ( 5, 2 );
  8732  05FB  3002               	movlw	2
  8733  05FC  00AC               	movwf	?__ELINMIntGetPointer
  8734  05FD  3005               	movlw	5
  8735  05FE  267A  3180         	fcall	__ELINMIntGetPointer
  8736  0600  00CD               	movwf	_pt
  8737                           
  8738                           ;lin.c: 183: *pt++ = B0;
  8739  0601  0086               	movwf	6
  8740  0602  3002               	movlw	2	; select bank4/5
  8741  0603  0087               	movwf	7
  8742  0604  0837               	movf	Transmit_LIN_8Bytes@B0,w
  8743  0605  0081               	movwf	1
  8744  0606  0ACD               	incf	_pt,f
  8745                           
  8746                           ;lin.c: 184: *pt++ = B1;
  8747  0607  084D               	movf	_pt,w
  8748  0608  0086               	movwf	6
  8749  0609  0838               	movf	Transmit_LIN_8Bytes@B1,w
  8750  060A  0081               	movwf	1
  8751  060B  0ACD               	incf	_pt,f
  8752                           
  8753                           ;lin.c: 185: *pt++ = B2;
  8754  060C  084D               	movf	_pt,w
  8755  060D  0086               	movwf	6
  8756  060E  0839               	movf	Transmit_LIN_8Bytes@B2,w
  8757  060F  0081               	movwf	1
  8758  0610  0ACD               	incf	_pt,f
  8759                           
  8760                           ;lin.c: 186: *pt++ = B3;
  8761  0611  084D               	movf	_pt,w
  8762  0612  0086               	movwf	6
  8763  0613  083A               	movf	Transmit_LIN_8Bytes@B3,w
  8764  0614  0081               	movwf	1
  8765  0615  0ACD               	incf	_pt,f
  8766                           
  8767                           ;lin.c: 187: *pt++ = B4;
  8768  0616  084D               	movf	_pt,w
  8769  0617  0086               	movwf	6
  8770  0618  083B               	movf	Transmit_LIN_8Bytes@B4,w
  8771  0619  0081               	movwf	1
  8772  061A  0ACD               	incf	_pt,f
  8773                           
  8774                           ;lin.c: 188: *pt++ = B5;
  8775  061B  084D               	movf	_pt,w
  8776  061C  0086               	movwf	6
  8777  061D  083C               	movf	Transmit_LIN_8Bytes@B5,w
  8778  061E  0081               	movwf	1
  8779  061F  0ACD               	incf	_pt,f
  8780                           
  8781                           ;lin.c: 189: *pt++ = B6;
  8782  0620  084D               	movf	_pt,w
  8783  0621  0086               	movwf	6
  8784  0622  083D               	movf	Transmit_LIN_8Bytes@B6,w
  8785  0623  0081               	movwf	1
  8786  0624  0ACD               	incf	_pt,f
  8787                           
  8788                           ;lin.c: 190: *pt++ = B7;
  8789  0625  084D               	movf	_pt,w
  8790  0626  0086               	movwf	6
  8791  0627  083E               	movf	Transmit_LIN_8Bytes@B7,w
  8792  0628  0081               	movwf	1
  8793  0629  3008               	movlw	8
  8794  062A  0ACD               	incf	_pt,f
  8795                           
  8796                           ;lin.c: 192: _ELINMIntSendMessage ( ID, 8, ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) * ( 100L * 
      +                          1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) + 1L ) * 
      +                          14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  8797  062B  00AD               	movwf	?__ELINMIntSendMessage
  8798  062C  3055               	movlw	85
  8799  062D  00AE               	movwf	?__ELINMIntSendMessage+1
  8800  062E  3077               	movlw	119
  8801  062F  01AF               	clrf	?__ELINMIntSendMessage+2
  8802  0630  00B0               	movwf	?__ELINMIntSendMessage+3
  8803  0631  01B1               	clrf	?__ELINMIntSendMessage+4
  8804  0632  083F               	movf	Transmit_LIN_8Bytes@ID,w
  8805  0633  318E  263E         	fcall	__ELINMIntSendMessage
  8806                           
  8807                           ;lin.c: 193: if( ( ErrorCode = ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  8808  0635  084C               	movf	__ELINMIntStatus,w
  8809  0636  0021               	movlb	1	; select bank1
  8810  0637  00CA               	movwf	_ErrorCode^(0+128)
  8811  0638  30F0               	movlw	240
  8812  0639  05CA               	andwf	_ErrorCode^(0+128),f
  8813  063A  0008               	return
  8814  063B                     __end_of_Transmit_LIN_8Bytes:	
  8815  063B                     __ptext2056:	
  8816 ;; =============== function ___lwdiv ends ============
  8817                           
  8818                           
  8819 ;; *************** function ___wmul *****************
  8820 ;; Defined at:
  8821 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\wmul.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;  multiplier      2   12[BANK0 ] unsigned int 
  8824 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  8825 ;; Auto vars:     Size  Location     Type
  8826 ;;  product         2   16[BANK0 ] unsigned int 
  8827 ;; Return value:  Size  Location     Type
  8828 ;;                  2   12[BANK0 ] unsigned int 
  8829 ;; Registers used:
  8830 ;;		wreg, status,2, status,0
  8831 ;; Tracked objects:
  8832 ;;		On entry : 1F/0
  8833 ;;		On exit  : 1F/0
  8834 ;;		Unchanged: FFFE0/0
  8835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8836 ;;      Params:         0       4       0       0       0       0       0       0
  8837 ;;      Locals:         0       2       0       0       0       0       0       0
  8838 ;;      Temps:          0       0       0       0       0       0       0       0
  8839 ;;      Totals:         0       6       0       0       0       0       0       0
  8840 ;;Total ram usage:        6 bytes
  8841 ;; Hardware stack levels used:    1
  8842 ;; Hardware stack levels required when called:    4
  8843 ;; This function calls:
  8844 ;;		Nothing
  8845 ;; This function is called by:
  8846 ;;		_commutate
  8847 ;;		_EOL
  8848 ;;		_main
  8849 ;;		_BVH2_Appl_Layer
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852  063B                     ___wmul:	
  8853                           
  8854                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8855  063B  01B0               	clrf	___wmul@product
  8856  063C  01B1               	clrf	___wmul@product+1
  8857  063D                     l28873:	
  8858  063D  1C2C               	btfss	___wmul@multiplier,0
  8859  063E  2E43               	goto	l28877
  8860  063F  082E               	movf	___wmul@multiplicand,w
  8861  0640  07B0               	addwf	___wmul@product,f
  8862  0641  082F               	movf	___wmul@multiplicand+1,w
  8863  0642  3DB1               	addwfc	___wmul@product+1,f
  8864  0643                     l28877:	
  8865  0643  35AE               	lslf	___wmul@multiplicand,f
  8866  0644  0DAF               	rlf	___wmul@multiplicand+1,f
  8867  0645  36AD               	lsrf	___wmul@multiplier+1,f
  8868  0646  0CAC               	rrf	___wmul@multiplier,f
  8869  0647  082D               	movf	___wmul@multiplier+1,w
  8870  0648  042C               	iorwf	___wmul@multiplier,w
  8871  0649  1D03               	skipz
  8872  064A  2E3D               	goto	l28873
  8873  064B  0831               	movf	___wmul@product+1,w
  8874  064C  00AD               	movwf	?___wmul+1
  8875  064D  0830               	movf	___wmul@product,w
  8876  064E  00AC               	movwf	?___wmul
  8877  064F  0008               	return
  8878  0650                     __end_of___wmul:	
  8879  0650                     __ptext2055:	
  8880 ;; =============== function ___lmul ends ============
  8881                           
  8882                           
  8883 ;; *************** function ___lwdiv *****************
  8884 ;; Defined at:
  8885 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\lwdiv.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;  divisor         2   12[BANK0 ] unsigned int 
  8888 ;;  dividend        2   14[BANK0 ] unsigned int 
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;  quotient        2   17[BANK0 ] unsigned int 
  8891 ;;  counter         1   16[BANK0 ] unsigned char 
  8892 ;; Return value:  Size  Location     Type
  8893 ;;                  2   12[BANK0 ] unsigned int 
  8894 ;; Registers used:
  8895 ;;		wreg, status,2, status,0
  8896 ;; Tracked objects:
  8897 ;;		On entry : 1F/0
  8898 ;;		On exit  : 1F/0
  8899 ;;		Unchanged: FFFE0/0
  8900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8901 ;;      Params:         0       4       0       0       0       0       0       0
  8902 ;;      Locals:         0       3       0       0       0       0       0       0
  8903 ;;      Temps:          0       0       0       0       0       0       0       0
  8904 ;;      Totals:         0       7       0       0       0       0       0       0
  8905 ;;Total ram usage:        7 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    4
  8908 ;; This function calls:
  8909 ;;		Nothing
  8910 ;; This function is called by:
  8911 ;;		_EOL
  8912 ;; This function uses a non-reentrant model
  8913 ;;
  8914  0650                     ___lwdiv:	
  8915                           
  8916                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8917  0650  01B1               	clrf	___lwdiv@quotient
  8918  0651  01B2               	clrf	___lwdiv@quotient+1
  8919  0652  082D               	movf	___lwdiv@divisor+1,w
  8920  0653  042C               	iorwf	___lwdiv@divisor,w
  8921  0654  1903               	skipnz
  8922  0655  2E70               	goto	l28909
  8923  0656  01B0               	clrf	___lwdiv@counter
  8924  0657                     L42:	
  8925  0657  0AB0               	incf	___lwdiv@counter,f
  8926  0658  1BAD               	btfsc	___lwdiv@divisor+1,7
  8927  0659  2E5D               	goto	l28897
  8928  065A  35AC               	lslf	___lwdiv@divisor,f
  8929  065B  0DAD               	rlf	___lwdiv@divisor+1,f
  8930  065C  2E57               	goto	L42
  8931  065D                     l28897:	
  8932  065D  35B1               	lslf	___lwdiv@quotient,f
  8933  065E  0DB2               	rlf	___lwdiv@quotient+1,f
  8934  065F  082D               	movf	___lwdiv@divisor+1,w
  8935  0660  022F               	subwf	___lwdiv@dividend+1,w
  8936  0661  1D03               	skipz
  8937  0662  2E65               	goto	u9025
  8938  0663  082C               	movf	___lwdiv@divisor,w
  8939  0664  022E               	subwf	___lwdiv@dividend,w
  8940  0665                     u9025:	
  8941  0665  1C03               	skipc
  8942  0666  2E6C               	goto	l28905
  8943  0667  082C               	movf	___lwdiv@divisor,w
  8944  0668  02AE               	subwf	___lwdiv@dividend,f
  8945  0669  082D               	movf	___lwdiv@divisor+1,w
  8946  066A  3BAF               	subwfb	___lwdiv@dividend+1,f
  8947  066B  1431               	bsf	___lwdiv@quotient,0
  8948  066C                     l28905:	
  8949  066C  36AD               	lsrf	___lwdiv@divisor+1,f
  8950  066D  0CAC               	rrf	___lwdiv@divisor,f
  8951  066E  0BB0               	decfsz	___lwdiv@counter,f
  8952  066F  2E5D               	goto	l28897
  8953  0670                     l28909:	
  8954  0670  0832               	movf	___lwdiv@quotient+1,w
  8955  0671  00AD               	movwf	?___lwdiv+1
  8956  0672  0831               	movf	___lwdiv@quotient,w
  8957  0673  00AC               	movwf	?___lwdiv
  8958  0674  0008               	return
  8959  0675                     __end_of___lwdiv:	
  8960  0675                     __ptext2070:	
  8961 ;; =============== function _read_eeprom_data ends ============
  8962                           
  8963                           
  8964 ;; *************** function _PWM_Write_Out *****************
  8965 ;; Defined at:
  8966 ;;		line 342 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\pwm.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  ui8_DutyCycl    1    wreg     unsigned char 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  ui8_DutyCycl    1   12[BANK0 ] unsigned char 
  8971 ;; Return value:  Size  Location     Type
  8972 ;;		None               void
  8973 ;; Registers used:
  8974 ;;		wreg
  8975 ;; Tracked objects:
  8976 ;;		On entry : 1C/2
  8977 ;;		On exit  : 1F/2
  8978 ;;		Unchanged: FFFE0/0
  8979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8980 ;;      Params:         0       0       0       0       0       0       0       0
  8981 ;;      Locals:         0       1       0       0       0       0       0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0       0
  8983 ;;      Totals:         0       1       0       0       0       0       0       0
  8984 ;;Total ram usage:        1 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    4
  8987 ;; This function calls:
  8988 ;;		Nothing
  8989 ;; This function is called by:
  8990 ;;		_DiagInit
  8991 ;;		_SetDiagAlarm
  8992 ;;		_EOL
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995  0675                     _PWM_Write_Out:	
  8996                           
  8997                           ; Regs used in _PWM_Write_Out: [wreg]
  8998                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
  8999  0675  0020               	movlb	0	; select bank0
  9000  0676  00AC               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
  9001                           
  9002                           ;pwm.c: 344: ui8_PWMoutvalue = ui8_DutyCycle_Out;
  9003  0677  0022               	movlb	2	; select bank2
  9004  0678  00D5               	movwf	_ui8_PWMoutvalue^(0+256)
  9005  0679  0008               	return
  9006  067A                     __end_of_PWM_Write_Out:	
  9007  067A                     __ptext2067:	
  9008 ;; =============== function _EnableMCP201 ends ============
  9009                           
  9010                           
  9011 ;; *************** function __ELINMIntGetPointer *****************
  9012 ;; Defined at:
  9013 ;;		line 1379 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\lin.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;  _ELINMInt_ta    1    wreg     unsigned char 
  9016 ;;  _ELINMInt_po    1   12[BANK0 ] unsigned char 
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  _ELINMInt_ta    1   13[BANK0 ] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;                  1    wreg      PTR unsigned char 
  9021 ;; Registers used:
  9022 ;;		wreg, status,2, status,0
  9023 ;; Tracked objects:
  9024 ;;		On entry : 1F/0
  9025 ;;		On exit  : 1F/0
  9026 ;;		Unchanged: FFFE0/0
  9027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9028 ;;      Params:         0       1       0       0       0       0       0       0
  9029 ;;      Locals:         0       1       0       0       0       0       0       0
  9030 ;;      Temps:          0       0       0       0       0       0       0       0
  9031 ;;      Totals:         0       2       0       0       0       0       0       0
  9032 ;;Total ram usage:        2 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    4
  9035 ;; This function calls:
  9036 ;;		Nothing
  9037 ;; This function is called by:
  9038 ;;		_Transmit_LIN_8Bytes
  9039 ;;		_Receive_Diag
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042  067A                     __ELINMIntGetPointer:	
  9043                           
  9044                           ;lin.c: 1382: return ( ( BYTE * )& _ELINMIntMessageBuffer[ _ELINMInt_position ] );
  9045                           
  9046                           ; Regs used in __ELINMIntGetPointer: [wreg+status,2+status,0]
  9047  067A  082C               	movf	__ELINMIntGetPointer@_ELINMInt_position,w
  9048  067B  3E54               	addlw	__ELINMIntMessageBuffer& (0+255)
  9049  067C  0008               	return
  9050  067D                     __end_of__ELINMIntGetPointer:	
  9051  067D                     PL2:	
  9052  067D  0020               	movlb	0	; select bank0
  9053  067E  00B7               	movwf	?_Transmit_LIN_8Bytes
  9054  067F  084F               	movf	_ui8_b_DResLocID_c,w
  9055  0680  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  9056  0681  0024               	movlb	4	; select bank4
  9057  0682  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  9058  0683  0020               	movlb	0	; select bank0
  9059  0684  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  9060  0685  0024               	movlb	4	; select bank4
  9061  0686  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  9062  0687  0020               	movlb	0	; select bank0
  9063  0688  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  9064  0689  0024               	movlb	4	; select bank4
  9065  068A  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  9066  068B  0020               	movlb	0	; select bank0
  9067  068C  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  9068  068D  0024               	movlb	4	; select bank4
  9069  068E  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  9070  068F  0020               	movlb	0	; select bank0
  9071  0690  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  9072  0691  0008               	return
  9073  0692                     PL3:	
  9074  0692  00B7               	movwf	?_Transmit_LIN_8Bytes
  9075  0693  084F               	movf	_ui8_b_DResLocID_c,w
  9076  0694  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  9077  0695  0024               	movlb	4	; select bank4
  9078  0696  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  9079  0697  0020               	movlb	0	; select bank0
  9080  0698  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  9081  0699  01BA               	clrf	?_Transmit_LIN_8Bytes+3
  9082  069A  0024               	movlb	4	; select bank4
  9083  069B  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  9084  069C  0020               	movlb	0	; select bank0
  9085  069D  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  9086  069E  0024               	movlb	4	; select bank4
  9087  069F  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  9088  06A0  0020               	movlb	0	; select bank0
  9089  06A1  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  9090  06A2  0024               	movlb	4	; select bank4
  9091  06A3  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  9092  06A4  0020               	movlb	0	; select bank0
  9093  06A5  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  9094  06A6  3010               	movlw	16
  9095  06A7  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  9096  06A8  0008               	return
  9097  06A9                     PL4:	
  9098  06A9  084F               	movf	_ui8_b_DResLocID_c,w
  9099  06AA  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  9100  06AB  0024               	movlb	4	; select bank4
  9101  06AC  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  9102  06AD  0020               	movlb	0	; select bank0
  9103  06AE  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  9104  06AF  0008               	return
  9105  06B0                     PL5:	
  9106  06B0  0024               	movlb	4	; select bank4
  9107  06B1  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
  9108  06B2  0020               	movlb	0	; select bank0
  9109  06B3  343A               	retlw	58
  9110  06B4                     PL6:	
  9111  06B4  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  9112  06B5  3EFD               	addlw	253
  9113  06B6  0020               	movlb	0	; select bank0
  9114  06B7  00C1               	movwf	??_EOL
  9115  06B8  30FF               	movlw	255
  9116  06B9  1803               	skipnc
  9117  06BA  3000               	movlw	0
  9118  06BB  00C2               	movwf	??_EOL+1
  9119  06BC  3A80               	xorlw	128
  9120  06BD  00C3               	movwf	??_EOL+2
  9121  06BE  3080               	movlw	128
  9122  06BF  0243               	subwf	??_EOL+2,w
  9123  06C0  1D03               	skipz
  9124  06C1  0008               	return
  9125  06C2  0024               	movlb	4	; select bank4
  9126  06C3  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  9127  06C4  0020               	movlb	0	; select bank0
  9128  06C5  0241               	subwf	??_EOL,w
  9129  06C6  0008               	return
  9130  06C7                     PL7:	
  9131  06C7  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  9132  06C8  3E03               	addlw	3
  9133  06C9  0020               	movlb	0	; select bank0
  9134  06CA  00C1               	movwf	??_EOL
  9135  06CB  3000               	movlw	0
  9136  06CC  1803               	skipnc
  9137  06CD  3001               	movlw	1
  9138  06CE  00C2               	movwf	??_EOL+1
  9139  06CF  3A80               	xorlw	128
  9140  06D0  3C80               	sublw	128
  9141  06D1  1D03               	skipz
  9142  06D2  0008               	return
  9143  06D3  0841               	movf	??_EOL,w
  9144  06D4  0024               	movlb	4	; select bank4
  9145  06D5  0236               	subwf	EOL@ui8_b_DResB2_RD^(0+512),w
  9146  06D6  0008               	return
  9147  06D7                     PL8:	
  9148  06D7  307F               	movlw	127
  9149  06D8  0020               	movlb	0	; select bank0
  9150  06D9  00B7               	movwf	?_Transmit_LIN_8Bytes
  9151  06DA  084F               	movf	_ui8_b_DResLocID_c,w
  9152  06DB  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  9153  06DC  084E               	movf	_ui8_b_DResB0_c,w
  9154  06DD  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  9155  06DE  30FF               	movlw	255
  9156  06DF  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  9157  06E0  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  9158  06E1  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  9159  06E2  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  9160  06E3  00BE               	movwf	?_Transmit_LIN_8Bytes+7
  9161  06E4  3410               	retlw	16
  9162  06E5                     PL9:	
  9163  06E5  3689               	lsrf	9,f
  9164  06E6  0024               	movlb	4	; select bank4
  9165  06E7  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  9166  06E8  0021               	movlb	1	; select bank1
  9167  06E9  083D               	movf	(_ui16_speed_fil+1)^(0+128),w
  9168  06EA  0020               	movlb	0	; select bank0
  9169  06EB  00AD               	movwf	?___wmul+1
  9170  06EC  0021               	movlb	1	; select bank1
  9171  06ED  083C               	movf	_ui16_speed_fil^(0+128),w
  9172  06EE  0020               	movlb	0	; select bank0
  9173  06EF  00AC               	movwf	?___wmul
  9174  06F0  3005               	movlw	5
  9175  06F1  00AE               	movwf	?___wmul+2
  9176  06F2  01AF               	clrf	?___wmul+3
  9177  06F3  0008               	return
  9178  06F4                     PL10:	
  9179  06F4  082C               	movf	?___wmul,w
  9180  06F5  00C1               	movwf	??_EOL
  9181  06F6  082D               	movf	?___wmul+1,w
  9182  06F7  00C2               	movwf	??_EOL+1
  9183  06F8  36C2               	lsrf	??_EOL+1,f
  9184  06F9  0CC1               	rrf	??_EOL,f
  9185  06FA  36C2               	lsrf	??_EOL+1,f
  9186  06FB  0CC1               	rrf	??_EOL,f
  9187  06FC  0841               	movf	??_EOL,w
  9188  06FD  0024               	movlb	4	; select bank4
  9189  06FE  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  9190  06FF  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  9191  0700  3E2D               	addlw	low (_PWM_trans_table| (0+32768))
  9192  0701  0008               	return
  9193  0702                     PL11:	
  9194  0702  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  9195  0703  30FF               	movlw	255
  9196  0704  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  9197  0705  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  9198  0706  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  9199  0707  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  9200  0708  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  9201  0709  00BE               	movwf	?_Transmit_LIN_8Bytes+7
  9202  070A  3410               	retlw	16
  9203  070B                     PL19:	
  9204  070B  0024               	movlb	4	; select bank4
  9205  070C  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  9206  070D  0020               	movlb	0	; select bank0
  9207  070E  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  9208  070F  3010               	movlw	16
  9209  0710  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  9210  0711  0008               	return
  9211  0712                     PL20:	
  9212  0712  0022               	movlb	2	; select bank2
  9213  0713  0864               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
  9214  0714  0020               	movlb	0	; select bank0
  9215  0715  00AD               	movwf	?___lwdiv+1
  9216  0716  0022               	movlb	2	; select bank2
  9217  0717  0863               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
  9218  0718  0020               	movlb	0	; select bank0
  9219  0719  00AC               	movwf	?___lwdiv
  9220  071A  3078               	movlw	120
  9221  071B  01AE               	clrf	?___lwdiv+2
  9222  071C  00AF               	movwf	?___lwdiv+3
  9223  071D  0008               	return
  9224  071E                     PL21:	
  9225  071E  0022               	movlb	2	; select bank2
  9226  071F  0862               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
  9227  0720  0020               	movlb	0	; select bank0
  9228  0721  00AD               	movwf	?___lwdiv+1
  9229  0722  0022               	movlb	2	; select bank2
  9230  0723  0861               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
  9231  0724  0020               	movlb	0	; select bank0
  9232  0725  00AC               	movwf	?___lwdiv
  9233  0726  3078               	movlw	120
  9234  0727  01AE               	clrf	?___lwdiv+2
  9235  0728  00AF               	movwf	?___lwdiv+3
  9236  0729  0008               	return
  9237  072A                     PL22:	
  9238  072A  0020               	movlb	0	; select bank0
  9239  072B  00AC               	movwf	?___lwdiv
  9240  072C  3078               	movlw	120
  9241  072D  01AE               	clrf	?___lwdiv+2
  9242  072E  00AF               	movwf	?___lwdiv+3
  9243  072F  0008               	return
  9244  0730                     PL23:	
  9245  0730  0022               	movlb	2	; select bank2
  9246  0731  0866               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
  9247  0732  0020               	movlb	0	; select bank0
  9248  0733  00AD               	movwf	?___lwdiv+1
  9249  0734  0022               	movlb	2	; select bank2
  9250  0735  0865               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
  9251  0736  0008               	return
  9252  0737                     PL30:	
  9253  0737  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  9254  0738  3010               	movlw	16
  9255  0739  01B9               	clrf	?_Transmit_LIN_8Bytes+2
  9256  073A  01BA               	clrf	?_Transmit_LIN_8Bytes+3
  9257  073B  01BB               	clrf	?_Transmit_LIN_8Bytes+4
  9258  073C  01BC               	clrf	?_Transmit_LIN_8Bytes+5
  9259  073D  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  9260  073E  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  9261  073F  0008               	return
  9262  0740                     PL32:	
  9263  0740  1065               	bcf	_ui8_error_Flags^(0+128),0
  9264  0741  10E5               	bcf	_ui8_error_Flags^(0+128),1
  9265  0742  13E5               	bcf	_ui8_error_Flags^(0+128),7
  9266  0743  1165               	bcf	_ui8_error_Flags^(0+128),2
  9267  0744  11E5               	bcf	_ui8_error_Flags^(0+128),3
  9268  0745  1265               	bcf	_ui8_error_Flags^(0+128),4
  9269  0746  1365               	bcf	_ui8_error_Flags^(0+128),6
  9270  0747  0008               	return
  9271  0748                     PL33:	
  9272  0748  0024               	movlb	4	; select bank4
  9273  0749  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  9274  074A  0020               	movlb	0	; select bank0
  9275  074B  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  9276  074C  0024               	movlb	4	; select bank4
  9277  074D  0832               	movf	EOL@ui8_b_DResB5_RD^(0+512),w
  9278  074E  0020               	movlb	0	; select bank0
  9279  074F  0008               	return
  9280  0750                     PL40:	
  9281  0750  0091               	movwf	17	;volatile
  9282  0751  301F               	movlw	31
  9283  0752  0092               	movwf	18	;volatile
  9284  0753  1115               	bcf	21,2
  9285  0754  1795               	bsf	21,7	;volatile
  9286  0755  0008               	return
  9287  0756                     PL43:	
  9288  0756  0021               	movlb	1	; select bank1
  9289  0757  086E               	movf	_wkpoint^(0+128),w
  9290  0758  0020               	movlb	0	; select bank0
  9291  0759  064E               	xorwf	_ui8_b_DResB0_c,w
  9292  075A  0008               	return
  9293  075B                     PL46:	
  9294  075B  01BB               	clrf	?_Transmit_LIN_8Bytes+4
  9295  075C  01BC               	clrf	?_Transmit_LIN_8Bytes+5
  9296  075D  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  9297  075E  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  9298  075F  0008               	return
  9299  0760                     PL50:	
  9300  0760  0024               	movlb	4	; select bank4
  9301  0761  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
  9302  0762  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  9303  0763  3AFF               	xorlw	255
  9304  0764  0008               	return
  9305  0765                     __ptext2032:	
  9306 ;; =============== function _Receive_Diag ends ============
  9307                           
  9308                           
  9309 ;; *************** function _NegativeAnswer *****************
  9310 ;; Defined at:
  9311 ;;		line 2438 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\diag.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;  LID             1    wreg     unsigned char 
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;  LID             1   32[BANK0 ] unsigned char 
  9316 ;; Return value:  Size  Location     Type
  9317 ;;		None               void
  9318 ;; Registers used:
  9319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9320 ;; Tracked objects:
  9321 ;;		On entry : 1D/2
  9322 ;;		On exit  : 1F/1
  9323 ;;		Unchanged: FFFE0/0
  9324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9325 ;;      Params:         0       0       0       0       0       0       0       0
  9326 ;;      Locals:         0       1       0       0       0       0       0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0       0
  9328 ;;      Totals:         0       1       0       0       0       0       0       0
  9329 ;;Total ram usage:        1 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    7
  9332 ;; This function calls:
  9333 ;;		_Transmit_LIN_8Bytes
  9334 ;; This function is called by:
  9335 ;;		_EOL
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338  0765                     _NegativeAnswer:	
  9339                           
  9340                           ; Regs used in _NegativeAnswer: [wreg+fsr1l-status,0+pclath+cstack]
  9341                           ;NegativeAnswer@LID stored from wreg
  9342  0765  0020               	movlb	0	; select bank0
  9343  0766  00C0               	movwf	NegativeAnswer@LID
  9344                           
  9345                           ;diag.c: 2440: ui8_b_DResB0_c = 0xFF;
  9346  0767  30FF               	movlw	255
  9347  0768  00CE               	movwf	_ui8_b_DResB0_c
  9348                           
  9349                           ;diag.c: 2441: ui8_b_DResB1_c = 0xFF;
  9350  0769  0022               	movlb	2	; select bank2
  9351  076A  00DA               	movwf	_ui8_b_DResB1_c^(0+256)
  9352                           
  9353                           ;diag.c: 2442: ui8_b_DResB2_c = 0xFF;
  9354  076B  00DB               	movwf	_ui8_b_DResB2_c^(0+256)
  9355                           
  9356                           ;diag.c: 2443: ui8_b_DResB3_c = 0xFF;
  9357  076C  00DC               	movwf	_ui8_b_DResB3_c^(0+256)
  9358                           
  9359                           ;diag.c: 2445: ui8_b_DResB5_c = 0xFF;
  9360  076D  00DD               	movwf	_ui8_b_DResB4_c^(0+256)
  9361                           
  9362                           ;diag.c: 2447: Transmit_LIN_8Bytes( 0x10, 0x7F, LID, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
  9363  076E  307F               	movlw	127
  9364  076F  0020               	movlb	0	; select bank0
  9365  0770  00B7               	movwf	?_Transmit_LIN_8Bytes
  9366  0771  0840               	movf	NegativeAnswer@LID,w
  9367  0772  2702  3180         	fcall	PL11	;call to abstracted procedure
  9368  0774  2DF8               	ljmp	_Transmit_LIN_8Bytes
  9369  0775                     __end_of_NegativeAnswer:	
  9370  0775                     __ptext2046:	
  9371 ;; =============== function _DiagInit ends ============
  9372                           
  9373                           
  9374 ;; *************** function _cksum *****************
  9375 ;; Defined at:
  9376 ;;		line 6 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\cksum.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;		None
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  addr            2   18[BANK0 ] unsigned short 
  9381 ;;  sum             2   16[BANK0 ] unsigned int 
  9382 ;;  counter         2   14[BANK0 ] unsigned int 
  9383 ;; Return value:  Size  Location     Type
  9384 ;;                  2   12[BANK0 ] unsigned int 
  9385 ;; Registers used:
  9386 ;;		wreg, status,2, status,0
  9387 ;; Tracked objects:
  9388 ;;		On entry : 1F/0
  9389 ;;		On exit  : 1F/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9392 ;;      Params:         0       2       0       0       0       0       0       0
  9393 ;;      Locals:         0       6       0       0       0       0       0       0
  9394 ;;      Temps:          0       0       0       0       0       0       0       0
  9395 ;;      Totals:         0       8       0       0       0       0       0       0
  9396 ;;Total ram usage:        8 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    4
  9399 ;; This function calls:
  9400 ;;		Nothing
  9401 ;; This function is called by:
  9402 ;;		_EOL
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405  0775                     _cksum:	
  9406  0775  30FE               	movlw	254
  9407                           
  9408                           ;cksum.c: 7: unsigned int sum;
  9409                           ;cksum.c: 8: unsigned short addr;
  9410                           ;cksum.c: 9: unsigned int counter;
  9411                           ;cksum.c: 11: addr = 0L;
  9412                           
  9413                           ; Regs used in _cksum: [wreg+status,2+status,0]
  9414  0776  01B2               	clrf	cksum@addr
  9415  0777  01B3               	clrf	cksum@addr+1
  9416                           
  9417                           ;cksum.c: 12: sum = 0;
  9418  0778  01B0               	clrf	cksum@sum
  9419  0779  01B1               	clrf	cksum@sum+1
  9420                           
  9421                           ;cksum.c: 13: counter = ( (8192 - 2 - 1) - 0L + 1 );
  9422  077A  00AE               	movwf	cksum@counter
  9423  077B  301F               	movlw	31
  9424  077C  00AF               	movwf	cksum@counter+1
  9425  077D                     l29607:	
  9426                           ;cksum.c: 15: while(counter--){
  9427                           
  9428  077D  3001               	movlw	1
  9429  077E  02AE               	subwf	cksum@counter,f
  9430  077F  3000               	movlw	0
  9431  0780  3BAF               	subwfb	cksum@counter+1,f
  9432  0781  0A2E               	incf	cksum@counter,w
  9433  0782  1903               	skipnz
  9434  0783  0A2F               	incf	cksum@counter+1,w
  9435  0784  1903               	btfsc	3,2
  9436  0785  2F9E               	goto	l29609
  9437                           
  9438                           ;cksum.c: 22: sum += (EEADRL=(addr)&0xff, EEADRH=(addr)>>8, WREN=0, EECON1 |= 0x80, RD=1
      +                          , _nop(), _nop(), (EEDATH << 8) | EEDATA);
  9439  0786  0832               	movf	cksum@addr,w
  9440  0787  0023               	movlb	3	; select bank3
  9441  0788  0091               	movwf	17	;volatile
  9442  0789  0020               	movlb	0	; select bank0
  9443  078A  0833               	movf	cksum@addr+1,w
  9444  078B  0023               	movlb	3	; select bank3
  9445  078C  0092               	movwf	18	;volatile
  9446  078D  1115               	bcf	21,2
  9447  078E  1795               	bsf	21,7	;volatile
  9448  078F  1415               	bsf	21,0
  9449  0790  0000               	nop
  9450  0791  0000               	nop
  9451  0792  0023               	movlb	3	; select bank3
  9452  0793  0813               	movf	19,w	;volatile
  9453  0794  0020               	movlb	0	; select bank0
  9454  0795  07B0               	addwf	cksum@sum,f
  9455  0796  0023               	movlb	3	; select bank3
  9456  0797  0814               	movf	20,w	;volatile
  9457  0798  0020               	movlb	0	; select bank0
  9458  0799  3DB1               	addwfc	cksum@sum+1,f
  9459                           
  9460                           ;cksum.c: 31: addr++;
  9461  079A  0AB2               	incf	cksum@addr,f
  9462  079B  1903               	skipnz
  9463  079C  0AB3               	incf	cksum@addr+1,f
  9464  079D  2F7D               	goto	l29607
  9465  079E                     l29609:	
  9466                           
  9467                           ;cksum.c: 32: }
  9468                           ;cksum.c: 33: return sum;
  9469  079E  0831               	movf	cksum@sum+1,w
  9470  079F  00AD               	movwf	?_cksum+1
  9471  07A0  0830               	movf	cksum@sum,w
  9472  07A1  00AC               	movwf	?_cksum
  9473  07A2  0008               	return
  9474  07A3                     __end_of_cksum:	
  9475                           
  9476                           	psect	text2039
  9477  1082                     __ptext2039:	
  9478 ;; =============== function _FILTER_Init ends ============
  9479                           
  9480                           
  9481 ;; *************** function _BVH2_Appl_Layer *****************
  9482 ;; Defined at:
  9483 ;;		line 332 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\T_Link\BVH2_Appl_Layer.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;		None
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;  Sb3_Sum1        2   28[BANK4 ] short 
  9488 ;;  Sb3_Product1    2    0        unsigned short 
  9489 ;;  Sb4_PI_sum      2   30[BANK4 ] short 
  9490 ;;  Sb2_Switch2     2   25[BANK4 ] unsigned short 
  9491 ;;  Sb2_Error       2   23[BANK4 ] short 
  9492 ;;  Sb2_Switch5     2   17[BANK4 ] unsigned short 
  9493 ;;  Sb1_Logical_    1   27[BANK4 ] unsigned char 
  9494 ;;  Sb2_Logical_    1   22[BANK4 ] unsigned char 
  9495 ;;  Sb1_Logical_    1   21[BANK4 ] unsigned char 
  9496 ;;  Sb1_Logical_    1   20[BANK4 ] unsigned char 
  9497 ;;  Cb24_Reset      1   19[BANK4 ] unsigned char 
  9498 ;;  Sb1_Logical_    1    8[BANK4 ] unsigned char 
  9499 ;; Return value:  Size  Location     Type
  9500 ;;		None               void
  9501 ;; Registers used:
  9502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9503 ;; Tracked objects:
  9504 ;;		On entry : 1F/1
  9505 ;;		On exit  : 1F/2
  9506 ;;		Unchanged: FFE00/0
  9507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9508 ;;      Params:         0       0       0       0       0       0       0       0
  9509 ;;      Locals:         0       0       0       0       0      32       0       0
  9510 ;;      Temps:          0       6       0       0       0       0       0       0
  9511 ;;      Totals:         0       6       0       0       0      32       0       0
  9512 ;;Total ram usage:       38 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    5
  9515 ;; This function calls:
  9516 ;;		_Cb44_Pic_etat_monitor_node_fcn1
  9517 ;;		_Cb34_PWM_Detection_node_fcn1
  9518 ;;		_Cb56_UbatHandling_node_fcn2
  9519 ;;		_Cb1_Current_An___High_node_fcn1
  9520 ;;		___lmul
  9521 ;;		___aldiv
  9522 ;;		___wmul
  9523 ;; This function is called by:
  9524 ;;		_main
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527  1082                     _BVH2_Appl_Layer:	
  9528                           
  9529                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;
  9530                           ;BVH2_Appl_Layer.c: 335: static UInt16 Cb19_Counter = 0;
  9531                           ;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;
  9532                           ;BVH2_Appl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;
  9533                           ;BVH2_Appl_Layer.c: 338: static UInt8 Cb24_RestartCounter = 0;
  9534                           ;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;
  9535                           ;BVH2_Appl_Layer.c: 340: static UInt8 Cb9_StateCnt = 0;
  9536                           ;BVH2_Appl_Layer.c: 342: static struct tag_SIBFS_Current_Analysis_low_ SIBFS_Current_Ana
      +                          lysis_low_b = {
  9537                           ;BVH2_Appl_Layer.c: 343: 0 ,
  9538                           
  9539                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9540  1082  28BE               	goto	l29805
  9541  1083                     l29745:	
  9542                           
  9543                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
  9544  1083  3000               	movlw	0
  9545  1084  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  9546  1085  3033               	movlw	51
  9547  1086                     L26:	
  9548  1086  1903               	skipnz
  9549  1087  0226               	subwf	_Cb44_StateCnt^(0+128),w
  9550  1088  1C03               	skipc
  9551  1089  2894               	goto	l29753
  9552                           
  9553                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  9554  108A  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9555  108B  39F8               	andlw	-8
  9556  108C  3805               	iorlw	5
  9557  108D  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  9558                           
  9559                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
  9560  108E  0022               	movlb	2	; select bank2
  9561  108F  01C7               	clrf	_Cb44_oShutoff^(0+256)
  9562  1090                     l29751:	
  9563                           
  9564                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
  9565  1090  0021               	movlb	1	; select bank1
  9566  1091  01A6               	clrf	_Cb44_StateCnt^(0+128)
  9567  1092  01A7               	clrf	(_Cb44_StateCnt+1)^(0+128)
  9568                           
  9569                           ;BVH2_Appl_Layer.c: 422: }
  9570  1093  28D3               	goto	l29807
  9571  1094                     l29753:	
  9572                           
  9573                           ;BVH2_Appl_Layer.c: 423: else {
  9574                           ;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 1 ;
  9575  1094  0021               	movlb	1	; select bank1
  9576  1095  0AA6               	incf	_Cb44_StateCnt^(0+128),f
  9577  1096  1903               	skipnz
  9578  1097  0AA7               	incf	(_Cb44_StateCnt+1)^(0+128),f
  9579  1098  28D3               	goto	l29807
  9580  1099                     l29755:	
  9581                           
  9582                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
  9583  1099  261B  3190         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  9584                           
  9585                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
  9586  109B  0C4D               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9587  109C  27DD  3190         	fcall	PL37	;call to abstracted procedure
  9588  109E  1D03               	btfss	3,2
  9589  109F  2894               	goto	l29753
  9590  10A0  28D3               	goto	l29807
  9591  10A1                     l29761:	
  9592                           
  9593                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
  9594  10A1  261B  3190         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  9595                           
  9596                           ;BVH2_Appl_Layer.c: 445: break;
  9597  10A3  28D3               	goto	l29807
  9598  10A4                     l29763:	
  9599                           
  9600                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
  9601  10A4  3000               	movlw	0
  9602  10A5  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  9603  10A6  3010               	movlw	16
  9604  10A7  2886               	goto	L26
  9605  10A8                     l29779:	
  9606                           
  9607                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
  9608  10A8  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9609  10A9  39F8               	andlw	-8
  9610  10AA  3803               	iorlw	3
  9611  10AB  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  9612                           
  9613                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
  9614  10AC  0022               	movlb	2	; select bank2
  9615  10AD  01C7               	clrf	_Cb44_oShutoff^(0+256)
  9616                           
  9617                           ;BVH2_Appl_Layer.c: 484: }
  9618  10AE  28D3               	goto	l29807
  9619  10AF                     l29793:	
  9620                           
  9621                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
  9622  10AF  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9623  10B0  39F8               	andlw	-8
  9624  10B1  3806               	iorlw	6
  9625  10B2  28BC               	goto	L6
  9626  10B3                     l17545:	
  9627                           ;BVH2_Appl_Layer.c: 515: }
  9628                           ;BVH2_Appl_Layer.c: 516: default: {
  9629                           
  9630                           
  9631                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
  9632  10B3  1ACD               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
  9633  10B4  28D3               	goto	l29807
  9634                           
  9635                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
  9636  10B5  16CD               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
  9637                           
  9638                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
  9639  10B6  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9640  10B7  1903               	btfsc	3,2
  9641  10B8  28D3               	goto	l29807
  9642                           
  9643                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
  9644  10B9  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9645  10BA  39F8               	andlw	-8
  9646  10BB  3804               	iorlw	4
  9647  10BC                     L6:	
  9648  10BC  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  9649  10BD  2890               	goto	l29751
  9650  10BE                     l29805:	
  9651  10BE  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9652  10BF  3907               	andlw	7
  9653                           
  9654                           ; Switch size 1, requested type "space"
  9655                           ; Number of cases is 6, Range of values is 1 to 6
  9656                           ; switch strategies available:
  9657                           ; Name         Instructions Cycles
  9658                           ; simple_byte           19    10 (average)
  9659                           ; direct_byte           21     9 (fixed)
  9660                           ; jumptable            263     9 (fixed)
  9661                           ;	Chosen strategy is simple_byte
  9662  10C0  3A01               	xorlw	1	; case 1
  9663  10C1  1903               	skipnz
  9664  10C2  28AF               	goto	l29793
  9665  10C3  3A03               	xorlw	3	; case 2
  9666  10C4  1903               	skipnz
  9667  10C5  28A8               	goto	l29779
  9668  10C6  3A01               	xorlw	1	; case 3
  9669  10C7  1903               	skipnz
  9670  10C8  28A1               	goto	l29761
  9671  10C9  3A07               	xorlw	7	; case 4
  9672  10CA  1903               	skipnz
  9673  10CB  2883               	goto	l29745
  9674  10CC  3A01               	xorlw	1	; case 5
  9675  10CD  1903               	skipnz
  9676  10CE  2899               	goto	l29755
  9677  10CF  3A03               	xorlw	3	; case 6
  9678  10D0  1903               	skipnz
  9679  10D1  28A4               	goto	l29763
  9680  10D2  28B3               	goto	l17545
  9681  10D3                     l29807:	
  9682                           
  9683                           ;BVH2_Appl_Layer.c: 538: Cb34_idPWM = ui8_PWM_dc_mat;
  9684  10D3  0021               	movlb	1	; select bank1
  9685  10D4  085E               	movf	_ui8_PWM_dc_mat^(0+128),w
  9686  10D5  0020               	movlb	0	; select bank0
  9687  10D6  00CA               	movwf	_Cb34_idPWM
  9688                           
  9689                           ;BVH2_Appl_Layer.c: 543: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
  9690  10D7  0021               	movlb	1	; select bank1
  9691  10D8  1A4C               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
  9692  10D9  28DE               	goto	l29831
  9693  10DA  28EC               	goto	l17548
  9694  10DB                     l29813:	
  9695                           
  9696                           ;BVH2_Appl_Layer.c: 549: Cb34_PWM_Detection_node_fcn1();
  9697  10DB  2671  3190         	fcall	_Cb34_PWM_Detection_node_fcn1
  9698                           
  9699                           ;BVH2_Appl_Layer.c: 552: break;
  9700  10DD  28F5               	goto	l29847
  9701  10DE                     l29831:	
  9702  10DE  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  9703  10DF  390F               	andlw	15
  9704                           
  9705                           ; Switch size 1, requested type "space"
  9706                           ; Number of cases is 8, Range of values is 1 to 8
  9707                           ; switch strategies available:
  9708                           ; Name         Instructions Cycles
  9709                           ; direct_byte           25     9 (fixed)
  9710                           ; simple_byte           25    13 (average)
  9711                           ; jumptable            263     9 (fixed)
  9712                           ;	Chosen strategy is direct_byte
  9713  10E0  3EFF               	addlw	-1
  9714  10E1  1C03               	skipc
  9715  10E2  28F5               	goto	l29847
  9716  10E3  0084               	movwf	4
  9717  10E4  3008               	movlw	8
  9718  10E5  0204               	subwf	4,w
  9719  10E6  1803               	skipnc
  9720  10E7  28F5               	goto	l29847
  9721  10E8  3180               	movlp	high S31595
  9722  10E9  3504               	lslf	4,w
  9723  10EA  3ECE               	addlw	low S31595
  9724  10EB  0082               	movwf	2
  9725  10EC                     l17548:	
  9726                           
  9727                           ;BVH2_Appl_Layer.c: 615: else {
  9728                           ;BVH2_Appl_Layer.c: 616: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling = 1;
  9729  10EC  164C               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
  9730                           
  9731                           ;BVH2_Appl_Layer.c: 619: if (ui8_ResetMatlab == 1) {
  9732  10ED  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  9733  10EE  28F0               	goto	u9861
  9734  10EF  28F1               	goto	l29835
  9735  10F0                     u9861:	
  9736  10F0  28F5               	goto	l29847
  9737  10F1                     l29835:	
  9738                           
  9739                           ;BVH2_Appl_Layer.c: 621: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
  9740                           
  9741                           ;BVH2_Appl_Layer.c: 622: Cb34_odPumpOff = 1;
  9742                           
  9743                           ;BVH2_Appl_Layer.c: 623: Cb34_odFixedValueSel = 0;
  9744                           
  9745                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedLowValueSel = 0;
  9746  10F1  27AD  3190         	fcall	PL24	;call to abstracted procedure
  9747                           
  9748                           ;BVH2_Appl_Layer.c: 625: Cb34_oPWM_SC_Alarm = 0;
  9749  10F3  01C3               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
  9750                           
  9751                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_Alarm = 0;
  9752  10F4  01C2               	clrf	_Cb34_oPWM_Alarm^(0+256)
  9753  10F5                     l29847:	
  9754                           
  9755                           ;BVH2_Appl_Layer.c: 627: }
  9756                           ;BVH2_Appl_Layer.c: 628: }
  9757                           ;BVH2_Appl_Layer.c: 633: bool_PWMin_Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
  9758  10F5  0022               	movlb	2	; select bank2
  9759  10F6  0843               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
  9760  10F7  00CD               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
  9761                           
  9762                           ;BVH2_Appl_Layer.c: 638: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
  9763  10F8  0021               	movlb	1	; select bank1
  9764  10F9  1DCE               	btfss	_SIBFS_UbatHandling_b^(0+128),3
  9765  10FA  291A               	goto	l17561
  9766                           
  9767                           ;BVH2_Appl_Layer.c: 642: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
  9768  10FB  1E4E               	btfss	_SIBFS_UbatHandling_b^(0+128),4
  9769  10FC  2908               	goto	l17562
  9770                           
  9771                           ;BVH2_Appl_Layer.c: 644: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
  9772  10FD  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
  9773  10FE  39F8               	andlw	-8
  9774  10FF  3802               	iorlw	2
  9775  1100  00CE               	movwf	_SIBFS_UbatHandling_b^(0+128)
  9776                           
  9777                           ;BVH2_Appl_Layer.c: 647: if (((UInt8)ui8_BattVolt_mat) < 222) {
  9778  1101  30DE               	movlw	222
  9779  1102  0240               	subwf	_ui8_BattVolt_mat^(0+128),w
  9780  1103  1803               	skipnc
  9781  1104  2920               	goto	l17569
  9782  1105                     l29857:	
  9783                           
  9784                           ;BVH2_Appl_Layer.c: 648: Cb56_UbatHandling_node_fcn2();
  9785  1105  26E4  3190         	fcall	_Cb56_UbatHandling_node_fcn2
  9786  1107  2920               	goto	l17569
  9787  1108                     l17562:	
  9788                           
  9789                           ;BVH2_Appl_Layer.c: 653: else {
  9790                           ;BVH2_Appl_Layer.c: 655: if (SIBFS_UbatHandling_b.Cb59_SaturationLow) {
  9791  1108  1ECE               	btfss	_SIBFS_UbatHandling_b^(0+128),5
  9792  1109  2913               	goto	l17565
  9793                           
  9794                           ;BVH2_Appl_Layer.c: 657: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
  9795  110A  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
  9796  110B  39F8               	andlw	-8
  9797  110C  3803               	iorlw	3
  9798  110D  00CE               	movwf	_SIBFS_UbatHandling_b^(0+128)
  9799                           
  9800                           ;BVH2_Appl_Layer.c: 660: if (((UInt8)ui8_BattVolt_mat) > 49) {
  9801  110E  3032               	movlw	50
  9802  110F  0240               	subwf	_ui8_BattVolt_mat^(0+128),w
  9803  1110  1803               	btfsc	3,0
  9804  1111  2905               	goto	l29857
  9805  1112  2920               	goto	l17569
  9806  1113                     l17565:	
  9807                           
  9808                           ;BVH2_Appl_Layer.c: 666: else {
  9809                           ;BVH2_Appl_Layer.c: 668: if (SIBFS_UbatHandling_b.Cb60_NormalUbat) {
  9810  1113  1F4E               	btfss	_SIBFS_UbatHandling_b^(0+128),6
  9811  1114  2920               	goto	l17569
  9812                           
  9813                           ;BVH2_Appl_Layer.c: 670: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
  9814  1115  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
  9815  1116  39F8               	andlw	-8
  9816  1117  3801               	iorlw	1
  9817  1118  00CE               	movwf	_SIBFS_UbatHandling_b^(0+128)
  9818  1119  2905               	goto	l29857
  9819  111A                     l17561:	
  9820                           
  9821                           ;BVH2_Appl_Layer.c: 680: else {
  9822                           ;BVH2_Appl_Layer.c: 681: SIBFS_UbatHandling_b.Cb57_Ubat_Handling = 1;
  9823  111A  15CE               	bsf	_SIBFS_UbatHandling_b^(0+128),3
  9824                           
  9825                           ;BVH2_Appl_Layer.c: 684: if (ui8_ResetMatlab == 1) {
  9826  111B  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  9827  111C  2920               	goto	l17569
  9828                           
  9829                           ;BVH2_Appl_Layer.c: 686: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
  9830  111D  174E               	bsf	_SIBFS_UbatHandling_b^(0+128),6
  9831                           
  9832                           ;BVH2_Appl_Layer.c: 687: Cb56_odPumpOff = 0;
  9833                           
  9834                           ;BVH2_Appl_Layer.c: 688: Cb56_odFixedValueSel = 0;
  9835                           
  9836                           ;BVH2_Appl_Layer.c: 689: Cb56_oUbat_Alarm_High = 0;
  9837  111E  27E4  3190         	fcall	PL38	;call to abstracted procedure
  9838  1120                     l17569:	
  9839                           
  9840                           ;BVH2_Appl_Layer.c: 690: }
  9841                           ;BVH2_Appl_Layer.c: 691: }
  9842                           ;BVH2_Appl_Layer.c: 694: Sb1_Logical_Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueS
      +                          el));
  9843  1120  0024               	movlb	4	; select bank4
  9844  1121  01A9               	clrf	_BVH2_Appl_Layer$20277^(0+512)
  9845  1122  0022               	movlb	2	; select bank2
  9846  1123  0846               	movf	_Cb34_odPumpOff^(0+256),w
  9847  1124  1903               	btfsc	3,2
  9848  1125  292D               	goto	l29881
  9849  1126  0021               	movlb	1	; select bank1
  9850  1127  08C9               	movf	_Cb56_odFixedValueSel^(0+128),f
  9851  1128  1D03               	skipz
  9852  1129  292D               	goto	l29881
  9853  112A  0024               	movlb	4	; select bank4
  9854  112B  01A9               	clrf	_BVH2_Appl_Layer$20277^(0+512)
  9855  112C  0AA9               	incf	_BVH2_Appl_Layer$20277^(0+512),f
  9856  112D                     l29881:	
  9857  112D  0024               	movlb	4	; select bank4
  9858  112E  0829               	movf	_BVH2_Appl_Layer$20277^(0+512),w
  9859  112F  00A8               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512)
  9860                           
  9861                           ;BVH2_Appl_Layer.c: 699: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
  9862  1130  0021               	movlb	1	; select bank1
  9863  1131  1CC7               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9864  1132  2942               	goto	l17573
  9865                           
  9866                           ;BVH2_Appl_Layer.c: 701: if (Cb51_Counter > 80) {
  9867  1133  3051               	movlw	81
  9868  1134  0022               	movlb	2	; select bank2
  9869  1135  023A               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+256),w
  9870  1136  1C03               	skipc
  9871  1137  2940               	goto	l29891
  9872                           
  9873                           ;BVH2_Appl_Layer.c: 704: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
  9874  1138  0021               	movlb	1	; select bank1
  9875  1139  10C7               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9876  113A                     L8:	
  9877                           
  9878                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  9879  113A  15C7               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9880                           
  9881                           ;BVH2_Appl_Layer.c: 706: Cb51_oTempRedAlarm = 0;
  9882  113B  0022               	movlb	2	; select bank2
  9883  113C  01BC               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  9884                           
  9885                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempAlarm = 0;
  9886  113D  01BB               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  9887                           
  9888                           ;BVH2_Appl_Layer.c: 708: Cb51_odPumpOff = 0;
  9889  113E  01BD               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  9890  113F  2970               	goto	L7
  9891  1140                     l29891:	
  9892                           ;BVH2_Appl_Layer.c: 710: }
  9893                           
  9894                           ;BVH2_Appl_Layer.c: 709: Cb51_Counter = 0 ;
  9895                           
  9896                           
  9897                           ;BVH2_Appl_Layer.c: 711: else {
  9898                           ;BVH2_Appl_Layer.c: 712: Cb51_Counter = Cb51_Counter + 1 ;
  9899  1140  0ABA               	incf	BVH2_Appl_Layer@Cb51_Counter^(0+256),f
  9900                           
  9901                           ;BVH2_Appl_Layer.c: 713: }
  9902                           ;BVH2_Appl_Layer.c: 716: }
  9903  1141  29DD               	goto	l30003
  9904  1142                     l17573:	
  9905                           
  9906                           ;BVH2_Appl_Layer.c: 717: else {
  9907                           ;BVH2_Appl_Layer.c: 719: if (SIBFS_Temperature_Alarm_b.Cb53_reset) {
  9908  1142  1D47               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9909  1143  2947               	goto	l17577
  9910                           
  9911                           ;BVH2_Appl_Layer.c: 724: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
  9912  1144  1147               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9913                           
  9914                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
  9915  1145  14C7               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9916                           
  9917                           ;BVH2_Appl_Layer.c: 728: }
  9918  1146  29DD               	goto	l30003
  9919  1147                     l17577:	
  9920                           
  9921                           ;BVH2_Appl_Layer.c: 729: else {
  9922                           ;BVH2_Appl_Layer.c: 731: if (SIBFS_Temperature_Alarm_b.Cb54_greenTemp) {
  9923  1147  1DC7               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9924  1148  295B               	goto	l17579
  9925                           
  9926                           ;BVH2_Appl_Layer.c: 735: if (ui16_mat_inpTemp < 72) {
  9927  1149  3000               	movlw	0
  9928  114A  0023               	movlb	3	; select bank3
  9929  114B  0265               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  9930  114C  3048               	movlw	72
  9931  114D  1903               	skipnz
  9932  114E  0264               	subwf	_ui16_mat_inpTemp^(0+384),w
  9933  114F  1803               	skipnc
  9934  1150  29DD               	goto	l30003
  9935                           
  9936                           ;BVH2_Appl_Layer.c: 738: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
  9937  1151  0021               	movlb	1	; select bank1
  9938  1152  11C7               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9939                           
  9940                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
  9941  1153  1647               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9942                           
  9943                           ;BVH2_Appl_Layer.c: 740: Cb51_oTempRedAlarm = 1;
  9944  1154  0022               	movlb	2	; select bank2
  9945  1155  01BC               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  9946  1156  0ABC               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
  9947                           
  9948                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempAlarm = 1;
  9949  1157  01BB               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  9950  1158  0ABB               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
  9951                           
  9952                           ;BVH2_Appl_Layer.c: 744: Cb51_odPumpOff = 0;
  9953  1159  01BD               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  9954  115A  29DD               	goto	l30003
  9955  115B                     l17579:	
  9956                           
  9957                           ;BVH2_Appl_Layer.c: 749: else {
  9958                           ;BVH2_Appl_Layer.c: 751: if (SIBFS_Temperature_Alarm_b.Cb55_redTemp) {
  9959  115B  1E47               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9960  115C  2968               	goto	l17582
  9961                           
  9962                           ;BVH2_Appl_Layer.c: 755: if (ui16_mat_inpTemp > 185) {
  9963  115D  3000               	movlw	0
  9964  115E  0023               	movlb	3	; select bank3
  9965  115F  0265               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  9966  1160  30BA               	movlw	186
  9967  1161  1903               	skipnz
  9968  1162  0264               	subwf	_ui16_mat_inpTemp^(0+384),w
  9969  1163  1C03               	skipc
  9970  1164  29DD               	goto	l30003
  9971                           
  9972                           ;BVH2_Appl_Layer.c: 758: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
  9973  1165  0021               	movlb	1	; select bank1
  9974  1166  1247               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9975  1167  293A               	goto	L8
  9976  1168                     l17582:	
  9977                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  9978                           
  9979                           
  9980                           ;BVH2_Appl_Layer.c: 768: else {
  9981                           ;BVH2_Appl_Layer.c: 770: if (!(SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm)) {
  9982  1168  1847               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  9983  1169  29DD               	goto	l30003
  9984                           
  9985                           ;BVH2_Appl_Layer.c: 771: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
  9986  116A  1447               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  9987                           
  9988                           ;BVH2_Appl_Layer.c: 775: if (ui8_ResetMatlab != 0) {
  9989  116B  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9990  116C  1903               	btfsc	3,2
  9991  116D  29DD               	goto	l30003
  9992                           
  9993                           ;BVH2_Appl_Layer.c: 777: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
  9994  116E  1547               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9995                           
  9996                           ;BVH2_Appl_Layer.c: 778: Cb51_Counter = 0 ;
  9997  116F  0022               	movlb	2	; select bank2
  9998  1170                     L7:	
  9999  1170  01BA               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+256)
 10000  1171  29DD               	goto	l30003
 10001  1172                     l29915:	
 10002                           
 10003                           ;BVH2_Appl_Layer.c: 792: if (Cb1_StateCnt > 50) {
 10004  1172  3000               	movlw	0
 10005  1173  0225               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 10006  1174  3033               	movlw	51
 10007  1175  1903               	skipnz
 10008  1176  0224               	subwf	_Cb1_StateCnt^(0+128),w
 10009  1177  1C03               	skipc
 10010  1178  297F               	goto	l29925
 10011                           
 10012                           ;BVH2_Appl_Layer.c: 795: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 10013                           ;BVH2_Appl_Layer.c: 796: (UInt8)5;
 10014  1179  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 10015                           
 10016                           ;BVH2_Appl_Layer.c: 797: Cb1_oShutoff = 0;
 10017                           
 10018                           ;BVH2_Appl_Layer.c: 798: Cb1_oCurrentAlarm = 0;
 10019  117A  27D6  3190         	fcall	PL35	;call to abstracted procedure
 10020  117C                     l29923:	
 10021                           
 10022                           ;BVH2_Appl_Layer.c: 799: Cb1_RestartCounter = 0 ;
 10023  117C  0022               	movlb	2	; select bank2
 10024  117D  01BF               	clrf	_Cb1_RestartCounter^(0+256)
 10025                           
 10026                           ;BVH2_Appl_Layer.c: 800: }
 10027  117E  29F6               	goto	l17591
 10028  117F                     l29925:	
 10029                           
 10030                           ;BVH2_Appl_Layer.c: 801: else {
 10031                           ;BVH2_Appl_Layer.c: 802: Cb1_StateCnt = Cb1_StateCnt + 1 ;
 10032  117F  0AA4               	incf	_Cb1_StateCnt^(0+128),f
 10033  1180  1903               	skipnz
 10034  1181  0AA5               	incf	(_Cb1_StateCnt+1)^(0+128),f
 10035  1182  29F6               	goto	l17591
 10036  1183                     l29927:	
 10037                           
 10038                           ;BVH2_Appl_Layer.c: 810: Cb1_Current_An___High_node_fcn1();
 10039  1183  2630  3190         	fcall	_Cb1_Current_An___High_node_fcn1
 10040                           
 10041                           ;BVH2_Appl_Layer.c: 811: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
 10042  1185  0E4B               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
 10043  1186  3903               	andlw	3
 10044  1187  3A03               	xorlw	3
 10045  1188  1D03               	btfss	3,2
 10046  1189  297F               	goto	l29925
 10047  118A  29F6               	goto	l17591
 10048  118B                     l29933:	
 10049                           
 10050                           ;BVH2_Appl_Layer.c: 820: if (Cb1_RestartCounter < 10) {
 10051  118B  300A               	movlw	10
 10052  118C  0022               	movlb	2	; select bank2
 10053  118D  023F               	subwf	_Cb1_RestartCounter^(0+256),w
 10054  118E  1803               	skipnc
 10055  118F  29F6               	goto	l17591
 10056  1190                     l29935:	
 10057                           
 10058                           ;BVH2_Appl_Layer.c: 823: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 10059                           ;BVH2_Appl_Layer.c: 824: (UInt8)3;
 10060  1190  0021               	movlb	1	; select bank1
 10061  1191  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 10062  1192  39F0               	andlw	-16
 10063  1193  3803               	iorlw	3
 10064  1194  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 10065                           
 10066                           ;BVH2_Appl_Layer.c: 825: Cb1_oShutoff = 0;
 10067  1195  0022               	movlb	2	; select bank2
 10068  1196  01C1               	clrf	_Cb1_oShutoff^(0+256)
 10069                           
 10070                           ;BVH2_Appl_Layer.c: 826: Cb1_oCurrentAlarm = 1;
 10071  1197  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 10072  1198  0AC0               	incf	_Cb1_oCurrentAlarm^(0+256),f
 10073  1199                     l29941:	
 10074                           
 10075                           ;BVH2_Appl_Layer.c: 827: Cb1_StateCnt = 0 ;
 10076  1199  0021               	movlb	1	; select bank1
 10077  119A  01A4               	clrf	_Cb1_StateCnt^(0+128)
 10078  119B  01A5               	clrf	(_Cb1_StateCnt+1)^(0+128)
 10079  119C  29F6               	goto	l17591
 10080  119D                     l29943:	
 10081                           
 10082                           ;BVH2_Appl_Layer.c: 835: Cb1_Current_An___High_node_fcn1();
 10083  119D  2630  3190         	fcall	_Cb1_Current_An___High_node_fcn1
 10084                           
 10085                           ;BVH2_Appl_Layer.c: 838: break;
 10086  119F  29F6               	goto	l17591
 10087  11A0                     l29945:	
 10088                           
 10089                           ;BVH2_Appl_Layer.c: 842: if (Cb1_StateCnt > 200) {
 10090  11A0  3000               	movlw	0
 10091  11A1  0225               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 10092  11A2  30C9               	movlw	201
 10093  11A3  1903               	skipnz
 10094  11A4  0224               	subwf	_Cb1_StateCnt^(0+128),w
 10095  11A5  1C03               	skipc
 10096  11A6  29AE               	goto	l29951
 10097                           
 10098                           ;BVH2_Appl_Layer.c: 844: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 10099                           ;BVH2_Appl_Layer.c: 845: (UInt8)7;
 10100  11A7  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 10101  11A8  39F0               	andlw	-16
 10102  11A9  3807               	iorlw	7
 10103  11AA  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 10104                           
 10105                           ;BVH2_Appl_Layer.c: 846: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
 10106  11AB  0022               	movlb	2	; select bank2
 10107  11AC  0ABF               	incf	_Cb1_RestartCounter^(0+256),f
 10108                           
 10109                           ;BVH2_Appl_Layer.c: 847: }
 10110  11AD  29F6               	goto	l17591
 10111  11AE                     l29951:	
 10112                           
 10113                           ;BVH2_Appl_Layer.c: 848: else {
 10114                           ;BVH2_Appl_Layer.c: 851: if (bool_mat_currAlarm_bldc) {
 10115  11AE  0858               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 10116  11AF  1903               	btfsc	3,2
 10117  11B0  297F               	goto	l29925
 10118  11B1                     l29953:	
 10119                           
 10120                           ;BVH2_Appl_Layer.c: 853: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 10121                           ;BVH2_Appl_Layer.c: 854: (UInt8)1;
 10122  11B1  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 10123  11B2  39F0               	andlw	-16
 10124  11B3  3801               	iorlw	1
 10125  11B4  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 10126                           
 10127                           ;BVH2_Appl_Layer.c: 855: Cb1_StateCnt = 0 ;
 10128  11B5  01A4               	clrf	_Cb1_StateCnt^(0+128)
 10129  11B6  01A5               	clrf	(_Cb1_StateCnt+1)^(0+128)
 10130                           
 10131                           ;BVH2_Appl_Layer.c: 856: Cb1_oShutoff = 1;
 10132  11B7  0022               	movlb	2	; select bank2
 10133  11B8  01C1               	clrf	_Cb1_oShutoff^(0+256)
 10134  11B9  0AC1               	incf	_Cb1_oShutoff^(0+256),f
 10135                           
 10136                           ;BVH2_Appl_Layer.c: 857: Cb1_oCurrentAlarm = 1;
 10137  11BA  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 10138  11BB  0AC0               	incf	_Cb1_oCurrentAlarm^(0+256),f
 10139                           
 10140                           ;BVH2_Appl_Layer.c: 858: }
 10141  11BC  29F6               	goto	l17591
 10142  11BD                     l29963:	
 10143                           
 10144                           ;BVH2_Appl_Layer.c: 872: if (!(bool_mat_currAlarm_bldc)) {
 10145  11BD  08D8               	movf	_bool_mat_currAlarm_bldc^(0+128),f
 10146  11BE  1903               	btfsc	3,2
 10147  11BF  2990               	goto	l29935
 10148                           
 10149                           ;BVH2_Appl_Layer.c: 880: else {
 10150                           ;BVH2_Appl_Layer.c: 881: if (Cb1_StateCnt > 1) {
 10151  11C0  3000               	movlw	0
 10152  11C1  0225               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 10153  11C2  3002               	movlw	2
 10154  11C3  1903               	skipnz
 10155  11C4  0224               	subwf	_Cb1_StateCnt^(0+128),w
 10156  11C5  1803               	btfsc	3,0
 10157  11C6  29B1               	goto	l29953
 10158  11C7  297F               	goto	l29925
 10159  11C8                     l29985:	
 10160                           
 10161                           ;BVH2_Appl_Layer.c: 902: if (!(bool_mat_currAlarm_bldc)) {
 10162  11C8  08D8               	movf	_bool_mat_currAlarm_bldc^(0+128),f
 10163  11C9  1D03               	skipz
 10164  11CA  297F               	goto	l29925
 10165                           
 10166                           ;BVH2_Appl_Layer.c: 905: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
 10167  11CB  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 10168  11CC  39F0               	andlw	-16
 10169  11CD  3804               	iorlw	4
 10170  11CE  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 10171  11CF  2999               	goto	l29941
 10172  11D0                     l17610:	
 10173                           ;BVH2_Appl_Layer.c: 914: }
 10174                           ;BVH2_Appl_Layer.c: 915: default: {
 10175                           
 10176                           
 10177                           ;BVH2_Appl_Layer.c: 917: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
 10178  11D0  1B4B               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
 10179  11D1  29F6               	goto	l17591
 10180                           
 10181                           ;BVH2_Appl_Layer.c: 918: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
 10182  11D2  174B               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
 10183                           
 10184                           ;BVH2_Appl_Layer.c: 922: if (ui8_ResetMatlab != 0) {
 10185  11D3  086F               	movf	_ui8_ResetMatlab^(0+128),w
 10186  11D4  1903               	btfsc	3,2
 10187  11D5  29F6               	goto	l17591
 10188                           
 10189                           ;BVH2_Appl_Layer.c: 924: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 10190                           ;BVH2_Appl_Layer.c: 925: (UInt8)6;
 10191  11D6  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 10192  11D7  39F0               	andlw	-16
 10193  11D8  3806               	iorlw	6
 10194  11D9  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 10195                           
 10196                           ;BVH2_Appl_Layer.c: 926: Cb1_StateCnt = 0 ;
 10197  11DA  01A4               	clrf	_Cb1_StateCnt^(0+128)
 10198  11DB  01A5               	clrf	(_Cb1_StateCnt+1)^(0+128)
 10199  11DC  297C               	goto	l29923
 10200  11DD                     l30003:	
 10201  11DD  0021               	movlb	1	; select bank1
 10202  11DE  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 10203  11DF  390F               	andlw	15
 10204                           
 10205                           ; Switch size 1, requested type "space"
 10206                           ; Number of cases is 7, Range of values is 1 to 7
 10207                           ; switch strategies available:
 10208                           ; Name         Instructions Cycles
 10209                           ; simple_byte           22    12 (average)
 10210                           ; direct_byte           23     9 (fixed)
 10211                           ; jumptable            263     9 (fixed)
 10212                           ;	Chosen strategy is simple_byte
 10213  11E0  3A01               	xorlw	1	; case 1
 10214  11E1  1903               	skipnz
 10215  11E2  29C8               	goto	l29985
 10216  11E3  3A03               	xorlw	3	; case 2
 10217  11E4  1903               	skipnz
 10218  11E5  29BD               	goto	l29963
 10219  11E6  3A01               	xorlw	1	; case 3
 10220  11E7  1903               	skipnz
 10221  11E8  2983               	goto	l29927
 10222  11E9  3A07               	xorlw	7	; case 4
 10223  11EA  1903               	skipnz
 10224  11EB  29A0               	goto	l29945
 10225  11EC  3A01               	xorlw	1	; case 5
 10226  11ED  1903               	skipnz
 10227  11EE  299D               	goto	l29943
 10228  11EF  3A03               	xorlw	3	; case 6
 10229  11F0  1903               	skipnz
 10230  11F1  2972               	goto	l29915
 10231  11F2  3A01               	xorlw	1	; case 7
 10232  11F3  1903               	skipnz
 10233  11F4  298B               	goto	l29933
 10234  11F5  29D0               	goto	l17610
 10235  11F6                     l17591:	
 10236                           
 10237                           ;BVH2_Appl_Layer.c: 934: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||
 10238                           ;BVH2_Appl_Layer.c: 935: Cb1_oShutoff || Cb44_oShutoff;
 10239  11F6  0024               	movlb	4	; select bank4
 10240  11F7  01AA               	clrf	_BVH2_Appl_Layer$20278^(0+512)
 10241  11F8  0AAA               	incf	_BVH2_Appl_Layer$20278^(0+512),f
 10242  11F9  08A8               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512),f
 10243  11FA  1D03               	skipz
 10244  11FB  2A0B               	goto	l30017
 10245  11FC  0022               	movlb	2	; select bank2
 10246  11FD  08C9               	movf	_Cb56_odPumpOff^(0+256),f
 10247  11FE  1D03               	skipz
 10248  11FF  2A0B               	goto	l30017
 10249  1200  08BD               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),f
 10250  1201  1D03               	skipz
 10251  1202  2A0B               	goto	l30017
 10252  1203  08C1               	movf	_Cb1_oShutoff^(0+256),f
 10253  1204  1D03               	skipz
 10254  1205  2A0B               	goto	l30017
 10255  1206  08C7               	movf	_Cb44_oShutoff^(0+256),f
 10256  1207  1D03               	skipz
 10257  1208  2A0B               	goto	l30017
 10258  1209  0024               	movlb	4	; select bank4
 10259  120A  01AA               	clrf	_BVH2_Appl_Layer$20278^(0+512)
 10260  120B                     l30017:	
 10261  120B  0024               	movlb	4	; select bank4
 10262  120C  082A               	movf	_BVH2_Appl_Layer$20278^(0+512),w
 10263  120D  00BB               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512)
 10264                           
 10265                           ;BVH2_Appl_Layer.c: 938: Cb24_Reset = ui8_ResetMatlab != 0 ;
 10266  120E  3000               	movlw	0
 10267  120F  0021               	movlb	1	; select bank1
 10268  1210  08EF               	movf	_ui8_ResetMatlab^(0+128),f
 10269  1211  1D03               	skipz
 10270  1212  3001               	movlw	1
 10271  1213  0024               	movlb	4	; select bank4
 10272  1214  00B3               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+512)
 10273                           
 10274                           ;BVH2_Appl_Layer.c: 943: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
 10275  1215  0021               	movlb	1	; select bank1
 10276  1216  1F22               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 10277  1217  2B0E               	goto	l17615
 10278                           
 10279                           ;BVH2_Appl_Layer.c: 949: if (Sb1_Logical_Operator1 || Cb24_Reset) {
 10280  1218  0024               	movlb	4	; select bank4
 10281  1219  08BB               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),f
 10282  121A  1D03               	skipz
 10283  121B  2A25               	goto	l30043
 10284  121C  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 10285  121D  1903               	btfsc	3,2
 10286  121E  2AF7               	goto	l30161
 10287  121F  2A25               	goto	l30043
 10288  1220                     l30027:	
 10289                           
 10290                           ;BVH2_Appl_Layer.c: 954: Cb24_StateCnt = 0 ;
 10291  1220  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 10292  1221  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 10293  1222                     l30029:	
 10294                           
 10295                           ;BVH2_Appl_Layer.c: 955: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 10296  1222  30F8               	movlw	-8
 10297  1223  05A2               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10298                           
 10299                           ;BVH2_Appl_Layer.c: 956: break;
 10300  1224  2A3B               	goto	l17621
 10301  1225                     l30043:	
 10302  1225  0021               	movlb	1	; select bank1
 10303  1226  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10304  1227  3907               	andlw	7
 10305                           
 10306                           ; Switch size 1, requested type "space"
 10307                           ; Number of cases is 6, Range of values is 1 to 6
 10308                           ; switch strategies available:
 10309                           ; Name         Instructions Cycles
 10310                           ; simple_byte           19    10 (average)
 10311                           ; direct_byte           21     9 (fixed)
 10312                           ; jumptable            263     9 (fixed)
 10313                           ;	Chosen strategy is simple_byte
 10314  1228  3A01               	xorlw	1	; case 1
 10315  1229  1903               	skipnz
 10316  122A  2A22               	goto	l30029
 10317  122B  3A03               	xorlw	3	; case 2
 10318  122C  1903               	skipnz
 10319  122D  2A22               	goto	l30029
 10320  122E  3A01               	xorlw	1	; case 3
 10321  122F  1903               	skipnz
 10322  1230  2A20               	goto	l30027
 10323  1231  3A07               	xorlw	7	; case 4
 10324  1232  1903               	skipnz
 10325  1233  2A22               	goto	l30029
 10326  1234  3A01               	xorlw	1	; case 5
 10327  1235  1903               	skipnz
 10328  1236  2A22               	goto	l30029
 10329  1237  3A03               	xorlw	3	; case 6
 10330  1238  1903               	skipnz
 10331  1239  2A22               	goto	l30029
 10332  123A  2A3B               	goto	l17621
 10333  123B                     l17621:	
 10334                           
 10335                           ;BVH2_Appl_Layer.c: 979: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 10336  123B  1322               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 10337  123C  2B26               	goto	L22
 10338  123D                     l30047:	
 10339                           ;BVH2_Appl_Layer.c: 984: }
 10340                           
 10341                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 10342                           
 10343                           
 10344                           ;BVH2_Appl_Layer.c: 990: if (Cb24_StateCnt) {
 10345  123D  0821               	movf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 10346  123E  0420               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 10347  123F  1903               	skipnz
 10348  1240  2A92               	goto	L9
 10349                           
 10350                           ;BVH2_Appl_Layer.c: 994: Cb24_StateCnt = 0 ;
 10351  1241  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 10352  1242  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 10353  1243                     l30051:	
 10354                           
 10355                           ;BVH2_Appl_Layer.c: 995: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int)
 10356                           ;BVH2_Appl_Layer.c: 996: (UInt8)2;
 10357  1243  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10358  1244  39F8               	andlw	-8
 10359  1245  3802               	iorlw	2
 10360  1246  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10361                           
 10362                           ;BVH2_Appl_Layer.c: 997: }
 10363  1247  2B2B               	goto	l30183
 10364  1248                     l30055:	
 10365                           ;BVH2_Appl_Layer.c: 998: else {
 10366                           ;BVH2_Appl_Layer.c: 999: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 10367                           
 10368                           
 10369                           ;BVH2_Appl_Layer.c: 1009: if (Cb24_StateCnt > 1000) {
 10370  1248  3003               	movlw	3
 10371  1249  0221               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 10372  124A  30E9               	movlw	233
 10373  124B  1903               	skipnz
 10374  124C  0220               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 10375  124D  1C03               	skipc
 10376  124E  2A58               	goto	l30067
 10377                           
 10378                           ;BVH2_Appl_Layer.c: 1012: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 10379                           ;BVH2_Appl_Layer.c: 1013: (UInt8)5;
 10380  124F  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10381  1250  39F8               	andlw	-8
 10382  1251  3805               	iorlw	5
 10383                           
 10384                           ;BVH2_Appl_Layer.c: 1014: Cb24_StateCnt = 0 ;
 10385                           
 10386                           ;BVH2_Appl_Layer.c: 1015: Cb24_BadCnt = 0 ;
 10387  1252  27B7  3190         	fcall	PL26	;call to abstracted procedure
 10388                           
 10389                           ;BVH2_Appl_Layer.c: 1016: Cb24_oMotorStalled = 0;
 10390  1254  0022               	movlb	2	; select bank2
 10391  1255  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10392                           
 10393                           ;BVH2_Appl_Layer.c: 1019: Cb24_oStalledAlarm = 0;
 10394  1256  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10395                           
 10396                           ;BVH2_Appl_Layer.c: 1020: }
 10397  1257  2B2B               	goto	l30183
 10398  1258                     l30067:	
 10399                           
 10400                           ;BVH2_Appl_Layer.c: 1021: else {
 10401                           ;BVH2_Appl_Layer.c: 1024: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 10402  1258  3000               	movlw	0
 10403  1259  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10404  125A  3005               	movlw	5
 10405  125B  1903               	skipnz
 10406  125C  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10407  125D  1C03               	skipc
 10408  125E  2A66               	goto	l30071
 10409  125F  3001               	movlw	1
 10410  1260  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10411  1261  302D               	movlw	45
 10412  1262  1903               	skipnz
 10413  1263  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10414  1264  1C03               	skipc
 10415  1265  2A92               	goto	L9
 10416  1266                     l30071:	
 10417                           
 10418                           ;BVH2_Appl_Layer.c: 1027: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 10419                           ;BVH2_Appl_Layer.c: 1028: (UInt8)1;
 10420  1266  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10421  1267  39F8               	andlw	-8
 10422  1268  3801               	iorlw	1
 10423  1269  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10424                           
 10425                           ;BVH2_Appl_Layer.c: 1029: Cb24_oStalledAlarm = 0;
 10426  126A  0022               	movlb	2	; select bank2
 10427  126B  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10428                           
 10429                           ;BVH2_Appl_Layer.c: 1030: Cb24_StateCnt = 0 ;
 10430  126C  0021               	movlb	1	; select bank1
 10431  126D  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 10432  126E  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 10433                           
 10434                           ;BVH2_Appl_Layer.c: 1031: }
 10435  126F  2B2B               	goto	l30183
 10436  1270                     l30079:	
 10437                           
 10438                           ;BVH2_Appl_Layer.c: 1044: if (Cb24_BadCnt > 100) {
 10439  1270  3000               	movlw	0
 10440  1271  0023               	movlb	3	; select bank3
 10441  1272  0243               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 10442  1273  3065               	movlw	101
 10443  1274  1903               	skipnz
 10444  1275  0242               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 10445  1276  1C03               	skipc
 10446  1277  2A81               	goto	l30089
 10447                           
 10448                           ;BVH2_Appl_Layer.c: 1047: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 10449                           ;BVH2_Appl_Layer.c: 1048: (UInt8)4;
 10450  1278  0021               	movlb	1	; select bank1
 10451  1279  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10452                           
 10453                           ;BVH2_Appl_Layer.c: 1049: Cb24_StateCnt = 0 ;
 10454                           
 10455                           ;BVH2_Appl_Layer.c: 1050: Cb24_oMotorStalled = 1;
 10456  127A  27CF  3190         	fcall	PL34	;call to abstracted procedure
 10457  127C  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10458  127D  0AB8               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 10459                           
 10460                           ;BVH2_Appl_Layer.c: 1051: Cb24_oStalledAlarm = 1;
 10461  127E  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10462  127F  0AB9               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 10463                           
 10464                           ;BVH2_Appl_Layer.c: 1052: }
 10465  1280  2B2B               	goto	l30183
 10466  1281                     l30089:	
 10467                           
 10468                           ;BVH2_Appl_Layer.c: 1053: else {
 10469                           ;BVH2_Appl_Layer.c: 1056: if ((ui16_Speed_mat >= 5) && (ui16_Speed_mat <= 300)) {
 10470  1281  27FC  3190         	fcall	PL52	;call to abstracted procedure
 10471  1283  1903               	skipnz
 10472  1284  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10473  1285  1C03               	skipc
 10474  1286  2A8E               	goto	l30095
 10475  1287  3001               	movlw	1
 10476  1288  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10477  1289  302D               	movlw	45
 10478  128A  1903               	skipnz
 10479  128B  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10480  128C  1C03               	btfss	3,0
 10481  128D  2A43               	goto	l30051
 10482  128E                     l30095:	
 10483                           
 10484                           ;BVH2_Appl_Layer.c: 1062: else {
 10485                           ;BVH2_Appl_Layer.c: 1063: Cb24_BadCnt = Cb24_BadCnt + 1 ;
 10486  128E  0023               	movlb	3	; select bank3
 10487  128F  0AC2               	incf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),f
 10488  1290  1903               	skipnz
 10489  1291  0AC3               	incf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),f
 10490  1292                     L9:	
 10491                           
 10492                           ;BVH2_Appl_Layer.c: 1064: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 10493  1292  0021               	movlb	1	; select bank1
 10494  1293  0AA0               	incf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),f
 10495  1294  1903               	skipnz
 10496  1295  0AA1               	incf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),f
 10497  1296  2B2B               	goto	l30183
 10498  1297                     l30099:	
 10499                           
 10500                           ;BVH2_Appl_Layer.c: 1089: if (Cb24_StateCnt > 10) {
 10501  1297  3000               	movlw	0
 10502  1298  0221               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 10503  1299  300B               	movlw	11
 10504  129A  1903               	skipnz
 10505  129B  0220               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 10506  129C  1C03               	skipc
 10507  129D  2ADC               	goto	l30141
 10508                           
 10509                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_RestartCounter == 10) {
 10510  129E  0022               	movlb	2	; select bank2
 10511  129F  0837               	movf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),w
 10512  12A0  3A0A               	xorlw	10
 10513  12A1  1D03               	skipz
 10514  12A2  2AAF               	goto	l30113
 10515                           
 10516                           ;BVH2_Appl_Layer.c: 1092: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 10517  12A3  30F8               	movlw	-8
 10518  12A4  0021               	movlb	1	; select bank1
 10519  12A5  05A2               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10520                           
 10521                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 10522  12A6  1322               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 10523                           
 10524                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
 10525  12A7  1423               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 10526                           
 10527                           ;BVH2_Appl_Layer.c: 1095: Cb24_oStalledAlarm = 1;
 10528  12A8  0022               	movlb	2	; select bank2
 10529  12A9  3018               	movlw	24
 10530  12AA  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10531  12AB  0AB9               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 10532  12AC  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10533  12AD  0AB8               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 10534  12AE  2AD5               	goto	L11
 10535  12AF                     l30113:	
 10536                           ;BVH2_Appl_Layer.c: 1098: }
 10537                           
 10538                           ;BVH2_Appl_Layer.c: 1097: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 10539                           
 10540                           
 10541                           ;BVH2_Appl_Layer.c: 1099: else {
 10542                           ;BVH2_Appl_Layer.c: 1102: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 10543  12AF  27FC  3190         	fcall	PL52	;call to abstracted procedure
 10544  12B1  1903               	skipnz
 10545  12B2  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10546  12B3  1C03               	skipc
 10547  12B4  2ABC               	goto	l30117
 10548  12B5  3001               	movlw	1
 10549  12B6  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10550  12B7  302D               	movlw	45
 10551  12B8  1903               	skipnz
 10552  12B9  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10553  12BA  1C03               	skipc
 10554  12BB  2AC5               	goto	l30127
 10555  12BC                     l30117:	
 10556                           
 10557                           ;BVH2_Appl_Layer.c: 1105: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 10558                           ;BVH2_Appl_Layer.c: 1106: (UInt8)4;
 10559  12BC  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10560                           
 10561                           ;BVH2_Appl_Layer.c: 1107: Cb24_StateCnt = 0 ;
 10562                           
 10563                           ;BVH2_Appl_Layer.c: 1108: Cb24_oMotorStalled = 1;
 10564  12BD  27CF  3190         	fcall	PL34	;call to abstracted procedure
 10565  12BF  3018               	movlw	24
 10566  12C0  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10567  12C1  0AB8               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 10568                           
 10569                           ;BVH2_Appl_Layer.c: 1109: Cb24_oStalledAlarm = 1;
 10570  12C2  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10571  12C3  0AB9               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 10572                           
 10573                           ;BVH2_Appl_Layer.c: 1110: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 10574  12C4  2AD5               	goto	L11
 10575  12C5                     l30127:	
 10576                           ;BVH2_Appl_Layer.c: 1111: }
 10577                           
 10578                           
 10579                           ;BVH2_Appl_Layer.c: 1112: else {
 10580                           ;BVH2_Appl_Layer.c: 1113: if (Cb24_StateCnt > 200) {
 10581  12C5  3000               	movlw	0
 10582  12C6  0221               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 10583  12C7  30C9               	movlw	201
 10584  12C8  1903               	skipnz
 10585  12C9  0220               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 10586                           
 10587                           ;BVH2_Appl_Layer.c: 1116: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 10588                           ;BVH2_Appl_Layer.c: 1117: (UInt8)5;
 10589  12CA  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10590  12CB  1C03               	skipc
 10591  12CC  2AD8               	goto	L27
 10592  12CD  39F8               	andlw	-8
 10593  12CE  3805               	iorlw	5
 10594                           
 10595                           ;BVH2_Appl_Layer.c: 1118: Cb24_StateCnt = 0 ;
 10596                           
 10597                           ;BVH2_Appl_Layer.c: 1119: Cb24_BadCnt = 0 ;
 10598  12CF  27B7  3190         	fcall	PL26	;call to abstracted procedure
 10599                           
 10600                           ;BVH2_Appl_Layer.c: 1120: Cb24_oMotorStalled = 0;
 10601  12D1  0022               	movlb	2	; select bank2
 10602  12D2  3018               	movlw	24
 10603  12D3  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10604  12D4  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10605  12D5                     L11:	
 10606                           
 10607                           ;BVH2_Appl_Layer.c: 1124: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 10608  12D5  0021               	movlb	1	; select bank1
 10609  12D6  04A2               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10610                           
 10611                           ;BVH2_Appl_Layer.c: 1125: }
 10612  12D7  2ADE               	goto	l17656
 10613  12D8                     L27:	
 10614                           ;BVH2_Appl_Layer.c: 1126: else {
 10615                           ;BVH2_Appl_Layer.c: 1127: SIBFS_Motor_Stalled_b.Cb24_glflag = 1 ;
 10616                           
 10617  12D8  39E7               	andlw	-25
 10618  12D9  3808               	iorlw	8
 10619  12DA  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10620  12DB  2ADE               	goto	l17656
 10621  12DC                     l30141:	
 10622                           
 10623                           ;BVH2_Appl_Layer.c: 1132: else {
 10624                           ;BVH2_Appl_Layer.c: 1133: SIBFS_Motor_Stalled_b.Cb24_glflag = 0 ;
 10625  12DC  30E7               	movlw	-25
 10626  12DD  05A2               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10627  12DE                     l17656:	
 10628                           
 10629                           ;BVH2_Appl_Layer.c: 1134: }
 10630                           ;BVH2_Appl_Layer.c: 1135: if (SIBFS_Motor_Stalled_b.Cb24_glflag <= 2) {
 10631  12DE  0C22               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10632  12DF  27DD  3190         	fcall	PL37	;call to abstracted procedure
 10633  12E1  1D03               	btfss	3,2
 10634  12E2  2A92               	goto	L9
 10635  12E3  2B2B               	goto	l30183
 10636  12E4                     l30145:	
 10637                           
 10638                           ;BVH2_Appl_Layer.c: 1146: if (Cb24_StateCnt > 200) {
 10639  12E4  3000               	movlw	0
 10640  12E5  0221               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 10641  12E6  30C9               	movlw	201
 10642  12E7  1903               	skipnz
 10643  12E8  0220               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 10644  12E9  1C03               	skipc
 10645  12EA  2A92               	goto	L9
 10646                           
 10647                           ;BVH2_Appl_Layer.c: 1150: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 10648                           ;BVH2_Appl_Layer.c: 1151: (UInt8)6;
 10649  12EB  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10650  12EC  39F8               	andlw	-8
 10651  12ED  3806               	iorlw	6
 10652  12EE  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10653                           
 10654                           ;BVH2_Appl_Layer.c: 1152: Cb24_StateCnt = 0 ;
 10655  12EF  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 10656  12F0  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 10657                           
 10658                           ;BVH2_Appl_Layer.c: 1153: Cb24_oMotorStalled = 0;
 10659  12F1  0022               	movlb	2	; select bank2
 10660  12F2  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10661                           
 10662                           ;BVH2_Appl_Layer.c: 1154: Cb24_oStalledAlarm = 1;
 10663  12F3  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10664  12F4  0AB9               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 10665                           
 10666                           ;BVH2_Appl_Layer.c: 1155: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
 10667  12F5  0AB7               	incf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),f
 10668                           
 10669                           ;BVH2_Appl_Layer.c: 1156: }
 10670  12F6  2B2B               	goto	l30183
 10671  12F7                     l30161:	
 10672  12F7  0021               	movlb	1	; select bank1
 10673  12F8  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10674  12F9  3907               	andlw	7
 10675                           
 10676                           ; Switch size 1, requested type "space"
 10677                           ; Number of cases is 6, Range of values is 1 to 6
 10678                           ; switch strategies available:
 10679                           ; Name         Instructions Cycles
 10680                           ; simple_byte           19    10 (average)
 10681                           ; direct_byte           21     9 (fixed)
 10682                           ; jumptable            263     9 (fixed)
 10683                           ;	Chosen strategy is simple_byte
 10684  12FA  3A01               	xorlw	1	; case 1
 10685  12FB  1903               	skipnz
 10686  12FC  2A70               	goto	l30079
 10687  12FD  3A03               	xorlw	3	; case 2
 10688  12FE  1903               	skipnz
 10689  12FF  2A48               	goto	l30055
 10690  1300  3A01               	xorlw	1	; case 3
 10691  1301  1903               	skipnz
 10692  1302  2A3D               	goto	l30047
 10693  1303  3A07               	xorlw	7	; case 4
 10694  1304  1903               	skipnz
 10695  1305  2AE4               	goto	l30145
 10696  1306  3A01               	xorlw	1	; case 5
 10697  1307  1903               	skipnz
 10698  1308  2A43               	goto	l30051
 10699  1309  3A03               	xorlw	3	; case 6
 10700  130A  1903               	skipnz
 10701  130B  2A97               	goto	l30099
 10702  130C  2B2B               	goto	l30183
 10703                           
 10704                           ;BVH2_Appl_Layer.c: 1166: }
 10705                           ;BVH2_Appl_Layer.c: 1169: }
 10706  130D  2B2B               	goto	l30183
 10707  130E                     l17615:	
 10708                           
 10709                           ;BVH2_Appl_Layer.c: 1170: else {
 10710                           ;BVH2_Appl_Layer.c: 1172: if (SIBFS_Motor_Stalled_b.Cb32_default) {
 10711  130E  1FA2               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10712  130F  2B1D               	goto	l17662
 10713                           
 10714                           ;BVH2_Appl_Layer.c: 1177: if (!(Sb1_Logical_Operator1)) {
 10715  1310  0024               	movlb	4	; select bank4
 10716  1311  08BB               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),f
 10717  1312  1D03               	skipz
 10718  1313  2B2B               	goto	l30183
 10719                           
 10720                           ;BVH2_Appl_Layer.c: 1180: SIBFS_Motor_Stalled_b.Cb32_default = 0;
 10721  1314  0021               	movlb	1	; select bank1
 10722  1315  13A2               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10723                           
 10724                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
 10725  1316  1722               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 10726                           
 10727                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
 10728  1317  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10729  1318  39F8               	andlw	-8
 10730  1319  3803               	iorlw	3
 10731                           
 10732                           ;BVH2_Appl_Layer.c: 1183: Cb24_StateCnt = 0 ;
 10733                           
 10734                           ;BVH2_Appl_Layer.c: 1184: Cb24_BadCnt = 0 ;
 10735  131A  27B7  3190         	fcall	PL26	;call to abstracted procedure
 10736  131C  2B2B               	goto	l30183
 10737  131D                     l17662:	
 10738                           
 10739                           ;BVH2_Appl_Layer.c: 1189: else {
 10740                           ;BVH2_Appl_Layer.c: 1191: if (!(SIBFS_Motor_Stalled_b.Cb33_Stop)) {
 10741  131D  1C23               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 10742                           
 10743                           ;BVH2_Appl_Layer.c: 1193: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
 10744  131E  1AA2               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 10745  131F  2B2B               	goto	l30183
 10746                           
 10747                           ;BVH2_Appl_Layer.c: 1194: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
 10748  1320  16A2               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 10749                           
 10750                           ;BVH2_Appl_Layer.c: 1197: if (Cb24_Reset) {
 10751  1321  0024               	movlb	4	; select bank4
 10752  1322  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 10753  1323  1903               	btfsc	3,2
 10754  1324  2B2B               	goto	l30183
 10755                           
 10756                           ;BVH2_Appl_Layer.c: 1199: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 10757  1325  0021               	movlb	1	; select bank1
 10758  1326                     L22:	
 10759  1326  17A2               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10760                           
 10761                           ;BVH2_Appl_Layer.c: 981: Cb24_oMotorStalled = 0;
 10762  1327  0022               	movlb	2	; select bank2
 10763  1328  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10764                           
 10765                           ;BVH2_Appl_Layer.c: 982: Cb24_oStalledAlarm = 0;
 10766  1329  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10767                           
 10768                           ;BVH2_Appl_Layer.c: 983: Cb24_RestartCounter = 0 ;
 10769  132A  01B7               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256)
 10770  132B                     l30183:	
 10771                           
 10772                           ;BVH2_Appl_Layer.c: 1213: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
 10773  132B  0024               	movlb	4	; select bank4
 10774  132C  01AB               	clrf	_BVH2_Appl_Layer$20279^(0+512)
 10775  132D  0AAB               	incf	_BVH2_Appl_Layer$20279^(0+512),f
 10776  132E  0022               	movlb	2	; select bank2
 10777  132F  08C5               	movf	_Cb34_odFixedValueSel^(0+256),f
 10778  1330  1D03               	skipz
 10779  1331  2B38               	goto	l30191
 10780  1332  0021               	movlb	1	; select bank1
 10781  1333  08C9               	movf	_Cb56_odFixedValueSel^(0+128),f
 10782  1334  1D03               	skipz
 10783  1335  2B38               	goto	l30191
 10784  1336  0024               	movlb	4	; select bank4
 10785  1337  01AB               	clrf	_BVH2_Appl_Layer$20279^(0+512)
 10786  1338                     l30191:	
 10787  1338  0024               	movlb	4	; select bank4
 10788  1339  082B               	movf	_BVH2_Appl_Layer$20279^(0+512),w
 10789  133A  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512)
 10790                           
 10791                           ;BVH2_Appl_Layer.c: 1217: if (bool_start_demand_mat) {
 10792  133B  0022               	movlb	2	; select bank2
 10793  133C  0850               	movf	_bool_start_demand_mat^(0+256),w
 10794  133D  1903               	btfsc	3,2
 10795  133E  2B46               	goto	l30197
 10796                           
 10797                           ;BVH2_Appl_Layer.c: 1218: Sb2_Switch5 = ui8_fixed_start_speed_mat;
 10798  133F  0023               	movlb	3	; select bank3
 10799  1340  0869               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
 10800  1341  0024               	movlb	4	; select bank4
 10801  1342  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 10802  1343  0023               	movlb	3	; select bank3
 10803  1344  0868               	movf	_ui8_fixed_start_speed_mat^(0+384),w
 10804  1345  2B61               	goto	L12
 10805  1346                     l30197:	
 10806                           ;BVH2_Appl_Layer.c: 1219: }
 10807                           
 10808                           
 10809                           ;BVH2_Appl_Layer.c: 1220: else {
 10810                           ;BVH2_Appl_Layer.c: 1223: if (Cb34_odFixedLowValueSel) {
 10811  1346  0844               	movf	_Cb34_odFixedLowValueSel^(0+256),w
 10812  1347  1903               	btfsc	3,2
 10813  1348  2B50               	goto	l30201
 10814                           
 10815                           ;BVH2_Appl_Layer.c: 1224: Sb2_Switch5 = ui16_Speed_demand_mat_min;
 10816  1349  0023               	movlb	3	; select bank3
 10817  134A  0861               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
 10818  134B  0024               	movlb	4	; select bank4
 10819  134C  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 10820  134D  0023               	movlb	3	; select bank3
 10821  134E  0860               	movf	_ui16_Speed_demand_mat_min^(0+384),w
 10822  134F  2B61               	goto	L12
 10823  1350                     l30201:	
 10824                           ;BVH2_Appl_Layer.c: 1225: }
 10825                           
 10826                           
 10827                           ;BVH2_Appl_Layer.c: 1226: else {
 10828                           ;BVH2_Appl_Layer.c: 1229: if (Sb1_Logical_Operator5) {
 10829  1350  0024               	movlb	4	; select bank4
 10830  1351  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 10831  1352  1903               	btfsc	3,2
 10832  1353  2B5B               	goto	l30205
 10833                           
 10834                           ;BVH2_Appl_Layer.c: 1230: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
 10835  1354  0023               	movlb	3	; select bank3
 10836  1355  085F               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
 10837  1356  0024               	movlb	4	; select bank4
 10838  1357  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 10839  1358  0023               	movlb	3	; select bank3
 10840  1359  085E               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
 10841  135A  2B61               	goto	L12
 10842  135B                     l30205:	
 10843                           ;BVH2_Appl_Layer.c: 1231: }
 10844                           
 10845                           
 10846                           ;BVH2_Appl_Layer.c: 1232: else {
 10847                           ;BVH2_Appl_Layer.c: 1233: Sb2_Switch5 = ui16_Speed_demand_mat;
 10848  135B  0023               	movlb	3	; select bank3
 10849  135C  085D               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 10850  135D  0024               	movlb	4	; select bank4
 10851  135E  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 10852  135F  0023               	movlb	3	; select bank3
 10853  1360  085C               	movf	_ui16_Speed_demand_mat^(0+384),w
 10854  1361                     L12:	
 10855  1361  0024               	movlb	4	; select bank4
 10856  1362  00B1               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+512)
 10857                           
 10858                           ;BVH2_Appl_Layer.c: 1234: }
 10859                           ;BVH2_Appl_Layer.c: 1235: }
 10860                           ;BVH2_Appl_Layer.c: 1236: }
 10861                           ;BVH2_Appl_Layer.c: 1239: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
 10862  1363  0021               	movlb	1	; select bank1
 10863  1364  0833               	movf	(_ui16_Speed_mat+1)^(0+128),w
 10864  1365  0024               	movlb	4	; select bank4
 10865  1366  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512)
 10866  1367  0021               	movlb	1	; select bank1
 10867  1368  0832               	movf	_ui16_Speed_mat^(0+128),w
 10868  1369  0024               	movlb	4	; select bank4
 10869  136A  00B7               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+512)
 10870  136B  0831               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+512),w
 10871  136C  02B7               	subwf	BVH2_Appl_Layer@Sb2_Error^(0+512),f
 10872  136D  0832               	movf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512),w
 10873  136E  3BB8               	subwfb	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),f
 10874                           
 10875                           ;BVH2_Appl_Layer.c: 1244: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 10876  136F  0021               	movlb	1	; select bank1
 10877  1370  1CC6               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10878  1371  2B9C               	goto	l17676
 10879                           
 10880                           ;BVH2_Appl_Layer.c: 1251: if ((((Int32)ui16_mat_Current) < (ui16_dryRun_Thresh - 5)) && 
      +                          (ui16_Speed_mat < 400) &&
 10881                           ;BVH2_Appl_Layer.c: 1252: (ui16_Speed_mat > 80)) {
 10882  1372  0023               	movlb	3	; select bank3
 10883  1373  086E               	movf	_ui16_dryRun_Thresh^(0+384),w
 10884  1374  3EFB               	addlw	251
 10885  1375  0020               	movlb	0	; select bank0
 10886  1376  00BA               	movwf	??_BVH2_Appl_Layer
 10887  1377  30FF               	movlw	255
 10888  1378  0023               	movlb	3	; select bank3
 10889  1379  3D6F               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 10890  137A  0020               	movlb	0	; select bank0
 10891  137B  00BB               	movwf	??_BVH2_Appl_Layer+1
 10892  137C  0021               	movlb	1	; select bank1
 10893  137D  0239               	subwf	(_ui16_mat_Current+1)^(0+128),w
 10894  137E  1D03               	skipz
 10895  137F  2B84               	goto	u10485
 10896  1380  0020               	movlb	0	; select bank0
 10897  1381  083A               	movf	??_BVH2_Appl_Layer,w
 10898  1382  0021               	movlb	1	; select bank1
 10899  1383  0238               	subwf	_ui16_mat_Current^(0+128),w
 10900  1384                     u10485:	
 10901  1384  1803               	skipnc
 10902  1385  2BE1               	goto	l30253
 10903  1386  3001               	movlw	1
 10904  1387  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10905  1388  3090               	movlw	144
 10906  1389  1903               	skipnz
 10907  138A  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10908  138B  1803               	skipnc
 10909  138C  2BE1               	goto	l30253
 10910  138D  3000               	movlw	0
 10911  138E  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10912  138F  3051               	movlw	81
 10913  1390  1903               	skipnz
 10914  1391  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10915  1392  1C03               	skipc
 10916  1393  2BE1               	goto	l30253
 10917                           
 10918                           ;BVH2_Appl_Layer.c: 1255: SIBFS_Dry_Running_b.Cb15_greenState = 0;
 10919  1394  10C6               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10920                           
 10921                           ;BVH2_Appl_Layer.c: 1256: SIBFS_Dry_Running_b.Cb16_DryRunning = 1;
 10922  1395  1546               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10923                           
 10924                           ;BVH2_Appl_Layer.c: 1257: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 1;
 10925  1396  1646               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10926                           
 10927                           ;BVH2_Appl_Layer.c: 1258: Cb14_StateCnt = 0 ;
 10928  1397  0023               	movlb	3	; select bank3
 10929  1398  01BE               	clrf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384)
 10930  1399  01BF               	clrf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384)
 10931                           
 10932                           ;BVH2_Appl_Layer.c: 1259: Cb14_oDryRunAlarm = 0;
 10933  139A  0021               	movlb	1	; select bank1
 10934  139B  2BE0               	goto	l30229
 10935  139C                     l17676:	
 10936                           
 10937                           ;BVH2_Appl_Layer.c: 1264: else {
 10938                           ;BVH2_Appl_Layer.c: 1266: if (SIBFS_Dry_Running_b.Cb16_DryRunning) {
 10939  139C  1D46               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10940  139D  2BDA               	goto	l17679
 10941                           
 10942                           ;BVH2_Appl_Layer.c: 1270: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 10943  139E  1DC6               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10944                           
 10945                           ;BVH2_Appl_Layer.c: 1272: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 10946  139F  1E46               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10947  13A0  2BE1               	goto	l30253
 10948                           
 10949                           ;BVH2_Appl_Layer.c: 1279: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >
 10950                           ;BVH2_Appl_Layer.c: 1280: 400) || (ui16_Speed_mat < 80)) {
 10951  13A1  0023               	movlb	3	; select bank3
 10952  13A2  086E               	movf	_ui16_dryRun_Thresh^(0+384),w
 10953  13A3  3E05               	addlw	5
 10954  13A4  0020               	movlb	0	; select bank0
 10955  13A5  00BA               	movwf	??_BVH2_Appl_Layer
 10956  13A6  3000               	movlw	0
 10957  13A7  0023               	movlb	3	; select bank3
 10958  13A8  3D6F               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 10959  13A9  2786  3190         	fcall	PL12	;call to abstracted procedure
 10960  13AB  1C03               	skipc
 10961  13AC  2BBC               	goto	l17684
 10962  13AD  3001               	movlw	1
 10963  13AE  0021               	movlb	1	; select bank1
 10964  13AF  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10965  13B0  3091               	movlw	145
 10966  13B1  1903               	skipnz
 10967  13B2  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10968  13B3  1803               	skipnc
 10969  13B4  2BBC               	goto	l17684
 10970  13B5  3000               	movlw	0
 10971  13B6  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10972  13B7  3050               	movlw	80
 10973  13B8  1903               	skipnz
 10974  13B9  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10975  13BA  1803               	skipnc
 10976  13BB  2BC0               	goto	l30231
 10977  13BC                     l17684:	
 10978                           
 10979                           ;BVH2_Appl_Layer.c: 1282: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10980  13BC  0021               	movlb	1	; select bank1
 10981  13BD  1246               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10982                           
 10983                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 10984  13BE  1146               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10985  13BF  2BDF               	goto	L23
 10986  13C0                     l30231:	
 10987                           ;BVH2_Appl_Layer.c: 1286: }
 10988                           
 10989                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10990                           
 10991                           
 10992                           ;BVH2_Appl_Layer.c: 1287: else {
 10993                           ;BVH2_Appl_Layer.c: 1288: if ((ui8_PWM_dc_mat < 20) && (ui8_PWM_dc_mat > 4)) {
 10994  13C0  3014               	movlw	20
 10995  13C1  025E               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10996  13C2  1803               	skipnc
 10997  13C3  2BC8               	goto	l30239
 10998  13C4  3005               	movlw	5
 10999  13C5  025E               	subwf	_ui8_PWM_dc_mat^(0+128),w
 11000  13C6  1803               	btfsc	3,0
 11001  13C7  2BBC               	goto	l17684
 11002  13C8                     l30239:	
 11003                           
 11004                           ;BVH2_Appl_Layer.c: 1295: else {
 11005                           ;BVH2_Appl_Layer.c: 1296: if (Cb14_StateCnt > 2000) {
 11006  13C8  3007               	movlw	7
 11007  13C9  0023               	movlb	3	; select bank3
 11008  13CA  023F               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 11009  13CB  30D1               	movlw	209
 11010  13CC  1903               	skipnz
 11011  13CD  023E               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 11012  13CE  1C03               	skipc
 11013  13CF  2BD6               	goto	l30243
 11014                           
 11015                           ;BVH2_Appl_Layer.c: 1298: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 11016  13D0  0021               	movlb	1	; select bank1
 11017  13D1  1246               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 11018                           
 11019                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb17_redState = 1;
 11020  13D2  15C6               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 11021                           
 11022                           ;BVH2_Appl_Layer.c: 1300: Cb14_oDryRunAlarm = 1;
 11023  13D3  01C2               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 11024  13D4  0AC2               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 11025                           
 11026                           ;BVH2_Appl_Layer.c: 1301: }
 11027  13D5  2BE1               	goto	l30253
 11028  13D6                     l30243:	
 11029                           
 11030                           ;BVH2_Appl_Layer.c: 1302: else {
 11031                           ;BVH2_Appl_Layer.c: 1303: Cb14_StateCnt = Cb14_StateCnt + 1 ;
 11032  13D6  0ABE               	incf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),f
 11033  13D7  1903               	skipnz
 11034  13D8  0ABF               	incf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),f
 11035  13D9  2BE1               	goto	l30253
 11036  13DA                     l17679:	
 11037                           
 11038                           ;BVH2_Appl_Layer.c: 1314: else {
 11039                           ;BVH2_Appl_Layer.c: 1316: if (!(SIBFS_Dry_Running_b.Cb14_Dry_Running)) {
 11040  13DA  1846               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 11041  13DB  2BE1               	goto	l30253
 11042                           
 11043                           ;BVH2_Appl_Layer.c: 1317: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
 11044  13DC  1446               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 11045                           
 11046                           ;BVH2_Appl_Layer.c: 1320: if (ui8_ResetMatlab == 1) {
 11047  13DD  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 11048  13DE  2BE1               	goto	l30253
 11049  13DF                     L23:	
 11050                           
 11051                           ;BVH2_Appl_Layer.c: 1322: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 11052  13DF  14C6               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 11053  13E0                     l30229:	
 11054                           
 11055                           ;BVH2_Appl_Layer.c: 1285: Cb14_oDryRunAlarm = 0;
 11056  13E0  01C2               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 11057  13E1                     l30253:	
 11058                           
 11059                           ;BVH2_Appl_Layer.c: 1324: }
 11060                           ;BVH2_Appl_Layer.c: 1325: }
 11061                           ;BVH2_Appl_Layer.c: 1326: }
 11062                           ;BVH2_Appl_Layer.c: 1327: }
 11063                           ;BVH2_Appl_Layer.c: 1334: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenState) {
 11064  13E1  0021               	movlb	1	; select bank1
 11065  13E2  1CC5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 11066  13E3  2BEF               	goto	l17693
 11067                           
 11068                           ;BVH2_Appl_Layer.c: 1339: if (Cb14_oDryRunAlarm) {
 11069  13E4  0842               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 11070  13E5  1903               	btfsc	3,2
 11071  13E6  2C2D               	goto	l30301
 11072                           
 11073                           ;BVH2_Appl_Layer.c: 1342: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 11074  13E7  10C5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 11075                           
 11076                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
 11077  13E8  1545               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 11078  13E9                     L13:	
 11079                           
 11080                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 11081  13E9  15C5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 11082                           
 11083                           ;BVH2_Appl_Layer.c: 1345: Cb19_Counter = 0 ;
 11084                           
 11085                           ;BVH2_Appl_Layer.c: 1346: Cb19_oDryRun66 = 1;
 11086  13EA  27EB  3190         	fcall	PL42	;call to abstracted procedure
 11087  13EC  0AB6               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),f
 11088                           
 11089                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun55 = 0;
 11090  13ED  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 11091                           
 11092                           ;BVH2_Appl_Layer.c: 1348: }
 11093                           ;BVH2_Appl_Layer.c: 1351: }
 11094  13EE  2C2D               	goto	l30301
 11095  13EF                     l17693:	
 11096                           
 11097                           ;BVH2_Appl_Layer.c: 1352: else {
 11098                           ;BVH2_Appl_Layer.c: 1354: if (SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm) {
 11099  13EF  1D45               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 11100  13F0  2C20               	goto	l17696
 11101                           
 11102                           ;BVH2_Appl_Layer.c: 1359: if (!(Cb14_oDryRunAlarm)) {
 11103  13F1  08C2               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 11104  13F2  1D03               	skipz
 11105  13F3  2BFD               	goto	l17697
 11106                           
 11107                           ;BVH2_Appl_Layer.c: 1364: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 11108  13F4  1DC5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 11109  13F5  2BF8               	goto	l17698
 11110                           
 11111                           ;BVH2_Appl_Layer.c: 1365: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 11112  13F6  11C5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 11113                           
 11114                           ;BVH2_Appl_Layer.c: 1366: }
 11115  13F7  2BFB               	goto	l17699
 11116  13F8                     l17698:	
 11117                           
 11118                           ;BVH2_Appl_Layer.c: 1367: else {
 11119                           ;BVH2_Appl_Layer.c: 1369: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 11120  13F8  1E45               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 11121  13F9  2BFB               	goto	l17699
 11122                           
 11123                           ;BVH2_Appl_Layer.c: 1370: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 11124  13FA  1245               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 11125  13FB                     l17699:	
 11126                           
 11127                           ;BVH2_Appl_Layer.c: 1371: }
 11128                           ;BVH2_Appl_Layer.c: 1372: }
 11129                           ;BVH2_Appl_Layer.c: 1373: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 11130  13FB  1145               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 11131  13FC  2C26               	goto	l30297
 11132  13FD                     l17697:	
 11133                           ;BVH2_Appl_Layer.c: 1378: }
 11134                           
 11135                           ;BVH2_Appl_Layer.c: 1374: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 11136                           
 11137                           
 11138                           ;BVH2_Appl_Layer.c: 1379: else {
 11139                           ;BVH2_Appl_Layer.c: 1381: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 11140  13FD  1DC5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 11141  13FE  2C13               	goto	l17702
 11142                           
 11143                           ;BVH2_Appl_Layer.c: 1384: if (Cb19_Counter > 400) {
 11144  13FF  3001               	movlw	1
 11145  1400  0023               	movlb	3	; select bank3
 11146  1401  0241               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384),w
 11147  1402  3091               	movlw	145
 11148  1403  1903               	skipnz
 11149  1404  0240               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+384),w
 11150  1405  1C03               	skipc
 11151  1406  2C0F               	goto	l30281
 11152                           
 11153                           ;BVH2_Appl_Layer.c: 1387: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 11154  1407  0021               	movlb	1	; select bank1
 11155  1408  11C5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 11156                           
 11157                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
 11158  1409  1645               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 11159                           
 11160                           ;BVH2_Appl_Layer.c: 1389: Cb19_Counter = 0 ;
 11161                           
 11162                           ;BVH2_Appl_Layer.c: 1390: Cb19_oDryRun66 = 0;
 11163  140A  27EB  3190         	fcall	PL42	;call to abstracted procedure
 11164                           
 11165                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun55 = 1;
 11166  140C  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 11167  140D  0AB5               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 11168                           
 11169                           ;BVH2_Appl_Layer.c: 1392: }
 11170  140E  2C2D               	goto	l30301
 11171  140F                     l30281:	
 11172                           
 11173                           ;BVH2_Appl_Layer.c: 1393: else {
 11174                           ;BVH2_Appl_Layer.c: 1394: Cb19_Counter = Cb19_Counter + 1 ;
 11175  140F  0AC0               	incf	BVH2_Appl_Layer@Cb19_Counter^(0+384),f
 11176  1410  1903               	skipnz
 11177  1411  0AC1               	incf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384),f
 11178  1412  2C2D               	goto	l30301
 11179  1413                     l17702:	
 11180                           
 11181                           ;BVH2_Appl_Layer.c: 1400: else {
 11182                           ;BVH2_Appl_Layer.c: 1402: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 11183  1413  1E45               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 11184  1414  2C2D               	goto	l30301
 11185                           
 11186                           ;BVH2_Appl_Layer.c: 1405: if (Cb19_Counter > 400) {
 11187  1415  3001               	movlw	1
 11188  1416  0023               	movlb	3	; select bank3
 11189  1417  0241               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384),w
 11190  1418  3091               	movlw	145
 11191  1419  1903               	skipnz
 11192  141A  0240               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+384),w
 11193  141B  1C03               	skipc
 11194  141C  2C0F               	goto	l30281
 11195                           
 11196                           ;BVH2_Appl_Layer.c: 1408: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 11197  141D  0021               	movlb	1	; select bank1
 11198  141E  1245               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 11199  141F  2BE9               	goto	L13
 11200  1420                     l17696:	
 11201                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 11202                           
 11203                           
 11204                           ;BVH2_Appl_Layer.c: 1426: else {
 11205                           ;BVH2_Appl_Layer.c: 1428: if (!(SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm)) {
 11206  1420  1845               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),0
 11207  1421  2C2D               	goto	l30301
 11208                           
 11209                           ;BVH2_Appl_Layer.c: 1429: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 11210  1422  1445               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),0
 11211                           
 11212                           ;BVH2_Appl_Layer.c: 1433: if (!(Cb14_oDryRunAlarm)) {
 11213  1423  08C2               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 11214  1424  1D03               	skipz
 11215  1425  2C2D               	goto	l30301
 11216  1426                     l30297:	
 11217                           
 11218                           ;BVH2_Appl_Layer.c: 1435: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 11219  1426  14C5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 11220                           
 11221                           ;BVH2_Appl_Layer.c: 1375: Cb19_oDryRun55 = 0;
 11222  1427  0022               	movlb	2	; select bank2
 11223  1428  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 11224                           
 11225                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun66 = 0;
 11226  1429  01B6               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 11227                           
 11228                           ;BVH2_Appl_Layer.c: 1377: Cb19_Counter = 0 ;
 11229  142A  0023               	movlb	3	; select bank3
 11230  142B  01C0               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+384)
 11231  142C  01C1               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384)
 11232  142D                     l30301:	
 11233                           
 11234                           ;BVH2_Appl_Layer.c: 1439: }
 11235                           ;BVH2_Appl_Layer.c: 1440: }
 11236                           ;BVH2_Appl_Layer.c: 1441: }
 11237                           ;BVH2_Appl_Layer.c: 1442: }
 11238                           ;BVH2_Appl_Layer.c: 1447: bool_DryRunningAlarm = Cb19_oDryRun66;
 11239  142D  0022               	movlb	2	; select bank2
 11240  142E  0836               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 11241  142F  0021               	movlb	1	; select bank1
 11242  1430  00D5               	movwf	_bool_DryRunningAlarm^(0+128)
 11243                           
 11244                           ;BVH2_Appl_Layer.c: 1450: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 11245  1431  0022               	movlb	2	; select bank2
 11246  1432  083B               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 11247  1433  0021               	movlb	1	; select bank1
 11248  1434  00D3               	movwf	_bool_CPU_TempAlarm^(0+128)
 11249                           
 11250                           ;BVH2_Appl_Layer.c: 1455: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 11251  1435  1C44               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 11252  1436  2C43               	goto	l17712
 11253                           
 11254                           ;BVH2_Appl_Layer.c: 1460: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 11255  1437  0023               	movlb	3	; select bank3
 11256  1438  2793  3190         	fcall	PL13	;call to abstracted procedure
 11257  143A  2786  3190         	fcall	PL12	;call to abstracted procedure
 11258  143C  1803               	skipnc
 11259  143D  2C7D               	goto	l30351
 11260                           
 11261                           ;BVH2_Appl_Layer.c: 1463: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 11262  143E  0021               	movlb	1	; select bank1
 11263  143F  1044               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 11264                           
 11265                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
 11266  1440  1544               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 11267  1441                     l30311:	
 11268                           
 11269                           ;BVH2_Appl_Layer.c: 1465: Cb9_StateCnt = 0 ;
 11270  1441  01C3               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 11271  1442  2C7D               	goto	l30351
 11272  1443                     l17712:	
 11273                           
 11274                           ;BVH2_Appl_Layer.c: 1470: else {
 11275                           ;BVH2_Appl_Layer.c: 1472: if (SIBFS_Current_Analysis_low_b.Cb11_Wait) {
 11276  1443  1CC4               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 11277  1444  2C58               	goto	l17715
 11278                           
 11279                           ;BVH2_Appl_Layer.c: 1477: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 11280  1445  0023               	movlb	3	; select bank3
 11281  1446  2793  3190         	fcall	PL13	;call to abstracted procedure
 11282  1448  2786  3190         	fcall	PL12	;call to abstracted procedure
 11283  144A  1803               	skipnc
 11284  144B  2C4F               	goto	l30317
 11285                           
 11286                           ;BVH2_Appl_Layer.c: 1479: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 11287  144C  0021               	movlb	1	; select bank1
 11288  144D  10C4               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 11289  144E  2C66               	goto	L14
 11290  144F                     l30317:	
 11291                           ;BVH2_Appl_Layer.c: 1482: }
 11292                           
 11293                           ;BVH2_Appl_Layer.c: 1481: Cb9_oCurrentAlarm = 1;
 11294                           
 11295                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 11296                           
 11297                           
 11298                           ;BVH2_Appl_Layer.c: 1483: else {
 11299                           ;BVH2_Appl_Layer.c: 1484: if (Cb9_StateCnt > 100) {
 11300  144F  3065               	movlw	101
 11301  1450  0021               	movlb	1	; select bank1
 11302  1451  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 11303  1452  1C03               	skipc
 11304  1453  2C56               	goto	l30323
 11305                           
 11306                           ;BVH2_Appl_Layer.c: 1486: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 11307  1454  10C4               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 11308  1455  2C7A               	goto	L24
 11309  1456                     l30323:	
 11310                           ;BVH2_Appl_Layer.c: 1489: }
 11311                           
 11312                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 11313                           
 11314                           
 11315                           ;BVH2_Appl_Layer.c: 1490: else {
 11316                           ;BVH2_Appl_Layer.c: 1491: Cb9_StateCnt = Cb9_StateCnt + 1 ;
 11317  1456  0AC3               	incf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),f
 11318  1457  2C7D               	goto	l30351
 11319  1458                     l17715:	
 11320                           
 11321                           ;BVH2_Appl_Layer.c: 1497: else {
 11322                           ;BVH2_Appl_Layer.c: 1499: if (SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent) {
 11323  1458  1D44               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 11324  1459  2C6B               	goto	l17721
 11325                           
 11326                           ;BVH2_Appl_Layer.c: 1504: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 11327  145A  0023               	movlb	3	; select bank3
 11328  145B  279B  3190         	fcall	PL15	;call to abstracted procedure
 11329  145D  1803               	skipnc
 11330  145E  2C61               	goto	l30331
 11331                           
 11332                           ;BVH2_Appl_Layer.c: 1506: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 11333  145F  1144               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 11334  1460  2C7A               	goto	L24
 11335  1461                     l30331:	
 11336                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 11337                           
 11338                           
 11339                           ;BVH2_Appl_Layer.c: 1510: else {
 11340                           ;BVH2_Appl_Layer.c: 1511: if (Cb9_StateCnt > 50) {
 11341  1461  3033               	movlw	51
 11342  1462  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 11343  1463  1C03               	skipc
 11344  1464  2C56               	goto	l30323
 11345                           
 11346                           ;BVH2_Appl_Layer.c: 1513: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 11347  1465  1144               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 11348  1466                     L14:	
 11349                           
 11350                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 11351  1466  15C4               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 11352                           
 11353                           ;BVH2_Appl_Layer.c: 1515: Cb9_oCurrentAlarm = 1;
 11354  1467  0022               	movlb	2	; select bank2
 11355  1468  01BE               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 11356  1469  0ABE               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 11357                           
 11358                           ;BVH2_Appl_Layer.c: 1516: }
 11359  146A  2C7D               	goto	l30351
 11360  146B                     l17721:	
 11361                           
 11362                           ;BVH2_Appl_Layer.c: 1524: else {
 11363                           ;BVH2_Appl_Layer.c: 1526: if (SIBFS_Current_Analysis_low_b.Cb13_redState) {
 11364  146B  1DC4               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 11365  146C  2C75               	goto	l17727
 11366                           
 11367                           ;BVH2_Appl_Layer.c: 1531: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 11368  146D  0023               	movlb	3	; select bank3
 11369  146E  279B  3190         	fcall	PL15	;call to abstracted procedure
 11370  1470  1803               	skipnc
 11371  1471  2C7D               	goto	l30351
 11372                           
 11373                           ;BVH2_Appl_Layer.c: 1534: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 11374  1472  11C4               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 11375                           
 11376                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
 11377  1473  14C4               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 11378  1474  2C41               	goto	l30311
 11379  1475                     l17727:	
 11380                           
 11381                           ;BVH2_Appl_Layer.c: 1541: else {
 11382                           ;BVH2_Appl_Layer.c: 1543: if (!(SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low)) {
 11383  1475  1A44               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 11384  1476  2C7D               	goto	l30351
 11385                           
 11386                           ;BVH2_Appl_Layer.c: 1544: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
 11387  1477  1644               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 11388                           
 11389                           ;BVH2_Appl_Layer.c: 1547: if (ui8_ResetMatlab == 1) {
 11390  1478  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 11391  1479  2C7D               	goto	l30351
 11392  147A                     L24:	
 11393                           
 11394                           ;BVH2_Appl_Layer.c: 1549: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 11395  147A  1444               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 11396                           
 11397                           ;BVH2_Appl_Layer.c: 1488: Cb9_oCurrentAlarm = 0;
 11398  147B  0022               	movlb	2	; select bank2
 11399  147C  01BE               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 11400  147D                     l30351:	
 11401                           
 11402                           ;BVH2_Appl_Layer.c: 1551: }
 11403                           ;BVH2_Appl_Layer.c: 1552: }
 11404                           ;BVH2_Appl_Layer.c: 1553: }
 11405                           ;BVH2_Appl_Layer.c: 1554: }
 11406                           ;BVH2_Appl_Layer.c: 1555: }
 11407                           ;BVH2_Appl_Layer.c: 1556: }
 11408                           ;BVH2_Appl_Layer.c: 1561: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 11409  147D  0022               	movlb	2	; select bank2
 11410  147E  083E               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 11411  147F  0021               	movlb	1	; select bank1
 11412  1480  00D6               	movwf	_bool_HighCurrentAlarm^(0+128)
 11413                           
 11414                           ;BVH2_Appl_Layer.c: 1564: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 11415  1481  0022               	movlb	2	; select bank2
 11416  1482  0842               	movf	_Cb34_oPWM_Alarm^(0+256),w
 11417  1483  00CE               	movwf	_bool_PWMin_err_Alarm^(0+256)
 11418                           
 11419                           ;BVH2_Appl_Layer.c: 1567: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 11420  1484  0848               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 11421  1485  00CF               	movwf	_bool_UbatAlarm^(0+256)
 11422                           
 11423                           ;BVH2_Appl_Layer.c: 1568: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 11424  1486  0024               	movlb	4	; select bank4
 11425  1487  01AC               	clrf	_BVH2_Appl_Layer$20280^(0+512)
 11426  1488  0AAC               	incf	_BVH2_Appl_Layer$20280^(0+512),f
 11427  1489  0022               	movlb	2	; select bank2
 11428  148A  08B9               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 11429  148B  1D03               	skipz
 11430  148C  2C95               	goto	l30367
 11431  148D  08C0               	movf	_Cb1_oCurrentAlarm^(0+256),f
 11432  148E  1D03               	skipz
 11433  148F  2C95               	goto	l30367
 11434  1490  08B5               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 11435  1491  1D03               	skipz
 11436  1492  2C95               	goto	l30367
 11437  1493  0024               	movlb	4	; select bank4
 11438  1494  01AC               	clrf	_BVH2_Appl_Layer$20280^(0+512)
 11439  1495                     l30367:	
 11440  1495  0024               	movlb	4	; select bank4
 11441  1496  082C               	movf	_BVH2_Appl_Layer$20280^(0+512),w
 11442  1497  0021               	movlb	1	; select bank1
 11443  1498  00D7               	movwf	_bool_MotorStalled^(0+128)
 11444                           
 11445                           ;BVH2_Appl_Layer.c: 1574: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 11446  1499  0022               	movlb	2	; select bank2
 11447  149A  083C               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 11448  149B  00CC               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 11449                           
 11450                           ;BVH2_Appl_Layer.c: 1575: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 11451  149C  0024               	movlb	4	; select bank4
 11452  149D  01AD               	clrf	_BVH2_Appl_Layer$20281^(0+512)
 11453  149E  0AAD               	incf	_BVH2_Appl_Layer$20281^(0+512),f
 11454  149F  08BB               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),f
 11455  14A0  1D03               	skipz
 11456  14A1  2CAC               	goto	l30381
 11457  14A2  0022               	movlb	2	; select bank2
 11458  14A3  08B8               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 11459  14A4  1D03               	skipz
 11460  14A5  2CAC               	goto	l30381
 11461  14A6  0021               	movlb	1	; select bank1
 11462  14A7  08C2               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 11463  14A8  1D03               	skipz
 11464  14A9  2CAC               	goto	l30381
 11465  14AA  0024               	movlb	4	; select bank4
 11466  14AB  01AD               	clrf	_BVH2_Appl_Layer$20281^(0+512)
 11467  14AC                     l30381:	
 11468  14AC  0024               	movlb	4	; select bank4
 11469  14AD  082D               	movf	_BVH2_Appl_Layer$20281^(0+512),w
 11470  14AE  00B4               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512)
 11471                           
 11472                           ;BVH2_Appl_Layer.c: 1576: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 11473  14AF  01AE               	clrf	_BVH2_Appl_Layer$20282^(0+512)
 11474  14B0  0AAE               	incf	_BVH2_Appl_Layer$20282^(0+512),f
 11475  14B1  08B4               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),f
 11476  14B2  1D03               	skipz
 11477  14B3  2CBA               	goto	l30391
 11478  14B4  0021               	movlb	1	; select bank1
 11479  14B5  08D4               	movf	_bool_ControlLoopMode^(0+128),f
 11480  14B6  1D03               	skipz
 11481  14B7  2CBA               	goto	l30391
 11482  14B8  0024               	movlb	4	; select bank4
 11483  14B9  01AE               	clrf	_BVH2_Appl_Layer$20282^(0+512)
 11484  14BA                     l30391:	
 11485  14BA  0024               	movlb	4	; select bank4
 11486  14BB  082E               	movf	_BVH2_Appl_Layer$20282^(0+512),w
 11487  14BC  00B6               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512)
 11488                           
 11489                           ;BVH2_Appl_Layer.c: 1577: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 11490  14BD  0022               	movlb	2	; select bank2
 11491  14BE  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 11492  14BF  1903               	btfsc	3,2
 11493  14C0  2CCB               	goto	l17738
 11494  14C1  08EB               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),f
 11495  14C2  1D03               	skipz
 11496  14C3  2CCB               	goto	l17738
 11497                           
 11498                           ;BVH2_Appl_Layer.c: 1578: {
 11499                           ;BVH2_Appl_Layer.c: 1579: X_Sb4_Intergrator = 80000 ;
 11500  14C4  3001               	movlw	1
 11501  14C5  01EA               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11502  14C6  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11503  14C7  3038               	movlw	56
 11504  14C8  00E8               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11505  14C9  3080               	movlw	128
 11506  14CA  00E7               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11507  14CB                     l17738:	
 11508                           
 11509                           ;BVH2_Appl_Layer.c: 1580: }
 11510                           ;BVH2_Appl_Layer.c: 1584: if (Sb1_Logical_Operator3) {
 11511  14CB  0024               	movlb	4	; select bank4
 11512  14CC  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 11513  14CD  1903               	btfsc	3,2
 11514  14CE  2CD1               	goto	l30401
 11515                           
 11516                           ;BVH2_Appl_Layer.c: 1585: Sb2_Switch2 = 0 ;
 11517  14CF  01B9               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 11518  14D0  2D32               	goto	L17
 11519  14D1                     l30401:	
 11520                           ;BVH2_Appl_Layer.c: 1586: }
 11521                           
 11522                           
 11523                           ;BVH2_Appl_Layer.c: 1587: else {
 11524                           ;BVH2_Appl_Layer.c: 1590: if (bool_ControlLoopMode) {
 11525  14D1  0021               	movlb	1	; select bank1
 11526  14D2  0854               	movf	_bool_ControlLoopMode^(0+128),w
 11527  14D3  1903               	btfsc	3,2
 11528  14D4  2D34               	goto	l30423
 11529                           
 11530                           ;BVH2_Appl_Layer.c: 1593: if (Sb1_Logical_Operator5) {
 11531  14D5  0024               	movlb	4	; select bank4
 11532  14D6  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 11533  14D7  1903               	btfsc	3,2
 11534  14D8  2CDB               	goto	l30409
 11535  14D9                     l30405:	
 11536                           
 11537                           ;BVH2_Appl_Layer.c: 1594: Sb2_Switch2 = Sb2_Fixed_Power;
 11538  14D9  30CA               	movlw	202
 11539  14DA  2D31               	goto	L25
 11540  14DB                     l30409:	
 11541                           ;BVH2_Appl_Layer.c: 1595: }
 11542                           
 11543                           
 11544                           ;BVH2_Appl_Layer.c: 1613: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>
 11545                           ;BVH2_Appl_Layer.c: 1614: 8)) + ((Int16) (((Int16) (-((Int16) (UInt16) ((((UInt32) Sb3_P
      +                          roduct1) * 95) >> 7)))) + 200)));
 11546  14DB  0021               	movlb	1	; select bank1
 11547  14DC  085E               	movf	_ui8_PWM_dc_mat^(0+128),w
 11548  14DD  0020               	movlb	0	; select bank0
 11549  14DE  00AC               	movwf	?___lmul
 11550  14DF  30E0               	movlw	224
 11551  14E0  27C7  3190         	fcall	PL31	;call to abstracted procedure
 11552  14E2  264C  3190         	fcall	___lmul
 11553  14E4  082E               	movf	?___lmul+2,w
 11554  14E5  0024               	movlb	4	; select bank4
 11555  14E6  00BD               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512)
 11556  14E7  0020               	movlb	0	; select bank0
 11557  14E8  082D               	movf	?___lmul+1,w
 11558  14E9  0024               	movlb	4	; select bank4
 11559  14EA  00BC               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512)
 11560  14EB  30E0               	movlw	224
 11561  14EC  0020               	movlb	0	; select bank0
 11562  14ED  00AC               	movwf	?___lmul
 11563  14EE  305F               	movlw	95
 11564  14EF  27C7  3190         	fcall	PL31	;call to abstracted procedure
 11565  14F1  264C  3190         	fcall	___lmul
 11566  14F3  082C               	movf	?___lmul,w
 11567  14F4  00BA               	movwf	??_BVH2_Appl_Layer
 11568  14F5  082D               	movf	?___lmul+1,w
 11569  14F6  00BB               	movwf	??_BVH2_Appl_Layer+1
 11570  14F7  082E               	movf	?___lmul+2,w
 11571  14F8  00BC               	movwf	??_BVH2_Appl_Layer+2
 11572  14F9  082F               	movf	?___lmul+3,w
 11573  14FA  00BD               	movwf	??_BVH2_Appl_Layer+3
 11574  14FB  3007               	movlw	7
 11575  14FC                     u10995:	
 11576  14FC  36BD               	lsrf	??_BVH2_Appl_Layer+3,f
 11577  14FD  0CBC               	rrf	??_BVH2_Appl_Layer+2,f
 11578  14FE  0CBB               	rrf	??_BVH2_Appl_Layer+1,f
 11579  14FF  0CBA               	rrf	??_BVH2_Appl_Layer,f
 11580  1500  0B89               	decfsz	9,f
 11581  1501  2CFC               	goto	u10995
 11582  1502  083A               	movf	??_BVH2_Appl_Layer,w
 11583  1503  0024               	movlb	4	; select bank4
 11584  1504  02BC               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 11585  1505  0020               	movlb	0	; select bank0
 11586  1506  083B               	movf	??_BVH2_Appl_Layer+1,w
 11587  1507  0024               	movlb	4	; select bank4
 11588  1508  3BBD               	subwfb	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 11589  1509  30C8               	movlw	200
 11590  150A  07BC               	addwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 11591  150B  1803               	skipnc
 11592  150C  0ABD               	incf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 11593                           
 11594                           ;BVH2_Appl_Layer.c: 1617: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 11595  150D  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 11596  150E  3A80               	xorlw	128
 11597  150F  00FF               	movwf	127
 11598  1510  3080               	movlw	128
 11599  1511  027F               	subwf	127,w
 11600  1512  1D03               	skipz
 11601  1513  2D16               	goto	u11005
 11602  1514  30C9               	movlw	201
 11603  1515  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 11604  1516                     u11005:	
 11605  1516  1803               	skipnc
 11606  1517  2D2F               	goto	l30421
 11607  1518  0024               	movlb	4	; select bank4
 11608  1519  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 11609  151A  3A80               	xorlw	128
 11610  151B  00FF               	movwf	127
 11611  151C  3080               	movlw	128
 11612  151D  027F               	subwf	127,w
 11613  151E  1D03               	skipz
 11614  151F  2D22               	goto	u11015
 11615  1520  303C               	movlw	60
 11616  1521  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 11617  1522                     u11015:	
 11618  1522  1C03               	skipc
 11619  1523  2D27               	goto	l30419
 11620  1524  0024               	movlb	4	; select bank4
 11621  1525  083C               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 11622  1526  2D29               	goto	L18
 11623  1527                     l30419:	
 11624  1527  303C               	movlw	60
 11625  1528  0024               	movlb	4	; select bank4
 11626  1529                     L18:	
 11627  1529  00A4               	movwf	_BVH2_Appl_Layer$20285^(0+512)
 11628  152A  01A5               	clrf	(_BVH2_Appl_Layer$20285+1)^(0+512)
 11629  152B  0825               	movf	(_BVH2_Appl_Layer$20285+1)^(0+512),w
 11630  152C  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 11631  152D  0824               	movf	_BVH2_Appl_Layer$20285^(0+512),w
 11632  152E  2D8C               	goto	L19
 11633  152F                     l30421:	
 11634  152F  30C8               	movlw	200
 11635  1530  0024               	movlb	4	; select bank4
 11636  1531                     L25:	
 11637  1531  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 11638  1532                     L17:	
 11639  1532  01BA               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 11640  1533  2D8D               	goto	l30437
 11641  1534                     l30423:	
 11642                           
 11643                           ;BVH2_Appl_Layer.c: 1620: else {
 11644                           ;BVH2_Appl_Layer.c: 1622: Int16 Sb4_PI_sum;
 11645                           ;BVH2_Appl_Layer.c: 1627: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / (
      +                          (Int32) 800))) + ((UInt16)
 11646                           ;BVH2_Appl_Layer.c: 1628: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 11647  1534  0020               	movlb	0	; select bank0
 11648  1535  3003               	movlw	3
 11649  1536  01AF               	clrf	?___aldiv+3
 11650  1537  01AE               	clrf	?___aldiv+2
 11651  1538  00AD               	movwf	?___aldiv+1
 11652  1539  3020               	movlw	32
 11653  153A  00AC               	movwf	?___aldiv
 11654  153B  0022               	movlb	2	; select bank2
 11655  153C  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11656  153D  0020               	movlb	0	; select bank0
 11657  153E  00B3               	movwf	?___aldiv+7
 11658  153F  0022               	movlb	2	; select bank2
 11659  1540  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11660  1541  0020               	movlb	0	; select bank0
 11661  1542  00B2               	movwf	?___aldiv+6
 11662  1543  0022               	movlb	2	; select bank2
 11663  1544  0868               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11664  1545  0020               	movlb	0	; select bank0
 11665  1546  00B1               	movwf	?___aldiv+5
 11666  1547  0022               	movlb	2	; select bank2
 11667  1548  0867               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11668  1549  0020               	movlb	0	; select bank0
 11669  154A  00B0               	movwf	?___aldiv+4
 11670  154B  271A  3190         	fcall	___aldiv
 11671  154D  082D               	movf	?___aldiv+1,w
 11672  154E  0024               	movlb	4	; select bank4
 11673  154F  00BF               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512)
 11674  1550  0020               	movlb	0	; select bank0
 11675  1551  082C               	movf	?___aldiv,w
 11676  1552  0024               	movlb	4	; select bank4
 11677  1553  00BE               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512)
 11678  1554  0022               	movlb	2	; select bank2
 11679  1555  0853               	movf	_ui8_Kp_mat^(0+256),w
 11680  1556  0020               	movlb	0	; select bank0
 11681  1557  00AC               	movwf	?___wmul
 11682  1558  01AD               	clrf	?___wmul+1
 11683  1559  27BE               	fcall	PL28	;call to abstracted procedure
 11684  155A  3186  263B  3190   	fcall	___wmul
 11685  155D  082C               	movf	?___wmul,w
 11686  155E  0024               	movlb	4	; select bank4
 11687  155F  07BE               	addwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),f
 11688  1560  0020               	movlb	0	; select bank0
 11689  1561  082D               	movf	?___wmul+1,w
 11690  1562  0024               	movlb	4	; select bank4
 11691  1563  3DBF               	addwfc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),f
 11692                           
 11693                           ;BVH2_Appl_Layer.c: 1631: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 11694  1564  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 11695  1565  3A80               	xorlw	128
 11696  1566  00FF               	movwf	127
 11697  1567  3080               	movlw	128
 11698  1568  027F               	subwf	127,w
 11699  1569  1D03               	skipz
 11700  156A  2D6D               	goto	u11025
 11701  156B  3001               	movlw	1
 11702  156C  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 11703  156D                     u11025:	
 11704  156D  1C03               	skipc
 11705  156E  2D77               	goto	l17758
 11706  156F  3000               	movlw	0
 11707  1570  0024               	movlb	4	; select bank4
 11708  1571  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 11709  1572  30CB               	movlw	203
 11710  1573  1903               	skipnz
 11711  1574  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 11712  1575  1803               	skipnc
 11713  1576  2CD9               	goto	l30405
 11714  1577                     l17758:	
 11715  1577  0024               	movlb	4	; select bank4
 11716  1578  1BBF               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),7
 11717  1579  2D86               	goto	l30433
 11718  157A  3000               	movlw	0
 11719  157B  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 11720  157C  3028               	movlw	40
 11721  157D  1903               	skipnz
 11722  157E  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 11723  157F  1C03               	skipc
 11724  1580  2D86               	goto	l30433
 11725  1581  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 11726  1582  00A7               	movwf	(_BVH2_Appl_Layer$20287+1)^(0+512)
 11727  1583  083E               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 11728  1584  00A6               	movwf	_BVH2_Appl_Layer$20287^(0+512)
 11729  1585  2D89               	goto	l17762
 11730  1586                     l30433:	
 11731  1586  3028               	movlw	40
 11732  1587  00A6               	movwf	_BVH2_Appl_Layer$20287^(0+512)
 11733  1588  01A7               	clrf	(_BVH2_Appl_Layer$20287+1)^(0+512)
 11734  1589                     l17762:	
 11735  1589  0827               	movf	(_BVH2_Appl_Layer$20287+1)^(0+512),w
 11736  158A  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 11737  158B  0826               	movf	_BVH2_Appl_Layer$20287^(0+512),w
 11738  158C                     L19:	
 11739  158C  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 11740  158D                     l30437:	
 11741                           
 11742                           ;BVH2_Appl_Layer.c: 1640: bl_Pumpoff_Alarm = Sb1_Logical_Operator2;
 11743  158D  083A               	movf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512),w
 11744  158E  0020               	movlb	0	; select bank0
 11745  158F  00BB               	movwf	??_BVH2_Appl_Layer+1
 11746  1590  0024               	movlb	4	; select bank4
 11747  1591  0839               	movf	BVH2_Appl_Layer@Sb2_Switch2^(0+512),w
 11748  1592  0020               	movlb	0	; select bank0
 11749  1593  00BA               	movwf	??_BVH2_Appl_Layer
 11750  1594  36BB               	lsrf	??_BVH2_Appl_Layer+1,f
 11751  1595  0CBA               	rrf	??_BVH2_Appl_Layer,f
 11752  1596  083A               	movf	??_BVH2_Appl_Layer,w
 11753  1597  0021               	movlb	1	; select bank1
 11754  1598  00E4               	movwf	_ui8_duty_cycle_mat^(0+128)
 11755                           
 11756                           ;BVH2_Appl_Layer.c: 1641: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 11757  1599  0024               	movlb	4	; select bank4
 11758  159A  0836               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512),w
 11759  159B  0022               	movlb	2	; select bank2
 11760  159C  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 11761                           
 11762                           ;BVH2_Appl_Layer.c: 1645: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<
 11763                           ;BVH2_Appl_Layer.c: 1646: 3));
 11764  159D  0023               	movlb	3	; select bank3
 11765  159E  0867               	movf	(_ui8_Ki_mat+1)^(0+384),w
 11766  159F  0020               	movlb	0	; select bank0
 11767  15A0  00AD               	movwf	?___wmul+1
 11768  15A1  0023               	movlb	3	; select bank3
 11769  15A2  0866               	movf	_ui8_Ki_mat^(0+384),w
 11770  15A3  0020               	movlb	0	; select bank0
 11771  15A4  00AC               	movwf	?___wmul
 11772  15A5  27BE               	fcall	PL28	;call to abstracted procedure
 11773  15A6  3186  263B  3190   	fcall	___wmul
 11774  15A9  082C               	movf	?___wmul,w
 11775  15AA  00BA               	movwf	??_BVH2_Appl_Layer
 11776  15AB  082D               	movf	?___wmul+1,w
 11777  15AC  00BB               	movwf	??_BVH2_Appl_Layer+1
 11778  15AD  35BA               	lslf	??_BVH2_Appl_Layer,f
 11779  15AE  0DBB               	rlf	??_BVH2_Appl_Layer+1,f
 11780  15AF  35BA               	lslf	??_BVH2_Appl_Layer,f
 11781  15B0  0DBB               	rlf	??_BVH2_Appl_Layer+1,f
 11782  15B1  35BA               	lslf	??_BVH2_Appl_Layer,f
 11783  15B2  0DBB               	rlf	??_BVH2_Appl_Layer+1,f
 11784  15B3  083A               	movf	??_BVH2_Appl_Layer,w
 11785  15B4  00BC               	movwf	??_BVH2_Appl_Layer+2
 11786  15B5  083B               	movf	??_BVH2_Appl_Layer+1,w
 11787  15B6  00BD               	movwf	??_BVH2_Appl_Layer+3
 11788  15B7  3000               	movlw	0
 11789  15B8  1BBD               	btfsc	??_BVH2_Appl_Layer+3,7
 11790  15B9  30FF               	movlw	255
 11791  15BA  00BE               	movwf	??_BVH2_Appl_Layer+4
 11792  15BB  00BF               	movwf	??_BVH2_Appl_Layer+5
 11793  15BC  083C               	movf	??_BVH2_Appl_Layer+2,w
 11794  15BD  0022               	movlb	2	; select bank2
 11795  15BE  07E7               	addwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),f
 11796  15BF  0020               	movlb	0	; select bank0
 11797  15C0  083D               	movf	??_BVH2_Appl_Layer+3,w
 11798  15C1  0022               	movlb	2	; select bank2
 11799  15C2  3DE8               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),f
 11800  15C3  0020               	movlb	0	; select bank0
 11801  15C4  083E               	movf	??_BVH2_Appl_Layer+4,w
 11802  15C5  0022               	movlb	2	; select bank2
 11803  15C6  3DE9               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),f
 11804  15C7  0020               	movlb	0	; select bank0
 11805  15C8  083F               	movf	??_BVH2_Appl_Layer+5,w
 11806  15C9  0022               	movlb	2	; select bank2
 11807  15CA  3DEA               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),f
 11808                           
 11809                           ;BVH2_Appl_Layer.c: 1649: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 11810  15CB  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11811  15CC  27F7  3190         	fcall	PL49	;call to abstracted procedure
 11812  15CE  1D03               	skipz
 11813  15CF  2DDA               	goto	u11063
 11814  15D0  3002               	movlw	2
 11815  15D1  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11816  15D2  1D03               	skipz
 11817  15D3  2DDA               	goto	u11063
 11818  15D4  3077               	movlw	119
 11819  15D5  0268               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11820  15D6  1D03               	skipz
 11821  15D7  2DDA               	goto	u11063
 11822  15D8  3041               	movlw	65
 11823  15D9  0267               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11824  15DA                     u11063:	
 11825  15DA  1803               	skipnc
 11826  15DB  2E12               	goto	l30451
 11827  15DC  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11828  15DD  27F7  3190         	fcall	PL49	;call to abstracted procedure
 11829  15DF  1D03               	skipz
 11830  15E0  2DEB               	goto	u11073
 11831  15E1  3000               	movlw	0
 11832  15E2  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11833  15E3  1D03               	skipz
 11834  15E4  2DEB               	goto	u11073
 11835  15E5  307D               	movlw	125
 11836  15E6  0268               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11837  15E7  1D03               	skipz
 11838  15E8  2DEB               	goto	u11073
 11839  15E9  3000               	movlw	0
 11840  15EA  0267               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11841  15EB                     u11073:	
 11842  15EB  1C03               	skipc
 11843  15EC  2DFD               	goto	l30449
 11844  15ED  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11845  15EE  0024               	movlb	4	; select bank4
 11846  15EF  00A3               	movwf	(_BVH2_Appl_Layer$20288+3)^(0+512)
 11847  15F0  0022               	movlb	2	; select bank2
 11848  15F1  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11849  15F2  0024               	movlb	4	; select bank4
 11850  15F3  00A2               	movwf	(_BVH2_Appl_Layer$20288+2)^(0+512)
 11851  15F4  0022               	movlb	2	; select bank2
 11852  15F5  0868               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11853  15F6  0024               	movlb	4	; select bank4
 11854  15F7  00A1               	movwf	(_BVH2_Appl_Layer$20288+1)^(0+512)
 11855  15F8  0022               	movlb	2	; select bank2
 11856  15F9  0867               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11857  15FA  0024               	movlb	4	; select bank4
 11858  15FB  00A0               	movwf	_BVH2_Appl_Layer$20288^(0+512)
 11859  15FC  2E03               	goto	l17770
 11860  15FD                     l30449:	
 11861  15FD  0024               	movlb	4	; select bank4
 11862  15FE  307D               	movlw	125
 11863  15FF  01A3               	clrf	(_BVH2_Appl_Layer$20288+3)^(0+512)
 11864  1600  01A2               	clrf	(_BVH2_Appl_Layer$20288+2)^(0+512)
 11865  1601  00A1               	movwf	(_BVH2_Appl_Layer$20288+1)^(0+512)
 11866  1602  01A0               	clrf	_BVH2_Appl_Layer$20288^(0+512)
 11867  1603                     l17770:	
 11868  1603  0823               	movf	(_BVH2_Appl_Layer$20288+3)^(0+512),w
 11869  1604  0022               	movlb	2	; select bank2
 11870  1605  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11871  1606  0024               	movlb	4	; select bank4
 11872  1607  0822               	movf	(_BVH2_Appl_Layer$20288+2)^(0+512),w
 11873  1608  0022               	movlb	2	; select bank2
 11874  1609  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11875  160A  0024               	movlb	4	; select bank4
 11876  160B  0821               	movf	(_BVH2_Appl_Layer$20288+1)^(0+512),w
 11877  160C  0022               	movlb	2	; select bank2
 11878  160D  00E8               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11879  160E  0024               	movlb	4	; select bank4
 11880  160F  0820               	movf	_BVH2_Appl_Layer$20288^(0+512),w
 11881  1610  0022               	movlb	2	; select bank2
 11882  1611  2E18               	goto	L20
 11883  1612                     l30451:	
 11884  1612  3002               	movlw	2
 11885  1613  01EA               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11886  1614  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11887  1615  3077               	movlw	119
 11888  1616  00E8               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11889  1617  3040               	movlw	64
 11890  1618                     L20:	
 11891  1618  00E7               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11892                           
 11893                           ;BVH2_Appl_Layer.c: 1652: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 11894  1619  01EB               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 11895  161A  0008               	return
 11896  161B                     __end_of_BVH2_Appl_Layer:	
 11897  161B                     __ptext2060:	
 11898 ;; =============== function _Cb34_PWM_Detection_node_fcn1 ends ============
 11899                           
 11900                           
 11901 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 11902 ;; Defined at:
 11903 ;;		line 1840 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\T_Link\BVH2_Appl_Layer.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;		None
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;		None
 11908 ;; Return value:  Size  Location     Type
 11909 ;;		None               void
 11910 ;; Registers used:
 11911 ;;		wreg, status,2, status,0
 11912 ;; Tracked objects:
 11913 ;;		On entry : 1F/1
 11914 ;;		On exit  : 1F/1
 11915 ;;		Unchanged: FFFE0/0
 11916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11917 ;;      Params:         0       0       0       0       0       0       0       0
 11918 ;;      Locals:         0       0       0       0       0       0       0       0
 11919 ;;      Temps:          0       0       0       0       0       0       0       0
 11920 ;;      Totals:         0       0       0       0       0       0       0       0
 11921 ;;Total ram usage:        0 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:    4
 11924 ;; This function calls:
 11925 ;;		Nothing
 11926 ;; This function is called by:
 11927 ;;		_BVH2_Appl_Layer
 11928 ;; This function uses a non-reentrant model
 11929 ;;
 11930  161B                     _Cb44_Pic_etat_monitor_node_fcn1:	
 11931                           
 11932                           ;BVH2_Appl_Layer.c: 1849: else {
 11933                           ;BVH2_Appl_Layer.c: 1850: if (Cb44_StateCnt > 5) {
 11934                           
 11935                           ;BVH2_Appl_Layer.c: 1843: if (bool_mat_pic_etat) {
 11936                           
 11937                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 11938  161B  3000               	movlw	0
 11939  161C  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 11940  161D  3006               	movlw	6
 11941  161E  1903               	skipnz
 11942  161F  0226               	subwf	_Cb44_StateCnt^(0+128),w
 11943                           
 11944                           ;BVH2_Appl_Layer.c: 1852: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 11945  1620  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 11946  1621  1C03               	skipc
 11947  1622  2E2C               	goto	L46
 11948  1623  39F8               	andlw	-8
 11949  1624  3803               	iorlw	3
 11950  1625  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 11951                           
 11952                           ;BVH2_Appl_Layer.c: 1854: Cb44_oAlarm = 0;
 11953  1626  0022               	movlb	2	; select bank2
 11954  1627  3018               	movlw	24
 11955  1628  01C7               	clrf	_Cb44_oShutoff^(0+256)
 11956                           
 11957                           ;BVH2_Appl_Layer.c: 1855: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 11958  1629  0021               	movlb	1	; select bank1
 11959  162A  04CD               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 11960                           
 11961                           ;BVH2_Appl_Layer.c: 1856: }
 11962  162B  0008               	return
 11963  162C                     L46:	
 11964                           ;BVH2_Appl_Layer.c: 1857: else {
 11965                           ;BVH2_Appl_Layer.c: 1858: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 1 ;
 11966                           
 11967  162C  39E7               	andlw	-25
 11968  162D  3808               	iorlw	8
 11969  162E  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 11970  162F  0008               	return
 11971  1630                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 11972  1630                     __ptext2057:	
 11973 ;; =============== function ___wmul ends ============
 11974                           
 11975                           
 11976 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 11977 ;; Defined at:
 11978 ;;		line 1677 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\T_Link\BVH2_Appl_Layer.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;		None
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;		None
 11983 ;; Return value:  Size  Location     Type
 11984 ;;		None               void
 11985 ;; Registers used:
 11986 ;;		wreg, status,2, status,0
 11987 ;; Tracked objects:
 11988 ;;		On entry : 1F/1
 11989 ;;		On exit  : 1F/1
 11990 ;;		Unchanged: FFFE0/0
 11991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11992 ;;      Params:         0       0       0       0       0       0       0       0
 11993 ;;      Locals:         0       0       0       0       0       0       0       0
 11994 ;;      Temps:          0       0       0       0       0       0       0       0
 11995 ;;      Totals:         0       0       0       0       0       0       0       0
 11996 ;;Total ram usage:        0 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    4
 11999 ;; This function calls:
 12000 ;;		Nothing
 12001 ;; This function is called by:
 12002 ;;		_BVH2_Appl_Layer
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005  1630                     _Cb1_Current_An___High_node_fcn1:	
 12006                           
 12007                           ;BVH2_Appl_Layer.c: 1680: if (bool_mat_currAlarm_bldc) {
 12008                           
 12009                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 12010  1630  0858               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 12011  1631  1903               	btfsc	3,2
 12012  1632  2E40               	goto	l28857
 12013                           
 12014                           ;BVH2_Appl_Layer.c: 1682: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 12015                           ;BVH2_Appl_Layer.c: 1683: (UInt8)2;
 12016  1633  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12017  1634  39F0               	andlw	-16
 12018  1635  3802               	iorlw	2
 12019  1636  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12020                           
 12021                           ;BVH2_Appl_Layer.c: 1684: Cb1_StateCnt = 0 ;
 12022  1637  01A4               	clrf	_Cb1_StateCnt^(0+128)
 12023  1638  01A5               	clrf	(_Cb1_StateCnt+1)^(0+128)
 12024  1639  2E3C               	goto	l28855
 12025  163A                     L43:	
 12026                           ;BVH2_Appl_Layer.c: 1690: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 12027                           ;BVH2_Appl_Layer.c: 1691: (UInt8)5;
 12028                           
 12029                           
 12030                           ;BVH2_Appl_Layer.c: 1692: Cb1_oShutoff = 0;
 12031                           
 12032                           ;BVH2_Appl_Layer.c: 1693: Cb1_oCurrentAlarm = 0;
 12033  163A  27D6               	fcall	PL35	;call to abstracted procedure
 12034                           
 12035                           ;BVH2_Appl_Layer.c: 1694: Cb1_RestartCounter = 0 ;
 12036  163B  01BF               	clrf	_Cb1_RestartCounter^(0+256)
 12037  163C                     l28855:	
 12038                           
 12039                           ;BVH2_Appl_Layer.c: 1685: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 12040  163C  3030               	movlw	48
 12041  163D  0021               	movlb	1	; select bank1
 12042  163E  04CB               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 12043                           
 12044                           ;BVH2_Appl_Layer.c: 1686: }
 12045  163F  0008               	return
 12046  1640                     l28857:	
 12047                           
 12048                           ;BVH2_Appl_Layer.c: 1687: else {
 12049                           ;BVH2_Appl_Layer.c: 1688: if (Cb1_StateCnt > 100) {
 12050  1640  3000               	movlw	0
 12051  1641  0225               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 12052  1642  3065               	movlw	101
 12053  1643  1903               	skipnz
 12054  1644  0224               	subwf	_Cb1_StateCnt^(0+128),w
 12055                           
 12056                           ;BVH2_Appl_Layer.c: 1697: else {
 12057                           ;BVH2_Appl_Layer.c: 1698: SIBFS_Current_Analysis_High_b.Cb1_glflag = 1 ;
 12058  1645  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12059  1646  1803               	btfsc	3,0
 12060  1647  2E3A               	goto	L43
 12061  1648  39CF               	andlw	-49
 12062  1649  3810               	iorlw	16
 12063  164A  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12064  164B  0008               	return
 12065  164C                     __end_of_Cb1_Current_An___High_node_fcn1:	
 12066  164C                     __ptext2054:	
 12067 ;; =============== function ___awdiv ends ============
 12068                           
 12069                           
 12070 ;; *************** function ___lmul *****************
 12071 ;; Defined at:
 12072 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\lmul.c"
 12073 ;; Parameters:    Size  Location     Type
 12074 ;;  multiplier      4   12[BANK0 ] unsigned long 
 12075 ;;  multiplicand    4   16[BANK0 ] unsigned long 
 12076 ;; Auto vars:     Size  Location     Type
 12077 ;;  product         4   20[BANK0 ] unsigned long 
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  4   12[BANK0 ] unsigned long 
 12080 ;; Registers used:
 12081 ;;		wreg, status,2, status,0
 12082 ;; Tracked objects:
 12083 ;;		On entry : 1F/0
 12084 ;;		On exit  : 1F/0
 12085 ;;		Unchanged: FFFE0/0
 12086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12087 ;;      Params:         0       8       0       0       0       0       0       0
 12088 ;;      Locals:         0       4       0       0       0       0       0       0
 12089 ;;      Temps:          0       0       0       0       0       0       0       0
 12090 ;;      Totals:         0      12       0       0       0       0       0       0
 12091 ;;Total ram usage:       12 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:    4
 12094 ;; This function calls:
 12095 ;;		Nothing
 12096 ;; This function is called by:
 12097 ;;		_BVH2_Appl_Layer
 12098 ;; This function uses a non-reentrant model
 12099 ;;
 12100  164C                     ___lmul:	
 12101                           
 12102                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12103  164C  01B4               	clrf	___lmul@product
 12104  164D  01B5               	clrf	___lmul@product+1
 12105  164E  01B6               	clrf	___lmul@product+2
 12106  164F  01B7               	clrf	___lmul@product+3
 12107  1650                     l19762:	
 12108  1650  1C2C               	btfss	___lmul@multiplier,0
 12109  1651  2E5A               	goto	l28917
 12110  1652  0830               	movf	___lmul@multiplicand,w
 12111  1653  07B4               	addwf	___lmul@product,f
 12112  1654  0831               	movf	___lmul@multiplicand+1,w
 12113  1655  3DB5               	addwfc	___lmul@product+1,f
 12114  1656  0832               	movf	___lmul@multiplicand+2,w
 12115  1657  3DB6               	addwfc	___lmul@product+2,f
 12116  1658  0833               	movf	___lmul@multiplicand+3,w
 12117  1659  3DB7               	addwfc	___lmul@product+3,f
 12118  165A                     l28917:	
 12119  165A  35B0               	lslf	___lmul@multiplicand,f
 12120  165B  0DB1               	rlf	___lmul@multiplicand+1,f
 12121  165C  0DB2               	rlf	___lmul@multiplicand+2,f
 12122  165D  0DB3               	rlf	___lmul@multiplicand+3,f
 12123  165E  36AF               	lsrf	___lmul@multiplier+3,f
 12124  165F  0CAE               	rrf	___lmul@multiplier+2,f
 12125  1660  0CAD               	rrf	___lmul@multiplier+1,f
 12126  1661  0CAC               	rrf	___lmul@multiplier,f
 12127  1662  082F               	movf	___lmul@multiplier+3,w
 12128  1663  042E               	iorwf	___lmul@multiplier+2,w
 12129  1664  042D               	iorwf	___lmul@multiplier+1,w
 12130  1665  042C               	iorwf	___lmul@multiplier,w
 12131  1666  1D03               	skipz
 12132  1667  2E50               	goto	l19762
 12133  1668  0837               	movf	___lmul@product+3,w
 12134  1669  00AF               	movwf	?___lmul+3
 12135  166A  0836               	movf	___lmul@product+2,w
 12136  166B  00AE               	movwf	?___lmul+2
 12137  166C  0835               	movf	___lmul@product+1,w
 12138  166D  00AD               	movwf	?___lmul+1
 12139  166E  0834               	movf	___lmul@product,w
 12140  166F  00AC               	movwf	?___lmul
 12141  1670  0008               	return
 12142  1671                     __end_of___lmul:	
 12143  1671                     __ptext2059:	
 12144 ;; =============== function _Cb56_UbatHandling_node_fcn2 ends ============
 12145                           
 12146                           
 12147 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 12148 ;; Defined at:
 12149 ;;		line 1721 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\T_Link\BVH2_Appl_Layer.c"
 12150 ;; Parameters:    Size  Location     Type
 12151 ;;		None
 12152 ;; Auto vars:     Size  Location     Type
 12153 ;;		None
 12154 ;; Return value:  Size  Location     Type
 12155 ;;		None               void
 12156 ;; Registers used:
 12157 ;;		wreg, status,2, status,0
 12158 ;; Tracked objects:
 12159 ;;		On entry : 1F/1
 12160 ;;		On exit  : 1D/0
 12161 ;;		Unchanged: FFFE0/0
 12162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12163 ;;      Params:         0       0       0       0       0       0       0       0
 12164 ;;      Locals:         0       0       0       0       0       0       0       0
 12165 ;;      Temps:          0       0       0       0       0       0       0       0
 12166 ;;      Totals:         0       0       0       0       0       0       0       0
 12167 ;;Total ram usage:        0 bytes
 12168 ;; Hardware stack levels used:    1
 12169 ;; Hardware stack levels required when called:    4
 12170 ;; This function calls:
 12171 ;;		Nothing
 12172 ;; This function is called by:
 12173 ;;		_BVH2_Appl_Layer
 12174 ;; This function uses a non-reentrant model
 12175 ;;
 12176  1671                     _Cb34_PWM_Detection_node_fcn1:	
 12177                           
 12178                           ;BVH2_Appl_Layer.c: 1722: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 12179                           
 12180                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 12181  1671  0020               	movlb	0	; select bank0
 12182  1672  084A               	movf	_Cb34_idPWM,w
 12183  1673  1903               	btfsc	3,2
 12184  1674  2E79               	goto	l28715
 12185  1675  30C8               	movlw	200
 12186  1676  024A               	subwf	_Cb34_idPWM,w
 12187  1677  1C03               	skipc
 12188  1678  2E83               	goto	l28727
 12189  1679                     l28715:	
 12190                           
 12191                           ;BVH2_Appl_Layer.c: 1724: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 12192  1679  0021               	movlb	1	; select bank1
 12193  167A  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12194  167B  39F0               	andlw	-16
 12195  167C  3807               	iorlw	7
 12196                           
 12197                           ;BVH2_Appl_Layer.c: 1725: Cb34_odPumpOff = 0;
 12198                           
 12199                           ;BVH2_Appl_Layer.c: 1726: Cb34_odFixedValueSel = 1;
 12200  167D  27F1               	fcall	PL45	;call to abstracted procedure
 12201                           
 12202                           ;BVH2_Appl_Layer.c: 1727: Cb34_odFixedLowValueSel = 0;
 12203  167E  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12204                           
 12205                           ;BVH2_Appl_Layer.c: 1728: Cb34_oPWM_SC_Alarm = 0;
 12206  167F  01C3               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12207                           
 12208                           ;BVH2_Appl_Layer.c: 1729: Cb34_oPWM_Alarm = 1;
 12209  1680  01C2               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12210  1681  0AC2               	incf	_Cb34_oPWM_Alarm^(0+256),f
 12211                           
 12212                           ;BVH2_Appl_Layer.c: 1730: }
 12213  1682  0008               	return
 12214  1683                     l28727:	
 12215                           
 12216                           ;BVH2_Appl_Layer.c: 1731: else {
 12217                           ;BVH2_Appl_Layer.c: 1734: if ((ui16_PWM_Freq_mat < 36000) || (ui16_PWM_Freq_mat > 44000)
      +                          ) {
 12218  1683  308C               	movlw	140
 12219  1684  0022               	movlb	2	; select bank2
 12220  1685  022E               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 12221  1686  30A0               	movlw	160
 12222  1687  1903               	skipnz
 12223  1688  022D               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 12224  1689  1C03               	skipc
 12225  168A  2E92               	goto	l28731
 12226  168B  30AB               	movlw	171
 12227  168C  022E               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 12228  168D  30E1               	movlw	225
 12229  168E  1903               	skipnz
 12230  168F  022D               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 12231  1690  1C03               	skipc
 12232  1691  2EAC               	goto	l28743
 12233  1692                     l28731:	
 12234                           
 12235                           ;BVH2_Appl_Layer.c: 1736: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 12236  1692  0021               	movlb	1	; select bank1
 12237  1693  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12238  1694  39F0               	andlw	-16
 12239  1695  3806               	iorlw	6
 12240  1696  2E9B               	goto	L45
 12241  1697                     l28745:	
 12242                           
 12243                           ;BVH2_Appl_Layer.c: 1746: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 12244  1697  0021               	movlb	1	; select bank1
 12245  1698  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12246  1699  39F0               	andlw	-16
 12247  169A  3803               	iorlw	3
 12248  169B                     L45:	
 12249                           
 12250                           ;BVH2_Appl_Layer.c: 1737: Cb34_odPumpOff = 0;
 12251                           
 12252                           ;BVH2_Appl_Layer.c: 1738: Cb34_odFixedValueSel = 1;
 12253  169B  27F1  3190         	fcall	PL45	;call to abstracted procedure
 12254  169D  2EA7               	goto	l28737
 12255  169E                     l28759:	
 12256                           
 12257                           ;BVH2_Appl_Layer.c: 1757: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12258                           ;BVH2_Appl_Layer.c: 1758: (UInt8)8;
 12259  169E  0021               	movlb	1	; select bank1
 12260  169F  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12261  16A0  39F0               	andlw	-16
 12262  16A1  3808               	iorlw	8
 12263  16A2  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12264                           
 12265                           ;BVH2_Appl_Layer.c: 1759: Cb34_odPumpOff = 1;
 12266  16A3  0022               	movlb	2	; select bank2
 12267  16A4  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12268  16A5  0AC6               	incf	_Cb34_odPumpOff^(0+256),f
 12269                           
 12270                           ;BVH2_Appl_Layer.c: 1760: Cb34_odFixedValueSel = 0;
 12271  16A6  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12272  16A7                     l28737:	
 12273                           
 12274                           ;BVH2_Appl_Layer.c: 1739: Cb34_odFixedLowValueSel = 0;
 12275  16A7  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12276                           
 12277                           ;BVH2_Appl_Layer.c: 1740: Cb34_oPWM_SC_Alarm = 1;
 12278  16A8  01C3               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12279  16A9  0AC3               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12280  16AA                     l28741:	
 12281                           
 12282                           ;BVH2_Appl_Layer.c: 1741: Cb34_oPWM_Alarm = 0;
 12283  16AA  01C2               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12284                           
 12285                           ;BVH2_Appl_Layer.c: 1742: }
 12286  16AB  0008               	return
 12287  16AC                     l28743:	
 12288                           
 12289                           ;BVH2_Appl_Layer.c: 1743: else {
 12290                           ;BVH2_Appl_Layer.c: 1744: if (Cb34_idPWM <= 5) {
 12291  16AC  3006               	movlw	6
 12292  16AD  0020               	movlb	0	; select bank0
 12293  16AE  024A               	subwf	_Cb34_idPWM,w
 12294  16AF  1C03               	btfss	3,0
 12295  16B0  2E97               	goto	l28745
 12296                           
 12297                           ;BVH2_Appl_Layer.c: 1753: else {
 12298                           ;BVH2_Appl_Layer.c: 1754: if (Cb34_idPWM < 9) {
 12299  16B1  3009               	movlw	9
 12300  16B2  024A               	subwf	_Cb34_idPWM,w
 12301  16B3  1C03               	btfss	3,0
 12302  16B4  2E9E               	goto	l28759
 12303                           
 12304                           ;BVH2_Appl_Layer.c: 1765: else {
 12305                           ;BVH2_Appl_Layer.c: 1766: if (Cb34_idPWM > 191) {
 12306  16B5  30C0               	movlw	192
 12307  16B6  024A               	subwf	_Cb34_idPWM,w
 12308  16B7  1C03               	skipc
 12309  16B8  2EBE               	goto	l28785
 12310                           
 12311                           ;BVH2_Appl_Layer.c: 1769: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12312                           ;BVH2_Appl_Layer.c: 1770: (UInt8)4;
 12313  16B9  0021               	movlb	1	; select bank1
 12314  16BA  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12315  16BB  39F0               	andlw	-16
 12316  16BC  3804               	iorlw	4
 12317  16BD  2E9B               	goto	L45
 12318  16BE                     l28785:	
 12319                           
 12320                           ;BVH2_Appl_Layer.c: 1777: else {
 12321                           ;BVH2_Appl_Layer.c: 1778: if (Cb34_idPWM >= 23) {
 12322  16BE  3017               	movlw	23
 12323  16BF  024A               	subwf	_Cb34_idPWM,w
 12324  16C0  1C03               	skipc
 12325  16C1  2ECD               	goto	l28799
 12326                           
 12327                           ;BVH2_Appl_Layer.c: 1781: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12328                           ;BVH2_Appl_Layer.c: 1782: (UInt8)2;
 12329  16C2  0021               	movlb	1	; select bank1
 12330  16C3  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12331  16C4  39F0               	andlw	-16
 12332  16C5  3802               	iorlw	2
 12333  16C6  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12334                           
 12335                           ;BVH2_Appl_Layer.c: 1783: Cb34_odPumpOff = 0;
 12336  16C7  0022               	movlb	2	; select bank2
 12337  16C8  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12338                           
 12339                           ;BVH2_Appl_Layer.c: 1784: Cb34_odFixedLowValueSel = 0;
 12340  16C9  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12341                           
 12342                           ;BVH2_Appl_Layer.c: 1785: Cb34_odFixedValueSel = 0;
 12343  16CA  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12344  16CB                     l28795:	
 12345                           
 12346                           ;BVH2_Appl_Layer.c: 1786: Cb34_oPWM_SC_Alarm = 0;
 12347  16CB  01C3               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12348  16CC  2EAA               	goto	l28741
 12349  16CD                     l28799:	
 12350                           
 12351                           ;BVH2_Appl_Layer.c: 1789: else {
 12352                           ;BVH2_Appl_Layer.c: 1790: if (Cb34_idPWM > 19) {
 12353  16CD  3014               	movlw	20
 12354  16CE  024A               	subwf	_Cb34_idPWM,w
 12355  16CF  1C03               	skipc
 12356  16D0  2EDC               	goto	l28813
 12357                           
 12358                           ;BVH2_Appl_Layer.c: 1793: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12359                           ;BVH2_Appl_Layer.c: 1794: (UInt8)5;
 12360  16D1  0021               	movlb	1	; select bank1
 12361  16D2  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12362  16D3  39F0               	andlw	-16
 12363  16D4  3805               	iorlw	5
 12364  16D5  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12365                           
 12366                           ;BVH2_Appl_Layer.c: 1795: Cb34_odPumpOff = 0;
 12367  16D6  0022               	movlb	2	; select bank2
 12368  16D7  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12369                           
 12370                           ;BVH2_Appl_Layer.c: 1796: Cb34_odFixedValueSel = 0;
 12371  16D8  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12372                           
 12373                           ;BVH2_Appl_Layer.c: 1797: Cb34_odFixedLowValueSel = 1;
 12374  16D9  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12375  16DA  0AC4               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 12376  16DB  2ECB               	goto	l28795
 12377  16DC                     l28813:	
 12378                           
 12379                           ;BVH2_Appl_Layer.c: 1801: else {
 12380                           ;BVH2_Appl_Layer.c: 1802: if (Cb34_idPWM <= 19) {
 12381  16DC  3014               	movlw	20
 12382  16DD  024A               	subwf	_Cb34_idPWM,w
 12383  16DE  1803               	skipnc
 12384  16DF  0008               	return
 12385                           
 12386                           ;BVH2_Appl_Layer.c: 1805: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12387                           ;BVH2_Appl_Layer.c: 1806: (UInt8)1;
 12388  16E0  0021               	movlb	1	; select bank1
 12389                           
 12390                           ;BVH2_Appl_Layer.c: 1807: Cb34_odPumpOff = 1;
 12391                           
 12392                           ;BVH2_Appl_Layer.c: 1808: Cb34_odFixedValueSel = 0;
 12393                           
 12394                           ;BVH2_Appl_Layer.c: 1809: Cb34_odFixedLowValueSel = 0;
 12395  16E1  27AD  3190         	fcall	PL24	;call to abstracted procedure
 12396  16E3  2ECB               	goto	l28795
 12397  16E4                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 12398  16E4                     __ptext2058:	
 12399 ;; =============== function _Cb1_Current_An___High_node_fcn1 ends ============
 12400                           
 12401                           
 12402 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 12403 ;; Defined at:
 12404 ;;		line 1881 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\T_Link\BVH2_Appl_Layer.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;		None
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;		None
 12409 ;; Return value:  Size  Location     Type
 12410 ;;		None               void
 12411 ;; Registers used:
 12412 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12413 ;; Tracked objects:
 12414 ;;		On entry : 1F/1
 12415 ;;		On exit  : 1F/2
 12416 ;;		Unchanged: FFFE0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12418 ;;      Params:         0       0       0       0       0       0       0       0
 12419 ;;      Locals:         0       0       0       0       0       0       0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0
 12421 ;;      Totals:         0       0       0       0       0       0       0       0
 12422 ;;Total ram usage:        0 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    4
 12425 ;; This function calls:
 12426 ;;		Nothing
 12427 ;; This function is called by:
 12428 ;;		_BVH2_Appl_Layer
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431  16E4                     _Cb56_UbatHandling_node_fcn2:	
 12432                           
 12433                           ;BVH2_Appl_Layer.c: 1883: if (((UInt8)ui8_BattVolt_mat) > 230) {
 12434                           
 12435                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 12436  16E4  30E7               	movlw	231
 12437  16E5  0240               	subwf	_ui8_BattVolt_mat^(0+128),w
 12438  16E6  1803               	btfsc	3,0
 12439  16E7  2EEF               	goto	l28831
 12440  16E8  2F08               	goto	l28837
 12441  16E9                     l17812:	
 12442                           ;BVH2_Appl_Layer.c: 1886: case 2: {
 12443                           
 12444                           
 12445                           ;BVH2_Appl_Layer.c: 1887: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 12446  16E9  124E               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 12447                           
 12448                           ;BVH2_Appl_Layer.c: 1888: break;
 12449  16EA  2EF8               	goto	l17813
 12450  16EB                     l17814:	
 12451                           ;BVH2_Appl_Layer.c: 1889: }
 12452                           ;BVH2_Appl_Layer.c: 1890: case 3: {
 12453                           
 12454                           
 12455                           ;BVH2_Appl_Layer.c: 1891: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 12456  16EB  12CE               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 12457                           
 12458                           ;BVH2_Appl_Layer.c: 1892: break;
 12459  16EC  2EF8               	goto	l17813
 12460  16ED                     l17815:	
 12461                           ;BVH2_Appl_Layer.c: 1893: }
 12462                           ;BVH2_Appl_Layer.c: 1894: default: {
 12463                           
 12464                           
 12465                           ;BVH2_Appl_Layer.c: 1895: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 12466  16ED  134E               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 12467                           
 12468                           ;BVH2_Appl_Layer.c: 1896: }
 12469                           ;BVH2_Appl_Layer.c: 1897: }
 12470  16EE  2EF8               	goto	l17813
 12471  16EF                     l28831:	
 12472  16EF  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
 12473  16F0  3907               	andlw	7
 12474                           
 12475                           ; Switch size 1, requested type "space"
 12476                           ; Number of cases is 2, Range of values is 2 to 3
 12477                           ; switch strategies available:
 12478                           ; Name         Instructions Cycles
 12479                           ; simple_byte            7     4 (average)
 12480                           ; direct_byte           13     9 (fixed)
 12481                           ; jumptable            263     9 (fixed)
 12482                           ;	Chosen strategy is simple_byte
 12483  16F1  3A02               	xorlw	2	; case 2
 12484  16F2  1903               	skipnz
 12485  16F3  2EE9               	goto	l17812
 12486  16F4  3A01               	xorlw	1	; case 3
 12487  16F5  1903               	skipnz
 12488  16F6  2EEB               	goto	l17814
 12489  16F7  2EED               	goto	l17815
 12490  16F8                     l17813:	
 12491                           
 12492                           ;BVH2_Appl_Layer.c: 1898: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 12493  16F8  164E               	bsf	_SIBFS_UbatHandling_b^(0+128),4
 12494  16F9                     L44:	
 12495                           
 12496                           ;BVH2_Appl_Layer.c: 1899: Cb56_odPumpOff = 1;
 12497  16F9  0022               	movlb	2	; select bank2
 12498  16FA  01C9               	clrf	_Cb56_odPumpOff^(0+256)
 12499  16FB  0AC9               	incf	_Cb56_odPumpOff^(0+256),f
 12500                           
 12501                           ;BVH2_Appl_Layer.c: 1900: Cb56_odFixedValueSel = 0;
 12502  16FC  0021               	movlb	1	; select bank1
 12503  16FD  01C9               	clrf	_Cb56_odFixedValueSel^(0+128)
 12504                           
 12505                           ;BVH2_Appl_Layer.c: 1901: Cb56_oUbat_Alarm_High = 1;
 12506  16FE  0022               	movlb	2	; select bank2
 12507  16FF  01C8               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 12508  1700  0AC8               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 12509                           
 12510                           ;BVH2_Appl_Layer.c: 1902: }
 12511  1701  0008               	return
 12512  1702                     l17818:	
 12513                           ;BVH2_Appl_Layer.c: 1905: case 2: {
 12514                           
 12515                           
 12516                           ;BVH2_Appl_Layer.c: 1906: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 12517  1702  124E               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 12518                           
 12519                           ;BVH2_Appl_Layer.c: 1907: break;
 12520  1703  2F11               	goto	l28839
 12521  1704                     l17820:	
 12522                           ;BVH2_Appl_Layer.c: 1908: }
 12523                           ;BVH2_Appl_Layer.c: 1909: case 3: {
 12524                           
 12525                           
 12526                           ;BVH2_Appl_Layer.c: 1910: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 12527  1704  12CE               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 12528                           
 12529                           ;BVH2_Appl_Layer.c: 1911: break;
 12530  1705  2F11               	goto	l28839
 12531  1706                     l17821:	
 12532                           ;BVH2_Appl_Layer.c: 1912: }
 12533                           ;BVH2_Appl_Layer.c: 1913: default: {
 12534                           
 12535                           
 12536                           ;BVH2_Appl_Layer.c: 1914: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 12537  1706  134E               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 12538                           
 12539                           ;BVH2_Appl_Layer.c: 1915: }
 12540                           ;BVH2_Appl_Layer.c: 1916: }
 12541  1707  2F11               	goto	l28839
 12542  1708                     l28837:	
 12543  1708  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
 12544  1709  3907               	andlw	7
 12545                           
 12546                           ; Switch size 1, requested type "space"
 12547                           ; Number of cases is 2, Range of values is 2 to 3
 12548                           ; switch strategies available:
 12549                           ; Name         Instructions Cycles
 12550                           ; simple_byte            7     4 (average)
 12551                           ; direct_byte           13     9 (fixed)
 12552                           ; jumptable            263     9 (fixed)
 12553                           ;	Chosen strategy is simple_byte
 12554  170A  3A02               	xorlw	2	; case 2
 12555  170B  1903               	skipnz
 12556  170C  2F02               	goto	l17818
 12557  170D  3A01               	xorlw	1	; case 3
 12558  170E  1903               	skipnz
 12559  170F  2F04               	goto	l17820
 12560  1710  2F06               	goto	l17821
 12561  1711                     l28839:	
 12562                           
 12563                           ;BVH2_Appl_Layer.c: 1919: if (((UInt8)ui8_BattVolt_mat) < 45) {
 12564  1711  302D               	movlw	45
 12565  1712  0240               	subwf	_ui8_BattVolt_mat^(0+128),w
 12566  1713  1803               	skipnc
 12567  1714  2F17               	goto	l17822
 12568                           
 12569                           ;BVH2_Appl_Layer.c: 1921: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 12570  1715  16CE               	bsf	_SIBFS_UbatHandling_b^(0+128),5
 12571  1716  2EF9               	goto	L44
 12572  1717                     l17822:	
 12573                           ;BVH2_Appl_Layer.c: 1922: Cb56_odPumpOff = 1;
 12574                           
 12575                           
 12576                           ;BVH2_Appl_Layer.c: 1926: else {
 12577                           ;BVH2_Appl_Layer.c: 1928: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 12578  1717  174E               	bsf	_SIBFS_UbatHandling_b^(0+128),6
 12579                           
 12580                           ;BVH2_Appl_Layer.c: 1929: Cb56_odPumpOff = 0;
 12581                           
 12582                           ;BVH2_Appl_Layer.c: 1930: Cb56_odFixedValueSel = 0;
 12583                           
 12584                           ;BVH2_Appl_Layer.c: 1931: Cb56_oUbat_Alarm_High = 0;
 12585  1718  27E4               	fcall	PL38	;call to abstracted procedure
 12586  1719  0008               	return
 12587  171A                     __end_of_Cb56_UbatHandling_node_fcn2:	
 12588  171A                     __ptext2052:	
 12589 ;; =============== function ___ltdiv ends ============
 12590                           
 12591                           
 12592 ;; *************** function ___aldiv *****************
 12593 ;; Defined at:
 12594 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\aldiv.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;  divisor         4   12[BANK0 ] long 
 12597 ;;  dividend        4   16[BANK0 ] long 
 12598 ;; Auto vars:     Size  Location     Type
 12599 ;;  quotient        4   22[BANK0 ] long 
 12600 ;;  sign            1   21[BANK0 ] unsigned char 
 12601 ;;  counter         1   20[BANK0 ] unsigned char 
 12602 ;; Return value:  Size  Location     Type
 12603 ;;                  4   12[BANK0 ] long 
 12604 ;; Registers used:
 12605 ;;		wreg, status,2, status,0
 12606 ;; Tracked objects:
 12607 ;;		On entry : 1F/0
 12608 ;;		On exit  : 1F/0
 12609 ;;		Unchanged: FFFE0/0
 12610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12611 ;;      Params:         0       8       0       0       0       0       0       0
 12612 ;;      Locals:         0       6       0       0       0       0       0       0
 12613 ;;      Temps:          0       0       0       0       0       0       0       0
 12614 ;;      Totals:         0      14       0       0       0       0       0       0
 12615 ;;Total ram usage:       14 bytes
 12616 ;; Hardware stack levels used:    1
 12617 ;; Hardware stack levels required when called:    4
 12618 ;; This function calls:
 12619 ;;		Nothing
 12620 ;; This function is called by:
 12621 ;;		_BVH2_Appl_Layer
 12622 ;; This function uses a non-reentrant model
 12623 ;;
 12624  171A                     ___aldiv:	
 12625                           
 12626                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12627  171A  01B5               	clrf	___aldiv@sign
 12628  171B  1FAF               	btfss	___aldiv@divisor+3,7
 12629  171C  2F2A               	goto	l19882
 12630  171D  09AC               	comf	___aldiv@divisor,f
 12631  171E  09AD               	comf	___aldiv@divisor+1,f
 12632  171F  09AE               	comf	___aldiv@divisor+2,f
 12633  1720  09AF               	comf	___aldiv@divisor+3,f
 12634  1721  0AAC               	incf	___aldiv@divisor,f
 12635  1722  1903               	skipnz
 12636  1723  0AAD               	incf	___aldiv@divisor+1,f
 12637  1724  1903               	skipnz
 12638  1725  0AAE               	incf	___aldiv@divisor+2,f
 12639  1726  1903               	skipnz
 12640  1727  0AAF               	incf	___aldiv@divisor+3,f
 12641  1728  01B5               	clrf	___aldiv@sign
 12642  1729  0AB5               	incf	___aldiv@sign,f
 12643  172A                     l19882:	
 12644  172A  1FB3               	btfss	___aldiv@dividend+3,7
 12645  172B  2F39               	goto	l28935
 12646  172C  09B0               	comf	___aldiv@dividend,f
 12647  172D  09B1               	comf	___aldiv@dividend+1,f
 12648  172E  09B2               	comf	___aldiv@dividend+2,f
 12649  172F  09B3               	comf	___aldiv@dividend+3,f
 12650  1730  0AB0               	incf	___aldiv@dividend,f
 12651  1731  1903               	skipnz
 12652  1732  0AB1               	incf	___aldiv@dividend+1,f
 12653  1733  1903               	skipnz
 12654  1734  0AB2               	incf	___aldiv@dividend+2,f
 12655  1735  1903               	skipnz
 12656  1736  0AB3               	incf	___aldiv@dividend+3,f
 12657  1737  3001               	movlw	1
 12658  1738  06B5               	xorwf	___aldiv@sign,f
 12659  1739                     l28935:	
 12660  1739  01B6               	clrf	___aldiv@quotient
 12661  173A  01B7               	clrf	___aldiv@quotient+1
 12662  173B  01B8               	clrf	___aldiv@quotient+2
 12663  173C  01B9               	clrf	___aldiv@quotient+3
 12664  173D  082F               	movf	___aldiv@divisor+3,w
 12665  173E  042E               	iorwf	___aldiv@divisor+2,w
 12666  173F  042D               	iorwf	___aldiv@divisor+1,w
 12667  1740  042C               	iorwf	___aldiv@divisor,w
 12668  1741  1903               	skipnz
 12669  1742  2F6F               	goto	l28957
 12670  1743  01B4               	clrf	___aldiv@counter
 12671  1744                     L40:	
 12672  1744  0AB4               	incf	___aldiv@counter,f
 12673  1745  1BAF               	btfsc	___aldiv@divisor+3,7
 12674  1746  2F4C               	goto	l28945
 12675  1747  35AC               	lslf	___aldiv@divisor,f
 12676  1748  0DAD               	rlf	___aldiv@divisor+1,f
 12677  1749  0DAE               	rlf	___aldiv@divisor+2,f
 12678  174A  0DAF               	rlf	___aldiv@divisor+3,f
 12679  174B  2F44               	goto	L40
 12680  174C                     l28945:	
 12681  174C  35B6               	lslf	___aldiv@quotient,f
 12682  174D  0DB7               	rlf	___aldiv@quotient+1,f
 12683  174E  0DB8               	rlf	___aldiv@quotient+2,f
 12684  174F  0DB9               	rlf	___aldiv@quotient+3,f
 12685  1750  082F               	movf	___aldiv@divisor+3,w
 12686  1751  0233               	subwf	___aldiv@dividend+3,w
 12687  1752  1D03               	skipz
 12688  1753  2F5E               	goto	u9105
 12689  1754  082E               	movf	___aldiv@divisor+2,w
 12690  1755  0232               	subwf	___aldiv@dividend+2,w
 12691  1756  1D03               	skipz
 12692  1757  2F5E               	goto	u9105
 12693  1758  082D               	movf	___aldiv@divisor+1,w
 12694  1759  0231               	subwf	___aldiv@dividend+1,w
 12695  175A  1D03               	skipz
 12696  175B  2F5E               	goto	u9105
 12697  175C  082C               	movf	___aldiv@divisor,w
 12698  175D  0230               	subwf	___aldiv@dividend,w
 12699  175E                     u9105:	
 12700  175E  1C03               	skipc
 12701  175F  2F69               	goto	l28953
 12702  1760  082C               	movf	___aldiv@divisor,w
 12703  1761  02B0               	subwf	___aldiv@dividend,f
 12704  1762  082D               	movf	___aldiv@divisor+1,w
 12705  1763  3BB1               	subwfb	___aldiv@dividend+1,f
 12706  1764  082E               	movf	___aldiv@divisor+2,w
 12707  1765  3BB2               	subwfb	___aldiv@dividend+2,f
 12708  1766  082F               	movf	___aldiv@divisor+3,w
 12709  1767  3BB3               	subwfb	___aldiv@dividend+3,f
 12710  1768  1436               	bsf	___aldiv@quotient,0
 12711  1769                     l28953:	
 12712  1769  36AF               	lsrf	___aldiv@divisor+3,f
 12713  176A  0CAE               	rrf	___aldiv@divisor+2,f
 12714  176B  0CAD               	rrf	___aldiv@divisor+1,f
 12715  176C  0CAC               	rrf	___aldiv@divisor,f
 12716  176D  0BB4               	decfsz	___aldiv@counter,f
 12717  176E  2F4C               	goto	l28945
 12718  176F                     l28957:	
 12719  176F  0835               	movf	___aldiv@sign,w
 12720  1770  1903               	btfsc	3,2
 12721  1771  2F7D               	goto	l28961
 12722  1772  09B6               	comf	___aldiv@quotient,f
 12723  1773  09B7               	comf	___aldiv@quotient+1,f
 12724  1774  09B8               	comf	___aldiv@quotient+2,f
 12725  1775  09B9               	comf	___aldiv@quotient+3,f
 12726  1776  0AB6               	incf	___aldiv@quotient,f
 12727  1777  1903               	skipnz
 12728  1778  0AB7               	incf	___aldiv@quotient+1,f
 12729  1779  1903               	skipnz
 12730  177A  0AB8               	incf	___aldiv@quotient+2,f
 12731  177B  1903               	skipnz
 12732  177C  0AB9               	incf	___aldiv@quotient+3,f
 12733  177D                     l28961:	
 12734  177D  0839               	movf	___aldiv@quotient+3,w
 12735  177E  00AF               	movwf	?___aldiv+3
 12736  177F  0838               	movf	___aldiv@quotient+2,w
 12737  1780  00AE               	movwf	?___aldiv+2
 12738  1781  0837               	movf	___aldiv@quotient+1,w
 12739  1782  00AD               	movwf	?___aldiv+1
 12740  1783  0836               	movf	___aldiv@quotient,w
 12741  1784  00AC               	movwf	?___aldiv
 12742  1785  0008               	return
 12743  1786                     __end_of___aldiv:	
 12744  1786                     PL12:	
 12745  1786  0020               	movlb	0	; select bank0
 12746  1787  00BB               	movwf	??_BVH2_Appl_Layer+1
 12747  1788  0021               	movlb	1	; select bank1
 12748  1789  0839               	movf	(_ui16_mat_Current+1)^(0+128),w
 12749  178A  0020               	movlb	0	; select bank0
 12750  178B  023B               	subwf	??_BVH2_Appl_Layer+1,w
 12751  178C  1D03               	skipz
 12752  178D  0008               	return
 12753  178E  0021               	movlb	1	; select bank1
 12754  178F  0838               	movf	_ui16_mat_Current^(0+128),w
 12755  1790  0020               	movlb	0	; select bank0
 12756  1791  023A               	subwf	??_BVH2_Appl_Layer,w
 12757  1792  0008               	return
 12758  1793                     PL13:	
 12759  1793  086C               	movf	_ui16_Current_Thresh^(0+384),w
 12760  1794  3EFE               	addlw	254
 12761  1795  0020               	movlb	0	; select bank0
 12762  1796  00BA               	movwf	??_BVH2_Appl_Layer
 12763  1797  30FF               	movlw	255
 12764  1798  0023               	movlb	3	; select bank3
 12765  1799  3D6D               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 12766  179A  0008               	return
 12767  179B                     PL15:	
 12768  179B  086C               	movf	_ui16_Current_Thresh^(0+384),w
 12769  179C  3E02               	addlw	2
 12770  179D  0020               	movlb	0	; select bank0
 12771  179E  00BA               	movwf	??_BVH2_Appl_Layer
 12772  179F  3000               	movlw	0
 12773  17A0  0023               	movlb	3	; select bank3
 12774  17A1  3D6D               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 12775  17A2  0020               	movlb	0	; select bank0
 12776  17A3  00BB               	movwf	??_BVH2_Appl_Layer+1
 12777  17A4  0021               	movlb	1	; select bank1
 12778  17A5  0239               	subwf	(_ui16_mat_Current+1)^(0+128),w
 12779  17A6  1D03               	skipz
 12780  17A7  0008               	return
 12781  17A8  0020               	movlb	0	; select bank0
 12782  17A9  083A               	movf	??_BVH2_Appl_Layer,w
 12783  17AA  0021               	movlb	1	; select bank1
 12784  17AB  0238               	subwf	_ui16_mat_Current^(0+128),w
 12785  17AC  0008               	return
 12786  17AD                     PL24:	
 12787  17AD  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12788  17AE  39F0               	andlw	-16
 12789  17AF  3801               	iorlw	1
 12790  17B0  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12791  17B1  0022               	movlb	2	; select bank2
 12792  17B2  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12793  17B3  0AC6               	incf	_Cb34_odPumpOff^(0+256),f
 12794  17B4  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12795  17B5  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12796  17B6  0008               	return
 12797  17B7                     PL26:	
 12798  17B7  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 12799  17B8  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 12800  17B9  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 12801  17BA  0023               	movlb	3	; select bank3
 12802  17BB  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 12803  17BC  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 12804  17BD  0008               	return
 12805  17BE                     PL28:	
 12806  17BE  0024               	movlb	4	; select bank4
 12807  17BF  0838               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),w
 12808  17C0  0020               	movlb	0	; select bank0
 12809  17C1  00AF               	movwf	?___wmul+3
 12810  17C2  0024               	movlb	4	; select bank4
 12811  17C3  0837               	movf	BVH2_Appl_Layer@Sb2_Error^(0+512),w
 12812  17C4  0020               	movlb	0	; select bank0
 12813  17C5  00AE               	movwf	?___wmul+2
 12814  17C6  0008               	return
 12815  17C7                     PL31:	
 12816  17C7  01AD               	clrf	?___lmul+1
 12817  17C8  01AE               	clrf	?___lmul+2
 12818  17C9  01AF               	clrf	?___lmul+3
 12819  17CA  00B0               	movwf	?___lmul+4
 12820  17CB  01B1               	clrf	?___lmul+5
 12821  17CC  01B2               	clrf	?___lmul+6
 12822  17CD  01B3               	clrf	?___lmul+7
 12823  17CE  0008               	return
 12824  17CF                     PL34:	
 12825  17CF  39F8               	andlw	-8
 12826  17D0  3804               	iorlw	4
 12827  17D1  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 12828  17D2  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 12829  17D3  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 12830  17D4  0022               	movlb	2	; select bank2
 12831  17D5  0008               	return
 12832  17D6                     PL35:	
 12833  17D6  39F0               	andlw	-16
 12834  17D7  3805               	iorlw	5
 12835  17D8  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12836  17D9  0022               	movlb	2	; select bank2
 12837  17DA  01C1               	clrf	_Cb1_oShutoff^(0+256)
 12838  17DB  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 12839  17DC  0008               	return
 12840  17DD                     PL37:	
 12841  17DD  0020               	movlb	0	; select bank0
 12842  17DE  00BA               	movwf	??_BVH2_Appl_Layer
 12843  17DF  0CBA               	rrf	??_BVH2_Appl_Layer,f
 12844  17E0  0C3A               	rrf	??_BVH2_Appl_Layer,w
 12845  17E1  3903               	andlw	3
 12846  17E2  3A03               	xorlw	3
 12847  17E3  0008               	return
 12848  17E4                     PL38:	
 12849  17E4  0022               	movlb	2	; select bank2
 12850  17E5  01C9               	clrf	_Cb56_odPumpOff^(0+256)
 12851  17E6  0021               	movlb	1	; select bank1
 12852  17E7  01C9               	clrf	_Cb56_odFixedValueSel^(0+128)
 12853  17E8  0022               	movlb	2	; select bank2
 12854  17E9  01C8               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 12855  17EA  0008               	return
 12856  17EB                     PL42:	
 12857  17EB  0023               	movlb	3	; select bank3
 12858  17EC  01C0               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+384)
 12859  17ED  01C1               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384)
 12860  17EE  0022               	movlb	2	; select bank2
 12861  17EF  01B6               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 12862  17F0  0008               	return
 12863  17F1                     PL45:	
 12864  17F1  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12865  17F2  0022               	movlb	2	; select bank2
 12866  17F3  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12867  17F4  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12868  17F5  0AC5               	incf	_Cb34_odFixedValueSel^(0+256),f
 12869  17F6  0008               	return
 12870  17F7                     PL49:	
 12871  17F7  3A80               	xorlw	128
 12872  17F8  00FF               	movwf	127
 12873  17F9  3080               	movlw	128
 12874  17FA  027F               	subwf	127,w
 12875  17FB  0008               	return
 12876  17FC                     PL52:	
 12877  17FC  3000               	movlw	0
 12878  17FD  0021               	movlb	1	; select bank1
 12879  17FE  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 12880  17FF  3405               	retlw	5
 12881                           
 12882                           	psect	swtext1
 12883  00CE                     __pswtext1:	
 12884  00CE                     S31595:	
 12885  00CE  3190  28DB         	ljmp	l29813
 12886  00D0  3190  28DB         	ljmp	l29813
 12887  00D2  3190  28DB         	ljmp	l29813
 12888  00D4  3190  28DB         	ljmp	l29813
 12889  00D6  3190  28DB         	ljmp	l29813
 12890  00D8  3190  28DB         	ljmp	l29813
 12891  00DA  3190  28DB         	ljmp	l29813
 12892  00DC  3190  28DB         	ljmp	l29813
 12893                           
 12894                           	psect	text2047
 12895  1A0F                     __ptext2047:	
 12896 ;; =============== function _cksum ends ============
 12897                           
 12898                           
 12899 ;; *************** function _commutate *****************
 12900 ;; Defined at:
 12901 ;;		line 1429 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\bldc.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;		None
 12904 ;; Auto vars:     Size  Location     Type
 12905 ;;		None
 12906 ;; Return value:  Size  Location     Type
 12907 ;;		None               void
 12908 ;; Registers used:
 12909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12910 ;; Tracked objects:
 12911 ;;		On entry : 1F/0
 12912 ;;		On exit  : 1F/0
 12913 ;;		Unchanged: FFFE0/0
 12914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12915 ;;      Params:         0       0       0       0       0       0       0       0
 12916 ;;      Locals:         0       0       0       0       0       0       0       0
 12917 ;;      Temps:          0      12       0       0       0       0       0       0
 12918 ;;      Totals:         0      12       0       0       0       0       0       0
 12919 ;;Total ram usage:       12 bytes
 12920 ;; Hardware stack levels used:    1
 12921 ;; Hardware stack levels required when called:    5
 12922 ;; This function calls:
 12923 ;;		___wmul
 12924 ;; This function is called by:
 12925 ;;		_InitMotorRun
 12926 ;; This function uses a non-reentrant model
 12927 ;;
 12928  1A0F                     _commutate:	
 12929  1A0F                     l29325:	
 12930                           ; Regs used in _commutate: [wreg-status,0+pclath+cstack]
 12931                           
 12932                           
 12933                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 12934  1A0F  3000               	movlw	0
 12935  1A10  0021               	movlb	1	; select bank1
 12936  1A11  023F               	subwf	(_ui16_step_cnt+1)^(0+128),w
 12937  1A12  300A               	movlw	10
 12938  1A13  1903               	skipnz
 12939  1A14  023E               	subwf	_ui16_step_cnt^(0+128),w
 12940  1A15  1803               	skipnc
 12941  1A16  2A1A               	goto	l29329
 12942                           
 12943                           ;bldc.c: 1433: {
 12944                           ;bldc.c: 1435: ui16_step_cnt++;
 12945  1A17  0ABE               	incf	_ui16_step_cnt^(0+128),f
 12946  1A18  1903               	skipnz
 12947  1A19  0ABF               	incf	(_ui16_step_cnt+1)^(0+128),f
 12948  1A1A                     l29329:	
 12949                           
 12950                           ;bldc.c: 1437: }
 12951                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 12952  1A1A  3548               	lslf	_Bcnt^(0+128),w
 12953  1A1B  3EA0               	addlw	_B& (0+255)
 12954  1A1C  0086               	movwf	6
 12955  1A1D  3001               	movlw	1	; select bank3/4
 12956  1A1E  0087               	movwf	7
 12957  1A1F  0020               	movlb	0	; select bank0
 12958  1A20  0848               	movf	_comm_time,w
 12959  1A21  3FC0               	movwi [0]fsr1
 12960  1A22  0849               	movf	_comm_time+1,w
 12961  1A23  3FC1               	movwi [1]fsr1
 12962  1A24  0021               	movlb	1	; select bank1
 12963  1A25  3007               	movlw	7
 12964  1A26  0AC8               	incf	_Bcnt^(0+128),f
 12965                           
 12966                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 12967  1A27  05C8               	andwf	_Bcnt^(0+128),f
 12968                           
 12969                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 12970  1A28  30AE               	movlw	(_B& (0+255)+14)
 12971  1A29  0086               	movwf	6
 12972  1A2A  30AC               	movlw	(_B& (0+255)+12)
 12973  1A2B  0084               	movwf	4
 12974  1A2C  3001               	movlw	1	; select bank3/4
 12975  1A2D  0085               	movwf	5
 12976  1A2E  0023               	movlb	3	; select bank3
 12977  1A2F  0824               	movf	(_B^(0+384)+4),w
 12978  1A30  0722               	addwf	(_B^(0+384)+2),w
 12979  1A31  0020               	movlb	0	; select bank0
 12980  1A32  00B2               	movwf	??_commutate
 12981  1A33  0023               	movlb	3	; select bank3
 12982  1A34  0825               	movf	((_B+1)^(0+384)+4),w
 12983  1A35  3D23               	addwfc	((_B+1)^(0+384)+2),w
 12984  1A36  0020               	movlb	0	; select bank0
 12985  1A37  00B3               	movwf	??_commutate+1
 12986  1A38  0023               	movlb	3	; select bank3
 12987  1A39  0826               	movf	(_B^(0+384)+6),w
 12988  1A3A  0020               	movlb	0	; select bank0
 12989  1A3B  0732               	addwf	??_commutate,w
 12990  1A3C  00B4               	movwf	??_commutate+2
 12991  1A3D  0023               	movlb	3	; select bank3
 12992  1A3E  0827               	movf	((_B+1)^(0+384)+6),w
 12993  1A3F  0020               	movlb	0	; select bank0
 12994  1A40  3D33               	addwfc	??_commutate+1,w
 12995  1A41  00B5               	movwf	??_commutate+3
 12996  1A42  0023               	movlb	3	; select bank3
 12997  1A43  0828               	movf	(_B^(0+384)+8),w
 12998  1A44  0020               	movlb	0	; select bank0
 12999  1A45  0734               	addwf	??_commutate+2,w
 13000  1A46  00B6               	movwf	??_commutate+4
 13001  1A47  0023               	movlb	3	; select bank3
 13002  1A48  0829               	movf	((_B+1)^(0+384)+8),w
 13003  1A49  0020               	movlb	0	; select bank0
 13004  1A4A  3D35               	addwfc	??_commutate+3,w
 13005  1A4B  00B7               	movwf	??_commutate+5
 13006  1A4C  0023               	movlb	3	; select bank3
 13007  1A4D  082A               	movf	(_B^(0+384)+10),w
 13008  1A4E  0020               	movlb	0	; select bank0
 13009  1A4F  0736               	addwf	??_commutate+4,w
 13010  1A50  00B8               	movwf	??_commutate+6
 13011  1A51  0023               	movlb	3	; select bank3
 13012  1A52  082B               	movf	((_B+1)^(0+384)+10),w
 13013  1A53  0020               	movlb	0	; select bank0
 13014  1A54  3D37               	addwfc	??_commutate+5,w
 13015  1A55  00B9               	movwf	??_commutate+7
 13016  1A56  3F00               	moviw [0]fsr0
 13017  1A57  0738               	addwf	??_commutate+6,w
 13018  1A58  00BA               	movwf	??_commutate+8
 13019  1A59  3F01               	moviw [1]fsr0
 13020  1A5A  3D39               	addwfc	??_commutate+7,w
 13021  1A5B  00BB               	movwf	??_commutate+9
 13022  1A5C  3F40               	moviw [0]fsr1
 13023  1A5D  073A               	addwf	??_commutate+8,w
 13024  1A5E  00BC               	movwf	??_commutate+10
 13025  1A5F  3F41               	moviw [1]fsr1
 13026  1A60  3D3B               	addwfc	??_commutate+9,w
 13027  1A61  00BD               	movwf	??_commutate+11
 13028  1A62  0023               	movlb	3	; select bank3
 13029  1A63  0820               	movf	_B^(0+384),w
 13030  1A64  0020               	movlb	0	; select bank0
 13031  1A65  073C               	addwf	??_commutate+10,w
 13032  1A66  0021               	movlb	1	; select bank1
 13033  1A67  00BC               	movwf	_ui16_speed_fil^(0+128)
 13034  1A68  0023               	movlb	3	; select bank3
 13035  1A69  0821               	movf	(_B+1)^(0+384),w
 13036  1A6A  0020               	movlb	0	; select bank0
 13037  1A6B  3D3D               	addwfc	??_commutate+11,w
 13038  1A6C  0021               	movlb	1	; select bank1
 13039  1A6D  00BD               	movwf	(_ui16_speed_fil+1)^(0+128)
 13040                           
 13041                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 13042  1A6E  0020               	movlb	0	; select bank0
 13043  1A6F  0849               	movf	_comm_time+1,w
 13044  1A70  0022               	movlb	2	; select bank2
 13045  1A71  00B4               	movwf	(_ui16_speed_rar+1)^(0+256)
 13046  1A72  0020               	movlb	0	; select bank0
 13047  1A73  0848               	movf	_comm_time,w
 13048  1A74  0022               	movlb	2	; select bank2
 13049  1A75  00B3               	movwf	_ui16_speed_rar^(0+256)
 13050                           
 13051                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 13052  1A76  0020               	movlb	0	; select bank0
 13053  1A77  12CB               	bcf	_MotorFlags,5
 13054                           
 13055                           ;bldc.c: 1455: bemf_filter = 62;
 13056  1A78  0022               	movlb	2	; select bank2
 13057  1A79  01E0               	clrf	_ui8_sampleState^(0+256)
 13058  1A7A  0AE0               	incf	_ui8_sampleState^(0+256),f
 13059                           
 13060                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 13061  1A7B  0020               	movlb	0	; select bank0
 13062  1A7C  17CB               	bsf	_MotorFlags,7
 13063                           
 13064                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 13065  1A7D  1DCB               	btfss	_MotorFlags,3
 13066  1A7E  2AED               	goto	l3861
 13067                           
 13068                           ;bldc.c: 1463: {
 13069                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 100 )>>7;
 13070  1A7F  0022               	movlb	2	; select bank2
 13071  1A80  0834               	movf	(_ui16_speed_rar+1)^(0+256),w
 13072  1A81  0020               	movlb	0	; select bank0
 13073  1A82  00AD               	movwf	?___wmul+1
 13074  1A83  0022               	movlb	2	; select bank2
 13075  1A84  0833               	movf	_ui16_speed_rar^(0+256),w
 13076  1A85  0020               	movlb	0	; select bank0
 13077  1A86  00AC               	movwf	?___wmul
 13078  1A87  3064               	movlw	100
 13079  1A88  36AD               	lsrf	?___wmul+1,f
 13080  1A89  0CAC               	rrf	?___wmul,f
 13081  1A8A  36AD               	lsrf	?___wmul+1,f
 13082  1A8B  0CAC               	rrf	?___wmul,f
 13083  1A8C  36AD               	lsrf	?___wmul+1,f
 13084  1A8D  0CAC               	rrf	?___wmul,f
 13085  1A8E  00AE               	movwf	?___wmul+2
 13086  1A8F  01AF               	clrf	?___wmul+3
 13087  1A90  3186  263B  319A   	fcall	___wmul
 13088  1A93  082D               	movf	?___wmul+1,w
 13089  1A94  0021               	movlb	1	; select bank1
 13090  1A95  00BB               	movwf	(_ui16_phase_advancement+1)^(0+128)
 13091  1A96  0020               	movlb	0	; select bank0
 13092  1A97  082C               	movf	?___wmul,w
 13093  1A98  0021               	movlb	1	; select bank1
 13094  1A99  00BA               	movwf	_ui16_phase_advancement^(0+128)
 13095  1A9A  3007               	movlw	7
 13096  1A9B                     u9485:	
 13097  1A9B  36BB               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 13098  1A9C  0CBA               	rrf	_ui16_phase_advancement^(0+128),f
 13099  1A9D  0B89               	decfsz	9,f
 13100  1A9E  2A9B               	goto	u9485
 13101                           
 13102                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 13103  1A9F  0020               	movlb	0	; select bank0
 13104  1AA0  0849               	movf	_comm_time+1,w
 13105  1AA1  0021               	movlb	1	; select bank1
 13106  1AA2  023B               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 13107  1AA3  1D03               	skipz
 13108  1AA4  2AA9               	goto	u9495
 13109  1AA5  0020               	movlb	0	; select bank0
 13110  1AA6  0848               	movf	_comm_time,w
 13111  1AA7  0021               	movlb	1	; select bank1
 13112  1AA8  023A               	subwf	_ui16_phase_advancement^(0+128),w
 13113  1AA9                     u9495:	
 13114  1AA9  1803               	skipnc
 13115  1AAA  2AB7               	goto	l29355
 13116                           
 13117                           ;bldc.c: 1474: {
 13118                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
 13119  1AAB  0020               	movlb	0	; select bank0
 13120  1AAC  23E9  319A         	fcall	PL18	;call to abstracted procedure
 13121  1AAE  0021               	movlb	1	; select bank1
 13122  1AAF  083A               	movf	_ui16_phase_advancement^(0+128),w
 13123  1AB0  0023               	movlb	3	; select bank3
 13124  1AB1  02D0               	subwf	_phase_delay_counter^(0+384),f
 13125  1AB2  0021               	movlb	1	; select bank1
 13126  1AB3  083B               	movf	(_ui16_phase_advancement+1)^(0+128),w
 13127  1AB4  0023               	movlb	3	; select bank3
 13128  1AB5  3BD1               	subwfb	(_phase_delay_counter+1)^(0+384),f
 13129                           
 13130                           ;bldc.c: 1478: }
 13131  1AB6  2ACC               	goto	l29379
 13132  1AB7                     l29355:	
 13133                           
 13134                           ;bldc.c: 1481: else
 13135                           ;bldc.c: 1482: {
 13136                           ;bldc.c: 1484: phase_delay_counter = 0;
 13137  1AB7  0023               	movlb	3	; select bank3
 13138  1AB8  01D0               	clrf	_phase_delay_counter^(0+384)
 13139  1AB9  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 13140  1ABA  2ACC               	goto	l29379
 13141  1ABB                     l29357:	
 13142                           
 13143                           ;bldc.c: 1514: {
 13144                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
 13145  1ABB  30A6               	movlw	166
 13146  1ABC  2AC9               	goto	L31
 13147  1ABD                     l29359:	
 13148                           ;bldc.c: 1517: break;
 13149                           
 13150                           
 13151                           ;bldc.c: 1524: {
 13152                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
 13153  1ABD  30F4               	movlw	244
 13154  1ABE  00B6               	movwf	_ui16_comm_time_max^(0+128)
 13155  1ABF  3001               	movlw	1
 13156  1AC0  00B7               	movwf	(_ui16_comm_time_max^(0+128)+1)
 13157                           
 13158                           ;bldc.c: 1527: break;
 13159  1AC1  2ADC               	goto	l29381
 13160  1AC2                     l29361:	
 13161                           
 13162                           ;bldc.c: 1534: {
 13163                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
 13164  1AC2  307D               	movlw	125
 13165  1AC3  2AC9               	goto	L31
 13166  1AC4                     l29363:	
 13167                           ;bldc.c: 1537: break;
 13168                           
 13169                           
 13170                           ;bldc.c: 1544: {
 13171                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
 13172  1AC4  3053               	movlw	83
 13173  1AC5  2AC9               	goto	L31
 13174  1AC6                     l29365:	
 13175                           ;bldc.c: 1547: break;
 13176                           
 13177                           
 13178                           ;bldc.c: 1554: {
 13179                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2400 * 2 )
      +                           ) ;
 13180  1AC6  3029               	movlw	41
 13181  1AC7  2AC9               	goto	L31
 13182  1AC8                     l29367:	
 13183                           ;bldc.c: 1557: break;
 13184                           
 13185                           
 13186                           ;bldc.c: 1564: {
 13187                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           ) ;
 13188  1AC8  3021               	movlw	33
 13189  1AC9                     L31:	
 13190  1AC9  00B6               	movwf	_ui16_comm_time_max^(0+128)
 13191  1ACA  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 13192                           
 13193                           ;bldc.c: 1567: break;
 13194  1ACB  2ADC               	goto	l29381
 13195  1ACC                     l29379:	
 13196                           
 13197                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13198                           ; Switch size 1, requested type "space"
 13199                           ; Number of cases is 1, Range of values is 0 to 0
 13200                           ; switch strategies available:
 13201                           ; Name         Instructions Cycles
 13202                           ; simple_byte            4     3 (average)
 13203                           ; direct_byte            8     6 (fixed)
 13204                           ; jumptable            260     6 (fixed)
 13205                           ; rangetable             5     4 (fixed)
 13206                           ; spacedrange            7     6 (fixed)
 13207                           ; locatedrange           1     3 (fixed)
 13208                           ;	Chosen strategy is simple_byte
 13209  1ACC  0021               	movlb	1	; select bank1
 13210  1ACD  083F               	movf	(_ui16_step_cnt+1)^(0+128),w
 13211  1ACE  3A00               	xorlw	0	; case 0
 13212  1ACF  1903               	skipnz
 13213  1AD0  2AD2               	goto	l31597
 13214  1AD1  2AC8               	goto	l29367
 13215  1AD2                     l31597:	
 13216                           
 13217                           ; Switch size 1, requested type "space"
 13218                           ; Number of cases is 10, Range of values is 0 to 9
 13219                           ; switch strategies available:
 13220                           ; Name         Instructions Cycles
 13221                           ; direct_byte           26     6 (fixed)
 13222                           ; simple_byte           31    16 (average)
 13223                           ; jumptable            260     6 (fixed)
 13224                           ; rangetable            14     4 (fixed)
 13225                           ; spacedrange           25     6 (fixed)
 13226                           ; locatedrange          10     3 (fixed)
 13227                           ;	Chosen strategy is direct_byte
 13228  1AD2  083E               	movf	_ui16_step_cnt^(0+128),w
 13229  1AD3  0084               	movwf	4
 13230  1AD4  300A               	movlw	10
 13231  1AD5  0204               	subwf	4,w
 13232  1AD6  1803               	skipnc
 13233  1AD7  2AC8               	goto	l29367
 13234  1AD8  3180               	movlp	high S31599
 13235  1AD9  3504               	lslf	4,w
 13236  1ADA  3E92               	addlw	low S31599
 13237  1ADB  0082               	movwf	2
 13238  1ADC                     l29381:	
 13239                           
 13240                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 *
      +                           2 ) ) )
 13241  1ADC  3000               	movlw	0
 13242  1ADD  0237               	subwf	(_ui16_comm_time_max+1)^(0+128),w
 13243  1ADE  3021               	movlw	33
 13244  1ADF  1903               	skipnz
 13245  1AE0  0236               	subwf	_ui16_comm_time_max^(0+128),w
 13246  1AE1  1803               	skipnc
 13247  1AE2  2AE6               	goto	l29385
 13248                           
 13249                           ;bldc.c: 1626: {
 13250                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
 13251  1AE3  3021               	movlw	33
 13252  1AE4  00B6               	movwf	_ui16_comm_time_max^(0+128)
 13253  1AE5  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 13254  1AE6                     l29385:	
 13255                           
 13256                           ;bldc.c: 1630: }
 13257                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
 13258  1AE6  0020               	movlb	0	; select bank0
 13259  1AE7  1E4B               	btfss	_MotorFlags,4
 13260  1AE8  2B22               	goto	l3879
 13261                           
 13262                           ;bldc.c: 1636: {
 13263                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
 13264  1AE9  300A               	movlw	10
 13265  1AEA  0021               	movlb	1	; select bank1
 13266  1AEB  00E0               	movwf	_ui8_StartupPWM^(0+128)
 13267                           
 13268                           ;bldc.c: 1641: }
 13269                           ;bldc.c: 1644: }
 13270  1AEC  2B22               	goto	l3879
 13271  1AED                     l3861:	
 13272                           
 13273                           ;bldc.c: 1647: else
 13274                           ;bldc.c: 1648: {
 13275                           ;bldc.c: 1652: if( rising_bemf_flag)
 13276  1AED  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 13277  1AEE  2AF3               	goto	l29391
 13278                           
 13279                           ;bldc.c: 1654: {
 13280                           ;bldc.c: 1657: phase_delay_counter = 0;
 13281  1AEF  0023               	movlb	3	; select bank3
 13282  1AF0  01D0               	clrf	_phase_delay_counter^(0+384)
 13283  1AF1  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 13284                           
 13285                           ;bldc.c: 1659: }
 13286  1AF2  2AF7               	goto	l29395
 13287  1AF3                     l29391:	
 13288                           
 13289                           ;bldc.c: 1662: else
 13290                           ;bldc.c: 1663: {
 13291                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 13292  1AF3  23E9  319A         	fcall	PL18	;call to abstracted procedure
 13293  1AF5  36D1               	lsrf	(_phase_delay_counter+1)^(0+384),f
 13294  1AF6  0CD0               	rrf	_phase_delay_counter^(0+384),f
 13295  1AF7                     l29395:	
 13296  1AF7  3021               	movlw	33
 13297                           
 13298                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 13299  1AF8  01D0               	clrf	_phase_delay_counter^(0+384)
 13300  1AF9  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 13301                           
 13302                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
 13303  1AFA  0021               	movlb	1	; select bank1
 13304  1AFB  00B6               	movwf	_ui16_comm_time_max^(0+128)
 13305  1AFC  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 13306                           
 13307                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 13308  1AFD  0020               	movlb	0	; select bank0
 13309  1AFE  1F4B               	btfss	_MotorFlags,6
 13310  1AFF  2B20               	goto	l29419
 13311                           
 13312                           ;bldc.c: 1693: {
 13313                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
 13314  1B00  0025               	movlb	5	; select bank5
 13315  1B01  0811               	movf	17,w	;volatile
 13316  1B02  0020               	movlb	0	; select bank0
 13317  1B03  0650               	xorwf	_ui8_duty_cycle_BLDC,w
 13318  1B04  1903               	btfsc	3,2
 13319  1B05  2B22               	goto	l3879
 13320                           
 13321                           ;bldc.c: 1706: else
 13322                           ;bldc.c: 1707: {
 13323                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
 13324  1B06  0025               	movlb	5	; select bank5
 13325  1B07  0811               	movf	17,w	;volatile
 13326  1B08  0020               	movlb	0	; select bank0
 13327  1B09  0250               	subwf	_ui8_duty_cycle_BLDC,w
 13328  1B0A  1803               	skipnc
 13329  1B0B  2B16               	goto	l29413
 13330                           
 13331                           ;bldc.c: 1712: {
 13332                           ;bldc.c: 1714: CCPR1L--;
 13333  1B0C  0025               	movlb	5	; select bank5
 13334  1B0D  0391               	decf	17,f	;volatile
 13335                           
 13336                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
 13337  1B0E  0811               	movf	17,w	;volatile
 13338  1B0F  0020               	movlb	0	; select bank0
 13339  1B10  0250               	subwf	_ui8_duty_cycle_BLDC,w
 13340  1B11  1803               	skipnc
 13341  1B12  2B22               	goto	l3879
 13342                           
 13343                           ;bldc.c: 1718: {
 13344                           ;bldc.c: 1720: CCPR1L--;
 13345  1B13  0025               	movlb	5	; select bank5
 13346  1B14  0391               	decf	17,f	;volatile
 13347  1B15  2B22               	goto	l3879
 13348  1B16                     l29413:	
 13349                           
 13350                           ;bldc.c: 1728: else
 13351                           ;bldc.c: 1729: {
 13352                           ;bldc.c: 1731: CCPR1L++;
 13353  1B16  0025               	movlb	5	; select bank5
 13354  1B17  0A91               	incf	17,f	;volatile
 13355                           
 13356                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
 13357  1B18  0020               	movlb	0	; select bank0
 13358  1B19  0850               	movf	_ui8_duty_cycle_BLDC,w
 13359  1B1A  0025               	movlb	5	; select bank5
 13360  1B1B  0211               	subwf	17,w	;volatile
 13361  1B1C  1803               	skipnc
 13362  1B1D  2B22               	goto	l3879
 13363                           
 13364                           ;bldc.c: 1735: {
 13365                           ;bldc.c: 1737: CCPR1L++;
 13366  1B1E  0A91               	incf	17,f	;volatile
 13367  1B1F  2B22               	goto	l3879
 13368  1B20                     l29419:	
 13369                           
 13370                           ;bldc.c: 1768: else
 13371                           ;bldc.c: 1769: {
 13372                           ;bldc.c: 1771: CCPR1L = 0;
 13373  1B20  0025               	movlb	5	; select bank5
 13374  1B21  0191               	clrf	17	;volatile
 13375  1B22                     l3879:	
 13376                           
 13377                           ;bldc.c: 1773: }
 13378                           ;bldc.c: 1777: }
 13379                           ;bldc.c: 1780: comm_time = 0;
 13380  1B22  0020               	movlb	0	; select bank0
 13381  1B23  01C8               	clrf	_comm_time
 13382  1B24  01C9               	clrf	_comm_time+1
 13383                           
 13384                           ;bldc.c: 1784: if( comm_state == 0xff )
 13385  1B25  0021               	movlb	1	; select bank1
 13386  1B26  0859               	movf	_comm_state^(0+128),w
 13387  1B27  3AFF               	xorlw	255
 13388  1B28  1D03               	skipz
 13389  1B29  2BCF               	goto	l29569
 13390                           
 13391                           ;bldc.c: 1786: {
 13392                           ;bldc.c: 1788: comm_state = 6;
 13393  1B2A  3006               	movlw	6
 13394  1B2B  00D9               	movwf	_comm_state^(0+128)
 13395  1B2C  2BCF               	goto	l29569
 13396  1B2D                     l29425:	
 13397                           
 13398                           ;bldc.c: 1800: {
 13399                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
 13400  1B2D  3001               	movlw	1
 13401  1B2E  0025               	movlb	5	; select bank5
 13402  1B2F  0096               	movwf	22	;volatile
 13403                           
 13404                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
 13405  1B30  0020               	movlb	0	; select bank0
 13406  1B31  1F4B               	btfss	_MotorFlags,6
 13407  1B32  2B36               	goto	l29431
 13408                           
 13409                           ;bldc.c: 1811: {
 13410                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 13411  1B33  0022               	movlb	2	; select bank2
 13412  1B34  2400  319A         	fcall	PL47	;call to abstracted procedure
 13413  1B36                     l29431:	
 13414                           
 13415                           ;bldc.c: 1815: }
 13416                           ;bldc.c: 1819: LATB2 = 0;
 13417  1B36  0022               	movlb	2	; select bank2
 13418  1B37  3009               	movlw	9
 13419  1B38  110D               	bcf	13,2
 13420                           
 13421                           ;bldc.c: 1820: LATB1 = 0;
 13422  1B39  108D               	bcf	13,1
 13423                           
 13424                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 13425  1B3A  0021               	movlb	1	; select bank1
 13426  1B3B  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 13427  1B3C  3025               	movlw	37
 13428                           
 13429                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 13430  1B3D  01E3               	clrf	_ui8_UPhase_sel^(0+128)
 13431  1B3E  0AE3               	incf	_ui8_UPhase_sel^(0+128),f
 13432                           
 13433                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 13434  1B3F  0022               	movlb	2	; select bank2
 13435  1B40  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 13436                           
 13437                           ;bldc.c: 1824: CM1CON1 = 0x02;
 13438  1B41  3002               	movlw	2
 13439  1B42  0092               	movwf	18	;volatile
 13440                           
 13441                           ;bldc.c: 1837: CM1CON0 = 0x84;
 13442  1B43  3084               	movlw	132
 13443  1B44  0091               	movwf	17	;volatile
 13444                           
 13445                           ;bldc.c: 1838: rising_bemf_flag = 1;
 13446  1B45  0020               	movlb	0	; select bank0
 13447  1B46  3006               	movlw	6
 13448  1B47  2BB0               	goto	L37
 13449  1B48                     l29449:	
 13450                           ;bldc.c: 1845: break;
 13451                           
 13452                           ;bldc.c: 1839: comm_state = 6;
 13453                           
 13454                           
 13455                           ;bldc.c: 1855: {
 13456                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
 13457  1B48  3001               	movlw	1
 13458  1B49  0025               	movlb	5	; select bank5
 13459  1B4A  0096               	movwf	22	;volatile
 13460                           
 13461                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
 13462  1B4B  0020               	movlb	0	; select bank0
 13463  1B4C  1F4B               	btfss	_MotorFlags,6
 13464  1B4D  2B51               	goto	l29455
 13465                           
 13466                           ;bldc.c: 1865: {
 13467                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 13468  1B4E  0022               	movlb	2	; select bank2
 13469  1B4F  2405  319A         	fcall	PL48	;call to abstracted procedure
 13470  1B51                     l29455:	
 13471                           
 13472                           ;bldc.c: 1869: }
 13473                           ;bldc.c: 1873: LATB2 = 1;
 13474  1B51  0022               	movlb	2	; select bank2
 13475  1B52  3009               	movlw	9
 13476  1B53  150D               	bsf	13,2
 13477                           
 13478                           ;bldc.c: 1874: LATB1 = 0;
 13479  1B54  108D               	bcf	13,1
 13480                           
 13481                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 13482  1B55  0021               	movlb	1	; select bank1
 13483  1B56  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 13484  1B57  3005               	movlw	5
 13485                           
 13486                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 13487  1B58  01E3               	clrf	_ui8_UPhase_sel^(0+128)
 13488  1B59  0AE3               	incf	_ui8_UPhase_sel^(0+128),f
 13489                           
 13490                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 13491  1B5A  0022               	movlb	2	; select bank2
 13492  1B5B  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 13493                           
 13494                           ;bldc.c: 1878: CM1CON1 = 0x01;
 13495  1B5C  3001               	movlw	1
 13496  1B5D  0092               	movwf	18	;volatile
 13497                           
 13498                           ;bldc.c: 1892: CM1CON0 = 0x94;
 13499  1B5E  3094               	movlw	148
 13500  1B5F  0091               	movwf	17	;volatile
 13501  1B60                     l29469:	
 13502                           
 13503                           ;bldc.c: 1893: rising_bemf_flag = 0;
 13504  1B60  0020               	movlb	0	; select bank0
 13505  1B61  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 13506                           
 13507                           ;bldc.c: 1894: comm_state = 1;
 13508  1B62  0021               	movlb	1	; select bank1
 13509  1B63  01D9               	clrf	_comm_state^(0+128)
 13510  1B64  0AD9               	incf	_comm_state^(0+128),f
 13511                           
 13512                           ;bldc.c: 1902: break;
 13513  1B65  2BE3               	goto	l29571
 13514  1B66                     l29473:	
 13515                           
 13516                           ;bldc.c: 1912: {
 13517                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
 13518  1B66  3002               	movlw	2
 13519  1B67  0025               	movlb	5	; select bank5
 13520  1B68  0096               	movwf	22	;volatile
 13521                           
 13522                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
 13523  1B69  0020               	movlb	0	; select bank0
 13524  1B6A  1F4B               	btfss	_MotorFlags,6
 13525  1B6B  2B6F               	goto	l29479
 13526                           
 13527                           ;bldc.c: 1922: {
 13528                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 13529  1B6C  0022               	movlb	2	; select bank2
 13530  1B6D  23FB  319A         	fcall	PL44	;call to abstracted procedure
 13531  1B6F                     l29479:	
 13532                           
 13533                           ;bldc.c: 1926: }
 13534                           ;bldc.c: 1929: LATC2 = 0;
 13535  1B6F  0022               	movlb	2	; select bank2
 13536  1B70  3035               	movlw	53
 13537  1B71  110E               	bcf	14,2
 13538                           
 13539                           ;bldc.c: 1931: LATB1 = 0;
 13540  1B72  108D               	bcf	13,1
 13541                           
 13542                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 13543  1B73  0021               	movlb	1	; select bank1
 13544  1B74  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 13545                           
 13546                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 13547  1B75  3005               	movlw	5
 13548                           
 13549                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 13550                           
 13551                           ;bldc.c: 1935: CM1CON1 = 0x00;
 13552  1B76  23F1  319A         	fcall	PL27	;call to abstracted procedure
 13553                           
 13554                           ;bldc.c: 1949: CM1CON0 = 0x84;
 13555  1B78  3084               	movlw	132
 13556  1B79  0091               	movwf	17	;volatile
 13557                           
 13558                           ;bldc.c: 1950: rising_bemf_flag = 1;
 13559  1B7A  0020               	movlb	0	; select bank0
 13560  1B7B  3002               	movlw	2
 13561  1B7C  2BB0               	goto	L37
 13562  1B7D                     l29493:	
 13563                           ;bldc.c: 1956: break;
 13564                           
 13565                           ;bldc.c: 1951: comm_state = 2;
 13566                           
 13567                           
 13568                           ;bldc.c: 1966: {
 13569                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
 13570  1B7D  3002               	movlw	2
 13571  1B7E  0025               	movlb	5	; select bank5
 13572  1B7F  0096               	movwf	22	;volatile
 13573                           
 13574                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
 13575  1B80  0020               	movlb	0	; select bank0
 13576  1B81  1F4B               	btfss	_MotorFlags,6
 13577  1B82  2B86               	goto	l29499
 13578                           
 13579                           ;bldc.c: 1977: {
 13580                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 13581  1B83  0022               	movlb	2	; select bank2
 13582  1B84  2400  319A         	fcall	PL47	;call to abstracted procedure
 13583  1B86                     l29499:	
 13584                           
 13585                           ;bldc.c: 1981: }
 13586                           ;bldc.c: 1984: LATC2 = 0;
 13587  1B86  0022               	movlb	2	; select bank2
 13588  1B87  3035               	movlw	53
 13589  1B88  110E               	bcf	14,2
 13590                           
 13591                           ;bldc.c: 1986: LATB1 = 1;
 13592  1B89  148D               	bsf	13,1
 13593                           
 13594                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 13595  1B8A  0021               	movlb	1	; select bank1
 13596  1B8B  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 13597                           
 13598                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 13599  1B8C  3005               	movlw	5
 13600  1B8D  00E3               	movwf	_ui8_UPhase_sel^(0+128)
 13601                           
 13602                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 13603  1B8E  3025               	movlw	37
 13604  1B8F  0022               	movlb	2	; select bank2
 13605  1B90  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 13606                           
 13607                           ;bldc.c: 1990: CM1CON1 = 0x02;
 13608  1B91  3002               	movlw	2
 13609  1B92  0092               	movwf	18	;volatile
 13610                           
 13611                           ;bldc.c: 2004: CM1CON0 = 0x94;
 13612  1B93  3094               	movlw	148
 13613  1B94  0091               	movwf	17	;volatile
 13614                           
 13615                           ;bldc.c: 2005: rising_bemf_flag = 0;
 13616  1B95  0020               	movlb	0	; select bank0
 13617  1B96  3003               	movlw	3
 13618  1B97  2BC6               	goto	L38
 13619  1B98                     l29517:	
 13620                           ;bldc.c: 2011: break;
 13621                           
 13622                           ;bldc.c: 2006: comm_state = 3;
 13623                           
 13624                           
 13625                           ;bldc.c: 2020: {
 13626                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
 13627  1B98  3004               	movlw	4
 13628  1B99  0025               	movlb	5	; select bank5
 13629  1B9A  0096               	movwf	22	;volatile
 13630                           
 13631                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
 13632  1B9B  0020               	movlb	0	; select bank0
 13633  1B9C  1F4B               	btfss	_MotorFlags,6
 13634  1B9D  2BA1               	goto	l29523
 13635                           
 13636                           ;bldc.c: 2031: {
 13637                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 13638  1B9E  0022               	movlb	2	; select bank2
 13639  1B9F  2405  319A         	fcall	PL48	;call to abstracted procedure
 13640  1BA1                     l29523:	
 13641                           
 13642                           ;bldc.c: 2035: }
 13643                           ;bldc.c: 2038: LATC2 = 0;
 13644  1BA1  0022               	movlb	2	; select bank2
 13645  1BA2  3011               	movlw	17
 13646  1BA3  110E               	bcf	14,2
 13647                           
 13648                           ;bldc.c: 2039: LATB2 = 0;
 13649                           
 13650                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 13651                           
 13652                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 13653  1BA4  23F7  319A         	fcall	PL29	;call to abstracted procedure
 13654  1BA6  00E3               	movwf	_ui8_UPhase_sel^(0+128)
 13655                           
 13656                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 13657  1BA7  3005               	movlw	5
 13658  1BA8  0022               	movlb	2	; select bank2
 13659  1BA9  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 13660                           
 13661                           ;bldc.c: 2044: CM1CON1 = 0x01;
 13662  1BAA  3001               	movlw	1
 13663  1BAB  0092               	movwf	18	;volatile
 13664                           
 13665                           ;bldc.c: 2059: CM1CON0 = 0x84;
 13666  1BAC  3084               	movlw	132
 13667  1BAD  0091               	movwf	17	;volatile
 13668                           
 13669                           ;bldc.c: 2060: rising_bemf_flag = 1;
 13670  1BAE  0020               	movlb	0	; select bank0
 13671  1BAF  3004               	movlw	4
 13672  1BB0                     L37:	
 13673  1BB0  1453               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 13674                           
 13675                           ;bldc.c: 2061: comm_state = 4;
 13676  1BB1  2BC7               	goto	L35
 13677  1BB2                     l29541:	
 13678                           ;bldc.c: 2066: break;
 13679                           
 13680                           
 13681                           ;bldc.c: 2076: {
 13682                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
 13683  1BB2  3004               	movlw	4
 13684  1BB3  0025               	movlb	5	; select bank5
 13685  1BB4  0096               	movwf	22	;volatile
 13686                           
 13687                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
 13688  1BB5  0020               	movlb	0	; select bank0
 13689  1BB6  1F4B               	btfss	_MotorFlags,6
 13690  1BB7  2BBB               	goto	l29547
 13691                           
 13692                           ;bldc.c: 2086: {
 13693                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 13694  1BB8  0022               	movlb	2	; select bank2
 13695  1BB9  23FB  319A         	fcall	PL44	;call to abstracted procedure
 13696  1BBB                     l29547:	
 13697                           
 13698                           ;bldc.c: 2090: }
 13699                           ;bldc.c: 2093: LATC2 = 1;
 13700  1BBB  0022               	movlb	2	; select bank2
 13701  1BBC  3011               	movlw	17
 13702  1BBD  150E               	bsf	14,2
 13703                           
 13704                           ;bldc.c: 2094: LATB2 = 0;
 13705                           
 13706                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 13707                           
 13708                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 13709  1BBE  23F7  319A         	fcall	PL29	;call to abstracted procedure
 13710                           
 13711                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 13712                           
 13713                           ;bldc.c: 2099: CM1CON1 = 0x00;
 13714  1BC0  23F1  319A         	fcall	PL27	;call to abstracted procedure
 13715                           
 13716                           ;bldc.c: 2113: CM1CON0 = 0x94;
 13717  1BC2  3094               	movlw	148
 13718  1BC3  0091               	movwf	17	;volatile
 13719                           
 13720                           ;bldc.c: 2114: rising_bemf_flag = 0;
 13721  1BC4  0020               	movlb	0	; select bank0
 13722  1BC5  3005               	movlw	5
 13723  1BC6                     L38:	
 13724  1BC6  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 13725  1BC7                     L35:	
 13726                           
 13727                           ;bldc.c: 2115: comm_state = 5;
 13728  1BC7  0021               	movlb	1	; select bank1
 13729  1BC8  00D9               	movwf	_comm_state^(0+128)
 13730                           
 13731                           ;bldc.c: 2120: break;
 13732  1BC9  2BE3               	goto	l29571
 13733  1BCA                     l29561:	
 13734                           
 13735                           ;bldc.c: 2129: {
 13736                           ;bldc.c: 2131: PSTR1CON = 0x00;
 13737  1BCA  0025               	movlb	5	; select bank5
 13738  1BCB  0196               	clrf	22	;volatile
 13739                           
 13740                           ;bldc.c: 2132: CM1CON0 = 0x00;
 13741  1BCC  0022               	movlb	2	; select bank2
 13742  1BCD  0191               	clrf	17	;volatile
 13743  1BCE  2B60               	goto	l29469
 13744  1BCF                     l29569:	
 13745  1BCF  0859               	movf	_comm_state^(0+128),w
 13746                           
 13747                           ; Switch size 1, requested type "space"
 13748                           ; Number of cases is 6, Range of values is 1 to 6
 13749                           ; switch strategies available:
 13750                           ; Name         Instructions Cycles
 13751                           ; simple_byte           19    10 (average)
 13752                           ; direct_byte           21     9 (fixed)
 13753                           ; jumptable            263     9 (fixed)
 13754                           ;	Chosen strategy is simple_byte
 13755  1BD0  3A01               	xorlw	1	; case 1
 13756  1BD1  1903               	skipnz
 13757  1BD2  2B2D               	goto	l29425
 13758  1BD3  3A03               	xorlw	3	; case 2
 13759  1BD4  1903               	skipnz
 13760  1BD5  2B48               	goto	l29449
 13761  1BD6  3A01               	xorlw	1	; case 3
 13762  1BD7  1903               	skipnz
 13763  1BD8  2B66               	goto	l29473
 13764  1BD9  3A07               	xorlw	7	; case 4
 13765  1BDA  1903               	skipnz
 13766  1BDB  2B7D               	goto	l29493
 13767  1BDC  3A01               	xorlw	1	; case 5
 13768  1BDD  1903               	skipnz
 13769  1BDE  2B98               	goto	l29517
 13770  1BDF  3A03               	xorlw	3	; case 6
 13771  1BE0  1903               	skipnz
 13772  1BE1  2BB2               	goto	l29541
 13773  1BE2  2BCA               	goto	l29561
 13774  1BE3                     l29571:	
 13775                           
 13776                           ;bldc.c: 2146: {
 13777                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
 13778  1BE3  3028               	movlw	40
 13779  1BE4  00DB               	movwf	_ui8_BlankingCount^(0+128)
 13780                           
 13781                           ;bldc.c: 2158: }
 13782                           ;bldc.c: 2161: comm_time = 0;
 13783                           
 13784                           ;bldc.c: 2150: }
 13785  1BE5  0020               	movlb	0	; select bank0
 13786  1BE6  01C8               	clrf	_comm_time
 13787  1BE7  01C9               	clrf	_comm_time+1
 13788  1BE8  0008               	return
 13789  1BE9                     __end_of_commutate:	
 13790  1BE9                     PL18:	
 13791  1BE9  0849               	movf	_comm_time+1,w
 13792  1BEA  0023               	movlb	3	; select bank3
 13793  1BEB  00D1               	movwf	(_phase_delay_counter+1)^(0+384)
 13794  1BEC  0020               	movlb	0	; select bank0
 13795  1BED  0848               	movf	_comm_time,w
 13796  1BEE  0023               	movlb	3	; select bank3
 13797  1BEF  00D0               	movwf	_phase_delay_counter^(0+384)
 13798  1BF0  0008               	return
 13799  1BF1                     PL27:	
 13800  1BF1  00E3               	movwf	_ui8_UPhase_sel^(0+128)
 13801  1BF2  0022               	movlb	2	; select bank2
 13802  1BF3  01D9               	clrf	_ui8_Ubemf_sel^(0+256)
 13803  1BF4  0AD9               	incf	_ui8_Ubemf_sel^(0+256),f
 13804  1BF5  0192               	clrf	18	;volatile
 13805  1BF6  0008               	return
 13806  1BF7                     PL29:	
 13807  1BF7  110D               	bcf	13,2
 13808  1BF8  0021               	movlb	1	; select bank1
 13809  1BF9  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 13810  1BFA  3425               	retlw	37
 13811  1BFB                     PL44:	
 13812  1BFB  080E               	movf	14,w
 13813  1BFC  39E5               	andlw	229
 13814  1BFD  3818               	iorlw	24
 13815  1BFE  008E               	movwf	14	;volatile
 13816  1BFF  0008               	return
 13817  1C00                     PL47:	
 13818  1C00  080E               	movf	14,w
 13819  1C01  39E5               	andlw	229
 13820  1C02  380A               	iorlw	10
 13821  1C03  008E               	movwf	14	;volatile
 13822  1C04  0008               	return
 13823  1C05                     PL48:	
 13824  1C05  080E               	movf	14,w
 13825  1C06  39E5               	andlw	229
 13826  1C07  3812               	iorlw	18
 13827  1C08  008E               	movwf	14	;volatile
 13828  1C09  0008               	return
 13829                           
 13830                           	psect	swtext2
 13831  0092                     __pswtext2:	
 13832  0092                     S31599:	
 13833  0092  319A  2ABB         	ljmp	l29357
 13834  0094  319A  2ABD         	ljmp	l29359
 13835  0096  319A  2AC2         	ljmp	l29361
 13836  0098  319A  2AC4         	ljmp	l29363
 13837  009A  319A  2AC6         	ljmp	l29365
 13838  009C  319A  2AC8         	ljmp	l29367
 13839  009E  319A  2AC8         	ljmp	l29367
 13840  00A0  319A  2AC8         	ljmp	l29367
 13841  00A2  319A  2AC8         	ljmp	l29367
 13842  00A4  319A  2AC8         	ljmp	l29367
 13843                           
 13844                           	psect	intentry
 13845  0004                     __pintentry:	
 13846 ;; =============== function _ADC_Init ends ============
 13847                           
 13848                           
 13849 ;; *************** function _interrupt_handler *****************
 13850 ;; Defined at:
 13851 ;;		line 79 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\interrupt.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;		None
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;		None
 13856 ;; Return value:  Size  Location     Type
 13857 ;;		None               void
 13858 ;; Registers used:
 13859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13860 ;; Tracked objects:
 13861 ;;		On entry : 0/0
 13862 ;;		On exit  : 1F/0
 13863 ;;		Unchanged: 0/0
 13864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13865 ;;      Params:         0       0       0       0       0       0       0       0
 13866 ;;      Locals:         0       0       0       0       0       0       0       0
 13867 ;;      Temps:          0       0       0       0       0       0       0       0
 13868 ;;      Totals:         0       0       0       0       0       0       0       0
 13869 ;;Total ram usage:        0 bytes
 13870 ;; Hardware stack levels used:    1
 13871 ;; Hardware stack levels required when called:    3
 13872 ;; This function calls:
 13873 ;;		_PWM_CTRL
 13874 ;;		_Task1ms
 13875 ;;		_interrrupt_bldc
 13876 ;;		_ELINMIntHandler
 13877 ;;		_interrupt_PWMCapture
 13878 ;; This function is called by:
 13879 ;;		Interrupt level 1
 13880 ;; This function uses a non-reentrant model
 13881 ;;
 13882  0004                     _interrupt_handler:	
 13883                           
 13884                           ; Regs used in _interrupt_handler: [wreg-status,0+pclath+cstack]
 13885  0004  3180               	pagesel	$
 13886                           
 13887                           ;interrupt.c: 81: if( TMR1IF )
 13888  0005  0020               	movlb	0	; select bank0
 13889  0006  1811               	btfsc	17,0
 13890                           
 13891                           ;interrupt.c: 83: {
 13892                           ;interrupt.c: 85: TMR1IF = 0;
 13893  0007  1011               	bcf	17,0
 13894                           
 13895                           ;interrupt.c: 87: }
 13896                           ;interrupt.c: 90: if( TMR4IF )
 13897  0008  1C93               	btfss	19,1
 13898  0009  2811               	goto	i1l28647
 13899                           
 13900                           ;interrupt.c: 92: {
 13901                           ;interrupt.c: 94: TMR4IF = 0;
 13902  000A  1093               	bcf	19,1
 13903                           
 13904                           ;interrupt.c: 96: PWM_CTRL( );
 13905  000B  3188  2022  3180   	fcall	_PWM_CTRL
 13906                           
 13907                           ;interrupt.c: 98: Task1ms( );
 13908  000E  3188  2019  3180   	fcall	_Task1ms
 13909  0011                     i1l28647:	
 13910                           
 13911                           ;interrupt.c: 100: }
 13912                           ;interrupt.c: 106: if( TMR2IF )
 13913  0011  0020               	movlb	0	; select bank0
 13914  0012  1C91               	btfss	17,1
 13915  0013  2818               	goto	i1l28653
 13916                           
 13917                           ;interrupt.c: 108: {
 13918                           ;interrupt.c: 110: TMR2IF = 0;
 13919  0014  1091               	bcf	17,1
 13920                           
 13921                           ;interrupt.c: 112: interrrupt_bldc( );
 13922  0015  319C  240A  3180   	fcall	_interrrupt_bldc
 13923  0018                     i1l28653:	
 13924                           
 13925                           ;interrupt.c: 114: }
 13926                           ;interrupt.c: 117: if( TMR6IF )
 13927  0018  0020               	movlb	0	; select bank0
 13928  0019  1D93               	btfss	19,3
 13929  001A  281F               	goto	i1l28659
 13930                           
 13931                           ;interrupt.c: 119: {
 13932                           ;interrupt.c: 121: TMR6IF = 0;
 13933  001B  1193               	bcf	19,3
 13934                           
 13935                           ;interrupt.c: 126: ELINMIntHandler( );
 13936  001C  318F  2707  3180   	fcall	_ELINMIntHandler
 13937  001F                     i1l28659:	
 13938                           
 13939                           ;interrupt.c: 131: }
 13940                           ;interrupt.c: 134: if( CCP5IF )
 13941  001F  0020               	movlb	0	; select bank0
 13942  0020  1F13               	btfss	19,6
 13943  0021  2825               	goto	i1l28665
 13944                           
 13945                           ;interrupt.c: 136: {
 13946                           ;interrupt.c: 138: CCP5IF = 0;
 13947  0022  1313               	bcf	19,6
 13948                           
 13949                           ;interrupt.c: 140: interrupt_PWMCapture( );
 13950  0023  3187  27A3         	fcall	_interrupt_PWMCapture
 13951  0025                     i1l28665:	
 13952                           
 13953                           ;interrupt.c: 142: }
 13954                           ;interrupt.c: 145: if( CCP2IF )
 13955  0025  0020               	movlb	0	; select bank0
 13956  0026  1812               	btfsc	18,0
 13957                           
 13958                           ;interrupt.c: 147: {
 13959                           ;interrupt.c: 149: CCP2IF = 0;
 13960  0027  1012               	bcf	18,0
 13961  0028  0009               	retfie
 13962  0029                     __end_of_interrupt_handler:	
 13963                           
 13964                           	psect	text2078
 13965  1C0A                     __ptext2078:	
 13966 ;; =============== function _interrupt_handler ends ============
 13967                           
 13968                           
 13969 ;; *************** function _interrrupt_bldc *****************
 13970 ;; Defined at:
 13971 ;;		line 284 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\bldc.c"
 13972 ;; Parameters:    Size  Location     Type
 13973 ;;		None
 13974 ;; Auto vars:     Size  Location     Type
 13975 ;;  ui32_tmp        4    9[COMMON] unsigned long 
 13976 ;; Return value:  Size  Location     Type
 13977 ;;		None               void
 13978 ;; Registers used:
 13979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13980 ;; Tracked objects:
 13981 ;;		On entry : 1F/0
 13982 ;;		On exit  : 1C/0
 13983 ;;		Unchanged: 0/0
 13984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13985 ;;      Params:         0       0       0       0       0       0       0       0
 13986 ;;      Locals:         4       0       0       0       0       0       0       0
 13987 ;;      Temps:          2       0       0       0       0       0       0       0
 13988 ;;      Totals:         6       0       0       0       0       0       0       0
 13989 ;;Total ram usage:        6 bytes
 13990 ;; Hardware stack levels used:    1
 13991 ;; Hardware stack levels required when called:    2
 13992 ;; This function calls:
 13993 ;;		i1_commutate
 13994 ;;		_BLDCWait
 13995 ;;		i1_ADC_Wait
 13996 ;;		i1_ADC_Read
 13997 ;;		i1___wmul
 13998 ;;		i1___lwdiv
 13999 ;; This function is called by:
 14000 ;;		_interrupt_handler
 14001 ;; This function uses a non-reentrant model
 14002 ;;
 14003  1C0A                     _interrrupt_bldc:	
 14004                           
 14005                           ;bldc.c: 286: unsigned long ui32_tmp ;
 14006                           ;bldc.c: 288: ++comm_time ;
 14007                           
 14008                           ; Regs used in _interrrupt_bldc: [wreg-status,0+pclath+cstack]
 14009  1C0A  0AC8               	incf	_comm_time,f
 14010  1C0B  1903               	skipnz
 14011  1C0C  0AC9               	incf	_comm_time+1,f
 14012                           
 14013                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
 14014  1C0D  0849               	movf	_comm_time+1,w
 14015  1C0E  0021               	movlb	1	; select bank1
 14016  1C0F  0237               	subwf	(_ui16_comm_time_max+1)^(0+128),w
 14017  1C10  1D03               	skipz
 14018  1C11  2C16               	goto	u838_25
 14019  1C12  0020               	movlb	0	; select bank0
 14020  1C13  0848               	movf	_comm_time,w
 14021  1C14  0021               	movlb	1	; select bank1
 14022  1C15  0236               	subwf	_ui16_comm_time_max^(0+128),w
 14023  1C16                     u838_25:	
 14024  1C16  1803               	skipnc
 14025  1C17  2C1A               	goto	i1l28357
 14026                           
 14027                           ;bldc.c: 294: {
 14028                           ;bldc.c: 296: commutate( );
 14029  1C18  25EF  319C         	fcall	i1_commutate
 14030  1C1A                     i1l28357:	
 14031                           
 14032                           ;bldc.c: 298: }
 14033                           ;bldc.c: 302: if( ui16_step_cnt < 10 )
 14034  1C1A  3000               	movlw	0
 14035  1C1B  0021               	movlb	1	; select bank1
 14036  1C1C  023F               	subwf	(_ui16_step_cnt+1)^(0+128),w
 14037  1C1D  300A               	movlw	10
 14038  1C1E  1903               	skipnz
 14039  1C1F  023E               	subwf	_ui16_step_cnt^(0+128),w
 14040  1C20  1C03               	btfss	3,0
 14041  1C21  2C24               	goto	i1l28361
 14042                           
 14043                           ;bldc.c: 311: else
 14044                           ;bldc.c: 312: {
 14045                           ;bldc.c: 322: MotorFlags.bits.B3 = 0;
 14046  1C22  0020               	movlb	0	; select bank0
 14047  1C23  11CB               	bcf	_MotorFlags,3
 14048  1C24                     i1l28361:	
 14049                           
 14050                           ;bldc.c: 328: }
 14051                           ;bldc.c: 331: if (ui16_step_cnt >= 3 )
 14052  1C24  3000               	movlw	0
 14053  1C25  0021               	movlb	1	; select bank1
 14054  1C26  023F               	subwf	(_ui16_step_cnt+1)^(0+128),w
 14055  1C27  3003               	movlw	3
 14056  1C28  1903               	skipnz
 14057  1C29  023E               	subwf	_ui16_step_cnt^(0+128),w
 14058  1C2A  1C03               	skipc
 14059  1C2B  2C2E               	goto	i1l28365
 14060                           
 14061                           ;bldc.c: 333: {
 14062                           ;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
 14063  1C2C  0020               	movlb	0	; select bank0
 14064  1C2D  124B               	bcf	_MotorFlags,4
 14065  1C2E                     i1l28365:	
 14066                           
 14067                           ;bldc.c: 337: }
 14068                           ;bldc.c: 340: BLDCWait( );
 14069  1C2E  3188  2035  319C   	fcall	_BLDCWait
 14070                           
 14071                           ;bldc.c: 346: if( C1OUT )
 14072  1C31  0022               	movlb	2	; select bank2
 14073  1C32  1F11               	btfss	17,6
 14074  1C33  2C36               	goto	i1l3797
 14075                           
 14076                           ;bldc.c: 349: {
 14077                           ;bldc.c: 351: ui8_CompFlag = 0x00;
 14078  1C34  01D1               	clrf	_ui8_CompFlag^(0+256)
 14079                           
 14080                           ;bldc.c: 353: }
 14081  1C35  2D48               	goto	i1l28547
 14082  1C36                     i1l3797:	
 14083                           
 14084                           ;bldc.c: 356: else
 14085                           ;bldc.c: 357: {
 14086                           ;bldc.c: 362: ui8_CompFlag = 0x01;
 14087  1C36  01D1               	clrf	_ui8_CompFlag^(0+256)
 14088  1C37  0AD1               	incf	_ui8_CompFlag^(0+256),f
 14089  1C38  2D48               	goto	i1l28547
 14090  1C39                     i1l28371:	
 14091                           
 14092                           ;bldc.c: 378: {
 14093                           ;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
 14094  1C39  302D               	movlw	45
 14095  1C3A  0021               	movlb	1	; select bank1
 14096  1C3B  009D               	movwf	29	;volatile
 14097                           
 14098                           ;bldc.c: 387: ADC_Wait( );
 14099  1C3C  25AF  319C         	fcall	i1_ADC_Wait
 14100                           
 14101                           ;bldc.c: 391: ( GO_nDONE = 1 );
 14102  1C3E  0021               	movlb	1	; select bank1
 14103  1C3F  149D               	bsf	29,1
 14104                           
 14105                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
 14106  1C40  25C8  319C         	fcall	i1_ADC_Read
 14107  1C42  0871               	movf	?i1_ADC_Read+1,w
 14108  1C43  0023               	movlb	3	; select bank3
 14109  1C44  00D7               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
 14110  1C45  0870               	movf	?i1_ADC_Read,w
 14111  1C46  00D6               	movwf	_ui16_NTC_Temp_bldc^(0+384)
 14112                           
 14113                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
 14114  1C47  3031               	movlw	49
 14115  1C48  0021               	movlb	1	; select bank1
 14116  1C49                     L53:	
 14117  1C49  009D               	movwf	29	;volatile
 14118  1C4A                     L47:	
 14119                           
 14120                           ;bldc.c: 403: ADC_Wait( );
 14121  1C4A  25AF  319C         	fcall	i1_ADC_Wait
 14122                           
 14123                           ;bldc.c: 407: ( GO_nDONE = 1 );
 14124  1C4C  0021               	movlb	1	; select bank1
 14125  1C4D  149D               	bsf	29,1
 14126  1C4E                     i1l28381:	
 14127                           
 14128                           ;bldc.c: 410: ui8_sampleState++;
 14129  1C4E  0022               	movlb	2	; select bank2
 14130  1C4F  0AE0               	incf	_ui8_sampleState^(0+256),f
 14131                           
 14132                           ;bldc.c: 413: break;
 14133  1C50  2D55               	goto	i1l3801
 14134  1C51                     i1l28383:	
 14135                           
 14136                           ;bldc.c: 421: {
 14137                           ;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
 14138  1C51  0859               	movf	_ui8_Ubemf_sel^(0+256),w
 14139  1C52  0021               	movlb	1	; select bank1
 14140  1C53  009D               	movwf	29	;volatile
 14141                           
 14142                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
 14143  1C54  081B               	movf	27,w	;volatile
 14144  1C55  0020               	movlb	0	; select bank0
 14145  1C56  00D1               	movwf	_ui16_Ubat_bldc	;volatile
 14146                           
 14147                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
 14148  1C57  0021               	movlb	1	; select bank1
 14149  1C58  081C               	movf	28,w	;volatile
 14150  1C59  0020               	movlb	0	; select bank0
 14151  1C5A  00D2               	movwf	_ui16_Ubat_bldc+1	;volatile
 14152                           
 14153                           ;bldc.c: 454: _nop();
 14154  1C5B  0000               	nop
 14155                           
 14156                           ;bldc.c: 455: _nop();
 14157  1C5C  0000               	nop
 14158                           
 14159                           ;bldc.c: 456: _nop();
 14160  1C5D  0000               	nop
 14161                           
 14162                           ;bldc.c: 457: _nop();
 14163  1C5E  0000               	nop
 14164                           
 14165                           ;bldc.c: 458: _nop();
 14166  1C5F  0000               	nop
 14167                           
 14168                           ;bldc.c: 459: _nop();
 14169  1C60  0000               	nop
 14170                           
 14171                           ;bldc.c: 460: _nop();
 14172  1C61  0000               	nop
 14173                           
 14174                           ;bldc.c: 461: _nop();
 14175  1C62  0000               	nop
 14176                           
 14177                           ;bldc.c: 463: _nop();
 14178  1C63  0000               	nop
 14179                           
 14180                           ;bldc.c: 464: _nop();
 14181  1C64  0000               	nop
 14182                           
 14183                           ;bldc.c: 465: _nop();
 14184  1C65  0000               	nop
 14185                           
 14186                           ;bldc.c: 466: _nop();
 14187  1C66  0000               	nop
 14188                           
 14189                           ;bldc.c: 467: _nop();
 14190  1C67  0000               	nop
 14191                           
 14192                           ;bldc.c: 468: _nop();
 14193  1C68  0000               	nop
 14194                           
 14195                           ;bldc.c: 469: _nop();
 14196  1C69  0000               	nop
 14197                           
 14198                           ;bldc.c: 470: _nop();
 14199  1C6A  0000               	nop
 14200  1C6B  2C4A               	goto	L47
 14201  1C6C                     i1l28423:	
 14202                           ;bldc.c: 474: ADC_Wait();
 14203                           
 14204                           
 14205                           ;bldc.c: 491: {
 14206                           ;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
 14207  1C6C  0021               	movlb	1	; select bank1
 14208  1C6D  081B               	movf	27,w	;volatile
 14209  1C6E  00B4               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
 14210                           
 14211                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
 14212  1C6F  081C               	movf	28,w	;volatile
 14213  1C70  00B5               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
 14214                           
 14215                           ;bldc.c: 511: ( GO_nDONE = 1 );
 14216  1C71  149D               	bsf	29,1
 14217                           
 14218                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui8_duty_cycle_BLDC != 0 ) )
 14219  1C72  0020               	movlb	0	; select bank0
 14220  1C73  1F4B               	btfss	_MotorFlags,6
 14221  1C74  2C8A               	goto	i1l28435
 14222  1C75  0850               	movf	_ui8_duty_cycle_BLDC,w
 14223  1C76  1903               	btfsc	3,2
 14224  1C77  2C8A               	goto	i1l28435
 14225                           
 14226                           ;bldc.c: 521: {
 14227                           ;bldc.c: 523: if( rising_bemf_flag )
 14228  1C78  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14229  1C79  2C94               	goto	i1l28443
 14230                           
 14231                           ;bldc.c: 525: {
 14232                           ;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
 14233  1C7A  0021               	movlb	1	; select bank1
 14234  1C7B  0834               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 14235  1C7C  3E64               	addlw	100
 14236  1C7D  00F7               	movwf	??_interrrupt_bldc
 14237  1C7E  3000               	movlw	0
 14238  1C7F  3D35               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 14239  1C80  00F8               	movwf	??_interrrupt_bldc+1
 14240  1C81  0020               	movlb	0	; select bank0
 14241  1C82  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 14242  1C83  0278               	subwf	??_interrrupt_bldc+1,w
 14243  1C84  1D03               	skipz
 14244  1C85  2C88               	goto	u845_25
 14245  1C86  0851               	movf	_ui16_Ubat_bldc,w	;volatile
 14246  1C87  0277               	subwf	??_interrrupt_bldc,w
 14247  1C88                     u845_25:	
 14248  1C88  1803               	skipnc
 14249  1C89  2D55               	goto	i1l3801
 14250  1C8A                     i1l28435:	
 14251                           
 14252                           ;bldc.c: 530: {
 14253                           ;bldc.c: 534: ui8_sampleState++;
 14254  1C8A  0022               	movlb	2	; select bank2
 14255  1C8B  0AE0               	incf	_ui8_sampleState^(0+256),f
 14256                           
 14257                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
 14258  1C8C  0021               	movlb	1	; select bank1
 14259  1C8D  0863               	movf	_ui8_UPhase_sel^(0+128),w
 14260  1C8E  009D               	movwf	29	;volatile
 14261                           
 14262                           ;bldc.c: 540: ADC_Wait( );
 14263  1C8F  25AF  319C         	fcall	i1_ADC_Wait
 14264                           
 14265                           ;bldc.c: 544: ( GO_nDONE = 1 );
 14266  1C91  0021               	movlb	1	; select bank1
 14267  1C92  149D               	bsf	29,1
 14268                           
 14269                           ;bldc.c: 547: }
 14270  1C93  2D55               	goto	i1l3801
 14271  1C94                     i1l28443:	
 14272                           
 14273                           ;bldc.c: 562: else
 14274                           ;bldc.c: 563: {
 14275                           ;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
 14276  1C94  3000               	movlw	0
 14277  1C95  0021               	movlb	1	; select bank1
 14278  1C96  0235               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 14279  1C97  301F               	movlw	31
 14280  1C98  1903               	skipnz
 14281  1C99  0234               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 14282  1C9A  1803               	btfsc	3,0
 14283  1C9B  2C8A               	goto	i1l28435
 14284  1C9C  2D55               	goto	i1l3801
 14285  1C9D                     i1l28461:	
 14286                           ;bldc.c: 593: }
 14287                           ;bldc.c: 596: }
 14288                           ;bldc.c: 601: }
 14289                           
 14290                           
 14291                           ;bldc.c: 665: ui8_BlankingCount = 0;
 14292  1C9D  0021               	movlb	1	; select bank1
 14293  1C9E  01DB               	clrf	_ui8_BlankingCount^(0+128)
 14294                           
 14295                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
 14296  1C9F  25C8  319C         	fcall	i1_ADC_Read
 14297                           
 14298                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
 14299  1CA1  1CE5               	btfss	_ui8_error_Flags^(0+128),1
 14300  1CA2  2CAB               	goto	i1l28475
 14301                           
 14302                           ;bldc.c: 677: {
 14303                           ;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
 14304  1CA3  085C               	movf	_ui8_IPhase_sel^(0+128),w
 14305  1CA4  009D               	movwf	29	;volatile
 14306                           
 14307                           ;bldc.c: 682: ADC_Wait( );
 14308  1CA5  25AF  319C         	fcall	i1_ADC_Wait
 14309                           
 14310                           ;bldc.c: 683: ( GO_nDONE = 1 );
 14311  1CA7  0021               	movlb	1	; select bank1
 14312  1CA8  3009               	movlw	9
 14313  1CA9  149D               	bsf	29,1
 14314                           
 14315                           ;bldc.c: 686: ui8_sampleState = 9;
 14316  1CAA  2D45               	goto	L48
 14317  1CAB                     i1l28475:	
 14318                           ;bldc.c: 688: }
 14319                           
 14320                           
 14321                           ;bldc.c: 691: else
 14322                           ;bldc.c: 692: {
 14323                           ;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 14324  1CAB  3075               	movlw	117
 14325  1CAC  009D               	movwf	29	;volatile
 14326                           
 14327                           ;bldc.c: 697: ADC_Wait( );
 14328  1CAD  25AF  319C         	fcall	i1_ADC_Wait
 14329  1CAF  2C4E               	goto	i1l28381
 14330  1CB0                     i1l3818:	
 14331                           ;bldc.c: 754: }
 14332                           ;bldc.c: 757: case 8:
 14333                           
 14334                           
 14335                           ;bldc.c: 759: {
 14336                           ;bldc.c: 764: ( GO_nDONE = 1 );
 14337  1CB0  0021               	movlb	1	; select bank1
 14338  1CB1  149D               	bsf	29,1
 14339                           
 14340                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
 14341  1CB2  25C8  319C         	fcall	i1_ADC_Read
 14342                           
 14343                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
 14344  1CB4  085C               	movf	_ui8_IPhase_sel^(0+128),w
 14345  1CB5  2C49               	goto	L53
 14346  1CB6                     i1l28495:	
 14347                           ;bldc.c: 776: ADC_Wait( );
 14348                           
 14349                           
 14350                           ;bldc.c: 795: {
 14351                           ;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
 14352  1CB6  25C8  319C         	fcall	i1_ADC_Read
 14353  1CB8  0871               	movf	?i1_ADC_Read+1,w
 14354  1CB9  00B1               	movwf	(_ui16_IPhase_bldc+1)^(0+128)	;volatile
 14355  1CBA  0870               	movf	?i1_ADC_Read,w
 14356  1CBB  00B0               	movwf	_ui16_IPhase_bldc^(0+128)	;volatile
 14357                           
 14358                           ;bldc.c: 806: if (MotorFlags.bits.B6)
 14359  1CBC  0020               	movlb	0	; select bank0
 14360  1CBD  1B4B               	btfsc	_MotorFlags,6
 14361  1CBE  2D21               	goto	i1l28521
 14362  1CBF  2D18               	goto	i1l28519
 14363  1CC0                     i1l28501:	
 14364                           
 14365                           ;bldc.c: 816: {
 14366                           ;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0]) )
 14367  1CC0  0022               	movlb	2	; select bank2
 14368  1CC1  0820               	movf	_ui8_current_cal^(0+256),w
 14369  1CC2  27CF  319C         	fcall	PL17	;call to abstracted procedure
 14370  1CC4  1803               	skipnc
 14371  1CC5  2CDA               	goto	i1l28505
 14372                           
 14373                           ;bldc.c: 820: {
 14374                           ;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[0])*ui16_I_c
      +                          al_Ph1)>>8);
 14375  1CC6  0831               	movf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 14376  1CC7  00F1               	movwf	?i1___wmul+1
 14377  1CC8  0830               	movf	_ui16_IPhase_bldc^(0+128),w	;volatile
 14378  1CC9  00F0               	movwf	?i1___wmul
 14379  1CCA  0022               	movlb	2	; select bank2
 14380  1CCB  0820               	movf	_ui8_current_cal^(0+256),w
 14381  1CCC  02F0               	subwf	?i1___wmul,f
 14382  1CCD  1C03               	skipc
 14383  1CCE  03F1               	decf	?i1___wmul+1,f
 14384  1CCF  0021               	movlb	1	; select bank1
 14385  1CD0  0869               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 14386  1CD1  00F3               	movwf	?i1___wmul+3
 14387  1CD2  0868               	movf	_ui16_I_cal_Ph1^(0+128),w
 14388  1CD3  00F2               	movwf	?i1___wmul+2
 14389  1CD4  25DA  319C         	fcall	i1___wmul
 14390  1CD6  0871               	movf	?i1___wmul+1,w
 14391  1CD7  0022               	movlb	2	; select bank2
 14392  1CD8  00A9               	movwf	_ui16_IPhase1_bldc^(0+256)	;volatile
 14393  1CD9  2CDC               	goto	L49
 14394  1CDA                     i1l28505:	
 14395                           ;bldc.c: 824: }
 14396                           
 14397                           
 14398                           ;bldc.c: 827: else
 14399                           ;bldc.c: 828: {
 14400                           ;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
 14401  1CDA  0022               	movlb	2	; select bank2
 14402  1CDB  01A9               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
 14403  1CDC                     L49:	
 14404  1CDC  01AA               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
 14405  1CDD  2D2D               	goto	i1l28525
 14406  1CDE                     i1l28507:	
 14407                           
 14408                           ;bldc.c: 842: {
 14409                           ;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1] ) )
 14410  1CDE  0022               	movlb	2	; select bank2
 14411  1CDF  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 14412  1CE0  27CF  319C         	fcall	PL17	;call to abstracted procedure
 14413  1CE2  1803               	skipnc
 14414  1CE3  2CF8               	goto	i1l28511
 14415                           
 14416                           ;bldc.c: 846: {
 14417                           ;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[1])*ui16_I_c
      +                          al_Ph2)>>8);
 14418  1CE4  0831               	movf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 14419  1CE5  00F1               	movwf	?i1___wmul+1
 14420  1CE6  0830               	movf	_ui16_IPhase_bldc^(0+128),w	;volatile
 14421  1CE7  00F0               	movwf	?i1___wmul
 14422  1CE8  0022               	movlb	2	; select bank2
 14423  1CE9  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 14424  1CEA  02F0               	subwf	?i1___wmul,f
 14425  1CEB  1C03               	skipc
 14426  1CEC  03F1               	decf	?i1___wmul+1,f
 14427  1CED  0021               	movlb	1	; select bank1
 14428  1CEE  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 14429  1CEF  00F3               	movwf	?i1___wmul+3
 14430  1CF0  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 14431  1CF1  00F2               	movwf	?i1___wmul+2
 14432  1CF2  25DA  319C         	fcall	i1___wmul
 14433  1CF4  0871               	movf	?i1___wmul+1,w
 14434  1CF5  0023               	movlb	3	; select bank3
 14435  1CF6  00D2               	movwf	_ui16_IPhase2_bldc^(0+384)	;volatile
 14436  1CF7  2CFA               	goto	L50
 14437  1CF8                     i1l28511:	
 14438                           ;bldc.c: 851: }
 14439                           
 14440                           
 14441                           ;bldc.c: 854: else
 14442                           ;bldc.c: 855: {
 14443                           ;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
 14444  1CF8  0023               	movlb	3	; select bank3
 14445  1CF9  01D2               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
 14446  1CFA                     L50:	
 14447  1CFA  01D3               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
 14448  1CFB  2D2D               	goto	i1l28525
 14449  1CFC                     i1l28513:	
 14450                           
 14451                           ;bldc.c: 869: {
 14452                           ;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]) )
 14453  1CFC  0022               	movlb	2	; select bank2
 14454  1CFD  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 14455  1CFE  27CF  319C         	fcall	PL17	;call to abstracted procedure
 14456  1D00  1803               	skipnc
 14457  1D01  2D16               	goto	i1l28517
 14458                           
 14459                           ;bldc.c: 873: {
 14460                           ;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[2])*ui16_I_c
      +                          al_Ph3)>>8);
 14461  1D02  0831               	movf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 14462  1D03  00F1               	movwf	?i1___wmul+1
 14463  1D04  0830               	movf	_ui16_IPhase_bldc^(0+128),w	;volatile
 14464  1D05  00F0               	movwf	?i1___wmul
 14465  1D06  0022               	movlb	2	; select bank2
 14466  1D07  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 14467  1D08  02F0               	subwf	?i1___wmul,f
 14468  1D09  1C03               	skipc
 14469  1D0A  03F1               	decf	?i1___wmul+1,f
 14470  1D0B  0021               	movlb	1	; select bank1
 14471  1D0C  086D               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 14472  1D0D  00F3               	movwf	?i1___wmul+3
 14473  1D0E  086C               	movf	_ui16_I_cal_Ph3^(0+128),w
 14474  1D0F  00F2               	movwf	?i1___wmul+2
 14475  1D10  25DA  319C         	fcall	i1___wmul
 14476  1D12  0871               	movf	?i1___wmul+1,w
 14477  1D13  0023               	movlb	3	; select bank3
 14478  1D14  00D4               	movwf	_ui16_IPhase3_bldc^(0+384)	;volatile
 14479  1D15  2D1F               	goto	L52
 14480  1D16                     i1l28517:	
 14481                           ;bldc.c: 877: }
 14482                           
 14483                           
 14484                           ;bldc.c: 880: else
 14485                           ;bldc.c: 881: {
 14486                           ;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
 14487  1D16  0023               	movlb	3	; select bank3
 14488  1D17  2D1E               	goto	L54
 14489  1D18                     i1l28519:	
 14490                           
 14491                           ;bldc.c: 895: {
 14492                           ;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
 14493  1D18  0022               	movlb	2	; select bank2
 14494  1D19  01A9               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
 14495  1D1A  01AA               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
 14496                           
 14497                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
 14498  1D1B  0023               	movlb	3	; select bank3
 14499  1D1C  01D2               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
 14500  1D1D  01D3               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
 14501  1D1E                     L54:	
 14502                           
 14503                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
 14504  1D1E  01D4               	clrf	_ui16_IPhase3_bldc^(0+384)	;volatile
 14505  1D1F                     L52:	
 14506  1D1F  01D5               	clrf	(_ui16_IPhase3_bldc+1)^(0+384)	;volatile
 14507                           
 14508                           ;bldc.c: 902: }
 14509                           ;bldc.c: 904: }
 14510  1D20  2D2D               	goto	i1l28525
 14511  1D21                     i1l28521:	
 14512  1D21  0021               	movlb	1	; select bank1
 14513  1D22  085C               	movf	_ui8_IPhase_sel^(0+128),w
 14514                           
 14515                           ; Switch size 1, requested type "space"
 14516                           ; Number of cases is 3, Range of values is 9 to 53
 14517                           ; switch strategies available:
 14518                           ; Name         Instructions Cycles
 14519                           ; simple_byte           10     6 (average)
 14520                           ; direct_byte           99     9 (fixed)
 14521                           ; jumptable            263     9 (fixed)
 14522                           ;	Chosen strategy is simple_byte
 14523  1D23  3A09               	xorlw	9	; case 9
 14524  1D24  1903               	skipnz
 14525  1D25  2CC0               	goto	i1l28501
 14526  1D26  3A18               	xorlw	24	; case 17
 14527  1D27  1903               	skipnz
 14528  1D28  2CFC               	goto	i1l28513
 14529  1D29  3A24               	xorlw	36	; case 53
 14530  1D2A  1903               	skipnz
 14531  1D2B  2CDE               	goto	i1l28507
 14532  1D2C  2D18               	goto	i1l28519
 14533  1D2D                     i1l28525:	
 14534                           
 14535                           ;bldc.c: 918: }
 14536                           ;bldc.c: 956: if( (ui16_IPhase_bldc.w > 300+40) )
 14537  1D2D  3001               	movlw	1
 14538  1D2E  0021               	movlb	1	; select bank1
 14539  1D2F  0231               	subwf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 14540  1D30  3055               	movlw	85
 14541  1D31  1903               	skipnz
 14542  1D32  0230               	subwf	_ui16_IPhase_bldc^(0+128),w	;volatile
 14543  1D33  1C03               	skipc
 14544  1D34  2D3A               	goto	i1l28531
 14545                           
 14546                           ;bldc.c: 958: {
 14547                           ;bldc.c: 960: MotorFlags.bits.B0 = 1;
 14548  1D35  0020               	movlb	0	; select bank0
 14549  1D36  30E5               	movlw	229
 14550  1D37  144B               	bsf	_MotorFlags,0
 14551                           
 14552                           ;bldc.c: 964: LATC = LATC & 0b11100101;
 14553  1D38  0022               	movlb	2	; select bank2
 14554  1D39  058E               	andwf	14,f	;volatile
 14555  1D3A                     i1l28531:	
 14556                           ;bldc.c: 970: }
 14557                           
 14558                           
 14559                           ;bldc.c: 978: }
 14560                           ;bldc.c: 984: ADC_Wait( );
 14561  1D3A  25AF  319C         	fcall	i1_ADC_Wait
 14562                           
 14563                           ;bldc.c: 988: ( GO_nDONE = 1 );
 14564  1D3C  0021               	movlb	1	; select bank1
 14565  1D3D  149D               	bsf	29,1
 14566                           
 14567                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
 14568  1D3E  1CE5               	btfss	_ui8_error_Flags^(0+128),1
 14569  1D3F  2C4E               	goto	i1l28381
 14570                           
 14571                           ;bldc.c: 993: {
 14572                           ;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 14573  1D40  3075               	movlw	117
 14574  1D41  009D               	movwf	29	;volatile
 14575                           
 14576                           ;bldc.c: 998: ADC_Wait( );
 14577  1D42  25AF  319C         	fcall	i1_ADC_Wait
 14578                           
 14579                           ;bldc.c: 1001: ui8_sampleState = 5;
 14580  1D44  3005               	movlw	5
 14581  1D45                     L48:	
 14582  1D45  0022               	movlb	2	; select bank2
 14583  1D46  00E0               	movwf	_ui8_sampleState^(0+256)
 14584                           
 14585                           ;bldc.c: 1003: }
 14586  1D47  2D55               	goto	i1l3801
 14587  1D48                     i1l28547:	
 14588  1D48  0860               	movf	_ui8_sampleState^(0+256),w
 14589                           
 14590                           ; Switch size 1, requested type "space"
 14591                           ; Number of cases is 10, Range of values is 1 to 10
 14592                           ; switch strategies available:
 14593                           ; Name         Instructions Cycles
 14594                           ; direct_byte           29     9 (fixed)
 14595                           ; simple_byte           31    16 (average)
 14596                           ; jumptable            263     9 (fixed)
 14597                           ;	Chosen strategy is direct_byte
 14598  1D49  3EFF               	addlw	-1
 14599  1D4A  1C03               	skipc
 14600  1D4B  2D55               	goto	i1l3801
 14601  1D4C  0084               	movwf	4
 14602  1D4D  300A               	movlw	10
 14603  1D4E  0204               	subwf	4,w
 14604  1D4F  1803               	skipnc
 14605  1D50  2D55               	goto	i1l3801
 14606  1D51  3180               	movlp	high i1S31601
 14607  1D52  3504               	lslf	4,w
 14608  1D53  3EA6               	addlw	low i1S31601
 14609  1D54  0082               	movwf	2
 14610  1D55                     i1l3801:	
 14611                           
 14612                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
 14613  1D55  0020               	movlb	0	; select bank0
 14614  1D56  1F4B               	btfss	_MotorFlags,6
 14615  1D57  2D8D               	goto	i1l28575
 14616                           
 14617                           ;bldc.c: 1071: {
 14618                           ;bldc.c: 1073: if( MotorFlags.bits.B3)
 14619  1D58  1DCB               	btfss	_MotorFlags,3
 14620  1D59  2D8F               	goto	i1l28577
 14621                           
 14622                           ;bldc.c: 1075: {
 14623                           ;bldc.c: 1077: bool_start_demand_mat = 1 ;
 14624  1D5A  0022               	movlb	2	; select bank2
 14625  1D5B  3041               	movlw	65
 14626  1D5C  01D0               	clrf	_bool_start_demand_mat^(0+256)
 14627  1D5D  0AD0               	incf	_bool_start_demand_mat^(0+256),f
 14628                           
 14629                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
 14630  1D5E  0023               	movlb	3	; select bank3
 14631  1D5F  00E8               	movwf	_ui8_fixed_start_speed_mat^(0+384)
 14632  1D60  01E9               	clrf	(_ui8_fixed_start_speed_mat+1)^(0+384)
 14633                           
 14634                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
 14635  1D61  0020               	movlb	0	; select bank0
 14636  1D62  0848               	movf	_comm_time,w
 14637  1D63  3903               	andlw	3
 14638  1D64  1D03               	btfss	3,2
 14639  1D65  2D8F               	goto	i1l28577
 14640                           
 14641                           ;bldc.c: 1092: {
 14642                           ;bldc.c: 1094: if (MotorFlags.bits.B4)
 14643  1D66  1E4B               	btfss	_MotorFlags,4
 14644  1D67  2D7D               	goto	i1l28563
 14645                           
 14646                           ;bldc.c: 1096: {
 14647                           ;bldc.c: 1098: if (ui16_Ubat_bldc.w)
 14648  1D68  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 14649  1D69  0451               	iorwf	_ui16_Ubat_bldc,w	;volatile
 14650  1D6A  1903               	skipnz
 14651  1D6B  2D81               	goto	i1l28567
 14652  1D6C                     i1l28561:	
 14653                           
 14654                           ;bldc.c: 1100: {
 14655                           ;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 14656  1D6C  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 14657  1D6D  00F1               	movwf	?i1___lwdiv+1
 14658  1D6E  0851               	movf	_ui16_Ubat_bldc,w	;volatile
 14659  1D6F  00F0               	movwf	?i1___lwdiv
 14660  1D70  3080               	movlw	128
 14661  1D71  00F2               	movwf	?i1___lwdiv+2
 14662  1D72  303E               	movlw	62
 14663  1D73  00F3               	movwf	?i1___lwdiv+3
 14664  1D74  27D9  319C         	fcall	i1___lwdiv
 14665  1D76  0870               	movf	?i1___lwdiv,w
 14666  1D77  00F9               	movwf	interrrupt_bldc@ui32_tmp
 14667  1D78  0871               	movf	?i1___lwdiv+1,w
 14668  1D79  00FA               	movwf	interrrupt_bldc@ui32_tmp+1
 14669  1D7A  01FB               	clrf	interrrupt_bldc@ui32_tmp+2
 14670  1D7B  01FC               	clrf	interrrupt_bldc@ui32_tmp+3
 14671  1D7C  2D81               	goto	i1l28567
 14672  1D7D                     i1l28563:	
 14673                           
 14674                           ;bldc.c: 1111: else
 14675                           ;bldc.c: 1112: {
 14676                           ;bldc.c: 1114: if (ui16_Ubat_bldc.w)
 14677  1D7D  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 14678  1D7E  0451               	iorwf	_ui16_Ubat_bldc,w	;volatile
 14679  1D7F  1D03               	btfss	3,2
 14680  1D80  2D6C               	goto	i1l28561
 14681  1D81                     i1l28567:	
 14682                           
 14683                           ;bldc.c: 1121: }
 14684                           ;bldc.c: 1124: }
 14685                           ;bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui32_tmp) )
 14686  1D81  0021               	movlb	1	; select bank1
 14687  1D82  0860               	movf	_ui8_StartupPWM^(0+128),w
 14688  1D83  0279               	subwf	interrrupt_bldc@ui32_tmp,w
 14689  1D84  1803               	skipnc
 14690  1D85  2D88               	goto	i1l28571
 14691                           
 14692                           ;bldc.c: 1129: {
 14693                           ;bldc.c: 1131: ui8_StartupPWM--;
 14694  1D86  03E0               	decf	_ui8_StartupPWM^(0+128),f
 14695                           
 14696                           ;bldc.c: 1133: }
 14697  1D87  2D89               	goto	i1l28573
 14698  1D88                     i1l28571:	
 14699                           
 14700                           ;bldc.c: 1136: else
 14701                           ;bldc.c: 1137: {
 14702                           ;bldc.c: 1139: ui8_StartupPWM++;
 14703  1D88  0AE0               	incf	_ui8_StartupPWM^(0+128),f
 14704  1D89                     i1l28573:	
 14705                           
 14706                           ;bldc.c: 1141: }
 14707                           ;bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
 14708  1D89  0860               	movf	_ui8_StartupPWM^(0+128),w
 14709  1D8A  0025               	movlb	5	; select bank5
 14710  1D8B  0091               	movwf	17	;volatile
 14711  1D8C  2D8F               	goto	i1l28577
 14712  1D8D                     i1l28575:	
 14713                           
 14714                           ;bldc.c: 1155: else
 14715                           ;bldc.c: 1156: {
 14716                           ;bldc.c: 1159: CCPR1L = 0;
 14717  1D8D  0025               	movlb	5	; select bank5
 14718  1D8E  0191               	clrf	17	;volatile
 14719  1D8F                     i1l28577:	
 14720                           
 14721                           ;bldc.c: 1161: }
 14722                           ;bldc.c: 1165: if( 0 == ui8_BlankingCount )
 14723  1D8F  0021               	movlb	1	; select bank1
 14724  1D90  08DB               	movf	_ui8_BlankingCount^(0+128),f
 14725  1D91  1D03               	skipz
 14726  1D92  2DAD               	goto	i1l28593
 14727                           
 14728                           ;bldc.c: 1168: {
 14729                           ;bldc.c: 1177: if( ui8_CompFlag )
 14730  1D93  0022               	movlb	2	; select bank2
 14731  1D94  0851               	movf	_ui8_CompFlag^(0+256),w
 14732  1D95  1903               	btfsc	3,2
 14733  1D96  2D9B               	goto	i1l3850
 14734                           
 14735                           ;bldc.c: 1187: {
 14736                           ;bldc.c: 1191: ui8_zero_cros_cnt++;
 14737  1D97  0020               	movlb	0	; select bank0
 14738  1D98  1ACB               	btfsc	_MotorFlags,5
 14739  1D99  2D9B               	goto	i1l3850
 14740                           
 14741                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
 14742  1D9A  16CB               	bsf	_MotorFlags,5
 14743  1D9B                     i1l3850:	
 14744                           ;bldc.c: 1196: }
 14745                           ;bldc.c: 1199: }
 14746                           ;bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
 14747                           
 14748                           
 14749                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
 14750  1D9B  0020               	movlb	0	; select bank0
 14751  1D9C  1ECB               	btfss	_MotorFlags,5
 14752  1D9D  0008               	return
 14753                           
 14754                           ;bldc.c: 1353: {
 14755                           ;bldc.c: 1357: if( 0 == phase_delay_counter )
 14756  1D9E  0023               	movlb	3	; select bank3
 14757  1D9F  0851               	movf	(_phase_delay_counter+1)^(0+384),w
 14758  1DA0  0450               	iorwf	_phase_delay_counter^(0+384),w
 14759  1DA1  1D03               	skipz
 14760  1DA2  2DA8               	goto	i1l28591
 14761                           
 14762                           ;bldc.c: 1360: {
 14763                           ;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
 14764  1DA3  0020               	movlb	0	; select bank0
 14765  1DA4  19CB               	btfsc	_MotorFlags,3
 14766  1DA5  0008               	return
 14767                           
 14768                           ;bldc.c: 1364: {
 14769                           ;bldc.c: 1378: commutate( );
 14770  1DA6  25EF               	fcall	i1_commutate
 14771  1DA7  0008               	return
 14772  1DA8                     i1l28591:	
 14773                           
 14774                           ;bldc.c: 1389: else
 14775                           ;bldc.c: 1390: {
 14776                           ;bldc.c: 1392: phase_delay_counter--;
 14777  1DA8  30FF               	movlw	-1
 14778  1DA9  07D0               	addwf	_phase_delay_counter^(0+384),f
 14779  1DAA  1C03               	skipc
 14780  1DAB  03D1               	decf	(_phase_delay_counter+1)^(0+384),f
 14781  1DAC  0008               	return
 14782  1DAD                     i1l28593:	
 14783                           ;bldc.c: 1394: }
 14784                           ;bldc.c: 1398: }
 14785                           ;bldc.c: 1401: }
 14786                           
 14787                           
 14788                           ;bldc.c: 1408: bemf_filter = 62;
 14789  1DAD  03DB               	decf	_ui8_BlankingCount^(0+128),f
 14790  1DAE  0008               	return
 14791  1DAF                     __end_of_interrrupt_bldc:	
 14792  1DAF                     __ptext2080:	
 14793 ;; =============== function i1_commutate ends ============
 14794                           
 14795                           
 14796 ;; *************** function i1_ADC_Wait *****************
 14797 ;; Defined at:
 14798 ;;		line 130 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;		None
 14801 ;; Auto vars:     Size  Location     Type
 14802 ;;		None
 14803 ;; Return value:  Size  Location     Type
 14804 ;;		None               void
 14805 ;; Registers used:
 14806 ;;		None
 14807 ;; Tracked objects:
 14808 ;;		On entry : 0/1
 14809 ;;		On exit  : 0/0
 14810 ;;		Unchanged: 0/0
 14811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14812 ;;      Params:         0       0       0       0       0       0       0       0
 14813 ;;      Locals:         0       0       0       0       0       0       0       0
 14814 ;;      Temps:          0       0       0       0       0       0       0       0
 14815 ;;      Totals:         0       0       0       0       0       0       0       0
 14816 ;;Total ram usage:        0 bytes
 14817 ;; Hardware stack levels used:    1
 14818 ;; This function calls:
 14819 ;;		Nothing
 14820 ;; This function is called by:
 14821 ;;		_interrrupt_bldc
 14822 ;; This function uses a non-reentrant model
 14823 ;;
 14824  1DAF                     i1_ADC_Wait:	
 14825                           
 14826                           ;adc.c: 133: _nop();
 14827                           
 14828                           ; Regs used in i1_ADC_Wait: []
 14829  1DAF  0000               	nop
 14830                           
 14831                           ;adc.c: 134: _nop();
 14832  1DB0  0000               	nop
 14833                           
 14834                           ;adc.c: 135: _nop();
 14835  1DB1  0000               	nop
 14836                           
 14837                           ;adc.c: 136: _nop();
 14838  1DB2  0000               	nop
 14839                           
 14840                           ;adc.c: 137: _nop();
 14841  1DB3  0000               	nop
 14842                           
 14843                           ;adc.c: 138: _nop();
 14844  1DB4  0000               	nop
 14845                           
 14846                           ;adc.c: 139: _nop();
 14847  1DB5  0000               	nop
 14848                           
 14849                           ;adc.c: 140: _nop();
 14850  1DB6  0000               	nop
 14851                           
 14852                           ;adc.c: 142: _nop();
 14853  1DB7  0000               	nop
 14854                           
 14855                           ;adc.c: 143: _nop();
 14856  1DB8  0000               	nop
 14857                           
 14858                           ;adc.c: 144: _nop();
 14859  1DB9  0000               	nop
 14860                           
 14861                           ;adc.c: 145: _nop();
 14862  1DBA  0000               	nop
 14863                           
 14864                           ;adc.c: 146: _nop();
 14865  1DBB  0000               	nop
 14866                           
 14867                           ;adc.c: 147: _nop();
 14868  1DBC  0000               	nop
 14869                           
 14870                           ;adc.c: 148: _nop();
 14871  1DBD  0000               	nop
 14872                           
 14873                           ;adc.c: 149: _nop();
 14874  1DBE  0000               	nop
 14875                           
 14876                           ;adc.c: 151: _nop();
 14877  1DBF  0000               	nop
 14878                           
 14879                           ;adc.c: 152: _nop();
 14880  1DC0  0000               	nop
 14881                           
 14882                           ;adc.c: 153: _nop();
 14883  1DC1  0000               	nop
 14884                           
 14885                           ;adc.c: 154: _nop();
 14886  1DC2  0000               	nop
 14887                           
 14888                           ;adc.c: 155: _nop();
 14889  1DC3  0000               	nop
 14890                           
 14891                           ;adc.c: 156: _nop();
 14892  1DC4  0000               	nop
 14893                           
 14894                           ;adc.c: 157: _nop();
 14895  1DC5  0000               	nop
 14896                           
 14897                           ;adc.c: 158: _nop();
 14898  1DC6  0000               	nop
 14899  1DC7  0008               	return
 14900  1DC8                     __end_ofi1_ADC_Wait:	
 14901  1DC8                     __ptext2085:	
 14902 ;; =============== function i1___wmul ends ============
 14903                           
 14904                           
 14905 ;; *************** function i1_ADC_Read *****************
 14906 ;; Defined at:
 14907 ;;		line 177 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\adc.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;		None
 14910 ;; Auto vars:     Size  Location     Type
 14911 ;;  ADC_Read        1    2[COMMON] unsigned char 
 14912 ;; Return value:  Size  Location     Type
 14913 ;;                  2    0[COMMON] unsigned int 
 14914 ;; Registers used:
 14915 ;;		wreg, status,2, status,0
 14916 ;; Tracked objects:
 14917 ;;		On entry : 1C/1
 14918 ;;		On exit  : 1F/1
 14919 ;;		Unchanged: FFFE0/0
 14920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14921 ;;      Params:         2       0       0       0       0       0       0       0
 14922 ;;      Locals:         1       0       0       0       0       0       0       0
 14923 ;;      Temps:          0       0       0       0       0       0       0       0
 14924 ;;      Totals:         3       0       0       0       0       0       0       0
 14925 ;;Total ram usage:        3 bytes
 14926 ;; Hardware stack levels used:    1
 14927 ;; This function calls:
 14928 ;;		Nothing
 14929 ;; This function is called by:
 14930 ;;		_interrrupt_bldc
 14931 ;; This function uses a non-reentrant model
 14932 ;;
 14933  1DC8                     i1_ADC_Read:	
 14934                           
 14935                           ;adc.c: 179: unsigned char i;
 14936                           ;adc.c: 180: i = 0;
 14937                           
 14938                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
 14939  1DC8  01F2               	clrf	i1ADC_Read@i
 14940  1DC9                     i1l1857:	
 14941                           ;adc.c: 182: while( GO_nDONE )
 14942                           
 14943  1DC9  0021               	movlb	1	; select bank1
 14944  1DCA  1C9D               	btfss	29,1
 14945  1DCB  2DD1               	goto	i1l29013
 14946  1DCC  3041               	movlw	65
 14947                           
 14948                           ;adc.c: 184: {
 14949                           ;adc.c: 186: i++;
 14950  1DCD  0AF2               	incf	i1ADC_Read@i,f
 14951                           
 14952                           ;adc.c: 189: if( i > 64 )
 14953  1DCE  0272               	subwf	i1ADC_Read@i,w
 14954  1DCF  1C03               	skipc
 14955  1DD0  2DC9               	goto	i1l1857
 14956  1DD1                     i1l29013:	
 14957                           
 14958                           ;adc.c: 195: }
 14959                           ;adc.c: 198: }
 14960                           ;adc.c: 201: analog_value.b.hi = ADRESH;
 14961  1DD1  081C               	movf	28,w	;volatile
 14962  1DD2  00A9               	movwf	(_analog_value^(0+128)+1)	;volatile
 14963                           
 14964                           ;adc.c: 202: analog_value.b.lo = ADRESL;
 14965  1DD3  081B               	movf	27,w	;volatile
 14966  1DD4  00A8               	movwf	_analog_value^(0+128)	;volatile
 14967                           
 14968                           ;adc.c: 204: return analog_value.w;
 14969  1DD5  0829               	movf	(_analog_value+1)^(0+128),w	;volatile
 14970  1DD6  00F1               	movwf	?i1_ADC_Read+1
 14971  1DD7  0828               	movf	_analog_value^(0+128),w	;volatile
 14972  1DD8  00F0               	movwf	?i1_ADC_Read
 14973  1DD9  0008               	return
 14974  1DDA                     __end_ofi1_ADC_Read:	
 14975  1DDA                     __ptext2084:	
 14976 ;; =============== function i1___lwdiv ends ============
 14977                           
 14978                           
 14979 ;; *************** function i1___wmul *****************
 14980 ;; Defined at:
 14981 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\wmul.c"
 14982 ;; Parameters:    Size  Location     Type
 14983 ;;  __wmul          2    0[COMMON] unsigned int 
 14984 ;;  __wmul          2    2[COMMON] unsigned int 
 14985 ;; Auto vars:     Size  Location     Type
 14986 ;;  __wmul          2    4[COMMON] unsigned int 
 14987 ;; Return value:  Size  Location     Type
 14988 ;;                  2    0[COMMON] unsigned int 
 14989 ;; Registers used:
 14990 ;;		wreg, status,2, status,0
 14991 ;; Tracked objects:
 14992 ;;		On entry : 1C/1
 14993 ;;		On exit  : 1C/1
 14994 ;;		Unchanged: FFFE3/0
 14995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14996 ;;      Params:         4       0       0       0       0       0       0       0
 14997 ;;      Locals:         2       0       0       0       0       0       0       0
 14998 ;;      Temps:          0       0       0       0       0       0       0       0
 14999 ;;      Totals:         6       0       0       0       0       0       0       0
 15000 ;;Total ram usage:        6 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; This function calls:
 15003 ;;		Nothing
 15004 ;; This function is called by:
 15005 ;;		_interrrupt_bldc
 15006 ;;		i1_commutate
 15007 ;; This function uses a non-reentrant model
 15008 ;;
 15009  1DDA                     i1___wmul:	
 15010                           
 15011                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 15012  1DDA  01F4               	clrf	i1___wmul@product
 15013  1DDB  01F5               	clrf	i1___wmul@product+1
 15014  1DDC                     i1l29283:	
 15015  1DDC  1C70               	btfss	i1___wmul@multiplier,0
 15016  1DDD  2DE2               	goto	i1l29287
 15017  1DDE  0872               	movf	i1___wmul@multiplicand,w
 15018  1DDF  07F4               	addwf	i1___wmul@product,f
 15019  1DE0  0873               	movf	i1___wmul@multiplicand+1,w
 15020  1DE1  3DF5               	addwfc	i1___wmul@product+1,f
 15021  1DE2                     i1l29287:	
 15022  1DE2  35F2               	lslf	i1___wmul@multiplicand,f
 15023  1DE3  0DF3               	rlf	i1___wmul@multiplicand+1,f
 15024  1DE4  36F1               	lsrf	i1___wmul@multiplier+1,f
 15025  1DE5  0CF0               	rrf	i1___wmul@multiplier,f
 15026  1DE6  0871               	movf	i1___wmul@multiplier+1,w
 15027  1DE7  0470               	iorwf	i1___wmul@multiplier,w
 15028  1DE8  1D03               	skipz
 15029  1DE9  2DDC               	goto	i1l29283
 15030  1DEA  0875               	movf	i1___wmul@product+1,w
 15031  1DEB  00F1               	movwf	?i1___wmul+1
 15032  1DEC  0874               	movf	i1___wmul@product,w
 15033  1DED  00F0               	movwf	?i1___wmul
 15034  1DEE  0008               	return
 15035  1DEF                     __end_ofi1___wmul:	
 15036  1DEF                     __ptext2079:	
 15037 ;; =============== function _interrrupt_bldc ends ============
 15038                           
 15039                           
 15040 ;; *************** function i1_commutate *****************
 15041 ;; Defined at:
 15042 ;;		line 1429 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\bldc.c"
 15043 ;; Parameters:    Size  Location     Type
 15044 ;;		None
 15045 ;; Auto vars:     Size  Location     Type
 15046 ;;		None
 15047 ;; Return value:  Size  Location     Type
 15048 ;;		None               void
 15049 ;; Registers used:
 15050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15051 ;; Tracked objects:
 15052 ;;		On entry : 1E/1
 15053 ;;		On exit  : 1F/0
 15054 ;;		Unchanged: FFFE0/0
 15055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15056 ;;      Params:         0       0       0       0       0       0       0       0
 15057 ;;      Locals:         0       0       0       0       0       0       0       0
 15058 ;;      Temps:          0      12       0       0       0       0       0       0
 15059 ;;      Totals:         0      12       0       0       0       0       0       0
 15060 ;;Total ram usage:       12 bytes
 15061 ;; Hardware stack levels used:    1
 15062 ;; Hardware stack levels required when called:    1
 15063 ;; This function calls:
 15064 ;;		i1___wmul
 15065 ;; This function is called by:
 15066 ;;		_interrrupt_bldc
 15067 ;; This function uses a non-reentrant model
 15068 ;;
 15069  1DEF                     i1_commutate:	
 15070                           
 15071                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 15072                           
 15073                           ; Regs used in i1_commutate: [wreg-status,0+pclath+cstack]
 15074  1DEF  3000               	movlw	0
 15075  1DF0  0021               	movlb	1	; select bank1
 15076  1DF1  023F               	subwf	(_ui16_step_cnt+1)^(0+128),w
 15077  1DF2  300A               	movlw	10
 15078  1DF3  1903               	skipnz
 15079  1DF4  023E               	subwf	_ui16_step_cnt^(0+128),w
 15080  1DF5  1803               	skipnc
 15081  1DF6  2DFA               	goto	i1l29021
 15082                           
 15083                           ;bldc.c: 1433: {
 15084                           ;bldc.c: 1435: ui16_step_cnt++;
 15085  1DF7  0ABE               	incf	_ui16_step_cnt^(0+128),f
 15086  1DF8  1903               	skipnz
 15087  1DF9  0ABF               	incf	(_ui16_step_cnt+1)^(0+128),f
 15088  1DFA                     i1l29021:	
 15089                           
 15090                           ;bldc.c: 1437: }
 15091                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 15092  1DFA  3548               	lslf	_Bcnt^(0+128),w
 15093  1DFB  3EA0               	addlw	_B& (0+255)
 15094  1DFC  0086               	movwf	6
 15095  1DFD  3001               	movlw	1	; select bank3/4
 15096  1DFE  0087               	movwf	7
 15097  1DFF  0020               	movlb	0	; select bank0
 15098  1E00  0848               	movf	_comm_time,w
 15099  1E01  3FC0               	movwi [0]fsr1
 15100  1E02  0849               	movf	_comm_time+1,w
 15101  1E03  3FC1               	movwi [1]fsr1
 15102  1E04  0021               	movlb	1	; select bank1
 15103  1E05  3007               	movlw	7
 15104  1E06  0AC8               	incf	_Bcnt^(0+128),f
 15105                           
 15106                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 15107  1E07  05C8               	andwf	_Bcnt^(0+128),f
 15108                           
 15109                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 15110  1E08  30AE               	movlw	(_B& (0+255)+14)
 15111  1E09  0086               	movwf	6
 15112  1E0A  30AC               	movlw	(_B& (0+255)+12)
 15113  1E0B  0084               	movwf	4
 15114  1E0C  3001               	movlw	1	; select bank3/4
 15115  1E0D  0085               	movwf	5
 15116  1E0E  0023               	movlb	3	; select bank3
 15117  1E0F  0824               	movf	(_B^(0+384)+4),w
 15118  1E10  0722               	addwf	(_B^(0+384)+2),w
 15119  1E11  0020               	movlb	0	; select bank0
 15120  1E12  00A0               	movwf	??i1_commutate
 15121  1E13  0023               	movlb	3	; select bank3
 15122  1E14  0825               	movf	((_B+1)^(0+384)+4),w
 15123  1E15  3D23               	addwfc	((_B+1)^(0+384)+2),w
 15124  1E16  0020               	movlb	0	; select bank0
 15125  1E17  00A1               	movwf	??i1_commutate+1
 15126  1E18  0023               	movlb	3	; select bank3
 15127  1E19  0826               	movf	(_B^(0+384)+6),w
 15128  1E1A  0020               	movlb	0	; select bank0
 15129  1E1B  0720               	addwf	??i1_commutate,w
 15130  1E1C  00A2               	movwf	??i1_commutate+2
 15131  1E1D  0023               	movlb	3	; select bank3
 15132  1E1E  0827               	movf	((_B+1)^(0+384)+6),w
 15133  1E1F  0020               	movlb	0	; select bank0
 15134  1E20  3D21               	addwfc	??i1_commutate+1,w
 15135  1E21  00A3               	movwf	??i1_commutate+3
 15136  1E22  0023               	movlb	3	; select bank3
 15137  1E23  0828               	movf	(_B^(0+384)+8),w
 15138  1E24  0020               	movlb	0	; select bank0
 15139  1E25  0722               	addwf	??i1_commutate+2,w
 15140  1E26  00A4               	movwf	??i1_commutate+4
 15141  1E27  0023               	movlb	3	; select bank3
 15142  1E28  0829               	movf	((_B+1)^(0+384)+8),w
 15143  1E29  0020               	movlb	0	; select bank0
 15144  1E2A  3D23               	addwfc	??i1_commutate+3,w
 15145  1E2B  00A5               	movwf	??i1_commutate+5
 15146  1E2C  0023               	movlb	3	; select bank3
 15147  1E2D  082A               	movf	(_B^(0+384)+10),w
 15148  1E2E  0020               	movlb	0	; select bank0
 15149  1E2F  0724               	addwf	??i1_commutate+4,w
 15150  1E30  00A6               	movwf	??i1_commutate+6
 15151  1E31  0023               	movlb	3	; select bank3
 15152  1E32  082B               	movf	((_B+1)^(0+384)+10),w
 15153  1E33  0020               	movlb	0	; select bank0
 15154  1E34  3D25               	addwfc	??i1_commutate+5,w
 15155  1E35  00A7               	movwf	??i1_commutate+7
 15156  1E36  3F00               	moviw [0]fsr0
 15157  1E37  0726               	addwf	??i1_commutate+6,w
 15158  1E38  00A8               	movwf	??i1_commutate+8
 15159  1E39  3F01               	moviw [1]fsr0
 15160  1E3A  3D27               	addwfc	??i1_commutate+7,w
 15161  1E3B  00A9               	movwf	??i1_commutate+9
 15162  1E3C  3F40               	moviw [0]fsr1
 15163  1E3D  0728               	addwf	??i1_commutate+8,w
 15164  1E3E  00AA               	movwf	??i1_commutate+10
 15165  1E3F  3F41               	moviw [1]fsr1
 15166  1E40  3D29               	addwfc	??i1_commutate+9,w
 15167  1E41  00AB               	movwf	??i1_commutate+11
 15168  1E42  0023               	movlb	3	; select bank3
 15169  1E43  0820               	movf	_B^(0+384),w
 15170  1E44  0020               	movlb	0	; select bank0
 15171  1E45  072A               	addwf	??i1_commutate+10,w
 15172  1E46  0021               	movlb	1	; select bank1
 15173  1E47  00BC               	movwf	_ui16_speed_fil^(0+128)
 15174  1E48  0023               	movlb	3	; select bank3
 15175  1E49  0821               	movf	(_B+1)^(0+384),w
 15176  1E4A  0020               	movlb	0	; select bank0
 15177  1E4B  3D2B               	addwfc	??i1_commutate+11,w
 15178  1E4C  0021               	movlb	1	; select bank1
 15179  1E4D  00BD               	movwf	(_ui16_speed_fil+1)^(0+128)
 15180                           
 15181                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 15182  1E4E  0020               	movlb	0	; select bank0
 15183  1E4F  0849               	movf	_comm_time+1,w
 15184  1E50  0022               	movlb	2	; select bank2
 15185  1E51  00B4               	movwf	(_ui16_speed_rar+1)^(0+256)
 15186  1E52  0020               	movlb	0	; select bank0
 15187  1E53  0848               	movf	_comm_time,w
 15188  1E54  0022               	movlb	2	; select bank2
 15189  1E55  00B3               	movwf	_ui16_speed_rar^(0+256)
 15190                           
 15191                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 15192  1E56  0020               	movlb	0	; select bank0
 15193  1E57  12CB               	bcf	_MotorFlags,5
 15194                           
 15195                           ;bldc.c: 1455: bemf_filter = 62;
 15196  1E58  0022               	movlb	2	; select bank2
 15197  1E59  01E0               	clrf	_ui8_sampleState^(0+256)
 15198  1E5A  0AE0               	incf	_ui8_sampleState^(0+256),f
 15199                           
 15200                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 15201  1E5B  0020               	movlb	0	; select bank0
 15202  1E5C  17CB               	bsf	_MotorFlags,7
 15203                           
 15204                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 15205  1E5D  1DCB               	btfss	_MotorFlags,3
 15206  1E5E  2EC8               	goto	i1l3861
 15207                           
 15208                           ;bldc.c: 1463: {
 15209                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 100 )>>7;
 15210  1E5F  0022               	movlb	2	; select bank2
 15211  1E60  0834               	movf	(_ui16_speed_rar+1)^(0+256),w
 15212  1E61  00F1               	movwf	?i1___wmul+1
 15213  1E62  0833               	movf	_ui16_speed_rar^(0+256),w
 15214  1E63  00F0               	movwf	?i1___wmul
 15215  1E64  3064               	movlw	100
 15216  1E65  36F1               	lsrf	?i1___wmul+1,f
 15217  1E66  0CF0               	rrf	?i1___wmul,f
 15218  1E67  36F1               	lsrf	?i1___wmul+1,f
 15219  1E68  0CF0               	rrf	?i1___wmul,f
 15220  1E69  36F1               	lsrf	?i1___wmul+1,f
 15221  1E6A  0CF0               	rrf	?i1___wmul,f
 15222  1E6B  00F2               	movwf	?i1___wmul+2
 15223  1E6C  01F3               	clrf	?i1___wmul+3
 15224  1E6D  25DA  319C         	fcall	i1___wmul
 15225  1E6F  0871               	movf	?i1___wmul+1,w
 15226  1E70  0021               	movlb	1	; select bank1
 15227  1E71  00BB               	movwf	(_ui16_phase_advancement+1)^(0+128)
 15228  1E72  0870               	movf	?i1___wmul,w
 15229  1E73  00BA               	movwf	_ui16_phase_advancement^(0+128)
 15230  1E74  3007               	movlw	7
 15231  1E75                     u923_25:	
 15232  1E75  36BB               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 15233  1E76  0CBA               	rrf	_ui16_phase_advancement^(0+128),f
 15234  1E77  0B89               	decfsz	9,f
 15235  1E78  2E75               	goto	u923_25
 15236                           
 15237                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 15238  1E79  0020               	movlb	0	; select bank0
 15239  1E7A  0849               	movf	_comm_time+1,w
 15240  1E7B  0021               	movlb	1	; select bank1
 15241  1E7C  023B               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 15242  1E7D  1D03               	skipz
 15243  1E7E  2E83               	goto	u924_25
 15244  1E7F  0020               	movlb	0	; select bank0
 15245  1E80  0848               	movf	_comm_time,w
 15246  1E81  0021               	movlb	1	; select bank1
 15247  1E82  023A               	subwf	_ui16_phase_advancement^(0+128),w
 15248  1E83                     u924_25:	
 15249  1E83  1803               	skipnc
 15250  1E84  2E92               	goto	i1l29047
 15251                           
 15252                           ;bldc.c: 1474: {
 15253                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
 15254  1E85  0020               	movlb	0	; select bank0
 15255  1E86  319B  23E9  319C   	fcall	PL18	;call to abstracted procedure
 15256  1E89  0021               	movlb	1	; select bank1
 15257  1E8A  083A               	movf	_ui16_phase_advancement^(0+128),w
 15258  1E8B  0023               	movlb	3	; select bank3
 15259  1E8C  02D0               	subwf	_phase_delay_counter^(0+384),f
 15260  1E8D  0021               	movlb	1	; select bank1
 15261  1E8E  083B               	movf	(_ui16_phase_advancement+1)^(0+128),w
 15262  1E8F  0023               	movlb	3	; select bank3
 15263  1E90  3BD1               	subwfb	(_phase_delay_counter+1)^(0+384),f
 15264                           
 15265                           ;bldc.c: 1478: }
 15266  1E91  2EA7               	goto	i1l29071
 15267  1E92                     i1l29047:	
 15268                           
 15269                           ;bldc.c: 1481: else
 15270                           ;bldc.c: 1482: {
 15271                           ;bldc.c: 1484: phase_delay_counter = 0;
 15272  1E92  0023               	movlb	3	; select bank3
 15273  1E93  01D0               	clrf	_phase_delay_counter^(0+384)
 15274  1E94  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 15275  1E95  2EA7               	goto	i1l29071
 15276  1E96                     i1l29049:	
 15277                           
 15278                           ;bldc.c: 1514: {
 15279                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
 15280  1E96  30A6               	movlw	166
 15281  1E97  2EA4               	goto	L58
 15282  1E98                     i1l29051:	
 15283                           ;bldc.c: 1517: break;
 15284                           
 15285                           
 15286                           ;bldc.c: 1524: {
 15287                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
 15288  1E98  30F4               	movlw	244
 15289  1E99  00B6               	movwf	_ui16_comm_time_max^(0+128)
 15290  1E9A  3001               	movlw	1
 15291  1E9B  00B7               	movwf	(_ui16_comm_time_max^(0+128)+1)
 15292                           
 15293                           ;bldc.c: 1527: break;
 15294  1E9C  2EB7               	goto	i1l29073
 15295  1E9D                     i1l29053:	
 15296                           
 15297                           ;bldc.c: 1534: {
 15298                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
 15299  1E9D  307D               	movlw	125
 15300  1E9E  2EA4               	goto	L58
 15301  1E9F                     i1l29055:	
 15302                           ;bldc.c: 1537: break;
 15303                           
 15304                           
 15305                           ;bldc.c: 1544: {
 15306                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
 15307  1E9F  3053               	movlw	83
 15308  1EA0  2EA4               	goto	L58
 15309  1EA1                     i1l29057:	
 15310                           ;bldc.c: 1547: break;
 15311                           
 15312                           
 15313                           ;bldc.c: 1554: {
 15314                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2400 * 2 )
      +                           ) ;
 15315  1EA1  3029               	movlw	41
 15316  1EA2  2EA4               	goto	L58
 15317  1EA3                     i1l29059:	
 15318                           ;bldc.c: 1557: break;
 15319                           
 15320                           
 15321                           ;bldc.c: 1564: {
 15322                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           ) ;
 15323  1EA3  3021               	movlw	33
 15324  1EA4                     L58:	
 15325  1EA4  00B6               	movwf	_ui16_comm_time_max^(0+128)
 15326  1EA5  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 15327                           
 15328                           ;bldc.c: 1567: break;
 15329  1EA6  2EB7               	goto	i1l29073
 15330  1EA7                     i1l29071:	
 15331                           
 15332                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15333                           ; Switch size 1, requested type "space"
 15334                           ; Number of cases is 1, Range of values is 0 to 0
 15335                           ; switch strategies available:
 15336                           ; Name         Instructions Cycles
 15337                           ; simple_byte            4     3 (average)
 15338                           ; direct_byte            8     6 (fixed)
 15339                           ; jumptable            260     6 (fixed)
 15340                           ; rangetable             5     4 (fixed)
 15341                           ; spacedrange            7     6 (fixed)
 15342                           ; locatedrange           1     3 (fixed)
 15343                           ;	Chosen strategy is simple_byte
 15344  1EA7  0021               	movlb	1	; select bank1
 15345  1EA8  083F               	movf	(_ui16_step_cnt+1)^(0+128),w
 15346  1EA9  3A00               	xorlw	0	; case 0
 15347  1EAA  1903               	skipnz
 15348  1EAB  2EAD               	goto	i1l31603
 15349  1EAC  2EA3               	goto	i1l29059
 15350  1EAD                     i1l31603:	
 15351                           
 15352                           ; Switch size 1, requested type "space"
 15353                           ; Number of cases is 10, Range of values is 0 to 9
 15354                           ; switch strategies available:
 15355                           ; Name         Instructions Cycles
 15356                           ; direct_byte           26     6 (fixed)
 15357                           ; simple_byte           31    16 (average)
 15358                           ; jumptable            260     6 (fixed)
 15359                           ; rangetable            14     4 (fixed)
 15360                           ; spacedrange           25     6 (fixed)
 15361                           ; locatedrange          10     3 (fixed)
 15362                           ;	Chosen strategy is direct_byte
 15363  1EAD  083E               	movf	_ui16_step_cnt^(0+128),w
 15364  1EAE  0084               	movwf	4
 15365  1EAF  300A               	movlw	10
 15366  1EB0  0204               	subwf	4,w
 15367  1EB1  1803               	skipnc
 15368  1EB2  2EA3               	goto	i1l29059
 15369  1EB3  3180               	movlp	high i1S31605
 15370  1EB4  3504               	lslf	4,w
 15371  1EB5  3EBA               	addlw	low i1S31605
 15372  1EB6  0082               	movwf	2
 15373  1EB7                     i1l29073:	
 15374                           
 15375                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 *
      +                           2 ) ) )
 15376  1EB7  3000               	movlw	0
 15377  1EB8  0237               	subwf	(_ui16_comm_time_max+1)^(0+128),w
 15378  1EB9  3021               	movlw	33
 15379  1EBA  1903               	skipnz
 15380  1EBB  0236               	subwf	_ui16_comm_time_max^(0+128),w
 15381  1EBC  1803               	skipnc
 15382  1EBD  2EC1               	goto	i1l29077
 15383                           
 15384                           ;bldc.c: 1626: {
 15385                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
 15386  1EBE  3021               	movlw	33
 15387  1EBF  00B6               	movwf	_ui16_comm_time_max^(0+128)
 15388  1EC0  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 15389  1EC1                     i1l29077:	
 15390                           
 15391                           ;bldc.c: 1630: }
 15392                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
 15393  1EC1  0020               	movlb	0	; select bank0
 15394  1EC2  1E4B               	btfss	_MotorFlags,4
 15395  1EC3  2EFE               	goto	i1l3879
 15396                           
 15397                           ;bldc.c: 1636: {
 15398                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
 15399  1EC4  300A               	movlw	10
 15400  1EC5  0021               	movlb	1	; select bank1
 15401  1EC6  00E0               	movwf	_ui8_StartupPWM^(0+128)
 15402                           
 15403                           ;bldc.c: 1641: }
 15404                           ;bldc.c: 1644: }
 15405  1EC7  2EFE               	goto	i1l3879
 15406  1EC8                     i1l3861:	
 15407                           
 15408                           ;bldc.c: 1647: else
 15409                           ;bldc.c: 1648: {
 15410                           ;bldc.c: 1652: if( rising_bemf_flag)
 15411  1EC8  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15412  1EC9  2ECE               	goto	i1l29083
 15413                           
 15414                           ;bldc.c: 1654: {
 15415                           ;bldc.c: 1657: phase_delay_counter = 0;
 15416  1ECA  0023               	movlb	3	; select bank3
 15417  1ECB  01D0               	clrf	_phase_delay_counter^(0+384)
 15418  1ECC  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 15419                           
 15420                           ;bldc.c: 1659: }
 15421  1ECD  2ED3               	goto	i1l29087
 15422  1ECE                     i1l29083:	
 15423                           
 15424                           ;bldc.c: 1662: else
 15425                           ;bldc.c: 1663: {
 15426                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 15427  1ECE  319B  23E9  319C   	fcall	PL18	;call to abstracted procedure
 15428  1ED1  36D1               	lsrf	(_phase_delay_counter+1)^(0+384),f
 15429  1ED2  0CD0               	rrf	_phase_delay_counter^(0+384),f
 15430  1ED3                     i1l29087:	
 15431  1ED3  3021               	movlw	33
 15432                           
 15433                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 15434  1ED4  01D0               	clrf	_phase_delay_counter^(0+384)
 15435  1ED5  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 15436                           
 15437                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
 15438  1ED6  0021               	movlb	1	; select bank1
 15439  1ED7  00B6               	movwf	_ui16_comm_time_max^(0+128)
 15440  1ED8  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 15441                           
 15442                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 15443  1ED9  0020               	movlb	0	; select bank0
 15444  1EDA  1F4B               	btfss	_MotorFlags,6
 15445  1EDB  2EFC               	goto	i1l29111
 15446                           
 15447                           ;bldc.c: 1693: {
 15448                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
 15449  1EDC  0025               	movlb	5	; select bank5
 15450  1EDD  0811               	movf	17,w	;volatile
 15451  1EDE  0020               	movlb	0	; select bank0
 15452  1EDF  0650               	xorwf	_ui8_duty_cycle_BLDC,w
 15453  1EE0  1903               	btfsc	3,2
 15454  1EE1  2EFE               	goto	i1l3879
 15455                           
 15456                           ;bldc.c: 1706: else
 15457                           ;bldc.c: 1707: {
 15458                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
 15459  1EE2  0025               	movlb	5	; select bank5
 15460  1EE3  0811               	movf	17,w	;volatile
 15461  1EE4  0020               	movlb	0	; select bank0
 15462  1EE5  0250               	subwf	_ui8_duty_cycle_BLDC,w
 15463  1EE6  1803               	skipnc
 15464  1EE7  2EF2               	goto	i1l29105
 15465                           
 15466                           ;bldc.c: 1712: {
 15467                           ;bldc.c: 1714: CCPR1L--;
 15468  1EE8  0025               	movlb	5	; select bank5
 15469  1EE9  0391               	decf	17,f	;volatile
 15470                           
 15471                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
 15472  1EEA  0811               	movf	17,w	;volatile
 15473  1EEB  0020               	movlb	0	; select bank0
 15474  1EEC  0250               	subwf	_ui8_duty_cycle_BLDC,w
 15475  1EED  1803               	skipnc
 15476  1EEE  2EFE               	goto	i1l3879
 15477                           
 15478                           ;bldc.c: 1718: {
 15479                           ;bldc.c: 1720: CCPR1L--;
 15480  1EEF  0025               	movlb	5	; select bank5
 15481  1EF0  0391               	decf	17,f	;volatile
 15482  1EF1  2EFE               	goto	i1l3879
 15483  1EF2                     i1l29105:	
 15484                           
 15485                           ;bldc.c: 1728: else
 15486                           ;bldc.c: 1729: {
 15487                           ;bldc.c: 1731: CCPR1L++;
 15488  1EF2  0025               	movlb	5	; select bank5
 15489  1EF3  0A91               	incf	17,f	;volatile
 15490                           
 15491                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
 15492  1EF4  0020               	movlb	0	; select bank0
 15493  1EF5  0850               	movf	_ui8_duty_cycle_BLDC,w
 15494  1EF6  0025               	movlb	5	; select bank5
 15495  1EF7  0211               	subwf	17,w	;volatile
 15496  1EF8  1803               	skipnc
 15497  1EF9  2EFE               	goto	i1l3879
 15498                           
 15499                           ;bldc.c: 1735: {
 15500                           ;bldc.c: 1737: CCPR1L++;
 15501  1EFA  0A91               	incf	17,f	;volatile
 15502  1EFB  2EFE               	goto	i1l3879
 15503  1EFC                     i1l29111:	
 15504                           
 15505                           ;bldc.c: 1768: else
 15506                           ;bldc.c: 1769: {
 15507                           ;bldc.c: 1771: CCPR1L = 0;
 15508  1EFC  0025               	movlb	5	; select bank5
 15509  1EFD  0191               	clrf	17	;volatile
 15510  1EFE                     i1l3879:	
 15511                           
 15512                           ;bldc.c: 1773: }
 15513                           ;bldc.c: 1777: }
 15514                           ;bldc.c: 1780: comm_time = 0;
 15515  1EFE  0020               	movlb	0	; select bank0
 15516  1EFF  01C8               	clrf	_comm_time
 15517  1F00  01C9               	clrf	_comm_time+1
 15518                           
 15519                           ;bldc.c: 1784: if( comm_state == 0xff )
 15520  1F01  0021               	movlb	1	; select bank1
 15521  1F02  0859               	movf	_comm_state^(0+128),w
 15522  1F03  3AFF               	xorlw	255
 15523  1F04  1D03               	skipz
 15524  1F05  2FB5               	goto	i1l29261
 15525                           
 15526                           ;bldc.c: 1786: {
 15527                           ;bldc.c: 1788: comm_state = 6;
 15528  1F06  3006               	movlw	6
 15529  1F07  00D9               	movwf	_comm_state^(0+128)
 15530  1F08  2FB5               	goto	i1l29261
 15531  1F09                     i1l29117:	
 15532                           
 15533                           ;bldc.c: 1800: {
 15534                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
 15535  1F09  3001               	movlw	1
 15536  1F0A  0025               	movlb	5	; select bank5
 15537  1F0B  0096               	movwf	22	;volatile
 15538                           
 15539                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
 15540  1F0C  0020               	movlb	0	; select bank0
 15541  1F0D  1F4B               	btfss	_MotorFlags,6
 15542  1F0E  2F13               	goto	i1l29123
 15543                           
 15544                           ;bldc.c: 1811: {
 15545                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 15546  1F0F  0022               	movlb	2	; select bank2
 15547  1F10  319C  2400  319C   	fcall	PL47	;call to abstracted procedure
 15548  1F13                     i1l29123:	
 15549                           
 15550                           ;bldc.c: 1815: }
 15551                           ;bldc.c: 1819: LATB2 = 0;
 15552  1F13  0022               	movlb	2	; select bank2
 15553  1F14  3009               	movlw	9
 15554  1F15  110D               	bcf	13,2
 15555                           
 15556                           ;bldc.c: 1820: LATB1 = 0;
 15557  1F16  108D               	bcf	13,1
 15558                           
 15559                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 15560  1F17  0021               	movlb	1	; select bank1
 15561  1F18  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15562  1F19  3025               	movlw	37
 15563                           
 15564                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 15565  1F1A  01E3               	clrf	_ui8_UPhase_sel^(0+128)
 15566  1F1B  0AE3               	incf	_ui8_UPhase_sel^(0+128),f
 15567                           
 15568                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 15569  1F1C  0022               	movlb	2	; select bank2
 15570  1F1D  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 15571                           
 15572                           ;bldc.c: 1824: CM1CON1 = 0x02;
 15573  1F1E  3002               	movlw	2
 15574  1F1F  0092               	movwf	18	;volatile
 15575                           
 15576                           ;bldc.c: 1837: CM1CON0 = 0x84;
 15577  1F20  3084               	movlw	132
 15578  1F21  0091               	movwf	17	;volatile
 15579                           
 15580                           ;bldc.c: 1838: rising_bemf_flag = 1;
 15581  1F22  0020               	movlb	0	; select bank0
 15582  1F23  3006               	movlw	6
 15583  1F24  2F93               	goto	L64
 15584  1F25                     i1l29141:	
 15585                           ;bldc.c: 1845: break;
 15586                           
 15587                           ;bldc.c: 1839: comm_state = 6;
 15588                           
 15589                           
 15590                           ;bldc.c: 1855: {
 15591                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
 15592  1F25  3001               	movlw	1
 15593  1F26  0025               	movlb	5	; select bank5
 15594  1F27  0096               	movwf	22	;volatile
 15595                           
 15596                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
 15597  1F28  0020               	movlb	0	; select bank0
 15598  1F29  1F4B               	btfss	_MotorFlags,6
 15599  1F2A  2F2F               	goto	i1l29147
 15600                           
 15601                           ;bldc.c: 1865: {
 15602                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 15603  1F2B  0022               	movlb	2	; select bank2
 15604  1F2C  319C  2405  319C   	fcall	PL48	;call to abstracted procedure
 15605  1F2F                     i1l29147:	
 15606                           
 15607                           ;bldc.c: 1869: }
 15608                           ;bldc.c: 1873: LATB2 = 1;
 15609  1F2F  0022               	movlb	2	; select bank2
 15610  1F30  3009               	movlw	9
 15611  1F31  150D               	bsf	13,2
 15612                           
 15613                           ;bldc.c: 1874: LATB1 = 0;
 15614  1F32  108D               	bcf	13,1
 15615                           
 15616                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 15617  1F33  0021               	movlb	1	; select bank1
 15618  1F34  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15619  1F35  3005               	movlw	5
 15620                           
 15621                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 15622  1F36  01E3               	clrf	_ui8_UPhase_sel^(0+128)
 15623  1F37  0AE3               	incf	_ui8_UPhase_sel^(0+128),f
 15624                           
 15625                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 15626  1F38  0022               	movlb	2	; select bank2
 15627  1F39  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 15628                           
 15629                           ;bldc.c: 1878: CM1CON1 = 0x01;
 15630  1F3A  3001               	movlw	1
 15631  1F3B  0092               	movwf	18	;volatile
 15632                           
 15633                           ;bldc.c: 1892: CM1CON0 = 0x94;
 15634  1F3C  3094               	movlw	148
 15635  1F3D  0091               	movwf	17	;volatile
 15636  1F3E                     i1l29161:	
 15637                           
 15638                           ;bldc.c: 1893: rising_bemf_flag = 0;
 15639  1F3E  0020               	movlb	0	; select bank0
 15640  1F3F  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15641                           
 15642                           ;bldc.c: 1894: comm_state = 1;
 15643  1F40  0021               	movlb	1	; select bank1
 15644  1F41  01D9               	clrf	_comm_state^(0+128)
 15645  1F42  0AD9               	incf	_comm_state^(0+128),f
 15646                           
 15647                           ;bldc.c: 1902: break;
 15648  1F43  2FC9               	goto	i1l29263
 15649  1F44                     i1l29165:	
 15650                           
 15651                           ;bldc.c: 1912: {
 15652                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
 15653  1F44  3002               	movlw	2
 15654  1F45  0025               	movlb	5	; select bank5
 15655  1F46  0096               	movwf	22	;volatile
 15656                           
 15657                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
 15658  1F47  0020               	movlb	0	; select bank0
 15659  1F48  1F4B               	btfss	_MotorFlags,6
 15660  1F49  2F4E               	goto	i1l29171
 15661                           
 15662                           ;bldc.c: 1922: {
 15663                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 15664  1F4A  0022               	movlb	2	; select bank2
 15665  1F4B  319B  23FB  319C   	fcall	PL44	;call to abstracted procedure
 15666  1F4E                     i1l29171:	
 15667                           
 15668                           ;bldc.c: 1926: }
 15669                           ;bldc.c: 1929: LATC2 = 0;
 15670  1F4E  0022               	movlb	2	; select bank2
 15671  1F4F  3035               	movlw	53
 15672  1F50  110E               	bcf	14,2
 15673                           
 15674                           ;bldc.c: 1931: LATB1 = 0;
 15675  1F51  108D               	bcf	13,1
 15676                           
 15677                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 15678  1F52  0021               	movlb	1	; select bank1
 15679  1F53  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15680                           
 15681                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 15682  1F54  3005               	movlw	5
 15683                           
 15684                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 15685                           
 15686                           ;bldc.c: 1935: CM1CON1 = 0x00;
 15687  1F55  319B  23F1  319C   	fcall	PL27	;call to abstracted procedure
 15688                           
 15689                           ;bldc.c: 1949: CM1CON0 = 0x84;
 15690  1F58  3084               	movlw	132
 15691  1F59  0091               	movwf	17	;volatile
 15692                           
 15693                           ;bldc.c: 1950: rising_bemf_flag = 1;
 15694  1F5A  0020               	movlb	0	; select bank0
 15695  1F5B  3002               	movlw	2
 15696  1F5C  2F93               	goto	L64
 15697  1F5D                     i1l29185:	
 15698                           ;bldc.c: 1956: break;
 15699                           
 15700                           ;bldc.c: 1951: comm_state = 2;
 15701                           
 15702                           
 15703                           ;bldc.c: 1966: {
 15704                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
 15705  1F5D  3002               	movlw	2
 15706  1F5E  0025               	movlb	5	; select bank5
 15707  1F5F  0096               	movwf	22	;volatile
 15708                           
 15709                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
 15710  1F60  0020               	movlb	0	; select bank0
 15711  1F61  1F4B               	btfss	_MotorFlags,6
 15712  1F62  2F67               	goto	i1l29191
 15713                           
 15714                           ;bldc.c: 1977: {
 15715                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 15716  1F63  0022               	movlb	2	; select bank2
 15717  1F64  319C  2400  319C   	fcall	PL47	;call to abstracted procedure
 15718  1F67                     i1l29191:	
 15719                           
 15720                           ;bldc.c: 1981: }
 15721                           ;bldc.c: 1984: LATC2 = 0;
 15722  1F67  0022               	movlb	2	; select bank2
 15723  1F68  3035               	movlw	53
 15724  1F69  110E               	bcf	14,2
 15725                           
 15726                           ;bldc.c: 1986: LATB1 = 1;
 15727  1F6A  148D               	bsf	13,1
 15728                           
 15729                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 15730  1F6B  0021               	movlb	1	; select bank1
 15731  1F6C  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15732                           
 15733                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 15734  1F6D  3005               	movlw	5
 15735  1F6E  00E3               	movwf	_ui8_UPhase_sel^(0+128)
 15736                           
 15737                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 15738  1F6F  3025               	movlw	37
 15739  1F70  0022               	movlb	2	; select bank2
 15740  1F71  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 15741                           
 15742                           ;bldc.c: 1990: CM1CON1 = 0x02;
 15743  1F72  3002               	movlw	2
 15744  1F73  0092               	movwf	18	;volatile
 15745                           
 15746                           ;bldc.c: 2004: CM1CON0 = 0x94;
 15747  1F74  3094               	movlw	148
 15748  1F75  0091               	movwf	17	;volatile
 15749                           
 15750                           ;bldc.c: 2005: rising_bemf_flag = 0;
 15751  1F76  0020               	movlb	0	; select bank0
 15752  1F77  3003               	movlw	3
 15753  1F78  2FAC               	goto	L65
 15754  1F79                     i1l29209:	
 15755                           ;bldc.c: 2011: break;
 15756                           
 15757                           ;bldc.c: 2006: comm_state = 3;
 15758                           
 15759                           
 15760                           ;bldc.c: 2020: {
 15761                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
 15762  1F79  3004               	movlw	4
 15763  1F7A  0025               	movlb	5	; select bank5
 15764  1F7B  0096               	movwf	22	;volatile
 15765                           
 15766                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
 15767  1F7C  0020               	movlb	0	; select bank0
 15768  1F7D  1F4B               	btfss	_MotorFlags,6
 15769  1F7E  2F83               	goto	i1l29215
 15770                           
 15771                           ;bldc.c: 2031: {
 15772                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 15773  1F7F  0022               	movlb	2	; select bank2
 15774  1F80  319C  2405  319C   	fcall	PL48	;call to abstracted procedure
 15775  1F83                     i1l29215:	
 15776                           
 15777                           ;bldc.c: 2035: }
 15778                           ;bldc.c: 2038: LATC2 = 0;
 15779  1F83  0022               	movlb	2	; select bank2
 15780  1F84  3011               	movlw	17
 15781  1F85  110E               	bcf	14,2
 15782                           
 15783                           ;bldc.c: 2039: LATB2 = 0;
 15784                           
 15785                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 15786                           
 15787                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 15788  1F86  319B  23F7  319C   	fcall	PL29	;call to abstracted procedure
 15789  1F89  00E3               	movwf	_ui8_UPhase_sel^(0+128)
 15790                           
 15791                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 15792  1F8A  3005               	movlw	5
 15793  1F8B  0022               	movlb	2	; select bank2
 15794  1F8C  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 15795                           
 15796                           ;bldc.c: 2044: CM1CON1 = 0x01;
 15797  1F8D  3001               	movlw	1
 15798  1F8E  0092               	movwf	18	;volatile
 15799                           
 15800                           ;bldc.c: 2059: CM1CON0 = 0x84;
 15801  1F8F  3084               	movlw	132
 15802  1F90  0091               	movwf	17	;volatile
 15803                           
 15804                           ;bldc.c: 2060: rising_bemf_flag = 1;
 15805  1F91  0020               	movlb	0	; select bank0
 15806  1F92  3004               	movlw	4
 15807  1F93                     L64:	
 15808  1F93  1453               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15809                           
 15810                           ;bldc.c: 2061: comm_state = 4;
 15811  1F94  2FAD               	goto	L62
 15812  1F95                     i1l29233:	
 15813                           ;bldc.c: 2066: break;
 15814                           
 15815                           
 15816                           ;bldc.c: 2076: {
 15817                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
 15818  1F95  3004               	movlw	4
 15819  1F96  0025               	movlb	5	; select bank5
 15820  1F97  0096               	movwf	22	;volatile
 15821                           
 15822                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
 15823  1F98  0020               	movlb	0	; select bank0
 15824  1F99  1F4B               	btfss	_MotorFlags,6
 15825  1F9A  2F9F               	goto	i1l29239
 15826                           
 15827                           ;bldc.c: 2086: {
 15828                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 15829  1F9B  0022               	movlb	2	; select bank2
 15830  1F9C  319B  23FB  319C   	fcall	PL44	;call to abstracted procedure
 15831  1F9F                     i1l29239:	
 15832                           
 15833                           ;bldc.c: 2090: }
 15834                           ;bldc.c: 2093: LATC2 = 1;
 15835  1F9F  0022               	movlb	2	; select bank2
 15836  1FA0  3011               	movlw	17
 15837  1FA1  150E               	bsf	14,2
 15838                           
 15839                           ;bldc.c: 2094: LATB2 = 0;
 15840                           
 15841                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 15842                           
 15843                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 15844  1FA2  319B  23F7  319C   	fcall	PL29	;call to abstracted procedure
 15845                           
 15846                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 15847                           
 15848                           ;bldc.c: 2099: CM1CON1 = 0x00;
 15849  1FA5  319B  23F1  319C   	fcall	PL27	;call to abstracted procedure
 15850                           
 15851                           ;bldc.c: 2113: CM1CON0 = 0x94;
 15852  1FA8  3094               	movlw	148
 15853  1FA9  0091               	movwf	17	;volatile
 15854                           
 15855                           ;bldc.c: 2114: rising_bemf_flag = 0;
 15856  1FAA  0020               	movlb	0	; select bank0
 15857  1FAB  3005               	movlw	5
 15858  1FAC                     L65:	
 15859  1FAC  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15860  1FAD                     L62:	
 15861                           
 15862                           ;bldc.c: 2115: comm_state = 5;
 15863  1FAD  0021               	movlb	1	; select bank1
 15864  1FAE  00D9               	movwf	_comm_state^(0+128)
 15865                           
 15866                           ;bldc.c: 2120: break;
 15867  1FAF  2FC9               	goto	i1l29263
 15868  1FB0                     i1l29253:	
 15869                           
 15870                           ;bldc.c: 2129: {
 15871                           ;bldc.c: 2131: PSTR1CON = 0x00;
 15872  1FB0  0025               	movlb	5	; select bank5
 15873  1FB1  0196               	clrf	22	;volatile
 15874                           
 15875                           ;bldc.c: 2132: CM1CON0 = 0x00;
 15876  1FB2  0022               	movlb	2	; select bank2
 15877  1FB3  0191               	clrf	17	;volatile
 15878  1FB4  2F3E               	goto	i1l29161
 15879  1FB5                     i1l29261:	
 15880  1FB5  0859               	movf	_comm_state^(0+128),w
 15881                           
 15882                           ; Switch size 1, requested type "space"
 15883                           ; Number of cases is 6, Range of values is 1 to 6
 15884                           ; switch strategies available:
 15885                           ; Name         Instructions Cycles
 15886                           ; simple_byte           19    10 (average)
 15887                           ; direct_byte           21     9 (fixed)
 15888                           ; jumptable            263     9 (fixed)
 15889                           ;	Chosen strategy is simple_byte
 15890  1FB6  3A01               	xorlw	1	; case 1
 15891  1FB7  1903               	skipnz
 15892  1FB8  2F09               	goto	i1l29117
 15893  1FB9  3A03               	xorlw	3	; case 2
 15894  1FBA  1903               	skipnz
 15895  1FBB  2F25               	goto	i1l29141
 15896  1FBC  3A01               	xorlw	1	; case 3
 15897  1FBD  1903               	skipnz
 15898  1FBE  2F44               	goto	i1l29165
 15899  1FBF  3A07               	xorlw	7	; case 4
 15900  1FC0  1903               	skipnz
 15901  1FC1  2F5D               	goto	i1l29185
 15902  1FC2  3A01               	xorlw	1	; case 5
 15903  1FC3  1903               	skipnz
 15904  1FC4  2F79               	goto	i1l29209
 15905  1FC5  3A03               	xorlw	3	; case 6
 15906  1FC6  1903               	skipnz
 15907  1FC7  2F95               	goto	i1l29233
 15908  1FC8  2FB0               	goto	i1l29253
 15909  1FC9                     i1l29263:	
 15910                           
 15911                           ;bldc.c: 2146: {
 15912                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
 15913  1FC9  3028               	movlw	40
 15914  1FCA  00DB               	movwf	_ui8_BlankingCount^(0+128)
 15915                           
 15916                           ;bldc.c: 2158: }
 15917                           ;bldc.c: 2161: comm_time = 0;
 15918                           
 15919                           ;bldc.c: 2150: }
 15920  1FCB  0020               	movlb	0	; select bank0
 15921  1FCC  01C8               	clrf	_comm_time
 15922  1FCD  01C9               	clrf	_comm_time+1
 15923  1FCE  0008               	return
 15924  1FCF                     __end_ofi1_commutate:	
 15925  1FCF                     PL17:	
 15926  1FCF  00F7               	movwf	??_interrrupt_bldc
 15927  1FD0  01F8               	clrf	??_interrrupt_bldc+1
 15928  1FD1  0021               	movlb	1	; select bank1
 15929  1FD2  0831               	movf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 15930  1FD3  0278               	subwf	??_interrrupt_bldc+1,w
 15931  1FD4  1D03               	skipz
 15932  1FD5  0008               	return
 15933  1FD6  0830               	movf	_ui16_IPhase_bldc^(0+128),w	;volatile
 15934  1FD7  0277               	subwf	??_interrrupt_bldc,w
 15935  1FD8  0008               	return
 15936  1FD9                     __ptext2083:	
 15937 ;; =============== function _BLDCWait ends ============
 15938                           
 15939                           
 15940 ;; *************** function i1___lwdiv *****************
 15941 ;; Defined at:
 15942 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\lwdiv.c"
 15943 ;; Parameters:    Size  Location     Type
 15944 ;;  __lwdiv         2    0[COMMON] unsigned int 
 15945 ;;  __lwdiv         2    2[COMMON] unsigned int 
 15946 ;; Auto vars:     Size  Location     Type
 15947 ;;  __lwdiv         2    5[COMMON] unsigned int 
 15948 ;;  __lwdiv         1    4[COMMON] unsigned char 
 15949 ;; Return value:  Size  Location     Type
 15950 ;;                  2    0[COMMON] unsigned int 
 15951 ;; Registers used:
 15952 ;;		wreg, status,2, status,0
 15953 ;; Tracked objects:
 15954 ;;		On entry : 1F/0
 15955 ;;		On exit  : 1F/0
 15956 ;;		Unchanged: FFFE0/0
 15957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15958 ;;      Params:         4       0       0       0       0       0       0       0
 15959 ;;      Locals:         3       0       0       0       0       0       0       0
 15960 ;;      Temps:          0       0       0       0       0       0       0       0
 15961 ;;      Totals:         7       0       0       0       0       0       0       0
 15962 ;;Total ram usage:        7 bytes
 15963 ;; Hardware stack levels used:    1
 15964 ;; This function calls:
 15965 ;;		Nothing
 15966 ;; This function is called by:
 15967 ;;		_interrrupt_bldc
 15968 ;; This function uses a non-reentrant model
 15969 ;;
 15970  1FD9                     i1___lwdiv:	
 15971                           
 15972                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 15973  1FD9  01F5               	clrf	i1___lwdiv@quotient
 15974  1FDA  01F6               	clrf	i1___lwdiv@quotient+1
 15975  1FDB  0871               	movf	i1___lwdiv@divisor+1,w
 15976  1FDC  0470               	iorwf	i1___lwdiv@divisor,w
 15977  1FDD  1903               	skipnz
 15978  1FDE  2FF9               	goto	i1l29319
 15979  1FDF  01F4               	clrf	i1___lwdiv@counter
 15980  1FE0                     L68:	
 15981  1FE0  0AF4               	incf	i1___lwdiv@counter,f
 15982  1FE1  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 15983  1FE2  2FE6               	goto	i1l29307
 15984  1FE3  35F0               	lslf	i1___lwdiv@divisor,f
 15985  1FE4  0DF1               	rlf	i1___lwdiv@divisor+1,f
 15986  1FE5  2FE0               	goto	L68
 15987  1FE6                     i1l29307:	
 15988  1FE6  35F5               	lslf	i1___lwdiv@quotient,f
 15989  1FE7  0DF6               	rlf	i1___lwdiv@quotient+1,f
 15990  1FE8  0871               	movf	i1___lwdiv@divisor+1,w
 15991  1FE9  0273               	subwf	i1___lwdiv@dividend+1,w
 15992  1FEA  1D03               	skipz
 15993  1FEB  2FEE               	goto	u944_25
 15994  1FEC  0870               	movf	i1___lwdiv@divisor,w
 15995  1FED  0272               	subwf	i1___lwdiv@dividend,w
 15996  1FEE                     u944_25:	
 15997  1FEE  1C03               	skipc
 15998  1FEF  2FF5               	goto	i1l29315
 15999  1FF0  0870               	movf	i1___lwdiv@divisor,w
 16000  1FF1  02F2               	subwf	i1___lwdiv@dividend,f
 16001  1FF2  0871               	movf	i1___lwdiv@divisor+1,w
 16002  1FF3  3BF3               	subwfb	i1___lwdiv@dividend+1,f
 16003  1FF4  1475               	bsf	i1___lwdiv@quotient,0
 16004  1FF5                     i1l29315:	
 16005  1FF5  36F1               	lsrf	i1___lwdiv@divisor+1,f
 16006  1FF6  0CF0               	rrf	i1___lwdiv@divisor,f
 16007  1FF7  0BF4               	decfsz	i1___lwdiv@counter,f
 16008  1FF8  2FE6               	goto	i1l29307
 16009  1FF9                     i1l29319:	
 16010  1FF9  0876               	movf	i1___lwdiv@quotient+1,w
 16011  1FFA  00F1               	movwf	?i1___lwdiv+1
 16012  1FFB  0875               	movf	i1___lwdiv@quotient,w
 16013  1FFC  00F0               	movwf	?i1___lwdiv
 16014  1FFD  0008               	return
 16015  1FFE                     __end_ofi1___lwdiv:	
 16016                           
 16017                           	psect	swtext3
 16018  00A6                     __pswtext3:	
 16019  00A6                     i1S31601:	
 16020  00A6  319C  2C39         	ljmp	i1l28371
 16021  00A8  319C  2C51         	ljmp	i1l28383
 16022  00AA  319C  2C6C         	ljmp	i1l28423
 16023  00AC  319C  2C9D         	ljmp	i1l28461
 16024  00AE  319C  2C4E         	ljmp	i1l28381
 16025  00B0  319C  2C4E         	ljmp	i1l28381
 16026  00B2  319C  2C4E         	ljmp	i1l28381
 16027  00B4  319C  2CB0         	ljmp	i1l3818
 16028  00B6  319C  2CB6         	ljmp	i1l28495
 16029  00B8  319D  2D55         	ljmp	i1l3801
 16030                           
 16031                           	psect	swtext4
 16032  00BA                     __pswtext4:	
 16033  00BA                     i1S31605:	
 16034  00BA  319E  2E96         	ljmp	i1l29049
 16035  00BC  319E  2E98         	ljmp	i1l29051
 16036  00BE  319E  2E9D         	ljmp	i1l29053
 16037  00C0  319E  2E9F         	ljmp	i1l29055
 16038  00C2  319E  2EA1         	ljmp	i1l29057
 16039  00C4  319E  2EA3         	ljmp	i1l29059
 16040  00C6  319E  2EA3         	ljmp	i1l29059
 16041  00C8  319E  2EA3         	ljmp	i1l29059
 16042  00CA  319E  2EA3         	ljmp	i1l29059
 16043  00CC  319E  2EA3         	ljmp	i1l29059
 16044                           
 16045                           	psect	text2082
 16046  0835                     __ptext2082:	
 16047 ;; =============== function _ELINMIntHandler ends ============
 16048                           
 16049                           
 16050 ;; *************** function _BLDCWait *****************
 16051 ;; Defined at:
 16052 ;;		line 158 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\bldc.c"
 16053 ;; Parameters:    Size  Location     Type
 16054 ;;		None
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;		None
 16057 ;; Return value:  Size  Location     Type
 16058 ;;		None               void
 16059 ;; Registers used:
 16060 ;;		None
 16061 ;; Tracked objects:
 16062 ;;		On entry : 1E/1
 16063 ;;		On exit  : 0/0
 16064 ;;		Unchanged: 0/0
 16065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16066 ;;      Params:         0       0       0       0       0       0       0       0
 16067 ;;      Locals:         0       0       0       0       0       0       0       0
 16068 ;;      Temps:          0       0       0       0       0       0       0       0
 16069 ;;      Totals:         0       0       0       0       0       0       0       0
 16070 ;;Total ram usage:        0 bytes
 16071 ;; Hardware stack levels used:    1
 16072 ;; This function calls:
 16073 ;;		Nothing
 16074 ;; This function is called by:
 16075 ;;		_interrrupt_bldc
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078  0835                     _BLDCWait:	
 16079                           
 16080                           ;bldc.c: 161: _nop();
 16081                           
 16082                           ; Regs used in _BLDCWait: []
 16083  0835  0000               	nop
 16084                           
 16085                           ;bldc.c: 162: _nop();
 16086  0836  0000               	nop
 16087                           
 16088                           ;bldc.c: 163: _nop();
 16089  0837  0000               	nop
 16090                           
 16091                           ;bldc.c: 164: _nop();
 16092  0838  0000               	nop
 16093                           
 16094                           ;bldc.c: 165: _nop();
 16095  0839  0000               	nop
 16096                           
 16097                           ;bldc.c: 166: _nop();
 16098  083A  0000               	nop
 16099                           
 16100                           ;bldc.c: 167: _nop();
 16101  083B  0000               	nop
 16102                           
 16103                           ;bldc.c: 168: _nop();
 16104  083C  0000               	nop
 16105                           
 16106                           ;bldc.c: 170: _nop();
 16107  083D  0000               	nop
 16108                           
 16109                           ;bldc.c: 171: _nop();
 16110  083E  0000               	nop
 16111                           
 16112                           ;bldc.c: 172: _nop();
 16113  083F  0000               	nop
 16114                           
 16115                           ;bldc.c: 173: _nop();
 16116  0840  0000               	nop
 16117                           
 16118                           ;bldc.c: 174: _nop();
 16119  0841  0000               	nop
 16120                           
 16121                           ;bldc.c: 175: _nop();
 16122  0842  0000               	nop
 16123                           
 16124                           ;bldc.c: 176: _nop();
 16125  0843  0000               	nop
 16126                           
 16127                           ;bldc.c: 177: _nop();
 16128  0844  0000               	nop
 16129                           
 16130                           ;bldc.c: 179: _nop();
 16131  0845  0000               	nop
 16132                           
 16133                           ;bldc.c: 180: _nop();
 16134  0846  0000               	nop
 16135                           
 16136                           ;bldc.c: 181: _nop();
 16137  0847  0000               	nop
 16138                           
 16139                           ;bldc.c: 182: _nop();
 16140  0848  0000               	nop
 16141                           
 16142                           ;bldc.c: 183: _nop();
 16143  0849  0000               	nop
 16144                           
 16145                           ;bldc.c: 184: _nop();
 16146  084A  0000               	nop
 16147                           
 16148                           ;bldc.c: 185: _nop();
 16149  084B  0000               	nop
 16150                           
 16151                           ;bldc.c: 186: _nop();
 16152  084C  0000               	nop
 16153                           
 16154                           ;bldc.c: 188: _nop();
 16155  084D  0000               	nop
 16156                           
 16157                           ;bldc.c: 189: _nop();
 16158  084E  0000               	nop
 16159                           
 16160                           ;bldc.c: 190: _nop();
 16161  084F  0000               	nop
 16162                           
 16163                           ;bldc.c: 191: _nop();
 16164  0850  0000               	nop
 16165                           
 16166                           ;bldc.c: 192: _nop();
 16167  0851  0000               	nop
 16168                           
 16169                           ;bldc.c: 193: _nop();
 16170  0852  0000               	nop
 16171                           
 16172                           ;bldc.c: 194: _nop();
 16173  0853  0000               	nop
 16174                           
 16175                           ;bldc.c: 195: _nop();
 16176  0854  0000               	nop
 16177  0855  0008               	return
 16178  0856                     __end_of_BLDCWait:	
 16179                           
 16180                           	psect	text2087
 16181  07A3                     __ptext2087:	
 16182 ;; =============== function __ELINMIntResetProtocol ends ============
 16183                           
 16184                           
 16185 ;; *************** function _interrupt_PWMCapture *****************
 16186 ;; Defined at:
 16187 ;;		line 440 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\pwm.c"
 16188 ;; Parameters:    Size  Location     Type
 16189 ;;		None
 16190 ;; Auto vars:     Size  Location     Type
 16191 ;;		None
 16192 ;; Return value:  Size  Location     Type
 16193 ;;		None               void
 16194 ;; Registers used:
 16195 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16196 ;; Tracked objects:
 16197 ;;		On entry : 1F/0
 16198 ;;		On exit  : 1B/2
 16199 ;;		Unchanged: FFFE0/0
 16200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16201 ;;      Params:         0       0       0       0       0       0       0       0
 16202 ;;      Locals:         0       0       0       0       0       0       0       0
 16203 ;;      Temps:          0       0       0       0       0       0       0       0
 16204 ;;      Totals:         0       0       0       0       0       0       0       0
 16205 ;;Total ram usage:        0 bytes
 16206 ;; Hardware stack levels used:    1
 16207 ;; This function calls:
 16208 ;;		Nothing
 16209 ;; This function is called by:
 16210 ;;		_interrupt_handler
 16211 ;; This function uses a non-reentrant model
 16212 ;;
 16213  07A3                     _interrupt_PWMCapture:	
 16214                           
 16215                           ;pwm.c: 450: switch( ui8_Pulse_State )
 16216                           
 16217                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
 16218  07A3  2FE8               	goto	i1l25171
 16219  07A4                     i1l17353:	
 16220                           ;pwm.c: 452: {
 16221                           ;pwm.c: 454: case 0:
 16222                           
 16223                           
 16224                           ;pwm.c: 456: {
 16225                           ;pwm.c: 460: ui8_Pulse_State = 1;
 16226                           
 16227                           ;pwm.c: 461: ui16_Capt_Val0.b.lo = CCPR5L;
 16228  07A4  27F5  3187         	fcall	PL41	;call to abstracted procedure
 16229  07A6  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 16230                           
 16231                           ;pwm.c: 462: ui16_Capt_Val0.b.hi = CCPR5H;
 16232  07A7  0026               	movlb	6	; select bank6
 16233  07A8  081D               	movf	29,w	;volatile
 16234  07A9  0021               	movlb	1	; select bank1
 16235  07AA  00AB               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
 16236                           
 16237                           ;pwm.c: 463: CCP5CON = 0x04;
 16238                           
 16239                           ;pwm.c: 464: break;
 16240  07AB  2FFB               	ljmp	PL51	;call to abstracted procedure
 16241  07AC                     i1l25161:	
 16242                           
 16243                           ;pwm.c: 472: {
 16244                           ;pwm.c: 476: ui8_Pulse_State = 2;
 16245  07AC  3002               	movlw	2
 16246  07AD  00D6               	movwf	_ui8_Pulse_State^(0+256)
 16247                           
 16248                           ;pwm.c: 477: ui16_Capt_Val1.b.lo = CCPR5L;
 16249  07AE  0026               	movlb	6	; select bank6
 16250  07AF  081C               	movf	28,w	;volatile
 16251  07B0  0021               	movlb	1	; select bank1
 16252  07B1  00AC               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
 16253                           
 16254                           ;pwm.c: 478: ui16_Capt_Val1.b.hi = CCPR5H;
 16255  07B2  0026               	movlb	6	; select bank6
 16256  07B3  081D               	movf	29,w	;volatile
 16257  07B4  0021               	movlb	1	; select bank1
 16258  07B5  00AD               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
 16259                           
 16260                           ;pwm.c: 479: CCP5CON = 0x05;
 16261  07B6  3005               	movlw	5
 16262  07B7  0026               	movlb	6	; select bank6
 16263  07B8  009E               	movwf	30	;volatile
 16264                           
 16265                           ;pwm.c: 480: break;
 16266  07B9  0008               	return
 16267  07BA                     i1l17356:	
 16268                           ;pwm.c: 483: }
 16269                           ;pwm.c: 486: case 2:
 16270                           
 16271                           
 16272                           ;pwm.c: 488: {
 16273                           ;pwm.c: 492: ui8_Pulse_State = 1;
 16274                           
 16275                           ;pwm.c: 493: ui16_Capt_Val2.b.lo = CCPR5L;
 16276  07BA  27F5  3187         	fcall	PL41	;call to abstracted procedure
 16277  07BC  00AE               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
 16278                           
 16279                           ;pwm.c: 494: ui16_Capt_Val2.b.hi = CCPR5H;
 16280  07BD  0026               	movlb	6	; select bank6
 16281  07BE  081D               	movf	29,w	;volatile
 16282  07BF  0021               	movlb	1	; select bank1
 16283  07C0  00AF               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
 16284                           
 16285                           ;pwm.c: 495: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
 16286  07C1  082F               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 16287  07C2  0023               	movlb	3	; select bank3
 16288  07C3  00DB               	movwf	(_ui16_PWM_Freq_In+1)^(0+384)
 16289  07C4  0021               	movlb	1	; select bank1
 16290  07C5  082E               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 16291  07C6  0023               	movlb	3	; select bank3
 16292  07C7  00DA               	movwf	_ui16_PWM_Freq_In^(0+384)
 16293  07C8  0021               	movlb	1	; select bank1
 16294  07C9  082A               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
 16295  07CA  0023               	movlb	3	; select bank3
 16296  07CB  02DA               	subwf	_ui16_PWM_Freq_In^(0+384),f
 16297  07CC  0021               	movlb	1	; select bank1
 16298  07CD  082B               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 16299  07CE  0023               	movlb	3	; select bank3
 16300  07CF  3BDB               	subwfb	(_ui16_PWM_Freq_In+1)^(0+384),f
 16301                           
 16302                           ;pwm.c: 496: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
 16303  07D0  0021               	movlb	1	; select bank1
 16304  07D1  082D               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
 16305  07D2  0023               	movlb	3	; select bank3
 16306  07D3  00EB               	movwf	(_ui16_Duty_Cycle_In+1)^(0+384)
 16307  07D4  0021               	movlb	1	; select bank1
 16308  07D5  082C               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
 16309  07D6  0023               	movlb	3	; select bank3
 16310  07D7  00EA               	movwf	_ui16_Duty_Cycle_In^(0+384)
 16311  07D8  0021               	movlb	1	; select bank1
 16312  07D9  082A               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
 16313  07DA  0023               	movlb	3	; select bank3
 16314  07DB  02EA               	subwf	_ui16_Duty_Cycle_In^(0+384),f
 16315  07DC  0021               	movlb	1	; select bank1
 16316  07DD  082B               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 16317  07DE  0023               	movlb	3	; select bank3
 16318  07DF  3BEB               	subwfb	(_ui16_Duty_Cycle_In+1)^(0+384),f
 16319                           
 16320                           ;pwm.c: 497: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
 16321  07E0  0021               	movlb	1	; select bank1
 16322  07E1  082F               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 16323  07E2  00AB               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
 16324  07E3  082E               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 16325  07E4  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 16326                           
 16327                           ;pwm.c: 501: if( ui16_Duty_Cycle_In )
 16328  07E5  2FFB               	ljmp	PL51	;call to abstracted procedure
 16329  07E6                     i1l25167:	
 16330                           
 16331                           ;pwm.c: 526: {
 16332                           ;pwm.c: 530: ui8_Pulse_State = 0;
 16333  07E6  01D6               	clrf	_ui8_Pulse_State^(0+256)
 16334                           
 16335                           ;pwm.c: 531: break;
 16336  07E7  0008               	return
 16337  07E8                     i1l25171:	
 16338  07E8  0022               	movlb	2	; select bank2
 16339  07E9  0856               	movf	_ui8_Pulse_State^(0+256),w
 16340                           
 16341                           ; Switch size 1, requested type "space"
 16342                           ; Number of cases is 3, Range of values is 0 to 2
 16343                           ; switch strategies available:
 16344                           ; Name         Instructions Cycles
 16345                           ; simple_byte           10     6 (average)
 16346                           ; direct_byte           12     6 (fixed)
 16347                           ; jumptable            260     6 (fixed)
 16348                           ; rangetable             7     4 (fixed)
 16349                           ; spacedrange           11     6 (fixed)
 16350                           ; locatedrange           3     3 (fixed)
 16351                           ;	Chosen strategy is simple_byte
 16352  07EA  3A00               	xorlw	0	; case 0
 16353  07EB  1903               	skipnz
 16354  07EC  2FA4               	goto	i1l17353
 16355  07ED  3A01               	xorlw	1	; case 1
 16356  07EE  1903               	skipnz
 16357  07EF  2FAC               	goto	i1l25161
 16358  07F0  3A03               	xorlw	3	; case 2
 16359  07F1  1903               	skipnz
 16360  07F2  2FBA               	goto	i1l17356
 16361  07F3  2FE6               	goto	i1l25167
 16362  07F4  0008               	return
 16363  07F5                     __end_of_interrupt_PWMCapture:	
 16364  07F5                     PL41:	
 16365  07F5  01D6               	clrf	_ui8_Pulse_State^(0+256)
 16366  07F6  0AD6               	incf	_ui8_Pulse_State^(0+256),f
 16367  07F7  0026               	movlb	6	; select bank6
 16368  07F8  081C               	movf	28,w	;volatile
 16369  07F9  0021               	movlb	1	; select bank1
 16370  07FA  0008               	return
 16371  07FB                     PL51:	
 16372  07FB  3004               	movlw	4
 16373  07FC  0026               	movlb	6	; select bank6
 16374  07FD  009E               	movwf	30	;volatile
 16375  07FE  0008               	return
 16376                           
 16377                           	psect	text2088
 16378  0822                     __ptext2088:	
 16379 ;; =============== function _interrupt_PWMCapture ends ============
 16380                           
 16381                           
 16382 ;; *************** function _PWM_CTRL *****************
 16383 ;; Defined at:
 16384 ;;		line 200 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\pwm.c"
 16385 ;; Parameters:    Size  Location     Type
 16386 ;;		None
 16387 ;; Auto vars:     Size  Location     Type
 16388 ;;		None
 16389 ;; Return value:  Size  Location     Type
 16390 ;;		None               void
 16391 ;; Registers used:
 16392 ;;		wreg, status,2, status,0
 16393 ;; Tracked objects:
 16394 ;;		On entry : 1F/0
 16395 ;;		On exit  : 1C/0
 16396 ;;		Unchanged: FFFE0/0
 16397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16398 ;;      Params:         0       0       0       0       0       0       0       0
 16399 ;;      Locals:         0       0       0       0       0       0       0       0
 16400 ;;      Temps:          0       0       0       0       0       0       0       0
 16401 ;;      Totals:         0       0       0       0       0       0       0       0
 16402 ;;Total ram usage:        0 bytes
 16403 ;; Hardware stack levels used:    1
 16404 ;; This function calls:
 16405 ;;		Nothing
 16406 ;; This function is called by:
 16407 ;;		_interrupt_handler
 16408 ;; This function uses a non-reentrant model
 16409 ;;
 16410  0822                     _PWM_CTRL:	
 16411                           
 16412                           ;pwm.c: 288: ui8_PWM_FreqCnt++;
 16413                           
 16414                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 16415  0822  0021               	movlb	1	; select bank1
 16416  0823  3064               	movlw	100
 16417  0824  0ADD               	incf	_ui8_PWM_FreqCnt^(0+128),f
 16418                           
 16419                           ;pwm.c: 290: if( ui8_PWM_FreqCnt >= 100 )
 16420  0825  025D               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 16421  0826  1C03               	skipc
 16422  0827  282C               	goto	i1l25043
 16423                           
 16424                           ;pwm.c: 292: {
 16425                           ;pwm.c: 294: ui8_PWM_FreqCnt = 0;
 16426  0828  01DD               	clrf	_ui8_PWM_FreqCnt^(0+128)
 16427                           
 16428                           ;pwm.c: 295: LATC0 = 0;
 16429  0829  0022               	movlb	2	; select bank2
 16430  082A  100E               	bcf	14,0
 16431                           
 16432                           ;pwm.c: 298: }
 16433  082B  0008               	return
 16434  082C                     i1l25043:	
 16435                           
 16436                           ;pwm.c: 301: else
 16437                           ;pwm.c: 302: {
 16438                           ;pwm.c: 304: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 16439  082C  0022               	movlb	2	; select bank2
 16440  082D  0855               	movf	_ui8_PWMoutvalue^(0+256),w
 16441  082E  0021               	movlb	1	; select bank1
 16442  082F  025D               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 16443  0830  1C03               	skipc
 16444  0831  0008               	return
 16445                           
 16446                           ;pwm.c: 306: {
 16447                           ;pwm.c: 308: LATC0 = 1;
 16448  0832  0022               	movlb	2	; select bank2
 16449  0833  140E               	bsf	14,0
 16450  0834  0008               	return
 16451  0835                     __end_of_PWM_CTRL:	
 16452                           
 16453                           	psect	text2089
 16454  0819                     __ptext2089:	
 16455 ;; =============== function _PWM_CTRL ends ============
 16456                           
 16457                           
 16458 ;; *************** function _Task1ms *****************
 16459 ;; Defined at:
 16460 ;;		line 54 in file "D:\Projekte\BVH2\BLDC\V0.9.3\src\interrupt.c"
 16461 ;; Parameters:    Size  Location     Type
 16462 ;;		None
 16463 ;; Auto vars:     Size  Location     Type
 16464 ;;		None
 16465 ;; Return value:  Size  Location     Type
 16466 ;;		None               void
 16467 ;; Registers used:
 16468 ;;		status,2, status,0
 16469 ;; Tracked objects:
 16470 ;;		On entry : 1C/0
 16471 ;;		On exit  : 1F/1
 16472 ;;		Unchanged: FFFE0/0
 16473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16474 ;;      Params:         0       0       0       0       0       0       0       0
 16475 ;;      Locals:         0       0       0       0       0       0       0       0
 16476 ;;      Temps:          0       0       0       0       0       0       0       0
 16477 ;;      Totals:         0       0       0       0       0       0       0       0
 16478 ;;Total ram usage:        0 bytes
 16479 ;; Hardware stack levels used:    1
 16480 ;; This function calls:
 16481 ;;		Nothing
 16482 ;; This function is called by:
 16483 ;;		_interrupt_handler
 16484 ;; This function uses a non-reentrant model
 16485 ;;
 16486  0819                     _Task1ms:	
 16487                           
 16488                           ;interrupt.c: 56: ui8_Task_Cont1ms++;
 16489                           
 16490                           ; Regs used in _Task1ms: [status]
 16491  0819  0021               	movlb	1	; select bank1
 16492  081A  0AE2               	incf	_ui8_Task_Cont1ms^(0+128),f
 16493  081B  0008               	return
 16494  081C                     __end_of_Task1ms:	
 16495                           
 16496                           	psect	text2090
 16497  0000                     __ptext2090:	
 16498 ;; =============== function _Task1ms ends ============
 16499                           
 16500  007E                     btemp	set	126	;btemp
 16501  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.81 build 7612 
Symbol Table                                                                                   Fri Apr 22 13:16:23 2016

                              EOL@_dcnt_9400 0221                                EOL@_dcnt_9401 0222  
                              EOL@_dcnt_9410 022B                                EOL@_dcnt_9402 0223  
                              EOL@_dcnt_9411 022C                                EOL@_dcnt_9403 0224  
                              EOL@_dcnt_9412 022D                                EOL@_dcnt_9404 0225  
                              EOL@_dcnt_9413 022E                                EOL@_dcnt_9405 0226  
                              EOL@_dcnt_9414 022F                                EOL@_dcnt_9406 0227  
                              EOL@_dcnt_9415 0230                                EOL@_dcnt_9407 0228  
                              EOL@_dcnt_9416 0231                                EOL@_dcnt_9408 0229  
                              EOL@_dcnt_9409 022A                            ?_PWM_Capture_init 0070  
                                          _B 01A0                                            pc 0002  
                                         _RD 0CA8                                           _WR 0CA9  
                               ___awdiv@sign 0037                           ??_PWM_Capture_init 002C  
                                         _pt 004D                          ___wmul@multiplicand 002E  
                           i1___wmul@product 0074                     _SIBFS_Pic_etat_monitor_b 00CD  
           BVH2_Appl_Layer@X_Sb4_Intergrator 0167                          __end_of_system_init 088F  
BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00C4                                  ?i1_ADC_Read 0070  
                                ?i1_ADC_Wait 0070                                          _GIE 005F  
                                        _EOL 00DE                                          _RC5 0075  
                                        _PR2 001B                                          _sum 0127  
                           _ui16_IPhase_bldc 00B0                                          wreg 0009  
                          _ui16_IPhase1_bldc 0129                           __ELINMIntTFrameMax 01C6  
                          _ui16_IPhase2_bldc 01D2                           __ELINMIntTFrameMin 0123  
                          _ui16_IPhase3_bldc 01D4                    BVH2_Appl_Layer@Cb24_Reset 0233  
                                       ?_EOL 0070                          __ELINMIntTHeaderMax 01C8  
                        __ELINMIntTHeaderMin 0125                      __end_of_interrrupt_bldc 1DAF  
                                       _C1IE 0495                         __end_of_EnableMCP201 08EC  
                                       l1851 0000                                         l1861 0000  
                                       l1854 0000                                         l1857 0A53  
                                       l1882 0000                                         l1876 0000  
                                       l1879 0000                                         l3908 0000  
                                       l3861 1AED                                         l3790 0000  
                                       l5726 0000                                         l3879 1B22  
                                       l7700 02BC                                         l7701 02BA  
                                       l7710 02CA                                         l7711 02C8  
                                       l7640 0CDE                                         l7720 02F3  
                                       l7721 02F1                                         l7705 02C3  
                                       l7642 0CE3                                         l7730 0301  
                                       l7706 02C1                                         l7731 02FF  
                                       l7715 02D1                                         l7740 030F  
                                       l7716 02CF                                         l7629 0000  
                                       l7741 030D                                         l7725 02FA  
                                       l7750 0338                                         l7726 02F8  
                                       l7831 0000                                         l7751 0336  
                                       l7735 0308                                         l7760 0346  
                                       l7736 0306                                         l7761 0344  
                                       l7745 0316                                         l7770 0354  
                                       l7746 0314                                         l7690 02AE  
                                       l7771 0352                                         l7755 033F  
                                       l7691 02AC                                         l7756 033D  
                                       _ADON 04E8                                         l7765 034D  
                                       l7766 034B                                         l7775 035B  
                                       l7695 02B5                                         l7776 0359  
                                       l7696 02B3                                         l9641 05F2  
                                       l9644 0000                                         l9638 0000  
                                       _CFGS 0CAE                                         _LATA 010C  
                                       _LATB 010D                                         _LATC 010E  
                                       _PIE1 0091                                         _PIE2 0092  
                                       _PIE3 0093                                         u4355 0E0E  
                                       _PEIE 005E                                         u4365 0E26  
                                       _RCIF 008D                                         u5445 0C11  
                                       u9025 0665                                         u9105 175E  
                                       u9155 0D46                                         u9485 1A9B  
                                       u9495 1AA9                                         u9861 10F0  
                                       _TMR0 0015                                         _TMR2 001A  
                                       _TMR4 0415                                         _TMR6 041C  
                                       _WREN 0CAA                                         _Bcnt 00C8  
                           _ui8_Task_Cont1ms 00E2                             _ui8_Task_Cont3ms 0157  
                           _ui8_Task_Cont5ms 0158                             _ui16_PWM_Freq_In 01DA  
                 BVH2_Appl_Layer@Cb24_BadCnt 01C2                                         _main 0AAC  
                                       fsr0h 0005                                         fsr1h 0007  
                                       fsr0l 0004                                         indf0 0000  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                            _ui8_b_DResLocID_c 004F  
                        timer_init@ui8_TmrNb 002D                             __end_of_ADC_Init 08D1  
                           __end_of_ADC_Read 0A69                             __end_of_ADC_Wait 0A51  
                                       start 0029                              _ui8_sampleState 0160  
                           __end_of_BLDCWait 0856                       __size_of_PWM_Write_Out 0005  
                         _ui16_comm_time_max 00B6                                        S31595 00CE  
                                      S31599 0092              __end_of__ELINMIntReceiveMessage 0DFE  
                                      ??_EOL 0041                                  i1_commutate 1DEF  
                              ?_InitMotorRun 0070                              __end_of_Task1ms 081C  
                        __ELINMIntGetPointer 067A                                 cksum@counter 002E  
                                      l20000 0000                                        l20013 0D5E  
                                      l20016 0000                                        l30003 11DD  
                                      l30021 0000                                        l30005 0000  
                                      l30111 0000                                        l13400 08D7  
                                      l13401 08D5                                        l30201 1350  
                                      l30121 0000                                        l30105 0000  
                                      l30113 12AF                                        l30017 120B  
                                      l31001 0000                                        l13410 08E7  
                                      l13402 0000                                        l13411 08E5  
                                      l30203 0000                                        l30131 0000  
                                      l30123 0000                                        l30107 0000  
                                      l30051 1243                                        l30027 1220  
                                      l30043 1225                                        l30019 0000  
                                      l31011 0405                                        l31003 0000  
                                      l13412 0000                                        l13413 0000  
                                      l13405 08DF                                        l30301 142D  
                                      l30205 135B                                        l30133 0000  
                                      l30125 0000                                        l30117 12BC  
                                      l30109 0000                                        l30141 12DC  
                                      l30061 0000                                        l30029 1222  
                                      l31021 0000                                        l31013 0000  
                                      l31005 0000                                        l13406 08DD  
                                      l13407 0000                                        l30311 1441  
                                      l30303 0000                                        l30231 13C0  
                                      l30207 0000                                        l30151 0000  
                                      l30135 0000                                        l30119 0000  
                                      l30127 12C5                                        l30071 1266  
                                      l30063 0000                                        l30055 1248  
                                      l30047 123D                                        l31111 0000  
                                      l31031 044F                                        l31023 0000  
                                      l31015 0000                                        l31007 0000  
                                      l13416 0000                                        l30401 14D1  
                                      l30305 0000                                        l30217 0000  
                                      l30153 0000                                        l30145 12E4  
                                      l30137 0000                                        l30073 0000  
                                      l30065 0000                                        l30161 12F7  
                                      l31201 0000                                        l31121 0000  
                                      l31113 0000                                        l31105 04E5  
                                      l31041 0479                                        l31025 0000  
                                      l31017 0000                                        l31009 0000  
                                      l31033 0452                                        l30411 0000  
                                      l30403 0000                                        l30331 1461  
                                      l30323 1456                                        l30243 13D6  
                                      l30171 0000                                        l30155 0000  
                                      l30083 0000                                        l30075 0000  
                                      l30059 0000                                        l30067 1258  
                                      l13355 05F9                                        l31211 0000  
                                      l31203 0000                                        l31115 0000  
                                      l31107 04E8                                        l31051 0000  
                                      l31027 0000                                        l31019 0000  
                                      l31035 0461                                        l30421 152F  
                                      l30413 0000                                        l30405 14D9  
                                      l30317 144F                                        l30261 0000  
                                      l30229 13E0                                        l30253 13E1  
                                      l30149 0000                                        l30085 0000  
                                      l30501 0000                                        l31221 0000  
                                      l31213 055D                                        l31141 0000  
                                      l31117 0000                                        l31061 049B  
                                      l31053 0000                                        l31045 0000  
                                      l31037 0463                                        l31029 0000  
                                      l31301 0000                                        l13471 0EAC  
                                      l30423 1534                                        l30351 147D  
                                      l30247 0000                                        l30239 13C8  
                                      l30191 1338                                        l30167 0000  
                                      l30095 128E                                        l30087 0000  
                                      l30079 1270                                        l30183 132B  
                                      l30503 0000                                        l13359 0000  
                                      l30511 0000                                        l31223 0000  
                                      l31151 0000                                        l31143 0000  
                                      l31207 0544                                        l31135 050F  
                                      l31127 050A                                        l31119 0000  
                                      l31071 0000                                        l31063 049E  
                                      l31055 0000                                        l31047 0000  
                                      l31311 0000                                        l31303 0000  
                                      l13472 0EB0                                        l13376 0D9B  
                                      l13473 0EB4                                        l30441 0000  
                                      l30433 1586                                        l30425 0000  
                                      l30409 14DB                                        l30353 0000  
                                      l30345 0000                                        l30281 140F  
                                      l30257 0000                                        l30249 0000  
                                      l30193 0000                                        l30185 0000  
                                      l30177 0000                                        l30169 0000  
                                      l30089 1281                                        l30505 0000  
                                      l30521 0000                                        l30513 0000  
                                      l30601 0000                                        l31241 05B3  
                                      l31225 0000                                        l31217 0000  
                                      l31209 054C                                        l31161 0000  
                                      l31153 0000                                        l31145 0000  
                                      l31129 050D                                        l31073 0000  
                                      l31049 0000                                        l31313 0000  
                                      l31305 0000                                        l31401 0000  
                                      l31321 0000                                        l13474 0EB8  
                                      l13475 0EBD                                        l30451 1612  
                                      l30443 0000                                        l30419 1527  
                                      l30371 0000                                        l30355 0000  
                                      l30347 0000                                        l30195 0000  
                                      l30179 0000                                        l30099 1297  
                                      l30531 0000                                        l30523 0000  
                                      l30515 0000                                        l30507 0000  
                                      l30611 0000                                        l30603 0000  
                                      l13379 0DA4                                        l31251 0000  
                                      l31227 0000                                        l31219 0000  
                                      l31171 0000                                        l31163 052C  
                                      l31155 0000                                        l31147 0000  
                                      l31139 0517                                        l31091 0000  
                                      l31083 04C0                                        l31075 0000  
                                      l31067 0000                                        l31315 0000  
                                      l31307 0000                                        l31403 0000  
                                      l31331 0000                                        l31323 0AB3  
                                      l13476 0EC1                                        l13477 0EC5  
                                      l30437 158D                                        l30381 14AC  
                                      l30373 0000                                        l30357 0000  
                                      l30277 0000                                        l30197 1346  
                                      l30461 098E                                        l30541 0000  
                                      l30533 0000                                        l30525 0000  
                                      l30517 0000                                        l30613 0000  
                                      l30605 0000                                        l30621 0000  
                                      l30701 0000                                        l31253 05D0  
                                      l31245 05BE                                        l31229 0000  
                                      l31181 0000                                        l31173 0000  
                                      l31165 0000                                        l31157 0000  
                                      l31149 0000                                        l31093 0000  
                                      l31085 04C3                                        l31077 0000  
                                      l31069 0000                                        l31309 0000  
                                      l31261 0000                                        l31413 0000  
                                      l31405 0000                                        l31341 0000  
                                      l31333 0000                                        l31317 0000  
                                      l13478 0EC9                                        l13495 0000  
                                      l13479 0000                                        l30439 0000  
                                      l30391 14BA                                        l30383 0000  
                                      l30367 1495                                        l30359 0000  
                                      l30295 0000                                        l30279 0000  
                                      l30199 0000                                        l30471 0000  
                                      l30543 0000                                        l30535 0000  
                                      l30527 0000                                        l30519 0000  
                                      l30615 0000                                        l30607 0000  
                                      l30631 0000                                        l30623 0000  
                                      l30703 0000                                        l31191 0000  
                                      l31183 0000                                        l31175 0000  
                                      l31167 0000                                        l31159 0000  
                                      l31095 0000                                        l30711 0106  
                                      l31271 0000                                        l31263 0000  
                                      l31431 0BE1                                        l31407 0000  
                                      l31327 0000                                        l31319 0000  
                                      l30449 15FD                                        l30393 0000  
                                      l30385 0000                                        l30369 0000  
                                      l30297 1426                                        l30481 0000  
                                      l30545 0000                                        l30537 0000  
                                      l30529 0000                                        l30553 0000  
                                      l30617 0000                                        l30609 0000  
                                      l30641 0000                                        l30633 0000  
                                      l30625 0000                                        l30705 0000  
                                      l31249 0000                                        l31193 0000  
                                      l31185 0000                                        l31177 0000  
                                      l31169 0000                                        l31097 0000  
                                      l31089 0000                                        l30801 0000  
                                      l31281 0000                                        l31273 0000  
                                      l31265 0000                                        l31361 0000  
                                      l31353 0000                                        l31409 0BC0  
                                      l31345 0000                                        l31337 0000  
                                      l31329 0000                                        l30467 0000  
                                      l30459 0000                                        l30491 0000  
                                      l30483 0000                                        l30475 0D78  
                                      l30547 0000                                        l30539 0000  
                                      l30555 0000                                        l30643 0000  
                                      l30635 0000                                        l30627 0000  
                                      l30619 0000                                        l30651 0000  
                                      l31195 0000                                        l31187 053C  
                                      l31179 0000                                        l31099 0000  
                                      l30811 0000                                        l30803 0000  
                                      l30731 0135                                        l30723 011B  
                                      l30715 0000                                        l31259 05D2  
                                      l30707 0000                                        l31291 0000  
                                      l31283 0000                                        l31275 0000  
                                      l31267 0000                                        l31419 0BD1  
                                      l31371 0B30                                        l31363 0000  
                                      l31355 0000                                        l31339 0AD5  
                                      l25221 0000                                        l30469 0000  
                                      l30493 0000                                        l30485 0000  
                                      l30557 0000                                        l30549 0000  
                                      l30581 0A06                                        l30573 09E4  
                                      l30565 09C2                                        l30645 0000  
                                      l30637 0000                                        l30629 0000  
                                      l30653 0000                                        l31197 0000  
                                      l31189 0000                                        l30901 0000  
                                      l30821 0000                                        l30813 0000  
                                      l30805 0000                                        l30733 0000  
                                      l30725 0000                                        l30741 0157  
                                      l30717 0000                                        l31293 0000  
                                      l31285 0000                                        l31277 0000  
                                      l31269 0000                                        l31381 0000  
                                      l31373 0B6A                                        l31365 0000  
                                      l31357 0000                                        l25231 0000  
                                      l25223 0000                                        l30399 0000  
                                      l30495 0000                                        l30487 0000  
                                      l30479 0000                                        l30591 0000  
                                      l30583 0A0A                                        l30575 09E8  
                                      l30567 09C6                                        l30559 0000  
                                      l30647 0000                                        l30639 0000  
                                      l30671 0000                                        l30663 0000  
                                      l31199 0000                                        l30911 0000  
                                      l30903 0000                                        l30831 0000  
                                      l30823 0000                                        l30815 0000  
                                      l30807 0000                                        l30735 0000  
                                      l30743 0160                                        l30727 0000  
                                      l30719 0116                                        l31295 0000  
                                      l31287 0000                                        l31279 0000  
                                      l31391 0B96                                        l31383 0000  
                                      l31375 0000                                        l31367 0000  
                                      l31359 0000                                        l25241 0929  
                                      l25233 091D                                        l25225 0911  
                                      l30497 0000                                        l30489 0000  
                                      l30593 0000                                        l30585 0000  
                                      l30649 0000                                        l30681 0000  
                                      l30673 0000                                        l30665 0000  
                                      l30921 0000                                        l30913 0000  
                                      l30905 0000                                        l30825 0000  
                                      l30817 0000                                        l30809 0000  
                                      l30737 0153                                        l30729 0000  
                                      l31297 0000                                        l31289 0000  
                                      l31393 0000                                        l31385 0000  
                                      l31377 0000                                        l15458 0000  
                                      l25251 0000                                        l25243 0000  
                                      l25235 0000                                        l25227 0000  
                                      l30499 0000                                        l30595 0000  
                                      l30587 0000                                        l30691 0000  
                                      l30683 0000                                        l30675 0000  
                                      l30667 0000                                        l30931 0000  
                                      l30923 0000                                        l30915 0000  
                                      l30907 0000                                        l30851 0000  
                                      l30843 0000                                        l30835 022C  
                                      l30827 0000                                        l30819 0000  
                                      l30763 0000                                        l31299 0000  
                                      l31395 0000                                        l31379 0000  
                                      l15468 0000                                        l24701 0000  
                                      l25181 0000                                        l25261 0000  
                                      l25253 0000                                        l25245 0000  
                                      l25237 0000                                        l25229 0000  
                                      l30597 0000                                        l30589 0000  
                                      l30693 0000                                        l30685 0000  
                                      l30677 0000                                        l30669 0000  
                                      l30941 0000                                        l30933 0000  
                                      l30925 0000                                        l30917 0000  
                                      l30909 0000                                        l30853 0000  
                                      l30829 0000                                        l30781 01C8  
                                      l30765 0000                                        l30757 0181  
                                      l31397 0000                                        l31389 0B94  
                                      l17334 095F                                        l24711 0000  
                                      l24703 0E1A                                        l17343 0000  
                                      l25183 0000                                        l25191 0000  
                                      l25263 0000                                        l25255 0000  
                                      l25247 0000                                        l25239 0000  
                                      l25271 0C39                                        l30599 0000  
                                      l30695 0000                                        l30687 0000  
                                      l30679 0000                                        l30951 0000  
                                      l30943 0000                                        l30935 0000  
                                      l30927 0000                                        l30919 0000  
                                      l30855 0000                                        l30847 024A  
                                      l30839 023E                                        l30791 0000  
                                      l30759 0188                                        l31399 0000  
                                      l24705 0000                                        l25177 0000  
                                      l25185 0000                                        l25257 0941  
                                      l25249 0935                                        l25273 0C3B  
                                      l26401 0000                                        l30697 0000  
                                      l30689 0000                                        l30961 0000  
                                      l30953 0000                                        l30945 0000  
                                      l30937 0000                                        l30929 0000  
                                      l30881 0000                                        l30873 029A  
                                      l30865 028A                                        l30857 0000  
                                      l30849 0000                                        l30793 0000  
                                      l30785 0000                                        l30777 01BD  
                                      l17610 11D0                                        l24707 0000  
                                      l25179 0000                                        l25187 0000  
                                      l25259 0000                                        l25267 094D  
                                      l25275 0C3E                                        l25283 0C46  
                                      l25531 0BFC                                        l25523 0000  
                                      l26411 0000                                        l26403 08A6  
                                      l30699 0000                                        l30971 037B  
                                      l30963 0000                                        l30955 0000  
                                      l30947 0000                                        l30939 0000  
                                      l30891 0000                                        l30883 0000  
                                      l30875 0000                                        l30859 0000  
                                      l30795 0000                                        l30787 0000  
                                      l24709 0000                                        l25189 0000  
                                      l25277 0C40                                        l25269 0000  
                                      l25541 0C09                                        l25533 0000  
                                      l25525 0BF3                                        l25517 0000  
                                      l31597 1AD2                                        l17349 0000  
                                      l26413 0000                                        l26405 0000  
                                      l17621 123B                                        l30981 0000  
                                      l30973 0000                                        l30965 0000  
                                      l30957 0000                                        l30949 0000  
                                      l30893 0000                                        l30885 0000  
                                      l30877 0000                                        l30869 0295  
                                      l30797 0000                                        l30789 0000  
                                      l17702 1413                                        l24671 0000  
                                      l25279 0C43                                        l25551 0000  
                                      l25543 0000                                        l25519 0000  
                                      l26407 0000                                        l17615 130E  
                                      l30991 03C0                                        l30983 0000  
                                      l30975 0000                                        l30967 0000  
                                      l30959 0000                                        l30895 0000  
                                      l30887 0000                                        l30879 0000  
                                      l30799 0000                                        l17712 1443  
                                      l24665 0000                                        l25553 0C1C  
                                      l25529 0000                                        l26409 08AE  
                                      l26417 08B6                                        l17721 146B  
                                      l17561 111A                                        l17545 10B3  
                                      l30993 0000                                        l30985 0000  
                                      l30977 0000                                        l30969 0000  
                                      l30897 0000                                        l30889 0000  
                                      l17562 1108                                        l24667 0000  
                                      l24691 0000                                        l25555 0000  
                                      l25547 0000                                        l17715 1458  
                                      l30995 0000                                        l30987 0000  
                                      l30979 0000                                        l30899 0000  
                                      l17820 1704                                        l17812 16E9  
                                      l17548 10EC                                        l24669 0000  
                                      l24693 0000                                        l24685 0000  
                                      l17821 1706                                        l17813 16F8  
                                      l25557 0C24                                        l25549 0C18  
                                      l17573 1142                                        l17565 1113  
                                      l30997 0000                                        l30989 0000  
                                      l17822 1717                                        l17814 16EB  
                                      l17662 131D                                        l17582 1168  
                                      l24687 0000                                        l17815 16ED  
                                      l26391 0896                                        l17727 1475  
                                      l17591 11F6                                        l30999 0000  
                                      l17656 12DE                                        l24689 0000  
                                      l24697 0000                                        l26393 0000  
                                      l26385 0000                                        l17577 1147  
                                      l17569 1120                                        l17818 1702  
                                      l17770 1603                                        l17762 1589  
                                      l17738 14CB                                        l24699 0000  
                                      l26395 0000                                        l26387 0892  
                                      l17771 0000                                        l17579 115B  
                                      l19700 0000                                        l17684 13BC  
                                      l17676 139C                                        l28341 0000  
                                      l26397 089E                                        l26389 0000  
                                      l17693 13EF                                        l17758 1577  
                                      l26399 0000                                        l17679 13DA  
                                      l17696 1420                                        l28345 0A5C  
                                      l28337 0000                                        l25961 0000  
                                      l19641 08C7                                        l17697 13FD  
                                      l17698 13F8                                        l28603 0000  
                                      l28611 0000                                        l29323 0000  
                                      l25963 0000                                        l29331 0000  
                                      l17699 13FB                                        l28605 0000  
                                      l28613 0000                                        l28621 0000  
                                      l28701 0000                                        l25965 0000  
                                      l29501 0000                                        l29421 0000  
                                      l29413 1B16                                        l29341 0000  
                                      l29333 0000                                        l29325 1A0F  
                                      l28607 0000                                        l28615 0000  
                                      l28631 0000                                        l28623 0000  
                                      l28711 0000                                        l29511 0000  
                                      l29503 0000                                        l29431 1B36  
                                      l29415 0000                                        l29351 0000  
                                      l29343 0000                                        l29335 0000  
                                      l19664 0C57                                        l28609 0000  
                                      l28617 0000                                        l28633 0000  
                                      l28625 0000                                        l28705 0000  
                                      l28721 0000                                        l28713 0000  
                                      l29513 0000                                        l29505 0000  
                                      l29441 0000                                        l29433 0000  
                                      l29425 1B2D                                        l29409 0000  
                                      l29361 1AC2                                        l29345 0000  
                                      l29337 0000                                        l29329 1A1A  
                                      l29601 0000                                        l19690 0000  
                                      l19762 1650                                        _C1OUT 088E  
                                      l28635 0000                                        l28627 0000  
                                      l28707 0000                                        l28803 0000  
                                      l28731 1692                                        l28723 0000  
                                      l28715 1679                              __end_of___aldiv 1786  
                                      l29531 0000                                        l29523 1BA1  
                                      l29515 0000                                        l29507 0000  
                                      l29451 0000                                        l29443 0000  
                                      l29435 0000                                        l29427 0000  
                                      l29419 1B20                                        l29363 1AC4  
                                      l29355 1AB7                                        l29339 0000  
                                      l29603 0000                                        l28629 0000  
                                      l28821 0000                                        l28805 0000  
                                      l28813 16DC                                        l28741 16AA  
                                      l28725 0000                                        l28717 0000  
                                      l19765 0000                                        l19837 0000  
                                      l29541 1BB2                                        l29533 0000  
                                      l29525 0000                                        l29517 1B98  
                                      l29509 0000                                        l29461 0000  
                                      l29445 0000                                        l29437 0000  
                                      l29365 1AC6                                        l29381 1ADC  
                                      l29357 1ABB                                        l29349 0000  
                                      l29605 0000                                        l29621 0000  
                                      l29613 0000                                        l29701 0000  
                                      l19678 0000                                        l28807 0000  
                                      l28735 0000                                        l28743 16AC  
                                      l28719 0000                                        l28727 1683  
                                      l28831 16EF                                        l28903 0000  
                                      l29551 0000                                        l29543 0000  
                                      l29535 0000                                        l29527 0000  
                                      l29519 0000                                        l29471 0000  
                                      l29463 0000                                        l29455 1B51  
                                      l29447 0000                                        l29439 0000  
                                      l29391 1AF3                                        l29367 1AC8  
                                      l29359 1ABD                                        l29607 077D  
                                      l29615 0000                                        l29631 0CCC  
                                      l29623 0000                                        l29711 0000  
                                      l29703 0E78                                        l28673 0000  
                                      l28817 0000                                        l28761 0000  
                                      l28745 1697                                        l28737 16A7  
                                      l28905 066C                                        l28913 0000  
                                      l29561 1BCA                                        l29553 0000  
                                      l29537 0000                                        l29529 0000  
                                      l29481 0000                                        l29473 1B66  
                                      l29465 0000                                        l29457 0000  
                                      l29449 1B48                                        l29393 0000  
                                      l29385 1AE6                                        l29609 079E  
                                      l29617 0000                                        l29641 0000  
                                      l29633 0000                                        l29721 0000  
                                      l29713 0000                                        l29705 0E89  
                                      l29801 0000                                        l19882 172A  
                                      l28819 0000                                        l28763 0000  
                                      l28739 0000                                        l28835 0000  
                                      l28827 0000                                        l28851 0000  
                                      l28907 0000                                        l29555 0000  
                                      l29547 1BBB                                        l29539 0000  
                                      l29491 0000                                        l29483 0000  
                                      l29475 0000                                        l29467 0000  
                                      l29459 0000                                        l29571 1BE3  
                                      l29395 1AF7                                        l29379 1ACC  
                                      l29619 0000                                        l29635 0CD2  
                                      l29627 0CC6                                        l29651 0000  
                                      l29723 0000                                        l29715 0000  
                                      l29707 0000                                        l29731 0000  
                                      l19892 0000                                        l28669 0000  
                                      l28693 0000                                        l28837 1708  
                                      l28861 0000                                        l28853 0000  
                                      l28909 0670                                        l28917 165A  
                                      l28933 0000                                        l28925 0000  
                                      l29557 0000                                        l29549 0000  
                                      l29493 1B7D                                        l29485 0000  
                                      l29469 1B60                                        l29397 0000  
                                      l29637 0000                                        l29629 0000  
                                      l29661 0000                                        l29717 0000  
                                      l29709 0E96                                        l29741 0984  
                                      l29733 0000                                        l29725 0000  
                                      l29813 10DB                                        l29805 10BE  
                                      l28599 0000                                        l28791 0000  
                                      l28759 169E                                        l28847 0000  
                                      l28839 1711                                        l28863 0000  
                                      l28855 163C                                        l28871 0000  
                                      l28919 0000                                        l28951 0000  
                                      l28935 1739                                        l28927 0000  
                                      l29575 0000                                        l29559 0000  
                                      l29495 0000                                        l29487 0000  
                                      l29479 1B6F                                        l29399 0000  
                                      l29591 0000                                        l29647 0CE8  
                                      l29639 0CD8                                        l29663 0000  
                                      l29655 0000                                        l29719 0000  
                                      l29671 0000                                        l29727 0000  
                                      l29911 0000                                        l29831 10DE  
                                      l29807 10D3                                        l29751 1090  
                                      l29743 0000                                        l28793 0000  
                                      l28785 16BE                                        l28865 0000  
                                      l28857 1640                                        l28849 0000  
                                      l28881 0000                                        l28873 063D  
                                      l28961 177D                                        l28953 1769  
                                      l28945 174C                                        l28937 0000  
                                      l29489 0000                                        l29569 1BCF  
                                      l29665 0D25                                        l29649 0000  
                                      l29681 0000                                        l29673 0000  
                                      l29737 097D                                        l29729 0000  
                                      l29921 0000                                        l29913 0000  
                                      l29841 0000                                        l29833 0000  
                                      l29809 0000                                        l29761 10A1  
                                      l29753 1094                                        l29745 1083  
                                      l28795 16CB                                        l28955 0000  
                                      l28947 0000                                        l29499 1B86  
                                      l29595 0000                                        l29659 0D1C  
                                      l29675 0000                                        l29739 0000  
                                      l29923 117C                                        l29915 1172  
                                      l29843 0000                                        l29835 10F1  
                                      l29763 10A4                                        l29755 1099  
                                      l28789 0000                                        l28877 0643  
                                      l28957 176F                                        l28981 0000  
                                      l28965 0000                                        l29597 0000  
                                      l29589 0000                                        l29693 0E6F  
                                      l29685 0000                                        l29677 0000  
                                      l29669 0000                                        l29941 1199  
                                      l29933 118B                                        l29925 117F  
                                      l29909 0000                                        l29861 0000  
                                      l29845 0000                                        l29837 0000  
                                      l29781 0000                                        l29757 0000  
                                      l29749 0000                                        l28799 16CD  
                                      l28879 0000                                        l28887 0000  
                                      l28959 0000                                        l28983 0D4F  
                                      l28975 0D39                                        l28967 0000  
                                      l28991 0000                                        l29599 0000  
                                      l29695 0000                                        l29687 0000  
                                      l29679 0000                                        l29951 11AE  
                                      l29943 119D                                        l29935 1190  
                                      l29927 1183                                        l29919 0000  
                                      l29871 0000                                        l29855 0000  
                                      l29839 0000                                        l29847 10F5  
                                      l28897 065D                                        l28889 0000  
                                      l28985 0000                                        l28977 0000  
                                      l29697 0000                                        l29689 0000  
                                      l29953 11B1                                        l29945 11A0  
                                      l29937 0000                                        l29929 0000  
                                      l29881 112D                                        l29873 0000  
                                      l29857 1105                                        l29849 0000  
                                      l29793 10AF                                        l28899 0000  
                                      l28987 0D54                                        l28995 0D66  
                                      l29963 11BD                                        l29955 0000  
                                      l29939 0000                                        l29891 1140  
                                      l29883 0000                                        l29875 0000  
                                      l29779 10A8                                        l28997 0000  
                                      l29957 0000                                        l29949 0000  
                                      l29877 0000                                        l29869 0000  
                                      l29959 0000                                        l29799 0000  
                                      l29985 11C8                                        l29995 0000  
                                      l29899 0000                                        l29997 0000  
                                      l29999 0000                                        ?_main 0070  
                            __end_of___awdiv 0C29                                        _EEPGD 0CAF  
                                      u11005 1516                                        u11015 1522  
                                      u11025 156D                                        u11063 15DA  
                                      u11073 15EB                              ___awdiv@divisor 0032  
                                      u11405 026C                                        u11415 027E  
                                      _T1CON 0018                                        u10485 1384  
                                      u11375 0217                                        _T2CON 001C  
                                      _LATB1 0869                                        _LATC0 0870  
                                      _LATB2 086A                                        _LATC1 0871  
                                      _LATC2 0872                                        _LATC3 0873  
                              _InitMotorStop 0C29                                        _LATC4 0874  
                                      u10990 0000                                        _T4CON 0417  
                                      u10995 14FC                              __end_of___ltdiv 0D5B  
                                      _T6CON 041E                              __end_of___lwdiv 0675  
                            ___awdiv@counter 0036                                        _RCREG 0199  
                           ?_ELINMIntHandler 0070                                        _SENDB 0CF3  
                                      _RCSTA 019D                                        _TMR1H 0017  
                                      _TMR1L 0016                                        _SPBRG 019B  
                          _ui8_BlankingCount 00DB                            EnableMCP201@_dcnt 002C  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E                                        _TXREG 019A  
                                      _TXSTA 019E                          ___lmul@multiplicand 0030  
                          _ui16_PWM_Freq_mat 012D                       ?__ELINMIntCalcIDParity 0070  
                                      _cksum 0775                         ?__ELINMIntGetPointer 002C  
   BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00C7                             __end_of_PWM_CTRL 0835  
               ?_Cb56_UbatHandling_node_fcn2 0070                             __end_ofi1___wmul 1DEF  
          BVH2_Appl_Layer@Cb24_oMotorStalled 0138                                        status 0003  
                           __end_of_DiagInit 096C                          i1___wmul@multiplier 0070  
                                      wtemp0 007E                           __size_of_PWMReadDC 003E  
             ??_Cb34_PWM_Detection_node_fcn1 002C                           __size_ofi1___lwdiv 0025  
                        __size_ofi1_ADC_Read 0012                          __size_ofi1_ADC_Wait 0019  
                         _ui8_b_DResServID_c 015E                             _ui8_selected_lid 0054  
                BVH2_Appl_Layer@Cb19_Counter 01C0                  BVH2_Appl_Layer@Cb51_Counter 013A  
                             _NegativeAnswer 0765                                  _system_init 0856  
                         _ui8_duty_cycle_mat 00E4                                 __end_of_main 0BE9  
                             ??_InitMotorRun 003E                              _PWM_trans_table 002D  
                        __ELINMIntInitialize 08EC                         __size_of_clear_timer 0021  
                             ?_InitMotorStop 0070                                       ??_main 0044  
                       __size_of_FILTER_Init 0018                         __size_of_FILTER_Ubat 0064  
                       __size_of_FILTER_Temp 0024                            ?_read_eeprom_data 0070  
                              ?_Receive_Diag 0070                         _interrupt_PWMCapture 07A3  
                          ?_Get_Analog_Value 0070                 __end_of__ELINMIntSendMessage 0EA5  
                _ui16_NTC_Temp_bldc_mean_cal 01D8                           ??_read_eeprom_data 002C  
                              _PWM_Write_Out 0675                                       _ADCON0 009D  
                         ??_Get_Analog_Value 0038                                       _ADCON1 009E  
                                     ?_cksum 002C                        ??__ELINMIntGetPointer 002D  
                       ?__ELINMIntInitialize 0070                                       _CCP1AS 0295  
                                     _CCP1IE 048A                                       _CCP1IF 008A  
                                     _CCP2IE 0490                                       _CCP2IF 0090  
                                     _CCP3IE 049C                                       _CCP3IF 009C  
                                     _CCP4IE 049D                                       _CCP4IF 009D  
                                     _CCP5IE 049E                                       _CCP5IF 009E  
                                     _ADRESH 009C                                       _EEADRH 0192  
                                     _ADRESL 009B                                       _EEADRL 0191  
                                     _EEDATA 0193                                       _CCPR1H 0292  
                                     _CCPR2H 0299                                       _EEDATH 0194  
                                     _CCPR3H 0312                                       _CCPR1L 0291  
                                     _CCPR4H 0319                                       _CCPR2L 0298  
                                     _EEDATL 0193                                       _CCPR5H 031D  
                                     _CCPR3L 0311                                       _CCPR4L 0318  
                                     _CCPR5L 031C                                       _EECON1 0195  
                                     _EECON2 0196                             ___awdiv@dividend 0034  
                                  ADC_Read@i 002E                                       _ANSELA 018C  
                                     _ANSELB 018D                             ?_interrrupt_bldc 0070  
                              ?_SetDiagAlarm 0070                                       i1l1861 0000  
                                     i1l1854 0000                                       i1l1857 1DC9  
                                     i1l3801 1D55                                       i1l3850 1D9B  
                                     i1l3818 1CB0                                       i1l3908 0000  
                                     i1l3861 1EC8                                       i1l3787 0000  
                                     i1l3797 1C36                                       i1l3879 1EFE  
                            _ui8_PWM_FreqCnt 00DD                                       _INTCON 000B  
                                     _FVRCON 0117                           _ui8_Task_Cont100ms 00E1  
          __ELINMIntReceiveMessage@_ELINM_id 0037                                       _OSCCON 0099  
              ??_Cb56_UbatHandling_node_fcn2 002C                                       u923_25 1E75  
                                     u924_25 1E83                                       _TMR0IE 005D  
                                     _TMR1IE 0488                                       _TMR1IF 0088  
                                     u845_25 1C88                                       _TMR2IE 0489  
                                     _TMR2IF 0089                                       u838_25 1C16  
                                     _TMR4IE 0499                                       _TMR4IF 0099  
                                     _SPBRGH 019C                                       _TMR6IE 049B  
                                     _TMR6IF 009B                                       u944_25 1FEE  
                                     _WDTCON 0097         BVH2_Appl_Layer@Sb1_Logical_Operator1 023B  
       BVH2_Appl_Layer@Sb1_Logical_Operator2 0228         BVH2_Appl_Layer@Sb1_Logical_Operator3 0234  
       BVH2_Appl_Layer@Sb1_Logical_Operator5 0235                       __end_of_NegativeAnswer 0775  
                                  ??_Task1ms 0070                                   _MotorFlags 004B  
 BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C                       __ELINMIntMessageBuffer 0254  
                                     ___lmul 164C                                    ??___aldiv 0034  
                                     ___tmul 0D5B                                       ___wmul 063B  
                                  ??___awdiv 0036                    BVH2_Appl_Layer@Sb4_PI_sum 023E  
                                  ??___ltdiv 003B                                    ??___lwdiv 0030  
                            _ui8_PWMinDC_sav 00DF                             ___awdiv@quotient 0038  
                                     _my_msg 01B0                            _write_eeprom_data 05E0  
          BVH2_Appl_Layer@Cb24_oStalledAlarm 0139                                       clrloop 081D  
                          __end_of_PWMReadDC 0D29                               ??_Receive_Diag 003A  
                          __end_ofi1___lwdiv 1FFE                           EOL@ui8_b_DResB0_RD 0234  
                         EOL@ui8_b_DResB1_RD 0235                           EOL@ui8_b_DResB2_RD 0236  
                         EOL@ui8_b_DResB3_RD 0237                        ?_interrupt_PWMCapture 0070  
                         EOL@ui8_b_DResB4_RD 0233                           EOL@ui8_b_DResB5_RD 0232  
                         ?_write_eeprom_data 0033                        __size_of_EnableMCP201 001B  
                                  ?_ADC_Init 0070                                    ?_ADC_Read 002C  
                                  ?_ADC_Wait 0070                               ?_PWM_Write_Out 0070  
                                  ?_BLDCWait 0070                     __size_of_BVH2_Appl_Layer 0599  
                      ??__ELINMIntInitialize 002C                               ??_SetDiagAlarm 002D  
                        ??_write_eeprom_data 0034             __size_of__ELINMIntReceiveMessage 0014  
           BVH2_Appl_Layer@Cb9_oCurrentAlarm 013E                        __end_of_FILTER_IPhase 0E1A  
                   ??__ELINMIntResetProtocol 0070                              ?_NegativeAnswer 0070  
                        _ui8_duty_cycle_BLDC 0050                               __pcstackCOMMON 0070  
                            _ui8_PWMoutvalue 0155                                 __pidataBANK0 0000  
                               __pidataBANK1 0000                                 __pidataBANK2 0000  
                         _ui16_dryRun_Thresh 01EE                                __end_of_cksum 07A3  
                               _EnableMCP201 08D1                              ??_InitMotorStop 002C  
       __size_of_Cb56_UbatHandling_node_fcn2 0036       __ELINMIntGetPointer@_ELINMInt_position 002C  
                  __end_of_write_eeprom_data 05F8              __ELINMIntSendMessage@_ELINM_chk 0034  
            __ELINMIntSendMessage@_ELINM_idr 0032              __ELINMIntSendMessage@_ELINM_tid 0033  
                                  ?_PWM_CTRL 0070                                 ??i1_ADC_Read 0072  
                                  ?i1___wmul 0070                                 ??i1_ADC_Wait 0070  
                                  ?_DiagInit 0070                        Transmit_LIN_8Bytes@B0 0037  
                      Transmit_LIN_8Bytes@B1 0038                        Transmit_LIN_8Bytes@B2 0039  
                      Transmit_LIN_8Bytes@B3 003A                        Transmit_LIN_8Bytes@B4 003B  
                      Transmit_LIN_8Bytes@B5 003C                        Transmit_LIN_8Bytes@B6 003D  
                      Transmit_LIN_8Bytes@B7 003E                        Transmit_LIN_8Bytes@ID 003F  
                          _Cb1_oCurrentAlarm 0140                                   ??_ADC_Init 002C  
                                 ??_ADC_Read 002E                                   ??_ADC_Wait 002C  
                      _ui16_Speed_demand_mat 01DC                                   ??_BLDCWait 0070  
                __end_of_Oscill_Source_Block 090A                    __size_of_PWM_Capture_init 0056  
                       __ELINMIntMessageSize 00D0                           _ui16_Duty_Cycle_In 01EA  
                                    ??_cksum 002E             write_eeprom_data@ui8_adress_data 0033  
                               _analog_value 00A8                  __end_of_Transmit_LIN_8Bytes 063B  
                       __end_of_InitMotorRun 0D9A                           __size_of_commutate 01DA  
                                 __pbssBANK0 0048                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01A0  
                                 __pbssBANK4 0240                      _ui8_Duty_Cycle_In_Ratio 0152  
                      _BVH2_Appl_Layer$20280 022C                        _BVH2_Appl_Layer$20281 022D  
                      _BVH2_Appl_Layer$20282 022E                        _BVH2_Appl_Layer$20277 0229  
                      _BVH2_Appl_Layer$20285 0224                        _BVH2_Appl_Layer$20278 022A  
                      _BVH2_Appl_Layer$20279 022B                        _BVH2_Appl_Layer$20287 0226  
                      _BVH2_Appl_Layer$20288 0220                           __size_of_init_bldc 0023  
                       _bool_ControlLoopMode 00D4                           __end_ofi1_ADC_Read 1DDA  
                         __end_ofi1_ADC_Wait 1DC8                                   __pmaintext 0AAC  
                       __ELINMIntSendMessage 0E3E                                      ?___lmul 002C  
                            _Cb34_oPWM_Alarm 0142                                      ?___tmul 002C  
                                    ?___wmul 002C                                 ?i1_commutate 0070  
                                 __pintentry 0004                                      _CM1CON0 0111  
                                    _CM1CON1 0112                                      _CCP1ASE 14AF  
                                    _CCP1CON 0293                                      _CCP2CON 029A  
                                    _CCP3CON 0313                                      _CCP4CON 031A  
    __end_of_Cb1_Current_An___High_node_fcn1 164C     __size_of_Cb1_Current_An___High_node_fcn1 001C  
          ??_Cb1_Current_An___High_node_fcn1 002C             ?_Cb1_Current_An___High_node_fcn1 0070  
            _Cb1_Current_An___High_node_fcn1 1630                                      _CCP5CON 031E  
                                    i1S31601 00A6                                      i1S31605 00BA  
                      _bool_CPU_TempRedAlarm 014C                                   __ptext2030 00DE  
                                 __ptext2031 0D9A                                   __ptext2040 088F  
                                 __ptext2032 0765                                   __ptext2041 096C  
                                 __ptext2033 0ECB                                   __ptext2050 0D5B  
                                 __ptext2042 0E3E                                   __ptext2034 09A4  
                                 __ptext2051 0D29                                   __ptext2043 0CEB  
                                 __ptext2035 0DEA                                   __ptext2060 161B  
                                 __ptext2052 171A                                   __ptext2044 0CC1  
                                 __ptext2036 05F8                                   __ptext2061 0C37  
                                 __ptext2053 0BE9                                   __ptext2045 0960  
                                 __ptext2037 0D78                                   __ptext2029 0856  
                                 __ptext2070 0675                                   __ptext2062 090A  
                                 __ptext2054 164C                                   __ptext2046 0775  
                                 __ptext2038 098C                                   __ptext2071 0C29  
                                 __ptext2063 0904                                   __ptext2055 0650  
                                 __ptext2047 1A0F                                   __ptext2039 1082  
                                    _BAUDCON 019F                                   __ptext2080 1DAF  
                                 __ptext2072 0E1A                                   __ptext2064 0EA5  
                                 __ptext2056 063B                                   __ptext2048 0C58  
                                 __ptext2081 0F07                                   __ptext2073 0DFE  
                                 __ptext2065 08EC                                   __ptext2057 1630  
                                 __ptext2049 0A38                                   __ptext2090 0000  
                                 __ptext2082 0835                                   __ptext2074 0C5D  
                                 __ptext2066 08D1                                   __ptext2058 16E4  
                                 __ptext2083 1FD9                                   __ptext2075 0A51  
                                 __ptext2067 067A                                   __ptext2059 1671  
                                 __ptext2084 1DDA                                   __ptext2076 08C8  
                                 __ptext2068 05E0                                   __ptext2085 1DC8  
                                 __ptext2069 05D5                                   __ptext2086 0FE4  
                                 __ptext2078 1C0A                                   __ptext2087 07A3  
                                 __ptext2079 1DEF                                   __ptext2088 0822  
                                 __ptext2089 0819                               ___lmul@product 0034  
                                 ??_PWM_CTRL 0070                                   ??i1___wmul 0074  
                     ??_interrupt_PWMCapture 0070                                   _ui8_Ki_mat 01E6  
                            ??_PWM_Write_Out 002C                                   _ui8_Kp_mat 0153  
                                    i1l11461 0000                                      i1l13430 0F60  
                                    i1l13440 0F5D                                      i1l13424 0F25  
                                    i1l13419 0000                                      i1l13451 0FCA  
                                    i1l13427 0F23                                      i1l13454 0F9A  
                                    i1l13438 0F56                                      i1l25001 0000  
                                    i1l13466 0FE1                                      i1l13459 0FB7  
                                    i1l25101 0F67                                      i1l25111 0000  
                                    i1l25103 0F69                                      i1l25041 0000  
                                    i1l25121 0F86                                      i1l25105 0000  
                                    i1l25043 082C                                      i1l25035 0000  
                                    i1l25107 0000                                      i1l25115 0F7E  
                                    i1l25123 0F89                                      i1l31603 1EAD  
                                    i1l25037 0000                                      i1l25141 0FAE  
                                    i1l25117 0000                                      i1l25109 0000  
                                    i1l25135 0FA4                                      i1l25119 0000  
                                    i1l25047 0000                                      i1l25161 07AC  
                                    i1l25137 0FA6                                      i1l25081 0F43  
                                    i1l25163 0000                                      i1l25171 07E8  
                                    i1l25147 0FC1                                      i1l25091 0F53  
                                    i1l25083 0000                                      i1l25075 0000  
                                    i1l25067 0000                                      i1l25059 0000  
                                    i1l25157 0000                                      i1l25149 0FC3  
                                    i1l25085 0000                                      i1l25077 0F3B  
                                    i1l25069 0F30                                      i1l25167 07E6  
                                    i1l25159 0000                                      i1l25095 0000  
                                    i1l25087 0000                                      i1l17353 07A4  
                                    i1l25097 0000                                      i1l25089 0000  
                                    i1l25195 0000                                      i1l17356 07BA  
                                    i1l25197 0000                                      i1l25199 0000  
                                    i1l29003 0000                                   ??_DiagInit 002D  
                                    i1l29013 1DD1                                      i1l29005 0000  
                                    i1l29101 0000                                      i1l29021 1DFA  
                                    i1l29111 1EFC                                      i1l29031 0000  
                                    i1l29023 0000                                      i1l29009 0000  
                                    i1l29201 0000                                      i1l29113 0000  
                                    i1l29105 1EF2                                      i1l29041 0000  
                                    i1l29033 0000                                      i1l29025 0000  
                                    i1l29017 0000                                      i1l28401 0000  
                                    i1l29211 0000                                      i1l29203 0000  
                                    i1l29131 0000                                      i1l29123 1F13  
                                    i1l29107 0000                                      i1l29051 1E98  
                                    i1l29043 0000                                      i1l29035 0000  
                                    i1l29027 0000                                      i1l28411 0000  
                                    i1l28403 0000                                      i1l19700 0000  
                                    i1l29221 0000                                      i1l29205 0000  
                                    i1l29141 1F25                                      i1l29133 0000  
                                    i1l29125 0000                                      i1l29117 1F09  
                                    i1l29053 1E9D                                      i1l29037 0000  
                                    i1l29029 0000                                      i1l28501 1CC0  
                                    i1l28413 0000                                      i1l28405 0000  
                                    i1l29231 0000                                      i1l29223 0000  
                                    i1l29215 1F83                                      i1l29207 0000  
                                    i1l29151 0000                                      i1l29143 0000  
                                    i1l29135 0000                                      i1l29127 0000  
                                    i1l29119 0000                                      i1l29055 1E9F  
                                    i1l29071 1EA7                                      i1l29047 1E92  
                                    i1l28511 1CF8                                      i1l28431 0000  
                                    i1l28423 1C6C                                      i1l28415 0000  
                                    i1l28407 0000                                      i1l28351 0000  
                                    i1l29313 0000                                      i1l29241 0000  
                                    i1l29233 1F95                                      i1l29225 0000  
                                    i1l29217 0000                                      i1l29209 1F79  
                                    i1l29161 1F3E                                      i1l29153 0000  
                                    i1l29137 0000                                      i1l29129 0000  
                                    i1l29057 1EA1                                      i1l29073 1EB7  
                                    i1l29049 1E96                                      i1l28513 1CFC  
                                    i1l28505 1CDA                                      i1l28521 1D21  
                                    i1l28441 0000                                      i1l28425 0000  
                                    i1l28417 0000                                      i1l28409 0000  
                                    i1l28361 1C24                                      i1l28353 0000  
                                    i1l29315 1FF5                                      i1l29307 1FE6  
                                    i1l29251 0000                                      i1l29243 0000  
                                    i1l29235 0000                                      i1l29227 0000  
                                    i1l29219 0000                                      i1l29171 1F4E  
                                    i1l29163 0000                                      i1l29155 0000  
                                    i1l29147 1F2F                                      i1l29139 0000  
                                    i1l29091 0000                                      i1l29083 1ECE  
                                    i1l29059 1EA3                                      i1l28531 1D3A  
                                    i1l28507 1CDE                                      i1l28443 1C94  
                                    i1l28435 1C8A                                      i1l28427 0000  
                                    i1l28371 1C39                                      i1l29317 0000  
                                    i1l29309 0000                                      i1l28349 0000  
                                    i1l29253 1FB0                                      i1l29245 0000  
                                    i1l29229 0000                                      i1l29181 0000  
                                    i1l29173 0000                                      i1l29165 1F44  
                                    i1l29157 0000                                      i1l29149 0000  
                                    i1l29261 1FB5                                      i1l29085 0000  
                                    i1l29077 1EC1                                      i1l28541 0000  
                                    i1l28533 0000                                      i1l28517 1D16  
                                    i1l28525 1D2D                                      i1l28461 1C9D  
                                    i1l28437 0000                                      i1l28381 1C4E  
                                    i1l28373 0000                                      i1l28365 1C2E  
                                    i1l28357 1C1A                                      i1l29319 1FF9  
                                    i1l29247 0000                                      i1l29239 1F9F  
                                    i1l29191 1F67                                      i1l29183 0000  
                                    i1l29175 0000                                      i1l29167 0000  
                                    i1l29159 0000                                      i1l29263 1FC9  
                                    i1l29087 1ED3                                      i1l28535 0000  
                                    i1l28519 1D18                                      i1l28471 0000  
                                    i1l28463 0000                                      i1l28439 0000  
                                    i1l28391 0000                                      i1l28383 1C51  
                                    i1l28375 0000                                      i1l28367 0000  
                                    i1l29281 0000                                      i1l29249 0000  
                                    i1l29193 0000                                      i1l29185 1F5D  
                                    i1l29177 0000                                      i1l29089 0000  
                                    i1l28561 1D6C                                      i1l28553 0000  
                                    i1l28529 0000                                      i1l28473 0000  
                                    i1l28465 0000                                      i1l28393 0000  
                                    i1l28385 0000                                      i1l28377 0000  
                                    i1l19690 0000                                      i1l29291 0000  
                                    i1l29283 1DDC                                      i1l29267 0000  
                                    i1l29195 0000                                      i1l29187 0000  
                                    i1l29179 0000                                      i1l28571 1D88  
                                    i1l28563 1D7D                                      i1l28555 0000  
                                    i1l28539 0000                                      i1l28475 1CAB  
                                    i1l28395 0000                                      i1l28387 0000  
                                    i1l28547 1D48                                      i1l28651 0000  
                                    i1l28643 0000                                      i1l29197 0000  
                                    i1l28581 0000                                      i1l28573 1D89  
                                    i1l28477 0000                                      i1l28469 0000  
                                    i1l28397 0000                                      i1l28389 0000  
                                    i1l28653 0018                                      i1l28645 0000  
                                    i1l28637 0000                                      i1l29287 1DE2  
                                    i1l29199 0000                                      i1l28591 1DA8  
                                    i1l28567 1D81                                      i1l28575 1D8D  
                                    i1l28495 1CB6                                      i1l28487 0000  
                                    i1l28399 0000                                      i1l28663 0000  
                                    i1l28647 0011                                      i1l29289 0000  
                                    i1l29297 0000                                      i1l28593 1DAD  
                                    i1l28577 1D8F                                      i1l28497 0000  
                                    i1l28489 0000                                      i1l28665 0025  
                                    i1l28657 0000                                      i1l29299 0000  
                                    i1l28659 001F                      ??__ELINMIntCalcIDParity 002C  
                                    _PWM1CON 0294                                   _comm_state 00D9  
                                 __stringtab 002C                  BVH2_Appl_Layer@Cb9_StateCnt 00C3  
                          ??_BVH2_Appl_Layer 003A                    _ui16_Speed_demand_mat_Max 01DE  
                  _ui16_Speed_demand_mat_min 01E0              __size_of__ELINMIntResetProtocol 000F  
                                    _Task1ms 0819                         __end_of_Receive_Diag 0DEA  
                      ?__ELINMIntSendMessage 002D                                 ?_system_init 0070  
                                    ___aldiv 171A                      BVH2_Appl_Layer@Sb3_Sum1 023C  
                                    ___awdiv 0BE9                              __size_of___lmul 0025  
                            __size_of___tmul 001D                              __size_of___wmul 0015  
                                    ___ltdiv 0D29                                      ___lwdiv 0650  
                       __end_of_SetDiagAlarm 0CEB                            __end_of_commutate 1BE9  
                 __size_of_write_eeprom_data 0018                                 _ui8_CompFlag 0151  
                                 _init_ports 096C                          _phase_delay_counter 01D0  
                                    _filter1 01CA                                      _filter3 01CC  
                               __size_of_EOL 04F7                            i1___lwdiv@divisor 0070  
                          __end_of_init_bldc 0EEE                            i1___lwdiv@counter 0074  
                              _ui16_Temp_cal 01E2                             ___aldiv@dividend 0030  
                 BVH2_Appl_Layer@Sb2_Switch2 0239                   BVH2_Appl_Layer@Sb2_Switch5 0231  
                             __ELINMIntRXCRC 01C4                      __ELINMIntReceiveMessage 0DEA  
                                    _wkpoint 00EE                         end_of_initialization 0AAA  
                             __ELINMIntSpace 014B                     __size_of_ELINMIntHandler 00DD  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00C6         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A2  
                     __ELINMIntRXMessageSize 014A                         _ui16_fir_IPhase_mean 0131  
                  __size_of_read_eeprom_data 000B                    __size_of_Get_Analog_Value 0005  
                           ___ltdiv@dividend 0038                                ??_clear_timer 002C  
                           ___aldiv@quotient 0036              read_eeprom_data@ui8_adress_data 002D  
                      i1___wmul@multiplicand 0072                                ??_FILTER_Init 002F  
                              ??_FILTER_Ubat 002C                                ??_FILTER_Temp 002C  
                       _Cb56_odFixedValueSel 00C9                                   _timer_init 088F  
             PWM_Write_Out@ui8_DutyCycle_Out 002C                        _ui16_IPhase1_bldc_cal 0161  
                __end_of__ELINMIntGetPointer 067D                       __ELINMIntResetProtocol 0FE4  
                      _ui16_IPhase2_bldc_cal 0163                        __size_of_InitMotorRun 0022  
                        _ui16_Current_Thresh 01EC                            NegativeAnswer@LID 0040  
                           _PWM_Capture_init 090A                             ___ltdiv@quotient 003B  
                                  _PWMReadDC 0CEB                        _ui16_IPhase3_bldc_cal 0165  
                          __size_of_ADC_Init 0009                            __size_of_ADC_Read 0018  
                              _ui16_step_cnt 00BE                                    i1___lwdiv 1FD9  
                          __size_of_ADC_Wait 0019                            __size_of_BLDCWait 0021  
                                 _windowPtr1 00E7                             _ui8_BattVolt_mat 00C0  
                           ??_NegativeAnswer 0040         BVH2_Appl_Layer@Sb2_Logical_Operator2 0236  
                     ??__ELINMIntSendMessage 0032                     __size_of_interrrupt_bldc 01A5  
                          __ELINMIntReadBack 00D1                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 0D78                               __end_of___lmul 1671  
                     _ui16_phase_advancement 00BA                               __end_of___tmul 0D78  
                             __end_of___wmul 0650                                  ?_init_ports 0070  
                       __size_ofi1_commutate 01E0                          __end_of_clear_timer 0C58  
                              __pbitbssBANK0 0298                  __end_of__ELINMIntInitialize 0904  
                          __size_of_PWM_CTRL 0013                                  i1ADC_Read@i 0072  
           __ELINMIntSendMessage@_ELINM_fmax 0030             __ELINMIntSendMessage@_ELINM_fmin 002E  
                        start_initialization 0A69                            __size_ofi1___wmul 0015  
                  ??__ELINMIntReceiveMessage 0039             __ELINMIntSendMessage@_ELINM_size 002D  
                                __end_of_EOL 05D5                          __end_of_FILTER_Init 09A4  
                        __end_of_FILTER_Ubat 0CC1                          __end_of_FILTER_Temp 0E3E  
                          __size_of_DiagInit 000C                                   ?_PWMReadDC 0070  
                                  _ErrorCode 00CA                                   ?i1___lwdiv 0070  
        __end_of_Cb56_UbatHandling_node_fcn2 171A                  _Cb56_UbatHandling_node_fcn2 16E4  
                             _ui8_IPhase_sel 00DC                                 _Cb1_StateCnt 00A4  
                      __size_of_Receive_Diag 0050                               Receive_Diag@id 003B  
                          ??_ELINMIntHandler 0071                        __size_of_SetDiagAlarm 002A  
                    _ui16_NTC_Temp_bldc_mean 012B                               _ui8_PWM_dc_mat 00DE  
                                   ??___lmul 0034                                     ??___tmul 0032  
                                   ??___wmul 0030                                  __pdataBANK0 0054  
                                __pdataBANK1 00E8                                  __pdataBANK2 0167  
                 read_eeprom_data@ui8_adress 002C                         __size_of_system_init 0039  
                               _Cb1_oShutoff 0141                                  ?_timer_init 0070  
                             ___tmul@product 0032                        __end_of_InitMotorStop 0C37  
                                   EOL@_dcnt 0220                       __size_of_FILTER_IPhase 001C  
                            _ui8_Pulse_State 0156                              _BVH2_Appl_Layer 1082  
                               _Receive_Diag 0D9A                                __pcstackBANK0 0020  
                              __pcstackBANK4 0220               __size_of__ELINMIntCalcIDParity 0026  
              __end_of__ELINMIntCalcIDParity 0ECB                            _bool_MotorStalled 00D7  
                               _SetDiagAlarm 0CC1                 __size_of_Oscill_Source_Block 0006  
                        __size_of_init_ports 0020                             _read_eeprom_data 05D5  
                                  __pnvBANK1 00EF                                    __pnvBANK3 01EC  
             BVH2_Appl_Layer@Cb51_oTempAlarm 013B                             _Get_Analog_Value 0C58  
               __size_of_Transmit_LIN_8Bytes 0043                                     ?_Task1ms 0070  
                           ___lwdiv@dividend 002E                                  _clear_timer 0C37  
                                   ?___aldiv 002C                __ELINMIntSendMessage@_ELINM_i 0036  
                                   ?___awdiv 0032                                     ?___ltdiv 0035  
                                   ?___lwdiv 002C                        _bool_HighCurrentAlarm 00D6  
                       clear_timer@ui8_TmrNb 002C                            ??_interrrupt_bldc 0077  
              _SIBFS_Current_Analysis_High_b 00CB                               _ui8_UPhase_sel 00E3  
                             _bool_UbatAlarm 014F                                  _FILTER_Init 098C  
                                  __pstrings 002C                                  _FILTER_Ubat 0C5D  
                                _FILTER_Temp 0E1A                                    _comm_time 0048  
                                  __pswtext1 00CE                                    __pswtext2 0092  
                                  __pswtext3 00A6                                    __pswtext4 00BA  
                         _Cb34_oPWM_SC_Alarm 0143                            _interrupt_handler 0004  
                                  _ict_stamp 016D                              _ui16_Ubemf_bldc 00B4  
                                  _commutate 1A0F                        _SIBFS_PWM_Detection_b 00CC  
                __ELINMIntResetProtocol@code 0070                                     _ADC_Init 08C8  
                                   _ADC_Read 0A51                __size_of_interrupt_PWMCapture 0052  
                       _bool_DryRunningAlarm 00D5                                     _ADC_Wait 0A38  
                         ?_interrupt_handler 0070                        __end_of_PWM_Write_Out 067A  
                                   _BLDCWait 0835                                  ??_PWMReadDC 003F  
                          _I_calibrationInit 09A4                             ___lwdiv@quotient 0031  
                                ??i1___lwdiv 0074                                    _init_bldc 0ECB  
                             __size_of_cksum 002E      BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 00C5  
                         ?_I_calibrationInit 0070                          ??_interrupt_handler 007D  
                      _Cb56_oUbat_Alarm_High 0148                              ___aldiv@divisor 002C  
                            ___aldiv@counter 0034                               ___wmul@product 0030  
                        __size_of_timer_init 0039                                _FILTER_IPhase 0DFE  
          __ELINMIntGetPointer@_ELINMInt_tag 002D                          ??_I_calibrationInit 002F  
                            ___ltdiv@divisor 0035                               _Cb34_odPumpOff 0146  
                            ___ltdiv@counter 003E                                     _GO_nDONE 04E9  
                   __end_of_PWM_Capture_init 0960                                  _ui8_failure 016E  
                                   _PSTR1CON 0296                      ?__ELINMIntResetProtocol 0070  
                  __end_of_interrupt_handler 0029                      __end_of_BVH2_Appl_Layer 161B  
                                   _PWM_CTRL 0822                               _ui8_b_DResB0_c 004E  
                             _ui8_b_DResB1_c 015A                               _ui8_b_DResB2_c 015B  
                             _ui8_b_DResB3_c 015C                               _ui8_b_DResB4_c 015D  
                          ___wmul@multiplier 002C                                     i1___wmul 1DDA  
                                 ?_commutate 0070                                    cksum@addr 0032  
                    interrrupt_bldc@ui32_tmp 0079                                     _DiagInit 0960  
                  __end_of_I_calibrationInit 0A38                          ___tmul@multiplicand 002F  
                        _ui16_fir_Bat_mittel 012F                    _ui8_fixed_start_speed_mat 01E8  
                      __ELINMIntSleepTimeout 0250                                   ?_init_bldc 0070  
                          ___lmul@multiplier 002C                               _ui16_Capt_Val0 00AA  
                             _ui16_Capt_Val1 00AC                               _ui16_Capt_Val2 00AE  
                             _ui16_I_cal_Ph1 00E8                               _ui16_I_cal_Ph2 00EA  
                             _ui16_I_cal_Ph3 00EC                             __ELINMIntStatus1 00D2  
                             ?_FILTER_IPhase 0070                           _bool_CPU_TempAlarm 00D3  
                           _ui16_mat_Current 00B8                             __size_of_Task1ms 0003  
                       _SIBFS_UbatHandling_b 00CE                      _Cb34_odFixedLowValueSel 0144  
             __end_of__ELINMIntResetProtocol 0FF3                                ?_EnableMCP201 0070  
                   BVH2_Appl_Layer@Sb2_Error 0237                             __size_of___aldiv 006C  
                           __size_of___awdiv 0040                BVH2_Appl_Layer@Cb19_oDryRun55 0135  
              BVH2_Appl_Layer@Cb19_oDryRun66 0136                             __size_of___ltdiv 0032  
                           __size_of___lwdiv 0025                                 ??_init_ports 002E  
                          _ui8_lastTaskvalue 015F                             _ui16_mat_inpTemp 01E4  
                             _ui8_StartupPWM 00E0                         _bool_PWMin_err_Alarm 014E  
              __ELINMIntMessageBufferPointer 00CF                                     _checksum 01B8  
                         _Cb1_RestartCounter 013F             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00C2  
                         _ui16_NTC_Temp_bldc 01D6                              ___lwdiv@divisor 002C  
                             _Cb56_odPumpOff 0149                              ___lwdiv@counter 0030  
                            _ELINMIntHandler 0F07                 __size_of__ELINMIntGetPointer 0003  
                             _ui16_Ubat_bldc 0051                      _bool_mat_currAlarm_bldc 00D8  
               BVH2_Appl_Layer@Cb14_StateCnt 01BE                                _Cb44_StateCnt 00A6  
                         i1___lwdiv@dividend 0072                BVH2_Appl_Layer@Cb51_odPumpOff 013D  
                              __size_of_main 013D                                   _Cb34_idPWM 004A  
                                   _phaseCal 00DA                           __end_of_init_ports 098C  
                                _inputArray1 0240                               _ui16_Speed_mat 00B2  
               BVH2_Appl_Layer@Cb24_StateCnt 00A0                                     clear_ram 081C  
              __size_of__ELINMIntSendMessage 0067                                ??i1_commutate 0020  
                             ??_EnableMCP201 002C            BVH2_Appl_Layer@Cb51_oTempRedAlarm 013C  
                              _ui8_Ubemf_sel 0159                                _Cb44_oShutoff 0147  
                 __size_of_interrupt_handler 0025                                     cksum@sum 0030  
                           ?_BVH2_Appl_Layer 0070                                 ??_timer_init 002D  
                        _Oscill_Source_Block 0904                           i1___lwdiv@quotient 0075  
                                 i1_ADC_Read 1DC8                                   i1_ADC_Wait 1DAF  
                                ??_commutate 0032                              __ELINMIntStatus 004C  
                   __end_of_read_eeprom_data 05E0                     __end_of_Get_Analog_Value 0C5D  
                        _Transmit_LIN_8Bytes 05F8                   __size_of_I_calibrationInit 0094  
                           _ui8_given_supply 00E6      __end_of_Cb44_Pic_etat_monitor_node_fcn1 1630  
   __size_of_Cb44_Pic_etat_monitor_node_fcn1 0015            ??_Cb44_Pic_etat_monitor_node_fcn1 002C  
           ?_Cb44_Pic_etat_monitor_node_fcn1 0070              _Cb44_Pic_etat_monitor_node_fcn1 161B  
       __end_of_Cb34_PWM_Detection_node_fcn1 16E4        __size_of_Cb34_PWM_Detection_node_fcn1 0073  
               _Cb34_PWM_Detection_node_fcn1 1671                                  ??_init_bldc 003E  
               __size_of__ELINMIntInitialize 0018                                     intlevel1 0000  
        __ELINMIntReceiveMessage@_ELINM_size 0038                             _rising_bemf_flag 0298  
                            ??_FILTER_IPhase 002C                    _bool_PWMin_Freq_err_Alarm 014D  
                write_eeprom_data@ui8_adress 0034                         ?_Oscill_Source_Block 0070  
                            _interrrupt_bldc 1C0A                           __end_of_timer_init 08C8  
                       ?_Transmit_LIN_8Bytes 0037                                 ?_clear_timer 0070  
                      _bool_start_demand_mat 0150                                ??_system_init 003E  
                          _ui8_PWMin_failCnt 0154                   PWM_Capture_init@ui8_CCP_Nb 002C  
                    __size_of_NegativeAnswer 0010                            ___tmul@multiplier 002C  
                               ?_FILTER_Init 0070                      EnableMCP201@_dcnt_15776 002D  
                    EnableMCP201@_dcnt_15777 002E                                 ?_FILTER_Ubat 0070  
                               ?_FILTER_Temp 0070                     ?__ELINMIntReceiveMessage 0037  
                                 _OPTION_REG 0095                      __end_of_ELINMIntHandler 0FE4  
         __ELINMIntReceiveMessage@_ELINM_tag 0039                          __end_ofi1_commutate 1FCF  
                               ___aldiv@sign 0035  BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016B  
              ?_Cb34_PWM_Detection_node_fcn1 0070                        __ELINMIntCalcIDParity 0EA5  
         BVH2_Appl_Layer@Cb24_RestartCounter 0137                        ??_Oscill_Source_Block 002C  
                       _Cb34_odFixedValueSel 0145             __ELINMIntCalcIDParity@ELINM_idtr 002C  
                            _ui8_error_Flags 00E5                              _ui8_current_cal 0120  
                      ??_Transmit_LIN_8Bytes 003F                       __size_of_InitMotorStop 000E  
               __end_of_interrupt_PWMCapture 07F5                               _ui16_speed_fil 00BC  
                             _ui16_speed_rar 0133                                _filterTempNTC 01CE  
