

Microchip Technology PIC PRO Macro Assembler V1.44 build -154322312 
                                                                                               Tue Sep 25 13:34:32 2018

Microchip Technology Omniscient Code Generator v1.44 (PRO mode) build 201709140600
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	text24,local,class=CODE,merge=1,delta=2
    28                           	psect	text41,local,class=CODE,merge=1,delta=2
    29                           	psect	swtext2,local,class=CONST,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	swtext3,local,class=CONST,delta=2
    32                           	psect	swtext4,local,class=CONST,delta=2
    33                           	psect	text58,local,class=CODE,merge=1,delta=2
    34                           	psect	text59,local,class=CODE,merge=1,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.44
    39                           ; Generated 14/09/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F1936 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0090                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  0110                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0115                     	;# 
   129  0116                     	;# 
   130  0117                     	;# 
   131  0118                     	;# 
   132  0119                     	;# 
   133  011A                     	;# 
   134  011B                     	;# 
   135  011D                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  0199                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019C                     	;# 
   154  019C                     	;# 
   155  019D                     	;# 
   156  019E                     	;# 
   157  019F                     	;# 
   158  020D                     	;# 
   159  0210                     	;# 
   160  0211                     	;# 
   161  0212                     	;# 
   162  0213                     	;# 
   163  0214                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0291                     	;# 
   169  0291                     	;# 
   170  0292                     	;# 
   171  0293                     	;# 
   172  0294                     	;# 
   173  0295                     	;# 
   174  0295                     	;# 
   175  0296                     	;# 
   176  0298                     	;# 
   177  0298                     	;# 
   178  0299                     	;# 
   179  029A                     	;# 
   180  029B                     	;# 
   181  029C                     	;# 
   182  029C                     	;# 
   183  029D                     	;# 
   184  029E                     	;# 
   185  029F                     	;# 
   186  0311                     	;# 
   187  0311                     	;# 
   188  0312                     	;# 
   189  0313                     	;# 
   190  0314                     	;# 
   191  0315                     	;# 
   192  0315                     	;# 
   193  0316                     	;# 
   194  0318                     	;# 
   195  0318                     	;# 
   196  0319                     	;# 
   197  031A                     	;# 
   198  031C                     	;# 
   199  031C                     	;# 
   200  031D                     	;# 
   201  031E                     	;# 
   202  0394                     	;# 
   203  0395                     	;# 
   204  0396                     	;# 
   205  0415                     	;# 
   206  0416                     	;# 
   207  0417                     	;# 
   208  041C                     	;# 
   209  041D                     	;# 
   210  041E                     	;# 
   211  0791                     	;# 
   212  0792                     	;# 
   213  0793                     	;# 
   214  0794                     	;# 
   215  0795                     	;# 
   216  0798                     	;# 
   217  0799                     	;# 
   218  07A0                     	;# 
   219  07A1                     	;# 
   220  07A3                     	;# 
   221  07A4                     	;# 
   222  07A6                     	;# 
   223  07A7                     	;# 
   224  07A9                     	;# 
   225  07AA                     	;# 
   226  0FE4                     	;# 
   227  0FE5                     	;# 
   228  0FE6                     	;# 
   229  0FE7                     	;# 
   230  0FE8                     	;# 
   231  0FE9                     	;# 
   232  0FEA                     	;# 
   233  0FEB                     	;# 
   234  0FED                     	;# 
   235  0FEE                     	;# 
   236  0FEF                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  0010                     	;# 
   253  0011                     	;# 
   254  0012                     	;# 
   255  0013                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0016                     	;# 
   259  0017                     	;# 
   260  0018                     	;# 
   261  0019                     	;# 
   262  001A                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  0090                     	;# 
   271  0091                     	;# 
   272  0092                     	;# 
   273  0093                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  0110                     	;# 
   289  0111                     	;# 
   290  0112                     	;# 
   291  0113                     	;# 
   292  0114                     	;# 
   293  0115                     	;# 
   294  0116                     	;# 
   295  0117                     	;# 
   296  0118                     	;# 
   297  0119                     	;# 
   298  011A                     	;# 
   299  011B                     	;# 
   300  011D                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0191                     	;# 
   304  0191                     	;# 
   305  0192                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0193                     	;# 
   309  0194                     	;# 
   310  0195                     	;# 
   311  0196                     	;# 
   312  0199                     	;# 
   313  019A                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019C                     	;# 
   319  019C                     	;# 
   320  019D                     	;# 
   321  019E                     	;# 
   322  019F                     	;# 
   323  020D                     	;# 
   324  0210                     	;# 
   325  0211                     	;# 
   326  0212                     	;# 
   327  0213                     	;# 
   328  0214                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0216                     	;# 
   332  0217                     	;# 
   333  0291                     	;# 
   334  0291                     	;# 
   335  0292                     	;# 
   336  0293                     	;# 
   337  0294                     	;# 
   338  0295                     	;# 
   339  0295                     	;# 
   340  0296                     	;# 
   341  0298                     	;# 
   342  0298                     	;# 
   343  0299                     	;# 
   344  029A                     	;# 
   345  029B                     	;# 
   346  029C                     	;# 
   347  029C                     	;# 
   348  029D                     	;# 
   349  029E                     	;# 
   350  029F                     	;# 
   351  0311                     	;# 
   352  0311                     	;# 
   353  0312                     	;# 
   354  0313                     	;# 
   355  0314                     	;# 
   356  0315                     	;# 
   357  0315                     	;# 
   358  0316                     	;# 
   359  0318                     	;# 
   360  0318                     	;# 
   361  0319                     	;# 
   362  031A                     	;# 
   363  031C                     	;# 
   364  031C                     	;# 
   365  031D                     	;# 
   366  031E                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0415                     	;# 
   371  0416                     	;# 
   372  0417                     	;# 
   373  041C                     	;# 
   374  041D                     	;# 
   375  041E                     	;# 
   376  0791                     	;# 
   377  0792                     	;# 
   378  0793                     	;# 
   379  0794                     	;# 
   380  0795                     	;# 
   381  0798                     	;# 
   382  0799                     	;# 
   383  07A0                     	;# 
   384  07A1                     	;# 
   385  07A3                     	;# 
   386  07A4                     	;# 
   387  07A6                     	;# 
   388  07A7                     	;# 
   389  07A9                     	;# 
   390  07AA                     	;# 
   391  0FE4                     	;# 
   392  0FE5                     	;# 
   393  0FE6                     	;# 
   394  0FE7                     	;# 
   395  0FE8                     	;# 
   396  0FE9                     	;# 
   397  0FEA                     	;# 
   398  0FEB                     	;# 
   399  0FED                     	;# 
   400  0FEE                     	;# 
   401  0FEF                     	;# 
   402  0000                     	;# 
   403  0001                     	;# 
   404  0002                     	;# 
   405  0003                     	;# 
   406  0004                     	;# 
   407  0005                     	;# 
   408  0006                     	;# 
   409  0007                     	;# 
   410  0008                     	;# 
   411  0009                     	;# 
   412  000A                     	;# 
   413  000B                     	;# 
   414  000C                     	;# 
   415  000D                     	;# 
   416  000E                     	;# 
   417  0010                     	;# 
   418  0011                     	;# 
   419  0012                     	;# 
   420  0013                     	;# 
   421  0015                     	;# 
   422  0016                     	;# 
   423  0016                     	;# 
   424  0017                     	;# 
   425  0018                     	;# 
   426  0019                     	;# 
   427  001A                     	;# 
   428  001B                     	;# 
   429  001C                     	;# 
   430  001E                     	;# 
   431  001F                     	;# 
   432  008C                     	;# 
   433  008D                     	;# 
   434  008E                     	;# 
   435  0090                     	;# 
   436  0091                     	;# 
   437  0092                     	;# 
   438  0093                     	;# 
   439  0095                     	;# 
   440  0096                     	;# 
   441  0097                     	;# 
   442  0098                     	;# 
   443  0099                     	;# 
   444  009A                     	;# 
   445  009B                     	;# 
   446  009B                     	;# 
   447  009C                     	;# 
   448  009D                     	;# 
   449  009E                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  0110                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011D                     	;# 
   466  018C                     	;# 
   467  018D                     	;# 
   468  0191                     	;# 
   469  0191                     	;# 
   470  0192                     	;# 
   471  0193                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0194                     	;# 
   475  0195                     	;# 
   476  0196                     	;# 
   477  0199                     	;# 
   478  019A                     	;# 
   479  019B                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019B                     	;# 
   483  019C                     	;# 
   484  019C                     	;# 
   485  019D                     	;# 
   486  019E                     	;# 
   487  019F                     	;# 
   488  020D                     	;# 
   489  0210                     	;# 
   490  0211                     	;# 
   491  0212                     	;# 
   492  0213                     	;# 
   493  0214                     	;# 
   494  0215                     	;# 
   495  0215                     	;# 
   496  0216                     	;# 
   497  0217                     	;# 
   498  0291                     	;# 
   499  0291                     	;# 
   500  0292                     	;# 
   501  0293                     	;# 
   502  0294                     	;# 
   503  0295                     	;# 
   504  0295                     	;# 
   505  0296                     	;# 
   506  0298                     	;# 
   507  0298                     	;# 
   508  0299                     	;# 
   509  029A                     	;# 
   510  029B                     	;# 
   511  029C                     	;# 
   512  029C                     	;# 
   513  029D                     	;# 
   514  029E                     	;# 
   515  029F                     	;# 
   516  0311                     	;# 
   517  0311                     	;# 
   518  0312                     	;# 
   519  0313                     	;# 
   520  0314                     	;# 
   521  0315                     	;# 
   522  0315                     	;# 
   523  0316                     	;# 
   524  0318                     	;# 
   525  0318                     	;# 
   526  0319                     	;# 
   527  031A                     	;# 
   528  031C                     	;# 
   529  031C                     	;# 
   530  031D                     	;# 
   531  031E                     	;# 
   532  0394                     	;# 
   533  0395                     	;# 
   534  0396                     	;# 
   535  0415                     	;# 
   536  0416                     	;# 
   537  0417                     	;# 
   538  041C                     	;# 
   539  041D                     	;# 
   540  041E                     	;# 
   541  0791                     	;# 
   542  0792                     	;# 
   543  0793                     	;# 
   544  0794                     	;# 
   545  0795                     	;# 
   546  0798                     	;# 
   547  0799                     	;# 
   548  07A0                     	;# 
   549  07A1                     	;# 
   550  07A3                     	;# 
   551  07A4                     	;# 
   552  07A6                     	;# 
   553  07A7                     	;# 
   554  07A9                     	;# 
   555  07AA                     	;# 
   556  0FE4                     	;# 
   557  0FE5                     	;# 
   558  0FE6                     	;# 
   559  0FE7                     	;# 
   560  0FE8                     	;# 
   561  0FE9                     	;# 
   562  0FEA                     	;# 
   563  0FEB                     	;# 
   564  0FED                     	;# 
   565  0FEE                     	;# 
   566  0FEF                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  0010                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  008E                     	;# 
   600  0090                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0098                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  010C                     	;# 
   616  010D                     	;# 
   617  010E                     	;# 
   618  0110                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011A                     	;# 
   629  011B                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0199                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020D                     	;# 
   654  0210                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0216                     	;# 
   662  0217                     	;# 
   663  0291                     	;# 
   664  0291                     	;# 
   665  0292                     	;# 
   666  0293                     	;# 
   667  0294                     	;# 
   668  0295                     	;# 
   669  0295                     	;# 
   670  0296                     	;# 
   671  0298                     	;# 
   672  0298                     	;# 
   673  0299                     	;# 
   674  029A                     	;# 
   675  029B                     	;# 
   676  029C                     	;# 
   677  029C                     	;# 
   678  029D                     	;# 
   679  029E                     	;# 
   680  029F                     	;# 
   681  0311                     	;# 
   682  0311                     	;# 
   683  0312                     	;# 
   684  0313                     	;# 
   685  0314                     	;# 
   686  0315                     	;# 
   687  0315                     	;# 
   688  0316                     	;# 
   689  0318                     	;# 
   690  0318                     	;# 
   691  0319                     	;# 
   692  031A                     	;# 
   693  031C                     	;# 
   694  031C                     	;# 
   695  031D                     	;# 
   696  031E                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0415                     	;# 
   701  0416                     	;# 
   702  0417                     	;# 
   703  041C                     	;# 
   704  041D                     	;# 
   705  041E                     	;# 
   706  0791                     	;# 
   707  0792                     	;# 
   708  0793                     	;# 
   709  0794                     	;# 
   710  0795                     	;# 
   711  0798                     	;# 
   712  0799                     	;# 
   713  07A0                     	;# 
   714  07A1                     	;# 
   715  07A3                     	;# 
   716  07A4                     	;# 
   717  07A6                     	;# 
   718  07A7                     	;# 
   719  07A9                     	;# 
   720  07AA                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0010                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0013                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  008E                     	;# 
   765  0090                     	;# 
   766  0091                     	;# 
   767  0092                     	;# 
   768  0093                     	;# 
   769  0095                     	;# 
   770  0096                     	;# 
   771  0097                     	;# 
   772  0098                     	;# 
   773  0099                     	;# 
   774  009A                     	;# 
   775  009B                     	;# 
   776  009B                     	;# 
   777  009C                     	;# 
   778  009D                     	;# 
   779  009E                     	;# 
   780  010C                     	;# 
   781  010D                     	;# 
   782  010E                     	;# 
   783  0110                     	;# 
   784  0111                     	;# 
   785  0112                     	;# 
   786  0113                     	;# 
   787  0114                     	;# 
   788  0115                     	;# 
   789  0116                     	;# 
   790  0117                     	;# 
   791  0118                     	;# 
   792  0119                     	;# 
   793  011A                     	;# 
   794  011B                     	;# 
   795  011D                     	;# 
   796  018C                     	;# 
   797  018D                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0194                     	;# 
   805  0195                     	;# 
   806  0196                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019C                     	;# 
   814  019C                     	;# 
   815  019D                     	;# 
   816  019E                     	;# 
   817  019F                     	;# 
   818  020D                     	;# 
   819  0210                     	;# 
   820  0211                     	;# 
   821  0212                     	;# 
   822  0213                     	;# 
   823  0214                     	;# 
   824  0215                     	;# 
   825  0215                     	;# 
   826  0216                     	;# 
   827  0217                     	;# 
   828  0291                     	;# 
   829  0291                     	;# 
   830  0292                     	;# 
   831  0293                     	;# 
   832  0294                     	;# 
   833  0295                     	;# 
   834  0295                     	;# 
   835  0296                     	;# 
   836  0298                     	;# 
   837  0298                     	;# 
   838  0299                     	;# 
   839  029A                     	;# 
   840  029B                     	;# 
   841  029C                     	;# 
   842  029C                     	;# 
   843  029D                     	;# 
   844  029E                     	;# 
   845  029F                     	;# 
   846  0311                     	;# 
   847  0311                     	;# 
   848  0312                     	;# 
   849  0313                     	;# 
   850  0314                     	;# 
   851  0315                     	;# 
   852  0315                     	;# 
   853  0316                     	;# 
   854  0318                     	;# 
   855  0318                     	;# 
   856  0319                     	;# 
   857  031A                     	;# 
   858  031C                     	;# 
   859  031C                     	;# 
   860  031D                     	;# 
   861  031E                     	;# 
   862  0394                     	;# 
   863  0395                     	;# 
   864  0396                     	;# 
   865  0415                     	;# 
   866  0416                     	;# 
   867  0417                     	;# 
   868  041C                     	;# 
   869  041D                     	;# 
   870  041E                     	;# 
   871  0791                     	;# 
   872  0792                     	;# 
   873  0793                     	;# 
   874  0794                     	;# 
   875  0795                     	;# 
   876  0798                     	;# 
   877  0799                     	;# 
   878  07A0                     	;# 
   879  07A1                     	;# 
   880  07A3                     	;# 
   881  07A4                     	;# 
   882  07A6                     	;# 
   883  07A7                     	;# 
   884  07A9                     	;# 
   885  07AA                     	;# 
   886  0FE4                     	;# 
   887  0FE5                     	;# 
   888  0FE6                     	;# 
   889  0FE7                     	;# 
   890  0FE8                     	;# 
   891  0FE9                     	;# 
   892  0FEA                     	;# 
   893  0FEB                     	;# 
   894  0FED                     	;# 
   895  0FEE                     	;# 
   896  0FEF                     	;# 
   897  0000                     	;# 
   898  0001                     	;# 
   899  0002                     	;# 
   900  0003                     	;# 
   901  0004                     	;# 
   902  0005                     	;# 
   903  0006                     	;# 
   904  0007                     	;# 
   905  0008                     	;# 
   906  0009                     	;# 
   907  000A                     	;# 
   908  000B                     	;# 
   909  000C                     	;# 
   910  000D                     	;# 
   911  000E                     	;# 
   912  0010                     	;# 
   913  0011                     	;# 
   914  0012                     	;# 
   915  0013                     	;# 
   916  0015                     	;# 
   917  0016                     	;# 
   918  0016                     	;# 
   919  0017                     	;# 
   920  0018                     	;# 
   921  0019                     	;# 
   922  001A                     	;# 
   923  001B                     	;# 
   924  001C                     	;# 
   925  001E                     	;# 
   926  001F                     	;# 
   927  008C                     	;# 
   928  008D                     	;# 
   929  008E                     	;# 
   930  0090                     	;# 
   931  0091                     	;# 
   932  0092                     	;# 
   933  0093                     	;# 
   934  0095                     	;# 
   935  0096                     	;# 
   936  0097                     	;# 
   937  0098                     	;# 
   938  0099                     	;# 
   939  009A                     	;# 
   940  009B                     	;# 
   941  009B                     	;# 
   942  009C                     	;# 
   943  009D                     	;# 
   944  009E                     	;# 
   945  010C                     	;# 
   946  010D                     	;# 
   947  010E                     	;# 
   948  0110                     	;# 
   949  0111                     	;# 
   950  0112                     	;# 
   951  0113                     	;# 
   952  0114                     	;# 
   953  0115                     	;# 
   954  0116                     	;# 
   955  0117                     	;# 
   956  0118                     	;# 
   957  0119                     	;# 
   958  011A                     	;# 
   959  011B                     	;# 
   960  011D                     	;# 
   961  018C                     	;# 
   962  018D                     	;# 
   963  0191                     	;# 
   964  0191                     	;# 
   965  0192                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0193                     	;# 
   969  0194                     	;# 
   970  0195                     	;# 
   971  0196                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019C                     	;# 
   979  019C                     	;# 
   980  019D                     	;# 
   981  019E                     	;# 
   982  019F                     	;# 
   983  020D                     	;# 
   984  0210                     	;# 
   985  0211                     	;# 
   986  0212                     	;# 
   987  0213                     	;# 
   988  0214                     	;# 
   989  0215                     	;# 
   990  0215                     	;# 
   991  0216                     	;# 
   992  0217                     	;# 
   993  0291                     	;# 
   994  0291                     	;# 
   995  0292                     	;# 
   996  0293                     	;# 
   997  0294                     	;# 
   998  0295                     	;# 
   999  0295                     	;# 
  1000  0296                     	;# 
  1001  0298                     	;# 
  1002  0298                     	;# 
  1003  0299                     	;# 
  1004  029A                     	;# 
  1005  029B                     	;# 
  1006  029C                     	;# 
  1007  029C                     	;# 
  1008  029D                     	;# 
  1009  029E                     	;# 
  1010  029F                     	;# 
  1011  0311                     	;# 
  1012  0311                     	;# 
  1013  0312                     	;# 
  1014  0313                     	;# 
  1015  0314                     	;# 
  1016  0315                     	;# 
  1017  0315                     	;# 
  1018  0316                     	;# 
  1019  0318                     	;# 
  1020  0318                     	;# 
  1021  0319                     	;# 
  1022  031A                     	;# 
  1023  031C                     	;# 
  1024  031C                     	;# 
  1025  031D                     	;# 
  1026  031E                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0415                     	;# 
  1031  0416                     	;# 
  1032  0417                     	;# 
  1033  041C                     	;# 
  1034  041D                     	;# 
  1035  041E                     	;# 
  1036  0791                     	;# 
  1037  0792                     	;# 
  1038  0793                     	;# 
  1039  0794                     	;# 
  1040  0795                     	;# 
  1041  0798                     	;# 
  1042  0799                     	;# 
  1043  07A0                     	;# 
  1044  07A1                     	;# 
  1045  07A3                     	;# 
  1046  07A4                     	;# 
  1047  07A6                     	;# 
  1048  07A7                     	;# 
  1049  07A9                     	;# 
  1050  07AA                     	;# 
  1051  0FE4                     	;# 
  1052  0FE5                     	;# 
  1053  0FE6                     	;# 
  1054  0FE7                     	;# 
  1055  0FE8                     	;# 
  1056  0FE9                     	;# 
  1057  0FEA                     	;# 
  1058  0FEB                     	;# 
  1059  0FED                     	;# 
  1060  0FEE                     	;# 
  1061  0FEF                     	;# 
  1062  0000                     	;# 
  1063  0001                     	;# 
  1064  0002                     	;# 
  1065  0003                     	;# 
  1066  0004                     	;# 
  1067  0005                     	;# 
  1068  0006                     	;# 
  1069  0007                     	;# 
  1070  0008                     	;# 
  1071  0009                     	;# 
  1072  000A                     	;# 
  1073  000B                     	;# 
  1074  000C                     	;# 
  1075  000D                     	;# 
  1076  000E                     	;# 
  1077  0010                     	;# 
  1078  0011                     	;# 
  1079  0012                     	;# 
  1080  0013                     	;# 
  1081  0015                     	;# 
  1082  0016                     	;# 
  1083  0016                     	;# 
  1084  0017                     	;# 
  1085  0018                     	;# 
  1086  0019                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001C                     	;# 
  1090  001E                     	;# 
  1091  001F                     	;# 
  1092  008C                     	;# 
  1093  008D                     	;# 
  1094  008E                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0093                     	;# 
  1099  0095                     	;# 
  1100  0096                     	;# 
  1101  0097                     	;# 
  1102  0098                     	;# 
  1103  0099                     	;# 
  1104  009A                     	;# 
  1105  009B                     	;# 
  1106  009B                     	;# 
  1107  009C                     	;# 
  1108  009D                     	;# 
  1109  009E                     	;# 
  1110  010C                     	;# 
  1111  010D                     	;# 
  1112  010E                     	;# 
  1113  0110                     	;# 
  1114  0111                     	;# 
  1115  0112                     	;# 
  1116  0113                     	;# 
  1117  0114                     	;# 
  1118  0115                     	;# 
  1119  0116                     	;# 
  1120  0117                     	;# 
  1121  0118                     	;# 
  1122  0119                     	;# 
  1123  011A                     	;# 
  1124  011B                     	;# 
  1125  011D                     	;# 
  1126  018C                     	;# 
  1127  018D                     	;# 
  1128  0191                     	;# 
  1129  0191                     	;# 
  1130  0192                     	;# 
  1131  0193                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0194                     	;# 
  1135  0195                     	;# 
  1136  0196                     	;# 
  1137  0199                     	;# 
  1138  019A                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019B                     	;# 
  1143  019C                     	;# 
  1144  019C                     	;# 
  1145  019D                     	;# 
  1146  019E                     	;# 
  1147  019F                     	;# 
  1148  020D                     	;# 
  1149  0210                     	;# 
  1150  0211                     	;# 
  1151  0212                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0215                     	;# 
  1155  0215                     	;# 
  1156  0216                     	;# 
  1157  0217                     	;# 
  1158  0291                     	;# 
  1159  0291                     	;# 
  1160  0292                     	;# 
  1161  0293                     	;# 
  1162  0294                     	;# 
  1163  0295                     	;# 
  1164  0295                     	;# 
  1165  0296                     	;# 
  1166  0298                     	;# 
  1167  0298                     	;# 
  1168  0299                     	;# 
  1169  029A                     	;# 
  1170  029B                     	;# 
  1171  029C                     	;# 
  1172  029C                     	;# 
  1173  029D                     	;# 
  1174  029E                     	;# 
  1175  029F                     	;# 
  1176  0311                     	;# 
  1177  0311                     	;# 
  1178  0312                     	;# 
  1179  0313                     	;# 
  1180  0314                     	;# 
  1181  0315                     	;# 
  1182  0315                     	;# 
  1183  0316                     	;# 
  1184  0318                     	;# 
  1185  0318                     	;# 
  1186  0319                     	;# 
  1187  031A                     	;# 
  1188  031C                     	;# 
  1189  031C                     	;# 
  1190  031D                     	;# 
  1191  031E                     	;# 
  1192  0394                     	;# 
  1193  0395                     	;# 
  1194  0396                     	;# 
  1195  0415                     	;# 
  1196  0416                     	;# 
  1197  0417                     	;# 
  1198  041C                     	;# 
  1199  041D                     	;# 
  1200  041E                     	;# 
  1201  0791                     	;# 
  1202  0792                     	;# 
  1203  0793                     	;# 
  1204  0794                     	;# 
  1205  0795                     	;# 
  1206  0798                     	;# 
  1207  0799                     	;# 
  1208  07A0                     	;# 
  1209  07A1                     	;# 
  1210  07A3                     	;# 
  1211  07A4                     	;# 
  1212  07A6                     	;# 
  1213  07A7                     	;# 
  1214  07A9                     	;# 
  1215  07AA                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  0010                     	;# 
  1243  0011                     	;# 
  1244  0012                     	;# 
  1245  0013                     	;# 
  1246  0015                     	;# 
  1247  0016                     	;# 
  1248  0016                     	;# 
  1249  0017                     	;# 
  1250  0018                     	;# 
  1251  0019                     	;# 
  1252  001A                     	;# 
  1253  001B                     	;# 
  1254  001C                     	;# 
  1255  001E                     	;# 
  1256  001F                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  0090                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0093                     	;# 
  1264  0095                     	;# 
  1265  0096                     	;# 
  1266  0097                     	;# 
  1267  0098                     	;# 
  1268  0099                     	;# 
  1269  009A                     	;# 
  1270  009B                     	;# 
  1271  009B                     	;# 
  1272  009C                     	;# 
  1273  009D                     	;# 
  1274  009E                     	;# 
  1275  010C                     	;# 
  1276  010D                     	;# 
  1277  010E                     	;# 
  1278  0110                     	;# 
  1279  0111                     	;# 
  1280  0112                     	;# 
  1281  0113                     	;# 
  1282  0114                     	;# 
  1283  0115                     	;# 
  1284  0116                     	;# 
  1285  0117                     	;# 
  1286  0118                     	;# 
  1287  0119                     	;# 
  1288  011A                     	;# 
  1289  011B                     	;# 
  1290  011D                     	;# 
  1291  018C                     	;# 
  1292  018D                     	;# 
  1293  0191                     	;# 
  1294  0191                     	;# 
  1295  0192                     	;# 
  1296  0193                     	;# 
  1297  0193                     	;# 
  1298  0193                     	;# 
  1299  0194                     	;# 
  1300  0195                     	;# 
  1301  0196                     	;# 
  1302  0199                     	;# 
  1303  019A                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019D                     	;# 
  1311  019E                     	;# 
  1312  019F                     	;# 
  1313  020D                     	;# 
  1314  0210                     	;# 
  1315  0211                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0214                     	;# 
  1319  0215                     	;# 
  1320  0215                     	;# 
  1321  0216                     	;# 
  1322  0217                     	;# 
  1323  0291                     	;# 
  1324  0291                     	;# 
  1325  0292                     	;# 
  1326  0293                     	;# 
  1327  0294                     	;# 
  1328  0295                     	;# 
  1329  0295                     	;# 
  1330  0296                     	;# 
  1331  0298                     	;# 
  1332  0298                     	;# 
  1333  0299                     	;# 
  1334  029A                     	;# 
  1335  029B                     	;# 
  1336  029C                     	;# 
  1337  029C                     	;# 
  1338  029D                     	;# 
  1339  029E                     	;# 
  1340  029F                     	;# 
  1341  0311                     	;# 
  1342  0311                     	;# 
  1343  0312                     	;# 
  1344  0313                     	;# 
  1345  0314                     	;# 
  1346  0315                     	;# 
  1347  0315                     	;# 
  1348  0316                     	;# 
  1349  0318                     	;# 
  1350  0318                     	;# 
  1351  0319                     	;# 
  1352  031A                     	;# 
  1353  031C                     	;# 
  1354  031C                     	;# 
  1355  031D                     	;# 
  1356  031E                     	;# 
  1357  0394                     	;# 
  1358  0395                     	;# 
  1359  0396                     	;# 
  1360  0415                     	;# 
  1361  0416                     	;# 
  1362  0417                     	;# 
  1363  041C                     	;# 
  1364  041D                     	;# 
  1365  041E                     	;# 
  1366  0791                     	;# 
  1367  0792                     	;# 
  1368  0793                     	;# 
  1369  0794                     	;# 
  1370  0795                     	;# 
  1371  0798                     	;# 
  1372  0799                     	;# 
  1373  07A0                     	;# 
  1374  07A1                     	;# 
  1375  07A3                     	;# 
  1376  07A4                     	;# 
  1377  07A6                     	;# 
  1378  07A7                     	;# 
  1379  07A9                     	;# 
  1380  07AA                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE9                     	;# 
  1387  0FEA                     	;# 
  1388  0FEB                     	;# 
  1389  0FED                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392  0000                     	;# 
  1393  0001                     	;# 
  1394  0002                     	;# 
  1395  0003                     	;# 
  1396  0004                     	;# 
  1397  0005                     	;# 
  1398  0006                     	;# 
  1399  0007                     	;# 
  1400  0008                     	;# 
  1401  0009                     	;# 
  1402  000A                     	;# 
  1403  000B                     	;# 
  1404  000C                     	;# 
  1405  000D                     	;# 
  1406  000E                     	;# 
  1407  0010                     	;# 
  1408  0011                     	;# 
  1409  0012                     	;# 
  1410  0013                     	;# 
  1411  0015                     	;# 
  1412  0016                     	;# 
  1413  0016                     	;# 
  1414  0017                     	;# 
  1415  0018                     	;# 
  1416  0019                     	;# 
  1417  001A                     	;# 
  1418  001B                     	;# 
  1419  001C                     	;# 
  1420  001E                     	;# 
  1421  001F                     	;# 
  1422  008C                     	;# 
  1423  008D                     	;# 
  1424  008E                     	;# 
  1425  0090                     	;# 
  1426  0091                     	;# 
  1427  0092                     	;# 
  1428  0093                     	;# 
  1429  0095                     	;# 
  1430  0096                     	;# 
  1431  0097                     	;# 
  1432  0098                     	;# 
  1433  0099                     	;# 
  1434  009A                     	;# 
  1435  009B                     	;# 
  1436  009B                     	;# 
  1437  009C                     	;# 
  1438  009D                     	;# 
  1439  009E                     	;# 
  1440  010C                     	;# 
  1441  010D                     	;# 
  1442  010E                     	;# 
  1443  0110                     	;# 
  1444  0111                     	;# 
  1445  0112                     	;# 
  1446  0113                     	;# 
  1447  0114                     	;# 
  1448  0115                     	;# 
  1449  0116                     	;# 
  1450  0117                     	;# 
  1451  0118                     	;# 
  1452  0119                     	;# 
  1453  011A                     	;# 
  1454  011B                     	;# 
  1455  011D                     	;# 
  1456  018C                     	;# 
  1457  018D                     	;# 
  1458  0191                     	;# 
  1459  0191                     	;# 
  1460  0192                     	;# 
  1461  0193                     	;# 
  1462  0193                     	;# 
  1463  0193                     	;# 
  1464  0194                     	;# 
  1465  0195                     	;# 
  1466  0196                     	;# 
  1467  0199                     	;# 
  1468  019A                     	;# 
  1469  019B                     	;# 
  1470  019B                     	;# 
  1471  019B                     	;# 
  1472  019B                     	;# 
  1473  019C                     	;# 
  1474  019C                     	;# 
  1475  019D                     	;# 
  1476  019E                     	;# 
  1477  019F                     	;# 
  1478  020D                     	;# 
  1479  0210                     	;# 
  1480  0211                     	;# 
  1481  0212                     	;# 
  1482  0213                     	;# 
  1483  0214                     	;# 
  1484  0215                     	;# 
  1485  0215                     	;# 
  1486  0216                     	;# 
  1487  0217                     	;# 
  1488  0291                     	;# 
  1489  0291                     	;# 
  1490  0292                     	;# 
  1491  0293                     	;# 
  1492  0294                     	;# 
  1493  0295                     	;# 
  1494  0295                     	;# 
  1495  0296                     	;# 
  1496  0298                     	;# 
  1497  0298                     	;# 
  1498  0299                     	;# 
  1499  029A                     	;# 
  1500  029B                     	;# 
  1501  029C                     	;# 
  1502  029C                     	;# 
  1503  029D                     	;# 
  1504  029E                     	;# 
  1505  029F                     	;# 
  1506  0311                     	;# 
  1507  0311                     	;# 
  1508  0312                     	;# 
  1509  0313                     	;# 
  1510  0314                     	;# 
  1511  0315                     	;# 
  1512  0315                     	;# 
  1513  0316                     	;# 
  1514  0318                     	;# 
  1515  0318                     	;# 
  1516  0319                     	;# 
  1517  031A                     	;# 
  1518  031C                     	;# 
  1519  031C                     	;# 
  1520  031D                     	;# 
  1521  031E                     	;# 
  1522  0394                     	;# 
  1523  0395                     	;# 
  1524  0396                     	;# 
  1525  0415                     	;# 
  1526  0416                     	;# 
  1527  0417                     	;# 
  1528  041C                     	;# 
  1529  041D                     	;# 
  1530  041E                     	;# 
  1531  0791                     	;# 
  1532  0792                     	;# 
  1533  0793                     	;# 
  1534  0794                     	;# 
  1535  0795                     	;# 
  1536  0798                     	;# 
  1537  0799                     	;# 
  1538  07A0                     	;# 
  1539  07A1                     	;# 
  1540  07A3                     	;# 
  1541  07A4                     	;# 
  1542  07A6                     	;# 
  1543  07A7                     	;# 
  1544  07A9                     	;# 
  1545  07AA                     	;# 
  1546  0FE4                     	;# 
  1547  0FE5                     	;# 
  1548  0FE6                     	;# 
  1549  0FE7                     	;# 
  1550  0FE8                     	;# 
  1551  0FE9                     	;# 
  1552  0FEA                     	;# 
  1553  0FEB                     	;# 
  1554  0FED                     	;# 
  1555  0FEE                     	;# 
  1556  0FEF                     	;# 
  1557  0000                     	;# 
  1558  0001                     	;# 
  1559  0002                     	;# 
  1560  0003                     	;# 
  1561  0004                     	;# 
  1562  0005                     	;# 
  1563  0006                     	;# 
  1564  0007                     	;# 
  1565  0008                     	;# 
  1566  0009                     	;# 
  1567  000A                     	;# 
  1568  000B                     	;# 
  1569  000C                     	;# 
  1570  000D                     	;# 
  1571  000E                     	;# 
  1572  0010                     	;# 
  1573  0011                     	;# 
  1574  0012                     	;# 
  1575  0013                     	;# 
  1576  0015                     	;# 
  1577  0016                     	;# 
  1578  0016                     	;# 
  1579  0017                     	;# 
  1580  0018                     	;# 
  1581  0019                     	;# 
  1582  001A                     	;# 
  1583  001B                     	;# 
  1584  001C                     	;# 
  1585  001E                     	;# 
  1586  001F                     	;# 
  1587  008C                     	;# 
  1588  008D                     	;# 
  1589  008E                     	;# 
  1590  0090                     	;# 
  1591  0091                     	;# 
  1592  0092                     	;# 
  1593  0093                     	;# 
  1594  0095                     	;# 
  1595  0096                     	;# 
  1596  0097                     	;# 
  1597  0098                     	;# 
  1598  0099                     	;# 
  1599  009A                     	;# 
  1600  009B                     	;# 
  1601  009B                     	;# 
  1602  009C                     	;# 
  1603  009D                     	;# 
  1604  009E                     	;# 
  1605  010C                     	;# 
  1606  010D                     	;# 
  1607  010E                     	;# 
  1608  0110                     	;# 
  1609  0111                     	;# 
  1610  0112                     	;# 
  1611  0113                     	;# 
  1612  0114                     	;# 
  1613  0115                     	;# 
  1614  0116                     	;# 
  1615  0117                     	;# 
  1616  0118                     	;# 
  1617  0119                     	;# 
  1618  011A                     	;# 
  1619  011B                     	;# 
  1620  011D                     	;# 
  1621  018C                     	;# 
  1622  018D                     	;# 
  1623  0191                     	;# 
  1624  0191                     	;# 
  1625  0192                     	;# 
  1626  0193                     	;# 
  1627  0193                     	;# 
  1628  0193                     	;# 
  1629  0194                     	;# 
  1630  0195                     	;# 
  1631  0196                     	;# 
  1632  0199                     	;# 
  1633  019A                     	;# 
  1634  019B                     	;# 
  1635  019B                     	;# 
  1636  019B                     	;# 
  1637  019B                     	;# 
  1638  019C                     	;# 
  1639  019C                     	;# 
  1640  019D                     	;# 
  1641  019E                     	;# 
  1642  019F                     	;# 
  1643  020D                     	;# 
  1644  0210                     	;# 
  1645  0211                     	;# 
  1646  0212                     	;# 
  1647  0213                     	;# 
  1648  0214                     	;# 
  1649  0215                     	;# 
  1650  0215                     	;# 
  1651  0216                     	;# 
  1652  0217                     	;# 
  1653  0291                     	;# 
  1654  0291                     	;# 
  1655  0292                     	;# 
  1656  0293                     	;# 
  1657  0294                     	;# 
  1658  0295                     	;# 
  1659  0295                     	;# 
  1660  0296                     	;# 
  1661  0298                     	;# 
  1662  0298                     	;# 
  1663  0299                     	;# 
  1664  029A                     	;# 
  1665  029B                     	;# 
  1666  029C                     	;# 
  1667  029C                     	;# 
  1668  029D                     	;# 
  1669  029E                     	;# 
  1670  029F                     	;# 
  1671  0311                     	;# 
  1672  0311                     	;# 
  1673  0312                     	;# 
  1674  0313                     	;# 
  1675  0314                     	;# 
  1676  0315                     	;# 
  1677  0315                     	;# 
  1678  0316                     	;# 
  1679  0318                     	;# 
  1680  0318                     	;# 
  1681  0319                     	;# 
  1682  031A                     	;# 
  1683  031C                     	;# 
  1684  031C                     	;# 
  1685  031D                     	;# 
  1686  031E                     	;# 
  1687  0394                     	;# 
  1688  0395                     	;# 
  1689  0396                     	;# 
  1690  0415                     	;# 
  1691  0416                     	;# 
  1692  0417                     	;# 
  1693  041C                     	;# 
  1694  041D                     	;# 
  1695  041E                     	;# 
  1696  0791                     	;# 
  1697  0792                     	;# 
  1698  0793                     	;# 
  1699  0794                     	;# 
  1700  0795                     	;# 
  1701  0798                     	;# 
  1702  0799                     	;# 
  1703  07A0                     	;# 
  1704  07A1                     	;# 
  1705  07A3                     	;# 
  1706  07A4                     	;# 
  1707  07A6                     	;# 
  1708  07A7                     	;# 
  1709  07A9                     	;# 
  1710  07AA                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722                           
  1723                           	psect	idataBANK0
  1724  0000                     __pidataBANK0:	
  1725                           
  1726                           	psect	idataBANK1
  1727  0000                     __pidataBANK1:	
  1728                           
  1729                           	psect	idataBANK2
  1730  0000                     __pidataBANK2:	
  1731                           
  1732                           	psect	stringtext1
  1733  1800                     __pstringtext1:	
  1734  1800                     _PWM_trans_table:	
  1735  1800  346E               	retlw	110
  1736  1801  346E               	retlw	110
  1737  1802  346E               	retlw	110
  1738  1803  3400               	retlw	0
  1739  1804  3400               	retlw	0
  1740  1805  3400               	retlw	0
  1741  1806  3400               	retlw	0
  1742  1807  3400               	retlw	0
  1743  1808  3400               	retlw	0
  1744  1809  3400               	retlw	0
  1745  180A  34D3               	retlw	211
  1746  180B  34D3               	retlw	211
  1747  180C  34D3               	retlw	211
  1748  180D  34D0               	retlw	208
  1749  180E  34CE               	retlw	206
  1750  180F  34CC               	retlw	204
  1751  1810  34C9               	retlw	201
  1752  1811  34C7               	retlw	199
  1753  1812  34C5               	retlw	197
  1754  1813  34C3               	retlw	195
  1755  1814  34C1               	retlw	193
  1756  1815  34BF               	retlw	191
  1757  1816  34BD               	retlw	189
  1758  1817  34BB               	retlw	187
  1759  1818  34BA               	retlw	186
  1760  1819  34B8               	retlw	184
  1761  181A  34B6               	retlw	182
  1762  181B  34B4               	retlw	180
  1763  181C  34B2               	retlw	178
  1764  181D  34B1               	retlw	177
  1765  181E  34AF               	retlw	175
  1766  181F  34AD               	retlw	173
  1767  1820  34AC               	retlw	172
  1768  1821  34AA               	retlw	170
  1769  1822  34A9               	retlw	169
  1770  1823  34A7               	retlw	167
  1771  1824  34A6               	retlw	166
  1772  1825  34A4               	retlw	164
  1773  1826  34A3               	retlw	163
  1774  1827  34A2               	retlw	162
  1775  1828  34A0               	retlw	160
  1776  1829  349F               	retlw	159
  1777  182A  349D               	retlw	157
  1778  182B  349C               	retlw	156
  1779  182C  349B               	retlw	155
  1780  182D  349A               	retlw	154
  1781  182E  3498               	retlw	152
  1782  182F  3497               	retlw	151
  1783  1830  3496               	retlw	150
  1784  1831  3495               	retlw	149
  1785  1832  3494               	retlw	148
  1786  1833  3492               	retlw	146
  1787  1834  3491               	retlw	145
  1788  1835  3490               	retlw	144
  1789  1836  348F               	retlw	143
  1790  1837  348E               	retlw	142
  1791  1838  348D               	retlw	141
  1792  1839  348C               	retlw	140
  1793  183A  348B               	retlw	139
  1794  183B  348A               	retlw	138
  1795  183C  3489               	retlw	137
  1796  183D  3488               	retlw	136
  1797  183E  3487               	retlw	135
  1798  183F  3486               	retlw	134
  1799  1840  3485               	retlw	133
  1800  1841  3484               	retlw	132
  1801  1842  3483               	retlw	131
  1802  1843  3482               	retlw	130
  1803  1844  3481               	retlw	129
  1804  1845  3480               	retlw	128
  1805  1846  347F               	retlw	127
  1806  1847  347F               	retlw	127
  1807  1848  347E               	retlw	126
  1808  1849  347D               	retlw	125
  1809  184A  347C               	retlw	124
  1810  184B  347B               	retlw	123
  1811  184C  347A               	retlw	122
  1812  184D  347A               	retlw	122
  1813  184E  3479               	retlw	121
  1814  184F  3478               	retlw	120
  1815  1850  3477               	retlw	119
  1816  1851  3477               	retlw	119
  1817  1852  3476               	retlw	118
  1818  1853  3475               	retlw	117
  1819  1854  3474               	retlw	116
  1820  1855  3474               	retlw	116
  1821  1856  3473               	retlw	115
  1822  1857  3472               	retlw	114
  1823  1858  3472               	retlw	114
  1824  1859  3471               	retlw	113
  1825  185A  3470               	retlw	112
  1826  185B  3470               	retlw	112
  1827  185C  346F               	retlw	111
  1828  185D  346E               	retlw	110
  1829  185E  346E               	retlw	110
  1830  185F  346E               	retlw	110
  1831  1860  346E               	retlw	110
  1832  1861  346E               	retlw	110
  1833  1862  346E               	retlw	110
  1834  1863  346E               	retlw	110
  1835  1864  346E               	retlw	110
  1836  1865                     __end_of_PWM_trans_table:	
  1837                           
  1838                           	psect	nvBANK1
  1839  00EF                     __pnvBANK1:	
  1840  00EF                     _ui8_ResetMatlab:	
  1841  00EF                     	ds	1
  1842                           
  1843                           	psect	nvBANK3
  1844  01EC                     __pnvBANK3:	
  1845  01EC                     _ui16_Current_Thresh:	
  1846  01EC                     	ds	2
  1847  01EE                     _ui16_dryRun_Thresh:	
  1848  01EE                     	ds	2
  1849  0017                     _TMR1H	set	23
  1850  0016                     _TMR1L	set	22
  1851  001A                     _TMR2	set	26
  1852  0015                     _TMR0	set	21
  1853  0018                     _T1CON	set	24
  1854  000B                     _INTCON	set	11
  1855  001C                     _T2CON	set	28
  1856  001B                     _PR2	set	27
  1857  005D                     _TMR0IE	set	93
  1858  009D                     _CCP4IF	set	157
  1859  009C                     _CCP3IF	set	156
  1860  008A                     _CCP1IF	set	138
  1861  008D                     _RCIF	set	141
  1862  0090                     _CCP2IF	set	144
  1863  009E                     _CCP5IF	set	158
  1864  009B                     _TMR6IF	set	155
  1865  0089                     _TMR2IF	set	137
  1866  0099                     _TMR4IF	set	153
  1867  0088                     _TMR1IF	set	136
  1868  0075                     _RC5	set	117
  1869  005F                     _GIE	set	95
  1870  005E                     _PEIE	set	94
  1871  0097                     _WDTCON	set	151
  1872  0099                     _OSCCON	set	153
  1873  0093                     _PIE3	set	147
  1874  0092                     _PIE2	set	146
  1875  0095                     _OPTION_REG	set	149
  1876  008E                     _TRISC	set	142
  1877  008D                     _TRISB	set	141
  1878  008C                     _TRISA	set	140
  1879  0091                     _PIE1	set	145
  1880  009B                     _ADRESL	set	155
  1881  009C                     _ADRESH	set	156
  1882  009D                     _ADCON0	set	157
  1883  009E                     _ADCON1	set	158
  1884  049B                     _TMR6IE	set	1179
  1885  0499                     _TMR4IE	set	1177
  1886  0488                     _TMR1IE	set	1160
  1887  049E                     _CCP5IE	set	1182
  1888  049D                     _CCP4IE	set	1181
  1889  049C                     _CCP3IE	set	1180
  1890  048A                     _CCP1IE	set	1162
  1891  0489                     _TMR2IE	set	1161
  1892  0490                     _CCP2IE	set	1168
  1893  0495                     _C1IE	set	1173
  1894  04E9                     _GO_nDONE	set	1257
  1895  04E8                     _ADON	set	1256
  1896  010D                     _LATB	set	269
  1897  010C                     _LATA	set	268
  1898  010E                     _LATC	set	270
  1899  0112                     _CM1CON1	set	274
  1900  0111                     _CM1CON0	set	273
  1901  0117                     _FVRCON	set	279
  1902  0870                     _LATC0	set	2160
  1903  0874                     _LATC4	set	2164
  1904  0873                     _LATC3	set	2163
  1905  0871                     _LATC1	set	2161
  1906  0872                     _LATC2	set	2162
  1907  0869                     _LATB1	set	2153
  1908  086A                     _LATB2	set	2154
  1909  088E                     _C1OUT	set	2190
  1910  018D                     _ANSELB	set	397
  1911  018C                     _ANSELA	set	396
  1912  019A                     _TXREG	set	410
  1913  0199                     _RCREG	set	409
  1914  019F                     _BAUDCON	set	415
  1915  019D                     _RCSTA	set	413
  1916  019E                     _TXSTA	set	414
  1917  019C                     _SPBRGH	set	412
  1918  019B                     _SPBRG	set	411
  1919  0196                     _EECON2	set	406
  1920  0193                     _EEDATL	set	403
  1921  0193                     _EEDATA	set	403
  1922  0194                     _EEDATH	set	404
  1923  0195                     _EECON1	set	405
  1924  0192                     _EEADRH	set	402
  1925  0191                     _EEADRL	set	401
  1926  0CF3                     _SENDB	set	3315
  1927  0CA9                     _WR	set	3241
  1928  0CAE                     _CFGS	set	3246
  1929  0CAF                     _EEPGD	set	3247
  1930  0CA8                     _RD	set	3240
  1931  0CAA                     _WREN	set	3242
  1932  0292                     _CCPR1H	set	658
  1933  0299                     _CCPR2H	set	665
  1934  0298                     _CCPR2L	set	664
  1935  029A                     _CCP2CON	set	666
  1936  0291                     _CCPR1L	set	657
  1937  0293                     _CCP1CON	set	659
  1938  0295                     _CCP1AS	set	661
  1939  0294                     _PWM1CON	set	660
  1940  0296                     _PSTR1CON	set	662
  1941  14AF                     _CCP1ASE	set	5295
  1942  031D                     _CCPR5H	set	797
  1943  031C                     _CCPR5L	set	796
  1944  031E                     _CCP5CON	set	798
  1945  0319                     _CCPR4H	set	793
  1946  0318                     _CCPR4L	set	792
  1947  031A                     _CCP4CON	set	794
  1948  0312                     _CCPR3H	set	786
  1949  0311                     _CCPR3L	set	785
  1950  0313                     _CCP3CON	set	787
  1951  041C                     _TMR6	set	1052
  1952  0415                     _TMR4	set	1045
  1953  041E                     _T6CON	set	1054
  1954  0417                     _T4CON	set	1047
  1955                           
  1956                           ; #config settings
  1957  0000                     
  1958                           	psect	cinit
  1959  002D                     start_initialization:	
  1960  002D                     __initialization:	
  1961                           
  1962                           ;initializer for _ui8_selected_lid
  1963  002D  3080               	movlw	128
  1964  002E  00D9               	movwf	__pdataBANK0& (0+127)
  1965                           
  1966                           ; Initialize objects allocated to BANK1
  1967  002F  0021               	movlb	1	; select bank1
  1968                           
  1969                           ;initializer for _ui16_I_cal_Ph3
  1970  0030  3001               	movlw	1
  1971  0031  00E8               	movwf	__pdataBANK1& (0+127)
  1972  0032  01E9               	clrf	(__pdataBANK1+1)& (0+127)
  1973                           
  1974                           ;initializer for _ui16_I_cal_Ph2
  1975  0033  00EA               	movwf	(__pdataBANK1+2)& (0+127)
  1976  0034  01EB               	clrf	(__pdataBANK1+3)& (0+127)
  1977                           
  1978                           ;initializer for _ui16_I_cal_Ph1
  1979  0035  00EC               	movwf	(__pdataBANK1+4)& (0+127)
  1980  0036  01ED               	clrf	(__pdataBANK1+5)& (0+127)
  1981                           
  1982                           ;initializer for _wkpoint
  1983  0037  00EE               	movwf	(__pdataBANK1+6)& (0+127)
  1984                           
  1985                           ; Initialize objects allocated to BANK2
  1986  0038  0022               	movlb	2	; select bank2
  1987                           
  1988                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  1989  0039  3080               	movlw	128
  1990  003A  00E8               	movwf	__pdataBANK2& (0+127)
  1991  003B  3038               	movlw	56
  1992  003C  00E9               	movwf	(__pdataBANK2+1)& (0+127)
  1993  003D  3001               	movlw	1
  1994  003E  00EA               	movwf	(__pdataBANK2+2)& (0+127)
  1995  003F  01EB               	clrf	(__pdataBANK2+3)& (0+127)
  1996                           
  1997                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  1998  0040  00EC               	movwf	(__pdataBANK2+4)& (0+127)
  1999                           
  2000                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  2001  0041  00ED               	movwf	(__pdataBANK2+5)& (0+127)
  2002                           
  2003                           ;initializer for _ui8_failure
  2004  0042  3007               	movlw	7
  2005  0043  00EE               	movwf	(__pdataBANK2+6)& (0+127)
  2006                           
  2007                           ;initializer for _ict_stamp
  2008  0044  3001               	movlw	1
  2009  0045  00EF               	movwf	(__pdataBANK2+7)& (0+127)
  2010  0046  304C               	movlw	low __pbssBANK0
  2011                           
  2012                           ; Clear objects allocated to BITCOMMON
  2013  0047  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2014                           
  2015                           ; Clear objects allocated to COMMON
  2016  0048  01FA               	clrf	__pbssCOMMON& (0+127)
  2017                           
  2018                           ; Clear objects allocated to BANK0
  2019  0049  0084               	movwf	4
  2020  004A  3000               	movlw	high __pbssBANK0
  2021  004B  0085               	movwf	5
  2022  004C  300D               	movlw	13
  2023  004D  3187  276D  3180   	fcall	clear_ram0
  2024                           
  2025                           ; Clear objects allocated to BANK1
  2026  0050  30A0               	movlw	low __pbssBANK1
  2027  0051  0084               	movwf	4
  2028  0052  3000               	movlw	high __pbssBANK1
  2029  0053  0085               	movwf	5
  2030  0054  3048               	movlw	72
  2031  0055  3187  276D  3180   	fcall	clear_ram0
  2032                           
  2033                           ; Clear objects allocated to BANK2
  2034  0058  3020               	movlw	low __pbssBANK2
  2035  0059  0084               	movwf	4
  2036  005A  3001               	movlw	high __pbssBANK2
  2037  005B  0085               	movwf	5
  2038  005C  3048               	movlw	72
  2039  005D  3187  276D  3180   	fcall	clear_ram0
  2040                           
  2041                           ; Clear objects allocated to BANK3
  2042  0060  30A0               	movlw	low __pbssBANK3
  2043  0061  0084               	movwf	4
  2044  0062  3001               	movlw	high __pbssBANK3
  2045  0063  0085               	movwf	5
  2046  0064  304C               	movlw	76
  2047  0065  3187  276D  3180   	fcall	clear_ram0
  2048                           
  2049                           ; Clear objects allocated to BANK4
  2050  0068  3040               	movlw	low __pbssBANK4
  2051  0069  0084               	movwf	4
  2052  006A  3002               	movlw	high __pbssBANK4
  2053  006B  0085               	movwf	5
  2054  006C  301B               	movlw	27
  2055  006D  3187  276D  3180   	fcall	clear_ram0
  2056  0070                     end_of_initialization:	
  2057                           ;End of C runtime variable initialization code
  2058                           
  2059  0070                     __end_of__initialization:	
  2060  0070  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2061  0071  0020               	movlb	0
  2062  0072  2873               	ljmp	_main	;jump to C main() function
  2063  0073                     __pmaintext:	
  2064 ;;
  2065 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2066 ;;
  2067 ;; *************** function _main *****************
  2068 ;; Defined at:
  2069 ;;		line 630 in file "../main.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : B1F/0
  2080 ;;		On exit  : 1F/1
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2083 ;;      Params:         0       0       0       0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0       0
  2085 ;;      Temps:          0       4       0       0       0       0       0       0
  2086 ;;      Totals:         0       4       0       0       0       0       0       0
  2087 ;;Total ram usage:        4 bytes
  2088 ;; Hardware stack levels required when called:    9
  2089 ;; This function calls:
  2090 ;;		_BVH2_Appl_Layer
  2091 ;;		_EOL
  2092 ;;		_Get_Analog_Value
  2093 ;;		_InitMotorRun
  2094 ;;		_InitMotorStop
  2095 ;;		_Receive_Diag
  2096 ;;		_SetDiagAlarm
  2097 ;;		___awdiv
  2098 ;;		_clear_timer
  2099 ;;		_read_eeprom_data
  2100 ;;		_system_init
  2101 ;; This function is called by:
  2102 ;;		Startup code after reset
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _main
  2108  0073                     _main:	
  2109                           
  2110                           ;main.c: 642: system_init( );
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2114  0073  2402  3180         	fcall	_system_init
  2115                           
  2116                           ;main.c: 643: clear_timer( 4 );
  2117  0075  3004               	movlw	4
  2118  0076  2475  3180         	fcall	_clear_timer
  2119                           
  2120                           ;main.c: 644: ui8_lastTaskvalue = 0;
  2121  0078  0022               	movlb	2	; select bank2
  2122  0079  01D2               	clrf	_ui8_lastTaskvalue^(0+256)
  2123  007A                     l13550:	
  2124                           
  2125                           ;main.c: 697: {
  2126                           ;main.c: 699: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  2127  007A  0021               	movlb	1	; select bank1
  2128  007B  0855               	movf	_ui8_Task_Cont1ms^(0+128),w
  2129  007C  0020               	movlb	0	; select bank0
  2130  007D  00C8               	movwf	??_main
  2131  007E  01C9               	clrf	??_main+1
  2132  007F  0849               	movf	??_main+1,w
  2133  0080  00CB               	movwf	??_main+3
  2134  0081  0022               	movlb	2	; select bank2
  2135  0082  0852               	movf	_ui8_lastTaskvalue^(0+256),w
  2136  0083  0020               	movlb	0	; select bank0
  2137  0084  0248               	subwf	??_main,w
  2138  0085  00CA               	movwf	??_main+2
  2139  0086  1C03               	skipc
  2140  0087  03CB               	decf	??_main+3,f
  2141  0088  044B               	iorwf	??_main+3,w
  2142  0089  1903               	btfsc	3,2
  2143  008A  287A               	goto	l13550
  2144                           
  2145                           ;main.c: 701: {
  2146                           ;main.c: 707: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  2147  008B  0021               	movlb	1	; select bank1
  2148  008C  0855               	movf	_ui8_Task_Cont1ms^(0+128),w
  2149  008D  0022               	movlb	2	; select bank2
  2150  008E  00D2               	movwf	_ui8_lastTaskvalue^(0+256)
  2151                           
  2152                           ;main.c: 710: ui8_Task_Cont3ms++;
  2153  008F  0AD4               	incf	_ui8_Task_Cont3ms^(0+256),f
  2154                           
  2155                           ;main.c: 711: ui8_Task_Cont5ms++;
  2156  0090  0AD3               	incf	_ui8_Task_Cont5ms^(0+256),f
  2157                           
  2158                           ;main.c: 712: ui8_Task_Cont100ms++;
  2159  0091  0021               	movlb	1	; select bank1
  2160  0092  0ACC               	incf	_ui8_Task_Cont100ms^(0+128),f
  2161                           
  2162                           ;main.c: 771: if( ui8_error_Flags.bits.B1 == 1)
  2163  0093  1CE6               	btfss	_ui8_error_Flags^(0+128),1
  2164  0094  289A               	goto	l13564
  2165                           
  2166                           ;main.c: 773: {
  2167                           ;main.c: 780: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 2;
  2168  0095  30C8               	movlw	200
  2169  0096  0020               	movlb	0	; select bank0
  2170  0097  009B               	movwf	27	;volatile
  2171                           
  2172                           ;main.c: 781: ui8_duty_cycle_BLDC = 100*5/4;
  2173  0098  307D               	movlw	125
  2174  0099  289D               	goto	L1
  2175  009A                     l13564:	
  2176                           ;main.c: 829: }
  2177                           
  2178                           
  2179                           ;main.c: 832: else
  2180                           ;main.c: 833: {
  2181                           ;main.c: 840: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  2182  009A  307D               	movlw	125
  2183  009B  0020               	movlb	0	; select bank0
  2184  009C  009B               	movwf	27	;volatile
  2185  009D                     L1:	
  2186                           
  2187                           ;main.c: 841: ui8_duty_cycle_BLDC = 100*5/4;
  2188  009D  00D6               	movwf	_ui8_duty_cycle_BLDC
  2189                           
  2190                           ;main.c: 891: }
  2191                           ;main.c: 947: Get_Analog_Value( );
  2192  009E  22A2  3180         	fcall	_Get_Analog_Value
  2193                           
  2194                           ;main.c: 993: if( ui8_Task_Cont3ms > 2 )
  2195  00A0  3003               	movlw	3
  2196  00A1  0022               	movlb	2	; select bank2
  2197  00A2  0254               	subwf	_ui8_Task_Cont3ms^(0+256),w
  2198  00A3  1803               	btfsc	3,0
  2199                           
  2200                           ;main.c: 995: {
  2201                           ;main.c: 997: ui8_Task_Cont3ms = 0;
  2202  00A4  01D4               	clrf	_ui8_Task_Cont3ms^(0+256)
  2203                           
  2204                           ;main.c: 1032: }
  2205                           ;main.c: 1038: if( ui8_Task_Cont5ms > 4 )
  2206  00A5  3005               	movlw	5
  2207  00A6  0253               	subwf	_ui8_Task_Cont5ms^(0+256),w
  2208  00A7  1C03               	skipc
  2209  00A8  296D               	goto	l13630
  2210                           
  2211                           ;main.c: 1040: {
  2212                           ;main.c: 1044: ui8_Task_Cont5ms = 0;
  2213  00A9  01D3               	clrf	_ui8_Task_Cont5ms^(0+256)
  2214  00AA  0064               	clrwdt	;# 
  2215                           
  2216                           ;main.c: 1054: ui8_PWM_dc_mat = 200;
  2217  00AB  30C8               	movlw	200
  2218  00AC  0021               	movlb	1	; select bank1
  2219  00AD  00CF               	movwf	_ui8_PWM_dc_mat^(0+128)
  2220                           
  2221                           ;main.c: 1055: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  2222  00AE  0022               	movlb	2	; select bank2
  2223  00AF  0824               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
  2224  00B0  00A6               	movwf	(_ui16_PWM_Freq_mat+1)^(0+256)
  2225  00B1  0823               	movf	_ui16_PWM_Freq_In^(0+256),w
  2226  00B2  00A5               	movwf	_ui16_PWM_Freq_mat^(0+256)
  2227                           
  2228                           ;main.c: 1056: ui16_Speed_mat = ui16_speed_fil;
  2229  00B3  0021               	movlb	1	; select bank1
  2230  00B4  0835               	movf	(_ui16_speed_fil+1)^(0+128),w
  2231  00B5  0020               	movlb	0	; select bank0
  2232  00B6  00CD               	movwf	_ui16_Speed_mat+1
  2233  00B7  0021               	movlb	1	; select bank1
  2234  00B8  0834               	movf	_ui16_speed_fil^(0+128),w
  2235  00B9  0020               	movlb	0	; select bank0
  2236  00BA  00CC               	movwf	_ui16_Speed_mat
  2237                           
  2238                           ;main.c: 1057: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  2239  00BB  0023               	movlb	3	; select bank3
  2240  00BC  085F               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  2241  00BD  00CF               	movwf	(_ui16_mat_inpTemp+1)^(0+384)
  2242  00BE  085E               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  2243  00BF  00CE               	movwf	_ui16_mat_inpTemp^(0+384)
  2244                           
  2245                           ;main.c: 1058: ui8_Ki_mat = 5;
  2246  00C0  3005               	movlw	5
  2247  00C1  00CC               	movwf	_ui8_Ki_mat^(0+384)
  2248  00C2  01CD               	clrf	(_ui8_Ki_mat+1)^(0+384)
  2249                           
  2250                           ;main.c: 1059: ui8_Kp_mat = 0;
  2251  00C3  0022               	movlb	2	; select bank2
  2252  00C4  01DA               	clrf	_ui8_Kp_mat^(0+256)
  2253                           
  2254                           ;main.c: 1069: if( ui8_error_Flags.bits.B1 == 1 )
  2255  00C5  0021               	movlb	1	; select bank1
  2256  00C6  1CE6               	btfss	_ui8_error_Flags^(0+128),1
  2257  00C7  28E0               	goto	l13592
  2258                           
  2259                           ;main.c: 1071: {
  2260                           ;main.c: 1074: ui16_Speed_demand_mat = ( PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] )>>1;
  2261  00C8  364F               	lsrf	_ui8_PWM_dc_mat^(0+128),w
  2262  00C9  23C3  3180         	fcall	PL6	;call to abstracted procedure
  2263  00CB  3689               	lsrf	9,f
  2264  00CC  0023               	movlb	3	; select bank3
  2265  00CD  00CA               	movwf	_ui16_Speed_demand_mat^(0+384)
  2266  00CE  305F               	movlw	low ((_PWM_trans_table+95)| (0+32768))
  2267  00CF  01CB               	clrf	(_ui16_Speed_demand_mat+1)^(0+384)
  2268                           
  2269                           ;main.c: 1077: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] )>>1;
  2270  00D0  0084               	movwf	4
  2271  00D1  3098               	movlw	high ((_PWM_trans_table+95)| (0+32768))
  2272  00D2  0085               	movwf	5
  2273  00D3  0800               	movf	0,w	;code access
  2274  00D4  3689               	lsrf	9,f
  2275  00D5  00C8               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  2276  00D6  300B               	movlw	low ((_PWM_trans_table+11)| (0+32768))
  2277  00D7  01C9               	clrf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  2278                           
  2279                           ;main.c: 1080: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] )>>1;
  2280  00D8  0084               	movwf	4
  2281  00D9  3098               	movlw	high ((_PWM_trans_table+11)| (0+32768))
  2282  00DA  0085               	movwf	5
  2283  00DB  0800               	movf	0,w	;code access
  2284  00DC  3689               	lsrf	9,f
  2285  00DD  00C6               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  2286  00DE  01C7               	clrf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  2287                           
  2288                           ;main.c: 1082: }
  2289  00DF  2911               	goto	l13594
  2290  00E0                     l13592:	
  2291                           
  2292                           ;main.c: 1085: else
  2293                           ;main.c: 1086: {
  2294                           ;main.c: 1089: ui16_Speed_demand_mat = PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] * 4 / 5;
  2295  00E0  364F               	lsrf	_ui8_PWM_dc_mat^(0+128),w
  2296  00E1  23C3  3180         	fcall	PL6	;call to abstracted procedure
  2297  00E3  0020               	movlb	0	; select bank0
  2298  00E4  00B2               	movwf	___awdiv@dividend
  2299  00E5  3005               	movlw	5
  2300  00E6  01B3               	clrf	___awdiv@dividend+1
  2301  00E7  35B2               	lslf	___awdiv@dividend,f
  2302  00E8  0DB3               	rlf	___awdiv@dividend+1,f
  2303  00E9  35B2               	lslf	___awdiv@dividend,f
  2304  00EA  0DB3               	rlf	___awdiv@dividend+1,f
  2305  00EB  00B0               	movwf	___awdiv@divisor
  2306  00EC  01B1               	clrf	___awdiv@divisor+1
  2307  00ED  2194  3180         	fcall	___awdiv
  2308  00EF  0831               	movf	?___awdiv+1,w
  2309  00F0  0023               	movlb	3	; select bank3
  2310  00F1  00CB               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  2311  00F2  0020               	movlb	0	; select bank0
  2312  00F3  0830               	movf	?___awdiv,w
  2313  00F4  0023               	movlb	3	; select bank3
  2314  00F5  00CA               	movwf	_ui16_Speed_demand_mat^(0+384)
  2315                           
  2316                           ;main.c: 1092: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] ) * 4 / 5;
  2317  00F6  305F               	movlw	low ((_PWM_trans_table+95)| (0+32768))
  2318  00F7  0084               	movwf	4
  2319  00F8  3098               	movlw	high ((_PWM_trans_table+95)| (0+32768))
  2320  00F9  23CB  3180         	fcall	PL24	;call to abstracted procedure
  2321  00FB  2194  3180         	fcall	___awdiv
  2322  00FD  0831               	movf	?___awdiv+1,w
  2323  00FE  0023               	movlb	3	; select bank3
  2324  00FF  00C9               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  2325  0100  0020               	movlb	0	; select bank0
  2326  0101  0830               	movf	?___awdiv,w
  2327  0102  0023               	movlb	3	; select bank3
  2328  0103  00C8               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  2329                           
  2330                           ;main.c: 1095: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] ) * 4 / 5;
  2331  0104  300B               	movlw	low ((_PWM_trans_table+11)| (0+32768))
  2332  0105  0084               	movwf	4
  2333  0106  3098               	movlw	high ((_PWM_trans_table+11)| (0+32768))
  2334  0107  23CB  3180         	fcall	PL24	;call to abstracted procedure
  2335  0109  2194               	fcall	___awdiv
  2336  010A  0831               	movf	?___awdiv+1,w
  2337  010B  0023               	movlb	3	; select bank3
  2338  010C  00C7               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  2339  010D  0020               	movlb	0	; select bank0
  2340  010E  0830               	movf	?___awdiv,w
  2341  010F  0023               	movlb	3	; select bank3
  2342  0110  00C6               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  2343  0111                     l13594:	
  2344                           
  2345                           ;main.c: 1097: }
  2346                           ;main.c: 1132: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  2347  0111  0022               	movlb	2	; select bank2
  2348  0112  0836               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  2349  0113  0020               	movlb	0	; select bank0
  2350  0114  00C9               	movwf	??_main+1
  2351  0115  0022               	movlb	2	; select bank2
  2352  0116  0835               	movf	_ui16_fir_Bat_mittel^(0+256),w
  2353  0117  0020               	movlb	0	; select bank0
  2354  0118  00C8               	movwf	??_main
  2355  0119  36C9               	lsrf	??_main+1,f
  2356  011A  0CC8               	rrf	??_main,f
  2357  011B  36C9               	lsrf	??_main+1,f
  2358  011C  0CC8               	rrf	??_main,f
  2359  011D  0848               	movf	??_main,w
  2360  011E  0021               	movlb	1	; select bank1
  2361  011F  00B2               	movwf	_ui8_BattVolt_mat^(0+128)
  2362  0120  01B3               	clrf	(_ui8_BattVolt_mat+1)^(0+128)
  2363                           
  2364                           ;main.c: 1133: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  2365  0121  0022               	movlb	2	; select bank2
  2366  0122  0834               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  2367  0123  0021               	movlb	1	; select bank1
  2368  0124  00B1               	movwf	(_ui16_mat_Current+1)^(0+128)
  2369  0125  0022               	movlb	2	; select bank2
  2370  0126  0833               	movf	_ui16_fir_IPhase_mean^(0+256),w
  2371  0127  0021               	movlb	1	; select bank1
  2372  0128  00B0               	movwf	_ui16_mat_Current^(0+128)
  2373                           
  2374                           ;main.c: 1134: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  2375  0129  3000               	movlw	0
  2376  012A  187A               	btfsc	_MotorFlags,0
  2377  012B  3001               	movlw	1
  2378  012C  00CE               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  2379                           
  2380                           ;main.c: 1145: bool_ControlLoopMode = 0;
  2381  012D  01CD               	clrf	_bool_ControlLoopMode^(0+128)
  2382                           
  2383                           ;main.c: 1153: BVH2_Appl_Layer( );
  2384  012E  3188  2091  3180   	fcall	_BVH2_Appl_Layer
  2385                           
  2386                           ;main.c: 1156: ui8_ResetMatlab = 0;
  2387  0131  0021               	movlb	1	; select bank1
  2388  0132  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  2389                           
  2390                           ;main.c: 1162: if( ui8_duty_cycle_mat == 0 )
  2391  0133  0022               	movlb	2	; select bank2
  2392  0134  0859               	movf	_ui8_duty_cycle_mat^(0+256),w
  2393  0135  1D03               	btfss	3,2
  2394  0136  293A               	goto	l13610
  2395                           
  2396                           ;main.c: 1164: {
  2397                           ;main.c: 1166: InitMotorStop( );
  2398  0137  2296  3180         	fcall	_InitMotorStop
  2399                           
  2400                           ;main.c: 1169: }
  2401  0139  293C               	goto	l13612
  2402  013A                     l13610:	
  2403                           
  2404                           ;main.c: 1172: else
  2405                           ;main.c: 1173: {
  2406                           ;main.c: 1175: InitMotorRun( );
  2407  013A  23A3  3180         	fcall	_InitMotorRun
  2408  013C                     l13612:	
  2409                           
  2410                           ;main.c: 1178: }
  2411                           ;main.c: 1185: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  2412  013C  0022               	movlb	2	; select bank2
  2413  013D  0858               	movf	_bool_PWMin_err_Alarm^(0+256),w
  2414  013E  3901               	andlw	1
  2415  013F  0021               	movlb	1	; select bank1
  2416  0140  1066               	bcf	_ui8_error_Flags^(0+128),0
  2417  0141  1D03               	skipz
  2418  0142  1466               	bsf	_ui8_error_Flags^(0+128),0
  2419                           
  2420                           ;main.c: 1186: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  2421  0143  085B               	movf	_bool_CPU_TempAlarm^(0+128),w
  2422  0144  3901               	andlw	1
  2423  0145  10E6               	bcf	_ui8_error_Flags^(0+128),1
  2424  0146  1D03               	skipz
  2425  0147  14E6               	bsf	_ui8_error_Flags^(0+128),1
  2426                           
  2427                           ;main.c: 1187: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  2428  0148  0022               	movlb	2	; select bank2
  2429  0149  0857               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  2430  014A  3901               	andlw	1
  2431  014B  0021               	movlb	1	; select bank1
  2432  014C  13E6               	bcf	_ui8_error_Flags^(0+128),7
  2433  014D  1D03               	skipz
  2434  014E  17E6               	bsf	_ui8_error_Flags^(0+128),7
  2435                           
  2436                           ;main.c: 1188: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  2437  014F  0858               	movf	_bool_HighCurrentAlarm^(0+128),w
  2438  0150  3901               	andlw	1
  2439  0151  1166               	bcf	_ui8_error_Flags^(0+128),2
  2440  0152  1D03               	skipz
  2441  0153  1566               	bsf	_ui8_error_Flags^(0+128),2
  2442                           
  2443                           ;main.c: 1189: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  2444  0154  0859               	movf	_bool_MotorStalled^(0+128),w
  2445  0155  3901               	andlw	1
  2446  0156  11E6               	bcf	_ui8_error_Flags^(0+128),3
  2447  0157  1D03               	skipz
  2448  0158  15E6               	bsf	_ui8_error_Flags^(0+128),3
  2449                           
  2450                           ;main.c: 1190: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  2451  0159  085A               	movf	_bool_DryRunningAlarm^(0+128),w
  2452  015A  3901               	andlw	1
  2453  015B  1266               	bcf	_ui8_error_Flags^(0+128),4
  2454  015C  1D03               	skipz
  2455  015D  1666               	bsf	_ui8_error_Flags^(0+128),4
  2456                           
  2457                           ;main.c: 1191: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  2458  015E  0022               	movlb	2	; select bank2
  2459  015F  0856               	movf	_bool_UbatAlarm^(0+256),w
  2460  0160  3901               	andlw	1
  2461  0161  0021               	movlb	1	; select bank1
  2462  0162  1366               	bcf	_ui8_error_Flags^(0+128),6
  2463  0163  1D03               	skipz
  2464  0164  1766               	bsf	_ui8_error_Flags^(0+128),6
  2465                           
  2466                           ;main.c: 1192: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  2467  0165  0022               	movlb	2	; select bank2
  2468  0166  0855               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  2469  0167  3901               	andlw	1
  2470  0168  0021               	movlb	1	; select bank1
  2471  0169  12E6               	bcf	_ui8_error_Flags^(0+128),5
  2472  016A  1D03               	skipz
  2473  016B  16E6               	bsf	_ui8_error_Flags^(0+128),5
  2474                           
  2475                           ;main.c: 1197: MotorFlags.bits.B0 = 0;
  2476  016C  107A               	bcf	_MotorFlags,0
  2477  016D                     l13630:	
  2478                           
  2479                           ;main.c: 1253: }
  2480                           ;main.c: 1259: if( ui8_Task_Cont100ms == 25 )
  2481  016D  3019               	movlw	25
  2482  016E  0021               	movlb	1	; select bank1
  2483  016F  064C               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2484  0170  1D03               	btfss	3,2
  2485  0171  297E               	goto	l13640
  2486                           
  2487                           ;main.c: 1261: {
  2488                           ;main.c: 1272: SetDiagAlarm( );
  2489  0172  2379  3180         	fcall	_SetDiagAlarm
  2490                           
  2491                           ;main.c: 1311: if ((read_eeprom_data(0x55)==0x55) || (RC5 == 0))
  2492  0174  3055               	movlw	85
  2493  0175  225D  3180         	fcall	_read_eeprom_data
  2494  0177  3A55               	xorlw	85
  2495  0178  1D03               	btfss	3,2
  2496  0179  1E8E               	btfss	14,5	;volatile
  2497  017A  297E               	goto	l13640
  2498                           
  2499                           ;main.c: 1320: else
  2500                           ;main.c: 1321: {
  2501                           ;main.c: 1324: Receive_Diag(0x11);
  2502  017B  3011               	movlw	17
  2503  017C  2312  3180         	fcall	_Receive_Diag
  2504  017E                     l13640:	
  2505                           
  2506                           ;main.c: 1328: }
  2507                           ;main.c: 1336: }
  2508                           ;main.c: 1342: if( ui8_Task_Cont100ms == 37 )
  2509  017E  3025               	movlw	37
  2510  017F  0021               	movlb	1	; select bank1
  2511  0180  064C               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2512  0181  1D03               	btfss	3,2
  2513  0182  298D               	goto	l13652
  2514                           
  2515                           ;main.c: 1344: {
  2516                           ;main.c: 1350: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  2517  0183  3055               	movlw	85
  2518  0184  225D  3180         	fcall	_read_eeprom_data
  2519  0186  3A55               	xorlw	85
  2520  0187  1D03               	btfss	3,2
  2521  0188  1E8E               	btfss	14,5	;volatile
  2522  0189  298D               	goto	l13652
  2523                           
  2524                           ;main.c: 1359: else
  2525                           ;main.c: 1360: {
  2526                           ;main.c: 1363: EOL();
  2527  018A  3190  2093  3180   	fcall	_EOL
  2528  018D                     l13652:	
  2529                           
  2530                           ;main.c: 1474: }
  2531                           ;main.c: 1480: if( ui8_Task_Cont100ms > 100 )
  2532  018D  3065               	movlw	101
  2533  018E  0021               	movlb	1	; select bank1
  2534  018F  024C               	subwf	_ui8_Task_Cont100ms^(0+128),w
  2535  0190  1803               	btfsc	3,0
  2536                           
  2537                           ;main.c: 1482: {
  2538                           ;main.c: 1486: ui8_Task_Cont100ms = 0;
  2539  0191  01CC               	clrf	_ui8_Task_Cont100ms^(0+128)
  2540                           
  2541                           ;main.c: 1526: }
  2542                           ;main.c: 1554: bool_start_demand_mat = 0;
  2543  0192  01E5               	clrf	_bool_start_demand_mat^(0+128)
  2544                           
  2545                           ;main.c: 1560: }
  2546  0193  287A               	goto	l13550
  2547  0194                     __end_of_main:	
  2548  0194                     __ptext16:	
  2549 ;; *************** function ___awdiv *****************
  2550 ;; Defined at:
  2551 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  divisor         2   16[BANK0 ] int 
  2554 ;;  dividend        2   18[BANK0 ] int 
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;  quotient        2   22[BANK0 ] int 
  2557 ;;  sign            1   21[BANK0 ] unsigned char 
  2558 ;;  counter         1   20[BANK0 ] unsigned char 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  2   16[BANK0 ] int 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0
  2563 ;; Tracked objects:
  2564 ;;		On entry : 1F/0
  2565 ;;		On exit  : 1F/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2568 ;;      Params:         0       4       0       0       0       0       0       0
  2569 ;;      Locals:         0       4       0       0       0       0       0       0
  2570 ;;      Temps:          0       0       0       0       0       0       0       0
  2571 ;;      Totals:         0       8       0       0       0       0       0       0
  2572 ;;Total ram usage:        8 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    4
  2575 ;; This function calls:
  2576 ;;		Nothing
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function ___awdiv
  2584  0194                     ___awdiv:	
  2585                           
  2586                           ;incstack = 0
  2587                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2588  0194  01B5               	clrf	___awdiv@sign
  2589  0195  1FB1               	btfss	___awdiv@divisor+1,7
  2590  0196  299E               	goto	l9056
  2591  0197  09B0               	comf	___awdiv@divisor,f
  2592  0198  09B1               	comf	___awdiv@divisor+1,f
  2593  0199  0AB0               	incf	___awdiv@divisor,f
  2594  019A  1903               	skipnz
  2595  019B  0AB1               	incf	___awdiv@divisor+1,f
  2596  019C  01B5               	clrf	___awdiv@sign
  2597  019D  0AB5               	incf	___awdiv@sign,f
  2598  019E                     l9056:	
  2599  019E  1FB3               	btfss	___awdiv@dividend+1,7
  2600  019F  29A7               	goto	l9062
  2601  01A0  09B2               	comf	___awdiv@dividend,f
  2602  01A1  09B3               	comf	___awdiv@dividend+1,f
  2603  01A2  0AB2               	incf	___awdiv@dividend,f
  2604  01A3  1903               	skipnz
  2605  01A4  0AB3               	incf	___awdiv@dividend+1,f
  2606  01A5  3001               	movlw	1
  2607  01A6  06B5               	xorwf	___awdiv@sign,f
  2608  01A7                     l9062:	
  2609  01A7  01B6               	clrf	___awdiv@quotient
  2610  01A8  01B7               	clrf	___awdiv@quotient+1
  2611  01A9  0830               	movf	___awdiv@divisor,w
  2612  01AA  0431               	iorwf	___awdiv@divisor+1,w
  2613  01AB  1903               	btfsc	3,2
  2614  01AC  29C7               	goto	l9084
  2615  01AD  01B4               	clrf	___awdiv@counter
  2616  01AE                     L13:	
  2617  01AE  0AB4               	incf	___awdiv@counter,f
  2618  01AF  1BB1               	btfsc	___awdiv@divisor+1,7
  2619  01B0  29B4               	goto	l9072
  2620  01B1  35B0               	lslf	___awdiv@divisor,f
  2621  01B2  0DB1               	rlf	___awdiv@divisor+1,f
  2622  01B3  29AE               	goto	L13
  2623  01B4                     l9072:	
  2624  01B4  35B6               	lslf	___awdiv@quotient,f
  2625  01B5  0DB7               	rlf	___awdiv@quotient+1,f
  2626  01B6  0831               	movf	___awdiv@divisor+1,w
  2627  01B7  0233               	subwf	___awdiv@dividend+1,w
  2628  01B8  1D03               	skipz
  2629  01B9  29BC               	goto	u6985
  2630  01BA  0830               	movf	___awdiv@divisor,w
  2631  01BB  0232               	subwf	___awdiv@dividend,w
  2632  01BC                     u6985:	
  2633  01BC  1C03               	skipc
  2634  01BD  29C3               	goto	l9080
  2635  01BE  0830               	movf	___awdiv@divisor,w
  2636  01BF  02B2               	subwf	___awdiv@dividend,f
  2637  01C0  0831               	movf	___awdiv@divisor+1,w
  2638  01C1  3BB3               	subwfb	___awdiv@dividend+1,f
  2639  01C2  1436               	bsf	___awdiv@quotient,0
  2640  01C3                     l9080:	
  2641  01C3  36B1               	lsrf	___awdiv@divisor+1,f
  2642  01C4  0CB0               	rrf	___awdiv@divisor,f
  2643  01C5  0BB4               	decfsz	___awdiv@counter,f
  2644  01C6  29B4               	goto	l9072
  2645  01C7                     l9084:	
  2646  01C7  0835               	movf	___awdiv@sign,w
  2647  01C8  1903               	btfsc	3,2
  2648  01C9  29CF               	goto	l9088
  2649  01CA  09B6               	comf	___awdiv@quotient,f
  2650  01CB  09B7               	comf	___awdiv@quotient+1,f
  2651  01CC  0AB6               	incf	___awdiv@quotient,f
  2652  01CD  1903               	skipnz
  2653  01CE  0AB7               	incf	___awdiv@quotient+1,f
  2654  01CF                     l9088:	
  2655  01CF  0837               	movf	___awdiv@quotient+1,w
  2656  01D0  00B1               	movwf	?___awdiv+1
  2657  01D1  0836               	movf	___awdiv@quotient,w
  2658  01D2  00B0               	movwf	?___awdiv
  2659  01D3  0008               	return
  2660  01D4                     __end_of___awdiv:	
  2661  01D4                     __ptext11:	
  2662 ;; *************** function _I_calibrationInit *****************
  2663 ;; Defined at:
  2664 ;;		line 174 in file "../main.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0, pclath, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 1F/3
  2675 ;;		On exit  : 1F/2
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2678 ;;      Params:         0       0       0       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0       0
  2680 ;;      Temps:          0       1       0       0       0       0       0       0
  2681 ;;      Totals:         0       1       0       0       0       0       0       0
  2682 ;;Total ram usage:        1 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    5
  2685 ;; This function calls:
  2686 ;;		_ADC_Read
  2687 ;;		_ADC_Wait
  2688 ;;		_read_eeprom_data
  2689 ;; This function is called by:
  2690 ;;		_system_init
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           
  2695                           ;psect for function _I_calibrationInit
  2696  01D4                     _I_calibrationInit:	
  2697                           
  2698                           ;main.c: 178: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  2699                           
  2700                           ;incstack = 0
  2701                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  2702  01D4  3003               	movlw	3
  2703  01D5  225D  3180         	fcall	_read_eeprom_data
  2704  01D7  3A00               	xorlw	0
  2705  01D8  1903               	skipnz
  2706  01D9  29EE               	goto	l10036
  2707  01DA  3003               	movlw	3
  2708  01DB  225D  3180         	fcall	_read_eeprom_data
  2709  01DD  3AFF               	xorlw	255
  2710  01DE  1903               	skipnz
  2711  01DF  29EE               	goto	l10036
  2712                           
  2713                           ;main.c: 180: {
  2714                           ;main.c: 182: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03 
      +                          );
  2715  01E0  3003               	movlw	3
  2716  01E1  225D  3180         	fcall	_read_eeprom_data
  2717  01E3  00B3               	movwf	??_I_calibrationInit
  2718  01E4  3002               	movlw	2
  2719  01E5  225D  3180         	fcall	_read_eeprom_data
  2720  01E7  0021               	movlb	1	; select bank1
  2721  01E8  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  2722  01E9  0020               	movlb	0	; select bank0
  2723  01EA  0833               	movf	??_I_calibrationInit,w
  2724  01EB  0021               	movlb	1	; select bank1
  2725  01EC  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
  2726                           
  2727                           ;main.c: 185: }
  2728  01ED  29F2               	goto	l10038
  2729  01EE                     l10036:	
  2730                           
  2731                           ;main.c: 188: else
  2732                           ;main.c: 189: {
  2733                           ;main.c: 191: ui16_I_cal_Ph1 = 0x0100;
  2734  01EE  0021               	movlb	1	; select bank1
  2735  01EF  3001               	movlw	1
  2736  01F0  01EC               	clrf	_ui16_I_cal_Ph1^(0+128)
  2737  01F1  00ED               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
  2738  01F2                     l10038:	
  2739                           
  2740                           ;main.c: 194: }
  2741                           ;main.c: 197: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 0x05 ) != 0xFF)
  2742  01F2  3005               	movlw	5
  2743  01F3  225D  3180         	fcall	_read_eeprom_data
  2744  01F5  3A00               	xorlw	0
  2745  01F6  1903               	skipnz
  2746  01F7  2A0C               	goto	l10044
  2747  01F8  3005               	movlw	5
  2748  01F9  225D  3180         	fcall	_read_eeprom_data
  2749  01FB  3AFF               	xorlw	255
  2750  01FC  1903               	skipnz
  2751  01FD  2A0C               	goto	l10044
  2752                           
  2753                           ;main.c: 199: {
  2754                           ;main.c: 201: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05 
      +                          );
  2755  01FE  3005               	movlw	5
  2756  01FF  225D  3180         	fcall	_read_eeprom_data
  2757  0201  00B3               	movwf	??_I_calibrationInit
  2758  0202  3004               	movlw	4
  2759  0203  225D  3180         	fcall	_read_eeprom_data
  2760  0205  0021               	movlb	1	; select bank1
  2761  0206  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  2762  0207  0020               	movlb	0	; select bank0
  2763  0208  0833               	movf	??_I_calibrationInit,w
  2764  0209  0021               	movlb	1	; select bank1
  2765  020A  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  2766                           
  2767                           ;main.c: 204: }
  2768  020B  2A10               	goto	l10046
  2769  020C                     l10044:	
  2770                           
  2771                           ;main.c: 207: else
  2772                           ;main.c: 208: {
  2773                           ;main.c: 210: ui16_I_cal_Ph2 = 0x0100;
  2774  020C  0021               	movlb	1	; select bank1
  2775  020D  3001               	movlw	1
  2776  020E  01EA               	clrf	_ui16_I_cal_Ph2^(0+128)
  2777  020F  00EB               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
  2778  0210                     l10046:	
  2779                           
  2780                           ;main.c: 213: }
  2781                           ;main.c: 216: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 0x07 ) != 0xFF)
  2782  0210  3007               	movlw	7
  2783  0211  225D  3180         	fcall	_read_eeprom_data
  2784  0213  3A00               	xorlw	0
  2785  0214  1903               	skipnz
  2786  0215  2A2A               	goto	l10052
  2787  0216  3007               	movlw	7
  2788  0217  225D  3180         	fcall	_read_eeprom_data
  2789  0219  3AFF               	xorlw	255
  2790  021A  1903               	skipnz
  2791  021B  2A2A               	goto	l10052
  2792                           
  2793                           ;main.c: 218: {
  2794                           ;main.c: 220: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07 
      +                          );
  2795  021C  3007               	movlw	7
  2796  021D  225D  3180         	fcall	_read_eeprom_data
  2797  021F  00B3               	movwf	??_I_calibrationInit
  2798  0220  3006               	movlw	6
  2799  0221  225D  3180         	fcall	_read_eeprom_data
  2800  0223  0021               	movlb	1	; select bank1
  2801  0224  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  2802  0225  0020               	movlb	0	; select bank0
  2803  0226  0833               	movf	??_I_calibrationInit,w
  2804  0227  0021               	movlb	1	; select bank1
  2805  0228  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
  2806                           
  2807                           ;main.c: 222: }
  2808  0229  2A2E               	goto	l10054
  2809  022A                     l10052:	
  2810                           
  2811                           ;main.c: 225: else
  2812                           ;main.c: 226: {
  2813                           ;main.c: 228: ui16_I_cal_Ph3 = 0x0100;
  2814  022A  0021               	movlb	1	; select bank1
  2815  022B  3001               	movlw	1
  2816  022C  01E8               	clrf	_ui16_I_cal_Ph3^(0+128)
  2817  022D  00E9               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
  2818  022E                     l10054:	
  2819                           
  2820                           ;main.c: 231: }
  2821                           ;main.c: 324: LATC2 = 0;
  2822  022E  0022               	movlb	2	; select bank2
  2823  022F  110E               	bcf	14,2	;volatile
  2824                           
  2825                           ;main.c: 325: LATB2 = 0;
  2826  0230  110D               	bcf	13,2	;volatile
  2827                           
  2828                           ;main.c: 326: LATB1 = 0;
  2829  0231  108D               	bcf	13,1	;volatile
  2830                           
  2831                           ;main.c: 327: LATC = LATC | 0b00011010;
  2832  0232  080E               	movf	14,w	;volatile
  2833  0233  381A               	iorlw	26
  2834  0234  008E               	movwf	14	;volatile
  2835                           
  2836                           ;main.c: 329: ADC_Wait();
  2837  0235  2268  3180         	fcall	_ADC_Wait
  2838                           
  2839                           ;main.c: 330: ADC_Wait();
  2840  0237  2268  3180         	fcall	_ADC_Wait
  2841                           
  2842                           ;main.c: 332: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  2843  0239  3011               	movlw	17
  2844  023A  0021               	movlb	1	; select bank1
  2845  023B  009D               	movwf	29	;volatile
  2846                           
  2847                           ;main.c: 333: ADC_Wait();
  2848  023C  2268  3180         	fcall	_ADC_Wait
  2849                           
  2850                           ;main.c: 334: ( GO_nDONE = 1 );
  2851  023E  0021               	movlb	1	; select bank1
  2852  023F  149D               	bsf	29,1	;volatile
  2853                           
  2854                           ;main.c: 337: ui8_current_cal[2] = ADC_Read();
  2855  0240  2281  3180         	fcall	_ADC_Read
  2856  0242  0830               	movf	?_ADC_Read,w
  2857  0243  0022               	movlb	2	; select bank2
  2858  0244  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  2859                           
  2860                           ;main.c: 339: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  2861  0245  3035               	movlw	53
  2862  0246  0021               	movlb	1	; select bank1
  2863  0247  009D               	movwf	29	;volatile
  2864                           
  2865                           ;main.c: 340: ADC_Wait();
  2866  0248  2268  3180         	fcall	_ADC_Wait
  2867                           
  2868                           ;main.c: 341: ( GO_nDONE = 1 );
  2869  024A  0021               	movlb	1	; select bank1
  2870  024B  149D               	bsf	29,1	;volatile
  2871                           
  2872                           ;main.c: 344: ui8_current_cal[1] = ADC_Read();
  2873  024C  2281  3180         	fcall	_ADC_Read
  2874  024E  0830               	movf	?_ADC_Read,w
  2875  024F  0022               	movlb	2	; select bank2
  2876  0250  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  2877                           
  2878                           ;main.c: 346: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  2879  0251  3009               	movlw	9
  2880  0252  0021               	movlb	1	; select bank1
  2881  0253  009D               	movwf	29	;volatile
  2882                           
  2883                           ;main.c: 347: ADC_Wait();
  2884  0254  2268  3180         	fcall	_ADC_Wait
  2885                           
  2886                           ;main.c: 348: ( GO_nDONE = 1 );
  2887  0256  0021               	movlb	1	; select bank1
  2888  0257  149D               	bsf	29,1	;volatile
  2889                           
  2890                           ;main.c: 351: ui8_current_cal[0] = ADC_Read();
  2891  0258  2281               	fcall	_ADC_Read
  2892  0259  0830               	movf	?_ADC_Read,w
  2893  025A  0022               	movlb	2	; select bank2
  2894  025B  00A0               	movwf	_ui8_current_cal^(0+256)
  2895  025C  0008               	return
  2896  025D                     __end_of_I_calibrationInit:	
  2897  025D                     __ptext26:	
  2898 ;; *************** function _read_eeprom_data *****************
  2899 ;; Defined at:
  2900 ;;		line 52 in file "../eeprom.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  ui8_adress      1    wreg     unsigned char 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  ui8_adress      1   16[BANK0 ] unsigned char 
  2905 ;;  ui8_adress_d    1   17[BANK0 ] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      unsigned char 
  2908 ;; Registers used:
  2909 ;;		wreg
  2910 ;; Tracked objects:
  2911 ;;		On entry : 18/2
  2912 ;;		On exit  : 1F/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2915 ;;      Params:         0       0       0       0       0       0       0       0
  2916 ;;      Locals:         0       2       0       0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0
  2918 ;;      Totals:         0       2       0       0       0       0       0       0
  2919 ;;Total ram usage:        2 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    4
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_EOL
  2926 ;;		_I_calibrationInit
  2927 ;;		_init_ports
  2928 ;;		_main
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           
  2933                           ;psect for function _read_eeprom_data
  2934  025D                     _read_eeprom_data:	
  2935                           
  2936                           ;incstack = 0
  2937                           ; Regs used in _read_eeprom_data: [wreg]
  2938                           ;read_eeprom_data@ui8_adress stored from wreg
  2939  025D  0020               	movlb	0	; select bank0
  2940  025E  00B0               	movwf	read_eeprom_data@ui8_adress
  2941                           
  2942                           ;eeprom.c: 56: unsigned char ui8_adress_data;
  2943                           ;eeprom.c: 58: EEADRL = ui8_adress;
  2944  025F  0023               	movlb	3	; select bank3
  2945  0260  0091               	movwf	17	;volatile
  2946                           
  2947                           ;eeprom.c: 59: EEPGD = 0;
  2948  0261  1395               	bcf	21,7	;volsfr
  2949                           
  2950                           ;eeprom.c: 60: CFGS = 0;
  2951  0262  1315               	bcf	21,6	;volsfr
  2952                           
  2953                           ;eeprom.c: 61: RD = 1;
  2954  0263  1415               	bsf	21,0	;volsfr
  2955                           
  2956                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  2957  0264  0813               	movf	19,w	;volatile
  2958  0265  0020               	movlb	0	; select bank0
  2959  0266  00B1               	movwf	read_eeprom_data@ui8_adress_data
  2960                           
  2961                           ;eeprom.c: 64: return ui8_adress_data;
  2962  0267  0008               	return
  2963  0268                     __end_of_read_eeprom_data:	
  2964  0268                     __ptext39:	
  2965 ;; *************** function _ADC_Wait *****************
  2966 ;; Defined at:
  2967 ;;		line 128 in file "../adc.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		None
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/2
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2981 ;;      Params:         0       0       0       0       0       0       0       0
  2982 ;;      Locals:         0       0       0       0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0
  2984 ;;      Totals:         0       0       0       0       0       0       0       0
  2985 ;;Total ram usage:        0 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    4
  2988 ;; This function calls:
  2989 ;;		Nothing
  2990 ;; This function is called by:
  2991 ;;		_FILTER_Init
  2992 ;;		_EOL
  2993 ;;		_I_calibrationInit
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           
  2998                           ;psect for function _ADC_Wait
  2999  0268                     _ADC_Wait:	
  3000                           
  3001                           ;adc.c: 133: __nop();
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _ADC_Wait: []
  3005  0268  0000               	nop
  3006                           
  3007                           ;adc.c: 134: __nop();
  3008  0269  0000               	nop
  3009                           
  3010                           ;adc.c: 135: __nop();
  3011  026A  0000               	nop
  3012                           
  3013                           ;adc.c: 136: __nop();
  3014  026B  0000               	nop
  3015                           
  3016                           ;adc.c: 137: __nop();
  3017  026C  0000               	nop
  3018                           
  3019                           ;adc.c: 138: __nop();
  3020  026D  0000               	nop
  3021                           
  3022                           ;adc.c: 139: __nop();
  3023  026E  0000               	nop
  3024                           
  3025                           ;adc.c: 140: __nop();
  3026  026F  0000               	nop
  3027                           
  3028                           ;adc.c: 142: __nop();
  3029  0270  0000               	nop
  3030                           
  3031                           ;adc.c: 143: __nop();
  3032  0271  0000               	nop
  3033                           
  3034                           ;adc.c: 144: __nop();
  3035  0272  0000               	nop
  3036                           
  3037                           ;adc.c: 145: __nop();
  3038  0273  0000               	nop
  3039                           
  3040                           ;adc.c: 146: __nop();
  3041  0274  0000               	nop
  3042                           
  3043                           ;adc.c: 147: __nop();
  3044  0275  0000               	nop
  3045                           
  3046                           ;adc.c: 148: __nop();
  3047  0276  0000               	nop
  3048                           
  3049                           ;adc.c: 149: __nop();
  3050  0277  0000               	nop
  3051                           
  3052                           ;adc.c: 151: __nop();
  3053  0278  0000               	nop
  3054                           
  3055                           ;adc.c: 152: __nop();
  3056  0279  0000               	nop
  3057                           
  3058                           ;adc.c: 153: __nop();
  3059  027A  0000               	nop
  3060                           
  3061                           ;adc.c: 154: __nop();
  3062  027B  0000               	nop
  3063                           
  3064                           ;adc.c: 155: __nop();
  3065  027C  0000               	nop
  3066                           
  3067                           ;adc.c: 156: __nop();
  3068  027D  0000               	nop
  3069                           
  3070                           ;adc.c: 157: __nop();
  3071  027E  0000               	nop
  3072                           
  3073                           ;adc.c: 158: __nop();
  3074  027F  0000               	nop
  3075  0280  0008               	return
  3076  0281                     __end_of_ADC_Wait:	
  3077  0281                     __ptext40:	
  3078 ;; *************** function _ADC_Read *****************
  3079 ;; Defined at:
  3080 ;;		line 175 in file "../adc.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  i               1   18[BANK0 ] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  2   16[BANK0 ] unsigned int 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/1
  3091 ;;		On exit  : 1F/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3094 ;;      Params:         0       2       0       0       0       0       0       0
  3095 ;;      Locals:         0       1       0       0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0
  3097 ;;      Totals:         0       3       0       0       0       0       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    4
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_FILTER_Init
  3105 ;;		_EOL
  3106 ;;		_I_calibrationInit
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           
  3111                           ;psect for function _ADC_Read
  3112  0281                     _ADC_Read:	
  3113                           
  3114                           ;adc.c: 179: unsigned char i;
  3115                           ;adc.c: 180: i = 0;
  3116                           
  3117                           ;incstack = 0
  3118                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  3119  0281  0020               	movlb	0	; select bank0
  3120  0282  01B2               	clrf	ADC_Read@i
  3121  0283                     l69:	
  3122                           ;adc.c: 182: while( GO_nDONE )
  3123                           
  3124  0283  0021               	movlb	1	; select bank1
  3125  0284  1C9D               	btfss	29,1	;volatile
  3126  0285  2A8C               	goto	l9764
  3127                           
  3128                           ;adc.c: 184: {
  3129                           ;adc.c: 186: i++;
  3130  0286  0020               	movlb	0	; select bank0
  3131  0287  3041               	movlw	65
  3132  0288  0AB2               	incf	ADC_Read@i,f
  3133                           
  3134                           ;adc.c: 189: if( i > 64 )
  3135  0289  0232               	subwf	ADC_Read@i,w
  3136  028A  1C03               	skipc
  3137  028B  2A83               	goto	l69
  3138  028C                     l9764:	
  3139                           
  3140                           ;adc.c: 195: }
  3141                           ;adc.c: 198: }
  3142                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  3143  028C  0021               	movlb	1	; select bank1
  3144                           
  3145                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  3146                           
  3147                           ;adc.c: 204: return analog_value.w;
  3148  028D  319F  278F         	fcall	PL114	;call to abstracted procedure
  3149  028F  0020               	movlb	0	; select bank0
  3150  0290  00B1               	movwf	?_ADC_Read+1
  3151  0291  0021               	movlb	1	; select bank1
  3152  0292  083C               	movf	_analog_value^(0+128),w	;volatile
  3153  0293  0020               	movlb	0	; select bank0
  3154  0294  00B0               	movwf	?_ADC_Read
  3155  0295  0008               	return
  3156  0296                     __end_of_ADC_Read:	
  3157  0296                     __ptext38:	
  3158 ;; *************** function _InitMotorStop *****************
  3159 ;; Defined at:
  3160 ;;		line 2221 in file "../bldc.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;		None
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;		None
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      void 
  3167 ;; Registers used:
  3168 ;;		status,2
  3169 ;; Tracked objects:
  3170 ;;		On entry : 1C/2
  3171 ;;		On exit  : 18/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3174 ;;      Params:         0       0       0       0       0       0       0       0
  3175 ;;      Locals:         0       0       0       0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0       0
  3177 ;;      Totals:         0       0       0       0       0       0       0       0
  3178 ;;Total ram usage:        0 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    4
  3181 ;; This function calls:
  3182 ;;		Nothing
  3183 ;; This function is called by:
  3184 ;;		_EOL
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           
  3190                           ;psect for function _InitMotorStop
  3191  0296                     _InitMotorStop:	
  3192                           
  3193                           ;bldc.c: 2226: if( 1 == MotorFlags.bits.B6 )
  3194                           
  3195                           ;incstack = 0
  3196                           ; Regs used in _InitMotorStop: [status,2]
  3197  0296  1F7A               	btfss	_MotorFlags,6
  3198  0297  0008               	return
  3199                           
  3200                           ;bldc.c: 2229: {
  3201                           ;bldc.c: 2231: LATC1 = 0;
  3202  0298  0022               	movlb	2	; select bank2
  3203  0299  108E               	bcf	14,1	;volatile
  3204                           
  3205                           ;bldc.c: 2232: LATC3 = 0;
  3206  029A  118E               	bcf	14,3	;volatile
  3207                           
  3208                           ;bldc.c: 2233: LATC4 = 0;
  3209  029B  120E               	bcf	14,4	;volatile
  3210                           
  3211                           ;bldc.c: 2235: CCP1ASE = 0;
  3212  029C  0025               	movlb	5	; select bank5
  3213  029D  1395               	bcf	21,7	;volatile
  3214                           
  3215                           ;bldc.c: 2236: CCPR1L = 0;
  3216  029E  0191               	clrf	17	;volatile
  3217                           
  3218                           ;bldc.c: 2237: MotorFlags.bits.B6 = 0;
  3219  029F  137A               	bcf	_MotorFlags,6
  3220                           
  3221                           ;bldc.c: 2238: MotorFlags.bits.B7 = 0;
  3222  02A0  13FA               	bcf	_MotorFlags,7
  3223  02A1  0008               	return
  3224  02A2                     __end_of_InitMotorStop:	
  3225  02A2                     __ptext20:	
  3226 ;; *************** function _Get_Analog_Value *****************
  3227 ;; Defined at:
  3228 ;;		line 442 in file "../adc.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;		None
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;		None
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  1    wreg      void 
  3235 ;; Registers used:
  3236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 1F/0
  3239 ;;		On exit  : 1F/3
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3242 ;;      Params:         0       0       0       0       0       0       0       0
  3243 ;;      Locals:         0       0       0       0       0       0       0       0
  3244 ;;      Temps:          0       0       0       0       0       0       0       0
  3245 ;;      Totals:         0       0       0       0       0       0       0       0
  3246 ;;Total ram usage:        0 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    5
  3249 ;; This function calls:
  3250 ;;		_FILTER_IPhase
  3251 ;;		_FILTER_Temp
  3252 ;;		_FILTER_Ubat
  3253 ;; This function is called by:
  3254 ;;		_main
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _Get_Analog_Value
  3260  02A2                     _Get_Analog_Value:	
  3261                           
  3262                           ;adc.c: 446: FILTER_Ubat( );
  3263                           
  3264                           ;incstack = 0
  3265                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3266  02A2  22A7  3180         	fcall	_FILTER_Ubat
  3267                           
  3268                           ;adc.c: 447: FILTER_IPhase( );
  3269  02A4  23DF  3180         	fcall	_FILTER_IPhase
  3270                           
  3271                           ;adc.c: 448: FILTER_Temp( );
  3272  02A6  2EE5               	ljmp	l6400
  3273  02A7                     __end_of_Get_Analog_Value:	
  3274  02A7                     __ptext21:	
  3275 ;; *************** function _FILTER_Ubat *****************
  3276 ;; Defined at:
  3277 ;;		line 264 in file "../adc.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3286 ;; Tracked objects:
  3287 ;;		On entry : 1F/0
  3288 ;;		On exit  : 1D/1
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3291 ;;      Params:         0       0       0       0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0       0       0       0
  3293 ;;      Temps:          0      12       0       0       0       0       0       0
  3294 ;;      Totals:         0      12       0       0       0       0       0       0
  3295 ;;Total ram usage:       12 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    4
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_Get_Analog_Value
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           
  3306                           ;psect for function _FILTER_Ubat
  3307  02A7                     _FILTER_Ubat:	
  3308                           
  3309                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  3310                           
  3311                           ;incstack = 0
  3312                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  3313  02A7  2589  3180         	fcall	PL94	;call to abstracted procedure
  3314  02A9  0020               	movlb	0	; select bank0
  3315  02AA  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  3316  02AB  3FC0               	movwi [0]fsr1
  3317  02AC  0858               	movf	_ui16_Ubat_bldc+1,w	;volatile
  3318  02AD  3FC1               	movwi [1]fsr1
  3319                           
  3320                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  3321  02AE  304E               	movlw	((low (_inputArray1| (0+512)))& (0+255)+14)
  3322  02AF  0086               	movwf	6
  3323  02B0  304C               	movlw	((low (_inputArray1| (0+512)))& (0+255)+12)
  3324  02B1  0084               	movwf	4
  3325  02B2  3002               	movlw	2	; select bank4/5
  3326  02B3  0085               	movwf	5
  3327  02B4  0024               	movlb	4	; select bank4
  3328  02B5  0844               	movf	(_inputArray1^(0+512)+4),w
  3329  02B6  0742               	addwf	(_inputArray1^(0+512)+2),w
  3330  02B7  0020               	movlb	0	; select bank0
  3331  02B8  00B0               	movwf	??_FILTER_Ubat
  3332  02B9  0024               	movlb	4	; select bank4
  3333  02BA  0845               	movf	((_inputArray1+1)^(0+512)+4),w
  3334  02BB  3D43               	addwfc	((_inputArray1+1)^(0+512)+2),w
  3335  02BC  0020               	movlb	0	; select bank0
  3336  02BD  00B1               	movwf	??_FILTER_Ubat+1
  3337  02BE  0024               	movlb	4	; select bank4
  3338  02BF  0846               	movf	(_inputArray1^(0+512)+6),w
  3339  02C0  0020               	movlb	0	; select bank0
  3340  02C1  0730               	addwf	??_FILTER_Ubat,w
  3341  02C2  00B2               	movwf	??_FILTER_Ubat+2
  3342  02C3  0024               	movlb	4	; select bank4
  3343  02C4  0847               	movf	((_inputArray1+1)^(0+512)+6),w
  3344  02C5  0020               	movlb	0	; select bank0
  3345  02C6  3D31               	addwfc	??_FILTER_Ubat+1,w
  3346  02C7  00B3               	movwf	??_FILTER_Ubat+3
  3347  02C8  0024               	movlb	4	; select bank4
  3348  02C9  0848               	movf	(_inputArray1^(0+512)+8),w
  3349  02CA  0020               	movlb	0	; select bank0
  3350  02CB  0732               	addwf	??_FILTER_Ubat+2,w
  3351  02CC  00B4               	movwf	??_FILTER_Ubat+4
  3352  02CD  0024               	movlb	4	; select bank4
  3353  02CE  0849               	movf	((_inputArray1+1)^(0+512)+8),w
  3354  02CF  0020               	movlb	0	; select bank0
  3355  02D0  3D33               	addwfc	??_FILTER_Ubat+3,w
  3356  02D1  00B5               	movwf	??_FILTER_Ubat+5
  3357  02D2  0024               	movlb	4	; select bank4
  3358  02D3  084A               	movf	(_inputArray1^(0+512)+10),w
  3359  02D4  0020               	movlb	0	; select bank0
  3360  02D5  0734               	addwf	??_FILTER_Ubat+4,w
  3361  02D6  00B6               	movwf	??_FILTER_Ubat+6
  3362  02D7  0024               	movlb	4	; select bank4
  3363  02D8  084B               	movf	((_inputArray1+1)^(0+512)+10),w
  3364  02D9  0020               	movlb	0	; select bank0
  3365  02DA  3D35               	addwfc	??_FILTER_Ubat+5,w
  3366  02DB  00B7               	movwf	??_FILTER_Ubat+7
  3367  02DC  3F00               	moviw [0]fsr0
  3368  02DD  0736               	addwf	??_FILTER_Ubat+6,w
  3369  02DE  00B8               	movwf	??_FILTER_Ubat+8
  3370  02DF  3F01               	moviw [1]fsr0
  3371  02E0  3D37               	addwfc	??_FILTER_Ubat+7,w
  3372  02E1  00B9               	movwf	??_FILTER_Ubat+9
  3373  02E2  3F40               	moviw [0]fsr1
  3374  02E3  0738               	addwf	??_FILTER_Ubat+8,w
  3375  02E4  00BA               	movwf	??_FILTER_Ubat+10
  3376  02E5  3F41               	moviw [1]fsr1
  3377  02E6  3D39               	addwfc	??_FILTER_Ubat+9,w
  3378  02E7  00BB               	movwf	??_FILTER_Ubat+11
  3379  02E8  0024               	movlb	4	; select bank4
  3380  02E9  0840               	movf	_inputArray1^(0+512),w
  3381  02EA  0020               	movlb	0	; select bank0
  3382  02EB  073A               	addwf	??_FILTER_Ubat+10,w
  3383  02EC  0023               	movlb	3	; select bank3
  3384  02ED  00E4               	movwf	_filter1^(0+384)
  3385  02EE  0024               	movlb	4	; select bank4
  3386  02EF  0841               	movf	(_inputArray1+1)^(0+512),w
  3387  02F0  0020               	movlb	0	; select bank0
  3388  02F1  3D3B               	addwfc	??_FILTER_Ubat+11,w
  3389  02F2  0023               	movlb	3	; select bank3
  3390  02F3  00E5               	movwf	(_filter1+1)^(0+384)
  3391                           
  3392                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  3393  02F4  0020               	movlb	0	; select bank0
  3394  02F5  00B1               	movwf	??_FILTER_Ubat+1
  3395  02F6  0023               	movlb	3	; select bank3
  3396  02F7  0864               	movf	_filter1^(0+384),w
  3397  02F8  0020               	movlb	0	; select bank0
  3398  02F9  00B0               	movwf	??_FILTER_Ubat
  3399  02FA  36B1               	lsrf	??_FILTER_Ubat+1,f
  3400  02FB  0CB0               	rrf	??_FILTER_Ubat,f
  3401  02FC  36B1               	lsrf	??_FILTER_Ubat+1,f
  3402  02FD  0CB0               	rrf	??_FILTER_Ubat,f
  3403  02FE  36B1               	lsrf	??_FILTER_Ubat+1,f
  3404  02FF  0CB0               	rrf	??_FILTER_Ubat,f
  3405  0300  0830               	movf	??_FILTER_Ubat,w
  3406  0301  0022               	movlb	2	; select bank2
  3407  0302  00B5               	movwf	_ui16_fir_Bat_mittel^(0+256)
  3408  0303  0020               	movlb	0	; select bank0
  3409  0304  0831               	movf	??_FILTER_Ubat+1,w
  3410  0305  0022               	movlb	2	; select bank2
  3411  0306  00B6               	movwf	(_ui16_fir_Bat_mittel+1)^(0+256)
  3412                           
  3413                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  3414  0307  3008               	movlw	8
  3415  0308  0021               	movlb	1	; select bank1
  3416  0309  0AE7               	incf	_windowPtr1^(0+128),f
  3417  030A  0267               	subwf	_windowPtr1^(0+128),w
  3418  030B  1C03               	skipc
  3419  030C  0008               	return
  3420                           
  3421                           ;adc.c: 277: {
  3422                           ;adc.c: 279: windowPtr1 = 0;
  3423  030D  01E7               	clrf	_windowPtr1^(0+128)
  3424                           
  3425                           ;adc.c: 280: filter1 = 0;
  3426  030E  0023               	movlb	3	; select bank3
  3427  030F  01E4               	clrf	_filter1^(0+384)
  3428  0310  01E5               	clrf	(_filter1+1)^(0+384)
  3429  0311  0008               	return
  3430  0312                     __end_of_FILTER_Ubat:	
  3431  0312                     __ptext18:	
  3432 ;; *************** function _Receive_Diag *****************
  3433 ;; Defined at:
  3434 ;;		line 315 in file "../lin.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  id              1    wreg     unsigned char 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  id              1   31[BANK0 ] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 1F/0
  3445 ;;		On exit  : 1C/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3448 ;;      Params:         0       0       0       0       0       0       0       0
  3449 ;;      Locals:         0       1       0       0       0       0       0       0
  3450 ;;      Temps:          0       1       0       0       0       0       0       0
  3451 ;;      Totals:         0       2       0       0       0       0       0       0
  3452 ;;Total ram usage:        2 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    7
  3455 ;; This function calls:
  3456 ;;		__ELINMIntGetPointer
  3457 ;;		__ELINMIntReceiveMessage
  3458 ;; This function is called by:
  3459 ;;		_main
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           
  3464                           ;psect for function _Receive_Diag
  3465  0312                     _Receive_Diag:	
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _Receive_Diag: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3469                           ;Receive_Diag@id stored from wreg
  3470  0312  00BF               	movwf	Receive_Diag@id
  3471  0313                     l916:	
  3472                           ;lin.c: 320: {
  3473                           ;lin.c: 321: ;
  3474                           
  3475  0313  1DD3               	btfss	__ELINMIntStatus,3
  3476  0314  2B13               	goto	l916
  3477                           
  3478                           ;lin.c: 322: }
  3479                           ;lin.c: 323: ;
  3480                           ;lin.c: 324: _ELINMIntReceiveMessage ( 5, id, 8 );
  3481  0315  083F               	movf	Receive_Diag@id,w
  3482  0316  00BB               	movwf	__ELINMIntReceiveMessage@_ELINM_id
  3483  0317  3008               	movlw	8
  3484  0318  00BC               	movwf	__ELINMIntReceiveMessage@_ELINM_size
  3485  0319  3005               	movlw	5
  3486  031A  2364  3180         	fcall	__ELINMIntReceiveMessage
  3487  031C                     l919:	
  3488                           ;lin.c: 326: {
  3489                           
  3490  031C  1DD3               	btfss	__ELINMIntStatus,3
  3491  031D  2B1C               	goto	l919
  3492                           
  3493                           ;lin.c: 328: }
  3494                           ;lin.c: 329: ;
  3495                           ;lin.c: 330: if( ( ErrorCode == ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  3496  031E  30F0               	movlw	240
  3497  031F  0553               	andwf	__ELINMIntStatus,w
  3498  0320  00BE               	movwf	??_Receive_Diag
  3499  0321  0021               	movlb	1	; select bank1
  3500  0322  0650               	xorwf	_ErrorCode^(0+128),w
  3501  0323  1903               	btfsc	3,2
  3502  0324  0008               	return
  3503                           
  3504                           ;lin.c: 335: else
  3505                           ;lin.c: 336: {
  3506                           ;lin.c: 337: pt = _ELINMIntGetPointer ( 5, 0 );
  3507  0325  0020               	movlb	0	; select bank0
  3508  0326  3005               	movlw	5
  3509  0327  01B0               	clrf	__ELINMIntGetPointer@_ELINMInt_position
  3510  0328  2361  3180         	fcall	__ELINMIntGetPointer
  3511  032A  00D2               	movwf	_pt
  3512                           
  3513                           ;lin.c: 338: my_msg[ 0 ] = *pt;
  3514  032B  0086               	movwf	6
  3515  032C  3002               	movlw	2	; select bank4/5
  3516  032D  0087               	movwf	7
  3517  032E  0801               	movf	1,w
  3518  032F  0023               	movlb	3	; select bank3
  3519  0330  00B0               	movwf	_my_msg^(0+384)
  3520                           
  3521                           ;lin.c: 339: pt++;
  3522                           
  3523                           ;lin.c: 340: my_msg[ 1 ] = *pt;
  3524  0331  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3525  0333  00B1               	movwf	(_my_msg^(0+384)+1)
  3526                           
  3527                           ;lin.c: 341: pt++;
  3528                           
  3529                           ;lin.c: 342: my_msg[ 2 ] = *pt;
  3530  0334  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3531  0336  00B2               	movwf	(_my_msg^(0+384)+2)
  3532                           
  3533                           ;lin.c: 343: pt++;
  3534                           
  3535                           ;lin.c: 344: my_msg[ 3 ] = *pt;
  3536  0337  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3537  0339  00B3               	movwf	(_my_msg^(0+384)+3)
  3538                           
  3539                           ;lin.c: 345: pt++;
  3540                           
  3541                           ;lin.c: 346: my_msg[ 4 ] = *pt;
  3542  033A  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3543  033C  00B4               	movwf	(_my_msg^(0+384)+4)
  3544                           
  3545                           ;lin.c: 347: pt++;
  3546                           
  3547                           ;lin.c: 348: my_msg[ 5 ] = *pt;
  3548  033D  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3549  033F  00B5               	movwf	(_my_msg^(0+384)+5)
  3550                           
  3551                           ;lin.c: 349: pt++;
  3552                           
  3553                           ;lin.c: 350: my_msg[ 6 ] = *pt;
  3554  0340  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3555  0342  00B6               	movwf	(_my_msg^(0+384)+6)
  3556                           
  3557                           ;lin.c: 351: pt++;
  3558                           
  3559                           ;lin.c: 352: my_msg[ 7 ] = *pt;
  3560  0343  23D8               	fcall	PL28	;call to abstracted procedure
  3561  0344  00B7               	movwf	(_my_msg^(0+384)+7)
  3562                           
  3563                           ;lin.c: 354: ui8_b_DResServID_c = my_msg[ 0 ];
  3564  0345  0830               	movf	_my_msg^(0+384),w
  3565  0346  0022               	movlb	2	; select bank2
  3566  0347  00E1               	movwf	_ui8_b_DResServID_c^(0+256)
  3567                           
  3568                           ;lin.c: 355: ui8_b_DResLocID_c = my_msg[ 1 ];
  3569  0348  0023               	movlb	3	; select bank3
  3570  0349  0831               	movf	(_my_msg^(0+384)+1),w
  3571  034A  0020               	movlb	0	; select bank0
  3572  034B  00D5               	movwf	_ui8_b_DResLocID_c
  3573                           
  3574                           ;lin.c: 356: ui8_b_DResB0_c = my_msg[ 2 ];
  3575  034C  0023               	movlb	3	; select bank3
  3576  034D  0832               	movf	(_my_msg^(0+384)+2),w
  3577  034E  0020               	movlb	0	; select bank0
  3578  034F  00D4               	movwf	_ui8_b_DResB0_c
  3579                           
  3580                           ;lin.c: 357: ui8_b_DResB1_c = my_msg[ 3 ];
  3581  0350  0023               	movlb	3	; select bank3
  3582  0351  0833               	movf	(_my_msg^(0+384)+3),w
  3583  0352  0022               	movlb	2	; select bank2
  3584  0353  00E0               	movwf	_ui8_b_DResB1_c^(0+256)
  3585                           
  3586                           ;lin.c: 358: ui8_b_DResB2_c = my_msg[ 4 ];
  3587  0354  0023               	movlb	3	; select bank3
  3588  0355  0834               	movf	(_my_msg^(0+384)+4),w
  3589  0356  0022               	movlb	2	; select bank2
  3590  0357  00DF               	movwf	_ui8_b_DResB2_c^(0+256)
  3591                           
  3592                           ;lin.c: 359: ui8_b_DResB3_c = my_msg[ 5 ];
  3593  0358  0023               	movlb	3	; select bank3
  3594  0359  0835               	movf	(_my_msg^(0+384)+5),w
  3595  035A  0022               	movlb	2	; select bank2
  3596  035B  00DE               	movwf	_ui8_b_DResB3_c^(0+256)
  3597                           
  3598                           ;lin.c: 361: ui8_b_DResB5_c = my_msg[ 7 ];
  3599  035C  0023               	movlb	3	; select bank3
  3600  035D  0836               	movf	(_my_msg^(0+384)+6),w
  3601  035E  0022               	movlb	2	; select bank2
  3602  035F  00DD               	movwf	_ui8_b_DResB4_c^(0+256)
  3603  0360  0008               	return
  3604  0361                     __end_of_Receive_Diag:	
  3605  0361                     __ptext37:	
  3606 ;; *************** function __ELINMIntGetPointer *****************
  3607 ;; Defined at:
  3608 ;;		line 1375 in file "../lin.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  _ELINMInt_ta    1    wreg     unsigned char 
  3611 ;;  _ELINMInt_po    1   16[BANK0 ] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  _ELINMInt_ta    1   17[BANK0 ] unsigned char 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      PTR unsigned char 
  3616 ;; Registers used:
  3617 ;;		wreg, status,2, status,0
  3618 ;; Tracked objects:
  3619 ;;		On entry : 1F/0
  3620 ;;		On exit  : 1F/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3623 ;;      Params:         0       1       0       0       0       0       0       0
  3624 ;;      Locals:         0       1       0       0       0       0       0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0       0
  3626 ;;      Totals:         0       2       0       0       0       0       0       0
  3627 ;;Total ram usage:        2 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    4
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_Transmit_LIN_8Bytes
  3634 ;;		_Receive_Diag
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           
  3639                           ;psect for function __ELINMIntGetPointer
  3640  0361                     __ELINMIntGetPointer:	
  3641                           
  3642                           ;lin.c: 1382: return ( ( BYTE * )& _ELINMIntMessageBuffer[ _ELINMInt_position ] );
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in __ELINMIntGetPointer: [wreg+status,2+status,0]
  3646  0361  0830               	movf	__ELINMIntGetPointer@_ELINMInt_position,w
  3647  0362  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
  3648  0363  0008               	return
  3649  0364                     __end_of__ELINMIntGetPointer:	
  3650  0364                     __ptext19:	
  3651 ;; *************** function __ELINMIntReceiveMessage *****************
  3652 ;; Defined at:
  3653 ;;		line 1321 in file "../lin.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  _ELINM_tag      1    wreg     unsigned char 
  3656 ;;  _ELINM_id       1   27[BANK0 ] unsigned char 
  3657 ;;  _ELINM_size     1   28[BANK0 ] unsigned char 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  _ELINM_tag      1   29[BANK0 ] unsigned char 
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      void 
  3662 ;; Registers used:
  3663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : 1F/0
  3666 ;;		On exit  : 1F/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3669 ;;      Params:         0       2       0       0       0       0       0       0
  3670 ;;      Locals:         0       1       0       0       0       0       0       0
  3671 ;;      Temps:          0       0       0       0       0       0       0       0
  3672 ;;      Totals:         0       3       0       0       0       0       0       0
  3673 ;;Total ram usage:        3 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    6
  3676 ;; This function calls:
  3677 ;;		__ELINMIntSendMessage
  3678 ;; This function is called by:
  3679 ;;		_Receive_Diag
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function __ELINMIntReceiveMessage
  3685  0364                     __ELINMIntReceiveMessage:	
  3686                           
  3687                           ;lin.c: 1331: {
  3688                           ;lin.c: 1333: _ELINMIntMessageTag = _ELINM_tag;
  3689                           
  3690                           ;incstack = 0
  3691                           ; Regs used in __ELINMIntReceiveMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  3692  0364  1DD3               	btfss	__ELINMIntStatus,3
  3693  0365  0008               	return
  3694                           
  3695                           ;lin.c: 1334: _ELINMIntRXMessageSize.SIZE = _ELINM_size;
  3696  0366  083C               	movf	__ELINMIntReceiveMessage@_ELINM_size,w
  3697  0367  0022               	movlb	2	; select bank2
  3698  0368  00DC               	movwf	__ELINMIntRXMessageSize^(0+256)
  3699                           
  3700                           ;lin.c: 1335: _ELINMIntStatus.ELINMINTSTS.RX = 1;
  3701  0369  0020               	movlb	0	; select bank0
  3702  036A  14D3               	bsf	__ELINMIntStatus,1
  3703                           
  3704                           ;lin.c: 1336: _ELINMIntRXCRC.CRC = 0;
  3705  036B  0023               	movlb	3	; select bank3
  3706  036C  01D4               	clrf	__ELINMIntRXCRC^(0+384)
  3707  036D  01D5               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  3708                           
  3709                           ;lin.c: 1337: _ELINMIntSendMessage ( _ELINM_id, 0, ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) * (
      +                           100L * 1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) +
      +                           1L ) * 14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  3710  036E  0020               	movlb	0	; select bank0
  3711  036F  3024               	movlw	36
  3712  0370  01B1               	clrf	__ELINMIntSendMessage@_ELINM_size
  3713  0371  00B2               	movwf	__ELINMIntSendMessage@_ELINM_fmin
  3714  0372  3033               	movlw	51
  3715  0373  01B3               	clrf	__ELINMIntSendMessage@_ELINM_fmin+1
  3716  0374  00B4               	movwf	__ELINMIntSendMessage@_ELINM_fmax
  3717  0375  01B5               	clrf	__ELINMIntSendMessage@_ELINM_fmax+1
  3718  0376  083B               	movf	__ELINMIntReceiveMessage@_ELINM_id,w
  3719  0377  3196  2E7A         	ljmp	__ELINMIntSendMessage
  3720  0379                     __end_of__ELINMIntReceiveMessage:	
  3721  0379                     __ptext17:	
  3722 ;; *************** function _SetDiagAlarm *****************
  3723 ;; Defined at:
  3724 ;;		line 210 in file "../diag.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;		None
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;		None
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  1    wreg      void 
  3731 ;; Registers used:
  3732 ;;		wreg, status,2, status,0, pclath, cstack
  3733 ;; Tracked objects:
  3734 ;;		On entry : 1F/1
  3735 ;;		On exit  : 1F/2
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3738 ;;      Params:         0       0       0       0       0       0       0       0
  3739 ;;      Locals:         0       0       0       0       0       0       0       0
  3740 ;;      Temps:          0       0       0       0       0       0       0       0
  3741 ;;      Totals:         0       0       0       0       0       0       0       0
  3742 ;;Total ram usage:        0 bytes
  3743 ;; Hardware stack levels used:    1
  3744 ;; Hardware stack levels required when called:    5
  3745 ;; This function calls:
  3746 ;;		_PWM_Write_Out
  3747 ;; This function is called by:
  3748 ;;		_main
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           
  3753                           ;psect for function _SetDiagAlarm
  3754  0379                     _SetDiagAlarm:	
  3755                           
  3756                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  3760  0379  1F66               	btfss	_ui8_error_Flags^(0+128),6
  3761  037A  2B7E               	goto	l10642
  3762                           
  3763                           ;diag.c: 221: {
  3764                           ;diag.c: 223: PWM_Write_Out( 88 );
  3765  037B  3058               	movlw	88
  3766  037C  3195  2D5B         	ljmp	_PWM_Write_Out
  3767  037E                     l10642:	
  3768                           ;diag.c: 226: }
  3769                           
  3770                           
  3771                           ;diag.c: 229: else
  3772                           ;diag.c: 230: {
  3773                           ;diag.c: 232: if( bool_CPU_TempAlarm )
  3774  037E  085B               	movf	_bool_CPU_TempAlarm^(0+128),w
  3775  037F  1903               	btfsc	3,2
  3776  0380  2B84               	goto	l10646
  3777                           
  3778                           ;diag.c: 235: {
  3779                           ;diag.c: 237: PWM_Write_Out( 33 );
  3780  0381  3021               	movlw	33
  3781  0382  3195  2D5B         	ljmp	_PWM_Write_Out
  3782  0384                     l10646:	
  3783                           ;diag.c: 240: }
  3784                           
  3785                           
  3786                           ;diag.c: 243: else
  3787                           ;diag.c: 244: {
  3788                           ;diag.c: 246: if( bool_DryRunningAlarm )
  3789  0384  085A               	movf	_bool_DryRunningAlarm^(0+128),w
  3790  0385  1903               	btfsc	3,2
  3791  0386  2B8A               	goto	l10650
  3792                           
  3793                           ;diag.c: 248: {
  3794                           ;diag.c: 250: PWM_Write_Out( 66 );
  3795  0387  3042               	movlw	66
  3796  0388  3195  2D5B         	ljmp	_PWM_Write_Out
  3797  038A                     l10650:	
  3798                           ;diag.c: 253: }
  3799                           
  3800                           
  3801                           ;diag.c: 256: else
  3802                           ;diag.c: 257: {
  3803                           ;diag.c: 259: if( bool_MotorStalled )
  3804  038A  0859               	movf	_bool_MotorStalled^(0+128),w
  3805  038B  1903               	btfsc	3,2
  3806  038C  2B90               	goto	l10654
  3807                           
  3808                           ;diag.c: 261: {
  3809                           ;diag.c: 263: PWM_Write_Out( 55 );
  3810  038D  3037               	movlw	55
  3811  038E  3195  2D5B         	ljmp	_PWM_Write_Out
  3812  0390                     l10654:	
  3813                           ;diag.c: 266: }
  3814                           
  3815                           
  3816                           ;diag.c: 269: else
  3817                           ;diag.c: 270: {
  3818                           ;diag.c: 272: if( bool_HighCurrentAlarm )
  3819  0390  0858               	movf	_bool_HighCurrentAlarm^(0+128),w
  3820  0391  1903               	btfsc	3,2
  3821  0392  2B96               	goto	l534
  3822                           
  3823                           ;diag.c: 274: {
  3824                           ;diag.c: 276: PWM_Write_Out( 44 );
  3825  0393  302C               	movlw	44
  3826  0394  3195  2D5B         	ljmp	_PWM_Write_Out
  3827  0396                     l534:	
  3828                           ;diag.c: 278: }
  3829                           
  3830                           
  3831                           ;diag.c: 281: else
  3832                           ;diag.c: 282: {
  3833                           ;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  3834  0396  1EE6               	btfss	_ui8_error_Flags^(0+128),5
  3835  0397  2B9B               	goto	l536
  3836                           
  3837                           ;diag.c: 287: {
  3838                           ;diag.c: 289: PWM_Write_Out( 77 );
  3839  0398  304D               	movlw	77
  3840  0399  3195  2D5B         	ljmp	_PWM_Write_Out
  3841  039B                     l536:	
  3842                           ;diag.c: 292: }
  3843                           
  3844                           
  3845                           ;diag.c: 295: else
  3846                           ;diag.c: 296: {
  3847                           ;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  3848  039B  1C66               	btfss	_ui8_error_Flags^(0+128),0
  3849  039C  2BA0               	goto	l10662
  3850                           
  3851                           ;diag.c: 300: {
  3852                           ;diag.c: 302: PWM_Write_Out( 22 );
  3853  039D  3016               	movlw	22
  3854  039E  3195  2D5B         	ljmp	_PWM_Write_Out
  3855  03A0                     l10662:	
  3856                           ;diag.c: 305: }
  3857                           
  3858                           
  3859                           ;diag.c: 308: else
  3860                           ;diag.c: 309: {
  3861                           ;diag.c: 311: PWM_Write_Out( 11 );
  3862  03A0  300B               	movlw	11
  3863  03A1  3195  2D5B         	ljmp	_PWM_Write_Out
  3864  03A3                     __end_of_SetDiagAlarm:	
  3865  03A3                     __ptext6:	
  3866 ;; *************** function _InitMotorRun *****************
  3867 ;; Defined at:
  3868 ;;		line 2170 in file "../bldc.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      void 
  3875 ;; Registers used:
  3876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 1C/2
  3879 ;;		On exit  : 1C/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3882 ;;      Params:         0       0       0       0       0       0       0       0
  3883 ;;      Locals:         0       0       0       0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0       0
  3885 ;;      Totals:         0       0       0       0       0       0       0       0
  3886 ;;Total ram usage:        0 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    6
  3889 ;; This function calls:
  3890 ;;		_commutate
  3891 ;; This function is called by:
  3892 ;;		_init_bldc
  3893 ;;		_main
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _InitMotorRun
  3899  03A3                     _InitMotorRun:	
  3900  03A3                     l9768:	
  3901                           ;incstack = 0
  3902                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3903                           
  3904                           
  3905                           ;bldc.c: 2175: if( 0 == MotorFlags.bits.B6 )
  3906  03A3  1B7A               	btfsc	_MotorFlags,6
  3907  03A4  0008               	return
  3908  03A5  30A6               	movlw	166
  3909                           
  3910                           ;bldc.c: 2178: {
  3911                           ;bldc.c: 2180: MotorFlags.bits.B5 = 0;
  3912  03A6  12FA               	bcf	_MotorFlags,5
  3913                           
  3914                           ;bldc.c: 2181: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  3915  03A7  0022               	movlb	2	; select bank2
  3916  03A8  00AD               	movwf	_ui16_comm_time_max^(0+256)
  3917  03A9  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  3918                           
  3919                           ;bldc.c: 2182: comm_state = 1;
  3920  03AA  0021               	movlb	1	; select bank1
  3921  03AB  01E3               	clrf	_comm_state^(0+128)
  3922  03AC  0AE3               	incf	_comm_state^(0+128),f
  3923                           
  3924                           ;bldc.c: 2183: ui16_step_cnt = 0;
  3925  03AD  01BA               	clrf	_ui16_step_cnt^(0+128)
  3926  03AE  01BB               	clrf	(_ui16_step_cnt+1)^(0+128)
  3927                           
  3928                           ;bldc.c: 2184: ui8_duty_cycle_BLDC = 0;
  3929  03AF  0020               	movlb	0	; select bank0
  3930  03B0  01D6               	clrf	_ui8_duty_cycle_BLDC
  3931                           
  3932                           ;bldc.c: 2186: bemf_filter = 0;
  3933  03B1  01D0               	clrf	_comm_time
  3934  03B2  01D1               	clrf	_comm_time+1
  3935                           
  3936                           ;bldc.c: 2188: phase_delay_counter_debug = 0;
  3937  03B3  0023               	movlb	3	; select bank3
  3938  03B4  01DA               	clrf	_phase_delay_counter^(0+384)
  3939  03B5  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  3940                           
  3941                           ;bldc.c: 2189: PSTR1CON = 0;
  3942  03B6  0025               	movlb	5	; select bank5
  3943  03B7  0196               	clrf	22	;volatile
  3944                           
  3945                           ;bldc.c: 2192: MotorFlags.bits.B3 = 1 ;
  3946  03B8  15FA               	bsf	_MotorFlags,3
  3947                           
  3948                           ;bldc.c: 2194: ui16_phase_angle = 128;
  3949  03B9  177A               	bsf	_MotorFlags,6
  3950                           
  3951                           ;bldc.c: 2195: ui8_StartupPWM = 0 ;
  3952  03BA  0021               	movlb	1	; select bank1
  3953  03BB  01E4               	clrf	_ui8_StartupPWM^(0+128)
  3954                           
  3955                           ;bldc.c: 2196: CCPR1L = 0 ;
  3956  03BC  0025               	movlb	5	; select bank5
  3957  03BD  0191               	clrf	17	;volatile
  3958                           
  3959                           ;bldc.c: 2198: ui8_zero_cros_cnt = 0 ;
  3960  03BE  0021               	movlb	1	; select bank1
  3961  03BF  01DE               	clrf	_ui8_sampleState^(0+128)
  3962                           
  3963                           ;bldc.c: 2199: MotorFlags.bits.B4 = 1 ;
  3964  03C0  167A               	bsf	_MotorFlags,4
  3965                           
  3966                           ;bldc.c: 2207: commutate( );
  3967  03C1  319A  2A6C         	ljmp	l9432
  3968  03C3                     __end_of_InitMotorRun:	
  3969  03C3                     PL6:	
  3970  03C3  3E00               	addlw	low (_PWM_trans_table| (0+32768))
  3971  03C4  0084               	movwf	4
  3972  03C5  3098               	movlw	high (_PWM_trans_table| (0+32768))
  3973  03C6  1803               	skipnc
  3974  03C7  3E01               	addlw	1
  3975  03C8  0085               	movwf	5
  3976  03C9  0800               	movf	0,w	;code access
  3977  03CA  0008               	return
  3978  03CB                     __end_ofPL6:	
  3979  03CB                     PL24:	
  3980  03CB  0085               	movwf	5
  3981  03CC  0800               	movf	0,w	;code access
  3982  03CD  0020               	movlb	0	; select bank0
  3983  03CE  00B2               	movwf	___awdiv@dividend
  3984  03CF  3005               	movlw	5
  3985  03D0  01B3               	clrf	___awdiv@dividend+1
  3986  03D1  35B2               	lslf	___awdiv@dividend,f
  3987  03D2  0DB3               	rlf	___awdiv@dividend+1,f
  3988  03D3  35B2               	lslf	___awdiv@dividend,f
  3989  03D4  0DB3               	rlf	___awdiv@dividend+1,f
  3990  03D5  00B0               	movwf	___awdiv@divisor
  3991  03D6  01B1               	clrf	___awdiv@divisor+1
  3992  03D7  0008               	return
  3993  03D8                     __end_ofPL24:	
  3994  03D8                     PL28:	
  3995  03D8  0020               	movlb	0	; select bank0
  3996  03D9  0AD2               	incf	_pt,f
  3997  03DA  0852               	movf	_pt,w
  3998  03DB  0086               	movwf	6
  3999  03DC  0801               	movf	1,w
  4000  03DD  0023               	movlb	3	; select bank3
  4001  03DE  0008               	return
  4002  03DF                     __end_ofPL28:	
  4003  03DF                     __ptext23:	
  4004 ;; *************** function _FILTER_IPhase *****************
  4005 ;; Defined at:
  4006 ;;		line 357 in file "../adc.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 1D/1
  4017 ;;		On exit  : 1F/3
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4020 ;;      Params:         0       0       0       0       0       0       0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0
  4022 ;;      Temps:          0       2       0       0       0       0       0       0
  4023 ;;      Totals:         0       2       0       0       0       0       0       0
  4024 ;;Total ram usage:        2 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    4
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_Get_Analog_Value
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           
  4035                           ;psect for function _FILTER_IPhase
  4036  03DF                     _FILTER_IPhase:	
  4037                           
  4038                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
  4039                           
  4040                           ;incstack = 0
  4041                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
  4042  03DF  0022               	movlb	2	; select bank2
  4043  03E0  0837               	movf	_ui16_IPhase1_bldc^(0+256),w	;volatile
  4044  03E1  0023               	movlb	3	; select bank3
  4045  03E2  07E2               	addwf	_filter3^(0+384),f
  4046  03E3  0022               	movlb	2	; select bank2
  4047  03E4  0838               	movf	(_ui16_IPhase1_bldc+1)^(0+256),w	;volatile
  4048  03E5  0023               	movlb	3	; select bank3
  4049  03E6  3DE3               	addwfc	(_filter3+1)^(0+384),f
  4050                           
  4051                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
  4052  03E7  0863               	movf	(_filter3+1)^(0+384),w
  4053  03E8  0020               	movlb	0	; select bank0
  4054  03E9  00B1               	movwf	??_FILTER_IPhase+1
  4055  03EA  0023               	movlb	3	; select bank3
  4056  03EB  0862               	movf	_filter3^(0+384),w
  4057  03EC  0020               	movlb	0	; select bank0
  4058  03ED  00B0               	movwf	??_FILTER_IPhase
  4059  03EE  3006               	movlw	6
  4060  03EF                     u3675:	
  4061  03EF  36B1               	lsrf	??_FILTER_IPhase+1,f
  4062  03F0  0CB0               	rrf	??_FILTER_IPhase,f
  4063  03F1  0B89               	decfsz	9,f
  4064  03F2  2BEF               	goto	u3675
  4065  03F3  0830               	movf	??_FILTER_IPhase,w
  4066  03F4  0022               	movlb	2	; select bank2
  4067  03F5  00B3               	movwf	_ui16_fir_IPhase_mean^(0+256)
  4068  03F6  0020               	movlb	0	; select bank0
  4069  03F7  0831               	movf	??_FILTER_IPhase+1,w
  4070  03F8  0022               	movlb	2	; select bank2
  4071  03F9  00B4               	movwf	(_ui16_fir_IPhase_mean+1)^(0+256)
  4072                           
  4073                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
  4074  03FA  0833               	movf	_ui16_fir_IPhase_mean^(0+256),w
  4075  03FB  0023               	movlb	3	; select bank3
  4076  03FC  02E2               	subwf	_filter3^(0+384),f
  4077  03FD  0022               	movlb	2	; select bank2
  4078  03FE  0834               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  4079  03FF  0023               	movlb	3	; select bank3
  4080  0400  3BE3               	subwfb	(_filter3+1)^(0+384),f
  4081  0401  0008               	return
  4082  0402                     __end_of_FILTER_IPhase:	
  4083  0402                     __ptext1:	
  4084 ;; *************** function _system_init *****************
  4085 ;; Defined at:
  4086 ;;		line 545 in file "../main.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;		None
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      void 
  4093 ;; Registers used:
  4094 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : B1F/0
  4097 ;;		On exit  : 1C/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4100 ;;      Params:         0       0       0       0       0       0       0       0
  4101 ;;      Locals:         0       0       0       0       0       0       0       0
  4102 ;;      Temps:          0       0       0       0       0       0       0       0
  4103 ;;      Totals:         0       0       0       0       0       0       0       0
  4104 ;;Total ram usage:        0 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:    8
  4107 ;; This function calls:
  4108 ;;		_ADC_Init
  4109 ;;		_DiagInit
  4110 ;;		_EnableMCP201
  4111 ;;		_FILTER_Init
  4112 ;;		_I_calibrationInit
  4113 ;;		_Oscill_Source_Block
  4114 ;;		_PWM_Capture_init
  4115 ;;		__ELINMIntInitialize
  4116 ;;		_init_bldc
  4117 ;;		_init_ports
  4118 ;;		_timer_init
  4119 ;; This function is called by:
  4120 ;;		_main
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           
  4125                           ;psect for function _system_init
  4126  0402                     _system_init:	
  4127                           
  4128                           ;main.c: 549: OPTION_REG = 0b10000001;
  4129                           
  4130                           ;incstack = 0
  4131                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4132  0402  3081               	movlw	129
  4133  0403  0021               	movlb	1	; select bank1
  4134  0404  0095               	movwf	21	;volatile
  4135                           
  4136                           ;main.c: 558: ui8_ResetMatlab = 1;
  4137  0405  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4138  0406  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  4139                           
  4140                           ;main.c: 559: GIE = 0;
  4141  0407  138B               	bcf	11,7	;volatile
  4142                           
  4143                           ;main.c: 560: INTCON = 0;
  4144  0408  018B               	clrf	11	;volatile
  4145                           
  4146                           ;main.c: 561: PIE1 = 0;
  4147  0409  0191               	clrf	17	;volatile
  4148                           
  4149                           ;main.c: 562: PIE2 = 0;
  4150  040A  0192               	clrf	18	;volatile
  4151                           
  4152                           ;main.c: 565: ui16_Timer_VaL1 = 0;
  4153  040B  0193               	clrf	19	;volatile
  4154                           
  4155                           ;main.c: 566: ui8_Task_Cont3ms = 0;
  4156  040C  0022               	movlb	2	; select bank2
  4157  040D  01D4               	clrf	_ui8_Task_Cont3ms^(0+256)
  4158                           
  4159                           ;main.c: 567: ui8_Task_Cont5ms = 0;
  4160  040E  01D3               	clrf	_ui8_Task_Cont5ms^(0+256)
  4161                           
  4162                           ;main.c: 571: ui8_Sync_Cont10ms = 0;
  4163  040F  0021               	movlb	1	; select bank1
  4164  0410  3049               	movlw	73
  4165  0411  01CC               	clrf	_ui8_Task_Cont100ms^(0+128)
  4166                           
  4167                           ;main.c: 573: ui16_dryRun_Thresh = 73;
  4168  0412  0023               	movlb	3	; select bank3
  4169  0413  00EE               	movwf	_ui16_dryRun_Thresh^(0+384)
  4170  0414  3068               	movlw	104
  4171  0415  01EF               	clrf	(_ui16_dryRun_Thresh+1)^(0+384)
  4172                           
  4173                           ;main.c: 575: ui16_Current_Thresh = 360;
  4174  0416  00EC               	movwf	_ui16_Current_Thresh^(0+384)
  4175  0417  3001               	movlw	1
  4176  0418  00ED               	movwf	(_ui16_Current_Thresh^(0+384)+1)
  4177                           
  4178                           ;main.c: 577: init_ports( );
  4179  0419  2550  3180         	fcall	_init_ports
  4180                           
  4181                           ;main.c: 581: EnableMCP201( );
  4182  041B  24AD  3180         	fcall	_EnableMCP201
  4183                           
  4184                           ;main.c: 582: _ELINMIntInitialize( );
  4185  041D  2538  3180         	fcall	__ELINMIntInitialize
  4186                           
  4187                           ;main.c: 588: Oscill_Source_Block( );
  4188  041F  24E0  3180         	fcall	_Oscill_Source_Block
  4189                           
  4190                           ;main.c: 589: timer_init( 1 );
  4191  0421  3001               	movlw	1
  4192  0422  243C  3180         	fcall	_timer_init
  4193                           
  4194                           ;main.c: 590: timer_init( 4 );
  4195  0424  3004               	movlw	4
  4196  0425  243C  3180         	fcall	_timer_init
  4197                           
  4198                           ;main.c: 591: timer_init( 6 );
  4199  0427  3006               	movlw	6
  4200  0428  243C  3180         	fcall	_timer_init
  4201                           
  4202                           ;main.c: 594: PWM_Capture_init( 5 );
  4203  042A  3005               	movlw	5
  4204  042B  24E6  3180         	fcall	_PWM_Capture_init
  4205                           
  4206                           ;main.c: 595: ADC_Init( );
  4207  042D  2497  3180         	fcall	_ADC_Init
  4208                           
  4209                           ;main.c: 596: DiagInit( );
  4210  042F  24A1  3180         	fcall	_DiagInit
  4211                           
  4212                           ;main.c: 597: FILTER_Init( );
  4213  0431  24C8  3180         	fcall	_FILTER_Init
  4214                           
  4215                           ;main.c: 600: ui16_Temp_cal = 0;
  4216  0433  0023               	movlb	3	; select bank3
  4217  0434  01E6               	clrf	_ui16_Temp_cal^(0+384)
  4218  0435  01E7               	clrf	(_ui16_Temp_cal+1)^(0+384)
  4219                           
  4220                           ;main.c: 610: I_calibrationInit();
  4221  0436  21D4  3180         	fcall	_I_calibrationInit
  4222                           
  4223                           ;main.c: 612: init_bldc( );
  4224  0438  2567               	fcall	_init_bldc
  4225                           
  4226                           ;main.c: 614: PEIE = 1;
  4227  0439  170B               	bsf	11,6	;volatile
  4228                           
  4229                           ;main.c: 615: GIE = 1;
  4230  043A  178B               	bsf	11,7	;volatile
  4231  043B  0008               	return
  4232  043C                     __end_of_system_init:	
  4233  043C                     __ptext2:	
  4234 ;; *************** function _timer_init *****************
  4235 ;; Defined at:
  4236 ;;		line 73 in file "../timer.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  ui8_TmrNb       1   17[BANK0 ] unsigned char 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  1    wreg      void 
  4243 ;; Registers used:
  4244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4245 ;; Tracked objects:
  4246 ;;		On entry : 16/1
  4247 ;;		On exit  : 16/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4250 ;;      Params:         0       0       0       0       0       0       0       0
  4251 ;;      Locals:         0       1       0       0       0       0       0       0
  4252 ;;      Temps:          0       0       0       0       0       0       0       0
  4253 ;;      Totals:         0       1       0       0       0       0       0       0
  4254 ;;Total ram usage:        1 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:    5
  4257 ;; This function calls:
  4258 ;;		_clear_timer
  4259 ;; This function is called by:
  4260 ;;		_system_init
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           
  4265                           ;psect for function _timer_init
  4266  043C                     _timer_init:	
  4267                           
  4268                           ;incstack = 0
  4269                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4270                           ;timer_init@ui8_TmrNb stored from wreg
  4271  043C  0020               	movlb	0	; select bank0
  4272  043D  00B1               	movwf	timer_init@ui8_TmrNb
  4273                           
  4274                           ;timer.c: 77: switch( ui8_TmrNb )
  4275  043E  2C63               	goto	l6666
  4276  043F                     l6636:	
  4277                           
  4278                           ;timer.c: 83: {
  4279                           ;timer.c: 86: clear_timer( 0 );
  4280  043F  3000               	movlw	0
  4281  0440  2475               	fcall	_clear_timer
  4282                           
  4283                           ;timer.c: 87: TMR0IE = 0;
  4284  0441  128B               	bcf	11,5	;volatile
  4285                           
  4286                           ;timer.c: 88: break;
  4287  0442  0008               	return
  4288  0443                     l6640:	
  4289                           
  4290                           ;timer.c: 95: {
  4291                           ;timer.c: 98: clear_timer( 1 );
  4292  0443  3001               	movlw	1
  4293  0444  2475               	fcall	_clear_timer
  4294                           
  4295                           ;timer.c: 99: T1CON = 0b01110101;
  4296  0445  3075               	movlw	117
  4297  0446  0020               	movlb	0	; select bank0
  4298  0447  0098               	movwf	24	;volatile
  4299                           
  4300                           ;timer.c: 100: TMR1IE = 0;
  4301  0448  0021               	movlb	1	; select bank1
  4302  0449  1011               	bcf	17,0	;volatile
  4303                           
  4304                           ;timer.c: 101: break;
  4305  044A  0008               	return
  4306  044B                     l6646:	
  4307                           
  4308                           ;timer.c: 108: {
  4309                           ;timer.c: 111: clear_timer( 2 );
  4310  044B  3002               	movlw	2
  4311  044C  2475               	fcall	_clear_timer
  4312                           
  4313                           ;timer.c: 112: T2CON = 0b00000111;
  4314  044D  3007               	movlw	7
  4315  044E  0020               	movlb	0	; select bank0
  4316  044F  009C               	movwf	28	;volatile
  4317                           
  4318                           ;timer.c: 113: TMR2IE = 0;
  4319  0450  0021               	movlb	1	; select bank1
  4320  0451  1091               	bcf	17,1	;volatile
  4321                           
  4322                           ;timer.c: 114: break;
  4323  0452  0008               	return
  4324  0453                     l6652:	
  4325                           
  4326                           ;timer.c: 121: {
  4327                           ;timer.c: 124: clear_timer( 4 );
  4328  0453  3004               	movlw	4
  4329  0454  2475               	fcall	_clear_timer
  4330                           
  4331                           ;timer.c: 125: T4CON = 0b00001110;
  4332  0455  300E               	movlw	14
  4333  0456  0028               	movlb	8	; select bank8
  4334  0457  0097               	movwf	23	;volatile
  4335                           
  4336                           ;timer.c: 129: TMR4IE = 1;
  4337  0458  0021               	movlb	1	; select bank1
  4338  0459  1493               	bsf	19,1	;volatile
  4339                           
  4340                           ;timer.c: 131: break;
  4341  045A  0008               	return
  4342  045B                     l6658:	
  4343                           
  4344                           ;timer.c: 138: {
  4345                           ;timer.c: 141: clear_timer( 6 );
  4346  045B  3006               	movlw	6
  4347  045C  2475               	fcall	_clear_timer
  4348                           
  4349                           ;timer.c: 142: T6CON = 0b00000101;
  4350  045D  3005               	movlw	5
  4351  045E  0028               	movlb	8	; select bank8
  4352  045F  009E               	movwf	30	;volatile
  4353                           
  4354                           ;timer.c: 147: TMR6IE = 1;
  4355  0460  0021               	movlb	1	; select bank1
  4356  0461  1593               	bsf	19,3	;volatile
  4357                           
  4358                           ;timer.c: 169: break;
  4359  0462  0008               	return
  4360  0463                     l6666:	
  4361  0463  0831               	movf	timer_init@ui8_TmrNb,w
  4362                           
  4363                           ; Switch size 1, requested type "space"
  4364                           ; Number of cases is 5, Range of values is 0 to 6
  4365                           ; switch strategies available:
  4366                           ; Name         Instructions Cycles
  4367                           ; simple_byte           16     9 (average)
  4368                           ; direct_byte           20     6 (fixed)
  4369                           ; jumptable            260     6 (fixed)
  4370                           ;	Chosen strategy is simple_byte
  4371  0464  3A00               	xorlw	0	; case 0
  4372  0465  1903               	skipnz
  4373  0466  2C3F               	goto	l6636
  4374  0467  3A01               	xorlw	1	; case 1
  4375  0468  1903               	skipnz
  4376  0469  2C43               	goto	l6640
  4377  046A  3A03               	xorlw	3	; case 2
  4378  046B  1903               	skipnz
  4379  046C  2C4B               	goto	l6646
  4380  046D  3A06               	xorlw	6	; case 4
  4381  046E  1903               	skipnz
  4382  046F  2C53               	goto	l6652
  4383  0470  3A02               	xorlw	2	; case 6
  4384  0471  1903               	skipnz
  4385  0472  2C5B               	goto	l6658
  4386  0473  2C74               	goto	l1917
  4387  0474                     l1917:	
  4388  0474  0008               	return
  4389  0475                     __end_of_timer_init:	
  4390  0475                     __ptext3:	
  4391 ;; *************** function _clear_timer *****************
  4392 ;; Defined at:
  4393 ;;		line 302 in file "../timer.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  ui8_TmrNb       1   16[BANK0 ] unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4402 ;; Tracked objects:
  4403 ;;		On entry : 1C/0
  4404 ;;		On exit  : 17/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4407 ;;      Params:         0       0       0       0       0       0       0       0
  4408 ;;      Locals:         0       1       0       0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0
  4410 ;;      Totals:         0       1       0       0       0       0       0       0
  4411 ;;Total ram usage:        1 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    4
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_main
  4418 ;;		_timer_init
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           
  4423                           ;psect for function _clear_timer
  4424  0475                     _clear_timer:	
  4425                           
  4426                           ;incstack = 0
  4427                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  4428                           ;clear_timer@ui8_TmrNb stored from wreg
  4429  0475  0020               	movlb	0	; select bank0
  4430  0476  00B0               	movwf	clear_timer@ui8_TmrNb
  4431                           
  4432                           ;timer.c: 306: switch( ui8_TmrNb )
  4433  0477  2C85               	goto	l6332
  4434  0478                     l6320:	
  4435                           
  4436                           ;timer.c: 312: {
  4437                           ;timer.c: 314: TMR0 = 0;
  4438  0478  0195               	clrf	21	;volatile
  4439                           
  4440                           ;timer.c: 315: break;
  4441  0479  0008               	return
  4442  047A                     l6322:	
  4443                           
  4444                           ;timer.c: 322: {
  4445                           ;timer.c: 324: TMR1L = 0x00;
  4446  047A  0196               	clrf	22	;volatile
  4447                           
  4448                           ;timer.c: 325: TMR1H = 0x00;
  4449  047B  0197               	clrf	23	;volatile
  4450                           
  4451                           ;timer.c: 326: break;
  4452  047C  0008               	return
  4453  047D                     l6324:	
  4454                           
  4455                           ;timer.c: 333: {
  4456                           ;timer.c: 335: TMR2 = 0;
  4457  047D  019A               	clrf	26	;volatile
  4458                           
  4459                           ;timer.c: 336: break;
  4460  047E  0008               	return
  4461  047F                     l6326:	
  4462                           
  4463                           ;timer.c: 343: {
  4464                           ;timer.c: 345: TMR4 = 0;
  4465  047F  0028               	movlb	8	; select bank8
  4466  0480  0195               	clrf	21	;volatile
  4467                           
  4468                           ;timer.c: 346: break;
  4469  0481  0008               	return
  4470  0482                     l6328:	
  4471                           
  4472                           ;timer.c: 353: {
  4473                           ;timer.c: 355: TMR6 = 0;
  4474  0482  0028               	movlb	8	; select bank8
  4475  0483  019C               	clrf	28	;volatile
  4476                           
  4477                           ;timer.c: 356: break;
  4478  0484  0008               	return
  4479  0485                     l6332:	
  4480  0485  0830               	movf	clear_timer@ui8_TmrNb,w
  4481                           
  4482                           ; Switch size 1, requested type "space"
  4483                           ; Number of cases is 5, Range of values is 0 to 6
  4484                           ; switch strategies available:
  4485                           ; Name         Instructions Cycles
  4486                           ; simple_byte           16     9 (average)
  4487                           ; direct_byte           20     6 (fixed)
  4488                           ; jumptable            260     6 (fixed)
  4489                           ;	Chosen strategy is simple_byte
  4490  0486  3A00               	xorlw	0	; case 0
  4491  0487  1903               	skipnz
  4492  0488  2C78               	goto	l6320
  4493  0489  3A01               	xorlw	1	; case 1
  4494  048A  1903               	skipnz
  4495  048B  2C7A               	goto	l6322
  4496  048C  3A03               	xorlw	3	; case 2
  4497  048D  1903               	skipnz
  4498  048E  2C7D               	goto	l6324
  4499  048F  3A06               	xorlw	6	; case 4
  4500  0490  1903               	skipnz
  4501  0491  2C7F               	goto	l6326
  4502  0492  3A02               	xorlw	2	; case 6
  4503  0493  1903               	skipnz
  4504  0494  2C82               	goto	l6328
  4505  0495  2C96               	goto	l1940
  4506  0496                     l1940:	
  4507  0496  0008               	return
  4508  0497                     __end_of_clear_timer:	
  4509  0497                     __ptext15:	
  4510 ;; *************** function _ADC_Init *****************
  4511 ;; Defined at:
  4512 ;;		line 102 in file "../adc.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;		None
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;		None
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      void 
  4519 ;; Registers used:
  4520 ;;		wreg, status,2
  4521 ;; Tracked objects:
  4522 ;;		On entry : 18/1
  4523 ;;		On exit  : 1F/2
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4526 ;;      Params:         0       0       0       0       0       0       0       0
  4527 ;;      Locals:         0       0       0       0       0       0       0       0
  4528 ;;      Temps:          0       0       0       0       0       0       0       0
  4529 ;;      Totals:         0       0       0       0       0       0       0       0
  4530 ;;Total ram usage:        0 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    4
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_system_init
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           
  4541                           ;psect for function _ADC_Init
  4542  0497                     _ADC_Init:	
  4543                           
  4544                           ;adc.c: 106: ADCON1 = 0b10100000;
  4545                           
  4546                           ;incstack = 0
  4547                           ; Regs used in _ADC_Init: [wreg+status,2]
  4548  0497  30A0               	movlw	160
  4549  0498  0021               	movlb	1	; select bank1
  4550  0499  009E               	movwf	30	;volatile
  4551                           
  4552                           ;adc.c: 108: ADCON0 = 0b00000000;
  4553  049A  019D               	clrf	29	;volatile
  4554                           
  4555                           ;adc.c: 109: ADON = 1;
  4556  049B  141D               	bsf	29,0	;volatile
  4557                           
  4558                           ;adc.c: 111: ui8_temp_calibration = 0;
  4559  049C  0022               	movlb	2	; select bank2
  4560  049D  0817               	movf	23,w	;volatile
  4561  049E  3830               	iorlw	48
  4562  049F  0097               	movwf	23	;volatile
  4563  04A0  0008               	return
  4564  04A1                     __end_of_ADC_Init:	
  4565  04A1                     __ptext14:	
  4566 ;; *************** function _DiagInit *****************
  4567 ;; Defined at:
  4568 ;;		line 148 in file "../diag.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;		None
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;		None
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  1    wreg      void 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0, pclath, cstack
  4577 ;; Tracked objects:
  4578 ;;		On entry : 1F/2
  4579 ;;		On exit  : 1F/2
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4582 ;;      Params:         0       0       0       0       0       0       0       0
  4583 ;;      Locals:         0       0       0       0       0       0       0       0
  4584 ;;      Temps:          0       0       0       0       0       0       0       0
  4585 ;;      Totals:         0       0       0       0       0       0       0       0
  4586 ;;Total ram usage:        0 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    5
  4589 ;; This function calls:
  4590 ;;		_PWM_Write_Out
  4591 ;; This function is called by:
  4592 ;;		_system_init
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           
  4597                           ;psect for function _DiagInit
  4598  04A1                     _DiagInit:	
  4599                           
  4600                           ;diag.c: 162: ui8_error_Flags.b = 0;
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  4604  04A1  0021               	movlb	1	; select bank1
  4605  04A2  300B               	movlw	11
  4606  04A3  01E6               	clrf	_ui8_error_Flags^(0+128)
  4607                           
  4608                           ;diag.c: 163: PWM_Write_Out( 11 );
  4609  04A4  3195  255B         	fcall	_PWM_Write_Out
  4610                           
  4611                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  4612  04A6  01E6               	clrf	_ui16_IPhase1_bldc_cal^(0+256)
  4613  04A7  01E7               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  4614                           
  4615                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  4616  04A8  01E4               	clrf	_ui16_IPhase2_bldc_cal^(0+256)
  4617  04A9  01E5               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  4618                           
  4619                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  4620  04AA  01E2               	clrf	_ui16_IPhase3_bldc_cal^(0+256)
  4621  04AB  01E3               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  4622  04AC  0008               	return
  4623  04AD                     __end_of_DiagInit:	
  4624  04AD                     __ptext13:	
  4625 ;; *************** function _EnableMCP201 *****************
  4626 ;; Defined at:
  4627 ;;		line 434 in file "../lin.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  _dcnt           1   18[BANK0 ] unsigned char 
  4632 ;;  _dcnt           1   17[BANK0 ] unsigned char 
  4633 ;;  _dcnt           1   16[BANK0 ] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  1    wreg      void 
  4636 ;; Registers used:
  4637 ;;		status,2
  4638 ;; Tracked objects:
  4639 ;;		On entry : 1F/1
  4640 ;;		On exit  : 1F/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4643 ;;      Params:         0       0       0       0       0       0       0       0
  4644 ;;      Locals:         0       3       0       0       0       0       0       0
  4645 ;;      Temps:          0       0       0       0       0       0       0       0
  4646 ;;      Totals:         0       3       0       0       0       0       0       0
  4647 ;;Total ram usage:        3 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    4
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_system_init
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           
  4658                           ;psect for function _EnableMCP201
  4659  04AD                     _EnableMCP201:	
  4660                           
  4661                           ;lin.c: 448: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _EnableMCP201: [status,2]
  4665  04AD  0020               	movlb	0	; select bank0
  4666  04AE  128E               	bcf	14,5	;volatile
  4667  04AF  01B0               	clrf	EnableMCP201@_dcnt
  4668  04B0  2CB3               	goto	l940
  4669  04B1                     l941:	
  4670  04B1  0000               	nop	;# 
  4671  04B2  0000               	nop	;# 
  4672  04B3                     l940:	
  4673  04B3  0020               	movlb	0	; select bank0
  4674  04B4  0BB0               	decfsz	EnableMCP201@_dcnt,f
  4675  04B5  2CB1               	goto	l941
  4676                           
  4677                           ;lin.c: 450: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4678  04B6  168E               	bsf	14,5	;volatile
  4679  04B7  01B1               	clrf	EnableMCP201@_dcnt_712
  4680  04B8  2CBB               	goto	l945
  4681  04B9                     l946:	
  4682  04B9  0000               	nop	;# 
  4683  04BA  0000               	nop	;# 
  4684  04BB                     l945:	
  4685  04BB  0020               	movlb	0	; select bank0
  4686  04BC  0BB1               	decfsz	EnableMCP201@_dcnt_712,f
  4687  04BD  2CB9               	goto	l946
  4688                           
  4689                           ;lin.c: 452: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4690  04BE  128E               	bcf	14,5	;volatile
  4691  04BF  01B2               	clrf	EnableMCP201@_dcnt_713
  4692  04C0  2CC3               	goto	l950
  4693  04C1                     l951:	
  4694  04C1  0000               	nop	;# 
  4695  04C2  0000               	nop	;# 
  4696  04C3                     l950:	
  4697  04C3  0020               	movlb	0	; select bank0
  4698  04C4  0BB2               	decfsz	EnableMCP201@_dcnt_713,f
  4699  04C5  2CC1               	goto	l951
  4700                           
  4701                           ;lin.c: 453: RC5 = 1;
  4702  04C6  168E               	bsf	14,5	;volatile
  4703  04C7  0008               	return
  4704  04C8                     __end_of_EnableMCP201:	
  4705  04C8                     __ptext12:	
  4706 ;; *************** function _FILTER_Init *****************
  4707 ;; Defined at:
  4708 ;;		line 226 in file "../adc.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 1F/2
  4719 ;;		On exit  : 1F/1
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4722 ;;      Params:         0       0       0       0       0       0       0       0
  4723 ;;      Locals:         0       0       0       0       0       0       0       0
  4724 ;;      Temps:          0       0       0       0       0       0       0       0
  4725 ;;      Totals:         0       0       0       0       0       0       0       0
  4726 ;;Total ram usage:        0 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    5
  4729 ;; This function calls:
  4730 ;;		_ADC_Read
  4731 ;;		_ADC_Wait
  4732 ;; This function is called by:
  4733 ;;		_system_init
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           
  4738                           ;psect for function _FILTER_Init
  4739  04C8                     _FILTER_Init:	
  4740                           
  4741                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4745  04C8  0021               	movlb	1	; select bank1
  4746  04C9  01E7               	clrf	_windowPtr1^(0+128)
  4747  04CA                     l9894:	
  4748  04CA  3008               	movlw	8
  4749  04CB  0267               	subwf	_windowPtr1^(0+128),w
  4750  04CC  1803               	btfsc	3,0
  4751  04CD  0008               	return
  4752                           
  4753                           ;adc.c: 232: {
  4754                           ;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  4755  04CE  3031               	movlw	49
  4756  04CF  009D               	movwf	29	;volatile
  4757                           
  4758                           ;adc.c: 235: ADC_Wait( );
  4759  04D0  2268  3180         	fcall	_ADC_Wait
  4760                           
  4761                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  4762  04D2  2281  3180         	fcall	_ADC_Read
  4763  04D4  0831               	movf	?_ADC_Read+1,w
  4764  04D5  00D8               	movwf	_ui16_Ubat_bldc+1	;volatile
  4765  04D6  0830               	movf	?_ADC_Read,w
  4766  04D7  00D7               	movwf	_ui16_Ubat_bldc	;volatile
  4767                           
  4768                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  4769  04D8  2589  3180         	fcall	PL94	;call to abstracted procedure
  4770  04DA  305E               	movlw	94
  4771  04DB  3FC0               	movwi [0]fsr1
  4772  04DC  3001               	movlw	1
  4773  04DD  3FC1               	movwi [1]fsr1
  4774  04DE  0AE7               	incf	_windowPtr1^(0+128),f
  4775  04DF  2CCA               	goto	l9894
  4776  04E0                     __end_of_FILTER_Init:	
  4777  04E0                     __ptext10:	
  4778 ;; *************** function _Oscill_Source_Block *****************
  4779 ;; Defined at:
  4780 ;;		line 478 in file "../timer.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;		None
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg
  4789 ;; Tracked objects:
  4790 ;;		On entry : 1F/0
  4791 ;;		On exit  : 1F/1
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4794 ;;      Params:         0       0       0       0       0       0       0       0
  4795 ;;      Locals:         0       0       0       0       0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0
  4797 ;;      Totals:         0       0       0       0       0       0       0       0
  4798 ;;Total ram usage:        0 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    4
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_system_init
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           
  4809                           ;psect for function _Oscill_Source_Block
  4810  04E0                     _Oscill_Source_Block:	
  4811                           
  4812                           ;timer.c: 482: OSCCON = 0xF0;
  4813                           
  4814                           ;incstack = 0
  4815                           ; Regs used in _Oscill_Source_Block: [wreg]
  4816  04E0  30F0               	movlw	240
  4817  04E1  0021               	movlb	1	; select bank1
  4818  04E2  0099               	movwf	25	;volatile
  4819                           
  4820                           ;timer.c: 483: WDTCON = 0b00010001;
  4821  04E3  3011               	movlw	17
  4822  04E4  0097               	movwf	23	;volatile
  4823  04E5  0008               	return
  4824  04E6                     __end_of_Oscill_Source_Block:	
  4825  04E6                     __ptext9:	
  4826 ;; *************** function _PWM_Capture_init *****************
  4827 ;; Defined at:
  4828 ;;		line 78 in file "../pwm.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;  ui8_CCP_Nb      1   16[BANK0 ] unsigned char 
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1    wreg      void 
  4835 ;; Registers used:
  4836 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4837 ;; Tracked objects:
  4838 ;;		On entry : 16/1
  4839 ;;		On exit  : 18/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4842 ;;      Params:         0       0       0       0       0       0       0       0
  4843 ;;      Locals:         0       1       0       0       0       0       0       0
  4844 ;;      Temps:          0       0       0       0       0       0       0       0
  4845 ;;      Totals:         0       1       0       0       0       0       0       0
  4846 ;;Total ram usage:        1 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    4
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_system_init
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           
  4857                           ;psect for function _PWM_Capture_init
  4858  04E6                     _PWM_Capture_init:	
  4859                           
  4860                           ;incstack = 0
  4861                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  4862                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  4863  04E6  0020               	movlb	0	; select bank0
  4864  04E7  00B0               	movwf	PWM_Capture_init@ui8_CCP_Nb
  4865                           
  4866                           ;pwm.c: 83: ui8_PWMinDC_sav = 0;
  4867  04E8  0021               	movlb	1	; select bank1
  4868  04E9  01CA               	clrf	_ui8_PWMinDC_sav^(0+128)
  4869                           
  4870                           ;pwm.c: 84: ui8_PWMin_failCnt = 0;
  4871  04EA  0022               	movlb	2	; select bank2
  4872  04EB  01CE               	clrf	_ui8_PWMin_failCnt^(0+256)
  4873                           
  4874                           ;pwm.c: 93: switch( ui8_CCP_Nb )
  4875  04EC  0020               	movlb	0	; select bank0
  4876  04ED  0830               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  4877                           
  4878                           ; Switch size 1, requested type "space"
  4879                           ; Number of cases is 5, Range of values is 1 to 5
  4880                           ; switch strategies available:
  4881                           ; Name         Instructions Cycles
  4882                           ; simple_byte           16     9 (average)
  4883                           ; direct_byte           19     9 (fixed)
  4884                           ; jumptable            263     9 (fixed)
  4885                           ;	Chosen strategy is simple_byte
  4886  04EE  3A01               	xorlw	1	; case 1
  4887  04EF  1903               	skipnz
  4888  04F0  2CFE               	goto	l6670
  4889  04F1  3A03               	xorlw	3	; case 2
  4890  04F2  1903               	skipnz
  4891  04F3  2D0A               	goto	l6678
  4892  04F4  3A01               	xorlw	1	; case 3
  4893  04F5  1903               	skipnz
  4894  04F6  2D16               	goto	l6686
  4895  04F7  3A07               	xorlw	7	; case 4
  4896  04F8  1903               	skipnz
  4897  04F9  2D22               	goto	l6694
  4898  04FA  3A01               	xorlw	1	; case 5
  4899  04FB  1903               	skipnz
  4900  04FC  2D2E               	goto	l6702
  4901  04FD  2D37               	goto	l1366
  4902  04FE                     l6670:	
  4903                           
  4904                           ;pwm.c: 99: {
  4905                           ;pwm.c: 101: CCP1CON = 0x00;
  4906  04FE  0025               	movlb	5	; select bank5
  4907  04FF  0193               	clrf	19	;volatile
  4908                           
  4909                           ;pwm.c: 102: CCPR1L = 0x00;
  4910  0500  0191               	clrf	17	;volatile
  4911                           
  4912                           ;pwm.c: 103: CCPR1H = 0x00;
  4913  0501  0192               	clrf	18	;volatile
  4914                           
  4915                           ;pwm.c: 104: CCP1IE = 1;
  4916  0502  0021               	movlb	1	; select bank1
  4917  0503  1511               	bsf	17,2	;volatile
  4918                           
  4919                           ;pwm.c: 105: CCP1IF = 0;
  4920  0504  0020               	movlb	0	; select bank0
  4921  0505  1111               	bcf	17,2	;volatile
  4922                           
  4923                           ;pwm.c: 106: CCP1CON = 0x05;
  4924  0506  3005               	movlw	5
  4925  0507  0025               	movlb	5	; select bank5
  4926  0508  0093               	movwf	19	;volatile
  4927                           
  4928                           ;pwm.c: 107: break;
  4929  0509  0008               	return
  4930  050A                     l6678:	
  4931                           
  4932                           ;pwm.c: 114: {
  4933                           ;pwm.c: 116: CCP2CON = 0x00;
  4934  050A  0025               	movlb	5	; select bank5
  4935  050B  019A               	clrf	26	;volatile
  4936                           
  4937                           ;pwm.c: 117: CCPR2L = 0x00;
  4938  050C  0198               	clrf	24	;volatile
  4939                           
  4940                           ;pwm.c: 118: CCPR2H = 0x00;
  4941  050D  0199               	clrf	25	;volatile
  4942                           
  4943                           ;pwm.c: 119: CCP2IE = 1;
  4944  050E  0021               	movlb	1	; select bank1
  4945  050F  1412               	bsf	18,0	;volatile
  4946                           
  4947                           ;pwm.c: 120: CCP2IF = 0;
  4948  0510  0020               	movlb	0	; select bank0
  4949  0511  1012               	bcf	18,0	;volatile
  4950                           
  4951                           ;pwm.c: 121: CCP2CON = 0x05;
  4952  0512  3005               	movlw	5
  4953  0513  0025               	movlb	5	; select bank5
  4954  0514  009A               	movwf	26	;volatile
  4955                           
  4956                           ;pwm.c: 122: break;
  4957  0515  0008               	return
  4958  0516                     l6686:	
  4959                           
  4960                           ;pwm.c: 129: {
  4961                           ;pwm.c: 131: CCP3CON = 0x00;
  4962  0516  0026               	movlb	6	; select bank6
  4963  0517  0193               	clrf	19	;volatile
  4964                           
  4965                           ;pwm.c: 132: CCPR3L = 0x00;
  4966  0518  0191               	clrf	17	;volatile
  4967                           
  4968                           ;pwm.c: 133: CCPR3H = 0x00;
  4969  0519  0192               	clrf	18	;volatile
  4970                           
  4971                           ;pwm.c: 134: CCP3IE = 1;
  4972  051A  0021               	movlb	1	; select bank1
  4973  051B  1613               	bsf	19,4	;volatile
  4974                           
  4975                           ;pwm.c: 135: CCP3IF = 0;
  4976  051C  0020               	movlb	0	; select bank0
  4977  051D  1213               	bcf	19,4	;volatile
  4978                           
  4979                           ;pwm.c: 136: CCP3CON = 0x05;
  4980  051E  3005               	movlw	5
  4981  051F  0026               	movlb	6	; select bank6
  4982  0520  0093               	movwf	19	;volatile
  4983                           
  4984                           ;pwm.c: 137: break;
  4985  0521  0008               	return
  4986  0522                     l6694:	
  4987                           
  4988                           ;pwm.c: 144: {
  4989                           ;pwm.c: 146: CCP4CON = 0x00;
  4990  0522  0026               	movlb	6	; select bank6
  4991  0523  019A               	clrf	26	;volatile
  4992                           
  4993                           ;pwm.c: 147: CCPR4L = 0x00;
  4994  0524  0198               	clrf	24	;volatile
  4995                           
  4996                           ;pwm.c: 148: CCPR4H = 0x00;
  4997  0525  0199               	clrf	25	;volatile
  4998                           
  4999                           ;pwm.c: 149: CCP4IE = 1;
  5000  0526  0021               	movlb	1	; select bank1
  5001  0527  1693               	bsf	19,5	;volatile
  5002                           
  5003                           ;pwm.c: 150: CCP4IF = 0;
  5004  0528  0020               	movlb	0	; select bank0
  5005  0529  1293               	bcf	19,5	;volatile
  5006                           
  5007                           ;pwm.c: 151: CCP4CON = 0x05;
  5008  052A  3005               	movlw	5
  5009  052B  0026               	movlb	6	; select bank6
  5010  052C  009A               	movwf	26	;volatile
  5011                           
  5012                           ;pwm.c: 152: break;
  5013  052D  0008               	return
  5014  052E                     l6702:	
  5015                           
  5016                           ;pwm.c: 159: {
  5017                           ;pwm.c: 161: CCP5CON = 0x00;
  5018  052E  0026               	movlb	6	; select bank6
  5019  052F  019E               	clrf	30	;volatile
  5020                           
  5021                           ;pwm.c: 162: CCPR5L = 0x00;
  5022  0530  019C               	clrf	28	;volatile
  5023                           
  5024                           ;pwm.c: 163: CCPR5H = 0x00;
  5025  0531  019D               	clrf	29	;volatile
  5026                           
  5027                           ;pwm.c: 164: CCP5IE = 1;
  5028  0532  0021               	movlb	1	; select bank1
  5029  0533  1713               	bsf	19,6	;volatile
  5030                           
  5031                           ;pwm.c: 165: CCP5IF = 0;
  5032  0534  0020               	movlb	0	; select bank0
  5033  0535  1313               	bcf	19,6	;volatile
  5034                           
  5035                           ;pwm.c: 166: CCP5CON = 0x05;
  5036                           
  5037                           ;pwm.c: 167: break;
  5038  0536  2EDD               	ljmp	PL118	;call to abstracted procedure
  5039  0537                     l1366:	
  5040  0537  0008               	return
  5041  0538                     __end_of_PWM_Capture_init:	
  5042  0538                     __ptext8:	
  5043 ;; *************** function __ELINMIntInitialize *****************
  5044 ;; Defined at:
  5045 ;;		line 482 in file "../lin.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      unsigned char 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2
  5054 ;; Tracked objects:
  5055 ;;		On entry : 1F/0
  5056 ;;		On exit  : 1F/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5059 ;;      Params:         0       0       0       0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0       0
  5062 ;;      Totals:         0       0       0       0       0       0       0       0
  5063 ;;Total ram usage:        0 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    4
  5066 ;; This function calls:
  5067 ;;		Nothing
  5068 ;; This function is called by:
  5069 ;;		_system_init
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           
  5074                           ;psect for function __ELINMIntInitialize
  5075  0538                     __ELINMIntInitialize:	
  5076                           
  5077                           ;lin.c: 487: SPBRG = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)&0x00FF);
  5078                           
  5079                           ;incstack = 0
  5080                           ; Regs used in __ELINMIntInitialize: [wreg+status,2]
  5081  0538  309F               	movlw	159
  5082  0539  0023               	movlb	3	; select bank3
  5083  053A  009B               	movwf	27	;volatile
  5084                           
  5085                           ;lin.c: 488: SPBRGH = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)>>8);
  5086  053B  3001               	movlw	1
  5087  053C  009C               	movwf	28	;volatile
  5088                           
  5089                           ;lin.c: 489: TXSTA = 0x26;
  5090  053D  3026               	movlw	38
  5091  053E  009E               	movwf	30	;volatile
  5092                           
  5093                           ;lin.c: 490: RCSTA = 0x90;
  5094  053F  3090               	movlw	144
  5095  0540  009D               	movwf	29	;volatile
  5096                           
  5097                           ;lin.c: 491: BAUDCON = 0x48;
  5098  0541  3048               	movlw	72
  5099  0542  009F               	movwf	31	;volatile
  5100                           
  5101                           ;lin.c: 492: PIE1 = 0x00;
  5102  0543  0021               	movlb	1	; select bank1
  5103  0544  0191               	clrf	17	;volatile
  5104                           
  5105                           ;lin.c: 493: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  5106  0545  0023               	movlb	3	; select bank3
  5107  0546  267B               	fcall	PL62	;call to abstracted procedure
  5108                           
  5109                           ;lin.c: 494: _ELINMIntSpace = (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)/
      +                          2;
  5110  0547  0022               	movlb	2	; select bank2
  5111  0548  01DB               	clrf	__ELINMIntSpace^(0+256)
  5112                           
  5113                           ;lin.c: 495: _ELINMIntStatus.ELINMIntStatusByte = 0;
  5114  0549  0020               	movlb	0	; select bank0
  5115  054A  01D3               	clrf	__ELINMIntStatus
  5116                           
  5117                           ;lin.c: 496: _ELINMIntStatus1.ELINMIntStatusByte = 0;
  5118  054B  0021               	movlb	1	; select bank1
  5119  054C  01D4               	clrf	__ELINMIntStatus1^(0+128)
  5120                           
  5121                           ;lin.c: 497: _ELINMIntStatus.ELINMINTSTS.IDLE = 1;
  5122  054D  0020               	movlb	0	; select bank0
  5123  054E  15D3               	bsf	__ELINMIntStatus,3
  5124  054F  0008               	return
  5125  0550                     __end_of__ELINMIntInitialize:	
  5126  0550                     __ptext4:	
  5127 ;; *************** function _init_ports *****************
  5128 ;; Defined at:
  5129 ;;		line 404 in file "../main.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, pclath, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : B1F/3
  5140 ;;		On exit  : 1F/1
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5143 ;;      Params:         0       0       0       0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0       0
  5146 ;;      Totals:         0       0       0       0       0       0       0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    5
  5150 ;; This function calls:
  5151 ;;		_read_eeprom_data
  5152 ;; This function is called by:
  5153 ;;		_system_init
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _init_ports
  5159  0550                     _init_ports:	
  5160                           
  5161                           ;main.c: 411: ANSELA = 0b00100111;
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _init_ports: [wreg+status,2+pclath+cstack]
  5165  0550  3027               	movlw	39
  5166  0551  008C               	movwf	12	;volatile
  5167                           
  5168                           ;main.c: 412: ANSELB = 0b00101001;
  5169  0552  3029               	movlw	41
  5170  0553  008D               	movwf	13	;volatile
  5171                           
  5172                           ;main.c: 415: LATA = 0;
  5173  0554  0022               	movlb	2	; select bank2
  5174  0555  018C               	clrf	12	;volatile
  5175                           
  5176                           ;main.c: 416: LATB = 0;
  5177  0556  018D               	clrf	13	;volatile
  5178                           
  5179                           ;main.c: 417: LATC = 0;
  5180  0557  018E               	clrf	14	;volatile
  5181                           
  5182                           ;main.c: 422: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  5183  0558  3055               	movlw	85
  5184  0559  225D  3180         	fcall	_read_eeprom_data
  5185  055B  3A55               	xorlw	85
  5186  055C  1903               	skipnz
  5187  055D  2D60               	goto	l10102
  5188  055E  1A8E               	btfsc	14,5	;volatile
  5189  055F  2D63               	goto	l10106
  5190  0560                     l10102:	
  5191                           
  5192                           ;main.c: 424: {
  5193                           ;main.c: 426: TRISA = 0b01111111;
  5194                           
  5195                           ;main.c: 435: TRISB = 0b00111001;
  5196  0560  2590               	fcall	PL106	;call to abstracted procedure
  5197                           
  5198                           ;main.c: 444: TRISC = 0b00000000;
  5199  0561  018E               	clrf	14	;volatile
  5200                           
  5201                           ;main.c: 455: }
  5202  0562  0008               	return
  5203  0563                     l10106:	
  5204                           
  5205                           ;main.c: 458: else
  5206                           ;main.c: 459: {
  5207                           ;main.c: 461: TRISA = 0b01111111;
  5208                           
  5209                           ;main.c: 470: TRISB = 0b00111001;
  5210  0563  2590               	fcall	PL106	;call to abstracted procedure
  5211                           
  5212                           ;main.c: 479: TRISC = 0b10000000;
  5213  0564  3080               	movlw	128
  5214  0565  008E               	movwf	14	;volatile
  5215  0566  0008               	return
  5216  0567                     __end_of_init_ports:	
  5217  0567                     __ptext5:	
  5218 ;; *************** function _init_bldc *****************
  5219 ;; Defined at:
  5220 ;;		line 207 in file "../bldc.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 1F/2
  5231 ;;		On exit  : 1C/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5234 ;;      Params:         0       0       0       0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0
  5237 ;;      Totals:         0       0       0       0       0       0       0       0
  5238 ;;Total ram usage:        0 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    7
  5241 ;; This function calls:
  5242 ;;		_InitMotorRun
  5243 ;; This function is called by:
  5244 ;;		_system_init
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           
  5249                           ;psect for function _init_bldc
  5250  0567                     _init_bldc:	
  5251                           
  5252                           ;bldc.c: 218: PSTR1CON = 0;
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5256  0567  0025               	movlb	5	; select bank5
  5257  0568  0196               	clrf	22	;volatile
  5258                           
  5259                           ;bldc.c: 222: CM1CON0 = 0x80;
  5260  0569  3080               	movlw	128
  5261  056A  0022               	movlb	2	; select bank2
  5262  056B  0091               	movwf	17	;volatile
  5263                           
  5264                           ;bldc.c: 228: CM1CON1 = 0x00;
  5265  056C  0192               	clrf	18	;volatile
  5266                           
  5267                           ;bldc.c: 230: C1IE = 0;
  5268  056D  0021               	movlb	1	; select bank1
  5269  056E  1292               	bcf	18,5	;volatile
  5270                           
  5271                           ;bldc.c: 235: PWM1CON = 0x87;
  5272  056F  3087               	movlw	135
  5273  0570  0025               	movlb	5	; select bank5
  5274  0571  0094               	movwf	20	;volatile
  5275                           
  5276                           ;bldc.c: 239: CCP1AS = 0x800;
  5277  0572  0195               	clrf	21	;volatile
  5278                           
  5279                           ;bldc.c: 240: CCP1CON = 0x0C;
  5280  0573  300C               	movlw	12
  5281  0574  0093               	movwf	19	;volatile
  5282                           
  5283                           ;bldc.c: 246: CCPR1L = 0;
  5284  0575  0191               	clrf	17	;volatile
  5285                           
  5286                           ;bldc.c: 248: CCP2IE = 0;
  5287  0576  0021               	movlb	1	; select bank1
  5288  0577  1012               	bcf	18,0	;volatile
  5289                           
  5290                           ;bldc.c: 249: CCP2CON = 0x04;
  5291  0578  3004               	movlw	4
  5292  0579  0025               	movlb	5	; select bank5
  5293  057A  009A               	movwf	26	;volatile
  5294                           
  5295                           ;bldc.c: 250: CCPR2L = 0xff;
  5296  057B  30FF               	movlw	255
  5297  057C  0098               	movwf	24	;volatile
  5298                           
  5299                           ;bldc.c: 251: CCPR2H = 0xff;
  5300  057D  0099               	movwf	25	;volatile
  5301                           
  5302                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  5303  057E  3064               	movlw	100
  5304  057F  0020               	movlb	0	; select bank0
  5305  0580  009B               	movwf	27	;volatile
  5306                           
  5307                           ;bldc.c: 255: T2CON = 0x05;
  5308  0581  3005               	movlw	5
  5309  0582  009C               	movwf	28	;volatile
  5310                           
  5311                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  5312  0583  3028               	movlw	40
  5313  0584  0021               	movlb	1	; select bank1
  5314  0585  00E2               	movwf	_ui8_BlankingCount^(0+128)
  5315                           
  5316                           ;bldc.c: 264: TMR2IE = 1;
  5317  0586  1491               	bsf	17,1	;volatile
  5318                           
  5319                           ;bldc.c: 267: MotorFlags.b = 0;
  5320  0587  01FA               	clrf	_MotorFlags
  5321                           
  5322                           ;bldc.c: 270: InitMotorRun( );
  5323  0588  2BA3               	ljmp	l9768
  5324  0589                     __end_of_init_bldc:	
  5325  0589                     PL94:	
  5326  0589  0021               	movlb	1	; select bank1
  5327  058A  3567               	lslf	_windowPtr1^(0+128),w
  5328  058B  3E40               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  5329  058C  0086               	movwf	6
  5330  058D  3002               	movlw	2	; select bank4/5
  5331  058E  0087               	movwf	7
  5332  058F  0008               	return
  5333  0590                     __end_ofPL94:	
  5334  0590                     PL106:	
  5335  0590  307F               	movlw	127
  5336  0591  0021               	movlb	1	; select bank1
  5337  0592  008C               	movwf	12	;volatile
  5338  0593  3039               	movlw	57
  5339  0594  008D               	movwf	13	;volatile
  5340  0595  0008               	return
  5341  0596                     __end_ofPL106:	
  5342  0596                     __ptext60:	
  5343 ;; *************** function _ELINMIntHandler *****************
  5344 ;; Defined at:
  5345 ;;		line 555 in file "../lin.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 1F/0
  5356 ;;		On exit  : 1C/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5359 ;;      Params:         0       0       0       0       0       0       0       0
  5360 ;;      Locals:         0       0       0       0       0       0       0       0
  5361 ;;      Temps:          0       0       0       0       0       0       0       0
  5362 ;;      Totals:         0       0       0       0       0       0       0       0
  5363 ;;Total ram usage:        0 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    1
  5366 ;; This function calls:
  5367 ;;		__ELINMIntResetProtocol
  5368 ;; This function is called by:
  5369 ;;		_interrupt_handler
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _ELINMIntHandler
  5375  0596                     _ELINMIntHandler:	
  5376                           
  5377                           ;lin.c: 560: if( SENDB == 0)
  5378                           
  5379                           ;incstack = 0
  5380                           ; Regs used in _ELINMIntHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5381  0596  0023               	movlb	3	; select bank3
  5382  0597  199E               	btfsc	30,3	;volatile
  5383  0598  2E17               	goto	i1l8168
  5384                           
  5385                           ;lin.c: 563: {
  5386                           ;lin.c: 565: if( RCIF)
  5387  0599  0020               	movlb	0	; select bank0
  5388  059A  1E91               	btfss	17,5	;volatile
  5389  059B  2E17               	goto	i1l8168
  5390                           
  5391                           ;lin.c: 568: {
  5392                           ;lin.c: 572: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
  5393  059C  1DD3               	btfss	__ELINMIntStatus,3
  5394  059D  2DB2               	goto	i1l964
  5395                           
  5396                           ;lin.c: 575: {
  5397                           ;lin.c: 577: if( ( RCSTA & 0x06 ) == 0)
  5398  059E  0023               	movlb	3	; select bank3
  5399  059F  081D               	movf	29,w	;volatile
  5400  05A0  3906               	andlw	6
  5401  05A1  1D03               	btfss	3,2
  5402  05A2  2E17               	goto	i1l8168
  5403                           
  5404                           ;lin.c: 580: {
  5405                           ;lin.c: 584: if( RCREG == 0x80)
  5406  05A3  3080               	movlw	128
  5407  05A4  0619               	xorwf	25,w	;volatile
  5408  05A5  1D03               	btfss	3,2
  5409  05A6  2E17               	goto	i1l8168
  5410                           
  5411                           ;lin.c: 587: {
  5412                           ;lin.c: 589: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  5413  05A7  267B  3180         	fcall	PL62	;call to abstracted procedure
  5414                           
  5415                           ;lin.c: 590: _ELINMIntReadBack = RCREG;
  5416  05A9  0819               	movf	25,w	;volatile
  5417  05AA  0021               	movlb	1	; select bank1
  5418  05AB  00D2               	movwf	__ELINMIntReadBack^(0+128)
  5419                           
  5420                           ;lin.c: 593: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT)
  5421  05AC  1ED4               	btfss	__ELINMIntStatus1^(0+128),5
  5422  05AD  2DB0               	goto	i1l967
  5423                           
  5424                           ;lin.c: 596: {
  5425                           ;lin.c: 598: _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT = 0;
  5426  05AE  12D4               	bcf	__ELINMIntStatus1^(0+128),5
  5427                           
  5428                           ;lin.c: 601: }
  5429  05AF  2E17               	goto	i1l8168
  5430  05B0                     i1l967:	
  5431                           
  5432                           ;lin.c: 604: else
  5433                           ;lin.c: 605: {
  5434                           ;lin.c: 607: _ELINMIntStatus1.ELINMINTSTS.WAKEUP = 1;
  5435  05B0  1454               	bsf	__ELINMIntStatus1^(0+128),0
  5436  05B1  2E17               	goto	i1l8168
  5437  05B2                     i1l964:	
  5438                           
  5439                           ;lin.c: 623: else
  5440                           ;lin.c: 624: {
  5441                           ;lin.c: 626: if( _ELINMIntStatus.ELINMINTSTS.TX)
  5442  05B2  1C53               	btfss	__ELINMIntStatus,0
  5443  05B3  2DED               	goto	i1l970
  5444                           
  5445                           ;lin.c: 629: {
  5446                           ;lin.c: 633: if( ( RCSTA & 0x06 ) && _ELINMIntMessageBufferPointer)
  5447  05B4  0023               	movlb	3	; select bank3
  5448  05B5  081D               	movf	29,w	;volatile
  5449  05B6  3906               	andlw	6
  5450  05B7  1903               	btfsc	3,2
  5451  05B8  2DBD               	goto	i1l8116
  5452  05B9  0021               	movlb	1	; select bank1
  5453  05BA  0851               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  5454  05BB  1D03               	btfss	3,2
  5455  05BC  2DF4               	goto	i1l8148
  5456  05BD                     i1l8116:	
  5457                           ;lin.c: 642: }
  5458                           
  5459                           ;lin.c: 636: {
  5460                           ;lin.c: 638: _ELINMIntResetProtocol(
  5461                           ;lin.c: 639: 0x08 + 0x04 + 0x70 );
  5462                           
  5463                           
  5464                           ;lin.c: 645: else
  5465                           ;lin.c: 646: {
  5466                           ;lin.c: 651: if( _ELINMIntMessageBufferPointer == 2)
  5467  05BD  3002               	movlw	2
  5468  05BE  0021               	movlb	1	; select bank1
  5469  05BF  0651               	xorwf	__ELINMIntMessageBufferPointer^(0+128),w
  5470  05C0  1903               	btfsc	3,2
  5471                           
  5472                           ;lin.c: 654: {
  5473                           ;lin.c: 656: _ELINMIntStatus1.ELINMINTSTS.HEADER = 0;
  5474  05C1  10D4               	bcf	__ELINMIntStatus1^(0+128),1
  5475                           
  5476                           ;lin.c: 659: }
  5477                           ;lin.c: 662: if( _ELINMIntSpace)
  5478  05C2  0022               	movlb	2	; select bank2
  5479  05C3  085B               	movf	__ELINMIntSpace^(0+256),w
  5480  05C4  1903               	btfsc	3,2
  5481  05C5  2DC8               	goto	i1l8124
  5482                           
  5483                           ;lin.c: 665: {
  5484                           ;lin.c: 667: _ELINMIntSpace--;
  5485  05C6  03DB               	decf	__ELINMIntSpace^(0+256),f
  5486                           
  5487                           ;lin.c: 670: }
  5488  05C7  2E17               	goto	i1l8168
  5489  05C8                     i1l8124:	
  5490                           
  5491                           ;lin.c: 673: else
  5492                           ;lin.c: 674: {
  5493                           ;lin.c: 676: if( _ELINMIntReadBack != RCREG)
  5494  05C8  0021               	movlb	1	; select bank1
  5495  05C9  0852               	movf	__ELINMIntReadBack^(0+128),w
  5496  05CA  0023               	movlb	3	; select bank3
  5497  05CB  0619               	xorwf	25,w	;volatile
  5498  05CC  1903               	skipnz
  5499  05CD  2DD0               	goto	i1l8128
  5500                           
  5501                           ;lin.c: 679: {
  5502                           ;lin.c: 681: _ELINMIntResetProtocol(0x08 + 0x04 + 0x60 );
  5503  05CE  306C               	movlw	108
  5504  05CF  2E15               	goto	L66
  5505  05D0                     i1l8128:	
  5506                           ;lin.c: 684: }
  5507                           
  5508                           
  5509                           ;lin.c: 687: else
  5510                           ;lin.c: 688: {
  5511                           ;lin.c: 693: if( _ELINMIntMessageSize.SIZE)
  5512  05D0  0021               	movlb	1	; select bank1
  5513  05D1  0853               	movf	__ELINMIntMessageSize^(0+128),w
  5514  05D2  1903               	btfsc	3,2
  5515  05D3  2DE3               	goto	i1l978
  5516                           
  5517                           ;lin.c: 696: {
  5518                           ;lin.c: 698: _ELINMIntReadBack = RCREG;
  5519  05D4  0023               	movlb	3	; select bank3
  5520  05D5  0819               	movf	25,w	;volatile
  5521  05D6  0021               	movlb	1	; select bank1
  5522  05D7  00D2               	movwf	__ELINMIntReadBack^(0+128)
  5523                           
  5524                           ;lin.c: 699: _ELINMIntReadBack = _ELINMIntMessageBuffer[ _ELINMIntMessageBufferPointer ]
      +                          ;
  5525  05D8  2682  3180         	fcall	PL98	;call to abstracted procedure
  5526  05DA  0801               	movf	1,w
  5527  05DB  00D2               	movwf	__ELINMIntReadBack^(0+128)
  5528                           
  5529                           ;lin.c: 700: TXREG = _ELINMIntReadBack; _ELINMIntMessageSize.SIZE--;
  5530  05DC  0023               	movlb	3	; select bank3
  5531  05DD  009A               	movwf	26	;volatile
  5532  05DE  0021               	movlb	1	; select bank1
  5533  05DF  03D3               	decf	__ELINMIntMessageSize^(0+128),f
  5534  05E0                     i1l8138:	
  5535                           
  5536                           ;lin.c: 702: _ELINMIntSpace += (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)
      +                          /2;
  5537  05E0  0021               	movlb	1	; select bank1
  5538  05E1  0AD1               	incf	__ELINMIntMessageBufferPointer^(0+128),f
  5539                           
  5540                           ;lin.c: 705: }
  5541  05E2  2E17               	goto	i1l8168
  5542  05E3                     i1l978:	
  5543                           
  5544                           ;lin.c: 708: else
  5545                           ;lin.c: 709: {
  5546                           ;lin.c: 714: if( _ELINMIntStatus.ELINMINTSTS.RX)
  5547  05E3  0020               	movlb	0	; select bank0
  5548  05E4  1CD3               	btfss	__ELINMIntStatus,1
  5549  05E5  2DEA               	goto	i1l980
  5550                           
  5551                           ;lin.c: 717: {
  5552                           ;lin.c: 719: _ELINMIntStatus.ELINMINTSTS.TX = 0;
  5553  05E6  1053               	bcf	__ELINMIntStatus,0
  5554                           
  5555                           ;lin.c: 720: _ELINMIntMessageBufferPointer = 0;
  5556  05E7  0021               	movlb	1	; select bank1
  5557  05E8  01D1               	clrf	__ELINMIntMessageBufferPointer^(0+128)
  5558                           
  5559                           ;lin.c: 723: }
  5560  05E9  2E17               	goto	i1l8168
  5561  05EA                     i1l980:	
  5562                           
  5563                           ;lin.c: 726: else
  5564                           ;lin.c: 727: {
  5565                           ;lin.c: 732: _ELINMIntStatus1.ELINMINTSTS.FRAME = 0;
  5566  05EA  0021               	movlb	1	; select bank1
  5567  05EB  1154               	bcf	__ELINMIntStatus1^(0+128),2
  5568  05EC  2E14               	goto	i1l8166
  5569  05ED                     i1l970:	
  5570                           ;lin.c: 733: _ELINMIntResetProtocol( 0x08 );
  5571                           
  5572                           
  5573                           ;lin.c: 755: else
  5574                           ;lin.c: 756: {
  5575                           ;lin.c: 758: if( _ELINMIntStatus.ELINMINTSTS.RX)
  5576  05ED  1CD3               	btfss	__ELINMIntStatus,1
  5577  05EE  2E17               	goto	i1l8168
  5578                           
  5579                           ;lin.c: 761: {
  5580                           ;lin.c: 765: if( RCSTA & 0x06)
  5581  05EF  0023               	movlb	3	; select bank3
  5582  05F0  081D               	movf	29,w	;volatile
  5583  05F1  3906               	andlw	6
  5584  05F2  1903               	btfsc	3,2
  5585  05F3  2DF6               	goto	i1l8150
  5586  05F4                     i1l8148:	
  5587                           
  5588                           ;lin.c: 768: {
  5589                           ;lin.c: 770: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x70 );
  5590  05F4  307C               	movlw	124
  5591  05F5  2E15               	goto	L66
  5592  05F6                     i1l8150:	
  5593                           ;lin.c: 773: }
  5594                           
  5595                           
  5596                           ;lin.c: 776: else
  5597                           ;lin.c: 777: {
  5598                           ;lin.c: 779: if( _ELINMIntRXMessageSize.SIZE)
  5599  05F6  0022               	movlb	2	; select bank2
  5600  05F7  085C               	movf	__ELINMIntRXMessageSize^(0+256),w
  5601  05F8  1903               	btfsc	3,2
  5602  05F9  2E0B               	goto	i1l8162
  5603                           
  5604                           ;lin.c: 782: {
  5605                           ;lin.c: 784: _ELINMIntMessageBuffer [ _ELINMIntMessageBufferPointer ] = RCREG;
  5606  05FA  0021               	movlb	1	; select bank1
  5607  05FB  2682  3180         	fcall	PL98	;call to abstracted procedure
  5608  05FD  0023               	movlb	3	; select bank3
  5609  05FE  0819               	movf	25,w	;volatile
  5610  05FF  0081               	movwf	1
  5611                           
  5612                           ;lin.c: 785: _ELINMIntRXMessageSize.SIZE--;
  5613  0600  0022               	movlb	2	; select bank2
  5614  0601  03DC               	decf	__ELINMIntRXMessageSize^(0+256),f
  5615                           
  5616                           ;lin.c: 786: _ELINMIntRXCRC.CRC += RCREG;
  5617  0602  0023               	movlb	3	; select bank3
  5618  0603  0819               	movf	25,w	;volatile
  5619  0604  07D4               	addwf	__ELINMIntRXCRC^(0+384),f
  5620  0605  1803               	skipnc
  5621  0606  0AD5               	incf	(__ELINMIntRXCRC+1)^(0+384),f
  5622                           
  5623                           ;lin.c: 789: if( _ELINMIntRXCRC.CRCbits.CRC8)
  5624  0607  1C55               	btfss	(__ELINMIntRXCRC^(0+384)+1),0
  5625  0608  2DE0               	goto	i1l8138
  5626                           
  5627                           ;lin.c: 792: {
  5628                           ;lin.c: 794: _ELINMIntRXCRC.CRCL++;
  5629  0609  0AD4               	incf	__ELINMIntRXCRC^(0+384),f
  5630  060A  2DE0               	goto	i1l8138
  5631  060B                     i1l8162:	
  5632                           
  5633                           ;lin.c: 813: _ELINMIntRXCRC.CRCL += RCREG + 1;
  5634  060B  0023               	movlb	3	; select bank3
  5635  060C  0819               	movf	25,w	;volatile
  5636  060D  3E01               	addlw	1
  5637  060E  07D4               	addwf	__ELINMIntRXCRC^(0+384),f
  5638                           
  5639                           ;lin.c: 816: if( _ELINMIntRXCRC.CRCL )
  5640  060F  0854               	movf	__ELINMIntRXCRC^(0+384),w
  5641  0610  1903               	btfsc	3,2
  5642  0611  2E14               	goto	i1l8166
  5643                           
  5644                           ;lin.c: 819: {
  5645                           ;lin.c: 821: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x50 );
  5646  0612  305C               	movlw	92
  5647  0613  2E15               	goto	L66
  5648  0614                     i1l8166:	
  5649                           ;lin.c: 824: }
  5650                           
  5651                           
  5652                           ;lin.c: 827: else
  5653                           ;lin.c: 828: {
  5654                           ;lin.c: 830: _ELINMIntResetProtocol( 0x08 );
  5655  0614  3008               	movlw	8
  5656  0615                     L66:	
  5657  0615  266C  3180         	fcall	__ELINMIntResetProtocol
  5658  0617                     i1l8168:	
  5659                           
  5660                           ;lin.c: 833: }
  5661                           ;lin.c: 836: }
  5662                           ;lin.c: 839: }
  5663                           ;lin.c: 843: }
  5664                           ;lin.c: 846: }
  5665                           ;lin.c: 849: }
  5666                           ;lin.c: 853: }
  5667                           ;lin.c: 856: }
  5668                           ;lin.c: 859: if( _ELINMIntStatus.ELINMINTSTS.IDLE == 0 )
  5669  0617  0020               	movlb	0	; select bank0
  5670  0618  19D3               	btfsc	__ELINMIntStatus,3
  5671  0619  2E58               	goto	i1l991
  5672                           
  5673                           ;lin.c: 862: {
  5674                           ;lin.c: 866: if( _ELINMIntStatus1.ELINMINTSTS.FRAME == 1)
  5675  061A  0021               	movlb	1	; select bank1
  5676  061B  1D54               	btfss	__ELINMIntStatus1^(0+128),2
  5677  061C  2E51               	goto	i1l8198
  5678                           
  5679                           ;lin.c: 869: {
  5680                           ;lin.c: 871: if( _ELINMIntStatus1.ELINMINTSTS.HEADER == 1)
  5681  061D  1CD4               	btfss	__ELINMIntStatus1^(0+128),1
  5682  061E  2E34               	goto	i1l8184
  5683                           
  5684                           ;lin.c: 874: {
  5685                           ;lin.c: 876: if( _ELINMIntTHeaderMin)
  5686  061F  0022               	movlb	2	; select bank2
  5687  0620  0827               	movf	__ELINMIntTHeaderMin^(0+256),w
  5688  0621  0428               	iorwf	(__ELINMIntTHeaderMin+1)^(0+256),w
  5689  0622  1903               	btfsc	3,2
  5690  0623  2E28               	goto	i1l8178
  5691                           
  5692                           ;lin.c: 879: {
  5693                           ;lin.c: 881: _ELINMIntTHeaderMin--;
  5694  0624  3001               	movlw	1
  5695  0625  02A7               	subwf	__ELINMIntTHeaderMin^(0+256),f
  5696  0626  3000               	movlw	0
  5697  0627  3BA8               	subwfb	(__ELINMIntTHeaderMin+1)^(0+256),f
  5698  0628                     i1l8178:	
  5699                           
  5700                           ;lin.c: 884: }
  5701                           ;lin.c: 887: if( _ELINMIntTHeaderMax)
  5702  0628  0023               	movlb	3	; select bank3
  5703  0629  0850               	movf	__ELINMIntTHeaderMax^(0+384),w
  5704  062A  0451               	iorwf	(__ELINMIntTHeaderMax+1)^(0+384),w
  5705  062B  1903               	btfsc	3,2
  5706  062C  2E32               	goto	i1l8182
  5707                           
  5708                           ;lin.c: 890: {
  5709                           ;lin.c: 892: _ELINMIntTHeaderMax--;
  5710  062D  3001               	movlw	1
  5711  062E  02D0               	subwf	__ELINMIntTHeaderMax^(0+384),f
  5712  062F  3000               	movlw	0
  5713  0630  3BD1               	subwfb	(__ELINMIntTHeaderMax+1)^(0+384),f
  5714                           
  5715                           ;lin.c: 895: }
  5716  0631  2E3C               	goto	i1l8188
  5717  0632                     i1l8182:	
  5718                           
  5719                           ;lin.c: 898: else
  5720                           ;lin.c: 899: {
  5721                           ;lin.c: 902: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x20 );
  5722  0632  302C               	movlw	44
  5723  0633  2E3A               	goto	L67
  5724  0634                     i1l8184:	
  5725                           
  5726                           ;lin.c: 911: else
  5727                           ;lin.c: 912: {
  5728                           ;lin.c: 917: if( _ELINMIntTHeaderMin)
  5729  0634  0022               	movlb	2	; select bank2
  5730  0635  0827               	movf	__ELINMIntTHeaderMin^(0+256),w
  5731  0636  0428               	iorwf	(__ELINMIntTHeaderMin+1)^(0+256),w
  5732  0637  1903               	btfsc	3,2
  5733  0638  2E3C               	goto	i1l8188
  5734                           
  5735                           ;lin.c: 920: {
  5736                           ;lin.c: 922: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x10 );
  5737  0639  301C               	movlw	28
  5738  063A                     L67:	
  5739  063A  266C  3180         	fcall	__ELINMIntResetProtocol
  5740  063C                     i1l8188:	
  5741                           
  5742                           ;lin.c: 925: }
  5743                           ;lin.c: 928: }
  5744                           ;lin.c: 931: if( _ELINMIntTFrameMin)
  5745  063C  0022               	movlb	2	; select bank2
  5746  063D  0829               	movf	__ELINMIntTFrameMin^(0+256),w
  5747  063E  042A               	iorwf	(__ELINMIntTFrameMin+1)^(0+256),w
  5748  063F  1903               	btfsc	3,2
  5749  0640  2E45               	goto	i1l8192
  5750                           
  5751                           ;lin.c: 934: {
  5752                           ;lin.c: 936: _ELINMIntTFrameMin--;
  5753  0641  3001               	movlw	1
  5754  0642  02A9               	subwf	__ELINMIntTFrameMin^(0+256),f
  5755  0643  3000               	movlw	0
  5756  0644  3BAA               	subwfb	(__ELINMIntTFrameMin+1)^(0+256),f
  5757  0645                     i1l8192:	
  5758                           
  5759                           ;lin.c: 939: }
  5760                           ;lin.c: 942: if( _ELINMIntTFrameMax)
  5761  0645  0023               	movlb	3	; select bank3
  5762  0646  0852               	movf	__ELINMIntTFrameMax^(0+384),w
  5763  0647  0453               	iorwf	(__ELINMIntTFrameMax+1)^(0+384),w
  5764  0648  1903               	btfsc	3,2
  5765  0649  2E4F               	goto	i1l8196
  5766                           
  5767                           ;lin.c: 945: {
  5768                           ;lin.c: 947: _ELINMIntTFrameMax--;
  5769  064A  3001               	movlw	1
  5770  064B  02D2               	subwf	__ELINMIntTFrameMax^(0+384),f
  5771  064C  3000               	movlw	0
  5772  064D  3BD3               	subwfb	(__ELINMIntTFrameMax+1)^(0+384),f
  5773                           
  5774                           ;lin.c: 950: }
  5775  064E  0008               	return
  5776  064F                     i1l8196:	
  5777                           
  5778                           ;lin.c: 953: else
  5779                           ;lin.c: 954: {
  5780                           ;lin.c: 957: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x40 );
  5781  064F  304C               	movlw	76
  5782  0650  2E6C               	ljmp	__ELINMIntResetProtocol
  5783  0651                     i1l8198:	
  5784                           
  5785                           ;lin.c: 966: else
  5786                           ;lin.c: 967: {
  5787                           ;lin.c: 972: if( _ELINMIntTFrameMin)
  5788  0651  0022               	movlb	2	; select bank2
  5789  0652  0829               	movf	__ELINMIntTFrameMin^(0+256),w
  5790  0653  042A               	iorwf	(__ELINMIntTFrameMin+1)^(0+256),w
  5791  0654  1903               	btfsc	3,2
  5792  0655  0008               	return
  5793                           
  5794                           ;lin.c: 975: {
  5795                           ;lin.c: 977: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x30 );
  5796  0656  303C               	movlw	60
  5797  0657  2E6C               	ljmp	__ELINMIntResetProtocol
  5798  0658                     i1l991:	
  5799                           
  5800                           ;lin.c: 990: else
  5801                           ;lin.c: 991: {
  5802                           ;lin.c: 993: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT == 0)
  5803  0658  0021               	movlb	1	; select bank1
  5804  0659  1AD4               	btfsc	__ELINMIntStatus1^(0+128),5
  5805  065A  0008               	return
  5806                           
  5807                           ;lin.c: 996: {
  5808                           ;lin.c: 998: if( _ELINMIntSleepTimeout)
  5809  065B  0023               	movlb	3	; select bank3
  5810  065C  0841               	movf	(__ELINMIntSleepTimeout+3)^(0+384),w
  5811  065D  0440               	iorwf	(__ELINMIntSleepTimeout+2)^(0+384),w
  5812  065E  043F               	iorwf	(__ELINMIntSleepTimeout+1)^(0+384),w
  5813  065F  043E               	iorwf	__ELINMIntSleepTimeout^(0+384),w
  5814  0660  1903               	skipnz
  5815  0661  2E69               	goto	i1l1006
  5816                           
  5817                           ;lin.c: 1001: {
  5818                           ;lin.c: 1003: _ELINMIntSleepTimeout--;
  5819  0662  3001               	movlw	1
  5820  0663  02BE               	subwf	__ELINMIntSleepTimeout^(0+384),f
  5821  0664  3000               	movlw	0
  5822  0665  3BBF               	subwfb	(__ELINMIntSleepTimeout+1)^(0+384),f
  5823  0666  3BC0               	subwfb	(__ELINMIntSleepTimeout+2)^(0+384),f
  5824  0667  3BC1               	subwfb	(__ELINMIntSleepTimeout+3)^(0+384),f
  5825                           
  5826                           ;lin.c: 1006: }
  5827  0668  0008               	return
  5828  0669                     i1l1006:	
  5829                           
  5830                           ;lin.c: 1009: else
  5831                           ;lin.c: 1010: {
  5832                           ;lin.c: 1012: _ELINMIntStatus1.ELINMINTSTS.SLEEP_TIMEOUT = 1;
  5833  0669  0021               	movlb	1	; select bank1
  5834  066A  1754               	bsf	__ELINMIntStatus1^(0+128),6
  5835  066B  0008               	return
  5836  066C                     __end_of_ELINMIntHandler:	
  5837  066C                     __ptext61:	
  5838 ;; *************** function __ELINMIntResetProtocol *****************
  5839 ;; Defined at:
  5840 ;;		line 524 in file "../lin.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  code            1    wreg     unsigned char 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  code            1    0[COMMON] unsigned char 
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		wreg, status,2
  5849 ;; Tracked objects:
  5850 ;;		On entry : 1C/1
  5851 ;;		On exit  : 1F/3
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5854 ;;      Params:         0       0       0       0       0       0       0       0
  5855 ;;      Locals:         1       0       0       0       0       0       0       0
  5856 ;;      Temps:          0       0       0       0       0       0       0       0
  5857 ;;      Totals:         1       0       0       0       0       0       0       0
  5858 ;;Total ram usage:        1 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; This function calls:
  5861 ;;		Nothing
  5862 ;; This function is called by:
  5863 ;;		_ELINMIntHandler
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           
  5868                           ;psect for function __ELINMIntResetProtocol
  5869  066C                     __ELINMIntResetProtocol:	
  5870                           
  5871                           ;incstack = 0
  5872                           ; Regs used in __ELINMIntResetProtocol: [wreg+status,2]
  5873                           ;__ELINMIntResetProtocol@code stored from wreg
  5874  066C  00F0               	movwf	__ELINMIntResetProtocol@code
  5875                           
  5876                           ;lin.c: 529: _ELINMIntReadBack = RCREG;
  5877  066D  0023               	movlb	3	; select bank3
  5878  066E  0819               	movf	25,w	;volatile
  5879  066F  0021               	movlb	1	; select bank1
  5880  0670  00D2               	movwf	__ELINMIntReadBack^(0+128)
  5881                           
  5882                           ;lin.c: 530: _ELINMIntStatus1.ELINMIntStatusByte = 0;
  5883  0671  01D4               	clrf	__ELINMIntStatus1^(0+128)
  5884                           
  5885                           ;lin.c: 531: _ELINMIntRXCRC.CRC = 0;
  5886  0672  0023               	movlb	3	; select bank3
  5887  0673  01D4               	clrf	__ELINMIntRXCRC^(0+384)
  5888  0674  01D5               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  5889                           
  5890                           ;lin.c: 532: _ELINMIntStatus.ELINMIntStatusByte = code;
  5891  0675  0870               	movf	__ELINMIntResetProtocol@code,w
  5892  0676  0020               	movlb	0	; select bank0
  5893  0677  00D3               	movwf	__ELINMIntStatus
  5894                           
  5895                           ;lin.c: 533: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  5896  0678  0023               	movlb	3	; select bank3
  5897  0679  267B               	fcall	PL62	;call to abstracted procedure
  5898  067A  0008               	return
  5899  067B                     __end_of__ELINMIntResetProtocol:	
  5900  007E                     btemp	set	126	;btemp
  5901  007E                     int$flags	set	126
  5902  007E                     wtemp0	set	126
  5903  067B                     PL62:	
  5904  067B  3027               	movlw	39
  5905  067C  01C1               	clrf	(__ELINMIntSleepTimeout+3)^(0+384)
  5906  067D  01C0               	clrf	(__ELINMIntSleepTimeout+2)^(0+384)
  5907  067E  00BF               	movwf	(__ELINMIntSleepTimeout+1)^(0+384)
  5908  067F  30BB               	movlw	187
  5909  0680  00BE               	movwf	__ELINMIntSleepTimeout^(0+384)
  5910  0681  0008               	return
  5911  0682                     __end_ofPL62:	
  5912  0682                     PL98:	
  5913  0682  0851               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  5914  0683  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
  5915  0684  0086               	movwf	6
  5916  0685  3002               	movlw	2	; select bank4/5
  5917  0686  0087               	movwf	7
  5918  0687  0008               	return
  5919  0688                     __end_ofPL98:	
  5920  0688                     __ptext50:	
  5921 ;; *************** function _interrupt_PWMCapture *****************
  5922 ;; Defined at:
  5923 ;;		line 438 in file "../pwm.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;		None
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;		None
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5932 ;; Tracked objects:
  5933 ;;		On entry : 1F/0
  5934 ;;		On exit  : 1B/2
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5937 ;;      Params:         0       0       0       0       0       0       0       0
  5938 ;;      Locals:         0       0       0       0       0       0       0       0
  5939 ;;      Temps:          0       0       0       0       0       0       0       0
  5940 ;;      Totals:         0       0       0       0       0       0       0       0
  5941 ;;Total ram usage:        0 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		_interrupt_handler
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _interrupt_PWMCapture
  5952  0688                     _interrupt_PWMCapture:	
  5953                           
  5954                           ;pwm.c: 450: switch( ui8_Pulse_State )
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
  5958  0688  2ECA               	goto	i1l8222
  5959  0689                     i1l1385:	
  5960                           ;pwm.c: 452: {
  5961                           ;pwm.c: 454: case 0:
  5962                           
  5963                           
  5964                           ;pwm.c: 456: {
  5965                           ;pwm.c: 460: ui8_Pulse_State = 1;
  5966                           
  5967                           ;pwm.c: 461: ui16_Capt_Val0.b.lo = CCPR5L;
  5968  0689  26D7  3180         	fcall	PL104	;call to abstracted procedure
  5969  068B  00AE               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
  5970                           
  5971                           ;pwm.c: 462: ui16_Capt_Val0.b.hi = CCPR5H;
  5972  068C  0026               	movlb	6	; select bank6
  5973  068D  081D               	movf	29,w	;volatile
  5974  068E  0021               	movlb	1	; select bank1
  5975  068F  00AF               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
  5976                           
  5977                           ;pwm.c: 463: CCP5CON = 0x04;
  5978                           
  5979                           ;pwm.c: 464: break;
  5980  0690  2EE1               	ljmp	PL122	;call to abstracted procedure
  5981  0691                     i1l8210:	
  5982                           
  5983                           ;pwm.c: 472: {
  5984                           ;pwm.c: 476: ui8_Pulse_State = 2;
  5985  0691  3002               	movlw	2
  5986  0692  00D0               	movwf	_ui8_Pulse_State^(0+256)
  5987                           
  5988                           ;pwm.c: 477: ui16_Capt_Val1.b.lo = CCPR5L;
  5989  0693  0026               	movlb	6	; select bank6
  5990  0694  081C               	movf	28,w	;volatile
  5991  0695  0021               	movlb	1	; select bank1
  5992  0696  00AC               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
  5993                           
  5994                           ;pwm.c: 478: ui16_Capt_Val1.b.hi = CCPR5H;
  5995  0697  0026               	movlb	6	; select bank6
  5996  0698  081D               	movf	29,w	;volatile
  5997  0699  0021               	movlb	1	; select bank1
  5998  069A  00AD               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
  5999                           
  6000                           ;pwm.c: 479: CCP5CON = 0x05;
  6001                           
  6002                           ;pwm.c: 480: break;
  6003  069B  2EDD               	ljmp	PL118	;call to abstracted procedure
  6004  069C                     i1l1388:	
  6005                           ;pwm.c: 483: }
  6006                           ;pwm.c: 486: case 2:
  6007                           
  6008                           
  6009                           ;pwm.c: 488: {
  6010                           ;pwm.c: 492: ui8_Pulse_State = 1;
  6011                           
  6012                           ;pwm.c: 493: ui16_Capt_Val2.b.lo = CCPR5L;
  6013  069C  26D7  3180         	fcall	PL104	;call to abstracted procedure
  6014  069E  00AA               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
  6015                           
  6016                           ;pwm.c: 494: ui16_Capt_Val2.b.hi = CCPR5H;
  6017  069F  0026               	movlb	6	; select bank6
  6018  06A0  081D               	movf	29,w	;volatile
  6019  06A1  0021               	movlb	1	; select bank1
  6020  06A2  00AB               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
  6021                           
  6022                           ;pwm.c: 495: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
  6023  06A3  082B               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
  6024  06A4  0022               	movlb	2	; select bank2
  6025  06A5  00A4               	movwf	(_ui16_PWM_Freq_In+1)^(0+256)
  6026  06A6  0021               	movlb	1	; select bank1
  6027  06A7  082A               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
  6028  06A8  0022               	movlb	2	; select bank2
  6029  06A9  00A3               	movwf	_ui16_PWM_Freq_In^(0+256)
  6030  06AA  0021               	movlb	1	; select bank1
  6031  06AB  082E               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
  6032  06AC  0022               	movlb	2	; select bank2
  6033  06AD  02A3               	subwf	_ui16_PWM_Freq_In^(0+256),f
  6034  06AE  0021               	movlb	1	; select bank1
  6035  06AF  082F               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
  6036  06B0  0022               	movlb	2	; select bank2
  6037  06B1  3BA4               	subwfb	(_ui16_PWM_Freq_In+1)^(0+256),f
  6038                           
  6039                           ;pwm.c: 496: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
  6040  06B2  0021               	movlb	1	; select bank1
  6041  06B3  082D               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
  6042  06B4  0023               	movlb	3	; select bank3
  6043  06B5  00EB               	movwf	(_ui16_Duty_Cycle_In+1)^(0+384)
  6044  06B6  0021               	movlb	1	; select bank1
  6045  06B7  082C               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
  6046  06B8  0023               	movlb	3	; select bank3
  6047  06B9  00EA               	movwf	_ui16_Duty_Cycle_In^(0+384)
  6048  06BA  0021               	movlb	1	; select bank1
  6049  06BB  082E               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
  6050  06BC  0023               	movlb	3	; select bank3
  6051  06BD  02EA               	subwf	_ui16_Duty_Cycle_In^(0+384),f
  6052  06BE  0021               	movlb	1	; select bank1
  6053  06BF  082F               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
  6054  06C0  0023               	movlb	3	; select bank3
  6055  06C1  3BEB               	subwfb	(_ui16_Duty_Cycle_In+1)^(0+384),f
  6056                           
  6057                           ;pwm.c: 497: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
  6058  06C2  0021               	movlb	1	; select bank1
  6059  06C3  082B               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
  6060  06C4  00AF               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
  6061  06C5  082A               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
  6062  06C6  00AE               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
  6063                           
  6064                           ;pwm.c: 498: CCP5CON = 0x04;
  6065  06C7  2EE1               	ljmp	PL122	;call to abstracted procedure
  6066  06C8                     i1l8218:	
  6067                           
  6068                           ;pwm.c: 526: {
  6069                           ;pwm.c: 530: ui8_Pulse_State = 0;
  6070  06C8  01D0               	clrf	_ui8_Pulse_State^(0+256)
  6071                           
  6072                           ;pwm.c: 531: break;
  6073  06C9  0008               	return
  6074  06CA                     i1l8222:	
  6075  06CA  0022               	movlb	2	; select bank2
  6076  06CB  0850               	movf	_ui8_Pulse_State^(0+256),w
  6077                           
  6078                           ; Switch size 1, requested type "space"
  6079                           ; Number of cases is 3, Range of values is 0 to 2
  6080                           ; switch strategies available:
  6081                           ; Name         Instructions Cycles
  6082                           ; simple_byte           10     6 (average)
  6083                           ; direct_byte           12     6 (fixed)
  6084                           ; jumptable            260     6 (fixed)
  6085                           ;	Chosen strategy is simple_byte
  6086  06CC  3A00               	xorlw	0	; case 0
  6087  06CD  1903               	skipnz
  6088  06CE  2E89               	goto	i1l1385
  6089  06CF  3A01               	xorlw	1	; case 1
  6090  06D0  1903               	skipnz
  6091  06D1  2E91               	goto	i1l8210
  6092  06D2  3A03               	xorlw	3	; case 2
  6093  06D3  1903               	skipnz
  6094  06D4  2E9C               	goto	i1l1388
  6095  06D5  2EC8               	goto	i1l8218
  6096  06D6  0008               	return
  6097  06D7                     __end_of_interrupt_PWMCapture:	
  6098  06D7                     PL104:	
  6099  06D7  01D0               	clrf	_ui8_Pulse_State^(0+256)
  6100  06D8  0AD0               	incf	_ui8_Pulse_State^(0+256),f
  6101  06D9  0026               	movlb	6	; select bank6
  6102  06DA  081C               	movf	28,w	;volatile
  6103  06DB  0021               	movlb	1	; select bank1
  6104  06DC  0008               	return
  6105  06DD                     __end_ofPL104:	
  6106  06DD                     PL118:	
  6107  06DD  3005               	movlw	5
  6108  06DE  0026               	movlb	6	; select bank6
  6109  06DF  009E               	movwf	30	;volatile
  6110  06E0  0008               	return
  6111  06E1                     __end_ofPL118:	
  6112  06E1                     PL122:	
  6113  06E1  3004               	movlw	4
  6114  06E2  0026               	movlb	6	; select bank6
  6115  06E3  009E               	movwf	30	;volatile
  6116  06E4  0008               	return
  6117  06E5                     __end_ofPL122:	
  6118  06E5                     __ptext22:	
  6119 ;; *************** function _FILTER_Temp *****************
  6120 ;; Defined at:
  6121 ;;		line 400 in file "../adc.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      void 
  6128 ;; Registers used:
  6129 ;;		wreg, status,2, status,0
  6130 ;; Tracked objects:
  6131 ;;		On entry : 1F/3
  6132 ;;		On exit  : 1F/3
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6135 ;;      Params:         0       0       0       0       0       0       0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0
  6137 ;;      Temps:          0       2       0       0       0       0       0       0
  6138 ;;      Totals:         0       2       0       0       0       0       0       0
  6139 ;;Total ram usage:        2 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    4
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_Get_Analog_Value
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _FILTER_Temp
  6151  06E5                     _FILTER_Temp:	
  6152  06E5                     l6400:	
  6153                           ;incstack = 0
  6154                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
  6155                           
  6156                           
  6157                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
  6158  06E5  0868               	movf	_ui16_NTC_Temp_bldc^(0+384),w
  6159  06E6  07E0               	addwf	_filterTempNTC^(0+384),f
  6160  06E7  0869               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
  6161  06E8  3DE1               	addwfc	(_filterTempNTC+1)^(0+384),f
  6162                           
  6163                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
  6164  06E9  0861               	movf	(_filterTempNTC+1)^(0+384),w
  6165  06EA  0020               	movlb	0	; select bank0
  6166  06EB  00B1               	movwf	??_FILTER_Temp+1
  6167  06EC  0023               	movlb	3	; select bank3
  6168  06ED  0860               	movf	_filterTempNTC^(0+384),w
  6169  06EE  0020               	movlb	0	; select bank0
  6170  06EF  00B0               	movwf	??_FILTER_Temp
  6171  06F0  3006               	movlw	6
  6172  06F1                     u3685:	
  6173  06F1  36B1               	lsrf	??_FILTER_Temp+1,f
  6174  06F2  0CB0               	rrf	??_FILTER_Temp,f
  6175  06F3  0B89               	decfsz	9,f
  6176  06F4  2EF1               	goto	u3685
  6177  06F5  0830               	movf	??_FILTER_Temp,w
  6178  06F6  0022               	movlb	2	; select bank2
  6179  06F7  00B1               	movwf	_ui16_NTC_Temp_bldc_mean^(0+256)
  6180  06F8  0020               	movlb	0	; select bank0
  6181  06F9  0831               	movf	??_FILTER_Temp+1,w
  6182  06FA  0022               	movlb	2	; select bank2
  6183  06FB  00B2               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256)
  6184                           
  6185                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
  6186  06FC  0831               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
  6187  06FD  0023               	movlb	3	; select bank3
  6188  06FE  02E0               	subwf	_filterTempNTC^(0+384),f
  6189  06FF  0022               	movlb	2	; select bank2
  6190  0700  0832               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
  6191  0701  0023               	movlb	3	; select bank3
  6192  0702  3BE1               	subwfb	(_filterTempNTC+1)^(0+384),f
  6193                           
  6194                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
  6195  0703  0866               	movf	_ui16_Temp_cal^(0+384),w
  6196  0704  0022               	movlb	2	; select bank2
  6197  0705  0731               	addwf	_ui16_NTC_Temp_bldc_mean^(0+256),w
  6198  0706  0023               	movlb	3	; select bank3
  6199  0707  00DE               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
  6200  0708  0867               	movf	(_ui16_Temp_cal+1)^(0+384),w
  6201  0709  0022               	movlb	2	; select bank2
  6202  070A  3D32               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
  6203  070B  0023               	movlb	3	; select bank3
  6204  070C  00DF               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
  6205  070D  0008               	return
  6206  070E                     __end_of_FILTER_Temp:	
  6207                           
  6208                           	psect	bitbssCOMMON
  6209  03C8                     __pbitbssCOMMON:	
  6210  03C8                     _rising_bemf_flag:	
  6211  03C8                     	ds	1
  6212                           
  6213                           	psect	bssCOMMON
  6214  007A                     __pbssCOMMON:	
  6215  007A                     _MotorFlags:	
  6216  007A                     	ds	1
  6217                           
  6218                           	psect	bssBANK0
  6219  004C                     __pbssBANK0:	
  6220  004C                     _ui16_Speed_mat:	
  6221  004C                     	ds	2
  6222  004E                     _ui16_IPhase_bldc:	
  6223  004E                     	ds	2
  6224  0050                     _comm_time:	
  6225  0050                     	ds	2
  6226  0052                     _pt:	
  6227  0052                     	ds	1
  6228  0053                     __ELINMIntStatus:	
  6229  0053                     	ds	1
  6230  0054                     _ui8_b_DResB0_c:	
  6231  0054                     	ds	1
  6232  0055                     _ui8_b_DResLocID_c:	
  6233  0055                     	ds	1
  6234  0056                     _ui8_duty_cycle_BLDC:	
  6235  0056                     	ds	1
  6236  0057                     _ui16_Ubat_bldc:	
  6237  0057                     	ds	2
  6238                           
  6239                           	psect	dataBANK0
  6240  0059                     __pdataBANK0:	
  6241  0059                     _ui8_selected_lid:	
  6242  0059                     	ds	1
  6243                           
  6244                           	psect	bssBANK1
  6245  00A0                     __pbssBANK1:	
  6246  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  6247  00A0                     	ds	2
  6248  00A2                     BVH2_Appl_Layer@Cb24_StateCnt:	
  6249  00A2                     	ds	2
  6250  00A4                     BVH2_Appl_Layer@Cb19_Counter:	
  6251  00A4                     	ds	2
  6252  00A6                     _Cb44_StateCnt:	
  6253  00A6                     	ds	2
  6254  00A8                     _Cb1_StateCnt:	
  6255  00A8                     	ds	2
  6256  00AA                     _ui16_Capt_Val2:	
  6257  00AA                     	ds	2
  6258  00AC                     _ui16_Capt_Val1:	
  6259  00AC                     	ds	2
  6260  00AE                     _ui16_Capt_Val0:	
  6261  00AE                     	ds	2
  6262  00B0                     _ui16_mat_Current:	
  6263  00B0                     	ds	2
  6264  00B2                     _ui8_BattVolt_mat:	
  6265  00B2                     	ds	2
  6266  00B4                     _ui16_speed_fil:	
  6267  00B4                     	ds	2
  6268  00B6                     _ui16_Ubemf_bldc:	
  6269  00B6                     	ds	2
  6270  00B8                     _ui16_phase_advancement:	
  6271  00B8                     	ds	2
  6272  00BA                     _ui16_step_cnt:	
  6273  00BA                     	ds	2
  6274  00BC                     _analog_value:	
  6275  00BC                     	ds	2
  6276  00BE                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  6277  00BE                     	ds	1
  6278  00BF                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  6279  00BF                     	ds	1
  6280  00C0                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  6281  00C0                     	ds	1
  6282  00C1                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  6283  00C1                     	ds	1
  6284  00C2                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  6285  00C2                     	ds	1
  6286  00C3                     BVH2_Appl_Layer@Cb9_StateCnt:	
  6287  00C3                     	ds	1
  6288  00C4                     _Cb56_odFixedValueSel:	
  6289  00C4                     	ds	1
  6290  00C5                     _Cb34_idPWM:	
  6291  00C5                     	ds	1
  6292  00C6                     _SIBFS_UbatHandling_b:	
  6293  00C6                     	ds	1
  6294  00C7                     _SIBFS_Pic_etat_monitor_b:	
  6295  00C7                     	ds	1
  6296  00C8                     _SIBFS_PWM_Detection_b:	
  6297  00C8                     	ds	1
  6298  00C9                     _SIBFS_Current_Analysis_High_b:	
  6299  00C9                     	ds	1
  6300  00CA                     _ui8_PWMinDC_sav:	
  6301  00CA                     	ds	1
  6302  00CB                     _ui8_PWM_FreqCnt:	
  6303  00CB                     	ds	1
  6304  00CC                     _ui8_Task_Cont100ms:	
  6305  00CC                     	ds	1
  6306  00CD                     _bool_ControlLoopMode:	
  6307  00CD                     	ds	1
  6308  00CE                     _bool_mat_currAlarm_bldc:	
  6309  00CE                     	ds	1
  6310  00CF                     _ui8_PWM_dc_mat:	
  6311  00CF                     	ds	1
  6312  00D0                     _ErrorCode:	
  6313  00D0                     	ds	1
  6314  00D1                     __ELINMIntMessageBufferPointer:	
  6315  00D1                     	ds	1
  6316  00D2                     __ELINMIntReadBack:	
  6317  00D2                     	ds	1
  6318  00D3                     __ELINMIntMessageSize:	
  6319  00D3                     	ds	1
  6320  00D4                     __ELINMIntStatus1:	
  6321  00D4                     	ds	1
  6322  00D5                     _ui8_Task_Cont1ms:	
  6323  00D5                     	ds	1
  6324  00D6                     _ui8_given_supply:	
  6325  00D6                     	ds	1
  6326  00D7                     _phaseCal:	
  6327  00D7                     	ds	1
  6328  00D8                     _bool_HighCurrentAlarm:	
  6329  00D8                     	ds	1
  6330  00D9                     _bool_MotorStalled:	
  6331  00D9                     	ds	1
  6332  00DA                     _bool_DryRunningAlarm:	
  6333  00DA                     	ds	1
  6334  00DB                     _bool_CPU_TempAlarm:	
  6335  00DB                     	ds	1
  6336  00DC                     _Bcnt:	
  6337  00DC                     	ds	1
  6338  00DD                     _ui8_CompFlag:	
  6339  00DD                     	ds	1
  6340  00DE                     _ui8_sampleState:	
  6341  00DE                     	ds	1
  6342  00DF                     _ui8_Ubemf_sel:	
  6343  00DF                     	ds	1
  6344  00E0                     _ui8_UPhase_sel:	
  6345  00E0                     	ds	1
  6346  00E1                     _ui8_IPhase_sel:	
  6347  00E1                     	ds	1
  6348  00E2                     _ui8_BlankingCount:	
  6349  00E2                     	ds	1
  6350  00E3                     _comm_state:	
  6351  00E3                     	ds	1
  6352  00E4                     _ui8_StartupPWM:	
  6353  00E4                     	ds	1
  6354  00E5                     _bool_start_demand_mat:	
  6355  00E5                     	ds	1
  6356  00E6                     _ui8_error_Flags:	
  6357  00E6                     	ds	1
  6358  00E7                     _windowPtr1:	
  6359  00E7                     	ds	1
  6360                           
  6361                           	psect	dataBANK1
  6362  00E8                     __pdataBANK1:	
  6363  00E8                     _ui16_I_cal_Ph3:	
  6364  00E8                     	ds	2
  6365  00EA                     _ui16_I_cal_Ph2:	
  6366  00EA                     	ds	2
  6367  00EC                     _ui16_I_cal_Ph1:	
  6368  00EC                     	ds	2
  6369  00EE                     _wkpoint:	
  6370  00EE                     	ds	1
  6371                           
  6372                           	psect	bssBANK2
  6373  0120                     __pbssBANK2:	
  6374  0120                     _ui8_current_cal:	
  6375  0120                     	ds	3
  6376  0123                     _ui16_PWM_Freq_In:	
  6377  0123                     	ds	2
  6378  0125                     _ui16_PWM_Freq_mat:	
  6379  0125                     	ds	2
  6380  0127                     __ELINMIntTHeaderMin:	
  6381  0127                     	ds	2
  6382  0129                     __ELINMIntTFrameMin:	
  6383  0129                     	ds	2
  6384  012B                     _sum:	
  6385  012B                     	ds	2
  6386  012D                     _ui16_comm_time_max:	
  6387  012D                     	ds	2
  6388  012F                     _ui16_speed_rar:	
  6389  012F                     	ds	2
  6390  0131                     _ui16_NTC_Temp_bldc_mean:	
  6391  0131                     	ds	2
  6392  0133                     _ui16_fir_IPhase_mean:	
  6393  0133                     	ds	2
  6394  0135                     _ui16_fir_Bat_mittel:	
  6395  0135                     	ds	2
  6396  0137                     _ui16_IPhase1_bldc:	
  6397  0137                     	ds	2
  6398  0139                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  6399  0139                     	ds	1
  6400  013A                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  6401  013A                     	ds	1
  6402  013B                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  6403  013B                     	ds	1
  6404  013C                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  6405  013C                     	ds	1
  6406  013D                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  6407  013D                     	ds	1
  6408  013E                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  6409  013E                     	ds	1
  6410  013F                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  6411  013F                     	ds	1
  6412  0140                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  6413  0140                     	ds	1
  6414  0141                     BVH2_Appl_Layer@Cb51_Counter:	
  6415  0141                     	ds	1
  6416  0142                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  6417  0142                     	ds	1
  6418  0143                     _Cb56_odPumpOff:	
  6419  0143                     	ds	1
  6420  0144                     _Cb56_oUbat_Alarm_High:	
  6421  0144                     	ds	1
  6422  0145                     _Cb44_oShutoff:	
  6423  0145                     	ds	1
  6424  0146                     _Cb34_odPumpOff:	
  6425  0146                     	ds	1
  6426  0147                     _Cb34_odFixedValueSel:	
  6427  0147                     	ds	1
  6428  0148                     _Cb34_odFixedLowValueSel:	
  6429  0148                     	ds	1
  6430  0149                     _Cb34_oPWM_SC_Alarm:	
  6431  0149                     	ds	1
  6432  014A                     _Cb34_oPWM_Alarm:	
  6433  014A                     	ds	1
  6434  014B                     _Cb1_oShutoff:	
  6435  014B                     	ds	1
  6436  014C                     _Cb1_oCurrentAlarm:	
  6437  014C                     	ds	1
  6438  014D                     _Cb1_RestartCounter:	
  6439  014D                     	ds	1
  6440  014E                     _ui8_PWMin_failCnt:	
  6441  014E                     	ds	1
  6442  014F                     _ui8_Duty_Cycle_In_Ratio:	
  6443  014F                     	ds	1
  6444  0150                     _ui8_Pulse_State:	
  6445  0150                     	ds	1
  6446  0151                     _ui8_PWMoutvalue:	
  6447  0151                     	ds	1
  6448  0152                     _ui8_lastTaskvalue:	
  6449  0152                     	ds	1
  6450  0153                     _ui8_Task_Cont5ms:	
  6451  0153                     	ds	1
  6452  0154                     _ui8_Task_Cont3ms:	
  6453  0154                     	ds	1
  6454  0155                     _bool_PWMin_Freq_err_Alarm:	
  6455  0155                     	ds	1
  6456  0156                     _bool_UbatAlarm:	
  6457  0156                     	ds	1
  6458  0157                     _bool_CPU_TempRedAlarm:	
  6459  0157                     	ds	1
  6460  0158                     _bool_PWMin_err_Alarm:	
  6461  0158                     	ds	1
  6462  0159                     _ui8_duty_cycle_mat:	
  6463  0159                     	ds	1
  6464  015A                     _ui8_Kp_mat:	
  6465  015A                     	ds	1
  6466  015B                     __ELINMIntSpace:	
  6467  015B                     	ds	1
  6468  015C                     __ELINMIntRXMessageSize:	
  6469  015C                     	ds	1
  6470  015D                     _ui8_b_DResB4_c:	
  6471  015D                     	ds	1
  6472  015E                     _ui8_b_DResB3_c:	
  6473  015E                     	ds	1
  6474  015F                     _ui8_b_DResB2_c:	
  6475  015F                     	ds	1
  6476  0160                     _ui8_b_DResB1_c:	
  6477  0160                     	ds	1
  6478  0161                     _ui8_b_DResServID_c:	
  6479  0161                     	ds	1
  6480  0162                     _ui16_IPhase3_bldc_cal:	
  6481  0162                     	ds	2
  6482  0164                     _ui16_IPhase2_bldc_cal:	
  6483  0164                     	ds	2
  6484  0166                     _ui16_IPhase1_bldc_cal:	
  6485  0166                     	ds	2
  6486                           
  6487                           	psect	dataBANK2
  6488  0168                     __pdataBANK2:	
  6489  0168                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  6490  0168                     	ds	4
  6491  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  6492  016C                     	ds	1
  6493  016D                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  6494  016D                     	ds	1
  6495  016E                     _ui8_failure:	
  6496  016E                     	ds	1
  6497  016F                     _ict_stamp:	
  6498  016F                     	ds	1
  6499                           
  6500                           	psect	bssBANK3
  6501  01A0                     __pbssBANK3:	
  6502  01A0                     _B:	
  6503  01A0                     	ds	16
  6504  01B0                     _my_msg:	
  6505  01B0                     	ds	8
  6506  01B8                     _checksum:	
  6507  01B8                     	ds	6
  6508  01BE                     __ELINMIntSleepTimeout:	
  6509  01BE                     	ds	4
  6510  01C2                     BVH2_Appl_Layer@Cb24_BadCnt:	
  6511  01C2                     	ds	2
  6512  01C4                     BVH2_Appl_Layer@Cb14_StateCnt:	
  6513  01C4                     	ds	2
  6514  01C6                     _ui16_Speed_demand_mat_min:	
  6515  01C6                     	ds	2
  6516  01C8                     _ui16_Speed_demand_mat_Max:	
  6517  01C8                     	ds	2
  6518  01CA                     _ui16_Speed_demand_mat:	
  6519  01CA                     	ds	2
  6520  01CC                     _ui8_Ki_mat:	
  6521  01CC                     	ds	2
  6522  01CE                     _ui16_mat_inpTemp:	
  6523  01CE                     	ds	2
  6524  01D0                     __ELINMIntTHeaderMax:	
  6525  01D0                     	ds	2
  6526  01D2                     __ELINMIntTFrameMax:	
  6527  01D2                     	ds	2
  6528  01D4                     __ELINMIntRXCRC:	
  6529  01D4                     	ds	2
  6530  01D6                     _ui16_IPhase3_bldc:	
  6531  01D6                     	ds	2
  6532  01D8                     _ui16_IPhase2_bldc:	
  6533  01D8                     	ds	2
  6534  01DA                     _phase_delay_counter:	
  6535  01DA                     	ds	2
  6536  01DC                     _ui8_fixed_start_speed_mat:	
  6537  01DC                     	ds	2
  6538  01DE                     _ui16_NTC_Temp_bldc_mean_cal:	
  6539  01DE                     	ds	2
  6540  01E0                     _filterTempNTC:	
  6541  01E0                     	ds	2
  6542  01E2                     _filter3:	
  6543  01E2                     	ds	2
  6544  01E4                     _filter1:	
  6545  01E4                     	ds	2
  6546  01E6                     _ui16_Temp_cal:	
  6547  01E6                     	ds	2
  6548  01E8                     _ui16_NTC_Temp_bldc:	
  6549  01E8                     	ds	2
  6550  01EA                     _ui16_Duty_Cycle_In:	
  6551  01EA                     	ds	2
  6552                           
  6553                           	psect	bssBANK4
  6554  0240                     __pbssBANK4:	
  6555  0240                     _inputArray1:	
  6556  0240                     	ds	16
  6557  0250                     __ELINMIntMessageBuffer:	
  6558  0250                     	ds	11
  6559                           
  6560                           	psect	clrtext
  6561  076D                     clear_ram0:	
  6562                           ;	Called with FSR0 containing the base address, and
  6563                           ;	WREG with the size to clear
  6564                           
  6565  076D  0064               	clrwdt	;clear the watchdog before getting into this loop
  6566  076E                     clrloop0:	
  6567  076E  0180               	clrf	0	;clear RAM location pointed to by FSR
  6568  076F  3101               	addfsr 0,1
  6569  0770  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6570  0771  2F6E               	goto	clrloop0	;have we reached the end yet?
  6571  0772  3400               	retlw	0	;all done for this memory range, return
  6572                           
  6573                           	psect	cstackBANK4
  6574  0220                     __pcstackBANK4:	
  6575  0220                     EOL@_dcnt:	
  6576  0220                     _BVH2_Appl_Layer$1218:	
  6577                           ; 1 bytes @ 0x0
  6578                           
  6579                           
  6580                           ; 4 bytes @ 0x0
  6581  0220                     	ds	1
  6582  0221                     EOL@_dcnt_413:	
  6583                           
  6584                           ; 1 bytes @ 0x1
  6585  0221                     	ds	1
  6586  0222                     EOL@_dcnt_414:	
  6587                           
  6588                           ; 1 bytes @ 0x2
  6589  0222                     	ds	1
  6590  0223                     EOL@_dcnt_415:	
  6591                           
  6592                           ; 1 bytes @ 0x3
  6593  0223                     	ds	1
  6594  0224                     EOL@_dcnt_416:	
  6595  0224                     _BVH2_Appl_Layer$1215:	
  6596                           ; 1 bytes @ 0x4
  6597                           
  6598                           
  6599                           ; 2 bytes @ 0x4
  6600  0224                     	ds	1
  6601  0225                     EOL@_dcnt_417:	
  6602                           
  6603                           ; 1 bytes @ 0x5
  6604  0225                     	ds	1
  6605  0226                     EOL@_dcnt_418:	
  6606  0226                     _BVH2_Appl_Layer$1217:	
  6607                           ; 1 bytes @ 0x6
  6608                           
  6609                           
  6610                           ; 2 bytes @ 0x6
  6611  0226                     	ds	1
  6612  0227                     EOL@_dcnt_419:	
  6613                           
  6614                           ; 1 bytes @ 0x7
  6615  0227                     	ds	1
  6616  0228                     EOL@_dcnt_420:	
  6617  0228                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  6618                           ; 1 bytes @ 0x8
  6619                           
  6620                           
  6621                           ; 1 bytes @ 0x8
  6622  0228                     	ds	1
  6623  0229                     EOL@_dcnt_421:	
  6624  0229                     _BVH2_Appl_Layer$1207:	
  6625                           ; 1 bytes @ 0x9
  6626                           
  6627                           
  6628                           ; 1 bytes @ 0x9
  6629  0229                     	ds	1
  6630  022A                     EOL@_dcnt_422:	
  6631  022A                     _BVH2_Appl_Layer$1208:	
  6632                           ; 1 bytes @ 0xA
  6633                           
  6634                           
  6635                           ; 1 bytes @ 0xA
  6636  022A                     	ds	1
  6637  022B                     EOL@_dcnt_423:	
  6638  022B                     _BVH2_Appl_Layer$1209:	
  6639                           ; 1 bytes @ 0xB
  6640                           
  6641                           
  6642                           ; 1 bytes @ 0xB
  6643  022B                     	ds	1
  6644  022C                     EOL@_dcnt_424:	
  6645  022C                     _BVH2_Appl_Layer$1210:	
  6646                           ; 1 bytes @ 0xC
  6647                           
  6648                           
  6649                           ; 1 bytes @ 0xC
  6650  022C                     	ds	1
  6651  022D                     EOL@_dcnt_425:	
  6652  022D                     _BVH2_Appl_Layer$1211:	
  6653                           ; 1 bytes @ 0xD
  6654                           
  6655                           
  6656                           ; 1 bytes @ 0xD
  6657  022D                     	ds	1
  6658  022E                     EOL@_dcnt_426:	
  6659  022E                     _BVH2_Appl_Layer$1212:	
  6660                           ; 1 bytes @ 0xE
  6661                           
  6662                           
  6663                           ; 1 bytes @ 0xE
  6664  022E                     	ds	1
  6665  022F                     EOL@_dcnt_427:	
  6666  022F                     BVH2_Appl_Layer@Sb3_Product1:	
  6667                           ; 1 bytes @ 0xF
  6668                           
  6669                           
  6670                           ; 2 bytes @ 0xF
  6671  022F                     	ds	1
  6672  0230                     EOL@_dcnt_428:	
  6673                           
  6674                           ; 1 bytes @ 0x10
  6675  0230                     	ds	1
  6676  0231                     EOL@_dcnt_429:	
  6677  0231                     BVH2_Appl_Layer@Sb2_Switch5:	
  6678                           ; 1 bytes @ 0x11
  6679                           
  6680                           
  6681                           ; 2 bytes @ 0x11
  6682  0231                     	ds	1
  6683  0232                     EOL@ui8_b_DResB5_RD:	
  6684                           
  6685                           ; 1 bytes @ 0x12
  6686  0232                     	ds	1
  6687  0233                     EOL@ui8_b_DResB4_RD:	
  6688  0233                     BVH2_Appl_Layer@Cb24_Reset:	
  6689                           ; 1 bytes @ 0x13
  6690                           
  6691                           
  6692                           ; 1 bytes @ 0x13
  6693  0233                     	ds	1
  6694  0234                     EOL@ui8_b_DResB0_RD:	
  6695  0234                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  6696                           ; 1 bytes @ 0x14
  6697                           
  6698                           
  6699                           ; 1 bytes @ 0x14
  6700  0234                     	ds	1
  6701  0235                     EOL@ui8_b_DResB1_RD:	
  6702  0235                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  6703                           ; 1 bytes @ 0x15
  6704                           
  6705                           
  6706                           ; 1 bytes @ 0x15
  6707  0235                     	ds	1
  6708  0236                     EOL@ui8_b_DResB2_RD:	
  6709  0236                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  6710                           ; 1 bytes @ 0x16
  6711                           
  6712                           
  6713                           ; 1 bytes @ 0x16
  6714  0236                     	ds	1
  6715  0237                     EOL@ui8_b_DResB3_RD:	
  6716  0237                     BVH2_Appl_Layer@Sb2_Error:	
  6717                           ; 1 bytes @ 0x17
  6718                           
  6719                           
  6720                           ; 2 bytes @ 0x17
  6721  0237                     	ds	2
  6722  0239                     BVH2_Appl_Layer@Sb2_Switch2:	
  6723                           
  6724                           ; 2 bytes @ 0x19
  6725  0239                     	ds	2
  6726  023B                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  6727                           
  6728                           ; 1 bytes @ 0x1B
  6729  023B                     	ds	1
  6730  023C                     BVH2_Appl_Layer@Sb3_Sum1:	
  6731                           
  6732                           ; 2 bytes @ 0x1C
  6733  023C                     	ds	2
  6734  023E                     BVH2_Appl_Layer@Sb4_PI_sum:	
  6735                           
  6736                           ; 2 bytes @ 0x1E
  6737  023E                     	ds	2
  6738                           
  6739                           	psect	cstackCOMMON
  6740  0070                     __pcstackCOMMON:	
  6741  0070                     ?_InitMotorRun:	
  6742  0070                     ?_commutate:	
  6743                           ; 1 bytes @ 0x0
  6744                           
  6745  0070                     ?_PWM_Write_Out:	
  6746                           ; 1 bytes @ 0x0
  6747                           
  6748  0070                     ?_read_eeprom_data:	
  6749                           ; 1 bytes @ 0x0
  6750                           
  6751  0070                     ?_NegativeAnswer:	
  6752                           ; 1 bytes @ 0x0
  6753                           
  6754  0070                     ?_PWMReadDC:	
  6755                           ; 1 bytes @ 0x0
  6756                           
  6757  0070                     ?_PWM_CTRL:	
  6758                           ; 1 bytes @ 0x0
  6759                           
  6760  0070                     ??_PWM_CTRL:	
  6761                           ; 1 bytes @ 0x0
  6762                           
  6763  0070                     ?_ELINMIntHandler:	
  6764                           ; 1 bytes @ 0x0
  6765                           
  6766  0070                     ?_interrupt_PWMCapture:	
  6767                           ; 1 bytes @ 0x0
  6768                           
  6769  0070                     ??_interrupt_PWMCapture:	
  6770                           ; 1 bytes @ 0x0
  6771                           
  6772  0070                     ?_Oscill_Source_Block:	
  6773                           ; 1 bytes @ 0x0
  6774                           
  6775  0070                     ?_timer_init:	
  6776                           ; 1 bytes @ 0x0
  6777                           
  6778  0070                     ?_PWM_Capture_init:	
  6779                           ; 1 bytes @ 0x0
  6780                           
  6781  0070                     ?_clear_timer:	
  6782                           ; 1 bytes @ 0x0
  6783                           
  6784  0070                     ?_BVH2_Appl_Layer:	
  6785                           ; 1 bytes @ 0x0
  6786                           
  6787  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  6788                           ; 1 bytes @ 0x0
  6789                           
  6790  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  6791                           ; 1 bytes @ 0x0
  6792                           
  6793  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  6794                           ; 1 bytes @ 0x0
  6795                           
  6796  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  6797                           ; 1 bytes @ 0x0
  6798                           
  6799  0070                     ?_ADC_Init:	
  6800                           ; 1 bytes @ 0x0
  6801                           
  6802  0070                     ?_ADC_Wait:	
  6803                           ; 1 bytes @ 0x0
  6804                           
  6805  0070                     ?_FILTER_Init:	
  6806                           ; 1 bytes @ 0x0
  6807                           
  6808  0070                     ?_FILTER_Ubat:	
  6809                           ; 1 bytes @ 0x0
  6810                           
  6811  0070                     ?_FILTER_IPhase:	
  6812                           ; 1 bytes @ 0x0
  6813                           
  6814  0070                     ?_FILTER_Temp:	
  6815                           ; 1 bytes @ 0x0
  6816                           
  6817  0070                     ?_Get_Analog_Value:	
  6818                           ; 1 bytes @ 0x0
  6819                           
  6820  0070                     ?_BLDCWait:	
  6821                           ; 1 bytes @ 0x0
  6822                           
  6823  0070                     ??_BLDCWait:	
  6824                           ; 1 bytes @ 0x0
  6825                           
  6826  0070                     ?_init_bldc:	
  6827                           ; 1 bytes @ 0x0
  6828                           
  6829  0070                     ?_interrrupt_bldc:	
  6830                           ; 1 bytes @ 0x0
  6831                           
  6832  0070                     ?_InitMotorStop:	
  6833                           ; 1 bytes @ 0x0
  6834                           
  6835  0070                     ?_DiagInit:	
  6836                           ; 1 bytes @ 0x0
  6837                           
  6838  0070                     ?_SetDiagAlarm:	
  6839                           ; 1 bytes @ 0x0
  6840                           
  6841  0070                     ?_EOL:	
  6842                           ; 1 bytes @ 0x0
  6843                           
  6844  0070                     ?_Task1ms:	
  6845                           ; 1 bytes @ 0x0
  6846                           
  6847  0070                     ??_Task1ms:	
  6848                           ; 1 bytes @ 0x0
  6849                           
  6850  0070                     ?_interrupt_handler:	
  6851                           ; 1 bytes @ 0x0
  6852                           
  6853  0070                     ?_Receive_Diag:	
  6854                           ; 1 bytes @ 0x0
  6855                           
  6856  0070                     ?_EnableMCP201:	
  6857                           ; 1 bytes @ 0x0
  6858                           
  6859  0070                     ?__ELINMIntInitialize:	
  6860                           ; 1 bytes @ 0x0
  6861                           
  6862  0070                     ?__ELINMIntResetProtocol:	
  6863                           ; 1 bytes @ 0x0
  6864                           
  6865  0070                     ??__ELINMIntResetProtocol:	
  6866                           ; 1 bytes @ 0x0
  6867                           
  6868  0070                     ?__ELINMIntCalcIDParity:	
  6869                           ; 1 bytes @ 0x0
  6870                           
  6871  0070                     ?_I_calibrationInit:	
  6872                           ; 1 bytes @ 0x0
  6873                           
  6874  0070                     ?_init_ports:	
  6875                           ; 1 bytes @ 0x0
  6876                           
  6877  0070                     ?_system_init:	
  6878                           ; 1 bytes @ 0x0
  6879                           
  6880  0070                     ?_main:	
  6881                           ; 1 bytes @ 0x0
  6882                           
  6883  0070                     ?i1_ADC_Wait:	
  6884                           ; 1 bytes @ 0x0
  6885                           
  6886  0070                     ??i1_ADC_Wait:	
  6887                           ; 1 bytes @ 0x0
  6888                           
  6889  0070                     ?i1_commutate:	
  6890                           ; 1 bytes @ 0x0
  6891                           
  6892  0070                     ?i1_ADC_Read:	
  6893                           ; 1 bytes @ 0x0
  6894                           
  6895  0070                     ?i1___wmul:	
  6896                           ; 2 bytes @ 0x0
  6897                           
  6898  0070                     ?i1___lwdiv:	
  6899                           ; 2 bytes @ 0x0
  6900                           
  6901  0070                     __ELINMIntResetProtocol@code:	
  6902                           ; 2 bytes @ 0x0
  6903                           
  6904  0070                     i1___wmul@multiplier:	
  6905                           ; 1 bytes @ 0x0
  6906                           
  6907  0070                     i1___lwdiv@divisor:	
  6908                           ; 2 bytes @ 0x0
  6909                           
  6910                           
  6911                           ; 2 bytes @ 0x0
  6912  0070                     	ds	1
  6913  0071                     ??_ELINMIntHandler:	
  6914                           
  6915                           ; 1 bytes @ 0x1
  6916  0071                     	ds	1
  6917  0072                     ??i1_ADC_Read:	
  6918  0072                     i1ADC_Read@i:	
  6919                           ; 1 bytes @ 0x2
  6920                           
  6921  0072                     i1___wmul@multiplicand:	
  6922                           ; 1 bytes @ 0x2
  6923                           
  6924  0072                     i1___lwdiv@dividend:	
  6925                           ; 2 bytes @ 0x2
  6926                           
  6927                           
  6928                           ; 2 bytes @ 0x2
  6929  0072                     	ds	2
  6930  0074                     ??i1___wmul:	
  6931  0074                     ??i1___lwdiv:	
  6932                           ; 1 bytes @ 0x4
  6933                           
  6934  0074                     i1___lwdiv@counter:	
  6935                           ; 1 bytes @ 0x4
  6936                           
  6937  0074                     i1___wmul@product:	
  6938                           ; 1 bytes @ 0x4
  6939                           
  6940                           
  6941                           ; 2 bytes @ 0x4
  6942  0074                     	ds	1
  6943  0075                     i1___lwdiv@quotient:	
  6944                           
  6945                           ; 2 bytes @ 0x5
  6946  0075                     	ds	2
  6947  0077                     ??_interrrupt_bldc:	
  6948                           
  6949                           ; 1 bytes @ 0x7
  6950  0077                     	ds	2
  6951  0079                     ??_interrupt_handler:	
  6952                           
  6953                           	psect	cstackBANK0
  6954  0020                     __pcstackBANK0:	
  6955                           ; 1 bytes @ 0x9
  6956                           
  6957  0020                     ??i1_commutate:	
  6958                           
  6959                           ; 1 bytes @ 0x0
  6960  0020                     	ds	12
  6961  002C                     interrrupt_bldc@ui32_tmp:	
  6962                           
  6963                           ; 4 bytes @ 0xC
  6964  002C                     	ds	4
  6965  0030                     ??_PWM_Write_Out:	
  6966  0030                     ??_read_eeprom_data:	
  6967                           ; 1 bytes @ 0x10
  6968                           
  6969  0030                     ?__ELINMIntGetPointer:	
  6970                           ; 1 bytes @ 0x10
  6971                           
  6972  0030                     ??_Oscill_Source_Block:	
  6973                           ; 1 bytes @ 0x10
  6974                           
  6975  0030                     ??_PWM_Capture_init:	
  6976                           ; 1 bytes @ 0x10
  6977                           
  6978  0030                     ??_clear_timer:	
  6979                           ; 1 bytes @ 0x10
  6980                           
  6981  0030                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  6982                           ; 1 bytes @ 0x10
  6983                           
  6984  0030                     ??_Cb34_PWM_Detection_node_fcn1:	
  6985                           ; 1 bytes @ 0x10
  6986                           
  6987  0030                     ??_Cb56_UbatHandling_node_fcn2:	
  6988                           ; 1 bytes @ 0x10
  6989                           
  6990  0030                     ??_Cb1_Current_An___High_node_fcn1:	
  6991                           ; 1 bytes @ 0x10
  6992                           
  6993  0030                     ??_ADC_Init:	
  6994                           ; 1 bytes @ 0x10
  6995                           
  6996  0030                     ??_ADC_Wait:	
  6997                           ; 1 bytes @ 0x10
  6998                           
  6999  0030                     ??_FILTER_Ubat:	
  7000                           ; 1 bytes @ 0x10
  7001                           
  7002  0030                     ??_FILTER_IPhase:	
  7003                           ; 1 bytes @ 0x10
  7004                           
  7005  0030                     ??_FILTER_Temp:	
  7006                           ; 1 bytes @ 0x10
  7007                           
  7008  0030                     ??_InitMotorStop:	
  7009                           ; 1 bytes @ 0x10
  7010                           
  7011  0030                     ??_EnableMCP201:	
  7012                           ; 1 bytes @ 0x10
  7013                           
  7014  0030                     ??__ELINMIntInitialize:	
  7015                           ; 1 bytes @ 0x10
  7016                           
  7017  0030                     ??__ELINMIntCalcIDParity:	
  7018                           ; 1 bytes @ 0x10
  7019                           
  7020  0030                     ?_cksum:	
  7021                           ; 1 bytes @ 0x10
  7022                           
  7023  0030                     ?_ADC_Read:	
  7024                           ; 2 bytes @ 0x10
  7025                           
  7026  0030                     ?___wmul:	
  7027                           ; 2 bytes @ 0x10
  7028                           
  7029  0030                     ?___awdiv:	
  7030                           ; 2 bytes @ 0x10
  7031                           
  7032  0030                     ?___lwdiv:	
  7033                           ; 2 bytes @ 0x10
  7034                           
  7035  0030                     ?___tmul:	
  7036                           ; 2 bytes @ 0x10
  7037                           
  7038  0030                     ?___lmul:	
  7039                           ; 3 bytes @ 0x10
  7040                           
  7041  0030                     ?___aldiv:	
  7042                           ; 4 bytes @ 0x10
  7043                           
  7044  0030                     read_eeprom_data@ui8_adress:	
  7045                           ; 4 bytes @ 0x10
  7046                           
  7047  0030                     EnableMCP201@_dcnt:	
  7048                           ; 1 bytes @ 0x10
  7049                           
  7050  0030                     __ELINMIntCalcIDParity@ELINM_idtr:	
  7051                           ; 1 bytes @ 0x10
  7052                           
  7053  0030                     __ELINMIntGetPointer@_ELINMInt_position:	
  7054                           ; 1 bytes @ 0x10
  7055                           
  7056  0030                     PWM_Capture_init@ui8_CCP_Nb:	
  7057                           ; 1 bytes @ 0x10
  7058                           
  7059  0030                     PWM_Write_Out@ui8_DutyCycle_Out:	
  7060                           ; 1 bytes @ 0x10
  7061                           
  7062  0030                     clear_timer@ui8_TmrNb:	
  7063                           ; 1 bytes @ 0x10
  7064                           
  7065  0030                     ___wmul@multiplier:	
  7066                           ; 1 bytes @ 0x10
  7067                           
  7068  0030                     ___awdiv@divisor:	
  7069                           ; 2 bytes @ 0x10
  7070                           
  7071  0030                     ___lwdiv@divisor:	
  7072                           ; 2 bytes @ 0x10
  7073                           
  7074  0030                     ___tmul@multiplier:	
  7075                           ; 2 bytes @ 0x10
  7076                           
  7077  0030                     ___lmul@multiplier:	
  7078                           ; 3 bytes @ 0x10
  7079                           
  7080  0030                     ___aldiv@divisor:	
  7081                           ; 4 bytes @ 0x10
  7082                           
  7083                           
  7084                           ; 4 bytes @ 0x10
  7085  0030                     	ds	1
  7086  0031                     ??__ELINMIntGetPointer:	
  7087  0031                     ?__ELINMIntSendMessage:	
  7088                           ; 1 bytes @ 0x11
  7089                           
  7090  0031                     ??_timer_init:	
  7091                           ; 1 bytes @ 0x11
  7092                           
  7093  0031                     ??_DiagInit:	
  7094                           ; 1 bytes @ 0x11
  7095                           
  7096  0031                     ??_SetDiagAlarm:	
  7097                           ; 1 bytes @ 0x11
  7098                           
  7099  0031                     read_eeprom_data@ui8_adress_data:	
  7100                           ; 1 bytes @ 0x11
  7101                           
  7102  0031                     EnableMCP201@_dcnt_712:	
  7103                           ; 1 bytes @ 0x11
  7104                           
  7105  0031                     __ELINMIntSendMessage@_ELINM_size:	
  7106                           ; 1 bytes @ 0x11
  7107                           
  7108  0031                     __ELINMIntGetPointer@_ELINMInt_tag:	
  7109                           ; 1 bytes @ 0x11
  7110                           
  7111  0031                     timer_init@ui8_TmrNb:	
  7112                           ; 1 bytes @ 0x11
  7113                           
  7114                           
  7115                           ; 1 bytes @ 0x11
  7116  0031                     	ds	1
  7117  0032                     ??_cksum:	
  7118  0032                     ??_ADC_Read:	
  7119                           ; 1 bytes @ 0x12
  7120                           
  7121  0032                     ??_init_ports:	
  7122                           ; 1 bytes @ 0x12
  7123                           
  7124  0032                     ADC_Read@i:	
  7125                           ; 1 bytes @ 0x12
  7126                           
  7127  0032                     EnableMCP201@_dcnt_713:	
  7128                           ; 1 bytes @ 0x12
  7129                           
  7130  0032                     __ELINMIntSendMessage@_ELINM_fmin:	
  7131                           ; 1 bytes @ 0x12
  7132                           
  7133  0032                     cksum@counter:	
  7134                           ; 2 bytes @ 0x12
  7135                           
  7136  0032                     ___wmul@multiplicand:	
  7137                           ; 2 bytes @ 0x12
  7138                           
  7139  0032                     ___awdiv@dividend:	
  7140                           ; 2 bytes @ 0x12
  7141                           
  7142  0032                     ___lwdiv@dividend:	
  7143                           ; 2 bytes @ 0x12
  7144                           
  7145                           
  7146                           ; 2 bytes @ 0x12
  7147  0032                     	ds	1
  7148  0033                     ??_FILTER_Init:	
  7149  0033                     ??_I_calibrationInit:	
  7150                           ; 1 bytes @ 0x13
  7151                           
  7152  0033                     ___tmul@multiplicand:	
  7153                           ; 1 bytes @ 0x13
  7154                           
  7155                           
  7156                           ; 3 bytes @ 0x13
  7157  0033                     	ds	1
  7158  0034                     ??___wmul:	
  7159  0034                     ??___awdiv:	
  7160                           ; 1 bytes @ 0x14
  7161                           
  7162  0034                     ??___lwdiv:	
  7163                           ; 1 bytes @ 0x14
  7164                           
  7165  0034                     ___awdiv@counter:	
  7166                           ; 1 bytes @ 0x14
  7167                           
  7168  0034                     ___lwdiv@counter:	
  7169                           ; 1 bytes @ 0x14
  7170                           
  7171  0034                     __ELINMIntSendMessage@_ELINM_fmax:	
  7172                           ; 1 bytes @ 0x14
  7173                           
  7174  0034                     cksum@sum:	
  7175                           ; 2 bytes @ 0x14
  7176                           
  7177  0034                     ___wmul@product:	
  7178                           ; 2 bytes @ 0x14
  7179                           
  7180  0034                     ___lmul@multiplicand:	
  7181                           ; 2 bytes @ 0x14
  7182                           
  7183  0034                     ___aldiv@dividend:	
  7184                           ; 4 bytes @ 0x14
  7185                           
  7186                           
  7187                           ; 4 bytes @ 0x14
  7188  0034                     	ds	1
  7189  0035                     ___awdiv@sign:	
  7190  0035                     ___lwdiv@quotient:	
  7191                           ; 1 bytes @ 0x15
  7192                           
  7193                           
  7194                           ; 2 bytes @ 0x15
  7195  0035                     	ds	1
  7196  0036                     ??_commutate:	
  7197  0036                     ??__ELINMIntSendMessage:	
  7198                           ; 1 bytes @ 0x16
  7199                           
  7200  0036                     ??___tmul:	
  7201                           ; 1 bytes @ 0x16
  7202                           
  7203  0036                     __ELINMIntSendMessage@_ELINM_idr:	
  7204                           ; 1 bytes @ 0x16
  7205                           
  7206  0036                     cksum@addr:	
  7207                           ; 1 bytes @ 0x16
  7208                           
  7209  0036                     ___awdiv@quotient:	
  7210                           ; 2 bytes @ 0x16
  7211                           
  7212  0036                     ___tmul@product:	
  7213                           ; 2 bytes @ 0x16
  7214                           
  7215                           
  7216                           ; 3 bytes @ 0x16
  7217  0036                     	ds	1
  7218  0037                     ?_write_eeprom_data:	
  7219  0037                     write_eeprom_data@ui8_adress_data:	
  7220                           ; 1 bytes @ 0x17
  7221                           
  7222  0037                     __ELINMIntSendMessage@_ELINM_tid:	
  7223                           ; 1 bytes @ 0x17
  7224                           
  7225                           
  7226                           ; 1 bytes @ 0x17
  7227  0037                     	ds	1
  7228  0038                     ??_write_eeprom_data:	
  7229  0038                     ??___lmul:	
  7230                           ; 1 bytes @ 0x18
  7231                           
  7232  0038                     ??___aldiv:	
  7233                           ; 1 bytes @ 0x18
  7234                           
  7235  0038                     write_eeprom_data@ui8_adress:	
  7236                           ; 1 bytes @ 0x18
  7237                           
  7238  0038                     __ELINMIntSendMessage@_ELINM_i:	
  7239                           ; 1 bytes @ 0x18
  7240                           
  7241  0038                     ___aldiv@counter:	
  7242                           ; 1 bytes @ 0x18
  7243                           
  7244  0038                     ___lmul@product:	
  7245                           ; 1 bytes @ 0x18
  7246                           
  7247                           
  7248                           ; 4 bytes @ 0x18
  7249  0038                     	ds	1
  7250  0039                     ?___ltdiv:	
  7251  0039                     ___aldiv@sign:	
  7252                           ; 3 bytes @ 0x19
  7253                           
  7254  0039                     __ELINMIntSendMessage@_ELINM_chk:	
  7255                           ; 1 bytes @ 0x19
  7256                           
  7257  0039                     ___ltdiv@divisor:	
  7258                           ; 2 bytes @ 0x19
  7259                           
  7260                           
  7261                           ; 3 bytes @ 0x19
  7262  0039                     	ds	1
  7263  003A                     ___aldiv@quotient:	
  7264                           
  7265                           ; 4 bytes @ 0x1A
  7266  003A                     	ds	1
  7267  003B                     ?_Transmit_LIN_8Bytes:	
  7268  003B                     ?__ELINMIntReceiveMessage:	
  7269                           ; 1 bytes @ 0x1B
  7270                           
  7271  003B                     Transmit_LIN_8Bytes@B0:	
  7272                           ; 1 bytes @ 0x1B
  7273                           
  7274  003B                     __ELINMIntReceiveMessage@_ELINM_id:	
  7275                           ; 1 bytes @ 0x1B
  7276                           
  7277                           
  7278                           ; 1 bytes @ 0x1B
  7279  003B                     	ds	1
  7280  003C                     ??_Get_Analog_Value:	
  7281  003C                     Transmit_LIN_8Bytes@B1:	
  7282                           ; 1 bytes @ 0x1C
  7283                           
  7284  003C                     __ELINMIntReceiveMessage@_ELINM_size:	
  7285                           ; 1 bytes @ 0x1C
  7286                           
  7287  003C                     ___ltdiv@dividend:	
  7288                           ; 1 bytes @ 0x1C
  7289                           
  7290                           
  7291                           ; 3 bytes @ 0x1C
  7292  003C                     	ds	1
  7293  003D                     ??__ELINMIntReceiveMessage:	
  7294  003D                     Transmit_LIN_8Bytes@B2:	
  7295                           ; 1 bytes @ 0x1D
  7296                           
  7297  003D                     __ELINMIntReceiveMessage@_ELINM_tag:	
  7298                           ; 1 bytes @ 0x1D
  7299                           
  7300                           
  7301                           ; 1 bytes @ 0x1D
  7302  003D                     	ds	1
  7303  003E                     ??_BVH2_Appl_Layer:	
  7304  003E                     ??_Receive_Diag:	
  7305                           ; 1 bytes @ 0x1E
  7306                           
  7307  003E                     Transmit_LIN_8Bytes@B3:	
  7308                           ; 1 bytes @ 0x1E
  7309                           
  7310                           
  7311                           ; 1 bytes @ 0x1E
  7312  003E                     	ds	1
  7313  003F                     ??___ltdiv:	
  7314  003F                     Transmit_LIN_8Bytes@B4:	
  7315                           ; 1 bytes @ 0x1F
  7316                           
  7317  003F                     Receive_Diag@id:	
  7318                           ; 1 bytes @ 0x1F
  7319                           
  7320  003F                     ___ltdiv@quotient:	
  7321                           ; 1 bytes @ 0x1F
  7322                           
  7323                           
  7324                           ; 3 bytes @ 0x1F
  7325  003F                     	ds	1
  7326  0040                     Transmit_LIN_8Bytes@B5:	
  7327                           
  7328                           ; 1 bytes @ 0x20
  7329  0040                     	ds	1
  7330  0041                     Transmit_LIN_8Bytes@B6:	
  7331                           
  7332                           ; 1 bytes @ 0x21
  7333  0041                     	ds	1
  7334  0042                     ??_InitMotorRun:	
  7335  0042                     ??_init_bldc:	
  7336                           ; 1 bytes @ 0x22
  7337                           
  7338  0042                     ??_system_init:	
  7339                           ; 1 bytes @ 0x22
  7340                           
  7341  0042                     Transmit_LIN_8Bytes@B7:	
  7342                           ; 1 bytes @ 0x22
  7343                           
  7344  0042                     ___ltdiv@counter:	
  7345                           ; 1 bytes @ 0x22
  7346                           
  7347                           
  7348                           ; 1 bytes @ 0x22
  7349  0042                     	ds	1
  7350  0043                     ??_Transmit_LIN_8Bytes:	
  7351  0043                     ??_PWMReadDC:	
  7352                           ; 1 bytes @ 0x23
  7353                           
  7354  0043                     Transmit_LIN_8Bytes@ID:	
  7355                           ; 1 bytes @ 0x23
  7356                           
  7357                           
  7358                           ; 1 bytes @ 0x23
  7359  0043                     	ds	1
  7360  0044                     ??_NegativeAnswer:	
  7361  0044                     NegativeAnswer@LID:	
  7362                           ; 1 bytes @ 0x24
  7363                           
  7364                           
  7365                           ; 1 bytes @ 0x24
  7366  0044                     	ds	1
  7367  0045                     ??_EOL:	
  7368                           
  7369                           ; 1 bytes @ 0x25
  7370  0045                     	ds	3
  7371  0048                     ??_main:	
  7372                           
  7373                           ; 1 bytes @ 0x28
  7374  0048                     	ds	4
  7375                           
  7376                           	psect	text7
  7377  1A6C                     __ptext7:	
  7378 ;; *************** function _commutate *****************
  7379 ;; Defined at:
  7380 ;;		line 1426 in file "../bldc.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;		None
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;		None
  7385 ;; Return value:  Size  Location     Type
  7386 ;;                  1    wreg      void 
  7387 ;; Registers used:
  7388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7389 ;; Tracked objects:
  7390 ;;		On entry : 1F/1
  7391 ;;		On exit  : 1F/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7394 ;;      Params:         0       0       0       0       0       0       0       0
  7395 ;;      Locals:         0       0       0       0       0       0       0       0
  7396 ;;      Temps:          0      12       0       0       0       0       0       0
  7397 ;;      Totals:         0      12       0       0       0       0       0       0
  7398 ;;Total ram usage:       12 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; Hardware stack levels required when called:    5
  7401 ;; This function calls:
  7402 ;;		___wmul
  7403 ;; This function is called by:
  7404 ;;		_InitMotorRun
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           
  7409                           ;psect for function _commutate
  7410  1A6C                     _commutate:	
  7411  1A6C                     l9432:	
  7412                           ;incstack = 0
  7413                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7414                           
  7415                           
  7416                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  7417  1A6C  3000               	movlw	0
  7418  1A6D  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  7419  1A6E  300A               	movlw	10
  7420  1A6F  1903               	skipnz
  7421  1A70  023A               	subwf	_ui16_step_cnt^(0+128),w
  7422  1A71  1803               	skipnc
  7423  1A72  2A76               	goto	l9436
  7424                           
  7425                           ;bldc.c: 1433: {
  7426                           ;bldc.c: 1435: ui16_step_cnt++;
  7427  1A73  0ABA               	incf	_ui16_step_cnt^(0+128),f
  7428  1A74  1903               	skipnz
  7429  1A75  0ABB               	incf	(_ui16_step_cnt+1)^(0+128),f
  7430  1A76                     l9436:	
  7431                           
  7432                           ;bldc.c: 1437: }
  7433                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  7434                           
  7435                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  7436                           
  7437                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  7438  1A76  26AF  319A         	fcall	PL16	;call to abstracted procedure
  7439  1A78  00B6               	movwf	??_commutate
  7440  1A79  0023               	movlb	3	; select bank3
  7441  1A7A  0825               	movf	((_B+1)^(0+384)+4),w
  7442  1A7B  3D23               	addwfc	((_B+1)^(0+384)+2),w
  7443  1A7C  0020               	movlb	0	; select bank0
  7444  1A7D  00B7               	movwf	??_commutate+1
  7445  1A7E  0023               	movlb	3	; select bank3
  7446  1A7F  0826               	movf	(_B^(0+384)+6),w
  7447  1A80  0020               	movlb	0	; select bank0
  7448  1A81  0736               	addwf	??_commutate,w
  7449  1A82  00B8               	movwf	??_commutate+2
  7450  1A83  0023               	movlb	3	; select bank3
  7451  1A84  0827               	movf	((_B+1)^(0+384)+6),w
  7452  1A85  0020               	movlb	0	; select bank0
  7453  1A86  3D37               	addwfc	??_commutate+1,w
  7454  1A87  00B9               	movwf	??_commutate+3
  7455  1A88  0023               	movlb	3	; select bank3
  7456  1A89  0828               	movf	(_B^(0+384)+8),w
  7457  1A8A  0020               	movlb	0	; select bank0
  7458  1A8B  0738               	addwf	??_commutate+2,w
  7459  1A8C  00BA               	movwf	??_commutate+4
  7460  1A8D  0023               	movlb	3	; select bank3
  7461  1A8E  0829               	movf	((_B+1)^(0+384)+8),w
  7462  1A8F  0020               	movlb	0	; select bank0
  7463  1A90  3D39               	addwfc	??_commutate+3,w
  7464  1A91  00BB               	movwf	??_commutate+5
  7465  1A92  0023               	movlb	3	; select bank3
  7466  1A93  082A               	movf	(_B^(0+384)+10),w
  7467  1A94  0020               	movlb	0	; select bank0
  7468  1A95  073A               	addwf	??_commutate+4,w
  7469  1A96  00BC               	movwf	??_commutate+6
  7470  1A97  0023               	movlb	3	; select bank3
  7471  1A98  082B               	movf	((_B+1)^(0+384)+10),w
  7472  1A99  0020               	movlb	0	; select bank0
  7473  1A9A  3D3B               	addwfc	??_commutate+5,w
  7474  1A9B  00BD               	movwf	??_commutate+7
  7475  1A9C  3F00               	moviw [0]fsr0
  7476  1A9D  073C               	addwf	??_commutate+6,w
  7477  1A9E  00BE               	movwf	??_commutate+8
  7478  1A9F  3F01               	moviw [1]fsr0
  7479  1AA0  3D3D               	addwfc	??_commutate+7,w
  7480  1AA1  00BF               	movwf	??_commutate+9
  7481  1AA2  3F40               	moviw [0]fsr1
  7482  1AA3  073E               	addwf	??_commutate+8,w
  7483  1AA4  00C0               	movwf	??_commutate+10
  7484  1AA5  3F41               	moviw [1]fsr1
  7485  1AA6  3D3F               	addwfc	??_commutate+9,w
  7486  1AA7  00C1               	movwf	??_commutate+11
  7487  1AA8  0023               	movlb	3	; select bank3
  7488  1AA9  0820               	movf	_B^(0+384),w
  7489  1AAA  0020               	movlb	0	; select bank0
  7490  1AAB  0740               	addwf	??_commutate+10,w
  7491  1AAC  277D  319A         	fcall	PL100	;call to abstracted procedure
  7492  1AAE  3D41               	addwfc	??_commutate+11,w
  7493                           
  7494                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  7495                           
  7496                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  7497                           
  7498                           ;bldc.c: 1455: bemf_filter = 62;
  7499                           
  7500                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  7501  1AAF  2737  319A         	fcall	PL46	;call to abstracted procedure
  7502                           
  7503                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  7504  1AB1  1DFA               	btfss	_MotorFlags,3
  7505  1AB2  2B16               	goto	l327
  7506                           
  7507                           ;bldc.c: 1463: {
  7508                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 100 )>>7;
  7509  1AB3  0022               	movlb	2	; select bank2
  7510  1AB4  0830               	movf	(_ui16_speed_rar+1)^(0+256),w
  7511  1AB5  0020               	movlb	0	; select bank0
  7512  1AB6  00B7               	movwf	??_commutate+1
  7513  1AB7  0022               	movlb	2	; select bank2
  7514  1AB8  082F               	movf	_ui16_speed_rar^(0+256),w
  7515  1AB9  0020               	movlb	0	; select bank0
  7516  1ABA  00B6               	movwf	??_commutate
  7517  1ABB  36B7               	lsrf	??_commutate+1,f
  7518  1ABC  0CB6               	rrf	??_commutate,f
  7519  1ABD  36B7               	lsrf	??_commutate+1,f
  7520  1ABE  0CB6               	rrf	??_commutate,f
  7521  1ABF  36B7               	lsrf	??_commutate+1,f
  7522  1AC0  0CB6               	rrf	??_commutate,f
  7523  1AC1  0836               	movf	??_commutate,w
  7524  1AC2  00B0               	movwf	___wmul@multiplier
  7525  1AC3  0837               	movf	??_commutate+1,w
  7526  1AC4  00B1               	movwf	___wmul@multiplier+1
  7527  1AC5  3064               	movlw	100
  7528  1AC6  00B2               	movwf	___wmul@multiplicand
  7529  1AC7  01B3               	clrf	___wmul@multiplicand+1
  7530  1AC8  318E  266A  319A   	fcall	___wmul
  7531  1ACB  0831               	movf	?___wmul+1,w
  7532  1ACC  0021               	movlb	1	; select bank1
  7533  1ACD  00B9               	movwf	(_ui16_phase_advancement+1)^(0+128)
  7534  1ACE  0020               	movlb	0	; select bank0
  7535  1ACF  0830               	movf	?___wmul,w
  7536  1AD0  0021               	movlb	1	; select bank1
  7537  1AD1  00B8               	movwf	_ui16_phase_advancement^(0+128)
  7538  1AD2  3007               	movlw	7
  7539  1AD3                     u7325:	
  7540  1AD3  36B9               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
  7541  1AD4  0CB8               	rrf	_ui16_phase_advancement^(0+128),f
  7542  1AD5  0B89               	decfsz	9,f
  7543  1AD6  2AD3               	goto	u7325
  7544                           
  7545                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  7546  1AD7  0020               	movlb	0	; select bank0
  7547  1AD8  0851               	movf	_comm_time+1,w
  7548  1AD9  0021               	movlb	1	; select bank1
  7549  1ADA  0239               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  7550  1ADB  1D03               	skipz
  7551  1ADC  2ADF               	goto	u7335
  7552  1ADD  27A9  319A         	fcall	PL130	;call to abstracted procedure
  7553  1ADF                     u7335:	
  7554  1ADF  1803               	skipnc
  7555  1AE0  2AE4               	goto	l9462
  7556                           
  7557                           ;bldc.c: 1474: {
  7558                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
  7559  1AE1  26D8  319A         	fcall	PL34	;call to abstracted procedure
  7560                           
  7561                           ;bldc.c: 1478: }
  7562  1AE3  2AF8               	goto	l9486
  7563  1AE4                     l9462:	
  7564                           
  7565                           ;bldc.c: 1481: else
  7566                           ;bldc.c: 1482: {
  7567                           ;bldc.c: 1484: phase_delay_counter = 0;
  7568  1AE4  0023               	movlb	3	; select bank3
  7569  1AE5  01DA               	clrf	_phase_delay_counter^(0+384)
  7570  1AE6  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  7571  1AE7  2AF8               	goto	l9486
  7572  1AE8                     l9464:	
  7573                           
  7574                           ;bldc.c: 1514: {
  7575                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
  7576  1AE8  30A6               	movlw	166
  7577  1AE9  2AF4               	goto	L5
  7578  1AEA                     l9466:	
  7579                           ;bldc.c: 1517: break;
  7580                           
  7581                           
  7582                           ;bldc.c: 1524: {
  7583                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
  7584  1AEA  2783  319A         	fcall	PL102	;call to abstracted procedure
  7585                           
  7586                           ;bldc.c: 1527: break;
  7587  1AEC  2B06               	goto	l9488
  7588  1AED                     l9468:	
  7589                           
  7590                           ;bldc.c: 1534: {
  7591                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
  7592  1AED  307D               	movlw	125
  7593  1AEE  2AF4               	goto	L5
  7594  1AEF                     l9470:	
  7595                           ;bldc.c: 1537: break;
  7596                           
  7597                           
  7598                           ;bldc.c: 1544: {
  7599                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
  7600  1AEF  3053               	movlw	83
  7601  1AF0  2AF4               	goto	L5
  7602  1AF1                     l9472:	
  7603                           ;bldc.c: 1547: break;
  7604                           
  7605                           
  7606                           ;bldc.c: 1554: {
  7607                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2400 * 2 )
      +                           ) ;
  7608  1AF1  3029               	movlw	41
  7609  1AF2  2AF4               	goto	L5
  7610  1AF3                     l9474:	
  7611                           ;bldc.c: 1557: break;
  7612                           
  7613                           
  7614                           ;bldc.c: 1564: {
  7615                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           ) ;
  7616  1AF3  3021               	movlw	33
  7617  1AF4                     L5:	
  7618  1AF4  0022               	movlb	2	; select bank2
  7619  1AF5  00AD               	movwf	_ui16_comm_time_max^(0+256)
  7620  1AF6  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  7621                           
  7622                           ;bldc.c: 1567: break;
  7623  1AF7  2B06               	goto	l9488
  7624  1AF8                     l9486:	
  7625                           
  7626                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7627                           ; Switch size 1, requested type "space"
  7628                           ; Number of cases is 1, Range of values is 0 to 0
  7629                           ; switch strategies available:
  7630                           ; Name         Instructions Cycles
  7631                           ; simple_byte            4     3 (average)
  7632                           ; direct_byte            8     6 (fixed)
  7633                           ; jumptable            260     6 (fixed)
  7634                           ;	Chosen strategy is simple_byte
  7635  1AF8  0021               	movlb	1	; select bank1
  7636  1AF9  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
  7637  1AFA  3A00               	xorlw	0	; case 0
  7638  1AFB  1903               	skipnz
  7639  1AFC  2AFE               	goto	l13816
  7640  1AFD  2AF3               	goto	l9474
  7641  1AFE                     l13816:	
  7642                           
  7643                           ; Switch size 1, requested type "space"
  7644                           ; Number of cases is 10, Range of values is 0 to 9
  7645                           ; switch strategies available:
  7646                           ; Name         Instructions Cycles
  7647                           ; direct_byte           26     6 (fixed)
  7648                           ; simple_byte           31    16 (average)
  7649                           ; jumptable            260     6 (fixed)
  7650                           ;	Chosen strategy is direct_byte
  7651  1AFE  27AE  319A         	fcall	PL132	;call to abstracted procedure
  7652  1B00  1803               	skipnc
  7653  1B01  2AF3               	goto	l9474
  7654  1B02  3187               	movlp	high S13818
  7655  1B03  3504               	lslf	4,w
  7656  1B04  3E0E               	addlw	low S13818
  7657  1B05  0082               	movwf	2
  7658  1B06                     l9488:	
  7659                           
  7660                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 *
      +                           2 ) ) )
  7661  1B06  3000               	movlw	0
  7662  1B07  022E               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  7663  1B08  3021               	movlw	33
  7664  1B09  1903               	skipnz
  7665  1B0A  022D               	subwf	_ui16_comm_time_max^(0+256),w
  7666  1B0B  1803               	skipnc
  7667  1B0C  2B10               	goto	l9492
  7668                           
  7669                           ;bldc.c: 1626: {
  7670                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  7671  1B0D  3021               	movlw	33
  7672  1B0E  00AD               	movwf	_ui16_comm_time_max^(0+256)
  7673  1B0F  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  7674  1B10                     l9492:	
  7675                           
  7676                           ;bldc.c: 1630: }
  7677                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
  7678  1B10  1E7A               	btfss	_MotorFlags,4
  7679  1B11  2B45               	goto	l345
  7680                           
  7681                           ;bldc.c: 1636: {
  7682                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
  7683  1B12  300A               	movlw	10
  7684  1B13  0021               	movlb	1	; select bank1
  7685  1B14  00E4               	movwf	_ui8_StartupPWM^(0+128)
  7686                           
  7687                           ;bldc.c: 1641: }
  7688                           ;bldc.c: 1644: }
  7689  1B15  2B45               	goto	l345
  7690  1B16                     l327:	
  7691                           
  7692                           ;bldc.c: 1647: else
  7693                           ;bldc.c: 1648: {
  7694                           ;bldc.c: 1652: if( rising_bemf_flag)
  7695  1B16  1C79               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  7696  1B17  2B1C               	goto	l9498
  7697                           
  7698                           ;bldc.c: 1654: {
  7699                           ;bldc.c: 1657: phase_delay_counter = 0;
  7700  1B18  0023               	movlb	3	; select bank3
  7701  1B19  01DA               	clrf	_phase_delay_counter^(0+384)
  7702  1B1A  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  7703                           
  7704                           ;bldc.c: 1659: }
  7705  1B1B  2B2A               	goto	l9500
  7706  1B1C                     l9498:	
  7707                           
  7708                           ;bldc.c: 1662: else
  7709                           ;bldc.c: 1663: {
  7710                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  7711  1B1C  0020               	movlb	0	; select bank0
  7712  1B1D  0851               	movf	_comm_time+1,w
  7713  1B1E  00B7               	movwf	??_commutate+1
  7714  1B1F  0850               	movf	_comm_time,w
  7715  1B20  00B6               	movwf	??_commutate
  7716  1B21  36B7               	lsrf	??_commutate+1,f
  7717  1B22  0CB6               	rrf	??_commutate,f
  7718  1B23  0836               	movf	??_commutate,w
  7719  1B24  0023               	movlb	3	; select bank3
  7720  1B25  00DA               	movwf	_phase_delay_counter^(0+384)
  7721  1B26  0020               	movlb	0	; select bank0
  7722  1B27  0837               	movf	??_commutate+1,w
  7723  1B28  0023               	movlb	3	; select bank3
  7724  1B29  00DB               	movwf	(_phase_delay_counter+1)^(0+384)
  7725  1B2A                     l9500:	
  7726                           
  7727                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  7728                           
  7729                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  7730  1B2A  2776  319A         	fcall	PL96	;call to abstracted procedure
  7731                           
  7732                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  7733  1B2C  1F7A               	btfss	_MotorFlags,6
  7734  1B2D  2B43               	goto	l9524
  7735                           
  7736                           ;bldc.c: 1693: {
  7737                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  7738  1B2E  27A4  319A         	fcall	PL128	;call to abstracted procedure
  7739  1B30  1903               	btfsc	3,2
  7740  1B31  2B45               	goto	l345
  7741                           
  7742                           ;bldc.c: 1706: else
  7743                           ;bldc.c: 1707: {
  7744                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  7745  1B32  279A  319A         	fcall	PL124	;call to abstracted procedure
  7746  1B34  1803               	skipnc
  7747  1B35  2B3D               	goto	l9518
  7748                           
  7749                           ;bldc.c: 1712: {
  7750                           ;bldc.c: 1714: CCPR1L--;
  7751                           
  7752                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  7753  1B36  2789  319A         	fcall	PL108	;call to abstracted procedure
  7754  1B38  1803               	skipnc
  7755  1B39  2B45               	goto	l345
  7756                           
  7757                           ;bldc.c: 1718: {
  7758                           ;bldc.c: 1720: CCPR1L--;
  7759  1B3A  0025               	movlb	5	; select bank5
  7760  1B3B  0391               	decf	17,f	;volatile
  7761  1B3C  2B45               	goto	l345
  7762  1B3D                     l9518:	
  7763                           
  7764                           ;bldc.c: 1728: else
  7765                           ;bldc.c: 1729: {
  7766                           ;bldc.c: 1731: CCPR1L++;
  7767                           
  7768                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  7769  1B3D  2769  319A         	fcall	PL88	;call to abstracted procedure
  7770  1B3F  1803               	skipnc
  7771  1B40  2B45               	goto	l345
  7772                           
  7773                           ;bldc.c: 1735: {
  7774                           ;bldc.c: 1737: CCPR1L++;
  7775  1B41  0A91               	incf	17,f	;volatile
  7776  1B42  2B45               	goto	l345
  7777  1B43                     l9524:	
  7778                           
  7779                           ;bldc.c: 1768: else
  7780                           ;bldc.c: 1769: {
  7781                           ;bldc.c: 1771: CCPR1L = 0;
  7782  1B43  0025               	movlb	5	; select bank5
  7783  1B44  0191               	clrf	17	;volatile
  7784  1B45                     l345:	
  7785                           
  7786                           ;bldc.c: 1773: }
  7787                           ;bldc.c: 1777: }
  7788                           ;bldc.c: 1780: comm_time = 0;
  7789                           
  7790                           ;bldc.c: 1784: if( comm_state == 0xff )
  7791  1B45  2795  319A         	fcall	PL120	;call to abstracted procedure
  7792  1B47  0F63               	incfsz	_comm_state^(0+128),w
  7793  1B48  2B91               	goto	l9674
  7794                           
  7795                           ;bldc.c: 1786: {
  7796                           ;bldc.c: 1788: comm_state = 6;
  7797  1B49  3006               	movlw	6
  7798  1B4A  00E3               	movwf	_comm_state^(0+128)
  7799  1B4B  2B91               	goto	l9674
  7800  1B4C                     l9530:	
  7801                           
  7802                           ;bldc.c: 1800: {
  7803                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
  7804  1B4C  3001               	movlw	1
  7805  1B4D  0025               	movlb	5	; select bank5
  7806  1B4E  0096               	movwf	22	;volatile
  7807                           
  7808                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  7809  1B4F  1F7A               	btfss	_MotorFlags,6
  7810  1B50  2B53               	goto	l9536
  7811                           
  7812                           ;bldc.c: 1811: {
  7813                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  7814  1B51  275D  319A         	fcall	PL72	;call to abstracted procedure
  7815  1B53                     l9536:	
  7816                           
  7817                           ;bldc.c: 1815: }
  7818                           ;bldc.c: 1819: LATB2 = 0;
  7819                           
  7820                           ;bldc.c: 1820: LATB1 = 0;
  7821                           
  7822                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  7823                           
  7824                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  7825                           
  7826                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  7827                           
  7828                           ;bldc.c: 1824: CM1CON1 = 0x02;
  7829                           
  7830                           ;bldc.c: 1837: CM1CON0 = 0x84;
  7831  1B53  26E9  319A         	fcall	PL36	;call to abstracted procedure
  7832  1B55  2B7F               	goto	L11
  7833  1B56                     l9554:	
  7834                           ;bldc.c: 1845: break;
  7835                           
  7836                           ;bldc.c: 1839: comm_state = 6;
  7837                           
  7838                           ;bldc.c: 1838: rising_bemf_flag = 1;
  7839                           
  7840                           
  7841                           ;bldc.c: 1855: {
  7842                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
  7843  1B56  3001               	movlw	1
  7844  1B57  0025               	movlb	5	; select bank5
  7845  1B58  0096               	movwf	22	;volatile
  7846                           
  7847                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  7848  1B59  1F7A               	btfss	_MotorFlags,6
  7849  1B5A  2B5D               	goto	l9560
  7850                           
  7851                           ;bldc.c: 1865: {
  7852                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  7853  1B5B  2751  319A         	fcall	PL64	;call to abstracted procedure
  7854  1B5D                     l9560:	
  7855                           
  7856                           ;bldc.c: 1869: }
  7857                           ;bldc.c: 1873: LATB2 = 1;
  7858                           
  7859                           ;bldc.c: 1874: LATB1 = 0;
  7860                           
  7861                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  7862                           
  7863                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  7864                           
  7865                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  7866                           
  7867                           ;bldc.c: 1878: CM1CON1 = 0x01;
  7868                           
  7869                           ;bldc.c: 1892: CM1CON0 = 0x94;
  7870  1B5D  2727  319A         	fcall	PL44	;call to abstracted procedure
  7871  1B5F                     l9574:	
  7872                           
  7873                           ;bldc.c: 1893: rising_bemf_flag = 0;
  7874                           
  7875                           ;bldc.c: 1894: comm_state = 1;
  7876  1B5F  279F  319A         	fcall	PL126	;call to abstracted procedure
  7877                           
  7878                           ;bldc.c: 1902: break;
  7879  1B61  2BA5               	goto	l9676
  7880  1B62                     l9578:	
  7881                           
  7882                           ;bldc.c: 1912: {
  7883                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
  7884  1B62  3002               	movlw	2
  7885  1B63  0025               	movlb	5	; select bank5
  7886  1B64  0096               	movwf	22	;volatile
  7887                           
  7888                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  7889  1B65  1F7A               	btfss	_MotorFlags,6
  7890  1B66  2B69               	goto	l9584
  7891                           
  7892                           ;bldc.c: 1922: {
  7893                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  7894  1B67  2757  319A         	fcall	PL68	;call to abstracted procedure
  7895  1B69                     l9584:	
  7896                           
  7897                           ;bldc.c: 1926: }
  7898                           ;bldc.c: 1929: LATC2 = 0;
  7899                           
  7900                           ;bldc.c: 1931: LATB1 = 0;
  7901                           
  7902                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  7903                           
  7904                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  7905                           
  7906                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  7907                           
  7908                           ;bldc.c: 1935: CM1CON1 = 0x00;
  7909                           
  7910                           ;bldc.c: 1949: CM1CON0 = 0x84;
  7911  1B69  2709  319A         	fcall	PL40	;call to abstracted procedure
  7912  1B6B  2B7F               	goto	L11
  7913  1B6C                     l9598:	
  7914                           ;bldc.c: 1956: break;
  7915                           
  7916                           ;bldc.c: 1951: comm_state = 2;
  7917                           
  7918                           ;bldc.c: 1950: rising_bemf_flag = 1;
  7919                           
  7920                           
  7921                           ;bldc.c: 1966: {
  7922                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
  7923  1B6C  3002               	movlw	2
  7924  1B6D  0025               	movlb	5	; select bank5
  7925  1B6E  0096               	movwf	22	;volatile
  7926                           
  7927                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  7928  1B6F  1F7A               	btfss	_MotorFlags,6
  7929  1B70  2B73               	goto	l9604
  7930                           
  7931                           ;bldc.c: 1977: {
  7932                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  7933  1B71  275D  319A         	fcall	PL72	;call to abstracted procedure
  7934  1B73                     l9604:	
  7935                           
  7936                           ;bldc.c: 1981: }
  7937                           ;bldc.c: 1984: LATC2 = 0;
  7938                           
  7939                           ;bldc.c: 1986: LATB1 = 1;
  7940                           
  7941                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  7942                           
  7943                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  7944                           
  7945                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  7946                           
  7947                           ;bldc.c: 1990: CM1CON1 = 0x02;
  7948                           
  7949                           ;bldc.c: 2004: CM1CON0 = 0x94;
  7950  1B73  26C8  319A         	fcall	PL32	;call to abstracted procedure
  7951  1B75  2B8A               	goto	L12
  7952  1B76                     l9622:	
  7953                           ;bldc.c: 2011: break;
  7954                           
  7955                           ;bldc.c: 2006: comm_state = 3;
  7956                           
  7957                           ;bldc.c: 2005: rising_bemf_flag = 0;
  7958                           
  7959                           
  7960                           ;bldc.c: 2020: {
  7961                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
  7962  1B76  3004               	movlw	4
  7963  1B77  0025               	movlb	5	; select bank5
  7964  1B78  0096               	movwf	22	;volatile
  7965                           
  7966                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  7967  1B79  1F7A               	btfss	_MotorFlags,6
  7968  1B7A  2B7D               	goto	l9628
  7969                           
  7970                           ;bldc.c: 2031: {
  7971                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  7972  1B7B  2751  319A         	fcall	PL64	;call to abstracted procedure
  7973  1B7D                     l9628:	
  7974                           
  7975                           ;bldc.c: 2035: }
  7976                           ;bldc.c: 2038: LATC2 = 0;
  7977                           
  7978                           ;bldc.c: 2039: LATB2 = 0;
  7979                           
  7980                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  7981                           
  7982                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  7983                           
  7984                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  7985                           
  7986                           ;bldc.c: 2044: CM1CON1 = 0x01;
  7987                           
  7988                           ;bldc.c: 2059: CM1CON0 = 0x84;
  7989  1B7D  26F9  319A         	fcall	PL38	;call to abstracted procedure
  7990  1B7F                     L11:	
  7991                           
  7992                           ;bldc.c: 2060: rising_bemf_flag = 1;
  7993  1B7F  1479               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  7994                           
  7995                           ;bldc.c: 2061: comm_state = 4;
  7996  1B80  2B8B               	goto	L9
  7997  1B81                     l9646:	
  7998                           ;bldc.c: 2066: break;
  7999                           
  8000                           
  8001                           ;bldc.c: 2076: {
  8002                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
  8003  1B81  3004               	movlw	4
  8004  1B82  0025               	movlb	5	; select bank5
  8005  1B83  0096               	movwf	22	;volatile
  8006                           
  8007                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  8008  1B84  1F7A               	btfss	_MotorFlags,6
  8009  1B85  2B88               	goto	l9652
  8010                           
  8011                           ;bldc.c: 2086: {
  8012                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  8013  1B86  2757  319A         	fcall	PL68	;call to abstracted procedure
  8014  1B88                     l9652:	
  8015                           
  8016                           ;bldc.c: 2090: }
  8017                           ;bldc.c: 2093: LATC2 = 1;
  8018                           
  8019                           ;bldc.c: 2094: LATB2 = 0;
  8020                           
  8021                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  8022                           
  8023                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  8024                           
  8025                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  8026                           
  8027                           ;bldc.c: 2099: CM1CON1 = 0x00;
  8028                           
  8029                           ;bldc.c: 2113: CM1CON0 = 0x94;
  8030  1B88  2718  319A         	fcall	PL42	;call to abstracted procedure
  8031  1B8A                     L12:	
  8032                           
  8033                           ;bldc.c: 2114: rising_bemf_flag = 0;
  8034  1B8A  1079               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  8035  1B8B                     L9:	
  8036                           
  8037                           ;bldc.c: 2115: comm_state = 5;
  8038  1B8B  0021               	movlb	1	; select bank1
  8039  1B8C  00E3               	movwf	_comm_state^(0+128)
  8040                           
  8041                           ;bldc.c: 2120: break;
  8042  1B8D  2BA5               	goto	l9676
  8043  1B8E                     l9666:	
  8044                           
  8045                           ;bldc.c: 2129: {
  8046                           ;bldc.c: 2131: PSTR1CON = 0x00;
  8047                           
  8048                           ;bldc.c: 2132: CM1CON0 = 0x00;
  8049  1B8E  27B3  319A         	fcall	PL134	;call to abstracted procedure
  8050  1B90  2B5F               	goto	l9574
  8051  1B91                     l9674:	
  8052  1B91  0863               	movf	_comm_state^(0+128),w
  8053                           
  8054                           ; Switch size 1, requested type "space"
  8055                           ; Number of cases is 6, Range of values is 1 to 6
  8056                           ; switch strategies available:
  8057                           ; Name         Instructions Cycles
  8058                           ; simple_byte           19    10 (average)
  8059                           ; direct_byte           21     9 (fixed)
  8060                           ; jumptable            263     9 (fixed)
  8061                           ;	Chosen strategy is simple_byte
  8062  1B92  3A01               	xorlw	1	; case 1
  8063  1B93  1903               	skipnz
  8064  1B94  2B4C               	goto	l9530
  8065  1B95  3A03               	xorlw	3	; case 2
  8066  1B96  1903               	skipnz
  8067  1B97  2B56               	goto	l9554
  8068  1B98  3A01               	xorlw	1	; case 3
  8069  1B99  1903               	skipnz
  8070  1B9A  2B62               	goto	l9578
  8071  1B9B  3A07               	xorlw	7	; case 4
  8072  1B9C  1903               	skipnz
  8073  1B9D  2B6C               	goto	l9598
  8074  1B9E  3A01               	xorlw	1	; case 5
  8075  1B9F  1903               	skipnz
  8076  1BA0  2B76               	goto	l9622
  8077  1BA1  3A03               	xorlw	3	; case 6
  8078  1BA2  1903               	skipnz
  8079  1BA3  2B81               	goto	l9646
  8080  1BA4  2B8E               	goto	l9666
  8081  1BA5                     l9676:	
  8082                           
  8083                           ;bldc.c: 2146: {
  8084                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  8085                           
  8086                           ;bldc.c: 2158: }
  8087                           ;bldc.c: 2161: comm_time = 0;
  8088                           
  8089                           ;bldc.c: 2150: }
  8090  1BA5  2F70               	ljmp	PL90	;call to abstracted procedure
  8091  1BA6                     __end_of_commutate:	
  8092  1BA6                     __ptext51:	
  8093 ;; *************** function _interrrupt_bldc *****************
  8094 ;; Defined at:
  8095 ;;		line 281 in file "../bldc.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;		None
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  ui32_tmp        4   12[BANK0 ] unsigned long 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      void 
  8102 ;; Registers used:
  8103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 1F/0
  8106 ;;		On exit  : 1C/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8109 ;;      Params:         0       0       0       0       0       0       0       0
  8110 ;;      Locals:         0       4       0       0       0       0       0       0
  8111 ;;      Temps:          2       0       0       0       0       0       0       0
  8112 ;;      Totals:         2       4       0       0       0       0       0       0
  8113 ;;Total ram usage:        6 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    2
  8116 ;; This function calls:
  8117 ;;		_BLDCWait
  8118 ;;		i1_ADC_Read
  8119 ;;		i1_ADC_Wait
  8120 ;;		i1___lwdiv
  8121 ;;		i1___wmul
  8122 ;;		i1_commutate
  8123 ;; This function is called by:
  8124 ;;		_interrupt_handler
  8125 ;; This function uses a non-reentrant model
  8126 ;;
  8127                           
  8128                           
  8129                           ;psect for function _interrrupt_bldc
  8130  1BA6                     _interrrupt_bldc:	
  8131                           
  8132                           ;bldc.c: 286: unsigned long ui32_tmp ;
  8133                           ;bldc.c: 288: ++comm_time ;
  8134                           
  8135                           ;incstack = 0
  8136                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8137  1BA6  0AD0               	incf	_comm_time,f
  8138  1BA7  1903               	skipnz
  8139  1BA8  0AD1               	incf	_comm_time+1,f
  8140                           
  8141                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
  8142  1BA9  0851               	movf	_comm_time+1,w
  8143  1BAA  0022               	movlb	2	; select bank2
  8144  1BAB  022E               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  8145  1BAC  1D03               	skipz
  8146  1BAD  2BB2               	goto	u1088_25
  8147  1BAE  0020               	movlb	0	; select bank0
  8148  1BAF  0850               	movf	_comm_time,w
  8149  1BB0  0022               	movlb	2	; select bank2
  8150  1BB1  022D               	subwf	_ui16_comm_time_max^(0+256),w
  8151  1BB2                     u1088_25:	
  8152  1BB2  1803               	skipnc
  8153  1BB3  2BB6               	goto	i1l12716
  8154                           
  8155                           ;bldc.c: 294: {
  8156                           ;bldc.c: 296: commutate( );
  8157  1BB4  2577  319A         	fcall	i1_commutate
  8158  1BB6                     i1l12716:	
  8159                           
  8160                           ;bldc.c: 298: }
  8161                           ;bldc.c: 302: if( ui16_step_cnt < 10 )
  8162  1BB6  3000               	movlw	0
  8163  1BB7  0021               	movlb	1	; select bank1
  8164  1BB8  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  8165  1BB9  300A               	movlw	10
  8166  1BBA  1903               	skipnz
  8167  1BBB  023A               	subwf	_ui16_step_cnt^(0+128),w
  8168  1BBC  1803               	skipnc
  8169                           
  8170                           ;bldc.c: 311: else
  8171                           ;bldc.c: 312: {
  8172                           ;bldc.c: 322: MotorFlags.bits.B3 = 0;
  8173  1BBD  11FA               	bcf	_MotorFlags,3
  8174                           
  8175                           ;bldc.c: 328: }
  8176                           ;bldc.c: 331: if (ui16_step_cnt >= 3 )
  8177  1BBE  3000               	movlw	0
  8178  1BBF  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  8179  1BC0  3003               	movlw	3
  8180  1BC1  1903               	skipnz
  8181  1BC2  023A               	subwf	_ui16_step_cnt^(0+128),w
  8182  1BC3  1803               	btfsc	3,0
  8183                           
  8184                           ;bldc.c: 333: {
  8185                           ;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
  8186  1BC4  127A               	bcf	_MotorFlags,4
  8187                           
  8188                           ;bldc.c: 337: }
  8189                           ;bldc.c: 340: BLDCWait( );
  8190  1BC5  27B8  319A         	fcall	_BLDCWait
  8191                           
  8192                           ;bldc.c: 346: if( C1OUT )
  8193  1BC7  0022               	movlb	2	; select bank2
  8194  1BC8  1F11               	btfss	17,6	;volatile
  8195  1BC9  2BCD               	goto	i1l263
  8196                           
  8197                           ;bldc.c: 349: {
  8198                           ;bldc.c: 351: ui8_CompFlag = 0x00;
  8199  1BCA  0021               	movlb	1	; select bank1
  8200  1BCB  01DD               	clrf	_ui8_CompFlag^(0+128)
  8201                           
  8202                           ;bldc.c: 353: }
  8203  1BCC  2CD0               	goto	i1l12906
  8204  1BCD                     i1l263:	
  8205                           
  8206                           ;bldc.c: 356: else
  8207                           ;bldc.c: 357: {
  8208                           ;bldc.c: 362: ui8_CompFlag = 0x01;
  8209  1BCD  0021               	movlb	1	; select bank1
  8210  1BCE  01DD               	clrf	_ui8_CompFlag^(0+128)
  8211  1BCF  0ADD               	incf	_ui8_CompFlag^(0+128),f
  8212  1BD0  2CD0               	goto	i1l12906
  8213  1BD1                     i1l12730:	
  8214                           
  8215                           ;bldc.c: 378: {
  8216                           ;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
  8217  1BD1  302D               	movlw	45
  8218  1BD2  009D               	movwf	29	;volatile
  8219                           
  8220                           ;bldc.c: 387: ADC_Wait( );
  8221  1BD3  253B  319A         	fcall	i1_ADC_Wait
  8222                           
  8223                           ;bldc.c: 391: ( GO_nDONE = 1 );
  8224  1BD5  0021               	movlb	1	; select bank1
  8225  1BD6  149D               	bsf	29,1	;volatile
  8226                           
  8227                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
  8228  1BD7  2554  319A         	fcall	i1_ADC_Read
  8229  1BD9  0871               	movf	?i1_ADC_Read+1,w
  8230  1BDA  0023               	movlb	3	; select bank3
  8231  1BDB  00E9               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
  8232  1BDC  0870               	movf	?i1_ADC_Read,w
  8233  1BDD  00E8               	movwf	_ui16_NTC_Temp_bldc^(0+384)
  8234                           
  8235                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  8236  1BDE  3031               	movlw	49
  8237  1BDF  0021               	movlb	1	; select bank1
  8238  1BE0                     L52:	
  8239  1BE0  009D               	movwf	29	;volatile
  8240  1BE1                     L46:	
  8241                           
  8242                           ;bldc.c: 403: ADC_Wait( );
  8243  1BE1  253B  319A         	fcall	i1_ADC_Wait
  8244                           
  8245                           ;bldc.c: 407: ( GO_nDONE = 1 );
  8246  1BE3  0021               	movlb	1	; select bank1
  8247  1BE4  149D               	bsf	29,1	;volatile
  8248  1BE5                     i1l12740:	
  8249                           
  8250                           ;bldc.c: 410: ui8_sampleState++;
  8251  1BE5  0021               	movlb	1	; select bank1
  8252  1BE6  0ADE               	incf	_ui8_sampleState^(0+128),f
  8253                           
  8254                           ;bldc.c: 413: break;
  8255  1BE7  2CDD               	goto	i1l267
  8256  1BE8                     i1l12742:	
  8257                           
  8258                           ;bldc.c: 421: {
  8259                           ;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
  8260  1BE8  085F               	movf	_ui8_Ubemf_sel^(0+128),w
  8261  1BE9  009D               	movwf	29	;volatile
  8262                           
  8263                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
  8264  1BEA  081B               	movf	27,w	;volatile
  8265  1BEB  0020               	movlb	0	; select bank0
  8266  1BEC  00D7               	movwf	_ui16_Ubat_bldc	;volatile
  8267                           
  8268                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
  8269  1BED  0021               	movlb	1	; select bank1
  8270  1BEE  081C               	movf	28,w	;volatile
  8271  1BEF  0020               	movlb	0	; select bank0
  8272  1BF0  00D8               	movwf	_ui16_Ubat_bldc+1	;volatile
  8273                           
  8274                           ;bldc.c: 454: __nop();
  8275  1BF1  0000               	nop
  8276                           
  8277                           ;bldc.c: 455: __nop();
  8278  1BF2  0000               	nop
  8279                           
  8280                           ;bldc.c: 456: __nop();
  8281  1BF3  0000               	nop
  8282                           
  8283                           ;bldc.c: 457: __nop();
  8284  1BF4  0000               	nop
  8285                           
  8286                           ;bldc.c: 458: __nop();
  8287  1BF5  0000               	nop
  8288                           
  8289                           ;bldc.c: 459: __nop();
  8290  1BF6  0000               	nop
  8291                           
  8292                           ;bldc.c: 460: __nop();
  8293  1BF7  0000               	nop
  8294                           
  8295                           ;bldc.c: 461: __nop();
  8296  1BF8  0000               	nop
  8297                           
  8298                           ;bldc.c: 463: __nop();
  8299  1BF9  0000               	nop
  8300                           
  8301                           ;bldc.c: 464: __nop();
  8302  1BFA  0000               	nop
  8303                           
  8304                           ;bldc.c: 465: __nop();
  8305  1BFB  0000               	nop
  8306                           
  8307                           ;bldc.c: 466: __nop();
  8308  1BFC  0000               	nop
  8309                           
  8310                           ;bldc.c: 467: __nop();
  8311  1BFD  0000               	nop
  8312                           
  8313                           ;bldc.c: 468: __nop();
  8314  1BFE  0000               	nop
  8315                           
  8316                           ;bldc.c: 469: __nop();
  8317  1BFF  0000               	nop
  8318                           
  8319                           ;bldc.c: 470: __nop();
  8320  1C00  0000               	nop
  8321  1C01  2BE1               	goto	L46
  8322  1C02                     i1l12782:	
  8323                           ;bldc.c: 474: ADC_Wait();
  8324                           
  8325                           
  8326                           ;bldc.c: 491: {
  8327                           ;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
  8328  1C02  081B               	movf	27,w	;volatile
  8329  1C03  00B6               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
  8330                           
  8331                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
  8332  1C04  081C               	movf	28,w	;volatile
  8333  1C05  00B7               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
  8334                           
  8335                           ;bldc.c: 511: ( GO_nDONE = 1 );
  8336  1C06  149D               	bsf	29,1	;volatile
  8337                           
  8338                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui8_duty_cycle_BLDC != 0 ) )
  8339  1C07  1F7A               	btfss	_MotorFlags,6
  8340  1C08  2C1F               	goto	i1l12794
  8341  1C09  0020               	movlb	0	; select bank0
  8342  1C0A  0856               	movf	_ui8_duty_cycle_BLDC,w
  8343  1C0B  1903               	btfsc	3,2
  8344  1C0C  2C1F               	goto	i1l12794
  8345                           
  8346                           ;bldc.c: 521: {
  8347                           ;bldc.c: 523: if( rising_bemf_flag )
  8348  1C0D  1C79               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  8349  1C0E  2C28               	goto	i1l12802
  8350                           
  8351                           ;bldc.c: 525: {
  8352                           ;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
  8353  1C0F  0021               	movlb	1	; select bank1
  8354  1C10  0836               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  8355  1C11  3E64               	addlw	100
  8356  1C12  00F7               	movwf	??_interrrupt_bldc
  8357  1C13  3000               	movlw	0
  8358  1C14  3D37               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  8359  1C15  00F8               	movwf	??_interrrupt_bldc+1
  8360  1C16  0020               	movlb	0	; select bank0
  8361  1C17  0858               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8362  1C18  0278               	subwf	??_interrrupt_bldc+1,w
  8363  1C19  1D03               	skipz
  8364  1C1A  2C1D               	goto	u1095_25
  8365  1C1B  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  8366  1C1C  0277               	subwf	??_interrrupt_bldc,w
  8367  1C1D                     u1095_25:	
  8368  1C1D  1803               	skipnc
  8369  1C1E  2CDD               	goto	i1l267
  8370  1C1F                     i1l12794:	
  8371                           
  8372                           ;bldc.c: 530: {
  8373                           ;bldc.c: 534: ui8_sampleState++;
  8374  1C1F  0021               	movlb	1	; select bank1
  8375  1C20  0ADE               	incf	_ui8_sampleState^(0+128),f
  8376                           
  8377                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
  8378  1C21  0860               	movf	_ui8_UPhase_sel^(0+128),w
  8379  1C22  009D               	movwf	29	;volatile
  8380                           
  8381                           ;bldc.c: 540: ADC_Wait( );
  8382  1C23  253B  319A         	fcall	i1_ADC_Wait
  8383                           
  8384                           ;bldc.c: 544: ( GO_nDONE = 1 );
  8385  1C25  0021               	movlb	1	; select bank1
  8386  1C26  149D               	bsf	29,1	;volatile
  8387                           
  8388                           ;bldc.c: 547: }
  8389  1C27  2CDD               	goto	i1l267
  8390  1C28                     i1l12802:	
  8391                           
  8392                           ;bldc.c: 562: else
  8393                           ;bldc.c: 563: {
  8394                           ;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
  8395  1C28  3000               	movlw	0
  8396  1C29  0021               	movlb	1	; select bank1
  8397  1C2A  0237               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  8398  1C2B  301F               	movlw	31
  8399  1C2C  1903               	skipnz
  8400  1C2D  0236               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  8401  1C2E  1803               	btfsc	3,0
  8402  1C2F  2C1F               	goto	i1l12794
  8403  1C30  2CDD               	goto	i1l267
  8404  1C31                     i1l12820:	
  8405                           ;bldc.c: 593: }
  8406                           ;bldc.c: 596: }
  8407                           ;bldc.c: 601: }
  8408                           
  8409                           
  8410                           ;bldc.c: 665: ui8_BlankingCount = 0;
  8411  1C31  01E2               	clrf	_ui8_BlankingCount^(0+128)
  8412                           
  8413                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
  8414  1C32  2554  319A         	fcall	i1_ADC_Read
  8415                           
  8416                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
  8417  1C34  1CE6               	btfss	_ui8_error_Flags^(0+128),1
  8418  1C35  2C3E               	goto	i1l12834
  8419                           
  8420                           ;bldc.c: 677: {
  8421                           ;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
  8422  1C36  0861               	movf	_ui8_IPhase_sel^(0+128),w
  8423  1C37  009D               	movwf	29	;volatile
  8424                           
  8425                           ;bldc.c: 682: ADC_Wait( );
  8426  1C38  253B  319A         	fcall	i1_ADC_Wait
  8427                           
  8428                           ;bldc.c: 683: ( GO_nDONE = 1 );
  8429  1C3A  0021               	movlb	1	; select bank1
  8430  1C3B  149D               	bsf	29,1	;volatile
  8431                           
  8432                           ;bldc.c: 686: ui8_sampleState = 9;
  8433  1C3C  3009               	movlw	9
  8434  1C3D  2CCE               	goto	L47
  8435  1C3E                     i1l12834:	
  8436                           ;bldc.c: 688: }
  8437                           
  8438                           
  8439                           ;bldc.c: 691: else
  8440                           ;bldc.c: 692: {
  8441                           ;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  8442  1C3E  3075               	movlw	117
  8443  1C3F  009D               	movwf	29	;volatile
  8444                           
  8445                           ;bldc.c: 697: ADC_Wait( );
  8446  1C40  253B  319A         	fcall	i1_ADC_Wait
  8447  1C42  2BE5               	goto	i1l12740
  8448  1C43                     i1l284:	
  8449                           ;bldc.c: 754: }
  8450                           ;bldc.c: 757: case 8:
  8451                           
  8452                           
  8453                           ;bldc.c: 759: {
  8454                           ;bldc.c: 764: ( GO_nDONE = 1 );
  8455  1C43  149D               	bsf	29,1	;volatile
  8456                           
  8457                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
  8458  1C44  2554  319A         	fcall	i1_ADC_Read
  8459                           
  8460                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
  8461  1C46  0861               	movf	_ui8_IPhase_sel^(0+128),w
  8462  1C47  2BE0               	goto	L52
  8463  1C48                     i1l12854:	
  8464                           ;bldc.c: 776: ADC_Wait( );
  8465                           
  8466                           
  8467                           ;bldc.c: 795: {
  8468                           ;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
  8469  1C48  2554  319A         	fcall	i1_ADC_Read
  8470  1C4A  0871               	movf	?i1_ADC_Read+1,w
  8471  1C4B  0020               	movlb	0	; select bank0
  8472  1C4C  00CF               	movwf	_ui16_IPhase_bldc+1	;volatile
  8473  1C4D  0870               	movf	?i1_ADC_Read,w
  8474  1C4E  00CE               	movwf	_ui16_IPhase_bldc	;volatile
  8475                           
  8476                           ;bldc.c: 806: if (MotorFlags.bits.B6)
  8477  1C4F  1B7A               	btfsc	_MotorFlags,6
  8478  1C50  2CA2               	goto	i1l12880
  8479  1C51  2CAE               	goto	i1l12882
  8480  1C52                     i1l12860:	
  8481                           
  8482                           ;bldc.c: 816: {
  8483                           ;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0]) )
  8484  1C52  0022               	movlb	2	; select bank2
  8485  1C53  0820               	movf	_ui8_current_cal^(0+256),w
  8486  1C54  2747  319A         	fcall	PL48	;call to abstracted procedure
  8487  1C56  1803               	skipnc
  8488  1C57  2C69               	goto	i1l12864
  8489                           
  8490                           ;bldc.c: 820: {
  8491                           ;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[0])*ui16_I_c
      +                          al_Ph1)>>8);
  8492  1C58  2763  319A         	fcall	PL80	;call to abstracted procedure
  8493  1C5A  0820               	movf	_ui8_current_cal^(0+256),w
  8494  1C5B  02F0               	subwf	i1___wmul@multiplier,f
  8495  1C5C  1C03               	skipc
  8496  1C5D  03F1               	decf	i1___wmul@multiplier+1,f
  8497  1C5E  0021               	movlb	1	; select bank1
  8498  1C5F  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
  8499  1C60  00F3               	movwf	i1___wmul@multiplicand+1
  8500  1C61  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
  8501  1C62  00F2               	movwf	i1___wmul@multiplicand
  8502  1C63  2562  319A         	fcall	i1___wmul
  8503  1C65  0871               	movf	?i1___wmul+1,w
  8504  1C66  0022               	movlb	2	; select bank2
  8505  1C67  00B7               	movwf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8506  1C68  2C6B               	goto	L48
  8507  1C69                     i1l12864:	
  8508                           ;bldc.c: 824: }
  8509                           
  8510                           
  8511                           ;bldc.c: 827: else
  8512                           ;bldc.c: 828: {
  8513                           ;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
  8514  1C69  0022               	movlb	2	; select bank2
  8515  1C6A  01B7               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8516  1C6B                     L48:	
  8517  1C6B  01B8               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  8518  1C6C  2CB6               	goto	i1l12884
  8519  1C6D                     i1l12866:	
  8520                           
  8521                           ;bldc.c: 842: {
  8522                           ;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1] ) )
  8523  1C6D  0022               	movlb	2	; select bank2
  8524  1C6E  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  8525  1C6F  2747  319A         	fcall	PL48	;call to abstracted procedure
  8526  1C71  1803               	skipnc
  8527  1C72  2C84               	goto	i1l12870
  8528                           
  8529                           ;bldc.c: 846: {
  8530                           ;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[1])*ui16_I_c
      +                          al_Ph2)>>8);
  8531  1C73  2763  319A         	fcall	PL80	;call to abstracted procedure
  8532  1C75  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  8533  1C76  02F0               	subwf	i1___wmul@multiplier,f
  8534  1C77  1C03               	skipc
  8535  1C78  03F1               	decf	i1___wmul@multiplier+1,f
  8536  1C79  0021               	movlb	1	; select bank1
  8537  1C7A  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
  8538  1C7B  00F3               	movwf	i1___wmul@multiplicand+1
  8539  1C7C  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
  8540  1C7D  00F2               	movwf	i1___wmul@multiplicand
  8541  1C7E  2562  319A         	fcall	i1___wmul
  8542  1C80  0871               	movf	?i1___wmul+1,w
  8543  1C81  0023               	movlb	3	; select bank3
  8544  1C82  00D8               	movwf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8545  1C83  2C86               	goto	L49
  8546  1C84                     i1l12870:	
  8547                           ;bldc.c: 851: }
  8548                           
  8549                           
  8550                           ;bldc.c: 854: else
  8551                           ;bldc.c: 855: {
  8552                           ;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
  8553  1C84  0023               	movlb	3	; select bank3
  8554  1C85  01D8               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8555  1C86                     L49:	
  8556  1C86  01D9               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
  8557  1C87  2CB6               	goto	i1l12884
  8558  1C88                     i1l12872:	
  8559                           
  8560                           ;bldc.c: 869: {
  8561                           ;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]) )
  8562  1C88  0022               	movlb	2	; select bank2
  8563  1C89  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  8564  1C8A  2747  319A         	fcall	PL48	;call to abstracted procedure
  8565  1C8C  1803               	skipnc
  8566  1C8D  2C9F               	goto	i1l12876
  8567                           
  8568                           ;bldc.c: 873: {
  8569                           ;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[2])*ui16_I_c
      +                          al_Ph3)>>8);
  8570  1C8E  2763  319A         	fcall	PL80	;call to abstracted procedure
  8571  1C90  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  8572  1C91  02F0               	subwf	i1___wmul@multiplier,f
  8573  1C92  1C03               	skipc
  8574  1C93  03F1               	decf	i1___wmul@multiplier+1,f
  8575  1C94  0021               	movlb	1	; select bank1
  8576  1C95  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
  8577  1C96  00F3               	movwf	i1___wmul@multiplicand+1
  8578  1C97  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
  8579  1C98  00F2               	movwf	i1___wmul@multiplicand
  8580  1C99  2562  319A         	fcall	i1___wmul
  8581  1C9B  0871               	movf	?i1___wmul+1,w
  8582  1C9C  0023               	movlb	3	; select bank3
  8583  1C9D  00D6               	movwf	_ui16_IPhase3_bldc^(0+384)	;volatile
  8584  1C9E  2CB5               	goto	L50
  8585  1C9F                     i1l12876:	
  8586                           ;bldc.c: 877: }
  8587                           
  8588                           
  8589                           ;bldc.c: 880: else
  8590                           ;bldc.c: 881: {
  8591                           ;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
  8592  1C9F  0023               	movlb	3	; select bank3
  8593  1CA0  2CB4               	goto	L53
  8594  1CA1                     i1l12878:	
  8595  1CA1  2CAE               	goto	i1l12882
  8596  1CA2                     i1l12880:	
  8597                           ;bldc.c: 902: }
  8598                           ;bldc.c: 904: }
  8599                           
  8600                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
  8601                           
  8602                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
  8603                           
  8604                           ;bldc.c: 895: {
  8605                           ;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
  8606                           
  8607  1CA2  0021               	movlb	1	; select bank1
  8608  1CA3  0861               	movf	_ui8_IPhase_sel^(0+128),w
  8609                           
  8610                           ; Switch size 1, requested type "space"
  8611                           ; Number of cases is 3, Range of values is 9 to 53
  8612                           ; switch strategies available:
  8613                           ; Name         Instructions Cycles
  8614                           ; simple_byte           10     6 (average)
  8615                           ; direct_byte           99     9 (fixed)
  8616                           ; jumptable            263     9 (fixed)
  8617                           ;	Chosen strategy is simple_byte
  8618  1CA4  3A09               	xorlw	9	; case 9
  8619  1CA5  1903               	skipnz
  8620  1CA6  2C52               	goto	i1l12860
  8621  1CA7  3A18               	xorlw	24	; case 17
  8622  1CA8  1903               	skipnz
  8623  1CA9  2C88               	goto	i1l12872
  8624  1CAA  3A24               	xorlw	36	; case 53
  8625  1CAB  1903               	skipnz
  8626  1CAC  2C6D               	goto	i1l12866
  8627  1CAD  2CA1               	goto	i1l12878
  8628  1CAE                     i1l12882:	
  8629                           
  8630                           ;bldc.c: 910: else
  8631                           ;bldc.c: 911: {
  8632                           ;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
  8633  1CAE  0022               	movlb	2	; select bank2
  8634  1CAF  01B7               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8635  1CB0  01B8               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  8636                           
  8637                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
  8638  1CB1  0023               	movlb	3	; select bank3
  8639  1CB2  01D8               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8640  1CB3  01D9               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
  8641  1CB4                     L53:	
  8642                           
  8643                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
  8644  1CB4  01D6               	clrf	_ui16_IPhase3_bldc^(0+384)	;volatile
  8645  1CB5                     L50:	
  8646  1CB5  01D7               	clrf	(_ui16_IPhase3_bldc+1)^(0+384)	;volatile
  8647  1CB6                     i1l12884:	
  8648                           
  8649                           ;bldc.c: 918: }
  8650                           ;bldc.c: 956: if( (ui16_IPhase_bldc.w > 500+40) )
  8651  1CB6  3002               	movlw	2
  8652  1CB7  0020               	movlb	0	; select bank0
  8653  1CB8  024F               	subwf	_ui16_IPhase_bldc+1,w	;volatile
  8654  1CB9  301D               	movlw	29
  8655  1CBA  1903               	skipnz
  8656  1CBB  024E               	subwf	_ui16_IPhase_bldc,w	;volatile
  8657  1CBC  1C03               	skipc
  8658  1CBD  2CC2               	goto	i1l12890
  8659  1CBE  30E5               	movlw	229
  8660                           
  8661                           ;bldc.c: 958: {
  8662                           ;bldc.c: 960: MotorFlags.bits.B0 = 1;
  8663  1CBF  147A               	bsf	_MotorFlags,0
  8664                           
  8665                           ;bldc.c: 964: LATC = LATC & 0b11100101;
  8666  1CC0  0022               	movlb	2	; select bank2
  8667  1CC1  058E               	andwf	14,f	;volatile
  8668  1CC2                     i1l12890:	
  8669                           ;bldc.c: 970: }
  8670                           
  8671                           
  8672                           ;bldc.c: 978: }
  8673                           ;bldc.c: 984: ADC_Wait( );
  8674  1CC2  253B  319A         	fcall	i1_ADC_Wait
  8675                           
  8676                           ;bldc.c: 988: ( GO_nDONE = 1 );
  8677  1CC4  0021               	movlb	1	; select bank1
  8678  1CC5  149D               	bsf	29,1	;volatile
  8679                           
  8680                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
  8681  1CC6  1CE6               	btfss	_ui8_error_Flags^(0+128),1
  8682  1CC7  2BE5               	goto	i1l12740
  8683                           
  8684                           ;bldc.c: 993: {
  8685                           ;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  8686  1CC8  3075               	movlw	117
  8687  1CC9  009D               	movwf	29	;volatile
  8688                           
  8689                           ;bldc.c: 998: ADC_Wait( );
  8690  1CCA  253B  319A         	fcall	i1_ADC_Wait
  8691                           
  8692                           ;bldc.c: 1001: ui8_sampleState = 5;
  8693  1CCC  3005               	movlw	5
  8694  1CCD  0021               	movlb	1	; select bank1
  8695  1CCE                     L47:	
  8696  1CCE  00DE               	movwf	_ui8_sampleState^(0+128)
  8697                           
  8698                           ;bldc.c: 1003: }
  8699  1CCF  2CDD               	goto	i1l267
  8700  1CD0                     i1l12906:	
  8701  1CD0  085E               	movf	_ui8_sampleState^(0+128),w
  8702                           
  8703                           ; Switch size 1, requested type "space"
  8704                           ; Number of cases is 10, Range of values is 1 to 10
  8705                           ; switch strategies available:
  8706                           ; Name         Instructions Cycles
  8707                           ; direct_byte           29     9 (fixed)
  8708                           ; simple_byte           31    16 (average)
  8709                           ; jumptable            263     9 (fixed)
  8710                           ;	Chosen strategy is direct_byte
  8711  1CD1  3EFF               	addlw	-1
  8712  1CD2  1C03               	skipc
  8713  1CD3  2CDD               	goto	i1l267
  8714  1CD4  0084               	movwf	4
  8715  1CD5  300A               	movlw	10
  8716  1CD6  0204               	subwf	4,w
  8717  1CD7  1803               	skipnc
  8718  1CD8  2CDD               	goto	i1l267
  8719  1CD9  3187               	movlp	high i1S13822
  8720  1CDA  3504               	lslf	4,w
  8721  1CDB  3E22               	addlw	low i1S13822
  8722  1CDC  0082               	movwf	2
  8723  1CDD                     i1l267:	
  8724                           
  8725                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
  8726  1CDD  1F7A               	btfss	_MotorFlags,6
  8727  1CDE  2D1E               	goto	i1l12934
  8728                           
  8729                           ;bldc.c: 1071: {
  8730                           ;bldc.c: 1073: if( MotorFlags.bits.B3)
  8731  1CDF  1DFA               	btfss	_MotorFlags,3
  8732  1CE0  2D20               	goto	i1l12936
  8733                           
  8734                           ;bldc.c: 1075: {
  8735                           ;bldc.c: 1077: bool_start_demand_mat = 1 ;
  8736  1CE1  0021               	movlb	1	; select bank1
  8737  1CE2  3041               	movlw	65
  8738  1CE3  01E5               	clrf	_bool_start_demand_mat^(0+128)
  8739  1CE4  0AE5               	incf	_bool_start_demand_mat^(0+128),f
  8740                           
  8741                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
  8742  1CE5  0023               	movlb	3	; select bank3
  8743  1CE6  00DC               	movwf	_ui8_fixed_start_speed_mat^(0+384)
  8744  1CE7  01DD               	clrf	(_ui8_fixed_start_speed_mat+1)^(0+384)
  8745                           
  8746                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
  8747  1CE8  0020               	movlb	0	; select bank0
  8748  1CE9  0850               	movf	_comm_time,w
  8749  1CEA  3903               	andlw	3
  8750  1CEB  1D03               	btfss	3,2
  8751  1CEC  2D20               	goto	i1l12936
  8752                           
  8753                           ;bldc.c: 1092: {
  8754                           ;bldc.c: 1094: if (MotorFlags.bits.B4)
  8755  1CED  1E7A               	btfss	_MotorFlags,4
  8756  1CEE  2CFB               	goto	i1l12922
  8757                           
  8758                           ;bldc.c: 1096: {
  8759                           ;bldc.c: 1098: if (ui16_Ubat_bldc.w)
  8760  1CEF  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  8761  1CF0  0458               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
  8762  1CF1  1903               	btfsc	3,2
  8763  1CF2  2D0F               	goto	i1l12926
  8764                           
  8765                           ;bldc.c: 1100: {
  8766                           ;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
  8767  1CF3  0858               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8768  1CF4  00F1               	movwf	i1___lwdiv@divisor+1
  8769  1CF5  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  8770  1CF6  00F0               	movwf	i1___lwdiv@divisor
  8771  1CF7  3080               	movlw	128
  8772  1CF8  00F2               	movwf	i1___lwdiv@dividend
  8773  1CF9  303E               	movlw	62
  8774  1CFA  2D06               	goto	L51
  8775  1CFB                     i1l12922:	
  8776                           
  8777                           ;bldc.c: 1111: else
  8778                           ;bldc.c: 1112: {
  8779                           ;bldc.c: 1114: if (ui16_Ubat_bldc.w)
  8780  1CFB  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  8781  1CFC  0458               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
  8782  1CFD  1903               	btfsc	3,2
  8783  1CFE  2D0F               	goto	i1l12926
  8784                           
  8785                           ;bldc.c: 1116: {
  8786                           ;bldc.c: 1119: ui32_tmp = ( 400 * 100 ) / ui16_Ubat_bldc.w ;
  8787  1CFF  0858               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8788  1D00  00F1               	movwf	i1___lwdiv@divisor+1
  8789  1D01  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  8790  1D02  00F0               	movwf	i1___lwdiv@divisor
  8791  1D03  3040               	movlw	64
  8792  1D04  00F2               	movwf	i1___lwdiv@dividend
  8793  1D05  309C               	movlw	156
  8794  1D06                     L51:	
  8795  1D06  00F3               	movwf	i1___lwdiv@dividend+1
  8796  1D07  27D9  319A         	fcall	i1___lwdiv
  8797  1D09  0870               	movf	?i1___lwdiv,w
  8798  1D0A  00AC               	movwf	interrrupt_bldc@ui32_tmp
  8799  1D0B  0871               	movf	?i1___lwdiv+1,w
  8800  1D0C  00AD               	movwf	interrrupt_bldc@ui32_tmp+1
  8801  1D0D  01AE               	clrf	interrrupt_bldc@ui32_tmp+2
  8802  1D0E  01AF               	clrf	interrrupt_bldc@ui32_tmp+3
  8803  1D0F                     i1l12926:	
  8804                           
  8805                           ;bldc.c: 1121: }
  8806                           ;bldc.c: 1124: }
  8807                           ;bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui32_tmp) )
  8808  1D0F  0021               	movlb	1	; select bank1
  8809  1D10  0864               	movf	_ui8_StartupPWM^(0+128),w
  8810  1D11  0020               	movlb	0	; select bank0
  8811  1D12  022C               	subwf	interrrupt_bldc@ui32_tmp,w
  8812  1D13  1803               	skipnc
  8813  1D14  2D18               	goto	i1l12930
  8814                           
  8815                           ;bldc.c: 1129: {
  8816                           ;bldc.c: 1131: ui8_StartupPWM--;
  8817  1D15  0021               	movlb	1	; select bank1
  8818  1D16  03E4               	decf	_ui8_StartupPWM^(0+128),f
  8819                           
  8820                           ;bldc.c: 1133: }
  8821  1D17  2D1A               	goto	i1l12932
  8822  1D18                     i1l12930:	
  8823                           
  8824                           ;bldc.c: 1136: else
  8825                           ;bldc.c: 1137: {
  8826                           ;bldc.c: 1139: ui8_StartupPWM++;
  8827  1D18  0021               	movlb	1	; select bank1
  8828  1D19  0AE4               	incf	_ui8_StartupPWM^(0+128),f
  8829  1D1A                     i1l12932:	
  8830                           
  8831                           ;bldc.c: 1141: }
  8832                           ;bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
  8833  1D1A  0864               	movf	_ui8_StartupPWM^(0+128),w
  8834  1D1B  0025               	movlb	5	; select bank5
  8835  1D1C  0091               	movwf	17	;volatile
  8836  1D1D  2D20               	goto	i1l12936
  8837  1D1E                     i1l12934:	
  8838                           
  8839                           ;bldc.c: 1155: else
  8840                           ;bldc.c: 1156: {
  8841                           ;bldc.c: 1159: CCPR1L = 0;
  8842  1D1E  0025               	movlb	5	; select bank5
  8843  1D1F  0191               	clrf	17	;volatile
  8844  1D20                     i1l12936:	
  8845                           
  8846                           ;bldc.c: 1161: }
  8847                           ;bldc.c: 1165: if( 0 == ui8_BlankingCount )
  8848  1D20  0021               	movlb	1	; select bank1
  8849  1D21  0862               	movf	_ui8_BlankingCount^(0+128),w
  8850  1D22  1D03               	btfss	3,2
  8851  1D23  2D39               	goto	i1l12952
  8852                           
  8853                           ;bldc.c: 1168: {
  8854                           ;bldc.c: 1177: if( ui8_CompFlag )
  8855  1D24  085D               	movf	_ui8_CompFlag^(0+128),w
  8856  1D25  1D03               	btfss	3,2
  8857                           
  8858                           ;bldc.c: 1187: {
  8859                           ;bldc.c: 1191: ui8_zero_cros_cnt++;
  8860  1D26  1AFA               	btfsc	_MotorFlags,5
  8861  1D27  2D29               	goto	i1l316
  8862                           
  8863                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
  8864  1D28  16FA               	bsf	_MotorFlags,5
  8865  1D29                     i1l316:	
  8866                           ;bldc.c: 1196: }
  8867                           ;bldc.c: 1199: }
  8868                           ;bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
  8869                           
  8870                           
  8871                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
  8872  1D29  1EFA               	btfss	_MotorFlags,5
  8873  1D2A  0008               	return
  8874                           
  8875                           ;bldc.c: 1353: {
  8876                           ;bldc.c: 1357: if( 0 == phase_delay_counter )
  8877  1D2B  0023               	movlb	3	; select bank3
  8878  1D2C  085A               	movf	_phase_delay_counter^(0+384),w
  8879  1D2D  045B               	iorwf	(_phase_delay_counter+1)^(0+384),w
  8880  1D2E  1D03               	btfss	3,2
  8881  1D2F  2D34               	goto	i1l12950
  8882                           
  8883                           ;bldc.c: 1360: {
  8884                           ;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
  8885  1D30  19FA               	btfsc	_MotorFlags,3
  8886  1D31  0008               	return
  8887                           
  8888                           ;bldc.c: 1364: {
  8889                           ;bldc.c: 1378: commutate( );
  8890  1D32  2577               	fcall	i1_commutate
  8891  1D33  0008               	return
  8892  1D34                     i1l12950:	
  8893                           
  8894                           ;bldc.c: 1389: else
  8895                           ;bldc.c: 1390: {
  8896                           ;bldc.c: 1392: phase_delay_counter--;
  8897  1D34  30FF               	movlw	-1
  8898  1D35  07DA               	addwf	_phase_delay_counter^(0+384),f
  8899  1D36  1C03               	skipc
  8900  1D37  03DB               	decf	(_phase_delay_counter+1)^(0+384),f
  8901                           
  8902                           ;bldc.c: 1394: }
  8903                           ;bldc.c: 1398: }
  8904                           ;bldc.c: 1401: }
  8905  1D38  0008               	return
  8906  1D39                     i1l12952:	
  8907                           
  8908                           ;bldc.c: 1408: bemf_filter = 62;
  8909  1D39  03E2               	decf	_ui8_BlankingCount^(0+128),f
  8910  1D3A  0008               	return
  8911  1D3B                     __end_of_interrrupt_bldc:	
  8912  1D3B                     __ptext55:	
  8913 ;; *************** function i1_ADC_Wait *****************
  8914 ;; Defined at:
  8915 ;;		line 128 in file "../adc.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;		None
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;		None
  8920 ;; Return value:  Size  Location     Type
  8921 ;;                  1    wreg      void 
  8922 ;; Registers used:
  8923 ;;		None
  8924 ;; Tracked objects:
  8925 ;;		On entry : 0/1
  8926 ;;		On exit  : 0/0
  8927 ;;		Unchanged: 0/0
  8928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8929 ;;      Params:         0       0       0       0       0       0       0       0
  8930 ;;      Locals:         0       0       0       0       0       0       0       0
  8931 ;;      Temps:          0       0       0       0       0       0       0       0
  8932 ;;      Totals:         0       0       0       0       0       0       0       0
  8933 ;;Total ram usage:        0 bytes
  8934 ;; Hardware stack levels used:    1
  8935 ;; This function calls:
  8936 ;;		Nothing
  8937 ;; This function is called by:
  8938 ;;		_interrrupt_bldc
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           
  8943                           ;psect for function i1_ADC_Wait
  8944  1D3B                     i1_ADC_Wait:	
  8945                           
  8946                           ;adc.c: 133: __nop();
  8947                           
  8948                           ;incstack = 0
  8949                           ; Regs used in i1_ADC_Wait: []
  8950  1D3B  0000               	nop
  8951                           
  8952                           ;adc.c: 134: __nop();
  8953  1D3C  0000               	nop
  8954                           
  8955                           ;adc.c: 135: __nop();
  8956  1D3D  0000               	nop
  8957                           
  8958                           ;adc.c: 136: __nop();
  8959  1D3E  0000               	nop
  8960                           
  8961                           ;adc.c: 137: __nop();
  8962  1D3F  0000               	nop
  8963                           
  8964                           ;adc.c: 138: __nop();
  8965  1D40  0000               	nop
  8966                           
  8967                           ;adc.c: 139: __nop();
  8968  1D41  0000               	nop
  8969                           
  8970                           ;adc.c: 140: __nop();
  8971  1D42  0000               	nop
  8972                           
  8973                           ;adc.c: 142: __nop();
  8974  1D43  0000               	nop
  8975                           
  8976                           ;adc.c: 143: __nop();
  8977  1D44  0000               	nop
  8978                           
  8979                           ;adc.c: 144: __nop();
  8980  1D45  0000               	nop
  8981                           
  8982                           ;adc.c: 145: __nop();
  8983  1D46  0000               	nop
  8984                           
  8985                           ;adc.c: 146: __nop();
  8986  1D47  0000               	nop
  8987                           
  8988                           ;adc.c: 147: __nop();
  8989  1D48  0000               	nop
  8990                           
  8991                           ;adc.c: 148: __nop();
  8992  1D49  0000               	nop
  8993                           
  8994                           ;adc.c: 149: __nop();
  8995  1D4A  0000               	nop
  8996                           
  8997                           ;adc.c: 151: __nop();
  8998  1D4B  0000               	nop
  8999                           
  9000                           ;adc.c: 152: __nop();
  9001  1D4C  0000               	nop
  9002                           
  9003                           ;adc.c: 153: __nop();
  9004  1D4D  0000               	nop
  9005                           
  9006                           ;adc.c: 154: __nop();
  9007  1D4E  0000               	nop
  9008                           
  9009                           ;adc.c: 155: __nop();
  9010  1D4F  0000               	nop
  9011                           
  9012                           ;adc.c: 156: __nop();
  9013  1D50  0000               	nop
  9014                           
  9015                           ;adc.c: 157: __nop();
  9016  1D51  0000               	nop
  9017                           
  9018                           ;adc.c: 158: __nop();
  9019  1D52  0000               	nop
  9020  1D53  0008               	return
  9021  1D54                     __end_ofi1_ADC_Wait:	
  9022  1D54                     __ptext56:	
  9023 ;; *************** function i1_ADC_Read *****************
  9024 ;; Defined at:
  9025 ;;		line 175 in file "../adc.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;		None
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  ADC_Read        1    2[COMMON] unsigned char 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  2    0[COMMON] unsigned int 
  9032 ;; Registers used:
  9033 ;;		wreg, status,2, status,0
  9034 ;; Tracked objects:
  9035 ;;		On entry : 1E/1
  9036 ;;		On exit  : 1F/1
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9039 ;;      Params:         2       0       0       0       0       0       0       0
  9040 ;;      Locals:         1       0       0       0       0       0       0       0
  9041 ;;      Temps:          0       0       0       0       0       0       0       0
  9042 ;;      Totals:         3       0       0       0       0       0       0       0
  9043 ;;Total ram usage:        3 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_interrrupt_bldc
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           
  9053                           ;psect for function i1_ADC_Read
  9054  1D54                     i1_ADC_Read:	
  9055                           
  9056                           ;adc.c: 179: unsigned char i;
  9057                           ;adc.c: 180: i = 0;
  9058                           
  9059                           ;incstack = 0
  9060                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
  9061  1D54  01F2               	clrf	i1ADC_Read@i
  9062  1D55                     i1l69:	
  9063                           ;adc.c: 182: while( GO_nDONE )
  9064                           
  9065  1D55  0021               	movlb	1	; select bank1
  9066  1D56  1C9D               	btfss	29,1	;volatile
  9067  1D57  2D5D               	goto	i1l12418
  9068  1D58  3041               	movlw	65
  9069                           
  9070                           ;adc.c: 184: {
  9071                           ;adc.c: 186: i++;
  9072  1D59  0AF2               	incf	i1ADC_Read@i,f
  9073                           
  9074                           ;adc.c: 189: if( i > 64 )
  9075  1D5A  0272               	subwf	i1ADC_Read@i,w
  9076  1D5B  1C03               	skipc
  9077  1D5C  2D55               	goto	i1l69
  9078  1D5D                     i1l12418:	
  9079                           
  9080                           ;adc.c: 195: }
  9081                           ;adc.c: 198: }
  9082                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  9083                           
  9084                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  9085                           
  9086                           ;adc.c: 204: return analog_value.w;
  9087  1D5D  278F               	fcall	PL114	;call to abstracted procedure
  9088  1D5E  00F1               	movwf	?i1_ADC_Read+1
  9089  1D5F  083C               	movf	_analog_value^(0+128),w	;volatile
  9090  1D60  00F0               	movwf	?i1_ADC_Read
  9091  1D61  0008               	return
  9092  1D62                     __end_ofi1_ADC_Read:	
  9093  1D62                     __ptext53:	
  9094 ;; *************** function i1___wmul *****************
  9095 ;; Defined at:
  9096 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  multiplier      2    0[COMMON] unsigned int 
  9099 ;;  multiplicand    2    2[COMMON] unsigned int 
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;  __wmul          2    4[COMMON] unsigned int 
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  2    0[COMMON] unsigned int 
  9104 ;; Registers used:
  9105 ;;		wreg, status,2, status,0
  9106 ;; Tracked objects:
  9107 ;;		On entry : 1E/1
  9108 ;;		On exit  : 1E/0
  9109 ;;		Unchanged: 1E/0
  9110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9111 ;;      Params:         4       0       0       0       0       0       0       0
  9112 ;;      Locals:         2       0       0       0       0       0       0       0
  9113 ;;      Temps:          0       0       0       0       0       0       0       0
  9114 ;;      Totals:         6       0       0       0       0       0       0       0
  9115 ;;Total ram usage:        6 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; This function calls:
  9118 ;;		Nothing
  9119 ;; This function is called by:
  9120 ;;		i1_commutate
  9121 ;;		_interrrupt_bldc
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function i1___wmul
  9127  1D62                     i1___wmul:	
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  9131  1D62  01F4               	clrf	i1___wmul@product
  9132  1D63  01F5               	clrf	i1___wmul@product+1
  9133  1D64                     i1l12372:	
  9134  1D64  1C70               	btfss	i1___wmul@multiplier,0
  9135  1D65  2D6A               	goto	i1l12376
  9136  1D66  0872               	movf	i1___wmul@multiplicand,w
  9137  1D67  07F4               	addwf	i1___wmul@product,f
  9138  1D68  0873               	movf	i1___wmul@multiplicand+1,w
  9139  1D69  3DF5               	addwfc	i1___wmul@product+1,f
  9140  1D6A                     i1l12376:	
  9141  1D6A  35F2               	lslf	i1___wmul@multiplicand,f
  9142  1D6B  0DF3               	rlf	i1___wmul@multiplicand+1,f
  9143  1D6C  36F1               	lsrf	i1___wmul@multiplier+1,f
  9144  1D6D  0CF0               	rrf	i1___wmul@multiplier,f
  9145  1D6E  0870               	movf	i1___wmul@multiplier,w
  9146  1D6F  0471               	iorwf	i1___wmul@multiplier+1,w
  9147  1D70  1D03               	btfss	3,2
  9148  1D71  2D64               	goto	i1l12372
  9149  1D72  0875               	movf	i1___wmul@product+1,w
  9150  1D73  00F1               	movwf	?i1___wmul+1
  9151  1D74  0874               	movf	i1___wmul@product,w
  9152  1D75  00F0               	movwf	?i1___wmul
  9153  1D76  0008               	return
  9154  1D77                     __end_ofi1___wmul:	
  9155  1D77                     __ptext52:	
  9156 ;; *************** function i1_commutate *****************
  9157 ;; Defined at:
  9158 ;;		line 1426 in file "../bldc.c"
  9159 ;; Parameters:    Size  Location     Type
  9160 ;;		None
  9161 ;; Auto vars:     Size  Location     Type
  9162 ;;		None
  9163 ;; Return value:  Size  Location     Type
  9164 ;;                  1    wreg      void 
  9165 ;; Registers used:
  9166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9167 ;; Tracked objects:
  9168 ;;		On entry : 1E/2
  9169 ;;		On exit  : 1F/0
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9172 ;;      Params:         0       0       0       0       0       0       0       0
  9173 ;;      Locals:         0       0       0       0       0       0       0       0
  9174 ;;      Temps:          0      12       0       0       0       0       0       0
  9175 ;;      Totals:         0      12       0       0       0       0       0       0
  9176 ;;Total ram usage:       12 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; Hardware stack levels required when called:    1
  9179 ;; This function calls:
  9180 ;;		i1___wmul
  9181 ;; This function is called by:
  9182 ;;		_interrrupt_bldc
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           
  9187                           ;psect for function i1_commutate
  9188  1D77                     i1_commutate:	
  9189                           
  9190                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  9191                           
  9192                           ;incstack = 0
  9193                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9194  1D77  3000               	movlw	0
  9195  1D78  0021               	movlb	1	; select bank1
  9196  1D79  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  9197  1D7A  300A               	movlw	10
  9198  1D7B  1903               	skipnz
  9199  1D7C  023A               	subwf	_ui16_step_cnt^(0+128),w
  9200  1D7D  1803               	skipnc
  9201  1D7E  2D82               	goto	i1l12426
  9202                           
  9203                           ;bldc.c: 1433: {
  9204                           ;bldc.c: 1435: ui16_step_cnt++;
  9205  1D7F  0ABA               	incf	_ui16_step_cnt^(0+128),f
  9206  1D80  1903               	skipnz
  9207  1D81  0ABB               	incf	(_ui16_step_cnt+1)^(0+128),f
  9208  1D82                     i1l12426:	
  9209                           
  9210                           ;bldc.c: 1437: }
  9211                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  9212                           
  9213                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  9214                           
  9215                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  9216  1D82  26AF  319A         	fcall	PL16	;call to abstracted procedure
  9217  1D84  00A0               	movwf	??i1_commutate
  9218  1D85  0023               	movlb	3	; select bank3
  9219  1D86  0825               	movf	((_B+1)^(0+384)+4),w
  9220  1D87  3D23               	addwfc	((_B+1)^(0+384)+2),w
  9221  1D88  0020               	movlb	0	; select bank0
  9222  1D89  00A1               	movwf	??i1_commutate+1
  9223  1D8A  0023               	movlb	3	; select bank3
  9224  1D8B  0826               	movf	(_B^(0+384)+6),w
  9225  1D8C  0020               	movlb	0	; select bank0
  9226  1D8D  0720               	addwf	??i1_commutate,w
  9227  1D8E  00A2               	movwf	??i1_commutate+2
  9228  1D8F  0023               	movlb	3	; select bank3
  9229  1D90  0827               	movf	((_B+1)^(0+384)+6),w
  9230  1D91  0020               	movlb	0	; select bank0
  9231  1D92  3D21               	addwfc	??i1_commutate+1,w
  9232  1D93  00A3               	movwf	??i1_commutate+3
  9233  1D94  0023               	movlb	3	; select bank3
  9234  1D95  0828               	movf	(_B^(0+384)+8),w
  9235  1D96  0020               	movlb	0	; select bank0
  9236  1D97  0722               	addwf	??i1_commutate+2,w
  9237  1D98  00A4               	movwf	??i1_commutate+4
  9238  1D99  0023               	movlb	3	; select bank3
  9239  1D9A  0829               	movf	((_B+1)^(0+384)+8),w
  9240  1D9B  0020               	movlb	0	; select bank0
  9241  1D9C  3D23               	addwfc	??i1_commutate+3,w
  9242  1D9D  00A5               	movwf	??i1_commutate+5
  9243  1D9E  0023               	movlb	3	; select bank3
  9244  1D9F  082A               	movf	(_B^(0+384)+10),w
  9245  1DA0  0020               	movlb	0	; select bank0
  9246  1DA1  0724               	addwf	??i1_commutate+4,w
  9247  1DA2  00A6               	movwf	??i1_commutate+6
  9248  1DA3  0023               	movlb	3	; select bank3
  9249  1DA4  082B               	movf	((_B+1)^(0+384)+10),w
  9250  1DA5  0020               	movlb	0	; select bank0
  9251  1DA6  3D25               	addwfc	??i1_commutate+5,w
  9252  1DA7  00A7               	movwf	??i1_commutate+7
  9253  1DA8  3F00               	moviw [0]fsr0
  9254  1DA9  0726               	addwf	??i1_commutate+6,w
  9255  1DAA  00A8               	movwf	??i1_commutate+8
  9256  1DAB  3F01               	moviw [1]fsr0
  9257  1DAC  3D27               	addwfc	??i1_commutate+7,w
  9258  1DAD  00A9               	movwf	??i1_commutate+9
  9259  1DAE  3F40               	moviw [0]fsr1
  9260  1DAF  0728               	addwf	??i1_commutate+8,w
  9261  1DB0  00AA               	movwf	??i1_commutate+10
  9262  1DB1  3F41               	moviw [1]fsr1
  9263  1DB2  3D29               	addwfc	??i1_commutate+9,w
  9264  1DB3  00AB               	movwf	??i1_commutate+11
  9265  1DB4  0023               	movlb	3	; select bank3
  9266  1DB5  0820               	movf	_B^(0+384),w
  9267  1DB6  0020               	movlb	0	; select bank0
  9268  1DB7  072A               	addwf	??i1_commutate+10,w
  9269  1DB8  277D  319A         	fcall	PL100	;call to abstracted procedure
  9270  1DBA  3D2B               	addwfc	??i1_commutate+11,w
  9271                           
  9272                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  9273                           
  9274                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  9275                           
  9276                           ;bldc.c: 1455: bemf_filter = 62;
  9277                           
  9278                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  9279  1DBB  2737  319A         	fcall	PL46	;call to abstracted procedure
  9280                           
  9281                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  9282  1DBD  1DFA               	btfss	_MotorFlags,3
  9283  1DBE  2E1F               	goto	i1l327
  9284                           
  9285                           ;bldc.c: 1463: {
  9286                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 100 )>>7;
  9287  1DBF  0022               	movlb	2	; select bank2
  9288  1DC0  0830               	movf	(_ui16_speed_rar+1)^(0+256),w
  9289  1DC1  0020               	movlb	0	; select bank0
  9290  1DC2  00A1               	movwf	??i1_commutate+1
  9291  1DC3  0022               	movlb	2	; select bank2
  9292  1DC4  082F               	movf	_ui16_speed_rar^(0+256),w
  9293  1DC5  0020               	movlb	0	; select bank0
  9294  1DC6  00A0               	movwf	??i1_commutate
  9295  1DC7  36A1               	lsrf	??i1_commutate+1,f
  9296  1DC8  0CA0               	rrf	??i1_commutate,f
  9297  1DC9  36A1               	lsrf	??i1_commutate+1,f
  9298  1DCA  0CA0               	rrf	??i1_commutate,f
  9299  1DCB  36A1               	lsrf	??i1_commutate+1,f
  9300  1DCC  0CA0               	rrf	??i1_commutate,f
  9301  1DCD  0820               	movf	??i1_commutate,w
  9302  1DCE  00F0               	movwf	i1___wmul@multiplier
  9303  1DCF  0821               	movf	??i1_commutate+1,w
  9304  1DD0  00F1               	movwf	i1___wmul@multiplier+1
  9305  1DD1  3064               	movlw	100
  9306  1DD2  00F2               	movwf	i1___wmul@multiplicand
  9307  1DD3  01F3               	clrf	i1___wmul@multiplicand+1
  9308  1DD4  2562  319A         	fcall	i1___wmul
  9309  1DD6  0871               	movf	?i1___wmul+1,w
  9310  1DD7  0021               	movlb	1	; select bank1
  9311  1DD8  00B9               	movwf	(_ui16_phase_advancement+1)^(0+128)
  9312  1DD9  0870               	movf	?i1___wmul,w
  9313  1DDA  00B8               	movwf	_ui16_phase_advancement^(0+128)
  9314  1DDB  3007               	movlw	7
  9315  1DDC                     u1067_25:	
  9316  1DDC  36B9               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
  9317  1DDD  0CB8               	rrf	_ui16_phase_advancement^(0+128),f
  9318  1DDE  0B89               	decfsz	9,f
  9319  1DDF  2DDC               	goto	u1067_25
  9320                           
  9321                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  9322  1DE0  0020               	movlb	0	; select bank0
  9323  1DE1  0851               	movf	_comm_time+1,w
  9324  1DE2  0021               	movlb	1	; select bank1
  9325  1DE3  0239               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  9326  1DE4  1D03               	skipz
  9327  1DE5  2DE8               	goto	u1068_25
  9328  1DE6  27A9  319A         	fcall	PL130	;call to abstracted procedure
  9329  1DE8                     u1068_25:	
  9330  1DE8  1803               	skipnc
  9331  1DE9  2DED               	goto	i1l12452
  9332                           
  9333                           ;bldc.c: 1474: {
  9334                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
  9335  1DEA  26D8  319A         	fcall	PL34	;call to abstracted procedure
  9336                           
  9337                           ;bldc.c: 1478: }
  9338  1DEC  2E01               	goto	i1l12476
  9339  1DED                     i1l12452:	
  9340                           
  9341                           ;bldc.c: 1481: else
  9342                           ;bldc.c: 1482: {
  9343                           ;bldc.c: 1484: phase_delay_counter = 0;
  9344  1DED  0023               	movlb	3	; select bank3
  9345  1DEE  01DA               	clrf	_phase_delay_counter^(0+384)
  9346  1DEF  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  9347  1DF0  2E01               	goto	i1l12476
  9348  1DF1                     i1l12454:	
  9349                           
  9350                           ;bldc.c: 1514: {
  9351                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
  9352  1DF1  30A6               	movlw	166
  9353  1DF2  2DFD               	goto	L57
  9354  1DF3                     i1l12456:	
  9355                           ;bldc.c: 1517: break;
  9356                           
  9357                           
  9358                           ;bldc.c: 1524: {
  9359                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
  9360  1DF3  2783  319A         	fcall	PL102	;call to abstracted procedure
  9361                           
  9362                           ;bldc.c: 1527: break;
  9363  1DF5  2E0F               	goto	i1l12478
  9364  1DF6                     i1l12458:	
  9365                           
  9366                           ;bldc.c: 1534: {
  9367                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
  9368  1DF6  307D               	movlw	125
  9369  1DF7  2DFD               	goto	L57
  9370  1DF8                     i1l12460:	
  9371                           ;bldc.c: 1537: break;
  9372                           
  9373                           
  9374                           ;bldc.c: 1544: {
  9375                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
  9376  1DF8  3053               	movlw	83
  9377  1DF9  2DFD               	goto	L57
  9378  1DFA                     i1l12462:	
  9379                           ;bldc.c: 1547: break;
  9380                           
  9381                           
  9382                           ;bldc.c: 1554: {
  9383                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2400 * 2 )
      +                           ) ;
  9384  1DFA  3029               	movlw	41
  9385  1DFB  2DFD               	goto	L57
  9386  1DFC                     i1l12464:	
  9387                           ;bldc.c: 1557: break;
  9388                           
  9389                           
  9390                           ;bldc.c: 1564: {
  9391                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           ) ;
  9392  1DFC  3021               	movlw	33
  9393  1DFD                     L57:	
  9394  1DFD  0022               	movlb	2	; select bank2
  9395  1DFE  00AD               	movwf	_ui16_comm_time_max^(0+256)
  9396  1DFF  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  9397                           
  9398                           ;bldc.c: 1567: break;
  9399  1E00  2E0F               	goto	i1l12478
  9400  1E01                     i1l12476:	
  9401                           
  9402                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9403                           ; Switch size 1, requested type "space"
  9404                           ; Number of cases is 1, Range of values is 0 to 0
  9405                           ; switch strategies available:
  9406                           ; Name         Instructions Cycles
  9407                           ; simple_byte            4     3 (average)
  9408                           ; direct_byte            8     6 (fixed)
  9409                           ; jumptable            260     6 (fixed)
  9410                           ;	Chosen strategy is simple_byte
  9411  1E01  0021               	movlb	1	; select bank1
  9412  1E02  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
  9413  1E03  3A00               	xorlw	0	; case 0
  9414  1E04  1903               	skipnz
  9415  1E05  2E07               	goto	i1l13824
  9416  1E06  2DFC               	goto	i1l12464
  9417  1E07                     i1l13824:	
  9418                           
  9419                           ; Switch size 1, requested type "space"
  9420                           ; Number of cases is 10, Range of values is 0 to 9
  9421                           ; switch strategies available:
  9422                           ; Name         Instructions Cycles
  9423                           ; direct_byte           26     6 (fixed)
  9424                           ; simple_byte           31    16 (average)
  9425                           ; jumptable            260     6 (fixed)
  9426                           ;	Chosen strategy is direct_byte
  9427  1E07  27AE  319A         	fcall	PL132	;call to abstracted procedure
  9428  1E09  1803               	skipnc
  9429  1E0A  2DFC               	goto	i1l12464
  9430  1E0B  3187               	movlp	high i1S13826
  9431  1E0C  3504               	lslf	4,w
  9432  1E0D  3E36               	addlw	low i1S13826
  9433  1E0E  0082               	movwf	2
  9434  1E0F                     i1l12478:	
  9435                           
  9436                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 *
      +                           2 ) ) )
  9437  1E0F  3000               	movlw	0
  9438  1E10  022E               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  9439  1E11  3021               	movlw	33
  9440  1E12  1903               	skipnz
  9441  1E13  022D               	subwf	_ui16_comm_time_max^(0+256),w
  9442  1E14  1803               	skipnc
  9443  1E15  2E19               	goto	i1l12482
  9444                           
  9445                           ;bldc.c: 1626: {
  9446                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  9447  1E16  3021               	movlw	33
  9448  1E17  00AD               	movwf	_ui16_comm_time_max^(0+256)
  9449  1E18  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  9450  1E19                     i1l12482:	
  9451                           
  9452                           ;bldc.c: 1630: }
  9453                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
  9454  1E19  1E7A               	btfss	_MotorFlags,4
  9455  1E1A  2E4E               	goto	i1l345
  9456                           
  9457                           ;bldc.c: 1636: {
  9458                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
  9459  1E1B  300A               	movlw	10
  9460  1E1C  0021               	movlb	1	; select bank1
  9461  1E1D  00E4               	movwf	_ui8_StartupPWM^(0+128)
  9462                           
  9463                           ;bldc.c: 1641: }
  9464                           ;bldc.c: 1644: }
  9465  1E1E  2E4E               	goto	i1l345
  9466  1E1F                     i1l327:	
  9467                           
  9468                           ;bldc.c: 1647: else
  9469                           ;bldc.c: 1648: {
  9470                           ;bldc.c: 1652: if( rising_bemf_flag)
  9471  1E1F  1C79               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9472  1E20  2E25               	goto	i1l12488
  9473                           
  9474                           ;bldc.c: 1654: {
  9475                           ;bldc.c: 1657: phase_delay_counter = 0;
  9476  1E21  0023               	movlb	3	; select bank3
  9477  1E22  01DA               	clrf	_phase_delay_counter^(0+384)
  9478  1E23  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  9479                           
  9480                           ;bldc.c: 1659: }
  9481  1E24  2E33               	goto	i1l12490
  9482  1E25                     i1l12488:	
  9483                           
  9484                           ;bldc.c: 1662: else
  9485                           ;bldc.c: 1663: {
  9486                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  9487  1E25  0020               	movlb	0	; select bank0
  9488  1E26  0851               	movf	_comm_time+1,w
  9489  1E27  00A1               	movwf	??i1_commutate+1
  9490  1E28  0850               	movf	_comm_time,w
  9491  1E29  00A0               	movwf	??i1_commutate
  9492  1E2A  36A1               	lsrf	??i1_commutate+1,f
  9493  1E2B  0CA0               	rrf	??i1_commutate,f
  9494  1E2C  0820               	movf	??i1_commutate,w
  9495  1E2D  0023               	movlb	3	; select bank3
  9496  1E2E  00DA               	movwf	_phase_delay_counter^(0+384)
  9497  1E2F  0020               	movlb	0	; select bank0
  9498  1E30  0821               	movf	??i1_commutate+1,w
  9499  1E31  0023               	movlb	3	; select bank3
  9500  1E32  00DB               	movwf	(_phase_delay_counter+1)^(0+384)
  9501  1E33                     i1l12490:	
  9502                           
  9503                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  9504                           
  9505                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  9506  1E33  2776  319A         	fcall	PL96	;call to abstracted procedure
  9507                           
  9508                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  9509  1E35  1F7A               	btfss	_MotorFlags,6
  9510  1E36  2E4C               	goto	i1l12514
  9511                           
  9512                           ;bldc.c: 1693: {
  9513                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  9514  1E37  27A4  319A         	fcall	PL128	;call to abstracted procedure
  9515  1E39  1903               	btfsc	3,2
  9516  1E3A  2E4E               	goto	i1l345
  9517                           
  9518                           ;bldc.c: 1706: else
  9519                           ;bldc.c: 1707: {
  9520                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  9521  1E3B  279A  319A         	fcall	PL124	;call to abstracted procedure
  9522  1E3D  1803               	skipnc
  9523  1E3E  2E46               	goto	i1l12508
  9524                           
  9525                           ;bldc.c: 1712: {
  9526                           ;bldc.c: 1714: CCPR1L--;
  9527                           
  9528                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  9529  1E3F  2789  319A         	fcall	PL108	;call to abstracted procedure
  9530  1E41  1803               	skipnc
  9531  1E42  2E4E               	goto	i1l345
  9532                           
  9533                           ;bldc.c: 1718: {
  9534                           ;bldc.c: 1720: CCPR1L--;
  9535  1E43  0025               	movlb	5	; select bank5
  9536  1E44  0391               	decf	17,f	;volatile
  9537  1E45  2E4E               	goto	i1l345
  9538  1E46                     i1l12508:	
  9539                           
  9540                           ;bldc.c: 1728: else
  9541                           ;bldc.c: 1729: {
  9542                           ;bldc.c: 1731: CCPR1L++;
  9543                           
  9544                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  9545  1E46  2769  319A         	fcall	PL88	;call to abstracted procedure
  9546  1E48  1803               	skipnc
  9547  1E49  2E4E               	goto	i1l345
  9548                           
  9549                           ;bldc.c: 1735: {
  9550                           ;bldc.c: 1737: CCPR1L++;
  9551  1E4A  0A91               	incf	17,f	;volatile
  9552  1E4B  2E4E               	goto	i1l345
  9553  1E4C                     i1l12514:	
  9554                           
  9555                           ;bldc.c: 1768: else
  9556                           ;bldc.c: 1769: {
  9557                           ;bldc.c: 1771: CCPR1L = 0;
  9558  1E4C  0025               	movlb	5	; select bank5
  9559  1E4D  0191               	clrf	17	;volatile
  9560  1E4E                     i1l345:	
  9561                           
  9562                           ;bldc.c: 1773: }
  9563                           ;bldc.c: 1777: }
  9564                           ;bldc.c: 1780: comm_time = 0;
  9565                           
  9566                           ;bldc.c: 1784: if( comm_state == 0xff )
  9567  1E4E  2795  319A         	fcall	PL120	;call to abstracted procedure
  9568  1E50  0F63               	incfsz	_comm_state^(0+128),w
  9569  1E51  2E9A               	goto	i1l12664
  9570                           
  9571                           ;bldc.c: 1786: {
  9572                           ;bldc.c: 1788: comm_state = 6;
  9573  1E52  3006               	movlw	6
  9574  1E53  00E3               	movwf	_comm_state^(0+128)
  9575  1E54  2E9A               	goto	i1l12664
  9576  1E55                     i1l12520:	
  9577                           
  9578                           ;bldc.c: 1800: {
  9579                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
  9580  1E55  3001               	movlw	1
  9581  1E56  0025               	movlb	5	; select bank5
  9582  1E57  0096               	movwf	22	;volatile
  9583                           
  9584                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  9585  1E58  1F7A               	btfss	_MotorFlags,6
  9586  1E59  2E5C               	goto	i1l12526
  9587                           
  9588                           ;bldc.c: 1811: {
  9589                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9590  1E5A  275D  319A         	fcall	PL72	;call to abstracted procedure
  9591  1E5C                     i1l12526:	
  9592                           
  9593                           ;bldc.c: 1815: }
  9594                           ;bldc.c: 1819: LATB2 = 0;
  9595                           
  9596                           ;bldc.c: 1820: LATB1 = 0;
  9597                           
  9598                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9599                           
  9600                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9601                           
  9602                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9603                           
  9604                           ;bldc.c: 1824: CM1CON1 = 0x02;
  9605                           
  9606                           ;bldc.c: 1837: CM1CON0 = 0x84;
  9607  1E5C  26E9  319A         	fcall	PL36	;call to abstracted procedure
  9608  1E5E  2E88               	goto	L63
  9609  1E5F                     i1l12544:	
  9610                           ;bldc.c: 1845: break;
  9611                           
  9612                           ;bldc.c: 1839: comm_state = 6;
  9613                           
  9614                           ;bldc.c: 1838: rising_bemf_flag = 1;
  9615                           
  9616                           
  9617                           ;bldc.c: 1855: {
  9618                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
  9619  1E5F  3001               	movlw	1
  9620  1E60  0025               	movlb	5	; select bank5
  9621  1E61  0096               	movwf	22	;volatile
  9622                           
  9623                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  9624  1E62  1F7A               	btfss	_MotorFlags,6
  9625  1E63  2E66               	goto	i1l12550
  9626                           
  9627                           ;bldc.c: 1865: {
  9628                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9629  1E64  2751  319A         	fcall	PL64	;call to abstracted procedure
  9630  1E66                     i1l12550:	
  9631                           
  9632                           ;bldc.c: 1869: }
  9633                           ;bldc.c: 1873: LATB2 = 1;
  9634                           
  9635                           ;bldc.c: 1874: LATB1 = 0;
  9636                           
  9637                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9638                           
  9639                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9640                           
  9641                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9642                           
  9643                           ;bldc.c: 1878: CM1CON1 = 0x01;
  9644                           
  9645                           ;bldc.c: 1892: CM1CON0 = 0x94;
  9646  1E66  2727  319A         	fcall	PL44	;call to abstracted procedure
  9647  1E68                     i1l12564:	
  9648                           
  9649                           ;bldc.c: 1893: rising_bemf_flag = 0;
  9650                           
  9651                           ;bldc.c: 1894: comm_state = 1;
  9652  1E68  279F  319A         	fcall	PL126	;call to abstracted procedure
  9653                           
  9654                           ;bldc.c: 1902: break;
  9655  1E6A  2EAE               	goto	i1l12666
  9656  1E6B                     i1l12568:	
  9657                           
  9658                           ;bldc.c: 1912: {
  9659                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
  9660  1E6B  3002               	movlw	2
  9661  1E6C  0025               	movlb	5	; select bank5
  9662  1E6D  0096               	movwf	22	;volatile
  9663                           
  9664                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  9665  1E6E  1F7A               	btfss	_MotorFlags,6
  9666  1E6F  2E72               	goto	i1l12574
  9667                           
  9668                           ;bldc.c: 1922: {
  9669                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9670  1E70  2757  319A         	fcall	PL68	;call to abstracted procedure
  9671  1E72                     i1l12574:	
  9672                           
  9673                           ;bldc.c: 1926: }
  9674                           ;bldc.c: 1929: LATC2 = 0;
  9675                           
  9676                           ;bldc.c: 1931: LATB1 = 0;
  9677                           
  9678                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9679                           
  9680                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9681                           
  9682                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9683                           
  9684                           ;bldc.c: 1935: CM1CON1 = 0x00;
  9685                           
  9686                           ;bldc.c: 1949: CM1CON0 = 0x84;
  9687  1E72  2709  319A         	fcall	PL40	;call to abstracted procedure
  9688  1E74  2E88               	goto	L63
  9689  1E75                     i1l12588:	
  9690                           ;bldc.c: 1956: break;
  9691                           
  9692                           ;bldc.c: 1951: comm_state = 2;
  9693                           
  9694                           ;bldc.c: 1950: rising_bemf_flag = 1;
  9695                           
  9696                           
  9697                           ;bldc.c: 1966: {
  9698                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
  9699  1E75  3002               	movlw	2
  9700  1E76  0025               	movlb	5	; select bank5
  9701  1E77  0096               	movwf	22	;volatile
  9702                           
  9703                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  9704  1E78  1F7A               	btfss	_MotorFlags,6
  9705  1E79  2E7C               	goto	i1l12594
  9706                           
  9707                           ;bldc.c: 1977: {
  9708                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9709  1E7A  275D  319A         	fcall	PL72	;call to abstracted procedure
  9710  1E7C                     i1l12594:	
  9711                           
  9712                           ;bldc.c: 1981: }
  9713                           ;bldc.c: 1984: LATC2 = 0;
  9714                           
  9715                           ;bldc.c: 1986: LATB1 = 1;
  9716                           
  9717                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9718                           
  9719                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9720                           
  9721                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9722                           
  9723                           ;bldc.c: 1990: CM1CON1 = 0x02;
  9724                           
  9725                           ;bldc.c: 2004: CM1CON0 = 0x94;
  9726  1E7C  26C8  319A         	fcall	PL32	;call to abstracted procedure
  9727  1E7E  2E93               	goto	L64
  9728  1E7F                     i1l12612:	
  9729                           ;bldc.c: 2011: break;
  9730                           
  9731                           ;bldc.c: 2006: comm_state = 3;
  9732                           
  9733                           ;bldc.c: 2005: rising_bemf_flag = 0;
  9734                           
  9735                           
  9736                           ;bldc.c: 2020: {
  9737                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
  9738  1E7F  3004               	movlw	4
  9739  1E80  0025               	movlb	5	; select bank5
  9740  1E81  0096               	movwf	22	;volatile
  9741                           
  9742                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  9743  1E82  1F7A               	btfss	_MotorFlags,6
  9744  1E83  2E86               	goto	i1l12618
  9745                           
  9746                           ;bldc.c: 2031: {
  9747                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9748  1E84  2751  319A         	fcall	PL64	;call to abstracted procedure
  9749  1E86                     i1l12618:	
  9750                           
  9751                           ;bldc.c: 2035: }
  9752                           ;bldc.c: 2038: LATC2 = 0;
  9753                           
  9754                           ;bldc.c: 2039: LATB2 = 0;
  9755                           
  9756                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9757                           
  9758                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9759                           
  9760                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9761                           
  9762                           ;bldc.c: 2044: CM1CON1 = 0x01;
  9763                           
  9764                           ;bldc.c: 2059: CM1CON0 = 0x84;
  9765  1E86  26F9  319A         	fcall	PL38	;call to abstracted procedure
  9766  1E88                     L63:	
  9767                           
  9768                           ;bldc.c: 2060: rising_bemf_flag = 1;
  9769  1E88  1479               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9770                           
  9771                           ;bldc.c: 2061: comm_state = 4;
  9772  1E89  2E94               	goto	L61
  9773  1E8A                     i1l12636:	
  9774                           ;bldc.c: 2066: break;
  9775                           
  9776                           
  9777                           ;bldc.c: 2076: {
  9778                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
  9779  1E8A  3004               	movlw	4
  9780  1E8B  0025               	movlb	5	; select bank5
  9781  1E8C  0096               	movwf	22	;volatile
  9782                           
  9783                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  9784  1E8D  1F7A               	btfss	_MotorFlags,6
  9785  1E8E  2E91               	goto	i1l12642
  9786                           
  9787                           ;bldc.c: 2086: {
  9788                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9789  1E8F  2757  319A         	fcall	PL68	;call to abstracted procedure
  9790  1E91                     i1l12642:	
  9791                           
  9792                           ;bldc.c: 2090: }
  9793                           ;bldc.c: 2093: LATC2 = 1;
  9794                           
  9795                           ;bldc.c: 2094: LATB2 = 0;
  9796                           
  9797                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9798                           
  9799                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9800                           
  9801                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9802                           
  9803                           ;bldc.c: 2099: CM1CON1 = 0x00;
  9804                           
  9805                           ;bldc.c: 2113: CM1CON0 = 0x94;
  9806  1E91  2718  319A         	fcall	PL42	;call to abstracted procedure
  9807  1E93                     L64:	
  9808                           
  9809                           ;bldc.c: 2114: rising_bemf_flag = 0;
  9810  1E93  1079               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9811  1E94                     L61:	
  9812                           
  9813                           ;bldc.c: 2115: comm_state = 5;
  9814  1E94  0021               	movlb	1	; select bank1
  9815  1E95  00E3               	movwf	_comm_state^(0+128)
  9816                           
  9817                           ;bldc.c: 2120: break;
  9818  1E96  2EAE               	goto	i1l12666
  9819  1E97                     i1l12656:	
  9820                           
  9821                           ;bldc.c: 2129: {
  9822                           ;bldc.c: 2131: PSTR1CON = 0x00;
  9823                           
  9824                           ;bldc.c: 2132: CM1CON0 = 0x00;
  9825  1E97  27B3  319A         	fcall	PL134	;call to abstracted procedure
  9826  1E99  2E68               	goto	i1l12564
  9827  1E9A                     i1l12664:	
  9828  1E9A  0863               	movf	_comm_state^(0+128),w
  9829                           
  9830                           ; Switch size 1, requested type "space"
  9831                           ; Number of cases is 6, Range of values is 1 to 6
  9832                           ; switch strategies available:
  9833                           ; Name         Instructions Cycles
  9834                           ; simple_byte           19    10 (average)
  9835                           ; direct_byte           21     9 (fixed)
  9836                           ; jumptable            263     9 (fixed)
  9837                           ;	Chosen strategy is simple_byte
  9838  1E9B  3A01               	xorlw	1	; case 1
  9839  1E9C  1903               	skipnz
  9840  1E9D  2E55               	goto	i1l12520
  9841  1E9E  3A03               	xorlw	3	; case 2
  9842  1E9F  1903               	skipnz
  9843  1EA0  2E5F               	goto	i1l12544
  9844  1EA1  3A01               	xorlw	1	; case 3
  9845  1EA2  1903               	skipnz
  9846  1EA3  2E6B               	goto	i1l12568
  9847  1EA4  3A07               	xorlw	7	; case 4
  9848  1EA5  1903               	skipnz
  9849  1EA6  2E75               	goto	i1l12588
  9850  1EA7  3A01               	xorlw	1	; case 5
  9851  1EA8  1903               	skipnz
  9852  1EA9  2E7F               	goto	i1l12612
  9853  1EAA  3A03               	xorlw	3	; case 6
  9854  1EAB  1903               	skipnz
  9855  1EAC  2E8A               	goto	i1l12636
  9856  1EAD  2E97               	goto	i1l12656
  9857  1EAE                     i1l12666:	
  9858                           
  9859                           ;bldc.c: 2146: {
  9860                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  9861                           
  9862                           ;bldc.c: 2158: }
  9863                           ;bldc.c: 2161: comm_time = 0;
  9864                           
  9865                           ;bldc.c: 2150: }
  9866  1EAE  2F70               	ljmp	PL90	;call to abstracted procedure
  9867  1EAF                     __end_ofi1_commutate:	
  9868  1EAF                     PL16:	
  9869  1EAF  355C               	lslf	_Bcnt^(0+128),w
  9870  1EB0  3EA0               	addlw	(low (_B| (0+256)))& (0+255)
  9871  1EB1  0086               	movwf	6
  9872  1EB2  3001               	movlw	1	; select bank3/4
  9873  1EB3  0087               	movwf	7
  9874  1EB4  0020               	movlb	0	; select bank0
  9875  1EB5  0850               	movf	_comm_time,w
  9876  1EB6  3FC0               	movwi [0]fsr1
  9877  1EB7  0851               	movf	_comm_time+1,w
  9878  1EB8  3FC1               	movwi [1]fsr1
  9879  1EB9  0021               	movlb	1	; select bank1
  9880  1EBA  3007               	movlw	7
  9881  1EBB  0ADC               	incf	_Bcnt^(0+128),f
  9882  1EBC  05DC               	andwf	_Bcnt^(0+128),f
  9883  1EBD  30AE               	movlw	((low (_B| (0+256)))& (0+255)+14)
  9884  1EBE  0086               	movwf	6
  9885  1EBF  30AC               	movlw	((low (_B| (0+256)))& (0+255)+12)
  9886  1EC0  0084               	movwf	4
  9887  1EC1  3001               	movlw	1	; select bank3/4
  9888  1EC2  0085               	movwf	5
  9889  1EC3  0023               	movlb	3	; select bank3
  9890  1EC4  0824               	movf	(_B^(0+384)+4),w
  9891  1EC5  0722               	addwf	(_B^(0+384)+2),w
  9892  1EC6  0020               	movlb	0	; select bank0
  9893  1EC7  0008               	return
  9894  1EC8                     __end_ofPL16:	
  9895  1EC8                     PL32:	
  9896  1EC8  0022               	movlb	2	; select bank2
  9897  1EC9  110E               	bcf	14,2	;volatile
  9898  1ECA  148D               	bsf	13,1	;volatile
  9899  1ECB  3035               	movlw	53
  9900  1ECC  0021               	movlb	1	; select bank1
  9901  1ECD  00E1               	movwf	_ui8_IPhase_sel^(0+128)
  9902  1ECE  3005               	movlw	5
  9903  1ECF  00E0               	movwf	_ui8_UPhase_sel^(0+128)
  9904  1ED0  3025               	movlw	37
  9905  1ED1  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
  9906  1ED2  3002               	movlw	2
  9907  1ED3  0022               	movlb	2	; select bank2
  9908  1ED4  0092               	movwf	18	;volatile
  9909  1ED5  3094               	movlw	148
  9910  1ED6  0091               	movwf	17	;volatile
  9911  1ED7  3403               	retlw	3
  9912  1ED8                     __end_ofPL32:	
  9913  1ED8                     PL34:	
  9914  1ED8  0020               	movlb	0	; select bank0
  9915  1ED9  0851               	movf	_comm_time+1,w
  9916  1EDA  0023               	movlb	3	; select bank3
  9917  1EDB  00DB               	movwf	(_phase_delay_counter+1)^(0+384)
  9918  1EDC  0020               	movlb	0	; select bank0
  9919  1EDD  0850               	movf	_comm_time,w
  9920  1EDE  0023               	movlb	3	; select bank3
  9921  1EDF  00DA               	movwf	_phase_delay_counter^(0+384)
  9922  1EE0  0021               	movlb	1	; select bank1
  9923  1EE1  0838               	movf	_ui16_phase_advancement^(0+128),w
  9924  1EE2  0023               	movlb	3	; select bank3
  9925  1EE3  02DA               	subwf	_phase_delay_counter^(0+384),f
  9926  1EE4  0021               	movlb	1	; select bank1
  9927  1EE5  0839               	movf	(_ui16_phase_advancement+1)^(0+128),w
  9928  1EE6  0023               	movlb	3	; select bank3
  9929  1EE7  3BDB               	subwfb	(_phase_delay_counter+1)^(0+384),f
  9930  1EE8  0008               	return
  9931  1EE9                     __end_ofPL34:	
  9932  1EE9                     PL36:	
  9933  1EE9  0022               	movlb	2	; select bank2
  9934  1EEA  110D               	bcf	13,2	;volatile
  9935  1EEB  108D               	bcf	13,1	;volatile
  9936  1EEC  3009               	movlw	9
  9937  1EED  0021               	movlb	1	; select bank1
  9938  1EEE  00E1               	movwf	_ui8_IPhase_sel^(0+128)
  9939  1EEF  3025               	movlw	37
  9940  1EF0  01E0               	clrf	_ui8_UPhase_sel^(0+128)
  9941  1EF1  0AE0               	incf	_ui8_UPhase_sel^(0+128),f
  9942  1EF2  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
  9943  1EF3  3002               	movlw	2
  9944  1EF4  0022               	movlb	2	; select bank2
  9945  1EF5  0092               	movwf	18	;volatile
  9946  1EF6  3084               	movlw	132
  9947  1EF7  0091               	movwf	17	;volatile
  9948  1EF8  3406               	retlw	6
  9949  1EF9                     __end_ofPL36:	
  9950  1EF9                     PL38:	
  9951  1EF9  0022               	movlb	2	; select bank2
  9952  1EFA  110E               	bcf	14,2	;volatile
  9953  1EFB  110D               	bcf	13,2	;volatile
  9954  1EFC  3011               	movlw	17
  9955  1EFD  0021               	movlb	1	; select bank1
  9956  1EFE  00E1               	movwf	_ui8_IPhase_sel^(0+128)
  9957  1EFF  3025               	movlw	37
  9958  1F00  00E0               	movwf	_ui8_UPhase_sel^(0+128)
  9959  1F01  3005               	movlw	5
  9960  1F02  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
  9961  1F03  3001               	movlw	1
  9962  1F04  0022               	movlb	2	; select bank2
  9963  1F05  0092               	movwf	18	;volatile
  9964  1F06  3084               	movlw	132
  9965  1F07  0091               	movwf	17	;volatile
  9966  1F08  3404               	retlw	4
  9967  1F09                     __end_ofPL38:	
  9968  1F09                     PL40:	
  9969  1F09  0022               	movlb	2	; select bank2
  9970  1F0A  110E               	bcf	14,2	;volatile
  9971  1F0B  108D               	bcf	13,1	;volatile
  9972  1F0C  3035               	movlw	53
  9973  1F0D  0021               	movlb	1	; select bank1
  9974  1F0E  00E1               	movwf	_ui8_IPhase_sel^(0+128)
  9975  1F0F  3005               	movlw	5
  9976  1F10  00E0               	movwf	_ui8_UPhase_sel^(0+128)
  9977  1F11  01DF               	clrf	_ui8_Ubemf_sel^(0+128)
  9978  1F12  0ADF               	incf	_ui8_Ubemf_sel^(0+128),f
  9979  1F13  0022               	movlb	2	; select bank2
  9980  1F14  0192               	clrf	18	;volatile
  9981  1F15  3084               	movlw	132
  9982  1F16  0091               	movwf	17	;volatile
  9983  1F17  3402               	retlw	2
  9984  1F18                     __end_ofPL40:	
  9985  1F18                     PL42:	
  9986  1F18  0022               	movlb	2	; select bank2
  9987  1F19  150E               	bsf	14,2	;volatile
  9988  1F1A  110D               	bcf	13,2	;volatile
  9989  1F1B  3011               	movlw	17
  9990  1F1C  0021               	movlb	1	; select bank1
  9991  1F1D  00E1               	movwf	_ui8_IPhase_sel^(0+128)
  9992  1F1E  3025               	movlw	37
  9993  1F1F  00E0               	movwf	_ui8_UPhase_sel^(0+128)
  9994  1F20  01DF               	clrf	_ui8_Ubemf_sel^(0+128)
  9995  1F21  0ADF               	incf	_ui8_Ubemf_sel^(0+128),f
  9996  1F22  0022               	movlb	2	; select bank2
  9997  1F23  0192               	clrf	18	;volatile
  9998  1F24  3094               	movlw	148
  9999  1F25  0091               	movwf	17	;volatile
 10000  1F26  3405               	retlw	5
 10001  1F27                     __end_ofPL42:	
 10002  1F27                     PL44:	
 10003  1F27  0022               	movlb	2	; select bank2
 10004  1F28  150D               	bsf	13,2	;volatile
 10005  1F29  108D               	bcf	13,1	;volatile
 10006  1F2A  3009               	movlw	9
 10007  1F2B  0021               	movlb	1	; select bank1
 10008  1F2C  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 10009  1F2D  3005               	movlw	5
 10010  1F2E  01E0               	clrf	_ui8_UPhase_sel^(0+128)
 10011  1F2F  0AE0               	incf	_ui8_UPhase_sel^(0+128),f
 10012  1F30  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 10013  1F31  3001               	movlw	1
 10014  1F32  0022               	movlb	2	; select bank2
 10015  1F33  0092               	movwf	18	;volatile
 10016  1F34  3094               	movlw	148
 10017  1F35  0091               	movwf	17	;volatile
 10018  1F36  0008               	return
 10019  1F37                     __end_ofPL44:	
 10020  1F37                     PL46:	
 10021  1F37  0021               	movlb	1	; select bank1
 10022  1F38  00B5               	movwf	(_ui16_speed_fil+1)^(0+128)
 10023  1F39  0020               	movlb	0	; select bank0
 10024  1F3A  0851               	movf	_comm_time+1,w
 10025  1F3B  0022               	movlb	2	; select bank2
 10026  1F3C  00B0               	movwf	(_ui16_speed_rar+1)^(0+256)
 10027  1F3D  0020               	movlb	0	; select bank0
 10028  1F3E  0850               	movf	_comm_time,w
 10029  1F3F  0022               	movlb	2	; select bank2
 10030  1F40  00AF               	movwf	_ui16_speed_rar^(0+256)
 10031  1F41  12FA               	bcf	_MotorFlags,5
 10032  1F42  0021               	movlb	1	; select bank1
 10033  1F43  01DE               	clrf	_ui8_sampleState^(0+128)
 10034  1F44  0ADE               	incf	_ui8_sampleState^(0+128),f
 10035  1F45  17FA               	bsf	_MotorFlags,7
 10036  1F46  0008               	return
 10037  1F47                     __end_ofPL46:	
 10038  1F47                     PL48:	
 10039  1F47  00F7               	movwf	??_interrrupt_bldc
 10040  1F48  01F8               	clrf	??_interrrupt_bldc+1
 10041  1F49  0020               	movlb	0	; select bank0
 10042  1F4A  084F               	movf	_ui16_IPhase_bldc+1,w	;volatile
 10043  1F4B  0278               	subwf	??_interrrupt_bldc+1,w
 10044  1F4C  1D03               	skipz
 10045  1F4D  0008               	return
 10046  1F4E  084E               	movf	_ui16_IPhase_bldc,w	;volatile
 10047  1F4F  0277               	subwf	??_interrrupt_bldc,w
 10048  1F50  0008               	return
 10049  1F51                     __end_ofPL48:	
 10050  1F51                     PL64:	
 10051  1F51  0022               	movlb	2	; select bank2
 10052  1F52  080E               	movf	14,w	;volatile
 10053  1F53  39E5               	andlw	229
 10054  1F54  3812               	iorlw	18
 10055  1F55  008E               	movwf	14	;volatile
 10056  1F56  0008               	return
 10057  1F57                     __end_ofPL64:	
 10058  1F57                     PL68:	
 10059  1F57  0022               	movlb	2	; select bank2
 10060  1F58  080E               	movf	14,w	;volatile
 10061  1F59  39E5               	andlw	229
 10062  1F5A  3818               	iorlw	24
 10063  1F5B  008E               	movwf	14	;volatile
 10064  1F5C  0008               	return
 10065  1F5D                     __end_ofPL68:	
 10066  1F5D                     PL72:	
 10067  1F5D  0022               	movlb	2	; select bank2
 10068  1F5E  080E               	movf	14,w	;volatile
 10069  1F5F  39E5               	andlw	229
 10070  1F60  380A               	iorlw	10
 10071  1F61  008E               	movwf	14	;volatile
 10072  1F62  0008               	return
 10073  1F63                     __end_ofPL72:	
 10074  1F63                     PL80:	
 10075  1F63  084F               	movf	_ui16_IPhase_bldc+1,w	;volatile
 10076  1F64  00F1               	movwf	i1___wmul@multiplier+1
 10077  1F65  084E               	movf	_ui16_IPhase_bldc,w	;volatile
 10078  1F66  00F0               	movwf	i1___wmul@multiplier
 10079  1F67  0022               	movlb	2	; select bank2
 10080  1F68  0008               	return
 10081  1F69                     __end_ofPL80:	
 10082  1F69                     PL88:	
 10083  1F69  0025               	movlb	5	; select bank5
 10084  1F6A  0A91               	incf	17,f	;volatile
 10085  1F6B  0020               	movlb	0	; select bank0
 10086  1F6C  0856               	movf	_ui8_duty_cycle_BLDC,w
 10087  1F6D  0025               	movlb	5	; select bank5
 10088  1F6E  0211               	subwf	17,w	;volatile
 10089  1F6F  0008               	return
 10090  1F70                     __end_ofPL88:	
 10091  1F70                     PL90:	
 10092  1F70  3028               	movlw	40
 10093  1F71  00E2               	movwf	_ui8_BlankingCount^(0+128)
 10094  1F72  0020               	movlb	0	; select bank0
 10095  1F73  01D0               	clrf	_comm_time
 10096  1F74  01D1               	clrf	_comm_time+1
 10097  1F75  0008               	return
 10098  1F76                     __end_ofPL90:	
 10099  1F76                     PL96:	
 10100  1F76  3021               	movlw	33
 10101  1F77  01DA               	clrf	_phase_delay_counter^(0+384)
 10102  1F78  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
 10103  1F79  0022               	movlb	2	; select bank2
 10104  1F7A  00AD               	movwf	_ui16_comm_time_max^(0+256)
 10105  1F7B  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
 10106  1F7C  0008               	return
 10107  1F7D                     __end_ofPL96:	
 10108  1F7D                     PL100:	
 10109  1F7D  0021               	movlb	1	; select bank1
 10110  1F7E  00B4               	movwf	_ui16_speed_fil^(0+128)
 10111  1F7F  0023               	movlb	3	; select bank3
 10112  1F80  0821               	movf	(_B+1)^(0+384),w
 10113  1F81  0020               	movlb	0	; select bank0
 10114  1F82  0008               	return
 10115  1F83                     __end_ofPL100:	
 10116  1F83                     PL102:	
 10117  1F83  30F4               	movlw	244
 10118  1F84  0022               	movlb	2	; select bank2
 10119  1F85  00AD               	movwf	_ui16_comm_time_max^(0+256)
 10120  1F86  3001               	movlw	1
 10121  1F87  00AE               	movwf	(_ui16_comm_time_max^(0+256)+1)
 10122  1F88  0008               	return
 10123  1F89                     __end_ofPL102:	
 10124  1F89                     PL108:	
 10125  1F89  0025               	movlb	5	; select bank5
 10126  1F8A  0391               	decf	17,f	;volatile
 10127  1F8B  0811               	movf	17,w	;volatile
 10128  1F8C  0020               	movlb	0	; select bank0
 10129  1F8D  0256               	subwf	_ui8_duty_cycle_BLDC,w
 10130  1F8E  0008               	return
 10131  1F8F                     __end_ofPL108:	
 10132  1F8F                     PL114:	
 10133  1F8F  081C               	movf	28,w	;volatile
 10134  1F90  00BD               	movwf	(_analog_value^(0+128)+1)	;volatile
 10135  1F91  081B               	movf	27,w	;volatile
 10136  1F92  00BC               	movwf	_analog_value^(0+128)	;volatile
 10137  1F93  083D               	movf	(_analog_value+1)^(0+128),w	;volatile
 10138  1F94  0008               	return
 10139  1F95                     __end_ofPL114:	
 10140  1F95                     PL120:	
 10141  1F95  0020               	movlb	0	; select bank0
 10142  1F96  01D0               	clrf	_comm_time
 10143  1F97  01D1               	clrf	_comm_time+1
 10144  1F98  0021               	movlb	1	; select bank1
 10145  1F99  0008               	return
 10146  1F9A                     __end_ofPL120:	
 10147  1F9A                     PL124:	
 10148  1F9A  0025               	movlb	5	; select bank5
 10149  1F9B  0811               	movf	17,w	;volatile
 10150  1F9C  0020               	movlb	0	; select bank0
 10151  1F9D  0256               	subwf	_ui8_duty_cycle_BLDC,w
 10152  1F9E  0008               	return
 10153  1F9F                     __end_ofPL124:	
 10154  1F9F                     PL126:	
 10155  1F9F  1079               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10156  1FA0  0021               	movlb	1	; select bank1
 10157  1FA1  01E3               	clrf	_comm_state^(0+128)
 10158  1FA2  0AE3               	incf	_comm_state^(0+128),f
 10159  1FA3  0008               	return
 10160  1FA4                     __end_ofPL126:	
 10161  1FA4                     PL128:	
 10162  1FA4  0025               	movlb	5	; select bank5
 10163  1FA5  0811               	movf	17,w	;volatile
 10164  1FA6  0020               	movlb	0	; select bank0
 10165  1FA7  0656               	xorwf	_ui8_duty_cycle_BLDC,w
 10166  1FA8  0008               	return
 10167  1FA9                     __end_ofPL128:	
 10168  1FA9                     PL130:	
 10169  1FA9  0020               	movlb	0	; select bank0
 10170  1FAA  0850               	movf	_comm_time,w
 10171  1FAB  0021               	movlb	1	; select bank1
 10172  1FAC  0238               	subwf	_ui16_phase_advancement^(0+128),w
 10173  1FAD  0008               	return
 10174  1FAE                     __end_ofPL130:	
 10175  1FAE                     PL132:	
 10176  1FAE  083A               	movf	_ui16_step_cnt^(0+128),w
 10177  1FAF  0084               	movwf	4
 10178  1FB0  300A               	movlw	10
 10179  1FB1  0204               	subwf	4,w
 10180  1FB2  0008               	return
 10181  1FB3                     __end_ofPL132:	
 10182  1FB3                     PL134:	
 10183  1FB3  0025               	movlb	5	; select bank5
 10184  1FB4  0196               	clrf	22	;volatile
 10185  1FB5  0022               	movlb	2	; select bank2
 10186  1FB6  0191               	clrf	17	;volatile
 10187  1FB7  0008               	return
 10188  1FB8                     __end_ofPL134:	
 10189  1FB8                     __ptext57:	
 10190 ;; *************** function _BLDCWait *****************
 10191 ;; Defined at:
 10192 ;;		line 156 in file "../bldc.c"
 10193 ;; Parameters:    Size  Location     Type
 10194 ;;		None
 10195 ;; Auto vars:     Size  Location     Type
 10196 ;;		None
 10197 ;; Return value:  Size  Location     Type
 10198 ;;                  1    wreg      void 
 10199 ;; Registers used:
 10200 ;;		None
 10201 ;; Tracked objects:
 10202 ;;		On entry : 1F/1
 10203 ;;		On exit  : 0/0
 10204 ;;		Unchanged: 0/0
 10205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10206 ;;      Params:         0       0       0       0       0       0       0       0
 10207 ;;      Locals:         0       0       0       0       0       0       0       0
 10208 ;;      Temps:          0       0       0       0       0       0       0       0
 10209 ;;      Totals:         0       0       0       0       0       0       0       0
 10210 ;;Total ram usage:        0 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		_interrrupt_bldc
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function _BLDCWait
 10221  1FB8                     _BLDCWait:	
 10222                           
 10223                           ;bldc.c: 161: __nop();
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in _BLDCWait: []
 10227  1FB8  0000               	nop
 10228                           
 10229                           ;bldc.c: 162: __nop();
 10230  1FB9  0000               	nop
 10231                           
 10232                           ;bldc.c: 163: __nop();
 10233  1FBA  0000               	nop
 10234                           
 10235                           ;bldc.c: 164: __nop();
 10236  1FBB  0000               	nop
 10237                           
 10238                           ;bldc.c: 165: __nop();
 10239  1FBC  0000               	nop
 10240                           
 10241                           ;bldc.c: 166: __nop();
 10242  1FBD  0000               	nop
 10243                           
 10244                           ;bldc.c: 167: __nop();
 10245  1FBE  0000               	nop
 10246                           
 10247                           ;bldc.c: 168: __nop();
 10248  1FBF  0000               	nop
 10249                           
 10250                           ;bldc.c: 170: __nop();
 10251  1FC0  0000               	nop
 10252                           
 10253                           ;bldc.c: 171: __nop();
 10254  1FC1  0000               	nop
 10255                           
 10256                           ;bldc.c: 172: __nop();
 10257  1FC2  0000               	nop
 10258                           
 10259                           ;bldc.c: 173: __nop();
 10260  1FC3  0000               	nop
 10261                           
 10262                           ;bldc.c: 174: __nop();
 10263  1FC4  0000               	nop
 10264                           
 10265                           ;bldc.c: 175: __nop();
 10266  1FC5  0000               	nop
 10267                           
 10268                           ;bldc.c: 176: __nop();
 10269  1FC6  0000               	nop
 10270                           
 10271                           ;bldc.c: 177: __nop();
 10272  1FC7  0000               	nop
 10273                           
 10274                           ;bldc.c: 179: __nop();
 10275  1FC8  0000               	nop
 10276                           
 10277                           ;bldc.c: 180: __nop();
 10278  1FC9  0000               	nop
 10279                           
 10280                           ;bldc.c: 181: __nop();
 10281  1FCA  0000               	nop
 10282                           
 10283                           ;bldc.c: 182: __nop();
 10284  1FCB  0000               	nop
 10285                           
 10286                           ;bldc.c: 183: __nop();
 10287  1FCC  0000               	nop
 10288                           
 10289                           ;bldc.c: 184: __nop();
 10290  1FCD  0000               	nop
 10291                           
 10292                           ;bldc.c: 185: __nop();
 10293  1FCE  0000               	nop
 10294                           
 10295                           ;bldc.c: 186: __nop();
 10296  1FCF  0000               	nop
 10297                           
 10298                           ;bldc.c: 188: __nop();
 10299  1FD0  0000               	nop
 10300                           
 10301                           ;bldc.c: 189: __nop();
 10302  1FD1  0000               	nop
 10303                           
 10304                           ;bldc.c: 190: __nop();
 10305  1FD2  0000               	nop
 10306                           
 10307                           ;bldc.c: 191: __nop();
 10308  1FD3  0000               	nop
 10309                           
 10310                           ;bldc.c: 192: __nop();
 10311  1FD4  0000               	nop
 10312                           
 10313                           ;bldc.c: 193: __nop();
 10314  1FD5  0000               	nop
 10315                           
 10316                           ;bldc.c: 194: __nop();
 10317  1FD6  0000               	nop
 10318                           
 10319                           ;bldc.c: 195: __nop();
 10320  1FD7  0000               	nop
 10321  1FD8  0008               	return
 10322  1FD9                     __end_of_BLDCWait:	
 10323  1FD9                     __ptext54:	
 10324 ;; *************** function i1___lwdiv *****************
 10325 ;; Defined at:
 10326 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;  divisor         2    0[COMMON] unsigned int 
 10329 ;;  dividend        2    2[COMMON] unsigned int 
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;  __lwdiv         2    5[COMMON] unsigned int 
 10332 ;;  __lwdiv         1    4[COMMON] unsigned char 
 10333 ;; Return value:  Size  Location     Type
 10334 ;;                  2    0[COMMON] unsigned int 
 10335 ;; Registers used:
 10336 ;;		wreg, status,2, status,0
 10337 ;; Tracked objects:
 10338 ;;		On entry : 1F/0
 10339 ;;		On exit  : 1F/0
 10340 ;;		Unchanged: 1F/0
 10341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10342 ;;      Params:         4       0       0       0       0       0       0       0
 10343 ;;      Locals:         3       0       0       0       0       0       0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0       0
 10345 ;;      Totals:         7       0       0       0       0       0       0       0
 10346 ;;Total ram usage:        7 bytes
 10347 ;; Hardware stack levels used:    1
 10348 ;; This function calls:
 10349 ;;		Nothing
 10350 ;; This function is called by:
 10351 ;;		_interrrupt_bldc
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           
 10356                           ;psect for function i1___lwdiv
 10357  1FD9                     i1___lwdiv:	
 10358                           
 10359                           ;incstack = 0
 10360                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10361  1FD9  01F5               	clrf	i1___lwdiv@quotient
 10362  1FDA  01F6               	clrf	i1___lwdiv@quotient+1
 10363  1FDB  0870               	movf	i1___lwdiv@divisor,w
 10364  1FDC  0471               	iorwf	i1___lwdiv@divisor+1,w
 10365  1FDD  1903               	btfsc	3,2
 10366  1FDE  2FF9               	goto	i1l12706
 10367  1FDF  01F4               	clrf	i1___lwdiv@counter
 10368  1FE0                     L65:	
 10369  1FE0  0AF4               	incf	i1___lwdiv@counter,f
 10370  1FE1  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10371  1FE2  2FE6               	goto	i1l12694
 10372  1FE3  35F0               	lslf	i1___lwdiv@divisor,f
 10373  1FE4  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10374  1FE5  2FE0               	goto	L65
 10375  1FE6                     i1l12694:	
 10376  1FE6  35F5               	lslf	i1___lwdiv@quotient,f
 10377  1FE7  0DF6               	rlf	i1___lwdiv@quotient+1,f
 10378  1FE8  0871               	movf	i1___lwdiv@divisor+1,w
 10379  1FE9  0273               	subwf	i1___lwdiv@dividend+1,w
 10380  1FEA  1D03               	skipz
 10381  1FEB  2FEE               	goto	u1086_25
 10382  1FEC  0870               	movf	i1___lwdiv@divisor,w
 10383  1FED  0272               	subwf	i1___lwdiv@dividend,w
 10384  1FEE                     u1086_25:	
 10385  1FEE  1C03               	skipc
 10386  1FEF  2FF5               	goto	i1l12702
 10387  1FF0  0870               	movf	i1___lwdiv@divisor,w
 10388  1FF1  02F2               	subwf	i1___lwdiv@dividend,f
 10389  1FF2  0871               	movf	i1___lwdiv@divisor+1,w
 10390  1FF3  3BF3               	subwfb	i1___lwdiv@dividend+1,f
 10391  1FF4  1475               	bsf	i1___lwdiv@quotient,0
 10392  1FF5                     i1l12702:	
 10393  1FF5  36F1               	lsrf	i1___lwdiv@divisor+1,f
 10394  1FF6  0CF0               	rrf	i1___lwdiv@divisor,f
 10395  1FF7  0BF4               	decfsz	i1___lwdiv@counter,f
 10396  1FF8  2FE6               	goto	i1l12694
 10397  1FF9                     i1l12706:	
 10398  1FF9  0876               	movf	i1___lwdiv@quotient+1,w
 10399  1FFA  00F1               	movwf	?i1___lwdiv+1
 10400  1FFB  0875               	movf	i1___lwdiv@quotient,w
 10401  1FFC  00F0               	movwf	?i1___lwdiv
 10402  1FFD  0008               	return
 10403  1FFE                     __end_ofi1___lwdiv:	
 10404                           
 10405                           	psect	swtext1
 10406  070E                     __pswtext1:	
 10407  070E                     S13818:	
 10408  070E  319A  2AE8         	ljmp	l9464
 10409  0710  319A  2AEA         	ljmp	l9466
 10410  0712  319A  2AED         	ljmp	l9468
 10411  0714  319A  2AEF         	ljmp	l9470
 10412  0716  319A  2AF1         	ljmp	l9472
 10413  0718  319A  2AF3         	ljmp	l9474
 10414  071A  319A  2AF3         	ljmp	l9474
 10415  071C  319A  2AF3         	ljmp	l9474
 10416  071E  319A  2AF3         	ljmp	l9474
 10417  0720  319A  2AF3         	ljmp	l9474
 10418                           
 10419                           	psect	text24
 10420  1093                     __ptext24:	
 10421 ;; *************** function _EOL *****************
 10422 ;; Defined at:
 10423 ;;		line 456 in file "../diag.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  _dcnt           1   17[BANK4 ] unsigned char 
 10428 ;;  _dcnt           1   16[BANK4 ] unsigned char 
 10429 ;;  _dcnt           1   15[BANK4 ] unsigned char 
 10430 ;;  _dcnt           1   14[BANK4 ] unsigned char 
 10431 ;;  _dcnt           1   13[BANK4 ] unsigned char 
 10432 ;;  _dcnt           1   12[BANK4 ] unsigned char 
 10433 ;;  _dcnt           1   11[BANK4 ] unsigned char 
 10434 ;;  _dcnt           1   10[BANK4 ] unsigned char 
 10435 ;;  _dcnt           1    9[BANK4 ] unsigned char 
 10436 ;;  _dcnt           1    8[BANK4 ] unsigned char 
 10437 ;;  _dcnt           1    7[BANK4 ] unsigned char 
 10438 ;;  _dcnt           1    6[BANK4 ] unsigned char 
 10439 ;;  _dcnt           1    5[BANK4 ] unsigned char 
 10440 ;;  _dcnt           1    4[BANK4 ] unsigned char 
 10441 ;;  _dcnt           1    3[BANK4 ] unsigned char 
 10442 ;;  _dcnt           1    2[BANK4 ] unsigned char 
 10443 ;;  _dcnt           1    1[BANK4 ] unsigned char 
 10444 ;;  _dcnt           1    0[BANK4 ] unsigned char 
 10445 ;;  ui8_b_DResB3    1   23[BANK4 ] unsigned char 
 10446 ;;  ui8_b_DResB2    1   22[BANK4 ] unsigned char 
 10447 ;;  ui8_b_DResB1    1   21[BANK4 ] unsigned char 
 10448 ;;  ui8_b_DResB0    1   20[BANK4 ] unsigned char 
 10449 ;;  ui8_b_DResB4    1   19[BANK4 ] unsigned char 
 10450 ;;  ui8_b_DResB5    1   18[BANK4 ] unsigned char 
 10451 ;; Return value:  Size  Location     Type
 10452 ;;                  1    wreg      void 
 10453 ;; Registers used:
 10454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10455 ;; Tracked objects:
 10456 ;;		On entry : 1F/0
 10457 ;;		On exit  : 1E/0
 10458 ;;		Unchanged: 0/0
 10459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10460 ;;      Params:         0       0       0       0       0       0       0       0
 10461 ;;      Locals:         0       0       0       0       0      24       0       0
 10462 ;;      Temps:          0       3       0       0       0       0       0       0
 10463 ;;      Totals:         0       3       0       0       0      24       0       0
 10464 ;;Total ram usage:       27 bytes
 10465 ;; Hardware stack levels used:    1
 10466 ;; Hardware stack levels required when called:    8
 10467 ;; This function calls:
 10468 ;;		_ADC_Read
 10469 ;;		_ADC_Wait
 10470 ;;		_InitMotorStop
 10471 ;;		_NegativeAnswer
 10472 ;;		_PWMReadDC
 10473 ;;		_PWM_Write_Out
 10474 ;;		_Transmit_LIN_8Bytes
 10475 ;;		___lwdiv
 10476 ;;		___wmul
 10477 ;;		_cksum
 10478 ;;		_read_eeprom_data
 10479 ;;		_write_eeprom_data
 10480 ;; This function is called by:
 10481 ;;		_main
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function _EOL
 10487  1093                     _EOL:	
 10488                           
 10489                           ;diag.c: 460: unsigned char ui8_b_DResB0_RD;
 10490                           ;diag.c: 461: unsigned char ui8_b_DResB1_RD;
 10491                           ;diag.c: 462: unsigned char ui8_b_DResB2_RD;
 10492                           ;diag.c: 463: unsigned char ui8_b_DResB3_RD;
 10493                           ;diag.c: 464: unsigned char ui8_b_DResB4_RD;
 10494                           ;diag.c: 465: unsigned char ui8_b_DResB5_RD;
 10495                           ;diag.c: 469: if( ui8_b_DResServID_c == 0x3b )
 10496                           
 10497                           ;incstack = 0
 10498                           ; Regs used in _EOL: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10499  1093  303B               	movlw	59
 10500  1094  0022               	movlb	2	; select bank2
 10501  1095  0661               	xorwf	_ui8_b_DResServID_c^(0+256),w
 10502  1096  1D03               	btfss	3,2
 10503  1097  2D58               	goto	l13510
 10504                           
 10505                           ;diag.c: 471: {
 10506                           ;diag.c: 477: ui8_selected_lid = ui8_b_DResLocID_c;
 10507  1098  0020               	movlb	0	; select bank0
 10508  1099  0855               	movf	_ui8_b_DResLocID_c,w
 10509  109A  00D9               	movwf	_ui8_selected_lid
 10510                           
 10511                           ;diag.c: 2406: break;
 10512                           
 10513                           ;diag.c: 482: switch( ui8_b_DResLocID_c)
 10514  109B  0855               	movf	_ui8_b_DResLocID_c,w
 10515                           
 10516                           ; Switch size 1, requested type "space"
 10517                           ; Number of cases is 10, Range of values is 128 to 250
 10518                           ; switch strategies available:
 10519                           ; Name         Instructions Cycles
 10520                           ; simple_byte           31    16 (average)
 10521                           ; direct_byte          255     9 (fixed)
 10522                           ; jumptable            263     9 (fixed)
 10523                           ;	Chosen strategy is simple_byte
 10524  109C  3A80               	xorlw	128	; case 128
 10525  109D  1903               	skipnz
 10526  109E  28BB               	goto	l12962
 10527  109F  3A10               	xorlw	16	; case 144
 10528  10A0  1903               	skipnz
 10529  10A1  28CB               	goto	l12970
 10530  10A2  3A01               	xorlw	1	; case 145
 10531  10A3  1903               	skipnz
 10532  10A4  293E               	goto	l13010
 10533  10A5  3A02               	xorlw	2	; case 147
 10534  10A6  1903               	skipnz
 10535  10A7  2979               	goto	l13032
 10536  10A8  3A07               	xorlw	7	; case 148
 10537  10A9  1903               	skipnz
 10538  10AA  29E2               	goto	l13090
 10539  10AB  3A01               	xorlw	1	; case 149
 10540  10AC  1903               	skipnz
 10541  10AD  2A37               	goto	l13120
 10542  10AE  3A0D               	xorlw	13	; case 152
 10543  10AF  1903               	skipnz
 10544  10B0  2C0C               	goto	l13288
 10545  10B1  3A07               	xorlw	7	; case 159
 10546  10B2  1903               	skipnz
 10547  10B3  2C9C               	goto	l13386
 10548  10B4  3A3F               	xorlw	63	; case 160
 10549  10B5  1903               	skipnz
 10550  10B6  2CE4               	goto	l13464
 10551  10B7  3A5A               	xorlw	90	; case 250
 10552  10B8  1903               	skipnz
 10553  10B9  2D44               	goto	l13496
 10554  10BA  2D56               	goto	l13504
 10555  10BB                     l12962:	
 10556                           
 10557                           ;diag.c: 490: {
 10558                           ;diag.c: 492: if( 0x80 == ui8_selected_lid )
 10559  10BB  3080               	movlw	128
 10560  10BC  0659               	xorwf	_ui8_selected_lid,w
 10561  10BD  1D03               	btfss	3,2
 10562  10BE  0008               	return
 10563                           
 10564                           ;diag.c: 494: {
 10565                           ;diag.c: 496: ui8_selected_lid = 0x90;
 10566  10BF  3090               	movlw	144
 10567  10C0  00D9               	movwf	_ui8_selected_lid
 10568                           
 10569                           ;diag.c: 497: ict_stamp = 1;
 10570  10C1  0022               	movlb	2	; select bank2
 10571  10C2  303A               	movlw	58
 10572  10C3  01EF               	clrf	_ict_stamp^(0+256)
 10573  10C4  0AEF               	incf	_ict_stamp^(0+256),f
 10574                           
 10575                           ;diag.c: 499: Transmit_LIN_8Bytes( 0x10, 0x3A, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
      +                          );
 10576  10C5  0020               	movlb	0	; select bank0
 10577  10C6  00BB               	movwf	Transmit_LIN_8Bytes@B0
 10578  10C7  3080               	movlw	128
 10579  10C8  260B  3190         	fcall	PL74	;call to abstracted procedure
 10580  10CA  2E37               	ljmp	_Transmit_LIN_8Bytes
 10581  10CB                     l12970:	
 10582                           ;diag.c: 516: }
 10583                           ;diag.c: 519: break;
 10584                           
 10585                           ;diag.c: 506: else
 10586                           ;diag.c: 507: {
 10587                           
 10588                           ;diag.c: 503: }
 10589                           
 10590                           
 10591                           ;diag.c: 529: {
 10592                           ;diag.c: 531: if( 0x90 == ui8_selected_lid )
 10593  10CB  3090               	movlw	144
 10594  10CC  0659               	xorwf	_ui8_selected_lid,w
 10595  10CD  1D03               	btfss	3,2
 10596  10CE  0008               	return
 10597  10CF  2915               	goto	l12992
 10598  10D0                     l12974:	
 10599                           
 10600                           ;diag.c: 557: {
 10601                           ;diag.c: 559: ui8_b_DResB0_RD = read_eeprom_data( 0xf0 );
 10602  10D0  30F0               	movlw	240
 10603  10D1  3182  225D  3190   	fcall	_read_eeprom_data
 10604  10D4  0024               	movlb	4	; select bank4
 10605  10D5  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 10606                           
 10607                           ;diag.c: 560: ui8_b_DResB1_RD = read_eeprom_data( 0xf1 );
 10608  10D6  30F1               	movlw	241
 10609  10D7  3182  225D  3190   	fcall	_read_eeprom_data
 10610  10DA  0024               	movlb	4	; select bank4
 10611  10DB  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 10612                           
 10613                           ;diag.c: 561: ui8_b_DResB2_RD = read_eeprom_data( 0xf2 );
 10614  10DC  30F2               	movlw	242
 10615  10DD  3182  225D  3190   	fcall	_read_eeprom_data
 10616  10E0  0024               	movlb	4	; select bank4
 10617  10E1  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 10618                           
 10619                           ;diag.c: 562: ui8_b_DResB3_RD = read_eeprom_data( 0xf3 );
 10620  10E2  30F3               	movlw	243
 10621  10E3  3182  225D  3190   	fcall	_read_eeprom_data
 10622  10E6  0024               	movlb	4	; select bank4
 10623  10E7  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 10624  10E8  3002               	movlw	2
 10625                           
 10626                           ;diag.c: 563: ui8_b_DResB4_RD = 0;
 10627  10E9  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
 10628                           
 10629                           ;diag.c: 564: ui8_b_DResB5_RD = 0;
 10630  10EA  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 10631                           
 10632                           ;diag.c: 566: ict_stamp = 2;
 10633  10EB  0022               	movlb	2	; select bank2
 10634  10EC  00EF               	movwf	_ict_stamp^(0+256)
 10635                           
 10636                           ;diag.c: 567: break;
 10637  10ED  291E               	goto	l12994
 10638  10EE                     l12982:	
 10639                           
 10640                           ;diag.c: 574: {
 10641                           ;diag.c: 576: ui8_b_DResB0_RD = read_eeprom_data( 0xeb );
 10642  10EE  30EB               	movlw	235
 10643  10EF  3182  225D  3190   	fcall	_read_eeprom_data
 10644  10F2  0024               	movlb	4	; select bank4
 10645  10F3  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 10646                           
 10647                           ;diag.c: 577: ui8_b_DResB1_RD = read_eeprom_data( 0xec );
 10648  10F4  30EC               	movlw	236
 10649  10F5  3182  225D  3190   	fcall	_read_eeprom_data
 10650  10F8  0024               	movlb	4	; select bank4
 10651  10F9  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 10652                           
 10653                           ;diag.c: 578: ui8_b_DResB2_RD = read_eeprom_data( 0xed );
 10654  10FA  30ED               	movlw	237
 10655  10FB  3182  225D  3190   	fcall	_read_eeprom_data
 10656  10FE  0024               	movlb	4	; select bank4
 10657  10FF  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 10658                           
 10659                           ;diag.c: 579: ui8_b_DResB3_RD = read_eeprom_data( 0xee );
 10660  1100  30EE               	movlw	238
 10661  1101  3182  225D  3190   	fcall	_read_eeprom_data
 10662  1104  0024               	movlb	4	; select bank4
 10663  1105  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 10664                           
 10665                           ;diag.c: 580: ui8_b_DResB4_RD = read_eeprom_data( 0xef );
 10666  1106  30EF               	movlw	239
 10667  1107  3182  225D  3190   	fcall	_read_eeprom_data
 10668  110A  0024               	movlb	4	; select bank4
 10669  110B  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 10670  110C  3091               	movlw	145
 10671                           
 10672                           ;diag.c: 581: ui8_b_DResB5_RD = 0;
 10673  110D  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 10674                           
 10675                           ;diag.c: 583: ui8_selected_lid = 0x91;
 10676  110E  0020               	movlb	0	; select bank0
 10677  110F  00D9               	movwf	_ui8_selected_lid
 10678                           
 10679                           ;diag.c: 584: break;
 10680  1110  291E               	goto	l12994
 10681  1111                     l12988:	
 10682                           
 10683                           ;diag.c: 591: {
 10684                           ;diag.c: 594: NegativeAnswer(0x90);
 10685  1111  3090               	movlw	144
 10686  1112  2627  3190         	fcall	_NegativeAnswer
 10687                           
 10688                           ;diag.c: 595: break;
 10689  1114  291E               	goto	l12994
 10690  1115                     l12992:	
 10691  1115  0022               	movlb	2	; select bank2
 10692  1116  086F               	movf	_ict_stamp^(0+256),w
 10693                           
 10694                           ; Switch size 1, requested type "space"
 10695                           ; Number of cases is 2, Range of values is 1 to 2
 10696                           ; switch strategies available:
 10697                           ; Name         Instructions Cycles
 10698                           ; simple_byte            7     4 (average)
 10699                           ; direct_byte           13     9 (fixed)
 10700                           ; jumptable            263     9 (fixed)
 10701                           ;	Chosen strategy is simple_byte
 10702  1117  3A01               	xorlw	1	; case 1
 10703  1118  1903               	skipnz
 10704  1119  28D0               	goto	l12974
 10705  111A  3A03               	xorlw	3	; case 2
 10706  111B  1903               	skipnz
 10707  111C  28EE               	goto	l12982
 10708  111D  2911               	goto	l12988
 10709  111E                     l12994:	
 10710                           
 10711                           ;diag.c: 602: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DResB
      +                          2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF) && (ui8_b_DResB5
      +                          _RD != 0xFF))
 10712  111E  0024               	movlb	4	; select bank4
 10713  111F  0A34               	incf	EOL@ui8_b_DResB0_RD^(0+512),w
 10714  1120  1903               	btfsc	3,2
 10715  1121  2937               	goto	l13008
 10716  1122  0A35               	incf	EOL@ui8_b_DResB1_RD^(0+512),w
 10717  1123  1903               	btfsc	3,2
 10718  1124  2937               	goto	l13008
 10719  1125  0A36               	incf	EOL@ui8_b_DResB2_RD^(0+512),w
 10720  1126  1903               	btfsc	3,2
 10721  1127  2937               	goto	l13008
 10722  1128  0A37               	incf	EOL@ui8_b_DResB3_RD^(0+512),w
 10723  1129  1903               	btfsc	3,2
 10724  112A  2937               	goto	l13008
 10725  112B  0A33               	incf	EOL@ui8_b_DResB4_RD^(0+512),w
 10726  112C  1903               	btfsc	3,2
 10727  112D  2937               	goto	l13008
 10728  112E  0A32               	incf	EOL@ui8_b_DResB5_RD^(0+512),w
 10729  112F  1903               	btfsc	3,2
 10730  1130  2937               	goto	l13008
 10731                           
 10732                           ;diag.c: 604: {
 10733                           ;diag.c: 606: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10734  1131  303A               	movlw	58
 10735  1132  2560  3190         	fcall	PL2	;call to abstracted procedure
 10736  1134  00C2               	movwf	Transmit_LIN_8Bytes@B7
 10737  1135  3010               	movlw	16
 10738  1136  2E37               	ljmp	_Transmit_LIN_8Bytes
 10739  1137                     l13008:	
 10740                           ;diag.c: 609: }
 10741                           
 10742                           
 10743                           ;diag.c: 612: else
 10744                           ;diag.c: 613: {
 10745                           ;diag.c: 615: Transmit_LIN_8Bytes( 0x10, 0x7F, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
 10746  1137  307F               	movlw	127
 10747  1138  0020               	movlb	0	; select bank0
 10748  1139  00BB               	movwf	Transmit_LIN_8Bytes@B0
 10749  113A  3090               	movlw	144
 10750  113B  25E2  3190         	fcall	PL20	;call to abstracted procedure
 10751  113D  2E37               	ljmp	_Transmit_LIN_8Bytes
 10752  113E                     l13010:	
 10753                           
 10754                           ;diag.c: 657: {
 10755                           ;diag.c: 659: if( 0x91 == ui8_selected_lid )
 10756  113E  3091               	movlw	145
 10757  113F  0659               	xorwf	_ui8_selected_lid,w
 10758  1140  1D03               	btfss	3,2
 10759  1141  0008               	return
 10760                           
 10761                           ;diag.c: 661: {
 10762                           ;diag.c: 672: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
 10763  1142  30F4               	movlw	244
 10764  1143  3182  225D  3190   	fcall	_read_eeprom_data
 10765  1146  0024               	movlb	4	; select bank4
 10766  1147  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 10767                           
 10768                           ;diag.c: 673: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
 10769  1148  30F5               	movlw	245
 10770  1149  3182  225D  3190   	fcall	_read_eeprom_data
 10771  114C  0024               	movlb	4	; select bank4
 10772  114D  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 10773                           
 10774                           ;diag.c: 674: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
 10775  114E  30F6               	movlw	246
 10776  114F  3182  225D  3190   	fcall	_read_eeprom_data
 10777  1152  0024               	movlb	4	; select bank4
 10778  1153  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 10779                           
 10780                           ;diag.c: 675: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
 10781  1154  30F7               	movlw	247
 10782  1155  3182  225D  3190   	fcall	_read_eeprom_data
 10783  1158  0024               	movlb	4	; select bank4
 10784  1159  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 10785                           
 10786                           ;diag.c: 676: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
 10787  115A  30F8               	movlw	248
 10788  115B  3182  225D  3190   	fcall	_read_eeprom_data
 10789  115E  0024               	movlb	4	; select bank4
 10790  115F  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 10791                           
 10792                           ;diag.c: 677: ui8_b_DResB5_RD = 0;
 10793  1160  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 10794                           
 10795                           ;diag.c: 679: if ((ui8_b_DResB0_RD == 0xFF) && (ui8_b_DResB1_RD == 0xFF) && (ui8_b_DResB
      +                          2_RD == 0xFF) && (ui8_b_DResB3_RD == 0xFF) && (ui8_b_DResB4_RD == 0xFF))
 10796  1161  0F34               	incfsz	EOL@ui8_b_DResB0_RD^(0+512),w
 10797  1162  296F               	goto	l13028
 10798  1163  0F35               	incfsz	EOL@ui8_b_DResB1_RD^(0+512),w
 10799  1164  296F               	goto	l13028
 10800  1165  0F36               	incfsz	EOL@ui8_b_DResB2_RD^(0+512),w
 10801  1166  296F               	goto	l13028
 10802  1167  0F37               	incfsz	EOL@ui8_b_DResB3_RD^(0+512),w
 10803  1168  296F               	goto	l13028
 10804  1169  0F33               	incfsz	EOL@ui8_b_DResB4_RD^(0+512),w
 10805  116A  296F               	goto	l13028
 10806                           
 10807                           ;diag.c: 681: {
 10808                           ;diag.c: 683: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10809  116B  303A               	movlw	58
 10810  116C  2560  3190         	fcall	PL2	;call to abstracted procedure
 10811  116E  2972               	goto	L14
 10812  116F                     l13028:	
 10813                           ;diag.c: 686: }
 10814                           
 10815                           
 10816                           ;diag.c: 689: else
 10817                           ;diag.c: 690: {
 10818                           ;diag.c: 692: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 10819  116F  307F               	movlw	127
 10820  1170  25D7  3190         	fcall	PL18	;call to abstracted procedure
 10821  1172                     L14:	
 10822  1172  00C2               	movwf	Transmit_LIN_8Bytes@B7
 10823  1173  3010               	movlw	16
 10824  1174  2637               	fcall	_Transmit_LIN_8Bytes
 10825                           
 10826                           ;diag.c: 702: }
 10827                           ;diag.c: 705: ui8_selected_lid = 0x92;
 10828  1175  3092               	movlw	146
 10829  1176  0020               	movlb	0	; select bank0
 10830  1177  00D9               	movwf	_ui8_selected_lid
 10831                           
 10832                           ;diag.c: 708: }
 10833  1178  0008               	return
 10834  1179                     l13032:	
 10835                           
 10836                           ;diag.c: 834: {
 10837                           ;diag.c: 836: if( 0x93 == ui8_selected_lid )
 10838  1179  3093               	movlw	147
 10839  117A  0659               	xorwf	_ui8_selected_lid,w
 10840  117B  1D03               	btfss	3,2
 10841  117C  0008               	return
 10842                           
 10843                           ;diag.c: 838: {
 10844                           ;diag.c: 850: sum = cksum( );
 10845  117D  27D2  3190         	fcall	_cksum
 10846  117F  0831               	movf	?_cksum+1,w
 10847  1180  0022               	movlb	2	; select bank2
 10848  1181  00AC               	movwf	(_sum+1)^(0+256)
 10849  1182  0020               	movlb	0	; select bank0
 10850  1183  0830               	movf	?_cksum,w
 10851  1184  0022               	movlb	2	; select bank2
 10852  1185  00AB               	movwf	_sum^(0+256)
 10853                           
 10854                           ;diag.c: 851: checksum[ 1 ] = ( (EEADRL=(0x1FFF)&0xff, EEADRH=(0x1FFF)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, __nop(), __nop(), (EEDATH << 8) | EEDATA) );
 10855  1186  30FF               	movlw	255
 10856  1187  0023               	movlb	3	; select bank3
 10857  1188  0091               	movwf	17	;volatile
 10858  1189  301F               	movlw	31
 10859  118A  0092               	movwf	18	;volatile
 10860  118B  1115               	bcf	21,2	;volsfr
 10861  118C  1795               	bsf	21,7	;volsfr
 10862  118D  1415               	bsf	21,0	;volsfr
 10863  118E  0000               	nop
 10864  118F  0000               	nop
 10865  1190  0023               	movlb	3	; select bank3
 10866  1191  0814               	movf	20,w	;volatile
 10867  1192  00BB               	movwf	((_checksum+1)^(0+384)+2)
 10868  1193  0813               	movf	19,w	;volatile
 10869  1194  00BA               	movwf	(_checksum^(0+384)+2)
 10870                           
 10871                           ;diag.c: 852: checksum[ 2 ] = ( (EEADRL=(0x1FFE)&0xff, EEADRH=(0x1FFE)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, __nop(), __nop(), (EEDATH << 8) | EEDATA) );
 10872  1195  30FE               	movlw	254
 10873  1196  0091               	movwf	17	;volatile
 10874  1197  301F               	movlw	31
 10875  1198  0092               	movwf	18	;volatile
 10876  1199  1115               	bcf	21,2	;volsfr
 10877  119A  1795               	bsf	21,7	;volsfr
 10878  119B  1415               	bsf	21,0	;volsfr
 10879  119C  0000               	nop
 10880  119D  0000               	nop
 10881  119E  0023               	movlb	3	; select bank3
 10882  119F  0814               	movf	20,w	;volatile
 10883  11A0  00BD               	movwf	((_checksum+1)^(0+384)+4)
 10884  11A1  0813               	movf	19,w	;volatile
 10885  11A2  00BC               	movwf	(_checksum^(0+384)+4)
 10886                           
 10887                           ;diag.c: 853: checksum[ 0 ] = ( checksum[ 1 ]<<8 ) + checksum[ 2 ];
 10888  11A3  30BC               	movlw	((low (_checksum| (0+256)))& (0+255)+4)
 10889  11A4  0086               	movwf	6
 10890  11A5  3001               	movlw	1	; select bank3/4
 10891  11A6  0087               	movwf	7
 10892  11A7  083A               	movf	(_checksum^(0+384)+2),w
 10893  11A8  0020               	movlb	0	; select bank0
 10894  11A9  00C6               	movwf	??_EOL+1
 10895  11AA  01C5               	clrf	??_EOL
 10896  11AB  3F40               	moviw [0]fsr1
 10897  11AC  0745               	addwf	??_EOL,w
 10898  11AD  0023               	movlb	3	; select bank3
 10899  11AE  00B8               	movwf	_checksum^(0+384)
 10900  11AF  3F41               	moviw [1]fsr1
 10901  11B0  0020               	movlb	0	; select bank0
 10902  11B1  3D46               	addwfc	??_EOL+1,w
 10903  11B2  0023               	movlb	3	; select bank3
 10904  11B3  00B9               	movwf	(_checksum^(0+384)+1)
 10905                           
 10906                           ;diag.c: 856: ui8_b_DResB0_RD = 0x02;
 10907  11B4  3002               	movlw	2
 10908  11B5  0024               	movlb	4	; select bank4
 10909  11B6  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 10910                           
 10911                           ;diag.c: 857: ui8_b_DResB1_RD = 0x00;
 10912  11B7  01B5               	clrf	EOL@ui8_b_DResB1_RD^(0+512)
 10913                           
 10914                           ;diag.c: 858: ui8_b_DResB2_RD = checksum[1] ;
 10915  11B8  0023               	movlb	3	; select bank3
 10916  11B9  083A               	movf	(_checksum^(0+384)+2),w
 10917  11BA  0024               	movlb	4	; select bank4
 10918  11BB  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 10919                           
 10920                           ;diag.c: 859: ui8_b_DResB3_RD = checksum[2] ;
 10921  11BC  0023               	movlb	3	; select bank3
 10922  11BD  083C               	movf	(_checksum^(0+384)+4),w
 10923  11BE  0024               	movlb	4	; select bank4
 10924  11BF  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 10925                           
 10926                           ;diag.c: 860: ui8_b_DResB4_RD = (unsigned int)((sum)>>8) ;
 10927  11C0  0022               	movlb	2	; select bank2
 10928  11C1  082C               	movf	(_sum^(0+256)+1),w
 10929  11C2  0024               	movlb	4	; select bank4
 10930  11C3  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 10931                           
 10932                           ;diag.c: 861: ui8_b_DResB5_RD = (unsigned int)(sum) ;
 10933  11C4  0022               	movlb	2	; select bank2
 10934  11C5  082B               	movf	_sum^(0+256),w
 10935  11C6  0024               	movlb	4	; select bank4
 10936  11C7  00B2               	movwf	EOL@ui8_b_DResB5_RD^(0+512)
 10937                           
 10938                           ;diag.c: 865: if (checksum[0] == sum)
 10939  11C8  0022               	movlb	2	; select bank2
 10940  11C9  082C               	movf	(_sum+1)^(0+256),w
 10941  11CA  0023               	movlb	3	; select bank3
 10942  11CB  0639               	xorwf	(_checksum+1)^(0+384),w
 10943  11CC  1D03               	skipz
 10944  11CD  29D2               	goto	u11335
 10945  11CE  0022               	movlb	2	; select bank2
 10946  11CF  082B               	movf	_sum^(0+256),w
 10947  11D0  0023               	movlb	3	; select bank3
 10948  11D1  0638               	xorwf	_checksum^(0+384),w
 10949  11D2                     u11335:	
 10950  11D2  1D03               	skipz
 10951  11D3  29D8               	goto	l13086
 10952                           
 10953                           ;diag.c: 867: {
 10954                           ;diag.c: 869: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
 10955                           ;diag.c: 870: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10956  11D4  303A               	movlw	58
 10957  11D5  2560  3190         	fcall	PL2	;call to abstracted procedure
 10958  11D7  29DB               	goto	L15
 10959  11D8                     l13086:	
 10960                           ;diag.c: 873: }
 10961                           
 10962                           
 10963                           ;diag.c: 876: else
 10964                           ;diag.c: 877: {
 10965                           ;diag.c: 879: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 10966  11D8  307F               	movlw	127
 10967  11D9  25D7  3190         	fcall	PL18	;call to abstracted procedure
 10968  11DB                     L15:	
 10969  11DB  00C2               	movwf	Transmit_LIN_8Bytes@B7
 10970  11DC  3010               	movlw	16
 10971  11DD  2637               	fcall	_Transmit_LIN_8Bytes
 10972                           
 10973                           ;diag.c: 889: }
 10974                           ;diag.c: 892: ui8_selected_lid = 0x94;
 10975  11DE  3094               	movlw	148
 10976  11DF  0020               	movlb	0	; select bank0
 10977  11E0  00D9               	movwf	_ui8_selected_lid
 10978                           
 10979                           ;diag.c: 896: }
 10980  11E1  0008               	return
 10981  11E2                     l13090:	
 10982                           
 10983                           ;diag.c: 923: {
 10984                           ;diag.c: 925: if( 0x94 == ui8_selected_lid )
 10985  11E2  3094               	movlw	148
 10986  11E3  0659               	xorwf	_ui8_selected_lid,w
 10987  11E4  1D03               	btfss	3,2
 10988  11E5  0008               	return
 10989                           
 10990                           ;diag.c: 927: {
 10991                           ;diag.c: 940: ui8_given_supply = (ui8_b_DResB0_c);
 10992  11E6  0854               	movf	_ui8_b_DResB0_c,w
 10993  11E7  0021               	movlb	1	; select bank1
 10994  11E8  00D6               	movwf	_ui8_given_supply^(0+128)
 10995                           
 10996                           ;diag.c: 942: if (ui8_given_supply == 0)
 10997  11E9  0856               	movf	_ui8_given_supply^(0+128),w
 10998  11EA  1D03               	btfss	3,2
 10999  11EB  29EE               	goto	l13098
 11000                           
 11001                           ;diag.c: 944: {
 11002                           ;diag.c: 946: ui8_given_supply = 0x6F;
 11003  11EC  306F               	movlw	111
 11004  11ED  00D6               	movwf	_ui8_given_supply^(0+128)
 11005  11EE                     l13098:	
 11006                           
 11007                           ;diag.c: 948: }
 11008                           ;diag.c: 951: ui8_b_DResB0_RD = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
 11009  11EE  0022               	movlb	2	; select bank2
 11010  11EF  0836               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
 11011  11F0  0020               	movlb	0	; select bank0
 11012  11F1  00C6               	movwf	??_EOL+1
 11013  11F2  0022               	movlb	2	; select bank2
 11014  11F3  0835               	movf	_ui16_fir_Bat_mittel^(0+256),w
 11015  11F4  0020               	movlb	0	; select bank0
 11016  11F5  00C5               	movwf	??_EOL
 11017  11F6  36C6               	lsrf	??_EOL+1,f
 11018  11F7  0CC5               	rrf	??_EOL,f
 11019  11F8  36C6               	lsrf	??_EOL+1,f
 11020  11F9  0CC5               	rrf	??_EOL,f
 11021  11FA  0845               	movf	??_EOL,w
 11022  11FB  0024               	movlb	4	; select bank4
 11023  11FC  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11024                           
 11025                           ;diag.c: 952: ui8_b_DResB1_RD = 0;
 11026  11FD  01B5               	clrf	EOL@ui8_b_DResB1_RD^(0+512)
 11027                           
 11028                           ;diag.c: 953: ui8_b_DResB2_RD = 0;
 11029  11FE  01B6               	clrf	EOL@ui8_b_DResB2_RD^(0+512)
 11030                           
 11031                           ;diag.c: 954: ui8_b_DResB3_RD = 0;
 11032  11FF  01B7               	clrf	EOL@ui8_b_DResB3_RD^(0+512)
 11033                           
 11034                           ;diag.c: 955: ui8_b_DResB4_RD = 0;
 11035  1200  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
 11036                           
 11037                           ;diag.c: 956: ui8_b_DResB5_RD = 0;
 11038  1201  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 11039                           
 11040                           ;diag.c: 961: if ((ui8_b_DResB0_RD > ui8_given_supply - 3) && (ui8_b_DResB0_RD < ui8_giv
      +                          en_supply + 3) )
 11041  1202  0021               	movlb	1	; select bank1
 11042  1203  0856               	movf	_ui8_given_supply^(0+128),w
 11043  1204  3EFD               	addlw	253
 11044  1205  0020               	movlb	0	; select bank0
 11045  1206  00C5               	movwf	??_EOL
 11046  1207  30FF               	movlw	255
 11047  1208  1803               	skipnc
 11048  1209  3000               	movlw	0
 11049  120A  00C6               	movwf	??_EOL+1
 11050  120B  3A80               	xorlw	128
 11051  120C  00C7               	movwf	??_EOL+2
 11052  120D  3080               	movlw	128
 11053  120E  0247               	subwf	??_EOL+2,w
 11054  120F  1D03               	skipz
 11055  1210  2A15               	goto	u11365
 11056  1211  0024               	movlb	4	; select bank4
 11057  1212  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
 11058  1213  0020               	movlb	0	; select bank0
 11059  1214  0245               	subwf	??_EOL,w
 11060  1215                     u11365:	
 11061  1215  1803               	skipnc
 11062  1216  2A2D               	goto	l13116
 11063  1217  0021               	movlb	1	; select bank1
 11064  1218  0856               	movf	_ui8_given_supply^(0+128),w
 11065  1219  3E03               	addlw	3
 11066  121A  0020               	movlb	0	; select bank0
 11067  121B  00C5               	movwf	??_EOL
 11068  121C  3000               	movlw	0
 11069  121D  1803               	skipnc
 11070  121E  3001               	movlw	1
 11071  121F  00C6               	movwf	??_EOL+1
 11072  1220  3A80               	xorlw	128
 11073  1221  3C80               	sublw	128
 11074  1222  1D03               	skipz
 11075  1223  2A27               	goto	u11375
 11076  1224  0845               	movf	??_EOL,w
 11077  1225  0024               	movlb	4	; select bank4
 11078  1226  0234               	subwf	EOL@ui8_b_DResB0_RD^(0+512),w
 11079  1227                     u11375:	
 11080  1227  1803               	skipnc
 11081  1228  2A2D               	goto	l13116
 11082                           
 11083                           ;diag.c: 965: {
 11084                           ;diag.c: 967: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
 11085                           ;diag.c: 968: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 11086  1229  303A               	movlw	58
 11087  122A  2560  3190         	fcall	PL2	;call to abstracted procedure
 11088  122C  2A30               	goto	L16
 11089  122D                     l13116:	
 11090                           ;diag.c: 971: }
 11091                           
 11092                           
 11093                           ;diag.c: 974: else
 11094                           ;diag.c: 975: {
 11095                           ;diag.c: 977: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 11096  122D  307F               	movlw	127
 11097  122E  25D7  3190         	fcall	PL18	;call to abstracted procedure
 11098  1230                     L16:	
 11099  1230  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11100  1231  3010               	movlw	16
 11101  1232  2637               	fcall	_Transmit_LIN_8Bytes
 11102                           
 11103                           ;diag.c: 987: }
 11104                           ;diag.c: 990: ui8_selected_lid = 0x95;
 11105  1233  3095               	movlw	149
 11106  1234  0020               	movlb	0	; select bank0
 11107  1235  00D9               	movwf	_ui8_selected_lid
 11108                           
 11109                           ;diag.c: 993: }
 11110  1236  0008               	return
 11111  1237                     l13120:	
 11112                           
 11113                           ;diag.c: 1022: {
 11114                           ;diag.c: 1024: if( 0x95 == ui8_selected_lid )
 11115  1237  3095               	movlw	149
 11116  1238  0659               	xorwf	_ui8_selected_lid,w
 11117  1239  1903               	btfsc	3,2
 11118  123A  2BFB               	goto	l13284
 11119  123B  2C0A               	goto	l13286
 11120  123C                     l13124:	
 11121                           
 11122                           ;diag.c: 1037: {
 11123                           ;diag.c: 1039: InitMotorStop( );
 11124  123C  3182  2296  3190   	fcall	_InitMotorStop
 11125                           
 11126                           ;diag.c: 1042: PEIE = 0;
 11127  123F  130B               	bcf	11,6	;volatile
 11128                           
 11129                           ;diag.c: 1043: GIE = 0;
 11130  1240  138B               	bcf	11,7	;volatile
 11131                           
 11132                           ;diag.c: 1044: CCP1CON = 0x00;
 11133  1241  0025               	movlb	5	; select bank5
 11134  1242  0193               	clrf	19	;volatile
 11135                           
 11136                           ;diag.c: 1050: LATB2 = 1;
 11137  1243  0022               	movlb	2	; select bank2
 11138  1244  150D               	bsf	13,2	;volatile
 11139                           
 11140                           ;diag.c: 1051: LATC3 = 1;
 11141  1245  158E               	bsf	14,3	;volatile
 11142                           
 11143                           ;diag.c: 1054: LATC1 = 0;
 11144  1246  108E               	bcf	14,1	;volatile
 11145                           
 11146                           ;diag.c: 1055: LATC4 = 0;
 11147  1247  120E               	bcf	14,4	;volatile
 11148                           
 11149                           ;diag.c: 1061: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11150  1248  3035               	movlw	53
 11151  1249  0021               	movlb	1	; select bank1
 11152  124A  009D               	movwf	29	;volatile
 11153  124B  0024               	movlb	4	; select bank4
 11154  124C  01A0               	clrf	EOL@_dcnt^(0+512)
 11155  124D  2A50               	goto	l584
 11156  124E                     l585:	
 11157  124E  0000               	nop	;# 
 11158  124F  0000               	nop	;# 
 11159  1250                     l584:	
 11160  1250  0024               	movlb	4	; select bank4
 11161  1251  0BA0               	decfsz	EOL@_dcnt^(0+512),f
 11162  1252  2A4E               	goto	l585
 11163  1253  01A1               	clrf	EOL@_dcnt_413^(0+512)
 11164  1254  2A57               	goto	l589
 11165  1255                     l590:	
 11166  1255  0000               	nop	;# 
 11167  1256  0000               	nop	;# 
 11168  1257                     l589:	
 11169  1257  0024               	movlb	4	; select bank4
 11170  1258  0BA1               	decfsz	EOL@_dcnt_413^(0+512),f
 11171  1259  2A55               	goto	l590
 11172  125A  01A2               	clrf	EOL@_dcnt_414^(0+512)
 11173  125B  2A5E               	goto	l594
 11174  125C                     l595:	
 11175  125C  0000               	nop	;# 
 11176  125D  0000               	nop	;# 
 11177  125E                     l594:	
 11178  125E  0024               	movlb	4	; select bank4
 11179  125F  0BA2               	decfsz	EOL@_dcnt_414^(0+512),f
 11180  1260  2A5C               	goto	l595
 11181  1261  01A3               	clrf	EOL@_dcnt_415^(0+512)
 11182  1262  2A65               	goto	l599
 11183  1263                     l600:	
 11184  1263  0000               	nop	;# 
 11185  1264  0000               	nop	;# 
 11186  1265                     l599:	
 11187  1265  0024               	movlb	4	; select bank4
 11188  1266  0BA3               	decfsz	EOL@_dcnt_415^(0+512),f
 11189  1267  2A63               	goto	l600
 11190  1268  01A4               	clrf	EOL@_dcnt_416^(0+512)
 11191  1269  2A6C               	goto	l604
 11192  126A                     l605:	
 11193  126A  0000               	nop	;# 
 11194  126B  0000               	nop	;# 
 11195  126C                     l604:	
 11196  126C  0024               	movlb	4	; select bank4
 11197  126D  0BA4               	decfsz	EOL@_dcnt_416^(0+512),f
 11198  126E  2A6A               	goto	l605
 11199  126F  01A5               	clrf	EOL@_dcnt_417^(0+512)
 11200  1270  2A73               	goto	l609
 11201  1271                     l610:	
 11202  1271  0000               	nop	;# 
 11203  1272  0000               	nop	;# 
 11204  1273                     l609:	
 11205  1273  0024               	movlb	4	; select bank4
 11206  1274  0BA5               	decfsz	EOL@_dcnt_417^(0+512),f
 11207  1275  2A71               	goto	l610
 11208                           
 11209                           ;diag.c: 1069: ADC_Wait();
 11210  1276  3182  2268  3190   	fcall	_ADC_Wait
 11211                           
 11212                           ;diag.c: 1070: ( GO_nDONE = 1 );
 11213  1279  0021               	movlb	1	; select bank1
 11214  127A  149D               	bsf	29,1	;volatile
 11215                           
 11216                           ;diag.c: 1071: ui16_IPhase2_bldc_cal.w = ADC_Read() - ui8_current_cal[1];
 11217  127B  3182  2281  3190   	fcall	_ADC_Read
 11218  127E  0831               	movf	?_ADC_Read+1,w
 11219  127F  0022               	movlb	2	; select bank2
 11220  1280  00E5               	movwf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
 11221  1281  0020               	movlb	0	; select bank0
 11222  1282  0830               	movf	?_ADC_Read,w
 11223  1283  0022               	movlb	2	; select bank2
 11224  1284  00E4               	movwf	_ui16_IPhase2_bldc_cal^(0+256)
 11225  1285  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 11226  1286  02E4               	subwf	_ui16_IPhase2_bldc_cal^(0+256),f
 11227  1287  1C03               	skipc
 11228  1288  03E5               	decf	(_ui16_IPhase2_bldc_cal+1)^(0+256),f
 11229                           
 11230                           ;diag.c: 1077: LATC2 = 1;
 11231  1289  150E               	bsf	14,2	;volatile
 11232                           
 11233                           ;diag.c: 1078: LATC1 = 1;
 11234  128A  148E               	bsf	14,1	;volatile
 11235                           
 11236                           ;diag.c: 1081: LATC3 = 0;
 11237  128B  118E               	bcf	14,3	;volatile
 11238                           
 11239                           ;diag.c: 1082: LATC4 = 0;
 11240  128C  120E               	bcf	14,4	;volatile
 11241                           
 11242                           ;diag.c: 1088: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11243  128D  3009               	movlw	9
 11244  128E  0021               	movlb	1	; select bank1
 11245  128F  009D               	movwf	29	;volatile
 11246  1290  0024               	movlb	4	; select bank4
 11247  1291  01A6               	clrf	EOL@_dcnt_418^(0+512)
 11248  1292  2A95               	goto	l614
 11249  1293                     l615:	
 11250  1293  0000               	nop	;# 
 11251  1294  0000               	nop	;# 
 11252  1295                     l614:	
 11253  1295  0024               	movlb	4	; select bank4
 11254  1296  0BA6               	decfsz	EOL@_dcnt_418^(0+512),f
 11255  1297  2A93               	goto	l615
 11256  1298  01A7               	clrf	EOL@_dcnt_419^(0+512)
 11257  1299  2A9C               	goto	l619
 11258  129A                     l620:	
 11259  129A  0000               	nop	;# 
 11260  129B  0000               	nop	;# 
 11261  129C                     l619:	
 11262  129C  0024               	movlb	4	; select bank4
 11263  129D  0BA7               	decfsz	EOL@_dcnt_419^(0+512),f
 11264  129E  2A9A               	goto	l620
 11265  129F  01A8               	clrf	EOL@_dcnt_420^(0+512)
 11266  12A0  2AA3               	goto	l624
 11267  12A1                     l625:	
 11268  12A1  0000               	nop	;# 
 11269  12A2  0000               	nop	;# 
 11270  12A3                     l624:	
 11271  12A3  0024               	movlb	4	; select bank4
 11272  12A4  0BA8               	decfsz	EOL@_dcnt_420^(0+512),f
 11273  12A5  2AA1               	goto	l625
 11274  12A6  01A9               	clrf	EOL@_dcnt_421^(0+512)
 11275  12A7  2AAA               	goto	l629
 11276  12A8                     l630:	
 11277  12A8  0000               	nop	;# 
 11278  12A9  0000               	nop	;# 
 11279  12AA                     l629:	
 11280  12AA  0024               	movlb	4	; select bank4
 11281  12AB  0BA9               	decfsz	EOL@_dcnt_421^(0+512),f
 11282  12AC  2AA8               	goto	l630
 11283  12AD  01AA               	clrf	EOL@_dcnt_422^(0+512)
 11284  12AE  2AB1               	goto	l634
 11285  12AF                     l635:	
 11286  12AF  0000               	nop	;# 
 11287  12B0  0000               	nop	;# 
 11288  12B1                     l634:	
 11289  12B1  0024               	movlb	4	; select bank4
 11290  12B2  0BAA               	decfsz	EOL@_dcnt_422^(0+512),f
 11291  12B3  2AAF               	goto	l635
 11292  12B4  01AB               	clrf	EOL@_dcnt_423^(0+512)
 11293  12B5  2AB8               	goto	l639
 11294  12B6                     l640:	
 11295  12B6  0000               	nop	;# 
 11296  12B7  0000               	nop	;# 
 11297  12B8                     l639:	
 11298  12B8  0024               	movlb	4	; select bank4
 11299  12B9  0BAB               	decfsz	EOL@_dcnt_423^(0+512),f
 11300  12BA  2AB6               	goto	l640
 11301                           
 11302                           ;diag.c: 1096: ADC_Wait();
 11303  12BB  3182  2268  3190   	fcall	_ADC_Wait
 11304                           
 11305                           ;diag.c: 1097: ( GO_nDONE = 1 );
 11306  12BE  0021               	movlb	1	; select bank1
 11307  12BF  149D               	bsf	29,1	;volatile
 11308                           
 11309                           ;diag.c: 1098: ui16_IPhase1_bldc_cal.w = ADC_Read() - ui8_current_cal[0];
 11310  12C0  3182  2281  3190   	fcall	_ADC_Read
 11311  12C3  0831               	movf	?_ADC_Read+1,w
 11312  12C4  0022               	movlb	2	; select bank2
 11313  12C5  00E7               	movwf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
 11314  12C6  0020               	movlb	0	; select bank0
 11315  12C7  0830               	movf	?_ADC_Read,w
 11316  12C8  0022               	movlb	2	; select bank2
 11317  12C9  00E6               	movwf	_ui16_IPhase1_bldc_cal^(0+256)
 11318  12CA  0820               	movf	_ui8_current_cal^(0+256),w
 11319  12CB  02E6               	subwf	_ui16_IPhase1_bldc_cal^(0+256),f
 11320  12CC  1C03               	skipc
 11321  12CD  03E7               	decf	(_ui16_IPhase1_bldc_cal+1)^(0+256),f
 11322                           
 11323                           ;diag.c: 1104: LATB1 = 1;
 11324  12CE  148D               	bsf	13,1	;volatile
 11325                           
 11326                           ;diag.c: 1105: LATC4 = 1;
 11327  12CF  160E               	bsf	14,4	;volatile
 11328                           
 11329                           ;diag.c: 1107: LATC1 = 0;
 11330  12D0  108E               	bcf	14,1	;volatile
 11331                           
 11332                           ;diag.c: 1108: LATC3 = 0;
 11333  12D1  118E               	bcf	14,3	;volatile
 11334                           
 11335                           ;diag.c: 1115: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11336  12D2  3011               	movlw	17
 11337  12D3  0021               	movlb	1	; select bank1
 11338  12D4  009D               	movwf	29	;volatile
 11339  12D5  0024               	movlb	4	; select bank4
 11340  12D6  01AC               	clrf	EOL@_dcnt_424^(0+512)
 11341  12D7  2ADA               	goto	l644
 11342  12D8                     l645:	
 11343  12D8  0000               	nop	;# 
 11344  12D9  0000               	nop	;# 
 11345  12DA                     l644:	
 11346  12DA  0024               	movlb	4	; select bank4
 11347  12DB  0BAC               	decfsz	EOL@_dcnt_424^(0+512),f
 11348  12DC  2AD8               	goto	l645
 11349  12DD  01AD               	clrf	EOL@_dcnt_425^(0+512)
 11350  12DE  2AE1               	goto	l649
 11351  12DF                     l650:	
 11352  12DF  0000               	nop	;# 
 11353  12E0  0000               	nop	;# 
 11354  12E1                     l649:	
 11355  12E1  0024               	movlb	4	; select bank4
 11356  12E2  0BAD               	decfsz	EOL@_dcnt_425^(0+512),f
 11357  12E3  2ADF               	goto	l650
 11358  12E4  01AE               	clrf	EOL@_dcnt_426^(0+512)
 11359  12E5  2AE8               	goto	l654
 11360  12E6                     l655:	
 11361  12E6  0000               	nop	;# 
 11362  12E7  0000               	nop	;# 
 11363  12E8                     l654:	
 11364  12E8  0024               	movlb	4	; select bank4
 11365  12E9  0BAE               	decfsz	EOL@_dcnt_426^(0+512),f
 11366  12EA  2AE6               	goto	l655
 11367  12EB  01AF               	clrf	EOL@_dcnt_427^(0+512)
 11368  12EC  2AEF               	goto	l659
 11369  12ED                     l660:	
 11370  12ED  0000               	nop	;# 
 11371  12EE  0000               	nop	;# 
 11372  12EF                     l659:	
 11373  12EF  0024               	movlb	4	; select bank4
 11374  12F0  0BAF               	decfsz	EOL@_dcnt_427^(0+512),f
 11375  12F1  2AED               	goto	l660
 11376  12F2  01B0               	clrf	EOL@_dcnt_428^(0+512)
 11377  12F3  2AF6               	goto	l664
 11378  12F4                     l665:	
 11379  12F4  0000               	nop	;# 
 11380  12F5  0000               	nop	;# 
 11381  12F6                     l664:	
 11382  12F6  0024               	movlb	4	; select bank4
 11383  12F7  0BB0               	decfsz	EOL@_dcnt_428^(0+512),f
 11384  12F8  2AF4               	goto	l665
 11385  12F9  01B1               	clrf	EOL@_dcnt_429^(0+512)
 11386  12FA  2AFD               	goto	l669
 11387  12FB                     l670:	
 11388  12FB  0000               	nop	;# 
 11389  12FC  0000               	nop	;# 
 11390  12FD                     l669:	
 11391  12FD  0024               	movlb	4	; select bank4
 11392  12FE  0BB1               	decfsz	EOL@_dcnt_429^(0+512),f
 11393  12FF  2AFB               	goto	l670
 11394                           
 11395                           ;diag.c: 1123: ADC_Wait();
 11396  1300  3182  2268  3190   	fcall	_ADC_Wait
 11397                           
 11398                           ;diag.c: 1124: ( GO_nDONE = 1 );
 11399  1303  0021               	movlb	1	; select bank1
 11400  1304  149D               	bsf	29,1	;volatile
 11401                           
 11402                           ;diag.c: 1125: ui16_IPhase3_bldc_cal.w = ADC_Read() - ui8_current_cal[2];
 11403  1305  3182  2281         	fcall	_ADC_Read
 11404  1307  0831               	movf	?_ADC_Read+1,w
 11405  1308  0022               	movlb	2	; select bank2
 11406  1309  00E3               	movwf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
 11407  130A  0020               	movlb	0	; select bank0
 11408  130B  0830               	movf	?_ADC_Read,w
 11409  130C  0022               	movlb	2	; select bank2
 11410  130D  00E2               	movwf	_ui16_IPhase3_bldc_cal^(0+256)
 11411  130E  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 11412  130F  02E2               	subwf	_ui16_IPhase3_bldc_cal^(0+256),f
 11413  1310  1C03               	skipc
 11414  1311  03E3               	decf	(_ui16_IPhase3_bldc_cal+1)^(0+256),f
 11415                           
 11416                           ;diag.c: 1128: LATC = LATC & 0b11100101;
 11417  1312  30E5               	movlw	229
 11418  1313  058E               	andwf	14,f	;volatile
 11419                           
 11420                           ;diag.c: 1131: CCP1CON = 0x0c;
 11421  1314  300C               	movlw	12
 11422  1315  0025               	movlb	5	; select bank5
 11423  1316  0093               	movwf	19	;volatile
 11424                           
 11425                           ;diag.c: 1132: PEIE = 1;
 11426  1317  170B               	bsf	11,6	;volatile
 11427                           
 11428                           ;diag.c: 1133: GIE = 1;
 11429  1318  178B               	bsf	11,7	;volatile
 11430                           
 11431                           ;diag.c: 1136: phaseCal = 1;
 11432  1319  0021               	movlb	1	; select bank1
 11433  131A  01D7               	clrf	_phaseCal^(0+128)
 11434  131B  0AD7               	incf	_phaseCal^(0+128),f
 11435                           
 11436                           ;diag.c: 1139: break;
 11437  131C  0008               	return
 11438  131D                     l13222:	
 11439                           
 11440                           ;diag.c: 1146: {
 11441                           ;diag.c: 1151: write_eeprom_data( 0x02, ( unsigned char )( ( 0x7800 / ui16_IPhase1_bldc_
      +                          cal.w )>>8 ) );
 11442  131D  25FD  3190         	fcall	PL54	;call to abstracted procedure
 11443  131F  25F7  3190         	fcall	PL52	;call to abstracted procedure
 11444  1321  2720  3190         	fcall	___lwdiv
 11445  1323  0831               	movf	?___lwdiv+1,w
 11446  1324  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11447  1325  3002               	movlw	2
 11448  1326  2707  3190         	fcall	_write_eeprom_data
 11449                           
 11450                           ;diag.c: 1152: write_eeprom_data( 0x03, ( unsigned char )( 0x7800 / ui16_IPhase1_bldc_ca
      +                          l.w ) );
 11451  1328  25FD  3190         	fcall	PL54	;call to abstracted procedure
 11452  132A  25F7  3190         	fcall	PL52	;call to abstracted procedure
 11453  132C  2720  3190         	fcall	___lwdiv
 11454  132E  0830               	movf	?___lwdiv,w
 11455  132F  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11456  1330  3003               	movlw	3
 11457  1331  2707               	fcall	_write_eeprom_data
 11458                           
 11459                           ;diag.c: 1155: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03
      +                           );
 11460  1332  3003               	movlw	3
 11461  1333  3182  225D  3190   	fcall	_read_eeprom_data
 11462  1336  00C5               	movwf	??_EOL
 11463  1337  3002               	movlw	2
 11464  1338  3182  225D  3190   	fcall	_read_eeprom_data
 11465  133B  0021               	movlb	1	; select bank1
 11466  133C  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
 11467  133D  0020               	movlb	0	; select bank0
 11468  133E  0845               	movf	??_EOL,w
 11469  133F  0021               	movlb	1	; select bank1
 11470  1340  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
 11471                           
 11472                           ;diag.c: 1167: ui8_b_DResB0_RD = phaseCal;
 11473                           
 11474                           ;diag.c: 1168: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase1_bldc_cal.w * ui16_I
      +                          _cal_Ph1 )>>8 )>>8 );
 11475                           
 11476                           ;diag.c: 1169: ui8_b_DResB2_RD = ( unsigned char )( ( ui16_IPhase1_bldc_cal.w * ui16_I_c
      +                          al_Ph1 )>>8 );
 11477  1341  261C               	fcall	PL82	;call to abstracted procedure
 11478  1342  0867               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
 11479  1343  0020               	movlb	0	; select bank0
 11480  1344  00B1               	movwf	___wmul@multiplier+1
 11481  1345  0022               	movlb	2	; select bank2
 11482  1346  0866               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
 11483  1347  0020               	movlb	0	; select bank0
 11484  1348  00B0               	movwf	___wmul@multiplier
 11485  1349  0021               	movlb	1	; select bank1
 11486  134A  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 11487  134B  0020               	movlb	0	; select bank0
 11488  134C  00B3               	movwf	___wmul@multiplicand+1
 11489  134D  0021               	movlb	1	; select bank1
 11490  134E  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 11491  134F  0020               	movlb	0	; select bank0
 11492  1350  00B2               	movwf	___wmul@multiplicand
 11493  1351  318E  266A  3190   	fcall	___wmul
 11494  1354  0831               	movf	?___wmul+1,w
 11495  1355  0024               	movlb	4	; select bank4
 11496  1356  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 11497                           
 11498                           ;diag.c: 1170: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph1 >> 8);
 11499  1357  0021               	movlb	1	; select bank1
 11500  1358  086D               	movf	(_ui16_I_cal_Ph1^(0+128)+1),w
 11501  1359  0024               	movlb	4	; select bank4
 11502  135A  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 11503                           
 11504                           ;diag.c: 1171: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph1 );
 11505  135B  0021               	movlb	1	; select bank1
 11506  135C  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 11507                           
 11508                           ;diag.c: 1172: ui8_b_DResB5_RD = 0;
 11509  135D  25A1  3190         	fcall	PL8	;call to abstracted procedure
 11510                           
 11511                           ;diag.c: 1177: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11512                           ;diag.c: 1178: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11513                           ;diag.c: 1179: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11514                           ;diag.c: 1180: ui8_b_DResB5_RD );
 11515  135F  2560  3190         	fcall	PL2	;call to abstracted procedure
 11516  1361  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11517  1362  3010               	movlw	16
 11518  1363  2637               	fcall	_Transmit_LIN_8Bytes
 11519                           
 11520                           ;diag.c: 1182: phaseCal = 2;
 11521  1364  3002               	movlw	2
 11522  1365  00D7               	movwf	_phaseCal^(0+128)
 11523                           
 11524                           ;diag.c: 1184: break;
 11525  1366  0008               	return
 11526  1367                     l13242:	
 11527                           
 11528                           ;diag.c: 1191: {
 11529                           ;diag.c: 1195: write_eeprom_data( 0x04, ( unsigned char )( ( 0x7800 / ui16_IPhase2_bldc_
      +                          cal.w )>>8 ) );
 11530  1367  25EB  3190         	fcall	PL50	;call to abstracted procedure
 11531  1369  2720  3190         	fcall	___lwdiv
 11532  136B  0831               	movf	?___lwdiv+1,w
 11533  136C  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11534  136D  3004               	movlw	4
 11535  136E  2707  3190         	fcall	_write_eeprom_data
 11536                           
 11537                           ;diag.c: 1196: write_eeprom_data( 0x05, ( unsigned char )( 0x7800 / ui16_IPhase2_bldc_ca
      +                          l.w ) );
 11538  1370  25EB  3190         	fcall	PL50	;call to abstracted procedure
 11539  1372  2720  3190         	fcall	___lwdiv
 11540  1374  0830               	movf	?___lwdiv,w
 11541  1375  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11542  1376  3005               	movlw	5
 11543  1377  2707               	fcall	_write_eeprom_data
 11544                           
 11545                           ;diag.c: 1199: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05
      +                           );
 11546  1378  3005               	movlw	5
 11547  1379  3182  225D  3190   	fcall	_read_eeprom_data
 11548  137C  00C5               	movwf	??_EOL
 11549  137D  3004               	movlw	4
 11550  137E  3182  225D  3190   	fcall	_read_eeprom_data
 11551  1381  0021               	movlb	1	; select bank1
 11552  1382  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
 11553  1383  0020               	movlb	0	; select bank0
 11554  1384  0845               	movf	??_EOL,w
 11555  1385  0021               	movlb	1	; select bank1
 11556  1386  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
 11557                           
 11558                           ;diag.c: 1211: ui8_b_DResB0_RD = phaseCal;
 11559                           
 11560                           ;diag.c: 1212: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 )>>8 );
 11561                           
 11562                           ;diag.c: 1213: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 ) );
 11563  1387  261C               	fcall	PL82	;call to abstracted procedure
 11564  1388  0865               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
 11565  1389  0020               	movlb	0	; select bank0
 11566  138A  00B1               	movwf	___wmul@multiplier+1
 11567  138B  0022               	movlb	2	; select bank2
 11568  138C  0864               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
 11569  138D  0020               	movlb	0	; select bank0
 11570  138E  00B0               	movwf	___wmul@multiplier
 11571  138F  0021               	movlb	1	; select bank1
 11572  1390  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 11573  1391  0020               	movlb	0	; select bank0
 11574  1392  00B3               	movwf	___wmul@multiplicand+1
 11575  1393  0021               	movlb	1	; select bank1
 11576  1394  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 11577  1395  0020               	movlb	0	; select bank0
 11578  1396  00B2               	movwf	___wmul@multiplicand
 11579  1397  318E  266A  3190   	fcall	___wmul
 11580  139A  0831               	movf	?___wmul+1,w
 11581  139B  0024               	movlb	4	; select bank4
 11582  139C  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 11583                           
 11584                           ;diag.c: 1214: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph2>>8 );
 11585  139D  0021               	movlb	1	; select bank1
 11586  139E  086B               	movf	(_ui16_I_cal_Ph2^(0+128)+1),w
 11587  139F  0024               	movlb	4	; select bank4
 11588  13A0  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 11589                           
 11590                           ;diag.c: 1215: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph2 );
 11591  13A1  0021               	movlb	1	; select bank1
 11592  13A2  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 11593                           
 11594                           ;diag.c: 1216: ui8_b_DResB5_RD = 0;
 11595  13A3  25A1  3190         	fcall	PL8	;call to abstracted procedure
 11596                           
 11597                           ;diag.c: 1221: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11598                           ;diag.c: 1222: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11599                           ;diag.c: 1223: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11600                           ;diag.c: 1224: ui8_b_DResB5_RD );
 11601  13A5  2560  3190         	fcall	PL2	;call to abstracted procedure
 11602  13A7  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11603  13A8  3010               	movlw	16
 11604  13A9  2637               	fcall	_Transmit_LIN_8Bytes
 11605                           
 11606                           ;diag.c: 1227: phaseCal = 3;
 11607  13AA  3003               	movlw	3
 11608  13AB  00D7               	movwf	_phaseCal^(0+128)
 11609                           
 11610                           ;diag.c: 1229: break;
 11611  13AC  0008               	return
 11612  13AD                     l13262:	
 11613                           
 11614                           ;diag.c: 1236: {
 11615                           ;diag.c: 1240: write_eeprom_data( 0x06, ( unsigned char )( ( 0x7800 / ui16_IPhase3_bldc_
      +                          cal.w )>>8 ) );
 11616  13AD  2604  3190         	fcall	PL56	;call to abstracted procedure
 11617  13AF  25F7  3190         	fcall	PL52	;call to abstracted procedure
 11618  13B1  2720  3190         	fcall	___lwdiv
 11619  13B3  0831               	movf	?___lwdiv+1,w
 11620  13B4  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11621  13B5  3006               	movlw	6
 11622  13B6  2707  3190         	fcall	_write_eeprom_data
 11623                           
 11624                           ;diag.c: 1241: write_eeprom_data( 0x07, ( unsigned char )( 0x7800 / ui16_IPhase3_bldc_ca
      +                          l.w ) );
 11625  13B8  2604  3190         	fcall	PL56	;call to abstracted procedure
 11626  13BA  25F7  3190         	fcall	PL52	;call to abstracted procedure
 11627  13BC  2720  3190         	fcall	___lwdiv
 11628  13BE  0830               	movf	?___lwdiv,w
 11629  13BF  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11630  13C0  3007               	movlw	7
 11631  13C1  2707               	fcall	_write_eeprom_data
 11632                           
 11633                           ;diag.c: 1245: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07
      +                           );
 11634  13C2  3007               	movlw	7
 11635  13C3  3182  225D  3190   	fcall	_read_eeprom_data
 11636  13C6  00C5               	movwf	??_EOL
 11637  13C7  3006               	movlw	6
 11638  13C8  3182  225D  3190   	fcall	_read_eeprom_data
 11639  13CB  0021               	movlb	1	; select bank1
 11640  13CC  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
 11641  13CD  0020               	movlb	0	; select bank0
 11642  13CE  0845               	movf	??_EOL,w
 11643  13CF  0021               	movlb	1	; select bank1
 11644  13D0  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
 11645                           
 11646                           ;diag.c: 1258: ui8_b_DResB0_RD = phaseCal;
 11647                           
 11648                           ;diag.c: 1259: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 )>>8 );
 11649                           
 11650                           ;diag.c: 1260: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 ) );
 11651  13D1  261C               	fcall	PL82	;call to abstracted procedure
 11652  13D2  0863               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
 11653  13D3  0020               	movlb	0	; select bank0
 11654  13D4  00B1               	movwf	___wmul@multiplier+1
 11655  13D5  0022               	movlb	2	; select bank2
 11656  13D6  0862               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
 11657  13D7  0020               	movlb	0	; select bank0
 11658  13D8  00B0               	movwf	___wmul@multiplier
 11659  13D9  0021               	movlb	1	; select bank1
 11660  13DA  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 11661  13DB  0020               	movlb	0	; select bank0
 11662  13DC  00B3               	movwf	___wmul@multiplicand+1
 11663  13DD  0021               	movlb	1	; select bank1
 11664  13DE  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 11665  13DF  0020               	movlb	0	; select bank0
 11666  13E0  00B2               	movwf	___wmul@multiplicand
 11667  13E1  318E  266A  3190   	fcall	___wmul
 11668  13E4  0831               	movf	?___wmul+1,w
 11669  13E5  0024               	movlb	4	; select bank4
 11670  13E6  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 11671                           
 11672                           ;diag.c: 1261: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph3>>8 );
 11673  13E7  0021               	movlb	1	; select bank1
 11674  13E8  0869               	movf	(_ui16_I_cal_Ph3^(0+128)+1),w
 11675  13E9  0024               	movlb	4	; select bank4
 11676  13EA  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 11677                           
 11678                           ;diag.c: 1262: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph3 );
 11679  13EB  0021               	movlb	1	; select bank1
 11680  13EC  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 11681                           
 11682                           ;diag.c: 1263: ui8_b_DResB5_RD = 0;
 11683  13ED  25A1  3190         	fcall	PL8	;call to abstracted procedure
 11684                           
 11685                           ;diag.c: 1267: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11686                           ;diag.c: 1268: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11687                           ;diag.c: 1269: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11688                           ;diag.c: 1270: ui8_b_DResB5_RD );
 11689  13EF  2560  3190         	fcall	PL2	;call to abstracted procedure
 11690  13F1  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11691  13F2  3010               	movlw	16
 11692  13F3  2637               	fcall	_Transmit_LIN_8Bytes
 11693                           
 11694                           ;diag.c: 1271: ui8_selected_lid = 0x98;
 11695  13F4  3098               	movlw	152
 11696  13F5  0020               	movlb	0	; select bank0
 11697  13F6  00D9               	movwf	_ui8_selected_lid
 11698                           
 11699                           ;diag.c: 1274: break;
 11700  13F7  0008               	return
 11701  13F8                     l13282:	
 11702                           
 11703                           ;diag.c: 1281: {
 11704                           ;diag.c: 1283: NegativeAnswer(ui8_b_DResLocID_c);
 11705  13F8  0020               	movlb	0	; select bank0
 11706  13F9  0855               	movf	_ui8_b_DResLocID_c,w
 11707  13FA  2E27               	ljmp	_NegativeAnswer
 11708  13FB                     l13284:	
 11709                           ;diag.c: 1285: }
 11710                           ;diag.c: 1287: }
 11711                           
 11712  13FB  0021               	movlb	1	; select bank1
 11713  13FC  0857               	movf	_phaseCal^(0+128),w
 11714                           
 11715                           ; Switch size 1, requested type "space"
 11716                           ; Number of cases is 4, Range of values is 0 to 3
 11717                           ; switch strategies available:
 11718                           ; Name         Instructions Cycles
 11719                           ; simple_byte           13     7 (average)
 11720                           ; direct_byte           14     6 (fixed)
 11721                           ; jumptable            260     6 (fixed)
 11722                           ;	Chosen strategy is simple_byte
 11723  13FD  3A00               	xorlw	0	; case 0
 11724  13FE  1903               	skipnz
 11725  13FF  2A3C               	goto	l13124
 11726  1400  3A01               	xorlw	1	; case 1
 11727  1401  1903               	skipnz
 11728  1402  2B1D               	goto	l13222
 11729  1403  3A03               	xorlw	3	; case 2
 11730  1404  1903               	skipnz
 11731  1405  2B67               	goto	l13242
 11732  1406  3A01               	xorlw	1	; case 3
 11733  1407  1903               	skipnz
 11734  1408  2BAD               	goto	l13262
 11735  1409  2BF8               	goto	l13282
 11736  140A                     l13286:	
 11737                           
 11738                           ;diag.c: 1293: else
 11739                           ;diag.c: 1294: {
 11740                           ;diag.c: 1296: NegativeAnswer(ui8_b_DResLocID_c);
 11741  140A  0855               	movf	_ui8_b_DResLocID_c,w
 11742  140B  2E27               	ljmp	_NegativeAnswer
 11743  140C                     l13288:	
 11744                           
 11745                           ;diag.c: 1311: {
 11746                           ;diag.c: 1313: if( 0x98 == ui8_selected_lid )
 11747  140C  3098               	movlw	152
 11748  140D  0659               	xorwf	_ui8_selected_lid,w
 11749  140E  1D03               	btfss	3,2
 11750  140F  0008               	return
 11751                           
 11752                           ;diag.c: 1315: {
 11753                           ;diag.c: 1328: wkpoint = ui8_b_DResB0_c;
 11754  1410  0854               	movf	_ui8_b_DResB0_c,w
 11755  1411  0021               	movlb	1	; select bank1
 11756  1412  00EE               	movwf	_wkpoint^(0+128)
 11757                           
 11758                           ;diag.c: 1953: break;
 11759                           
 11760                           ;diag.c: 1334: switch( ui8_b_DResB0_c )
 11761  1413  0020               	movlb	0	; select bank0
 11762  1414  0854               	movf	_ui8_b_DResB0_c,w
 11763                           
 11764                           ; Switch size 1, requested type "space"
 11765                           ; Number of cases is 4, Range of values is 1 to 5
 11766                           ; switch strategies available:
 11767                           ; Name         Instructions Cycles
 11768                           ; simple_byte           13     7 (average)
 11769                           ; direct_byte           19     9 (fixed)
 11770                           ; jumptable            263     9 (fixed)
 11771                           ;	Chosen strategy is simple_byte
 11772  1415  3A01               	xorlw	1	; case 1
 11773  1416  1903               	skipnz
 11774  1417  2C22               	goto	l13292
 11775  1418  3A02               	xorlw	2	; case 3
 11776  1419  1903               	skipnz
 11777  141A  2C40               	goto	l13314
 11778  141B  3A07               	xorlw	7	; case 4
 11779  141C  1903               	skipnz
 11780  141D  2C5E               	goto	l13336
 11781  141E  3A01               	xorlw	1	; case 5
 11782  141F  1903               	skipnz
 11783  1420  2C7C               	goto	l13358
 11784  1421  2C9A               	goto	l13380
 11785  1422                     l13292:	
 11786                           
 11787                           ;diag.c: 1342: {
 11788                           ;diag.c: 1344: if( wkpoint == ui8_b_DResB0_c )
 11789  1422  2622  3190         	fcall	PL110	;call to abstracted procedure
 11790  1424  1D03               	skipz
 11791  1425  0008               	return
 11792                           
 11793                           ;diag.c: 1346: {
 11794                           ;diag.c: 1348: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11795  1426  0854               	movf	_ui8_b_DResB0_c,w
 11796  1427  0024               	movlb	4	; select bank4
 11797  1428  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11798                           
 11799                           ;diag.c: 1349: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11800  1429  2745  3190         	fcall	_PWMReadDC
 11801                           
 11802                           ;diag.c: 1350: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11803  142B  25C8               	fcall	PL14	;call to abstracted procedure
 11804  142C  318E  266A  3190   	fcall	___wmul
 11805                           
 11806                           ;diag.c: 1351: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11807                           
 11808                           ;diag.c: 1352: ui8_b_DResB4_RD = 0;
 11809                           
 11810                           ;diag.c: 1353: ui8_b_DResB5_RD = 0;
 11811                           
 11812                           ;diag.c: 1356: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11813  142F  257C  3190         	fcall	PL4	;call to abstracted procedure
 11814  1431  1803               	skipnc
 11815  1432  2C3D               	goto	l13312
 11816  1433  25A6  3190         	fcall	PL10	;call to abstracted procedure
 11817  1435  1803               	skipnc
 11818  1436  2C3D               	goto	l13312
 11819                           
 11820                           ;diag.c: 1358: {
 11821                           ;diag.c: 1360: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 11822  1437  303A               	movlw	58
 11823  1438  2560  3190         	fcall	PL2	;call to abstracted procedure
 11824  143A  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11825  143B  3010               	movlw	16
 11826  143C  2E37               	ljmp	_Transmit_LIN_8Bytes
 11827  143D                     l13312:	
 11828                           ;diag.c: 1363: }
 11829                           
 11830                           
 11831                           ;diag.c: 1366: else
 11832                           ;diag.c: 1367: {
 11833                           ;diag.c: 1369: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11834  143D  25BA  3190         	fcall	PL12	;call to abstracted procedure
 11835  143F  2E37               	ljmp	_Transmit_LIN_8Bytes
 11836  1440                     l13314:	
 11837                           
 11838                           ;diag.c: 1519: {
 11839                           ;diag.c: 1521: if( wkpoint == ui8_b_DResB0_c )
 11840  1440  2622  3190         	fcall	PL110	;call to abstracted procedure
 11841  1442  1D03               	skipz
 11842  1443  0008               	return
 11843                           
 11844                           ;diag.c: 1523: {
 11845                           ;diag.c: 1525: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11846  1444  0854               	movf	_ui8_b_DResB0_c,w
 11847  1445  0024               	movlb	4	; select bank4
 11848  1446  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11849                           
 11850                           ;diag.c: 1526: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11851  1447  2745  3190         	fcall	_PWMReadDC
 11852                           
 11853                           ;diag.c: 1527: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11854  1449  25C8               	fcall	PL14	;call to abstracted procedure
 11855  144A  318E  266A  3190   	fcall	___wmul
 11856                           
 11857                           ;diag.c: 1528: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11858                           
 11859                           ;diag.c: 1529: ui8_b_DResB4_RD = 0;
 11860                           
 11861                           ;diag.c: 1530: ui8_b_DResB5_RD = 0;
 11862                           
 11863                           ;diag.c: 1534: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11864  144D  257C  3190         	fcall	PL4	;call to abstracted procedure
 11865  144F  1803               	skipnc
 11866  1450  2C5B               	goto	l13334
 11867  1451  25A6  3190         	fcall	PL10	;call to abstracted procedure
 11868  1453  1803               	skipnc
 11869  1454  2C5B               	goto	l13334
 11870                           
 11871                           ;diag.c: 1536: {
 11872                           ;diag.c: 1538: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 11873                           ;diag.c: 1539: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 11874                           ;diag.c: 1540: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 11875                           ;diag.c: 1541: ui8_b_DResB4_RD,
 11876                           ;diag.c: 1542: ui8_b_DResB5_RD );
 11877  1455  303A               	movlw	58
 11878  1456  2560  3190         	fcall	PL2	;call to abstracted procedure
 11879  1458  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11880  1459  3010               	movlw	16
 11881  145A  2E37               	ljmp	_Transmit_LIN_8Bytes
 11882  145B                     l13334:	
 11883                           ;diag.c: 1545: }
 11884                           
 11885                           
 11886                           ;diag.c: 1548: else
 11887                           ;diag.c: 1549: {
 11888                           ;diag.c: 1551: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11889  145B  25BA  3190         	fcall	PL12	;call to abstracted procedure
 11890  145D  2E37               	ljmp	_Transmit_LIN_8Bytes
 11891  145E                     l13336:	
 11892                           
 11893                           ;diag.c: 1607: {
 11894                           ;diag.c: 1609: if( wkpoint == ui8_b_DResB0_c )
 11895  145E  2622  3190         	fcall	PL110	;call to abstracted procedure
 11896  1460  1D03               	skipz
 11897  1461  0008               	return
 11898                           
 11899                           ;diag.c: 1611: {
 11900                           ;diag.c: 1613: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11901  1462  0854               	movf	_ui8_b_DResB0_c,w
 11902  1463  0024               	movlb	4	; select bank4
 11903  1464  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11904                           
 11905                           ;diag.c: 1614: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11906  1465  2745  3190         	fcall	_PWMReadDC
 11907                           
 11908                           ;diag.c: 1615: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11909  1467  25C8               	fcall	PL14	;call to abstracted procedure
 11910  1468  318E  266A  3190   	fcall	___wmul
 11911                           
 11912                           ;diag.c: 1616: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11913                           
 11914                           ;diag.c: 1617: ui8_b_DResB4_RD = 0;
 11915                           
 11916                           ;diag.c: 1618: ui8_b_DResB5_RD = 0;
 11917                           
 11918                           ;diag.c: 1622: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11919  146B  257C  3190         	fcall	PL4	;call to abstracted procedure
 11920  146D  1803               	skipnc
 11921  146E  2C79               	goto	l13356
 11922  146F  25A6  3190         	fcall	PL10	;call to abstracted procedure
 11923  1471  1803               	skipnc
 11924  1472  2C79               	goto	l13356
 11925                           
 11926                           ;diag.c: 1624: {
 11927                           ;diag.c: 1626: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 11928                           ;diag.c: 1627: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 11929                           ;diag.c: 1628: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 11930                           ;diag.c: 1629: ui8_b_DResB4_RD,
 11931                           ;diag.c: 1630: ui8_b_DResB5_RD );
 11932  1473  303A               	movlw	58
 11933  1474  2560  3190         	fcall	PL2	;call to abstracted procedure
 11934  1476  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11935  1477  3010               	movlw	16
 11936  1478  2E37               	ljmp	_Transmit_LIN_8Bytes
 11937  1479                     l13356:	
 11938                           ;diag.c: 1633: }
 11939                           
 11940                           
 11941                           ;diag.c: 1636: else
 11942                           ;diag.c: 1637: {
 11943                           ;diag.c: 1639: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11944  1479  25BA  3190         	fcall	PL12	;call to abstracted procedure
 11945  147B  2E37               	ljmp	_Transmit_LIN_8Bytes
 11946  147C                     l13358:	
 11947                           
 11948                           ;diag.c: 1693: {
 11949                           ;diag.c: 1695: if( wkpoint == ui8_b_DResB0_c )
 11950  147C  2622  3190         	fcall	PL110	;call to abstracted procedure
 11951  147E  1D03               	skipz
 11952  147F  0008               	return
 11953                           
 11954                           ;diag.c: 1697: {
 11955                           ;diag.c: 1699: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11956  1480  0854               	movf	_ui8_b_DResB0_c,w
 11957  1481  0024               	movlb	4	; select bank4
 11958  1482  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11959                           
 11960                           ;diag.c: 1700: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11961  1483  2745  3190         	fcall	_PWMReadDC
 11962                           
 11963                           ;diag.c: 1701: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11964  1485  25C8               	fcall	PL14	;call to abstracted procedure
 11965  1486  318E  266A  3190   	fcall	___wmul
 11966                           
 11967                           ;diag.c: 1702: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11968                           
 11969                           ;diag.c: 1703: ui8_b_DResB4_RD = 0;
 11970                           
 11971                           ;diag.c: 1704: ui8_b_DResB5_RD = 0;
 11972                           
 11973                           ;diag.c: 1707: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11974  1489  257C  3190         	fcall	PL4	;call to abstracted procedure
 11975  148B  1803               	skipnc
 11976  148C  2C97               	goto	l13378
 11977  148D  25A6  3190         	fcall	PL10	;call to abstracted procedure
 11978  148F  1803               	skipnc
 11979  1490  2C97               	goto	l13378
 11980                           
 11981                           ;diag.c: 1709: {
 11982                           ;diag.c: 1711: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 11983                           ;diag.c: 1712: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 11984                           ;diag.c: 1713: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 11985                           ;diag.c: 1714: ui8_b_DResB4_RD,
 11986                           ;diag.c: 1715: ui8_b_DResB5_RD );
 11987  1491  303A               	movlw	58
 11988  1492  2560  3190         	fcall	PL2	;call to abstracted procedure
 11989  1494  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11990  1495  3010               	movlw	16
 11991  1496  2E37               	ljmp	_Transmit_LIN_8Bytes
 11992  1497                     l13378:	
 11993                           ;diag.c: 1718: }
 11994                           
 11995                           
 11996                           ;diag.c: 1721: else
 11997                           ;diag.c: 1722: {
 11998                           ;diag.c: 1724: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11999  1497  25BA  3190         	fcall	PL12	;call to abstracted procedure
 12000  1499  2E37               	ljmp	_Transmit_LIN_8Bytes
 12001  149A                     l13380:	
 12002                           
 12003                           ;diag.c: 1948: {
 12004                           ;diag.c: 1952: NegativeAnswer(ui8_b_DResLocID_c);
 12005  149A  0855               	movf	_ui8_b_DResLocID_c,w
 12006  149B  2E27               	ljmp	_NegativeAnswer
 12007  149C                     l13386:	
 12008                           
 12009                           ;diag.c: 1992: {
 12010                           ;diag.c: 1994: if( 0x9f == ui8_selected_lid )
 12011  149C  309F               	movlw	159
 12012  149D  0659               	xorwf	_ui8_selected_lid,w
 12013  149E  1D03               	btfss	3,2
 12014  149F  0008               	return
 12015                           
 12016                           ;diag.c: 1996: {
 12017                           ;diag.c: 2000: ui8_failure = ui8_b_DResB0_c;
 12018  14A0  0854               	movf	_ui8_b_DResB0_c,w
 12019  14A1  0022               	movlb	2	; select bank2
 12020  14A2  00EE               	movwf	_ui8_failure^(0+256)
 12021                           
 12022                           ;diag.c: 2005: switch (ui8_failure)
 12023  14A3  2CD1               	goto	l13458
 12024  14A4                     l13390:	
 12025                           
 12026                           ;diag.c: 2098: {
 12027                           ;diag.c: 2102: PWM_Write_Out( 55 );
 12028  14A4  3037               	movlw	55
 12029  14A5  255B  3190         	fcall	_PWM_Write_Out
 12030                           
 12031                           ;diag.c: 2103: ui8_error_Flags.bits.B0 = 0;
 12032  14A7  0021               	movlb	1	; select bank1
 12033  14A8  3037               	movlw	55
 12034  14A9  1066               	bcf	_ui8_error_Flags^(0+128),0
 12035                           
 12036                           ;diag.c: 2104: ui8_error_Flags.bits.B1 = 0;
 12037  14AA  10E6               	bcf	_ui8_error_Flags^(0+128),1
 12038                           
 12039                           ;diag.c: 2105: ui8_error_Flags.bits.B7 = 0;
 12040  14AB  13E6               	bcf	_ui8_error_Flags^(0+128),7
 12041                           
 12042                           ;diag.c: 2106: ui8_error_Flags.bits.B2 = 0;
 12043  14AC  1166               	bcf	_ui8_error_Flags^(0+128),2
 12044                           
 12045                           ;diag.c: 2107: ui8_error_Flags.bits.B3 = 1;
 12046  14AD  15E6               	bsf	_ui8_error_Flags^(0+128),3
 12047                           
 12048                           ;diag.c: 2108: ui8_error_Flags.bits.B4 = 0;
 12049  14AE  1266               	bcf	_ui8_error_Flags^(0+128),4
 12050                           
 12051                           ;diag.c: 2109: ui8_error_Flags.bits.B6 = 0;
 12052  14AF  1366               	bcf	_ui8_error_Flags^(0+128),6
 12053                           
 12054                           ;diag.c: 2110: ui8_error_Flags.bits.B5 = 0;
 12055  14B0  12E6               	bcf	_ui8_error_Flags^(0+128),5
 12056                           
 12057                           ;diag.c: 2111: ui8_b_DResB1_RD = 55;
 12058  14B1  0024               	movlb	4	; select bank4
 12059  14B2  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 12060                           
 12061                           ;diag.c: 2112: ui8_b_DResB0_RD = 8;
 12062  14B3  3008               	movlw	8
 12063  14B4  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 12064                           
 12065                           ;diag.c: 2113: ui8_failure = 3;
 12066  14B5  3003               	movlw	3
 12067  14B6  0022               	movlb	2	; select bank2
 12068  14B7  00EE               	movwf	_ui8_failure^(0+256)
 12069                           
 12070                           ;diag.c: 2114: break;
 12071  14B8  2CD9               	goto	l13460
 12072  14B9                     l13414:	
 12073                           
 12074                           ;diag.c: 2151: {
 12075                           ;diag.c: 2155: PWM_Write_Out( 77 );
 12076  14B9  304D               	movlw	77
 12077  14BA  255B  3190         	fcall	_PWM_Write_Out
 12078                           
 12079                           ;diag.c: 2156: ui8_error_Flags.bits.B0 = 0;
 12080  14BC  0021               	movlb	1	; select bank1
 12081  14BD  304D               	movlw	77
 12082                           
 12083                           ;diag.c: 2157: ui8_error_Flags.bits.B1 = 0;
 12084                           
 12085                           ;diag.c: 2158: ui8_error_Flags.bits.B7 = 0;
 12086                           
 12087                           ;diag.c: 2159: ui8_error_Flags.bits.B2 = 0;
 12088                           
 12089                           ;diag.c: 2160: ui8_error_Flags.bits.B3 = 0;
 12090                           
 12091                           ;diag.c: 2161: ui8_error_Flags.bits.B4 = 0;
 12092                           
 12093                           ;diag.c: 2162: ui8_error_Flags.bits.B6 = 0;
 12094  14BE  2614  3190         	fcall	PL78	;call to abstracted procedure
 12095                           
 12096                           ;diag.c: 2163: ui8_error_Flags.bits.B5 = 1;
 12097  14C0  16E6               	bsf	_ui8_error_Flags^(0+128),5
 12098                           
 12099                           ;diag.c: 2165: ui8_b_DResB1_RD = 77;
 12100  14C1  0024               	movlb	4	; select bank4
 12101  14C2  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 12102                           
 12103                           ;diag.c: 2166: ui8_b_DResB0_RD= 1;
 12104  14C3  01B4               	clrf	EOL@ui8_b_DResB0_RD^(0+512)
 12105  14C4  0AB4               	incf	EOL@ui8_b_DResB0_RD^(0+512),f
 12106                           
 12107                           ;diag.c: 2167: ui8_failure = 1;
 12108  14C5  0022               	movlb	2	; select bank2
 12109  14C6  01EE               	clrf	_ui8_failure^(0+256)
 12110  14C7  0AEE               	incf	_ui8_failure^(0+256),f
 12111                           
 12112                           ;diag.c: 2168: break;
 12113  14C8  2CD9               	goto	l13460
 12114  14C9                     l13438:	
 12115                           
 12116                           ;diag.c: 2205: {
 12117                           ;diag.c: 2209: PWM_Write_Out( 11 );
 12118  14C9  300B               	movlw	11
 12119  14CA  255B  3190         	fcall	_PWM_Write_Out
 12120                           
 12121                           ;diag.c: 2210: ui8_error_Flags.bits.B0 = 0;
 12122  14CC  0021               	movlb	1	; select bank1
 12123                           
 12124                           ;diag.c: 2211: ui8_error_Flags.bits.B1 = 0;
 12125                           
 12126                           ;diag.c: 2212: ui8_error_Flags.bits.B7 = 0;
 12127                           
 12128                           ;diag.c: 2213: ui8_error_Flags.bits.B2 = 0;
 12129                           
 12130                           ;diag.c: 2214: ui8_error_Flags.bits.B3 = 0;
 12131                           
 12132                           ;diag.c: 2215: ui8_error_Flags.bits.B4 = 0;
 12133                           
 12134                           ;diag.c: 2216: ui8_error_Flags.bits.B6 = 0;
 12135  14CD  2614  3190         	fcall	PL78	;call to abstracted procedure
 12136                           
 12137                           ;diag.c: 2217: ui8_error_Flags.bits.B5 = 0;
 12138  14CF  12E6               	bcf	_ui8_error_Flags^(0+128),5
 12139                           
 12140                           ;diag.c: 2218: break;
 12141  14D0  2CD9               	goto	l13460
 12142  14D1                     l13458:	
 12143  14D1  086E               	movf	_ui8_failure^(0+256),w
 12144                           
 12145                           ; Switch size 1, requested type "space"
 12146                           ; Number of cases is 2, Range of values is 2 to 4
 12147                           ; switch strategies available:
 12148                           ; Name         Instructions Cycles
 12149                           ; simple_byte            7     4 (average)
 12150                           ; direct_byte           15     9 (fixed)
 12151                           ; jumptable            263     9 (fixed)
 12152                           ;	Chosen strategy is simple_byte
 12153  14D2  3A02               	xorlw	2	; case 2
 12154  14D3  1903               	skipnz
 12155  14D4  2CB9               	goto	l13414
 12156  14D5  3A06               	xorlw	6	; case 4
 12157  14D6  1903               	skipnz
 12158  14D7  2CA4               	goto	l13390
 12159  14D8  2CC9               	goto	l13438
 12160  14D9                     l13460:	
 12161                           
 12162                           ;diag.c: 2231: ui8_b_DResB2_RD = 0;
 12163  14D9  0024               	movlb	4	; select bank4
 12164  14DA  303A               	movlw	58
 12165  14DB  01B6               	clrf	EOL@ui8_b_DResB2_RD^(0+512)
 12166                           
 12167                           ;diag.c: 2232: ui8_b_DResB3_RD = 0;
 12168  14DC  01B7               	clrf	EOL@ui8_b_DResB3_RD^(0+512)
 12169                           
 12170                           ;diag.c: 2233: ui8_b_DResB4_RD = 0;
 12171  14DD  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
 12172                           
 12173                           ;diag.c: 2234: ui8_b_DResB5_RD = 0;
 12174  14DE  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 12175                           
 12176                           ;diag.c: 2237: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 12177                           ;diag.c: 2238: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 12178                           ;diag.c: 2239: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 12179                           ;diag.c: 2240: ui8_b_DResB5_RD );
 12180  14DF  2560  3190         	fcall	PL2	;call to abstracted procedure
 12181  14E1  00C2               	movwf	Transmit_LIN_8Bytes@B7
 12182  14E2  3010               	movlw	16
 12183  14E3  2E37               	ljmp	_Transmit_LIN_8Bytes
 12184  14E4                     l13464:	
 12185                           ;diag.c: 2243: }
 12186                           
 12187                           
 12188                           ;diag.c: 2271: {
 12189                           ;diag.c: 2273: if( 0xa0 == ui8_selected_lid )
 12190  14E4  30A0               	movlw	160
 12191  14E5  0659               	xorwf	_ui8_selected_lid,w
 12192  14E6  1D03               	btfss	3,2
 12193  14E7  0008               	return
 12194                           
 12195                           ;diag.c: 2275: {
 12196                           ;diag.c: 2285: write_eeprom_data( 0xf4, ui8_b_DResB0_c );
 12197  14E8  0854               	movf	_ui8_b_DResB0_c,w
 12198  14E9  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12199  14EA  30F4               	movlw	244
 12200  14EB  2707  3190         	fcall	_write_eeprom_data
 12201                           
 12202                           ;diag.c: 2286: write_eeprom_data( 0xf5, ui8_b_DResB1_c );
 12203  14ED  0022               	movlb	2	; select bank2
 12204  14EE  0860               	movf	_ui8_b_DResB1_c^(0+256),w
 12205  14EF  0020               	movlb	0	; select bank0
 12206  14F0  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12207  14F1  30F5               	movlw	245
 12208  14F2  2707  3190         	fcall	_write_eeprom_data
 12209                           
 12210                           ;diag.c: 2287: write_eeprom_data( 0xf6, ui8_b_DResB2_c );
 12211  14F4  0022               	movlb	2	; select bank2
 12212  14F5  085F               	movf	_ui8_b_DResB2_c^(0+256),w
 12213  14F6  0020               	movlb	0	; select bank0
 12214  14F7  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12215  14F8  30F6               	movlw	246
 12216  14F9  2707  3190         	fcall	_write_eeprom_data
 12217                           
 12218                           ;diag.c: 2288: write_eeprom_data( 0xf7, ui8_b_DResB3_c );
 12219  14FB  0022               	movlb	2	; select bank2
 12220  14FC  085E               	movf	_ui8_b_DResB3_c^(0+256),w
 12221  14FD  0020               	movlb	0	; select bank0
 12222  14FE  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12223  14FF  30F7               	movlw	247
 12224  1500  2707  3190         	fcall	_write_eeprom_data
 12225                           
 12226                           ;diag.c: 2289: write_eeprom_data( 0xf8, ui8_b_DResB4_c );
 12227  1502  0022               	movlb	2	; select bank2
 12228  1503  085D               	movf	_ui8_b_DResB4_c^(0+256),w
 12229  1504  0020               	movlb	0	; select bank0
 12230  1505  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12231  1506  30F8               	movlw	248
 12232  1507  2707               	fcall	_write_eeprom_data
 12233                           
 12234                           ;diag.c: 2301: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
 12235  1508  30F4               	movlw	244
 12236  1509  3182  225D  3190   	fcall	_read_eeprom_data
 12237  150C  0024               	movlb	4	; select bank4
 12238  150D  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 12239                           
 12240                           ;diag.c: 2302: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
 12241  150E  30F5               	movlw	245
 12242  150F  3182  225D  3190   	fcall	_read_eeprom_data
 12243  1512  0024               	movlb	4	; select bank4
 12244  1513  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 12245                           
 12246                           ;diag.c: 2303: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
 12247  1514  30F6               	movlw	246
 12248  1515  3182  225D  3190   	fcall	_read_eeprom_data
 12249  1518  0024               	movlb	4	; select bank4
 12250  1519  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 12251                           
 12252                           ;diag.c: 2304: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
 12253  151A  30F7               	movlw	247
 12254  151B  3182  225D  3190   	fcall	_read_eeprom_data
 12255  151E  0024               	movlb	4	; select bank4
 12256  151F  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 12257                           
 12258                           ;diag.c: 2305: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
 12259  1520  30F8               	movlw	248
 12260  1521  3182  225D  3190   	fcall	_read_eeprom_data
 12261  1524  0024               	movlb	4	; select bank4
 12262  1525  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 12263                           
 12264                           ;diag.c: 2306: ui8_b_DResB5_RD = 0;
 12265  1526  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 12266                           
 12267                           ;diag.c: 2309: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DRes
      +                          B2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF))
 12268  1527  0A34               	incf	EOL@ui8_b_DResB0_RD^(0+512),w
 12269  1528  1903               	btfsc	3,2
 12270  1529  2D3A               	goto	l13492
 12271  152A  0A35               	incf	EOL@ui8_b_DResB1_RD^(0+512),w
 12272  152B  1903               	btfsc	3,2
 12273  152C  2D3A               	goto	l13492
 12274  152D  0A36               	incf	EOL@ui8_b_DResB2_RD^(0+512),w
 12275  152E  1903               	btfsc	3,2
 12276  152F  2D3A               	goto	l13492
 12277  1530  0A37               	incf	EOL@ui8_b_DResB3_RD^(0+512),w
 12278  1531  1903               	btfsc	3,2
 12279  1532  2D3A               	goto	l13492
 12280  1533  0A33               	incf	EOL@ui8_b_DResB4_RD^(0+512),w
 12281  1534  1903               	btfsc	3,2
 12282  1535  2D3A               	goto	l13492
 12283                           
 12284                           ;diag.c: 2311: {
 12285                           ;diag.c: 2313: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 12286  1536  303A               	movlw	58
 12287  1537  2560  3190         	fcall	PL2	;call to abstracted procedure
 12288  1539  2D3D               	goto	L17
 12289  153A                     l13492:	
 12290                           ;diag.c: 2316: }
 12291                           
 12292                           
 12293                           ;diag.c: 2319: else
 12294                           ;diag.c: 2320: {
 12295                           ;diag.c: 2322: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF,0xFF
      +                          , 0xFF, 0xFF );
 12296  153A  307F               	movlw	127
 12297  153B  25D7  3190         	fcall	PL18	;call to abstracted procedure
 12298  153D                     L17:	
 12299  153D  00C2               	movwf	Transmit_LIN_8Bytes@B7
 12300  153E  3010               	movlw	16
 12301  153F  2637               	fcall	_Transmit_LIN_8Bytes
 12302                           
 12303                           ;diag.c: 2332: }
 12304                           ;diag.c: 2336: ui8_selected_lid = 0xfa;
 12305  1540  30FA               	movlw	250
 12306  1541  0020               	movlb	0	; select bank0
 12307  1542  00D9               	movwf	_ui8_selected_lid
 12308                           
 12309                           ;diag.c: 2339: }
 12310  1543  0008               	return
 12311  1544                     l13496:	
 12312                           
 12313                           ;diag.c: 2365: {
 12314                           ;diag.c: 2367: if( 0xfa == ui8_selected_lid )
 12315  1544  30FA               	movlw	250
 12316  1545  0659               	xorwf	_ui8_selected_lid,w
 12317  1546  1D03               	btfss	3,2
 12318  1547  0008               	return
 12319                           
 12320                           ;diag.c: 2369: {
 12321                           ;diag.c: 2371: Transmit_LIN_8Bytes( 0x10, 0x3a, ui8_b_DResLocID_c, 0x00, 0x00, 0x00, 0x0
      +                          0, 0x00, 0x00 );
 12322  1548  303A               	movlw	58
 12323  1549  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12324  154A  0855               	movf	_ui8_b_DResLocID_c,w
 12325  154B  260B  3190         	fcall	PL74	;call to abstracted procedure
 12326  154D  2637  3190         	fcall	_Transmit_LIN_8Bytes
 12327                           
 12328                           ;diag.c: 2372: write_eeprom_data(0x55,0x55);
 12329  154F  3055               	movlw	85
 12330  1550  0020               	movlb	0	; select bank0
 12331  1551  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12332  1552  2707               	fcall	_write_eeprom_data
 12333                           
 12334                           ;diag.c: 2373: RC5 = 0;
 12335  1553  0020               	movlb	0	; select bank0
 12336  1554  128E               	bcf	14,5	;volatile
 12337                           
 12338                           ;diag.c: 2375: }
 12339  1555  0008               	return
 12340  1556                     l13504:	
 12341                           
 12342                           ;diag.c: 2399: {
 12343                           ;diag.c: 2405: NegativeAnswer(ui8_selected_lid);
 12344  1556  0859               	movf	_ui8_selected_lid,w
 12345  1557  2E27               	ljmp	_NegativeAnswer
 12346  1558                     l13510:	
 12347                           
 12348                           ;diag.c: 2417: else
 12349                           ;diag.c: 2418: {
 12350                           ;diag.c: 2424: NegativeAnswer(ui8_selected_lid);
 12351  1558  0020               	movlb	0	; select bank0
 12352  1559  0859               	movf	_ui8_selected_lid,w
 12353  155A  2E27               	ljmp	_NegativeAnswer
 12354  155B                     __end_of_EOL:	
 12355  155B                     __ptext29:	
 12356 ;; *************** function _PWM_Write_Out *****************
 12357 ;; Defined at:
 12358 ;;		line 340 in file "../pwm.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;  ui8_DutyCycl    1    wreg     unsigned char 
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;  ui8_DutyCycl    1   16[BANK0 ] unsigned char 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  1    wreg      void 
 12365 ;; Registers used:
 12366 ;;		wreg
 12367 ;; Tracked objects:
 12368 ;;		On entry : 1C/1
 12369 ;;		On exit  : 1F/2
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12372 ;;      Params:         0       0       0       0       0       0       0       0
 12373 ;;      Locals:         0       1       0       0       0       0       0       0
 12374 ;;      Temps:          0       0       0       0       0       0       0       0
 12375 ;;      Totals:         0       1       0       0       0       0       0       0
 12376 ;;Total ram usage:        1 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    4
 12379 ;; This function calls:
 12380 ;;		Nothing
 12381 ;; This function is called by:
 12382 ;;		_DiagInit
 12383 ;;		_SetDiagAlarm
 12384 ;;		_EOL
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           
 12389                           ;psect for function _PWM_Write_Out
 12390  155B                     _PWM_Write_Out:	
 12391                           
 12392                           ;incstack = 0
 12393                           ; Regs used in _PWM_Write_Out: [wreg]
 12394                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
 12395  155B  0020               	movlb	0	; select bank0
 12396  155C  00B0               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
 12397                           
 12398                           ;pwm.c: 344: ui8_PWMoutvalue = ui8_DutyCycle_Out;
 12399  155D  0022               	movlb	2	; select bank2
 12400  155E  00D1               	movwf	_ui8_PWMoutvalue^(0+256)
 12401  155F  0008               	return
 12402  1560                     __end_of_PWM_Write_Out:	
 12403  1560                     PL2:	
 12404  1560  0020               	movlb	0	; select bank0
 12405  1561  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12406  1562  0855               	movf	_ui8_b_DResLocID_c,w
 12407  1563  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12408  1564  0024               	movlb	4	; select bank4
 12409  1565  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
 12410  1566  0020               	movlb	0	; select bank0
 12411  1567  00BD               	movwf	Transmit_LIN_8Bytes@B2
 12412  1568  0024               	movlb	4	; select bank4
 12413  1569  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
 12414  156A  0020               	movlb	0	; select bank0
 12415  156B  00BE               	movwf	Transmit_LIN_8Bytes@B3
 12416  156C  0024               	movlb	4	; select bank4
 12417  156D  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
 12418  156E  0020               	movlb	0	; select bank0
 12419  156F  00BF               	movwf	Transmit_LIN_8Bytes@B4
 12420  1570  0024               	movlb	4	; select bank4
 12421  1571  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
 12422  1572  0020               	movlb	0	; select bank0
 12423  1573  00C0               	movwf	Transmit_LIN_8Bytes@B5
 12424  1574  0024               	movlb	4	; select bank4
 12425  1575  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
 12426  1576  0020               	movlb	0	; select bank0
 12427  1577  00C1               	movwf	Transmit_LIN_8Bytes@B6
 12428  1578  0024               	movlb	4	; select bank4
 12429  1579  0832               	movf	EOL@ui8_b_DResB5_RD^(0+512),w
 12430  157A  0020               	movlb	0	; select bank0
 12431  157B  0008               	return
 12432  157C                     __end_ofPL2:	
 12433  157C                     PL4:	
 12434  157C  0830               	movf	?___wmul,w
 12435  157D  00C5               	movwf	??_EOL
 12436  157E  0831               	movf	?___wmul+1,w
 12437  157F  00C6               	movwf	??_EOL+1
 12438  1580  36C6               	lsrf	??_EOL+1,f
 12439  1581  0CC5               	rrf	??_EOL,f
 12440  1582  36C6               	lsrf	??_EOL+1,f
 12441  1583  0CC5               	rrf	??_EOL,f
 12442  1584  0845               	movf	??_EOL,w
 12443  1585  0024               	movlb	4	; select bank4
 12444  1586  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 12445  1587  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
 12446  1588  3E00               	addlw	low (_PWM_trans_table| (0+32768))
 12447  1589  0084               	movwf	4
 12448  158A  3098               	movlw	high (_PWM_trans_table| (0+32768))
 12449  158B  1803               	skipnc
 12450  158C  3E01               	addlw	1
 12451  158D  0085               	movwf	5
 12452  158E  0800               	movf	0,w	;code access
 12453  158F  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 12454  1590  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
 12455  1591  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 12456  1592  3E03               	addlw	3
 12457  1593  0020               	movlb	0	; select bank0
 12458  1594  00C5               	movwf	??_EOL
 12459  1595  3000               	movlw	0
 12460  1596  1803               	skipnc
 12461  1597  3001               	movlw	1
 12462  1598  00C6               	movwf	??_EOL+1
 12463  1599  3A80               	xorlw	128
 12464  159A  3C80               	sublw	128
 12465  159B  1D03               	skipz
 12466  159C  0008               	return
 12467  159D  0845               	movf	??_EOL,w
 12468  159E  0024               	movlb	4	; select bank4
 12469  159F  0236               	subwf	EOL@ui8_b_DResB2_RD^(0+512),w
 12470  15A0  0008               	return
 12471  15A1                     __end_ofPL4:	
 12472  15A1                     PL8:	
 12473  15A1  0024               	movlb	4	; select bank4
 12474  15A2  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 12475  15A3  303A               	movlw	58
 12476  15A4  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 12477  15A5  0008               	return
 12478  15A6                     __end_ofPL8:	
 12479  15A6                     PL10:	
 12480  15A6  0024               	movlb	4	; select bank4
 12481  15A7  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
 12482  15A8  3EFD               	addlw	253
 12483  15A9  0020               	movlb	0	; select bank0
 12484  15AA  00C5               	movwf	??_EOL
 12485  15AB  30FF               	movlw	255
 12486  15AC  1803               	skipnc
 12487  15AD  3000               	movlw	0
 12488  15AE  00C6               	movwf	??_EOL+1
 12489  15AF  3A80               	xorlw	128
 12490  15B0  00C7               	movwf	??_EOL+2
 12491  15B1  3080               	movlw	128
 12492  15B2  0247               	subwf	??_EOL+2,w
 12493  15B3  1D03               	skipz
 12494  15B4  0008               	return
 12495  15B5  0024               	movlb	4	; select bank4
 12496  15B6  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
 12497  15B7  0020               	movlb	0	; select bank0
 12498  15B8  0245               	subwf	??_EOL,w
 12499  15B9  0008               	return
 12500  15BA                     __end_ofPL10:	
 12501  15BA                     PL12:	
 12502  15BA  307F               	movlw	127
 12503  15BB  0020               	movlb	0	; select bank0
 12504  15BC  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12505  15BD  0855               	movf	_ui8_b_DResLocID_c,w
 12506  15BE  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12507  15BF  0854               	movf	_ui8_b_DResB0_c,w
 12508  15C0  00BD               	movwf	Transmit_LIN_8Bytes@B2
 12509  15C1  30FF               	movlw	255
 12510  15C2  00BE               	movwf	Transmit_LIN_8Bytes@B3
 12511  15C3  00BF               	movwf	Transmit_LIN_8Bytes@B4
 12512  15C4  00C0               	movwf	Transmit_LIN_8Bytes@B5
 12513  15C5  00C1               	movwf	Transmit_LIN_8Bytes@B6
 12514  15C6  00C2               	movwf	Transmit_LIN_8Bytes@B7
 12515  15C7  3410               	retlw	16
 12516  15C8                     __end_ofPL12:	
 12517  15C8                     PL14:	
 12518  15C8  3689               	lsrf	9,f
 12519  15C9  0024               	movlb	4	; select bank4
 12520  15CA  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 12521  15CB  0021               	movlb	1	; select bank1
 12522  15CC  0835               	movf	(_ui16_speed_fil+1)^(0+128),w
 12523  15CD  0020               	movlb	0	; select bank0
 12524  15CE  00B1               	movwf	___wmul@multiplier+1
 12525  15CF  0021               	movlb	1	; select bank1
 12526  15D0  0834               	movf	_ui16_speed_fil^(0+128),w
 12527  15D1  0020               	movlb	0	; select bank0
 12528  15D2  00B0               	movwf	___wmul@multiplier
 12529  15D3  3005               	movlw	5
 12530  15D4  00B2               	movwf	___wmul@multiplicand
 12531  15D5  01B3               	clrf	___wmul@multiplicand+1
 12532  15D6  0008               	return
 12533  15D7                     __end_ofPL14:	
 12534  15D7                     PL18:	
 12535  15D7  0020               	movlb	0	; select bank0
 12536  15D8  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12537  15D9  0855               	movf	_ui8_b_DResLocID_c,w
 12538  15DA  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12539  15DB  30FF               	movlw	255
 12540  15DC  00BD               	movwf	Transmit_LIN_8Bytes@B2
 12541  15DD  00BE               	movwf	Transmit_LIN_8Bytes@B3
 12542  15DE  00BF               	movwf	Transmit_LIN_8Bytes@B4
 12543  15DF  00C0               	movwf	Transmit_LIN_8Bytes@B5
 12544  15E0  00C1               	movwf	Transmit_LIN_8Bytes@B6
 12545  15E1  0008               	return
 12546  15E2                     __end_ofPL18:	
 12547  15E2                     PL20:	
 12548  15E2  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12549  15E3  30FF               	movlw	255
 12550  15E4  00BD               	movwf	Transmit_LIN_8Bytes@B2
 12551  15E5  00BE               	movwf	Transmit_LIN_8Bytes@B3
 12552  15E6  00BF               	movwf	Transmit_LIN_8Bytes@B4
 12553  15E7  00C0               	movwf	Transmit_LIN_8Bytes@B5
 12554  15E8  00C1               	movwf	Transmit_LIN_8Bytes@B6
 12555  15E9  00C2               	movwf	Transmit_LIN_8Bytes@B7
 12556  15EA  3410               	retlw	16
 12557  15EB                     __end_ofPL20:	
 12558  15EB                     PL50:	
 12559  15EB  0022               	movlb	2	; select bank2
 12560  15EC  0865               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
 12561  15ED  0020               	movlb	0	; select bank0
 12562  15EE  00B1               	movwf	___lwdiv@divisor+1
 12563  15EF  0022               	movlb	2	; select bank2
 12564  15F0  0864               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
 12565  15F1  0020               	movlb	0	; select bank0
 12566  15F2  00B0               	movwf	___lwdiv@divisor
 12567  15F3  3078               	movlw	120
 12568  15F4  01B2               	clrf	___lwdiv@dividend
 12569  15F5  00B3               	movwf	___lwdiv@dividend+1
 12570  15F6  0008               	return
 12571  15F7                     __end_ofPL50:	
 12572  15F7                     PL52:	
 12573  15F7  0020               	movlb	0	; select bank0
 12574  15F8  00B0               	movwf	___lwdiv@divisor
 12575  15F9  3078               	movlw	120
 12576  15FA  01B2               	clrf	___lwdiv@dividend
 12577  15FB  00B3               	movwf	___lwdiv@dividend+1
 12578  15FC  0008               	return
 12579  15FD                     __end_ofPL52:	
 12580  15FD                     PL54:	
 12581  15FD  0022               	movlb	2	; select bank2
 12582  15FE  0867               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
 12583  15FF  0020               	movlb	0	; select bank0
 12584  1600  00B1               	movwf	___lwdiv@divisor+1
 12585  1601  0022               	movlb	2	; select bank2
 12586  1602  0866               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
 12587  1603  0008               	return
 12588  1604                     __end_ofPL54:	
 12589  1604                     PL56:	
 12590  1604  0022               	movlb	2	; select bank2
 12591  1605  0863               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
 12592  1606  0020               	movlb	0	; select bank0
 12593  1607  00B1               	movwf	___lwdiv@divisor+1
 12594  1608  0022               	movlb	2	; select bank2
 12595  1609  0862               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
 12596  160A  0008               	return
 12597  160B                     __end_ofPL56:	
 12598  160B                     PL74:	
 12599  160B  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12600  160C  3010               	movlw	16
 12601  160D  01BD               	clrf	Transmit_LIN_8Bytes@B2
 12602  160E  01BE               	clrf	Transmit_LIN_8Bytes@B3
 12603  160F  01BF               	clrf	Transmit_LIN_8Bytes@B4
 12604  1610  01C0               	clrf	Transmit_LIN_8Bytes@B5
 12605  1611  01C1               	clrf	Transmit_LIN_8Bytes@B6
 12606  1612  01C2               	clrf	Transmit_LIN_8Bytes@B7
 12607  1613  0008               	return
 12608  1614                     __end_ofPL74:	
 12609  1614                     PL78:	
 12610  1614  1066               	bcf	_ui8_error_Flags^(0+128),0
 12611  1615  10E6               	bcf	_ui8_error_Flags^(0+128),1
 12612  1616  13E6               	bcf	_ui8_error_Flags^(0+128),7
 12613  1617  1166               	bcf	_ui8_error_Flags^(0+128),2
 12614  1618  11E6               	bcf	_ui8_error_Flags^(0+128),3
 12615  1619  1266               	bcf	_ui8_error_Flags^(0+128),4
 12616  161A  1366               	bcf	_ui8_error_Flags^(0+128),6
 12617  161B  0008               	return
 12618  161C                     __end_ofPL78:	
 12619  161C                     PL82:	
 12620  161C  0857               	movf	_phaseCal^(0+128),w
 12621  161D  0024               	movlb	4	; select bank4
 12622  161E  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 12623  161F  01B5               	clrf	EOL@ui8_b_DResB1_RD^(0+512)
 12624  1620  0022               	movlb	2	; select bank2
 12625  1621  0008               	return
 12626  1622                     __end_ofPL82:	
 12627  1622                     PL110:	
 12628  1622  0021               	movlb	1	; select bank1
 12629  1623  086E               	movf	_wkpoint^(0+128),w
 12630  1624  0020               	movlb	0	; select bank0
 12631  1625  0654               	xorwf	_ui8_b_DResB0_c,w
 12632  1626  0008               	return
 12633  1627                     __end_ofPL110:	
 12634  1627                     __ptext33:	
 12635 ;; *************** function _NegativeAnswer *****************
 12636 ;; Defined at:
 12637 ;;		line 2436 in file "../diag.c"
 12638 ;; Parameters:    Size  Location     Type
 12639 ;;  LID             1    wreg     unsigned char 
 12640 ;; Auto vars:     Size  Location     Type
 12641 ;;  LID             1   36[BANK0 ] unsigned char 
 12642 ;; Return value:  Size  Location     Type
 12643 ;;                  1    wreg      void 
 12644 ;; Registers used:
 12645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12646 ;; Tracked objects:
 12647 ;;		On entry : 1D/2
 12648 ;;		On exit  : 1F/1
 12649 ;;		Unchanged: 0/0
 12650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12651 ;;      Params:         0       0       0       0       0       0       0       0
 12652 ;;      Locals:         0       1       0       0       0       0       0       0
 12653 ;;      Temps:          0       0       0       0       0       0       0       0
 12654 ;;      Totals:         0       1       0       0       0       0       0       0
 12655 ;;Total ram usage:        1 bytes
 12656 ;; Hardware stack levels used:    1
 12657 ;; Hardware stack levels required when called:    7
 12658 ;; This function calls:
 12659 ;;		_Transmit_LIN_8Bytes
 12660 ;; This function is called by:
 12661 ;;		_EOL
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665                           
 12666                           ;psect for function _NegativeAnswer
 12667  1627                     _NegativeAnswer:	
 12668                           
 12669                           ;incstack = 0
 12670                           ; Regs used in _NegativeAnswer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12671                           ;NegativeAnswer@LID stored from wreg
 12672  1627  0020               	movlb	0	; select bank0
 12673  1628  00C4               	movwf	NegativeAnswer@LID
 12674                           
 12675                           ;diag.c: 2440: ui8_b_DResB0_c = 0xFF;
 12676  1629  30FF               	movlw	255
 12677  162A  00D4               	movwf	_ui8_b_DResB0_c
 12678                           
 12679                           ;diag.c: 2441: ui8_b_DResB1_c = 0xFF;
 12680  162B  0022               	movlb	2	; select bank2
 12681  162C  00E0               	movwf	_ui8_b_DResB1_c^(0+256)
 12682                           
 12683                           ;diag.c: 2442: ui8_b_DResB2_c = 0xFF;
 12684  162D  00DF               	movwf	_ui8_b_DResB2_c^(0+256)
 12685                           
 12686                           ;diag.c: 2443: ui8_b_DResB3_c = 0xFF;
 12687  162E  00DE               	movwf	_ui8_b_DResB3_c^(0+256)
 12688                           
 12689                           ;diag.c: 2445: ui8_b_DResB5_c = 0xFF;
 12690  162F  00DD               	movwf	_ui8_b_DResB4_c^(0+256)
 12691                           
 12692                           ;diag.c: 2447: Transmit_LIN_8Bytes( 0x10, 0x7F, LID, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
 12693  1630  307F               	movlw	127
 12694  1631  0020               	movlb	0	; select bank0
 12695  1632  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12696  1633  0844               	movf	NegativeAnswer@LID,w
 12697  1634  25E2  3190         	fcall	PL20	;call to abstracted procedure
 12698  1636  2E37               	ljmp	_Transmit_LIN_8Bytes
 12699  1637                     __end_of_NegativeAnswer:	
 12700  1637                     __ptext34:	
 12701 ;; *************** function _Transmit_LIN_8Bytes *****************
 12702 ;; Defined at:
 12703 ;;		line 167 in file "../lin.c"
 12704 ;; Parameters:    Size  Location     Type
 12705 ;;  ID              1    wreg     unsigned char 
 12706 ;;  B0              1   27[BANK0 ] unsigned char 
 12707 ;;  B1              1   28[BANK0 ] unsigned char 
 12708 ;;  B2              1   29[BANK0 ] unsigned char 
 12709 ;;  B3              1   30[BANK0 ] unsigned char 
 12710 ;;  B4              1   31[BANK0 ] unsigned char 
 12711 ;;  B5              1   32[BANK0 ] unsigned char 
 12712 ;;  B6              1   33[BANK0 ] unsigned char 
 12713 ;;  B7              1   34[BANK0 ] unsigned char 
 12714 ;; Auto vars:     Size  Location     Type
 12715 ;;  ID              1   35[BANK0 ] unsigned char 
 12716 ;; Return value:  Size  Location     Type
 12717 ;;                  1    wreg      void 
 12718 ;; Registers used:
 12719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12720 ;; Tracked objects:
 12721 ;;		On entry : 1F/0
 12722 ;;		On exit  : 1F/1
 12723 ;;		Unchanged: 0/0
 12724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12725 ;;      Params:         0       8       0       0       0       0       0       0
 12726 ;;      Locals:         0       1       0       0       0       0       0       0
 12727 ;;      Temps:          0       0       0       0       0       0       0       0
 12728 ;;      Totals:         0       9       0       0       0       0       0       0
 12729 ;;Total ram usage:        9 bytes
 12730 ;; Hardware stack levels used:    1
 12731 ;; Hardware stack levels required when called:    6
 12732 ;; This function calls:
 12733 ;;		__ELINMIntGetPointer
 12734 ;;		__ELINMIntSendMessage
 12735 ;; This function is called by:
 12736 ;;		_EOL
 12737 ;;		_NegativeAnswer
 12738 ;; This function uses a non-reentrant model
 12739 ;;
 12740                           
 12741                           
 12742                           ;psect for function _Transmit_LIN_8Bytes
 12743  1637                     _Transmit_LIN_8Bytes:	
 12744                           
 12745                           ;incstack = 0
 12746                           ; Regs used in _Transmit_LIN_8Bytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12747                           ;Transmit_LIN_8Bytes@ID stored from wreg
 12748  1637  00C3               	movwf	Transmit_LIN_8Bytes@ID
 12749  1638                     l895:	
 12750                           ;lin.c: 179: {
 12751                           ;lin.c: 180: ;
 12752                           
 12753  1638  1DD3               	btfss	__ELINMIntStatus,3
 12754  1639  2E38               	goto	l895
 12755                           
 12756                           ;lin.c: 181: }
 12757                           ;lin.c: 182: pt = _ELINMIntGetPointer ( 5, 2 );
 12758  163A  3002               	movlw	2
 12759  163B  00B0               	movwf	__ELINMIntGetPointer@_ELINMInt_position
 12760  163C  3005               	movlw	5
 12761  163D  3183  2361  3190   	fcall	__ELINMIntGetPointer
 12762  1640  00D2               	movwf	_pt
 12763                           
 12764                           ;lin.c: 183: *pt++ = B0;
 12765  1641  0086               	movwf	6
 12766  1642  3002               	movlw	2	; select bank4/5
 12767  1643  0087               	movwf	7
 12768  1644  083B               	movf	Transmit_LIN_8Bytes@B0,w
 12769  1645  0081               	movwf	1
 12770  1646  0AD2               	incf	_pt,f
 12771                           
 12772                           ;lin.c: 184: *pt++ = B1;
 12773  1647  0852               	movf	_pt,w
 12774  1648  0086               	movwf	6
 12775  1649  083C               	movf	Transmit_LIN_8Bytes@B1,w
 12776  164A  0081               	movwf	1
 12777  164B  0AD2               	incf	_pt,f
 12778                           
 12779                           ;lin.c: 185: *pt++ = B2;
 12780  164C  0852               	movf	_pt,w
 12781  164D  0086               	movwf	6
 12782  164E  083D               	movf	Transmit_LIN_8Bytes@B2,w
 12783  164F  0081               	movwf	1
 12784  1650  0AD2               	incf	_pt,f
 12785                           
 12786                           ;lin.c: 186: *pt++ = B3;
 12787  1651  0852               	movf	_pt,w
 12788  1652  0086               	movwf	6
 12789  1653  083E               	movf	Transmit_LIN_8Bytes@B3,w
 12790  1654  0081               	movwf	1
 12791  1655  0AD2               	incf	_pt,f
 12792                           
 12793                           ;lin.c: 187: *pt++ = B4;
 12794  1656  0852               	movf	_pt,w
 12795  1657  0086               	movwf	6
 12796  1658  083F               	movf	Transmit_LIN_8Bytes@B4,w
 12797  1659  0081               	movwf	1
 12798  165A  0AD2               	incf	_pt,f
 12799                           
 12800                           ;lin.c: 188: *pt++ = B5;
 12801  165B  0852               	movf	_pt,w
 12802  165C  0086               	movwf	6
 12803  165D  0840               	movf	Transmit_LIN_8Bytes@B5,w
 12804  165E  0081               	movwf	1
 12805  165F  0AD2               	incf	_pt,f
 12806                           
 12807                           ;lin.c: 189: *pt++ = B6;
 12808  1660  0852               	movf	_pt,w
 12809  1661  0086               	movwf	6
 12810  1662  0841               	movf	Transmit_LIN_8Bytes@B6,w
 12811  1663  0081               	movwf	1
 12812  1664  0AD2               	incf	_pt,f
 12813                           
 12814                           ;lin.c: 190: *pt++ = B7;
 12815  1665  0852               	movf	_pt,w
 12816  1666  0086               	movwf	6
 12817  1667  0842               	movf	Transmit_LIN_8Bytes@B7,w
 12818  1668  0081               	movwf	1
 12819  1669  3008               	movlw	8
 12820  166A  0AD2               	incf	_pt,f
 12821                           
 12822                           ;lin.c: 192: _ELINMIntSendMessage ( ID, 8, ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) * ( 100L * 
      +                          1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) + 1L ) * 
      +                          14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
 12823  166B  00B1               	movwf	__ELINMIntSendMessage@_ELINM_size
 12824  166C  3055               	movlw	85
 12825  166D  00B2               	movwf	__ELINMIntSendMessage@_ELINM_fmin
 12826  166E  3077               	movlw	119
 12827  166F  01B3               	clrf	__ELINMIntSendMessage@_ELINM_fmin+1
 12828  1670  00B4               	movwf	__ELINMIntSendMessage@_ELINM_fmax
 12829  1671  01B5               	clrf	__ELINMIntSendMessage@_ELINM_fmax+1
 12830  1672  0843               	movf	Transmit_LIN_8Bytes@ID,w
 12831  1673  267A               	fcall	__ELINMIntSendMessage
 12832                           
 12833                           ;lin.c: 193: if( ( ErrorCode = ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
 12834  1674  0853               	movf	__ELINMIntStatus,w
 12835  1675  0021               	movlb	1	; select bank1
 12836  1676  00D0               	movwf	_ErrorCode^(0+128)
 12837  1677  30F0               	movlw	240
 12838  1678  05D0               	andwf	_ErrorCode^(0+128),f
 12839  1679  0008               	return
 12840  167A                     __end_of_Transmit_LIN_8Bytes:	
 12841  167A                     __ptext35:	
 12842 ;; *************** function __ELINMIntSendMessage *****************
 12843 ;; Defined at:
 12844 ;;		line 1178 in file "../lin.c"
 12845 ;; Parameters:    Size  Location     Type
 12846 ;;  _ELINM_idr      1    wreg     unsigned char 
 12847 ;;  _ELINM_size     1   17[BANK0 ] unsigned char 
 12848 ;;  _ELINM_fmin     2   18[BANK0 ] unsigned int 
 12849 ;;  _ELINM_fmax     2   20[BANK0 ] unsigned int 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  _ELINM_idr      1   22[BANK0 ] unsigned char 
 12852 ;;  _ELINM_chk      2   25[BANK0 ] unsigned int 
 12853 ;;  _ELINM_i        1   24[BANK0 ] unsigned char 
 12854 ;;  _ELINM_tid      1   23[BANK0 ] struct ELINMINT_ID
 12855 ;; Return value:  Size  Location     Type
 12856 ;;                  1    wreg      void 
 12857 ;; Registers used:
 12858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12859 ;; Tracked objects:
 12860 ;;		On entry : 1F/0
 12861 ;;		On exit  : 1F/0
 12862 ;;		Unchanged: 0/0
 12863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12864 ;;      Params:         0       5       0       0       0       0       0       0
 12865 ;;      Locals:         0       5       0       0       0       0       0       0
 12866 ;;      Temps:          0       0       0       0       0       0       0       0
 12867 ;;      Totals:         0      10       0       0       0       0       0       0
 12868 ;;Total ram usage:       10 bytes
 12869 ;; Hardware stack levels used:    1
 12870 ;; Hardware stack levels required when called:    5
 12871 ;; This function calls:
 12872 ;;		__ELINMIntCalcIDParity
 12873 ;; This function is called by:
 12874 ;;		_Transmit_LIN_8Bytes
 12875 ;;		__ELINMIntReceiveMessage
 12876 ;; This function uses a non-reentrant model
 12877 ;;
 12878                           
 12879                           
 12880                           ;psect for function __ELINMIntSendMessage
 12881  167A                     __ELINMIntSendMessage:	
 12882                           
 12883                           ;incstack = 0
 12884                           ; Regs used in __ELINMIntSendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12885                           ;__ELINMIntSendMessage@_ELINM_idr stored from wreg
 12886  167A  00B6               	movwf	__ELINMIntSendMessage@_ELINM_idr
 12887                           
 12888                           ;lin.c: 1186: char _ELINM_i;
 12889                           ;lin.c: 1187: ELINMINT_ID _ELINM_tid;
 12890                           ;lin.c: 1188: unsigned int _ELINM_chk;
 12891                           ;lin.c: 1191: _ELINM_tid.ID = _ELINM_idr;
 12892  167B  00B7               	movwf	__ELINMIntSendMessage@_ELINM_tid
 12893                           
 12894                           ;lin.c: 1192: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
 12895  167C  300F               	movlw	15
 12896  167D  05D3               	andwf	__ELINMIntStatus,f
 12897                           
 12898                           ;lin.c: 1194: _ELINMIntTHeaderMin = ( 34L * ( 100L * 1000000L / 19200L ) / 128L ) / 100;
 12899  167E  300D               	movlw	13
 12900  167F  0022               	movlb	2	; select bank2
 12901  1680  00A7               	movwf	__ELINMIntTHeaderMin^(0+256)
 12902  1681  3013               	movlw	19
 12903  1682  01A8               	clrf	(__ELINMIntTHeaderMin+1)^(0+256)
 12904                           
 12905                           ;lin.c: 1195: _ELINMIntTHeaderMax = ( ( ( ( 34L + 1 ) * 14L ) / 10L ) * ( 100L * 1000000
      +                          L / 19200L ) / 128L ) / 100;
 12906  1683  0023               	movlb	3	; select bank3
 12907  1684  00D0               	movwf	__ELINMIntTHeaderMax^(0+384)
 12908  1685  01D1               	clrf	(__ELINMIntTHeaderMax+1)^(0+384)
 12909                           
 12910                           ;lin.c: 1196: _ELINMIntTFrameMin = _ELINM_fmin;
 12911  1686  0020               	movlb	0	; select bank0
 12912  1687  0833               	movf	__ELINMIntSendMessage@_ELINM_fmin+1,w
 12913  1688  0022               	movlb	2	; select bank2
 12914  1689  00AA               	movwf	(__ELINMIntTFrameMin+1)^(0+256)
 12915  168A  0020               	movlb	0	; select bank0
 12916  168B  0832               	movf	__ELINMIntSendMessage@_ELINM_fmin,w
 12917  168C  0022               	movlb	2	; select bank2
 12918  168D  00A9               	movwf	__ELINMIntTFrameMin^(0+256)
 12919                           
 12920                           ;lin.c: 1197: _ELINMIntTFrameMax = _ELINM_fmax;
 12921  168E  0020               	movlb	0	; select bank0
 12922  168F  0835               	movf	__ELINMIntSendMessage@_ELINM_fmax+1,w
 12923  1690  0023               	movlb	3	; select bank3
 12924  1691  00D3               	movwf	(__ELINMIntTFrameMax+1)^(0+384)
 12925  1692  0020               	movlb	0	; select bank0
 12926  1693  0834               	movf	__ELINMIntSendMessage@_ELINM_fmax,w
 12927  1694  0023               	movlb	3	; select bank3
 12928  1695  00D2               	movwf	__ELINMIntTFrameMax^(0+384)
 12929                           
 12930                           ;lin.c: 1207: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
 12931  1696  0020               	movlb	0	; select bank0
 12932  1697  1DD3               	btfss	__ELINMIntStatus,3
 12933  1698  0008               	return
 12934                           
 12935                           ;lin.c: 1210: {
 12936                           ;lin.c: 1229: _ELINMIntMessageBuffer[ 0 ] = 0x55;
 12937  1699  3055               	movlw	85
 12938  169A  0024               	movlb	4	; select bank4
 12939  169B  00D0               	movwf	__ELINMIntMessageBuffer^(0+512)
 12940                           
 12941                           ;lin.c: 1230: _ELINMIntMessageBuffer[ 1 ] = _ELINMIntCalcIDParity( _ELINM_tid );
 12942  169C  0020               	movlb	0	; select bank0
 12943  169D  0837               	movf	__ELINMIntSendMessage@_ELINM_tid,w
 12944  169E  26E1  3190         	fcall	__ELINMIntCalcIDParity
 12945  16A0  0024               	movlb	4	; select bank4
 12946  16A1  00D1               	movwf	(__ELINMIntMessageBuffer^(0+512)+1)
 12947                           
 12948                           ;lin.c: 1231: _ELINMIntMessageBufferPointer = 0;
 12949  16A2  0021               	movlb	1	; select bank1
 12950  16A3  01D1               	clrf	__ELINMIntMessageBufferPointer^(0+128)
 12951                           
 12952                           ;lin.c: 1238: if( _ELINMIntStatus.ELINMINTSTS.RX )
 12953  16A4  0020               	movlb	0	; select bank0
 12954  16A5  1CD3               	btfss	__ELINMIntStatus,1
 12955  16A6  2EAB               	goto	l9722
 12956                           
 12957                           ;lin.c: 1241: {
 12958                           ;lin.c: 1243: _ELINMIntMessageSize.SIZE = 2;
 12959  16A7  3002               	movlw	2
 12960  16A8  0021               	movlb	1	; select bank1
 12961  16A9  00D3               	movwf	__ELINMIntMessageSize^(0+128)
 12962                           
 12963                           ;lin.c: 1246: }
 12964  16AA  2ED2               	goto	l9738
 12965  16AB                     l9722:	
 12966                           
 12967                           ;lin.c: 1249: else
 12968                           ;lin.c: 1250: {
 12969                           ;lin.c: 1252: _ELINMIntMessageSize.SIZE = _ELINM_size + 2;
 12970  16AB  0831               	movf	__ELINMIntSendMessage@_ELINM_size,w
 12971  16AC  3E02               	addlw	2
 12972  16AD  0021               	movlb	1	; select bank1
 12973  16AE  00D3               	movwf	__ELINMIntMessageSize^(0+128)
 12974                           
 12975                           ;lin.c: 1253: _ELINM_chk = 0;
 12976  16AF  0020               	movlb	0	; select bank0
 12977  16B0  3002               	movlw	2
 12978  16B1  01B9               	clrf	__ELINMIntSendMessage@_ELINM_chk
 12979  16B2  01BA               	clrf	__ELINMIntSendMessage@_ELINM_chk+1
 12980                           
 12981                           ;lin.c: 1256: for( _ELINM_i = 2;
 12982  16B3  00B8               	movwf	__ELINMIntSendMessage@_ELINM_i
 12983  16B4                     l9732:	
 12984                           ;lin.c: 1257: _ELINM_i < _ELINMIntMessageSize.SIZE;
 12985                           ;lin.c: 1258: _ELINM_i++ )
 12986                           
 12987  16B4  0021               	movlb	1	; select bank1
 12988  16B5  0853               	movf	__ELINMIntMessageSize^(0+128),w
 12989  16B6  0020               	movlb	0	; select bank0
 12990  16B7  0238               	subwf	__ELINMIntSendMessage@_ELINM_i,w
 12991  16B8  1803               	btfsc	3,0
 12992  16B9  2EC5               	goto	l9734
 12993                           
 12994                           ;lin.c: 1261: {
 12995                           ;lin.c: 1263: _ELINM_chk += _ELINMIntMessageBuffer[ _ELINM_i ];
 12996  16BA  0838               	movf	__ELINMIntSendMessage@_ELINM_i,w
 12997  16BB  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
 12998  16BC  0086               	movwf	6
 12999  16BD  3002               	movlw	2	; select bank4/5
 13000  16BE  0087               	movwf	7
 13001  16BF  0801               	movf	1,w
 13002  16C0  07B9               	addwf	__ELINMIntSendMessage@_ELINM_chk,f
 13003  16C1  1803               	skipnc
 13004  16C2  0ABA               	incf	__ELINMIntSendMessage@_ELINM_chk+1,f
 13005  16C3  0AB8               	incf	__ELINMIntSendMessage@_ELINM_i,f
 13006  16C4  2EB4               	goto	l9732
 13007  16C5                     l9734:	
 13008                           
 13009                           ;lin.c: 1266: }
 13010                           ;lin.c: 1269: _ELINMIntMessageBuffer[ _ELINMIntMessageSize.SIZE ]
 13011                           ;lin.c: 1270: = ( ~( _ELINM_chk + ( _ELINM_chk>>8 ) ) );
 13012  16C5  0021               	movlb	1	; select bank1
 13013  16C6  0853               	movf	__ELINMIntMessageSize^(0+128),w
 13014  16C7  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
 13015  16C8  0086               	movwf	6
 13016  16C9  3002               	movlw	2	; select bank4/5
 13017  16CA  0087               	movwf	7
 13018  16CB  0020               	movlb	0	; select bank0
 13019  16CC  083A               	movf	__ELINMIntSendMessage@_ELINM_chk+1,w
 13020  16CD  0739               	addwf	__ELINMIntSendMessage@_ELINM_chk,w
 13021  16CE  3AFF               	xorlw	255
 13022  16CF  0081               	movwf	1
 13023                           
 13024                           ;lin.c: 1271: _ELINMIntMessageSize.SIZE++;
 13025  16D0  0021               	movlb	1	; select bank1
 13026  16D1  0AD3               	incf	__ELINMIntMessageSize^(0+128),f
 13027  16D2                     l9738:	
 13028                           
 13029                           ;lin.c: 1274: }
 13030                           ;lin.c: 1277: SENDB = 1;
 13031  16D2  0023               	movlb	3	; select bank3
 13032  16D3  159E               	bsf	30,3	;volatile
 13033                           
 13034                           ;lin.c: 1278: TXREG = 0xFF;
 13035  16D4  30FF               	movlw	255
 13036  16D5  009A               	movwf	26	;volatile
 13037                           
 13038                           ;lin.c: 1279: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
 13039  16D6  300F               	movlw	15
 13040  16D7  0020               	movlb	0	; select bank0
 13041  16D8  05D3               	andwf	__ELINMIntStatus,f
 13042                           
 13043                           ;lin.c: 1280: _ELINMIntStatus.ELINMINTSTS.TX = 1;
 13044  16D9  1453               	bsf	__ELINMIntStatus,0
 13045                           
 13046                           ;lin.c: 1281: _ELINMIntStatus1.ELINMINTSTS.HEADER = 1;
 13047  16DA  0021               	movlb	1	; select bank1
 13048  16DB  14D4               	bsf	__ELINMIntStatus1^(0+128),1
 13049                           
 13050                           ;lin.c: 1282: _ELINMIntStatus1.ELINMINTSTS.FRAME = 1;
 13051  16DC  1554               	bsf	__ELINMIntStatus1^(0+128),2
 13052                           
 13053                           ;lin.c: 1283: _ELINMIntReadBack = 0x00;
 13054  16DD  01D2               	clrf	__ELINMIntReadBack^(0+128)
 13055                           
 13056                           ;lin.c: 1284: _ELINMIntStatus.ELINMINTSTS.IDLE = 0;
 13057  16DE  0020               	movlb	0	; select bank0
 13058  16DF  11D3               	bcf	__ELINMIntStatus,3
 13059  16E0  0008               	return
 13060  16E1                     __end_of__ELINMIntSendMessage:	
 13061  16E1                     __ptext36:	
 13062 ;; *************** function __ELINMIntCalcIDParity *****************
 13063 ;; Defined at:
 13064 ;;		line 1048 in file "../lin.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;  ELINM_idtr      1    wreg     struct ELINMINT_ID
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;  ELINM_idtr      1   16[BANK0 ] struct ELINMINT_ID
 13069 ;; Return value:  Size  Location     Type
 13070 ;;                  1    wreg      unsigned char 
 13071 ;; Registers used:
 13072 ;;		wreg, status,2, status,0
 13073 ;; Tracked objects:
 13074 ;;		On entry : 1F/0
 13075 ;;		On exit  : 1F/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13078 ;;      Params:         0       0       0       0       0       0       0       0
 13079 ;;      Locals:         0       1       0       0       0       0       0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0       0
 13081 ;;      Totals:         0       1       0       0       0       0       0       0
 13082 ;;Total ram usage:        1 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    4
 13085 ;; This function calls:
 13086 ;;		Nothing
 13087 ;; This function is called by:
 13088 ;;		__ELINMIntSendMessage
 13089 ;; This function uses a non-reentrant model
 13090 ;;
 13091                           
 13092                           
 13093                           ;psect for function __ELINMIntCalcIDParity
 13094  16E1                     __ELINMIntCalcIDParity:	
 13095                           
 13096                           ;incstack = 0
 13097                           ; Regs used in __ELINMIntCalcIDParity: [wreg+status,2+status,0]
 13098                           ;__ELINMIntCalcIDParity@ELINM_idtr stored from wreg
 13099  16E1  00B0               	movwf	__ELINMIntCalcIDParity@ELINM_idtr
 13100                           
 13101                           ;lin.c: 1053: ELINM_idtr.ID &= 0x3F;
 13102  16E2  303F               	movlw	63
 13103  16E3  05B0               	andwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13104                           
 13105                           ;lin.c: 1056: if( ELINM_idtr.IDbits.ID0)
 13106  16E4  1C30               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,0
 13107  16E5  2EE8               	goto	l1011
 13108                           
 13109                           ;lin.c: 1059: {
 13110                           ;lin.c: 1061: ELINM_idtr.ID ^= 0x40;
 13111  16E6  3040               	movlw	64
 13112  16E7  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13113  16E8                     l1011:	
 13114                           
 13115                           ;lin.c: 1064: }
 13116                           ;lin.c: 1067: if( ELINM_idtr.IDbits.ID1 )
 13117  16E8  1CB0               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
 13118  16E9  2EEC               	goto	l1012
 13119                           
 13120                           ;lin.c: 1070: {
 13121                           ;lin.c: 1072: ELINM_idtr.ID ^= 0x40;
 13122  16EA  3040               	movlw	64
 13123  16EB  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13124  16EC                     l1012:	
 13125                           
 13126                           ;lin.c: 1075: }
 13127                           ;lin.c: 1078: if( ELINM_idtr.IDbits.ID2 )
 13128  16EC  1D30               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,2
 13129  16ED  2EF0               	goto	l1013
 13130                           
 13131                           ;lin.c: 1081: {
 13132                           ;lin.c: 1083: ELINM_idtr.ID ^= 0x40;
 13133  16EE  3040               	movlw	64
 13134  16EF  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13135  16F0                     l1013:	
 13136                           
 13137                           ;lin.c: 1086: }
 13138                           ;lin.c: 1089: if( ELINM_idtr.IDbits.ID4 )
 13139  16F0  1E30               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
 13140  16F1  2EF4               	goto	l1014
 13141                           
 13142                           ;lin.c: 1092: {
 13143                           ;lin.c: 1094: ELINM_idtr.ID ^= 0x40;
 13144  16F2  3040               	movlw	64
 13145  16F3  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13146  16F4                     l1014:	
 13147                           
 13148                           ;lin.c: 1097: }
 13149                           ;lin.c: 1100: ELINM_idtr.IDbits.ID7 = 1;
 13150  16F4  17B0               	bsf	__ELINMIntCalcIDParity@ELINM_idtr,7
 13151                           
 13152                           ;lin.c: 1103: if( ELINM_idtr.IDbits.ID1 )
 13153  16F5  1CB0               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
 13154  16F6  2EF9               	goto	l1015
 13155                           
 13156                           ;lin.c: 1106: {
 13157                           ;lin.c: 1108: ELINM_idtr.ID ^= 0x80;
 13158  16F7  3080               	movlw	128
 13159  16F8  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13160  16F9                     l1015:	
 13161                           
 13162                           ;lin.c: 1111: }
 13163                           ;lin.c: 1114: if( ELINM_idtr.IDbits.ID3 )
 13164  16F9  1DB0               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,3
 13165  16FA  2EFD               	goto	l1016
 13166                           
 13167                           ;lin.c: 1117: {
 13168                           ;lin.c: 1119: ELINM_idtr.ID ^= 0x80;
 13169  16FB  3080               	movlw	128
 13170  16FC  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13171  16FD                     l1016:	
 13172                           
 13173                           ;lin.c: 1122: }
 13174                           ;lin.c: 1125: if( ELINM_idtr.IDbits.ID4 )
 13175  16FD  1E30               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
 13176  16FE  2F01               	goto	l1017
 13177                           
 13178                           ;lin.c: 1128: {
 13179                           ;lin.c: 1130: ELINM_idtr.ID ^= 0x80;
 13180  16FF  3080               	movlw	128
 13181  1700  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13182  1701                     l1017:	
 13183                           
 13184                           ;lin.c: 1133: }
 13185                           ;lin.c: 1136: if( ELINM_idtr.IDbits.ID5 )
 13186  1701  1EB0               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,5
 13187  1702  2F05               	goto	l1018
 13188                           
 13189                           ;lin.c: 1139: {
 13190                           ;lin.c: 1141: ELINM_idtr.ID ^= 0x80;
 13191  1703  3080               	movlw	128
 13192  1704  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13193  1705                     l1018:	
 13194                           
 13195                           ;lin.c: 1144: }
 13196                           ;lin.c: 1147: return ( ( BYTE )ELINM_idtr.ID );
 13197  1705  0830               	movf	__ELINMIntCalcIDParity@ELINM_idtr,w
 13198  1706  0008               	return
 13199  1707                     __end_of__ELINMIntCalcIDParity:	
 13200  1707                     __ptext25:	
 13201 ;; *************** function _write_eeprom_data *****************
 13202 ;; Defined at:
 13203 ;;		line 83 in file "../eeprom.c"
 13204 ;; Parameters:    Size  Location     Type
 13205 ;;  ui8_adress      1    wreg     unsigned char 
 13206 ;;  ui8_adress_d    1   23[BANK0 ] unsigned char 
 13207 ;; Auto vars:     Size  Location     Type
 13208 ;;  ui8_adress      1   24[BANK0 ] unsigned char 
 13209 ;; Return value:  Size  Location     Type
 13210 ;;                  1    wreg      void 
 13211 ;; Registers used:
 13212 ;;		wreg
 13213 ;; Tracked objects:
 13214 ;;		On entry : 1F/0
 13215 ;;		On exit  : 1F/3
 13216 ;;		Unchanged: 0/0
 13217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13218 ;;      Params:         0       1       0       0       0       0       0       0
 13219 ;;      Locals:         0       1       0       0       0       0       0       0
 13220 ;;      Temps:          0       0       0       0       0       0       0       0
 13221 ;;      Totals:         0       2       0       0       0       0       0       0
 13222 ;;Total ram usage:        2 bytes
 13223 ;; Hardware stack levels used:    1
 13224 ;; Hardware stack levels required when called:    4
 13225 ;; This function calls:
 13226 ;;		Nothing
 13227 ;; This function is called by:
 13228 ;;		_EOL
 13229 ;; This function uses a non-reentrant model
 13230 ;;
 13231                           
 13232                           
 13233                           ;psect for function _write_eeprom_data
 13234  1707                     _write_eeprom_data:	
 13235                           
 13236                           ;incstack = 0
 13237                           ; Regs used in _write_eeprom_data: [wreg]
 13238                           ;write_eeprom_data@ui8_adress stored from wreg
 13239  1707  00B8               	movwf	write_eeprom_data@ui8_adress
 13240                           
 13241                           ;eeprom.c: 89: EEADRL = ui8_adress;
 13242  1708  0023               	movlb	3	; select bank3
 13243  1709  0091               	movwf	17	;volatile
 13244                           
 13245                           ;eeprom.c: 90: EEDATL = ui8_adress_data;
 13246  170A  0020               	movlb	0	; select bank0
 13247  170B  0837               	movf	write_eeprom_data@ui8_adress_data,w
 13248  170C  0023               	movlb	3	; select bank3
 13249  170D  0093               	movwf	19	;volatile
 13250                           
 13251                           ;eeprom.c: 91: CFGS = 0;
 13252  170E  1315               	bcf	21,6	;volsfr
 13253                           
 13254                           ;eeprom.c: 92: EEPGD = 0;
 13255  170F  1395               	bcf	21,7	;volsfr
 13256                           
 13257                           ;eeprom.c: 93: WREN = 1;
 13258  1710  1515               	bsf	21,2	;volsfr
 13259                           
 13260                           ;eeprom.c: 95: GIE = 0;
 13261  1711  138B               	bcf	11,7	;volatile
 13262                           
 13263                           ;eeprom.c: 96: EECON2 = 0x55;
 13264  1712  3055               	movlw	85
 13265  1713  0096               	movwf	22	;volsfr
 13266                           
 13267                           ;eeprom.c: 97: EECON2 = 0xAA;
 13268  1714  30AA               	movlw	170
 13269  1715  0096               	movwf	22	;volsfr
 13270                           
 13271                           ;eeprom.c: 98: WR = 1;
 13272  1716  1495               	bsf	21,1	;volsfr
 13273                           
 13274                           ;eeprom.c: 99: GIE = 1;
 13275  1717  178B               	bsf	11,7	;volatile
 13276                           
 13277                           ;eeprom.c: 100: WREN = 0;
 13278  1718  1115               	bcf	21,2	;volsfr
 13279  1719                     l751:	
 13280                           ;eeprom.c: 103: while( WR )
 13281                           
 13282  1719  0023               	movlb	3	; select bank3
 13283  171A  1895               	btfsc	21,1	;volsfr
 13284  171B  2F1D               	goto	l752
 13285  171C  0008               	return
 13286  171D                     l752:	
 13287  171D  0000               	nop	;# 
 13288  171E  0000               	nop	;# 
 13289  171F  2F19               	goto	l751
 13290  1720                     __end_of_write_eeprom_data:	
 13291  1720                     __ptext28:	
 13292 ;; *************** function ___lwdiv *****************
 13293 ;; Defined at:
 13294 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13295 ;; Parameters:    Size  Location     Type
 13296 ;;  divisor         2   16[BANK0 ] unsigned int 
 13297 ;;  dividend        2   18[BANK0 ] unsigned int 
 13298 ;; Auto vars:     Size  Location     Type
 13299 ;;  quotient        2   21[BANK0 ] unsigned int 
 13300 ;;  counter         1   20[BANK0 ] unsigned char 
 13301 ;; Return value:  Size  Location     Type
 13302 ;;                  2   16[BANK0 ] unsigned int 
 13303 ;; Registers used:
 13304 ;;		wreg, status,2, status,0
 13305 ;; Tracked objects:
 13306 ;;		On entry : 1F/0
 13307 ;;		On exit  : 1F/0
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13310 ;;      Params:         0       4       0       0       0       0       0       0
 13311 ;;      Locals:         0       3       0       0       0       0       0       0
 13312 ;;      Temps:          0       0       0       0       0       0       0       0
 13313 ;;      Totals:         0       7       0       0       0       0       0       0
 13314 ;;Total ram usage:        7 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; Hardware stack levels required when called:    4
 13317 ;; This function calls:
 13318 ;;		Nothing
 13319 ;; This function is called by:
 13320 ;;		_EOL
 13321 ;;		_interrrupt_bldc
 13322 ;; This function uses a non-reentrant model
 13323 ;;
 13324                           
 13325                           
 13326                           ;psect for function ___lwdiv
 13327  1720                     ___lwdiv:	
 13328                           
 13329                           ;incstack = 0
 13330                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13331  1720  01B5               	clrf	___lwdiv@quotient
 13332  1721  01B6               	clrf	___lwdiv@quotient+1
 13333  1722  0830               	movf	___lwdiv@divisor,w
 13334  1723  0431               	iorwf	___lwdiv@divisor+1,w
 13335  1724  1903               	btfsc	3,2
 13336  1725  2F40               	goto	l10360
 13337  1726  01B4               	clrf	___lwdiv@counter
 13338  1727                     L18:	
 13339  1727  0AB4               	incf	___lwdiv@counter,f
 13340  1728  1BB1               	btfsc	___lwdiv@divisor+1,7
 13341  1729  2F2D               	goto	l10348
 13342  172A  35B0               	lslf	___lwdiv@divisor,f
 13343  172B  0DB1               	rlf	___lwdiv@divisor+1,f
 13344  172C  2F27               	goto	L18
 13345  172D                     l10348:	
 13346  172D  35B5               	lslf	___lwdiv@quotient,f
 13347  172E  0DB6               	rlf	___lwdiv@quotient+1,f
 13348  172F  0831               	movf	___lwdiv@divisor+1,w
 13349  1730  0233               	subwf	___lwdiv@dividend+1,w
 13350  1731  1D03               	skipz
 13351  1732  2F35               	goto	u8035
 13352  1733  0830               	movf	___lwdiv@divisor,w
 13353  1734  0232               	subwf	___lwdiv@dividend,w
 13354  1735                     u8035:	
 13355  1735  1C03               	skipc
 13356  1736  2F3C               	goto	l10356
 13357  1737  0830               	movf	___lwdiv@divisor,w
 13358  1738  02B2               	subwf	___lwdiv@dividend,f
 13359  1739  0831               	movf	___lwdiv@divisor+1,w
 13360  173A  3BB3               	subwfb	___lwdiv@dividend+1,f
 13361  173B  1435               	bsf	___lwdiv@quotient,0
 13362  173C                     l10356:	
 13363  173C  36B1               	lsrf	___lwdiv@divisor+1,f
 13364  173D  0CB0               	rrf	___lwdiv@divisor,f
 13365  173E  0BB4               	decfsz	___lwdiv@counter,f
 13366  173F  2F2D               	goto	l10348
 13367  1740                     l10360:	
 13368  1740  0836               	movf	___lwdiv@quotient+1,w
 13369  1741  00B1               	movwf	?___lwdiv+1
 13370  1742  0835               	movf	___lwdiv@quotient,w
 13371  1743  00B0               	movwf	?___lwdiv
 13372  1744  0008               	return
 13373  1745                     __end_of___lwdiv:	
 13374  1745                     __ptext30:	
 13375 ;; *************** function _PWMReadDC *****************
 13376 ;; Defined at:
 13377 ;;		line 361 in file "../pwm.c"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;		None
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;		None
 13382 ;; Return value:  Size  Location     Type
 13383 ;;                  1    wreg      unsigned char 
 13384 ;; Registers used:
 13385 ;;		wreg, status,2, status,0, pclath, cstack
 13386 ;; Tracked objects:
 13387 ;;		On entry : 1F/4
 13388 ;;		On exit  : 1F/2
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13391 ;;      Params:         0       0       0       0       0       0       0       0
 13392 ;;      Locals:         0       0       0       0       0       0       0       0
 13393 ;;      Temps:          0       0       0       0       0       0       0       0
 13394 ;;      Totals:         0       0       0       0       0       0       0       0
 13395 ;;Total ram usage:        0 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    5
 13398 ;; This function calls:
 13399 ;;		___ltdiv
 13400 ;;		___tmul
 13401 ;; This function is called by:
 13402 ;;		_EOL
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           
 13407                           ;psect for function _PWMReadDC
 13408  1745                     _PWMReadDC:	
 13409                           
 13410                           ;pwm.c: 366: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
 13411                           
 13412                           ;incstack = 0
 13413                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
 13414  1745  0022               	movlb	2	; select bank2
 13415  1746  0823               	movf	_ui16_PWM_Freq_In^(0+256),w
 13416  1747  0020               	movlb	0	; select bank0
 13417  1748  00B9               	movwf	___ltdiv@divisor
 13418  1749  0022               	movlb	2	; select bank2
 13419  174A  0824               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
 13420  174B  0020               	movlb	0	; select bank0
 13421  174C  00BA               	movwf	___ltdiv@divisor+1
 13422  174D  01BB               	clrf	___ltdiv@divisor+2
 13423  174E  0023               	movlb	3	; select bank3
 13424  174F  086A               	movf	_ui16_Duty_Cycle_In^(0+384),w
 13425  1750  0020               	movlb	0	; select bank0
 13426  1751  00B0               	movwf	___tmul@multiplier
 13427  1752  0023               	movlb	3	; select bank3
 13428  1753  086B               	movf	(_ui16_Duty_Cycle_In+1)^(0+384),w
 13429  1754  0020               	movlb	0	; select bank0
 13430  1755  00B1               	movwf	___tmul@multiplier+1
 13431  1756  30C8               	movlw	200
 13432  1757  01B2               	clrf	___tmul@multiplier+2
 13433  1758  00B3               	movwf	___tmul@multiplicand
 13434  1759  01B4               	clrf	___tmul@multiplicand+1
 13435  175A  01B5               	clrf	___tmul@multiplicand+2
 13436  175B  27B5  3190         	fcall	___tmul
 13437  175D  0830               	movf	?___tmul,w
 13438  175E  00BC               	movwf	___ltdiv@dividend
 13439  175F  0831               	movf	?___tmul+1,w
 13440  1760  00BD               	movwf	___ltdiv@dividend+1
 13441  1761  0832               	movf	?___tmul+2,w
 13442  1762  00BE               	movwf	___ltdiv@dividend+2
 13443  1763  2783  3190         	fcall	___ltdiv
 13444  1765  0839               	movf	?___ltdiv,w
 13445  1766  0021               	movlb	1	; select bank1
 13446  1767  00CA               	movwf	_ui8_PWMinDC_sav^(0+128)
 13447                           
 13448                           ;pwm.c: 368: if( ui8_PWMinDC_sav == 0 )
 13449  1768  084A               	movf	_ui8_PWMinDC_sav^(0+128),w
 13450  1769  1D03               	btfss	3,2
 13451  176A  2F76               	goto	l12398
 13452                           
 13453                           ;pwm.c: 370: {
 13454                           ;pwm.c: 374: ui8_PWMin_failCnt++;
 13455  176B  0022               	movlb	2	; select bank2
 13456  176C  3005               	movlw	5
 13457  176D  0ACE               	incf	_ui8_PWMin_failCnt^(0+256),f
 13458                           
 13459                           ;pwm.c: 376: if( ui8_PWMin_failCnt >= 5 )
 13460  176E  024E               	subwf	_ui8_PWMin_failCnt^(0+256),w
 13461  176F  1C03               	skipc
 13462  1770  2F7F               	goto	l12404
 13463                           
 13464                           ;pwm.c: 378: {
 13465                           ;pwm.c: 380: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
 13466  1771  0021               	movlb	1	; select bank1
 13467  1772  084A               	movf	_ui8_PWMinDC_sav^(0+128),w
 13468  1773  0022               	movlb	2	; select bank2
 13469  1774  00CF               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
 13470  1775  2F7F               	goto	l12404
 13471  1776                     l12398:	
 13472                           
 13473                           ;pwm.c: 391: else
 13474                           ;pwm.c: 392: {
 13475                           ;pwm.c: 396: ui8_PWMin_failCnt = 0;
 13476  1776  0022               	movlb	2	; select bank2
 13477  1777  01CE               	clrf	_ui8_PWMin_failCnt^(0+256)
 13478                           
 13479                           ;pwm.c: 399: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
 13480  1778  0021               	movlb	1	; select bank1
 13481  1779  084A               	movf	_ui8_PWMinDC_sav^(0+128),w
 13482  177A  0022               	movlb	2	; select bank2
 13483  177B  00CF               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
 13484                           
 13485                           ;pwm.c: 401: ui16_Duty_Cycle_In = 0;
 13486  177C  0023               	movlb	3	; select bank3
 13487  177D  01EA               	clrf	_ui16_Duty_Cycle_In^(0+384)
 13488  177E  01EB               	clrf	(_ui16_Duty_Cycle_In+1)^(0+384)
 13489  177F                     l12404:	
 13490                           
 13491                           ;pwm.c: 403: }
 13492                           ;pwm.c: 408: return ( 200 - ui8_Duty_Cycle_In_Ratio );
 13493  177F  0022               	movlb	2	; select bank2
 13494  1780  084F               	movf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
 13495  1781  3CC8               	sublw	200
 13496  1782  0008               	return
 13497  1783                     __end_of_PWMReadDC:	
 13498  1783                     __ptext32:	
 13499 ;; *************** function ___ltdiv *****************
 13500 ;; Defined at:
 13501 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ltdiv.c"
 13502 ;; Parameters:    Size  Location     Type
 13503 ;;  divisor         3   25[BANK0 ] unsigned um
 13504 ;;  dividend        3   28[BANK0 ] unsigned um
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;  quotient        3   31[BANK0 ] unsigned um
 13507 ;;  counter         1   34[BANK0 ] unsigned char 
 13508 ;; Return value:  Size  Location     Type
 13509 ;;                  3   25[BANK0 ] unsigned um
 13510 ;; Registers used:
 13511 ;;		wreg, status,2, status,0
 13512 ;; Tracked objects:
 13513 ;;		On entry : 1F/0
 13514 ;;		On exit  : 1F/0
 13515 ;;		Unchanged: 0/0
 13516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13517 ;;      Params:         0       6       0       0       0       0       0       0
 13518 ;;      Locals:         0       4       0       0       0       0       0       0
 13519 ;;      Temps:          0       0       0       0       0       0       0       0
 13520 ;;      Totals:         0      10       0       0       0       0       0       0
 13521 ;;Total ram usage:       10 bytes
 13522 ;; Hardware stack levels used:    1
 13523 ;; Hardware stack levels required when called:    4
 13524 ;; This function calls:
 13525 ;;		Nothing
 13526 ;; This function is called by:
 13527 ;;		_PWMReadDC
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           
 13532                           ;psect for function ___ltdiv
 13533  1783                     ___ltdiv:	
 13534                           
 13535                           ;incstack = 0
 13536                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
 13537  1783  01BF               	clrf	___ltdiv@quotient
 13538  1784  01C0               	clrf	___ltdiv@quotient+1
 13539  1785  01C1               	clrf	___ltdiv@quotient+2
 13540  1786  083B               	movf	___ltdiv@divisor+2,w
 13541  1787  043A               	iorwf	___ltdiv@divisor+1,w
 13542  1788  0439               	iorwf	___ltdiv@divisor,w
 13543  1789  1903               	skipnz
 13544  178A  2FAE               	goto	l12366
 13545  178B  01C2               	clrf	___ltdiv@counter
 13546  178C                     L19:	
 13547  178C  0AC2               	incf	___ltdiv@counter,f
 13548  178D  1BBB               	btfsc	___ltdiv@divisor+2,7
 13549  178E  2F93               	goto	l12354
 13550  178F  35B9               	lslf	___ltdiv@divisor,f
 13551  1790  0DBA               	rlf	___ltdiv@divisor+1,f
 13552  1791  0DBB               	rlf	___ltdiv@divisor+2,f
 13553  1792  2F8C               	goto	L19
 13554  1793                     l12354:	
 13555  1793  35BF               	lslf	___ltdiv@quotient,f
 13556  1794  0DC0               	rlf	___ltdiv@quotient+1,f
 13557  1795  0DC1               	rlf	___ltdiv@quotient+2,f
 13558  1796  083B               	movf	___ltdiv@divisor+2,w
 13559  1797  023E               	subwf	___ltdiv@dividend+2,w
 13560  1798  1D03               	skipz
 13561  1799  2FA0               	goto	u10575
 13562  179A  083A               	movf	___ltdiv@divisor+1,w
 13563  179B  023D               	subwf	___ltdiv@dividend+1,w
 13564  179C  1D03               	skipz
 13565  179D  2FA0               	goto	u10575
 13566  179E  0839               	movf	___ltdiv@divisor,w
 13567  179F  023C               	subwf	___ltdiv@dividend,w
 13568  17A0                     u10575:	
 13569  17A0  1C03               	skipc
 13570  17A1  2FA9               	goto	l12362
 13571  17A2  0839               	movf	___ltdiv@divisor,w
 13572  17A3  02BC               	subwf	___ltdiv@dividend,f
 13573  17A4  083A               	movf	___ltdiv@divisor+1,w
 13574  17A5  3BBD               	subwfb	___ltdiv@dividend+1,f
 13575  17A6  083B               	movf	___ltdiv@divisor+2,w
 13576  17A7  3BBE               	subwfb	___ltdiv@dividend+2,f
 13577  17A8  143F               	bsf	___ltdiv@quotient,0
 13578  17A9                     l12362:	
 13579  17A9  36BB               	lsrf	___ltdiv@divisor+2,f
 13580  17AA  0CBA               	rrf	___ltdiv@divisor+1,f
 13581  17AB  0CB9               	rrf	___ltdiv@divisor,f
 13582  17AC  0BC2               	decfsz	___ltdiv@counter,f
 13583  17AD  2F93               	goto	l12354
 13584  17AE                     l12366:	
 13585  17AE  083F               	movf	___ltdiv@quotient,w
 13586  17AF  00B9               	movwf	?___ltdiv
 13587  17B0  0840               	movf	___ltdiv@quotient+1,w
 13588  17B1  00BA               	movwf	?___ltdiv+1
 13589  17B2  0841               	movf	___ltdiv@quotient+2,w
 13590  17B3  00BB               	movwf	?___ltdiv+2
 13591  17B4  0008               	return
 13592  17B5                     __end_of___ltdiv:	
 13593  17B5                     __ptext31:	
 13594 ;; *************** function ___tmul *****************
 13595 ;; Defined at:
 13596 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul24.c"
 13597 ;; Parameters:    Size  Location     Type
 13598 ;;  multiplier      3   16[BANK0 ] unsigned um
 13599 ;;  multiplicand    3   19[BANK0 ] unsigned um
 13600 ;; Auto vars:     Size  Location     Type
 13601 ;;  product         3   22[BANK0 ] unsigned um
 13602 ;; Return value:  Size  Location     Type
 13603 ;;                  3   16[BANK0 ] unsigned um
 13604 ;; Registers used:
 13605 ;;		wreg, status,2, status,0
 13606 ;; Tracked objects:
 13607 ;;		On entry : 1F/0
 13608 ;;		On exit  : 1F/0
 13609 ;;		Unchanged: 0/0
 13610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13611 ;;      Params:         0       6       0       0       0       0       0       0
 13612 ;;      Locals:         0       3       0       0       0       0       0       0
 13613 ;;      Temps:          0       0       0       0       0       0       0       0
 13614 ;;      Totals:         0       9       0       0       0       0       0       0
 13615 ;;Total ram usage:        9 bytes
 13616 ;; Hardware stack levels used:    1
 13617 ;; Hardware stack levels required when called:    4
 13618 ;; This function calls:
 13619 ;;		Nothing
 13620 ;; This function is called by:
 13621 ;;		_PWMReadDC
 13622 ;; This function uses a non-reentrant model
 13623 ;;
 13624                           
 13625                           
 13626                           ;psect for function ___tmul
 13627  17B5                     ___tmul:	
 13628                           
 13629                           ;incstack = 0
 13630                           ; Regs used in ___tmul: [wreg+status,2+status,0]
 13631  17B5  01B6               	clrf	___tmul@product
 13632  17B6  01B7               	clrf	___tmul@product+1
 13633  17B7  01B8               	clrf	___tmul@product+2
 13634  17B8                     l2065:	
 13635  17B8  1C30               	btfss	___tmul@multiplier,0
 13636  17B9  2FC0               	goto	l9858
 13637  17BA  0833               	movf	___tmul@multiplicand,w
 13638  17BB  07B6               	addwf	___tmul@product,f
 13639  17BC  0834               	movf	___tmul@multiplicand+1,w
 13640  17BD  3DB7               	addwfc	___tmul@product+1,f
 13641  17BE  0835               	movf	___tmul@multiplicand+2,w
 13642  17BF  3DB8               	addwfc	___tmul@product+2,f
 13643  17C0                     l9858:	
 13644  17C0  35B3               	lslf	___tmul@multiplicand,f
 13645  17C1  0DB4               	rlf	___tmul@multiplicand+1,f
 13646  17C2  0DB5               	rlf	___tmul@multiplicand+2,f
 13647  17C3  36B2               	lsrf	___tmul@multiplier+2,f
 13648  17C4  0CB1               	rrf	___tmul@multiplier+1,f
 13649  17C5  0CB0               	rrf	___tmul@multiplier,f
 13650  17C6  0832               	movf	___tmul@multiplier+2,w
 13651  17C7  0431               	iorwf	___tmul@multiplier+1,w
 13652  17C8  0430               	iorwf	___tmul@multiplier,w
 13653  17C9  1D03               	skipz
 13654  17CA  2FB8               	goto	l2065
 13655  17CB  0836               	movf	___tmul@product,w
 13656  17CC  00B0               	movwf	?___tmul
 13657  17CD  0837               	movf	___tmul@product+1,w
 13658  17CE  00B1               	movwf	?___tmul+1
 13659  17CF  0838               	movf	___tmul@product+2,w
 13660  17D0  00B2               	movwf	?___tmul+2
 13661  17D1  0008               	return
 13662  17D2                     __end_of___tmul:	
 13663  17D2                     __ptext27:	
 13664 ;; *************** function _cksum *****************
 13665 ;; Defined at:
 13666 ;;		line 6 in file "../cksum.c"
 13667 ;; Parameters:    Size  Location     Type
 13668 ;;		None
 13669 ;; Auto vars:     Size  Location     Type
 13670 ;;  addr            2   22[BANK0 ] unsigned short 
 13671 ;;  sum             2   20[BANK0 ] unsigned int 
 13672 ;;  counter         2   18[BANK0 ] unsigned int 
 13673 ;; Return value:  Size  Location     Type
 13674 ;;                  2   16[BANK0 ] unsigned int 
 13675 ;; Registers used:
 13676 ;;		wreg, status,2, status,0
 13677 ;; Tracked objects:
 13678 ;;		On entry : 1F/0
 13679 ;;		On exit  : 1F/0
 13680 ;;		Unchanged: 0/0
 13681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13682 ;;      Params:         0       2       0       0       0       0       0       0
 13683 ;;      Locals:         0       6       0       0       0       0       0       0
 13684 ;;      Temps:          0       0       0       0       0       0       0       0
 13685 ;;      Totals:         0       8       0       0       0       0       0       0
 13686 ;;Total ram usage:        8 bytes
 13687 ;; Hardware stack levels used:    1
 13688 ;; Hardware stack levels required when called:    4
 13689 ;; This function calls:
 13690 ;;		Nothing
 13691 ;; This function is called by:
 13692 ;;		_EOL
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           
 13697                           ;psect for function _cksum
 13698  17D2                     _cksum:	
 13699  17D2  30FE               	movlw	254
 13700                           
 13701                           ;cksum.c: 7: unsigned int sum;
 13702                           ;cksum.c: 8: unsigned short addr;
 13703                           ;cksum.c: 9: unsigned int counter;
 13704                           ;cksum.c: 11: addr = 0L;
 13705                           
 13706                           ;incstack = 0
 13707                           ; Regs used in _cksum: [wreg+status,2+status,0]
 13708  17D3  01B6               	clrf	cksum@addr
 13709  17D4  01B7               	clrf	cksum@addr+1
 13710                           
 13711                           ;cksum.c: 12: sum = 0;
 13712  17D5  01B4               	clrf	cksum@sum
 13713  17D6  01B5               	clrf	cksum@sum+1
 13714                           
 13715                           ;cksum.c: 13: counter = ( (8192 - 2 - 1) - 0L + 1 );
 13716  17D7  00B2               	movwf	cksum@counter
 13717  17D8  301F               	movlw	31
 13718  17D9  00B3               	movwf	cksum@counter+1
 13719  17DA                     l1973:	
 13720                           ;cksum.c: 15: while(counter--){
 13721                           
 13722  17DA  3001               	movlw	1
 13723  17DB  02B2               	subwf	cksum@counter,f
 13724  17DC  3000               	movlw	0
 13725  17DD  3BB3               	subwfb	cksum@counter+1,f
 13726  17DE  0F32               	incfsz	cksum@counter,w
 13727  17DF  2FE3               	goto	l9966
 13728  17E0  0A33               	incf	cksum@counter+1,w
 13729  17E1  1903               	btfsc	3,2
 13730  17E2  2FFB               	goto	l9980
 13731  17E3                     l9966:	
 13732                           
 13733                           ;cksum.c: 22: sum += (EEADRL=(addr)&0xff, EEADRH=(addr)>>8, WREN=0, EECON1 |= 0x80, RD=1
      +                          , __nop(), __nop(), (EEDATH << 8) | EEDATA);
 13734  17E3  0836               	movf	cksum@addr,w
 13735  17E4  0023               	movlb	3	; select bank3
 13736  17E5  0091               	movwf	17	;volatile
 13737  17E6  0020               	movlb	0	; select bank0
 13738  17E7  0837               	movf	cksum@addr+1,w
 13739  17E8  0023               	movlb	3	; select bank3
 13740  17E9  0092               	movwf	18	;volatile
 13741  17EA  1115               	bcf	21,2	;volsfr
 13742  17EB  1795               	bsf	21,7	;volsfr
 13743  17EC  1415               	bsf	21,0	;volsfr
 13744  17ED  0000               	nop
 13745  17EE  0000               	nop
 13746  17EF  0023               	movlb	3	; select bank3
 13747  17F0  0813               	movf	19,w	;volatile
 13748  17F1  0020               	movlb	0	; select bank0
 13749  17F2  07B4               	addwf	cksum@sum,f
 13750  17F3  0023               	movlb	3	; select bank3
 13751  17F4  0814               	movf	20,w	;volatile
 13752  17F5  0020               	movlb	0	; select bank0
 13753  17F6  3DB5               	addwfc	cksum@sum+1,f
 13754                           
 13755                           ;cksum.c: 31: addr++;
 13756  17F7  0AB6               	incf	cksum@addr,f
 13757  17F8  1903               	skipnz
 13758  17F9  0AB7               	incf	cksum@addr+1,f
 13759  17FA  2FDA               	goto	l1973
 13760  17FB                     l9980:	
 13761                           
 13762                           ;cksum.c: 32: }
 13763                           ;cksum.c: 33: return sum;
 13764  17FB  0835               	movf	cksum@sum+1,w
 13765  17FC  00B1               	movwf	?_cksum+1
 13766  17FD  0834               	movf	cksum@sum,w
 13767  17FE  00B0               	movwf	?_cksum
 13768  17FF  0008               	return
 13769  1800                     __end_of_cksum:	
 13770                           
 13771                           	psect	text41
 13772  0891                     __ptext41:	
 13773 ;; *************** function _BVH2_Appl_Layer *****************
 13774 ;; Defined at:
 13775 ;;		line 331 in file "../T_Link/BVH2_Appl_Layer.c"
 13776 ;; Parameters:    Size  Location     Type
 13777 ;;		None
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  Sb3_Sum1        2   28[BANK4 ] short 
 13780 ;;  Sb3_Product1    2   15[BANK4 ] unsigned short 
 13781 ;;  Sb4_PI_sum      2   30[BANK4 ] short 
 13782 ;;  Sb2_Switch2     2   25[BANK4 ] unsigned short 
 13783 ;;  Sb2_Error       2   23[BANK4 ] short 
 13784 ;;  Sb2_Switch5     2   17[BANK4 ] unsigned short 
 13785 ;;  Sb1_Logical_    1   27[BANK4 ] unsigned char 
 13786 ;;  Sb2_Logical_    1   22[BANK4 ] unsigned char 
 13787 ;;  Sb1_Logical_    1   21[BANK4 ] unsigned char 
 13788 ;;  Sb1_Logical_    1   20[BANK4 ] unsigned char 
 13789 ;;  Cb24_Reset      1   19[BANK4 ] unsigned char 
 13790 ;;  Sb1_Logical_    1    8[BANK4 ] unsigned char 
 13791 ;; Return value:  Size  Location     Type
 13792 ;;                  1    wreg      void 
 13793 ;; Registers used:
 13794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13795 ;; Tracked objects:
 13796 ;;		On entry : 1F/1
 13797 ;;		On exit  : 1F/2
 13798 ;;		Unchanged: 0/0
 13799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13800 ;;      Params:         0       0       0       0       0       0       0       0
 13801 ;;      Locals:         0       0       0       0       0      32       0       0
 13802 ;;      Temps:          0       6       0       0       0       0       0       0
 13803 ;;      Totals:         0       6       0       0       0      32       0       0
 13804 ;;Total ram usage:       38 bytes
 13805 ;; Hardware stack levels used:    1
 13806 ;; Hardware stack levels required when called:    5
 13807 ;; This function calls:
 13808 ;;		_Cb1_Current_An___High_node_fcn1
 13809 ;;		_Cb34_PWM_Detection_node_fcn1
 13810 ;;		_Cb44_Pic_etat_monitor_node_fcn1
 13811 ;;		_Cb56_UbatHandling_node_fcn2
 13812 ;;		___aldiv
 13813 ;;		___lmul
 13814 ;;		___wmul
 13815 ;; This function is called by:
 13816 ;;		_main
 13817 ;; This function uses a non-reentrant model
 13818 ;;
 13819                           
 13820                           
 13821                           ;psect for function _BVH2_Appl_Layer
 13822  0891                     _BVH2_Appl_Layer:	
 13823                           
 13824                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;
 13825                           ;BVH2_Appl_Layer.c: 335: static UInt16 Cb19_Counter = 0;
 13826                           ;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;
 13827                           ;BVH2_Appl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;
 13828                           ;BVH2_Appl_Layer.c: 338: static UInt8 Cb24_RestartCounter = 0;
 13829                           ;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;
 13830                           ;BVH2_Appl_Layer.c: 340: static UInt8 Cb9_StateCnt = 0;
 13831                           ;BVH2_Appl_Layer.c: 342: static struct tag_SIBFS_Current_Analysis_low_ SIBFS_Current_Ana
      +                          lysis_low_b = {
 13832                           ;BVH2_Appl_Layer.c: 343: 0 ,
 13833                           
 13834                           ;incstack = 0
 13835                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13836  0891  28D0               	goto	l11390
 13837  0892                     l11330:	
 13838                           
 13839                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
 13840  0892  3000               	movlw	0
 13841  0893  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 13842  0894  3033               	movlw	51
 13843  0895                     L21:	
 13844  0895  1903               	skipnz
 13845  0896  0226               	subwf	_Cb44_StateCnt^(0+128),w
 13846  0897  1C03               	skipc
 13847  0898  28A3               	goto	l11338
 13848                           
 13849                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
 13850  0899  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13851  089A  39F8               	andlw	-8
 13852  089B  3805               	iorlw	5
 13853  089C  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13854                           
 13855                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
 13856  089D  0022               	movlb	2	; select bank2
 13857  089E  01C5               	clrf	_Cb44_oShutoff^(0+256)
 13858  089F                     l11336:	
 13859                           
 13860                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
 13861  089F  0021               	movlb	1	; select bank1
 13862  08A0  01A6               	clrf	_Cb44_StateCnt^(0+128)
 13863  08A1  01A7               	clrf	(_Cb44_StateCnt+1)^(0+128)
 13864                           
 13865                           ;BVH2_Appl_Layer.c: 422: }
 13866  08A2  28E5               	goto	l11392
 13867  08A3                     l11338:	
 13868                           
 13869                           ;BVH2_Appl_Layer.c: 423: else {
 13870                           ;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 1 ;
 13871  08A3  0021               	movlb	1	; select bank1
 13872  08A4  0826               	movf	_Cb44_StateCnt^(0+128),w
 13873  08A5  3E01               	addlw	1
 13874  08A6  00A6               	movwf	_Cb44_StateCnt^(0+128)
 13875  08A7  3000               	movlw	0
 13876  08A8  3D27               	addwfc	(_Cb44_StateCnt+1)^(0+128),w
 13877  08A9  00A7               	movwf	(_Cb44_StateCnt+1)^(0+128)
 13878  08AA  28E5               	goto	l11392
 13879  08AB                     l11340:	
 13880                           
 13881                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
 13882  08AB  2630  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
 13883                           
 13884                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
 13885  08AD  0C47               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13886  08AE  27E8  3188         	fcall	PL86	;call to abstracted procedure
 13887  08B0  1D03               	btfss	3,2
 13888  08B1  28A3               	goto	l11338
 13889  08B2  28E5               	goto	l11392
 13890  08B3                     l11346:	
 13891                           
 13892                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
 13893  08B3  2630  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
 13894                           
 13895                           ;BVH2_Appl_Layer.c: 445: break;
 13896  08B5  28E5               	goto	l11392
 13897  08B6                     l11348:	
 13898                           
 13899                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
 13900  08B6  3000               	movlw	0
 13901  08B7  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 13902  08B8  3010               	movlw	16
 13903  08B9  2895               	goto	L21
 13904  08BA                     l11364:	
 13905                           
 13906                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
 13907  08BA  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13908  08BB  39F8               	andlw	-8
 13909  08BC  3803               	iorlw	3
 13910  08BD  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13911                           
 13912                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
 13913  08BE  0022               	movlb	2	; select bank2
 13914  08BF  01C5               	clrf	_Cb44_oShutoff^(0+256)
 13915                           
 13916                           ;BVH2_Appl_Layer.c: 484: }
 13917  08C0  28E5               	goto	l11392
 13918  08C1                     l11378:	
 13919                           
 13920                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
 13921  08C1  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13922  08C2  39F8               	andlw	-8
 13923  08C3  3806               	iorlw	6
 13924  08C4  28CE               	goto	L22
 13925  08C5                     l1577:	
 13926                           ;BVH2_Appl_Layer.c: 515: }
 13927                           ;BVH2_Appl_Layer.c: 516: default: {
 13928                           
 13929                           
 13930                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
 13931  08C5  1AC7               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
 13932  08C6  28E5               	goto	l11392
 13933                           
 13934                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
 13935  08C7  16C7               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
 13936                           
 13937                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
 13938  08C8  086F               	movf	_ui8_ResetMatlab^(0+128),w
 13939  08C9  1903               	btfsc	3,2
 13940  08CA  28E5               	goto	l11392
 13941                           
 13942                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
 13943  08CB  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13944  08CC  39F8               	andlw	-8
 13945  08CD  3804               	iorlw	4
 13946  08CE                     L22:	
 13947  08CE  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13948  08CF  289F               	goto	l11336
 13949  08D0                     l11390:	
 13950  08D0  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13951  08D1  3907               	andlw	7
 13952                           
 13953                           ; Switch size 1, requested type "space"
 13954                           ; Number of cases is 6, Range of values is 1 to 6
 13955                           ; switch strategies available:
 13956                           ; Name         Instructions Cycles
 13957                           ; simple_byte           19    10 (average)
 13958                           ; direct_byte           21     9 (fixed)
 13959                           ; jumptable            263     9 (fixed)
 13960                           ;	Chosen strategy is simple_byte
 13961  08D2  3A01               	xorlw	1	; case 1
 13962  08D3  1903               	skipnz
 13963  08D4  28C1               	goto	l11378
 13964  08D5  3A03               	xorlw	3	; case 2
 13965  08D6  1903               	skipnz
 13966  08D7  28BA               	goto	l11364
 13967  08D8  3A01               	xorlw	1	; case 3
 13968  08D9  1903               	skipnz
 13969  08DA  28B3               	goto	l11346
 13970  08DB  3A07               	xorlw	7	; case 4
 13971  08DC  1903               	skipnz
 13972  08DD  2892               	goto	l11330
 13973  08DE  3A01               	xorlw	1	; case 5
 13974  08DF  1903               	skipnz
 13975  08E0  28AB               	goto	l11340
 13976  08E1  3A03               	xorlw	3	; case 6
 13977  08E2  1903               	skipnz
 13978  08E3  28B6               	goto	l11348
 13979  08E4  28C5               	goto	l1577
 13980  08E5                     l11392:	
 13981                           
 13982                           ;BVH2_Appl_Layer.c: 538: Cb34_idPWM = ui8_PWM_dc_mat;
 13983  08E5  0021               	movlb	1	; select bank1
 13984  08E6  084F               	movf	_ui8_PWM_dc_mat^(0+128),w
 13985  08E7  00C5               	movwf	_Cb34_idPWM^(0+128)
 13986                           
 13987                           ;BVH2_Appl_Layer.c: 543: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
 13988  08E8  1A48               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
 13989  08E9  28EE               	goto	l11416
 13990  08EA  28FC               	goto	l1580
 13991  08EB                     l11398:	
 13992                           
 13993                           ;BVH2_Appl_Layer.c: 549: Cb34_PWM_Detection_node_fcn1();
 13994  08EB  267F  3188         	fcall	_Cb34_PWM_Detection_node_fcn1
 13995                           
 13996                           ;BVH2_Appl_Layer.c: 552: break;
 13997  08ED  2905               	goto	l11432
 13998  08EE                     l11416:	
 13999  08EE  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 14000  08EF  390F               	andlw	15
 14001                           
 14002                           ; Switch size 1, requested type "space"
 14003                           ; Number of cases is 8, Range of values is 1 to 8
 14004                           ; switch strategies available:
 14005                           ; Name         Instructions Cycles
 14006                           ; direct_byte           25     9 (fixed)
 14007                           ; simple_byte           25    13 (average)
 14008                           ; jumptable            263     9 (fixed)
 14009                           ;	Chosen strategy is direct_byte
 14010  08F0  3EFF               	addlw	-1
 14011  08F1  1C03               	skipc
 14012  08F2  2905               	goto	l11432
 14013  08F3  0084               	movwf	4
 14014  08F4  3008               	movlw	8
 14015  08F5  0204               	subwf	4,w
 14016  08F6  1803               	skipnc
 14017  08F7  2905               	goto	l11432
 14018  08F8  3187               	movlp	high S13820
 14019  08F9  3504               	lslf	4,w
 14020  08FA  3E5D               	addlw	low S13820
 14021  08FB  0082               	movwf	2
 14022  08FC                     l1580:	
 14023                           
 14024                           ;BVH2_Appl_Layer.c: 615: else {
 14025                           ;BVH2_Appl_Layer.c: 616: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling = 1;
 14026  08FC  1648               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
 14027                           
 14028                           ;BVH2_Appl_Layer.c: 619: if (ui8_ResetMatlab == 1) {
 14029  08FD  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 14030  08FE  2900               	goto	u9151
 14031  08FF  2901               	goto	l11420
 14032  0900                     u9151:	
 14033  0900  2905               	goto	l11432
 14034  0901                     l11420:	
 14035                           
 14036                           ;BVH2_Appl_Layer.c: 621: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
 14037                           
 14038                           ;BVH2_Appl_Layer.c: 622: Cb34_odPumpOff = 1;
 14039                           
 14040                           ;BVH2_Appl_Layer.c: 623: Cb34_odFixedValueSel = 0;
 14041                           
 14042                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedLowValueSel = 0;
 14043  0901  27B4  3188         	fcall	PL58	;call to abstracted procedure
 14044                           
 14045                           ;BVH2_Appl_Layer.c: 625: Cb34_oPWM_SC_Alarm = 0;
 14046  0903  01C9               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 14047                           
 14048                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_Alarm = 0;
 14049  0904  01CA               	clrf	_Cb34_oPWM_Alarm^(0+256)
 14050  0905                     l11432:	
 14051                           
 14052                           ;BVH2_Appl_Layer.c: 627: }
 14053                           ;BVH2_Appl_Layer.c: 628: }
 14054                           ;BVH2_Appl_Layer.c: 633: bool_PWMin_Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
 14055  0905  0022               	movlb	2	; select bank2
 14056  0906  0849               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
 14057  0907  00D5               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
 14058                           
 14059                           ;BVH2_Appl_Layer.c: 638: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
 14060  0908  0021               	movlb	1	; select bank1
 14061  0909  1DC6               	btfss	_SIBFS_UbatHandling_b^(0+128),3
 14062  090A  292A               	goto	l1593
 14063                           
 14064                           ;BVH2_Appl_Layer.c: 642: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
 14065  090B  1E46               	btfss	_SIBFS_UbatHandling_b^(0+128),4
 14066  090C  2918               	goto	l1594
 14067                           
 14068                           ;BVH2_Appl_Layer.c: 644: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
 14069  090D  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14070  090E  39F8               	andlw	-8
 14071  090F  3802               	iorlw	2
 14072  0910  00C6               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14073                           
 14074                           ;BVH2_Appl_Layer.c: 647: if (((UInt8)ui8_BattVolt_mat) < 139) {
 14075  0911  308B               	movlw	139
 14076  0912  0232               	subwf	_ui8_BattVolt_mat^(0+128),w
 14077  0913  1803               	skipnc
 14078  0914  292F               	goto	l1601
 14079  0915                     l11442:	
 14080                           
 14081                           ;BVH2_Appl_Layer.c: 648: Cb56_UbatHandling_node_fcn2();
 14082  0915  26EA  3188         	fcall	_Cb56_UbatHandling_node_fcn2
 14083  0917  292F               	goto	l1601
 14084  0918                     l1594:	
 14085                           
 14086                           ;BVH2_Appl_Layer.c: 653: else {
 14087                           ;BVH2_Appl_Layer.c: 655: if (SIBFS_UbatHandling_b.Cb59_SaturationLow) {
 14088  0918  1EC6               	btfss	_SIBFS_UbatHandling_b^(0+128),5
 14089  0919  2923               	goto	l1597
 14090                           
 14091                           ;BVH2_Appl_Layer.c: 657: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
 14092  091A  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14093  091B  39F8               	andlw	-8
 14094  091C  3803               	iorlw	3
 14095  091D  00C6               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14096                           
 14097                           ;BVH2_Appl_Layer.c: 660: if (((UInt8)ui8_BattVolt_mat) > 49) {
 14098  091E  3032               	movlw	50
 14099  091F  0232               	subwf	_ui8_BattVolt_mat^(0+128),w
 14100  0920  1803               	btfsc	3,0
 14101  0921  2915               	goto	l11442
 14102  0922  292F               	goto	l1601
 14103  0923                     l1597:	
 14104                           
 14105                           ;BVH2_Appl_Layer.c: 666: else {
 14106                           ;BVH2_Appl_Layer.c: 668: if (SIBFS_UbatHandling_b.Cb60_NormalUbat) {
 14107  0923  1F46               	btfss	_SIBFS_UbatHandling_b^(0+128),6
 14108  0924  292F               	goto	l1601
 14109                           
 14110                           ;BVH2_Appl_Layer.c: 670: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
 14111  0925  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14112  0926  39F8               	andlw	-8
 14113  0927  3801               	iorlw	1
 14114  0928  00C6               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14115  0929  2915               	goto	l11442
 14116  092A                     l1593:	
 14117                           
 14118                           ;BVH2_Appl_Layer.c: 680: else {
 14119                           ;BVH2_Appl_Layer.c: 681: SIBFS_UbatHandling_b.Cb57_Ubat_Handling = 1;
 14120  092A  15C6               	bsf	_SIBFS_UbatHandling_b^(0+128),3
 14121                           
 14122                           ;BVH2_Appl_Layer.c: 684: if (ui8_ResetMatlab == 1) {
 14123  092B  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 14124  092C  292F               	goto	l1601
 14125                           
 14126                           ;BVH2_Appl_Layer.c: 686: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 14127                           
 14128                           ;BVH2_Appl_Layer.c: 687: Cb56_odPumpOff = 0;
 14129                           
 14130                           ;BVH2_Appl_Layer.c: 688: Cb56_odFixedValueSel = 0;
 14131                           
 14132                           ;BVH2_Appl_Layer.c: 689: Cb56_oUbat_Alarm_High = 0;
 14133  092D  27DA  3188         	fcall	PL76	;call to abstracted procedure
 14134  092F                     l1601:	
 14135                           
 14136                           ;BVH2_Appl_Layer.c: 690: }
 14137                           ;BVH2_Appl_Layer.c: 691: }
 14138                           ;BVH2_Appl_Layer.c: 694: Sb1_Logical_Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueS
      +                          el));
 14139  092F  0024               	movlb	4	; select bank4
 14140  0930  01A9               	clrf	_BVH2_Appl_Layer$1207^(0+512)
 14141  0931  0022               	movlb	2	; select bank2
 14142  0932  0846               	movf	_Cb34_odPumpOff^(0+256),w
 14143  0933  1903               	btfsc	3,2
 14144  0934  293C               	goto	l11466
 14145  0935  0021               	movlb	1	; select bank1
 14146  0936  0844               	movf	_Cb56_odFixedValueSel^(0+128),w
 14147  0937  1D03               	btfss	3,2
 14148  0938  293C               	goto	l11466
 14149  0939  0024               	movlb	4	; select bank4
 14150  093A  01A9               	clrf	_BVH2_Appl_Layer$1207^(0+512)
 14151  093B  0AA9               	incf	_BVH2_Appl_Layer$1207^(0+512),f
 14152  093C                     l11466:	
 14153  093C  0024               	movlb	4	; select bank4
 14154  093D  0829               	movf	_BVH2_Appl_Layer$1207^(0+512),w
 14155  093E  00A8               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512)
 14156                           
 14157                           ;BVH2_Appl_Layer.c: 699: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
 14158  093F  0021               	movlb	1	; select bank1
 14159  0940  1CBF               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14160  0941  2951               	goto	l1605
 14161                           
 14162                           ;BVH2_Appl_Layer.c: 701: if (Cb51_Counter > 80) {
 14163  0942  3051               	movlw	81
 14164  0943  0022               	movlb	2	; select bank2
 14165  0944  0241               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+256),w
 14166  0945  1C03               	skipc
 14167  0946  294F               	goto	l11476
 14168                           
 14169                           ;BVH2_Appl_Layer.c: 704: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
 14170  0947  0021               	movlb	1	; select bank1
 14171  0948  10BF               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14172  0949                     L24:	
 14173                           
 14174                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
 14175  0949  15BF               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14176                           
 14177                           ;BVH2_Appl_Layer.c: 706: Cb51_oTempRedAlarm = 0;
 14178  094A  0022               	movlb	2	; select bank2
 14179  094B  01BB               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
 14180                           
 14181                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempAlarm = 0;
 14182  094C  01BC               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
 14183                           
 14184                           ;BVH2_Appl_Layer.c: 708: Cb51_odPumpOff = 0;
 14185  094D  01BA               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
 14186  094E  297F               	goto	L23
 14187  094F                     l11476:	
 14188                           ;BVH2_Appl_Layer.c: 710: }
 14189                           
 14190                           ;BVH2_Appl_Layer.c: 709: Cb51_Counter = 0 ;
 14191                           
 14192                           
 14193                           ;BVH2_Appl_Layer.c: 711: else {
 14194                           ;BVH2_Appl_Layer.c: 712: Cb51_Counter = Cb51_Counter + 1 ;
 14195  094F  0AC1               	incf	BVH2_Appl_Layer@Cb51_Counter^(0+256),f
 14196                           
 14197                           ;BVH2_Appl_Layer.c: 713: }
 14198                           ;BVH2_Appl_Layer.c: 716: }
 14199  0950  29EF               	goto	l11588
 14200  0951                     l1605:	
 14201                           
 14202                           ;BVH2_Appl_Layer.c: 717: else {
 14203                           ;BVH2_Appl_Layer.c: 719: if (SIBFS_Temperature_Alarm_b.Cb53_reset) {
 14204  0951  1D3F               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14205  0952  2956               	goto	l1609
 14206                           
 14207                           ;BVH2_Appl_Layer.c: 724: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
 14208  0953  113F               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14209                           
 14210                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
 14211  0954  14BF               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14212                           
 14213                           ;BVH2_Appl_Layer.c: 728: }
 14214  0955  29EF               	goto	l11588
 14215  0956                     l1609:	
 14216                           
 14217                           ;BVH2_Appl_Layer.c: 729: else {
 14218                           ;BVH2_Appl_Layer.c: 731: if (SIBFS_Temperature_Alarm_b.Cb54_greenTemp) {
 14219  0956  1DBF               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14220  0957  296A               	goto	l1611
 14221                           
 14222                           ;BVH2_Appl_Layer.c: 735: if (ui16_mat_inpTemp < 72) {
 14223  0958  3000               	movlw	0
 14224  0959  0023               	movlb	3	; select bank3
 14225  095A  024F               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
 14226  095B  3048               	movlw	72
 14227  095C  1903               	skipnz
 14228  095D  024E               	subwf	_ui16_mat_inpTemp^(0+384),w
 14229  095E  1803               	skipnc
 14230  095F  29EF               	goto	l11588
 14231                           
 14232                           ;BVH2_Appl_Layer.c: 738: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
 14233  0960  0021               	movlb	1	; select bank1
 14234  0961  11BF               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14235                           
 14236                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
 14237  0962  163F               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14238                           
 14239                           ;BVH2_Appl_Layer.c: 740: Cb51_oTempRedAlarm = 1;
 14240  0963  0022               	movlb	2	; select bank2
 14241  0964  01BB               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
 14242  0965  0ABB               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
 14243                           
 14244                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempAlarm = 1;
 14245  0966  01BC               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
 14246  0967  0ABC               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
 14247                           
 14248                           ;BVH2_Appl_Layer.c: 744: Cb51_odPumpOff = 0;
 14249  0968  01BA               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
 14250  0969  29EF               	goto	l11588
 14251  096A                     l1611:	
 14252                           
 14253                           ;BVH2_Appl_Layer.c: 749: else {
 14254                           ;BVH2_Appl_Layer.c: 751: if (SIBFS_Temperature_Alarm_b.Cb55_redTemp) {
 14255  096A  1E3F               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14256  096B  2977               	goto	l1614
 14257                           
 14258                           ;BVH2_Appl_Layer.c: 755: if (ui16_mat_inpTemp > 185) {
 14259  096C  3000               	movlw	0
 14260  096D  0023               	movlb	3	; select bank3
 14261  096E  024F               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
 14262  096F  30BA               	movlw	186
 14263  0970  1903               	skipnz
 14264  0971  024E               	subwf	_ui16_mat_inpTemp^(0+384),w
 14265  0972  1C03               	skipc
 14266  0973  29EF               	goto	l11588
 14267                           
 14268                           ;BVH2_Appl_Layer.c: 758: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
 14269  0974  0021               	movlb	1	; select bank1
 14270  0975  123F               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14271  0976  2949               	goto	L24
 14272  0977                     l1614:	
 14273                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
 14274                           
 14275                           
 14276                           ;BVH2_Appl_Layer.c: 768: else {
 14277                           ;BVH2_Appl_Layer.c: 770: if (!(SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm)) {
 14278  0977  183F               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
 14279  0978  29EF               	goto	l11588
 14280                           
 14281                           ;BVH2_Appl_Layer.c: 771: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
 14282  0979  143F               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
 14283                           
 14284                           ;BVH2_Appl_Layer.c: 775: if (ui8_ResetMatlab != 0) {
 14285  097A  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14286  097B  1903               	btfsc	3,2
 14287  097C  29EF               	goto	l11588
 14288                           
 14289                           ;BVH2_Appl_Layer.c: 777: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
 14290  097D  153F               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14291                           
 14292                           ;BVH2_Appl_Layer.c: 778: Cb51_Counter = 0 ;
 14293  097E  0022               	movlb	2	; select bank2
 14294  097F                     L23:	
 14295  097F  01C1               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+256)
 14296  0980  29EF               	goto	l11588
 14297  0981                     l11500:	
 14298                           
 14299                           ;BVH2_Appl_Layer.c: 792: if (Cb1_StateCnt > 50) {
 14300  0981  3000               	movlw	0
 14301  0982  0229               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14302  0983  3033               	movlw	51
 14303  0984  1903               	skipnz
 14304  0985  0228               	subwf	_Cb1_StateCnt^(0+128),w
 14305  0986  1C03               	skipc
 14306  0987  298E               	goto	l11510
 14307                           
 14308                           ;BVH2_Appl_Layer.c: 795: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14309                           ;BVH2_Appl_Layer.c: 796: (UInt8)5;
 14310  0988  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14311                           
 14312                           ;BVH2_Appl_Layer.c: 797: Cb1_oShutoff = 0;
 14313                           
 14314                           ;BVH2_Appl_Layer.c: 798: Cb1_oCurrentAlarm = 0;
 14315  0989  27EF  3188         	fcall	PL92	;call to abstracted procedure
 14316  098B                     l11508:	
 14317                           
 14318                           ;BVH2_Appl_Layer.c: 799: Cb1_RestartCounter = 0 ;
 14319  098B  0022               	movlb	2	; select bank2
 14320  098C  01CD               	clrf	_Cb1_RestartCounter^(0+256)
 14321                           
 14322                           ;BVH2_Appl_Layer.c: 800: }
 14323  098D  2A08               	goto	l1623
 14324  098E                     l11510:	
 14325                           
 14326                           ;BVH2_Appl_Layer.c: 801: else {
 14327                           ;BVH2_Appl_Layer.c: 802: Cb1_StateCnt = Cb1_StateCnt + 1 ;
 14328  098E  0828               	movf	_Cb1_StateCnt^(0+128),w
 14329  098F  3E01               	addlw	1
 14330  0990  00A8               	movwf	_Cb1_StateCnt^(0+128)
 14331  0991  3000               	movlw	0
 14332  0992  3D29               	addwfc	(_Cb1_StateCnt+1)^(0+128),w
 14333  0993  00A9               	movwf	(_Cb1_StateCnt+1)^(0+128)
 14334  0994  2A08               	goto	l1623
 14335  0995                     l11512:	
 14336                           
 14337                           ;BVH2_Appl_Layer.c: 810: Cb1_Current_An___High_node_fcn1();
 14338  0995  2614  3188         	fcall	_Cb1_Current_An___High_node_fcn1
 14339                           
 14340                           ;BVH2_Appl_Layer.c: 811: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
 14341  0997  0E49               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14342  0998  3903               	andlw	3
 14343  0999  3A03               	xorlw	3
 14344  099A  1D03               	btfss	3,2
 14345  099B  298E               	goto	l11510
 14346  099C  2A08               	goto	l1623
 14347  099D                     l11518:	
 14348                           
 14349                           ;BVH2_Appl_Layer.c: 820: if (Cb1_RestartCounter < 10) {
 14350  099D  300A               	movlw	10
 14351  099E  0022               	movlb	2	; select bank2
 14352  099F  024D               	subwf	_Cb1_RestartCounter^(0+256),w
 14353  09A0  1803               	skipnc
 14354  09A1  2A08               	goto	l1623
 14355  09A2                     l11520:	
 14356                           
 14357                           ;BVH2_Appl_Layer.c: 823: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14358                           ;BVH2_Appl_Layer.c: 824: (UInt8)3;
 14359  09A2  0021               	movlb	1	; select bank1
 14360  09A3  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14361  09A4  39F0               	andlw	-16
 14362  09A5  3803               	iorlw	3
 14363  09A6  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14364                           
 14365                           ;BVH2_Appl_Layer.c: 825: Cb1_oShutoff = 0;
 14366  09A7  0022               	movlb	2	; select bank2
 14367  09A8  01CB               	clrf	_Cb1_oShutoff^(0+256)
 14368                           
 14369                           ;BVH2_Appl_Layer.c: 826: Cb1_oCurrentAlarm = 1;
 14370  09A9  01CC               	clrf	_Cb1_oCurrentAlarm^(0+256)
 14371  09AA  0ACC               	incf	_Cb1_oCurrentAlarm^(0+256),f
 14372  09AB                     l11526:	
 14373                           
 14374                           ;BVH2_Appl_Layer.c: 827: Cb1_StateCnt = 0 ;
 14375  09AB  0021               	movlb	1	; select bank1
 14376  09AC  01A8               	clrf	_Cb1_StateCnt^(0+128)
 14377  09AD  01A9               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14378  09AE  2A08               	goto	l1623
 14379  09AF                     l11528:	
 14380                           
 14381                           ;BVH2_Appl_Layer.c: 835: Cb1_Current_An___High_node_fcn1();
 14382  09AF  2614  3188         	fcall	_Cb1_Current_An___High_node_fcn1
 14383                           
 14384                           ;BVH2_Appl_Layer.c: 838: break;
 14385  09B1  2A08               	goto	l1623
 14386  09B2                     l11530:	
 14387                           
 14388                           ;BVH2_Appl_Layer.c: 842: if (Cb1_StateCnt > 200) {
 14389  09B2  3000               	movlw	0
 14390  09B3  0229               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14391  09B4  30C9               	movlw	201
 14392  09B5  1903               	skipnz
 14393  09B6  0228               	subwf	_Cb1_StateCnt^(0+128),w
 14394  09B7  1C03               	skipc
 14395  09B8  29C0               	goto	l11536
 14396                           
 14397                           ;BVH2_Appl_Layer.c: 844: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14398                           ;BVH2_Appl_Layer.c: 845: (UInt8)7;
 14399  09B9  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14400  09BA  39F0               	andlw	-16
 14401  09BB  3807               	iorlw	7
 14402  09BC  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14403                           
 14404                           ;BVH2_Appl_Layer.c: 846: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
 14405  09BD  0022               	movlb	2	; select bank2
 14406  09BE  0ACD               	incf	_Cb1_RestartCounter^(0+256),f
 14407                           
 14408                           ;BVH2_Appl_Layer.c: 847: }
 14409  09BF  2A08               	goto	l1623
 14410  09C0                     l11536:	
 14411                           
 14412                           ;BVH2_Appl_Layer.c: 848: else {
 14413                           ;BVH2_Appl_Layer.c: 851: if (bool_mat_currAlarm_bldc) {
 14414  09C0  084E               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14415  09C1  1903               	btfsc	3,2
 14416  09C2  298E               	goto	l11510
 14417  09C3                     l11538:	
 14418                           
 14419                           ;BVH2_Appl_Layer.c: 853: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14420                           ;BVH2_Appl_Layer.c: 854: (UInt8)1;
 14421  09C3  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14422  09C4  39F0               	andlw	-16
 14423  09C5  3801               	iorlw	1
 14424  09C6  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14425                           
 14426                           ;BVH2_Appl_Layer.c: 855: Cb1_StateCnt = 0 ;
 14427  09C7  01A8               	clrf	_Cb1_StateCnt^(0+128)
 14428  09C8  01A9               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14429                           
 14430                           ;BVH2_Appl_Layer.c: 856: Cb1_oShutoff = 1;
 14431  09C9  0022               	movlb	2	; select bank2
 14432  09CA  01CB               	clrf	_Cb1_oShutoff^(0+256)
 14433  09CB  0ACB               	incf	_Cb1_oShutoff^(0+256),f
 14434                           
 14435                           ;BVH2_Appl_Layer.c: 857: Cb1_oCurrentAlarm = 1;
 14436  09CC  01CC               	clrf	_Cb1_oCurrentAlarm^(0+256)
 14437  09CD  0ACC               	incf	_Cb1_oCurrentAlarm^(0+256),f
 14438                           
 14439                           ;BVH2_Appl_Layer.c: 858: }
 14440  09CE  2A08               	goto	l1623
 14441  09CF                     l11548:	
 14442                           
 14443                           ;BVH2_Appl_Layer.c: 872: if (!(bool_mat_currAlarm_bldc)) {
 14444  09CF  084E               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14445  09D0  1903               	btfsc	3,2
 14446  09D1  29A2               	goto	l11520
 14447                           
 14448                           ;BVH2_Appl_Layer.c: 880: else {
 14449                           ;BVH2_Appl_Layer.c: 881: if (Cb1_StateCnt > 1) {
 14450  09D2  3000               	movlw	0
 14451  09D3  0229               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14452  09D4  3002               	movlw	2
 14453  09D5  1903               	skipnz
 14454  09D6  0228               	subwf	_Cb1_StateCnt^(0+128),w
 14455  09D7  1803               	btfsc	3,0
 14456  09D8  29C3               	goto	l11538
 14457  09D9  298E               	goto	l11510
 14458  09DA                     l11570:	
 14459                           
 14460                           ;BVH2_Appl_Layer.c: 902: if (!(bool_mat_currAlarm_bldc)) {
 14461  09DA  084E               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14462  09DB  1D03               	btfss	3,2
 14463  09DC  298E               	goto	l11510
 14464                           
 14465                           ;BVH2_Appl_Layer.c: 905: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
 14466  09DD  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14467  09DE  39F0               	andlw	-16
 14468  09DF  3804               	iorlw	4
 14469  09E0  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14470  09E1  29AB               	goto	l11526
 14471  09E2                     l1642:	
 14472                           ;BVH2_Appl_Layer.c: 914: }
 14473                           ;BVH2_Appl_Layer.c: 915: default: {
 14474                           
 14475                           
 14476                           ;BVH2_Appl_Layer.c: 917: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
 14477  09E2  1B49               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
 14478  09E3  2A08               	goto	l1623
 14479                           
 14480                           ;BVH2_Appl_Layer.c: 918: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
 14481  09E4  1749               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
 14482                           
 14483                           ;BVH2_Appl_Layer.c: 922: if (ui8_ResetMatlab != 0) {
 14484  09E5  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14485  09E6  1903               	btfsc	3,2
 14486  09E7  2A08               	goto	l1623
 14487                           
 14488                           ;BVH2_Appl_Layer.c: 924: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14489                           ;BVH2_Appl_Layer.c: 925: (UInt8)6;
 14490  09E8  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14491  09E9  39F0               	andlw	-16
 14492  09EA  3806               	iorlw	6
 14493  09EB  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14494                           
 14495                           ;BVH2_Appl_Layer.c: 926: Cb1_StateCnt = 0 ;
 14496  09EC  01A8               	clrf	_Cb1_StateCnt^(0+128)
 14497  09ED  01A9               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14498  09EE  298B               	goto	l11508
 14499  09EF                     l11588:	
 14500  09EF  0021               	movlb	1	; select bank1
 14501  09F0  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14502  09F1  390F               	andlw	15
 14503                           
 14504                           ; Switch size 1, requested type "space"
 14505                           ; Number of cases is 7, Range of values is 1 to 7
 14506                           ; switch strategies available:
 14507                           ; Name         Instructions Cycles
 14508                           ; simple_byte           22    12 (average)
 14509                           ; direct_byte           23     9 (fixed)
 14510                           ; jumptable            263     9 (fixed)
 14511                           ;	Chosen strategy is simple_byte
 14512  09F2  3A01               	xorlw	1	; case 1
 14513  09F3  1903               	skipnz
 14514  09F4  29DA               	goto	l11570
 14515  09F5  3A03               	xorlw	3	; case 2
 14516  09F6  1903               	skipnz
 14517  09F7  29CF               	goto	l11548
 14518  09F8  3A01               	xorlw	1	; case 3
 14519  09F9  1903               	skipnz
 14520  09FA  2995               	goto	l11512
 14521  09FB  3A07               	xorlw	7	; case 4
 14522  09FC  1903               	skipnz
 14523  09FD  29B2               	goto	l11530
 14524  09FE  3A01               	xorlw	1	; case 5
 14525  09FF  1903               	skipnz
 14526  0A00  29AF               	goto	l11528
 14527  0A01  3A03               	xorlw	3	; case 6
 14528  0A02  1903               	skipnz
 14529  0A03  2981               	goto	l11500
 14530  0A04  3A01               	xorlw	1	; case 7
 14531  0A05  1903               	skipnz
 14532  0A06  299D               	goto	l11518
 14533  0A07  29E2               	goto	l1642
 14534  0A08                     l1623:	
 14535                           
 14536                           ;BVH2_Appl_Layer.c: 934: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||
 14537                           ;BVH2_Appl_Layer.c: 935: Cb1_oShutoff || Cb44_oShutoff;
 14538  0A08  0024               	movlb	4	; select bank4
 14539  0A09  01AA               	clrf	_BVH2_Appl_Layer$1208^(0+512)
 14540  0A0A  0AAA               	incf	_BVH2_Appl_Layer$1208^(0+512),f
 14541  0A0B  0828               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512),w
 14542  0A0C  1D03               	btfss	3,2
 14543  0A0D  2A1D               	goto	l11602
 14544  0A0E  0022               	movlb	2	; select bank2
 14545  0A0F  0843               	movf	_Cb56_odPumpOff^(0+256),w
 14546  0A10  1D03               	btfss	3,2
 14547  0A11  2A1D               	goto	l11602
 14548  0A12  083A               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
 14549  0A13  1D03               	btfss	3,2
 14550  0A14  2A1D               	goto	l11602
 14551  0A15  084B               	movf	_Cb1_oShutoff^(0+256),w
 14552  0A16  1D03               	btfss	3,2
 14553  0A17  2A1D               	goto	l11602
 14554  0A18  0845               	movf	_Cb44_oShutoff^(0+256),w
 14555  0A19  1D03               	btfss	3,2
 14556  0A1A  2A1D               	goto	l11602
 14557  0A1B  0024               	movlb	4	; select bank4
 14558  0A1C  01AA               	clrf	_BVH2_Appl_Layer$1208^(0+512)
 14559  0A1D                     l11602:	
 14560  0A1D  0024               	movlb	4	; select bank4
 14561  0A1E  082A               	movf	_BVH2_Appl_Layer$1208^(0+512),w
 14562  0A1F  00BB               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512)
 14563                           
 14564                           ;BVH2_Appl_Layer.c: 938: Cb24_Reset = ui8_ResetMatlab != 0 ;
 14565  0A20  0021               	movlb	1	; select bank1
 14566  0A21  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14567  0A22  1903               	btfsc	3,2
 14568  0A23  2A26               	goto	u9490
 14569  0A24  3001               	movlw	1
 14570  0A25  2A27               	goto	u9500
 14571  0A26                     u9490:	
 14572  0A26  3000               	movlw	0
 14573  0A27                     u9500:	
 14574  0A27  0024               	movlb	4	; select bank4
 14575  0A28  00B3               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+512)
 14576                           
 14577                           ;BVH2_Appl_Layer.c: 943: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
 14578  0A29  0021               	movlb	1	; select bank1
 14579  0A2A  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14580  0A2B  2B21               	goto	l1647
 14581                           
 14582                           ;BVH2_Appl_Layer.c: 949: if (Sb1_Logical_Operator1 || Cb24_Reset) {
 14583  0A2C  0024               	movlb	4	; select bank4
 14584  0A2D  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 14585  0A2E  1D03               	btfss	3,2
 14586  0A2F  2A39               	goto	l11628
 14587  0A30  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 14588  0A31  1D03               	btfss	3,2
 14589  0A32  2A39               	goto	l11628
 14590  0A33  2B0A               	goto	l11746
 14591  0A34                     l11612:	
 14592                           
 14593                           ;BVH2_Appl_Layer.c: 954: Cb24_StateCnt = 0 ;
 14594  0A34  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14595  0A35  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14596  0A36                     l11614:	
 14597                           
 14598                           ;BVH2_Appl_Layer.c: 955: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 14599  0A36  30F8               	movlw	-8
 14600  0A37  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14601                           
 14602                           ;BVH2_Appl_Layer.c: 956: break;
 14603  0A38  2A4F               	goto	l1653
 14604  0A39                     l11628:	
 14605  0A39  0021               	movlb	1	; select bank1
 14606  0A3A  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14607  0A3B  3907               	andlw	7
 14608                           
 14609                           ; Switch size 1, requested type "space"
 14610                           ; Number of cases is 6, Range of values is 1 to 6
 14611                           ; switch strategies available:
 14612                           ; Name         Instructions Cycles
 14613                           ; simple_byte           19    10 (average)
 14614                           ; direct_byte           21     9 (fixed)
 14615                           ; jumptable            263     9 (fixed)
 14616                           ;	Chosen strategy is simple_byte
 14617  0A3C  3A01               	xorlw	1	; case 1
 14618  0A3D  1903               	skipnz
 14619  0A3E  2A36               	goto	l11614
 14620  0A3F  3A03               	xorlw	3	; case 2
 14621  0A40  1903               	skipnz
 14622  0A41  2A36               	goto	l11614
 14623  0A42  3A01               	xorlw	1	; case 3
 14624  0A43  1903               	skipnz
 14625  0A44  2A34               	goto	l11612
 14626  0A45  3A07               	xorlw	7	; case 4
 14627  0A46  1903               	skipnz
 14628  0A47  2A36               	goto	l11614
 14629  0A48  3A01               	xorlw	1	; case 5
 14630  0A49  1903               	skipnz
 14631  0A4A  2A36               	goto	l11614
 14632  0A4B  3A03               	xorlw	3	; case 6
 14633  0A4C  1903               	skipnz
 14634  0A4D  2A36               	goto	l11614
 14635  0A4E  2A4F               	goto	l1653
 14636  0A4F                     l1653:	
 14637                           
 14638                           ;BVH2_Appl_Layer.c: 979: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 14639  0A4F  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14640  0A50  2B3D               	goto	L38
 14641  0A51                     l11632:	
 14642                           ;BVH2_Appl_Layer.c: 984: }
 14643                           
 14644                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 14645                           
 14646                           
 14647                           ;BVH2_Appl_Layer.c: 990: if (Cb24_StateCnt) {
 14648  0A51  0822               	movf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14649  0A52  0423               	iorwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14650  0A53  1903               	btfsc	3,2
 14651  0A54  2AA5               	goto	L26
 14652                           
 14653                           ;BVH2_Appl_Layer.c: 994: Cb24_StateCnt = 0 ;
 14654  0A55  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14655  0A56  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14656  0A57                     l11636:	
 14657                           
 14658                           ;BVH2_Appl_Layer.c: 995: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int)
 14659                           ;BVH2_Appl_Layer.c: 996: (UInt8)2;
 14660  0A57  0021               	movlb	1	; select bank1
 14661  0A58  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14662  0A59  39F8               	andlw	-8
 14663  0A5A  3802               	iorlw	2
 14664  0A5B  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14665                           
 14666                           ;BVH2_Appl_Layer.c: 997: }
 14667  0A5C  2B42               	goto	l11768
 14668  0A5D                     l11640:	
 14669                           ;BVH2_Appl_Layer.c: 998: else {
 14670                           ;BVH2_Appl_Layer.c: 999: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 14671                           
 14672                           
 14673                           ;BVH2_Appl_Layer.c: 1009: if (Cb24_StateCnt > 1000) {
 14674  0A5D  3003               	movlw	3
 14675  0A5E  0223               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14676  0A5F  30E9               	movlw	233
 14677  0A60  1903               	skipnz
 14678  0A61  0222               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14679  0A62  1C03               	skipc
 14680  0A63  2A6A               	goto	l11652
 14681                           
 14682                           ;BVH2_Appl_Layer.c: 1012: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14683                           ;BVH2_Appl_Layer.c: 1013: (UInt8)5;
 14684  0A64  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14685                           
 14686                           ;BVH2_Appl_Layer.c: 1014: Cb24_StateCnt = 0 ;
 14687                           
 14688                           ;BVH2_Appl_Layer.c: 1015: Cb24_BadCnt = 0 ;
 14689                           
 14690                           ;BVH2_Appl_Layer.c: 1016: Cb24_oMotorStalled = 0;
 14691  0A65  27BE  3188         	fcall	PL60	;call to abstracted procedure
 14692  0A67  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14693                           
 14694                           ;BVH2_Appl_Layer.c: 1019: Cb24_oStalledAlarm = 0;
 14695  0A68  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14696                           
 14697                           ;BVH2_Appl_Layer.c: 1020: }
 14698  0A69  2B42               	goto	l11768
 14699  0A6A                     l11652:	
 14700                           
 14701                           ;BVH2_Appl_Layer.c: 1021: else {
 14702                           ;BVH2_Appl_Layer.c: 1024: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 14703  0A6A  27FC  3188         	fcall	PL116	;call to abstracted procedure
 14704  0A6C  1903               	skipnz
 14705  0A6D  024C               	subwf	_ui16_Speed_mat,w
 14706  0A6E  1C03               	skipc
 14707  0A6F  2A77               	goto	l11656
 14708  0A70  3001               	movlw	1
 14709  0A71  024D               	subwf	_ui16_Speed_mat+1,w
 14710  0A72  302D               	movlw	45
 14711  0A73  1903               	skipnz
 14712  0A74  024C               	subwf	_ui16_Speed_mat,w
 14713  0A75  1C03               	skipc
 14714  0A76  2AA5               	goto	L26
 14715  0A77                     l11656:	
 14716                           
 14717                           ;BVH2_Appl_Layer.c: 1027: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14718                           ;BVH2_Appl_Layer.c: 1028: (UInt8)1;
 14719  0A77  0021               	movlb	1	; select bank1
 14720  0A78  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14721  0A79  39F8               	andlw	-8
 14722  0A7A  3801               	iorlw	1
 14723  0A7B  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14724                           
 14725                           ;BVH2_Appl_Layer.c: 1029: Cb24_oStalledAlarm = 0;
 14726  0A7C  0022               	movlb	2	; select bank2
 14727  0A7D  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14728                           
 14729                           ;BVH2_Appl_Layer.c: 1030: Cb24_StateCnt = 0 ;
 14730  0A7E  0021               	movlb	1	; select bank1
 14731  0A7F  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14732  0A80  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14733                           
 14734                           ;BVH2_Appl_Layer.c: 1031: }
 14735  0A81  2B42               	goto	l11768
 14736  0A82                     l11664:	
 14737                           
 14738                           ;BVH2_Appl_Layer.c: 1044: if (Cb24_BadCnt > 100) {
 14739  0A82  3000               	movlw	0
 14740  0A83  0023               	movlb	3	; select bank3
 14741  0A84  0243               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 14742  0A85  3065               	movlw	101
 14743  0A86  1903               	skipnz
 14744  0A87  0242               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 14745  0A88  1C03               	skipc
 14746  0A89  2A91               	goto	l11674
 14747                           
 14748                           ;BVH2_Appl_Layer.c: 1047: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14749                           ;BVH2_Appl_Layer.c: 1048: (UInt8)4;
 14750                           
 14751                           ;BVH2_Appl_Layer.c: 1049: Cb24_StateCnt = 0 ;
 14752                           
 14753                           ;BVH2_Appl_Layer.c: 1050: Cb24_oMotorStalled = 1;
 14754  0A8A  27C8  3188         	fcall	PL66	;call to abstracted procedure
 14755  0A8C  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14756  0A8D  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14757                           
 14758                           ;BVH2_Appl_Layer.c: 1051: Cb24_oStalledAlarm = 1;
 14759  0A8E  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14760  0A8F  0ABD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14761                           
 14762                           ;BVH2_Appl_Layer.c: 1052: }
 14763  0A90  2B42               	goto	l11768
 14764  0A91                     l11674:	
 14765                           
 14766                           ;BVH2_Appl_Layer.c: 1053: else {
 14767                           ;BVH2_Appl_Layer.c: 1056: if ((ui16_Speed_mat >= 5) && (ui16_Speed_mat <= 300)) {
 14768  0A91  27FC  3188         	fcall	PL116	;call to abstracted procedure
 14769  0A93  1903               	skipnz
 14770  0A94  024C               	subwf	_ui16_Speed_mat,w
 14771  0A95  1C03               	skipc
 14772  0A96  2A9E               	goto	l11680
 14773  0A97  3001               	movlw	1
 14774  0A98  024D               	subwf	_ui16_Speed_mat+1,w
 14775  0A99  302D               	movlw	45
 14776  0A9A  1903               	skipnz
 14777  0A9B  024C               	subwf	_ui16_Speed_mat,w
 14778  0A9C  1C03               	btfss	3,0
 14779  0A9D  2A57               	goto	l11636
 14780  0A9E                     l11680:	
 14781                           
 14782                           ;BVH2_Appl_Layer.c: 1062: else {
 14783                           ;BVH2_Appl_Layer.c: 1063: Cb24_BadCnt = Cb24_BadCnt + 1 ;
 14784  0A9E  0023               	movlb	3	; select bank3
 14785  0A9F  0842               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 14786  0AA0  3E01               	addlw	1
 14787  0AA1  00C2               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 14788  0AA2  3000               	movlw	0
 14789  0AA3  3D43               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 14790  0AA4  00C3               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 14791  0AA5                     L26:	
 14792                           
 14793                           ;BVH2_Appl_Layer.c: 1064: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 14794  0AA5  0021               	movlb	1	; select bank1
 14795  0AA6  0822               	movf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14796  0AA7  3E01               	addlw	1
 14797  0AA8  00A2               	movwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14798  0AA9  3000               	movlw	0
 14799  0AAA  3D23               	addwfc	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14800  0AAB  00A3               	movwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14801  0AAC  2B42               	goto	l11768
 14802  0AAD                     l11684:	
 14803                           
 14804                           ;BVH2_Appl_Layer.c: 1089: if (Cb24_StateCnt > 10) {
 14805  0AAD  3000               	movlw	0
 14806  0AAE  0223               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14807  0AAF  300B               	movlw	11
 14808  0AB0  1903               	skipnz
 14809  0AB1  0222               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14810  0AB2  1C03               	skipc
 14811  0AB3  2AEF               	goto	l11726
 14812                           
 14813                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_RestartCounter == 10) {
 14814  0AB4  300A               	movlw	10
 14815  0AB5  0022               	movlb	2	; select bank2
 14816  0AB6  0642               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),w
 14817  0AB7  1D03               	btfss	3,2
 14818  0AB8  2AC5               	goto	l11698
 14819                           
 14820                           ;BVH2_Appl_Layer.c: 1092: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 14821  0AB9  30F8               	movlw	-8
 14822  0ABA  0021               	movlb	1	; select bank1
 14823  0ABB  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14824                           
 14825                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 14826  0ABC  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14827                           
 14828                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
 14829  0ABD  1421               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 14830                           
 14831                           ;BVH2_Appl_Layer.c: 1095: Cb24_oStalledAlarm = 1;
 14832  0ABE  0022               	movlb	2	; select bank2
 14833  0ABF  3018               	movlw	24
 14834  0AC0  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14835  0AC1  0ABD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14836  0AC2  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14837  0AC3  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14838  0AC4  2AE8               	goto	L28
 14839  0AC5                     l11698:	
 14840                           ;BVH2_Appl_Layer.c: 1098: }
 14841                           
 14842                           ;BVH2_Appl_Layer.c: 1097: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14843                           
 14844                           
 14845                           ;BVH2_Appl_Layer.c: 1099: else {
 14846                           ;BVH2_Appl_Layer.c: 1102: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 14847  0AC5  27FC  3188         	fcall	PL116	;call to abstracted procedure
 14848  0AC7  1903               	skipnz
 14849  0AC8  024C               	subwf	_ui16_Speed_mat,w
 14850  0AC9  1C03               	skipc
 14851  0ACA  2AD2               	goto	l11702
 14852  0ACB  3001               	movlw	1
 14853  0ACC  024D               	subwf	_ui16_Speed_mat+1,w
 14854  0ACD  302D               	movlw	45
 14855  0ACE  1903               	skipnz
 14856  0ACF  024C               	subwf	_ui16_Speed_mat,w
 14857  0AD0  1C03               	skipc
 14858  0AD1  2ADA               	goto	l11712
 14859  0AD2                     l11702:	
 14860                           
 14861                           ;BVH2_Appl_Layer.c: 1105: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14862                           ;BVH2_Appl_Layer.c: 1106: (UInt8)4;
 14863                           
 14864                           ;BVH2_Appl_Layer.c: 1107: Cb24_StateCnt = 0 ;
 14865                           
 14866                           ;BVH2_Appl_Layer.c: 1108: Cb24_oMotorStalled = 1;
 14867  0AD2  27C8  3188         	fcall	PL66	;call to abstracted procedure
 14868  0AD4  3018               	movlw	24
 14869  0AD5  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14870  0AD6  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14871                           
 14872                           ;BVH2_Appl_Layer.c: 1109: Cb24_oStalledAlarm = 1;
 14873  0AD7  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14874  0AD8  0ABD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14875                           
 14876                           ;BVH2_Appl_Layer.c: 1110: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14877  0AD9  2AE8               	goto	L28
 14878  0ADA                     l11712:	
 14879                           ;BVH2_Appl_Layer.c: 1111: }
 14880                           
 14881                           
 14882                           ;BVH2_Appl_Layer.c: 1112: else {
 14883                           ;BVH2_Appl_Layer.c: 1113: if (Cb24_StateCnt > 200) {
 14884  0ADA  3000               	movlw	0
 14885  0ADB  0021               	movlb	1	; select bank1
 14886  0ADC  0223               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14887  0ADD  30C9               	movlw	201
 14888  0ADE  1903               	skipnz
 14889  0ADF  0222               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14890                           
 14891                           ;BVH2_Appl_Layer.c: 1116: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14892                           ;BVH2_Appl_Layer.c: 1117: (UInt8)5;
 14893  0AE0  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14894  0AE1  1C03               	skipc
 14895  0AE2  2AEB               	goto	L40
 14896                           
 14897                           ;BVH2_Appl_Layer.c: 1118: Cb24_StateCnt = 0 ;
 14898                           
 14899                           ;BVH2_Appl_Layer.c: 1119: Cb24_BadCnt = 0 ;
 14900                           
 14901                           ;BVH2_Appl_Layer.c: 1120: Cb24_oMotorStalled = 0;
 14902  0AE3  27BE  3188         	fcall	PL60	;call to abstracted procedure
 14903  0AE5  3018               	movlw	24
 14904  0AE6  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14905  0AE7  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14906  0AE8                     L28:	
 14907                           
 14908                           ;BVH2_Appl_Layer.c: 1124: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14909  0AE8  0021               	movlb	1	; select bank1
 14910  0AE9  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14911                           
 14912                           ;BVH2_Appl_Layer.c: 1125: }
 14913  0AEA  2AF1               	goto	l1688
 14914  0AEB                     L40:	
 14915                           ;BVH2_Appl_Layer.c: 1126: else {
 14916                           ;BVH2_Appl_Layer.c: 1127: SIBFS_Motor_Stalled_b.Cb24_glflag = 1 ;
 14917                           
 14918  0AEB  39E7               	andlw	-25
 14919  0AEC  3808               	iorlw	8
 14920  0AED  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14921  0AEE  2AF1               	goto	l1688
 14922  0AEF                     l11726:	
 14923                           
 14924                           ;BVH2_Appl_Layer.c: 1132: else {
 14925                           ;BVH2_Appl_Layer.c: 1133: SIBFS_Motor_Stalled_b.Cb24_glflag = 0 ;
 14926  0AEF  30E7               	movlw	-25
 14927  0AF0  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14928  0AF1                     l1688:	
 14929                           
 14930                           ;BVH2_Appl_Layer.c: 1134: }
 14931                           ;BVH2_Appl_Layer.c: 1135: if (SIBFS_Motor_Stalled_b.Cb24_glflag <= 2) {
 14932  0AF1  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14933  0AF2  27E8  3188         	fcall	PL86	;call to abstracted procedure
 14934  0AF4  1D03               	btfss	3,2
 14935  0AF5  2AA5               	goto	L26
 14936  0AF6  2B42               	goto	l11768
 14937  0AF7                     l11730:	
 14938                           
 14939                           ;BVH2_Appl_Layer.c: 1146: if (Cb24_StateCnt > 200) {
 14940  0AF7  3000               	movlw	0
 14941  0AF8  0223               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14942  0AF9  30C9               	movlw	201
 14943  0AFA  1903               	skipnz
 14944  0AFB  0222               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14945  0AFC  1C03               	skipc
 14946  0AFD  2AA5               	goto	L26
 14947                           
 14948                           ;BVH2_Appl_Layer.c: 1150: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14949                           ;BVH2_Appl_Layer.c: 1151: (UInt8)6;
 14950  0AFE  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14951  0AFF  39F8               	andlw	-8
 14952  0B00  3806               	iorlw	6
 14953  0B01  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14954                           
 14955                           ;BVH2_Appl_Layer.c: 1152: Cb24_StateCnt = 0 ;
 14956  0B02  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14957  0B03  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14958                           
 14959                           ;BVH2_Appl_Layer.c: 1153: Cb24_oMotorStalled = 0;
 14960  0B04  0022               	movlb	2	; select bank2
 14961  0B05  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14962                           
 14963                           ;BVH2_Appl_Layer.c: 1154: Cb24_oStalledAlarm = 1;
 14964  0B06  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14965  0B07  0ABD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14966                           
 14967                           ;BVH2_Appl_Layer.c: 1155: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
 14968  0B08  0AC2               	incf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),f
 14969                           
 14970                           ;BVH2_Appl_Layer.c: 1156: }
 14971  0B09  2B42               	goto	l11768
 14972  0B0A                     l11746:	
 14973  0B0A  0021               	movlb	1	; select bank1
 14974  0B0B  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14975  0B0C  3907               	andlw	7
 14976                           
 14977                           ; Switch size 1, requested type "space"
 14978                           ; Number of cases is 6, Range of values is 1 to 6
 14979                           ; switch strategies available:
 14980                           ; Name         Instructions Cycles
 14981                           ; simple_byte           19    10 (average)
 14982                           ; direct_byte           21     9 (fixed)
 14983                           ; jumptable            263     9 (fixed)
 14984                           ;	Chosen strategy is simple_byte
 14985  0B0D  3A01               	xorlw	1	; case 1
 14986  0B0E  1903               	skipnz
 14987  0B0F  2A82               	goto	l11664
 14988  0B10  3A03               	xorlw	3	; case 2
 14989  0B11  1903               	skipnz
 14990  0B12  2A5D               	goto	l11640
 14991  0B13  3A01               	xorlw	1	; case 3
 14992  0B14  1903               	skipnz
 14993  0B15  2A51               	goto	l11632
 14994  0B16  3A07               	xorlw	7	; case 4
 14995  0B17  1903               	skipnz
 14996  0B18  2AF7               	goto	l11730
 14997  0B19  3A01               	xorlw	1	; case 5
 14998  0B1A  1903               	skipnz
 14999  0B1B  2A57               	goto	l11636
 15000  0B1C  3A03               	xorlw	3	; case 6
 15001  0B1D  1903               	skipnz
 15002  0B1E  2AAD               	goto	l11684
 15003  0B1F  2B42               	goto	l11768
 15004                           
 15005                           ;BVH2_Appl_Layer.c: 1166: }
 15006                           ;BVH2_Appl_Layer.c: 1169: }
 15007  0B20  2B42               	goto	l11768
 15008  0B21                     l1647:	
 15009                           
 15010                           ;BVH2_Appl_Layer.c: 1170: else {
 15011                           ;BVH2_Appl_Layer.c: 1172: if (SIBFS_Motor_Stalled_b.Cb32_default) {
 15012  0B21  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15013  0B22  2B34               	goto	l1694
 15014                           
 15015                           ;BVH2_Appl_Layer.c: 1177: if (!(Sb1_Logical_Operator1)) {
 15016  0B23  0024               	movlb	4	; select bank4
 15017  0B24  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 15018  0B25  1D03               	btfss	3,2
 15019  0B26  2B42               	goto	l11768
 15020                           
 15021                           ;BVH2_Appl_Layer.c: 1180: SIBFS_Motor_Stalled_b.Cb32_default = 0;
 15022  0B27  0021               	movlb	1	; select bank1
 15023  0B28  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15024                           
 15025                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
 15026  0B29  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 15027                           
 15028                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
 15029  0B2A  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 15030  0B2B  39F8               	andlw	-8
 15031  0B2C  3803               	iorlw	3
 15032  0B2D  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 15033                           
 15034                           ;BVH2_Appl_Layer.c: 1183: Cb24_StateCnt = 0 ;
 15035  0B2E  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 15036  0B2F  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 15037                           
 15038                           ;BVH2_Appl_Layer.c: 1184: Cb24_BadCnt = 0 ;
 15039  0B30  0023               	movlb	3	; select bank3
 15040  0B31  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 15041  0B32  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 15042  0B33  2B42               	goto	l11768
 15043  0B34                     l1694:	
 15044                           
 15045                           ;BVH2_Appl_Layer.c: 1189: else {
 15046                           ;BVH2_Appl_Layer.c: 1191: if (!(SIBFS_Motor_Stalled_b.Cb33_Stop)) {
 15047  0B34  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 15048                           
 15049                           ;BVH2_Appl_Layer.c: 1193: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
 15050  0B35  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 15051  0B36  2B42               	goto	l11768
 15052                           
 15053                           ;BVH2_Appl_Layer.c: 1194: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
 15054  0B37  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 15055                           
 15056                           ;BVH2_Appl_Layer.c: 1197: if (Cb24_Reset) {
 15057  0B38  0024               	movlb	4	; select bank4
 15058  0B39  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 15059  0B3A  1903               	btfsc	3,2
 15060  0B3B  2B42               	goto	l11768
 15061                           
 15062                           ;BVH2_Appl_Layer.c: 1199: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 15063  0B3C  0021               	movlb	1	; select bank1
 15064  0B3D                     L38:	
 15065  0B3D  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15066                           
 15067                           ;BVH2_Appl_Layer.c: 981: Cb24_oMotorStalled = 0;
 15068  0B3E  0022               	movlb	2	; select bank2
 15069  0B3F  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 15070                           
 15071                           ;BVH2_Appl_Layer.c: 982: Cb24_oStalledAlarm = 0;
 15072  0B40  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 15073                           
 15074                           ;BVH2_Appl_Layer.c: 983: Cb24_RestartCounter = 0 ;
 15075  0B41  01C2               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256)
 15076  0B42                     l11768:	
 15077                           
 15078                           ;BVH2_Appl_Layer.c: 1213: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
 15079  0B42  0024               	movlb	4	; select bank4
 15080  0B43  01AB               	clrf	_BVH2_Appl_Layer$1209^(0+512)
 15081  0B44  0AAB               	incf	_BVH2_Appl_Layer$1209^(0+512),f
 15082  0B45  0022               	movlb	2	; select bank2
 15083  0B46  0847               	movf	_Cb34_odFixedValueSel^(0+256),w
 15084  0B47  1D03               	btfss	3,2
 15085  0B48  2B4F               	goto	l11776
 15086  0B49  0021               	movlb	1	; select bank1
 15087  0B4A  0844               	movf	_Cb56_odFixedValueSel^(0+128),w
 15088  0B4B  1D03               	btfss	3,2
 15089  0B4C  2B4F               	goto	l11776
 15090  0B4D  0024               	movlb	4	; select bank4
 15091  0B4E  01AB               	clrf	_BVH2_Appl_Layer$1209^(0+512)
 15092  0B4F                     l11776:	
 15093  0B4F  0024               	movlb	4	; select bank4
 15094  0B50  082B               	movf	_BVH2_Appl_Layer$1209^(0+512),w
 15095  0B51  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512)
 15096                           
 15097                           ;BVH2_Appl_Layer.c: 1217: if (bool_start_demand_mat) {
 15098  0B52  0021               	movlb	1	; select bank1
 15099  0B53  0865               	movf	_bool_start_demand_mat^(0+128),w
 15100  0B54  1903               	btfsc	3,2
 15101  0B55  2B5D               	goto	l11782
 15102                           
 15103                           ;BVH2_Appl_Layer.c: 1218: Sb2_Switch5 = ui8_fixed_start_speed_mat;
 15104  0B56  0023               	movlb	3	; select bank3
 15105  0B57  085D               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
 15106  0B58  0024               	movlb	4	; select bank4
 15107  0B59  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15108  0B5A  0023               	movlb	3	; select bank3
 15109  0B5B  085C               	movf	_ui8_fixed_start_speed_mat^(0+384),w
 15110  0B5C  2B79               	goto	L29
 15111  0B5D                     l11782:	
 15112                           ;BVH2_Appl_Layer.c: 1219: }
 15113                           
 15114                           
 15115                           ;BVH2_Appl_Layer.c: 1220: else {
 15116                           ;BVH2_Appl_Layer.c: 1223: if (Cb34_odFixedLowValueSel) {
 15117  0B5D  0022               	movlb	2	; select bank2
 15118  0B5E  0848               	movf	_Cb34_odFixedLowValueSel^(0+256),w
 15119  0B5F  1903               	btfsc	3,2
 15120  0B60  2B68               	goto	l11786
 15121                           
 15122                           ;BVH2_Appl_Layer.c: 1224: Sb2_Switch5 = ui16_Speed_demand_mat_min;
 15123  0B61  0023               	movlb	3	; select bank3
 15124  0B62  0847               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
 15125  0B63  0024               	movlb	4	; select bank4
 15126  0B64  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15127  0B65  0023               	movlb	3	; select bank3
 15128  0B66  0846               	movf	_ui16_Speed_demand_mat_min^(0+384),w
 15129  0B67  2B79               	goto	L29
 15130  0B68                     l11786:	
 15131                           ;BVH2_Appl_Layer.c: 1225: }
 15132                           
 15133                           
 15134                           ;BVH2_Appl_Layer.c: 1226: else {
 15135                           ;BVH2_Appl_Layer.c: 1229: if (Sb1_Logical_Operator5) {
 15136  0B68  0024               	movlb	4	; select bank4
 15137  0B69  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 15138  0B6A  1903               	btfsc	3,2
 15139  0B6B  2B73               	goto	l11790
 15140                           
 15141                           ;BVH2_Appl_Layer.c: 1230: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
 15142  0B6C  0023               	movlb	3	; select bank3
 15143  0B6D  0849               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
 15144  0B6E  0024               	movlb	4	; select bank4
 15145  0B6F  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15146  0B70  0023               	movlb	3	; select bank3
 15147  0B71  0848               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
 15148  0B72  2B79               	goto	L29
 15149  0B73                     l11790:	
 15150                           ;BVH2_Appl_Layer.c: 1231: }
 15151                           
 15152                           
 15153                           ;BVH2_Appl_Layer.c: 1232: else {
 15154                           ;BVH2_Appl_Layer.c: 1233: Sb2_Switch5 = ui16_Speed_demand_mat;
 15155  0B73  0023               	movlb	3	; select bank3
 15156  0B74  084B               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 15157  0B75  0024               	movlb	4	; select bank4
 15158  0B76  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15159  0B77  0023               	movlb	3	; select bank3
 15160  0B78  084A               	movf	_ui16_Speed_demand_mat^(0+384),w
 15161  0B79                     L29:	
 15162  0B79  0024               	movlb	4	; select bank4
 15163  0B7A  00B1               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+512)
 15164                           
 15165                           ;BVH2_Appl_Layer.c: 1234: }
 15166                           ;BVH2_Appl_Layer.c: 1235: }
 15167                           ;BVH2_Appl_Layer.c: 1236: }
 15168                           ;BVH2_Appl_Layer.c: 1239: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
 15169  0B7B  0020               	movlb	0	; select bank0
 15170  0B7C  084D               	movf	_ui16_Speed_mat+1,w
 15171  0B7D  0024               	movlb	4	; select bank4
 15172  0B7E  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512)
 15173  0B7F  0020               	movlb	0	; select bank0
 15174  0B80  084C               	movf	_ui16_Speed_mat,w
 15175  0B81  0024               	movlb	4	; select bank4
 15176  0B82  00B7               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+512)
 15177  0B83  0831               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+512),w
 15178  0B84  02B7               	subwf	BVH2_Appl_Layer@Sb2_Error^(0+512),f
 15179  0B85  0832               	movf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512),w
 15180  0B86  3BB8               	subwfb	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),f
 15181                           
 15182                           ;BVH2_Appl_Layer.c: 1244: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 15183  0B87  0021               	movlb	1	; select bank1
 15184  0B88  18C0               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15185  0B89  2BD2               	goto	l11834
 15186                           
 15187                           ;BVH2_Appl_Layer.c: 1264: else {
 15188                           ;BVH2_Appl_Layer.c: 1266: if (SIBFS_Dry_Running_b.Cb16_DryRunning) {
 15189  0B8A  1D40               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15190  0B8B  2BCB               	goto	l1711
 15191                           
 15192                           ;BVH2_Appl_Layer.c: 1270: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 15193  0B8C  1DC0               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 15194                           
 15195                           ;BVH2_Appl_Layer.c: 1272: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 15196  0B8D  1E40               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15197  0B8E  2BD2               	goto	l11834
 15198                           
 15199                           ;BVH2_Appl_Layer.c: 1279: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >
 15200                           ;BVH2_Appl_Layer.c: 1280: 400) || (ui16_Speed_mat < 80)) {
 15201  0B8F  0023               	movlb	3	; select bank3
 15202  0B90  086E               	movf	_ui16_dryRun_Thresh^(0+384),w
 15203  0B91  3E05               	addlw	5
 15204  0B92  0020               	movlb	0	; select bank0
 15205  0B93  00BE               	movwf	??_BVH2_Appl_Layer
 15206  0B94  3000               	movlw	0
 15207  0B95  0023               	movlb	3	; select bank3
 15208  0B96  3D6F               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 15209  0B97  278B  3188         	fcall	PL22	;call to abstracted procedure
 15210  0B99  1C03               	skipc
 15211  0B9A  2BA9               	goto	l1716
 15212  0B9B  3001               	movlw	1
 15213  0B9C  024D               	subwf	_ui16_Speed_mat+1,w
 15214  0B9D  3091               	movlw	145
 15215  0B9E  1903               	skipnz
 15216  0B9F  024C               	subwf	_ui16_Speed_mat,w
 15217  0BA0  1803               	skipnc
 15218  0BA1  2BA9               	goto	l1716
 15219  0BA2  3000               	movlw	0
 15220  0BA3  024D               	subwf	_ui16_Speed_mat+1,w
 15221  0BA4  3050               	movlw	80
 15222  0BA5  1903               	skipnz
 15223  0BA6  024C               	subwf	_ui16_Speed_mat,w
 15224  0BA7  1803               	skipnc
 15225  0BA8  2BAD               	goto	l11812
 15226  0BA9                     l1716:	
 15227                           
 15228                           ;BVH2_Appl_Layer.c: 1282: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 15229  0BA9  0021               	movlb	1	; select bank1
 15230  0BAA  1240               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15231                           
 15232                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 15233  0BAB  1140               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15234  0BAC  2BD0               	goto	l11830
 15235  0BAD                     l11812:	
 15236                           ;BVH2_Appl_Layer.c: 1286: }
 15237                           
 15238                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 15239                           
 15240                           
 15241                           ;BVH2_Appl_Layer.c: 1287: else {
 15242                           ;BVH2_Appl_Layer.c: 1288: if ((ui8_PWM_dc_mat < 20) && (ui8_PWM_dc_mat > 4)) {
 15243  0BAD  3014               	movlw	20
 15244  0BAE  0021               	movlb	1	; select bank1
 15245  0BAF  024F               	subwf	_ui8_PWM_dc_mat^(0+128),w
 15246  0BB0  1803               	skipnc
 15247  0BB1  2BB6               	goto	l11820
 15248  0BB2  3005               	movlw	5
 15249  0BB3  024F               	subwf	_ui8_PWM_dc_mat^(0+128),w
 15250  0BB4  1803               	btfsc	3,0
 15251  0BB5  2BA9               	goto	l1716
 15252  0BB6                     l11820:	
 15253                           
 15254                           ;BVH2_Appl_Layer.c: 1295: else {
 15255                           ;BVH2_Appl_Layer.c: 1296: if (Cb14_StateCnt > 2000) {
 15256  0BB6  3007               	movlw	7
 15257  0BB7  0023               	movlb	3	; select bank3
 15258  0BB8  0245               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 15259  0BB9  30D1               	movlw	209
 15260  0BBA  1903               	skipnz
 15261  0BBB  0244               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 15262  0BBC  1C03               	skipc
 15263  0BBD  2BC4               	goto	l11824
 15264                           
 15265                           ;BVH2_Appl_Layer.c: 1298: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 15266  0BBE  0021               	movlb	1	; select bank1
 15267  0BBF  1240               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15268                           
 15269                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb17_redState = 1;
 15270  0BC0  15C0               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 15271                           
 15272                           ;BVH2_Appl_Layer.c: 1300: Cb14_oDryRunAlarm = 1;
 15273  0BC1  01BE               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 15274  0BC2  0ABE               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 15275                           
 15276                           ;BVH2_Appl_Layer.c: 1301: }
 15277  0BC3  2BD2               	goto	l11834
 15278  0BC4                     l11824:	
 15279                           
 15280                           ;BVH2_Appl_Layer.c: 1302: else {
 15281                           ;BVH2_Appl_Layer.c: 1303: Cb14_StateCnt = Cb14_StateCnt + 1 ;
 15282  0BC4  0844               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 15283  0BC5  3E01               	addlw	1
 15284  0BC6  00C4               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384)
 15285  0BC7  3000               	movlw	0
 15286  0BC8  3D45               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 15287  0BC9  00C5               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384)
 15288  0BCA  2BD2               	goto	l11834
 15289  0BCB                     l1711:	
 15290                           
 15291                           ;BVH2_Appl_Layer.c: 1314: else {
 15292                           ;BVH2_Appl_Layer.c: 1316: if (!(SIBFS_Dry_Running_b.Cb14_Dry_Running)) {
 15293  0BCB  1840               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 15294  0BCC  2BD2               	goto	l11834
 15295                           
 15296                           ;BVH2_Appl_Layer.c: 1317: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
 15297  0BCD  1440               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 15298                           
 15299                           ;BVH2_Appl_Layer.c: 1320: if (ui8_ResetMatlab == 1) {
 15300  0BCE  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 15301  0BCF  2BD2               	goto	l11834
 15302  0BD0                     l11830:	
 15303                           
 15304                           ;BVH2_Appl_Layer.c: 1322: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 15305  0BD0  14C0               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15306                           
 15307                           ;BVH2_Appl_Layer.c: 1285: Cb14_oDryRunAlarm = 0;
 15308  0BD1  01BE               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 15309  0BD2                     l11834:	
 15310                           
 15311                           ;BVH2_Appl_Layer.c: 1324: }
 15312                           ;BVH2_Appl_Layer.c: 1325: }
 15313                           ;BVH2_Appl_Layer.c: 1326: }
 15314                           ;BVH2_Appl_Layer.c: 1327: }
 15315                           ;BVH2_Appl_Layer.c: 1334: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenState) {
 15316  0BD2  0021               	movlb	1	; select bank1
 15317  0BD3  1CC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 15318  0BD4  2BE2               	goto	l1725
 15319                           
 15320                           ;BVH2_Appl_Layer.c: 1339: if (Cb14_oDryRunAlarm) {
 15321  0BD5  083E               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15322  0BD6  1903               	btfsc	3,2
 15323  0BD7  2C21               	goto	l11882
 15324                           
 15325                           ;BVH2_Appl_Layer.c: 1342: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 15326  0BD8  10C1               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 15327                           
 15328                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
 15329  0BD9  1541               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 15330  0BDA                     L30:	
 15331                           
 15332                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 15333  0BDA  15C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15334                           
 15335                           ;BVH2_Appl_Layer.c: 1345: Cb19_Counter = 0 ;
 15336  0BDB  01A4               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15337  0BDC  01A5               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15338                           
 15339                           ;BVH2_Appl_Layer.c: 1346: Cb19_oDryRun66 = 1;
 15340  0BDD  0022               	movlb	2	; select bank2
 15341  0BDE  01BF               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15342  0BDF  0ABF               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),f
 15343                           
 15344                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun55 = 0;
 15345  0BE0  01C0               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15346                           
 15347                           ;BVH2_Appl_Layer.c: 1348: }
 15348                           ;BVH2_Appl_Layer.c: 1351: }
 15349  0BE1  2C21               	goto	l11882
 15350  0BE2                     l1725:	
 15351                           
 15352                           ;BVH2_Appl_Layer.c: 1352: else {
 15353                           ;BVH2_Appl_Layer.c: 1354: if (SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm) {
 15354  0BE2  1D41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 15355  0BE3  2C14               	goto	l1728
 15356                           
 15357                           ;BVH2_Appl_Layer.c: 1359: if (!(Cb14_oDryRunAlarm)) {
 15358  0BE4  083E               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15359  0BE5  1D03               	btfss	3,2
 15360  0BE6  2BF0               	goto	l1729
 15361                           
 15362                           ;BVH2_Appl_Layer.c: 1364: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 15363  0BE7  1DC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15364  0BE8  2BEB               	goto	l1730
 15365                           
 15366                           ;BVH2_Appl_Layer.c: 1365: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15367  0BE9  11C1               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15368                           
 15369                           ;BVH2_Appl_Layer.c: 1366: }
 15370  0BEA  2BEE               	goto	l1731
 15371  0BEB                     l1730:	
 15372                           
 15373                           ;BVH2_Appl_Layer.c: 1367: else {
 15374                           ;BVH2_Appl_Layer.c: 1369: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 15375  0BEB  1E41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15376  0BEC  2BEE               	goto	l1731
 15377                           
 15378                           ;BVH2_Appl_Layer.c: 1370: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15379  0BED  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15380  0BEE                     l1731:	
 15381                           
 15382                           ;BVH2_Appl_Layer.c: 1371: }
 15383                           ;BVH2_Appl_Layer.c: 1372: }
 15384                           ;BVH2_Appl_Layer.c: 1373: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 15385  0BEE  1141               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 15386  0BEF  2C1A               	goto	l11878
 15387  0BF0                     l1729:	
 15388                           ;BVH2_Appl_Layer.c: 1378: }
 15389                           
 15390                           ;BVH2_Appl_Layer.c: 1374: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 15391                           
 15392                           
 15393                           ;BVH2_Appl_Layer.c: 1379: else {
 15394                           ;BVH2_Appl_Layer.c: 1381: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 15395  0BF0  1DC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15396  0BF1  2C09               	goto	l1734
 15397                           
 15398                           ;BVH2_Appl_Layer.c: 1384: if (Cb19_Counter > 400) {
 15399  0BF2  3001               	movlw	1
 15400  0BF3  0225               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 15401  0BF4  3091               	movlw	145
 15402  0BF5  1903               	skipnz
 15403  0BF6  0224               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15404  0BF7  1C03               	skipc
 15405  0BF8  2C02               	goto	l11862
 15406                           
 15407                           ;BVH2_Appl_Layer.c: 1387: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15408  0BF9  11C1               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15409                           
 15410                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
 15411  0BFA  1641               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15412                           
 15413                           ;BVH2_Appl_Layer.c: 1389: Cb19_Counter = 0 ;
 15414  0BFB  01A4               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15415  0BFC  01A5               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15416                           
 15417                           ;BVH2_Appl_Layer.c: 1390: Cb19_oDryRun66 = 0;
 15418  0BFD  0022               	movlb	2	; select bank2
 15419  0BFE  01BF               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15420                           
 15421                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun55 = 1;
 15422  0BFF  01C0               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15423  0C00  0AC0               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 15424                           
 15425                           ;BVH2_Appl_Layer.c: 1392: }
 15426  0C01  2C21               	goto	l11882
 15427  0C02                     l11862:	
 15428                           
 15429                           ;BVH2_Appl_Layer.c: 1393: else {
 15430                           ;BVH2_Appl_Layer.c: 1394: Cb19_Counter = Cb19_Counter + 1 ;
 15431  0C02  0824               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15432  0C03  3E01               	addlw	1
 15433  0C04  00A4               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15434  0C05  3000               	movlw	0
 15435  0C06  3D25               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 15436  0C07  00A5               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15437  0C08  2C21               	goto	l11882
 15438  0C09                     l1734:	
 15439                           
 15440                           ;BVH2_Appl_Layer.c: 1400: else {
 15441                           ;BVH2_Appl_Layer.c: 1402: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 15442  0C09  1E41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15443  0C0A  2C21               	goto	l11882
 15444                           
 15445                           ;BVH2_Appl_Layer.c: 1405: if (Cb19_Counter > 400) {
 15446  0C0B  3001               	movlw	1
 15447  0C0C  0225               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 15448  0C0D  3091               	movlw	145
 15449  0C0E  1903               	skipnz
 15450  0C0F  0224               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15451  0C10  1C03               	skipc
 15452  0C11  2C02               	goto	l11862
 15453                           
 15454                           ;BVH2_Appl_Layer.c: 1408: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15455  0C12  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15456  0C13  2BDA               	goto	L30
 15457  0C14                     l1728:	
 15458                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 15459                           
 15460                           
 15461                           ;BVH2_Appl_Layer.c: 1426: else {
 15462                           ;BVH2_Appl_Layer.c: 1428: if (!(SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm)) {
 15463  0C14  1841               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),0
 15464  0C15  2C21               	goto	l11882
 15465                           
 15466                           ;BVH2_Appl_Layer.c: 1429: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 15467  0C16  1441               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),0
 15468                           
 15469                           ;BVH2_Appl_Layer.c: 1433: if (!(Cb14_oDryRunAlarm)) {
 15470  0C17  083E               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15471  0C18  1D03               	btfss	3,2
 15472  0C19  2C21               	goto	l11882
 15473  0C1A                     l11878:	
 15474                           
 15475                           ;BVH2_Appl_Layer.c: 1435: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 15476  0C1A  14C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 15477                           
 15478                           ;BVH2_Appl_Layer.c: 1375: Cb19_oDryRun55 = 0;
 15479  0C1B  0022               	movlb	2	; select bank2
 15480  0C1C  01C0               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15481                           
 15482                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun66 = 0;
 15483  0C1D  01BF               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15484                           
 15485                           ;BVH2_Appl_Layer.c: 1377: Cb19_Counter = 0 ;
 15486  0C1E  0021               	movlb	1	; select bank1
 15487  0C1F  01A4               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15488  0C20  01A5               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15489  0C21                     l11882:	
 15490                           
 15491                           ;BVH2_Appl_Layer.c: 1439: }
 15492                           ;BVH2_Appl_Layer.c: 1440: }
 15493                           ;BVH2_Appl_Layer.c: 1441: }
 15494                           ;BVH2_Appl_Layer.c: 1442: }
 15495                           ;BVH2_Appl_Layer.c: 1447: bool_DryRunningAlarm = Cb19_oDryRun66;
 15496  0C21  0022               	movlb	2	; select bank2
 15497  0C22  083F               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 15498  0C23  0021               	movlb	1	; select bank1
 15499  0C24  00DA               	movwf	_bool_DryRunningAlarm^(0+128)
 15500                           
 15501                           ;BVH2_Appl_Layer.c: 1450: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 15502  0C25  0022               	movlb	2	; select bank2
 15503  0C26  083C               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 15504  0C27  0021               	movlb	1	; select bank1
 15505  0C28  00DB               	movwf	_bool_CPU_TempAlarm^(0+128)
 15506                           
 15507                           ;BVH2_Appl_Layer.c: 1455: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 15508  0C29  1C42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15509  0C2A  2C36               	goto	l1744
 15510                           
 15511                           ;BVH2_Appl_Layer.c: 1460: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 15512  0C2B  2798  3188         	fcall	PL26	;call to abstracted procedure
 15513  0C2D  278B  3188         	fcall	PL22	;call to abstracted procedure
 15514  0C2F  1803               	skipnc
 15515  0C30  2C6D               	goto	l11932
 15516                           
 15517                           ;BVH2_Appl_Layer.c: 1463: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 15518  0C31  0021               	movlb	1	; select bank1
 15519  0C32  1042               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15520                           
 15521                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
 15522  0C33  1542               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15523  0C34                     l11892:	
 15524                           
 15525                           ;BVH2_Appl_Layer.c: 1465: Cb9_StateCnt = 0 ;
 15526  0C34  01C3               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 15527  0C35  2C6D               	goto	l11932
 15528  0C36                     l1744:	
 15529                           
 15530                           ;BVH2_Appl_Layer.c: 1470: else {
 15531                           ;BVH2_Appl_Layer.c: 1472: if (SIBFS_Current_Analysis_low_b.Cb11_Wait) {
 15532  0C36  1CC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15533  0C37  2C4A               	goto	l1747
 15534                           
 15535                           ;BVH2_Appl_Layer.c: 1477: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 15536  0C38  2798  3188         	fcall	PL26	;call to abstracted procedure
 15537  0C3A  278B  3188         	fcall	PL22	;call to abstracted procedure
 15538  0C3C  1803               	skipnc
 15539  0C3D  2C41               	goto	l11898
 15540                           
 15541                           ;BVH2_Appl_Layer.c: 1479: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15542  0C3E  0021               	movlb	1	; select bank1
 15543  0C3F  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15544  0C40  2C57               	goto	L31
 15545  0C41                     l11898:	
 15546                           ;BVH2_Appl_Layer.c: 1482: }
 15547                           
 15548                           ;BVH2_Appl_Layer.c: 1481: Cb9_oCurrentAlarm = 1;
 15549                           
 15550                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 15551                           
 15552                           
 15553                           ;BVH2_Appl_Layer.c: 1483: else {
 15554                           ;BVH2_Appl_Layer.c: 1484: if (Cb9_StateCnt > 100) {
 15555  0C41  3065               	movlw	101
 15556  0C42  0021               	movlb	1	; select bank1
 15557  0C43  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 15558  0C44  1C03               	skipc
 15559  0C45  2C48               	goto	l11904
 15560                           
 15561                           ;BVH2_Appl_Layer.c: 1486: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15562  0C46  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15563  0C47  2C6A               	goto	l11928
 15564  0C48                     l11904:	
 15565                           ;BVH2_Appl_Layer.c: 1489: }
 15566                           
 15567                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15568                           
 15569                           
 15570                           ;BVH2_Appl_Layer.c: 1490: else {
 15571                           ;BVH2_Appl_Layer.c: 1491: Cb9_StateCnt = Cb9_StateCnt + 1 ;
 15572  0C48  0AC3               	incf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),f
 15573  0C49  2C6D               	goto	l11932
 15574  0C4A                     l1747:	
 15575                           
 15576                           ;BVH2_Appl_Layer.c: 1497: else {
 15577                           ;BVH2_Appl_Layer.c: 1499: if (SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent) {
 15578  0C4A  1D42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15579  0C4B  2C5C               	goto	l1753
 15580                           
 15581                           ;BVH2_Appl_Layer.c: 1504: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 15582  0C4C  27A1  3188         	fcall	PL30	;call to abstracted procedure
 15583  0C4E  1803               	skipnc
 15584  0C4F  2C52               	goto	l11912
 15585                           
 15586                           ;BVH2_Appl_Layer.c: 1506: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15587  0C50  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15588  0C51  2C6A               	goto	l11928
 15589  0C52                     l11912:	
 15590                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15591                           
 15592                           
 15593                           ;BVH2_Appl_Layer.c: 1510: else {
 15594                           ;BVH2_Appl_Layer.c: 1511: if (Cb9_StateCnt > 50) {
 15595  0C52  3033               	movlw	51
 15596  0C53  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 15597  0C54  1C03               	skipc
 15598  0C55  2C48               	goto	l11904
 15599                           
 15600                           ;BVH2_Appl_Layer.c: 1513: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15601  0C56  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15602  0C57                     L31:	
 15603                           
 15604                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 15605  0C57  15C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15606                           
 15607                           ;BVH2_Appl_Layer.c: 1515: Cb9_oCurrentAlarm = 1;
 15608  0C58  0022               	movlb	2	; select bank2
 15609  0C59  01B9               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 15610  0C5A  0AB9               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 15611                           
 15612                           ;BVH2_Appl_Layer.c: 1516: }
 15613  0C5B  2C6D               	goto	l11932
 15614  0C5C                     l1753:	
 15615                           
 15616                           ;BVH2_Appl_Layer.c: 1524: else {
 15617                           ;BVH2_Appl_Layer.c: 1526: if (SIBFS_Current_Analysis_low_b.Cb13_redState) {
 15618  0C5C  1DC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15619  0C5D  2C65               	goto	l1759
 15620                           
 15621                           ;BVH2_Appl_Layer.c: 1531: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 15622  0C5E  27A1  3188         	fcall	PL30	;call to abstracted procedure
 15623  0C60  1803               	skipnc
 15624  0C61  2C6D               	goto	l11932
 15625                           
 15626                           ;BVH2_Appl_Layer.c: 1534: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 15627  0C62  11C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15628                           
 15629                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
 15630  0C63  14C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15631  0C64  2C34               	goto	l11892
 15632  0C65                     l1759:	
 15633                           
 15634                           ;BVH2_Appl_Layer.c: 1541: else {
 15635                           ;BVH2_Appl_Layer.c: 1543: if (!(SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low)) 
      +                          {
 15636  0C65  1A42               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 15637  0C66  2C6D               	goto	l11932
 15638                           
 15639                           ;BVH2_Appl_Layer.c: 1544: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
 15640  0C67  1642               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 15641                           
 15642                           ;BVH2_Appl_Layer.c: 1547: if (ui8_ResetMatlab == 1) {
 15643  0C68  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 15644  0C69  2C6D               	goto	l11932
 15645  0C6A                     l11928:	
 15646                           
 15647                           ;BVH2_Appl_Layer.c: 1549: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15648  0C6A  1442               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15649                           
 15650                           ;BVH2_Appl_Layer.c: 1488: Cb9_oCurrentAlarm = 0;
 15651  0C6B  0022               	movlb	2	; select bank2
 15652  0C6C  01B9               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 15653  0C6D                     l11932:	
 15654                           
 15655                           ;BVH2_Appl_Layer.c: 1551: }
 15656                           ;BVH2_Appl_Layer.c: 1552: }
 15657                           ;BVH2_Appl_Layer.c: 1553: }
 15658                           ;BVH2_Appl_Layer.c: 1554: }
 15659                           ;BVH2_Appl_Layer.c: 1555: }
 15660                           ;BVH2_Appl_Layer.c: 1556: }
 15661                           ;BVH2_Appl_Layer.c: 1561: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 15662  0C6D  0022               	movlb	2	; select bank2
 15663  0C6E  0839               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 15664  0C6F  0021               	movlb	1	; select bank1
 15665  0C70  00D8               	movwf	_bool_HighCurrentAlarm^(0+128)
 15666                           
 15667                           ;BVH2_Appl_Layer.c: 1564: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 15668  0C71  0022               	movlb	2	; select bank2
 15669  0C72  084A               	movf	_Cb34_oPWM_Alarm^(0+256),w
 15670  0C73  00D8               	movwf	_bool_PWMin_err_Alarm^(0+256)
 15671                           
 15672                           ;BVH2_Appl_Layer.c: 1567: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 15673  0C74  0844               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 15674  0C75  00D6               	movwf	_bool_UbatAlarm^(0+256)
 15675                           
 15676                           ;BVH2_Appl_Layer.c: 1568: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 15677  0C76  0024               	movlb	4	; select bank4
 15678  0C77  01AC               	clrf	_BVH2_Appl_Layer$1210^(0+512)
 15679  0C78  0AAC               	incf	_BVH2_Appl_Layer$1210^(0+512),f
 15680  0C79  0022               	movlb	2	; select bank2
 15681  0C7A  083D               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
 15682  0C7B  1D03               	btfss	3,2
 15683  0C7C  2C85               	goto	l11948
 15684  0C7D  084C               	movf	_Cb1_oCurrentAlarm^(0+256),w
 15685  0C7E  1D03               	btfss	3,2
 15686  0C7F  2C85               	goto	l11948
 15687  0C80  0840               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),w
 15688  0C81  1D03               	btfss	3,2
 15689  0C82  2C85               	goto	l11948
 15690  0C83  0024               	movlb	4	; select bank4
 15691  0C84  01AC               	clrf	_BVH2_Appl_Layer$1210^(0+512)
 15692  0C85                     l11948:	
 15693  0C85  0024               	movlb	4	; select bank4
 15694  0C86  082C               	movf	_BVH2_Appl_Layer$1210^(0+512),w
 15695  0C87  0021               	movlb	1	; select bank1
 15696  0C88  00D9               	movwf	_bool_MotorStalled^(0+128)
 15697                           
 15698                           ;BVH2_Appl_Layer.c: 1574: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 15699  0C89  0022               	movlb	2	; select bank2
 15700  0C8A  083B               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 15701  0C8B  00D7               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 15702                           
 15703                           ;BVH2_Appl_Layer.c: 1575: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 15704  0C8C  0024               	movlb	4	; select bank4
 15705  0C8D  01AD               	clrf	_BVH2_Appl_Layer$1211^(0+512)
 15706  0C8E  0AAD               	incf	_BVH2_Appl_Layer$1211^(0+512),f
 15707  0C8F  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 15708  0C90  1D03               	btfss	3,2
 15709  0C91  2C9C               	goto	l11962
 15710  0C92  0022               	movlb	2	; select bank2
 15711  0C93  083E               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),w
 15712  0C94  1D03               	btfss	3,2
 15713  0C95  2C9C               	goto	l11962
 15714  0C96  0021               	movlb	1	; select bank1
 15715  0C97  083E               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15716  0C98  1D03               	btfss	3,2
 15717  0C99  2C9C               	goto	l11962
 15718  0C9A  0024               	movlb	4	; select bank4
 15719  0C9B  01AD               	clrf	_BVH2_Appl_Layer$1211^(0+512)
 15720  0C9C                     l11962:	
 15721  0C9C  0024               	movlb	4	; select bank4
 15722  0C9D  082D               	movf	_BVH2_Appl_Layer$1211^(0+512),w
 15723  0C9E  00B4               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512)
 15724                           
 15725                           ;BVH2_Appl_Layer.c: 1576: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 15726  0C9F  01AE               	clrf	_BVH2_Appl_Layer$1212^(0+512)
 15727  0CA0  0AAE               	incf	_BVH2_Appl_Layer$1212^(0+512),f
 15728  0CA1  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 15729  0CA2  1D03               	btfss	3,2
 15730  0CA3  2CAA               	goto	l11972
 15731  0CA4  0021               	movlb	1	; select bank1
 15732  0CA5  084D               	movf	_bool_ControlLoopMode^(0+128),w
 15733  0CA6  1D03               	btfss	3,2
 15734  0CA7  2CAA               	goto	l11972
 15735  0CA8  0024               	movlb	4	; select bank4
 15736  0CA9  01AE               	clrf	_BVH2_Appl_Layer$1212^(0+512)
 15737  0CAA                     l11972:	
 15738  0CAA  0024               	movlb	4	; select bank4
 15739  0CAB  082E               	movf	_BVH2_Appl_Layer$1212^(0+512),w
 15740  0CAC  00B6               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512)
 15741                           
 15742                           ;BVH2_Appl_Layer.c: 1577: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 15743  0CAD  0022               	movlb	2	; select bank2
 15744  0CAE  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 15745  0CAF  1903               	btfsc	3,2
 15746  0CB0  2CBB               	goto	l11980
 15747  0CB1  086D               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
 15748  0CB2  1D03               	btfss	3,2
 15749  0CB3  2CBB               	goto	l11980
 15750                           
 15751                           ;BVH2_Appl_Layer.c: 1578: {
 15752                           ;BVH2_Appl_Layer.c: 1579: X_Sb4_Intergrator = 80000 ;
 15753  0CB4  3001               	movlw	1
 15754  0CB5  01EB               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 15755  0CB6  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 15756  0CB7  3038               	movlw	56
 15757  0CB8  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 15758  0CB9  3080               	movlw	128
 15759  0CBA  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 15760  0CBB                     l11980:	
 15761                           
 15762                           ;BVH2_Appl_Layer.c: 1580: }
 15763                           ;BVH2_Appl_Layer.c: 1584: if (Sb1_Logical_Operator3) {
 15764  0CBB  0024               	movlb	4	; select bank4
 15765  0CBC  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 15766  0CBD  1903               	btfsc	3,2
 15767  0CBE  2CC1               	goto	l11984
 15768                           
 15769                           ;BVH2_Appl_Layer.c: 1585: Sb2_Switch2 = 0 ;
 15770  0CBF  01B9               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15771  0CC0  2D35               	goto	L34
 15772  0CC1                     l11984:	
 15773                           ;BVH2_Appl_Layer.c: 1586: }
 15774                           
 15775                           
 15776                           ;BVH2_Appl_Layer.c: 1587: else {
 15777                           ;BVH2_Appl_Layer.c: 1590: if (bool_ControlLoopMode) {
 15778  0CC1  0021               	movlb	1	; select bank1
 15779  0CC2  084D               	movf	_bool_ControlLoopMode^(0+128),w
 15780  0CC3  1903               	btfsc	3,2
 15781  0CC4  2D37               	goto	l12004
 15782                           
 15783                           ;BVH2_Appl_Layer.c: 1593: if (Sb1_Logical_Operator5) {
 15784  0CC5  0024               	movlb	4	; select bank4
 15785  0CC6  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 15786  0CC7  1903               	btfsc	3,2
 15787  0CC8  2CCB               	goto	l11990
 15788  0CC9                     l11988:	
 15789                           
 15790                           ;BVH2_Appl_Layer.c: 1594: Sb2_Switch2 = Sb2_Fixed_Power;
 15791  0CC9  30CA               	movlw	202
 15792  0CCA  2D34               	goto	L39
 15793  0CCB                     l11990:	
 15794                           ;BVH2_Appl_Layer.c: 1595: }
 15795                           
 15796                           
 15797                           ;BVH2_Appl_Layer.c: 1596: else {
 15798                           ;BVH2_Appl_Layer.c: 1598: UInt16 Sb3_Product1 ;
 15799                           ;BVH2_Appl_Layer.c: 1599: Int16 Sb3_Sum1;
 15800                           ;BVH2_Appl_Layer.c: 1607: Sb3_Product1 = (UInt16) (((UInt16) (140 << 8)) / 160 );
 15801  0CCB  30E0               	movlw	224
 15802  0CCC  00AF               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+512)
 15803  0CCD  01B0               	clrf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512)
 15804                           
 15805                           ;BVH2_Appl_Layer.c: 1613: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>
 15806                           ;BVH2_Appl_Layer.c: 1614: 8)) + ((Int16) (((Int16) (-((Int16) (UInt16) ((((UInt32) Sb3_P
      +                          roduct1) * 95) >> 7)))) + 200)));
 15807  0CCE  0021               	movlb	1	; select bank1
 15808  0CCF  084F               	movf	_ui8_PWM_dc_mat^(0+128),w
 15809  0CD0  0020               	movlb	0	; select bank0
 15810  0CD1  00B0               	movwf	___lmul@multiplier
 15811  0CD2  01B1               	clrf	___lmul@multiplier+1
 15812  0CD3  01B2               	clrf	___lmul@multiplier+2
 15813  0CD4  01B3               	clrf	___lmul@multiplier+3
 15814  0CD5  0024               	movlb	4	; select bank4
 15815  0CD6  082F               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+512),w
 15816  0CD7  0020               	movlb	0	; select bank0
 15817  0CD8  00B4               	movwf	___lmul@multiplicand
 15818  0CD9  0024               	movlb	4	; select bank4
 15819  0CDA  0830               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512),w
 15820  0CDB  0020               	movlb	0	; select bank0
 15821  0CDC  00B5               	movwf	___lmul@multiplicand+1
 15822  0CDD  01B6               	clrf	___lmul@multiplicand+2
 15823  0CDE  01B7               	clrf	___lmul@multiplicand+3
 15824  0CDF  2645  3188         	fcall	___lmul
 15825  0CE1  0832               	movf	?___lmul+2,w
 15826  0CE2  0024               	movlb	4	; select bank4
 15827  0CE3  00BD               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512)
 15828  0CE4  0020               	movlb	0	; select bank0
 15829  0CE5  0831               	movf	?___lmul+1,w
 15830  0CE6  0024               	movlb	4	; select bank4
 15831  0CE7  00BC               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512)
 15832  0CE8  082F               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+512),w
 15833  0CE9  0020               	movlb	0	; select bank0
 15834  0CEA  00B0               	movwf	___lmul@multiplier
 15835  0CEB  0024               	movlb	4	; select bank4
 15836  0CEC  0830               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512),w
 15837  0CED  0020               	movlb	0	; select bank0
 15838  0CEE  00B1               	movwf	___lmul@multiplier+1
 15839  0CEF  305F               	movlw	95
 15840  0CF0  01B2               	clrf	___lmul@multiplier+2
 15841  0CF1  01B3               	clrf	___lmul@multiplier+3
 15842  0CF2  00B4               	movwf	___lmul@multiplicand
 15843  0CF3  01B5               	clrf	___lmul@multiplicand+1
 15844  0CF4  01B6               	clrf	___lmul@multiplicand+2
 15845  0CF5  01B7               	clrf	___lmul@multiplicand+3
 15846  0CF6  2645  3188         	fcall	___lmul
 15847  0CF8  0830               	movf	?___lmul,w
 15848  0CF9  00BE               	movwf	??_BVH2_Appl_Layer
 15849  0CFA  0831               	movf	?___lmul+1,w
 15850  0CFB  00BF               	movwf	??_BVH2_Appl_Layer+1
 15851  0CFC  0832               	movf	?___lmul+2,w
 15852  0CFD  00C0               	movwf	??_BVH2_Appl_Layer+2
 15853  0CFE  0833               	movf	?___lmul+3,w
 15854  0CFF  00C1               	movwf	??_BVH2_Appl_Layer+3
 15855  0D00  3007               	movlw	7
 15856  0D01                     u10275:	
 15857  0D01  36C1               	lsrf	??_BVH2_Appl_Layer+3,f
 15858  0D02  0CC0               	rrf	??_BVH2_Appl_Layer+2,f
 15859  0D03  0CBF               	rrf	??_BVH2_Appl_Layer+1,f
 15860  0D04  0CBE               	rrf	??_BVH2_Appl_Layer,f
 15861  0D05  0B89               	decfsz	9,f
 15862  0D06  2D01               	goto	u10275
 15863  0D07  083E               	movf	??_BVH2_Appl_Layer,w
 15864  0D08  0024               	movlb	4	; select bank4
 15865  0D09  02BC               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 15866  0D0A  0020               	movlb	0	; select bank0
 15867  0D0B  083F               	movf	??_BVH2_Appl_Layer+1,w
 15868  0D0C  0024               	movlb	4	; select bank4
 15869  0D0D  3BBD               	subwfb	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 15870  0D0E  30C8               	movlw	200
 15871  0D0F  07BC               	addwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 15872  0D10  1803               	skipnc
 15873  0D11  0ABD               	incf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 15874                           
 15875                           ;BVH2_Appl_Layer.c: 1617: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 15876  0D12  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 15877  0D13  27E2  3188         	fcall	PL84	;call to abstracted procedure
 15878  0D15  1D03               	skipz
 15879  0D16  2D1A               	goto	u10285
 15880  0D17  30C9               	movlw	201
 15881  0D18  0024               	movlb	4	; select bank4
 15882  0D19  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15883  0D1A                     u10285:	
 15884  0D1A  1803               	skipnc
 15885  0D1B  2D32               	goto	l12002
 15886  0D1C  0024               	movlb	4	; select bank4
 15887  0D1D  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 15888  0D1E  27E2  3188         	fcall	PL84	;call to abstracted procedure
 15889  0D20  1D03               	skipz
 15890  0D21  2D25               	goto	u10295
 15891  0D22  303C               	movlw	60
 15892  0D23  0024               	movlb	4	; select bank4
 15893  0D24  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15894  0D25                     u10295:	
 15895  0D25  1C03               	skipc
 15896  0D26  2D2A               	goto	l12000
 15897  0D27  0024               	movlb	4	; select bank4
 15898  0D28  083C               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15899  0D29  2D2C               	goto	L35
 15900  0D2A                     l12000:	
 15901  0D2A  303C               	movlw	60
 15902  0D2B  0024               	movlb	4	; select bank4
 15903  0D2C                     L35:	
 15904  0D2C  00A4               	movwf	_BVH2_Appl_Layer$1215^(0+512)
 15905  0D2D  01A5               	clrf	(_BVH2_Appl_Layer$1215+1)^(0+512)
 15906  0D2E  0825               	movf	(_BVH2_Appl_Layer$1215+1)^(0+512),w
 15907  0D2F  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15908  0D30  0824               	movf	_BVH2_Appl_Layer$1215^(0+512),w
 15909  0D31  2D8E               	goto	L36
 15910  0D32                     l12002:	
 15911  0D32  30C8               	movlw	200
 15912  0D33  0024               	movlb	4	; select bank4
 15913  0D34                     L39:	
 15914  0D34  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15915  0D35                     L34:	
 15916  0D35  01BA               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15917  0D36  2D8F               	goto	l12018
 15918  0D37                     l12004:	
 15919                           
 15920                           ;BVH2_Appl_Layer.c: 1620: else {
 15921                           ;BVH2_Appl_Layer.c: 1622: Int16 Sb4_PI_sum;
 15922                           ;BVH2_Appl_Layer.c: 1627: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / (
      +                          (Int32) 800))) + ((UInt16)
 15923                           ;BVH2_Appl_Layer.c: 1628: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 15924  0D37  0020               	movlb	0	; select bank0
 15925  0D38  3003               	movlw	3
 15926  0D39  01B3               	clrf	___aldiv@divisor+3
 15927  0D3A  01B2               	clrf	___aldiv@divisor+2
 15928  0D3B  00B1               	movwf	___aldiv@divisor+1
 15929  0D3C  3020               	movlw	32
 15930  0D3D  00B0               	movwf	___aldiv@divisor
 15931  0D3E  0022               	movlb	2	; select bank2
 15932  0D3F  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 15933  0D40  0020               	movlb	0	; select bank0
 15934  0D41  00B7               	movwf	___aldiv@dividend+3
 15935  0D42  0022               	movlb	2	; select bank2
 15936  0D43  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 15937  0D44  0020               	movlb	0	; select bank0
 15938  0D45  00B6               	movwf	___aldiv@dividend+2
 15939  0D46  0022               	movlb	2	; select bank2
 15940  0D47  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 15941  0D48  0020               	movlb	0	; select bank0
 15942  0D49  00B5               	movwf	___aldiv@dividend+1
 15943  0D4A  0022               	movlb	2	; select bank2
 15944  0D4B  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 15945  0D4C  0020               	movlb	0	; select bank0
 15946  0D4D  00B4               	movwf	___aldiv@dividend
 15947  0D4E  271F  3188         	fcall	___aldiv
 15948  0D50  0831               	movf	?___aldiv+1,w
 15949  0D51  0024               	movlb	4	; select bank4
 15950  0D52  00BF               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512)
 15951  0D53  0020               	movlb	0	; select bank0
 15952  0D54  0830               	movf	?___aldiv,w
 15953  0D55  0024               	movlb	4	; select bank4
 15954  0D56  00BE               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512)
 15955  0D57  0022               	movlb	2	; select bank2
 15956  0D58  085A               	movf	_ui8_Kp_mat^(0+256),w
 15957  0D59  0020               	movlb	0	; select bank0
 15958  0D5A  00B0               	movwf	___wmul@multiplier
 15959  0D5B  01B1               	clrf	___wmul@multiplier+1
 15960  0D5C  27D1  3188         	fcall	PL70	;call to abstracted procedure
 15961  0D5E  266A  3188         	fcall	___wmul
 15962  0D60  0830               	movf	?___wmul,w
 15963  0D61  0024               	movlb	4	; select bank4
 15964  0D62  07BE               	addwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),f
 15965  0D63  0020               	movlb	0	; select bank0
 15966  0D64  0831               	movf	?___wmul+1,w
 15967  0D65  0024               	movlb	4	; select bank4
 15968  0D66  3DBF               	addwfc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),f
 15969                           
 15970                           ;BVH2_Appl_Layer.c: 1631: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 15971  0D67  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15972  0D68  27E2  3188         	fcall	PL84	;call to abstracted procedure
 15973  0D6A  1D03               	skipz
 15974  0D6B  2D6F               	goto	u10305
 15975  0D6C  3001               	movlw	1
 15976  0D6D  0024               	movlb	4	; select bank4
 15977  0D6E  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15978  0D6F                     u10305:	
 15979  0D6F  1C03               	skipc
 15980  0D70  2D79               	goto	l1790
 15981  0D71  3000               	movlw	0
 15982  0D72  0024               	movlb	4	; select bank4
 15983  0D73  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15984  0D74  30CB               	movlw	203
 15985  0D75  1903               	skipnz
 15986  0D76  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15987  0D77  1803               	skipnc
 15988  0D78  2CC9               	goto	l11988
 15989  0D79                     l1790:	
 15990  0D79  0024               	movlb	4	; select bank4
 15991  0D7A  1BBF               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),7
 15992  0D7B  2D88               	goto	l12014
 15993  0D7C  3000               	movlw	0
 15994  0D7D  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15995  0D7E  3028               	movlw	40
 15996  0D7F  1903               	skipnz
 15997  0D80  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15998  0D81  1C03               	skipc
 15999  0D82  2D88               	goto	l12014
 16000  0D83  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 16001  0D84  00A7               	movwf	(_BVH2_Appl_Layer$1217+1)^(0+512)
 16002  0D85  083E               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 16003  0D86  00A6               	movwf	_BVH2_Appl_Layer$1217^(0+512)
 16004  0D87  2D8B               	goto	l1794
 16005  0D88                     l12014:	
 16006  0D88  3028               	movlw	40
 16007  0D89  00A6               	movwf	_BVH2_Appl_Layer$1217^(0+512)
 16008  0D8A  01A7               	clrf	(_BVH2_Appl_Layer$1217+1)^(0+512)
 16009  0D8B                     l1794:	
 16010  0D8B  0827               	movf	(_BVH2_Appl_Layer$1217+1)^(0+512),w
 16011  0D8C  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 16012  0D8D  0826               	movf	_BVH2_Appl_Layer$1217^(0+512),w
 16013  0D8E                     L36:	
 16014  0D8E  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 16015  0D8F                     l12018:	
 16016                           
 16017                           ;BVH2_Appl_Layer.c: 1640: bl_Pumpoff_Alarm = Sb1_Logical_Operator2;
 16018  0D8F  083A               	movf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512),w
 16019  0D90  0020               	movlb	0	; select bank0
 16020  0D91  00BF               	movwf	??_BVH2_Appl_Layer+1
 16021  0D92  0024               	movlb	4	; select bank4
 16022  0D93  0839               	movf	BVH2_Appl_Layer@Sb2_Switch2^(0+512),w
 16023  0D94  0020               	movlb	0	; select bank0
 16024  0D95  00BE               	movwf	??_BVH2_Appl_Layer
 16025  0D96  36BF               	lsrf	??_BVH2_Appl_Layer+1,f
 16026  0D97  0CBE               	rrf	??_BVH2_Appl_Layer,f
 16027  0D98  083E               	movf	??_BVH2_Appl_Layer,w
 16028  0D99  0022               	movlb	2	; select bank2
 16029  0D9A  00D9               	movwf	_ui8_duty_cycle_mat^(0+256)
 16030                           
 16031                           ;BVH2_Appl_Layer.c: 1641: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 16032  0D9B  0024               	movlb	4	; select bank4
 16033  0D9C  0836               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512),w
 16034  0D9D  0022               	movlb	2	; select bank2
 16035  0D9E  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 16036                           
 16037                           ;BVH2_Appl_Layer.c: 1645: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<
 16038                           ;BVH2_Appl_Layer.c: 1646: 3));
 16039  0D9F  0023               	movlb	3	; select bank3
 16040  0DA0  084D               	movf	(_ui8_Ki_mat+1)^(0+384),w
 16041  0DA1  0020               	movlb	0	; select bank0
 16042  0DA2  00B1               	movwf	___wmul@multiplier+1
 16043  0DA3  0023               	movlb	3	; select bank3
 16044  0DA4  084C               	movf	_ui8_Ki_mat^(0+384),w
 16045  0DA5  0020               	movlb	0	; select bank0
 16046  0DA6  00B0               	movwf	___wmul@multiplier
 16047  0DA7  27D1  3188         	fcall	PL70	;call to abstracted procedure
 16048  0DA9  266A  3188         	fcall	___wmul
 16049  0DAB  0830               	movf	?___wmul,w
 16050  0DAC  00BE               	movwf	??_BVH2_Appl_Layer
 16051  0DAD  0831               	movf	?___wmul+1,w
 16052  0DAE  00BF               	movwf	??_BVH2_Appl_Layer+1
 16053  0DAF  35BE               	lslf	??_BVH2_Appl_Layer,f
 16054  0DB0  0DBF               	rlf	??_BVH2_Appl_Layer+1,f
 16055  0DB1  35BE               	lslf	??_BVH2_Appl_Layer,f
 16056  0DB2  0DBF               	rlf	??_BVH2_Appl_Layer+1,f
 16057  0DB3  35BE               	lslf	??_BVH2_Appl_Layer,f
 16058  0DB4  0DBF               	rlf	??_BVH2_Appl_Layer+1,f
 16059  0DB5  083E               	movf	??_BVH2_Appl_Layer,w
 16060  0DB6  00C0               	movwf	??_BVH2_Appl_Layer+2
 16061  0DB7  083F               	movf	??_BVH2_Appl_Layer+1,w
 16062  0DB8  00C1               	movwf	??_BVH2_Appl_Layer+3
 16063  0DB9  3000               	movlw	0
 16064  0DBA  1BC1               	btfsc	??_BVH2_Appl_Layer+3,7
 16065  0DBB  30FF               	movlw	255
 16066  0DBC  00C2               	movwf	??_BVH2_Appl_Layer+4
 16067  0DBD  00C3               	movwf	??_BVH2_Appl_Layer+5
 16068  0DBE  0840               	movf	??_BVH2_Appl_Layer+2,w
 16069  0DBF  0022               	movlb	2	; select bank2
 16070  0DC0  07E8               	addwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),f
 16071  0DC1  0020               	movlb	0	; select bank0
 16072  0DC2  0841               	movf	??_BVH2_Appl_Layer+3,w
 16073  0DC3  0022               	movlb	2	; select bank2
 16074  0DC4  3DE9               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),f
 16075  0DC5  0020               	movlb	0	; select bank0
 16076  0DC6  0842               	movf	??_BVH2_Appl_Layer+4,w
 16077  0DC7  0022               	movlb	2	; select bank2
 16078  0DC8  3DEA               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),f
 16079  0DC9  0020               	movlb	0	; select bank0
 16080  0DCA  0843               	movf	??_BVH2_Appl_Layer+5,w
 16081  0DCB  0022               	movlb	2	; select bank2
 16082  0DCC  3DEB               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),f
 16083                           
 16084                           ;BVH2_Appl_Layer.c: 1649: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 16085  0DCD  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 16086  0DCE  2DDA               	goto	l12026
 16087  0DCF  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16088  0DD0  1D03               	btfss	3,2
 16089  0DD1  2E0B               	goto	l12032
 16090  0DD2  3041               	movlw	65
 16091  0DD3  0268               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 16092  0DD4  3077               	movlw	119
 16093  0DD5  3B69               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16094  0DD6  3002               	movlw	2
 16095  0DD7  3B6A               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16096  0DD8  1803               	btfsc	3,0
 16097  0DD9  2E0B               	goto	l12032
 16098  0DDA                     l12026:	
 16099  0DDA  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 16100  0DDB  2DF6               	goto	l12030
 16101  0DDC  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16102  0DDD  1D03               	btfss	3,2
 16103  0DDE  2DE6               	goto	l12028
 16104  0DDF  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16105  0DE0  1D03               	btfss	3,2
 16106  0DE1  2DE6               	goto	l12028
 16107  0DE2  307D               	movlw	125
 16108  0DE3  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16109  0DE4  1C03               	btfss	3,0
 16110  0DE5  2DF6               	goto	l12030
 16111  0DE6                     l12028:	
 16112  0DE6  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16113  0DE7  0024               	movlb	4	; select bank4
 16114  0DE8  00A3               	movwf	(_BVH2_Appl_Layer$1218+3)^(0+512)
 16115  0DE9  0022               	movlb	2	; select bank2
 16116  0DEA  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16117  0DEB  0024               	movlb	4	; select bank4
 16118  0DEC  00A2               	movwf	(_BVH2_Appl_Layer$1218+2)^(0+512)
 16119  0DED  0022               	movlb	2	; select bank2
 16120  0DEE  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16121  0DEF  0024               	movlb	4	; select bank4
 16122  0DF0  00A1               	movwf	(_BVH2_Appl_Layer$1218+1)^(0+512)
 16123  0DF1  0022               	movlb	2	; select bank2
 16124  0DF2  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 16125  0DF3  0024               	movlb	4	; select bank4
 16126  0DF4  00A0               	movwf	_BVH2_Appl_Layer$1218^(0+512)
 16127  0DF5  2DFC               	goto	l1802
 16128  0DF6                     l12030:	
 16129  0DF6  0024               	movlb	4	; select bank4
 16130  0DF7  307D               	movlw	125
 16131  0DF8  01A3               	clrf	(_BVH2_Appl_Layer$1218+3)^(0+512)
 16132  0DF9  01A2               	clrf	(_BVH2_Appl_Layer$1218+2)^(0+512)
 16133  0DFA  00A1               	movwf	(_BVH2_Appl_Layer$1218+1)^(0+512)
 16134  0DFB  01A0               	clrf	_BVH2_Appl_Layer$1218^(0+512)
 16135  0DFC                     l1802:	
 16136  0DFC  0823               	movf	(_BVH2_Appl_Layer$1218+3)^(0+512),w
 16137  0DFD  0022               	movlb	2	; select bank2
 16138  0DFE  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 16139  0DFF  0024               	movlb	4	; select bank4
 16140  0E00  0822               	movf	(_BVH2_Appl_Layer$1218+2)^(0+512),w
 16141  0E01  0022               	movlb	2	; select bank2
 16142  0E02  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 16143  0E03  0024               	movlb	4	; select bank4
 16144  0E04  0821               	movf	(_BVH2_Appl_Layer$1218+1)^(0+512),w
 16145  0E05  0022               	movlb	2	; select bank2
 16146  0E06  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 16147  0E07  0024               	movlb	4	; select bank4
 16148  0E08  0820               	movf	_BVH2_Appl_Layer$1218^(0+512),w
 16149  0E09  0022               	movlb	2	; select bank2
 16150  0E0A  2E11               	goto	L37
 16151  0E0B                     l12032:	
 16152  0E0B  3002               	movlw	2
 16153  0E0C  01EB               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 16154  0E0D  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 16155  0E0E  3077               	movlw	119
 16156  0E0F  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 16157  0E10  3040               	movlw	64
 16158  0E11                     L37:	
 16159  0E11  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 16160                           
 16161                           ;BVH2_Appl_Layer.c: 1652: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 16162  0E12  01ED               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 16163  0E13  0008               	return
 16164  0E14                     __end_of_BVH2_Appl_Layer:	
 16165  0E14                     __ptext48:	
 16166 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 16167 ;; Defined at:
 16168 ;;		line 1676 in file "../T_Link/BVH2_Appl_Layer.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;		None
 16171 ;; Auto vars:     Size  Location     Type
 16172 ;;		None
 16173 ;; Return value:  Size  Location     Type
 16174 ;;                  1    wreg      void 
 16175 ;; Registers used:
 16176 ;;		wreg, status,2, status,0
 16177 ;; Tracked objects:
 16178 ;;		On entry : 1F/1
 16179 ;;		On exit  : 1F/1
 16180 ;;		Unchanged: 0/0
 16181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16182 ;;      Params:         0       0       0       0       0       0       0       0
 16183 ;;      Locals:         0       0       0       0       0       0       0       0
 16184 ;;      Temps:          0       0       0       0       0       0       0       0
 16185 ;;      Totals:         0       0       0       0       0       0       0       0
 16186 ;;Total ram usage:        0 bytes
 16187 ;; Hardware stack levels used:    1
 16188 ;; Hardware stack levels required when called:    4
 16189 ;; This function calls:
 16190 ;;		Nothing
 16191 ;; This function is called by:
 16192 ;;		_BVH2_Appl_Layer
 16193 ;; This function uses a non-reentrant model
 16194 ;;
 16195                           
 16196                           
 16197                           ;psect for function _Cb1_Current_An___High_node_fcn1
 16198  0E14                     _Cb1_Current_An___High_node_fcn1:	
 16199                           
 16200                           ;BVH2_Appl_Layer.c: 1680: if (bool_mat_currAlarm_bldc) {
 16201                           
 16202                           ;incstack = 0
 16203                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 16204  0E14  084E               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 16205  0E15  1903               	btfsc	3,2
 16206  0E16  2E24               	goto	l10272
 16207                           
 16208                           ;BVH2_Appl_Layer.c: 1682: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 16209                           ;BVH2_Appl_Layer.c: 1683: (UInt8)2;
 16210  0E17  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 16211  0E18  39F0               	andlw	-16
 16212  0E19  3802               	iorlw	2
 16213  0E1A  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 16214                           
 16215                           ;BVH2_Appl_Layer.c: 1684: Cb1_StateCnt = 0 ;
 16216  0E1B  01A8               	clrf	_Cb1_StateCnt^(0+128)
 16217  0E1C  01A9               	clrf	(_Cb1_StateCnt+1)^(0+128)
 16218  0E1D  2E20               	goto	l10270
 16219  0E1E                     L45:	
 16220                           ;BVH2_Appl_Layer.c: 1690: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 16221                           ;BVH2_Appl_Layer.c: 1691: (UInt8)5;
 16222                           
 16223                           
 16224                           ;BVH2_Appl_Layer.c: 1692: Cb1_oShutoff = 0;
 16225                           
 16226                           ;BVH2_Appl_Layer.c: 1693: Cb1_oCurrentAlarm = 0;
 16227  0E1E  27EF               	fcall	PL92	;call to abstracted procedure
 16228                           
 16229                           ;BVH2_Appl_Layer.c: 1694: Cb1_RestartCounter = 0 ;
 16230  0E1F  01CD               	clrf	_Cb1_RestartCounter^(0+256)
 16231  0E20                     l10270:	
 16232                           
 16233                           ;BVH2_Appl_Layer.c: 1685: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 16234  0E20  3030               	movlw	48
 16235  0E21  0021               	movlb	1	; select bank1
 16236  0E22  04C9               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 16237                           
 16238                           ;BVH2_Appl_Layer.c: 1686: }
 16239  0E23  0008               	return
 16240  0E24                     l10272:	
 16241                           
 16242                           ;BVH2_Appl_Layer.c: 1687: else {
 16243                           ;BVH2_Appl_Layer.c: 1688: if (Cb1_StateCnt > 100) {
 16244  0E24  3000               	movlw	0
 16245  0E25  0229               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 16246  0E26  3065               	movlw	101
 16247  0E27  1903               	skipnz
 16248  0E28  0228               	subwf	_Cb1_StateCnt^(0+128),w
 16249                           
 16250                           ;BVH2_Appl_Layer.c: 1697: else {
 16251                           ;BVH2_Appl_Layer.c: 1698: SIBFS_Current_Analysis_High_b.Cb1_glflag = 1 ;
 16252  0E29  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 16253  0E2A  1803               	btfsc	3,0
 16254  0E2B  2E1E               	goto	L45
 16255  0E2C  39CF               	andlw	-49
 16256  0E2D  3810               	iorlw	16
 16257  0E2E  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 16258  0E2F  0008               	return
 16259  0E30                     __end_of_Cb1_Current_An___High_node_fcn1:	
 16260  0E30                     __ptext46:	
 16261 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 16262 ;; Defined at:
 16263 ;;		line 1839 in file "../T_Link/BVH2_Appl_Layer.c"
 16264 ;; Parameters:    Size  Location     Type
 16265 ;;		None
 16266 ;; Auto vars:     Size  Location     Type
 16267 ;;		None
 16268 ;; Return value:  Size  Location     Type
 16269 ;;                  1    wreg      void 
 16270 ;; Registers used:
 16271 ;;		wreg, status,2, status,0
 16272 ;; Tracked objects:
 16273 ;;		On entry : 1F/1
 16274 ;;		On exit  : 1F/1
 16275 ;;		Unchanged: 0/0
 16276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16277 ;;      Params:         0       0       0       0       0       0       0       0
 16278 ;;      Locals:         0       0       0       0       0       0       0       0
 16279 ;;      Temps:          0       0       0       0       0       0       0       0
 16280 ;;      Totals:         0       0       0       0       0       0       0       0
 16281 ;;Total ram usage:        0 bytes
 16282 ;; Hardware stack levels used:    1
 16283 ;; Hardware stack levels required when called:    4
 16284 ;; This function calls:
 16285 ;;		Nothing
 16286 ;; This function is called by:
 16287 ;;		_BVH2_Appl_Layer
 16288 ;; This function uses a non-reentrant model
 16289 ;;
 16290                           
 16291                           
 16292                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
 16293  0E30                     _Cb44_Pic_etat_monitor_node_fcn1:	
 16294                           
 16295                           ;BVH2_Appl_Layer.c: 1849: else {
 16296                           ;BVH2_Appl_Layer.c: 1850: if (Cb44_StateCnt > 5) {
 16297                           
 16298                           ;BVH2_Appl_Layer.c: 1843: if (bool_mat_pic_etat) {
 16299                           
 16300                           ;incstack = 0
 16301                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 16302  0E30  3000               	movlw	0
 16303  0E31  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 16304  0E32  3006               	movlw	6
 16305  0E33  1903               	skipnz
 16306  0E34  0226               	subwf	_Cb44_StateCnt^(0+128),w
 16307                           
 16308                           ;BVH2_Appl_Layer.c: 1852: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 16309  0E35  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 16310  0E36  1C03               	skipc
 16311  0E37  2E41               	goto	L43
 16312  0E38  39F8               	andlw	-8
 16313  0E39  3803               	iorlw	3
 16314  0E3A  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 16315                           
 16316                           ;BVH2_Appl_Layer.c: 1854: Cb44_oAlarm = 0;
 16317  0E3B  0022               	movlb	2	; select bank2
 16318  0E3C  3018               	movlw	24
 16319  0E3D  01C5               	clrf	_Cb44_oShutoff^(0+256)
 16320                           
 16321                           ;BVH2_Appl_Layer.c: 1855: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 16322  0E3E  0021               	movlb	1	; select bank1
 16323  0E3F  04C7               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 16324                           
 16325                           ;BVH2_Appl_Layer.c: 1856: }
 16326  0E40  0008               	return
 16327  0E41                     L43:	
 16328                           ;BVH2_Appl_Layer.c: 1857: else {
 16329                           ;BVH2_Appl_Layer.c: 1858: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 1 ;
 16330                           
 16331  0E41  39E7               	andlw	-25
 16332  0E42  3808               	iorlw	8
 16333  0E43  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 16334  0E44  0008               	return
 16335  0E45                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 16336  0E45                     __ptext43:	
 16337 ;; *************** function ___lmul *****************
 16338 ;; Defined at:
 16339 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
 16340 ;; Parameters:    Size  Location     Type
 16341 ;;  multiplier      4   16[BANK0 ] unsigned long 
 16342 ;;  multiplicand    4   20[BANK0 ] unsigned long 
 16343 ;; Auto vars:     Size  Location     Type
 16344 ;;  product         4   24[BANK0 ] unsigned long 
 16345 ;; Return value:  Size  Location     Type
 16346 ;;                  4   16[BANK0 ] unsigned long 
 16347 ;; Registers used:
 16348 ;;		wreg, status,2, status,0
 16349 ;; Tracked objects:
 16350 ;;		On entry : 1F/0
 16351 ;;		On exit  : 1F/0
 16352 ;;		Unchanged: 0/0
 16353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16354 ;;      Params:         0       8       0       0       0       0       0       0
 16355 ;;      Locals:         0       4       0       0       0       0       0       0
 16356 ;;      Temps:          0       0       0       0       0       0       0       0
 16357 ;;      Totals:         0      12       0       0       0       0       0       0
 16358 ;;Total ram usage:       12 bytes
 16359 ;; Hardware stack levels used:    1
 16360 ;; Hardware stack levels required when called:    4
 16361 ;; This function calls:
 16362 ;;		Nothing
 16363 ;; This function is called by:
 16364 ;;		_BVH2_Appl_Layer
 16365 ;; This function uses a non-reentrant model
 16366 ;;
 16367                           
 16368                           
 16369                           ;psect for function ___lmul
 16370  0E45                     ___lmul:	
 16371                           
 16372                           ;incstack = 0
 16373                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 16374  0E45  01B8               	clrf	___lmul@product
 16375  0E46  01B9               	clrf	___lmul@product+1
 16376  0E47  01BA               	clrf	___lmul@product+2
 16377  0E48  01BB               	clrf	___lmul@product+3
 16378  0E49                     l2071:	
 16379  0E49  1C30               	btfss	___lmul@multiplier,0
 16380  0E4A  2E53               	goto	l10290
 16381  0E4B  0834               	movf	___lmul@multiplicand,w
 16382  0E4C  07B8               	addwf	___lmul@product,f
 16383  0E4D  0835               	movf	___lmul@multiplicand+1,w
 16384  0E4E  3DB9               	addwfc	___lmul@product+1,f
 16385  0E4F  0836               	movf	___lmul@multiplicand+2,w
 16386  0E50  3DBA               	addwfc	___lmul@product+2,f
 16387  0E51  0837               	movf	___lmul@multiplicand+3,w
 16388  0E52  3DBB               	addwfc	___lmul@product+3,f
 16389  0E53                     l10290:	
 16390  0E53  35B4               	lslf	___lmul@multiplicand,f
 16391  0E54  0DB5               	rlf	___lmul@multiplicand+1,f
 16392  0E55  0DB6               	rlf	___lmul@multiplicand+2,f
 16393  0E56  0DB7               	rlf	___lmul@multiplicand+3,f
 16394  0E57  36B3               	lsrf	___lmul@multiplier+3,f
 16395  0E58  0CB2               	rrf	___lmul@multiplier+2,f
 16396  0E59  0CB1               	rrf	___lmul@multiplier+1,f
 16397  0E5A  0CB0               	rrf	___lmul@multiplier,f
 16398  0E5B  0833               	movf	___lmul@multiplier+3,w
 16399  0E5C  0432               	iorwf	___lmul@multiplier+2,w
 16400  0E5D  0431               	iorwf	___lmul@multiplier+1,w
 16401  0E5E  0430               	iorwf	___lmul@multiplier,w
 16402  0E5F  1D03               	skipz
 16403  0E60  2E49               	goto	l2071
 16404  0E61  083B               	movf	___lmul@product+3,w
 16405  0E62  00B3               	movwf	?___lmul+3
 16406  0E63  083A               	movf	___lmul@product+2,w
 16407  0E64  00B2               	movwf	?___lmul+2
 16408  0E65  0839               	movf	___lmul@product+1,w
 16409  0E66  00B1               	movwf	?___lmul+1
 16410  0E67  0838               	movf	___lmul@product,w
 16411  0E68  00B0               	movwf	?___lmul
 16412  0E69  0008               	return
 16413  0E6A                     __end_of___lmul:	
 16414  0E6A                     __ptext42:	
 16415 ;; *************** function ___wmul *****************
 16416 ;; Defined at:
 16417 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 16418 ;; Parameters:    Size  Location     Type
 16419 ;;  multiplier      2   16[BANK0 ] unsigned int 
 16420 ;;  multiplicand    2   18[BANK0 ] unsigned int 
 16421 ;; Auto vars:     Size  Location     Type
 16422 ;;  product         2   20[BANK0 ] unsigned int 
 16423 ;; Return value:  Size  Location     Type
 16424 ;;                  2   16[BANK0 ] unsigned int 
 16425 ;; Registers used:
 16426 ;;		wreg, status,2, status,0
 16427 ;; Tracked objects:
 16428 ;;		On entry : 1F/0
 16429 ;;		On exit  : 1F/0
 16430 ;;		Unchanged: 0/0
 16431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16432 ;;      Params:         0       4       0       0       0       0       0       0
 16433 ;;      Locals:         0       2       0       0       0       0       0       0
 16434 ;;      Temps:          0       0       0       0       0       0       0       0
 16435 ;;      Totals:         0       6       0       0       0       0       0       0
 16436 ;;Total ram usage:        6 bytes
 16437 ;; Hardware stack levels used:    1
 16438 ;; Hardware stack levels required when called:    4
 16439 ;; This function calls:
 16440 ;;		Nothing
 16441 ;; This function is called by:
 16442 ;;		_commutate
 16443 ;;		_EOL
 16444 ;;		_BVH2_Appl_Layer
 16445 ;; This function uses a non-reentrant model
 16446 ;;
 16447                           
 16448                           
 16449                           ;psect for function ___wmul
 16450  0E6A                     ___wmul:	
 16451                           
 16452                           ;incstack = 0
 16453                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16454  0E6A  01B4               	clrf	___wmul@product
 16455  0E6B  01B5               	clrf	___wmul@product+1
 16456  0E6C                     l9418:	
 16457  0E6C  1C30               	btfss	___wmul@multiplier,0
 16458  0E6D  2E72               	goto	l9422
 16459  0E6E  0832               	movf	___wmul@multiplicand,w
 16460  0E6F  07B4               	addwf	___wmul@product,f
 16461  0E70  0833               	movf	___wmul@multiplicand+1,w
 16462  0E71  3DB5               	addwfc	___wmul@product+1,f
 16463  0E72                     l9422:	
 16464  0E72  35B2               	lslf	___wmul@multiplicand,f
 16465  0E73  0DB3               	rlf	___wmul@multiplicand+1,f
 16466  0E74  36B1               	lsrf	___wmul@multiplier+1,f
 16467  0E75  0CB0               	rrf	___wmul@multiplier,f
 16468  0E76  0830               	movf	___wmul@multiplier,w
 16469  0E77  0431               	iorwf	___wmul@multiplier+1,w
 16470  0E78  1D03               	btfss	3,2
 16471  0E79  2E6C               	goto	l9418
 16472  0E7A  0835               	movf	___wmul@product+1,w
 16473  0E7B  00B1               	movwf	?___wmul+1
 16474  0E7C  0834               	movf	___wmul@product,w
 16475  0E7D  00B0               	movwf	?___wmul
 16476  0E7E  0008               	return
 16477  0E7F                     __end_of___wmul:	
 16478  0E7F                     __ptext47:	
 16479 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 16480 ;; Defined at:
 16481 ;;		line 1720 in file "../T_Link/BVH2_Appl_Layer.c"
 16482 ;; Parameters:    Size  Location     Type
 16483 ;;		None
 16484 ;; Auto vars:     Size  Location     Type
 16485 ;;		None
 16486 ;; Return value:  Size  Location     Type
 16487 ;;                  1    wreg      void 
 16488 ;; Registers used:
 16489 ;;		wreg, status,2, status,0
 16490 ;; Tracked objects:
 16491 ;;		On entry : 1F/1
 16492 ;;		On exit  : 1C/0
 16493 ;;		Unchanged: 0/0
 16494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16495 ;;      Params:         0       0       0       0       0       0       0       0
 16496 ;;      Locals:         0       0       0       0       0       0       0       0
 16497 ;;      Temps:          0       0       0       0       0       0       0       0
 16498 ;;      Totals:         0       0       0       0       0       0       0       0
 16499 ;;Total ram usage:        0 bytes
 16500 ;; Hardware stack levels used:    1
 16501 ;; Hardware stack levels required when called:    4
 16502 ;; This function calls:
 16503 ;;		Nothing
 16504 ;; This function is called by:
 16505 ;;		_BVH2_Appl_Layer
 16506 ;; This function uses a non-reentrant model
 16507 ;;
 16508                           
 16509                           
 16510                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 16511  0E7F                     _Cb34_PWM_Detection_node_fcn1:	
 16512                           
 16513                           ;BVH2_Appl_Layer.c: 1722: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 16514                           
 16515                           ;incstack = 0
 16516                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 16517  0E7F  0845               	movf	_Cb34_idPWM^(0+128),w
 16518  0E80  1903               	btfsc	3,2
 16519  0E81  2E86               	goto	l10130
 16520  0E82  30C8               	movlw	200
 16521  0E83  0245               	subwf	_Cb34_idPWM^(0+128),w
 16522  0E84  1C03               	skipc
 16523  0E85  2E8F               	goto	l10142
 16524  0E86                     l10130:	
 16525                           
 16526                           ;BVH2_Appl_Layer.c: 1724: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 16527  0E86  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16528  0E87  39F0               	andlw	-16
 16529  0E88  3807               	iorlw	7
 16530                           
 16531                           ;BVH2_Appl_Layer.c: 1725: Cb34_odPumpOff = 0;
 16532                           
 16533                           ;BVH2_Appl_Layer.c: 1726: Cb34_odFixedValueSel = 1;
 16534  0E89  27F6               	fcall	PL112	;call to abstracted procedure
 16535                           
 16536                           ;BVH2_Appl_Layer.c: 1727: Cb34_odFixedLowValueSel = 0;
 16537  0E8A  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16538                           
 16539                           ;BVH2_Appl_Layer.c: 1728: Cb34_oPWM_SC_Alarm = 0;
 16540  0E8B  01C9               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16541                           
 16542                           ;BVH2_Appl_Layer.c: 1729: Cb34_oPWM_Alarm = 1;
 16543  0E8C  01CA               	clrf	_Cb34_oPWM_Alarm^(0+256)
 16544  0E8D  0ACA               	incf	_Cb34_oPWM_Alarm^(0+256),f
 16545                           
 16546                           ;BVH2_Appl_Layer.c: 1730: }
 16547  0E8E  0008               	return
 16548  0E8F                     l10142:	
 16549                           
 16550                           ;BVH2_Appl_Layer.c: 1731: else {
 16551                           ;BVH2_Appl_Layer.c: 1734: if ((ui16_PWM_Freq_mat < 36000) || (ui16_PWM_Freq_mat > 44000)
      +                          ) {
 16552  0E8F  308C               	movlw	140
 16553  0E90  0022               	movlb	2	; select bank2
 16554  0E91  0226               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 16555  0E92  30A0               	movlw	160
 16556  0E93  1903               	skipnz
 16557  0E94  0225               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 16558  0E95  1C03               	skipc
 16559  0E96  2E9E               	goto	l10146
 16560  0E97  30AB               	movlw	171
 16561  0E98  0226               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 16562  0E99  30E1               	movlw	225
 16563  0E9A  1903               	skipnz
 16564  0E9B  0225               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 16565  0E9C  1C03               	skipc
 16566  0E9D  2EB6               	goto	l10158
 16567  0E9E                     l10146:	
 16568                           
 16569                           ;BVH2_Appl_Layer.c: 1736: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 16570  0E9E  0021               	movlb	1	; select bank1
 16571  0E9F  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16572  0EA0  39F0               	andlw	-16
 16573  0EA1  3806               	iorlw	6
 16574  0EA2  2EA6               	goto	L44
 16575  0EA3                     l10160:	
 16576                           
 16577                           ;BVH2_Appl_Layer.c: 1746: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 16578  0EA3  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16579  0EA4  39F0               	andlw	-16
 16580  0EA5  3803               	iorlw	3
 16581  0EA6                     L44:	
 16582                           
 16583                           ;BVH2_Appl_Layer.c: 1737: Cb34_odPumpOff = 0;
 16584                           
 16585                           ;BVH2_Appl_Layer.c: 1738: Cb34_odFixedValueSel = 1;
 16586  0EA6  27F6  3188         	fcall	PL112	;call to abstracted procedure
 16587  0EA8  2EB1               	goto	l10152
 16588  0EA9                     l10174:	
 16589                           
 16590                           ;BVH2_Appl_Layer.c: 1757: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16591                           ;BVH2_Appl_Layer.c: 1758: (UInt8)8;
 16592  0EA9  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16593  0EAA  39F0               	andlw	-16
 16594  0EAB  3808               	iorlw	8
 16595  0EAC  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16596                           
 16597                           ;BVH2_Appl_Layer.c: 1759: Cb34_odPumpOff = 1;
 16598  0EAD  0022               	movlb	2	; select bank2
 16599  0EAE  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 16600  0EAF  0AC6               	incf	_Cb34_odPumpOff^(0+256),f
 16601                           
 16602                           ;BVH2_Appl_Layer.c: 1760: Cb34_odFixedValueSel = 0;
 16603  0EB0  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 16604  0EB1                     l10152:	
 16605                           
 16606                           ;BVH2_Appl_Layer.c: 1739: Cb34_odFixedLowValueSel = 0;
 16607  0EB1  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16608                           
 16609                           ;BVH2_Appl_Layer.c: 1740: Cb34_oPWM_SC_Alarm = 1;
 16610  0EB2  01C9               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16611  0EB3  0AC9               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 16612  0EB4                     l10156:	
 16613                           
 16614                           ;BVH2_Appl_Layer.c: 1741: Cb34_oPWM_Alarm = 0;
 16615  0EB4  01CA               	clrf	_Cb34_oPWM_Alarm^(0+256)
 16616                           
 16617                           ;BVH2_Appl_Layer.c: 1742: }
 16618  0EB5  0008               	return
 16619  0EB6                     l10158:	
 16620                           
 16621                           ;BVH2_Appl_Layer.c: 1743: else {
 16622                           ;BVH2_Appl_Layer.c: 1744: if (Cb34_idPWM <= 5) {
 16623  0EB6  3006               	movlw	6
 16624  0EB7  0021               	movlb	1	; select bank1
 16625  0EB8  0245               	subwf	_Cb34_idPWM^(0+128),w
 16626  0EB9  1C03               	btfss	3,0
 16627  0EBA  2EA3               	goto	l10160
 16628                           
 16629                           ;BVH2_Appl_Layer.c: 1753: else {
 16630                           ;BVH2_Appl_Layer.c: 1754: if (Cb34_idPWM < 9) {
 16631  0EBB  3009               	movlw	9
 16632  0EBC  0245               	subwf	_Cb34_idPWM^(0+128),w
 16633  0EBD  1C03               	btfss	3,0
 16634  0EBE  2EA9               	goto	l10174
 16635                           
 16636                           ;BVH2_Appl_Layer.c: 1765: else {
 16637                           ;BVH2_Appl_Layer.c: 1766: if (Cb34_idPWM > 191) {
 16638  0EBF  30C0               	movlw	192
 16639  0EC0  0245               	subwf	_Cb34_idPWM^(0+128),w
 16640  0EC1  1C03               	skipc
 16641  0EC2  2EC7               	goto	l10200
 16642                           
 16643                           ;BVH2_Appl_Layer.c: 1769: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16644                           ;BVH2_Appl_Layer.c: 1770: (UInt8)4;
 16645  0EC3  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16646  0EC4  39F0               	andlw	-16
 16647  0EC5  3804               	iorlw	4
 16648  0EC6  2EA6               	goto	L44
 16649  0EC7                     l10200:	
 16650                           
 16651                           ;BVH2_Appl_Layer.c: 1777: else {
 16652                           ;BVH2_Appl_Layer.c: 1778: if (Cb34_idPWM >= 23) {
 16653  0EC7  3017               	movlw	23
 16654  0EC8  0245               	subwf	_Cb34_idPWM^(0+128),w
 16655  0EC9  1C03               	skipc
 16656  0ECA  2ED5               	goto	l10214
 16657                           
 16658                           ;BVH2_Appl_Layer.c: 1781: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16659                           ;BVH2_Appl_Layer.c: 1782: (UInt8)2;
 16660  0ECB  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16661  0ECC  39F0               	andlw	-16
 16662  0ECD  3802               	iorlw	2
 16663  0ECE  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16664                           
 16665                           ;BVH2_Appl_Layer.c: 1783: Cb34_odPumpOff = 0;
 16666  0ECF  0022               	movlb	2	; select bank2
 16667  0ED0  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 16668                           
 16669                           ;BVH2_Appl_Layer.c: 1784: Cb34_odFixedLowValueSel = 0;
 16670  0ED1  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16671                           
 16672                           ;BVH2_Appl_Layer.c: 1785: Cb34_odFixedValueSel = 0;
 16673  0ED2  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 16674  0ED3                     l10210:	
 16675                           
 16676                           ;BVH2_Appl_Layer.c: 1786: Cb34_oPWM_SC_Alarm = 0;
 16677  0ED3  01C9               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16678  0ED4  2EB4               	goto	l10156
 16679  0ED5                     l10214:	
 16680                           
 16681                           ;BVH2_Appl_Layer.c: 1789: else {
 16682                           ;BVH2_Appl_Layer.c: 1790: if (Cb34_idPWM > 19) {
 16683  0ED5  3014               	movlw	20
 16684  0ED6  0245               	subwf	_Cb34_idPWM^(0+128),w
 16685  0ED7  1C03               	skipc
 16686  0ED8  2EE3               	goto	l10228
 16687                           
 16688                           ;BVH2_Appl_Layer.c: 1793: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16689                           ;BVH2_Appl_Layer.c: 1794: (UInt8)5;
 16690  0ED9  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16691  0EDA  39F0               	andlw	-16
 16692  0EDB  3805               	iorlw	5
 16693  0EDC  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16694                           
 16695                           ;BVH2_Appl_Layer.c: 1795: Cb34_odPumpOff = 0;
 16696  0EDD  0022               	movlb	2	; select bank2
 16697  0EDE  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 16698                           
 16699                           ;BVH2_Appl_Layer.c: 1796: Cb34_odFixedValueSel = 0;
 16700  0EDF  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 16701                           
 16702                           ;BVH2_Appl_Layer.c: 1797: Cb34_odFixedLowValueSel = 1;
 16703  0EE0  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16704  0EE1  0AC8               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 16705  0EE2  2ED3               	goto	l10210
 16706  0EE3                     l10228:	
 16707                           
 16708                           ;BVH2_Appl_Layer.c: 1801: else {
 16709                           ;BVH2_Appl_Layer.c: 1802: if (Cb34_idPWM <= 19) {
 16710  0EE3  3014               	movlw	20
 16711  0EE4  0245               	subwf	_Cb34_idPWM^(0+128),w
 16712  0EE5  1803               	skipnc
 16713  0EE6  0008               	return
 16714                           
 16715                           ;BVH2_Appl_Layer.c: 1805: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16716                           ;BVH2_Appl_Layer.c: 1806: (UInt8)1;
 16717                           
 16718                           ;BVH2_Appl_Layer.c: 1807: Cb34_odPumpOff = 1;
 16719                           
 16720                           ;BVH2_Appl_Layer.c: 1808: Cb34_odFixedValueSel = 0;
 16721                           
 16722                           ;BVH2_Appl_Layer.c: 1809: Cb34_odFixedLowValueSel = 0;
 16723  0EE7  27B4  3188         	fcall	PL58	;call to abstracted procedure
 16724  0EE9  2ED3               	goto	l10210
 16725  0EEA                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 16726  0EEA                     __ptext45:	
 16727 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 16728 ;; Defined at:
 16729 ;;		line 1880 in file "../T_Link/BVH2_Appl_Layer.c"
 16730 ;; Parameters:    Size  Location     Type
 16731 ;;		None
 16732 ;; Auto vars:     Size  Location     Type
 16733 ;;		None
 16734 ;; Return value:  Size  Location     Type
 16735 ;;                  1    wreg      void 
 16736 ;; Registers used:
 16737 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16738 ;; Tracked objects:
 16739 ;;		On entry : 1F/1
 16740 ;;		On exit  : 1F/2
 16741 ;;		Unchanged: 0/0
 16742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16743 ;;      Params:         0       0       0       0       0       0       0       0
 16744 ;;      Locals:         0       0       0       0       0       0       0       0
 16745 ;;      Temps:          0       0       0       0       0       0       0       0
 16746 ;;      Totals:         0       0       0       0       0       0       0       0
 16747 ;;Total ram usage:        0 bytes
 16748 ;; Hardware stack levels used:    1
 16749 ;; Hardware stack levels required when called:    4
 16750 ;; This function calls:
 16751 ;;		Nothing
 16752 ;; This function is called by:
 16753 ;;		_BVH2_Appl_Layer
 16754 ;; This function uses a non-reentrant model
 16755 ;;
 16756                           
 16757                           
 16758                           ;psect for function _Cb56_UbatHandling_node_fcn2
 16759  0EEA                     _Cb56_UbatHandling_node_fcn2:	
 16760                           
 16761                           ;BVH2_Appl_Layer.c: 1883: if (((UInt8)ui8_BattVolt_mat) > 147) {
 16762                           
 16763                           ;incstack = 0
 16764                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 16765  0EEA  3094               	movlw	148
 16766  0EEB  0232               	subwf	_ui8_BattVolt_mat^(0+128),w
 16767  0EEC  1803               	btfsc	3,0
 16768  0EED  2EF5               	goto	l10246
 16769  0EEE  2F0E               	goto	l10252
 16770  0EEF                     l1844:	
 16771                           ;BVH2_Appl_Layer.c: 1886: case 2: {
 16772                           
 16773                           
 16774                           ;BVH2_Appl_Layer.c: 1887: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 16775  0EEF  1246               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 16776                           
 16777                           ;BVH2_Appl_Layer.c: 1888: break;
 16778  0EF0  2EFE               	goto	l1845
 16779  0EF1                     l1846:	
 16780                           ;BVH2_Appl_Layer.c: 1889: }
 16781                           ;BVH2_Appl_Layer.c: 1890: case 3: {
 16782                           
 16783                           
 16784                           ;BVH2_Appl_Layer.c: 1891: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 16785  0EF1  12C6               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 16786                           
 16787                           ;BVH2_Appl_Layer.c: 1892: break;
 16788  0EF2  2EFE               	goto	l1845
 16789  0EF3                     l1847:	
 16790                           ;BVH2_Appl_Layer.c: 1893: }
 16791                           ;BVH2_Appl_Layer.c: 1894: default: {
 16792                           
 16793                           
 16794                           ;BVH2_Appl_Layer.c: 1895: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 16795  0EF3  1346               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 16796                           
 16797                           ;BVH2_Appl_Layer.c: 1896: }
 16798                           ;BVH2_Appl_Layer.c: 1897: }
 16799  0EF4  2EFE               	goto	l1845
 16800  0EF5                     l10246:	
 16801  0EF5  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 16802  0EF6  3907               	andlw	7
 16803                           
 16804                           ; Switch size 1, requested type "space"
 16805                           ; Number of cases is 2, Range of values is 2 to 3
 16806                           ; switch strategies available:
 16807                           ; Name         Instructions Cycles
 16808                           ; simple_byte            7     4 (average)
 16809                           ; direct_byte           13     9 (fixed)
 16810                           ; jumptable            263     9 (fixed)
 16811                           ;	Chosen strategy is simple_byte
 16812  0EF7  3A02               	xorlw	2	; case 2
 16813  0EF8  1903               	skipnz
 16814  0EF9  2EEF               	goto	l1844
 16815  0EFA  3A01               	xorlw	1	; case 3
 16816  0EFB  1903               	skipnz
 16817  0EFC  2EF1               	goto	l1846
 16818  0EFD  2EF3               	goto	l1847
 16819  0EFE                     l1845:	
 16820                           
 16821                           ;BVH2_Appl_Layer.c: 1898: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 16822  0EFE  1646               	bsf	_SIBFS_UbatHandling_b^(0+128),4
 16823  0EFF                     L42:	
 16824                           
 16825                           ;BVH2_Appl_Layer.c: 1899: Cb56_odPumpOff = 1;
 16826  0EFF  0022               	movlb	2	; select bank2
 16827  0F00  01C3               	clrf	_Cb56_odPumpOff^(0+256)
 16828  0F01  0AC3               	incf	_Cb56_odPumpOff^(0+256),f
 16829                           
 16830                           ;BVH2_Appl_Layer.c: 1900: Cb56_odFixedValueSel = 0;
 16831  0F02  0021               	movlb	1	; select bank1
 16832  0F03  01C4               	clrf	_Cb56_odFixedValueSel^(0+128)
 16833                           
 16834                           ;BVH2_Appl_Layer.c: 1901: Cb56_oUbat_Alarm_High = 1;
 16835  0F04  0022               	movlb	2	; select bank2
 16836  0F05  01C4               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 16837  0F06  0AC4               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 16838                           
 16839                           ;BVH2_Appl_Layer.c: 1902: }
 16840  0F07  0008               	return
 16841  0F08                     l1850:	
 16842                           ;BVH2_Appl_Layer.c: 1905: case 2: {
 16843                           
 16844                           
 16845                           ;BVH2_Appl_Layer.c: 1906: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 16846  0F08  1246               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 16847                           
 16848                           ;BVH2_Appl_Layer.c: 1907: break;
 16849  0F09  2F17               	goto	l10254
 16850  0F0A                     l1852:	
 16851                           ;BVH2_Appl_Layer.c: 1908: }
 16852                           ;BVH2_Appl_Layer.c: 1909: case 3: {
 16853                           
 16854                           
 16855                           ;BVH2_Appl_Layer.c: 1910: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 16856  0F0A  12C6               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 16857                           
 16858                           ;BVH2_Appl_Layer.c: 1911: break;
 16859  0F0B  2F17               	goto	l10254
 16860  0F0C                     l1853:	
 16861                           ;BVH2_Appl_Layer.c: 1912: }
 16862                           ;BVH2_Appl_Layer.c: 1913: default: {
 16863                           
 16864                           
 16865                           ;BVH2_Appl_Layer.c: 1914: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 16866  0F0C  1346               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 16867                           
 16868                           ;BVH2_Appl_Layer.c: 1915: }
 16869                           ;BVH2_Appl_Layer.c: 1916: }
 16870  0F0D  2F17               	goto	l10254
 16871  0F0E                     l10252:	
 16872  0F0E  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 16873  0F0F  3907               	andlw	7
 16874                           
 16875                           ; Switch size 1, requested type "space"
 16876                           ; Number of cases is 2, Range of values is 2 to 3
 16877                           ; switch strategies available:
 16878                           ; Name         Instructions Cycles
 16879                           ; simple_byte            7     4 (average)
 16880                           ; direct_byte           13     9 (fixed)
 16881                           ; jumptable            263     9 (fixed)
 16882                           ;	Chosen strategy is simple_byte
 16883  0F10  3A02               	xorlw	2	; case 2
 16884  0F11  1903               	skipnz
 16885  0F12  2F08               	goto	l1850
 16886  0F13  3A01               	xorlw	1	; case 3
 16887  0F14  1903               	skipnz
 16888  0F15  2F0A               	goto	l1852
 16889  0F16  2F0C               	goto	l1853
 16890  0F17                     l10254:	
 16891                           
 16892                           ;BVH2_Appl_Layer.c: 1919: if (((UInt8)ui8_BattVolt_mat) < 45) {
 16893  0F17  302D               	movlw	45
 16894  0F18  0232               	subwf	_ui8_BattVolt_mat^(0+128),w
 16895  0F19  1803               	skipnc
 16896  0F1A  2F1D               	goto	l1854
 16897                           
 16898                           ;BVH2_Appl_Layer.c: 1921: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 16899  0F1B  16C6               	bsf	_SIBFS_UbatHandling_b^(0+128),5
 16900  0F1C  2EFF               	goto	L42
 16901  0F1D                     l1854:	
 16902                           ;BVH2_Appl_Layer.c: 1922: Cb56_odPumpOff = 1;
 16903                           
 16904                           
 16905                           ;BVH2_Appl_Layer.c: 1926: else {
 16906                           ;BVH2_Appl_Layer.c: 1928: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 16907                           
 16908                           ;BVH2_Appl_Layer.c: 1929: Cb56_odPumpOff = 0;
 16909                           
 16910                           ;BVH2_Appl_Layer.c: 1930: Cb56_odFixedValueSel = 0;
 16911                           
 16912                           ;BVH2_Appl_Layer.c: 1931: Cb56_oUbat_Alarm_High = 0;
 16913  0F1D  27DA               	fcall	PL76	;call to abstracted procedure
 16914  0F1E  0008               	return
 16915  0F1F                     __end_of_Cb56_UbatHandling_node_fcn2:	
 16916  0F1F                     __ptext44:	
 16917 ;; *************** function ___aldiv *****************
 16918 ;; Defined at:
 16919 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
 16920 ;; Parameters:    Size  Location     Type
 16921 ;;  divisor         4   16[BANK0 ] long 
 16922 ;;  dividend        4   20[BANK0 ] long 
 16923 ;; Auto vars:     Size  Location     Type
 16924 ;;  quotient        4   26[BANK0 ] long 
 16925 ;;  sign            1   25[BANK0 ] unsigned char 
 16926 ;;  counter         1   24[BANK0 ] unsigned char 
 16927 ;; Return value:  Size  Location     Type
 16928 ;;                  4   16[BANK0 ] long 
 16929 ;; Registers used:
 16930 ;;		wreg, status,2, status,0
 16931 ;; Tracked objects:
 16932 ;;		On entry : 1F/0
 16933 ;;		On exit  : 1F/0
 16934 ;;		Unchanged: 0/0
 16935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16936 ;;      Params:         0       8       0       0       0       0       0       0
 16937 ;;      Locals:         0       6       0       0       0       0       0       0
 16938 ;;      Temps:          0       0       0       0       0       0       0       0
 16939 ;;      Totals:         0      14       0       0       0       0       0       0
 16940 ;;Total ram usage:       14 bytes
 16941 ;; Hardware stack levels used:    1
 16942 ;; Hardware stack levels required when called:    4
 16943 ;; This function calls:
 16944 ;;		Nothing
 16945 ;; This function is called by:
 16946 ;;		_BVH2_Appl_Layer
 16947 ;; This function uses a non-reentrant model
 16948 ;;
 16949                           
 16950                           
 16951                           ;psect for function ___aldiv
 16952  0F1F                     ___aldiv:	
 16953                           
 16954                           ;incstack = 0
 16955                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 16956  0F1F  01B9               	clrf	___aldiv@sign
 16957  0F20  1FB3               	btfss	___aldiv@divisor+3,7
 16958  0F21  2F2F               	goto	l2115
 16959  0F22  09B0               	comf	___aldiv@divisor,f
 16960  0F23  09B1               	comf	___aldiv@divisor+1,f
 16961  0F24  09B2               	comf	___aldiv@divisor+2,f
 16962  0F25  09B3               	comf	___aldiv@divisor+3,f
 16963  0F26  0AB0               	incf	___aldiv@divisor,f
 16964  0F27  1903               	skipnz
 16965  0F28  0AB1               	incf	___aldiv@divisor+1,f
 16966  0F29  1903               	skipnz
 16967  0F2A  0AB2               	incf	___aldiv@divisor+2,f
 16968  0F2B  1903               	skipnz
 16969  0F2C  0AB3               	incf	___aldiv@divisor+3,f
 16970  0F2D  01B9               	clrf	___aldiv@sign
 16971  0F2E  0AB9               	incf	___aldiv@sign,f
 16972  0F2F                     l2115:	
 16973  0F2F  1FB7               	btfss	___aldiv@dividend+3,7
 16974  0F30  2F3E               	goto	l10308
 16975  0F31  09B4               	comf	___aldiv@dividend,f
 16976  0F32  09B5               	comf	___aldiv@dividend+1,f
 16977  0F33  09B6               	comf	___aldiv@dividend+2,f
 16978  0F34  09B7               	comf	___aldiv@dividend+3,f
 16979  0F35  0AB4               	incf	___aldiv@dividend,f
 16980  0F36  1903               	skipnz
 16981  0F37  0AB5               	incf	___aldiv@dividend+1,f
 16982  0F38  1903               	skipnz
 16983  0F39  0AB6               	incf	___aldiv@dividend+2,f
 16984  0F3A  1903               	skipnz
 16985  0F3B  0AB7               	incf	___aldiv@dividend+3,f
 16986  0F3C  3001               	movlw	1
 16987  0F3D  06B9               	xorwf	___aldiv@sign,f
 16988  0F3E                     l10308:	
 16989  0F3E  01BA               	clrf	___aldiv@quotient
 16990  0F3F  01BB               	clrf	___aldiv@quotient+1
 16991  0F40  01BC               	clrf	___aldiv@quotient+2
 16992  0F41  01BD               	clrf	___aldiv@quotient+3
 16993  0F42  0833               	movf	___aldiv@divisor+3,w
 16994  0F43  0432               	iorwf	___aldiv@divisor+2,w
 16995  0F44  0431               	iorwf	___aldiv@divisor+1,w
 16996  0F45  0430               	iorwf	___aldiv@divisor,w
 16997  0F46  1903               	skipnz
 16998  0F47  2F74               	goto	l10330
 16999  0F48  01B8               	clrf	___aldiv@counter
 17000  0F49                     L41:	
 17001  0F49  0AB8               	incf	___aldiv@counter,f
 17002  0F4A  1BB3               	btfsc	___aldiv@divisor+3,7
 17003  0F4B  2F51               	goto	l10318
 17004  0F4C  35B0               	lslf	___aldiv@divisor,f
 17005  0F4D  0DB1               	rlf	___aldiv@divisor+1,f
 17006  0F4E  0DB2               	rlf	___aldiv@divisor+2,f
 17007  0F4F  0DB3               	rlf	___aldiv@divisor+3,f
 17008  0F50  2F49               	goto	L41
 17009  0F51                     l10318:	
 17010  0F51  35BA               	lslf	___aldiv@quotient,f
 17011  0F52  0DBB               	rlf	___aldiv@quotient+1,f
 17012  0F53  0DBC               	rlf	___aldiv@quotient+2,f
 17013  0F54  0DBD               	rlf	___aldiv@quotient+3,f
 17014  0F55  0833               	movf	___aldiv@divisor+3,w
 17015  0F56  0237               	subwf	___aldiv@dividend+3,w
 17016  0F57  1D03               	skipz
 17017  0F58  2F63               	goto	u7985
 17018  0F59  0832               	movf	___aldiv@divisor+2,w
 17019  0F5A  0236               	subwf	___aldiv@dividend+2,w
 17020  0F5B  1D03               	skipz
 17021  0F5C  2F63               	goto	u7985
 17022  0F5D  0831               	movf	___aldiv@divisor+1,w
 17023  0F5E  0235               	subwf	___aldiv@dividend+1,w
 17024  0F5F  1D03               	skipz
 17025  0F60  2F63               	goto	u7985
 17026  0F61  0830               	movf	___aldiv@divisor,w
 17027  0F62  0234               	subwf	___aldiv@dividend,w
 17028  0F63                     u7985:	
 17029  0F63  1C03               	skipc
 17030  0F64  2F6E               	goto	l10326
 17031  0F65  0830               	movf	___aldiv@divisor,w
 17032  0F66  02B4               	subwf	___aldiv@dividend,f
 17033  0F67  0831               	movf	___aldiv@divisor+1,w
 17034  0F68  3BB5               	subwfb	___aldiv@dividend+1,f
 17035  0F69  0832               	movf	___aldiv@divisor+2,w
 17036  0F6A  3BB6               	subwfb	___aldiv@dividend+2,f
 17037  0F6B  0833               	movf	___aldiv@divisor+3,w
 17038  0F6C  3BB7               	subwfb	___aldiv@dividend+3,f
 17039  0F6D  143A               	bsf	___aldiv@quotient,0
 17040  0F6E                     l10326:	
 17041  0F6E  36B3               	lsrf	___aldiv@divisor+3,f
 17042  0F6F  0CB2               	rrf	___aldiv@divisor+2,f
 17043  0F70  0CB1               	rrf	___aldiv@divisor+1,f
 17044  0F71  0CB0               	rrf	___aldiv@divisor,f
 17045  0F72  0BB8               	decfsz	___aldiv@counter,f
 17046  0F73  2F51               	goto	l10318
 17047  0F74                     l10330:	
 17048  0F74  0839               	movf	___aldiv@sign,w
 17049  0F75  1903               	btfsc	3,2
 17050  0F76  2F82               	goto	l10334
 17051  0F77  09BA               	comf	___aldiv@quotient,f
 17052  0F78  09BB               	comf	___aldiv@quotient+1,f
 17053  0F79  09BC               	comf	___aldiv@quotient+2,f
 17054  0F7A  09BD               	comf	___aldiv@quotient+3,f
 17055  0F7B  0ABA               	incf	___aldiv@quotient,f
 17056  0F7C  1903               	skipnz
 17057  0F7D  0ABB               	incf	___aldiv@quotient+1,f
 17058  0F7E  1903               	skipnz
 17059  0F7F  0ABC               	incf	___aldiv@quotient+2,f
 17060  0F80  1903               	skipnz
 17061  0F81  0ABD               	incf	___aldiv@quotient+3,f
 17062  0F82                     l10334:	
 17063  0F82  083D               	movf	___aldiv@quotient+3,w
 17064  0F83  00B3               	movwf	?___aldiv+3
 17065  0F84  083C               	movf	___aldiv@quotient+2,w
 17066  0F85  00B2               	movwf	?___aldiv+2
 17067  0F86  083B               	movf	___aldiv@quotient+1,w
 17068  0F87  00B1               	movwf	?___aldiv+1
 17069  0F88  083A               	movf	___aldiv@quotient,w
 17070  0F89  00B0               	movwf	?___aldiv
 17071  0F8A  0008               	return
 17072  0F8B                     __end_of___aldiv:	
 17073  0F8B                     PL22:	
 17074  0F8B  0020               	movlb	0	; select bank0
 17075  0F8C  00BF               	movwf	??_BVH2_Appl_Layer+1
 17076  0F8D  0021               	movlb	1	; select bank1
 17077  0F8E  0831               	movf	(_ui16_mat_Current+1)^(0+128),w
 17078  0F8F  0020               	movlb	0	; select bank0
 17079  0F90  023F               	subwf	??_BVH2_Appl_Layer+1,w
 17080  0F91  1D03               	skipz
 17081  0F92  0008               	return
 17082  0F93  0021               	movlb	1	; select bank1
 17083  0F94  0830               	movf	_ui16_mat_Current^(0+128),w
 17084  0F95  0020               	movlb	0	; select bank0
 17085  0F96  023E               	subwf	??_BVH2_Appl_Layer,w
 17086  0F97  0008               	return
 17087  0F98                     __end_ofPL22:	
 17088  0F98                     PL26:	
 17089  0F98  0023               	movlb	3	; select bank3
 17090  0F99  086C               	movf	_ui16_Current_Thresh^(0+384),w
 17091  0F9A  3EFE               	addlw	254
 17092  0F9B  0020               	movlb	0	; select bank0
 17093  0F9C  00BE               	movwf	??_BVH2_Appl_Layer
 17094  0F9D  30FF               	movlw	255
 17095  0F9E  0023               	movlb	3	; select bank3
 17096  0F9F  3D6D               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 17097  0FA0  0008               	return
 17098  0FA1                     __end_ofPL26:	
 17099  0FA1                     PL30:	
 17100  0FA1  0023               	movlb	3	; select bank3
 17101  0FA2  086C               	movf	_ui16_Current_Thresh^(0+384),w
 17102  0FA3  3E02               	addlw	2
 17103  0FA4  0020               	movlb	0	; select bank0
 17104  0FA5  00BE               	movwf	??_BVH2_Appl_Layer
 17105  0FA6  3000               	movlw	0
 17106  0FA7  0023               	movlb	3	; select bank3
 17107  0FA8  3D6D               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 17108  0FA9  0020               	movlb	0	; select bank0
 17109  0FAA  00BF               	movwf	??_BVH2_Appl_Layer+1
 17110  0FAB  0021               	movlb	1	; select bank1
 17111  0FAC  0231               	subwf	(_ui16_mat_Current+1)^(0+128),w
 17112  0FAD  1D03               	skipz
 17113  0FAE  0008               	return
 17114  0FAF  0020               	movlb	0	; select bank0
 17115  0FB0  083E               	movf	??_BVH2_Appl_Layer,w
 17116  0FB1  0021               	movlb	1	; select bank1
 17117  0FB2  0230               	subwf	_ui16_mat_Current^(0+128),w
 17118  0FB3  0008               	return
 17119  0FB4                     __end_ofPL30:	
 17120  0FB4                     PL58:	
 17121  0FB4  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 17122  0FB5  39F0               	andlw	-16
 17123  0FB6  3801               	iorlw	1
 17124  0FB7  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 17125  0FB8  0022               	movlb	2	; select bank2
 17126  0FB9  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 17127  0FBA  0AC6               	incf	_Cb34_odPumpOff^(0+256),f
 17128  0FBB  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 17129  0FBC  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 17130  0FBD  0008               	return
 17131  0FBE                     __end_ofPL58:	
 17132  0FBE                     PL60:	
 17133  0FBE  39F8               	andlw	-8
 17134  0FBF  3805               	iorlw	5
 17135  0FC0  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 17136  0FC1  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 17137  0FC2  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 17138  0FC3  0023               	movlb	3	; select bank3
 17139  0FC4  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 17140  0FC5  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 17141  0FC6  0022               	movlb	2	; select bank2
 17142  0FC7  0008               	return
 17143  0FC8                     __end_ofPL60:	
 17144  0FC8                     PL66:	
 17145  0FC8  0021               	movlb	1	; select bank1
 17146  0FC9  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 17147  0FCA  39F8               	andlw	-8
 17148  0FCB  3804               	iorlw	4
 17149  0FCC  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 17150  0FCD  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 17151  0FCE  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 17152  0FCF  0022               	movlb	2	; select bank2
 17153  0FD0  0008               	return
 17154  0FD1                     __end_ofPL66:	
 17155  0FD1                     PL70:	
 17156  0FD1  0024               	movlb	4	; select bank4
 17157  0FD2  0838               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),w
 17158  0FD3  0020               	movlb	0	; select bank0
 17159  0FD4  00B3               	movwf	___wmul@multiplicand+1
 17160  0FD5  0024               	movlb	4	; select bank4
 17161  0FD6  0837               	movf	BVH2_Appl_Layer@Sb2_Error^(0+512),w
 17162  0FD7  0020               	movlb	0	; select bank0
 17163  0FD8  00B2               	movwf	___wmul@multiplicand
 17164  0FD9  0008               	return
 17165  0FDA                     __end_ofPL70:	
 17166  0FDA                     PL76:	
 17167  0FDA  1746               	bsf	_SIBFS_UbatHandling_b^(0+128),6
 17168  0FDB  0022               	movlb	2	; select bank2
 17169  0FDC  01C3               	clrf	_Cb56_odPumpOff^(0+256)
 17170  0FDD  0021               	movlb	1	; select bank1
 17171  0FDE  01C4               	clrf	_Cb56_odFixedValueSel^(0+128)
 17172  0FDF  0022               	movlb	2	; select bank2
 17173  0FE0  01C4               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 17174  0FE1  0008               	return
 17175  0FE2                     __end_ofPL76:	
 17176  0FE2                     PL84:	
 17177  0FE2  3A80               	xorlw	128
 17178  0FE3  0020               	movlb	0	; select bank0
 17179  0FE4  00BE               	movwf	??_BVH2_Appl_Layer
 17180  0FE5  3080               	movlw	128
 17181  0FE6  023E               	subwf	??_BVH2_Appl_Layer,w
 17182  0FE7  0008               	return
 17183  0FE8                     __end_ofPL84:	
 17184  0FE8                     PL86:	
 17185  0FE8  0020               	movlb	0	; select bank0
 17186  0FE9  00BE               	movwf	??_BVH2_Appl_Layer
 17187  0FEA  0CBE               	rrf	??_BVH2_Appl_Layer,f
 17188  0FEB  0C3E               	rrf	??_BVH2_Appl_Layer,w
 17189  0FEC  3903               	andlw	3
 17190  0FED  3A03               	xorlw	3
 17191  0FEE  0008               	return
 17192  0FEF                     __end_ofPL86:	
 17193  0FEF                     PL92:	
 17194  0FEF  39F0               	andlw	-16
 17195  0FF0  3805               	iorlw	5
 17196  0FF1  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 17197  0FF2  0022               	movlb	2	; select bank2
 17198  0FF3  01CB               	clrf	_Cb1_oShutoff^(0+256)
 17199  0FF4  01CC               	clrf	_Cb1_oCurrentAlarm^(0+256)
 17200  0FF5  0008               	return
 17201  0FF6                     __end_ofPL92:	
 17202  0FF6                     PL112:	
 17203  0FF6  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 17204  0FF7  0022               	movlb	2	; select bank2
 17205  0FF8  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 17206  0FF9  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 17207  0FFA  0AC7               	incf	_Cb34_odFixedValueSel^(0+256),f
 17208  0FFB  0008               	return
 17209  0FFC                     __end_ofPL112:	
 17210  0FFC                     PL116:	
 17211  0FFC  3000               	movlw	0
 17212  0FFD  0020               	movlb	0	; select bank0
 17213  0FFE  024D               	subwf	_ui16_Speed_mat+1,w
 17214  0FFF  3405               	retlw	5
 17215  1000                     __end_ofPL116:	
 17216                           
 17217                           	psect	swtext2
 17218  075D                     __pswtext2:	
 17219  075D                     S13820:	
 17220  075D  3188  28EB         	ljmp	l11398
 17221  075F  3188  28EB         	ljmp	l11398
 17222  0761  3188  28EB         	ljmp	l11398
 17223  0763  3188  28EB         	ljmp	l11398
 17224  0765  3188  28EB         	ljmp	l11398
 17225  0767  3188  28EB         	ljmp	l11398
 17226  0769  3188  28EB         	ljmp	l11398
 17227  076B  3188  28EB         	ljmp	l11398
 17228                           
 17229                           	psect	intentry
 17230  0004                     __pintentry:	
 17231 ;; *************** function _interrupt_handler *****************
 17232 ;; Defined at:
 17233 ;;		line 77 in file "../interrupt.c"
 17234 ;; Parameters:    Size  Location     Type
 17235 ;;		None
 17236 ;; Auto vars:     Size  Location     Type
 17237 ;;		None
 17238 ;; Return value:  Size  Location     Type
 17239 ;;                  1    wreg      void 
 17240 ;; Registers used:
 17241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17242 ;; Tracked objects:
 17243 ;;		On entry : 0/0
 17244 ;;		On exit  : 1F/0
 17245 ;;		Unchanged: 0/0
 17246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17247 ;;      Params:         0       0       0       0       0       0       0       0
 17248 ;;      Locals:         0       0       0       0       0       0       0       0
 17249 ;;      Temps:          0       0       0       0       0       0       0       0
 17250 ;;      Totals:         0       0       0       0       0       0       0       0
 17251 ;;Total ram usage:        0 bytes
 17252 ;; Hardware stack levels used:    1
 17253 ;; Hardware stack levels required when called:    3
 17254 ;; This function calls:
 17255 ;;		_ELINMIntHandler
 17256 ;;		_PWM_CTRL
 17257 ;;		_Task1ms
 17258 ;;		_interrrupt_bldc
 17259 ;;		_interrupt_PWMCapture
 17260 ;; This function is called by:
 17261 ;;		Interrupt level 1
 17262 ;; This function uses a non-reentrant model
 17263 ;;
 17264                           
 17265  0004                     _interrupt_handler:	
 17266                           
 17267                           ;incstack = 0
 17268  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17269                           
 17270                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17271  0005  3180               	pagesel	$
 17272                           
 17273                           ;interrupt.c: 81: if( TMR1IF )
 17274  0006  0020               	movlb	0	; select bank0
 17275  0007  1811               	btfsc	17,0	;volatile
 17276                           
 17277                           ;interrupt.c: 83: {
 17278                           ;interrupt.c: 85: TMR1IF = 0;
 17279  0008  1011               	bcf	17,0	;volatile
 17280                           
 17281                           ;interrupt.c: 87: }
 17282                           ;interrupt.c: 90: if( TMR4IF )
 17283  0009  1C93               	btfss	19,1	;volatile
 17284  000A  2812               	goto	i1l13522
 17285                           
 17286                           ;interrupt.c: 92: {
 17287                           ;interrupt.c: 94: TMR4IF = 0;
 17288  000B  1093               	bcf	19,1	;volatile
 17289                           
 17290                           ;interrupt.c: 96: PWM_CTRL( );
 17291  000C  3187  274A  3180   	fcall	_PWM_CTRL
 17292                           
 17293                           ;interrupt.c: 98: Task1ms( );
 17294  000F  3187  2773  3180   	fcall	_Task1ms
 17295  0012                     i1l13522:	
 17296                           
 17297                           ;interrupt.c: 100: }
 17298                           ;interrupt.c: 106: if( TMR2IF )
 17299  0012  0020               	movlb	0	; select bank0
 17300  0013  1C91               	btfss	17,1	;volatile
 17301  0014  2819               	goto	i1l13528
 17302                           
 17303                           ;interrupt.c: 108: {
 17304                           ;interrupt.c: 110: TMR2IF = 0;
 17305  0015  1091               	bcf	17,1	;volatile
 17306                           
 17307                           ;interrupt.c: 112: interrrupt_bldc( );
 17308  0016  319B  23A6  3180   	fcall	_interrrupt_bldc
 17309  0019                     i1l13528:	
 17310                           
 17311                           ;interrupt.c: 114: }
 17312                           ;interrupt.c: 117: if( TMR6IF )
 17313  0019  0020               	movlb	0	; select bank0
 17314  001A  1D93               	btfss	19,3	;volatile
 17315  001B  2820               	goto	i1l13534
 17316                           
 17317                           ;interrupt.c: 119: {
 17318                           ;interrupt.c: 121: TMR6IF = 0;
 17319  001C  1193               	bcf	19,3	;volatile
 17320                           
 17321                           ;interrupt.c: 126: ELINMIntHandler( );
 17322  001D  3185  2596  3180   	fcall	_ELINMIntHandler
 17323  0020                     i1l13534:	
 17324                           
 17325                           ;interrupt.c: 131: }
 17326                           ;interrupt.c: 134: if( CCP5IF )
 17327  0020  0020               	movlb	0	; select bank0
 17328  0021  1F13               	btfss	19,6	;volatile
 17329  0022  2826               	goto	i1l13540
 17330                           
 17331                           ;interrupt.c: 136: {
 17332                           ;interrupt.c: 138: CCP5IF = 0;
 17333  0023  1313               	bcf	19,6	;volatile
 17334                           
 17335                           ;interrupt.c: 140: interrupt_PWMCapture( );
 17336  0024  3186  2688         	fcall	_interrupt_PWMCapture
 17337  0026                     i1l13540:	
 17338                           
 17339                           ;interrupt.c: 142: }
 17340                           ;interrupt.c: 145: if( CCP2IF )
 17341  0026  0020               	movlb	0	; select bank0
 17342  0027  1812               	btfsc	18,0	;volatile
 17343                           
 17344                           ;interrupt.c: 147: {
 17345                           ;interrupt.c: 149: CCP2IF = 0;
 17346  0028  1012               	bcf	18,0	;volatile
 17347  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17348  002A  0009               	retfie
 17349  002B                     __end_of_interrupt_handler:	
 17350                           
 17351                           	psect	swtext3
 17352  0722                     __pswtext3:	
 17353  0722                     i1S13822:	
 17354  0722  319B  2BD1         	ljmp	i1l12730
 17355  0724  319B  2BE8         	ljmp	i1l12742
 17356  0726  319C  2C02         	ljmp	i1l12782
 17357  0728  319C  2C31         	ljmp	i1l12820
 17358  072A  319B  2BE5         	ljmp	i1l12740
 17359  072C  319B  2BE5         	ljmp	i1l12740
 17360  072E  319B  2BE5         	ljmp	i1l12740
 17361  0730  319C  2C43         	ljmp	i1l284
 17362  0732  319C  2C48         	ljmp	i1l12854
 17363  0734  319C  2CDD         	ljmp	i1l267
 17364                           
 17365                           	psect	swtext4
 17366  0736                     __pswtext4:	
 17367  0736                     i1S13826:	
 17368  0736  319D  2DF1         	ljmp	i1l12454
 17369  0738  319D  2DF3         	ljmp	i1l12456
 17370  073A  319D  2DF6         	ljmp	i1l12458
 17371  073C  319D  2DF8         	ljmp	i1l12460
 17372  073E  319D  2DFA         	ljmp	i1l12462
 17373  0740  319D  2DFC         	ljmp	i1l12464
 17374  0742  319D  2DFC         	ljmp	i1l12464
 17375  0744  319D  2DFC         	ljmp	i1l12464
 17376  0746  319D  2DFC         	ljmp	i1l12464
 17377  0748  319D  2DFC         	ljmp	i1l12464
 17378                           
 17379                           	psect	text58
 17380  0773                     __ptext58:	
 17381 ;; *************** function _Task1ms *****************
 17382 ;; Defined at:
 17383 ;;		line 52 in file "../interrupt.c"
 17384 ;; Parameters:    Size  Location     Type
 17385 ;;		None
 17386 ;; Auto vars:     Size  Location     Type
 17387 ;;		None
 17388 ;; Return value:  Size  Location     Type
 17389 ;;                  1    wreg      void 
 17390 ;; Registers used:
 17391 ;;		status,2, status,0
 17392 ;; Tracked objects:
 17393 ;;		On entry : 1C/0
 17394 ;;		On exit  : 1F/1
 17395 ;;		Unchanged: 0/0
 17396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17397 ;;      Params:         0       0       0       0       0       0       0       0
 17398 ;;      Locals:         0       0       0       0       0       0       0       0
 17399 ;;      Temps:          0       0       0       0       0       0       0       0
 17400 ;;      Totals:         0       0       0       0       0       0       0       0
 17401 ;;Total ram usage:        0 bytes
 17402 ;; Hardware stack levels used:    1
 17403 ;; This function calls:
 17404 ;;		Nothing
 17405 ;; This function is called by:
 17406 ;;		_interrupt_handler
 17407 ;; This function uses a non-reentrant model
 17408 ;;
 17409                           
 17410                           
 17411                           ;psect for function _Task1ms
 17412  0773                     _Task1ms:	
 17413                           
 17414                           ;interrupt.c: 56: ui8_Task_Cont1ms++;
 17415                           
 17416                           ;incstack = 0
 17417                           ; Regs used in _Task1ms: [status]
 17418  0773  0021               	movlb	1	; select bank1
 17419  0774  0AD5               	incf	_ui8_Task_Cont1ms^(0+128),f
 17420  0775  0008               	return
 17421  0776                     __end_of_Task1ms:	
 17422                           
 17423                           	psect	text59
 17424  074A                     __ptext59:	
 17425 ;; *************** function _PWM_CTRL *****************
 17426 ;; Defined at:
 17427 ;;		line 198 in file "../pwm.c"
 17428 ;; Parameters:    Size  Location     Type
 17429 ;;		None
 17430 ;; Auto vars:     Size  Location     Type
 17431 ;;		None
 17432 ;; Return value:  Size  Location     Type
 17433 ;;                  1    wreg      void 
 17434 ;; Registers used:
 17435 ;;		wreg, status,2, status,0
 17436 ;; Tracked objects:
 17437 ;;		On entry : 1F/0
 17438 ;;		On exit  : 1C/0
 17439 ;;		Unchanged: 0/0
 17440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17441 ;;      Params:         0       0       0       0       0       0       0       0
 17442 ;;      Locals:         0       0       0       0       0       0       0       0
 17443 ;;      Temps:          0       0       0       0       0       0       0       0
 17444 ;;      Totals:         0       0       0       0       0       0       0       0
 17445 ;;Total ram usage:        0 bytes
 17446 ;; Hardware stack levels used:    1
 17447 ;; This function calls:
 17448 ;;		Nothing
 17449 ;; This function is called by:
 17450 ;;		_interrupt_handler
 17451 ;; This function uses a non-reentrant model
 17452 ;;
 17453                           
 17454                           
 17455                           ;psect for function _PWM_CTRL
 17456  074A                     _PWM_CTRL:	
 17457                           
 17458                           ;pwm.c: 288: ui8_PWM_FreqCnt++;
 17459                           
 17460                           ;incstack = 0
 17461                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 17462  074A  0021               	movlb	1	; select bank1
 17463  074B  3064               	movlw	100
 17464  074C  0ACB               	incf	_ui8_PWM_FreqCnt^(0+128),f
 17465                           
 17466                           ;pwm.c: 290: if( ui8_PWM_FreqCnt >= 100 )
 17467  074D  024B               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 17468  074E  1C03               	skipc
 17469  074F  2F54               	goto	i1l8090
 17470                           
 17471                           ;pwm.c: 292: {
 17472                           ;pwm.c: 294: ui8_PWM_FreqCnt = 0;
 17473  0750  01CB               	clrf	_ui8_PWM_FreqCnt^(0+128)
 17474                           
 17475                           ;pwm.c: 295: LATC0 = 0;
 17476  0751  0022               	movlb	2	; select bank2
 17477  0752  100E               	bcf	14,0	;volatile
 17478                           
 17479                           ;pwm.c: 298: }
 17480  0753  0008               	return
 17481  0754                     i1l8090:	
 17482                           
 17483                           ;pwm.c: 301: else
 17484                           ;pwm.c: 302: {
 17485                           ;pwm.c: 304: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 17486  0754  0022               	movlb	2	; select bank2
 17487  0755  0851               	movf	_ui8_PWMoutvalue^(0+256),w
 17488  0756  0021               	movlb	1	; select bank1
 17489  0757  024B               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 17490  0758  1C03               	skipc
 17491  0759  0008               	return
 17492                           
 17493                           ;pwm.c: 306: {
 17494                           ;pwm.c: 308: LATC0 = 1;
 17495  075A  0022               	movlb	2	; select bank2
 17496  075B  140E               	bsf	14,0	;volatile
 17497  075C  0008               	return
 17498  075D                     __end_of_PWM_CTRL:	


Data Sizes:
    Strings     0
    Constant    101
    Data        16
    BSS         261
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     44      58
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      80
    BANK4            80     32      59
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sp___ELINMIntGetPointer	PTR unsigned char  size(1) Largest target is 11
		 -> _ELINMIntMessageBuffer(BANK4[11]), 

    pt	PTR unsigned char  size(1) Largest target is 11
		 -> NULL(NULL[0]), _ELINMIntMessageBuffer(BANK4[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrupt_handler->_interrrupt_bldc
    _interrrupt_bldc->i1___lwdiv
    i1_commutate->i1___wmul
    _ELINMIntHandler->__ELINMIntResetProtocol

Critical Paths under _main in BANK0

    _main->_EOL
    _timer_init->_clear_timer
    _init_ports->_read_eeprom_data
    _InitMotorRun->_commutate
    _commutate->___wmul
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    _SetDiagAlarm->_PWM_Write_Out
    _Receive_Diag->__ELINMIntReceiveMessage
    __ELINMIntReceiveMessage->__ELINMIntSendMessage
    _Get_Analog_Value->_FILTER_Ubat
    _EOL->_NegativeAnswer
    _write_eeprom_data->___lwdiv
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _NegativeAnswer->_Transmit_LIN_8Bytes
    _Transmit_LIN_8Bytes->__ELINMIntSendMessage
    __ELINMIntSendMessage->__ELINMIntCalcIDParity
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc
    _interrrupt_bldc->i1_commutate

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   60125
                                             40 BANK0      4     4      0
                    _BVH2_Appl_Layer
                                _EOL
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                       _Receive_Diag
                       _SetDiagAlarm
                            ___awdiv
                        _clear_timer
                   _read_eeprom_data
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0    1449
                           _ADC_Init
                           _DiagInit
                       _EnableMCP201
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                __ELINMIntInitialize
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                             17 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0      65
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            0     0      0    1076
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0    1076
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0    1076
                                             22 BANK0     12    12      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) __ELINMIntInitialize                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    1     1      0     102
                                             19 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          0     0      0      37
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (2) _EnableMCP201                                         3     3      0      72
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      31
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     651
                                             16 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      31
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (1) _Receive_Diag                                         2     2      0    2426
                                             30 BANK0      2     2      0
                __ELINMIntGetPointer
            __ELINMIntReceiveMessage
 ---------------------------------------------------------------------------------
 (2) __ELINMIntReceiveMessage                              3     1      2    1961
                                             27 BANK0      3     1      2
               __ELINMIntSendMessage
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                             16 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EOL                                                 27    27      0   51143
                                             37 BANK0      3     3      0
                                              0 BANK4     24    24      0
                           _ADC_Read
                           _ADC_Wait
                      _InitMotorStop
                     _NegativeAnswer
                          _PWMReadDC
                      _PWM_Write_Out
                _Transmit_LIN_8Bytes
                            ___lwdiv
                             ___wmul
                              _cksum
                   _read_eeprom_data
                  _write_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _write_eeprom_data                                    2     1      1    1142
                                             23 BANK0      2     1      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     2     2      0      65
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _cksum                                                8     6      2     142
                                             16 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1333
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        1     1      0      31
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWMReadDC                                            0     0      0     368
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (3) ___tmul                                               9     3      6     316
                                             16 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___ltdiv                                             10     4      6      52
                                             25 BANK0     10     4      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _NegativeAnswer                                       1     1      0   20310
                                             36 BANK0      1     1      0
                _Transmit_LIN_8Bytes
 ---------------------------------------------------------------------------------
 (2) _Transmit_LIN_8Bytes                                  9     1      8   20279
                                             27 BANK0      9     1      8
                __ELINMIntGetPointer
               __ELINMIntSendMessage
 ---------------------------------------------------------------------------------
 (3) __ELINMIntSendMessage                                10     5      5    1566
                                             17 BANK0     10     5      5
              __ELINMIntCalcIDParity
 ---------------------------------------------------------------------------------
 (4) __ELINMIntCalcIDParity                                1     1      0     309
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) __ELINMIntGetPointer                                  2     1      1     434
                                             16 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             3     1      2      37
                                             16 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     38    38      0    3262
                                             30 BANK0      6     6      0
                                              0 BANK4     32    32      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1076
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                             16 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                             16 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                    0     0      0     685
                    _ELINMIntHandler
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (7) _interrupt_PWMCapture                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _interrrupt_bldc                                      6     6      0     663
                                              7 COMMON     2     2      0
                                             12 BANK0      4     4      0
                           _BLDCWait
                         i1_ADC_Read
                         i1_ADC_Wait
                          i1___lwdiv
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (8) i1_commutate                                         12    12      0     260
                                              0 BANK0     12    12      0
                           i1___wmul
 ---------------------------------------------------------------------------------
 (9) i1___wmul                                             6     2      4     260
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) i1___lwdiv                                            7     3      4      52
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_ADC_Read                                           3     1      2      37
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (8) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Task1ms                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PWM_CTRL                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ELINMIntHandler                                      0     0      0      22
             __ELINMIntResetProtocol
 ---------------------------------------------------------------------------------
 (8) __ELINMIntResetProtocol                               1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _EOL
     _ADC_Read
     _ADC_Wait
     _InitMotorStop
     _NegativeAnswer
       _Transmit_LIN_8Bytes
         __ELINMIntGetPointer
         __ELINMIntSendMessage
           __ELINMIntCalcIDParity
     _PWMReadDC
       ___ltdiv
         ___tmul (ARG)
       ___tmul
     _PWM_Write_Out
     _Transmit_LIN_8Bytes
       __ELINMIntGetPointer
       __ELINMIntSendMessage
         __ELINMIntCalcIDParity
     ___lwdiv
     ___wmul
     _cksum
     _read_eeprom_data
     _write_eeprom_data
       ___lwdiv (ARG)
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
       ___wmul
   _InitMotorStop
   _Receive_Diag
     __ELINMIntGetPointer
     __ELINMIntReceiveMessage
       __ELINMIntSendMessage
         __ELINMIntCalcIDParity
   _SetDiagAlarm
     _PWM_Write_Out
   ___awdiv
   _clear_timer
   _read_eeprom_data
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _EnableMCP201
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     __ELINMIntInitialize
     _init_bldc
       _InitMotorRun
         _commutate
           ___wmul
     _init_ports
       _read_eeprom_data
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _ELINMIntHandler
     __ELINMIntResetProtocol
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     i1_ADC_Read
     i1_ADC_Wait
     i1___lwdiv
     i1___wmul
     i1_commutate
       i1___wmul
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     170       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2C      3A       6       72.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     20      3B      14       73.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     170      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Sep 25 13:34:32 2018

                               EOL@_dcnt_420 0228                                 EOL@_dcnt_421 0229  
                               EOL@_dcnt_413 0221                                 EOL@_dcnt_422 022A  
                               EOL@_dcnt_414 0222                                 EOL@_dcnt_423 022B  
                               EOL@_dcnt_415 0223                                 EOL@_dcnt_424 022C  
                               EOL@_dcnt_416 0224                                 EOL@_dcnt_425 022D  
                               EOL@_dcnt_417 0225                                 EOL@_dcnt_426 022E  
                               EOL@_dcnt_418 0226                                 EOL@_dcnt_427 022F  
                               EOL@_dcnt_419 0227                                 EOL@_dcnt_428 0230  
                               EOL@_dcnt_429 0231                            ?_PWM_Capture_init 0070  
                                          _B 01A0                                            pc 0002  
                                         PL2 1560                                           PL4 157C  
                                         PL6 03C3                                           PL8 15A1  
                                         l69 0283                                           _RD 0CA8  
                                         _WR 0CA9                                 ___awdiv@sign 0035  
                         ??_PWM_Capture_init 0030                                           _pt 0052  
                        ___wmul@multiplicand 0032                             i1___wmul@product 0074  
                   _SIBFS_Pic_etat_monitor_b 00C7             BVH2_Appl_Layer@X_Sb4_Intergrator 0168  
                        __end_of_system_init 043C                                          PL10 15A6  
                                        PL20 15E2                                          PL12 15BA  
                                        PL30 0FA1                                          PL22 0F8B  
                                        PL14 15C8                                          PL40 1F09  
                                        PL32 1EC8                                          PL24 03CB  
                                        PL16 1EAF                                          PL50 15EB  
                                        PL42 1F18                                          PL34 1ED8  
                                        PL26 0F98                                          PL18 15D7  
                                        PL60 0FBE                                          PL52 15F7  
                                        PL44 1F27                                          PL36 1EE9  
                                        PL28 03D8                                          PL70 0FD1  
                                        PL62 067B                                          PL54 15FD  
                                        PL46 1F37                                          PL38 1EF9  
                                        PL80 1F63                                          PL72 1F5D  
                                        PL64 1F51                                          PL56 1604  
                                        PL48 1F47                                          PL90 1F70  
                                        PL82 161C                                          PL74 160B  
                                        PL66 0FC8                                          PL58 0FB4  
                                        PL92 0FEF                                          PL84 0FE2  
                                        PL76 0FDA                                          PL68 1F57  
                                        PL94 0589                                          PL86 0FE8  
                                        PL78 1614                                          PL96 1F76  
                                        PL88 1F69  BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00C2  
                                        PL98 0682                                  ?i1_ADC_Read 0070  
                                        l327 1B16                                          l600 1263  
                                        l345 1B45                                          l610 1271  
                                        l620 129A                                          l604 126C  
                                        l605 126A                                          l630 12A8  
                                        l614 1295                                          l534 0396  
                                        l615 1293                                          l640 12B6  
                                        l624 12A3                                          l536 039B  
                                        l625 12A1                                          l609 1273  
                                ?i1_ADC_Wait 0070                                          l650 12DF  
                                        l634 12B1                                          l635 12AF  
                                        l619 129C                                          l660 12ED  
                                        l644 12DA                                          l645 12D8  
                                        l629 12AA                                          l670 12FB  
                                        l654 12E8                                          l590 1255  
                                        l751 1719                                          l655 12E6  
                                        l639 12B8                                          l752 171D  
                                        l664 12F6                                          l584 1250  
                                        l665 12F4                                          l649 12E1  
                                        l585 124E                                          l594 125E  
                                        l659 12EF                                          l595 125C  
                                        l916 0313                                          l940 04B3  
                                        l669 12FD                                          l589 1257  
                                        l941 04B1                                          l950 04C3  
                                        l599 1265                                          l919 031C  
                                        l951 04C1                                          l945 04BB  
                                        l946 04B9                                          l895 1638  
                                        _GIE 005F                                          _EOL 1093  
                                        _RC5 0075                                          _PR2 001B  
                                        _sum 012B                             _ui16_IPhase_bldc 004E  
                               __CFG_BORV$LO 0000                                          wreg 0009  
                          _ui16_IPhase1_bldc 0137                           __ELINMIntTFrameMax 01D2  
                          _ui16_IPhase2_bldc 01D8                           __ELINMIntTFrameMin 0129  
                          _ui16_IPhase3_bldc 01D6                    BVH2_Appl_Layer@Cb24_Reset 0233  
                                       PL100 1F7D                                         PL110 1622  
                                       PL102 1F83                                         PL120 1F95  
                                       PL112 0FF6                                         PL104 06D7  
                                       PL130 1FA9                                         PL122 06E1  
                                       PL114 1F8F                                         PL106 0590  
                                       PL132 1FAE                                         PL124 1F9A  
                                       PL116 0FFC                                         PL108 1F89  
                                       PL134 1FB3                                         PL126 1F9F  
                                       PL118 06DD                                         PL128 1FA4  
                               __CFG_LVP$OFF 0000                                         ?_EOL 0070  
                        __ELINMIntTHeaderMax 01D0                          __ELINMIntTHeaderMin 0127  
                    __end_of_interrrupt_bldc 1D3B                                         l1011 16E8  
                                       l1012 16EC                                         l1013 16F0  
                                       l1014 16F4                                         l1015 16F9  
                                       l1016 16FD                                         l1017 1701  
                                       l1018 1705                                         _C1IE 0495  
                                       l2115 0F2F                                         l2071 0E49  
                       __end_of_EnableMCP201 04C8                                         l1601 092F  
                                       l2065 17B8                                         l1611 096A  
                                       l1605 0951                                         l1614 0977  
                                       l1366 0537                                         l1711 0BCB  
                                       l1623 0A08                                         l1609 0956  
                                       l1802 0DFC                                         l1730 0BEB  
                                       l1642 09E2                                         l1731 0BEE  
                                       l1716 0BA9                                         l1580 08FC  
                                       l1725 0BE2                                         l1653 0A4F  
                                       l1734 0C09                                         l1647 0B21  
                                       l1744 0C36                                         l1728 0C14  
                                       l1753 0C5C                                         l1729 0BF0  
                                       l1593 092A                                         l1577 08C5  
                                       l1850 0F08                                         l1594 0918  
                                       l1747 0C4A                                         l1852 0F0A  
                                       l1844 0EEF                                         l1940 0496  
                                       l1853 0F0C                                         l1845 0EFE  
                                       l1597 0923                                         l1917 0474  
                                       l1854 0F1D                                         l1846 0EF1  
                                       l1790 0D79                                         l1694 0B34  
                                       l1847 0EF3                                         l1759 0C65  
                                       l1688 0AF1                                         l1794 0D8B  
                                       l1973 17DA                                         l6400 06E5  
                                       l6320 0478                                         l6322 047A  
                                       l6324 047D                                         l6332 0485  
                                       l6326 047F                                         l6328 0482  
                                       l6702 052E                                         l6640 0443  
                                       l6652 0453                                         l6636 043F  
                                       l9062 01A7                                         l6670 04FE  
                                       l6646 044B                                         l9080 01C3  
                                       l9072 01B4                                         l9056 019E  
                                       l6658 045B                                         l6666 0463  
                                       l9084 01C7                                         l9500 1B2A  
                                       l9422 0E72                                         l6694 0522  
                                       l6686 0516                                         l6678 050A  
                                       l9088 01CF                                         l9432 1A6C  
                                       l9418 0E6C                                         l9530 1B4C  
                                       l9604 1B73                                         l9524 1B43  
                                       l9436 1A76                                         _ADON 04E8  
                                       l9622 1B76                                         l9518 1B3D  
                                       l9470 1AEF                                         l9462 1AE4  
                                       l9560 1B5D                                         l9536 1B53  
                                       l9472 1AF1                                         l9464 1AE8  
                                       l9722 16AB                                         l9554 1B56  
                                       l9474 1AF3                                         l9466 1AEA  
                                       l9732 16B4                                         l9652 1B88  
                                       l9628 1B7D                                         l9492 1B10  
                                       l9468 1AED                                         l9734 16C5  
                                       l9646 1B81                                         l9574 1B5F  
                                       l9486 1AF8                                         l9584 1B69  
                                       l9488 1B06                                         _CFGS 0CAE  
                                       l9738 16D2                                         l9666 1B8E  
                                       l9578 1B62                                         l9674 1B91  
                                       l9498 1B1C                                         l9764 028C  
                                       l9676 1BA5                                         l9598 1B6C  
                                       l9768 03A3                                         l9858 17C0  
                                       l9980 17FB                                         l9966 17E3  
                                       l9894 04CA                                         _LATA 010C  
                                       _LATB 010D                                         _LATC 010E  
                                       _PIE1 0091                                         _PIE2 0092  
                                       _PIE3 0093                                         _PEIE 005E  
                                       u3675 03EF                                         _RCIF 008D  
                                       u3685 06F1                                         u8035 1735  
                                       i1l69 1D55                                         u7325 1AD3  
                                       u7335 1ADF                                         u9151 0900  
                                       u9500 0A27                                         u6985 01BC  
                                       u9490 0A26                                         u7985 0F63  
                                       _TMR0 0015                                         _TMR2 001A  
                                       _TMR4 0415                                         _TMR6 041C  
                                       _WREN 0CAA                                         _Bcnt 00DC  
                           _ui8_Task_Cont1ms 00D5                             _ui8_Task_Cont3ms 0154  
                           _ui8_Task_Cont5ms 0153                             _ui16_PWM_Freq_In 0123  
                 BVH2_Appl_Layer@Cb24_BadCnt 01C2                                         _main 0073  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                            _ui8_b_DResLocID_c 0055  
                        timer_init@ui8_TmrNb 0031                             __end_of_ADC_Init 04A1  
                           __end_of_ADC_Read 0296                             __end_of_ADC_Wait 0281  
                                       start 002B                              _ui8_sampleState 00DE  
                           __end_of_BLDCWait 1FD9                       __size_of_PWM_Write_Out 0005  
                         _ui16_comm_time_max 012D                                        S13820 075D  
                                      S13818 070E              __end_of__ELINMIntReceiveMessage 0379  
                                      ??_EOL 0045                                  i1_commutate 1D77  
                              ?_InitMotorRun 0070                              __end_of_Task1ms 0776  
                        __ELINMIntGetPointer 0361                                __CFG_PLLEN$ON 0000  
                               cksum@counter 0032                                        l10102 0560  
                                      l10200 0EC7                                        l10210 0ED3  
                                      l10130 0E86                                        l10106 0563  
                                      l10052 022A                                        l10044 020C  
                                      l10036 01EE                                        l10214 0ED5  
                                      l10142 0E8F                                        l10054 022E  
                                      l10046 0210                                        l10038 01F2  
                                      l10160 0EA3                                        l10152 0EB1  
                                      l12000 0D2A                                        l10146 0E9E  
                                      l10330 0F74                                        l12002 0D32  
                                      l10228 0EE3                                        l10156 0EB4  
                                      l10252 0F0E                                        l10308 0F3E  
                                      l12004 0D37                                        l10270 0E20  
                                      l10174 0EA9                                        l10158 0EB6  
                                      l10254 0F17                                        l10246 0EF5  
                                      l10334 0F82                                        l10326 0F6E  
                                      l10318 0F51                                        l12030 0DF6  
                                      l12014 0D88                                        l10272 0E24  
                                      l12032 0E0B                                        l10360 1740  
                                      l10290 0E53                                        l12026 0DDA  
                                      l12018 0D8F                                        l11330 0892  
                                      l13010 113E                                        l12028 0DE6  
                                      l11500 0981                                        l11420 0901  
                                      l11340 08AB                                        l10356 173C  
                                      l10348 172D                                        l11510 098E  
                                      l11520 09A2                                        l11512 0995  
                                      l11432 0905                                        l11416 08EE  
                                      l11336 089F                                        l13120 1237  
                                      l13032 1179                                        l13008 1137  
                                      l11602 0A1D                                        l11530 09B2  
                                      l11442 0915                                        l11346 08B3  
                                      l11338 08A3                                        l10650 038A  
                                      l10642 037E                                        l11612 0A34  
                                      l11508 098B                                        l11364 08BA  
                                      l11348 08B6                                        l12404 177F  
                                      l13124 123C                                        l13116 122D  
                                      l13028 116F                                        l11702 0AD2  
                                      l11614 0A36                                        l11526 09AB  
                                      l11518 099D                                        l11390 08D0  
                                      l13222 131D                                        l10662 03A0  
                                      l10654 0390                                        l10646 0384  
                                      l11712 0ADA                                        l11640 0A5D  
                                      l11632 0A51                                        l11536 09C0  
                                      l11528 09AF                                        l11392 08E5  
                                      l13312 143D                                        l11730 0AF7  
                                      l11570 09DA                                        l11538 09C3  
                                      l11466 093C                                        l11378 08C1  
                                      l12362 17A9                                        l12354 1793  
                                      l13314 1440                                        l13242 1367  
                                      l13090 11E2                                        l11820 0BB6  
                                      l11812 0BAD                                        l11652 0A6A  
                                      l11636 0A57                                        l11628 0A39  
                                      l11548 09CF                                        l11476 094F  
                                      l11830 0BD0                                        l11726 0AEF  
                                      l11398 08EB                                        l12366 17AE  
                                      l13414 14B9                                        l13334 145B  
                                      l13262 13AD                                        l13086 11D8  
                                      l13510 1558                                        l11912 0C52  
                                      l11904 0C48                                        l11824 0BC4  
                                      l11680 0A9E                                        l11664 0A82  
                                      l11656 0A77                                        l13504 1556  
                                      l13336 145E                                        l11834 0BD2  
                                      l11674 0A91                                        l11746 0B0A  
                                      l13282 13F8                                        l13098 11EE  
                                      l13610 013A                                        l11932 0C6D  
                                      l11684 0AAD                                        l11588 09EF  
                                      l13460 14D9                                        l13380 149A  
                                      l13356 1479                                        l13292 1422  
                                      l13284 13FB                                        l13612 013C  
                                      l11862 0C02                                        l11790 0B73  
                                      l11782 0B5D                                        l12398 1776  
                                      l13438 14C9                                        l13390 14A4  
                                      l13358 147C                                        l13286 140A  
                                      l13630 016D                                        l13550 007A  
                                      l11928 0C6A                                        l11776 0B4F  
                                      l11768 0B42                                        l13464 14E4  
                                      l13288 140C                                        l13640 017E  
                                      l11962 0C9C                                        l11882 0C21  
                                      l11786 0B68                                        l11698 0AC5  
                                      l13458 14D1                                        l13386 149C  
                                      l13378 1497                                        l11980 0CBB  
                                      l11972 0CAA                                        l11948 0C85  
                                      l11892 0C34                                        l13492 153A  
                                      l13652 018D                                        l13564 009A  
                                      l11990 0CCB                                        l11878 0C1A  
                                      l11984 0CC1                                        l13496 1544  
                                      l13816 1AFE                                        l13592 00E0  
                                      l11898 0C41                                        l12970 10CB  
                                      l12962 10BB                                        l13594 0111  
                                      l11988 0CC9                                        l12982 10EE  
                                      l12974 10D0                                        l12992 1115  
                                      l12994 111E                                        l12988 1111  
                                      _C1OUT 088E                              __end_of___aldiv 0F8B  
                                      ?_main 0070                              __end_of___awdiv 01D4  
                                      _EEPGD 0CAF                                        u10305 0D6F  
                                      u10275 0D01                              ___awdiv@divisor 0030  
                                      u10285 0D1A                                        u10295 0D25  
                                      u11335 11D2                                        _T1CON 0018  
                                      u11365 1215                                        u10575 17A0  
                                      u11375 1227                                        _T2CON 001C  
                                      _LATB1 0869                                        _LATB2 086A  
                                      _LATC0 0870                                        _LATC1 0871  
                                      _LATC2 0872                                        _LATC3 0873  
                              _InitMotorStop 0296                                        _LATC4 0874  
                                      _T4CON 0417                              __end_of___ltdiv 17B5  
                                      _T6CON 041E                              __end_of___lwdiv 1745  
                                      i1l316 1D29                                        i1l327 1E1F  
                                      i1l263 1BCD                                        i1l345 1E4E  
                                      i1l267 1CDD                                        i1l284 1C43  
                                      i1l970 05ED                                        i1l980 05EA  
                                      i1l964 05B2                                        i1l991 0658  
                                      i1l967 05B0                                        i1l978 05E3  
                            ___awdiv@counter 0034                                        _RCREG 0199  
                           ?_ELINMIntHandler 0070                                        _SENDB 0CF3  
                                      _RCSTA 019D                                        _TMR1H 0017  
                                      _TMR1L 0016                                        _SPBRG 019B  
                          _ui8_BlankingCount 00E2                            EnableMCP201@_dcnt 0030  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E                                        _TXREG 019A  
                                      _TXSTA 019E                          ___lmul@multiplicand 0034  
                          _ui16_PWM_Freq_mat 0125                       ?__ELINMIntCalcIDParity 0070  
                                      _cksum 17D2                         ?__ELINMIntGetPointer 0030  
   BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00BF                             __end_of_PWM_CTRL 075D  
               ?_Cb56_UbatHandling_node_fcn2 0070                               __pbitbssCOMMON 03C8  
                           __end_ofi1___wmul 1D77            BVH2_Appl_Layer@Cb24_oMotorStalled 013E  
                                      status 0003                             __end_of_DiagInit 04AD  
                        i1___wmul@multiplier 0070                                        wtemp0 007E  
                         __size_of_PWMReadDC 003E               ??_Cb34_PWM_Detection_node_fcn1 0030  
                               __end_ofPL100 1F83                                 __end_ofPL110 1627  
                               __end_ofPL102 1F89                                 __end_ofPL120 1F9A  
                               __end_ofPL112 0FFC                                 __end_ofPL104 06DD  
                               __end_ofPL130 1FAE                                 __end_ofPL122 06E5  
                               __end_ofPL114 1F95                                 __end_ofPL106 0596  
                               __end_ofPL132 1FB3                                 __end_ofPL124 1F9F  
                               __end_ofPL116 1000                                 __end_ofPL108 1F8F  
                               __end_ofPL134 1FB8                                 __end_ofPL126 1FA4  
                               __end_ofPL118 06E1                                 __end_ofPL128 1FA9  
                         __size_ofi1___lwdiv 0025                          __size_ofi1_ADC_Read 000E  
                        __size_ofi1_ADC_Wait 0019                               __CFG_MCLRE$OFF 0000  
                         _ui8_b_DResServID_c 0161                              __initialization 002D  
                           _ui8_selected_lid 0059                  BVH2_Appl_Layer@Cb51_Counter 0141  
                BVH2_Appl_Layer@Cb19_Counter 00A4                               _NegativeAnswer 1627  
                                _system_init 0402                           _ui8_duty_cycle_mat 0159  
                               __end_of_main 0194                               ??_InitMotorRun 0042  
                            _PWM_trans_table 1800                          __ELINMIntInitialize 0538  
                       __size_of_clear_timer 0022                               ?_InitMotorStop 0070  
                                     ??_main 0048                         __size_of_FILTER_Init 0018  
                       __size_of_FILTER_Ubat 006B                         __size_of_FILTER_Temp 0029  
                          ?_read_eeprom_data 0070                         _BVH2_Appl_Layer$1210 022C  
                       _BVH2_Appl_Layer$1211 022D                         _BVH2_Appl_Layer$1212 022E  
                       _BVH2_Appl_Layer$1207 0229                         _BVH2_Appl_Layer$1215 0224  
                       _BVH2_Appl_Layer$1208 022A                         _BVH2_Appl_Layer$1209 022B  
                       _BVH2_Appl_Layer$1217 0226                         _BVH2_Appl_Layer$1218 0220  
                              ?_Receive_Diag 0070                         _interrupt_PWMCapture 0688  
                          ?_Get_Analog_Value 0070                 __end_of__ELINMIntSendMessage 16E1  
                _ui16_NTC_Temp_bldc_mean_cal 01DE                           ??_read_eeprom_data 0030  
                              _PWM_Write_Out 155B                                       _ADCON0 009D  
                         ??_Get_Analog_Value 003C                                       _ADCON1 009E  
                                     ?_cksum 0030                        ??__ELINMIntGetPointer 0031  
                       ?__ELINMIntInitialize 0070                                       _CCP1AS 0295  
                                     _CCP1IE 048A                                       _CCP1IF 008A  
                                     _CCP2IE 0490                                       _CCP2IF 0090  
                                     _CCP3IE 049C                                       _CCP3IF 009C  
                                     _CCP4IE 049D                                       _CCP4IF 009D  
                                     _CCP5IE 049E                                       _CCP5IF 009E  
                                     _ADRESH 009C                                       _EEADRH 0192  
                                     _ADRESL 009B                                       _EEADRL 0191  
                                     _EEDATA 0193                                       _CCPR1H 0292  
                                     _CCPR2H 0299                                       _EEDATH 0194  
                                     _CCPR3H 0312                                       _CCPR1L 0291  
                                     _CCPR4H 0319                                       _CCPR2L 0298  
                                     _EEDATL 0193                                       _CCPR3L 0311  
                                     _CCPR5H 031D                                       _CCPR4L 0318  
                                     _CCPR5L 031C                                       _EECON1 0195  
                                     _EECON2 0196                             ___awdiv@dividend 0032  
                                  ADC_Read@i 0032                                       _ANSELA 018C  
                                     _ANSELB 018D                             ?_interrrupt_bldc 0070  
                              ?_SetDiagAlarm 0070                                       i1l1006 0669  
                                     i1l1385 0689                                       i1l1388 069C  
                                     i1l8210 0691                                       i1l8124 05C8  
                                     i1l8116 05BD                                       i1l8150 05F6  
                                     i1l8222 06CA                                       i1l8128 05D0  
                                     i1l8162 060B                                       i1l8138 05E0  
                                     i1l8090 0754                                       i1l8218 06C8  
                                     i1l8148 05F4                              _ui8_PWM_FreqCnt 00CB  
                                     i1l8182 0632                                       i1l8166 0614  
                                     i1l8192 0645                                       i1l8184 0634  
                                     i1l8168 0617                                       i1l8178 0628  
                                     i1l8196 064F                                       i1l8188 063C  
                                     i1l8198 0651                                       _INTCON 000B  
                                     _FVRCON 0117                           _ui8_Task_Cont100ms 00CC  
          __ELINMIntReceiveMessage@_ELINM_id 003B                                       _OSCCON 0099  
              ??_Cb56_UbatHandling_node_fcn2 0030                                       _TMR0IE 005D  
                                     _TMR1IE 0488                                       _TMR1IF 0088  
                                     _TMR2IE 0489                                       _TMR2IF 0089  
                                     _TMR4IE 0499                                       _TMR4IF 0099  
                                     _SPBRGH 019C                                       _TMR6IE 049B  
                                     _TMR6IF 009B                                       _WDTCON 0097  
       BVH2_Appl_Layer@Sb1_Logical_Operator1 023B         BVH2_Appl_Layer@Sb1_Logical_Operator2 0228  
       BVH2_Appl_Layer@Sb1_Logical_Operator3 0234         BVH2_Appl_Layer@Sb1_Logical_Operator5 0235  
                     __end_of_NegativeAnswer 1637                                    ??_Task1ms 0070  
                                 _MotorFlags 007A   BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C  
                     __ELINMIntMessageBuffer 0250                                       ___lmul 0E45  
                                  ??___aldiv 0038                                       ___tmul 17B5  
                                     ___wmul 0E6A                                    ??___awdiv 0034  
                  BVH2_Appl_Layer@Sb4_PI_sum 023E                                    ??___ltdiv 003F  
                                  ??___lwdiv 0034                              _ui8_PWMinDC_sav 00CA  
                           ___awdiv@quotient 0036                                       _my_msg 01B0  
                          _write_eeprom_data 1707            BVH2_Appl_Layer@Cb24_oStalledAlarm 013D  
                          __end_of_PWMReadDC 1783                               ??_Receive_Diag 003E  
                          __end_ofi1___lwdiv 1FFE                           EOL@ui8_b_DResB0_RD 0234  
                         EOL@ui8_b_DResB1_RD 0235                           EOL@ui8_b_DResB2_RD 0236  
                         EOL@ui8_b_DResB3_RD 0237                        ?_interrupt_PWMCapture 0070  
                         EOL@ui8_b_DResB4_RD 0233                           EOL@ui8_b_DResB5_RD 0232  
                         ?_write_eeprom_data 0037                        __size_of_EnableMCP201 001B  
                                  ?_ADC_Init 0070                                    ?_ADC_Read 0030  
                                  ?_ADC_Wait 0070                               ?_PWM_Write_Out 0070  
                                  ?_BLDCWait 0070                     __size_of_BVH2_Appl_Layer 0583  
                      ??__ELINMIntInitialize 0030                               ??_SetDiagAlarm 0031  
                        ??_write_eeprom_data 0038             __size_of__ELINMIntReceiveMessage 0015  
           BVH2_Appl_Layer@Cb9_oCurrentAlarm 0139                      __end_of__initialization 0070  
                      __end_of_FILTER_IPhase 0402                      __end_of_PWM_trans_table 1865  
                   ??__ELINMIntResetProtocol 0070                              ?_NegativeAnswer 0070  
                        _ui8_duty_cycle_BLDC 0056                               __pcstackCOMMON 0070  
                            _ui8_PWMoutvalue 0151                                 __pidataBANK0 0000  
                               __pidataBANK1 0000                                 __pidataBANK2 0000  
                         _ui16_dryRun_Thresh 01EE                                __end_of_cksum 1800  
                               _EnableMCP201 04AD                              ??_InitMotorStop 0030  
       __size_of_Cb56_UbatHandling_node_fcn2 0035       __ELINMIntGetPointer@_ELINMInt_position 0030  
                  __end_of_write_eeprom_data 1720              __ELINMIntSendMessage@_ELINM_chk 0039  
            __ELINMIntSendMessage@_ELINM_idr 0036                                   __end_ofPL2 157C  
                                 __end_ofPL4 15A1                                   __end_ofPL6 03CB  
                                 __end_ofPL8 15A6              __ELINMIntSendMessage@_ELINM_tid 0037  
                                  ?_PWM_CTRL 0070                                 ??i1_ADC_Read 0072  
                                  ?i1___wmul 0070                                 ??i1_ADC_Wait 0070  
                                  ?_DiagInit 0070                        Transmit_LIN_8Bytes@B0 003B  
                      Transmit_LIN_8Bytes@B1 003C                        Transmit_LIN_8Bytes@B2 003D  
                      Transmit_LIN_8Bytes@B3 003E                        Transmit_LIN_8Bytes@B4 003F  
                      Transmit_LIN_8Bytes@B5 0040                        Transmit_LIN_8Bytes@B6 0041  
                      Transmit_LIN_8Bytes@B7 0042                        Transmit_LIN_8Bytes@ID 0043  
                          _Cb1_oCurrentAlarm 014C                                   ??_ADC_Init 0030  
                                 ??_ADC_Read 0032                                   ??_ADC_Wait 0030  
                      _ui16_Speed_demand_mat 01CA                                   ??_BLDCWait 0070  
                __end_of_Oscill_Source_Block 04E6                    __size_of_PWM_Capture_init 0052  
                       __ELINMIntMessageSize 00D3                           _ui16_Duty_Cycle_In 01EA  
                                    ??_cksum 0032             write_eeprom_data@ui8_adress_data 0037  
                               _analog_value 00BC                  __end_of_Transmit_LIN_8Bytes 167A  
                       __end_of_InitMotorRun 03C3                           __size_of_commutate 013A  
                                 __pbssBANK0 004C                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01A0  
                                 __pbssBANK4 0240                      _ui8_Duty_Cycle_In_Ratio 014F  
                         __size_of_init_bldc 0022                         _bool_ControlLoopMode 00CD  
                         __end_ofi1_ADC_Read 1D62                           __end_ofi1_ADC_Wait 1D54  
                                 __pmaintext 0073                         __ELINMIntSendMessage 167A  
                                    ?___lmul 0030                              _Cb34_oPWM_Alarm 014A  
                                    ?___tmul 0030                                      ?___wmul 0030  
                               ?i1_commutate 0070                                   __pintentry 0004  
                                    _CM1CON0 0111                                      _CM1CON1 0112  
                                    _CCP1ASE 14AF                                      _CCP1CON 0293  
                                    _CCP2CON 029A                                      _CCP3CON 0313  
                                    _CCP4CON 031A      __end_of_Cb1_Current_An___High_node_fcn1 0E30  
   __size_of_Cb1_Current_An___High_node_fcn1 001C            ??_Cb1_Current_An___High_node_fcn1 0030  
           ?_Cb1_Current_An___High_node_fcn1 0070              _Cb1_Current_An___High_node_fcn1 0E14  
                                    i1S13822 0722                                      _CCP5CON 031E  
                                    i1S13826 0736                        _bool_CPU_TempRedAlarm 0157  
                                    _BAUDCON 019F                               ___lmul@product 0038  
                                 ??_PWM_CTRL 0070                                   ??i1___wmul 0074  
                     ??_interrupt_PWMCapture 0070                                   _ui8_Ki_mat 01CC  
                                    u1067_25 1DDC                                      u1068_25 1DE8  
                                    u1086_25 1FEE                                      u1095_25 1C1D  
                            ??_PWM_Write_Out 0030                                      u1088_25 1BB2  
                                 _ui8_Kp_mat 015A                                      i1l12520 1E55  
                                    i1l12418 1D5D                                      i1l12514 1E4C  
                                    i1l12426 1D82                                      i1l12372 1D64  
                                    i1l12612 1E7F                                      i1l12508 1E46  
                                    i1l12460 1DF8                                      i1l12452 1DED  
                                    i1l12702 1FF5                                      i1l12550 1E66  
                                    i1l12526 1E5C                                      i1l12462 1DFA  
                                    i1l12454 1DF1                                      i1l12376 1D6A  
                                    i1l12544 1E5F                                      i1l12464 1DFC  
                                    i1l12456 1DF3                                      i1l12706 1FF9  
                                    i1l12642 1E91                                      i1l12618 1E86  
                                    i1l12490 1E33                                      i1l12482 1E19  
                                    i1l12458 1DF6                                      i1l12802 1C28  
                                    i1l12730 1BD1                                      i1l13522 0012  
                                    i1l12636 1E8A                                      i1l12564 1E68  
                                    i1l12476 1E01                                      i1l12820 1C31  
                                    i1l12740 1BE5                                      i1l12716 1BB6  
                                    i1l13540 0026                                      i1l12574 1E72  
                                    i1l12478 1E0F                                      i1l12742 1BE8  
                                    i1l13534 0020                                      i1l12656 1E97  
                                    i1l12568 1E6B                                      i1l12664 1E9A  
                                    i1l12488 1E25                                      i1l13528 0019  
                                    i1l12594 1E7C                                      i1l12666 1EAE  
                                    i1l12930 1D18                                      i1l12922 1CFB  
                                    i1l12834 1C3E                                      i1l12906 1CD0  
                                    i1l12588 1E75                                      i1l12932 1D1A  
                                    i1l12860 1C52                                      i1l12694 1FE6  
                                    i1l12950 1D34                                      i1l12926 1D0F  
                                    i1l12934 1D1E                                      i1l12870 1C84  
                                    i1l12854 1C48                                      i1l12782 1C02  
                                    i1l13824 1E07                                      i1l12952 1D39  
                                    i1l12936 1D20                                      i1l12872 1C88  
                                    i1l12864 1C69                                      i1l12880 1CA2  
                                    i1l12890 1CC2                                      i1l12866 1C6D  
                                    i1l12882 1CAE                                      i1l12794 1C1F  
                                    i1l12876 1C9F                                      i1l12884 1CB6  
                                    i1l12878 1CA1                                   ??_DiagInit 0031  
                    ??__ELINMIntCalcIDParity 0030                                      _PWM1CON 0294  
                                 _comm_state 00E3                  BVH2_Appl_Layer@Cb9_StateCnt 00C3  
                          ??_BVH2_Appl_Layer 003E                    _ui16_Speed_demand_mat_Max 01C8  
                  _ui16_Speed_demand_mat_min 01C6              __size_of__ELINMIntResetProtocol 000F  
                                    _Task1ms 0773                         __end_of_Receive_Diag 0361  
                      ?__ELINMIntSendMessage 0031                                 ?_system_init 0070  
                                    ___aldiv 0F1F                      BVH2_Appl_Layer@Sb3_Sum1 023C  
                                    ___awdiv 0194                              __size_of___lmul 0025  
                            __size_of___tmul 001D                              __size_of___wmul 0015  
                                    ___ltdiv 1783                                      ___lwdiv 1720  
                       __end_of_SetDiagAlarm 03A3                            __end_of_commutate 1BA6  
                 __size_of_write_eeprom_data 0019                                 _ui8_CompFlag 00DD  
                                 _init_ports 0550                                      __ptext1 0402  
                                    __ptext2 043C                                      __ptext3 0475  
                                    __ptext4 0550                                      __ptext5 0567  
                                    __ptext6 03A3                                      __ptext7 1A6C  
                                    __ptext8 0538                                      __ptext9 04E6  
                        _phase_delay_counter 01DA                                      _filter1 01E4  
                                    _filter3 01E2                                 __size_of_EOL 04C8  
                          i1___lwdiv@divisor 0070                            __end_of_init_bldc 0589  
                          i1___lwdiv@counter 0074                                _ui16_Temp_cal 01E6  
                           ___aldiv@dividend 0034                   BVH2_Appl_Layer@Sb2_Switch2 0239  
                 BVH2_Appl_Layer@Sb2_Switch5 0231                               __ELINMIntRXCRC 01D4  
                                    clrloop0 076E                      __ELINMIntReceiveMessage 0364  
                                    _wkpoint 00EE                         end_of_initialization 0070  
                             __ELINMIntSpace 015B                     __size_of_ELINMIntHandler 00D6  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00C0         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0  
                     __ELINMIntRXMessageSize 015C                         _ui16_fir_IPhase_mean 0133  
                  __size_of_read_eeprom_data 000B                    __size_of_Get_Analog_Value 0005  
                           ___ltdiv@dividend 003C                             __CFG_CLKOUTEN$ON 0000  
                              ??_clear_timer 0030                             ___aldiv@quotient 003A  
            read_eeprom_data@ui8_adress_data 0031                        i1___wmul@multiplicand 0072  
                              ??_FILTER_Init 0033                                ??_FILTER_Ubat 0030  
                              ??_FILTER_Temp 0030                         _Cb56_odFixedValueSel 00C4  
                                 _timer_init 043C               PWM_Write_Out@ui8_DutyCycle_Out 0030  
                      _ui16_IPhase1_bldc_cal 0166                        EnableMCP201@_dcnt_712 0031  
                      EnableMCP201@_dcnt_713 0032                  __end_of__ELINMIntGetPointer 0364  
                     __ELINMIntResetProtocol 066C                        _ui16_IPhase2_bldc_cal 0164  
                           __CFG_FOSC$INTOSC 0000                        __size_of_InitMotorRun 0020  
                        _ui16_Current_Thresh 01EC                            NegativeAnswer@LID 0044  
                           _PWM_Capture_init 04E6                             ___ltdiv@quotient 003F  
                                  _PWMReadDC 1745                        _ui16_IPhase3_bldc_cal 0162  
                          __size_of_ADC_Init 000A                            __size_of_ADC_Read 0015  
                              _ui16_step_cnt 00BA                                    i1___lwdiv 1FD9  
                          __size_of_ADC_Wait 0019                            __size_of_BLDCWait 0021  
                                 _windowPtr1 00E7                             _ui8_BattVolt_mat 00B2  
                           ??_NegativeAnswer 0044         BVH2_Appl_Layer@Sb2_Logical_Operator2 0236  
                     ??__ELINMIntSendMessage 0036                     __size_of_interrrupt_bldc 0195  
                          __ELINMIntReadBack 00D2                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 03A3                               __end_of___lmul 0E6A  
                     _ui16_phase_advancement 00B8                               __end_of___tmul 17D2  
                             __end_of___wmul 0E7F                                  ?_init_ports 0070  
                       __size_ofi1_commutate 0138                          __end_of_clear_timer 0497  
                __end_of__ELINMIntInitialize 0550                            __size_of_PWM_CTRL 0013  
                                i1ADC_Read@i 0072                                  __end_ofPL10 15BA  
                                __end_ofPL20 15EB                                  __end_ofPL12 15C8  
                                __end_ofPL30 0FB4                                  __end_ofPL22 0F98  
                                __end_ofPL14 15D7                                  __end_ofPL40 1F18  
                                __end_ofPL32 1ED8                                  __end_ofPL24 03D8  
                                __end_ofPL16 1EC8                                  __end_ofPL50 15F7  
                                __end_ofPL42 1F27                                  __end_ofPL34 1EE9  
                                __end_ofPL26 0FA1                                  __end_ofPL18 15E2  
                                __end_ofPL60 0FC8                                  __end_ofPL52 15FD  
                                __end_ofPL44 1F37                                  __end_ofPL36 1EF9  
                                __end_ofPL28 03DF                                  __end_ofPL70 0FDA  
                                __end_ofPL62 0682                                  __end_ofPL54 1604  
                                __end_ofPL46 1F47                                  __end_ofPL38 1F09  
                                __end_ofPL80 1F69                                  __end_ofPL72 1F63  
                                __end_ofPL64 1F57                                  __end_ofPL56 160B  
                                __end_ofPL48 1F51                                  __end_ofPL90 1F76  
                                __end_ofPL82 1622                                  __end_ofPL74 1614  
                                __end_ofPL66 0FD1                                  __end_ofPL58 0FBE  
                                __end_ofPL92 0FF6                                  __end_ofPL84 0FE8  
                                __end_ofPL76 0FE2                                  __end_ofPL68 1F5D  
                                __end_ofPL94 0590                                  __end_ofPL86 0FEF  
                                __end_ofPL78 161C                                  __end_ofPL96 1F7D  
                                __end_ofPL88 1F70                                  __end_ofPL98 0688  
           __ELINMIntSendMessage@_ELINM_fmax 0034             __ELINMIntSendMessage@_ELINM_fmin 0032  
                        start_initialization 002D                            __size_ofi1___wmul 0015  
                  ??__ELINMIntReceiveMessage 003D             __ELINMIntSendMessage@_ELINM_size 0031  
                                __end_of_EOL 155B                          __end_of_FILTER_Init 04E0  
                        __end_of_FILTER_Ubat 0312                          __end_of_FILTER_Temp 070E  
                          __size_of_DiagInit 000C                                   ?_PWMReadDC 0070  
                                  _ErrorCode 00D0                                   ?i1___lwdiv 0070  
        __end_of_Cb56_UbatHandling_node_fcn2 0F1F                  _Cb56_UbatHandling_node_fcn2 0EEA  
                             _ui8_IPhase_sel 00E1                                 _Cb1_StateCnt 00A8  
                      __size_of_Receive_Diag 004F                               Receive_Diag@id 003F  
                          ??_ELINMIntHandler 0071                        __size_of_SetDiagAlarm 002A  
                    _ui16_NTC_Temp_bldc_mean 0131                               _ui8_PWM_dc_mat 00CF  
                                   ??___lmul 0038                                     ??___tmul 0036  
                                   ??___wmul 0034                                  __pdataBANK0 0059  
                                __pdataBANK1 00E8                                  __pdataBANK2 0168  
                 read_eeprom_data@ui8_adress 0030                         __size_of_system_init 003A  
                               _Cb1_oShutoff 014B                                  ?_timer_init 0070  
                             ___tmul@product 0036                        __end_of_InitMotorStop 02A2  
                                   EOL@_dcnt 0220                       __size_of_FILTER_IPhase 0023  
                            _ui8_Pulse_State 0150                                  __pbssCOMMON 007A  
                                  ___latbits 0002                              _BVH2_Appl_Layer 0891  
                               _Receive_Diag 0312                                __pcstackBANK0 0020  
                              __pcstackBANK4 0220               __size_of__ELINMIntCalcIDParity 0026  
              __end_of__ELINMIntCalcIDParity 1707                            _bool_MotorStalled 00D9  
                               _SetDiagAlarm 0379                 __size_of_Oscill_Source_Block 0006  
                        __size_of_init_ports 0017                             _read_eeprom_data 025D  
                                  __pnvBANK1 00EF                                    __pnvBANK3 01EC  
             BVH2_Appl_Layer@Cb51_oTempAlarm 013C                             _Get_Analog_Value 02A2  
               __size_of_Transmit_LIN_8Bytes 0043                                     ?_Task1ms 0070  
                           ___lwdiv@dividend 0032                                  _clear_timer 0475  
                                   ?___aldiv 0030                __ELINMIntSendMessage@_ELINM_i 0038  
                                   ?___awdiv 0030                                     ?___ltdiv 0039  
                                   ?___lwdiv 0030                        _bool_HighCurrentAlarm 00D8  
                       clear_timer@ui8_TmrNb 0030                            ??_interrrupt_bldc 0077  
              _SIBFS_Current_Analysis_High_b 00C9                               _ui8_UPhase_sel 00E0  
                             _bool_UbatAlarm 0156                                  _FILTER_Init 04C8  
                                _FILTER_Ubat 02A7                                  _FILTER_Temp 06E5  
                                  _comm_time 0050                                    __pswtext1 070E  
                                  __pswtext2 075D                                    __pswtext3 0722  
                                  __pswtext4 0736                           _Cb34_oPWM_SC_Alarm 0149  
                          _interrupt_handler 0004                                    _ict_stamp 016F  
                            _ui16_Ubemf_bldc 00B6                                    _commutate 1A6C  
                      _SIBFS_PWM_Detection_b 00C8                  __ELINMIntResetProtocol@code 0070  
                                   _ADC_Init 0497                                     _ADC_Read 0281  
              __size_of_interrupt_PWMCapture 004F                         _bool_DryRunningAlarm 00DA  
                                   _ADC_Wait 0268                           ?_interrupt_handler 0070  
                      __end_of_PWM_Write_Out 1560                                     _BLDCWait 1FB8  
                                ??_PWMReadDC 0043                             __CFG_WDTE$SWDTEN 0000  
                          _I_calibrationInit 01D4                             ___lwdiv@quotient 0035  
                                ??i1___lwdiv 0074                                    _init_bldc 0567  
                             __size_of_cksum 002E      BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 00C1  
                         ?_I_calibrationInit 0070                          ??_interrupt_handler 0079  
                      _Cb56_oUbat_Alarm_High 0144                              ___aldiv@divisor 0030  
                            ___aldiv@counter 0038                               ___wmul@product 0034  
                        __size_of_timer_init 0039                                    clear_ram0 076D  
                              _FILTER_IPhase 03DF            __ELINMIntGetPointer@_ELINMInt_tag 0031  
                        ??_I_calibrationInit 0033                              ___ltdiv@divisor 0039  
                             _Cb34_odPumpOff 0146                              ___ltdiv@counter 0042  
                                   _GO_nDONE 04E9                     __end_of_PWM_Capture_init 0538  
                                _ui8_failure 016E                                     _PSTR1CON 0296  
                    ?__ELINMIntResetProtocol 0070                    __end_of_interrupt_handler 002B  
                    __end_of_BVH2_Appl_Layer 0E14                                     _PWM_CTRL 074A  
                             _ui8_b_DResB0_c 0054                               _ui8_b_DResB1_c 0160  
                             _ui8_b_DResB2_c 015F                               _ui8_b_DResB3_c 015E  
                             _ui8_b_DResB4_c 015D                            ___wmul@multiplier 0030  
                                   i1___wmul 1D62                                   ?_commutate 0070  
                                  cksum@addr 0036                      interrrupt_bldc@ui32_tmp 002C  
                                   _DiagInit 04A1                    __end_of_I_calibrationInit 025D  
                        ___tmul@multiplicand 0033                          _ui16_fir_Bat_mittel 0135  
                  _ui8_fixed_start_speed_mat 01DC                        __ELINMIntSleepTimeout 01BE  
                                 ?_init_bldc 0070                            ___lmul@multiplier 0030  
                             _ui16_Capt_Val0 00AE                               _ui16_Capt_Val1 00AC  
                             _ui16_Capt_Val2 00AA                               _ui16_I_cal_Ph1 00EC  
                             _ui16_I_cal_Ph2 00EA                               _ui16_I_cal_Ph3 00E8  
                           __ELINMIntStatus1 00D4                               ?_FILTER_IPhase 0070  
                         _bool_CPU_TempAlarm 00DB                             _ui16_mat_Current 00B0  
                           __size_of_Task1ms 0003                         _SIBFS_UbatHandling_b 00C6  
                    _Cb34_odFixedLowValueSel 0148               __end_of__ELINMIntResetProtocol 067B  
                              ?_EnableMCP201 0070                     BVH2_Appl_Layer@Sb2_Error 0237  
                           __size_of___aldiv 006C                             __size_of___awdiv 0040  
              BVH2_Appl_Layer@Cb19_oDryRun55 0140                BVH2_Appl_Layer@Cb19_oDryRun66 013F  
                           __size_of___ltdiv 0032                             __size_of___lwdiv 0025  
                               ??_init_ports 0032                            _ui8_lastTaskvalue 0152  
                           _ui16_mat_inpTemp 01CE                               _ui8_StartupPWM 00E4  
                       _bool_PWMin_err_Alarm 0158                __ELINMIntMessageBufferPointer 00D1  
                                   _checksum 01B8                           _Cb1_RestartCounter 014D  
           BVH2_Appl_Layer@Cb14_oDryRunAlarm 00BE                           _ui16_NTC_Temp_bldc 01E8  
                            ___lwdiv@divisor 0030                               _Cb56_odPumpOff 0143  
                            ___lwdiv@counter 0034                                     __ptext10 04E0  
                                   __ptext11 01D4                                     __ptext20 02A2  
                                   __ptext12 04C8                                     __ptext21 02A7  
                                   __ptext13 04AD                                     __ptext30 1745  
                                   __ptext22 06E5                                     __ptext14 04A1  
                                   __ptext31 17B5                                     __ptext23 03DF  
                                   __ptext15 0497                                     __ptext40 0281  
                                   __ptext32 1783                                     __ptext24 1093  
                                   __ptext16 0194                                     __ptext41 0891  
                                   __ptext33 1627                                     __ptext25 1707  
                                   __ptext17 0379                                     __ptext50 0688  
                                   __ptext42 0E6A                                     __ptext34 1637  
                                   __ptext26 025D                                     __ptext18 0312  
                                   __ptext51 1BA6                                     __ptext43 0E45  
                                   __ptext35 167A                                     __ptext27 17D2  
                                   __ptext19 0364                                     __ptext60 0596  
                                   __ptext52 1D77                                     __ptext44 0F1F  
                                   __ptext36 16E1                                     __ptext28 1720  
                                   __ptext61 066C                                     __ptext53 1D62  
                                   __ptext45 0EEA                                     __ptext37 0361  
                                   __ptext29 155B                                     __ptext54 1FD9  
                                   __ptext46 0E30                                     __ptext38 0296  
                                   __ptext55 1D3B                                     __ptext47 0E7F  
                                   __ptext39 0268                                     __ptext56 1D54  
                                   __ptext48 0E14                                     __ptext57 1FB8  
                                   __ptext58 0773                                     __ptext59 074A  
                            _ELINMIntHandler 0596                 __size_of__ELINMIntGetPointer 0003  
                             _ui16_Ubat_bldc 0057                      _bool_mat_currAlarm_bldc 00CE  
               BVH2_Appl_Layer@Cb14_StateCnt 01C4                                _Cb44_StateCnt 00A6  
                         i1___lwdiv@dividend 0072                BVH2_Appl_Layer@Cb51_odPumpOff 013A  
                              __size_of_main 0121                                   _Cb34_idPWM 00C5  
                                   _phaseCal 00D7                           __end_of_init_ports 0567  
                                _inputArray1 0240                               _ui16_Speed_mat 004C  
               BVH2_Appl_Layer@Cb24_StateCnt 00A2                  BVH2_Appl_Layer@Sb3_Product1 022F  
              __size_of__ELINMIntSendMessage 0067                                ??i1_commutate 0020  
                             ??_EnableMCP201 0030                                     int$flags 007E  
          BVH2_Appl_Layer@Cb51_oTempRedAlarm 013B                                _ui8_Ubemf_sel 00DF  
                              _Cb44_oShutoff 0145                   __size_of_interrupt_handler 0027  
                                   cksum@sum 0034                             ?_BVH2_Appl_Layer 0070  
                               ??_timer_init 0031                          _Oscill_Source_Block 04E0  
                         i1___lwdiv@quotient 0075                                   i1_ADC_Read 1D54  
                                 i1_ADC_Wait 1D3B                                  ??_commutate 0036  
                            __ELINMIntStatus 0053                     __end_of_read_eeprom_data 0268  
                   __end_of_Get_Analog_Value 02A7                          _Transmit_LIN_8Bytes 1637  
                 __size_of_I_calibrationInit 0089                             _ui8_given_supply 00D6  
    __end_of_Cb44_Pic_etat_monitor_node_fcn1 0E45     __size_of_Cb44_Pic_etat_monitor_node_fcn1 0015  
          ??_Cb44_Pic_etat_monitor_node_fcn1 0030             ?_Cb44_Pic_etat_monitor_node_fcn1 0070  
            _Cb44_Pic_etat_monitor_node_fcn1 0E30         __end_of_Cb34_PWM_Detection_node_fcn1 0EEA  
      __size_of_Cb34_PWM_Detection_node_fcn1 006B                 _Cb34_PWM_Detection_node_fcn1 0E7F  
                                ??_init_bldc 0042                 __size_of__ELINMIntInitialize 0018  
                                   intlevel1 0000          __ELINMIntReceiveMessage@_ELINM_size 003C  
                           _rising_bemf_flag 03C8                              ??_FILTER_IPhase 0030  
                  _bool_PWMin_Freq_err_Alarm 0155                  write_eeprom_data@ui8_adress 0038  
                       ?_Oscill_Source_Block 0070                              _interrrupt_bldc 1BA6  
                         __end_of_timer_init 0475                         ?_Transmit_LIN_8Bytes 003B  
                               ?_clear_timer 0070                        _bool_start_demand_mat 00E5  
                              ??_system_init 0042                            _ui8_PWMin_failCnt 014E  
                 PWM_Capture_init@ui8_CCP_Nb 0030                      __size_of_NegativeAnswer 0010  
                          ___tmul@multiplier 0030                                 ?_FILTER_Init 0070  
                               ?_FILTER_Ubat 0070                                 ?_FILTER_Temp 0070  
                              __pstringtext1 1800                     ?__ELINMIntReceiveMessage 003B  
                                 _OPTION_REG 0095                      __end_of_ELINMIntHandler 066C  
         __ELINMIntReceiveMessage@_ELINM_tag 003D                          __end_ofi1_commutate 1EAF  
                               ___aldiv@sign 0039  BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016D  
              ?_Cb34_PWM_Detection_node_fcn1 0070                        __ELINMIntCalcIDParity 16E1  
         BVH2_Appl_Layer@Cb24_RestartCounter 0142                        ??_Oscill_Source_Block 0030  
                       _Cb34_odFixedValueSel 0147             __ELINMIntCalcIDParity@ELINM_idtr 0030  
                            _ui8_error_Flags 00E6                              _ui8_current_cal 0120  
                      ??_Transmit_LIN_8Bytes 0043                       __size_of_InitMotorStop 000C  
               __end_of_interrupt_PWMCapture 06D7                               _ui16_speed_fil 00B4  
                             _ui16_speed_rar 012F                                _filterTempNTC 01E0  
