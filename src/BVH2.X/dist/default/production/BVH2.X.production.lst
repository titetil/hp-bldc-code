

Microchip Technology PIC PRO Macro Assembler V1.44 build -154322312 
                                                                                               Mon Jun 04 14:38:05 2018

Microchip Technology Omniscient Code Generator v1.44 (PRO mode) build 201709140600
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	text24,local,class=CODE,merge=1,delta=2
    28                           	psect	text41,local,class=CODE,merge=1,delta=2
    29                           	psect	swtext2,local,class=CONST,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	swtext3,local,class=CONST,delta=2
    32                           	psect	swtext4,local,class=CONST,delta=2
    33                           	psect	text58,local,class=CODE,merge=1,delta=2
    34                           	psect	text59,local,class=CODE,merge=1,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.44
    39                           ; Generated 14/09/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F1936 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0090                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  0110                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0115                     	;# 
   129  0116                     	;# 
   130  0117                     	;# 
   131  0118                     	;# 
   132  0119                     	;# 
   133  011A                     	;# 
   134  011B                     	;# 
   135  011D                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  0199                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019C                     	;# 
   154  019C                     	;# 
   155  019D                     	;# 
   156  019E                     	;# 
   157  019F                     	;# 
   158  020D                     	;# 
   159  0210                     	;# 
   160  0211                     	;# 
   161  0212                     	;# 
   162  0213                     	;# 
   163  0214                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0291                     	;# 
   169  0291                     	;# 
   170  0292                     	;# 
   171  0293                     	;# 
   172  0294                     	;# 
   173  0295                     	;# 
   174  0295                     	;# 
   175  0296                     	;# 
   176  0298                     	;# 
   177  0298                     	;# 
   178  0299                     	;# 
   179  029A                     	;# 
   180  029B                     	;# 
   181  029C                     	;# 
   182  029C                     	;# 
   183  029D                     	;# 
   184  029E                     	;# 
   185  029F                     	;# 
   186  0311                     	;# 
   187  0311                     	;# 
   188  0312                     	;# 
   189  0313                     	;# 
   190  0314                     	;# 
   191  0315                     	;# 
   192  0315                     	;# 
   193  0316                     	;# 
   194  0318                     	;# 
   195  0318                     	;# 
   196  0319                     	;# 
   197  031A                     	;# 
   198  031C                     	;# 
   199  031C                     	;# 
   200  031D                     	;# 
   201  031E                     	;# 
   202  0394                     	;# 
   203  0395                     	;# 
   204  0396                     	;# 
   205  0415                     	;# 
   206  0416                     	;# 
   207  0417                     	;# 
   208  041C                     	;# 
   209  041D                     	;# 
   210  041E                     	;# 
   211  0791                     	;# 
   212  0792                     	;# 
   213  0793                     	;# 
   214  0794                     	;# 
   215  0795                     	;# 
   216  0798                     	;# 
   217  0799                     	;# 
   218  07A0                     	;# 
   219  07A1                     	;# 
   220  07A3                     	;# 
   221  07A4                     	;# 
   222  07A6                     	;# 
   223  07A7                     	;# 
   224  07A9                     	;# 
   225  07AA                     	;# 
   226  0FE4                     	;# 
   227  0FE5                     	;# 
   228  0FE6                     	;# 
   229  0FE7                     	;# 
   230  0FE8                     	;# 
   231  0FE9                     	;# 
   232  0FEA                     	;# 
   233  0FEB                     	;# 
   234  0FED                     	;# 
   235  0FEE                     	;# 
   236  0FEF                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  0010                     	;# 
   253  0011                     	;# 
   254  0012                     	;# 
   255  0013                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0016                     	;# 
   259  0017                     	;# 
   260  0018                     	;# 
   261  0019                     	;# 
   262  001A                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  0090                     	;# 
   271  0091                     	;# 
   272  0092                     	;# 
   273  0093                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  0110                     	;# 
   289  0111                     	;# 
   290  0112                     	;# 
   291  0113                     	;# 
   292  0114                     	;# 
   293  0115                     	;# 
   294  0116                     	;# 
   295  0117                     	;# 
   296  0118                     	;# 
   297  0119                     	;# 
   298  011A                     	;# 
   299  011B                     	;# 
   300  011D                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0191                     	;# 
   304  0191                     	;# 
   305  0192                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0193                     	;# 
   309  0194                     	;# 
   310  0195                     	;# 
   311  0196                     	;# 
   312  0199                     	;# 
   313  019A                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019C                     	;# 
   319  019C                     	;# 
   320  019D                     	;# 
   321  019E                     	;# 
   322  019F                     	;# 
   323  020D                     	;# 
   324  0210                     	;# 
   325  0211                     	;# 
   326  0212                     	;# 
   327  0213                     	;# 
   328  0214                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0216                     	;# 
   332  0217                     	;# 
   333  0291                     	;# 
   334  0291                     	;# 
   335  0292                     	;# 
   336  0293                     	;# 
   337  0294                     	;# 
   338  0295                     	;# 
   339  0295                     	;# 
   340  0296                     	;# 
   341  0298                     	;# 
   342  0298                     	;# 
   343  0299                     	;# 
   344  029A                     	;# 
   345  029B                     	;# 
   346  029C                     	;# 
   347  029C                     	;# 
   348  029D                     	;# 
   349  029E                     	;# 
   350  029F                     	;# 
   351  0311                     	;# 
   352  0311                     	;# 
   353  0312                     	;# 
   354  0313                     	;# 
   355  0314                     	;# 
   356  0315                     	;# 
   357  0315                     	;# 
   358  0316                     	;# 
   359  0318                     	;# 
   360  0318                     	;# 
   361  0319                     	;# 
   362  031A                     	;# 
   363  031C                     	;# 
   364  031C                     	;# 
   365  031D                     	;# 
   366  031E                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0415                     	;# 
   371  0416                     	;# 
   372  0417                     	;# 
   373  041C                     	;# 
   374  041D                     	;# 
   375  041E                     	;# 
   376  0791                     	;# 
   377  0792                     	;# 
   378  0793                     	;# 
   379  0794                     	;# 
   380  0795                     	;# 
   381  0798                     	;# 
   382  0799                     	;# 
   383  07A0                     	;# 
   384  07A1                     	;# 
   385  07A3                     	;# 
   386  07A4                     	;# 
   387  07A6                     	;# 
   388  07A7                     	;# 
   389  07A9                     	;# 
   390  07AA                     	;# 
   391  0FE4                     	;# 
   392  0FE5                     	;# 
   393  0FE6                     	;# 
   394  0FE7                     	;# 
   395  0FE8                     	;# 
   396  0FE9                     	;# 
   397  0FEA                     	;# 
   398  0FEB                     	;# 
   399  0FED                     	;# 
   400  0FEE                     	;# 
   401  0FEF                     	;# 
   402  0000                     	;# 
   403  0001                     	;# 
   404  0002                     	;# 
   405  0003                     	;# 
   406  0004                     	;# 
   407  0005                     	;# 
   408  0006                     	;# 
   409  0007                     	;# 
   410  0008                     	;# 
   411  0009                     	;# 
   412  000A                     	;# 
   413  000B                     	;# 
   414  000C                     	;# 
   415  000D                     	;# 
   416  000E                     	;# 
   417  0010                     	;# 
   418  0011                     	;# 
   419  0012                     	;# 
   420  0013                     	;# 
   421  0015                     	;# 
   422  0016                     	;# 
   423  0016                     	;# 
   424  0017                     	;# 
   425  0018                     	;# 
   426  0019                     	;# 
   427  001A                     	;# 
   428  001B                     	;# 
   429  001C                     	;# 
   430  001E                     	;# 
   431  001F                     	;# 
   432  008C                     	;# 
   433  008D                     	;# 
   434  008E                     	;# 
   435  0090                     	;# 
   436  0091                     	;# 
   437  0092                     	;# 
   438  0093                     	;# 
   439  0095                     	;# 
   440  0096                     	;# 
   441  0097                     	;# 
   442  0098                     	;# 
   443  0099                     	;# 
   444  009A                     	;# 
   445  009B                     	;# 
   446  009B                     	;# 
   447  009C                     	;# 
   448  009D                     	;# 
   449  009E                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  0110                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011D                     	;# 
   466  018C                     	;# 
   467  018D                     	;# 
   468  0191                     	;# 
   469  0191                     	;# 
   470  0192                     	;# 
   471  0193                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0194                     	;# 
   475  0195                     	;# 
   476  0196                     	;# 
   477  0199                     	;# 
   478  019A                     	;# 
   479  019B                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019B                     	;# 
   483  019C                     	;# 
   484  019C                     	;# 
   485  019D                     	;# 
   486  019E                     	;# 
   487  019F                     	;# 
   488  020D                     	;# 
   489  0210                     	;# 
   490  0211                     	;# 
   491  0212                     	;# 
   492  0213                     	;# 
   493  0214                     	;# 
   494  0215                     	;# 
   495  0215                     	;# 
   496  0216                     	;# 
   497  0217                     	;# 
   498  0291                     	;# 
   499  0291                     	;# 
   500  0292                     	;# 
   501  0293                     	;# 
   502  0294                     	;# 
   503  0295                     	;# 
   504  0295                     	;# 
   505  0296                     	;# 
   506  0298                     	;# 
   507  0298                     	;# 
   508  0299                     	;# 
   509  029A                     	;# 
   510  029B                     	;# 
   511  029C                     	;# 
   512  029C                     	;# 
   513  029D                     	;# 
   514  029E                     	;# 
   515  029F                     	;# 
   516  0311                     	;# 
   517  0311                     	;# 
   518  0312                     	;# 
   519  0313                     	;# 
   520  0314                     	;# 
   521  0315                     	;# 
   522  0315                     	;# 
   523  0316                     	;# 
   524  0318                     	;# 
   525  0318                     	;# 
   526  0319                     	;# 
   527  031A                     	;# 
   528  031C                     	;# 
   529  031C                     	;# 
   530  031D                     	;# 
   531  031E                     	;# 
   532  0394                     	;# 
   533  0395                     	;# 
   534  0396                     	;# 
   535  0415                     	;# 
   536  0416                     	;# 
   537  0417                     	;# 
   538  041C                     	;# 
   539  041D                     	;# 
   540  041E                     	;# 
   541  0791                     	;# 
   542  0792                     	;# 
   543  0793                     	;# 
   544  0794                     	;# 
   545  0795                     	;# 
   546  0798                     	;# 
   547  0799                     	;# 
   548  07A0                     	;# 
   549  07A1                     	;# 
   550  07A3                     	;# 
   551  07A4                     	;# 
   552  07A6                     	;# 
   553  07A7                     	;# 
   554  07A9                     	;# 
   555  07AA                     	;# 
   556  0FE4                     	;# 
   557  0FE5                     	;# 
   558  0FE6                     	;# 
   559  0FE7                     	;# 
   560  0FE8                     	;# 
   561  0FE9                     	;# 
   562  0FEA                     	;# 
   563  0FEB                     	;# 
   564  0FED                     	;# 
   565  0FEE                     	;# 
   566  0FEF                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  0010                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  008E                     	;# 
   600  0090                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0098                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  010C                     	;# 
   616  010D                     	;# 
   617  010E                     	;# 
   618  0110                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011A                     	;# 
   629  011B                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0199                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020D                     	;# 
   654  0210                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0216                     	;# 
   662  0217                     	;# 
   663  0291                     	;# 
   664  0291                     	;# 
   665  0292                     	;# 
   666  0293                     	;# 
   667  0294                     	;# 
   668  0295                     	;# 
   669  0295                     	;# 
   670  0296                     	;# 
   671  0298                     	;# 
   672  0298                     	;# 
   673  0299                     	;# 
   674  029A                     	;# 
   675  029B                     	;# 
   676  029C                     	;# 
   677  029C                     	;# 
   678  029D                     	;# 
   679  029E                     	;# 
   680  029F                     	;# 
   681  0311                     	;# 
   682  0311                     	;# 
   683  0312                     	;# 
   684  0313                     	;# 
   685  0314                     	;# 
   686  0315                     	;# 
   687  0315                     	;# 
   688  0316                     	;# 
   689  0318                     	;# 
   690  0318                     	;# 
   691  0319                     	;# 
   692  031A                     	;# 
   693  031C                     	;# 
   694  031C                     	;# 
   695  031D                     	;# 
   696  031E                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0415                     	;# 
   701  0416                     	;# 
   702  0417                     	;# 
   703  041C                     	;# 
   704  041D                     	;# 
   705  041E                     	;# 
   706  0791                     	;# 
   707  0792                     	;# 
   708  0793                     	;# 
   709  0794                     	;# 
   710  0795                     	;# 
   711  0798                     	;# 
   712  0799                     	;# 
   713  07A0                     	;# 
   714  07A1                     	;# 
   715  07A3                     	;# 
   716  07A4                     	;# 
   717  07A6                     	;# 
   718  07A7                     	;# 
   719  07A9                     	;# 
   720  07AA                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0010                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0013                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  008E                     	;# 
   765  0090                     	;# 
   766  0091                     	;# 
   767  0092                     	;# 
   768  0093                     	;# 
   769  0095                     	;# 
   770  0096                     	;# 
   771  0097                     	;# 
   772  0098                     	;# 
   773  0099                     	;# 
   774  009A                     	;# 
   775  009B                     	;# 
   776  009B                     	;# 
   777  009C                     	;# 
   778  009D                     	;# 
   779  009E                     	;# 
   780  010C                     	;# 
   781  010D                     	;# 
   782  010E                     	;# 
   783  0110                     	;# 
   784  0111                     	;# 
   785  0112                     	;# 
   786  0113                     	;# 
   787  0114                     	;# 
   788  0115                     	;# 
   789  0116                     	;# 
   790  0117                     	;# 
   791  0118                     	;# 
   792  0119                     	;# 
   793  011A                     	;# 
   794  011B                     	;# 
   795  011D                     	;# 
   796  018C                     	;# 
   797  018D                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0194                     	;# 
   805  0195                     	;# 
   806  0196                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019C                     	;# 
   814  019C                     	;# 
   815  019D                     	;# 
   816  019E                     	;# 
   817  019F                     	;# 
   818  020D                     	;# 
   819  0210                     	;# 
   820  0211                     	;# 
   821  0212                     	;# 
   822  0213                     	;# 
   823  0214                     	;# 
   824  0215                     	;# 
   825  0215                     	;# 
   826  0216                     	;# 
   827  0217                     	;# 
   828  0291                     	;# 
   829  0291                     	;# 
   830  0292                     	;# 
   831  0293                     	;# 
   832  0294                     	;# 
   833  0295                     	;# 
   834  0295                     	;# 
   835  0296                     	;# 
   836  0298                     	;# 
   837  0298                     	;# 
   838  0299                     	;# 
   839  029A                     	;# 
   840  029B                     	;# 
   841  029C                     	;# 
   842  029C                     	;# 
   843  029D                     	;# 
   844  029E                     	;# 
   845  029F                     	;# 
   846  0311                     	;# 
   847  0311                     	;# 
   848  0312                     	;# 
   849  0313                     	;# 
   850  0314                     	;# 
   851  0315                     	;# 
   852  0315                     	;# 
   853  0316                     	;# 
   854  0318                     	;# 
   855  0318                     	;# 
   856  0319                     	;# 
   857  031A                     	;# 
   858  031C                     	;# 
   859  031C                     	;# 
   860  031D                     	;# 
   861  031E                     	;# 
   862  0394                     	;# 
   863  0395                     	;# 
   864  0396                     	;# 
   865  0415                     	;# 
   866  0416                     	;# 
   867  0417                     	;# 
   868  041C                     	;# 
   869  041D                     	;# 
   870  041E                     	;# 
   871  0791                     	;# 
   872  0792                     	;# 
   873  0793                     	;# 
   874  0794                     	;# 
   875  0795                     	;# 
   876  0798                     	;# 
   877  0799                     	;# 
   878  07A0                     	;# 
   879  07A1                     	;# 
   880  07A3                     	;# 
   881  07A4                     	;# 
   882  07A6                     	;# 
   883  07A7                     	;# 
   884  07A9                     	;# 
   885  07AA                     	;# 
   886  0FE4                     	;# 
   887  0FE5                     	;# 
   888  0FE6                     	;# 
   889  0FE7                     	;# 
   890  0FE8                     	;# 
   891  0FE9                     	;# 
   892  0FEA                     	;# 
   893  0FEB                     	;# 
   894  0FED                     	;# 
   895  0FEE                     	;# 
   896  0FEF                     	;# 
   897  0000                     	;# 
   898  0001                     	;# 
   899  0002                     	;# 
   900  0003                     	;# 
   901  0004                     	;# 
   902  0005                     	;# 
   903  0006                     	;# 
   904  0007                     	;# 
   905  0008                     	;# 
   906  0009                     	;# 
   907  000A                     	;# 
   908  000B                     	;# 
   909  000C                     	;# 
   910  000D                     	;# 
   911  000E                     	;# 
   912  0010                     	;# 
   913  0011                     	;# 
   914  0012                     	;# 
   915  0013                     	;# 
   916  0015                     	;# 
   917  0016                     	;# 
   918  0016                     	;# 
   919  0017                     	;# 
   920  0018                     	;# 
   921  0019                     	;# 
   922  001A                     	;# 
   923  001B                     	;# 
   924  001C                     	;# 
   925  001E                     	;# 
   926  001F                     	;# 
   927  008C                     	;# 
   928  008D                     	;# 
   929  008E                     	;# 
   930  0090                     	;# 
   931  0091                     	;# 
   932  0092                     	;# 
   933  0093                     	;# 
   934  0095                     	;# 
   935  0096                     	;# 
   936  0097                     	;# 
   937  0098                     	;# 
   938  0099                     	;# 
   939  009A                     	;# 
   940  009B                     	;# 
   941  009B                     	;# 
   942  009C                     	;# 
   943  009D                     	;# 
   944  009E                     	;# 
   945  010C                     	;# 
   946  010D                     	;# 
   947  010E                     	;# 
   948  0110                     	;# 
   949  0111                     	;# 
   950  0112                     	;# 
   951  0113                     	;# 
   952  0114                     	;# 
   953  0115                     	;# 
   954  0116                     	;# 
   955  0117                     	;# 
   956  0118                     	;# 
   957  0119                     	;# 
   958  011A                     	;# 
   959  011B                     	;# 
   960  011D                     	;# 
   961  018C                     	;# 
   962  018D                     	;# 
   963  0191                     	;# 
   964  0191                     	;# 
   965  0192                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0193                     	;# 
   969  0194                     	;# 
   970  0195                     	;# 
   971  0196                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019C                     	;# 
   979  019C                     	;# 
   980  019D                     	;# 
   981  019E                     	;# 
   982  019F                     	;# 
   983  020D                     	;# 
   984  0210                     	;# 
   985  0211                     	;# 
   986  0212                     	;# 
   987  0213                     	;# 
   988  0214                     	;# 
   989  0215                     	;# 
   990  0215                     	;# 
   991  0216                     	;# 
   992  0217                     	;# 
   993  0291                     	;# 
   994  0291                     	;# 
   995  0292                     	;# 
   996  0293                     	;# 
   997  0294                     	;# 
   998  0295                     	;# 
   999  0295                     	;# 
  1000  0296                     	;# 
  1001  0298                     	;# 
  1002  0298                     	;# 
  1003  0299                     	;# 
  1004  029A                     	;# 
  1005  029B                     	;# 
  1006  029C                     	;# 
  1007  029C                     	;# 
  1008  029D                     	;# 
  1009  029E                     	;# 
  1010  029F                     	;# 
  1011  0311                     	;# 
  1012  0311                     	;# 
  1013  0312                     	;# 
  1014  0313                     	;# 
  1015  0314                     	;# 
  1016  0315                     	;# 
  1017  0315                     	;# 
  1018  0316                     	;# 
  1019  0318                     	;# 
  1020  0318                     	;# 
  1021  0319                     	;# 
  1022  031A                     	;# 
  1023  031C                     	;# 
  1024  031C                     	;# 
  1025  031D                     	;# 
  1026  031E                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0415                     	;# 
  1031  0416                     	;# 
  1032  0417                     	;# 
  1033  041C                     	;# 
  1034  041D                     	;# 
  1035  041E                     	;# 
  1036  0791                     	;# 
  1037  0792                     	;# 
  1038  0793                     	;# 
  1039  0794                     	;# 
  1040  0795                     	;# 
  1041  0798                     	;# 
  1042  0799                     	;# 
  1043  07A0                     	;# 
  1044  07A1                     	;# 
  1045  07A3                     	;# 
  1046  07A4                     	;# 
  1047  07A6                     	;# 
  1048  07A7                     	;# 
  1049  07A9                     	;# 
  1050  07AA                     	;# 
  1051  0FE4                     	;# 
  1052  0FE5                     	;# 
  1053  0FE6                     	;# 
  1054  0FE7                     	;# 
  1055  0FE8                     	;# 
  1056  0FE9                     	;# 
  1057  0FEA                     	;# 
  1058  0FEB                     	;# 
  1059  0FED                     	;# 
  1060  0FEE                     	;# 
  1061  0FEF                     	;# 
  1062  0000                     	;# 
  1063  0001                     	;# 
  1064  0002                     	;# 
  1065  0003                     	;# 
  1066  0004                     	;# 
  1067  0005                     	;# 
  1068  0006                     	;# 
  1069  0007                     	;# 
  1070  0008                     	;# 
  1071  0009                     	;# 
  1072  000A                     	;# 
  1073  000B                     	;# 
  1074  000C                     	;# 
  1075  000D                     	;# 
  1076  000E                     	;# 
  1077  0010                     	;# 
  1078  0011                     	;# 
  1079  0012                     	;# 
  1080  0013                     	;# 
  1081  0015                     	;# 
  1082  0016                     	;# 
  1083  0016                     	;# 
  1084  0017                     	;# 
  1085  0018                     	;# 
  1086  0019                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001C                     	;# 
  1090  001E                     	;# 
  1091  001F                     	;# 
  1092  008C                     	;# 
  1093  008D                     	;# 
  1094  008E                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0093                     	;# 
  1099  0095                     	;# 
  1100  0096                     	;# 
  1101  0097                     	;# 
  1102  0098                     	;# 
  1103  0099                     	;# 
  1104  009A                     	;# 
  1105  009B                     	;# 
  1106  009B                     	;# 
  1107  009C                     	;# 
  1108  009D                     	;# 
  1109  009E                     	;# 
  1110  010C                     	;# 
  1111  010D                     	;# 
  1112  010E                     	;# 
  1113  0110                     	;# 
  1114  0111                     	;# 
  1115  0112                     	;# 
  1116  0113                     	;# 
  1117  0114                     	;# 
  1118  0115                     	;# 
  1119  0116                     	;# 
  1120  0117                     	;# 
  1121  0118                     	;# 
  1122  0119                     	;# 
  1123  011A                     	;# 
  1124  011B                     	;# 
  1125  011D                     	;# 
  1126  018C                     	;# 
  1127  018D                     	;# 
  1128  0191                     	;# 
  1129  0191                     	;# 
  1130  0192                     	;# 
  1131  0193                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0194                     	;# 
  1135  0195                     	;# 
  1136  0196                     	;# 
  1137  0199                     	;# 
  1138  019A                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019B                     	;# 
  1143  019C                     	;# 
  1144  019C                     	;# 
  1145  019D                     	;# 
  1146  019E                     	;# 
  1147  019F                     	;# 
  1148  020D                     	;# 
  1149  0210                     	;# 
  1150  0211                     	;# 
  1151  0212                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0215                     	;# 
  1155  0215                     	;# 
  1156  0216                     	;# 
  1157  0217                     	;# 
  1158  0291                     	;# 
  1159  0291                     	;# 
  1160  0292                     	;# 
  1161  0293                     	;# 
  1162  0294                     	;# 
  1163  0295                     	;# 
  1164  0295                     	;# 
  1165  0296                     	;# 
  1166  0298                     	;# 
  1167  0298                     	;# 
  1168  0299                     	;# 
  1169  029A                     	;# 
  1170  029B                     	;# 
  1171  029C                     	;# 
  1172  029C                     	;# 
  1173  029D                     	;# 
  1174  029E                     	;# 
  1175  029F                     	;# 
  1176  0311                     	;# 
  1177  0311                     	;# 
  1178  0312                     	;# 
  1179  0313                     	;# 
  1180  0314                     	;# 
  1181  0315                     	;# 
  1182  0315                     	;# 
  1183  0316                     	;# 
  1184  0318                     	;# 
  1185  0318                     	;# 
  1186  0319                     	;# 
  1187  031A                     	;# 
  1188  031C                     	;# 
  1189  031C                     	;# 
  1190  031D                     	;# 
  1191  031E                     	;# 
  1192  0394                     	;# 
  1193  0395                     	;# 
  1194  0396                     	;# 
  1195  0415                     	;# 
  1196  0416                     	;# 
  1197  0417                     	;# 
  1198  041C                     	;# 
  1199  041D                     	;# 
  1200  041E                     	;# 
  1201  0791                     	;# 
  1202  0792                     	;# 
  1203  0793                     	;# 
  1204  0794                     	;# 
  1205  0795                     	;# 
  1206  0798                     	;# 
  1207  0799                     	;# 
  1208  07A0                     	;# 
  1209  07A1                     	;# 
  1210  07A3                     	;# 
  1211  07A4                     	;# 
  1212  07A6                     	;# 
  1213  07A7                     	;# 
  1214  07A9                     	;# 
  1215  07AA                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  0010                     	;# 
  1243  0011                     	;# 
  1244  0012                     	;# 
  1245  0013                     	;# 
  1246  0015                     	;# 
  1247  0016                     	;# 
  1248  0016                     	;# 
  1249  0017                     	;# 
  1250  0018                     	;# 
  1251  0019                     	;# 
  1252  001A                     	;# 
  1253  001B                     	;# 
  1254  001C                     	;# 
  1255  001E                     	;# 
  1256  001F                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  0090                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0093                     	;# 
  1264  0095                     	;# 
  1265  0096                     	;# 
  1266  0097                     	;# 
  1267  0098                     	;# 
  1268  0099                     	;# 
  1269  009A                     	;# 
  1270  009B                     	;# 
  1271  009B                     	;# 
  1272  009C                     	;# 
  1273  009D                     	;# 
  1274  009E                     	;# 
  1275  010C                     	;# 
  1276  010D                     	;# 
  1277  010E                     	;# 
  1278  0110                     	;# 
  1279  0111                     	;# 
  1280  0112                     	;# 
  1281  0113                     	;# 
  1282  0114                     	;# 
  1283  0115                     	;# 
  1284  0116                     	;# 
  1285  0117                     	;# 
  1286  0118                     	;# 
  1287  0119                     	;# 
  1288  011A                     	;# 
  1289  011B                     	;# 
  1290  011D                     	;# 
  1291  018C                     	;# 
  1292  018D                     	;# 
  1293  0191                     	;# 
  1294  0191                     	;# 
  1295  0192                     	;# 
  1296  0193                     	;# 
  1297  0193                     	;# 
  1298  0193                     	;# 
  1299  0194                     	;# 
  1300  0195                     	;# 
  1301  0196                     	;# 
  1302  0199                     	;# 
  1303  019A                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019D                     	;# 
  1311  019E                     	;# 
  1312  019F                     	;# 
  1313  020D                     	;# 
  1314  0210                     	;# 
  1315  0211                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0214                     	;# 
  1319  0215                     	;# 
  1320  0215                     	;# 
  1321  0216                     	;# 
  1322  0217                     	;# 
  1323  0291                     	;# 
  1324  0291                     	;# 
  1325  0292                     	;# 
  1326  0293                     	;# 
  1327  0294                     	;# 
  1328  0295                     	;# 
  1329  0295                     	;# 
  1330  0296                     	;# 
  1331  0298                     	;# 
  1332  0298                     	;# 
  1333  0299                     	;# 
  1334  029A                     	;# 
  1335  029B                     	;# 
  1336  029C                     	;# 
  1337  029C                     	;# 
  1338  029D                     	;# 
  1339  029E                     	;# 
  1340  029F                     	;# 
  1341  0311                     	;# 
  1342  0311                     	;# 
  1343  0312                     	;# 
  1344  0313                     	;# 
  1345  0314                     	;# 
  1346  0315                     	;# 
  1347  0315                     	;# 
  1348  0316                     	;# 
  1349  0318                     	;# 
  1350  0318                     	;# 
  1351  0319                     	;# 
  1352  031A                     	;# 
  1353  031C                     	;# 
  1354  031C                     	;# 
  1355  031D                     	;# 
  1356  031E                     	;# 
  1357  0394                     	;# 
  1358  0395                     	;# 
  1359  0396                     	;# 
  1360  0415                     	;# 
  1361  0416                     	;# 
  1362  0417                     	;# 
  1363  041C                     	;# 
  1364  041D                     	;# 
  1365  041E                     	;# 
  1366  0791                     	;# 
  1367  0792                     	;# 
  1368  0793                     	;# 
  1369  0794                     	;# 
  1370  0795                     	;# 
  1371  0798                     	;# 
  1372  0799                     	;# 
  1373  07A0                     	;# 
  1374  07A1                     	;# 
  1375  07A3                     	;# 
  1376  07A4                     	;# 
  1377  07A6                     	;# 
  1378  07A7                     	;# 
  1379  07A9                     	;# 
  1380  07AA                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE9                     	;# 
  1387  0FEA                     	;# 
  1388  0FEB                     	;# 
  1389  0FED                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392  0000                     	;# 
  1393  0001                     	;# 
  1394  0002                     	;# 
  1395  0003                     	;# 
  1396  0004                     	;# 
  1397  0005                     	;# 
  1398  0006                     	;# 
  1399  0007                     	;# 
  1400  0008                     	;# 
  1401  0009                     	;# 
  1402  000A                     	;# 
  1403  000B                     	;# 
  1404  000C                     	;# 
  1405  000D                     	;# 
  1406  000E                     	;# 
  1407  0010                     	;# 
  1408  0011                     	;# 
  1409  0012                     	;# 
  1410  0013                     	;# 
  1411  0015                     	;# 
  1412  0016                     	;# 
  1413  0016                     	;# 
  1414  0017                     	;# 
  1415  0018                     	;# 
  1416  0019                     	;# 
  1417  001A                     	;# 
  1418  001B                     	;# 
  1419  001C                     	;# 
  1420  001E                     	;# 
  1421  001F                     	;# 
  1422  008C                     	;# 
  1423  008D                     	;# 
  1424  008E                     	;# 
  1425  0090                     	;# 
  1426  0091                     	;# 
  1427  0092                     	;# 
  1428  0093                     	;# 
  1429  0095                     	;# 
  1430  0096                     	;# 
  1431  0097                     	;# 
  1432  0098                     	;# 
  1433  0099                     	;# 
  1434  009A                     	;# 
  1435  009B                     	;# 
  1436  009B                     	;# 
  1437  009C                     	;# 
  1438  009D                     	;# 
  1439  009E                     	;# 
  1440  010C                     	;# 
  1441  010D                     	;# 
  1442  010E                     	;# 
  1443  0110                     	;# 
  1444  0111                     	;# 
  1445  0112                     	;# 
  1446  0113                     	;# 
  1447  0114                     	;# 
  1448  0115                     	;# 
  1449  0116                     	;# 
  1450  0117                     	;# 
  1451  0118                     	;# 
  1452  0119                     	;# 
  1453  011A                     	;# 
  1454  011B                     	;# 
  1455  011D                     	;# 
  1456  018C                     	;# 
  1457  018D                     	;# 
  1458  0191                     	;# 
  1459  0191                     	;# 
  1460  0192                     	;# 
  1461  0193                     	;# 
  1462  0193                     	;# 
  1463  0193                     	;# 
  1464  0194                     	;# 
  1465  0195                     	;# 
  1466  0196                     	;# 
  1467  0199                     	;# 
  1468  019A                     	;# 
  1469  019B                     	;# 
  1470  019B                     	;# 
  1471  019B                     	;# 
  1472  019B                     	;# 
  1473  019C                     	;# 
  1474  019C                     	;# 
  1475  019D                     	;# 
  1476  019E                     	;# 
  1477  019F                     	;# 
  1478  020D                     	;# 
  1479  0210                     	;# 
  1480  0211                     	;# 
  1481  0212                     	;# 
  1482  0213                     	;# 
  1483  0214                     	;# 
  1484  0215                     	;# 
  1485  0215                     	;# 
  1486  0216                     	;# 
  1487  0217                     	;# 
  1488  0291                     	;# 
  1489  0291                     	;# 
  1490  0292                     	;# 
  1491  0293                     	;# 
  1492  0294                     	;# 
  1493  0295                     	;# 
  1494  0295                     	;# 
  1495  0296                     	;# 
  1496  0298                     	;# 
  1497  0298                     	;# 
  1498  0299                     	;# 
  1499  029A                     	;# 
  1500  029B                     	;# 
  1501  029C                     	;# 
  1502  029C                     	;# 
  1503  029D                     	;# 
  1504  029E                     	;# 
  1505  029F                     	;# 
  1506  0311                     	;# 
  1507  0311                     	;# 
  1508  0312                     	;# 
  1509  0313                     	;# 
  1510  0314                     	;# 
  1511  0315                     	;# 
  1512  0315                     	;# 
  1513  0316                     	;# 
  1514  0318                     	;# 
  1515  0318                     	;# 
  1516  0319                     	;# 
  1517  031A                     	;# 
  1518  031C                     	;# 
  1519  031C                     	;# 
  1520  031D                     	;# 
  1521  031E                     	;# 
  1522  0394                     	;# 
  1523  0395                     	;# 
  1524  0396                     	;# 
  1525  0415                     	;# 
  1526  0416                     	;# 
  1527  0417                     	;# 
  1528  041C                     	;# 
  1529  041D                     	;# 
  1530  041E                     	;# 
  1531  0791                     	;# 
  1532  0792                     	;# 
  1533  0793                     	;# 
  1534  0794                     	;# 
  1535  0795                     	;# 
  1536  0798                     	;# 
  1537  0799                     	;# 
  1538  07A0                     	;# 
  1539  07A1                     	;# 
  1540  07A3                     	;# 
  1541  07A4                     	;# 
  1542  07A6                     	;# 
  1543  07A7                     	;# 
  1544  07A9                     	;# 
  1545  07AA                     	;# 
  1546  0FE4                     	;# 
  1547  0FE5                     	;# 
  1548  0FE6                     	;# 
  1549  0FE7                     	;# 
  1550  0FE8                     	;# 
  1551  0FE9                     	;# 
  1552  0FEA                     	;# 
  1553  0FEB                     	;# 
  1554  0FED                     	;# 
  1555  0FEE                     	;# 
  1556  0FEF                     	;# 
  1557  0000                     	;# 
  1558  0001                     	;# 
  1559  0002                     	;# 
  1560  0003                     	;# 
  1561  0004                     	;# 
  1562  0005                     	;# 
  1563  0006                     	;# 
  1564  0007                     	;# 
  1565  0008                     	;# 
  1566  0009                     	;# 
  1567  000A                     	;# 
  1568  000B                     	;# 
  1569  000C                     	;# 
  1570  000D                     	;# 
  1571  000E                     	;# 
  1572  0010                     	;# 
  1573  0011                     	;# 
  1574  0012                     	;# 
  1575  0013                     	;# 
  1576  0015                     	;# 
  1577  0016                     	;# 
  1578  0016                     	;# 
  1579  0017                     	;# 
  1580  0018                     	;# 
  1581  0019                     	;# 
  1582  001A                     	;# 
  1583  001B                     	;# 
  1584  001C                     	;# 
  1585  001E                     	;# 
  1586  001F                     	;# 
  1587  008C                     	;# 
  1588  008D                     	;# 
  1589  008E                     	;# 
  1590  0090                     	;# 
  1591  0091                     	;# 
  1592  0092                     	;# 
  1593  0093                     	;# 
  1594  0095                     	;# 
  1595  0096                     	;# 
  1596  0097                     	;# 
  1597  0098                     	;# 
  1598  0099                     	;# 
  1599  009A                     	;# 
  1600  009B                     	;# 
  1601  009B                     	;# 
  1602  009C                     	;# 
  1603  009D                     	;# 
  1604  009E                     	;# 
  1605  010C                     	;# 
  1606  010D                     	;# 
  1607  010E                     	;# 
  1608  0110                     	;# 
  1609  0111                     	;# 
  1610  0112                     	;# 
  1611  0113                     	;# 
  1612  0114                     	;# 
  1613  0115                     	;# 
  1614  0116                     	;# 
  1615  0117                     	;# 
  1616  0118                     	;# 
  1617  0119                     	;# 
  1618  011A                     	;# 
  1619  011B                     	;# 
  1620  011D                     	;# 
  1621  018C                     	;# 
  1622  018D                     	;# 
  1623  0191                     	;# 
  1624  0191                     	;# 
  1625  0192                     	;# 
  1626  0193                     	;# 
  1627  0193                     	;# 
  1628  0193                     	;# 
  1629  0194                     	;# 
  1630  0195                     	;# 
  1631  0196                     	;# 
  1632  0199                     	;# 
  1633  019A                     	;# 
  1634  019B                     	;# 
  1635  019B                     	;# 
  1636  019B                     	;# 
  1637  019B                     	;# 
  1638  019C                     	;# 
  1639  019C                     	;# 
  1640  019D                     	;# 
  1641  019E                     	;# 
  1642  019F                     	;# 
  1643  020D                     	;# 
  1644  0210                     	;# 
  1645  0211                     	;# 
  1646  0212                     	;# 
  1647  0213                     	;# 
  1648  0214                     	;# 
  1649  0215                     	;# 
  1650  0215                     	;# 
  1651  0216                     	;# 
  1652  0217                     	;# 
  1653  0291                     	;# 
  1654  0291                     	;# 
  1655  0292                     	;# 
  1656  0293                     	;# 
  1657  0294                     	;# 
  1658  0295                     	;# 
  1659  0295                     	;# 
  1660  0296                     	;# 
  1661  0298                     	;# 
  1662  0298                     	;# 
  1663  0299                     	;# 
  1664  029A                     	;# 
  1665  029B                     	;# 
  1666  029C                     	;# 
  1667  029C                     	;# 
  1668  029D                     	;# 
  1669  029E                     	;# 
  1670  029F                     	;# 
  1671  0311                     	;# 
  1672  0311                     	;# 
  1673  0312                     	;# 
  1674  0313                     	;# 
  1675  0314                     	;# 
  1676  0315                     	;# 
  1677  0315                     	;# 
  1678  0316                     	;# 
  1679  0318                     	;# 
  1680  0318                     	;# 
  1681  0319                     	;# 
  1682  031A                     	;# 
  1683  031C                     	;# 
  1684  031C                     	;# 
  1685  031D                     	;# 
  1686  031E                     	;# 
  1687  0394                     	;# 
  1688  0395                     	;# 
  1689  0396                     	;# 
  1690  0415                     	;# 
  1691  0416                     	;# 
  1692  0417                     	;# 
  1693  041C                     	;# 
  1694  041D                     	;# 
  1695  041E                     	;# 
  1696  0791                     	;# 
  1697  0792                     	;# 
  1698  0793                     	;# 
  1699  0794                     	;# 
  1700  0795                     	;# 
  1701  0798                     	;# 
  1702  0799                     	;# 
  1703  07A0                     	;# 
  1704  07A1                     	;# 
  1705  07A3                     	;# 
  1706  07A4                     	;# 
  1707  07A6                     	;# 
  1708  07A7                     	;# 
  1709  07A9                     	;# 
  1710  07AA                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722                           
  1723                           	psect	idataBANK0
  1724  0000                     __pidataBANK0:	
  1725                           
  1726                           	psect	idataBANK1
  1727  0000                     __pidataBANK1:	
  1728                           
  1729                           	psect	idataBANK2
  1730  0000                     __pidataBANK2:	
  1731                           
  1732                           	psect	stringtext1
  1733  1800                     __pstringtext1:	
  1734  1800                     _PWM_trans_table:	
  1735  1800  346E               	retlw	110
  1736  1801  346E               	retlw	110
  1737  1802  346E               	retlw	110
  1738  1803  3400               	retlw	0
  1739  1804  3400               	retlw	0
  1740  1805  3400               	retlw	0
  1741  1806  3400               	retlw	0
  1742  1807  3400               	retlw	0
  1743  1808  3400               	retlw	0
  1744  1809  3400               	retlw	0
  1745  180A  34D3               	retlw	211
  1746  180B  34D3               	retlw	211
  1747  180C  34D3               	retlw	211
  1748  180D  34D0               	retlw	208
  1749  180E  34CE               	retlw	206
  1750  180F  34CC               	retlw	204
  1751  1810  34C9               	retlw	201
  1752  1811  34C7               	retlw	199
  1753  1812  34C5               	retlw	197
  1754  1813  34C3               	retlw	195
  1755  1814  34C1               	retlw	193
  1756  1815  34BF               	retlw	191
  1757  1816  34BD               	retlw	189
  1758  1817  34BB               	retlw	187
  1759  1818  34BA               	retlw	186
  1760  1819  34B8               	retlw	184
  1761  181A  34B6               	retlw	182
  1762  181B  34B4               	retlw	180
  1763  181C  34B2               	retlw	178
  1764  181D  34B1               	retlw	177
  1765  181E  34AF               	retlw	175
  1766  181F  34AD               	retlw	173
  1767  1820  34AC               	retlw	172
  1768  1821  34AA               	retlw	170
  1769  1822  34A9               	retlw	169
  1770  1823  34A7               	retlw	167
  1771  1824  34A6               	retlw	166
  1772  1825  34A4               	retlw	164
  1773  1826  34A3               	retlw	163
  1774  1827  34A2               	retlw	162
  1775  1828  34A0               	retlw	160
  1776  1829  349F               	retlw	159
  1777  182A  349D               	retlw	157
  1778  182B  349C               	retlw	156
  1779  182C  349B               	retlw	155
  1780  182D  349A               	retlw	154
  1781  182E  3498               	retlw	152
  1782  182F  3497               	retlw	151
  1783  1830  3496               	retlw	150
  1784  1831  3495               	retlw	149
  1785  1832  3494               	retlw	148
  1786  1833  3492               	retlw	146
  1787  1834  3491               	retlw	145
  1788  1835  3490               	retlw	144
  1789  1836  348F               	retlw	143
  1790  1837  348E               	retlw	142
  1791  1838  348D               	retlw	141
  1792  1839  348C               	retlw	140
  1793  183A  348B               	retlw	139
  1794  183B  348A               	retlw	138
  1795  183C  3489               	retlw	137
  1796  183D  3488               	retlw	136
  1797  183E  3487               	retlw	135
  1798  183F  3486               	retlw	134
  1799  1840  3485               	retlw	133
  1800  1841  3484               	retlw	132
  1801  1842  3483               	retlw	131
  1802  1843  3482               	retlw	130
  1803  1844  3481               	retlw	129
  1804  1845  3480               	retlw	128
  1805  1846  347F               	retlw	127
  1806  1847  347F               	retlw	127
  1807  1848  347E               	retlw	126
  1808  1849  347D               	retlw	125
  1809  184A  347C               	retlw	124
  1810  184B  347B               	retlw	123
  1811  184C  347A               	retlw	122
  1812  184D  347A               	retlw	122
  1813  184E  3479               	retlw	121
  1814  184F  3478               	retlw	120
  1815  1850  3477               	retlw	119
  1816  1851  3477               	retlw	119
  1817  1852  3476               	retlw	118
  1818  1853  3475               	retlw	117
  1819  1854  3474               	retlw	116
  1820  1855  3474               	retlw	116
  1821  1856  3473               	retlw	115
  1822  1857  3472               	retlw	114
  1823  1858  3472               	retlw	114
  1824  1859  3471               	retlw	113
  1825  185A  3470               	retlw	112
  1826  185B  3470               	retlw	112
  1827  185C  346F               	retlw	111
  1828  185D  346E               	retlw	110
  1829  185E  346E               	retlw	110
  1830  185F  346E               	retlw	110
  1831  1860  346E               	retlw	110
  1832  1861  346E               	retlw	110
  1833  1862  346E               	retlw	110
  1834  1863  346E               	retlw	110
  1835  1864  346E               	retlw	110
  1836  1865                     __end_of_PWM_trans_table:	
  1837                           
  1838                           	psect	nvBANK1
  1839  00EF                     __pnvBANK1:	
  1840  00EF                     _ui8_ResetMatlab:	
  1841  00EF                     	ds	1
  1842                           
  1843                           	psect	nvBANK3
  1844  01EC                     __pnvBANK3:	
  1845  01EC                     _ui16_Current_Thresh:	
  1846  01EC                     	ds	2
  1847  01EE                     _ui16_dryRun_Thresh:	
  1848  01EE                     	ds	2
  1849  0017                     _TMR1H	set	23
  1850  0016                     _TMR1L	set	22
  1851  001A                     _TMR2	set	26
  1852  0015                     _TMR0	set	21
  1853  0018                     _T1CON	set	24
  1854  000B                     _INTCON	set	11
  1855  001C                     _T2CON	set	28
  1856  001B                     _PR2	set	27
  1857  005D                     _TMR0IE	set	93
  1858  009D                     _CCP4IF	set	157
  1859  009C                     _CCP3IF	set	156
  1860  008A                     _CCP1IF	set	138
  1861  008D                     _RCIF	set	141
  1862  0090                     _CCP2IF	set	144
  1863  009E                     _CCP5IF	set	158
  1864  009B                     _TMR6IF	set	155
  1865  0089                     _TMR2IF	set	137
  1866  0099                     _TMR4IF	set	153
  1867  0088                     _TMR1IF	set	136
  1868  0075                     _RC5	set	117
  1869  005F                     _GIE	set	95
  1870  005E                     _PEIE	set	94
  1871  0097                     _WDTCON	set	151
  1872  0099                     _OSCCON	set	153
  1873  0093                     _PIE3	set	147
  1874  0092                     _PIE2	set	146
  1875  0095                     _OPTION_REG	set	149
  1876  008E                     _TRISC	set	142
  1877  008D                     _TRISB	set	141
  1878  008C                     _TRISA	set	140
  1879  0091                     _PIE1	set	145
  1880  009B                     _ADRESL	set	155
  1881  009C                     _ADRESH	set	156
  1882  009D                     _ADCON0	set	157
  1883  009E                     _ADCON1	set	158
  1884  049B                     _TMR6IE	set	1179
  1885  0499                     _TMR4IE	set	1177
  1886  0488                     _TMR1IE	set	1160
  1887  049E                     _CCP5IE	set	1182
  1888  049D                     _CCP4IE	set	1181
  1889  049C                     _CCP3IE	set	1180
  1890  048A                     _CCP1IE	set	1162
  1891  0489                     _TMR2IE	set	1161
  1892  0490                     _CCP2IE	set	1168
  1893  0495                     _C1IE	set	1173
  1894  04E9                     _GO_nDONE	set	1257
  1895  04E8                     _ADON	set	1256
  1896  010D                     _LATB	set	269
  1897  010C                     _LATA	set	268
  1898  010E                     _LATC	set	270
  1899  0112                     _CM1CON1	set	274
  1900  0111                     _CM1CON0	set	273
  1901  0117                     _FVRCON	set	279
  1902  0870                     _LATC0	set	2160
  1903  0874                     _LATC4	set	2164
  1904  0873                     _LATC3	set	2163
  1905  0871                     _LATC1	set	2161
  1906  0872                     _LATC2	set	2162
  1907  0869                     _LATB1	set	2153
  1908  086A                     _LATB2	set	2154
  1909  088E                     _C1OUT	set	2190
  1910  018D                     _ANSELB	set	397
  1911  018C                     _ANSELA	set	396
  1912  019A                     _TXREG	set	410
  1913  0199                     _RCREG	set	409
  1914  019F                     _BAUDCON	set	415
  1915  019D                     _RCSTA	set	413
  1916  019E                     _TXSTA	set	414
  1917  019C                     _SPBRGH	set	412
  1918  019B                     _SPBRG	set	411
  1919  0196                     _EECON2	set	406
  1920  0193                     _EEDATL	set	403
  1921  0193                     _EEDATA	set	403
  1922  0194                     _EEDATH	set	404
  1923  0195                     _EECON1	set	405
  1924  0192                     _EEADRH	set	402
  1925  0191                     _EEADRL	set	401
  1926  0CF3                     _SENDB	set	3315
  1927  0CA9                     _WR	set	3241
  1928  0CAE                     _CFGS	set	3246
  1929  0CAF                     _EEPGD	set	3247
  1930  0CA8                     _RD	set	3240
  1931  0CAA                     _WREN	set	3242
  1932  0292                     _CCPR1H	set	658
  1933  0299                     _CCPR2H	set	665
  1934  0298                     _CCPR2L	set	664
  1935  029A                     _CCP2CON	set	666
  1936  0291                     _CCPR1L	set	657
  1937  0293                     _CCP1CON	set	659
  1938  0295                     _CCP1AS	set	661
  1939  0294                     _PWM1CON	set	660
  1940  0296                     _PSTR1CON	set	662
  1941  14AF                     _CCP1ASE	set	5295
  1942  031D                     _CCPR5H	set	797
  1943  031C                     _CCPR5L	set	796
  1944  031E                     _CCP5CON	set	798
  1945  0319                     _CCPR4H	set	793
  1946  0318                     _CCPR4L	set	792
  1947  031A                     _CCP4CON	set	794
  1948  0312                     _CCPR3H	set	786
  1949  0311                     _CCPR3L	set	785
  1950  0313                     _CCP3CON	set	787
  1951  041C                     _TMR6	set	1052
  1952  0415                     _TMR4	set	1045
  1953  041E                     _T6CON	set	1054
  1954  0417                     _T4CON	set	1047
  1955                           
  1956                           ; #config settings
  1957  0000                     
  1958                           	psect	cinit
  1959  002D                     start_initialization:	
  1960  002D                     __initialization:	
  1961                           
  1962                           ;initializer for _ui8_selected_lid
  1963  002D  3080               	movlw	128
  1964  002E  00D9               	movwf	__pdataBANK0& (0+127)
  1965                           
  1966                           ; Initialize objects allocated to BANK1
  1967  002F  0021               	movlb	1	; select bank1
  1968                           
  1969                           ;initializer for _ui16_I_cal_Ph3
  1970  0030  3001               	movlw	1
  1971  0031  00E8               	movwf	__pdataBANK1& (0+127)
  1972  0032  01E9               	clrf	(__pdataBANK1+1)& (0+127)
  1973                           
  1974                           ;initializer for _ui16_I_cal_Ph2
  1975  0033  00EA               	movwf	(__pdataBANK1+2)& (0+127)
  1976  0034  01EB               	clrf	(__pdataBANK1+3)& (0+127)
  1977                           
  1978                           ;initializer for _ui16_I_cal_Ph1
  1979  0035  00EC               	movwf	(__pdataBANK1+4)& (0+127)
  1980  0036  01ED               	clrf	(__pdataBANK1+5)& (0+127)
  1981                           
  1982                           ;initializer for _wkpoint
  1983  0037  00EE               	movwf	(__pdataBANK1+6)& (0+127)
  1984                           
  1985                           ; Initialize objects allocated to BANK2
  1986  0038  0022               	movlb	2	; select bank2
  1987                           
  1988                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  1989  0039  3080               	movlw	128
  1990  003A  00E8               	movwf	__pdataBANK2& (0+127)
  1991  003B  3038               	movlw	56
  1992  003C  00E9               	movwf	(__pdataBANK2+1)& (0+127)
  1993  003D  3001               	movlw	1
  1994  003E  00EA               	movwf	(__pdataBANK2+2)& (0+127)
  1995  003F  01EB               	clrf	(__pdataBANK2+3)& (0+127)
  1996                           
  1997                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  1998  0040  00EC               	movwf	(__pdataBANK2+4)& (0+127)
  1999                           
  2000                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  2001  0041  00ED               	movwf	(__pdataBANK2+5)& (0+127)
  2002                           
  2003                           ;initializer for _ui8_failure
  2004  0042  3007               	movlw	7
  2005  0043  00EE               	movwf	(__pdataBANK2+6)& (0+127)
  2006                           
  2007                           ;initializer for _ict_stamp
  2008  0044  3001               	movlw	1
  2009  0045  00EF               	movwf	(__pdataBANK2+7)& (0+127)
  2010  0046  304C               	movlw	low __pbssBANK0
  2011                           
  2012                           ; Clear objects allocated to BITCOMMON
  2013  0047  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2014                           
  2015                           ; Clear objects allocated to COMMON
  2016  0048  01FA               	clrf	__pbssCOMMON& (0+127)
  2017                           
  2018                           ; Clear objects allocated to BANK0
  2019  0049  0084               	movwf	4
  2020  004A  3000               	movlw	high __pbssBANK0
  2021  004B  0085               	movwf	5
  2022  004C  300D               	movlw	13
  2023  004D  3187  2770  3180   	fcall	clear_ram0
  2024                           
  2025                           ; Clear objects allocated to BANK1
  2026  0050  30A0               	movlw	low __pbssBANK1
  2027  0051  0084               	movwf	4
  2028  0052  3000               	movlw	high __pbssBANK1
  2029  0053  0085               	movwf	5
  2030  0054  3048               	movlw	72
  2031  0055  3187  2770  3180   	fcall	clear_ram0
  2032                           
  2033                           ; Clear objects allocated to BANK2
  2034  0058  3020               	movlw	low __pbssBANK2
  2035  0059  0084               	movwf	4
  2036  005A  3001               	movlw	high __pbssBANK2
  2037  005B  0085               	movwf	5
  2038  005C  3048               	movlw	72
  2039  005D  3187  2770  3180   	fcall	clear_ram0
  2040                           
  2041                           ; Clear objects allocated to BANK3
  2042  0060  30A0               	movlw	low __pbssBANK3
  2043  0061  0084               	movwf	4
  2044  0062  3001               	movlw	high __pbssBANK3
  2045  0063  0085               	movwf	5
  2046  0064  304C               	movlw	76
  2047  0065  3187  2770  3180   	fcall	clear_ram0
  2048                           
  2049                           ; Clear objects allocated to BANK4
  2050  0068  3040               	movlw	low __pbssBANK4
  2051  0069  0084               	movwf	4
  2052  006A  3002               	movlw	high __pbssBANK4
  2053  006B  0085               	movwf	5
  2054  006C  301B               	movlw	27
  2055  006D  3187  2770  3180   	fcall	clear_ram0
  2056  0070                     end_of_initialization:	
  2057                           ;End of C runtime variable initialization code
  2058                           
  2059  0070                     __end_of__initialization:	
  2060  0070  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2061  0071  0020               	movlb	0
  2062  0072  2873               	ljmp	_main	;jump to C main() function
  2063  0073                     __pmaintext:	
  2064 ;;
  2065 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2066 ;;
  2067 ;; *************** function _main *****************
  2068 ;; Defined at:
  2069 ;;		line 630 in file "../main.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : B1F/0
  2080 ;;		On exit  : 1F/1
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2083 ;;      Params:         0       0       0       0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0       0
  2085 ;;      Temps:          0       4       0       0       0       0       0       0
  2086 ;;      Totals:         0       4       0       0       0       0       0       0
  2087 ;;Total ram usage:        4 bytes
  2088 ;; Hardware stack levels required when called:    9
  2089 ;; This function calls:
  2090 ;;		_BVH2_Appl_Layer
  2091 ;;		_EOL
  2092 ;;		_Get_Analog_Value
  2093 ;;		_InitMotorRun
  2094 ;;		_InitMotorStop
  2095 ;;		_Receive_Diag
  2096 ;;		_SetDiagAlarm
  2097 ;;		___awdiv
  2098 ;;		_clear_timer
  2099 ;;		_read_eeprom_data
  2100 ;;		_system_init
  2101 ;; This function is called by:
  2102 ;;		Startup code after reset
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _main
  2108  0073                     _main:	
  2109                           
  2110                           ;main.c: 642: system_init( );
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2114  0073  2402  3180         	fcall	_system_init
  2115                           
  2116                           ;main.c: 643: clear_timer( 4 );
  2117  0075  3004               	movlw	4
  2118  0076  2475  3180         	fcall	_clear_timer
  2119                           
  2120                           ;main.c: 644: ui8_lastTaskvalue = 0;
  2121  0078  0022               	movlb	2	; select bank2
  2122  0079  01D2               	clrf	_ui8_lastTaskvalue^(0+256)
  2123  007A                     l13562:	
  2124                           
  2125                           ;main.c: 697: {
  2126                           ;main.c: 699: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  2127  007A  0021               	movlb	1	; select bank1
  2128  007B  0855               	movf	_ui8_Task_Cont1ms^(0+128),w
  2129  007C  0020               	movlb	0	; select bank0
  2130  007D  00C8               	movwf	??_main
  2131  007E  01C9               	clrf	??_main+1
  2132  007F  0849               	movf	??_main+1,w
  2133  0080  00CB               	movwf	??_main+3
  2134  0081  0022               	movlb	2	; select bank2
  2135  0082  0852               	movf	_ui8_lastTaskvalue^(0+256),w
  2136  0083  0020               	movlb	0	; select bank0
  2137  0084  0248               	subwf	??_main,w
  2138  0085  00CA               	movwf	??_main+2
  2139  0086  1C03               	skipc
  2140  0087  03CB               	decf	??_main+3,f
  2141  0088  044B               	iorwf	??_main+3,w
  2142  0089  1903               	btfsc	3,2
  2143  008A  287A               	goto	l13562
  2144                           
  2145                           ;main.c: 701: {
  2146                           ;main.c: 707: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  2147  008B  0021               	movlb	1	; select bank1
  2148  008C  0855               	movf	_ui8_Task_Cont1ms^(0+128),w
  2149  008D  0022               	movlb	2	; select bank2
  2150  008E  00D2               	movwf	_ui8_lastTaskvalue^(0+256)
  2151                           
  2152                           ;main.c: 710: ui8_Task_Cont3ms++;
  2153  008F  0AD4               	incf	_ui8_Task_Cont3ms^(0+256),f
  2154                           
  2155                           ;main.c: 711: ui8_Task_Cont5ms++;
  2156  0090  0AD3               	incf	_ui8_Task_Cont5ms^(0+256),f
  2157                           
  2158                           ;main.c: 712: ui8_Task_Cont100ms++;
  2159  0091  0021               	movlb	1	; select bank1
  2160  0092  0ACC               	incf	_ui8_Task_Cont100ms^(0+128),f
  2161                           
  2162                           ;main.c: 771: if( ui8_error_Flags.bits.B1 == 1)
  2163  0093  1CE6               	btfss	_ui8_error_Flags^(0+128),1
  2164  0094  289A               	goto	l13576
  2165                           
  2166                           ;main.c: 773: {
  2167                           ;main.c: 780: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 2;
  2168  0095  30C8               	movlw	200
  2169  0096  0020               	movlb	0	; select bank0
  2170  0097  009B               	movwf	27	;volatile
  2171                           
  2172                           ;main.c: 781: ui8_duty_cycle_BLDC = 100*5/4;
  2173  0098  307D               	movlw	125
  2174  0099  289D               	goto	L1
  2175  009A                     l13576:	
  2176                           ;main.c: 829: }
  2177                           
  2178                           
  2179                           ;main.c: 832: else
  2180                           ;main.c: 833: {
  2181                           ;main.c: 840: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  2182  009A  307D               	movlw	125
  2183  009B  0020               	movlb	0	; select bank0
  2184  009C  009B               	movwf	27	;volatile
  2185  009D                     L1:	
  2186                           
  2187                           ;main.c: 841: ui8_duty_cycle_BLDC = 100*5/4;
  2188  009D  00D6               	movwf	_ui8_duty_cycle_BLDC
  2189                           
  2190                           ;main.c: 891: }
  2191                           ;main.c: 947: Get_Analog_Value( );
  2192  009E  22A2  3180         	fcall	_Get_Analog_Value
  2193                           
  2194                           ;main.c: 993: if( ui8_Task_Cont3ms > 2 )
  2195  00A0  3003               	movlw	3
  2196  00A1  0022               	movlb	2	; select bank2
  2197  00A2  0254               	subwf	_ui8_Task_Cont3ms^(0+256),w
  2198  00A3  1803               	btfsc	3,0
  2199                           
  2200                           ;main.c: 995: {
  2201                           ;main.c: 997: ui8_Task_Cont3ms = 0;
  2202  00A4  01D4               	clrf	_ui8_Task_Cont3ms^(0+256)
  2203                           
  2204                           ;main.c: 1032: }
  2205                           ;main.c: 1038: if( ui8_Task_Cont5ms > 4 )
  2206  00A5  3005               	movlw	5
  2207  00A6  0253               	subwf	_ui8_Task_Cont5ms^(0+256),w
  2208  00A7  1C03               	skipc
  2209  00A8  296D               	goto	l13642
  2210                           
  2211                           ;main.c: 1040: {
  2212                           ;main.c: 1044: ui8_Task_Cont5ms = 0;
  2213  00A9  01D3               	clrf	_ui8_Task_Cont5ms^(0+256)
  2214  00AA  0064               	clrwdt	;# 
  2215                           
  2216                           ;main.c: 1053: ui8_PWM_dc_mat = 160;
  2217  00AB  30A0               	movlw	160
  2218  00AC  0021               	movlb	1	; select bank1
  2219  00AD  00CF               	movwf	_ui8_PWM_dc_mat^(0+128)
  2220                           
  2221                           ;main.c: 1054: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  2222  00AE  0022               	movlb	2	; select bank2
  2223  00AF  0824               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
  2224  00B0  00A6               	movwf	(_ui16_PWM_Freq_mat+1)^(0+256)
  2225  00B1  0823               	movf	_ui16_PWM_Freq_In^(0+256),w
  2226  00B2  00A5               	movwf	_ui16_PWM_Freq_mat^(0+256)
  2227                           
  2228                           ;main.c: 1055: ui16_Speed_mat = ui16_speed_fil;
  2229  00B3  0021               	movlb	1	; select bank1
  2230  00B4  0835               	movf	(_ui16_speed_fil+1)^(0+128),w
  2231  00B5  0020               	movlb	0	; select bank0
  2232  00B6  00CD               	movwf	_ui16_Speed_mat+1
  2233  00B7  0021               	movlb	1	; select bank1
  2234  00B8  0834               	movf	_ui16_speed_fil^(0+128),w
  2235  00B9  0020               	movlb	0	; select bank0
  2236  00BA  00CC               	movwf	_ui16_Speed_mat
  2237                           
  2238                           ;main.c: 1056: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  2239  00BB  0023               	movlb	3	; select bank3
  2240  00BC  085F               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  2241  00BD  00CF               	movwf	(_ui16_mat_inpTemp+1)^(0+384)
  2242  00BE  085E               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  2243  00BF  00CE               	movwf	_ui16_mat_inpTemp^(0+384)
  2244                           
  2245                           ;main.c: 1057: ui8_Ki_mat = 5;
  2246  00C0  3005               	movlw	5
  2247  00C1  00CC               	movwf	_ui8_Ki_mat^(0+384)
  2248  00C2  01CD               	clrf	(_ui8_Ki_mat+1)^(0+384)
  2249                           
  2250                           ;main.c: 1058: ui8_Kp_mat = 0;
  2251  00C3  0022               	movlb	2	; select bank2
  2252  00C4  01DA               	clrf	_ui8_Kp_mat^(0+256)
  2253                           
  2254                           ;main.c: 1068: if( ui8_error_Flags.bits.B1 == 1 )
  2255  00C5  0021               	movlb	1	; select bank1
  2256  00C6  1CE6               	btfss	_ui8_error_Flags^(0+128),1
  2257  00C7  28E0               	goto	l13604
  2258                           
  2259                           ;main.c: 1070: {
  2260                           ;main.c: 1073: ui16_Speed_demand_mat = ( PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] )>>1;
  2261  00C8  364F               	lsrf	_ui8_PWM_dc_mat^(0+128),w
  2262  00C9  23C3  3180         	fcall	PL6	;call to abstracted procedure
  2263  00CB  3689               	lsrf	9,f
  2264  00CC  0023               	movlb	3	; select bank3
  2265  00CD  00CA               	movwf	_ui16_Speed_demand_mat^(0+384)
  2266  00CE  305F               	movlw	low ((_PWM_trans_table+95)| (0+32768))
  2267  00CF  01CB               	clrf	(_ui16_Speed_demand_mat+1)^(0+384)
  2268                           
  2269                           ;main.c: 1076: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] )>>1;
  2270  00D0  0084               	movwf	4
  2271  00D1  3098               	movlw	high ((_PWM_trans_table+95)| (0+32768))
  2272  00D2  0085               	movwf	5
  2273  00D3  0800               	movf	0,w	;code access
  2274  00D4  3689               	lsrf	9,f
  2275  00D5  00C8               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  2276  00D6  300B               	movlw	low ((_PWM_trans_table+11)| (0+32768))
  2277  00D7  01C9               	clrf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  2278                           
  2279                           ;main.c: 1079: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] )>>1;
  2280  00D8  0084               	movwf	4
  2281  00D9  3098               	movlw	high ((_PWM_trans_table+11)| (0+32768))
  2282  00DA  0085               	movwf	5
  2283  00DB  0800               	movf	0,w	;code access
  2284  00DC  3689               	lsrf	9,f
  2285  00DD  00C6               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  2286  00DE  01C7               	clrf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  2287                           
  2288                           ;main.c: 1081: }
  2289  00DF  2911               	goto	l13606
  2290  00E0                     l13604:	
  2291                           
  2292                           ;main.c: 1084: else
  2293                           ;main.c: 1085: {
  2294                           ;main.c: 1088: ui16_Speed_demand_mat = PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] * 4 / 5;
  2295  00E0  364F               	lsrf	_ui8_PWM_dc_mat^(0+128),w
  2296  00E1  23C3  3180         	fcall	PL6	;call to abstracted procedure
  2297  00E3  0020               	movlb	0	; select bank0
  2298  00E4  00B2               	movwf	___awdiv@dividend
  2299  00E5  3005               	movlw	5
  2300  00E6  01B3               	clrf	___awdiv@dividend+1
  2301  00E7  35B2               	lslf	___awdiv@dividend,f
  2302  00E8  0DB3               	rlf	___awdiv@dividend+1,f
  2303  00E9  35B2               	lslf	___awdiv@dividend,f
  2304  00EA  0DB3               	rlf	___awdiv@dividend+1,f
  2305  00EB  00B0               	movwf	___awdiv@divisor
  2306  00EC  01B1               	clrf	___awdiv@divisor+1
  2307  00ED  2194  3180         	fcall	___awdiv
  2308  00EF  0831               	movf	?___awdiv+1,w
  2309  00F0  0023               	movlb	3	; select bank3
  2310  00F1  00CB               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  2311  00F2  0020               	movlb	0	; select bank0
  2312  00F3  0830               	movf	?___awdiv,w
  2313  00F4  0023               	movlb	3	; select bank3
  2314  00F5  00CA               	movwf	_ui16_Speed_demand_mat^(0+384)
  2315                           
  2316                           ;main.c: 1091: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] ) * 4 / 5;
  2317  00F6  305F               	movlw	low ((_PWM_trans_table+95)| (0+32768))
  2318  00F7  0084               	movwf	4
  2319  00F8  3098               	movlw	high ((_PWM_trans_table+95)| (0+32768))
  2320  00F9  23CB  3180         	fcall	PL24	;call to abstracted procedure
  2321  00FB  2194  3180         	fcall	___awdiv
  2322  00FD  0831               	movf	?___awdiv+1,w
  2323  00FE  0023               	movlb	3	; select bank3
  2324  00FF  00C9               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  2325  0100  0020               	movlb	0	; select bank0
  2326  0101  0830               	movf	?___awdiv,w
  2327  0102  0023               	movlb	3	; select bank3
  2328  0103  00C8               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  2329                           
  2330                           ;main.c: 1094: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] ) * 4 / 5;
  2331  0104  300B               	movlw	low ((_PWM_trans_table+11)| (0+32768))
  2332  0105  0084               	movwf	4
  2333  0106  3098               	movlw	high ((_PWM_trans_table+11)| (0+32768))
  2334  0107  23CB  3180         	fcall	PL24	;call to abstracted procedure
  2335  0109  2194               	fcall	___awdiv
  2336  010A  0831               	movf	?___awdiv+1,w
  2337  010B  0023               	movlb	3	; select bank3
  2338  010C  00C7               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  2339  010D  0020               	movlb	0	; select bank0
  2340  010E  0830               	movf	?___awdiv,w
  2341  010F  0023               	movlb	3	; select bank3
  2342  0110  00C6               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  2343  0111                     l13606:	
  2344                           
  2345                           ;main.c: 1096: }
  2346                           ;main.c: 1131: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  2347  0111  0022               	movlb	2	; select bank2
  2348  0112  0836               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  2349  0113  0020               	movlb	0	; select bank0
  2350  0114  00C9               	movwf	??_main+1
  2351  0115  0022               	movlb	2	; select bank2
  2352  0116  0835               	movf	_ui16_fir_Bat_mittel^(0+256),w
  2353  0117  0020               	movlb	0	; select bank0
  2354  0118  00C8               	movwf	??_main
  2355  0119  36C9               	lsrf	??_main+1,f
  2356  011A  0CC8               	rrf	??_main,f
  2357  011B  36C9               	lsrf	??_main+1,f
  2358  011C  0CC8               	rrf	??_main,f
  2359  011D  0848               	movf	??_main,w
  2360  011E  0021               	movlb	1	; select bank1
  2361  011F  00B2               	movwf	_ui8_BattVolt_mat^(0+128)
  2362  0120  01B3               	clrf	(_ui8_BattVolt_mat+1)^(0+128)
  2363                           
  2364                           ;main.c: 1132: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  2365  0121  0022               	movlb	2	; select bank2
  2366  0122  0834               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  2367  0123  0021               	movlb	1	; select bank1
  2368  0124  00B1               	movwf	(_ui16_mat_Current+1)^(0+128)
  2369  0125  0022               	movlb	2	; select bank2
  2370  0126  0833               	movf	_ui16_fir_IPhase_mean^(0+256),w
  2371  0127  0021               	movlb	1	; select bank1
  2372  0128  00B0               	movwf	_ui16_mat_Current^(0+128)
  2373                           
  2374                           ;main.c: 1133: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  2375  0129  3000               	movlw	0
  2376  012A  187A               	btfsc	_MotorFlags,0
  2377  012B  3001               	movlw	1
  2378  012C  00CE               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  2379                           
  2380                           ;main.c: 1144: bool_ControlLoopMode = 0;
  2381  012D  01CD               	clrf	_bool_ControlLoopMode^(0+128)
  2382                           
  2383                           ;main.c: 1152: BVH2_Appl_Layer( );
  2384  012E  3188  2065  3180   	fcall	_BVH2_Appl_Layer
  2385                           
  2386                           ;main.c: 1155: ui8_ResetMatlab = 0;
  2387  0131  0021               	movlb	1	; select bank1
  2388  0132  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  2389                           
  2390                           ;main.c: 1161: if( ui8_duty_cycle_mat == 0 )
  2391  0133  0022               	movlb	2	; select bank2
  2392  0134  0859               	movf	_ui8_duty_cycle_mat^(0+256),w
  2393  0135  1D03               	btfss	3,2
  2394  0136  293A               	goto	l13622
  2395                           
  2396                           ;main.c: 1163: {
  2397                           ;main.c: 1165: InitMotorStop( );
  2398  0137  2296  3180         	fcall	_InitMotorStop
  2399                           
  2400                           ;main.c: 1168: }
  2401  0139  293C               	goto	l13624
  2402  013A                     l13622:	
  2403                           
  2404                           ;main.c: 1171: else
  2405                           ;main.c: 1172: {
  2406                           ;main.c: 1174: InitMotorRun( );
  2407  013A  23A3  3180         	fcall	_InitMotorRun
  2408  013C                     l13624:	
  2409                           
  2410                           ;main.c: 1177: }
  2411                           ;main.c: 1184: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  2412  013C  0022               	movlb	2	; select bank2
  2413  013D  0858               	movf	_bool_PWMin_err_Alarm^(0+256),w
  2414  013E  3901               	andlw	1
  2415  013F  0021               	movlb	1	; select bank1
  2416  0140  1066               	bcf	_ui8_error_Flags^(0+128),0
  2417  0141  1D03               	skipz
  2418  0142  1466               	bsf	_ui8_error_Flags^(0+128),0
  2419                           
  2420                           ;main.c: 1185: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  2421  0143  085B               	movf	_bool_CPU_TempAlarm^(0+128),w
  2422  0144  3901               	andlw	1
  2423  0145  10E6               	bcf	_ui8_error_Flags^(0+128),1
  2424  0146  1D03               	skipz
  2425  0147  14E6               	bsf	_ui8_error_Flags^(0+128),1
  2426                           
  2427                           ;main.c: 1186: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  2428  0148  0022               	movlb	2	; select bank2
  2429  0149  0857               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  2430  014A  3901               	andlw	1
  2431  014B  0021               	movlb	1	; select bank1
  2432  014C  13E6               	bcf	_ui8_error_Flags^(0+128),7
  2433  014D  1D03               	skipz
  2434  014E  17E6               	bsf	_ui8_error_Flags^(0+128),7
  2435                           
  2436                           ;main.c: 1187: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  2437  014F  0858               	movf	_bool_HighCurrentAlarm^(0+128),w
  2438  0150  3901               	andlw	1
  2439  0151  1166               	bcf	_ui8_error_Flags^(0+128),2
  2440  0152  1D03               	skipz
  2441  0153  1566               	bsf	_ui8_error_Flags^(0+128),2
  2442                           
  2443                           ;main.c: 1188: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  2444  0154  0859               	movf	_bool_MotorStalled^(0+128),w
  2445  0155  3901               	andlw	1
  2446  0156  11E6               	bcf	_ui8_error_Flags^(0+128),3
  2447  0157  1D03               	skipz
  2448  0158  15E6               	bsf	_ui8_error_Flags^(0+128),3
  2449                           
  2450                           ;main.c: 1189: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  2451  0159  085A               	movf	_bool_DryRunningAlarm^(0+128),w
  2452  015A  3901               	andlw	1
  2453  015B  1266               	bcf	_ui8_error_Flags^(0+128),4
  2454  015C  1D03               	skipz
  2455  015D  1666               	bsf	_ui8_error_Flags^(0+128),4
  2456                           
  2457                           ;main.c: 1190: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  2458  015E  0022               	movlb	2	; select bank2
  2459  015F  0856               	movf	_bool_UbatAlarm^(0+256),w
  2460  0160  3901               	andlw	1
  2461  0161  0021               	movlb	1	; select bank1
  2462  0162  1366               	bcf	_ui8_error_Flags^(0+128),6
  2463  0163  1D03               	skipz
  2464  0164  1766               	bsf	_ui8_error_Flags^(0+128),6
  2465                           
  2466                           ;main.c: 1191: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  2467  0165  0022               	movlb	2	; select bank2
  2468  0166  0855               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  2469  0167  3901               	andlw	1
  2470  0168  0021               	movlb	1	; select bank1
  2471  0169  12E6               	bcf	_ui8_error_Flags^(0+128),5
  2472  016A  1D03               	skipz
  2473  016B  16E6               	bsf	_ui8_error_Flags^(0+128),5
  2474                           
  2475                           ;main.c: 1196: MotorFlags.bits.B0 = 0;
  2476  016C  107A               	bcf	_MotorFlags,0
  2477  016D                     l13642:	
  2478                           
  2479                           ;main.c: 1252: }
  2480                           ;main.c: 1258: if( ui8_Task_Cont100ms == 25 )
  2481  016D  3019               	movlw	25
  2482  016E  0021               	movlb	1	; select bank1
  2483  016F  064C               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2484  0170  1D03               	btfss	3,2
  2485  0171  297E               	goto	l13652
  2486                           
  2487                           ;main.c: 1260: {
  2488                           ;main.c: 1271: SetDiagAlarm( );
  2489  0172  2379  3180         	fcall	_SetDiagAlarm
  2490                           
  2491                           ;main.c: 1310: if ((read_eeprom_data(0x55)==0x55) || (RC5 == 0))
  2492  0174  3055               	movlw	85
  2493  0175  225D  3180         	fcall	_read_eeprom_data
  2494  0177  3A55               	xorlw	85
  2495  0178  1D03               	btfss	3,2
  2496  0179  1E8E               	btfss	14,5	;volatile
  2497  017A  297E               	goto	l13652
  2498                           
  2499                           ;main.c: 1319: else
  2500                           ;main.c: 1320: {
  2501                           ;main.c: 1323: Receive_Diag(0x11);
  2502  017B  3011               	movlw	17
  2503  017C  2312  3180         	fcall	_Receive_Diag
  2504  017E                     l13652:	
  2505                           
  2506                           ;main.c: 1327: }
  2507                           ;main.c: 1335: }
  2508                           ;main.c: 1341: if( ui8_Task_Cont100ms == 37 )
  2509  017E  3025               	movlw	37
  2510  017F  0021               	movlb	1	; select bank1
  2511  0180  064C               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2512  0181  1D03               	btfss	3,2
  2513  0182  298D               	goto	l13664
  2514                           
  2515                           ;main.c: 1343: {
  2516                           ;main.c: 1349: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  2517  0183  3055               	movlw	85
  2518  0184  225D  3180         	fcall	_read_eeprom_data
  2519  0186  3A55               	xorlw	85
  2520  0187  1D03               	btfss	3,2
  2521  0188  1E8E               	btfss	14,5	;volatile
  2522  0189  298D               	goto	l13664
  2523                           
  2524                           ;main.c: 1358: else
  2525                           ;main.c: 1359: {
  2526                           ;main.c: 1362: EOL();
  2527  018A  3190  2095  3180   	fcall	_EOL
  2528  018D                     l13664:	
  2529                           
  2530                           ;main.c: 1473: }
  2531                           ;main.c: 1479: if( ui8_Task_Cont100ms > 100 )
  2532  018D  3065               	movlw	101
  2533  018E  0021               	movlb	1	; select bank1
  2534  018F  024C               	subwf	_ui8_Task_Cont100ms^(0+128),w
  2535  0190  1803               	btfsc	3,0
  2536                           
  2537                           ;main.c: 1481: {
  2538                           ;main.c: 1485: ui8_Task_Cont100ms = 0;
  2539  0191  01CC               	clrf	_ui8_Task_Cont100ms^(0+128)
  2540                           
  2541                           ;main.c: 1525: }
  2542                           ;main.c: 1553: bool_start_demand_mat = 0;
  2543  0192  01E5               	clrf	_bool_start_demand_mat^(0+128)
  2544                           
  2545                           ;main.c: 1559: }
  2546  0193  287A               	goto	l13562
  2547  0194                     __end_of_main:	
  2548  0194                     __ptext16:	
  2549 ;; *************** function ___awdiv *****************
  2550 ;; Defined at:
  2551 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  divisor         2   16[BANK0 ] int 
  2554 ;;  dividend        2   18[BANK0 ] int 
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;  quotient        2   22[BANK0 ] int 
  2557 ;;  sign            1   21[BANK0 ] unsigned char 
  2558 ;;  counter         1   20[BANK0 ] unsigned char 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  2   16[BANK0 ] int 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0
  2563 ;; Tracked objects:
  2564 ;;		On entry : 1F/0
  2565 ;;		On exit  : 1F/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2568 ;;      Params:         0       4       0       0       0       0       0       0
  2569 ;;      Locals:         0       4       0       0       0       0       0       0
  2570 ;;      Temps:          0       0       0       0       0       0       0       0
  2571 ;;      Totals:         0       8       0       0       0       0       0       0
  2572 ;;Total ram usage:        8 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    4
  2575 ;; This function calls:
  2576 ;;		Nothing
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function ___awdiv
  2584  0194                     ___awdiv:	
  2585                           
  2586                           ;incstack = 0
  2587                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2588  0194  01B5               	clrf	___awdiv@sign
  2589  0195  1FB1               	btfss	___awdiv@divisor+1,7
  2590  0196  299E               	goto	l9064
  2591  0197  09B0               	comf	___awdiv@divisor,f
  2592  0198  09B1               	comf	___awdiv@divisor+1,f
  2593  0199  0AB0               	incf	___awdiv@divisor,f
  2594  019A  1903               	skipnz
  2595  019B  0AB1               	incf	___awdiv@divisor+1,f
  2596  019C  01B5               	clrf	___awdiv@sign
  2597  019D  0AB5               	incf	___awdiv@sign,f
  2598  019E                     l9064:	
  2599  019E  1FB3               	btfss	___awdiv@dividend+1,7
  2600  019F  29A7               	goto	l9070
  2601  01A0  09B2               	comf	___awdiv@dividend,f
  2602  01A1  09B3               	comf	___awdiv@dividend+1,f
  2603  01A2  0AB2               	incf	___awdiv@dividend,f
  2604  01A3  1903               	skipnz
  2605  01A4  0AB3               	incf	___awdiv@dividend+1,f
  2606  01A5  3001               	movlw	1
  2607  01A6  06B5               	xorwf	___awdiv@sign,f
  2608  01A7                     l9070:	
  2609  01A7  01B6               	clrf	___awdiv@quotient
  2610  01A8  01B7               	clrf	___awdiv@quotient+1
  2611  01A9  0830               	movf	___awdiv@divisor,w
  2612  01AA  0431               	iorwf	___awdiv@divisor+1,w
  2613  01AB  1903               	btfsc	3,2
  2614  01AC  29C7               	goto	l9092
  2615  01AD  01B4               	clrf	___awdiv@counter
  2616  01AE                     L13:	
  2617  01AE  0AB4               	incf	___awdiv@counter,f
  2618  01AF  1BB1               	btfsc	___awdiv@divisor+1,7
  2619  01B0  29B4               	goto	l9080
  2620  01B1  35B0               	lslf	___awdiv@divisor,f
  2621  01B2  0DB1               	rlf	___awdiv@divisor+1,f
  2622  01B3  29AE               	goto	L13
  2623  01B4                     l9080:	
  2624  01B4  35B6               	lslf	___awdiv@quotient,f
  2625  01B5  0DB7               	rlf	___awdiv@quotient+1,f
  2626  01B6  0831               	movf	___awdiv@divisor+1,w
  2627  01B7  0233               	subwf	___awdiv@dividend+1,w
  2628  01B8  1D03               	skipz
  2629  01B9  29BC               	goto	u7015
  2630  01BA  0830               	movf	___awdiv@divisor,w
  2631  01BB  0232               	subwf	___awdiv@dividend,w
  2632  01BC                     u7015:	
  2633  01BC  1C03               	skipc
  2634  01BD  29C3               	goto	l9088
  2635  01BE  0830               	movf	___awdiv@divisor,w
  2636  01BF  02B2               	subwf	___awdiv@dividend,f
  2637  01C0  0831               	movf	___awdiv@divisor+1,w
  2638  01C1  3BB3               	subwfb	___awdiv@dividend+1,f
  2639  01C2  1436               	bsf	___awdiv@quotient,0
  2640  01C3                     l9088:	
  2641  01C3  36B1               	lsrf	___awdiv@divisor+1,f
  2642  01C4  0CB0               	rrf	___awdiv@divisor,f
  2643  01C5  0BB4               	decfsz	___awdiv@counter,f
  2644  01C6  29B4               	goto	l9080
  2645  01C7                     l9092:	
  2646  01C7  0835               	movf	___awdiv@sign,w
  2647  01C8  1903               	btfsc	3,2
  2648  01C9  29CF               	goto	l9096
  2649  01CA  09B6               	comf	___awdiv@quotient,f
  2650  01CB  09B7               	comf	___awdiv@quotient+1,f
  2651  01CC  0AB6               	incf	___awdiv@quotient,f
  2652  01CD  1903               	skipnz
  2653  01CE  0AB7               	incf	___awdiv@quotient+1,f
  2654  01CF                     l9096:	
  2655  01CF  0837               	movf	___awdiv@quotient+1,w
  2656  01D0  00B1               	movwf	?___awdiv+1
  2657  01D1  0836               	movf	___awdiv@quotient,w
  2658  01D2  00B0               	movwf	?___awdiv
  2659  01D3  0008               	return
  2660  01D4                     __end_of___awdiv:	
  2661  01D4                     __ptext11:	
  2662 ;; *************** function _I_calibrationInit *****************
  2663 ;; Defined at:
  2664 ;;		line 174 in file "../main.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0, pclath, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 1F/3
  2675 ;;		On exit  : 1F/2
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2678 ;;      Params:         0       0       0       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0       0
  2680 ;;      Temps:          0       1       0       0       0       0       0       0
  2681 ;;      Totals:         0       1       0       0       0       0       0       0
  2682 ;;Total ram usage:        1 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    5
  2685 ;; This function calls:
  2686 ;;		_ADC_Read
  2687 ;;		_ADC_Wait
  2688 ;;		_read_eeprom_data
  2689 ;; This function is called by:
  2690 ;;		_system_init
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           
  2695                           ;psect for function _I_calibrationInit
  2696  01D4                     _I_calibrationInit:	
  2697                           
  2698                           ;main.c: 178: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  2699                           
  2700                           ;incstack = 0
  2701                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  2702  01D4  3003               	movlw	3
  2703  01D5  225D  3180         	fcall	_read_eeprom_data
  2704  01D7  3A00               	xorlw	0
  2705  01D8  1903               	skipnz
  2706  01D9  29EE               	goto	l10044
  2707  01DA  3003               	movlw	3
  2708  01DB  225D  3180         	fcall	_read_eeprom_data
  2709  01DD  3AFF               	xorlw	255
  2710  01DE  1903               	skipnz
  2711  01DF  29EE               	goto	l10044
  2712                           
  2713                           ;main.c: 180: {
  2714                           ;main.c: 182: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03 
      +                          );
  2715  01E0  3003               	movlw	3
  2716  01E1  225D  3180         	fcall	_read_eeprom_data
  2717  01E3  00B3               	movwf	??_I_calibrationInit
  2718  01E4  3002               	movlw	2
  2719  01E5  225D  3180         	fcall	_read_eeprom_data
  2720  01E7  0021               	movlb	1	; select bank1
  2721  01E8  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  2722  01E9  0020               	movlb	0	; select bank0
  2723  01EA  0833               	movf	??_I_calibrationInit,w
  2724  01EB  0021               	movlb	1	; select bank1
  2725  01EC  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
  2726                           
  2727                           ;main.c: 185: }
  2728  01ED  29F2               	goto	l10046
  2729  01EE                     l10044:	
  2730                           
  2731                           ;main.c: 188: else
  2732                           ;main.c: 189: {
  2733                           ;main.c: 191: ui16_I_cal_Ph1 = 0x0100;
  2734  01EE  0021               	movlb	1	; select bank1
  2735  01EF  3001               	movlw	1
  2736  01F0  01EC               	clrf	_ui16_I_cal_Ph1^(0+128)
  2737  01F1  00ED               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
  2738  01F2                     l10046:	
  2739                           
  2740                           ;main.c: 194: }
  2741                           ;main.c: 197: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 0x05 ) != 0xFF)
  2742  01F2  3005               	movlw	5
  2743  01F3  225D  3180         	fcall	_read_eeprom_data
  2744  01F5  3A00               	xorlw	0
  2745  01F6  1903               	skipnz
  2746  01F7  2A0C               	goto	l10052
  2747  01F8  3005               	movlw	5
  2748  01F9  225D  3180         	fcall	_read_eeprom_data
  2749  01FB  3AFF               	xorlw	255
  2750  01FC  1903               	skipnz
  2751  01FD  2A0C               	goto	l10052
  2752                           
  2753                           ;main.c: 199: {
  2754                           ;main.c: 201: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05 
      +                          );
  2755  01FE  3005               	movlw	5
  2756  01FF  225D  3180         	fcall	_read_eeprom_data
  2757  0201  00B3               	movwf	??_I_calibrationInit
  2758  0202  3004               	movlw	4
  2759  0203  225D  3180         	fcall	_read_eeprom_data
  2760  0205  0021               	movlb	1	; select bank1
  2761  0206  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  2762  0207  0020               	movlb	0	; select bank0
  2763  0208  0833               	movf	??_I_calibrationInit,w
  2764  0209  0021               	movlb	1	; select bank1
  2765  020A  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  2766                           
  2767                           ;main.c: 204: }
  2768  020B  2A10               	goto	l10054
  2769  020C                     l10052:	
  2770                           
  2771                           ;main.c: 207: else
  2772                           ;main.c: 208: {
  2773                           ;main.c: 210: ui16_I_cal_Ph2 = 0x0100;
  2774  020C  0021               	movlb	1	; select bank1
  2775  020D  3001               	movlw	1
  2776  020E  01EA               	clrf	_ui16_I_cal_Ph2^(0+128)
  2777  020F  00EB               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
  2778  0210                     l10054:	
  2779                           
  2780                           ;main.c: 213: }
  2781                           ;main.c: 216: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 0x07 ) != 0xFF)
  2782  0210  3007               	movlw	7
  2783  0211  225D  3180         	fcall	_read_eeprom_data
  2784  0213  3A00               	xorlw	0
  2785  0214  1903               	skipnz
  2786  0215  2A2A               	goto	l10060
  2787  0216  3007               	movlw	7
  2788  0217  225D  3180         	fcall	_read_eeprom_data
  2789  0219  3AFF               	xorlw	255
  2790  021A  1903               	skipnz
  2791  021B  2A2A               	goto	l10060
  2792                           
  2793                           ;main.c: 218: {
  2794                           ;main.c: 220: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07 
      +                          );
  2795  021C  3007               	movlw	7
  2796  021D  225D  3180         	fcall	_read_eeprom_data
  2797  021F  00B3               	movwf	??_I_calibrationInit
  2798  0220  3006               	movlw	6
  2799  0221  225D  3180         	fcall	_read_eeprom_data
  2800  0223  0021               	movlb	1	; select bank1
  2801  0224  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  2802  0225  0020               	movlb	0	; select bank0
  2803  0226  0833               	movf	??_I_calibrationInit,w
  2804  0227  0021               	movlb	1	; select bank1
  2805  0228  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
  2806                           
  2807                           ;main.c: 222: }
  2808  0229  2A2E               	goto	l10062
  2809  022A                     l10060:	
  2810                           
  2811                           ;main.c: 225: else
  2812                           ;main.c: 226: {
  2813                           ;main.c: 228: ui16_I_cal_Ph3 = 0x0100;
  2814  022A  0021               	movlb	1	; select bank1
  2815  022B  3001               	movlw	1
  2816  022C  01E8               	clrf	_ui16_I_cal_Ph3^(0+128)
  2817  022D  00E9               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
  2818  022E                     l10062:	
  2819                           
  2820                           ;main.c: 231: }
  2821                           ;main.c: 324: LATC2 = 0;
  2822  022E  0022               	movlb	2	; select bank2
  2823  022F  110E               	bcf	14,2	;volatile
  2824                           
  2825                           ;main.c: 325: LATB2 = 0;
  2826  0230  110D               	bcf	13,2	;volatile
  2827                           
  2828                           ;main.c: 326: LATB1 = 0;
  2829  0231  108D               	bcf	13,1	;volatile
  2830                           
  2831                           ;main.c: 327: LATC = LATC | 0b00011010;
  2832  0232  080E               	movf	14,w	;volatile
  2833  0233  381A               	iorlw	26
  2834  0234  008E               	movwf	14	;volatile
  2835                           
  2836                           ;main.c: 329: ADC_Wait();
  2837  0235  2268  3180         	fcall	_ADC_Wait
  2838                           
  2839                           ;main.c: 330: ADC_Wait();
  2840  0237  2268  3180         	fcall	_ADC_Wait
  2841                           
  2842                           ;main.c: 332: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  2843  0239  3011               	movlw	17
  2844  023A  0021               	movlb	1	; select bank1
  2845  023B  009D               	movwf	29	;volatile
  2846                           
  2847                           ;main.c: 333: ADC_Wait();
  2848  023C  2268  3180         	fcall	_ADC_Wait
  2849                           
  2850                           ;main.c: 334: ( GO_nDONE = 1 );
  2851  023E  0021               	movlb	1	; select bank1
  2852  023F  149D               	bsf	29,1	;volatile
  2853                           
  2854                           ;main.c: 337: ui8_current_cal[2] = ADC_Read();
  2855  0240  2281  3180         	fcall	_ADC_Read
  2856  0242  0830               	movf	?_ADC_Read,w
  2857  0243  0022               	movlb	2	; select bank2
  2858  0244  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  2859                           
  2860                           ;main.c: 339: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  2861  0245  3035               	movlw	53
  2862  0246  0021               	movlb	1	; select bank1
  2863  0247  009D               	movwf	29	;volatile
  2864                           
  2865                           ;main.c: 340: ADC_Wait();
  2866  0248  2268  3180         	fcall	_ADC_Wait
  2867                           
  2868                           ;main.c: 341: ( GO_nDONE = 1 );
  2869  024A  0021               	movlb	1	; select bank1
  2870  024B  149D               	bsf	29,1	;volatile
  2871                           
  2872                           ;main.c: 344: ui8_current_cal[1] = ADC_Read();
  2873  024C  2281  3180         	fcall	_ADC_Read
  2874  024E  0830               	movf	?_ADC_Read,w
  2875  024F  0022               	movlb	2	; select bank2
  2876  0250  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  2877                           
  2878                           ;main.c: 346: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  2879  0251  3009               	movlw	9
  2880  0252  0021               	movlb	1	; select bank1
  2881  0253  009D               	movwf	29	;volatile
  2882                           
  2883                           ;main.c: 347: ADC_Wait();
  2884  0254  2268  3180         	fcall	_ADC_Wait
  2885                           
  2886                           ;main.c: 348: ( GO_nDONE = 1 );
  2887  0256  0021               	movlb	1	; select bank1
  2888  0257  149D               	bsf	29,1	;volatile
  2889                           
  2890                           ;main.c: 351: ui8_current_cal[0] = ADC_Read();
  2891  0258  2281               	fcall	_ADC_Read
  2892  0259  0830               	movf	?_ADC_Read,w
  2893  025A  0022               	movlb	2	; select bank2
  2894  025B  00A0               	movwf	_ui8_current_cal^(0+256)
  2895  025C  0008               	return
  2896  025D                     __end_of_I_calibrationInit:	
  2897  025D                     __ptext26:	
  2898 ;; *************** function _read_eeprom_data *****************
  2899 ;; Defined at:
  2900 ;;		line 52 in file "../eeprom.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  ui8_adress      1    wreg     unsigned char 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  ui8_adress      1   16[BANK0 ] unsigned char 
  2905 ;;  ui8_adress_d    1   17[BANK0 ] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      unsigned char 
  2908 ;; Registers used:
  2909 ;;		wreg
  2910 ;; Tracked objects:
  2911 ;;		On entry : 18/2
  2912 ;;		On exit  : 1F/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2915 ;;      Params:         0       0       0       0       0       0       0       0
  2916 ;;      Locals:         0       2       0       0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0
  2918 ;;      Totals:         0       2       0       0       0       0       0       0
  2919 ;;Total ram usage:        2 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    4
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_EOL
  2926 ;;		_I_calibrationInit
  2927 ;;		_init_ports
  2928 ;;		_main
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           
  2933                           ;psect for function _read_eeprom_data
  2934  025D                     _read_eeprom_data:	
  2935                           
  2936                           ;incstack = 0
  2937                           ; Regs used in _read_eeprom_data: [wreg]
  2938                           ;read_eeprom_data@ui8_adress stored from wreg
  2939  025D  0020               	movlb	0	; select bank0
  2940  025E  00B0               	movwf	read_eeprom_data@ui8_adress
  2941                           
  2942                           ;eeprom.c: 56: unsigned char ui8_adress_data;
  2943                           ;eeprom.c: 58: EEADRL = ui8_adress;
  2944  025F  0023               	movlb	3	; select bank3
  2945  0260  0091               	movwf	17	;volatile
  2946                           
  2947                           ;eeprom.c: 59: EEPGD = 0;
  2948  0261  1395               	bcf	21,7	;volsfr
  2949                           
  2950                           ;eeprom.c: 60: CFGS = 0;
  2951  0262  1315               	bcf	21,6	;volsfr
  2952                           
  2953                           ;eeprom.c: 61: RD = 1;
  2954  0263  1415               	bsf	21,0	;volsfr
  2955                           
  2956                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  2957  0264  0813               	movf	19,w	;volatile
  2958  0265  0020               	movlb	0	; select bank0
  2959  0266  00B1               	movwf	read_eeprom_data@ui8_adress_data
  2960                           
  2961                           ;eeprom.c: 64: return ui8_adress_data;
  2962  0267  0008               	return
  2963  0268                     __end_of_read_eeprom_data:	
  2964  0268                     __ptext39:	
  2965 ;; *************** function _ADC_Wait *****************
  2966 ;; Defined at:
  2967 ;;		line 128 in file "../adc.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		None
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/2
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2981 ;;      Params:         0       0       0       0       0       0       0       0
  2982 ;;      Locals:         0       0       0       0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0
  2984 ;;      Totals:         0       0       0       0       0       0       0       0
  2985 ;;Total ram usage:        0 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    4
  2988 ;; This function calls:
  2989 ;;		Nothing
  2990 ;; This function is called by:
  2991 ;;		_FILTER_Init
  2992 ;;		_EOL
  2993 ;;		_I_calibrationInit
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           
  2998                           ;psect for function _ADC_Wait
  2999  0268                     _ADC_Wait:	
  3000                           
  3001                           ;adc.c: 133: __nop();
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _ADC_Wait: []
  3005  0268  0000               	nop
  3006                           
  3007                           ;adc.c: 134: __nop();
  3008  0269  0000               	nop
  3009                           
  3010                           ;adc.c: 135: __nop();
  3011  026A  0000               	nop
  3012                           
  3013                           ;adc.c: 136: __nop();
  3014  026B  0000               	nop
  3015                           
  3016                           ;adc.c: 137: __nop();
  3017  026C  0000               	nop
  3018                           
  3019                           ;adc.c: 138: __nop();
  3020  026D  0000               	nop
  3021                           
  3022                           ;adc.c: 139: __nop();
  3023  026E  0000               	nop
  3024                           
  3025                           ;adc.c: 140: __nop();
  3026  026F  0000               	nop
  3027                           
  3028                           ;adc.c: 142: __nop();
  3029  0270  0000               	nop
  3030                           
  3031                           ;adc.c: 143: __nop();
  3032  0271  0000               	nop
  3033                           
  3034                           ;adc.c: 144: __nop();
  3035  0272  0000               	nop
  3036                           
  3037                           ;adc.c: 145: __nop();
  3038  0273  0000               	nop
  3039                           
  3040                           ;adc.c: 146: __nop();
  3041  0274  0000               	nop
  3042                           
  3043                           ;adc.c: 147: __nop();
  3044  0275  0000               	nop
  3045                           
  3046                           ;adc.c: 148: __nop();
  3047  0276  0000               	nop
  3048                           
  3049                           ;adc.c: 149: __nop();
  3050  0277  0000               	nop
  3051                           
  3052                           ;adc.c: 151: __nop();
  3053  0278  0000               	nop
  3054                           
  3055                           ;adc.c: 152: __nop();
  3056  0279  0000               	nop
  3057                           
  3058                           ;adc.c: 153: __nop();
  3059  027A  0000               	nop
  3060                           
  3061                           ;adc.c: 154: __nop();
  3062  027B  0000               	nop
  3063                           
  3064                           ;adc.c: 155: __nop();
  3065  027C  0000               	nop
  3066                           
  3067                           ;adc.c: 156: __nop();
  3068  027D  0000               	nop
  3069                           
  3070                           ;adc.c: 157: __nop();
  3071  027E  0000               	nop
  3072                           
  3073                           ;adc.c: 158: __nop();
  3074  027F  0000               	nop
  3075  0280  0008               	return
  3076  0281                     __end_of_ADC_Wait:	
  3077  0281                     __ptext40:	
  3078 ;; *************** function _ADC_Read *****************
  3079 ;; Defined at:
  3080 ;;		line 175 in file "../adc.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  i               1   18[BANK0 ] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  2   16[BANK0 ] unsigned int 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/1
  3091 ;;		On exit  : 1F/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3094 ;;      Params:         0       2       0       0       0       0       0       0
  3095 ;;      Locals:         0       1       0       0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0
  3097 ;;      Totals:         0       3       0       0       0       0       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    4
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_FILTER_Init
  3105 ;;		_EOL
  3106 ;;		_I_calibrationInit
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           
  3111                           ;psect for function _ADC_Read
  3112  0281                     _ADC_Read:	
  3113                           
  3114                           ;adc.c: 179: unsigned char i;
  3115                           ;adc.c: 180: i = 0;
  3116                           
  3117                           ;incstack = 0
  3118                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  3119  0281  0020               	movlb	0	; select bank0
  3120  0282  01B2               	clrf	ADC_Read@i
  3121  0283                     l69:	
  3122                           ;adc.c: 182: while( GO_nDONE )
  3123                           
  3124  0283  0021               	movlb	1	; select bank1
  3125  0284  1C9D               	btfss	29,1	;volatile
  3126  0285  2A8C               	goto	l9772
  3127                           
  3128                           ;adc.c: 184: {
  3129                           ;adc.c: 186: i++;
  3130  0286  0020               	movlb	0	; select bank0
  3131  0287  3041               	movlw	65
  3132  0288  0AB2               	incf	ADC_Read@i,f
  3133                           
  3134                           ;adc.c: 189: if( i > 64 )
  3135  0289  0232               	subwf	ADC_Read@i,w
  3136  028A  1C03               	skipc
  3137  028B  2A83               	goto	l69
  3138  028C                     l9772:	
  3139                           
  3140                           ;adc.c: 195: }
  3141                           ;adc.c: 198: }
  3142                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  3143  028C  0021               	movlb	1	; select bank1
  3144                           
  3145                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  3146                           
  3147                           ;adc.c: 204: return analog_value.w;
  3148  028D  319F  27B0         	fcall	PL114	;call to abstracted procedure
  3149  028F  0020               	movlb	0	; select bank0
  3150  0290  00B1               	movwf	?_ADC_Read+1
  3151  0291  0021               	movlb	1	; select bank1
  3152  0292  083C               	movf	_analog_value^(0+128),w	;volatile
  3153  0293  0020               	movlb	0	; select bank0
  3154  0294  00B0               	movwf	?_ADC_Read
  3155  0295  0008               	return
  3156  0296                     __end_of_ADC_Read:	
  3157  0296                     __ptext38:	
  3158 ;; *************** function _InitMotorStop *****************
  3159 ;; Defined at:
  3160 ;;		line 2221 in file "../bldc.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;		None
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;		None
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      void 
  3167 ;; Registers used:
  3168 ;;		status,2
  3169 ;; Tracked objects:
  3170 ;;		On entry : 1C/2
  3171 ;;		On exit  : 18/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3174 ;;      Params:         0       0       0       0       0       0       0       0
  3175 ;;      Locals:         0       0       0       0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0       0
  3177 ;;      Totals:         0       0       0       0       0       0       0       0
  3178 ;;Total ram usage:        0 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    4
  3181 ;; This function calls:
  3182 ;;		Nothing
  3183 ;; This function is called by:
  3184 ;;		_EOL
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           
  3190                           ;psect for function _InitMotorStop
  3191  0296                     _InitMotorStop:	
  3192                           
  3193                           ;bldc.c: 2226: if( 1 == MotorFlags.bits.B6 )
  3194                           
  3195                           ;incstack = 0
  3196                           ; Regs used in _InitMotorStop: [status,2]
  3197  0296  1F7A               	btfss	_MotorFlags,6
  3198  0297  0008               	return
  3199                           
  3200                           ;bldc.c: 2229: {
  3201                           ;bldc.c: 2231: LATC1 = 0;
  3202  0298  0022               	movlb	2	; select bank2
  3203  0299  108E               	bcf	14,1	;volatile
  3204                           
  3205                           ;bldc.c: 2232: LATC3 = 0;
  3206  029A  118E               	bcf	14,3	;volatile
  3207                           
  3208                           ;bldc.c: 2233: LATC4 = 0;
  3209  029B  120E               	bcf	14,4	;volatile
  3210                           
  3211                           ;bldc.c: 2235: CCP1ASE = 0;
  3212  029C  0025               	movlb	5	; select bank5
  3213  029D  1395               	bcf	21,7	;volatile
  3214                           
  3215                           ;bldc.c: 2236: CCPR1L = 0;
  3216  029E  0191               	clrf	17	;volatile
  3217                           
  3218                           ;bldc.c: 2237: MotorFlags.bits.B6 = 0;
  3219  029F  137A               	bcf	_MotorFlags,6
  3220                           
  3221                           ;bldc.c: 2238: MotorFlags.bits.B7 = 0;
  3222  02A0  13FA               	bcf	_MotorFlags,7
  3223  02A1  0008               	return
  3224  02A2                     __end_of_InitMotorStop:	
  3225  02A2                     __ptext20:	
  3226 ;; *************** function _Get_Analog_Value *****************
  3227 ;; Defined at:
  3228 ;;		line 442 in file "../adc.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;		None
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;		None
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  1    wreg      void 
  3235 ;; Registers used:
  3236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 1F/0
  3239 ;;		On exit  : 1F/3
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3242 ;;      Params:         0       0       0       0       0       0       0       0
  3243 ;;      Locals:         0       0       0       0       0       0       0       0
  3244 ;;      Temps:          0       0       0       0       0       0       0       0
  3245 ;;      Totals:         0       0       0       0       0       0       0       0
  3246 ;;Total ram usage:        0 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    5
  3249 ;; This function calls:
  3250 ;;		_FILTER_IPhase
  3251 ;;		_FILTER_Temp
  3252 ;;		_FILTER_Ubat
  3253 ;; This function is called by:
  3254 ;;		_main
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _Get_Analog_Value
  3260  02A2                     _Get_Analog_Value:	
  3261                           
  3262                           ;adc.c: 446: FILTER_Ubat( );
  3263                           
  3264                           ;incstack = 0
  3265                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3266  02A2  22A7  3180         	fcall	_FILTER_Ubat
  3267                           
  3268                           ;adc.c: 447: FILTER_IPhase( );
  3269  02A4  23DF  3180         	fcall	_FILTER_IPhase
  3270                           
  3271                           ;adc.c: 448: FILTER_Temp( );
  3272  02A6  2EE8               	ljmp	l6404
  3273  02A7                     __end_of_Get_Analog_Value:	
  3274  02A7                     __ptext21:	
  3275 ;; *************** function _FILTER_Ubat *****************
  3276 ;; Defined at:
  3277 ;;		line 264 in file "../adc.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3286 ;; Tracked objects:
  3287 ;;		On entry : 1F/0
  3288 ;;		On exit  : 1D/1
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3291 ;;      Params:         0       0       0       0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0       0       0       0
  3293 ;;      Temps:          0      12       0       0       0       0       0       0
  3294 ;;      Totals:         0      12       0       0       0       0       0       0
  3295 ;;Total ram usage:       12 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    4
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_Get_Analog_Value
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           
  3306                           ;psect for function _FILTER_Ubat
  3307  02A7                     _FILTER_Ubat:	
  3308                           
  3309                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  3310                           
  3311                           ;incstack = 0
  3312                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  3313  02A7  2589  3180         	fcall	PL94	;call to abstracted procedure
  3314  02A9  0020               	movlb	0	; select bank0
  3315  02AA  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  3316  02AB  3FC0               	movwi [0]fsr1
  3317  02AC  0858               	movf	_ui16_Ubat_bldc+1,w	;volatile
  3318  02AD  3FC1               	movwi [1]fsr1
  3319                           
  3320                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  3321  02AE  304E               	movlw	((low (_inputArray1| (0+512)))& (0+255)+14)
  3322  02AF  0086               	movwf	6
  3323  02B0  304C               	movlw	((low (_inputArray1| (0+512)))& (0+255)+12)
  3324  02B1  0084               	movwf	4
  3325  02B2  3002               	movlw	2	; select bank4/5
  3326  02B3  0085               	movwf	5
  3327  02B4  0024               	movlb	4	; select bank4
  3328  02B5  0844               	movf	(_inputArray1^(0+512)+4),w
  3329  02B6  0742               	addwf	(_inputArray1^(0+512)+2),w
  3330  02B7  0020               	movlb	0	; select bank0
  3331  02B8  00B0               	movwf	??_FILTER_Ubat
  3332  02B9  0024               	movlb	4	; select bank4
  3333  02BA  0845               	movf	((_inputArray1+1)^(0+512)+4),w
  3334  02BB  3D43               	addwfc	((_inputArray1+1)^(0+512)+2),w
  3335  02BC  0020               	movlb	0	; select bank0
  3336  02BD  00B1               	movwf	??_FILTER_Ubat+1
  3337  02BE  0024               	movlb	4	; select bank4
  3338  02BF  0846               	movf	(_inputArray1^(0+512)+6),w
  3339  02C0  0020               	movlb	0	; select bank0
  3340  02C1  0730               	addwf	??_FILTER_Ubat,w
  3341  02C2  00B2               	movwf	??_FILTER_Ubat+2
  3342  02C3  0024               	movlb	4	; select bank4
  3343  02C4  0847               	movf	((_inputArray1+1)^(0+512)+6),w
  3344  02C5  0020               	movlb	0	; select bank0
  3345  02C6  3D31               	addwfc	??_FILTER_Ubat+1,w
  3346  02C7  00B3               	movwf	??_FILTER_Ubat+3
  3347  02C8  0024               	movlb	4	; select bank4
  3348  02C9  0848               	movf	(_inputArray1^(0+512)+8),w
  3349  02CA  0020               	movlb	0	; select bank0
  3350  02CB  0732               	addwf	??_FILTER_Ubat+2,w
  3351  02CC  00B4               	movwf	??_FILTER_Ubat+4
  3352  02CD  0024               	movlb	4	; select bank4
  3353  02CE  0849               	movf	((_inputArray1+1)^(0+512)+8),w
  3354  02CF  0020               	movlb	0	; select bank0
  3355  02D0  3D33               	addwfc	??_FILTER_Ubat+3,w
  3356  02D1  00B5               	movwf	??_FILTER_Ubat+5
  3357  02D2  0024               	movlb	4	; select bank4
  3358  02D3  084A               	movf	(_inputArray1^(0+512)+10),w
  3359  02D4  0020               	movlb	0	; select bank0
  3360  02D5  0734               	addwf	??_FILTER_Ubat+4,w
  3361  02D6  00B6               	movwf	??_FILTER_Ubat+6
  3362  02D7  0024               	movlb	4	; select bank4
  3363  02D8  084B               	movf	((_inputArray1+1)^(0+512)+10),w
  3364  02D9  0020               	movlb	0	; select bank0
  3365  02DA  3D35               	addwfc	??_FILTER_Ubat+5,w
  3366  02DB  00B7               	movwf	??_FILTER_Ubat+7
  3367  02DC  3F00               	moviw [0]fsr0
  3368  02DD  0736               	addwf	??_FILTER_Ubat+6,w
  3369  02DE  00B8               	movwf	??_FILTER_Ubat+8
  3370  02DF  3F01               	moviw [1]fsr0
  3371  02E0  3D37               	addwfc	??_FILTER_Ubat+7,w
  3372  02E1  00B9               	movwf	??_FILTER_Ubat+9
  3373  02E2  3F40               	moviw [0]fsr1
  3374  02E3  0738               	addwf	??_FILTER_Ubat+8,w
  3375  02E4  00BA               	movwf	??_FILTER_Ubat+10
  3376  02E5  3F41               	moviw [1]fsr1
  3377  02E6  3D39               	addwfc	??_FILTER_Ubat+9,w
  3378  02E7  00BB               	movwf	??_FILTER_Ubat+11
  3379  02E8  0024               	movlb	4	; select bank4
  3380  02E9  0840               	movf	_inputArray1^(0+512),w
  3381  02EA  0020               	movlb	0	; select bank0
  3382  02EB  073A               	addwf	??_FILTER_Ubat+10,w
  3383  02EC  0023               	movlb	3	; select bank3
  3384  02ED  00E4               	movwf	_filter1^(0+384)
  3385  02EE  0024               	movlb	4	; select bank4
  3386  02EF  0841               	movf	(_inputArray1+1)^(0+512),w
  3387  02F0  0020               	movlb	0	; select bank0
  3388  02F1  3D3B               	addwfc	??_FILTER_Ubat+11,w
  3389  02F2  0023               	movlb	3	; select bank3
  3390  02F3  00E5               	movwf	(_filter1+1)^(0+384)
  3391                           
  3392                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  3393  02F4  0020               	movlb	0	; select bank0
  3394  02F5  00B1               	movwf	??_FILTER_Ubat+1
  3395  02F6  0023               	movlb	3	; select bank3
  3396  02F7  0864               	movf	_filter1^(0+384),w
  3397  02F8  0020               	movlb	0	; select bank0
  3398  02F9  00B0               	movwf	??_FILTER_Ubat
  3399  02FA  36B1               	lsrf	??_FILTER_Ubat+1,f
  3400  02FB  0CB0               	rrf	??_FILTER_Ubat,f
  3401  02FC  36B1               	lsrf	??_FILTER_Ubat+1,f
  3402  02FD  0CB0               	rrf	??_FILTER_Ubat,f
  3403  02FE  36B1               	lsrf	??_FILTER_Ubat+1,f
  3404  02FF  0CB0               	rrf	??_FILTER_Ubat,f
  3405  0300  0830               	movf	??_FILTER_Ubat,w
  3406  0301  0022               	movlb	2	; select bank2
  3407  0302  00B5               	movwf	_ui16_fir_Bat_mittel^(0+256)
  3408  0303  0020               	movlb	0	; select bank0
  3409  0304  0831               	movf	??_FILTER_Ubat+1,w
  3410  0305  0022               	movlb	2	; select bank2
  3411  0306  00B6               	movwf	(_ui16_fir_Bat_mittel+1)^(0+256)
  3412                           
  3413                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  3414  0307  3008               	movlw	8
  3415  0308  0021               	movlb	1	; select bank1
  3416  0309  0AE7               	incf	_windowPtr1^(0+128),f
  3417  030A  0267               	subwf	_windowPtr1^(0+128),w
  3418  030B  1C03               	skipc
  3419  030C  0008               	return
  3420                           
  3421                           ;adc.c: 277: {
  3422                           ;adc.c: 279: windowPtr1 = 0;
  3423  030D  01E7               	clrf	_windowPtr1^(0+128)
  3424                           
  3425                           ;adc.c: 280: filter1 = 0;
  3426  030E  0023               	movlb	3	; select bank3
  3427  030F  01E4               	clrf	_filter1^(0+384)
  3428  0310  01E5               	clrf	(_filter1+1)^(0+384)
  3429  0311  0008               	return
  3430  0312                     __end_of_FILTER_Ubat:	
  3431  0312                     __ptext18:	
  3432 ;; *************** function _Receive_Diag *****************
  3433 ;; Defined at:
  3434 ;;		line 315 in file "../lin.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  id              1    wreg     unsigned char 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  id              1   31[BANK0 ] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 1F/0
  3445 ;;		On exit  : 1C/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3448 ;;      Params:         0       0       0       0       0       0       0       0
  3449 ;;      Locals:         0       1       0       0       0       0       0       0
  3450 ;;      Temps:          0       1       0       0       0       0       0       0
  3451 ;;      Totals:         0       2       0       0       0       0       0       0
  3452 ;;Total ram usage:        2 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    7
  3455 ;; This function calls:
  3456 ;;		__ELINMIntGetPointer
  3457 ;;		__ELINMIntReceiveMessage
  3458 ;; This function is called by:
  3459 ;;		_main
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           
  3464                           ;psect for function _Receive_Diag
  3465  0312                     _Receive_Diag:	
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _Receive_Diag: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3469                           ;Receive_Diag@id stored from wreg
  3470  0312  00BF               	movwf	Receive_Diag@id
  3471  0313                     l916:	
  3472                           ;lin.c: 320: {
  3473                           ;lin.c: 321: ;
  3474                           
  3475  0313  1DD3               	btfss	__ELINMIntStatus,3
  3476  0314  2B13               	goto	l916
  3477                           
  3478                           ;lin.c: 322: }
  3479                           ;lin.c: 323: ;
  3480                           ;lin.c: 324: _ELINMIntReceiveMessage ( 5, id, 8 );
  3481  0315  083F               	movf	Receive_Diag@id,w
  3482  0316  00BB               	movwf	__ELINMIntReceiveMessage@_ELINM_id
  3483  0317  3008               	movlw	8
  3484  0318  00BC               	movwf	__ELINMIntReceiveMessage@_ELINM_size
  3485  0319  3005               	movlw	5
  3486  031A  2364  3180         	fcall	__ELINMIntReceiveMessage
  3487  031C                     l919:	
  3488                           ;lin.c: 326: {
  3489                           
  3490  031C  1DD3               	btfss	__ELINMIntStatus,3
  3491  031D  2B1C               	goto	l919
  3492                           
  3493                           ;lin.c: 328: }
  3494                           ;lin.c: 329: ;
  3495                           ;lin.c: 330: if( ( ErrorCode == ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  3496  031E  30F0               	movlw	240
  3497  031F  0553               	andwf	__ELINMIntStatus,w
  3498  0320  00BE               	movwf	??_Receive_Diag
  3499  0321  0021               	movlb	1	; select bank1
  3500  0322  0650               	xorwf	_ErrorCode^(0+128),w
  3501  0323  1903               	btfsc	3,2
  3502  0324  0008               	return
  3503                           
  3504                           ;lin.c: 335: else
  3505                           ;lin.c: 336: {
  3506                           ;lin.c: 337: pt = _ELINMIntGetPointer ( 5, 0 );
  3507  0325  0020               	movlb	0	; select bank0
  3508  0326  3005               	movlw	5
  3509  0327  01B0               	clrf	__ELINMIntGetPointer@_ELINMInt_position
  3510  0328  2361  3180         	fcall	__ELINMIntGetPointer
  3511  032A  00D2               	movwf	_pt
  3512                           
  3513                           ;lin.c: 338: my_msg[ 0 ] = *pt;
  3514  032B  0086               	movwf	6
  3515  032C  3002               	movlw	2	; select bank4/5
  3516  032D  0087               	movwf	7
  3517  032E  0801               	movf	1,w
  3518  032F  0023               	movlb	3	; select bank3
  3519  0330  00B0               	movwf	_my_msg^(0+384)
  3520                           
  3521                           ;lin.c: 339: pt++;
  3522                           
  3523                           ;lin.c: 340: my_msg[ 1 ] = *pt;
  3524  0331  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3525  0333  00B1               	movwf	(_my_msg^(0+384)+1)
  3526                           
  3527                           ;lin.c: 341: pt++;
  3528                           
  3529                           ;lin.c: 342: my_msg[ 2 ] = *pt;
  3530  0334  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3531  0336  00B2               	movwf	(_my_msg^(0+384)+2)
  3532                           
  3533                           ;lin.c: 343: pt++;
  3534                           
  3535                           ;lin.c: 344: my_msg[ 3 ] = *pt;
  3536  0337  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3537  0339  00B3               	movwf	(_my_msg^(0+384)+3)
  3538                           
  3539                           ;lin.c: 345: pt++;
  3540                           
  3541                           ;lin.c: 346: my_msg[ 4 ] = *pt;
  3542  033A  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3543  033C  00B4               	movwf	(_my_msg^(0+384)+4)
  3544                           
  3545                           ;lin.c: 347: pt++;
  3546                           
  3547                           ;lin.c: 348: my_msg[ 5 ] = *pt;
  3548  033D  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3549  033F  00B5               	movwf	(_my_msg^(0+384)+5)
  3550                           
  3551                           ;lin.c: 349: pt++;
  3552                           
  3553                           ;lin.c: 350: my_msg[ 6 ] = *pt;
  3554  0340  23D8  3180         	fcall	PL28	;call to abstracted procedure
  3555  0342  00B6               	movwf	(_my_msg^(0+384)+6)
  3556                           
  3557                           ;lin.c: 351: pt++;
  3558                           
  3559                           ;lin.c: 352: my_msg[ 7 ] = *pt;
  3560  0343  23D8               	fcall	PL28	;call to abstracted procedure
  3561  0344  00B7               	movwf	(_my_msg^(0+384)+7)
  3562                           
  3563                           ;lin.c: 354: ui8_b_DResServID_c = my_msg[ 0 ];
  3564  0345  0830               	movf	_my_msg^(0+384),w
  3565  0346  0022               	movlb	2	; select bank2
  3566  0347  00E1               	movwf	_ui8_b_DResServID_c^(0+256)
  3567                           
  3568                           ;lin.c: 355: ui8_b_DResLocID_c = my_msg[ 1 ];
  3569  0348  0023               	movlb	3	; select bank3
  3570  0349  0831               	movf	(_my_msg^(0+384)+1),w
  3571  034A  0020               	movlb	0	; select bank0
  3572  034B  00D5               	movwf	_ui8_b_DResLocID_c
  3573                           
  3574                           ;lin.c: 356: ui8_b_DResB0_c = my_msg[ 2 ];
  3575  034C  0023               	movlb	3	; select bank3
  3576  034D  0832               	movf	(_my_msg^(0+384)+2),w
  3577  034E  0020               	movlb	0	; select bank0
  3578  034F  00D4               	movwf	_ui8_b_DResB0_c
  3579                           
  3580                           ;lin.c: 357: ui8_b_DResB1_c = my_msg[ 3 ];
  3581  0350  0023               	movlb	3	; select bank3
  3582  0351  0833               	movf	(_my_msg^(0+384)+3),w
  3583  0352  0022               	movlb	2	; select bank2
  3584  0353  00E0               	movwf	_ui8_b_DResB1_c^(0+256)
  3585                           
  3586                           ;lin.c: 358: ui8_b_DResB2_c = my_msg[ 4 ];
  3587  0354  0023               	movlb	3	; select bank3
  3588  0355  0834               	movf	(_my_msg^(0+384)+4),w
  3589  0356  0022               	movlb	2	; select bank2
  3590  0357  00DF               	movwf	_ui8_b_DResB2_c^(0+256)
  3591                           
  3592                           ;lin.c: 359: ui8_b_DResB3_c = my_msg[ 5 ];
  3593  0358  0023               	movlb	3	; select bank3
  3594  0359  0835               	movf	(_my_msg^(0+384)+5),w
  3595  035A  0022               	movlb	2	; select bank2
  3596  035B  00DE               	movwf	_ui8_b_DResB3_c^(0+256)
  3597                           
  3598                           ;lin.c: 361: ui8_b_DResB5_c = my_msg[ 7 ];
  3599  035C  0023               	movlb	3	; select bank3
  3600  035D  0836               	movf	(_my_msg^(0+384)+6),w
  3601  035E  0022               	movlb	2	; select bank2
  3602  035F  00DD               	movwf	_ui8_b_DResB4_c^(0+256)
  3603  0360  0008               	return
  3604  0361                     __end_of_Receive_Diag:	
  3605  0361                     __ptext37:	
  3606 ;; *************** function __ELINMIntGetPointer *****************
  3607 ;; Defined at:
  3608 ;;		line 1375 in file "../lin.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  _ELINMInt_ta    1    wreg     unsigned char 
  3611 ;;  _ELINMInt_po    1   16[BANK0 ] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  _ELINMInt_ta    1   17[BANK0 ] unsigned char 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      PTR unsigned char 
  3616 ;; Registers used:
  3617 ;;		wreg, status,2, status,0
  3618 ;; Tracked objects:
  3619 ;;		On entry : 1F/0
  3620 ;;		On exit  : 1F/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3623 ;;      Params:         0       1       0       0       0       0       0       0
  3624 ;;      Locals:         0       1       0       0       0       0       0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0       0
  3626 ;;      Totals:         0       2       0       0       0       0       0       0
  3627 ;;Total ram usage:        2 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    4
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_Transmit_LIN_8Bytes
  3634 ;;		_Receive_Diag
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           
  3639                           ;psect for function __ELINMIntGetPointer
  3640  0361                     __ELINMIntGetPointer:	
  3641                           
  3642                           ;lin.c: 1382: return ( ( BYTE * )& _ELINMIntMessageBuffer[ _ELINMInt_position ] );
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in __ELINMIntGetPointer: [wreg+status,2+status,0]
  3646  0361  0830               	movf	__ELINMIntGetPointer@_ELINMInt_position,w
  3647  0362  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
  3648  0363  0008               	return
  3649  0364                     __end_of__ELINMIntGetPointer:	
  3650  0364                     __ptext19:	
  3651 ;; *************** function __ELINMIntReceiveMessage *****************
  3652 ;; Defined at:
  3653 ;;		line 1321 in file "../lin.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  _ELINM_tag      1    wreg     unsigned char 
  3656 ;;  _ELINM_id       1   27[BANK0 ] unsigned char 
  3657 ;;  _ELINM_size     1   28[BANK0 ] unsigned char 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  _ELINM_tag      1   29[BANK0 ] unsigned char 
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      void 
  3662 ;; Registers used:
  3663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : 1F/0
  3666 ;;		On exit  : 1F/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3669 ;;      Params:         0       2       0       0       0       0       0       0
  3670 ;;      Locals:         0       1       0       0       0       0       0       0
  3671 ;;      Temps:          0       0       0       0       0       0       0       0
  3672 ;;      Totals:         0       3       0       0       0       0       0       0
  3673 ;;Total ram usage:        3 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    6
  3676 ;; This function calls:
  3677 ;;		__ELINMIntSendMessage
  3678 ;; This function is called by:
  3679 ;;		_Receive_Diag
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function __ELINMIntReceiveMessage
  3685  0364                     __ELINMIntReceiveMessage:	
  3686                           
  3687                           ;lin.c: 1331: {
  3688                           ;lin.c: 1333: _ELINMIntMessageTag = _ELINM_tag;
  3689                           
  3690                           ;incstack = 0
  3691                           ; Regs used in __ELINMIntReceiveMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  3692  0364  1DD3               	btfss	__ELINMIntStatus,3
  3693  0365  0008               	return
  3694                           
  3695                           ;lin.c: 1334: _ELINMIntRXMessageSize.SIZE = _ELINM_size;
  3696  0366  083C               	movf	__ELINMIntReceiveMessage@_ELINM_size,w
  3697  0367  0022               	movlb	2	; select bank2
  3698  0368  00DC               	movwf	__ELINMIntRXMessageSize^(0+256)
  3699                           
  3700                           ;lin.c: 1335: _ELINMIntStatus.ELINMINTSTS.RX = 1;
  3701  0369  0020               	movlb	0	; select bank0
  3702  036A  14D3               	bsf	__ELINMIntStatus,1
  3703                           
  3704                           ;lin.c: 1336: _ELINMIntRXCRC.CRC = 0;
  3705  036B  0023               	movlb	3	; select bank3
  3706  036C  01D4               	clrf	__ELINMIntRXCRC^(0+384)
  3707  036D  01D5               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  3708                           
  3709                           ;lin.c: 1337: _ELINMIntSendMessage ( _ELINM_id, 0, ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) * (
      +                           100L * 1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) +
      +                           1L ) * 14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  3710  036E  0020               	movlb	0	; select bank0
  3711  036F  3024               	movlw	36
  3712  0370  01B1               	clrf	__ELINMIntSendMessage@_ELINM_size
  3713  0371  00B2               	movwf	__ELINMIntSendMessage@_ELINM_fmin
  3714  0372  3033               	movlw	51
  3715  0373  01B3               	clrf	__ELINMIntSendMessage@_ELINM_fmin+1
  3716  0374  00B4               	movwf	__ELINMIntSendMessage@_ELINM_fmax
  3717  0375  01B5               	clrf	__ELINMIntSendMessage@_ELINM_fmax+1
  3718  0376  083B               	movf	__ELINMIntReceiveMessage@_ELINM_id,w
  3719  0377  3196  2E7C         	ljmp	__ELINMIntSendMessage
  3720  0379                     __end_of__ELINMIntReceiveMessage:	
  3721  0379                     __ptext17:	
  3722 ;; *************** function _SetDiagAlarm *****************
  3723 ;; Defined at:
  3724 ;;		line 210 in file "../diag.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;		None
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;		None
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  1    wreg      void 
  3731 ;; Registers used:
  3732 ;;		wreg, status,2, status,0, pclath, cstack
  3733 ;; Tracked objects:
  3734 ;;		On entry : 1F/1
  3735 ;;		On exit  : 1F/2
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3738 ;;      Params:         0       0       0       0       0       0       0       0
  3739 ;;      Locals:         0       0       0       0       0       0       0       0
  3740 ;;      Temps:          0       0       0       0       0       0       0       0
  3741 ;;      Totals:         0       0       0       0       0       0       0       0
  3742 ;;Total ram usage:        0 bytes
  3743 ;; Hardware stack levels used:    1
  3744 ;; Hardware stack levels required when called:    5
  3745 ;; This function calls:
  3746 ;;		_PWM_Write_Out
  3747 ;; This function is called by:
  3748 ;;		_main
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           
  3753                           ;psect for function _SetDiagAlarm
  3754  0379                     _SetDiagAlarm:	
  3755                           
  3756                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  3760  0379  1F66               	btfss	_ui8_error_Flags^(0+128),6
  3761  037A  2B7E               	goto	l10650
  3762                           
  3763                           ;diag.c: 221: {
  3764                           ;diag.c: 223: PWM_Write_Out( 88 );
  3765  037B  3058               	movlw	88
  3766  037C  3195  2D5D         	ljmp	_PWM_Write_Out
  3767  037E                     l10650:	
  3768                           ;diag.c: 226: }
  3769                           
  3770                           
  3771                           ;diag.c: 229: else
  3772                           ;diag.c: 230: {
  3773                           ;diag.c: 232: if( bool_CPU_TempAlarm )
  3774  037E  085B               	movf	_bool_CPU_TempAlarm^(0+128),w
  3775  037F  1903               	btfsc	3,2
  3776  0380  2B84               	goto	l10654
  3777                           
  3778                           ;diag.c: 235: {
  3779                           ;diag.c: 237: PWM_Write_Out( 33 );
  3780  0381  3021               	movlw	33
  3781  0382  3195  2D5D         	ljmp	_PWM_Write_Out
  3782  0384                     l10654:	
  3783                           ;diag.c: 240: }
  3784                           
  3785                           
  3786                           ;diag.c: 243: else
  3787                           ;diag.c: 244: {
  3788                           ;diag.c: 246: if( bool_DryRunningAlarm )
  3789  0384  085A               	movf	_bool_DryRunningAlarm^(0+128),w
  3790  0385  1903               	btfsc	3,2
  3791  0386  2B8A               	goto	l10658
  3792                           
  3793                           ;diag.c: 248: {
  3794                           ;diag.c: 250: PWM_Write_Out( 66 );
  3795  0387  3042               	movlw	66
  3796  0388  3195  2D5D         	ljmp	_PWM_Write_Out
  3797  038A                     l10658:	
  3798                           ;diag.c: 253: }
  3799                           
  3800                           
  3801                           ;diag.c: 256: else
  3802                           ;diag.c: 257: {
  3803                           ;diag.c: 259: if( bool_MotorStalled )
  3804  038A  0859               	movf	_bool_MotorStalled^(0+128),w
  3805  038B  1903               	btfsc	3,2
  3806  038C  2B90               	goto	l10662
  3807                           
  3808                           ;diag.c: 261: {
  3809                           ;diag.c: 263: PWM_Write_Out( 55 );
  3810  038D  3037               	movlw	55
  3811  038E  3195  2D5D         	ljmp	_PWM_Write_Out
  3812  0390                     l10662:	
  3813                           ;diag.c: 266: }
  3814                           
  3815                           
  3816                           ;diag.c: 269: else
  3817                           ;diag.c: 270: {
  3818                           ;diag.c: 272: if( bool_HighCurrentAlarm )
  3819  0390  0858               	movf	_bool_HighCurrentAlarm^(0+128),w
  3820  0391  1903               	btfsc	3,2
  3821  0392  2B96               	goto	l534
  3822                           
  3823                           ;diag.c: 274: {
  3824                           ;diag.c: 276: PWM_Write_Out( 44 );
  3825  0393  302C               	movlw	44
  3826  0394  3195  2D5D         	ljmp	_PWM_Write_Out
  3827  0396                     l534:	
  3828                           ;diag.c: 278: }
  3829                           
  3830                           
  3831                           ;diag.c: 281: else
  3832                           ;diag.c: 282: {
  3833                           ;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  3834  0396  1EE6               	btfss	_ui8_error_Flags^(0+128),5
  3835  0397  2B9B               	goto	l536
  3836                           
  3837                           ;diag.c: 287: {
  3838                           ;diag.c: 289: PWM_Write_Out( 77 );
  3839  0398  304D               	movlw	77
  3840  0399  3195  2D5D         	ljmp	_PWM_Write_Out
  3841  039B                     l536:	
  3842                           ;diag.c: 292: }
  3843                           
  3844                           
  3845                           ;diag.c: 295: else
  3846                           ;diag.c: 296: {
  3847                           ;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  3848  039B  1C66               	btfss	_ui8_error_Flags^(0+128),0
  3849  039C  2BA0               	goto	l10670
  3850                           
  3851                           ;diag.c: 300: {
  3852                           ;diag.c: 302: PWM_Write_Out( 22 );
  3853  039D  3016               	movlw	22
  3854  039E  3195  2D5D         	ljmp	_PWM_Write_Out
  3855  03A0                     l10670:	
  3856                           ;diag.c: 305: }
  3857                           
  3858                           
  3859                           ;diag.c: 308: else
  3860                           ;diag.c: 309: {
  3861                           ;diag.c: 311: PWM_Write_Out( 11 );
  3862  03A0  300B               	movlw	11
  3863  03A1  3195  2D5D         	ljmp	_PWM_Write_Out
  3864  03A3                     __end_of_SetDiagAlarm:	
  3865  03A3                     __ptext6:	
  3866 ;; *************** function _InitMotorRun *****************
  3867 ;; Defined at:
  3868 ;;		line 2170 in file "../bldc.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      void 
  3875 ;; Registers used:
  3876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 1C/2
  3879 ;;		On exit  : 1C/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3882 ;;      Params:         0       0       0       0       0       0       0       0
  3883 ;;      Locals:         0       0       0       0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0       0
  3885 ;;      Totals:         0       0       0       0       0       0       0       0
  3886 ;;Total ram usage:        0 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    6
  3889 ;; This function calls:
  3890 ;;		_commutate
  3891 ;; This function is called by:
  3892 ;;		_init_bldc
  3893 ;;		_main
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _InitMotorRun
  3899  03A3                     _InitMotorRun:	
  3900  03A3                     l9776:	
  3901                           ;incstack = 0
  3902                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3903                           
  3904                           
  3905                           ;bldc.c: 2175: if( 0 == MotorFlags.bits.B6 )
  3906  03A3  1B7A               	btfsc	_MotorFlags,6
  3907  03A4  0008               	return
  3908  03A5  30A6               	movlw	166
  3909                           
  3910                           ;bldc.c: 2178: {
  3911                           ;bldc.c: 2180: MotorFlags.bits.B5 = 0;
  3912  03A6  12FA               	bcf	_MotorFlags,5
  3913                           
  3914                           ;bldc.c: 2181: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  3915  03A7  0022               	movlb	2	; select bank2
  3916  03A8  00AD               	movwf	_ui16_comm_time_max^(0+256)
  3917  03A9  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  3918                           
  3919                           ;bldc.c: 2182: comm_state = 1;
  3920  03AA  0021               	movlb	1	; select bank1
  3921  03AB  01E3               	clrf	_comm_state^(0+128)
  3922  03AC  0AE3               	incf	_comm_state^(0+128),f
  3923                           
  3924                           ;bldc.c: 2183: ui16_step_cnt = 0;
  3925  03AD  01BA               	clrf	_ui16_step_cnt^(0+128)
  3926  03AE  01BB               	clrf	(_ui16_step_cnt+1)^(0+128)
  3927                           
  3928                           ;bldc.c: 2184: ui8_duty_cycle_BLDC = 0;
  3929  03AF  0020               	movlb	0	; select bank0
  3930  03B0  01D6               	clrf	_ui8_duty_cycle_BLDC
  3931                           
  3932                           ;bldc.c: 2186: bemf_filter = 0;
  3933  03B1  01D0               	clrf	_comm_time
  3934  03B2  01D1               	clrf	_comm_time+1
  3935                           
  3936                           ;bldc.c: 2188: phase_delay_counter_debug = 0;
  3937  03B3  0023               	movlb	3	; select bank3
  3938  03B4  01DA               	clrf	_phase_delay_counter^(0+384)
  3939  03B5  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  3940                           
  3941                           ;bldc.c: 2189: PSTR1CON = 0;
  3942  03B6  0025               	movlb	5	; select bank5
  3943  03B7  0196               	clrf	22	;volatile
  3944                           
  3945                           ;bldc.c: 2192: MotorFlags.bits.B3 = 1 ;
  3946  03B8  15FA               	bsf	_MotorFlags,3
  3947                           
  3948                           ;bldc.c: 2194: ui16_phase_angle = 128;
  3949  03B9  177A               	bsf	_MotorFlags,6
  3950                           
  3951                           ;bldc.c: 2195: ui8_StartupPWM = 0 ;
  3952  03BA  0021               	movlb	1	; select bank1
  3953  03BB  01E4               	clrf	_ui8_StartupPWM^(0+128)
  3954                           
  3955                           ;bldc.c: 2196: CCPR1L = 0 ;
  3956  03BC  0025               	movlb	5	; select bank5
  3957  03BD  0191               	clrf	17	;volatile
  3958                           
  3959                           ;bldc.c: 2198: ui8_zero_cros_cnt = 0 ;
  3960  03BE  0021               	movlb	1	; select bank1
  3961  03BF  01DE               	clrf	_ui8_sampleState^(0+128)
  3962                           
  3963                           ;bldc.c: 2199: MotorFlags.bits.B4 = 1 ;
  3964  03C0  167A               	bsf	_MotorFlags,4
  3965                           
  3966                           ;bldc.c: 2207: commutate( );
  3967  03C1  319A  2A7A         	ljmp	l9440
  3968  03C3                     __end_of_InitMotorRun:	
  3969  03C3                     PL6:	
  3970  03C3  3E00               	addlw	low (_PWM_trans_table| (0+32768))
  3971  03C4  0084               	movwf	4
  3972  03C5  3098               	movlw	high (_PWM_trans_table| (0+32768))
  3973  03C6  1803               	skipnc
  3974  03C7  3E01               	addlw	1
  3975  03C8  0085               	movwf	5
  3976  03C9  0800               	movf	0,w	;code access
  3977  03CA  0008               	return
  3978  03CB                     __end_ofPL6:	
  3979  03CB                     PL24:	
  3980  03CB  0085               	movwf	5
  3981  03CC  0800               	movf	0,w	;code access
  3982  03CD  0020               	movlb	0	; select bank0
  3983  03CE  00B2               	movwf	___awdiv@dividend
  3984  03CF  3005               	movlw	5
  3985  03D0  01B3               	clrf	___awdiv@dividend+1
  3986  03D1  35B2               	lslf	___awdiv@dividend,f
  3987  03D2  0DB3               	rlf	___awdiv@dividend+1,f
  3988  03D3  35B2               	lslf	___awdiv@dividend,f
  3989  03D4  0DB3               	rlf	___awdiv@dividend+1,f
  3990  03D5  00B0               	movwf	___awdiv@divisor
  3991  03D6  01B1               	clrf	___awdiv@divisor+1
  3992  03D7  0008               	return
  3993  03D8                     __end_ofPL24:	
  3994  03D8                     PL28:	
  3995  03D8  0020               	movlb	0	; select bank0
  3996  03D9  0AD2               	incf	_pt,f
  3997  03DA  0852               	movf	_pt,w
  3998  03DB  0086               	movwf	6
  3999  03DC  0801               	movf	1,w
  4000  03DD  0023               	movlb	3	; select bank3
  4001  03DE  0008               	return
  4002  03DF                     __end_ofPL28:	
  4003  03DF                     __ptext23:	
  4004 ;; *************** function _FILTER_IPhase *****************
  4005 ;; Defined at:
  4006 ;;		line 357 in file "../adc.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 1D/1
  4017 ;;		On exit  : 1F/3
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4020 ;;      Params:         0       0       0       0       0       0       0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0
  4022 ;;      Temps:          0       2       0       0       0       0       0       0
  4023 ;;      Totals:         0       2       0       0       0       0       0       0
  4024 ;;Total ram usage:        2 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    4
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_Get_Analog_Value
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           
  4035                           ;psect for function _FILTER_IPhase
  4036  03DF                     _FILTER_IPhase:	
  4037                           
  4038                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
  4039                           
  4040                           ;incstack = 0
  4041                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
  4042  03DF  0022               	movlb	2	; select bank2
  4043  03E0  0837               	movf	_ui16_IPhase1_bldc^(0+256),w	;volatile
  4044  03E1  0023               	movlb	3	; select bank3
  4045  03E2  07E2               	addwf	_filter3^(0+384),f
  4046  03E3  0022               	movlb	2	; select bank2
  4047  03E4  0838               	movf	(_ui16_IPhase1_bldc+1)^(0+256),w	;volatile
  4048  03E5  0023               	movlb	3	; select bank3
  4049  03E6  3DE3               	addwfc	(_filter3+1)^(0+384),f
  4050                           
  4051                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
  4052  03E7  0863               	movf	(_filter3+1)^(0+384),w
  4053  03E8  0020               	movlb	0	; select bank0
  4054  03E9  00B1               	movwf	??_FILTER_IPhase+1
  4055  03EA  0023               	movlb	3	; select bank3
  4056  03EB  0862               	movf	_filter3^(0+384),w
  4057  03EC  0020               	movlb	0	; select bank0
  4058  03ED  00B0               	movwf	??_FILTER_IPhase
  4059  03EE  3006               	movlw	6
  4060  03EF                     u3675:	
  4061  03EF  36B1               	lsrf	??_FILTER_IPhase+1,f
  4062  03F0  0CB0               	rrf	??_FILTER_IPhase,f
  4063  03F1  0B89               	decfsz	9,f
  4064  03F2  2BEF               	goto	u3675
  4065  03F3  0830               	movf	??_FILTER_IPhase,w
  4066  03F4  0022               	movlb	2	; select bank2
  4067  03F5  00B3               	movwf	_ui16_fir_IPhase_mean^(0+256)
  4068  03F6  0020               	movlb	0	; select bank0
  4069  03F7  0831               	movf	??_FILTER_IPhase+1,w
  4070  03F8  0022               	movlb	2	; select bank2
  4071  03F9  00B4               	movwf	(_ui16_fir_IPhase_mean+1)^(0+256)
  4072                           
  4073                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
  4074  03FA  0833               	movf	_ui16_fir_IPhase_mean^(0+256),w
  4075  03FB  0023               	movlb	3	; select bank3
  4076  03FC  02E2               	subwf	_filter3^(0+384),f
  4077  03FD  0022               	movlb	2	; select bank2
  4078  03FE  0834               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  4079  03FF  0023               	movlb	3	; select bank3
  4080  0400  3BE3               	subwfb	(_filter3+1)^(0+384),f
  4081  0401  0008               	return
  4082  0402                     __end_of_FILTER_IPhase:	
  4083  0402                     __ptext1:	
  4084 ;; *************** function _system_init *****************
  4085 ;; Defined at:
  4086 ;;		line 545 in file "../main.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;		None
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      void 
  4093 ;; Registers used:
  4094 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : B1F/0
  4097 ;;		On exit  : 1C/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4100 ;;      Params:         0       0       0       0       0       0       0       0
  4101 ;;      Locals:         0       0       0       0       0       0       0       0
  4102 ;;      Temps:          0       0       0       0       0       0       0       0
  4103 ;;      Totals:         0       0       0       0       0       0       0       0
  4104 ;;Total ram usage:        0 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:    8
  4107 ;; This function calls:
  4108 ;;		_ADC_Init
  4109 ;;		_DiagInit
  4110 ;;		_EnableMCP201
  4111 ;;		_FILTER_Init
  4112 ;;		_I_calibrationInit
  4113 ;;		_Oscill_Source_Block
  4114 ;;		_PWM_Capture_init
  4115 ;;		__ELINMIntInitialize
  4116 ;;		_init_bldc
  4117 ;;		_init_ports
  4118 ;;		_timer_init
  4119 ;; This function is called by:
  4120 ;;		_main
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           
  4125                           ;psect for function _system_init
  4126  0402                     _system_init:	
  4127                           
  4128                           ;main.c: 549: OPTION_REG = 0b10000001;
  4129                           
  4130                           ;incstack = 0
  4131                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4132  0402  3081               	movlw	129
  4133  0403  0021               	movlb	1	; select bank1
  4134  0404  0095               	movwf	21	;volatile
  4135                           
  4136                           ;main.c: 558: ui8_ResetMatlab = 1;
  4137  0405  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4138  0406  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  4139                           
  4140                           ;main.c: 559: GIE = 0;
  4141  0407  138B               	bcf	11,7	;volatile
  4142                           
  4143                           ;main.c: 560: INTCON = 0;
  4144  0408  018B               	clrf	11	;volatile
  4145                           
  4146                           ;main.c: 561: PIE1 = 0;
  4147  0409  0191               	clrf	17	;volatile
  4148                           
  4149                           ;main.c: 562: PIE2 = 0;
  4150  040A  0192               	clrf	18	;volatile
  4151                           
  4152                           ;main.c: 565: ui16_Timer_VaL1 = 0;
  4153  040B  0193               	clrf	19	;volatile
  4154                           
  4155                           ;main.c: 566: ui8_Task_Cont3ms = 0;
  4156  040C  0022               	movlb	2	; select bank2
  4157  040D  01D4               	clrf	_ui8_Task_Cont3ms^(0+256)
  4158                           
  4159                           ;main.c: 567: ui8_Task_Cont5ms = 0;
  4160  040E  01D3               	clrf	_ui8_Task_Cont5ms^(0+256)
  4161                           
  4162                           ;main.c: 571: ui8_Sync_Cont10ms = 0;
  4163  040F  0021               	movlb	1	; select bank1
  4164  0410  3049               	movlw	73
  4165  0411  01CC               	clrf	_ui8_Task_Cont100ms^(0+128)
  4166                           
  4167                           ;main.c: 573: ui16_dryRun_Thresh = 73;
  4168  0412  0023               	movlb	3	; select bank3
  4169  0413  00EE               	movwf	_ui16_dryRun_Thresh^(0+384)
  4170  0414  3068               	movlw	104
  4171  0415  01EF               	clrf	(_ui16_dryRun_Thresh+1)^(0+384)
  4172                           
  4173                           ;main.c: 575: ui16_Current_Thresh = 360;
  4174  0416  00EC               	movwf	_ui16_Current_Thresh^(0+384)
  4175  0417  3001               	movlw	1
  4176  0418  00ED               	movwf	(_ui16_Current_Thresh^(0+384)+1)
  4177                           
  4178                           ;main.c: 577: init_ports( );
  4179  0419  2550  3180         	fcall	_init_ports
  4180                           
  4181                           ;main.c: 581: EnableMCP201( );
  4182  041B  24AD  3180         	fcall	_EnableMCP201
  4183                           
  4184                           ;main.c: 582: _ELINMIntInitialize( );
  4185  041D  2538  3180         	fcall	__ELINMIntInitialize
  4186                           
  4187                           ;main.c: 588: Oscill_Source_Block( );
  4188  041F  24E0  3180         	fcall	_Oscill_Source_Block
  4189                           
  4190                           ;main.c: 589: timer_init( 1 );
  4191  0421  3001               	movlw	1
  4192  0422  243C  3180         	fcall	_timer_init
  4193                           
  4194                           ;main.c: 590: timer_init( 4 );
  4195  0424  3004               	movlw	4
  4196  0425  243C  3180         	fcall	_timer_init
  4197                           
  4198                           ;main.c: 591: timer_init( 6 );
  4199  0427  3006               	movlw	6
  4200  0428  243C  3180         	fcall	_timer_init
  4201                           
  4202                           ;main.c: 594: PWM_Capture_init( 5 );
  4203  042A  3005               	movlw	5
  4204  042B  24E6  3180         	fcall	_PWM_Capture_init
  4205                           
  4206                           ;main.c: 595: ADC_Init( );
  4207  042D  2497  3180         	fcall	_ADC_Init
  4208                           
  4209                           ;main.c: 596: DiagInit( );
  4210  042F  24A1  3180         	fcall	_DiagInit
  4211                           
  4212                           ;main.c: 597: FILTER_Init( );
  4213  0431  24C8  3180         	fcall	_FILTER_Init
  4214                           
  4215                           ;main.c: 600: ui16_Temp_cal = 0;
  4216  0433  0023               	movlb	3	; select bank3
  4217  0434  01E6               	clrf	_ui16_Temp_cal^(0+384)
  4218  0435  01E7               	clrf	(_ui16_Temp_cal+1)^(0+384)
  4219                           
  4220                           ;main.c: 610: I_calibrationInit();
  4221  0436  21D4  3180         	fcall	_I_calibrationInit
  4222                           
  4223                           ;main.c: 612: init_bldc( );
  4224  0438  2567               	fcall	_init_bldc
  4225                           
  4226                           ;main.c: 614: PEIE = 1;
  4227  0439  170B               	bsf	11,6	;volatile
  4228                           
  4229                           ;main.c: 615: GIE = 1;
  4230  043A  178B               	bsf	11,7	;volatile
  4231  043B  0008               	return
  4232  043C                     __end_of_system_init:	
  4233  043C                     __ptext2:	
  4234 ;; *************** function _timer_init *****************
  4235 ;; Defined at:
  4236 ;;		line 73 in file "../timer.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  ui8_TmrNb       1   17[BANK0 ] unsigned char 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  1    wreg      void 
  4243 ;; Registers used:
  4244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4245 ;; Tracked objects:
  4246 ;;		On entry : 16/1
  4247 ;;		On exit  : 16/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4250 ;;      Params:         0       0       0       0       0       0       0       0
  4251 ;;      Locals:         0       1       0       0       0       0       0       0
  4252 ;;      Temps:          0       0       0       0       0       0       0       0
  4253 ;;      Totals:         0       1       0       0       0       0       0       0
  4254 ;;Total ram usage:        1 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:    5
  4257 ;; This function calls:
  4258 ;;		_clear_timer
  4259 ;; This function is called by:
  4260 ;;		_system_init
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           
  4265                           ;psect for function _timer_init
  4266  043C                     _timer_init:	
  4267                           
  4268                           ;incstack = 0
  4269                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4270                           ;timer_init@ui8_TmrNb stored from wreg
  4271  043C  0020               	movlb	0	; select bank0
  4272  043D  00B1               	movwf	timer_init@ui8_TmrNb
  4273                           
  4274                           ;timer.c: 77: switch( ui8_TmrNb )
  4275  043E  2C63               	goto	l6670
  4276  043F                     l6640:	
  4277                           
  4278                           ;timer.c: 83: {
  4279                           ;timer.c: 86: clear_timer( 0 );
  4280  043F  3000               	movlw	0
  4281  0440  2475               	fcall	_clear_timer
  4282                           
  4283                           ;timer.c: 87: TMR0IE = 0;
  4284  0441  128B               	bcf	11,5	;volatile
  4285                           
  4286                           ;timer.c: 88: break;
  4287  0442  0008               	return
  4288  0443                     l6644:	
  4289                           
  4290                           ;timer.c: 95: {
  4291                           ;timer.c: 98: clear_timer( 1 );
  4292  0443  3001               	movlw	1
  4293  0444  2475               	fcall	_clear_timer
  4294                           
  4295                           ;timer.c: 99: T1CON = 0b01110101;
  4296  0445  3075               	movlw	117
  4297  0446  0020               	movlb	0	; select bank0
  4298  0447  0098               	movwf	24	;volatile
  4299                           
  4300                           ;timer.c: 100: TMR1IE = 0;
  4301  0448  0021               	movlb	1	; select bank1
  4302  0449  1011               	bcf	17,0	;volatile
  4303                           
  4304                           ;timer.c: 101: break;
  4305  044A  0008               	return
  4306  044B                     l6650:	
  4307                           
  4308                           ;timer.c: 108: {
  4309                           ;timer.c: 111: clear_timer( 2 );
  4310  044B  3002               	movlw	2
  4311  044C  2475               	fcall	_clear_timer
  4312                           
  4313                           ;timer.c: 112: T2CON = 0b00000111;
  4314  044D  3007               	movlw	7
  4315  044E  0020               	movlb	0	; select bank0
  4316  044F  009C               	movwf	28	;volatile
  4317                           
  4318                           ;timer.c: 113: TMR2IE = 0;
  4319  0450  0021               	movlb	1	; select bank1
  4320  0451  1091               	bcf	17,1	;volatile
  4321                           
  4322                           ;timer.c: 114: break;
  4323  0452  0008               	return
  4324  0453                     l6656:	
  4325                           
  4326                           ;timer.c: 121: {
  4327                           ;timer.c: 124: clear_timer( 4 );
  4328  0453  3004               	movlw	4
  4329  0454  2475               	fcall	_clear_timer
  4330                           
  4331                           ;timer.c: 125: T4CON = 0b00001110;
  4332  0455  300E               	movlw	14
  4333  0456  0028               	movlb	8	; select bank8
  4334  0457  0097               	movwf	23	;volatile
  4335                           
  4336                           ;timer.c: 129: TMR4IE = 1;
  4337  0458  0021               	movlb	1	; select bank1
  4338  0459  1493               	bsf	19,1	;volatile
  4339                           
  4340                           ;timer.c: 131: break;
  4341  045A  0008               	return
  4342  045B                     l6662:	
  4343                           
  4344                           ;timer.c: 138: {
  4345                           ;timer.c: 141: clear_timer( 6 );
  4346  045B  3006               	movlw	6
  4347  045C  2475               	fcall	_clear_timer
  4348                           
  4349                           ;timer.c: 142: T6CON = 0b00000101;
  4350  045D  3005               	movlw	5
  4351  045E  0028               	movlb	8	; select bank8
  4352  045F  009E               	movwf	30	;volatile
  4353                           
  4354                           ;timer.c: 147: TMR6IE = 1;
  4355  0460  0021               	movlb	1	; select bank1
  4356  0461  1593               	bsf	19,3	;volatile
  4357                           
  4358                           ;timer.c: 169: break;
  4359  0462  0008               	return
  4360  0463                     l6670:	
  4361  0463  0831               	movf	timer_init@ui8_TmrNb,w
  4362                           
  4363                           ; Switch size 1, requested type "space"
  4364                           ; Number of cases is 5, Range of values is 0 to 6
  4365                           ; switch strategies available:
  4366                           ; Name         Instructions Cycles
  4367                           ; simple_byte           16     9 (average)
  4368                           ; direct_byte           20     6 (fixed)
  4369                           ; jumptable            260     6 (fixed)
  4370                           ;	Chosen strategy is simple_byte
  4371  0464  3A00               	xorlw	0	; case 0
  4372  0465  1903               	skipnz
  4373  0466  2C3F               	goto	l6640
  4374  0467  3A01               	xorlw	1	; case 1
  4375  0468  1903               	skipnz
  4376  0469  2C43               	goto	l6644
  4377  046A  3A03               	xorlw	3	; case 2
  4378  046B  1903               	skipnz
  4379  046C  2C4B               	goto	l6650
  4380  046D  3A06               	xorlw	6	; case 4
  4381  046E  1903               	skipnz
  4382  046F  2C53               	goto	l6656
  4383  0470  3A02               	xorlw	2	; case 6
  4384  0471  1903               	skipnz
  4385  0472  2C5B               	goto	l6662
  4386  0473  2C74               	goto	l1917
  4387  0474                     l1917:	
  4388  0474  0008               	return
  4389  0475                     __end_of_timer_init:	
  4390  0475                     __ptext3:	
  4391 ;; *************** function _clear_timer *****************
  4392 ;; Defined at:
  4393 ;;		line 302 in file "../timer.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  ui8_TmrNb       1   16[BANK0 ] unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4402 ;; Tracked objects:
  4403 ;;		On entry : 1C/0
  4404 ;;		On exit  : 17/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4407 ;;      Params:         0       0       0       0       0       0       0       0
  4408 ;;      Locals:         0       1       0       0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0
  4410 ;;      Totals:         0       1       0       0       0       0       0       0
  4411 ;;Total ram usage:        1 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    4
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_main
  4418 ;;		_timer_init
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           
  4423                           ;psect for function _clear_timer
  4424  0475                     _clear_timer:	
  4425                           
  4426                           ;incstack = 0
  4427                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  4428                           ;clear_timer@ui8_TmrNb stored from wreg
  4429  0475  0020               	movlb	0	; select bank0
  4430  0476  00B0               	movwf	clear_timer@ui8_TmrNb
  4431                           
  4432                           ;timer.c: 306: switch( ui8_TmrNb )
  4433  0477  2C85               	goto	l6336
  4434  0478                     l6324:	
  4435                           
  4436                           ;timer.c: 312: {
  4437                           ;timer.c: 314: TMR0 = 0;
  4438  0478  0195               	clrf	21	;volatile
  4439                           
  4440                           ;timer.c: 315: break;
  4441  0479  0008               	return
  4442  047A                     l6326:	
  4443                           
  4444                           ;timer.c: 322: {
  4445                           ;timer.c: 324: TMR1L = 0x00;
  4446  047A  0196               	clrf	22	;volatile
  4447                           
  4448                           ;timer.c: 325: TMR1H = 0x00;
  4449  047B  0197               	clrf	23	;volatile
  4450                           
  4451                           ;timer.c: 326: break;
  4452  047C  0008               	return
  4453  047D                     l6328:	
  4454                           
  4455                           ;timer.c: 333: {
  4456                           ;timer.c: 335: TMR2 = 0;
  4457  047D  019A               	clrf	26	;volatile
  4458                           
  4459                           ;timer.c: 336: break;
  4460  047E  0008               	return
  4461  047F                     l6330:	
  4462                           
  4463                           ;timer.c: 343: {
  4464                           ;timer.c: 345: TMR4 = 0;
  4465  047F  0028               	movlb	8	; select bank8
  4466  0480  0195               	clrf	21	;volatile
  4467                           
  4468                           ;timer.c: 346: break;
  4469  0481  0008               	return
  4470  0482                     l6332:	
  4471                           
  4472                           ;timer.c: 353: {
  4473                           ;timer.c: 355: TMR6 = 0;
  4474  0482  0028               	movlb	8	; select bank8
  4475  0483  019C               	clrf	28	;volatile
  4476                           
  4477                           ;timer.c: 356: break;
  4478  0484  0008               	return
  4479  0485                     l6336:	
  4480  0485  0830               	movf	clear_timer@ui8_TmrNb,w
  4481                           
  4482                           ; Switch size 1, requested type "space"
  4483                           ; Number of cases is 5, Range of values is 0 to 6
  4484                           ; switch strategies available:
  4485                           ; Name         Instructions Cycles
  4486                           ; simple_byte           16     9 (average)
  4487                           ; direct_byte           20     6 (fixed)
  4488                           ; jumptable            260     6 (fixed)
  4489                           ;	Chosen strategy is simple_byte
  4490  0486  3A00               	xorlw	0	; case 0
  4491  0487  1903               	skipnz
  4492  0488  2C78               	goto	l6324
  4493  0489  3A01               	xorlw	1	; case 1
  4494  048A  1903               	skipnz
  4495  048B  2C7A               	goto	l6326
  4496  048C  3A03               	xorlw	3	; case 2
  4497  048D  1903               	skipnz
  4498  048E  2C7D               	goto	l6328
  4499  048F  3A06               	xorlw	6	; case 4
  4500  0490  1903               	skipnz
  4501  0491  2C7F               	goto	l6330
  4502  0492  3A02               	xorlw	2	; case 6
  4503  0493  1903               	skipnz
  4504  0494  2C82               	goto	l6332
  4505  0495  2C96               	goto	l1940
  4506  0496                     l1940:	
  4507  0496  0008               	return
  4508  0497                     __end_of_clear_timer:	
  4509  0497                     __ptext15:	
  4510 ;; *************** function _ADC_Init *****************
  4511 ;; Defined at:
  4512 ;;		line 102 in file "../adc.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;		None
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;		None
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      void 
  4519 ;; Registers used:
  4520 ;;		wreg, status,2
  4521 ;; Tracked objects:
  4522 ;;		On entry : 18/1
  4523 ;;		On exit  : 1F/2
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4526 ;;      Params:         0       0       0       0       0       0       0       0
  4527 ;;      Locals:         0       0       0       0       0       0       0       0
  4528 ;;      Temps:          0       0       0       0       0       0       0       0
  4529 ;;      Totals:         0       0       0       0       0       0       0       0
  4530 ;;Total ram usage:        0 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    4
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_system_init
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           
  4541                           ;psect for function _ADC_Init
  4542  0497                     _ADC_Init:	
  4543                           
  4544                           ;adc.c: 106: ADCON1 = 0b10100000;
  4545                           
  4546                           ;incstack = 0
  4547                           ; Regs used in _ADC_Init: [wreg+status,2]
  4548  0497  30A0               	movlw	160
  4549  0498  0021               	movlb	1	; select bank1
  4550  0499  009E               	movwf	30	;volatile
  4551                           
  4552                           ;adc.c: 108: ADCON0 = 0b00000000;
  4553  049A  019D               	clrf	29	;volatile
  4554                           
  4555                           ;adc.c: 109: ADON = 1;
  4556  049B  141D               	bsf	29,0	;volatile
  4557                           
  4558                           ;adc.c: 111: ui8_temp_calibration = 0;
  4559  049C  0022               	movlb	2	; select bank2
  4560  049D  0817               	movf	23,w	;volatile
  4561  049E  3830               	iorlw	48
  4562  049F  0097               	movwf	23	;volatile
  4563  04A0  0008               	return
  4564  04A1                     __end_of_ADC_Init:	
  4565  04A1                     __ptext14:	
  4566 ;; *************** function _DiagInit *****************
  4567 ;; Defined at:
  4568 ;;		line 148 in file "../diag.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;		None
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;		None
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  1    wreg      void 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0, pclath, cstack
  4577 ;; Tracked objects:
  4578 ;;		On entry : 1F/2
  4579 ;;		On exit  : 1F/2
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4582 ;;      Params:         0       0       0       0       0       0       0       0
  4583 ;;      Locals:         0       0       0       0       0       0       0       0
  4584 ;;      Temps:          0       0       0       0       0       0       0       0
  4585 ;;      Totals:         0       0       0       0       0       0       0       0
  4586 ;;Total ram usage:        0 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    5
  4589 ;; This function calls:
  4590 ;;		_PWM_Write_Out
  4591 ;; This function is called by:
  4592 ;;		_system_init
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           
  4597                           ;psect for function _DiagInit
  4598  04A1                     _DiagInit:	
  4599                           
  4600                           ;diag.c: 162: ui8_error_Flags.b = 0;
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  4604  04A1  0021               	movlb	1	; select bank1
  4605  04A2  300B               	movlw	11
  4606  04A3  01E6               	clrf	_ui8_error_Flags^(0+128)
  4607                           
  4608                           ;diag.c: 163: PWM_Write_Out( 11 );
  4609  04A4  3195  255D         	fcall	_PWM_Write_Out
  4610                           
  4611                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  4612  04A6  01E6               	clrf	_ui16_IPhase1_bldc_cal^(0+256)
  4613  04A7  01E7               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  4614                           
  4615                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  4616  04A8  01E4               	clrf	_ui16_IPhase2_bldc_cal^(0+256)
  4617  04A9  01E5               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  4618                           
  4619                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  4620  04AA  01E2               	clrf	_ui16_IPhase3_bldc_cal^(0+256)
  4621  04AB  01E3               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  4622  04AC  0008               	return
  4623  04AD                     __end_of_DiagInit:	
  4624  04AD                     __ptext13:	
  4625 ;; *************** function _EnableMCP201 *****************
  4626 ;; Defined at:
  4627 ;;		line 434 in file "../lin.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  _dcnt           1   18[BANK0 ] unsigned char 
  4632 ;;  _dcnt           1   17[BANK0 ] unsigned char 
  4633 ;;  _dcnt           1   16[BANK0 ] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  1    wreg      void 
  4636 ;; Registers used:
  4637 ;;		status,2
  4638 ;; Tracked objects:
  4639 ;;		On entry : 1F/1
  4640 ;;		On exit  : 1F/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4643 ;;      Params:         0       0       0       0       0       0       0       0
  4644 ;;      Locals:         0       3       0       0       0       0       0       0
  4645 ;;      Temps:          0       0       0       0       0       0       0       0
  4646 ;;      Totals:         0       3       0       0       0       0       0       0
  4647 ;;Total ram usage:        3 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    4
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_system_init
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           
  4658                           ;psect for function _EnableMCP201
  4659  04AD                     _EnableMCP201:	
  4660                           
  4661                           ;lin.c: 448: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _EnableMCP201: [status,2]
  4665  04AD  0020               	movlb	0	; select bank0
  4666  04AE  128E               	bcf	14,5	;volatile
  4667  04AF  01B0               	clrf	EnableMCP201@_dcnt
  4668  04B0  2CB3               	goto	l940
  4669  04B1                     l941:	
  4670  04B1  0000               	nop	;# 
  4671  04B2  0000               	nop	;# 
  4672  04B3                     l940:	
  4673  04B3  0020               	movlb	0	; select bank0
  4674  04B4  0BB0               	decfsz	EnableMCP201@_dcnt,f
  4675  04B5  2CB1               	goto	l941
  4676                           
  4677                           ;lin.c: 450: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4678  04B6  168E               	bsf	14,5	;volatile
  4679  04B7  01B1               	clrf	EnableMCP201@_dcnt_712
  4680  04B8  2CBB               	goto	l945
  4681  04B9                     l946:	
  4682  04B9  0000               	nop	;# 
  4683  04BA  0000               	nop	;# 
  4684  04BB                     l945:	
  4685  04BB  0020               	movlb	0	; select bank0
  4686  04BC  0BB1               	decfsz	EnableMCP201@_dcnt_712,f
  4687  04BD  2CB9               	goto	l946
  4688                           
  4689                           ;lin.c: 452: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4690  04BE  128E               	bcf	14,5	;volatile
  4691  04BF  01B2               	clrf	EnableMCP201@_dcnt_713
  4692  04C0  2CC3               	goto	l950
  4693  04C1                     l951:	
  4694  04C1  0000               	nop	;# 
  4695  04C2  0000               	nop	;# 
  4696  04C3                     l950:	
  4697  04C3  0020               	movlb	0	; select bank0
  4698  04C4  0BB2               	decfsz	EnableMCP201@_dcnt_713,f
  4699  04C5  2CC1               	goto	l951
  4700                           
  4701                           ;lin.c: 453: RC5 = 1;
  4702  04C6  168E               	bsf	14,5	;volatile
  4703  04C7  0008               	return
  4704  04C8                     __end_of_EnableMCP201:	
  4705  04C8                     __ptext12:	
  4706 ;; *************** function _FILTER_Init *****************
  4707 ;; Defined at:
  4708 ;;		line 226 in file "../adc.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 1F/2
  4719 ;;		On exit  : 1F/1
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4722 ;;      Params:         0       0       0       0       0       0       0       0
  4723 ;;      Locals:         0       0       0       0       0       0       0       0
  4724 ;;      Temps:          0       0       0       0       0       0       0       0
  4725 ;;      Totals:         0       0       0       0       0       0       0       0
  4726 ;;Total ram usage:        0 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    5
  4729 ;; This function calls:
  4730 ;;		_ADC_Read
  4731 ;;		_ADC_Wait
  4732 ;; This function is called by:
  4733 ;;		_system_init
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           
  4738                           ;psect for function _FILTER_Init
  4739  04C8                     _FILTER_Init:	
  4740                           
  4741                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4745  04C8  0021               	movlb	1	; select bank1
  4746  04C9  01E7               	clrf	_windowPtr1^(0+128)
  4747  04CA                     l9902:	
  4748  04CA  3008               	movlw	8
  4749  04CB  0267               	subwf	_windowPtr1^(0+128),w
  4750  04CC  1803               	btfsc	3,0
  4751  04CD  0008               	return
  4752                           
  4753                           ;adc.c: 232: {
  4754                           ;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  4755  04CE  3031               	movlw	49
  4756  04CF  009D               	movwf	29	;volatile
  4757                           
  4758                           ;adc.c: 235: ADC_Wait( );
  4759  04D0  2268  3180         	fcall	_ADC_Wait
  4760                           
  4761                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  4762  04D2  2281  3180         	fcall	_ADC_Read
  4763  04D4  0831               	movf	?_ADC_Read+1,w
  4764  04D5  00D8               	movwf	_ui16_Ubat_bldc+1	;volatile
  4765  04D6  0830               	movf	?_ADC_Read,w
  4766  04D7  00D7               	movwf	_ui16_Ubat_bldc	;volatile
  4767                           
  4768                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  4769  04D8  2589  3180         	fcall	PL94	;call to abstracted procedure
  4770  04DA  305E               	movlw	94
  4771  04DB  3FC0               	movwi [0]fsr1
  4772  04DC  3001               	movlw	1
  4773  04DD  3FC1               	movwi [1]fsr1
  4774  04DE  0AE7               	incf	_windowPtr1^(0+128),f
  4775  04DF  2CCA               	goto	l9902
  4776  04E0                     __end_of_FILTER_Init:	
  4777  04E0                     __ptext10:	
  4778 ;; *************** function _Oscill_Source_Block *****************
  4779 ;; Defined at:
  4780 ;;		line 478 in file "../timer.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;		None
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg
  4789 ;; Tracked objects:
  4790 ;;		On entry : 1F/0
  4791 ;;		On exit  : 1F/1
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4794 ;;      Params:         0       0       0       0       0       0       0       0
  4795 ;;      Locals:         0       0       0       0       0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0
  4797 ;;      Totals:         0       0       0       0       0       0       0       0
  4798 ;;Total ram usage:        0 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    4
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_system_init
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           
  4809                           ;psect for function _Oscill_Source_Block
  4810  04E0                     _Oscill_Source_Block:	
  4811                           
  4812                           ;timer.c: 482: OSCCON = 0xF0;
  4813                           
  4814                           ;incstack = 0
  4815                           ; Regs used in _Oscill_Source_Block: [wreg]
  4816  04E0  30F0               	movlw	240
  4817  04E1  0021               	movlb	1	; select bank1
  4818  04E2  0099               	movwf	25	;volatile
  4819                           
  4820                           ;timer.c: 483: WDTCON = 0b00010001;
  4821  04E3  3011               	movlw	17
  4822  04E4  0097               	movwf	23	;volatile
  4823  04E5  0008               	return
  4824  04E6                     __end_of_Oscill_Source_Block:	
  4825  04E6                     __ptext9:	
  4826 ;; *************** function _PWM_Capture_init *****************
  4827 ;; Defined at:
  4828 ;;		line 78 in file "../pwm.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;  ui8_CCP_Nb      1   16[BANK0 ] unsigned char 
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1    wreg      void 
  4835 ;; Registers used:
  4836 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4837 ;; Tracked objects:
  4838 ;;		On entry : 16/1
  4839 ;;		On exit  : 18/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4842 ;;      Params:         0       0       0       0       0       0       0       0
  4843 ;;      Locals:         0       1       0       0       0       0       0       0
  4844 ;;      Temps:          0       0       0       0       0       0       0       0
  4845 ;;      Totals:         0       1       0       0       0       0       0       0
  4846 ;;Total ram usage:        1 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    4
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_system_init
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           
  4857                           ;psect for function _PWM_Capture_init
  4858  04E6                     _PWM_Capture_init:	
  4859                           
  4860                           ;incstack = 0
  4861                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  4862                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  4863  04E6  0020               	movlb	0	; select bank0
  4864  04E7  00B0               	movwf	PWM_Capture_init@ui8_CCP_Nb
  4865                           
  4866                           ;pwm.c: 83: ui8_PWMinDC_sav = 0;
  4867  04E8  0021               	movlb	1	; select bank1
  4868  04E9  01CA               	clrf	_ui8_PWMinDC_sav^(0+128)
  4869                           
  4870                           ;pwm.c: 84: ui8_PWMin_failCnt = 0;
  4871  04EA  0022               	movlb	2	; select bank2
  4872  04EB  01CE               	clrf	_ui8_PWMin_failCnt^(0+256)
  4873                           
  4874                           ;pwm.c: 93: switch( ui8_CCP_Nb )
  4875  04EC  0020               	movlb	0	; select bank0
  4876  04ED  0830               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  4877                           
  4878                           ; Switch size 1, requested type "space"
  4879                           ; Number of cases is 5, Range of values is 1 to 5
  4880                           ; switch strategies available:
  4881                           ; Name         Instructions Cycles
  4882                           ; simple_byte           16     9 (average)
  4883                           ; direct_byte           19     9 (fixed)
  4884                           ; jumptable            263     9 (fixed)
  4885                           ;	Chosen strategy is simple_byte
  4886  04EE  3A01               	xorlw	1	; case 1
  4887  04EF  1903               	skipnz
  4888  04F0  2CFE               	goto	l6674
  4889  04F1  3A03               	xorlw	3	; case 2
  4890  04F2  1903               	skipnz
  4891  04F3  2D0A               	goto	l6682
  4892  04F4  3A01               	xorlw	1	; case 3
  4893  04F5  1903               	skipnz
  4894  04F6  2D16               	goto	l6690
  4895  04F7  3A07               	xorlw	7	; case 4
  4896  04F8  1903               	skipnz
  4897  04F9  2D22               	goto	l6698
  4898  04FA  3A01               	xorlw	1	; case 5
  4899  04FB  1903               	skipnz
  4900  04FC  2D2E               	goto	l6706
  4901  04FD  2D37               	goto	l1366
  4902  04FE                     l6674:	
  4903                           
  4904                           ;pwm.c: 99: {
  4905                           ;pwm.c: 101: CCP1CON = 0x00;
  4906  04FE  0025               	movlb	5	; select bank5
  4907  04FF  0193               	clrf	19	;volatile
  4908                           
  4909                           ;pwm.c: 102: CCPR1L = 0x00;
  4910  0500  0191               	clrf	17	;volatile
  4911                           
  4912                           ;pwm.c: 103: CCPR1H = 0x00;
  4913  0501  0192               	clrf	18	;volatile
  4914                           
  4915                           ;pwm.c: 104: CCP1IE = 1;
  4916  0502  0021               	movlb	1	; select bank1
  4917  0503  1511               	bsf	17,2	;volatile
  4918                           
  4919                           ;pwm.c: 105: CCP1IF = 0;
  4920  0504  0020               	movlb	0	; select bank0
  4921  0505  1111               	bcf	17,2	;volatile
  4922                           
  4923                           ;pwm.c: 106: CCP1CON = 0x05;
  4924  0506  3005               	movlw	5
  4925  0507  0025               	movlb	5	; select bank5
  4926  0508  0093               	movwf	19	;volatile
  4927                           
  4928                           ;pwm.c: 107: break;
  4929  0509  0008               	return
  4930  050A                     l6682:	
  4931                           
  4932                           ;pwm.c: 114: {
  4933                           ;pwm.c: 116: CCP2CON = 0x00;
  4934  050A  0025               	movlb	5	; select bank5
  4935  050B  019A               	clrf	26	;volatile
  4936                           
  4937                           ;pwm.c: 117: CCPR2L = 0x00;
  4938  050C  0198               	clrf	24	;volatile
  4939                           
  4940                           ;pwm.c: 118: CCPR2H = 0x00;
  4941  050D  0199               	clrf	25	;volatile
  4942                           
  4943                           ;pwm.c: 119: CCP2IE = 1;
  4944  050E  0021               	movlb	1	; select bank1
  4945  050F  1412               	bsf	18,0	;volatile
  4946                           
  4947                           ;pwm.c: 120: CCP2IF = 0;
  4948  0510  0020               	movlb	0	; select bank0
  4949  0511  1012               	bcf	18,0	;volatile
  4950                           
  4951                           ;pwm.c: 121: CCP2CON = 0x05;
  4952  0512  3005               	movlw	5
  4953  0513  0025               	movlb	5	; select bank5
  4954  0514  009A               	movwf	26	;volatile
  4955                           
  4956                           ;pwm.c: 122: break;
  4957  0515  0008               	return
  4958  0516                     l6690:	
  4959                           
  4960                           ;pwm.c: 129: {
  4961                           ;pwm.c: 131: CCP3CON = 0x00;
  4962  0516  0026               	movlb	6	; select bank6
  4963  0517  0193               	clrf	19	;volatile
  4964                           
  4965                           ;pwm.c: 132: CCPR3L = 0x00;
  4966  0518  0191               	clrf	17	;volatile
  4967                           
  4968                           ;pwm.c: 133: CCPR3H = 0x00;
  4969  0519  0192               	clrf	18	;volatile
  4970                           
  4971                           ;pwm.c: 134: CCP3IE = 1;
  4972  051A  0021               	movlb	1	; select bank1
  4973  051B  1613               	bsf	19,4	;volatile
  4974                           
  4975                           ;pwm.c: 135: CCP3IF = 0;
  4976  051C  0020               	movlb	0	; select bank0
  4977  051D  1213               	bcf	19,4	;volatile
  4978                           
  4979                           ;pwm.c: 136: CCP3CON = 0x05;
  4980  051E  3005               	movlw	5
  4981  051F  0026               	movlb	6	; select bank6
  4982  0520  0093               	movwf	19	;volatile
  4983                           
  4984                           ;pwm.c: 137: break;
  4985  0521  0008               	return
  4986  0522                     l6698:	
  4987                           
  4988                           ;pwm.c: 144: {
  4989                           ;pwm.c: 146: CCP4CON = 0x00;
  4990  0522  0026               	movlb	6	; select bank6
  4991  0523  019A               	clrf	26	;volatile
  4992                           
  4993                           ;pwm.c: 147: CCPR4L = 0x00;
  4994  0524  0198               	clrf	24	;volatile
  4995                           
  4996                           ;pwm.c: 148: CCPR4H = 0x00;
  4997  0525  0199               	clrf	25	;volatile
  4998                           
  4999                           ;pwm.c: 149: CCP4IE = 1;
  5000  0526  0021               	movlb	1	; select bank1
  5001  0527  1693               	bsf	19,5	;volatile
  5002                           
  5003                           ;pwm.c: 150: CCP4IF = 0;
  5004  0528  0020               	movlb	0	; select bank0
  5005  0529  1293               	bcf	19,5	;volatile
  5006                           
  5007                           ;pwm.c: 151: CCP4CON = 0x05;
  5008  052A  3005               	movlw	5
  5009  052B  0026               	movlb	6	; select bank6
  5010  052C  009A               	movwf	26	;volatile
  5011                           
  5012                           ;pwm.c: 152: break;
  5013  052D  0008               	return
  5014  052E                     l6706:	
  5015                           
  5016                           ;pwm.c: 159: {
  5017                           ;pwm.c: 161: CCP5CON = 0x00;
  5018  052E  0026               	movlb	6	; select bank6
  5019  052F  019E               	clrf	30	;volatile
  5020                           
  5021                           ;pwm.c: 162: CCPR5L = 0x00;
  5022  0530  019C               	clrf	28	;volatile
  5023                           
  5024                           ;pwm.c: 163: CCPR5H = 0x00;
  5025  0531  019D               	clrf	29	;volatile
  5026                           
  5027                           ;pwm.c: 164: CCP5IE = 1;
  5028  0532  0021               	movlb	1	; select bank1
  5029  0533  1713               	bsf	19,6	;volatile
  5030                           
  5031                           ;pwm.c: 165: CCP5IF = 0;
  5032  0534  0020               	movlb	0	; select bank0
  5033  0535  1313               	bcf	19,6	;volatile
  5034                           
  5035                           ;pwm.c: 166: CCP5CON = 0x05;
  5036                           
  5037                           ;pwm.c: 167: break;
  5038  0536  2EE4               	ljmp	PL134	;call to abstracted procedure
  5039  0537                     l1366:	
  5040  0537  0008               	return
  5041  0538                     __end_of_PWM_Capture_init:	
  5042  0538                     __ptext8:	
  5043 ;; *************** function __ELINMIntInitialize *****************
  5044 ;; Defined at:
  5045 ;;		line 482 in file "../lin.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      unsigned char 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2
  5054 ;; Tracked objects:
  5055 ;;		On entry : 1F/0
  5056 ;;		On exit  : 1F/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5059 ;;      Params:         0       0       0       0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0       0
  5062 ;;      Totals:         0       0       0       0       0       0       0       0
  5063 ;;Total ram usage:        0 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    4
  5066 ;; This function calls:
  5067 ;;		Nothing
  5068 ;; This function is called by:
  5069 ;;		_system_init
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           
  5074                           ;psect for function __ELINMIntInitialize
  5075  0538                     __ELINMIntInitialize:	
  5076                           
  5077                           ;lin.c: 487: SPBRG = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)&0x00FF);
  5078                           
  5079                           ;incstack = 0
  5080                           ; Regs used in __ELINMIntInitialize: [wreg+status,2]
  5081  0538  309F               	movlw	159
  5082  0539  0023               	movlb	3	; select bank3
  5083  053A  009B               	movwf	27	;volatile
  5084                           
  5085                           ;lin.c: 488: SPBRGH = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)>>8);
  5086  053B  3001               	movlw	1
  5087  053C  009C               	movwf	28	;volatile
  5088                           
  5089                           ;lin.c: 489: TXSTA = 0x26;
  5090  053D  3026               	movlw	38
  5091  053E  009E               	movwf	30	;volatile
  5092                           
  5093                           ;lin.c: 490: RCSTA = 0x90;
  5094  053F  3090               	movlw	144
  5095  0540  009D               	movwf	29	;volatile
  5096                           
  5097                           ;lin.c: 491: BAUDCON = 0x48;
  5098  0541  3048               	movlw	72
  5099  0542  009F               	movwf	31	;volatile
  5100                           
  5101                           ;lin.c: 492: PIE1 = 0x00;
  5102  0543  0021               	movlb	1	; select bank1
  5103  0544  0191               	clrf	17	;volatile
  5104                           
  5105                           ;lin.c: 493: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  5106  0545  0023               	movlb	3	; select bank3
  5107  0546  267E               	fcall	PL62	;call to abstracted procedure
  5108                           
  5109                           ;lin.c: 494: _ELINMIntSpace = (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)/
      +                          2;
  5110  0547  0022               	movlb	2	; select bank2
  5111  0548  01DB               	clrf	__ELINMIntSpace^(0+256)
  5112                           
  5113                           ;lin.c: 495: _ELINMIntStatus.ELINMIntStatusByte = 0;
  5114  0549  0020               	movlb	0	; select bank0
  5115  054A  01D3               	clrf	__ELINMIntStatus
  5116                           
  5117                           ;lin.c: 496: _ELINMIntStatus1.ELINMIntStatusByte = 0;
  5118  054B  0021               	movlb	1	; select bank1
  5119  054C  01D4               	clrf	__ELINMIntStatus1^(0+128)
  5120                           
  5121                           ;lin.c: 497: _ELINMIntStatus.ELINMINTSTS.IDLE = 1;
  5122  054D  0020               	movlb	0	; select bank0
  5123  054E  15D3               	bsf	__ELINMIntStatus,3
  5124  054F  0008               	return
  5125  0550                     __end_of__ELINMIntInitialize:	
  5126  0550                     __ptext4:	
  5127 ;; *************** function _init_ports *****************
  5128 ;; Defined at:
  5129 ;;		line 404 in file "../main.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, pclath, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : B1F/3
  5140 ;;		On exit  : 1F/1
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5143 ;;      Params:         0       0       0       0       0       0       0       0
  5144 ;;      Locals:         0       0       0       0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0       0
  5146 ;;      Totals:         0       0       0       0       0       0       0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    5
  5150 ;; This function calls:
  5151 ;;		_read_eeprom_data
  5152 ;; This function is called by:
  5153 ;;		_system_init
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _init_ports
  5159  0550                     _init_ports:	
  5160                           
  5161                           ;main.c: 411: ANSELA = 0b00100111;
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _init_ports: [wreg+status,2+pclath+cstack]
  5165  0550  3027               	movlw	39
  5166  0551  008C               	movwf	12	;volatile
  5167                           
  5168                           ;main.c: 412: ANSELB = 0b00101001;
  5169  0552  3029               	movlw	41
  5170  0553  008D               	movwf	13	;volatile
  5171                           
  5172                           ;main.c: 415: LATA = 0;
  5173  0554  0022               	movlb	2	; select bank2
  5174  0555  018C               	clrf	12	;volatile
  5175                           
  5176                           ;main.c: 416: LATB = 0;
  5177  0556  018D               	clrf	13	;volatile
  5178                           
  5179                           ;main.c: 417: LATC = 0;
  5180  0557  018E               	clrf	14	;volatile
  5181                           
  5182                           ;main.c: 422: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  5183  0558  3055               	movlw	85
  5184  0559  225D  3180         	fcall	_read_eeprom_data
  5185  055B  3A55               	xorlw	85
  5186  055C  1903               	skipnz
  5187  055D  2D60               	goto	l10110
  5188  055E  1A8E               	btfsc	14,5	;volatile
  5189  055F  2D63               	goto	l10114
  5190  0560                     l10110:	
  5191                           
  5192                           ;main.c: 424: {
  5193                           ;main.c: 426: TRISA = 0b01111111;
  5194                           
  5195                           ;main.c: 435: TRISB = 0b00111001;
  5196  0560  2590               	fcall	PL104	;call to abstracted procedure
  5197                           
  5198                           ;main.c: 444: TRISC = 0b00000000;
  5199  0561  018E               	clrf	14	;volatile
  5200                           
  5201                           ;main.c: 455: }
  5202  0562  0008               	return
  5203  0563                     l10114:	
  5204                           
  5205                           ;main.c: 458: else
  5206                           ;main.c: 459: {
  5207                           ;main.c: 461: TRISA = 0b01111111;
  5208                           
  5209                           ;main.c: 470: TRISB = 0b00111001;
  5210  0563  2590               	fcall	PL104	;call to abstracted procedure
  5211                           
  5212                           ;main.c: 479: TRISC = 0b10000000;
  5213  0564  3080               	movlw	128
  5214  0565  008E               	movwf	14	;volatile
  5215  0566  0008               	return
  5216  0567                     __end_of_init_ports:	
  5217  0567                     __ptext5:	
  5218 ;; *************** function _init_bldc *****************
  5219 ;; Defined at:
  5220 ;;		line 207 in file "../bldc.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 1F/2
  5231 ;;		On exit  : 1C/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5234 ;;      Params:         0       0       0       0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0
  5237 ;;      Totals:         0       0       0       0       0       0       0       0
  5238 ;;Total ram usage:        0 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    7
  5241 ;; This function calls:
  5242 ;;		_InitMotorRun
  5243 ;; This function is called by:
  5244 ;;		_system_init
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           
  5249                           ;psect for function _init_bldc
  5250  0567                     _init_bldc:	
  5251                           
  5252                           ;bldc.c: 218: PSTR1CON = 0;
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5256  0567  0025               	movlb	5	; select bank5
  5257  0568  0196               	clrf	22	;volatile
  5258                           
  5259                           ;bldc.c: 222: CM1CON0 = 0x80;
  5260  0569  3080               	movlw	128
  5261  056A  0022               	movlb	2	; select bank2
  5262  056B  0091               	movwf	17	;volatile
  5263                           
  5264                           ;bldc.c: 228: CM1CON1 = 0x00;
  5265  056C  0192               	clrf	18	;volatile
  5266                           
  5267                           ;bldc.c: 230: C1IE = 0;
  5268  056D  0021               	movlb	1	; select bank1
  5269  056E  1292               	bcf	18,5	;volatile
  5270                           
  5271                           ;bldc.c: 235: PWM1CON = 0x87;
  5272  056F  3087               	movlw	135
  5273  0570  0025               	movlb	5	; select bank5
  5274  0571  0094               	movwf	20	;volatile
  5275                           
  5276                           ;bldc.c: 239: CCP1AS = 0x800;
  5277  0572  0195               	clrf	21	;volatile
  5278                           
  5279                           ;bldc.c: 240: CCP1CON = 0x0C;
  5280  0573  300C               	movlw	12
  5281  0574  0093               	movwf	19	;volatile
  5282                           
  5283                           ;bldc.c: 246: CCPR1L = 0;
  5284  0575  0191               	clrf	17	;volatile
  5285                           
  5286                           ;bldc.c: 248: CCP2IE = 0;
  5287  0576  0021               	movlb	1	; select bank1
  5288  0577  1012               	bcf	18,0	;volatile
  5289                           
  5290                           ;bldc.c: 249: CCP2CON = 0x04;
  5291  0578  3004               	movlw	4
  5292  0579  0025               	movlb	5	; select bank5
  5293  057A  009A               	movwf	26	;volatile
  5294                           
  5295                           ;bldc.c: 250: CCPR2L = 0xff;
  5296  057B  30FF               	movlw	255
  5297  057C  0098               	movwf	24	;volatile
  5298                           
  5299                           ;bldc.c: 251: CCPR2H = 0xff;
  5300  057D  0099               	movwf	25	;volatile
  5301                           
  5302                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  5303  057E  3064               	movlw	100
  5304  057F  0020               	movlb	0	; select bank0
  5305  0580  009B               	movwf	27	;volatile
  5306                           
  5307                           ;bldc.c: 255: T2CON = 0x05;
  5308  0581  3005               	movlw	5
  5309  0582  009C               	movwf	28	;volatile
  5310                           
  5311                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  5312  0583  3028               	movlw	40
  5313  0584  0021               	movlb	1	; select bank1
  5314  0585  00E2               	movwf	_ui8_BlankingCount^(0+128)
  5315                           
  5316                           ;bldc.c: 264: TMR2IE = 1;
  5317  0586  1491               	bsf	17,1	;volatile
  5318                           
  5319                           ;bldc.c: 267: MotorFlags.b = 0;
  5320  0587  01FA               	clrf	_MotorFlags
  5321                           
  5322                           ;bldc.c: 270: InitMotorRun( );
  5323  0588  2BA3               	ljmp	l9776
  5324  0589                     __end_of_init_bldc:	
  5325  0589                     PL94:	
  5326  0589  0021               	movlb	1	; select bank1
  5327  058A  3567               	lslf	_windowPtr1^(0+128),w
  5328  058B  3E40               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  5329  058C  0086               	movwf	6
  5330  058D  3002               	movlw	2	; select bank4/5
  5331  058E  0087               	movwf	7
  5332  058F  0008               	return
  5333  0590                     __end_ofPL94:	
  5334  0590                     PL104:	
  5335  0590  307F               	movlw	127
  5336  0591  0021               	movlb	1	; select bank1
  5337  0592  008C               	movwf	12	;volatile
  5338  0593  3039               	movlw	57
  5339  0594  008D               	movwf	13	;volatile
  5340  0595  0008               	return
  5341  0596                     __end_ofPL104:	
  5342  0596                     __ptext60:	
  5343 ;; *************** function _ELINMIntHandler *****************
  5344 ;; Defined at:
  5345 ;;		line 555 in file "../lin.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 1F/0
  5356 ;;		On exit  : 1C/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5359 ;;      Params:         0       0       0       0       0       0       0       0
  5360 ;;      Locals:         0       0       0       0       0       0       0       0
  5361 ;;      Temps:          0       0       0       0       0       0       0       0
  5362 ;;      Totals:         0       0       0       0       0       0       0       0
  5363 ;;Total ram usage:        0 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    1
  5366 ;; This function calls:
  5367 ;;		__ELINMIntResetProtocol
  5368 ;; This function is called by:
  5369 ;;		_interrupt_handler
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _ELINMIntHandler
  5375  0596                     _ELINMIntHandler:	
  5376                           
  5377                           ;lin.c: 560: if( SENDB == 0)
  5378                           
  5379                           ;incstack = 0
  5380                           ; Regs used in _ELINMIntHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5381  0596  0023               	movlb	3	; select bank3
  5382  0597  199E               	btfsc	30,3	;volatile
  5383  0598  2E1A               	goto	i1l8172
  5384                           
  5385                           ;lin.c: 563: {
  5386                           ;lin.c: 565: if( RCIF)
  5387  0599  0020               	movlb	0	; select bank0
  5388  059A  1E91               	btfss	17,5	;volatile
  5389  059B  2E1A               	goto	i1l8172
  5390                           
  5391                           ;lin.c: 568: {
  5392                           ;lin.c: 572: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
  5393  059C  1DD3               	btfss	__ELINMIntStatus,3
  5394  059D  2DB2               	goto	i1l964
  5395                           
  5396                           ;lin.c: 575: {
  5397                           ;lin.c: 577: if( ( RCSTA & 0x06 ) == 0)
  5398  059E  0023               	movlb	3	; select bank3
  5399  059F  081D               	movf	29,w	;volatile
  5400  05A0  3906               	andlw	6
  5401  05A1  1D03               	btfss	3,2
  5402  05A2  2E1A               	goto	i1l8172
  5403                           
  5404                           ;lin.c: 580: {
  5405                           ;lin.c: 584: if( RCREG == 0x80)
  5406  05A3  3080               	movlw	128
  5407  05A4  0619               	xorwf	25,w	;volatile
  5408  05A5  1D03               	btfss	3,2
  5409  05A6  2E1A               	goto	i1l8172
  5410                           
  5411                           ;lin.c: 587: {
  5412                           ;lin.c: 589: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  5413  05A7  267E  3180         	fcall	PL62	;call to abstracted procedure
  5414                           
  5415                           ;lin.c: 590: _ELINMIntReadBack = RCREG;
  5416  05A9  0819               	movf	25,w	;volatile
  5417  05AA  0021               	movlb	1	; select bank1
  5418  05AB  00D2               	movwf	__ELINMIntReadBack^(0+128)
  5419                           
  5420                           ;lin.c: 593: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT)
  5421  05AC  1ED4               	btfss	__ELINMIntStatus1^(0+128),5
  5422  05AD  2DB0               	goto	i1l967
  5423                           
  5424                           ;lin.c: 596: {
  5425                           ;lin.c: 598: _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT = 0;
  5426  05AE  12D4               	bcf	__ELINMIntStatus1^(0+128),5
  5427                           
  5428                           ;lin.c: 601: }
  5429  05AF  2E1A               	goto	i1l8172
  5430  05B0                     i1l967:	
  5431                           
  5432                           ;lin.c: 604: else
  5433                           ;lin.c: 605: {
  5434                           ;lin.c: 607: _ELINMIntStatus1.ELINMINTSTS.WAKEUP = 1;
  5435  05B0  1454               	bsf	__ELINMIntStatus1^(0+128),0
  5436  05B1  2E1A               	goto	i1l8172
  5437  05B2                     i1l964:	
  5438                           
  5439                           ;lin.c: 623: else
  5440                           ;lin.c: 624: {
  5441                           ;lin.c: 626: if( _ELINMIntStatus.ELINMINTSTS.TX)
  5442  05B2  1C53               	btfss	__ELINMIntStatus,0
  5443  05B3  2DED               	goto	i1l970
  5444                           
  5445                           ;lin.c: 629: {
  5446                           ;lin.c: 633: if( ( RCSTA & 0x06 ) && _ELINMIntMessageBufferPointer)
  5447  05B4  0023               	movlb	3	; select bank3
  5448  05B5  081D               	movf	29,w	;volatile
  5449  05B6  3906               	andlw	6
  5450  05B7  1903               	btfsc	3,2
  5451  05B8  2DBD               	goto	i1l8120
  5452  05B9  0021               	movlb	1	; select bank1
  5453  05BA  0851               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  5454  05BB  1D03               	btfss	3,2
  5455  05BC  2DF4               	goto	i1l8152
  5456  05BD                     i1l8120:	
  5457                           ;lin.c: 642: }
  5458                           
  5459                           ;lin.c: 636: {
  5460                           ;lin.c: 638: _ELINMIntResetProtocol(
  5461                           ;lin.c: 639: 0x08 + 0x04 + 0x70 );
  5462                           
  5463                           
  5464                           ;lin.c: 645: else
  5465                           ;lin.c: 646: {
  5466                           ;lin.c: 651: if( _ELINMIntMessageBufferPointer == 2)
  5467  05BD  3002               	movlw	2
  5468  05BE  0021               	movlb	1	; select bank1
  5469  05BF  0651               	xorwf	__ELINMIntMessageBufferPointer^(0+128),w
  5470  05C0  1903               	btfsc	3,2
  5471                           
  5472                           ;lin.c: 654: {
  5473                           ;lin.c: 656: _ELINMIntStatus1.ELINMINTSTS.HEADER = 0;
  5474  05C1  10D4               	bcf	__ELINMIntStatus1^(0+128),1
  5475                           
  5476                           ;lin.c: 659: }
  5477                           ;lin.c: 662: if( _ELINMIntSpace)
  5478  05C2  0022               	movlb	2	; select bank2
  5479  05C3  085B               	movf	__ELINMIntSpace^(0+256),w
  5480  05C4  1903               	btfsc	3,2
  5481  05C5  2DC8               	goto	i1l8128
  5482                           
  5483                           ;lin.c: 665: {
  5484                           ;lin.c: 667: _ELINMIntSpace--;
  5485  05C6  03DB               	decf	__ELINMIntSpace^(0+256),f
  5486                           
  5487                           ;lin.c: 670: }
  5488  05C7  2E1A               	goto	i1l8172
  5489  05C8                     i1l8128:	
  5490                           
  5491                           ;lin.c: 673: else
  5492                           ;lin.c: 674: {
  5493                           ;lin.c: 676: if( _ELINMIntReadBack != RCREG)
  5494  05C8  0021               	movlb	1	; select bank1
  5495  05C9  0852               	movf	__ELINMIntReadBack^(0+128),w
  5496  05CA  0023               	movlb	3	; select bank3
  5497  05CB  0619               	xorwf	25,w	;volatile
  5498  05CC  1903               	skipnz
  5499  05CD  2DD0               	goto	i1l8132
  5500                           
  5501                           ;lin.c: 679: {
  5502                           ;lin.c: 681: _ELINMIntResetProtocol(0x08 + 0x04 + 0x60 );
  5503  05CE  306C               	movlw	108
  5504  05CF  2E18               	goto	L65
  5505  05D0                     i1l8132:	
  5506                           ;lin.c: 684: }
  5507                           
  5508                           
  5509                           ;lin.c: 687: else
  5510                           ;lin.c: 688: {
  5511                           ;lin.c: 693: if( _ELINMIntMessageSize.SIZE)
  5512  05D0  0021               	movlb	1	; select bank1
  5513  05D1  0853               	movf	__ELINMIntMessageSize^(0+128),w
  5514  05D2  1903               	btfsc	3,2
  5515  05D3  2DE3               	goto	i1l978
  5516                           
  5517                           ;lin.c: 696: {
  5518                           ;lin.c: 698: _ELINMIntReadBack = RCREG;
  5519  05D4  0023               	movlb	3	; select bank3
  5520  05D5  0819               	movf	25,w	;volatile
  5521  05D6  0021               	movlb	1	; select bank1
  5522  05D7  00D2               	movwf	__ELINMIntReadBack^(0+128)
  5523                           
  5524                           ;lin.c: 699: _ELINMIntReadBack = _ELINMIntMessageBuffer[ _ELINMIntMessageBufferPointer ]
      +                          ;
  5525  05D8  0851               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  5526  05D9  2685  3180         	fcall	PL106	;call to abstracted procedure
  5527  05DB  00D2               	movwf	__ELINMIntReadBack^(0+128)
  5528                           
  5529                           ;lin.c: 700: TXREG = _ELINMIntReadBack; _ELINMIntMessageSize.SIZE--;
  5530  05DC  0023               	movlb	3	; select bank3
  5531  05DD  009A               	movwf	26	;volatile
  5532  05DE  0021               	movlb	1	; select bank1
  5533  05DF  03D3               	decf	__ELINMIntMessageSize^(0+128),f
  5534  05E0                     i1l8142:	
  5535                           
  5536                           ;lin.c: 702: _ELINMIntSpace += (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)
      +                          /2;
  5537  05E0  0021               	movlb	1	; select bank1
  5538  05E1  0AD1               	incf	__ELINMIntMessageBufferPointer^(0+128),f
  5539                           
  5540                           ;lin.c: 705: }
  5541  05E2  2E1A               	goto	i1l8172
  5542  05E3                     i1l978:	
  5543                           
  5544                           ;lin.c: 708: else
  5545                           ;lin.c: 709: {
  5546                           ;lin.c: 714: if( _ELINMIntStatus.ELINMINTSTS.RX)
  5547  05E3  0020               	movlb	0	; select bank0
  5548  05E4  1CD3               	btfss	__ELINMIntStatus,1
  5549  05E5  2DEA               	goto	i1l980
  5550                           
  5551                           ;lin.c: 717: {
  5552                           ;lin.c: 719: _ELINMIntStatus.ELINMINTSTS.TX = 0;
  5553  05E6  1053               	bcf	__ELINMIntStatus,0
  5554                           
  5555                           ;lin.c: 720: _ELINMIntMessageBufferPointer = 0;
  5556  05E7  0021               	movlb	1	; select bank1
  5557  05E8  01D1               	clrf	__ELINMIntMessageBufferPointer^(0+128)
  5558                           
  5559                           ;lin.c: 723: }
  5560  05E9  2E1A               	goto	i1l8172
  5561  05EA                     i1l980:	
  5562                           
  5563                           ;lin.c: 726: else
  5564                           ;lin.c: 727: {
  5565                           ;lin.c: 732: _ELINMIntStatus1.ELINMINTSTS.FRAME = 0;
  5566  05EA  0021               	movlb	1	; select bank1
  5567  05EB  1154               	bcf	__ELINMIntStatus1^(0+128),2
  5568  05EC  2E17               	goto	i1l8170
  5569  05ED                     i1l970:	
  5570                           ;lin.c: 733: _ELINMIntResetProtocol( 0x08 );
  5571                           
  5572                           
  5573                           ;lin.c: 755: else
  5574                           ;lin.c: 756: {
  5575                           ;lin.c: 758: if( _ELINMIntStatus.ELINMINTSTS.RX)
  5576  05ED  1CD3               	btfss	__ELINMIntStatus,1
  5577  05EE  2E1A               	goto	i1l8172
  5578                           
  5579                           ;lin.c: 761: {
  5580                           ;lin.c: 765: if( RCSTA & 0x06)
  5581  05EF  0023               	movlb	3	; select bank3
  5582  05F0  081D               	movf	29,w	;volatile
  5583  05F1  3906               	andlw	6
  5584  05F2  1903               	btfsc	3,2
  5585  05F3  2DF6               	goto	i1l8154
  5586  05F4                     i1l8152:	
  5587                           
  5588                           ;lin.c: 768: {
  5589                           ;lin.c: 770: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x70 );
  5590  05F4  307C               	movlw	124
  5591  05F5  2E18               	goto	L65
  5592  05F6                     i1l8154:	
  5593                           ;lin.c: 773: }
  5594                           
  5595                           
  5596                           ;lin.c: 776: else
  5597                           ;lin.c: 777: {
  5598                           ;lin.c: 779: if( _ELINMIntRXMessageSize.SIZE)
  5599  05F6  0022               	movlb	2	; select bank2
  5600  05F7  085C               	movf	__ELINMIntRXMessageSize^(0+256),w
  5601  05F8  1903               	btfsc	3,2
  5602  05F9  2E0E               	goto	i1l8166
  5603                           
  5604                           ;lin.c: 782: {
  5605                           ;lin.c: 784: _ELINMIntMessageBuffer [ _ELINMIntMessageBufferPointer ] = RCREG;
  5606  05FA  0021               	movlb	1	; select bank1
  5607  05FB  0851               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  5608  05FC  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
  5609  05FD  0086               	movwf	6
  5610  05FE  3002               	movlw	2	; select bank4/5
  5611  05FF  0087               	movwf	7
  5612  0600  0023               	movlb	3	; select bank3
  5613  0601  0819               	movf	25,w	;volatile
  5614  0602  0081               	movwf	1
  5615                           
  5616                           ;lin.c: 785: _ELINMIntRXMessageSize.SIZE--;
  5617  0603  0022               	movlb	2	; select bank2
  5618  0604  03DC               	decf	__ELINMIntRXMessageSize^(0+256),f
  5619                           
  5620                           ;lin.c: 786: _ELINMIntRXCRC.CRC += RCREG;
  5621  0605  0023               	movlb	3	; select bank3
  5622  0606  0819               	movf	25,w	;volatile
  5623  0607  07D4               	addwf	__ELINMIntRXCRC^(0+384),f
  5624  0608  1803               	skipnc
  5625  0609  0AD5               	incf	(__ELINMIntRXCRC+1)^(0+384),f
  5626                           
  5627                           ;lin.c: 789: if( _ELINMIntRXCRC.CRCbits.CRC8)
  5628  060A  1C55               	btfss	(__ELINMIntRXCRC^(0+384)+1),0
  5629  060B  2DE0               	goto	i1l8142
  5630                           
  5631                           ;lin.c: 792: {
  5632                           ;lin.c: 794: _ELINMIntRXCRC.CRCL++;
  5633  060C  0AD4               	incf	__ELINMIntRXCRC^(0+384),f
  5634  060D  2DE0               	goto	i1l8142
  5635  060E                     i1l8166:	
  5636                           
  5637                           ;lin.c: 813: _ELINMIntRXCRC.CRCL += RCREG + 1;
  5638  060E  0023               	movlb	3	; select bank3
  5639  060F  0819               	movf	25,w	;volatile
  5640  0610  3E01               	addlw	1
  5641  0611  07D4               	addwf	__ELINMIntRXCRC^(0+384),f
  5642                           
  5643                           ;lin.c: 816: if( _ELINMIntRXCRC.CRCL )
  5644  0612  0854               	movf	__ELINMIntRXCRC^(0+384),w
  5645  0613  1903               	btfsc	3,2
  5646  0614  2E17               	goto	i1l8170
  5647                           
  5648                           ;lin.c: 819: {
  5649                           ;lin.c: 821: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x50 );
  5650  0615  305C               	movlw	92
  5651  0616  2E18               	goto	L65
  5652  0617                     i1l8170:	
  5653                           ;lin.c: 824: }
  5654                           
  5655                           
  5656                           ;lin.c: 827: else
  5657                           ;lin.c: 828: {
  5658                           ;lin.c: 830: _ELINMIntResetProtocol( 0x08 );
  5659  0617  3008               	movlw	8
  5660  0618                     L65:	
  5661  0618  266F  3180         	fcall	__ELINMIntResetProtocol
  5662  061A                     i1l8172:	
  5663                           
  5664                           ;lin.c: 833: }
  5665                           ;lin.c: 836: }
  5666                           ;lin.c: 839: }
  5667                           ;lin.c: 843: }
  5668                           ;lin.c: 846: }
  5669                           ;lin.c: 849: }
  5670                           ;lin.c: 853: }
  5671                           ;lin.c: 856: }
  5672                           ;lin.c: 859: if( _ELINMIntStatus.ELINMINTSTS.IDLE == 0 )
  5673  061A  0020               	movlb	0	; select bank0
  5674  061B  19D3               	btfsc	__ELINMIntStatus,3
  5675  061C  2E5B               	goto	i1l991
  5676                           
  5677                           ;lin.c: 862: {
  5678                           ;lin.c: 866: if( _ELINMIntStatus1.ELINMINTSTS.FRAME == 1)
  5679  061D  0021               	movlb	1	; select bank1
  5680  061E  1D54               	btfss	__ELINMIntStatus1^(0+128),2
  5681  061F  2E54               	goto	i1l8202
  5682                           
  5683                           ;lin.c: 869: {
  5684                           ;lin.c: 871: if( _ELINMIntStatus1.ELINMINTSTS.HEADER == 1)
  5685  0620  1CD4               	btfss	__ELINMIntStatus1^(0+128),1
  5686  0621  2E37               	goto	i1l8188
  5687                           
  5688                           ;lin.c: 874: {
  5689                           ;lin.c: 876: if( _ELINMIntTHeaderMin)
  5690  0622  0022               	movlb	2	; select bank2
  5691  0623  0827               	movf	__ELINMIntTHeaderMin^(0+256),w
  5692  0624  0428               	iorwf	(__ELINMIntTHeaderMin+1)^(0+256),w
  5693  0625  1903               	btfsc	3,2
  5694  0626  2E2B               	goto	i1l8182
  5695                           
  5696                           ;lin.c: 879: {
  5697                           ;lin.c: 881: _ELINMIntTHeaderMin--;
  5698  0627  3001               	movlw	1
  5699  0628  02A7               	subwf	__ELINMIntTHeaderMin^(0+256),f
  5700  0629  3000               	movlw	0
  5701  062A  3BA8               	subwfb	(__ELINMIntTHeaderMin+1)^(0+256),f
  5702  062B                     i1l8182:	
  5703                           
  5704                           ;lin.c: 884: }
  5705                           ;lin.c: 887: if( _ELINMIntTHeaderMax)
  5706  062B  0023               	movlb	3	; select bank3
  5707  062C  0850               	movf	__ELINMIntTHeaderMax^(0+384),w
  5708  062D  0451               	iorwf	(__ELINMIntTHeaderMax+1)^(0+384),w
  5709  062E  1903               	btfsc	3,2
  5710  062F  2E35               	goto	i1l8186
  5711                           
  5712                           ;lin.c: 890: {
  5713                           ;lin.c: 892: _ELINMIntTHeaderMax--;
  5714  0630  3001               	movlw	1
  5715  0631  02D0               	subwf	__ELINMIntTHeaderMax^(0+384),f
  5716  0632  3000               	movlw	0
  5717  0633  3BD1               	subwfb	(__ELINMIntTHeaderMax+1)^(0+384),f
  5718                           
  5719                           ;lin.c: 895: }
  5720  0634  2E3F               	goto	i1l8192
  5721  0635                     i1l8186:	
  5722                           
  5723                           ;lin.c: 898: else
  5724                           ;lin.c: 899: {
  5725                           ;lin.c: 902: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x20 );
  5726  0635  302C               	movlw	44
  5727  0636  2E3D               	goto	L66
  5728  0637                     i1l8188:	
  5729                           
  5730                           ;lin.c: 911: else
  5731                           ;lin.c: 912: {
  5732                           ;lin.c: 917: if( _ELINMIntTHeaderMin)
  5733  0637  0022               	movlb	2	; select bank2
  5734  0638  0827               	movf	__ELINMIntTHeaderMin^(0+256),w
  5735  0639  0428               	iorwf	(__ELINMIntTHeaderMin+1)^(0+256),w
  5736  063A  1903               	btfsc	3,2
  5737  063B  2E3F               	goto	i1l8192
  5738                           
  5739                           ;lin.c: 920: {
  5740                           ;lin.c: 922: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x10 );
  5741  063C  301C               	movlw	28
  5742  063D                     L66:	
  5743  063D  266F  3180         	fcall	__ELINMIntResetProtocol
  5744  063F                     i1l8192:	
  5745                           
  5746                           ;lin.c: 925: }
  5747                           ;lin.c: 928: }
  5748                           ;lin.c: 931: if( _ELINMIntTFrameMin)
  5749  063F  0022               	movlb	2	; select bank2
  5750  0640  0829               	movf	__ELINMIntTFrameMin^(0+256),w
  5751  0641  042A               	iorwf	(__ELINMIntTFrameMin+1)^(0+256),w
  5752  0642  1903               	btfsc	3,2
  5753  0643  2E48               	goto	i1l8196
  5754                           
  5755                           ;lin.c: 934: {
  5756                           ;lin.c: 936: _ELINMIntTFrameMin--;
  5757  0644  3001               	movlw	1
  5758  0645  02A9               	subwf	__ELINMIntTFrameMin^(0+256),f
  5759  0646  3000               	movlw	0
  5760  0647  3BAA               	subwfb	(__ELINMIntTFrameMin+1)^(0+256),f
  5761  0648                     i1l8196:	
  5762                           
  5763                           ;lin.c: 939: }
  5764                           ;lin.c: 942: if( _ELINMIntTFrameMax)
  5765  0648  0023               	movlb	3	; select bank3
  5766  0649  0852               	movf	__ELINMIntTFrameMax^(0+384),w
  5767  064A  0453               	iorwf	(__ELINMIntTFrameMax+1)^(0+384),w
  5768  064B  1903               	btfsc	3,2
  5769  064C  2E52               	goto	i1l8200
  5770                           
  5771                           ;lin.c: 945: {
  5772                           ;lin.c: 947: _ELINMIntTFrameMax--;
  5773  064D  3001               	movlw	1
  5774  064E  02D2               	subwf	__ELINMIntTFrameMax^(0+384),f
  5775  064F  3000               	movlw	0
  5776  0650  3BD3               	subwfb	(__ELINMIntTFrameMax+1)^(0+384),f
  5777                           
  5778                           ;lin.c: 950: }
  5779  0651  0008               	return
  5780  0652                     i1l8200:	
  5781                           
  5782                           ;lin.c: 953: else
  5783                           ;lin.c: 954: {
  5784                           ;lin.c: 957: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x40 );
  5785  0652  304C               	movlw	76
  5786  0653  2E6F               	ljmp	__ELINMIntResetProtocol
  5787  0654                     i1l8202:	
  5788                           
  5789                           ;lin.c: 966: else
  5790                           ;lin.c: 967: {
  5791                           ;lin.c: 972: if( _ELINMIntTFrameMin)
  5792  0654  0022               	movlb	2	; select bank2
  5793  0655  0829               	movf	__ELINMIntTFrameMin^(0+256),w
  5794  0656  042A               	iorwf	(__ELINMIntTFrameMin+1)^(0+256),w
  5795  0657  1903               	btfsc	3,2
  5796  0658  0008               	return
  5797                           
  5798                           ;lin.c: 975: {
  5799                           ;lin.c: 977: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x30 );
  5800  0659  303C               	movlw	60
  5801  065A  2E6F               	ljmp	__ELINMIntResetProtocol
  5802  065B                     i1l991:	
  5803                           
  5804                           ;lin.c: 990: else
  5805                           ;lin.c: 991: {
  5806                           ;lin.c: 993: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT == 0)
  5807  065B  0021               	movlb	1	; select bank1
  5808  065C  1AD4               	btfsc	__ELINMIntStatus1^(0+128),5
  5809  065D  0008               	return
  5810                           
  5811                           ;lin.c: 996: {
  5812                           ;lin.c: 998: if( _ELINMIntSleepTimeout)
  5813  065E  0023               	movlb	3	; select bank3
  5814  065F  0841               	movf	(__ELINMIntSleepTimeout+3)^(0+384),w
  5815  0660  0440               	iorwf	(__ELINMIntSleepTimeout+2)^(0+384),w
  5816  0661  043F               	iorwf	(__ELINMIntSleepTimeout+1)^(0+384),w
  5817  0662  043E               	iorwf	__ELINMIntSleepTimeout^(0+384),w
  5818  0663  1903               	skipnz
  5819  0664  2E6C               	goto	i1l1006
  5820                           
  5821                           ;lin.c: 1001: {
  5822                           ;lin.c: 1003: _ELINMIntSleepTimeout--;
  5823  0665  3001               	movlw	1
  5824  0666  02BE               	subwf	__ELINMIntSleepTimeout^(0+384),f
  5825  0667  3000               	movlw	0
  5826  0668  3BBF               	subwfb	(__ELINMIntSleepTimeout+1)^(0+384),f
  5827  0669  3BC0               	subwfb	(__ELINMIntSleepTimeout+2)^(0+384),f
  5828  066A  3BC1               	subwfb	(__ELINMIntSleepTimeout+3)^(0+384),f
  5829                           
  5830                           ;lin.c: 1006: }
  5831  066B  0008               	return
  5832  066C                     i1l1006:	
  5833                           
  5834                           ;lin.c: 1009: else
  5835                           ;lin.c: 1010: {
  5836                           ;lin.c: 1012: _ELINMIntStatus1.ELINMINTSTS.SLEEP_TIMEOUT = 1;
  5837  066C  0021               	movlb	1	; select bank1
  5838  066D  1754               	bsf	__ELINMIntStatus1^(0+128),6
  5839  066E  0008               	return
  5840  066F                     __end_of_ELINMIntHandler:	
  5841  066F                     __ptext61:	
  5842 ;; *************** function __ELINMIntResetProtocol *****************
  5843 ;; Defined at:
  5844 ;;		line 524 in file "../lin.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  code            1    wreg     unsigned char 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  code            1    0[COMMON] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2
  5853 ;; Tracked objects:
  5854 ;;		On entry : 1C/1
  5855 ;;		On exit  : 1F/3
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5858 ;;      Params:         0       0       0       0       0       0       0       0
  5859 ;;      Locals:         1       0       0       0       0       0       0       0
  5860 ;;      Temps:          0       0       0       0       0       0       0       0
  5861 ;;      Totals:         1       0       0       0       0       0       0       0
  5862 ;;Total ram usage:        1 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; This function calls:
  5865 ;;		Nothing
  5866 ;; This function is called by:
  5867 ;;		_ELINMIntHandler
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           
  5872                           ;psect for function __ELINMIntResetProtocol
  5873  066F                     __ELINMIntResetProtocol:	
  5874                           
  5875                           ;incstack = 0
  5876                           ; Regs used in __ELINMIntResetProtocol: [wreg+status,2]
  5877                           ;__ELINMIntResetProtocol@code stored from wreg
  5878  066F  00F0               	movwf	__ELINMIntResetProtocol@code
  5879                           
  5880                           ;lin.c: 529: _ELINMIntReadBack = RCREG;
  5881  0670  0023               	movlb	3	; select bank3
  5882  0671  0819               	movf	25,w	;volatile
  5883  0672  0021               	movlb	1	; select bank1
  5884  0673  00D2               	movwf	__ELINMIntReadBack^(0+128)
  5885                           
  5886                           ;lin.c: 530: _ELINMIntStatus1.ELINMIntStatusByte = 0;
  5887  0674  01D4               	clrf	__ELINMIntStatus1^(0+128)
  5888                           
  5889                           ;lin.c: 531: _ELINMIntRXCRC.CRC = 0;
  5890  0675  0023               	movlb	3	; select bank3
  5891  0676  01D4               	clrf	__ELINMIntRXCRC^(0+384)
  5892  0677  01D5               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  5893                           
  5894                           ;lin.c: 532: _ELINMIntStatus.ELINMIntStatusByte = code;
  5895  0678  0870               	movf	__ELINMIntResetProtocol@code,w
  5896  0679  0020               	movlb	0	; select bank0
  5897  067A  00D3               	movwf	__ELINMIntStatus
  5898                           
  5899                           ;lin.c: 533: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  5900  067B  0023               	movlb	3	; select bank3
  5901  067C  267E               	fcall	PL62	;call to abstracted procedure
  5902  067D  0008               	return
  5903  067E                     __end_of__ELINMIntResetProtocol:	
  5904  007E                     btemp	set	126	;btemp
  5905  007E                     int$flags	set	126
  5906  007E                     wtemp0	set	126
  5907  067E                     PL62:	
  5908  067E  3027               	movlw	39
  5909  067F  01C1               	clrf	(__ELINMIntSleepTimeout+3)^(0+384)
  5910  0680  01C0               	clrf	(__ELINMIntSleepTimeout+2)^(0+384)
  5911  0681  00BF               	movwf	(__ELINMIntSleepTimeout+1)^(0+384)
  5912  0682  30BB               	movlw	187
  5913  0683  00BE               	movwf	__ELINMIntSleepTimeout^(0+384)
  5914  0684  0008               	return
  5915  0685                     __end_ofPL62:	
  5916  0685                     PL106:	
  5917  0685  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
  5918  0686  0086               	movwf	6
  5919  0687  3002               	movlw	2	; select bank4/5
  5920  0688  0087               	movwf	7
  5921  0689  0801               	movf	1,w
  5922  068A  0008               	return
  5923  068B                     __end_ofPL106:	
  5924  068B                     __ptext50:	
  5925 ;; *************** function _interrupt_PWMCapture *****************
  5926 ;; Defined at:
  5927 ;;		line 438 in file "../pwm.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  1    wreg      void 
  5934 ;; Registers used:
  5935 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5936 ;; Tracked objects:
  5937 ;;		On entry : 1F/0
  5938 ;;		On exit  : 1B/2
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5941 ;;      Params:         0       0       0       0       0       0       0       0
  5942 ;;      Locals:         0       0       0       0       0       0       0       0
  5943 ;;      Temps:          0       0       0       0       0       0       0       0
  5944 ;;      Totals:         0       0       0       0       0       0       0       0
  5945 ;;Total ram usage:        0 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_interrupt_handler
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function _interrupt_PWMCapture
  5956  068B                     _interrupt_PWMCapture:	
  5957                           
  5958                           ;pwm.c: 450: switch( ui8_Pulse_State )
  5959                           
  5960                           ;incstack = 0
  5961                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
  5962  068B  2ECD               	goto	i1l8226
  5963  068C                     i1l1385:	
  5964                           ;pwm.c: 452: {
  5965                           ;pwm.c: 454: case 0:
  5966                           
  5967                           
  5968                           ;pwm.c: 456: {
  5969                           ;pwm.c: 460: ui8_Pulse_State = 1;
  5970                           
  5971                           ;pwm.c: 461: ui16_Capt_Val0.b.lo = CCPR5L;
  5972  068C  26DA  3180         	fcall	PL102	;call to abstracted procedure
  5973  068E  00AE               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
  5974                           
  5975                           ;pwm.c: 462: ui16_Capt_Val0.b.hi = CCPR5H;
  5976  068F  0026               	movlb	6	; select bank6
  5977  0690  081D               	movf	29,w	;volatile
  5978  0691  0021               	movlb	1	; select bank1
  5979  0692  00AF               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
  5980                           
  5981                           ;pwm.c: 463: CCP5CON = 0x04;
  5982                           
  5983                           ;pwm.c: 464: break;
  5984  0693  2EE0               	ljmp	PL120	;call to abstracted procedure
  5985  0694                     i1l8214:	
  5986                           
  5987                           ;pwm.c: 472: {
  5988                           ;pwm.c: 476: ui8_Pulse_State = 2;
  5989  0694  3002               	movlw	2
  5990  0695  00D0               	movwf	_ui8_Pulse_State^(0+256)
  5991                           
  5992                           ;pwm.c: 477: ui16_Capt_Val1.b.lo = CCPR5L;
  5993  0696  0026               	movlb	6	; select bank6
  5994  0697  081C               	movf	28,w	;volatile
  5995  0698  0021               	movlb	1	; select bank1
  5996  0699  00AC               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
  5997                           
  5998                           ;pwm.c: 478: ui16_Capt_Val1.b.hi = CCPR5H;
  5999  069A  0026               	movlb	6	; select bank6
  6000  069B  081D               	movf	29,w	;volatile
  6001  069C  0021               	movlb	1	; select bank1
  6002  069D  00AD               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
  6003                           
  6004                           ;pwm.c: 479: CCP5CON = 0x05;
  6005                           
  6006                           ;pwm.c: 480: break;
  6007  069E  2EE4               	ljmp	PL134	;call to abstracted procedure
  6008  069F                     i1l1388:	
  6009                           ;pwm.c: 483: }
  6010                           ;pwm.c: 486: case 2:
  6011                           
  6012                           
  6013                           ;pwm.c: 488: {
  6014                           ;pwm.c: 492: ui8_Pulse_State = 1;
  6015                           
  6016                           ;pwm.c: 493: ui16_Capt_Val2.b.lo = CCPR5L;
  6017  069F  26DA  3180         	fcall	PL102	;call to abstracted procedure
  6018  06A1  00AA               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
  6019                           
  6020                           ;pwm.c: 494: ui16_Capt_Val2.b.hi = CCPR5H;
  6021  06A2  0026               	movlb	6	; select bank6
  6022  06A3  081D               	movf	29,w	;volatile
  6023  06A4  0021               	movlb	1	; select bank1
  6024  06A5  00AB               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
  6025                           
  6026                           ;pwm.c: 495: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
  6027  06A6  082B               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
  6028  06A7  0022               	movlb	2	; select bank2
  6029  06A8  00A4               	movwf	(_ui16_PWM_Freq_In+1)^(0+256)
  6030  06A9  0021               	movlb	1	; select bank1
  6031  06AA  082A               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
  6032  06AB  0022               	movlb	2	; select bank2
  6033  06AC  00A3               	movwf	_ui16_PWM_Freq_In^(0+256)
  6034  06AD  0021               	movlb	1	; select bank1
  6035  06AE  082E               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
  6036  06AF  0022               	movlb	2	; select bank2
  6037  06B0  02A3               	subwf	_ui16_PWM_Freq_In^(0+256),f
  6038  06B1  0021               	movlb	1	; select bank1
  6039  06B2  082F               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
  6040  06B3  0022               	movlb	2	; select bank2
  6041  06B4  3BA4               	subwfb	(_ui16_PWM_Freq_In+1)^(0+256),f
  6042                           
  6043                           ;pwm.c: 496: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
  6044  06B5  0021               	movlb	1	; select bank1
  6045  06B6  082D               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
  6046  06B7  0023               	movlb	3	; select bank3
  6047  06B8  00EB               	movwf	(_ui16_Duty_Cycle_In+1)^(0+384)
  6048  06B9  0021               	movlb	1	; select bank1
  6049  06BA  082C               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
  6050  06BB  0023               	movlb	3	; select bank3
  6051  06BC  00EA               	movwf	_ui16_Duty_Cycle_In^(0+384)
  6052  06BD  0021               	movlb	1	; select bank1
  6053  06BE  082E               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
  6054  06BF  0023               	movlb	3	; select bank3
  6055  06C0  02EA               	subwf	_ui16_Duty_Cycle_In^(0+384),f
  6056  06C1  0021               	movlb	1	; select bank1
  6057  06C2  082F               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
  6058  06C3  0023               	movlb	3	; select bank3
  6059  06C4  3BEB               	subwfb	(_ui16_Duty_Cycle_In+1)^(0+384),f
  6060                           
  6061                           ;pwm.c: 497: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
  6062  06C5  0021               	movlb	1	; select bank1
  6063  06C6  082B               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
  6064  06C7  00AF               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
  6065  06C8  082A               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
  6066  06C9  00AE               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
  6067                           
  6068                           ;pwm.c: 498: CCP5CON = 0x04;
  6069  06CA  2EE0               	ljmp	PL120	;call to abstracted procedure
  6070  06CB                     i1l8222:	
  6071                           
  6072                           ;pwm.c: 526: {
  6073                           ;pwm.c: 530: ui8_Pulse_State = 0;
  6074  06CB  01D0               	clrf	_ui8_Pulse_State^(0+256)
  6075                           
  6076                           ;pwm.c: 531: break;
  6077  06CC  0008               	return
  6078  06CD                     i1l8226:	
  6079  06CD  0022               	movlb	2	; select bank2
  6080  06CE  0850               	movf	_ui8_Pulse_State^(0+256),w
  6081                           
  6082                           ; Switch size 1, requested type "space"
  6083                           ; Number of cases is 3, Range of values is 0 to 2
  6084                           ; switch strategies available:
  6085                           ; Name         Instructions Cycles
  6086                           ; simple_byte           10     6 (average)
  6087                           ; direct_byte           12     6 (fixed)
  6088                           ; jumptable            260     6 (fixed)
  6089                           ;	Chosen strategy is simple_byte
  6090  06CF  3A00               	xorlw	0	; case 0
  6091  06D0  1903               	skipnz
  6092  06D1  2E8C               	goto	i1l1385
  6093  06D2  3A01               	xorlw	1	; case 1
  6094  06D3  1903               	skipnz
  6095  06D4  2E94               	goto	i1l8214
  6096  06D5  3A03               	xorlw	3	; case 2
  6097  06D6  1903               	skipnz
  6098  06D7  2E9F               	goto	i1l1388
  6099  06D8  2ECB               	goto	i1l8222
  6100  06D9  0008               	return
  6101  06DA                     __end_of_interrupt_PWMCapture:	
  6102  06DA                     PL102:	
  6103  06DA  01D0               	clrf	_ui8_Pulse_State^(0+256)
  6104  06DB  0AD0               	incf	_ui8_Pulse_State^(0+256),f
  6105  06DC  0026               	movlb	6	; select bank6
  6106  06DD  081C               	movf	28,w	;volatile
  6107  06DE  0021               	movlb	1	; select bank1
  6108  06DF  0008               	return
  6109  06E0                     __end_ofPL102:	
  6110  06E0                     PL120:	
  6111  06E0  3004               	movlw	4
  6112  06E1  0026               	movlb	6	; select bank6
  6113  06E2  009E               	movwf	30	;volatile
  6114  06E3  0008               	return
  6115  06E4                     __end_ofPL120:	
  6116  06E4                     PL134:	
  6117  06E4  3005               	movlw	5
  6118  06E5  0026               	movlb	6	; select bank6
  6119  06E6  009E               	movwf	30	;volatile
  6120  06E7  0008               	return
  6121  06E8                     __end_ofPL134:	
  6122  06E8                     __ptext22:	
  6123 ;; *************** function _FILTER_Temp *****************
  6124 ;; Defined at:
  6125 ;;		line 400 in file "../adc.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;		None
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      void 
  6132 ;; Registers used:
  6133 ;;		wreg, status,2, status,0
  6134 ;; Tracked objects:
  6135 ;;		On entry : 1F/3
  6136 ;;		On exit  : 1F/3
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6139 ;;      Params:         0       0       0       0       0       0       0       0
  6140 ;;      Locals:         0       0       0       0       0       0       0       0
  6141 ;;      Temps:          0       2       0       0       0       0       0       0
  6142 ;;      Totals:         0       2       0       0       0       0       0       0
  6143 ;;Total ram usage:        2 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    4
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_Get_Analog_Value
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _FILTER_Temp
  6155  06E8                     _FILTER_Temp:	
  6156  06E8                     l6404:	
  6157                           ;incstack = 0
  6158                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
  6159                           
  6160                           
  6161                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
  6162  06E8  0868               	movf	_ui16_NTC_Temp_bldc^(0+384),w
  6163  06E9  07E0               	addwf	_filterTempNTC^(0+384),f
  6164  06EA  0869               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
  6165  06EB  3DE1               	addwfc	(_filterTempNTC+1)^(0+384),f
  6166                           
  6167                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
  6168  06EC  0861               	movf	(_filterTempNTC+1)^(0+384),w
  6169  06ED  0020               	movlb	0	; select bank0
  6170  06EE  00B1               	movwf	??_FILTER_Temp+1
  6171  06EF  0023               	movlb	3	; select bank3
  6172  06F0  0860               	movf	_filterTempNTC^(0+384),w
  6173  06F1  0020               	movlb	0	; select bank0
  6174  06F2  00B0               	movwf	??_FILTER_Temp
  6175  06F3  3006               	movlw	6
  6176  06F4                     u3685:	
  6177  06F4  36B1               	lsrf	??_FILTER_Temp+1,f
  6178  06F5  0CB0               	rrf	??_FILTER_Temp,f
  6179  06F6  0B89               	decfsz	9,f
  6180  06F7  2EF4               	goto	u3685
  6181  06F8  0830               	movf	??_FILTER_Temp,w
  6182  06F9  0022               	movlb	2	; select bank2
  6183  06FA  00B1               	movwf	_ui16_NTC_Temp_bldc_mean^(0+256)
  6184  06FB  0020               	movlb	0	; select bank0
  6185  06FC  0831               	movf	??_FILTER_Temp+1,w
  6186  06FD  0022               	movlb	2	; select bank2
  6187  06FE  00B2               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256)
  6188                           
  6189                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
  6190  06FF  0831               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
  6191  0700  0023               	movlb	3	; select bank3
  6192  0701  02E0               	subwf	_filterTempNTC^(0+384),f
  6193  0702  0022               	movlb	2	; select bank2
  6194  0703  0832               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
  6195  0704  0023               	movlb	3	; select bank3
  6196  0705  3BE1               	subwfb	(_filterTempNTC+1)^(0+384),f
  6197                           
  6198                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
  6199  0706  0866               	movf	_ui16_Temp_cal^(0+384),w
  6200  0707  0022               	movlb	2	; select bank2
  6201  0708  0731               	addwf	_ui16_NTC_Temp_bldc_mean^(0+256),w
  6202  0709  0023               	movlb	3	; select bank3
  6203  070A  00DE               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
  6204  070B  0867               	movf	(_ui16_Temp_cal+1)^(0+384),w
  6205  070C  0022               	movlb	2	; select bank2
  6206  070D  3D32               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
  6207  070E  0023               	movlb	3	; select bank3
  6208  070F  00DF               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
  6209  0710  0008               	return
  6210  0711                     __end_of_FILTER_Temp:	
  6211                           
  6212                           	psect	bitbssCOMMON
  6213  03C8                     __pbitbssCOMMON:	
  6214  03C8                     _rising_bemf_flag:	
  6215  03C8                     	ds	1
  6216                           
  6217                           	psect	bssCOMMON
  6218  007A                     __pbssCOMMON:	
  6219  007A                     _MotorFlags:	
  6220  007A                     	ds	1
  6221                           
  6222                           	psect	bssBANK0
  6223  004C                     __pbssBANK0:	
  6224  004C                     _ui16_Speed_mat:	
  6225  004C                     	ds	2
  6226  004E                     _ui16_IPhase_bldc:	
  6227  004E                     	ds	2
  6228  0050                     _comm_time:	
  6229  0050                     	ds	2
  6230  0052                     _pt:	
  6231  0052                     	ds	1
  6232  0053                     __ELINMIntStatus:	
  6233  0053                     	ds	1
  6234  0054                     _ui8_b_DResB0_c:	
  6235  0054                     	ds	1
  6236  0055                     _ui8_b_DResLocID_c:	
  6237  0055                     	ds	1
  6238  0056                     _ui8_duty_cycle_BLDC:	
  6239  0056                     	ds	1
  6240  0057                     _ui16_Ubat_bldc:	
  6241  0057                     	ds	2
  6242                           
  6243                           	psect	dataBANK0
  6244  0059                     __pdataBANK0:	
  6245  0059                     _ui8_selected_lid:	
  6246  0059                     	ds	1
  6247                           
  6248                           	psect	bssBANK1
  6249  00A0                     __pbssBANK1:	
  6250  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  6251  00A0                     	ds	2
  6252  00A2                     BVH2_Appl_Layer@Cb24_StateCnt:	
  6253  00A2                     	ds	2
  6254  00A4                     BVH2_Appl_Layer@Cb19_Counter:	
  6255  00A4                     	ds	2
  6256  00A6                     _Cb44_StateCnt:	
  6257  00A6                     	ds	2
  6258  00A8                     _Cb1_StateCnt:	
  6259  00A8                     	ds	2
  6260  00AA                     _ui16_Capt_Val2:	
  6261  00AA                     	ds	2
  6262  00AC                     _ui16_Capt_Val1:	
  6263  00AC                     	ds	2
  6264  00AE                     _ui16_Capt_Val0:	
  6265  00AE                     	ds	2
  6266  00B0                     _ui16_mat_Current:	
  6267  00B0                     	ds	2
  6268  00B2                     _ui8_BattVolt_mat:	
  6269  00B2                     	ds	2
  6270  00B4                     _ui16_speed_fil:	
  6271  00B4                     	ds	2
  6272  00B6                     _ui16_Ubemf_bldc:	
  6273  00B6                     	ds	2
  6274  00B8                     _ui16_phase_advancement:	
  6275  00B8                     	ds	2
  6276  00BA                     _ui16_step_cnt:	
  6277  00BA                     	ds	2
  6278  00BC                     _analog_value:	
  6279  00BC                     	ds	2
  6280  00BE                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  6281  00BE                     	ds	1
  6282  00BF                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  6283  00BF                     	ds	1
  6284  00C0                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  6285  00C0                     	ds	1
  6286  00C1                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  6287  00C1                     	ds	1
  6288  00C2                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  6289  00C2                     	ds	1
  6290  00C3                     BVH2_Appl_Layer@Cb9_StateCnt:	
  6291  00C3                     	ds	1
  6292  00C4                     _Cb56_odFixedValueSel:	
  6293  00C4                     	ds	1
  6294  00C5                     _Cb34_idPWM:	
  6295  00C5                     	ds	1
  6296  00C6                     _SIBFS_UbatHandling_b:	
  6297  00C6                     	ds	1
  6298  00C7                     _SIBFS_Pic_etat_monitor_b:	
  6299  00C7                     	ds	1
  6300  00C8                     _SIBFS_PWM_Detection_b:	
  6301  00C8                     	ds	1
  6302  00C9                     _SIBFS_Current_Analysis_High_b:	
  6303  00C9                     	ds	1
  6304  00CA                     _ui8_PWMinDC_sav:	
  6305  00CA                     	ds	1
  6306  00CB                     _ui8_PWM_FreqCnt:	
  6307  00CB                     	ds	1
  6308  00CC                     _ui8_Task_Cont100ms:	
  6309  00CC                     	ds	1
  6310  00CD                     _bool_ControlLoopMode:	
  6311  00CD                     	ds	1
  6312  00CE                     _bool_mat_currAlarm_bldc:	
  6313  00CE                     	ds	1
  6314  00CF                     _ui8_PWM_dc_mat:	
  6315  00CF                     	ds	1
  6316  00D0                     _ErrorCode:	
  6317  00D0                     	ds	1
  6318  00D1                     __ELINMIntMessageBufferPointer:	
  6319  00D1                     	ds	1
  6320  00D2                     __ELINMIntReadBack:	
  6321  00D2                     	ds	1
  6322  00D3                     __ELINMIntMessageSize:	
  6323  00D3                     	ds	1
  6324  00D4                     __ELINMIntStatus1:	
  6325  00D4                     	ds	1
  6326  00D5                     _ui8_Task_Cont1ms:	
  6327  00D5                     	ds	1
  6328  00D6                     _ui8_given_supply:	
  6329  00D6                     	ds	1
  6330  00D7                     _phaseCal:	
  6331  00D7                     	ds	1
  6332  00D8                     _bool_HighCurrentAlarm:	
  6333  00D8                     	ds	1
  6334  00D9                     _bool_MotorStalled:	
  6335  00D9                     	ds	1
  6336  00DA                     _bool_DryRunningAlarm:	
  6337  00DA                     	ds	1
  6338  00DB                     _bool_CPU_TempAlarm:	
  6339  00DB                     	ds	1
  6340  00DC                     _Bcnt:	
  6341  00DC                     	ds	1
  6342  00DD                     _ui8_CompFlag:	
  6343  00DD                     	ds	1
  6344  00DE                     _ui8_sampleState:	
  6345  00DE                     	ds	1
  6346  00DF                     _ui8_Ubemf_sel:	
  6347  00DF                     	ds	1
  6348  00E0                     _ui8_UPhase_sel:	
  6349  00E0                     	ds	1
  6350  00E1                     _ui8_IPhase_sel:	
  6351  00E1                     	ds	1
  6352  00E2                     _ui8_BlankingCount:	
  6353  00E2                     	ds	1
  6354  00E3                     _comm_state:	
  6355  00E3                     	ds	1
  6356  00E4                     _ui8_StartupPWM:	
  6357  00E4                     	ds	1
  6358  00E5                     _bool_start_demand_mat:	
  6359  00E5                     	ds	1
  6360  00E6                     _ui8_error_Flags:	
  6361  00E6                     	ds	1
  6362  00E7                     _windowPtr1:	
  6363  00E7                     	ds	1
  6364                           
  6365                           	psect	dataBANK1
  6366  00E8                     __pdataBANK1:	
  6367  00E8                     _ui16_I_cal_Ph3:	
  6368  00E8                     	ds	2
  6369  00EA                     _ui16_I_cal_Ph2:	
  6370  00EA                     	ds	2
  6371  00EC                     _ui16_I_cal_Ph1:	
  6372  00EC                     	ds	2
  6373  00EE                     _wkpoint:	
  6374  00EE                     	ds	1
  6375                           
  6376                           	psect	bssBANK2
  6377  0120                     __pbssBANK2:	
  6378  0120                     _ui8_current_cal:	
  6379  0120                     	ds	3
  6380  0123                     _ui16_PWM_Freq_In:	
  6381  0123                     	ds	2
  6382  0125                     _ui16_PWM_Freq_mat:	
  6383  0125                     	ds	2
  6384  0127                     __ELINMIntTHeaderMin:	
  6385  0127                     	ds	2
  6386  0129                     __ELINMIntTFrameMin:	
  6387  0129                     	ds	2
  6388  012B                     _sum:	
  6389  012B                     	ds	2
  6390  012D                     _ui16_comm_time_max:	
  6391  012D                     	ds	2
  6392  012F                     _ui16_speed_rar:	
  6393  012F                     	ds	2
  6394  0131                     _ui16_NTC_Temp_bldc_mean:	
  6395  0131                     	ds	2
  6396  0133                     _ui16_fir_IPhase_mean:	
  6397  0133                     	ds	2
  6398  0135                     _ui16_fir_Bat_mittel:	
  6399  0135                     	ds	2
  6400  0137                     _ui16_IPhase1_bldc:	
  6401  0137                     	ds	2
  6402  0139                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  6403  0139                     	ds	1
  6404  013A                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  6405  013A                     	ds	1
  6406  013B                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  6407  013B                     	ds	1
  6408  013C                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  6409  013C                     	ds	1
  6410  013D                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  6411  013D                     	ds	1
  6412  013E                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  6413  013E                     	ds	1
  6414  013F                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  6415  013F                     	ds	1
  6416  0140                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  6417  0140                     	ds	1
  6418  0141                     BVH2_Appl_Layer@Cb51_Counter:	
  6419  0141                     	ds	1
  6420  0142                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  6421  0142                     	ds	1
  6422  0143                     _Cb56_odPumpOff:	
  6423  0143                     	ds	1
  6424  0144                     _Cb56_oUbat_Alarm_High:	
  6425  0144                     	ds	1
  6426  0145                     _Cb44_oShutoff:	
  6427  0145                     	ds	1
  6428  0146                     _Cb34_odPumpOff:	
  6429  0146                     	ds	1
  6430  0147                     _Cb34_odFixedValueSel:	
  6431  0147                     	ds	1
  6432  0148                     _Cb34_odFixedLowValueSel:	
  6433  0148                     	ds	1
  6434  0149                     _Cb34_oPWM_SC_Alarm:	
  6435  0149                     	ds	1
  6436  014A                     _Cb34_oPWM_Alarm:	
  6437  014A                     	ds	1
  6438  014B                     _Cb1_oShutoff:	
  6439  014B                     	ds	1
  6440  014C                     _Cb1_oCurrentAlarm:	
  6441  014C                     	ds	1
  6442  014D                     _Cb1_RestartCounter:	
  6443  014D                     	ds	1
  6444  014E                     _ui8_PWMin_failCnt:	
  6445  014E                     	ds	1
  6446  014F                     _ui8_Duty_Cycle_In_Ratio:	
  6447  014F                     	ds	1
  6448  0150                     _ui8_Pulse_State:	
  6449  0150                     	ds	1
  6450  0151                     _ui8_PWMoutvalue:	
  6451  0151                     	ds	1
  6452  0152                     _ui8_lastTaskvalue:	
  6453  0152                     	ds	1
  6454  0153                     _ui8_Task_Cont5ms:	
  6455  0153                     	ds	1
  6456  0154                     _ui8_Task_Cont3ms:	
  6457  0154                     	ds	1
  6458  0155                     _bool_PWMin_Freq_err_Alarm:	
  6459  0155                     	ds	1
  6460  0156                     _bool_UbatAlarm:	
  6461  0156                     	ds	1
  6462  0157                     _bool_CPU_TempRedAlarm:	
  6463  0157                     	ds	1
  6464  0158                     _bool_PWMin_err_Alarm:	
  6465  0158                     	ds	1
  6466  0159                     _ui8_duty_cycle_mat:	
  6467  0159                     	ds	1
  6468  015A                     _ui8_Kp_mat:	
  6469  015A                     	ds	1
  6470  015B                     __ELINMIntSpace:	
  6471  015B                     	ds	1
  6472  015C                     __ELINMIntRXMessageSize:	
  6473  015C                     	ds	1
  6474  015D                     _ui8_b_DResB4_c:	
  6475  015D                     	ds	1
  6476  015E                     _ui8_b_DResB3_c:	
  6477  015E                     	ds	1
  6478  015F                     _ui8_b_DResB2_c:	
  6479  015F                     	ds	1
  6480  0160                     _ui8_b_DResB1_c:	
  6481  0160                     	ds	1
  6482  0161                     _ui8_b_DResServID_c:	
  6483  0161                     	ds	1
  6484  0162                     _ui16_IPhase3_bldc_cal:	
  6485  0162                     	ds	2
  6486  0164                     _ui16_IPhase2_bldc_cal:	
  6487  0164                     	ds	2
  6488  0166                     _ui16_IPhase1_bldc_cal:	
  6489  0166                     	ds	2
  6490                           
  6491                           	psect	dataBANK2
  6492  0168                     __pdataBANK2:	
  6493  0168                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  6494  0168                     	ds	4
  6495  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  6496  016C                     	ds	1
  6497  016D                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  6498  016D                     	ds	1
  6499  016E                     _ui8_failure:	
  6500  016E                     	ds	1
  6501  016F                     _ict_stamp:	
  6502  016F                     	ds	1
  6503                           
  6504                           	psect	bssBANK3
  6505  01A0                     __pbssBANK3:	
  6506  01A0                     _B:	
  6507  01A0                     	ds	16
  6508  01B0                     _my_msg:	
  6509  01B0                     	ds	8
  6510  01B8                     _checksum:	
  6511  01B8                     	ds	6
  6512  01BE                     __ELINMIntSleepTimeout:	
  6513  01BE                     	ds	4
  6514  01C2                     BVH2_Appl_Layer@Cb24_BadCnt:	
  6515  01C2                     	ds	2
  6516  01C4                     BVH2_Appl_Layer@Cb14_StateCnt:	
  6517  01C4                     	ds	2
  6518  01C6                     _ui16_Speed_demand_mat_min:	
  6519  01C6                     	ds	2
  6520  01C8                     _ui16_Speed_demand_mat_Max:	
  6521  01C8                     	ds	2
  6522  01CA                     _ui16_Speed_demand_mat:	
  6523  01CA                     	ds	2
  6524  01CC                     _ui8_Ki_mat:	
  6525  01CC                     	ds	2
  6526  01CE                     _ui16_mat_inpTemp:	
  6527  01CE                     	ds	2
  6528  01D0                     __ELINMIntTHeaderMax:	
  6529  01D0                     	ds	2
  6530  01D2                     __ELINMIntTFrameMax:	
  6531  01D2                     	ds	2
  6532  01D4                     __ELINMIntRXCRC:	
  6533  01D4                     	ds	2
  6534  01D6                     _ui16_IPhase3_bldc:	
  6535  01D6                     	ds	2
  6536  01D8                     _ui16_IPhase2_bldc:	
  6537  01D8                     	ds	2
  6538  01DA                     _phase_delay_counter:	
  6539  01DA                     	ds	2
  6540  01DC                     _ui8_fixed_start_speed_mat:	
  6541  01DC                     	ds	2
  6542  01DE                     _ui16_NTC_Temp_bldc_mean_cal:	
  6543  01DE                     	ds	2
  6544  01E0                     _filterTempNTC:	
  6545  01E0                     	ds	2
  6546  01E2                     _filter3:	
  6547  01E2                     	ds	2
  6548  01E4                     _filter1:	
  6549  01E4                     	ds	2
  6550  01E6                     _ui16_Temp_cal:	
  6551  01E6                     	ds	2
  6552  01E8                     _ui16_NTC_Temp_bldc:	
  6553  01E8                     	ds	2
  6554  01EA                     _ui16_Duty_Cycle_In:	
  6555  01EA                     	ds	2
  6556                           
  6557                           	psect	bssBANK4
  6558  0240                     __pbssBANK4:	
  6559  0240                     _inputArray1:	
  6560  0240                     	ds	16
  6561  0250                     __ELINMIntMessageBuffer:	
  6562  0250                     	ds	11
  6563                           
  6564                           	psect	clrtext
  6565  0770                     clear_ram0:	
  6566                           ;	Called with FSR0 containing the base address, and
  6567                           ;	WREG with the size to clear
  6568                           
  6569  0770  0064               	clrwdt	;clear the watchdog before getting into this loop
  6570  0771                     clrloop0:	
  6571  0771  0180               	clrf	0	;clear RAM location pointed to by FSR
  6572  0772  3101               	addfsr 0,1
  6573  0773  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6574  0774  2F71               	goto	clrloop0	;have we reached the end yet?
  6575  0775  3400               	retlw	0	;all done for this memory range, return
  6576                           
  6577                           	psect	cstackBANK4
  6578  0220                     __pcstackBANK4:	
  6579  0220                     EOL@_dcnt:	
  6580  0220                     _BVH2_Appl_Layer$1218:	
  6581                           ; 1 bytes @ 0x0
  6582                           
  6583                           
  6584                           ; 4 bytes @ 0x0
  6585  0220                     	ds	1
  6586  0221                     EOL@_dcnt_413:	
  6587                           
  6588                           ; 1 bytes @ 0x1
  6589  0221                     	ds	1
  6590  0222                     EOL@_dcnt_414:	
  6591                           
  6592                           ; 1 bytes @ 0x2
  6593  0222                     	ds	1
  6594  0223                     EOL@_dcnt_415:	
  6595                           
  6596                           ; 1 bytes @ 0x3
  6597  0223                     	ds	1
  6598  0224                     EOL@_dcnt_416:	
  6599  0224                     _BVH2_Appl_Layer$1215:	
  6600                           ; 1 bytes @ 0x4
  6601                           
  6602                           
  6603                           ; 2 bytes @ 0x4
  6604  0224                     	ds	1
  6605  0225                     EOL@_dcnt_417:	
  6606                           
  6607                           ; 1 bytes @ 0x5
  6608  0225                     	ds	1
  6609  0226                     EOL@_dcnt_418:	
  6610  0226                     _BVH2_Appl_Layer$1217:	
  6611                           ; 1 bytes @ 0x6
  6612                           
  6613                           
  6614                           ; 2 bytes @ 0x6
  6615  0226                     	ds	1
  6616  0227                     EOL@_dcnt_419:	
  6617                           
  6618                           ; 1 bytes @ 0x7
  6619  0227                     	ds	1
  6620  0228                     EOL@_dcnt_420:	
  6621  0228                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  6622                           ; 1 bytes @ 0x8
  6623                           
  6624                           
  6625                           ; 1 bytes @ 0x8
  6626  0228                     	ds	1
  6627  0229                     EOL@_dcnt_421:	
  6628  0229                     _BVH2_Appl_Layer$1207:	
  6629                           ; 1 bytes @ 0x9
  6630                           
  6631                           
  6632                           ; 1 bytes @ 0x9
  6633  0229                     	ds	1
  6634  022A                     EOL@_dcnt_422:	
  6635  022A                     _BVH2_Appl_Layer$1208:	
  6636                           ; 1 bytes @ 0xA
  6637                           
  6638                           
  6639                           ; 1 bytes @ 0xA
  6640  022A                     	ds	1
  6641  022B                     EOL@_dcnt_423:	
  6642  022B                     _BVH2_Appl_Layer$1209:	
  6643                           ; 1 bytes @ 0xB
  6644                           
  6645                           
  6646                           ; 1 bytes @ 0xB
  6647  022B                     	ds	1
  6648  022C                     EOL@_dcnt_424:	
  6649  022C                     _BVH2_Appl_Layer$1210:	
  6650                           ; 1 bytes @ 0xC
  6651                           
  6652                           
  6653                           ; 1 bytes @ 0xC
  6654  022C                     	ds	1
  6655  022D                     EOL@_dcnt_425:	
  6656  022D                     _BVH2_Appl_Layer$1211:	
  6657                           ; 1 bytes @ 0xD
  6658                           
  6659                           
  6660                           ; 1 bytes @ 0xD
  6661  022D                     	ds	1
  6662  022E                     EOL@_dcnt_426:	
  6663  022E                     _BVH2_Appl_Layer$1212:	
  6664                           ; 1 bytes @ 0xE
  6665                           
  6666                           
  6667                           ; 1 bytes @ 0xE
  6668  022E                     	ds	1
  6669  022F                     EOL@_dcnt_427:	
  6670  022F                     BVH2_Appl_Layer@Sb3_Product1:	
  6671                           ; 1 bytes @ 0xF
  6672                           
  6673                           
  6674                           ; 2 bytes @ 0xF
  6675  022F                     	ds	1
  6676  0230                     EOL@_dcnt_428:	
  6677                           
  6678                           ; 1 bytes @ 0x10
  6679  0230                     	ds	1
  6680  0231                     EOL@_dcnt_429:	
  6681  0231                     BVH2_Appl_Layer@Sb2_Switch5:	
  6682                           ; 1 bytes @ 0x11
  6683                           
  6684                           
  6685                           ; 2 bytes @ 0x11
  6686  0231                     	ds	1
  6687  0232                     EOL@ui8_b_DResB5_RD:	
  6688                           
  6689                           ; 1 bytes @ 0x12
  6690  0232                     	ds	1
  6691  0233                     EOL@ui8_b_DResB4_RD:	
  6692  0233                     BVH2_Appl_Layer@Cb24_Reset:	
  6693                           ; 1 bytes @ 0x13
  6694                           
  6695                           
  6696                           ; 1 bytes @ 0x13
  6697  0233                     	ds	1
  6698  0234                     EOL@ui8_b_DResB0_RD:	
  6699  0234                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  6700                           ; 1 bytes @ 0x14
  6701                           
  6702                           
  6703                           ; 1 bytes @ 0x14
  6704  0234                     	ds	1
  6705  0235                     EOL@ui8_b_DResB1_RD:	
  6706  0235                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  6707                           ; 1 bytes @ 0x15
  6708                           
  6709                           
  6710                           ; 1 bytes @ 0x15
  6711  0235                     	ds	1
  6712  0236                     EOL@ui8_b_DResB2_RD:	
  6713  0236                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  6714                           ; 1 bytes @ 0x16
  6715                           
  6716                           
  6717                           ; 1 bytes @ 0x16
  6718  0236                     	ds	1
  6719  0237                     EOL@ui8_b_DResB3_RD:	
  6720  0237                     BVH2_Appl_Layer@Sb2_Error:	
  6721                           ; 1 bytes @ 0x17
  6722                           
  6723                           
  6724                           ; 2 bytes @ 0x17
  6725  0237                     	ds	2
  6726  0239                     BVH2_Appl_Layer@Sb2_Switch2:	
  6727                           
  6728                           ; 2 bytes @ 0x19
  6729  0239                     	ds	2
  6730  023B                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  6731                           
  6732                           ; 1 bytes @ 0x1B
  6733  023B                     	ds	1
  6734  023C                     BVH2_Appl_Layer@Sb3_Sum1:	
  6735                           
  6736                           ; 2 bytes @ 0x1C
  6737  023C                     	ds	2
  6738  023E                     BVH2_Appl_Layer@Sb4_PI_sum:	
  6739                           
  6740                           ; 2 bytes @ 0x1E
  6741  023E                     	ds	2
  6742                           
  6743                           	psect	cstackCOMMON
  6744  0070                     __pcstackCOMMON:	
  6745  0070                     ?_InitMotorRun:	
  6746  0070                     ?_commutate:	
  6747                           ; 1 bytes @ 0x0
  6748                           
  6749  0070                     ?_PWM_Write_Out:	
  6750                           ; 1 bytes @ 0x0
  6751                           
  6752  0070                     ?_read_eeprom_data:	
  6753                           ; 1 bytes @ 0x0
  6754                           
  6755  0070                     ?_NegativeAnswer:	
  6756                           ; 1 bytes @ 0x0
  6757                           
  6758  0070                     ?_PWMReadDC:	
  6759                           ; 1 bytes @ 0x0
  6760                           
  6761  0070                     ?_PWM_CTRL:	
  6762                           ; 1 bytes @ 0x0
  6763                           
  6764  0070                     ??_PWM_CTRL:	
  6765                           ; 1 bytes @ 0x0
  6766                           
  6767  0070                     ?_ELINMIntHandler:	
  6768                           ; 1 bytes @ 0x0
  6769                           
  6770  0070                     ?_interrupt_PWMCapture:	
  6771                           ; 1 bytes @ 0x0
  6772                           
  6773  0070                     ??_interrupt_PWMCapture:	
  6774                           ; 1 bytes @ 0x0
  6775                           
  6776  0070                     ?_Oscill_Source_Block:	
  6777                           ; 1 bytes @ 0x0
  6778                           
  6779  0070                     ?_timer_init:	
  6780                           ; 1 bytes @ 0x0
  6781                           
  6782  0070                     ?_PWM_Capture_init:	
  6783                           ; 1 bytes @ 0x0
  6784                           
  6785  0070                     ?_clear_timer:	
  6786                           ; 1 bytes @ 0x0
  6787                           
  6788  0070                     ?_BVH2_Appl_Layer:	
  6789                           ; 1 bytes @ 0x0
  6790                           
  6791  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  6792                           ; 1 bytes @ 0x0
  6793                           
  6794  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  6795                           ; 1 bytes @ 0x0
  6796                           
  6797  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  6798                           ; 1 bytes @ 0x0
  6799                           
  6800  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  6801                           ; 1 bytes @ 0x0
  6802                           
  6803  0070                     ?_ADC_Init:	
  6804                           ; 1 bytes @ 0x0
  6805                           
  6806  0070                     ?_ADC_Wait:	
  6807                           ; 1 bytes @ 0x0
  6808                           
  6809  0070                     ?_FILTER_Init:	
  6810                           ; 1 bytes @ 0x0
  6811                           
  6812  0070                     ?_FILTER_Ubat:	
  6813                           ; 1 bytes @ 0x0
  6814                           
  6815  0070                     ?_FILTER_IPhase:	
  6816                           ; 1 bytes @ 0x0
  6817                           
  6818  0070                     ?_FILTER_Temp:	
  6819                           ; 1 bytes @ 0x0
  6820                           
  6821  0070                     ?_Get_Analog_Value:	
  6822                           ; 1 bytes @ 0x0
  6823                           
  6824  0070                     ?_BLDCWait:	
  6825                           ; 1 bytes @ 0x0
  6826                           
  6827  0070                     ??_BLDCWait:	
  6828                           ; 1 bytes @ 0x0
  6829                           
  6830  0070                     ?_init_bldc:	
  6831                           ; 1 bytes @ 0x0
  6832                           
  6833  0070                     ?_interrrupt_bldc:	
  6834                           ; 1 bytes @ 0x0
  6835                           
  6836  0070                     ?_InitMotorStop:	
  6837                           ; 1 bytes @ 0x0
  6838                           
  6839  0070                     ?_DiagInit:	
  6840                           ; 1 bytes @ 0x0
  6841                           
  6842  0070                     ?_SetDiagAlarm:	
  6843                           ; 1 bytes @ 0x0
  6844                           
  6845  0070                     ?_EOL:	
  6846                           ; 1 bytes @ 0x0
  6847                           
  6848  0070                     ?_Task1ms:	
  6849                           ; 1 bytes @ 0x0
  6850                           
  6851  0070                     ??_Task1ms:	
  6852                           ; 1 bytes @ 0x0
  6853                           
  6854  0070                     ?_interrupt_handler:	
  6855                           ; 1 bytes @ 0x0
  6856                           
  6857  0070                     ?_Receive_Diag:	
  6858                           ; 1 bytes @ 0x0
  6859                           
  6860  0070                     ?_EnableMCP201:	
  6861                           ; 1 bytes @ 0x0
  6862                           
  6863  0070                     ?__ELINMIntInitialize:	
  6864                           ; 1 bytes @ 0x0
  6865                           
  6866  0070                     ?__ELINMIntResetProtocol:	
  6867                           ; 1 bytes @ 0x0
  6868                           
  6869  0070                     ??__ELINMIntResetProtocol:	
  6870                           ; 1 bytes @ 0x0
  6871                           
  6872  0070                     ?__ELINMIntCalcIDParity:	
  6873                           ; 1 bytes @ 0x0
  6874                           
  6875  0070                     ?_I_calibrationInit:	
  6876                           ; 1 bytes @ 0x0
  6877                           
  6878  0070                     ?_init_ports:	
  6879                           ; 1 bytes @ 0x0
  6880                           
  6881  0070                     ?_system_init:	
  6882                           ; 1 bytes @ 0x0
  6883                           
  6884  0070                     ?_main:	
  6885                           ; 1 bytes @ 0x0
  6886                           
  6887  0070                     ?i1_ADC_Wait:	
  6888                           ; 1 bytes @ 0x0
  6889                           
  6890  0070                     ??i1_ADC_Wait:	
  6891                           ; 1 bytes @ 0x0
  6892                           
  6893  0070                     ?i1_commutate:	
  6894                           ; 1 bytes @ 0x0
  6895                           
  6896  0070                     ?i1_ADC_Read:	
  6897                           ; 1 bytes @ 0x0
  6898                           
  6899  0070                     ?i1___wmul:	
  6900                           ; 2 bytes @ 0x0
  6901                           
  6902  0070                     ?i1___lwdiv:	
  6903                           ; 2 bytes @ 0x0
  6904                           
  6905  0070                     __ELINMIntResetProtocol@code:	
  6906                           ; 2 bytes @ 0x0
  6907                           
  6908  0070                     i1___wmul@multiplier:	
  6909                           ; 1 bytes @ 0x0
  6910                           
  6911  0070                     i1___lwdiv@divisor:	
  6912                           ; 2 bytes @ 0x0
  6913                           
  6914                           
  6915                           ; 2 bytes @ 0x0
  6916  0070                     	ds	1
  6917  0071                     ??_ELINMIntHandler:	
  6918                           
  6919                           ; 1 bytes @ 0x1
  6920  0071                     	ds	1
  6921  0072                     ??i1_ADC_Read:	
  6922  0072                     i1ADC_Read@i:	
  6923                           ; 1 bytes @ 0x2
  6924                           
  6925  0072                     i1___wmul@multiplicand:	
  6926                           ; 1 bytes @ 0x2
  6927                           
  6928  0072                     i1___lwdiv@dividend:	
  6929                           ; 2 bytes @ 0x2
  6930                           
  6931                           
  6932                           ; 2 bytes @ 0x2
  6933  0072                     	ds	2
  6934  0074                     ??i1___wmul:	
  6935  0074                     ??i1___lwdiv:	
  6936                           ; 1 bytes @ 0x4
  6937                           
  6938  0074                     i1___lwdiv@counter:	
  6939                           ; 1 bytes @ 0x4
  6940                           
  6941  0074                     i1___wmul@product:	
  6942                           ; 1 bytes @ 0x4
  6943                           
  6944                           
  6945                           ; 2 bytes @ 0x4
  6946  0074                     	ds	1
  6947  0075                     i1___lwdiv@quotient:	
  6948                           
  6949                           ; 2 bytes @ 0x5
  6950  0075                     	ds	2
  6951  0077                     ??_interrrupt_bldc:	
  6952                           
  6953                           ; 1 bytes @ 0x7
  6954  0077                     	ds	2
  6955  0079                     ??_interrupt_handler:	
  6956                           
  6957                           	psect	cstackBANK0
  6958  0020                     __pcstackBANK0:	
  6959                           ; 1 bytes @ 0x9
  6960                           
  6961  0020                     ??i1_commutate:	
  6962                           
  6963                           ; 1 bytes @ 0x0
  6964  0020                     	ds	12
  6965  002C                     interrrupt_bldc@ui32_tmp:	
  6966                           
  6967                           ; 4 bytes @ 0xC
  6968  002C                     	ds	4
  6969  0030                     ??_PWM_Write_Out:	
  6970  0030                     ??_read_eeprom_data:	
  6971                           ; 1 bytes @ 0x10
  6972                           
  6973  0030                     ?__ELINMIntGetPointer:	
  6974                           ; 1 bytes @ 0x10
  6975                           
  6976  0030                     ??_Oscill_Source_Block:	
  6977                           ; 1 bytes @ 0x10
  6978                           
  6979  0030                     ??_PWM_Capture_init:	
  6980                           ; 1 bytes @ 0x10
  6981                           
  6982  0030                     ??_clear_timer:	
  6983                           ; 1 bytes @ 0x10
  6984                           
  6985  0030                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  6986                           ; 1 bytes @ 0x10
  6987                           
  6988  0030                     ??_Cb34_PWM_Detection_node_fcn1:	
  6989                           ; 1 bytes @ 0x10
  6990                           
  6991  0030                     ??_Cb56_UbatHandling_node_fcn2:	
  6992                           ; 1 bytes @ 0x10
  6993                           
  6994  0030                     ??_Cb1_Current_An___High_node_fcn1:	
  6995                           ; 1 bytes @ 0x10
  6996                           
  6997  0030                     ??_ADC_Init:	
  6998                           ; 1 bytes @ 0x10
  6999                           
  7000  0030                     ??_ADC_Wait:	
  7001                           ; 1 bytes @ 0x10
  7002                           
  7003  0030                     ??_FILTER_Ubat:	
  7004                           ; 1 bytes @ 0x10
  7005                           
  7006  0030                     ??_FILTER_IPhase:	
  7007                           ; 1 bytes @ 0x10
  7008                           
  7009  0030                     ??_FILTER_Temp:	
  7010                           ; 1 bytes @ 0x10
  7011                           
  7012  0030                     ??_InitMotorStop:	
  7013                           ; 1 bytes @ 0x10
  7014                           
  7015  0030                     ??_EnableMCP201:	
  7016                           ; 1 bytes @ 0x10
  7017                           
  7018  0030                     ??__ELINMIntInitialize:	
  7019                           ; 1 bytes @ 0x10
  7020                           
  7021  0030                     ??__ELINMIntCalcIDParity:	
  7022                           ; 1 bytes @ 0x10
  7023                           
  7024  0030                     ?_cksum:	
  7025                           ; 1 bytes @ 0x10
  7026                           
  7027  0030                     ?_ADC_Read:	
  7028                           ; 2 bytes @ 0x10
  7029                           
  7030  0030                     ?___wmul:	
  7031                           ; 2 bytes @ 0x10
  7032                           
  7033  0030                     ?___awdiv:	
  7034                           ; 2 bytes @ 0x10
  7035                           
  7036  0030                     ?___lwdiv:	
  7037                           ; 2 bytes @ 0x10
  7038                           
  7039  0030                     ?___tmul:	
  7040                           ; 2 bytes @ 0x10
  7041                           
  7042  0030                     ?___lmul:	
  7043                           ; 3 bytes @ 0x10
  7044                           
  7045  0030                     ?___aldiv:	
  7046                           ; 4 bytes @ 0x10
  7047                           
  7048  0030                     read_eeprom_data@ui8_adress:	
  7049                           ; 4 bytes @ 0x10
  7050                           
  7051  0030                     EnableMCP201@_dcnt:	
  7052                           ; 1 bytes @ 0x10
  7053                           
  7054  0030                     __ELINMIntCalcIDParity@ELINM_idtr:	
  7055                           ; 1 bytes @ 0x10
  7056                           
  7057  0030                     __ELINMIntGetPointer@_ELINMInt_position:	
  7058                           ; 1 bytes @ 0x10
  7059                           
  7060  0030                     PWM_Capture_init@ui8_CCP_Nb:	
  7061                           ; 1 bytes @ 0x10
  7062                           
  7063  0030                     PWM_Write_Out@ui8_DutyCycle_Out:	
  7064                           ; 1 bytes @ 0x10
  7065                           
  7066  0030                     clear_timer@ui8_TmrNb:	
  7067                           ; 1 bytes @ 0x10
  7068                           
  7069  0030                     ___wmul@multiplier:	
  7070                           ; 1 bytes @ 0x10
  7071                           
  7072  0030                     ___awdiv@divisor:	
  7073                           ; 2 bytes @ 0x10
  7074                           
  7075  0030                     ___lwdiv@divisor:	
  7076                           ; 2 bytes @ 0x10
  7077                           
  7078  0030                     ___tmul@multiplier:	
  7079                           ; 2 bytes @ 0x10
  7080                           
  7081  0030                     ___lmul@multiplier:	
  7082                           ; 3 bytes @ 0x10
  7083                           
  7084  0030                     ___aldiv@divisor:	
  7085                           ; 4 bytes @ 0x10
  7086                           
  7087                           
  7088                           ; 4 bytes @ 0x10
  7089  0030                     	ds	1
  7090  0031                     ??__ELINMIntGetPointer:	
  7091  0031                     ?__ELINMIntSendMessage:	
  7092                           ; 1 bytes @ 0x11
  7093                           
  7094  0031                     ??_timer_init:	
  7095                           ; 1 bytes @ 0x11
  7096                           
  7097  0031                     ??_DiagInit:	
  7098                           ; 1 bytes @ 0x11
  7099                           
  7100  0031                     ??_SetDiagAlarm:	
  7101                           ; 1 bytes @ 0x11
  7102                           
  7103  0031                     read_eeprom_data@ui8_adress_data:	
  7104                           ; 1 bytes @ 0x11
  7105                           
  7106  0031                     EnableMCP201@_dcnt_712:	
  7107                           ; 1 bytes @ 0x11
  7108                           
  7109  0031                     __ELINMIntSendMessage@_ELINM_size:	
  7110                           ; 1 bytes @ 0x11
  7111                           
  7112  0031                     __ELINMIntGetPointer@_ELINMInt_tag:	
  7113                           ; 1 bytes @ 0x11
  7114                           
  7115  0031                     timer_init@ui8_TmrNb:	
  7116                           ; 1 bytes @ 0x11
  7117                           
  7118                           
  7119                           ; 1 bytes @ 0x11
  7120  0031                     	ds	1
  7121  0032                     ??_cksum:	
  7122  0032                     ??_ADC_Read:	
  7123                           ; 1 bytes @ 0x12
  7124                           
  7125  0032                     ??_init_ports:	
  7126                           ; 1 bytes @ 0x12
  7127                           
  7128  0032                     ADC_Read@i:	
  7129                           ; 1 bytes @ 0x12
  7130                           
  7131  0032                     EnableMCP201@_dcnt_713:	
  7132                           ; 1 bytes @ 0x12
  7133                           
  7134  0032                     __ELINMIntSendMessage@_ELINM_fmin:	
  7135                           ; 1 bytes @ 0x12
  7136                           
  7137  0032                     cksum@counter:	
  7138                           ; 2 bytes @ 0x12
  7139                           
  7140  0032                     ___wmul@multiplicand:	
  7141                           ; 2 bytes @ 0x12
  7142                           
  7143  0032                     ___awdiv@dividend:	
  7144                           ; 2 bytes @ 0x12
  7145                           
  7146  0032                     ___lwdiv@dividend:	
  7147                           ; 2 bytes @ 0x12
  7148                           
  7149                           
  7150                           ; 2 bytes @ 0x12
  7151  0032                     	ds	1
  7152  0033                     ??_FILTER_Init:	
  7153  0033                     ??_I_calibrationInit:	
  7154                           ; 1 bytes @ 0x13
  7155                           
  7156  0033                     ___tmul@multiplicand:	
  7157                           ; 1 bytes @ 0x13
  7158                           
  7159                           
  7160                           ; 3 bytes @ 0x13
  7161  0033                     	ds	1
  7162  0034                     ??___wmul:	
  7163  0034                     ??___awdiv:	
  7164                           ; 1 bytes @ 0x14
  7165                           
  7166  0034                     ??___lwdiv:	
  7167                           ; 1 bytes @ 0x14
  7168                           
  7169  0034                     ___awdiv@counter:	
  7170                           ; 1 bytes @ 0x14
  7171                           
  7172  0034                     ___lwdiv@counter:	
  7173                           ; 1 bytes @ 0x14
  7174                           
  7175  0034                     __ELINMIntSendMessage@_ELINM_fmax:	
  7176                           ; 1 bytes @ 0x14
  7177                           
  7178  0034                     cksum@sum:	
  7179                           ; 2 bytes @ 0x14
  7180                           
  7181  0034                     ___wmul@product:	
  7182                           ; 2 bytes @ 0x14
  7183                           
  7184  0034                     ___lmul@multiplicand:	
  7185                           ; 2 bytes @ 0x14
  7186                           
  7187  0034                     ___aldiv@dividend:	
  7188                           ; 4 bytes @ 0x14
  7189                           
  7190                           
  7191                           ; 4 bytes @ 0x14
  7192  0034                     	ds	1
  7193  0035                     ___awdiv@sign:	
  7194  0035                     ___lwdiv@quotient:	
  7195                           ; 1 bytes @ 0x15
  7196                           
  7197                           
  7198                           ; 2 bytes @ 0x15
  7199  0035                     	ds	1
  7200  0036                     ??_commutate:	
  7201  0036                     ??__ELINMIntSendMessage:	
  7202                           ; 1 bytes @ 0x16
  7203                           
  7204  0036                     ??___tmul:	
  7205                           ; 1 bytes @ 0x16
  7206                           
  7207  0036                     __ELINMIntSendMessage@_ELINM_idr:	
  7208                           ; 1 bytes @ 0x16
  7209                           
  7210  0036                     cksum@addr:	
  7211                           ; 1 bytes @ 0x16
  7212                           
  7213  0036                     ___awdiv@quotient:	
  7214                           ; 2 bytes @ 0x16
  7215                           
  7216  0036                     ___tmul@product:	
  7217                           ; 2 bytes @ 0x16
  7218                           
  7219                           
  7220                           ; 3 bytes @ 0x16
  7221  0036                     	ds	1
  7222  0037                     ?_write_eeprom_data:	
  7223  0037                     write_eeprom_data@ui8_adress_data:	
  7224                           ; 1 bytes @ 0x17
  7225                           
  7226  0037                     __ELINMIntSendMessage@_ELINM_tid:	
  7227                           ; 1 bytes @ 0x17
  7228                           
  7229                           
  7230                           ; 1 bytes @ 0x17
  7231  0037                     	ds	1
  7232  0038                     ??_write_eeprom_data:	
  7233  0038                     ??___lmul:	
  7234                           ; 1 bytes @ 0x18
  7235                           
  7236  0038                     ??___aldiv:	
  7237                           ; 1 bytes @ 0x18
  7238                           
  7239  0038                     write_eeprom_data@ui8_adress:	
  7240                           ; 1 bytes @ 0x18
  7241                           
  7242  0038                     __ELINMIntSendMessage@_ELINM_i:	
  7243                           ; 1 bytes @ 0x18
  7244                           
  7245  0038                     ___aldiv@counter:	
  7246                           ; 1 bytes @ 0x18
  7247                           
  7248  0038                     ___lmul@product:	
  7249                           ; 1 bytes @ 0x18
  7250                           
  7251                           
  7252                           ; 4 bytes @ 0x18
  7253  0038                     	ds	1
  7254  0039                     ?___ltdiv:	
  7255  0039                     ___aldiv@sign:	
  7256                           ; 3 bytes @ 0x19
  7257                           
  7258  0039                     __ELINMIntSendMessage@_ELINM_chk:	
  7259                           ; 1 bytes @ 0x19
  7260                           
  7261  0039                     ___ltdiv@divisor:	
  7262                           ; 2 bytes @ 0x19
  7263                           
  7264                           
  7265                           ; 3 bytes @ 0x19
  7266  0039                     	ds	1
  7267  003A                     ___aldiv@quotient:	
  7268                           
  7269                           ; 4 bytes @ 0x1A
  7270  003A                     	ds	1
  7271  003B                     ?_Transmit_LIN_8Bytes:	
  7272  003B                     ?__ELINMIntReceiveMessage:	
  7273                           ; 1 bytes @ 0x1B
  7274                           
  7275  003B                     Transmit_LIN_8Bytes@B0:	
  7276                           ; 1 bytes @ 0x1B
  7277                           
  7278  003B                     __ELINMIntReceiveMessage@_ELINM_id:	
  7279                           ; 1 bytes @ 0x1B
  7280                           
  7281                           
  7282                           ; 1 bytes @ 0x1B
  7283  003B                     	ds	1
  7284  003C                     ??_Get_Analog_Value:	
  7285  003C                     Transmit_LIN_8Bytes@B1:	
  7286                           ; 1 bytes @ 0x1C
  7287                           
  7288  003C                     __ELINMIntReceiveMessage@_ELINM_size:	
  7289                           ; 1 bytes @ 0x1C
  7290                           
  7291  003C                     ___ltdiv@dividend:	
  7292                           ; 1 bytes @ 0x1C
  7293                           
  7294                           
  7295                           ; 3 bytes @ 0x1C
  7296  003C                     	ds	1
  7297  003D                     ??__ELINMIntReceiveMessage:	
  7298  003D                     Transmit_LIN_8Bytes@B2:	
  7299                           ; 1 bytes @ 0x1D
  7300                           
  7301  003D                     __ELINMIntReceiveMessage@_ELINM_tag:	
  7302                           ; 1 bytes @ 0x1D
  7303                           
  7304                           
  7305                           ; 1 bytes @ 0x1D
  7306  003D                     	ds	1
  7307  003E                     ??_BVH2_Appl_Layer:	
  7308  003E                     ??_Receive_Diag:	
  7309                           ; 1 bytes @ 0x1E
  7310                           
  7311  003E                     Transmit_LIN_8Bytes@B3:	
  7312                           ; 1 bytes @ 0x1E
  7313                           
  7314                           
  7315                           ; 1 bytes @ 0x1E
  7316  003E                     	ds	1
  7317  003F                     ??___ltdiv:	
  7318  003F                     Transmit_LIN_8Bytes@B4:	
  7319                           ; 1 bytes @ 0x1F
  7320                           
  7321  003F                     Receive_Diag@id:	
  7322                           ; 1 bytes @ 0x1F
  7323                           
  7324  003F                     ___ltdiv@quotient:	
  7325                           ; 1 bytes @ 0x1F
  7326                           
  7327                           
  7328                           ; 3 bytes @ 0x1F
  7329  003F                     	ds	1
  7330  0040                     Transmit_LIN_8Bytes@B5:	
  7331                           
  7332                           ; 1 bytes @ 0x20
  7333  0040                     	ds	1
  7334  0041                     Transmit_LIN_8Bytes@B6:	
  7335                           
  7336                           ; 1 bytes @ 0x21
  7337  0041                     	ds	1
  7338  0042                     ??_InitMotorRun:	
  7339  0042                     ??_init_bldc:	
  7340                           ; 1 bytes @ 0x22
  7341                           
  7342  0042                     ??_system_init:	
  7343                           ; 1 bytes @ 0x22
  7344                           
  7345  0042                     Transmit_LIN_8Bytes@B7:	
  7346                           ; 1 bytes @ 0x22
  7347                           
  7348  0042                     ___ltdiv@counter:	
  7349                           ; 1 bytes @ 0x22
  7350                           
  7351                           
  7352                           ; 1 bytes @ 0x22
  7353  0042                     	ds	1
  7354  0043                     ??_Transmit_LIN_8Bytes:	
  7355  0043                     ??_PWMReadDC:	
  7356                           ; 1 bytes @ 0x23
  7357                           
  7358  0043                     Transmit_LIN_8Bytes@ID:	
  7359                           ; 1 bytes @ 0x23
  7360                           
  7361                           
  7362                           ; 1 bytes @ 0x23
  7363  0043                     	ds	1
  7364  0044                     ??_NegativeAnswer:	
  7365  0044                     NegativeAnswer@LID:	
  7366                           ; 1 bytes @ 0x24
  7367                           
  7368                           
  7369                           ; 1 bytes @ 0x24
  7370  0044                     	ds	1
  7371  0045                     ??_EOL:	
  7372                           
  7373                           ; 1 bytes @ 0x25
  7374  0045                     	ds	3
  7375  0048                     ??_main:	
  7376                           
  7377                           ; 1 bytes @ 0x28
  7378  0048                     	ds	4
  7379                           
  7380                           	psect	text7
  7381  1A7A                     __ptext7:	
  7382 ;; *************** function _commutate *****************
  7383 ;; Defined at:
  7384 ;;		line 1426 in file "../bldc.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;		None
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;		None
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  1    wreg      void 
  7391 ;; Registers used:
  7392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 1F/1
  7395 ;;		On exit  : 1F/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7398 ;;      Params:         0       0       0       0       0       0       0       0
  7399 ;;      Locals:         0       0       0       0       0       0       0       0
  7400 ;;      Temps:          0      12       0       0       0       0       0       0
  7401 ;;      Totals:         0      12       0       0       0       0       0       0
  7402 ;;Total ram usage:       12 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    5
  7405 ;; This function calls:
  7406 ;;		___wmul
  7407 ;; This function is called by:
  7408 ;;		_InitMotorRun
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           
  7413                           ;psect for function _commutate
  7414  1A7A                     _commutate:	
  7415  1A7A                     l9440:	
  7416                           ;incstack = 0
  7417                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7418                           
  7419                           
  7420                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  7421  1A7A  3000               	movlw	0
  7422  1A7B  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  7423  1A7C  300A               	movlw	10
  7424  1A7D  1903               	skipnz
  7425  1A7E  023A               	subwf	_ui16_step_cnt^(0+128),w
  7426  1A7F  1803               	skipnc
  7427  1A80  2A84               	goto	l9444
  7428                           
  7429                           ;bldc.c: 1433: {
  7430                           ;bldc.c: 1435: ui16_step_cnt++;
  7431  1A81  0ABA               	incf	_ui16_step_cnt^(0+128),f
  7432  1A82  1903               	skipnz
  7433  1A83  0ABB               	incf	(_ui16_step_cnt+1)^(0+128),f
  7434  1A84                     l9444:	
  7435                           
  7436                           ;bldc.c: 1437: }
  7437                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  7438                           
  7439                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  7440                           
  7441                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  7442  1A84  26D0  319A         	fcall	PL16	;call to abstracted procedure
  7443  1A86  00B6               	movwf	??_commutate
  7444  1A87  0023               	movlb	3	; select bank3
  7445  1A88  0825               	movf	((_B+1)^(0+384)+4),w
  7446  1A89  3D23               	addwfc	((_B+1)^(0+384)+2),w
  7447  1A8A  0020               	movlb	0	; select bank0
  7448  1A8B  00B7               	movwf	??_commutate+1
  7449  1A8C  0023               	movlb	3	; select bank3
  7450  1A8D  0826               	movf	(_B^(0+384)+6),w
  7451  1A8E  0020               	movlb	0	; select bank0
  7452  1A8F  0736               	addwf	??_commutate,w
  7453  1A90  00B8               	movwf	??_commutate+2
  7454  1A91  0023               	movlb	3	; select bank3
  7455  1A92  0827               	movf	((_B+1)^(0+384)+6),w
  7456  1A93  0020               	movlb	0	; select bank0
  7457  1A94  3D37               	addwfc	??_commutate+1,w
  7458  1A95  00B9               	movwf	??_commutate+3
  7459  1A96  0023               	movlb	3	; select bank3
  7460  1A97  0828               	movf	(_B^(0+384)+8),w
  7461  1A98  0020               	movlb	0	; select bank0
  7462  1A99  0738               	addwf	??_commutate+2,w
  7463  1A9A  00BA               	movwf	??_commutate+4
  7464  1A9B  0023               	movlb	3	; select bank3
  7465  1A9C  0829               	movf	((_B+1)^(0+384)+8),w
  7466  1A9D  0020               	movlb	0	; select bank0
  7467  1A9E  3D39               	addwfc	??_commutate+3,w
  7468  1A9F  00BB               	movwf	??_commutate+5
  7469  1AA0  0023               	movlb	3	; select bank3
  7470  1AA1  082A               	movf	(_B^(0+384)+10),w
  7471  1AA2  0020               	movlb	0	; select bank0
  7472  1AA3  073A               	addwf	??_commutate+4,w
  7473  1AA4  00BC               	movwf	??_commutate+6
  7474  1AA5  0023               	movlb	3	; select bank3
  7475  1AA6  082B               	movf	((_B+1)^(0+384)+10),w
  7476  1AA7  0020               	movlb	0	; select bank0
  7477  1AA8  3D3B               	addwfc	??_commutate+5,w
  7478  1AA9  00BD               	movwf	??_commutate+7
  7479  1AAA  3F00               	moviw [0]fsr0
  7480  1AAB  073C               	addwf	??_commutate+6,w
  7481  1AAC  00BE               	movwf	??_commutate+8
  7482  1AAD  3F01               	moviw [1]fsr0
  7483  1AAE  3D3D               	addwfc	??_commutate+7,w
  7484  1AAF  00BF               	movwf	??_commutate+9
  7485  1AB0  3F40               	moviw [0]fsr1
  7486  1AB1  073E               	addwf	??_commutate+8,w
  7487  1AB2  00C0               	movwf	??_commutate+10
  7488  1AB3  3F41               	moviw [1]fsr1
  7489  1AB4  3D3F               	addwfc	??_commutate+9,w
  7490  1AB5  00C1               	movwf	??_commutate+11
  7491  1AB6  0023               	movlb	3	; select bank3
  7492  1AB7  0820               	movf	_B^(0+384),w
  7493  1AB8  0020               	movlb	0	; select bank0
  7494  1AB9  0740               	addwf	??_commutate+10,w
  7495  1ABA  279E  319A         	fcall	PL98	;call to abstracted procedure
  7496  1ABC  3D41               	addwfc	??_commutate+11,w
  7497                           
  7498                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  7499                           
  7500                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  7501                           
  7502                           ;bldc.c: 1455: bemf_filter = 62;
  7503                           
  7504                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  7505  1ABD  2758  319A         	fcall	PL46	;call to abstracted procedure
  7506                           
  7507                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  7508  1ABF  1DFA               	btfss	_MotorFlags,3
  7509  1AC0  2B24               	goto	l327
  7510                           
  7511                           ;bldc.c: 1463: {
  7512                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 100 )>>7;
  7513  1AC1  0022               	movlb	2	; select bank2
  7514  1AC2  0830               	movf	(_ui16_speed_rar+1)^(0+256),w
  7515  1AC3  0020               	movlb	0	; select bank0
  7516  1AC4  00B7               	movwf	??_commutate+1
  7517  1AC5  0022               	movlb	2	; select bank2
  7518  1AC6  082F               	movf	_ui16_speed_rar^(0+256),w
  7519  1AC7  0020               	movlb	0	; select bank0
  7520  1AC8  00B6               	movwf	??_commutate
  7521  1AC9  36B7               	lsrf	??_commutate+1,f
  7522  1ACA  0CB6               	rrf	??_commutate,f
  7523  1ACB  36B7               	lsrf	??_commutate+1,f
  7524  1ACC  0CB6               	rrf	??_commutate,f
  7525  1ACD  36B7               	lsrf	??_commutate+1,f
  7526  1ACE  0CB6               	rrf	??_commutate,f
  7527  1ACF  0836               	movf	??_commutate,w
  7528  1AD0  00B0               	movwf	___wmul@multiplier
  7529  1AD1  0837               	movf	??_commutate+1,w
  7530  1AD2  00B1               	movwf	___wmul@multiplier+1
  7531  1AD3  3064               	movlw	100
  7532  1AD4  00B2               	movwf	___wmul@multiplicand
  7533  1AD5  01B3               	clrf	___wmul@multiplicand+1
  7534  1AD6  318E  266A  319A   	fcall	___wmul
  7535  1AD9  0831               	movf	?___wmul+1,w
  7536  1ADA  0021               	movlb	1	; select bank1
  7537  1ADB  00B9               	movwf	(_ui16_phase_advancement+1)^(0+128)
  7538  1ADC  0020               	movlb	0	; select bank0
  7539  1ADD  0830               	movf	?___wmul,w
  7540  1ADE  0021               	movlb	1	; select bank1
  7541  1ADF  00B8               	movwf	_ui16_phase_advancement^(0+128)
  7542  1AE0  3007               	movlw	7
  7543  1AE1                     u7355:	
  7544  1AE1  36B9               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
  7545  1AE2  0CB8               	rrf	_ui16_phase_advancement^(0+128),f
  7546  1AE3  0B89               	decfsz	9,f
  7547  1AE4  2AE1               	goto	u7355
  7548                           
  7549                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  7550  1AE5  0020               	movlb	0	; select bank0
  7551  1AE6  0851               	movf	_comm_time+1,w
  7552  1AE7  0021               	movlb	1	; select bank1
  7553  1AE8  0239               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  7554  1AE9  1D03               	skipz
  7555  1AEA  2AED               	goto	u7365
  7556  1AEB  27CA  319A         	fcall	PL128	;call to abstracted procedure
  7557  1AED                     u7365:	
  7558  1AED  1803               	skipnc
  7559  1AEE  2AF2               	goto	l9470
  7560                           
  7561                           ;bldc.c: 1474: {
  7562                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
  7563  1AEF  26E9  319A         	fcall	PL32	;call to abstracted procedure
  7564                           
  7565                           ;bldc.c: 1478: }
  7566  1AF1  2B06               	goto	l9494
  7567  1AF2                     l9470:	
  7568                           
  7569                           ;bldc.c: 1481: else
  7570                           ;bldc.c: 1482: {
  7571                           ;bldc.c: 1484: phase_delay_counter = 0;
  7572  1AF2  0023               	movlb	3	; select bank3
  7573  1AF3  01DA               	clrf	_phase_delay_counter^(0+384)
  7574  1AF4  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  7575  1AF5  2B06               	goto	l9494
  7576  1AF6                     l9472:	
  7577                           
  7578                           ;bldc.c: 1514: {
  7579                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
  7580  1AF6  30A6               	movlw	166
  7581  1AF7  2B02               	goto	L5
  7582  1AF8                     l9474:	
  7583                           ;bldc.c: 1517: break;
  7584                           
  7585                           
  7586                           ;bldc.c: 1524: {
  7587                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
  7588  1AF8  27A4  319A         	fcall	PL100	;call to abstracted procedure
  7589                           
  7590                           ;bldc.c: 1527: break;
  7591  1AFA  2B14               	goto	l9496
  7592  1AFB                     l9476:	
  7593                           
  7594                           ;bldc.c: 1534: {
  7595                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
  7596  1AFB  307D               	movlw	125
  7597  1AFC  2B02               	goto	L5
  7598  1AFD                     l9478:	
  7599                           ;bldc.c: 1537: break;
  7600                           
  7601                           
  7602                           ;bldc.c: 1544: {
  7603                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
  7604  1AFD  3053               	movlw	83
  7605  1AFE  2B02               	goto	L5
  7606  1AFF                     l9480:	
  7607                           ;bldc.c: 1547: break;
  7608                           
  7609                           
  7610                           ;bldc.c: 1554: {
  7611                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2400 * 2 )
      +                           ) ;
  7612  1AFF  3029               	movlw	41
  7613  1B00  2B02               	goto	L5
  7614  1B01                     l9482:	
  7615                           ;bldc.c: 1557: break;
  7616                           
  7617                           
  7618                           ;bldc.c: 1564: {
  7619                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           ) ;
  7620  1B01  3021               	movlw	33
  7621  1B02                     L5:	
  7622  1B02  0022               	movlb	2	; select bank2
  7623  1B03  00AD               	movwf	_ui16_comm_time_max^(0+256)
  7624  1B04  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  7625                           
  7626                           ;bldc.c: 1567: break;
  7627  1B05  2B14               	goto	l9496
  7628  1B06                     l9494:	
  7629                           
  7630                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7631                           ; Switch size 1, requested type "space"
  7632                           ; Number of cases is 1, Range of values is 0 to 0
  7633                           ; switch strategies available:
  7634                           ; Name         Instructions Cycles
  7635                           ; simple_byte            4     3 (average)
  7636                           ; direct_byte            8     6 (fixed)
  7637                           ; jumptable            260     6 (fixed)
  7638                           ;	Chosen strategy is simple_byte
  7639  1B06  0021               	movlb	1	; select bank1
  7640  1B07  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
  7641  1B08  3A00               	xorlw	0	; case 0
  7642  1B09  1903               	skipnz
  7643  1B0A  2B0C               	goto	l13828
  7644  1B0B  2B01               	goto	l9482
  7645  1B0C                     l13828:	
  7646                           
  7647                           ; Switch size 1, requested type "space"
  7648                           ; Number of cases is 10, Range of values is 0 to 9
  7649                           ; switch strategies available:
  7650                           ; Name         Instructions Cycles
  7651                           ; direct_byte           26     6 (fixed)
  7652                           ; simple_byte           31    16 (average)
  7653                           ; jumptable            260     6 (fixed)
  7654                           ;	Chosen strategy is direct_byte
  7655  1B0C  27CF  319A         	fcall	PL130	;call to abstracted procedure
  7656  1B0E  1803               	skipnc
  7657  1B0F  2B01               	goto	l9482
  7658  1B10  3187               	movlp	high S13830
  7659  1B11  3504               	lslf	4,w
  7660  1B12  3E11               	addlw	low S13830
  7661  1B13  0082               	movwf	2
  7662  1B14                     l9496:	
  7663                           
  7664                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 *
      +                           2 ) ) )
  7665  1B14  3000               	movlw	0
  7666  1B15  022E               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  7667  1B16  3021               	movlw	33
  7668  1B17  1903               	skipnz
  7669  1B18  022D               	subwf	_ui16_comm_time_max^(0+256),w
  7670  1B19  1803               	skipnc
  7671  1B1A  2B1E               	goto	l9500
  7672                           
  7673                           ;bldc.c: 1626: {
  7674                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  7675  1B1B  3021               	movlw	33
  7676  1B1C  00AD               	movwf	_ui16_comm_time_max^(0+256)
  7677  1B1D  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  7678  1B1E                     l9500:	
  7679                           
  7680                           ;bldc.c: 1630: }
  7681                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
  7682  1B1E  1E7A               	btfss	_MotorFlags,4
  7683  1B1F  2B53               	goto	l345
  7684                           
  7685                           ;bldc.c: 1636: {
  7686                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
  7687  1B20  300A               	movlw	10
  7688  1B21  0021               	movlb	1	; select bank1
  7689  1B22  00E4               	movwf	_ui8_StartupPWM^(0+128)
  7690                           
  7691                           ;bldc.c: 1641: }
  7692                           ;bldc.c: 1644: }
  7693  1B23  2B53               	goto	l345
  7694  1B24                     l327:	
  7695                           
  7696                           ;bldc.c: 1647: else
  7697                           ;bldc.c: 1648: {
  7698                           ;bldc.c: 1652: if( rising_bemf_flag)
  7699  1B24  1C79               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  7700  1B25  2B2A               	goto	l9506
  7701                           
  7702                           ;bldc.c: 1654: {
  7703                           ;bldc.c: 1657: phase_delay_counter = 0;
  7704  1B26  0023               	movlb	3	; select bank3
  7705  1B27  01DA               	clrf	_phase_delay_counter^(0+384)
  7706  1B28  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  7707                           
  7708                           ;bldc.c: 1659: }
  7709  1B29  2B38               	goto	l9508
  7710  1B2A                     l9506:	
  7711                           
  7712                           ;bldc.c: 1662: else
  7713                           ;bldc.c: 1663: {
  7714                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  7715  1B2A  0020               	movlb	0	; select bank0
  7716  1B2B  0851               	movf	_comm_time+1,w
  7717  1B2C  00B7               	movwf	??_commutate+1
  7718  1B2D  0850               	movf	_comm_time,w
  7719  1B2E  00B6               	movwf	??_commutate
  7720  1B2F  36B7               	lsrf	??_commutate+1,f
  7721  1B30  0CB6               	rrf	??_commutate,f
  7722  1B31  0836               	movf	??_commutate,w
  7723  1B32  0023               	movlb	3	; select bank3
  7724  1B33  00DA               	movwf	_phase_delay_counter^(0+384)
  7725  1B34  0020               	movlb	0	; select bank0
  7726  1B35  0837               	movf	??_commutate+1,w
  7727  1B36  0023               	movlb	3	; select bank3
  7728  1B37  00DB               	movwf	(_phase_delay_counter+1)^(0+384)
  7729  1B38                     l9508:	
  7730                           
  7731                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  7732                           
  7733                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  7734  1B38  2797  319A         	fcall	PL96	;call to abstracted procedure
  7735                           
  7736                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  7737  1B3A  1F7A               	btfss	_MotorFlags,6
  7738  1B3B  2B51               	goto	l9532
  7739                           
  7740                           ;bldc.c: 1693: {
  7741                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  7742  1B3C  27C5  319A         	fcall	PL126	;call to abstracted procedure
  7743  1B3E  1903               	btfsc	3,2
  7744  1B3F  2B53               	goto	l345
  7745                           
  7746                           ;bldc.c: 1706: else
  7747                           ;bldc.c: 1707: {
  7748                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  7749  1B40  27BB  319A         	fcall	PL122	;call to abstracted procedure
  7750  1B42  1803               	skipnc
  7751  1B43  2B4B               	goto	l9526
  7752                           
  7753                           ;bldc.c: 1712: {
  7754                           ;bldc.c: 1714: CCPR1L--;
  7755                           
  7756                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  7757  1B44  27AA  319A         	fcall	PL108	;call to abstracted procedure
  7758  1B46  1803               	skipnc
  7759  1B47  2B53               	goto	l345
  7760                           
  7761                           ;bldc.c: 1718: {
  7762                           ;bldc.c: 1720: CCPR1L--;
  7763  1B48  0025               	movlb	5	; select bank5
  7764  1B49  0391               	decf	17,f	;volatile
  7765  1B4A  2B53               	goto	l345
  7766  1B4B                     l9526:	
  7767                           
  7768                           ;bldc.c: 1728: else
  7769                           ;bldc.c: 1729: {
  7770                           ;bldc.c: 1731: CCPR1L++;
  7771                           
  7772                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  7773  1B4B  278A  319A         	fcall	PL88	;call to abstracted procedure
  7774  1B4D  1803               	skipnc
  7775  1B4E  2B53               	goto	l345
  7776                           
  7777                           ;bldc.c: 1735: {
  7778                           ;bldc.c: 1737: CCPR1L++;
  7779  1B4F  0A91               	incf	17,f	;volatile
  7780  1B50  2B53               	goto	l345
  7781  1B51                     l9532:	
  7782                           
  7783                           ;bldc.c: 1768: else
  7784                           ;bldc.c: 1769: {
  7785                           ;bldc.c: 1771: CCPR1L = 0;
  7786  1B51  0025               	movlb	5	; select bank5
  7787  1B52  0191               	clrf	17	;volatile
  7788  1B53                     l345:	
  7789                           
  7790                           ;bldc.c: 1773: }
  7791                           ;bldc.c: 1777: }
  7792                           ;bldc.c: 1780: comm_time = 0;
  7793                           
  7794                           ;bldc.c: 1784: if( comm_state == 0xff )
  7795  1B53  27B6  319A         	fcall	PL118	;call to abstracted procedure
  7796  1B55  0F63               	incfsz	_comm_state^(0+128),w
  7797  1B56  2B9F               	goto	l9682
  7798                           
  7799                           ;bldc.c: 1786: {
  7800                           ;bldc.c: 1788: comm_state = 6;
  7801  1B57  3006               	movlw	6
  7802  1B58  00E3               	movwf	_comm_state^(0+128)
  7803  1B59  2B9F               	goto	l9682
  7804  1B5A                     l9538:	
  7805                           
  7806                           ;bldc.c: 1800: {
  7807                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
  7808  1B5A  3001               	movlw	1
  7809  1B5B  0025               	movlb	5	; select bank5
  7810  1B5C  0096               	movwf	22	;volatile
  7811                           
  7812                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  7813  1B5D  1F7A               	btfss	_MotorFlags,6
  7814  1B5E  2B61               	goto	l9544
  7815                           
  7816                           ;bldc.c: 1811: {
  7817                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  7818  1B5F  2778  319A         	fcall	PL70	;call to abstracted procedure
  7819  1B61                     l9544:	
  7820                           
  7821                           ;bldc.c: 1815: }
  7822                           ;bldc.c: 1819: LATB2 = 0;
  7823                           
  7824                           ;bldc.c: 1820: LATB1 = 0;
  7825                           
  7826                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  7827                           
  7828                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  7829                           
  7830                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  7831                           
  7832                           ;bldc.c: 1824: CM1CON1 = 0x02;
  7833                           
  7834                           ;bldc.c: 1837: CM1CON0 = 0x84;
  7835  1B61  26FA  319A         	fcall	PL34	;call to abstracted procedure
  7836  1B63  2B8D               	goto	L11
  7837  1B64                     l9562:	
  7838                           ;bldc.c: 1845: break;
  7839                           
  7840                           ;bldc.c: 1839: comm_state = 6;
  7841                           
  7842                           ;bldc.c: 1838: rising_bemf_flag = 1;
  7843                           
  7844                           
  7845                           ;bldc.c: 1855: {
  7846                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
  7847  1B64  3001               	movlw	1
  7848  1B65  0025               	movlb	5	; select bank5
  7849  1B66  0096               	movwf	22	;volatile
  7850                           
  7851                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  7852  1B67  1F7A               	btfss	_MotorFlags,6
  7853  1B68  2B6B               	goto	l9568
  7854                           
  7855                           ;bldc.c: 1865: {
  7856                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  7857  1B69  277E  319A         	fcall	PL74	;call to abstracted procedure
  7858  1B6B                     l9568:	
  7859                           
  7860                           ;bldc.c: 1869: }
  7861                           ;bldc.c: 1873: LATB2 = 1;
  7862                           
  7863                           ;bldc.c: 1874: LATB1 = 0;
  7864                           
  7865                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  7866                           
  7867                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  7868                           
  7869                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  7870                           
  7871                           ;bldc.c: 1878: CM1CON1 = 0x01;
  7872                           
  7873                           ;bldc.c: 1892: CM1CON0 = 0x94;
  7874  1B6B  2748  319A         	fcall	PL44	;call to abstracted procedure
  7875  1B6D                     l9582:	
  7876                           
  7877                           ;bldc.c: 1893: rising_bemf_flag = 0;
  7878                           
  7879                           ;bldc.c: 1894: comm_state = 1;
  7880  1B6D  27C0  319A         	fcall	PL124	;call to abstracted procedure
  7881                           
  7882                           ;bldc.c: 1902: break;
  7883  1B6F  2BB3               	goto	l9684
  7884  1B70                     l9586:	
  7885                           
  7886                           ;bldc.c: 1912: {
  7887                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
  7888  1B70  3002               	movlw	2
  7889  1B71  0025               	movlb	5	; select bank5
  7890  1B72  0096               	movwf	22	;volatile
  7891                           
  7892                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  7893  1B73  1F7A               	btfss	_MotorFlags,6
  7894  1B74  2B77               	goto	l9592
  7895                           
  7896                           ;bldc.c: 1922: {
  7897                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  7898  1B75  2772  319A         	fcall	PL66	;call to abstracted procedure
  7899  1B77                     l9592:	
  7900                           
  7901                           ;bldc.c: 1926: }
  7902                           ;bldc.c: 1929: LATC2 = 0;
  7903                           
  7904                           ;bldc.c: 1931: LATB1 = 0;
  7905                           
  7906                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  7907                           
  7908                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  7909                           
  7910                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  7911                           
  7912                           ;bldc.c: 1935: CM1CON1 = 0x00;
  7913                           
  7914                           ;bldc.c: 1949: CM1CON0 = 0x84;
  7915  1B77  272A  319A         	fcall	PL40	;call to abstracted procedure
  7916  1B79  2B8D               	goto	L11
  7917  1B7A                     l9606:	
  7918                           ;bldc.c: 1956: break;
  7919                           
  7920                           ;bldc.c: 1951: comm_state = 2;
  7921                           
  7922                           ;bldc.c: 1950: rising_bemf_flag = 1;
  7923                           
  7924                           
  7925                           ;bldc.c: 1966: {
  7926                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
  7927  1B7A  3002               	movlw	2
  7928  1B7B  0025               	movlb	5	; select bank5
  7929  1B7C  0096               	movwf	22	;volatile
  7930                           
  7931                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  7932  1B7D  1F7A               	btfss	_MotorFlags,6
  7933  1B7E  2B81               	goto	l9612
  7934                           
  7935                           ;bldc.c: 1977: {
  7936                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  7937  1B7F  2778  319A         	fcall	PL70	;call to abstracted procedure
  7938  1B81                     l9612:	
  7939                           
  7940                           ;bldc.c: 1981: }
  7941                           ;bldc.c: 1984: LATC2 = 0;
  7942                           
  7943                           ;bldc.c: 1986: LATB1 = 1;
  7944                           
  7945                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  7946                           
  7947                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  7948                           
  7949                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  7950                           
  7951                           ;bldc.c: 1990: CM1CON1 = 0x02;
  7952                           
  7953                           ;bldc.c: 2004: CM1CON0 = 0x94;
  7954  1B81  271A  319A         	fcall	PL38	;call to abstracted procedure
  7955  1B83  2B98               	goto	L12
  7956  1B84                     l9630:	
  7957                           ;bldc.c: 2011: break;
  7958                           
  7959                           ;bldc.c: 2006: comm_state = 3;
  7960                           
  7961                           ;bldc.c: 2005: rising_bemf_flag = 0;
  7962                           
  7963                           
  7964                           ;bldc.c: 2020: {
  7965                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
  7966  1B84  3004               	movlw	4
  7967  1B85  0025               	movlb	5	; select bank5
  7968  1B86  0096               	movwf	22	;volatile
  7969                           
  7970                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  7971  1B87  1F7A               	btfss	_MotorFlags,6
  7972  1B88  2B8B               	goto	l9636
  7973                           
  7974                           ;bldc.c: 2031: {
  7975                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  7976  1B89  277E  319A         	fcall	PL74	;call to abstracted procedure
  7977  1B8B                     l9636:	
  7978                           
  7979                           ;bldc.c: 2035: }
  7980                           ;bldc.c: 2038: LATC2 = 0;
  7981                           
  7982                           ;bldc.c: 2039: LATB2 = 0;
  7983                           
  7984                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  7985                           
  7986                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  7987                           
  7988                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  7989                           
  7990                           ;bldc.c: 2044: CM1CON1 = 0x01;
  7991                           
  7992                           ;bldc.c: 2059: CM1CON0 = 0x84;
  7993  1B8B  270A  319A         	fcall	PL36	;call to abstracted procedure
  7994  1B8D                     L11:	
  7995                           
  7996                           ;bldc.c: 2060: rising_bemf_flag = 1;
  7997  1B8D  1479               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  7998                           
  7999                           ;bldc.c: 2061: comm_state = 4;
  8000  1B8E  2B99               	goto	L9
  8001  1B8F                     l9654:	
  8002                           ;bldc.c: 2066: break;
  8003                           
  8004                           
  8005                           ;bldc.c: 2076: {
  8006                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
  8007  1B8F  3004               	movlw	4
  8008  1B90  0025               	movlb	5	; select bank5
  8009  1B91  0096               	movwf	22	;volatile
  8010                           
  8011                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  8012  1B92  1F7A               	btfss	_MotorFlags,6
  8013  1B93  2B96               	goto	l9660
  8014                           
  8015                           ;bldc.c: 2086: {
  8016                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  8017  1B94  2772  319A         	fcall	PL66	;call to abstracted procedure
  8018  1B96                     l9660:	
  8019                           
  8020                           ;bldc.c: 2090: }
  8021                           ;bldc.c: 2093: LATC2 = 1;
  8022                           
  8023                           ;bldc.c: 2094: LATB2 = 0;
  8024                           
  8025                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  8026                           
  8027                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  8028                           
  8029                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  8030                           
  8031                           ;bldc.c: 2099: CM1CON1 = 0x00;
  8032                           
  8033                           ;bldc.c: 2113: CM1CON0 = 0x94;
  8034  1B96  2739  319A         	fcall	PL42	;call to abstracted procedure
  8035  1B98                     L12:	
  8036                           
  8037                           ;bldc.c: 2114: rising_bemf_flag = 0;
  8038  1B98  1079               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  8039  1B99                     L9:	
  8040                           
  8041                           ;bldc.c: 2115: comm_state = 5;
  8042  1B99  0021               	movlb	1	; select bank1
  8043  1B9A  00E3               	movwf	_comm_state^(0+128)
  8044                           
  8045                           ;bldc.c: 2120: break;
  8046  1B9B  2BB3               	goto	l9684
  8047  1B9C                     l9674:	
  8048                           
  8049                           ;bldc.c: 2129: {
  8050                           ;bldc.c: 2131: PSTR1CON = 0x00;
  8051                           
  8052                           ;bldc.c: 2132: CM1CON0 = 0x00;
  8053  1B9C  27D4  319A         	fcall	PL132	;call to abstracted procedure
  8054  1B9E  2B6D               	goto	l9582
  8055  1B9F                     l9682:	
  8056  1B9F  0863               	movf	_comm_state^(0+128),w
  8057                           
  8058                           ; Switch size 1, requested type "space"
  8059                           ; Number of cases is 6, Range of values is 1 to 6
  8060                           ; switch strategies available:
  8061                           ; Name         Instructions Cycles
  8062                           ; simple_byte           19    10 (average)
  8063                           ; direct_byte           21     9 (fixed)
  8064                           ; jumptable            263     9 (fixed)
  8065                           ;	Chosen strategy is simple_byte
  8066  1BA0  3A01               	xorlw	1	; case 1
  8067  1BA1  1903               	skipnz
  8068  1BA2  2B5A               	goto	l9538
  8069  1BA3  3A03               	xorlw	3	; case 2
  8070  1BA4  1903               	skipnz
  8071  1BA5  2B64               	goto	l9562
  8072  1BA6  3A01               	xorlw	1	; case 3
  8073  1BA7  1903               	skipnz
  8074  1BA8  2B70               	goto	l9586
  8075  1BA9  3A07               	xorlw	7	; case 4
  8076  1BAA  1903               	skipnz
  8077  1BAB  2B7A               	goto	l9606
  8078  1BAC  3A01               	xorlw	1	; case 5
  8079  1BAD  1903               	skipnz
  8080  1BAE  2B84               	goto	l9630
  8081  1BAF  3A03               	xorlw	3	; case 6
  8082  1BB0  1903               	skipnz
  8083  1BB1  2B8F               	goto	l9654
  8084  1BB2  2B9C               	goto	l9674
  8085  1BB3                     l9684:	
  8086                           
  8087                           ;bldc.c: 2146: {
  8088                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  8089                           
  8090                           ;bldc.c: 2158: }
  8091                           ;bldc.c: 2161: comm_time = 0;
  8092                           
  8093                           ;bldc.c: 2150: }
  8094  1BB3  2F91               	ljmp	PL90	;call to abstracted procedure
  8095  1BB4                     __end_of_commutate:	
  8096  1BB4                     __ptext51:	
  8097 ;; *************** function _interrrupt_bldc *****************
  8098 ;; Defined at:
  8099 ;;		line 281 in file "../bldc.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;		None
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;  ui32_tmp        4   12[BANK0 ] unsigned long 
  8104 ;; Return value:  Size  Location     Type
  8105 ;;                  1    wreg      void 
  8106 ;; Registers used:
  8107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8108 ;; Tracked objects:
  8109 ;;		On entry : 1F/0
  8110 ;;		On exit  : 1C/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8113 ;;      Params:         0       0       0       0       0       0       0       0
  8114 ;;      Locals:         0       4       0       0       0       0       0       0
  8115 ;;      Temps:          2       0       0       0       0       0       0       0
  8116 ;;      Totals:         2       4       0       0       0       0       0       0
  8117 ;;Total ram usage:        6 bytes
  8118 ;; Hardware stack levels used:    1
  8119 ;; Hardware stack levels required when called:    2
  8120 ;; This function calls:
  8121 ;;		_BLDCWait
  8122 ;;		i1_ADC_Read
  8123 ;;		i1_ADC_Wait
  8124 ;;		i1___lwdiv
  8125 ;;		i1___wmul
  8126 ;;		i1_commutate
  8127 ;; This function is called by:
  8128 ;;		_interrupt_handler
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           
  8133                           ;psect for function _interrrupt_bldc
  8134  1BB4                     _interrrupt_bldc:	
  8135                           
  8136                           ;bldc.c: 286: unsigned long ui32_tmp ;
  8137                           ;bldc.c: 288: ++comm_time ;
  8138                           
  8139                           ;incstack = 0
  8140                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8141  1BB4  0AD0               	incf	_comm_time,f
  8142  1BB5  1903               	skipnz
  8143  1BB6  0AD1               	incf	_comm_time+1,f
  8144                           
  8145                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
  8146  1BB7  0851               	movf	_comm_time+1,w
  8147  1BB8  0022               	movlb	2	; select bank2
  8148  1BB9  022E               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  8149  1BBA  1D03               	skipz
  8150  1BBB  2BC0               	goto	u1094_25
  8151  1BBC  0020               	movlb	0	; select bank0
  8152  1BBD  0850               	movf	_comm_time,w
  8153  1BBE  0022               	movlb	2	; select bank2
  8154  1BBF  022D               	subwf	_ui16_comm_time_max^(0+256),w
  8155  1BC0                     u1094_25:	
  8156  1BC0  1803               	skipnc
  8157  1BC1  2BC4               	goto	i1l12728
  8158                           
  8159                           ;bldc.c: 294: {
  8160                           ;bldc.c: 296: commutate( );
  8161  1BC2  2577  319A         	fcall	i1_commutate
  8162  1BC4                     i1l12728:	
  8163                           
  8164                           ;bldc.c: 298: }
  8165                           ;bldc.c: 302: if( ui16_step_cnt < 10 )
  8166  1BC4  3000               	movlw	0
  8167  1BC5  0021               	movlb	1	; select bank1
  8168  1BC6  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  8169  1BC7  300A               	movlw	10
  8170  1BC8  1903               	skipnz
  8171  1BC9  023A               	subwf	_ui16_step_cnt^(0+128),w
  8172  1BCA  1803               	skipnc
  8173                           
  8174                           ;bldc.c: 311: else
  8175                           ;bldc.c: 312: {
  8176                           ;bldc.c: 322: MotorFlags.bits.B3 = 0;
  8177  1BCB  11FA               	bcf	_MotorFlags,3
  8178                           
  8179                           ;bldc.c: 328: }
  8180                           ;bldc.c: 331: if (ui16_step_cnt >= 3 )
  8181  1BCC  3000               	movlw	0
  8182  1BCD  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  8183  1BCE  3003               	movlw	3
  8184  1BCF  1903               	skipnz
  8185  1BD0  023A               	subwf	_ui16_step_cnt^(0+128),w
  8186  1BD1  1803               	btfsc	3,0
  8187                           
  8188                           ;bldc.c: 333: {
  8189                           ;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
  8190  1BD2  127A               	bcf	_MotorFlags,4
  8191                           
  8192                           ;bldc.c: 337: }
  8193                           ;bldc.c: 340: BLDCWait( );
  8194  1BD3  26AF  319A         	fcall	_BLDCWait
  8195                           
  8196                           ;bldc.c: 346: if( C1OUT )
  8197  1BD5  0022               	movlb	2	; select bank2
  8198  1BD6  1F11               	btfss	17,6	;volatile
  8199  1BD7  2BDB               	goto	i1l263
  8200                           
  8201                           ;bldc.c: 349: {
  8202                           ;bldc.c: 351: ui8_CompFlag = 0x00;
  8203  1BD8  0021               	movlb	1	; select bank1
  8204  1BD9  01DD               	clrf	_ui8_CompFlag^(0+128)
  8205                           
  8206                           ;bldc.c: 353: }
  8207  1BDA  2CDE               	goto	i1l12918
  8208  1BDB                     i1l263:	
  8209                           
  8210                           ;bldc.c: 356: else
  8211                           ;bldc.c: 357: {
  8212                           ;bldc.c: 362: ui8_CompFlag = 0x01;
  8213  1BDB  0021               	movlb	1	; select bank1
  8214  1BDC  01DD               	clrf	_ui8_CompFlag^(0+128)
  8215  1BDD  0ADD               	incf	_ui8_CompFlag^(0+128),f
  8216  1BDE  2CDE               	goto	i1l12918
  8217  1BDF                     i1l12742:	
  8218                           
  8219                           ;bldc.c: 378: {
  8220                           ;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
  8221  1BDF  302D               	movlw	45
  8222  1BE0  009D               	movwf	29	;volatile
  8223                           
  8224                           ;bldc.c: 387: ADC_Wait( );
  8225  1BE1  253B  319A         	fcall	i1_ADC_Wait
  8226                           
  8227                           ;bldc.c: 391: ( GO_nDONE = 1 );
  8228  1BE3  0021               	movlb	1	; select bank1
  8229  1BE4  149D               	bsf	29,1	;volatile
  8230                           
  8231                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
  8232  1BE5  2554  319A         	fcall	i1_ADC_Read
  8233  1BE7  0871               	movf	?i1_ADC_Read+1,w
  8234  1BE8  0023               	movlb	3	; select bank3
  8235  1BE9  00E9               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
  8236  1BEA  0870               	movf	?i1_ADC_Read,w
  8237  1BEB  00E8               	movwf	_ui16_NTC_Temp_bldc^(0+384)
  8238                           
  8239                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  8240  1BEC  3031               	movlw	49
  8241  1BED  0021               	movlb	1	; select bank1
  8242  1BEE                     L51:	
  8243  1BEE  009D               	movwf	29	;volatile
  8244  1BEF                     L46:	
  8245                           
  8246                           ;bldc.c: 403: ADC_Wait( );
  8247  1BEF  253B  319A         	fcall	i1_ADC_Wait
  8248                           
  8249                           ;bldc.c: 407: ( GO_nDONE = 1 );
  8250  1BF1  0021               	movlb	1	; select bank1
  8251  1BF2  149D               	bsf	29,1	;volatile
  8252  1BF3                     i1l12752:	
  8253                           
  8254                           ;bldc.c: 410: ui8_sampleState++;
  8255  1BF3  0021               	movlb	1	; select bank1
  8256  1BF4  0ADE               	incf	_ui8_sampleState^(0+128),f
  8257                           
  8258                           ;bldc.c: 413: break;
  8259  1BF5  2CEB               	goto	i1l267
  8260  1BF6                     i1l12754:	
  8261                           
  8262                           ;bldc.c: 421: {
  8263                           ;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
  8264  1BF6  085F               	movf	_ui8_Ubemf_sel^(0+128),w
  8265  1BF7  009D               	movwf	29	;volatile
  8266                           
  8267                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
  8268  1BF8  081B               	movf	27,w	;volatile
  8269  1BF9  0020               	movlb	0	; select bank0
  8270  1BFA  00D7               	movwf	_ui16_Ubat_bldc	;volatile
  8271                           
  8272                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
  8273  1BFB  0021               	movlb	1	; select bank1
  8274  1BFC  081C               	movf	28,w	;volatile
  8275  1BFD  0020               	movlb	0	; select bank0
  8276  1BFE  00D8               	movwf	_ui16_Ubat_bldc+1	;volatile
  8277                           
  8278                           ;bldc.c: 454: __nop();
  8279  1BFF  0000               	nop
  8280                           
  8281                           ;bldc.c: 455: __nop();
  8282  1C00  0000               	nop
  8283                           
  8284                           ;bldc.c: 456: __nop();
  8285  1C01  0000               	nop
  8286                           
  8287                           ;bldc.c: 457: __nop();
  8288  1C02  0000               	nop
  8289                           
  8290                           ;bldc.c: 458: __nop();
  8291  1C03  0000               	nop
  8292                           
  8293                           ;bldc.c: 459: __nop();
  8294  1C04  0000               	nop
  8295                           
  8296                           ;bldc.c: 460: __nop();
  8297  1C05  0000               	nop
  8298                           
  8299                           ;bldc.c: 461: __nop();
  8300  1C06  0000               	nop
  8301                           
  8302                           ;bldc.c: 463: __nop();
  8303  1C07  0000               	nop
  8304                           
  8305                           ;bldc.c: 464: __nop();
  8306  1C08  0000               	nop
  8307                           
  8308                           ;bldc.c: 465: __nop();
  8309  1C09  0000               	nop
  8310                           
  8311                           ;bldc.c: 466: __nop();
  8312  1C0A  0000               	nop
  8313                           
  8314                           ;bldc.c: 467: __nop();
  8315  1C0B  0000               	nop
  8316                           
  8317                           ;bldc.c: 468: __nop();
  8318  1C0C  0000               	nop
  8319                           
  8320                           ;bldc.c: 469: __nop();
  8321  1C0D  0000               	nop
  8322                           
  8323                           ;bldc.c: 470: __nop();
  8324  1C0E  0000               	nop
  8325  1C0F  2BEF               	goto	L46
  8326  1C10                     i1l12794:	
  8327                           ;bldc.c: 474: ADC_Wait();
  8328                           
  8329                           
  8330                           ;bldc.c: 491: {
  8331                           ;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
  8332  1C10  081B               	movf	27,w	;volatile
  8333  1C11  00B6               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
  8334                           
  8335                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
  8336  1C12  081C               	movf	28,w	;volatile
  8337  1C13  00B7               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
  8338                           
  8339                           ;bldc.c: 511: ( GO_nDONE = 1 );
  8340  1C14  149D               	bsf	29,1	;volatile
  8341                           
  8342                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui8_duty_cycle_BLDC != 0 ) )
  8343  1C15  1F7A               	btfss	_MotorFlags,6
  8344  1C16  2C2D               	goto	i1l12806
  8345  1C17  0020               	movlb	0	; select bank0
  8346  1C18  0856               	movf	_ui8_duty_cycle_BLDC,w
  8347  1C19  1903               	btfsc	3,2
  8348  1C1A  2C2D               	goto	i1l12806
  8349                           
  8350                           ;bldc.c: 521: {
  8351                           ;bldc.c: 523: if( rising_bemf_flag )
  8352  1C1B  1C79               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  8353  1C1C  2C36               	goto	i1l12814
  8354                           
  8355                           ;bldc.c: 525: {
  8356                           ;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
  8357  1C1D  0021               	movlb	1	; select bank1
  8358  1C1E  0836               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  8359  1C1F  3E64               	addlw	100
  8360  1C20  00F7               	movwf	??_interrrupt_bldc
  8361  1C21  3000               	movlw	0
  8362  1C22  3D37               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  8363  1C23  00F8               	movwf	??_interrrupt_bldc+1
  8364  1C24  0020               	movlb	0	; select bank0
  8365  1C25  0858               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8366  1C26  0278               	subwf	??_interrrupt_bldc+1,w
  8367  1C27  1D03               	skipz
  8368  1C28  2C2B               	goto	u1101_25
  8369  1C29  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  8370  1C2A  0277               	subwf	??_interrrupt_bldc,w
  8371  1C2B                     u1101_25:	
  8372  1C2B  1803               	skipnc
  8373  1C2C  2CEB               	goto	i1l267
  8374  1C2D                     i1l12806:	
  8375                           
  8376                           ;bldc.c: 530: {
  8377                           ;bldc.c: 534: ui8_sampleState++;
  8378  1C2D  0021               	movlb	1	; select bank1
  8379  1C2E  0ADE               	incf	_ui8_sampleState^(0+128),f
  8380                           
  8381                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
  8382  1C2F  0860               	movf	_ui8_UPhase_sel^(0+128),w
  8383  1C30  009D               	movwf	29	;volatile
  8384                           
  8385                           ;bldc.c: 540: ADC_Wait( );
  8386  1C31  253B  319A         	fcall	i1_ADC_Wait
  8387                           
  8388                           ;bldc.c: 544: ( GO_nDONE = 1 );
  8389  1C33  0021               	movlb	1	; select bank1
  8390  1C34  149D               	bsf	29,1	;volatile
  8391                           
  8392                           ;bldc.c: 547: }
  8393  1C35  2CEB               	goto	i1l267
  8394  1C36                     i1l12814:	
  8395                           
  8396                           ;bldc.c: 562: else
  8397                           ;bldc.c: 563: {
  8398                           ;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
  8399  1C36  3000               	movlw	0
  8400  1C37  0021               	movlb	1	; select bank1
  8401  1C38  0237               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  8402  1C39  301F               	movlw	31
  8403  1C3A  1903               	skipnz
  8404  1C3B  0236               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  8405  1C3C  1803               	btfsc	3,0
  8406  1C3D  2C2D               	goto	i1l12806
  8407  1C3E  2CEB               	goto	i1l267
  8408  1C3F                     i1l12832:	
  8409                           ;bldc.c: 593: }
  8410                           ;bldc.c: 596: }
  8411                           ;bldc.c: 601: }
  8412                           
  8413                           
  8414                           ;bldc.c: 665: ui8_BlankingCount = 0;
  8415  1C3F  01E2               	clrf	_ui8_BlankingCount^(0+128)
  8416                           
  8417                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
  8418  1C40  2554  319A         	fcall	i1_ADC_Read
  8419                           
  8420                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
  8421  1C42  1CE6               	btfss	_ui8_error_Flags^(0+128),1
  8422  1C43  2C4C               	goto	i1l12846
  8423                           
  8424                           ;bldc.c: 677: {
  8425                           ;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
  8426  1C44  0861               	movf	_ui8_IPhase_sel^(0+128),w
  8427  1C45  009D               	movwf	29	;volatile
  8428                           
  8429                           ;bldc.c: 682: ADC_Wait( );
  8430  1C46  253B  319A         	fcall	i1_ADC_Wait
  8431                           
  8432                           ;bldc.c: 683: ( GO_nDONE = 1 );
  8433  1C48  0021               	movlb	1	; select bank1
  8434  1C49  149D               	bsf	29,1	;volatile
  8435                           
  8436                           ;bldc.c: 686: ui8_sampleState = 9;
  8437  1C4A  3009               	movlw	9
  8438  1C4B  2CDC               	goto	L47
  8439  1C4C                     i1l12846:	
  8440                           ;bldc.c: 688: }
  8441                           
  8442                           
  8443                           ;bldc.c: 691: else
  8444                           ;bldc.c: 692: {
  8445                           ;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  8446  1C4C  3075               	movlw	117
  8447  1C4D  009D               	movwf	29	;volatile
  8448                           
  8449                           ;bldc.c: 697: ADC_Wait( );
  8450  1C4E  253B  319A         	fcall	i1_ADC_Wait
  8451  1C50  2BF3               	goto	i1l12752
  8452  1C51                     i1l284:	
  8453                           ;bldc.c: 754: }
  8454                           ;bldc.c: 757: case 8:
  8455                           
  8456                           
  8457                           ;bldc.c: 759: {
  8458                           ;bldc.c: 764: ( GO_nDONE = 1 );
  8459  1C51  149D               	bsf	29,1	;volatile
  8460                           
  8461                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
  8462  1C52  2554  319A         	fcall	i1_ADC_Read
  8463                           
  8464                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
  8465  1C54  0861               	movf	_ui8_IPhase_sel^(0+128),w
  8466  1C55  2BEE               	goto	L51
  8467  1C56                     i1l12866:	
  8468                           ;bldc.c: 776: ADC_Wait( );
  8469                           
  8470                           
  8471                           ;bldc.c: 795: {
  8472                           ;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
  8473  1C56  2554  319A         	fcall	i1_ADC_Read
  8474  1C58  0871               	movf	?i1_ADC_Read+1,w
  8475  1C59  0020               	movlb	0	; select bank0
  8476  1C5A  00CF               	movwf	_ui16_IPhase_bldc+1	;volatile
  8477  1C5B  0870               	movf	?i1_ADC_Read,w
  8478  1C5C  00CE               	movwf	_ui16_IPhase_bldc	;volatile
  8479                           
  8480                           ;bldc.c: 806: if (MotorFlags.bits.B6)
  8481  1C5D  1B7A               	btfsc	_MotorFlags,6
  8482  1C5E  2CB0               	goto	i1l12892
  8483  1C5F  2CBC               	goto	i1l12894
  8484  1C60                     i1l12872:	
  8485                           
  8486                           ;bldc.c: 816: {
  8487                           ;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0]) )
  8488  1C60  0022               	movlb	2	; select bank2
  8489  1C61  0820               	movf	_ui8_current_cal^(0+256),w
  8490  1C62  2768  319A         	fcall	PL48	;call to abstracted procedure
  8491  1C64  1803               	skipnc
  8492  1C65  2C77               	goto	i1l12876
  8493                           
  8494                           ;bldc.c: 820: {
  8495                           ;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[0])*ui16_I_c
      +                          al_Ph1)>>8);
  8496  1C66  2784  319A         	fcall	PL80	;call to abstracted procedure
  8497  1C68  0820               	movf	_ui8_current_cal^(0+256),w
  8498  1C69  02F0               	subwf	i1___wmul@multiplier,f
  8499  1C6A  1C03               	skipc
  8500  1C6B  03F1               	decf	i1___wmul@multiplier+1,f
  8501  1C6C  0021               	movlb	1	; select bank1
  8502  1C6D  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
  8503  1C6E  00F3               	movwf	i1___wmul@multiplicand+1
  8504  1C6F  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
  8505  1C70  00F2               	movwf	i1___wmul@multiplicand
  8506  1C71  2562  319A         	fcall	i1___wmul
  8507  1C73  0871               	movf	?i1___wmul+1,w
  8508  1C74  0022               	movlb	2	; select bank2
  8509  1C75  00B7               	movwf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8510  1C76  2C79               	goto	L48
  8511  1C77                     i1l12876:	
  8512                           ;bldc.c: 824: }
  8513                           
  8514                           
  8515                           ;bldc.c: 827: else
  8516                           ;bldc.c: 828: {
  8517                           ;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
  8518  1C77  0022               	movlb	2	; select bank2
  8519  1C78  01B7               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8520  1C79                     L48:	
  8521  1C79  01B8               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  8522  1C7A  2CC4               	goto	i1l12896
  8523  1C7B                     i1l12878:	
  8524                           
  8525                           ;bldc.c: 842: {
  8526                           ;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1] ) )
  8527  1C7B  0022               	movlb	2	; select bank2
  8528  1C7C  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  8529  1C7D  2768  319A         	fcall	PL48	;call to abstracted procedure
  8530  1C7F  1803               	skipnc
  8531  1C80  2C92               	goto	i1l12882
  8532                           
  8533                           ;bldc.c: 846: {
  8534                           ;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[1])*ui16_I_c
      +                          al_Ph2)>>8);
  8535  1C81  2784  319A         	fcall	PL80	;call to abstracted procedure
  8536  1C83  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  8537  1C84  02F0               	subwf	i1___wmul@multiplier,f
  8538  1C85  1C03               	skipc
  8539  1C86  03F1               	decf	i1___wmul@multiplier+1,f
  8540  1C87  0021               	movlb	1	; select bank1
  8541  1C88  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
  8542  1C89  00F3               	movwf	i1___wmul@multiplicand+1
  8543  1C8A  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
  8544  1C8B  00F2               	movwf	i1___wmul@multiplicand
  8545  1C8C  2562  319A         	fcall	i1___wmul
  8546  1C8E  0871               	movf	?i1___wmul+1,w
  8547  1C8F  0023               	movlb	3	; select bank3
  8548  1C90  00D8               	movwf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8549  1C91  2C94               	goto	L49
  8550  1C92                     i1l12882:	
  8551                           ;bldc.c: 851: }
  8552                           
  8553                           
  8554                           ;bldc.c: 854: else
  8555                           ;bldc.c: 855: {
  8556                           ;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
  8557  1C92  0023               	movlb	3	; select bank3
  8558  1C93  01D8               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8559  1C94                     L49:	
  8560  1C94  01D9               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
  8561  1C95  2CC4               	goto	i1l12896
  8562  1C96                     i1l12884:	
  8563                           
  8564                           ;bldc.c: 869: {
  8565                           ;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]) )
  8566  1C96  0022               	movlb	2	; select bank2
  8567  1C97  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  8568  1C98  2768  319A         	fcall	PL48	;call to abstracted procedure
  8569  1C9A  1803               	skipnc
  8570  1C9B  2CAD               	goto	i1l12888
  8571                           
  8572                           ;bldc.c: 873: {
  8573                           ;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[2])*ui16_I_c
      +                          al_Ph3)>>8);
  8574  1C9C  2784  319A         	fcall	PL80	;call to abstracted procedure
  8575  1C9E  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  8576  1C9F  02F0               	subwf	i1___wmul@multiplier,f
  8577  1CA0  1C03               	skipc
  8578  1CA1  03F1               	decf	i1___wmul@multiplier+1,f
  8579  1CA2  0021               	movlb	1	; select bank1
  8580  1CA3  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
  8581  1CA4  00F3               	movwf	i1___wmul@multiplicand+1
  8582  1CA5  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
  8583  1CA6  00F2               	movwf	i1___wmul@multiplicand
  8584  1CA7  2562  319A         	fcall	i1___wmul
  8585  1CA9  0871               	movf	?i1___wmul+1,w
  8586  1CAA  0023               	movlb	3	; select bank3
  8587  1CAB  00D6               	movwf	_ui16_IPhase3_bldc^(0+384)	;volatile
  8588  1CAC  2CC3               	goto	L50
  8589  1CAD                     i1l12888:	
  8590                           ;bldc.c: 877: }
  8591                           
  8592                           
  8593                           ;bldc.c: 880: else
  8594                           ;bldc.c: 881: {
  8595                           ;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
  8596  1CAD  0023               	movlb	3	; select bank3
  8597  1CAE  2CC2               	goto	L52
  8598  1CAF                     i1l12890:	
  8599  1CAF  2CBC               	goto	i1l12894
  8600  1CB0                     i1l12892:	
  8601                           ;bldc.c: 902: }
  8602                           ;bldc.c: 904: }
  8603                           
  8604                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
  8605                           
  8606                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
  8607                           
  8608                           ;bldc.c: 895: {
  8609                           ;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
  8610                           
  8611  1CB0  0021               	movlb	1	; select bank1
  8612  1CB1  0861               	movf	_ui8_IPhase_sel^(0+128),w
  8613                           
  8614                           ; Switch size 1, requested type "space"
  8615                           ; Number of cases is 3, Range of values is 9 to 53
  8616                           ; switch strategies available:
  8617                           ; Name         Instructions Cycles
  8618                           ; simple_byte           10     6 (average)
  8619                           ; direct_byte           99     9 (fixed)
  8620                           ; jumptable            263     9 (fixed)
  8621                           ;	Chosen strategy is simple_byte
  8622  1CB2  3A09               	xorlw	9	; case 9
  8623  1CB3  1903               	skipnz
  8624  1CB4  2C60               	goto	i1l12872
  8625  1CB5  3A18               	xorlw	24	; case 17
  8626  1CB6  1903               	skipnz
  8627  1CB7  2C96               	goto	i1l12884
  8628  1CB8  3A24               	xorlw	36	; case 53
  8629  1CB9  1903               	skipnz
  8630  1CBA  2C7B               	goto	i1l12878
  8631  1CBB  2CAF               	goto	i1l12890
  8632  1CBC                     i1l12894:	
  8633                           
  8634                           ;bldc.c: 910: else
  8635                           ;bldc.c: 911: {
  8636                           ;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
  8637  1CBC  0022               	movlb	2	; select bank2
  8638  1CBD  01B7               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8639  1CBE  01B8               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  8640                           
  8641                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
  8642  1CBF  0023               	movlb	3	; select bank3
  8643  1CC0  01D8               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8644  1CC1  01D9               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
  8645  1CC2                     L52:	
  8646                           
  8647                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
  8648  1CC2  01D6               	clrf	_ui16_IPhase3_bldc^(0+384)	;volatile
  8649  1CC3                     L50:	
  8650  1CC3  01D7               	clrf	(_ui16_IPhase3_bldc+1)^(0+384)	;volatile
  8651  1CC4                     i1l12896:	
  8652                           
  8653                           ;bldc.c: 918: }
  8654                           ;bldc.c: 956: if( (ui16_IPhase_bldc.w > 500+40) )
  8655  1CC4  3002               	movlw	2
  8656  1CC5  0020               	movlb	0	; select bank0
  8657  1CC6  024F               	subwf	_ui16_IPhase_bldc+1,w	;volatile
  8658  1CC7  301D               	movlw	29
  8659  1CC8  1903               	skipnz
  8660  1CC9  024E               	subwf	_ui16_IPhase_bldc,w	;volatile
  8661  1CCA  1C03               	skipc
  8662  1CCB  2CD0               	goto	i1l12902
  8663  1CCC  30E5               	movlw	229
  8664                           
  8665                           ;bldc.c: 958: {
  8666                           ;bldc.c: 960: MotorFlags.bits.B0 = 1;
  8667  1CCD  147A               	bsf	_MotorFlags,0
  8668                           
  8669                           ;bldc.c: 964: LATC = LATC & 0b11100101;
  8670  1CCE  0022               	movlb	2	; select bank2
  8671  1CCF  058E               	andwf	14,f	;volatile
  8672  1CD0                     i1l12902:	
  8673                           ;bldc.c: 970: }
  8674                           
  8675                           
  8676                           ;bldc.c: 978: }
  8677                           ;bldc.c: 984: ADC_Wait( );
  8678  1CD0  253B  319A         	fcall	i1_ADC_Wait
  8679                           
  8680                           ;bldc.c: 988: ( GO_nDONE = 1 );
  8681  1CD2  0021               	movlb	1	; select bank1
  8682  1CD3  149D               	bsf	29,1	;volatile
  8683                           
  8684                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
  8685  1CD4  1CE6               	btfss	_ui8_error_Flags^(0+128),1
  8686  1CD5  2BF3               	goto	i1l12752
  8687                           
  8688                           ;bldc.c: 993: {
  8689                           ;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  8690  1CD6  3075               	movlw	117
  8691  1CD7  009D               	movwf	29	;volatile
  8692                           
  8693                           ;bldc.c: 998: ADC_Wait( );
  8694  1CD8  253B  319A         	fcall	i1_ADC_Wait
  8695                           
  8696                           ;bldc.c: 1001: ui8_sampleState = 5;
  8697  1CDA  3005               	movlw	5
  8698  1CDB  0021               	movlb	1	; select bank1
  8699  1CDC                     L47:	
  8700  1CDC  00DE               	movwf	_ui8_sampleState^(0+128)
  8701                           
  8702                           ;bldc.c: 1003: }
  8703  1CDD  2CEB               	goto	i1l267
  8704  1CDE                     i1l12918:	
  8705  1CDE  085E               	movf	_ui8_sampleState^(0+128),w
  8706                           
  8707                           ; Switch size 1, requested type "space"
  8708                           ; Number of cases is 10, Range of values is 1 to 10
  8709                           ; switch strategies available:
  8710                           ; Name         Instructions Cycles
  8711                           ; direct_byte           29     9 (fixed)
  8712                           ; simple_byte           31    16 (average)
  8713                           ; jumptable            263     9 (fixed)
  8714                           ;	Chosen strategy is direct_byte
  8715  1CDF  3EFF               	addlw	-1
  8716  1CE0  1C03               	skipc
  8717  1CE1  2CEB               	goto	i1l267
  8718  1CE2  0084               	movwf	4
  8719  1CE3  300A               	movlw	10
  8720  1CE4  0204               	subwf	4,w
  8721  1CE5  1803               	skipnc
  8722  1CE6  2CEB               	goto	i1l267
  8723  1CE7  3187               	movlp	high i1S13834
  8724  1CE8  3504               	lslf	4,w
  8725  1CE9  3E25               	addlw	low i1S13834
  8726  1CEA  0082               	movwf	2
  8727  1CEB                     i1l267:	
  8728                           
  8729                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
  8730  1CEB  1F7A               	btfss	_MotorFlags,6
  8731  1CEC  2D1E               	goto	i1l12946
  8732                           
  8733                           ;bldc.c: 1071: {
  8734                           ;bldc.c: 1073: if( MotorFlags.bits.B3)
  8735  1CED  1DFA               	btfss	_MotorFlags,3
  8736  1CEE  2D20               	goto	i1l12948
  8737                           
  8738                           ;bldc.c: 1075: {
  8739                           ;bldc.c: 1077: bool_start_demand_mat = 1 ;
  8740  1CEF  0021               	movlb	1	; select bank1
  8741  1CF0  3041               	movlw	65
  8742  1CF1  01E5               	clrf	_bool_start_demand_mat^(0+128)
  8743  1CF2  0AE5               	incf	_bool_start_demand_mat^(0+128),f
  8744                           
  8745                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
  8746  1CF3  0023               	movlb	3	; select bank3
  8747  1CF4  00DC               	movwf	_ui8_fixed_start_speed_mat^(0+384)
  8748  1CF5  01DD               	clrf	(_ui8_fixed_start_speed_mat+1)^(0+384)
  8749                           
  8750                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
  8751  1CF6  0020               	movlb	0	; select bank0
  8752  1CF7  0850               	movf	_comm_time,w
  8753  1CF8  3903               	andlw	3
  8754  1CF9  1D03               	btfss	3,2
  8755  1CFA  2D20               	goto	i1l12948
  8756                           
  8757                           ;bldc.c: 1111: else
  8758                           ;bldc.c: 1112: {
  8759                           ;bldc.c: 1114: if (ui16_Ubat_bldc.w)
  8760                           
  8761                           ;bldc.c: 1100: {
  8762                           ;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
  8763                           
  8764                           ;bldc.c: 1096: {
  8765                           ;bldc.c: 1098: if (ui16_Ubat_bldc.w)
  8766                           
  8767                           ;bldc.c: 1092: {
  8768                           ;bldc.c: 1094: if (MotorFlags.bits.B4)
  8769  1CFB  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  8770  1CFC  0458               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
  8771  1CFD  1903               	btfsc	3,2
  8772  1CFE  2D0F               	goto	i1l12938
  8773                           
  8774                           ;bldc.c: 1116: {
  8775                           ;bldc.c: 1119: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
  8776  1CFF  0858               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8777  1D00  00F1               	movwf	i1___lwdiv@divisor+1
  8778  1D01  0857               	movf	_ui16_Ubat_bldc,w	;volatile
  8779  1D02  00F0               	movwf	i1___lwdiv@divisor
  8780  1D03  3080               	movlw	128
  8781  1D04  00F2               	movwf	i1___lwdiv@dividend
  8782  1D05  303E               	movlw	62
  8783  1D06  00F3               	movwf	i1___lwdiv@dividend+1
  8784  1D07  27D9  319A         	fcall	i1___lwdiv
  8785  1D09  0870               	movf	?i1___lwdiv,w
  8786  1D0A  00AC               	movwf	interrrupt_bldc@ui32_tmp
  8787  1D0B  0871               	movf	?i1___lwdiv+1,w
  8788  1D0C  00AD               	movwf	interrrupt_bldc@ui32_tmp+1
  8789  1D0D  01AE               	clrf	interrrupt_bldc@ui32_tmp+2
  8790  1D0E  01AF               	clrf	interrrupt_bldc@ui32_tmp+3
  8791  1D0F                     i1l12938:	
  8792                           
  8793                           ;bldc.c: 1121: }
  8794                           ;bldc.c: 1124: }
  8795                           ;bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui32_tmp) )
  8796  1D0F  0021               	movlb	1	; select bank1
  8797  1D10  0864               	movf	_ui8_StartupPWM^(0+128),w
  8798  1D11  0020               	movlb	0	; select bank0
  8799  1D12  022C               	subwf	interrrupt_bldc@ui32_tmp,w
  8800  1D13  1803               	skipnc
  8801  1D14  2D18               	goto	i1l12942
  8802                           
  8803                           ;bldc.c: 1129: {
  8804                           ;bldc.c: 1131: ui8_StartupPWM--;
  8805  1D15  0021               	movlb	1	; select bank1
  8806  1D16  03E4               	decf	_ui8_StartupPWM^(0+128),f
  8807                           
  8808                           ;bldc.c: 1133: }
  8809  1D17  2D1A               	goto	i1l12944
  8810  1D18                     i1l12942:	
  8811                           
  8812                           ;bldc.c: 1136: else
  8813                           ;bldc.c: 1137: {
  8814                           ;bldc.c: 1139: ui8_StartupPWM++;
  8815  1D18  0021               	movlb	1	; select bank1
  8816  1D19  0AE4               	incf	_ui8_StartupPWM^(0+128),f
  8817  1D1A                     i1l12944:	
  8818                           
  8819                           ;bldc.c: 1141: }
  8820                           ;bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
  8821  1D1A  0864               	movf	_ui8_StartupPWM^(0+128),w
  8822  1D1B  0025               	movlb	5	; select bank5
  8823  1D1C  0091               	movwf	17	;volatile
  8824  1D1D  2D20               	goto	i1l12948
  8825  1D1E                     i1l12946:	
  8826                           
  8827                           ;bldc.c: 1155: else
  8828                           ;bldc.c: 1156: {
  8829                           ;bldc.c: 1159: CCPR1L = 0;
  8830  1D1E  0025               	movlb	5	; select bank5
  8831  1D1F  0191               	clrf	17	;volatile
  8832  1D20                     i1l12948:	
  8833                           
  8834                           ;bldc.c: 1161: }
  8835                           ;bldc.c: 1165: if( 0 == ui8_BlankingCount )
  8836  1D20  0021               	movlb	1	; select bank1
  8837  1D21  0862               	movf	_ui8_BlankingCount^(0+128),w
  8838  1D22  1D03               	btfss	3,2
  8839  1D23  2D39               	goto	i1l12964
  8840                           
  8841                           ;bldc.c: 1168: {
  8842                           ;bldc.c: 1177: if( ui8_CompFlag )
  8843  1D24  085D               	movf	_ui8_CompFlag^(0+128),w
  8844  1D25  1D03               	btfss	3,2
  8845                           
  8846                           ;bldc.c: 1187: {
  8847                           ;bldc.c: 1191: ui8_zero_cros_cnt++;
  8848  1D26  1AFA               	btfsc	_MotorFlags,5
  8849  1D27  2D29               	goto	i1l316
  8850                           
  8851                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
  8852  1D28  16FA               	bsf	_MotorFlags,5
  8853  1D29                     i1l316:	
  8854                           ;bldc.c: 1196: }
  8855                           ;bldc.c: 1199: }
  8856                           ;bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
  8857                           
  8858                           
  8859                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
  8860  1D29  1EFA               	btfss	_MotorFlags,5
  8861  1D2A  0008               	return
  8862                           
  8863                           ;bldc.c: 1353: {
  8864                           ;bldc.c: 1357: if( 0 == phase_delay_counter )
  8865  1D2B  0023               	movlb	3	; select bank3
  8866  1D2C  085A               	movf	_phase_delay_counter^(0+384),w
  8867  1D2D  045B               	iorwf	(_phase_delay_counter+1)^(0+384),w
  8868  1D2E  1D03               	btfss	3,2
  8869  1D2F  2D34               	goto	i1l12962
  8870                           
  8871                           ;bldc.c: 1360: {
  8872                           ;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
  8873  1D30  19FA               	btfsc	_MotorFlags,3
  8874  1D31  0008               	return
  8875                           
  8876                           ;bldc.c: 1364: {
  8877                           ;bldc.c: 1378: commutate( );
  8878  1D32  2577               	fcall	i1_commutate
  8879  1D33  0008               	return
  8880  1D34                     i1l12962:	
  8881                           
  8882                           ;bldc.c: 1389: else
  8883                           ;bldc.c: 1390: {
  8884                           ;bldc.c: 1392: phase_delay_counter--;
  8885  1D34  30FF               	movlw	-1
  8886  1D35  07DA               	addwf	_phase_delay_counter^(0+384),f
  8887  1D36  1C03               	skipc
  8888  1D37  03DB               	decf	(_phase_delay_counter+1)^(0+384),f
  8889                           
  8890                           ;bldc.c: 1394: }
  8891                           ;bldc.c: 1398: }
  8892                           ;bldc.c: 1401: }
  8893  1D38  0008               	return
  8894  1D39                     i1l12964:	
  8895                           
  8896                           ;bldc.c: 1408: bemf_filter = 62;
  8897  1D39  03E2               	decf	_ui8_BlankingCount^(0+128),f
  8898  1D3A  0008               	return
  8899  1D3B                     __end_of_interrrupt_bldc:	
  8900  1D3B                     __ptext55:	
  8901 ;; *************** function i1_ADC_Wait *****************
  8902 ;; Defined at:
  8903 ;;		line 128 in file "../adc.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;		None
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;		None
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  1    wreg      void 
  8910 ;; Registers used:
  8911 ;;		None
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/1
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8917 ;;      Params:         0       0       0       0       0       0       0       0
  8918 ;;      Locals:         0       0       0       0       0       0       0       0
  8919 ;;      Temps:          0       0       0       0       0       0       0       0
  8920 ;;      Totals:         0       0       0       0       0       0       0       0
  8921 ;;Total ram usage:        0 bytes
  8922 ;; Hardware stack levels used:    1
  8923 ;; This function calls:
  8924 ;;		Nothing
  8925 ;; This function is called by:
  8926 ;;		_interrrupt_bldc
  8927 ;; This function uses a non-reentrant model
  8928 ;;
  8929                           
  8930                           
  8931                           ;psect for function i1_ADC_Wait
  8932  1D3B                     i1_ADC_Wait:	
  8933                           
  8934                           ;adc.c: 133: __nop();
  8935                           
  8936                           ;incstack = 0
  8937                           ; Regs used in i1_ADC_Wait: []
  8938  1D3B  0000               	nop
  8939                           
  8940                           ;adc.c: 134: __nop();
  8941  1D3C  0000               	nop
  8942                           
  8943                           ;adc.c: 135: __nop();
  8944  1D3D  0000               	nop
  8945                           
  8946                           ;adc.c: 136: __nop();
  8947  1D3E  0000               	nop
  8948                           
  8949                           ;adc.c: 137: __nop();
  8950  1D3F  0000               	nop
  8951                           
  8952                           ;adc.c: 138: __nop();
  8953  1D40  0000               	nop
  8954                           
  8955                           ;adc.c: 139: __nop();
  8956  1D41  0000               	nop
  8957                           
  8958                           ;adc.c: 140: __nop();
  8959  1D42  0000               	nop
  8960                           
  8961                           ;adc.c: 142: __nop();
  8962  1D43  0000               	nop
  8963                           
  8964                           ;adc.c: 143: __nop();
  8965  1D44  0000               	nop
  8966                           
  8967                           ;adc.c: 144: __nop();
  8968  1D45  0000               	nop
  8969                           
  8970                           ;adc.c: 145: __nop();
  8971  1D46  0000               	nop
  8972                           
  8973                           ;adc.c: 146: __nop();
  8974  1D47  0000               	nop
  8975                           
  8976                           ;adc.c: 147: __nop();
  8977  1D48  0000               	nop
  8978                           
  8979                           ;adc.c: 148: __nop();
  8980  1D49  0000               	nop
  8981                           
  8982                           ;adc.c: 149: __nop();
  8983  1D4A  0000               	nop
  8984                           
  8985                           ;adc.c: 151: __nop();
  8986  1D4B  0000               	nop
  8987                           
  8988                           ;adc.c: 152: __nop();
  8989  1D4C  0000               	nop
  8990                           
  8991                           ;adc.c: 153: __nop();
  8992  1D4D  0000               	nop
  8993                           
  8994                           ;adc.c: 154: __nop();
  8995  1D4E  0000               	nop
  8996                           
  8997                           ;adc.c: 155: __nop();
  8998  1D4F  0000               	nop
  8999                           
  9000                           ;adc.c: 156: __nop();
  9001  1D50  0000               	nop
  9002                           
  9003                           ;adc.c: 157: __nop();
  9004  1D51  0000               	nop
  9005                           
  9006                           ;adc.c: 158: __nop();
  9007  1D52  0000               	nop
  9008  1D53  0008               	return
  9009  1D54                     __end_ofi1_ADC_Wait:	
  9010  1D54                     __ptext56:	
  9011 ;; *************** function i1_ADC_Read *****************
  9012 ;; Defined at:
  9013 ;;		line 175 in file "../adc.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;		None
  9016 ;; Auto vars:     Size  Location     Type
  9017 ;;  ADC_Read        1    2[COMMON] unsigned char 
  9018 ;; Return value:  Size  Location     Type
  9019 ;;                  2    0[COMMON] unsigned int 
  9020 ;; Registers used:
  9021 ;;		wreg, status,2, status,0
  9022 ;; Tracked objects:
  9023 ;;		On entry : 1E/1
  9024 ;;		On exit  : 1F/1
  9025 ;;		Unchanged: 0/0
  9026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9027 ;;      Params:         2       0       0       0       0       0       0       0
  9028 ;;      Locals:         1       0       0       0       0       0       0       0
  9029 ;;      Temps:          0       0       0       0       0       0       0       0
  9030 ;;      Totals:         3       0       0       0       0       0       0       0
  9031 ;;Total ram usage:        3 bytes
  9032 ;; Hardware stack levels used:    1
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_interrrupt_bldc
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           
  9041                           ;psect for function i1_ADC_Read
  9042  1D54                     i1_ADC_Read:	
  9043                           
  9044                           ;adc.c: 179: unsigned char i;
  9045                           ;adc.c: 180: i = 0;
  9046                           
  9047                           ;incstack = 0
  9048                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
  9049  1D54  01F2               	clrf	i1ADC_Read@i
  9050  1D55                     i1l69:	
  9051                           ;adc.c: 182: while( GO_nDONE )
  9052                           
  9053  1D55  0021               	movlb	1	; select bank1
  9054  1D56  1C9D               	btfss	29,1	;volatile
  9055  1D57  2D5D               	goto	i1l12430
  9056  1D58  3041               	movlw	65
  9057                           
  9058                           ;adc.c: 184: {
  9059                           ;adc.c: 186: i++;
  9060  1D59  0AF2               	incf	i1ADC_Read@i,f
  9061                           
  9062                           ;adc.c: 189: if( i > 64 )
  9063  1D5A  0272               	subwf	i1ADC_Read@i,w
  9064  1D5B  1C03               	skipc
  9065  1D5C  2D55               	goto	i1l69
  9066  1D5D                     i1l12430:	
  9067                           
  9068                           ;adc.c: 195: }
  9069                           ;adc.c: 198: }
  9070                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  9071                           
  9072                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  9073                           
  9074                           ;adc.c: 204: return analog_value.w;
  9075  1D5D  27B0               	fcall	PL114	;call to abstracted procedure
  9076  1D5E  00F1               	movwf	?i1_ADC_Read+1
  9077  1D5F  083C               	movf	_analog_value^(0+128),w	;volatile
  9078  1D60  00F0               	movwf	?i1_ADC_Read
  9079  1D61  0008               	return
  9080  1D62                     __end_ofi1_ADC_Read:	
  9081  1D62                     __ptext53:	
  9082 ;; *************** function i1___wmul *****************
  9083 ;; Defined at:
  9084 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;  multiplier      2    0[COMMON] unsigned int 
  9087 ;;  multiplicand    2    2[COMMON] unsigned int 
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;  __wmul          2    4[COMMON] unsigned int 
  9090 ;; Return value:  Size  Location     Type
  9091 ;;                  2    0[COMMON] unsigned int 
  9092 ;; Registers used:
  9093 ;;		wreg, status,2, status,0
  9094 ;; Tracked objects:
  9095 ;;		On entry : 1E/1
  9096 ;;		On exit  : 1E/0
  9097 ;;		Unchanged: 1E/0
  9098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9099 ;;      Params:         4       0       0       0       0       0       0       0
  9100 ;;      Locals:         2       0       0       0       0       0       0       0
  9101 ;;      Temps:          0       0       0       0       0       0       0       0
  9102 ;;      Totals:         6       0       0       0       0       0       0       0
  9103 ;;Total ram usage:        6 bytes
  9104 ;; Hardware stack levels used:    1
  9105 ;; This function calls:
  9106 ;;		Nothing
  9107 ;; This function is called by:
  9108 ;;		i1_commutate
  9109 ;;		_interrrupt_bldc
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           
  9114                           ;psect for function i1___wmul
  9115  1D62                     i1___wmul:	
  9116                           
  9117                           ;incstack = 0
  9118                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  9119  1D62  01F4               	clrf	i1___wmul@product
  9120  1D63  01F5               	clrf	i1___wmul@product+1
  9121  1D64                     i1l12384:	
  9122  1D64  1C70               	btfss	i1___wmul@multiplier,0
  9123  1D65  2D6A               	goto	i1l12388
  9124  1D66  0872               	movf	i1___wmul@multiplicand,w
  9125  1D67  07F4               	addwf	i1___wmul@product,f
  9126  1D68  0873               	movf	i1___wmul@multiplicand+1,w
  9127  1D69  3DF5               	addwfc	i1___wmul@product+1,f
  9128  1D6A                     i1l12388:	
  9129  1D6A  35F2               	lslf	i1___wmul@multiplicand,f
  9130  1D6B  0DF3               	rlf	i1___wmul@multiplicand+1,f
  9131  1D6C  36F1               	lsrf	i1___wmul@multiplier+1,f
  9132  1D6D  0CF0               	rrf	i1___wmul@multiplier,f
  9133  1D6E  0870               	movf	i1___wmul@multiplier,w
  9134  1D6F  0471               	iorwf	i1___wmul@multiplier+1,w
  9135  1D70  1D03               	btfss	3,2
  9136  1D71  2D64               	goto	i1l12384
  9137  1D72  0875               	movf	i1___wmul@product+1,w
  9138  1D73  00F1               	movwf	?i1___wmul+1
  9139  1D74  0874               	movf	i1___wmul@product,w
  9140  1D75  00F0               	movwf	?i1___wmul
  9141  1D76  0008               	return
  9142  1D77                     __end_ofi1___wmul:	
  9143  1D77                     __ptext52:	
  9144 ;; *************** function i1_commutate *****************
  9145 ;; Defined at:
  9146 ;;		line 1426 in file "../bldc.c"
  9147 ;; Parameters:    Size  Location     Type
  9148 ;;		None
  9149 ;; Auto vars:     Size  Location     Type
  9150 ;;		None
  9151 ;; Return value:  Size  Location     Type
  9152 ;;                  1    wreg      void 
  9153 ;; Registers used:
  9154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9155 ;; Tracked objects:
  9156 ;;		On entry : 1E/2
  9157 ;;		On exit  : 1F/0
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9160 ;;      Params:         0       0       0       0       0       0       0       0
  9161 ;;      Locals:         0       0       0       0       0       0       0       0
  9162 ;;      Temps:          0      12       0       0       0       0       0       0
  9163 ;;      Totals:         0      12       0       0       0       0       0       0
  9164 ;;Total ram usage:       12 bytes
  9165 ;; Hardware stack levels used:    1
  9166 ;; Hardware stack levels required when called:    1
  9167 ;; This function calls:
  9168 ;;		i1___wmul
  9169 ;; This function is called by:
  9170 ;;		_interrrupt_bldc
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           
  9175                           ;psect for function i1_commutate
  9176  1D77                     i1_commutate:	
  9177                           
  9178                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  9179                           
  9180                           ;incstack = 0
  9181                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9182  1D77  3000               	movlw	0
  9183  1D78  0021               	movlb	1	; select bank1
  9184  1D79  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  9185  1D7A  300A               	movlw	10
  9186  1D7B  1903               	skipnz
  9187  1D7C  023A               	subwf	_ui16_step_cnt^(0+128),w
  9188  1D7D  1803               	skipnc
  9189  1D7E  2D82               	goto	i1l12438
  9190                           
  9191                           ;bldc.c: 1433: {
  9192                           ;bldc.c: 1435: ui16_step_cnt++;
  9193  1D7F  0ABA               	incf	_ui16_step_cnt^(0+128),f
  9194  1D80  1903               	skipnz
  9195  1D81  0ABB               	incf	(_ui16_step_cnt+1)^(0+128),f
  9196  1D82                     i1l12438:	
  9197                           
  9198                           ;bldc.c: 1437: }
  9199                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  9200                           
  9201                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  9202                           
  9203                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  9204  1D82  26D0  319A         	fcall	PL16	;call to abstracted procedure
  9205  1D84  00A0               	movwf	??i1_commutate
  9206  1D85  0023               	movlb	3	; select bank3
  9207  1D86  0825               	movf	((_B+1)^(0+384)+4),w
  9208  1D87  3D23               	addwfc	((_B+1)^(0+384)+2),w
  9209  1D88  0020               	movlb	0	; select bank0
  9210  1D89  00A1               	movwf	??i1_commutate+1
  9211  1D8A  0023               	movlb	3	; select bank3
  9212  1D8B  0826               	movf	(_B^(0+384)+6),w
  9213  1D8C  0020               	movlb	0	; select bank0
  9214  1D8D  0720               	addwf	??i1_commutate,w
  9215  1D8E  00A2               	movwf	??i1_commutate+2
  9216  1D8F  0023               	movlb	3	; select bank3
  9217  1D90  0827               	movf	((_B+1)^(0+384)+6),w
  9218  1D91  0020               	movlb	0	; select bank0
  9219  1D92  3D21               	addwfc	??i1_commutate+1,w
  9220  1D93  00A3               	movwf	??i1_commutate+3
  9221  1D94  0023               	movlb	3	; select bank3
  9222  1D95  0828               	movf	(_B^(0+384)+8),w
  9223  1D96  0020               	movlb	0	; select bank0
  9224  1D97  0722               	addwf	??i1_commutate+2,w
  9225  1D98  00A4               	movwf	??i1_commutate+4
  9226  1D99  0023               	movlb	3	; select bank3
  9227  1D9A  0829               	movf	((_B+1)^(0+384)+8),w
  9228  1D9B  0020               	movlb	0	; select bank0
  9229  1D9C  3D23               	addwfc	??i1_commutate+3,w
  9230  1D9D  00A5               	movwf	??i1_commutate+5
  9231  1D9E  0023               	movlb	3	; select bank3
  9232  1D9F  082A               	movf	(_B^(0+384)+10),w
  9233  1DA0  0020               	movlb	0	; select bank0
  9234  1DA1  0724               	addwf	??i1_commutate+4,w
  9235  1DA2  00A6               	movwf	??i1_commutate+6
  9236  1DA3  0023               	movlb	3	; select bank3
  9237  1DA4  082B               	movf	((_B+1)^(0+384)+10),w
  9238  1DA5  0020               	movlb	0	; select bank0
  9239  1DA6  3D25               	addwfc	??i1_commutate+5,w
  9240  1DA7  00A7               	movwf	??i1_commutate+7
  9241  1DA8  3F00               	moviw [0]fsr0
  9242  1DA9  0726               	addwf	??i1_commutate+6,w
  9243  1DAA  00A8               	movwf	??i1_commutate+8
  9244  1DAB  3F01               	moviw [1]fsr0
  9245  1DAC  3D27               	addwfc	??i1_commutate+7,w
  9246  1DAD  00A9               	movwf	??i1_commutate+9
  9247  1DAE  3F40               	moviw [0]fsr1
  9248  1DAF  0728               	addwf	??i1_commutate+8,w
  9249  1DB0  00AA               	movwf	??i1_commutate+10
  9250  1DB1  3F41               	moviw [1]fsr1
  9251  1DB2  3D29               	addwfc	??i1_commutate+9,w
  9252  1DB3  00AB               	movwf	??i1_commutate+11
  9253  1DB4  0023               	movlb	3	; select bank3
  9254  1DB5  0820               	movf	_B^(0+384),w
  9255  1DB6  0020               	movlb	0	; select bank0
  9256  1DB7  072A               	addwf	??i1_commutate+10,w
  9257  1DB8  279E  319A         	fcall	PL98	;call to abstracted procedure
  9258  1DBA  3D2B               	addwfc	??i1_commutate+11,w
  9259                           
  9260                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  9261                           
  9262                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  9263                           
  9264                           ;bldc.c: 1455: bemf_filter = 62;
  9265                           
  9266                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  9267  1DBB  2758  319A         	fcall	PL46	;call to abstracted procedure
  9268                           
  9269                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  9270  1DBD  1DFA               	btfss	_MotorFlags,3
  9271  1DBE  2E1F               	goto	i1l327
  9272                           
  9273                           ;bldc.c: 1463: {
  9274                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 100 )>>7;
  9275  1DBF  0022               	movlb	2	; select bank2
  9276  1DC0  0830               	movf	(_ui16_speed_rar+1)^(0+256),w
  9277  1DC1  0020               	movlb	0	; select bank0
  9278  1DC2  00A1               	movwf	??i1_commutate+1
  9279  1DC3  0022               	movlb	2	; select bank2
  9280  1DC4  082F               	movf	_ui16_speed_rar^(0+256),w
  9281  1DC5  0020               	movlb	0	; select bank0
  9282  1DC6  00A0               	movwf	??i1_commutate
  9283  1DC7  36A1               	lsrf	??i1_commutate+1,f
  9284  1DC8  0CA0               	rrf	??i1_commutate,f
  9285  1DC9  36A1               	lsrf	??i1_commutate+1,f
  9286  1DCA  0CA0               	rrf	??i1_commutate,f
  9287  1DCB  36A1               	lsrf	??i1_commutate+1,f
  9288  1DCC  0CA0               	rrf	??i1_commutate,f
  9289  1DCD  0820               	movf	??i1_commutate,w
  9290  1DCE  00F0               	movwf	i1___wmul@multiplier
  9291  1DCF  0821               	movf	??i1_commutate+1,w
  9292  1DD0  00F1               	movwf	i1___wmul@multiplier+1
  9293  1DD1  3064               	movlw	100
  9294  1DD2  00F2               	movwf	i1___wmul@multiplicand
  9295  1DD3  01F3               	clrf	i1___wmul@multiplicand+1
  9296  1DD4  2562  319A         	fcall	i1___wmul
  9297  1DD6  0871               	movf	?i1___wmul+1,w
  9298  1DD7  0021               	movlb	1	; select bank1
  9299  1DD8  00B9               	movwf	(_ui16_phase_advancement+1)^(0+128)
  9300  1DD9  0870               	movf	?i1___wmul,w
  9301  1DDA  00B8               	movwf	_ui16_phase_advancement^(0+128)
  9302  1DDB  3007               	movlw	7
  9303  1DDC                     u1073_25:	
  9304  1DDC  36B9               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
  9305  1DDD  0CB8               	rrf	_ui16_phase_advancement^(0+128),f
  9306  1DDE  0B89               	decfsz	9,f
  9307  1DDF  2DDC               	goto	u1073_25
  9308                           
  9309                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  9310  1DE0  0020               	movlb	0	; select bank0
  9311  1DE1  0851               	movf	_comm_time+1,w
  9312  1DE2  0021               	movlb	1	; select bank1
  9313  1DE3  0239               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  9314  1DE4  1D03               	skipz
  9315  1DE5  2DE8               	goto	u1074_25
  9316  1DE6  27CA  319A         	fcall	PL128	;call to abstracted procedure
  9317  1DE8                     u1074_25:	
  9318  1DE8  1803               	skipnc
  9319  1DE9  2DED               	goto	i1l12464
  9320                           
  9321                           ;bldc.c: 1474: {
  9322                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
  9323  1DEA  26E9  319A         	fcall	PL32	;call to abstracted procedure
  9324                           
  9325                           ;bldc.c: 1478: }
  9326  1DEC  2E01               	goto	i1l12488
  9327  1DED                     i1l12464:	
  9328                           
  9329                           ;bldc.c: 1481: else
  9330                           ;bldc.c: 1482: {
  9331                           ;bldc.c: 1484: phase_delay_counter = 0;
  9332  1DED  0023               	movlb	3	; select bank3
  9333  1DEE  01DA               	clrf	_phase_delay_counter^(0+384)
  9334  1DEF  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  9335  1DF0  2E01               	goto	i1l12488
  9336  1DF1                     i1l12466:	
  9337                           
  9338                           ;bldc.c: 1514: {
  9339                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
  9340  1DF1  30A6               	movlw	166
  9341  1DF2  2DFD               	goto	L56
  9342  1DF3                     i1l12468:	
  9343                           ;bldc.c: 1517: break;
  9344                           
  9345                           
  9346                           ;bldc.c: 1524: {
  9347                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
  9348  1DF3  27A4  319A         	fcall	PL100	;call to abstracted procedure
  9349                           
  9350                           ;bldc.c: 1527: break;
  9351  1DF5  2E0F               	goto	i1l12490
  9352  1DF6                     i1l12470:	
  9353                           
  9354                           ;bldc.c: 1534: {
  9355                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
  9356  1DF6  307D               	movlw	125
  9357  1DF7  2DFD               	goto	L56
  9358  1DF8                     i1l12472:	
  9359                           ;bldc.c: 1537: break;
  9360                           
  9361                           
  9362                           ;bldc.c: 1544: {
  9363                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
  9364  1DF8  3053               	movlw	83
  9365  1DF9  2DFD               	goto	L56
  9366  1DFA                     i1l12474:	
  9367                           ;bldc.c: 1547: break;
  9368                           
  9369                           
  9370                           ;bldc.c: 1554: {
  9371                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2400 * 2 )
      +                           ) ;
  9372  1DFA  3029               	movlw	41
  9373  1DFB  2DFD               	goto	L56
  9374  1DFC                     i1l12476:	
  9375                           ;bldc.c: 1557: break;
  9376                           
  9377                           
  9378                           ;bldc.c: 1564: {
  9379                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           ) ;
  9380  1DFC  3021               	movlw	33
  9381  1DFD                     L56:	
  9382  1DFD  0022               	movlb	2	; select bank2
  9383  1DFE  00AD               	movwf	_ui16_comm_time_max^(0+256)
  9384  1DFF  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  9385                           
  9386                           ;bldc.c: 1567: break;
  9387  1E00  2E0F               	goto	i1l12490
  9388  1E01                     i1l12488:	
  9389                           
  9390                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9391                           ; Switch size 1, requested type "space"
  9392                           ; Number of cases is 1, Range of values is 0 to 0
  9393                           ; switch strategies available:
  9394                           ; Name         Instructions Cycles
  9395                           ; simple_byte            4     3 (average)
  9396                           ; direct_byte            8     6 (fixed)
  9397                           ; jumptable            260     6 (fixed)
  9398                           ;	Chosen strategy is simple_byte
  9399  1E01  0021               	movlb	1	; select bank1
  9400  1E02  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
  9401  1E03  3A00               	xorlw	0	; case 0
  9402  1E04  1903               	skipnz
  9403  1E05  2E07               	goto	i1l13836
  9404  1E06  2DFC               	goto	i1l12476
  9405  1E07                     i1l13836:	
  9406                           
  9407                           ; Switch size 1, requested type "space"
  9408                           ; Number of cases is 10, Range of values is 0 to 9
  9409                           ; switch strategies available:
  9410                           ; Name         Instructions Cycles
  9411                           ; direct_byte           26     6 (fixed)
  9412                           ; simple_byte           31    16 (average)
  9413                           ; jumptable            260     6 (fixed)
  9414                           ;	Chosen strategy is direct_byte
  9415  1E07  27CF  319A         	fcall	PL130	;call to abstracted procedure
  9416  1E09  1803               	skipnc
  9417  1E0A  2DFC               	goto	i1l12476
  9418  1E0B  3187               	movlp	high i1S13838
  9419  1E0C  3504               	lslf	4,w
  9420  1E0D  3E39               	addlw	low i1S13838
  9421  1E0E  0082               	movwf	2
  9422  1E0F                     i1l12490:	
  9423                           
  9424                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 *
      +                           2 ) ) )
  9425  1E0F  3000               	movlw	0
  9426  1E10  022E               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  9427  1E11  3021               	movlw	33
  9428  1E12  1903               	skipnz
  9429  1E13  022D               	subwf	_ui16_comm_time_max^(0+256),w
  9430  1E14  1803               	skipnc
  9431  1E15  2E19               	goto	i1l12494
  9432                           
  9433                           ;bldc.c: 1626: {
  9434                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  9435  1E16  3021               	movlw	33
  9436  1E17  00AD               	movwf	_ui16_comm_time_max^(0+256)
  9437  1E18  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
  9438  1E19                     i1l12494:	
  9439                           
  9440                           ;bldc.c: 1630: }
  9441                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
  9442  1E19  1E7A               	btfss	_MotorFlags,4
  9443  1E1A  2E4E               	goto	i1l345
  9444                           
  9445                           ;bldc.c: 1636: {
  9446                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
  9447  1E1B  300A               	movlw	10
  9448  1E1C  0021               	movlb	1	; select bank1
  9449  1E1D  00E4               	movwf	_ui8_StartupPWM^(0+128)
  9450                           
  9451                           ;bldc.c: 1641: }
  9452                           ;bldc.c: 1644: }
  9453  1E1E  2E4E               	goto	i1l345
  9454  1E1F                     i1l327:	
  9455                           
  9456                           ;bldc.c: 1647: else
  9457                           ;bldc.c: 1648: {
  9458                           ;bldc.c: 1652: if( rising_bemf_flag)
  9459  1E1F  1C79               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9460  1E20  2E25               	goto	i1l12500
  9461                           
  9462                           ;bldc.c: 1654: {
  9463                           ;bldc.c: 1657: phase_delay_counter = 0;
  9464  1E21  0023               	movlb	3	; select bank3
  9465  1E22  01DA               	clrf	_phase_delay_counter^(0+384)
  9466  1E23  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
  9467                           
  9468                           ;bldc.c: 1659: }
  9469  1E24  2E33               	goto	i1l12502
  9470  1E25                     i1l12500:	
  9471                           
  9472                           ;bldc.c: 1662: else
  9473                           ;bldc.c: 1663: {
  9474                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  9475  1E25  0020               	movlb	0	; select bank0
  9476  1E26  0851               	movf	_comm_time+1,w
  9477  1E27  00A1               	movwf	??i1_commutate+1
  9478  1E28  0850               	movf	_comm_time,w
  9479  1E29  00A0               	movwf	??i1_commutate
  9480  1E2A  36A1               	lsrf	??i1_commutate+1,f
  9481  1E2B  0CA0               	rrf	??i1_commutate,f
  9482  1E2C  0820               	movf	??i1_commutate,w
  9483  1E2D  0023               	movlb	3	; select bank3
  9484  1E2E  00DA               	movwf	_phase_delay_counter^(0+384)
  9485  1E2F  0020               	movlb	0	; select bank0
  9486  1E30  0821               	movf	??i1_commutate+1,w
  9487  1E31  0023               	movlb	3	; select bank3
  9488  1E32  00DB               	movwf	(_phase_delay_counter+1)^(0+384)
  9489  1E33                     i1l12502:	
  9490                           
  9491                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  9492                           
  9493                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  9494  1E33  2797  319A         	fcall	PL96	;call to abstracted procedure
  9495                           
  9496                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  9497  1E35  1F7A               	btfss	_MotorFlags,6
  9498  1E36  2E4C               	goto	i1l12526
  9499                           
  9500                           ;bldc.c: 1693: {
  9501                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  9502  1E37  27C5  319A         	fcall	PL126	;call to abstracted procedure
  9503  1E39  1903               	btfsc	3,2
  9504  1E3A  2E4E               	goto	i1l345
  9505                           
  9506                           ;bldc.c: 1706: else
  9507                           ;bldc.c: 1707: {
  9508                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  9509  1E3B  27BB  319A         	fcall	PL122	;call to abstracted procedure
  9510  1E3D  1803               	skipnc
  9511  1E3E  2E46               	goto	i1l12520
  9512                           
  9513                           ;bldc.c: 1712: {
  9514                           ;bldc.c: 1714: CCPR1L--;
  9515                           
  9516                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  9517  1E3F  27AA  319A         	fcall	PL108	;call to abstracted procedure
  9518  1E41  1803               	skipnc
  9519  1E42  2E4E               	goto	i1l345
  9520                           
  9521                           ;bldc.c: 1718: {
  9522                           ;bldc.c: 1720: CCPR1L--;
  9523  1E43  0025               	movlb	5	; select bank5
  9524  1E44  0391               	decf	17,f	;volatile
  9525  1E45  2E4E               	goto	i1l345
  9526  1E46                     i1l12520:	
  9527                           
  9528                           ;bldc.c: 1728: else
  9529                           ;bldc.c: 1729: {
  9530                           ;bldc.c: 1731: CCPR1L++;
  9531                           
  9532                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  9533  1E46  278A  319A         	fcall	PL88	;call to abstracted procedure
  9534  1E48  1803               	skipnc
  9535  1E49  2E4E               	goto	i1l345
  9536                           
  9537                           ;bldc.c: 1735: {
  9538                           ;bldc.c: 1737: CCPR1L++;
  9539  1E4A  0A91               	incf	17,f	;volatile
  9540  1E4B  2E4E               	goto	i1l345
  9541  1E4C                     i1l12526:	
  9542                           
  9543                           ;bldc.c: 1768: else
  9544                           ;bldc.c: 1769: {
  9545                           ;bldc.c: 1771: CCPR1L = 0;
  9546  1E4C  0025               	movlb	5	; select bank5
  9547  1E4D  0191               	clrf	17	;volatile
  9548  1E4E                     i1l345:	
  9549                           
  9550                           ;bldc.c: 1773: }
  9551                           ;bldc.c: 1777: }
  9552                           ;bldc.c: 1780: comm_time = 0;
  9553                           
  9554                           ;bldc.c: 1784: if( comm_state == 0xff )
  9555  1E4E  27B6  319A         	fcall	PL118	;call to abstracted procedure
  9556  1E50  0F63               	incfsz	_comm_state^(0+128),w
  9557  1E51  2E9A               	goto	i1l12676
  9558                           
  9559                           ;bldc.c: 1786: {
  9560                           ;bldc.c: 1788: comm_state = 6;
  9561  1E52  3006               	movlw	6
  9562  1E53  00E3               	movwf	_comm_state^(0+128)
  9563  1E54  2E9A               	goto	i1l12676
  9564  1E55                     i1l12532:	
  9565                           
  9566                           ;bldc.c: 1800: {
  9567                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
  9568  1E55  3001               	movlw	1
  9569  1E56  0025               	movlb	5	; select bank5
  9570  1E57  0096               	movwf	22	;volatile
  9571                           
  9572                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  9573  1E58  1F7A               	btfss	_MotorFlags,6
  9574  1E59  2E5C               	goto	i1l12538
  9575                           
  9576                           ;bldc.c: 1811: {
  9577                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9578  1E5A  2778  319A         	fcall	PL70	;call to abstracted procedure
  9579  1E5C                     i1l12538:	
  9580                           
  9581                           ;bldc.c: 1815: }
  9582                           ;bldc.c: 1819: LATB2 = 0;
  9583                           
  9584                           ;bldc.c: 1820: LATB1 = 0;
  9585                           
  9586                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9587                           
  9588                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9589                           
  9590                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9591                           
  9592                           ;bldc.c: 1824: CM1CON1 = 0x02;
  9593                           
  9594                           ;bldc.c: 1837: CM1CON0 = 0x84;
  9595  1E5C  26FA  319A         	fcall	PL34	;call to abstracted procedure
  9596  1E5E  2E88               	goto	L62
  9597  1E5F                     i1l12556:	
  9598                           ;bldc.c: 1845: break;
  9599                           
  9600                           ;bldc.c: 1839: comm_state = 6;
  9601                           
  9602                           ;bldc.c: 1838: rising_bemf_flag = 1;
  9603                           
  9604                           
  9605                           ;bldc.c: 1855: {
  9606                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
  9607  1E5F  3001               	movlw	1
  9608  1E60  0025               	movlb	5	; select bank5
  9609  1E61  0096               	movwf	22	;volatile
  9610                           
  9611                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  9612  1E62  1F7A               	btfss	_MotorFlags,6
  9613  1E63  2E66               	goto	i1l12562
  9614                           
  9615                           ;bldc.c: 1865: {
  9616                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9617  1E64  277E  319A         	fcall	PL74	;call to abstracted procedure
  9618  1E66                     i1l12562:	
  9619                           
  9620                           ;bldc.c: 1869: }
  9621                           ;bldc.c: 1873: LATB2 = 1;
  9622                           
  9623                           ;bldc.c: 1874: LATB1 = 0;
  9624                           
  9625                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9626                           
  9627                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9628                           
  9629                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9630                           
  9631                           ;bldc.c: 1878: CM1CON1 = 0x01;
  9632                           
  9633                           ;bldc.c: 1892: CM1CON0 = 0x94;
  9634  1E66  2748  319A         	fcall	PL44	;call to abstracted procedure
  9635  1E68                     i1l12576:	
  9636                           
  9637                           ;bldc.c: 1893: rising_bemf_flag = 0;
  9638                           
  9639                           ;bldc.c: 1894: comm_state = 1;
  9640  1E68  27C0  319A         	fcall	PL124	;call to abstracted procedure
  9641                           
  9642                           ;bldc.c: 1902: break;
  9643  1E6A  2EAE               	goto	i1l12678
  9644  1E6B                     i1l12580:	
  9645                           
  9646                           ;bldc.c: 1912: {
  9647                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
  9648  1E6B  3002               	movlw	2
  9649  1E6C  0025               	movlb	5	; select bank5
  9650  1E6D  0096               	movwf	22	;volatile
  9651                           
  9652                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  9653  1E6E  1F7A               	btfss	_MotorFlags,6
  9654  1E6F  2E72               	goto	i1l12586
  9655                           
  9656                           ;bldc.c: 1922: {
  9657                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9658  1E70  2772  319A         	fcall	PL66	;call to abstracted procedure
  9659  1E72                     i1l12586:	
  9660                           
  9661                           ;bldc.c: 1926: }
  9662                           ;bldc.c: 1929: LATC2 = 0;
  9663                           
  9664                           ;bldc.c: 1931: LATB1 = 0;
  9665                           
  9666                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9667                           
  9668                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9669                           
  9670                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9671                           
  9672                           ;bldc.c: 1935: CM1CON1 = 0x00;
  9673                           
  9674                           ;bldc.c: 1949: CM1CON0 = 0x84;
  9675  1E72  272A  319A         	fcall	PL40	;call to abstracted procedure
  9676  1E74  2E88               	goto	L62
  9677  1E75                     i1l12600:	
  9678                           ;bldc.c: 1956: break;
  9679                           
  9680                           ;bldc.c: 1951: comm_state = 2;
  9681                           
  9682                           ;bldc.c: 1950: rising_bemf_flag = 1;
  9683                           
  9684                           
  9685                           ;bldc.c: 1966: {
  9686                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
  9687  1E75  3002               	movlw	2
  9688  1E76  0025               	movlb	5	; select bank5
  9689  1E77  0096               	movwf	22	;volatile
  9690                           
  9691                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  9692  1E78  1F7A               	btfss	_MotorFlags,6
  9693  1E79  2E7C               	goto	i1l12606
  9694                           
  9695                           ;bldc.c: 1977: {
  9696                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9697  1E7A  2778  319A         	fcall	PL70	;call to abstracted procedure
  9698  1E7C                     i1l12606:	
  9699                           
  9700                           ;bldc.c: 1981: }
  9701                           ;bldc.c: 1984: LATC2 = 0;
  9702                           
  9703                           ;bldc.c: 1986: LATB1 = 1;
  9704                           
  9705                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9706                           
  9707                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9708                           
  9709                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9710                           
  9711                           ;bldc.c: 1990: CM1CON1 = 0x02;
  9712                           
  9713                           ;bldc.c: 2004: CM1CON0 = 0x94;
  9714  1E7C  271A  319A         	fcall	PL38	;call to abstracted procedure
  9715  1E7E  2E93               	goto	L63
  9716  1E7F                     i1l12624:	
  9717                           ;bldc.c: 2011: break;
  9718                           
  9719                           ;bldc.c: 2006: comm_state = 3;
  9720                           
  9721                           ;bldc.c: 2005: rising_bemf_flag = 0;
  9722                           
  9723                           
  9724                           ;bldc.c: 2020: {
  9725                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
  9726  1E7F  3004               	movlw	4
  9727  1E80  0025               	movlb	5	; select bank5
  9728  1E81  0096               	movwf	22	;volatile
  9729                           
  9730                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  9731  1E82  1F7A               	btfss	_MotorFlags,6
  9732  1E83  2E86               	goto	i1l12630
  9733                           
  9734                           ;bldc.c: 2031: {
  9735                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9736  1E84  277E  319A         	fcall	PL74	;call to abstracted procedure
  9737  1E86                     i1l12630:	
  9738                           
  9739                           ;bldc.c: 2035: }
  9740                           ;bldc.c: 2038: LATC2 = 0;
  9741                           
  9742                           ;bldc.c: 2039: LATB2 = 0;
  9743                           
  9744                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9745                           
  9746                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9747                           
  9748                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9749                           
  9750                           ;bldc.c: 2044: CM1CON1 = 0x01;
  9751                           
  9752                           ;bldc.c: 2059: CM1CON0 = 0x84;
  9753  1E86  270A  319A         	fcall	PL36	;call to abstracted procedure
  9754  1E88                     L62:	
  9755                           
  9756                           ;bldc.c: 2060: rising_bemf_flag = 1;
  9757  1E88  1479               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9758                           
  9759                           ;bldc.c: 2061: comm_state = 4;
  9760  1E89  2E94               	goto	L60
  9761  1E8A                     i1l12648:	
  9762                           ;bldc.c: 2066: break;
  9763                           
  9764                           
  9765                           ;bldc.c: 2076: {
  9766                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
  9767  1E8A  3004               	movlw	4
  9768  1E8B  0025               	movlb	5	; select bank5
  9769  1E8C  0096               	movwf	22	;volatile
  9770                           
  9771                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  9772  1E8D  1F7A               	btfss	_MotorFlags,6
  9773  1E8E  2E91               	goto	i1l12654
  9774                           
  9775                           ;bldc.c: 2086: {
  9776                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9777  1E8F  2772  319A         	fcall	PL66	;call to abstracted procedure
  9778  1E91                     i1l12654:	
  9779                           
  9780                           ;bldc.c: 2090: }
  9781                           ;bldc.c: 2093: LATC2 = 1;
  9782                           
  9783                           ;bldc.c: 2094: LATB2 = 0;
  9784                           
  9785                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9786                           
  9787                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9788                           
  9789                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9790                           
  9791                           ;bldc.c: 2099: CM1CON1 = 0x00;
  9792                           
  9793                           ;bldc.c: 2113: CM1CON0 = 0x94;
  9794  1E91  2739  319A         	fcall	PL42	;call to abstracted procedure
  9795  1E93                     L63:	
  9796                           
  9797                           ;bldc.c: 2114: rising_bemf_flag = 0;
  9798  1E93  1079               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9799  1E94                     L60:	
  9800                           
  9801                           ;bldc.c: 2115: comm_state = 5;
  9802  1E94  0021               	movlb	1	; select bank1
  9803  1E95  00E3               	movwf	_comm_state^(0+128)
  9804                           
  9805                           ;bldc.c: 2120: break;
  9806  1E96  2EAE               	goto	i1l12678
  9807  1E97                     i1l12668:	
  9808                           
  9809                           ;bldc.c: 2129: {
  9810                           ;bldc.c: 2131: PSTR1CON = 0x00;
  9811                           
  9812                           ;bldc.c: 2132: CM1CON0 = 0x00;
  9813  1E97  27D4  319A         	fcall	PL132	;call to abstracted procedure
  9814  1E99  2E68               	goto	i1l12576
  9815  1E9A                     i1l12676:	
  9816  1E9A  0863               	movf	_comm_state^(0+128),w
  9817                           
  9818                           ; Switch size 1, requested type "space"
  9819                           ; Number of cases is 6, Range of values is 1 to 6
  9820                           ; switch strategies available:
  9821                           ; Name         Instructions Cycles
  9822                           ; simple_byte           19    10 (average)
  9823                           ; direct_byte           21     9 (fixed)
  9824                           ; jumptable            263     9 (fixed)
  9825                           ;	Chosen strategy is simple_byte
  9826  1E9B  3A01               	xorlw	1	; case 1
  9827  1E9C  1903               	skipnz
  9828  1E9D  2E55               	goto	i1l12532
  9829  1E9E  3A03               	xorlw	3	; case 2
  9830  1E9F  1903               	skipnz
  9831  1EA0  2E5F               	goto	i1l12556
  9832  1EA1  3A01               	xorlw	1	; case 3
  9833  1EA2  1903               	skipnz
  9834  1EA3  2E6B               	goto	i1l12580
  9835  1EA4  3A07               	xorlw	7	; case 4
  9836  1EA5  1903               	skipnz
  9837  1EA6  2E75               	goto	i1l12600
  9838  1EA7  3A01               	xorlw	1	; case 5
  9839  1EA8  1903               	skipnz
  9840  1EA9  2E7F               	goto	i1l12624
  9841  1EAA  3A03               	xorlw	3	; case 6
  9842  1EAB  1903               	skipnz
  9843  1EAC  2E8A               	goto	i1l12648
  9844  1EAD  2E97               	goto	i1l12668
  9845  1EAE                     i1l12678:	
  9846                           
  9847                           ;bldc.c: 2146: {
  9848                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  9849                           
  9850                           ;bldc.c: 2158: }
  9851                           ;bldc.c: 2161: comm_time = 0;
  9852                           
  9853                           ;bldc.c: 2150: }
  9854  1EAE  2F91               	ljmp	PL90	;call to abstracted procedure
  9855  1EAF                     __end_ofi1_commutate:	
  9856  1EAF                     __ptext57:	
  9857 ;; *************** function _BLDCWait *****************
  9858 ;; Defined at:
  9859 ;;		line 156 in file "../bldc.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;		None
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;		None
  9864 ;; Return value:  Size  Location     Type
  9865 ;;                  1    wreg      void 
  9866 ;; Registers used:
  9867 ;;		None
  9868 ;; Tracked objects:
  9869 ;;		On entry : 1F/1
  9870 ;;		On exit  : 0/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9873 ;;      Params:         0       0       0       0       0       0       0       0
  9874 ;;      Locals:         0       0       0       0       0       0       0       0
  9875 ;;      Temps:          0       0       0       0       0       0       0       0
  9876 ;;      Totals:         0       0       0       0       0       0       0       0
  9877 ;;Total ram usage:        0 bytes
  9878 ;; Hardware stack levels used:    1
  9879 ;; This function calls:
  9880 ;;		Nothing
  9881 ;; This function is called by:
  9882 ;;		_interrrupt_bldc
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           
  9887                           ;psect for function _BLDCWait
  9888  1EAF                     _BLDCWait:	
  9889                           
  9890                           ;bldc.c: 161: __nop();
  9891                           
  9892                           ;incstack = 0
  9893                           ; Regs used in _BLDCWait: []
  9894  1EAF  0000               	nop
  9895                           
  9896                           ;bldc.c: 162: __nop();
  9897  1EB0  0000               	nop
  9898                           
  9899                           ;bldc.c: 163: __nop();
  9900  1EB1  0000               	nop
  9901                           
  9902                           ;bldc.c: 164: __nop();
  9903  1EB2  0000               	nop
  9904                           
  9905                           ;bldc.c: 165: __nop();
  9906  1EB3  0000               	nop
  9907                           
  9908                           ;bldc.c: 166: __nop();
  9909  1EB4  0000               	nop
  9910                           
  9911                           ;bldc.c: 167: __nop();
  9912  1EB5  0000               	nop
  9913                           
  9914                           ;bldc.c: 168: __nop();
  9915  1EB6  0000               	nop
  9916                           
  9917                           ;bldc.c: 170: __nop();
  9918  1EB7  0000               	nop
  9919                           
  9920                           ;bldc.c: 171: __nop();
  9921  1EB8  0000               	nop
  9922                           
  9923                           ;bldc.c: 172: __nop();
  9924  1EB9  0000               	nop
  9925                           
  9926                           ;bldc.c: 173: __nop();
  9927  1EBA  0000               	nop
  9928                           
  9929                           ;bldc.c: 174: __nop();
  9930  1EBB  0000               	nop
  9931                           
  9932                           ;bldc.c: 175: __nop();
  9933  1EBC  0000               	nop
  9934                           
  9935                           ;bldc.c: 176: __nop();
  9936  1EBD  0000               	nop
  9937                           
  9938                           ;bldc.c: 177: __nop();
  9939  1EBE  0000               	nop
  9940                           
  9941                           ;bldc.c: 179: __nop();
  9942  1EBF  0000               	nop
  9943                           
  9944                           ;bldc.c: 180: __nop();
  9945  1EC0  0000               	nop
  9946                           
  9947                           ;bldc.c: 181: __nop();
  9948  1EC1  0000               	nop
  9949                           
  9950                           ;bldc.c: 182: __nop();
  9951  1EC2  0000               	nop
  9952                           
  9953                           ;bldc.c: 183: __nop();
  9954  1EC3  0000               	nop
  9955                           
  9956                           ;bldc.c: 184: __nop();
  9957  1EC4  0000               	nop
  9958                           
  9959                           ;bldc.c: 185: __nop();
  9960  1EC5  0000               	nop
  9961                           
  9962                           ;bldc.c: 186: __nop();
  9963  1EC6  0000               	nop
  9964                           
  9965                           ;bldc.c: 188: __nop();
  9966  1EC7  0000               	nop
  9967                           
  9968                           ;bldc.c: 189: __nop();
  9969  1EC8  0000               	nop
  9970                           
  9971                           ;bldc.c: 190: __nop();
  9972  1EC9  0000               	nop
  9973                           
  9974                           ;bldc.c: 191: __nop();
  9975  1ECA  0000               	nop
  9976                           
  9977                           ;bldc.c: 192: __nop();
  9978  1ECB  0000               	nop
  9979                           
  9980                           ;bldc.c: 193: __nop();
  9981  1ECC  0000               	nop
  9982                           
  9983                           ;bldc.c: 194: __nop();
  9984  1ECD  0000               	nop
  9985                           
  9986                           ;bldc.c: 195: __nop();
  9987  1ECE  0000               	nop
  9988  1ECF  0008               	return
  9989  1ED0                     __end_of_BLDCWait:	
  9990  1ED0                     PL16:	
  9991  1ED0  355C               	lslf	_Bcnt^(0+128),w
  9992  1ED1  3EA0               	addlw	(low (_B| (0+256)))& (0+255)
  9993  1ED2  0086               	movwf	6
  9994  1ED3  3001               	movlw	1	; select bank3/4
  9995  1ED4  0087               	movwf	7
  9996  1ED5  0020               	movlb	0	; select bank0
  9997  1ED6  0850               	movf	_comm_time,w
  9998  1ED7  3FC0               	movwi [0]fsr1
  9999  1ED8  0851               	movf	_comm_time+1,w
 10000  1ED9  3FC1               	movwi [1]fsr1
 10001  1EDA  0021               	movlb	1	; select bank1
 10002  1EDB  3007               	movlw	7
 10003  1EDC  0ADC               	incf	_Bcnt^(0+128),f
 10004  1EDD  05DC               	andwf	_Bcnt^(0+128),f
 10005  1EDE  30AE               	movlw	((low (_B| (0+256)))& (0+255)+14)
 10006  1EDF  0086               	movwf	6
 10007  1EE0  30AC               	movlw	((low (_B| (0+256)))& (0+255)+12)
 10008  1EE1  0084               	movwf	4
 10009  1EE2  3001               	movlw	1	; select bank3/4
 10010  1EE3  0085               	movwf	5
 10011  1EE4  0023               	movlb	3	; select bank3
 10012  1EE5  0824               	movf	(_B^(0+384)+4),w
 10013  1EE6  0722               	addwf	(_B^(0+384)+2),w
 10014  1EE7  0020               	movlb	0	; select bank0
 10015  1EE8  0008               	return
 10016  1EE9                     __end_ofPL16:	
 10017  1EE9                     PL32:	
 10018  1EE9  0020               	movlb	0	; select bank0
 10019  1EEA  0851               	movf	_comm_time+1,w
 10020  1EEB  0023               	movlb	3	; select bank3
 10021  1EEC  00DB               	movwf	(_phase_delay_counter+1)^(0+384)
 10022  1EED  0020               	movlb	0	; select bank0
 10023  1EEE  0850               	movf	_comm_time,w
 10024  1EEF  0023               	movlb	3	; select bank3
 10025  1EF0  00DA               	movwf	_phase_delay_counter^(0+384)
 10026  1EF1  0021               	movlb	1	; select bank1
 10027  1EF2  0838               	movf	_ui16_phase_advancement^(0+128),w
 10028  1EF3  0023               	movlb	3	; select bank3
 10029  1EF4  02DA               	subwf	_phase_delay_counter^(0+384),f
 10030  1EF5  0021               	movlb	1	; select bank1
 10031  1EF6  0839               	movf	(_ui16_phase_advancement+1)^(0+128),w
 10032  1EF7  0023               	movlb	3	; select bank3
 10033  1EF8  3BDB               	subwfb	(_phase_delay_counter+1)^(0+384),f
 10034  1EF9  0008               	return
 10035  1EFA                     __end_ofPL32:	
 10036  1EFA                     PL34:	
 10037  1EFA  0022               	movlb	2	; select bank2
 10038  1EFB  110D               	bcf	13,2	;volatile
 10039  1EFC  108D               	bcf	13,1	;volatile
 10040  1EFD  3009               	movlw	9
 10041  1EFE  0021               	movlb	1	; select bank1
 10042  1EFF  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 10043  1F00  3025               	movlw	37
 10044  1F01  01E0               	clrf	_ui8_UPhase_sel^(0+128)
 10045  1F02  0AE0               	incf	_ui8_UPhase_sel^(0+128),f
 10046  1F03  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 10047  1F04  3002               	movlw	2
 10048  1F05  0022               	movlb	2	; select bank2
 10049  1F06  0092               	movwf	18	;volatile
 10050  1F07  3084               	movlw	132
 10051  1F08  0091               	movwf	17	;volatile
 10052  1F09  3406               	retlw	6
 10053  1F0A                     __end_ofPL34:	
 10054  1F0A                     PL36:	
 10055  1F0A  0022               	movlb	2	; select bank2
 10056  1F0B  110E               	bcf	14,2	;volatile
 10057  1F0C  110D               	bcf	13,2	;volatile
 10058  1F0D  3011               	movlw	17
 10059  1F0E  0021               	movlb	1	; select bank1
 10060  1F0F  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 10061  1F10  3025               	movlw	37
 10062  1F11  00E0               	movwf	_ui8_UPhase_sel^(0+128)
 10063  1F12  3005               	movlw	5
 10064  1F13  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 10065  1F14  3001               	movlw	1
 10066  1F15  0022               	movlb	2	; select bank2
 10067  1F16  0092               	movwf	18	;volatile
 10068  1F17  3084               	movlw	132
 10069  1F18  0091               	movwf	17	;volatile
 10070  1F19  3404               	retlw	4
 10071  1F1A                     __end_ofPL36:	
 10072  1F1A                     PL38:	
 10073  1F1A  0022               	movlb	2	; select bank2
 10074  1F1B  110E               	bcf	14,2	;volatile
 10075  1F1C  148D               	bsf	13,1	;volatile
 10076  1F1D  3035               	movlw	53
 10077  1F1E  0021               	movlb	1	; select bank1
 10078  1F1F  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 10079  1F20  3005               	movlw	5
 10080  1F21  00E0               	movwf	_ui8_UPhase_sel^(0+128)
 10081  1F22  3025               	movlw	37
 10082  1F23  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 10083  1F24  3002               	movlw	2
 10084  1F25  0022               	movlb	2	; select bank2
 10085  1F26  0092               	movwf	18	;volatile
 10086  1F27  3094               	movlw	148
 10087  1F28  0091               	movwf	17	;volatile
 10088  1F29  3403               	retlw	3
 10089  1F2A                     __end_ofPL38:	
 10090  1F2A                     PL40:	
 10091  1F2A  0022               	movlb	2	; select bank2
 10092  1F2B  110E               	bcf	14,2	;volatile
 10093  1F2C  108D               	bcf	13,1	;volatile
 10094  1F2D  3035               	movlw	53
 10095  1F2E  0021               	movlb	1	; select bank1
 10096  1F2F  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 10097  1F30  3005               	movlw	5
 10098  1F31  00E0               	movwf	_ui8_UPhase_sel^(0+128)
 10099  1F32  01DF               	clrf	_ui8_Ubemf_sel^(0+128)
 10100  1F33  0ADF               	incf	_ui8_Ubemf_sel^(0+128),f
 10101  1F34  0022               	movlb	2	; select bank2
 10102  1F35  0192               	clrf	18	;volatile
 10103  1F36  3084               	movlw	132
 10104  1F37  0091               	movwf	17	;volatile
 10105  1F38  3402               	retlw	2
 10106  1F39                     __end_ofPL40:	
 10107  1F39                     PL42:	
 10108  1F39  0022               	movlb	2	; select bank2
 10109  1F3A  150E               	bsf	14,2	;volatile
 10110  1F3B  110D               	bcf	13,2	;volatile
 10111  1F3C  3011               	movlw	17
 10112  1F3D  0021               	movlb	1	; select bank1
 10113  1F3E  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 10114  1F3F  3025               	movlw	37
 10115  1F40  00E0               	movwf	_ui8_UPhase_sel^(0+128)
 10116  1F41  01DF               	clrf	_ui8_Ubemf_sel^(0+128)
 10117  1F42  0ADF               	incf	_ui8_Ubemf_sel^(0+128),f
 10118  1F43  0022               	movlb	2	; select bank2
 10119  1F44  0192               	clrf	18	;volatile
 10120  1F45  3094               	movlw	148
 10121  1F46  0091               	movwf	17	;volatile
 10122  1F47  3405               	retlw	5
 10123  1F48                     __end_ofPL42:	
 10124  1F48                     PL44:	
 10125  1F48  0022               	movlb	2	; select bank2
 10126  1F49  150D               	bsf	13,2	;volatile
 10127  1F4A  108D               	bcf	13,1	;volatile
 10128  1F4B  3009               	movlw	9
 10129  1F4C  0021               	movlb	1	; select bank1
 10130  1F4D  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 10131  1F4E  3005               	movlw	5
 10132  1F4F  01E0               	clrf	_ui8_UPhase_sel^(0+128)
 10133  1F50  0AE0               	incf	_ui8_UPhase_sel^(0+128),f
 10134  1F51  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 10135  1F52  3001               	movlw	1
 10136  1F53  0022               	movlb	2	; select bank2
 10137  1F54  0092               	movwf	18	;volatile
 10138  1F55  3094               	movlw	148
 10139  1F56  0091               	movwf	17	;volatile
 10140  1F57  0008               	return
 10141  1F58                     __end_ofPL44:	
 10142  1F58                     PL46:	
 10143  1F58  0021               	movlb	1	; select bank1
 10144  1F59  00B5               	movwf	(_ui16_speed_fil+1)^(0+128)
 10145  1F5A  0020               	movlb	0	; select bank0
 10146  1F5B  0851               	movf	_comm_time+1,w
 10147  1F5C  0022               	movlb	2	; select bank2
 10148  1F5D  00B0               	movwf	(_ui16_speed_rar+1)^(0+256)
 10149  1F5E  0020               	movlb	0	; select bank0
 10150  1F5F  0850               	movf	_comm_time,w
 10151  1F60  0022               	movlb	2	; select bank2
 10152  1F61  00AF               	movwf	_ui16_speed_rar^(0+256)
 10153  1F62  12FA               	bcf	_MotorFlags,5
 10154  1F63  0021               	movlb	1	; select bank1
 10155  1F64  01DE               	clrf	_ui8_sampleState^(0+128)
 10156  1F65  0ADE               	incf	_ui8_sampleState^(0+128),f
 10157  1F66  17FA               	bsf	_MotorFlags,7
 10158  1F67  0008               	return
 10159  1F68                     __end_ofPL46:	
 10160  1F68                     PL48:	
 10161  1F68  00F7               	movwf	??_interrrupt_bldc
 10162  1F69  01F8               	clrf	??_interrrupt_bldc+1
 10163  1F6A  0020               	movlb	0	; select bank0
 10164  1F6B  084F               	movf	_ui16_IPhase_bldc+1,w	;volatile
 10165  1F6C  0278               	subwf	??_interrrupt_bldc+1,w
 10166  1F6D  1D03               	skipz
 10167  1F6E  0008               	return
 10168  1F6F  084E               	movf	_ui16_IPhase_bldc,w	;volatile
 10169  1F70  0277               	subwf	??_interrrupt_bldc,w
 10170  1F71  0008               	return
 10171  1F72                     __end_ofPL48:	
 10172  1F72                     PL66:	
 10173  1F72  0022               	movlb	2	; select bank2
 10174  1F73  080E               	movf	14,w	;volatile
 10175  1F74  39E5               	andlw	229
 10176  1F75  3818               	iorlw	24
 10177  1F76  008E               	movwf	14	;volatile
 10178  1F77  0008               	return
 10179  1F78                     __end_ofPL66:	
 10180  1F78                     PL70:	
 10181  1F78  0022               	movlb	2	; select bank2
 10182  1F79  080E               	movf	14,w	;volatile
 10183  1F7A  39E5               	andlw	229
 10184  1F7B  380A               	iorlw	10
 10185  1F7C  008E               	movwf	14	;volatile
 10186  1F7D  0008               	return
 10187  1F7E                     __end_ofPL70:	
 10188  1F7E                     PL74:	
 10189  1F7E  0022               	movlb	2	; select bank2
 10190  1F7F  080E               	movf	14,w	;volatile
 10191  1F80  39E5               	andlw	229
 10192  1F81  3812               	iorlw	18
 10193  1F82  008E               	movwf	14	;volatile
 10194  1F83  0008               	return
 10195  1F84                     __end_ofPL74:	
 10196  1F84                     PL80:	
 10197  1F84  084F               	movf	_ui16_IPhase_bldc+1,w	;volatile
 10198  1F85  00F1               	movwf	i1___wmul@multiplier+1
 10199  1F86  084E               	movf	_ui16_IPhase_bldc,w	;volatile
 10200  1F87  00F0               	movwf	i1___wmul@multiplier
 10201  1F88  0022               	movlb	2	; select bank2
 10202  1F89  0008               	return
 10203  1F8A                     __end_ofPL80:	
 10204  1F8A                     PL88:	
 10205  1F8A  0025               	movlb	5	; select bank5
 10206  1F8B  0A91               	incf	17,f	;volatile
 10207  1F8C  0020               	movlb	0	; select bank0
 10208  1F8D  0856               	movf	_ui8_duty_cycle_BLDC,w
 10209  1F8E  0025               	movlb	5	; select bank5
 10210  1F8F  0211               	subwf	17,w	;volatile
 10211  1F90  0008               	return
 10212  1F91                     __end_ofPL88:	
 10213  1F91                     PL90:	
 10214  1F91  3028               	movlw	40
 10215  1F92  00E2               	movwf	_ui8_BlankingCount^(0+128)
 10216  1F93  0020               	movlb	0	; select bank0
 10217  1F94  01D0               	clrf	_comm_time
 10218  1F95  01D1               	clrf	_comm_time+1
 10219  1F96  0008               	return
 10220  1F97                     __end_ofPL90:	
 10221  1F97                     PL96:	
 10222  1F97  3021               	movlw	33
 10223  1F98  01DA               	clrf	_phase_delay_counter^(0+384)
 10224  1F99  01DB               	clrf	(_phase_delay_counter+1)^(0+384)
 10225  1F9A  0022               	movlb	2	; select bank2
 10226  1F9B  00AD               	movwf	_ui16_comm_time_max^(0+256)
 10227  1F9C  01AE               	clrf	(_ui16_comm_time_max+1)^(0+256)
 10228  1F9D  0008               	return
 10229  1F9E                     __end_ofPL96:	
 10230  1F9E                     PL98:	
 10231  1F9E  0021               	movlb	1	; select bank1
 10232  1F9F  00B4               	movwf	_ui16_speed_fil^(0+128)
 10233  1FA0  0023               	movlb	3	; select bank3
 10234  1FA1  0821               	movf	(_B+1)^(0+384),w
 10235  1FA2  0020               	movlb	0	; select bank0
 10236  1FA3  0008               	return
 10237  1FA4                     __end_ofPL98:	
 10238  1FA4                     PL100:	
 10239  1FA4  30F4               	movlw	244
 10240  1FA5  0022               	movlb	2	; select bank2
 10241  1FA6  00AD               	movwf	_ui16_comm_time_max^(0+256)
 10242  1FA7  3001               	movlw	1
 10243  1FA8  00AE               	movwf	(_ui16_comm_time_max^(0+256)+1)
 10244  1FA9  0008               	return
 10245  1FAA                     __end_ofPL100:	
 10246  1FAA                     PL108:	
 10247  1FAA  0025               	movlb	5	; select bank5
 10248  1FAB  0391               	decf	17,f	;volatile
 10249  1FAC  0811               	movf	17,w	;volatile
 10250  1FAD  0020               	movlb	0	; select bank0
 10251  1FAE  0256               	subwf	_ui8_duty_cycle_BLDC,w
 10252  1FAF  0008               	return
 10253  1FB0                     __end_ofPL108:	
 10254  1FB0                     PL114:	
 10255  1FB0  081C               	movf	28,w	;volatile
 10256  1FB1  00BD               	movwf	(_analog_value^(0+128)+1)	;volatile
 10257  1FB2  081B               	movf	27,w	;volatile
 10258  1FB3  00BC               	movwf	_analog_value^(0+128)	;volatile
 10259  1FB4  083D               	movf	(_analog_value+1)^(0+128),w	;volatile
 10260  1FB5  0008               	return
 10261  1FB6                     __end_ofPL114:	
 10262  1FB6                     PL118:	
 10263  1FB6  0020               	movlb	0	; select bank0
 10264  1FB7  01D0               	clrf	_comm_time
 10265  1FB8  01D1               	clrf	_comm_time+1
 10266  1FB9  0021               	movlb	1	; select bank1
 10267  1FBA  0008               	return
 10268  1FBB                     __end_ofPL118:	
 10269  1FBB                     PL122:	
 10270  1FBB  0025               	movlb	5	; select bank5
 10271  1FBC  0811               	movf	17,w	;volatile
 10272  1FBD  0020               	movlb	0	; select bank0
 10273  1FBE  0256               	subwf	_ui8_duty_cycle_BLDC,w
 10274  1FBF  0008               	return
 10275  1FC0                     __end_ofPL122:	
 10276  1FC0                     PL124:	
 10277  1FC0  1079               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10278  1FC1  0021               	movlb	1	; select bank1
 10279  1FC2  01E3               	clrf	_comm_state^(0+128)
 10280  1FC3  0AE3               	incf	_comm_state^(0+128),f
 10281  1FC4  0008               	return
 10282  1FC5                     __end_ofPL124:	
 10283  1FC5                     PL126:	
 10284  1FC5  0025               	movlb	5	; select bank5
 10285  1FC6  0811               	movf	17,w	;volatile
 10286  1FC7  0020               	movlb	0	; select bank0
 10287  1FC8  0656               	xorwf	_ui8_duty_cycle_BLDC,w
 10288  1FC9  0008               	return
 10289  1FCA                     __end_ofPL126:	
 10290  1FCA                     PL128:	
 10291  1FCA  0020               	movlb	0	; select bank0
 10292  1FCB  0850               	movf	_comm_time,w
 10293  1FCC  0021               	movlb	1	; select bank1
 10294  1FCD  0238               	subwf	_ui16_phase_advancement^(0+128),w
 10295  1FCE  0008               	return
 10296  1FCF                     __end_ofPL128:	
 10297  1FCF                     PL130:	
 10298  1FCF  083A               	movf	_ui16_step_cnt^(0+128),w
 10299  1FD0  0084               	movwf	4
 10300  1FD1  300A               	movlw	10
 10301  1FD2  0204               	subwf	4,w
 10302  1FD3  0008               	return
 10303  1FD4                     __end_ofPL130:	
 10304  1FD4                     PL132:	
 10305  1FD4  0025               	movlb	5	; select bank5
 10306  1FD5  0196               	clrf	22	;volatile
 10307  1FD6  0022               	movlb	2	; select bank2
 10308  1FD7  0191               	clrf	17	;volatile
 10309  1FD8  0008               	return
 10310  1FD9                     __end_ofPL132:	
 10311  1FD9                     __ptext54:	
 10312 ;; *************** function i1___lwdiv *****************
 10313 ;; Defined at:
 10314 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 10315 ;; Parameters:    Size  Location     Type
 10316 ;;  divisor         2    0[COMMON] unsigned int 
 10317 ;;  dividend        2    2[COMMON] unsigned int 
 10318 ;; Auto vars:     Size  Location     Type
 10319 ;;  __lwdiv         2    5[COMMON] unsigned int 
 10320 ;;  __lwdiv         1    4[COMMON] unsigned char 
 10321 ;; Return value:  Size  Location     Type
 10322 ;;                  2    0[COMMON] unsigned int 
 10323 ;; Registers used:
 10324 ;;		wreg, status,2, status,0
 10325 ;; Tracked objects:
 10326 ;;		On entry : 1F/0
 10327 ;;		On exit  : 1F/0
 10328 ;;		Unchanged: 1F/0
 10329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10330 ;;      Params:         4       0       0       0       0       0       0       0
 10331 ;;      Locals:         3       0       0       0       0       0       0       0
 10332 ;;      Temps:          0       0       0       0       0       0       0       0
 10333 ;;      Totals:         7       0       0       0       0       0       0       0
 10334 ;;Total ram usage:        7 bytes
 10335 ;; Hardware stack levels used:    1
 10336 ;; This function calls:
 10337 ;;		Nothing
 10338 ;; This function is called by:
 10339 ;;		_interrrupt_bldc
 10340 ;; This function uses a non-reentrant model
 10341 ;;
 10342                           
 10343                           
 10344                           ;psect for function i1___lwdiv
 10345  1FD9                     i1___lwdiv:	
 10346                           
 10347                           ;incstack = 0
 10348                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10349  1FD9  01F5               	clrf	i1___lwdiv@quotient
 10350  1FDA  01F6               	clrf	i1___lwdiv@quotient+1
 10351  1FDB  0870               	movf	i1___lwdiv@divisor,w
 10352  1FDC  0471               	iorwf	i1___lwdiv@divisor+1,w
 10353  1FDD  1903               	btfsc	3,2
 10354  1FDE  2FF9               	goto	i1l12718
 10355  1FDF  01F4               	clrf	i1___lwdiv@counter
 10356  1FE0                     L64:	
 10357  1FE0  0AF4               	incf	i1___lwdiv@counter,f
 10358  1FE1  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10359  1FE2  2FE6               	goto	i1l12706
 10360  1FE3  35F0               	lslf	i1___lwdiv@divisor,f
 10361  1FE4  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10362  1FE5  2FE0               	goto	L64
 10363  1FE6                     i1l12706:	
 10364  1FE6  35F5               	lslf	i1___lwdiv@quotient,f
 10365  1FE7  0DF6               	rlf	i1___lwdiv@quotient+1,f
 10366  1FE8  0871               	movf	i1___lwdiv@divisor+1,w
 10367  1FE9  0273               	subwf	i1___lwdiv@dividend+1,w
 10368  1FEA  1D03               	skipz
 10369  1FEB  2FEE               	goto	u1092_25
 10370  1FEC  0870               	movf	i1___lwdiv@divisor,w
 10371  1FED  0272               	subwf	i1___lwdiv@dividend,w
 10372  1FEE                     u1092_25:	
 10373  1FEE  1C03               	skipc
 10374  1FEF  2FF5               	goto	i1l12714
 10375  1FF0  0870               	movf	i1___lwdiv@divisor,w
 10376  1FF1  02F2               	subwf	i1___lwdiv@dividend,f
 10377  1FF2  0871               	movf	i1___lwdiv@divisor+1,w
 10378  1FF3  3BF3               	subwfb	i1___lwdiv@dividend+1,f
 10379  1FF4  1475               	bsf	i1___lwdiv@quotient,0
 10380  1FF5                     i1l12714:	
 10381  1FF5  36F1               	lsrf	i1___lwdiv@divisor+1,f
 10382  1FF6  0CF0               	rrf	i1___lwdiv@divisor,f
 10383  1FF7  0BF4               	decfsz	i1___lwdiv@counter,f
 10384  1FF8  2FE6               	goto	i1l12706
 10385  1FF9                     i1l12718:	
 10386  1FF9  0876               	movf	i1___lwdiv@quotient+1,w
 10387  1FFA  00F1               	movwf	?i1___lwdiv+1
 10388  1FFB  0875               	movf	i1___lwdiv@quotient,w
 10389  1FFC  00F0               	movwf	?i1___lwdiv
 10390  1FFD  0008               	return
 10391  1FFE                     __end_ofi1___lwdiv:	
 10392                           
 10393                           	psect	swtext1
 10394  0711                     __pswtext1:	
 10395  0711                     S13830:	
 10396  0711  319A  2AF6         	ljmp	l9472
 10397  0713  319A  2AF8         	ljmp	l9474
 10398  0715  319A  2AFB         	ljmp	l9476
 10399  0717  319A  2AFD         	ljmp	l9478
 10400  0719  319A  2AFF         	ljmp	l9480
 10401  071B  319B  2B01         	ljmp	l9482
 10402  071D  319B  2B01         	ljmp	l9482
 10403  071F  319B  2B01         	ljmp	l9482
 10404  0721  319B  2B01         	ljmp	l9482
 10405  0723  319B  2B01         	ljmp	l9482
 10406                           
 10407                           	psect	text24
 10408  1095                     __ptext24:	
 10409 ;; *************** function _EOL *****************
 10410 ;; Defined at:
 10411 ;;		line 456 in file "../diag.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;		None
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;  _dcnt           1   17[BANK4 ] unsigned char 
 10416 ;;  _dcnt           1   16[BANK4 ] unsigned char 
 10417 ;;  _dcnt           1   15[BANK4 ] unsigned char 
 10418 ;;  _dcnt           1   14[BANK4 ] unsigned char 
 10419 ;;  _dcnt           1   13[BANK4 ] unsigned char 
 10420 ;;  _dcnt           1   12[BANK4 ] unsigned char 
 10421 ;;  _dcnt           1   11[BANK4 ] unsigned char 
 10422 ;;  _dcnt           1   10[BANK4 ] unsigned char 
 10423 ;;  _dcnt           1    9[BANK4 ] unsigned char 
 10424 ;;  _dcnt           1    8[BANK4 ] unsigned char 
 10425 ;;  _dcnt           1    7[BANK4 ] unsigned char 
 10426 ;;  _dcnt           1    6[BANK4 ] unsigned char 
 10427 ;;  _dcnt           1    5[BANK4 ] unsigned char 
 10428 ;;  _dcnt           1    4[BANK4 ] unsigned char 
 10429 ;;  _dcnt           1    3[BANK4 ] unsigned char 
 10430 ;;  _dcnt           1    2[BANK4 ] unsigned char 
 10431 ;;  _dcnt           1    1[BANK4 ] unsigned char 
 10432 ;;  _dcnt           1    0[BANK4 ] unsigned char 
 10433 ;;  ui8_b_DResB3    1   23[BANK4 ] unsigned char 
 10434 ;;  ui8_b_DResB2    1   22[BANK4 ] unsigned char 
 10435 ;;  ui8_b_DResB1    1   21[BANK4 ] unsigned char 
 10436 ;;  ui8_b_DResB0    1   20[BANK4 ] unsigned char 
 10437 ;;  ui8_b_DResB4    1   19[BANK4 ] unsigned char 
 10438 ;;  ui8_b_DResB5    1   18[BANK4 ] unsigned char 
 10439 ;; Return value:  Size  Location     Type
 10440 ;;                  1    wreg      void 
 10441 ;; Registers used:
 10442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10443 ;; Tracked objects:
 10444 ;;		On entry : 1F/0
 10445 ;;		On exit  : 1E/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10448 ;;      Params:         0       0       0       0       0       0       0       0
 10449 ;;      Locals:         0       0       0       0       0      24       0       0
 10450 ;;      Temps:          0       3       0       0       0       0       0       0
 10451 ;;      Totals:         0       3       0       0       0      24       0       0
 10452 ;;Total ram usage:       27 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    8
 10455 ;; This function calls:
 10456 ;;		_ADC_Read
 10457 ;;		_ADC_Wait
 10458 ;;		_InitMotorStop
 10459 ;;		_NegativeAnswer
 10460 ;;		_PWMReadDC
 10461 ;;		_PWM_Write_Out
 10462 ;;		_Transmit_LIN_8Bytes
 10463 ;;		___lwdiv
 10464 ;;		___wmul
 10465 ;;		_cksum
 10466 ;;		_read_eeprom_data
 10467 ;;		_write_eeprom_data
 10468 ;; This function is called by:
 10469 ;;		_main
 10470 ;; This function uses a non-reentrant model
 10471 ;;
 10472                           
 10473                           
 10474                           ;psect for function _EOL
 10475  1095                     _EOL:	
 10476                           
 10477                           ;diag.c: 460: unsigned char ui8_b_DResB0_RD;
 10478                           ;diag.c: 461: unsigned char ui8_b_DResB1_RD;
 10479                           ;diag.c: 462: unsigned char ui8_b_DResB2_RD;
 10480                           ;diag.c: 463: unsigned char ui8_b_DResB3_RD;
 10481                           ;diag.c: 464: unsigned char ui8_b_DResB4_RD;
 10482                           ;diag.c: 465: unsigned char ui8_b_DResB5_RD;
 10483                           ;diag.c: 469: if( ui8_b_DResServID_c == 0x3b )
 10484                           
 10485                           ;incstack = 0
 10486                           ; Regs used in _EOL: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10487  1095  303B               	movlw	59
 10488  1096  0022               	movlb	2	; select bank2
 10489  1097  0661               	xorwf	_ui8_b_DResServID_c^(0+256),w
 10490  1098  1D03               	btfss	3,2
 10491  1099  2D5A               	goto	l13522
 10492                           
 10493                           ;diag.c: 471: {
 10494                           ;diag.c: 477: ui8_selected_lid = ui8_b_DResLocID_c;
 10495  109A  0020               	movlb	0	; select bank0
 10496  109B  0855               	movf	_ui8_b_DResLocID_c,w
 10497  109C  00D9               	movwf	_ui8_selected_lid
 10498                           
 10499                           ;diag.c: 2406: break;
 10500                           
 10501                           ;diag.c: 482: switch( ui8_b_DResLocID_c)
 10502  109D  0855               	movf	_ui8_b_DResLocID_c,w
 10503                           
 10504                           ; Switch size 1, requested type "space"
 10505                           ; Number of cases is 10, Range of values is 128 to 250
 10506                           ; switch strategies available:
 10507                           ; Name         Instructions Cycles
 10508                           ; simple_byte           31    16 (average)
 10509                           ; direct_byte          255     9 (fixed)
 10510                           ; jumptable            263     9 (fixed)
 10511                           ;	Chosen strategy is simple_byte
 10512  109E  3A80               	xorlw	128	; case 128
 10513  109F  1903               	skipnz
 10514  10A0  28BD               	goto	l12974
 10515  10A1  3A10               	xorlw	16	; case 144
 10516  10A2  1903               	skipnz
 10517  10A3  28CD               	goto	l12982
 10518  10A4  3A01               	xorlw	1	; case 145
 10519  10A5  1903               	skipnz
 10520  10A6  2940               	goto	l13022
 10521  10A7  3A02               	xorlw	2	; case 147
 10522  10A8  1903               	skipnz
 10523  10A9  297B               	goto	l13044
 10524  10AA  3A07               	xorlw	7	; case 148
 10525  10AB  1903               	skipnz
 10526  10AC  29E4               	goto	l13102
 10527  10AD  3A01               	xorlw	1	; case 149
 10528  10AE  1903               	skipnz
 10529  10AF  2A39               	goto	l13132
 10530  10B0  3A0D               	xorlw	13	; case 152
 10531  10B1  1903               	skipnz
 10532  10B2  2C0E               	goto	l13300
 10533  10B3  3A07               	xorlw	7	; case 159
 10534  10B4  1903               	skipnz
 10535  10B5  2C9E               	goto	l13398
 10536  10B6  3A3F               	xorlw	63	; case 160
 10537  10B7  1903               	skipnz
 10538  10B8  2CE6               	goto	l13476
 10539  10B9  3A5A               	xorlw	90	; case 250
 10540  10BA  1903               	skipnz
 10541  10BB  2D46               	goto	l13508
 10542  10BC  2D58               	goto	l13516
 10543  10BD                     l12974:	
 10544                           
 10545                           ;diag.c: 490: {
 10546                           ;diag.c: 492: if( 0x80 == ui8_selected_lid )
 10547  10BD  3080               	movlw	128
 10548  10BE  0659               	xorwf	_ui8_selected_lid,w
 10549  10BF  1D03               	btfss	3,2
 10550  10C0  0008               	return
 10551                           
 10552                           ;diag.c: 494: {
 10553                           ;diag.c: 496: ui8_selected_lid = 0x90;
 10554  10C1  3090               	movlw	144
 10555  10C2  00D9               	movwf	_ui8_selected_lid
 10556                           
 10557                           ;diag.c: 497: ict_stamp = 1;
 10558  10C3  0022               	movlb	2	; select bank2
 10559  10C4  303A               	movlw	58
 10560  10C5  01EF               	clrf	_ict_stamp^(0+256)
 10561  10C6  0AEF               	incf	_ict_stamp^(0+256),f
 10562                           
 10563                           ;diag.c: 499: Transmit_LIN_8Bytes( 0x10, 0x3A, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
      +                          );
 10564  10C7  0020               	movlb	0	; select bank0
 10565  10C8  00BB               	movwf	Transmit_LIN_8Bytes@B0
 10566  10C9  3080               	movlw	128
 10567  10CA  260D  3190         	fcall	PL72	;call to abstracted procedure
 10568  10CC  2E39               	ljmp	_Transmit_LIN_8Bytes
 10569  10CD                     l12982:	
 10570                           ;diag.c: 516: }
 10571                           ;diag.c: 519: break;
 10572                           
 10573                           ;diag.c: 506: else
 10574                           ;diag.c: 507: {
 10575                           
 10576                           ;diag.c: 503: }
 10577                           
 10578                           
 10579                           ;diag.c: 529: {
 10580                           ;diag.c: 531: if( 0x90 == ui8_selected_lid )
 10581  10CD  3090               	movlw	144
 10582  10CE  0659               	xorwf	_ui8_selected_lid,w
 10583  10CF  1D03               	btfss	3,2
 10584  10D0  0008               	return
 10585  10D1  2917               	goto	l13004
 10586  10D2                     l12986:	
 10587                           
 10588                           ;diag.c: 557: {
 10589                           ;diag.c: 559: ui8_b_DResB0_RD = read_eeprom_data( 0xf0 );
 10590  10D2  30F0               	movlw	240
 10591  10D3  3182  225D  3190   	fcall	_read_eeprom_data
 10592  10D6  0024               	movlb	4	; select bank4
 10593  10D7  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 10594                           
 10595                           ;diag.c: 560: ui8_b_DResB1_RD = read_eeprom_data( 0xf1 );
 10596  10D8  30F1               	movlw	241
 10597  10D9  3182  225D  3190   	fcall	_read_eeprom_data
 10598  10DC  0024               	movlb	4	; select bank4
 10599  10DD  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 10600                           
 10601                           ;diag.c: 561: ui8_b_DResB2_RD = read_eeprom_data( 0xf2 );
 10602  10DE  30F2               	movlw	242
 10603  10DF  3182  225D  3190   	fcall	_read_eeprom_data
 10604  10E2  0024               	movlb	4	; select bank4
 10605  10E3  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 10606                           
 10607                           ;diag.c: 562: ui8_b_DResB3_RD = read_eeprom_data( 0xf3 );
 10608  10E4  30F3               	movlw	243
 10609  10E5  3182  225D  3190   	fcall	_read_eeprom_data
 10610  10E8  0024               	movlb	4	; select bank4
 10611  10E9  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 10612  10EA  3002               	movlw	2
 10613                           
 10614                           ;diag.c: 563: ui8_b_DResB4_RD = 0;
 10615  10EB  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
 10616                           
 10617                           ;diag.c: 564: ui8_b_DResB5_RD = 0;
 10618  10EC  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 10619                           
 10620                           ;diag.c: 566: ict_stamp = 2;
 10621  10ED  0022               	movlb	2	; select bank2
 10622  10EE  00EF               	movwf	_ict_stamp^(0+256)
 10623                           
 10624                           ;diag.c: 567: break;
 10625  10EF  2920               	goto	l13006
 10626  10F0                     l12994:	
 10627                           
 10628                           ;diag.c: 574: {
 10629                           ;diag.c: 576: ui8_b_DResB0_RD = read_eeprom_data( 0xeb );
 10630  10F0  30EB               	movlw	235
 10631  10F1  3182  225D  3190   	fcall	_read_eeprom_data
 10632  10F4  0024               	movlb	4	; select bank4
 10633  10F5  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 10634                           
 10635                           ;diag.c: 577: ui8_b_DResB1_RD = read_eeprom_data( 0xec );
 10636  10F6  30EC               	movlw	236
 10637  10F7  3182  225D  3190   	fcall	_read_eeprom_data
 10638  10FA  0024               	movlb	4	; select bank4
 10639  10FB  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 10640                           
 10641                           ;diag.c: 578: ui8_b_DResB2_RD = read_eeprom_data( 0xed );
 10642  10FC  30ED               	movlw	237
 10643  10FD  3182  225D  3190   	fcall	_read_eeprom_data
 10644  1100  0024               	movlb	4	; select bank4
 10645  1101  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 10646                           
 10647                           ;diag.c: 579: ui8_b_DResB3_RD = read_eeprom_data( 0xee );
 10648  1102  30EE               	movlw	238
 10649  1103  3182  225D  3190   	fcall	_read_eeprom_data
 10650  1106  0024               	movlb	4	; select bank4
 10651  1107  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 10652                           
 10653                           ;diag.c: 580: ui8_b_DResB4_RD = read_eeprom_data( 0xef );
 10654  1108  30EF               	movlw	239
 10655  1109  3182  225D  3190   	fcall	_read_eeprom_data
 10656  110C  0024               	movlb	4	; select bank4
 10657  110D  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 10658  110E  3091               	movlw	145
 10659                           
 10660                           ;diag.c: 581: ui8_b_DResB5_RD = 0;
 10661  110F  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 10662                           
 10663                           ;diag.c: 583: ui8_selected_lid = 0x91;
 10664  1110  0020               	movlb	0	; select bank0
 10665  1111  00D9               	movwf	_ui8_selected_lid
 10666                           
 10667                           ;diag.c: 584: break;
 10668  1112  2920               	goto	l13006
 10669  1113                     l13000:	
 10670                           
 10671                           ;diag.c: 591: {
 10672                           ;diag.c: 594: NegativeAnswer(0x90);
 10673  1113  3090               	movlw	144
 10674  1114  2629  3190         	fcall	_NegativeAnswer
 10675                           
 10676                           ;diag.c: 595: break;
 10677  1116  2920               	goto	l13006
 10678  1117                     l13004:	
 10679  1117  0022               	movlb	2	; select bank2
 10680  1118  086F               	movf	_ict_stamp^(0+256),w
 10681                           
 10682                           ; Switch size 1, requested type "space"
 10683                           ; Number of cases is 2, Range of values is 1 to 2
 10684                           ; switch strategies available:
 10685                           ; Name         Instructions Cycles
 10686                           ; simple_byte            7     4 (average)
 10687                           ; direct_byte           13     9 (fixed)
 10688                           ; jumptable            263     9 (fixed)
 10689                           ;	Chosen strategy is simple_byte
 10690  1119  3A01               	xorlw	1	; case 1
 10691  111A  1903               	skipnz
 10692  111B  28D2               	goto	l12986
 10693  111C  3A03               	xorlw	3	; case 2
 10694  111D  1903               	skipnz
 10695  111E  28F0               	goto	l12994
 10696  111F  2913               	goto	l13000
 10697  1120                     l13006:	
 10698                           
 10699                           ;diag.c: 602: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DResB
      +                          2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF) && (ui8_b_DResB5
      +                          _RD != 0xFF))
 10700  1120  0024               	movlb	4	; select bank4
 10701  1121  0A34               	incf	EOL@ui8_b_DResB0_RD^(0+512),w
 10702  1122  1903               	btfsc	3,2
 10703  1123  2939               	goto	l13020
 10704  1124  0A35               	incf	EOL@ui8_b_DResB1_RD^(0+512),w
 10705  1125  1903               	btfsc	3,2
 10706  1126  2939               	goto	l13020
 10707  1127  0A36               	incf	EOL@ui8_b_DResB2_RD^(0+512),w
 10708  1128  1903               	btfsc	3,2
 10709  1129  2939               	goto	l13020
 10710  112A  0A37               	incf	EOL@ui8_b_DResB3_RD^(0+512),w
 10711  112B  1903               	btfsc	3,2
 10712  112C  2939               	goto	l13020
 10713  112D  0A33               	incf	EOL@ui8_b_DResB4_RD^(0+512),w
 10714  112E  1903               	btfsc	3,2
 10715  112F  2939               	goto	l13020
 10716  1130  0A32               	incf	EOL@ui8_b_DResB5_RD^(0+512),w
 10717  1131  1903               	btfsc	3,2
 10718  1132  2939               	goto	l13020
 10719                           
 10720                           ;diag.c: 604: {
 10721                           ;diag.c: 606: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10722  1133  303A               	movlw	58
 10723  1134  2562  3190         	fcall	PL2	;call to abstracted procedure
 10724  1136  00C2               	movwf	Transmit_LIN_8Bytes@B7
 10725  1137  3010               	movlw	16
 10726  1138  2E39               	ljmp	_Transmit_LIN_8Bytes
 10727  1139                     l13020:	
 10728                           ;diag.c: 609: }
 10729                           
 10730                           
 10731                           ;diag.c: 612: else
 10732                           ;diag.c: 613: {
 10733                           ;diag.c: 615: Transmit_LIN_8Bytes( 0x10, 0x7F, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
 10734  1139  307F               	movlw	127
 10735  113A  0020               	movlb	0	; select bank0
 10736  113B  00BB               	movwf	Transmit_LIN_8Bytes@B0
 10737  113C  3090               	movlw	144
 10738  113D  25E4  3190         	fcall	PL20	;call to abstracted procedure
 10739  113F  2E39               	ljmp	_Transmit_LIN_8Bytes
 10740  1140                     l13022:	
 10741                           
 10742                           ;diag.c: 657: {
 10743                           ;diag.c: 659: if( 0x91 == ui8_selected_lid )
 10744  1140  3091               	movlw	145
 10745  1141  0659               	xorwf	_ui8_selected_lid,w
 10746  1142  1D03               	btfss	3,2
 10747  1143  0008               	return
 10748                           
 10749                           ;diag.c: 661: {
 10750                           ;diag.c: 672: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
 10751  1144  30F4               	movlw	244
 10752  1145  3182  225D  3190   	fcall	_read_eeprom_data
 10753  1148  0024               	movlb	4	; select bank4
 10754  1149  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 10755                           
 10756                           ;diag.c: 673: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
 10757  114A  30F5               	movlw	245
 10758  114B  3182  225D  3190   	fcall	_read_eeprom_data
 10759  114E  0024               	movlb	4	; select bank4
 10760  114F  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 10761                           
 10762                           ;diag.c: 674: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
 10763  1150  30F6               	movlw	246
 10764  1151  3182  225D  3190   	fcall	_read_eeprom_data
 10765  1154  0024               	movlb	4	; select bank4
 10766  1155  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 10767                           
 10768                           ;diag.c: 675: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
 10769  1156  30F7               	movlw	247
 10770  1157  3182  225D  3190   	fcall	_read_eeprom_data
 10771  115A  0024               	movlb	4	; select bank4
 10772  115B  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 10773                           
 10774                           ;diag.c: 676: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
 10775  115C  30F8               	movlw	248
 10776  115D  3182  225D  3190   	fcall	_read_eeprom_data
 10777  1160  0024               	movlb	4	; select bank4
 10778  1161  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 10779                           
 10780                           ;diag.c: 677: ui8_b_DResB5_RD = 0;
 10781  1162  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 10782                           
 10783                           ;diag.c: 679: if ((ui8_b_DResB0_RD == 0xFF) && (ui8_b_DResB1_RD == 0xFF) && (ui8_b_DResB
      +                          2_RD == 0xFF) && (ui8_b_DResB3_RD == 0xFF) && (ui8_b_DResB4_RD == 0xFF))
 10784  1163  0F34               	incfsz	EOL@ui8_b_DResB0_RD^(0+512),w
 10785  1164  2971               	goto	l13040
 10786  1165  0F35               	incfsz	EOL@ui8_b_DResB1_RD^(0+512),w
 10787  1166  2971               	goto	l13040
 10788  1167  0F36               	incfsz	EOL@ui8_b_DResB2_RD^(0+512),w
 10789  1168  2971               	goto	l13040
 10790  1169  0F37               	incfsz	EOL@ui8_b_DResB3_RD^(0+512),w
 10791  116A  2971               	goto	l13040
 10792  116B  0F33               	incfsz	EOL@ui8_b_DResB4_RD^(0+512),w
 10793  116C  2971               	goto	l13040
 10794                           
 10795                           ;diag.c: 681: {
 10796                           ;diag.c: 683: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10797  116D  303A               	movlw	58
 10798  116E  2562  3190         	fcall	PL2	;call to abstracted procedure
 10799  1170  2974               	goto	L14
 10800  1171                     l13040:	
 10801                           ;diag.c: 686: }
 10802                           
 10803                           
 10804                           ;diag.c: 689: else
 10805                           ;diag.c: 690: {
 10806                           ;diag.c: 692: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 10807  1171  307F               	movlw	127
 10808  1172  25D9  3190         	fcall	PL18	;call to abstracted procedure
 10809  1174                     L14:	
 10810  1174  00C2               	movwf	Transmit_LIN_8Bytes@B7
 10811  1175  3010               	movlw	16
 10812  1176  2639               	fcall	_Transmit_LIN_8Bytes
 10813                           
 10814                           ;diag.c: 702: }
 10815                           ;diag.c: 705: ui8_selected_lid = 0x92;
 10816  1177  3092               	movlw	146
 10817  1178  0020               	movlb	0	; select bank0
 10818  1179  00D9               	movwf	_ui8_selected_lid
 10819                           
 10820                           ;diag.c: 708: }
 10821  117A  0008               	return
 10822  117B                     l13044:	
 10823                           
 10824                           ;diag.c: 834: {
 10825                           ;diag.c: 836: if( 0x93 == ui8_selected_lid )
 10826  117B  3093               	movlw	147
 10827  117C  0659               	xorwf	_ui8_selected_lid,w
 10828  117D  1D03               	btfss	3,2
 10829  117E  0008               	return
 10830                           
 10831                           ;diag.c: 838: {
 10832                           ;diag.c: 850: sum = cksum( );
 10833  117F  27D2  3190         	fcall	_cksum
 10834  1181  0831               	movf	?_cksum+1,w
 10835  1182  0022               	movlb	2	; select bank2
 10836  1183  00AC               	movwf	(_sum+1)^(0+256)
 10837  1184  0020               	movlb	0	; select bank0
 10838  1185  0830               	movf	?_cksum,w
 10839  1186  0022               	movlb	2	; select bank2
 10840  1187  00AB               	movwf	_sum^(0+256)
 10841                           
 10842                           ;diag.c: 851: checksum[ 1 ] = ( (EEADRL=(0x1FFF)&0xff, EEADRH=(0x1FFF)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, __nop(), __nop(), (EEDATH << 8) | EEDATA) );
 10843  1188  30FF               	movlw	255
 10844  1189  0023               	movlb	3	; select bank3
 10845  118A  0091               	movwf	17	;volatile
 10846  118B  301F               	movlw	31
 10847  118C  0092               	movwf	18	;volatile
 10848  118D  1115               	bcf	21,2	;volsfr
 10849  118E  1795               	bsf	21,7	;volsfr
 10850  118F  1415               	bsf	21,0	;volsfr
 10851  1190  0000               	nop
 10852  1191  0000               	nop
 10853  1192  0023               	movlb	3	; select bank3
 10854  1193  0814               	movf	20,w	;volatile
 10855  1194  00BB               	movwf	((_checksum+1)^(0+384)+2)
 10856  1195  0813               	movf	19,w	;volatile
 10857  1196  00BA               	movwf	(_checksum^(0+384)+2)
 10858                           
 10859                           ;diag.c: 852: checksum[ 2 ] = ( (EEADRL=(0x1FFE)&0xff, EEADRH=(0x1FFE)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, __nop(), __nop(), (EEDATH << 8) | EEDATA) );
 10860  1197  30FE               	movlw	254
 10861  1198  0091               	movwf	17	;volatile
 10862  1199  301F               	movlw	31
 10863  119A  0092               	movwf	18	;volatile
 10864  119B  1115               	bcf	21,2	;volsfr
 10865  119C  1795               	bsf	21,7	;volsfr
 10866  119D  1415               	bsf	21,0	;volsfr
 10867  119E  0000               	nop
 10868  119F  0000               	nop
 10869  11A0  0023               	movlb	3	; select bank3
 10870  11A1  0814               	movf	20,w	;volatile
 10871  11A2  00BD               	movwf	((_checksum+1)^(0+384)+4)
 10872  11A3  0813               	movf	19,w	;volatile
 10873  11A4  00BC               	movwf	(_checksum^(0+384)+4)
 10874                           
 10875                           ;diag.c: 853: checksum[ 0 ] = ( checksum[ 1 ]<<8 ) + checksum[ 2 ];
 10876  11A5  30BC               	movlw	((low (_checksum| (0+256)))& (0+255)+4)
 10877  11A6  0086               	movwf	6
 10878  11A7  3001               	movlw	1	; select bank3/4
 10879  11A8  0087               	movwf	7
 10880  11A9  083A               	movf	(_checksum^(0+384)+2),w
 10881  11AA  0020               	movlb	0	; select bank0
 10882  11AB  00C6               	movwf	??_EOL+1
 10883  11AC  01C5               	clrf	??_EOL
 10884  11AD  3F40               	moviw [0]fsr1
 10885  11AE  0745               	addwf	??_EOL,w
 10886  11AF  0023               	movlb	3	; select bank3
 10887  11B0  00B8               	movwf	_checksum^(0+384)
 10888  11B1  3F41               	moviw [1]fsr1
 10889  11B2  0020               	movlb	0	; select bank0
 10890  11B3  3D46               	addwfc	??_EOL+1,w
 10891  11B4  0023               	movlb	3	; select bank3
 10892  11B5  00B9               	movwf	(_checksum^(0+384)+1)
 10893                           
 10894                           ;diag.c: 856: ui8_b_DResB0_RD = 0x02;
 10895  11B6  3002               	movlw	2
 10896  11B7  0024               	movlb	4	; select bank4
 10897  11B8  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 10898                           
 10899                           ;diag.c: 857: ui8_b_DResB1_RD = 0x00;
 10900  11B9  01B5               	clrf	EOL@ui8_b_DResB1_RD^(0+512)
 10901                           
 10902                           ;diag.c: 858: ui8_b_DResB2_RD = checksum[1] ;
 10903  11BA  0023               	movlb	3	; select bank3
 10904  11BB  083A               	movf	(_checksum^(0+384)+2),w
 10905  11BC  0024               	movlb	4	; select bank4
 10906  11BD  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 10907                           
 10908                           ;diag.c: 859: ui8_b_DResB3_RD = checksum[2] ;
 10909  11BE  0023               	movlb	3	; select bank3
 10910  11BF  083C               	movf	(_checksum^(0+384)+4),w
 10911  11C0  0024               	movlb	4	; select bank4
 10912  11C1  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 10913                           
 10914                           ;diag.c: 860: ui8_b_DResB4_RD = (unsigned int)((sum)>>8) ;
 10915  11C2  0022               	movlb	2	; select bank2
 10916  11C3  082C               	movf	(_sum^(0+256)+1),w
 10917  11C4  0024               	movlb	4	; select bank4
 10918  11C5  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 10919                           
 10920                           ;diag.c: 861: ui8_b_DResB5_RD = (unsigned int)(sum) ;
 10921  11C6  0022               	movlb	2	; select bank2
 10922  11C7  082B               	movf	_sum^(0+256),w
 10923  11C8  0024               	movlb	4	; select bank4
 10924  11C9  00B2               	movwf	EOL@ui8_b_DResB5_RD^(0+512)
 10925                           
 10926                           ;diag.c: 865: if (checksum[0] == sum)
 10927  11CA  0022               	movlb	2	; select bank2
 10928  11CB  082C               	movf	(_sum+1)^(0+256),w
 10929  11CC  0023               	movlb	3	; select bank3
 10930  11CD  0639               	xorwf	(_checksum+1)^(0+384),w
 10931  11CE  1D03               	skipz
 10932  11CF  29D4               	goto	u11395
 10933  11D0  0022               	movlb	2	; select bank2
 10934  11D1  082B               	movf	_sum^(0+256),w
 10935  11D2  0023               	movlb	3	; select bank3
 10936  11D3  0638               	xorwf	_checksum^(0+384),w
 10937  11D4                     u11395:	
 10938  11D4  1D03               	skipz
 10939  11D5  29DA               	goto	l13098
 10940                           
 10941                           ;diag.c: 867: {
 10942                           ;diag.c: 869: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
 10943                           ;diag.c: 870: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10944  11D6  303A               	movlw	58
 10945  11D7  2562  3190         	fcall	PL2	;call to abstracted procedure
 10946  11D9  29DD               	goto	L15
 10947  11DA                     l13098:	
 10948                           ;diag.c: 873: }
 10949                           
 10950                           
 10951                           ;diag.c: 876: else
 10952                           ;diag.c: 877: {
 10953                           ;diag.c: 879: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 10954  11DA  307F               	movlw	127
 10955  11DB  25D9  3190         	fcall	PL18	;call to abstracted procedure
 10956  11DD                     L15:	
 10957  11DD  00C2               	movwf	Transmit_LIN_8Bytes@B7
 10958  11DE  3010               	movlw	16
 10959  11DF  2639               	fcall	_Transmit_LIN_8Bytes
 10960                           
 10961                           ;diag.c: 889: }
 10962                           ;diag.c: 892: ui8_selected_lid = 0x94;
 10963  11E0  3094               	movlw	148
 10964  11E1  0020               	movlb	0	; select bank0
 10965  11E2  00D9               	movwf	_ui8_selected_lid
 10966                           
 10967                           ;diag.c: 896: }
 10968  11E3  0008               	return
 10969  11E4                     l13102:	
 10970                           
 10971                           ;diag.c: 923: {
 10972                           ;diag.c: 925: if( 0x94 == ui8_selected_lid )
 10973  11E4  3094               	movlw	148
 10974  11E5  0659               	xorwf	_ui8_selected_lid,w
 10975  11E6  1D03               	btfss	3,2
 10976  11E7  0008               	return
 10977                           
 10978                           ;diag.c: 927: {
 10979                           ;diag.c: 940: ui8_given_supply = (ui8_b_DResB0_c);
 10980  11E8  0854               	movf	_ui8_b_DResB0_c,w
 10981  11E9  0021               	movlb	1	; select bank1
 10982  11EA  00D6               	movwf	_ui8_given_supply^(0+128)
 10983                           
 10984                           ;diag.c: 942: if (ui8_given_supply == 0)
 10985  11EB  0856               	movf	_ui8_given_supply^(0+128),w
 10986  11EC  1D03               	btfss	3,2
 10987  11ED  29F0               	goto	l13110
 10988                           
 10989                           ;diag.c: 944: {
 10990                           ;diag.c: 946: ui8_given_supply = 0x6F;
 10991  11EE  306F               	movlw	111
 10992  11EF  00D6               	movwf	_ui8_given_supply^(0+128)
 10993  11F0                     l13110:	
 10994                           
 10995                           ;diag.c: 948: }
 10996                           ;diag.c: 951: ui8_b_DResB0_RD = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
 10997  11F0  0022               	movlb	2	; select bank2
 10998  11F1  0836               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
 10999  11F2  0020               	movlb	0	; select bank0
 11000  11F3  00C6               	movwf	??_EOL+1
 11001  11F4  0022               	movlb	2	; select bank2
 11002  11F5  0835               	movf	_ui16_fir_Bat_mittel^(0+256),w
 11003  11F6  0020               	movlb	0	; select bank0
 11004  11F7  00C5               	movwf	??_EOL
 11005  11F8  36C6               	lsrf	??_EOL+1,f
 11006  11F9  0CC5               	rrf	??_EOL,f
 11007  11FA  36C6               	lsrf	??_EOL+1,f
 11008  11FB  0CC5               	rrf	??_EOL,f
 11009  11FC  0845               	movf	??_EOL,w
 11010  11FD  0024               	movlb	4	; select bank4
 11011  11FE  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11012                           
 11013                           ;diag.c: 952: ui8_b_DResB1_RD = 0;
 11014  11FF  01B5               	clrf	EOL@ui8_b_DResB1_RD^(0+512)
 11015                           
 11016                           ;diag.c: 953: ui8_b_DResB2_RD = 0;
 11017  1200  01B6               	clrf	EOL@ui8_b_DResB2_RD^(0+512)
 11018                           
 11019                           ;diag.c: 954: ui8_b_DResB3_RD = 0;
 11020  1201  01B7               	clrf	EOL@ui8_b_DResB3_RD^(0+512)
 11021                           
 11022                           ;diag.c: 955: ui8_b_DResB4_RD = 0;
 11023  1202  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
 11024                           
 11025                           ;diag.c: 956: ui8_b_DResB5_RD = 0;
 11026  1203  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 11027                           
 11028                           ;diag.c: 961: if ((ui8_b_DResB0_RD > ui8_given_supply - 3) && (ui8_b_DResB0_RD < ui8_giv
      +                          en_supply + 3) )
 11029  1204  0021               	movlb	1	; select bank1
 11030  1205  0856               	movf	_ui8_given_supply^(0+128),w
 11031  1206  3EFD               	addlw	253
 11032  1207  0020               	movlb	0	; select bank0
 11033  1208  00C5               	movwf	??_EOL
 11034  1209  30FF               	movlw	255
 11035  120A  1803               	skipnc
 11036  120B  3000               	movlw	0
 11037  120C  00C6               	movwf	??_EOL+1
 11038  120D  3A80               	xorlw	128
 11039  120E  00C7               	movwf	??_EOL+2
 11040  120F  3080               	movlw	128
 11041  1210  0247               	subwf	??_EOL+2,w
 11042  1211  1D03               	skipz
 11043  1212  2A17               	goto	u11425
 11044  1213  0024               	movlb	4	; select bank4
 11045  1214  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
 11046  1215  0020               	movlb	0	; select bank0
 11047  1216  0245               	subwf	??_EOL,w
 11048  1217                     u11425:	
 11049  1217  1803               	skipnc
 11050  1218  2A2F               	goto	l13128
 11051  1219  0021               	movlb	1	; select bank1
 11052  121A  0856               	movf	_ui8_given_supply^(0+128),w
 11053  121B  3E03               	addlw	3
 11054  121C  0020               	movlb	0	; select bank0
 11055  121D  00C5               	movwf	??_EOL
 11056  121E  3000               	movlw	0
 11057  121F  1803               	skipnc
 11058  1220  3001               	movlw	1
 11059  1221  00C6               	movwf	??_EOL+1
 11060  1222  3A80               	xorlw	128
 11061  1223  3C80               	sublw	128
 11062  1224  1D03               	skipz
 11063  1225  2A29               	goto	u11435
 11064  1226  0845               	movf	??_EOL,w
 11065  1227  0024               	movlb	4	; select bank4
 11066  1228  0234               	subwf	EOL@ui8_b_DResB0_RD^(0+512),w
 11067  1229                     u11435:	
 11068  1229  1803               	skipnc
 11069  122A  2A2F               	goto	l13128
 11070                           
 11071                           ;diag.c: 965: {
 11072                           ;diag.c: 967: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
 11073                           ;diag.c: 968: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 11074  122B  303A               	movlw	58
 11075  122C  2562  3190         	fcall	PL2	;call to abstracted procedure
 11076  122E  2A32               	goto	L16
 11077  122F                     l13128:	
 11078                           ;diag.c: 971: }
 11079                           
 11080                           
 11081                           ;diag.c: 974: else
 11082                           ;diag.c: 975: {
 11083                           ;diag.c: 977: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 11084  122F  307F               	movlw	127
 11085  1230  25D9  3190         	fcall	PL18	;call to abstracted procedure
 11086  1232                     L16:	
 11087  1232  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11088  1233  3010               	movlw	16
 11089  1234  2639               	fcall	_Transmit_LIN_8Bytes
 11090                           
 11091                           ;diag.c: 987: }
 11092                           ;diag.c: 990: ui8_selected_lid = 0x95;
 11093  1235  3095               	movlw	149
 11094  1236  0020               	movlb	0	; select bank0
 11095  1237  00D9               	movwf	_ui8_selected_lid
 11096                           
 11097                           ;diag.c: 993: }
 11098  1238  0008               	return
 11099  1239                     l13132:	
 11100                           
 11101                           ;diag.c: 1022: {
 11102                           ;diag.c: 1024: if( 0x95 == ui8_selected_lid )
 11103  1239  3095               	movlw	149
 11104  123A  0659               	xorwf	_ui8_selected_lid,w
 11105  123B  1903               	btfsc	3,2
 11106  123C  2BFD               	goto	l13296
 11107  123D  2C0C               	goto	l13298
 11108  123E                     l13136:	
 11109                           
 11110                           ;diag.c: 1037: {
 11111                           ;diag.c: 1039: InitMotorStop( );
 11112  123E  3182  2296  3190   	fcall	_InitMotorStop
 11113                           
 11114                           ;diag.c: 1042: PEIE = 0;
 11115  1241  130B               	bcf	11,6	;volatile
 11116                           
 11117                           ;diag.c: 1043: GIE = 0;
 11118  1242  138B               	bcf	11,7	;volatile
 11119                           
 11120                           ;diag.c: 1044: CCP1CON = 0x00;
 11121  1243  0025               	movlb	5	; select bank5
 11122  1244  0193               	clrf	19	;volatile
 11123                           
 11124                           ;diag.c: 1050: LATB2 = 1;
 11125  1245  0022               	movlb	2	; select bank2
 11126  1246  150D               	bsf	13,2	;volatile
 11127                           
 11128                           ;diag.c: 1051: LATC3 = 1;
 11129  1247  158E               	bsf	14,3	;volatile
 11130                           
 11131                           ;diag.c: 1054: LATC1 = 0;
 11132  1248  108E               	bcf	14,1	;volatile
 11133                           
 11134                           ;diag.c: 1055: LATC4 = 0;
 11135  1249  120E               	bcf	14,4	;volatile
 11136                           
 11137                           ;diag.c: 1061: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11138  124A  3035               	movlw	53
 11139  124B  0021               	movlb	1	; select bank1
 11140  124C  009D               	movwf	29	;volatile
 11141  124D  0024               	movlb	4	; select bank4
 11142  124E  01A0               	clrf	EOL@_dcnt^(0+512)
 11143  124F  2A52               	goto	l584
 11144  1250                     l585:	
 11145  1250  0000               	nop	;# 
 11146  1251  0000               	nop	;# 
 11147  1252                     l584:	
 11148  1252  0024               	movlb	4	; select bank4
 11149  1253  0BA0               	decfsz	EOL@_dcnt^(0+512),f
 11150  1254  2A50               	goto	l585
 11151  1255  01A1               	clrf	EOL@_dcnt_413^(0+512)
 11152  1256  2A59               	goto	l589
 11153  1257                     l590:	
 11154  1257  0000               	nop	;# 
 11155  1258  0000               	nop	;# 
 11156  1259                     l589:	
 11157  1259  0024               	movlb	4	; select bank4
 11158  125A  0BA1               	decfsz	EOL@_dcnt_413^(0+512),f
 11159  125B  2A57               	goto	l590
 11160  125C  01A2               	clrf	EOL@_dcnt_414^(0+512)
 11161  125D  2A60               	goto	l594
 11162  125E                     l595:	
 11163  125E  0000               	nop	;# 
 11164  125F  0000               	nop	;# 
 11165  1260                     l594:	
 11166  1260  0024               	movlb	4	; select bank4
 11167  1261  0BA2               	decfsz	EOL@_dcnt_414^(0+512),f
 11168  1262  2A5E               	goto	l595
 11169  1263  01A3               	clrf	EOL@_dcnt_415^(0+512)
 11170  1264  2A67               	goto	l599
 11171  1265                     l600:	
 11172  1265  0000               	nop	;# 
 11173  1266  0000               	nop	;# 
 11174  1267                     l599:	
 11175  1267  0024               	movlb	4	; select bank4
 11176  1268  0BA3               	decfsz	EOL@_dcnt_415^(0+512),f
 11177  1269  2A65               	goto	l600
 11178  126A  01A4               	clrf	EOL@_dcnt_416^(0+512)
 11179  126B  2A6E               	goto	l604
 11180  126C                     l605:	
 11181  126C  0000               	nop	;# 
 11182  126D  0000               	nop	;# 
 11183  126E                     l604:	
 11184  126E  0024               	movlb	4	; select bank4
 11185  126F  0BA4               	decfsz	EOL@_dcnt_416^(0+512),f
 11186  1270  2A6C               	goto	l605
 11187  1271  01A5               	clrf	EOL@_dcnt_417^(0+512)
 11188  1272  2A75               	goto	l609
 11189  1273                     l610:	
 11190  1273  0000               	nop	;# 
 11191  1274  0000               	nop	;# 
 11192  1275                     l609:	
 11193  1275  0024               	movlb	4	; select bank4
 11194  1276  0BA5               	decfsz	EOL@_dcnt_417^(0+512),f
 11195  1277  2A73               	goto	l610
 11196                           
 11197                           ;diag.c: 1069: ADC_Wait();
 11198  1278  3182  2268  3190   	fcall	_ADC_Wait
 11199                           
 11200                           ;diag.c: 1070: ( GO_nDONE = 1 );
 11201  127B  0021               	movlb	1	; select bank1
 11202  127C  149D               	bsf	29,1	;volatile
 11203                           
 11204                           ;diag.c: 1071: ui16_IPhase2_bldc_cal.w = ADC_Read() - ui8_current_cal[1];
 11205  127D  3182  2281  3190   	fcall	_ADC_Read
 11206  1280  0831               	movf	?_ADC_Read+1,w
 11207  1281  0022               	movlb	2	; select bank2
 11208  1282  00E5               	movwf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
 11209  1283  0020               	movlb	0	; select bank0
 11210  1284  0830               	movf	?_ADC_Read,w
 11211  1285  0022               	movlb	2	; select bank2
 11212  1286  00E4               	movwf	_ui16_IPhase2_bldc_cal^(0+256)
 11213  1287  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 11214  1288  02E4               	subwf	_ui16_IPhase2_bldc_cal^(0+256),f
 11215  1289  1C03               	skipc
 11216  128A  03E5               	decf	(_ui16_IPhase2_bldc_cal+1)^(0+256),f
 11217                           
 11218                           ;diag.c: 1077: LATC2 = 1;
 11219  128B  150E               	bsf	14,2	;volatile
 11220                           
 11221                           ;diag.c: 1078: LATC1 = 1;
 11222  128C  148E               	bsf	14,1	;volatile
 11223                           
 11224                           ;diag.c: 1081: LATC3 = 0;
 11225  128D  118E               	bcf	14,3	;volatile
 11226                           
 11227                           ;diag.c: 1082: LATC4 = 0;
 11228  128E  120E               	bcf	14,4	;volatile
 11229                           
 11230                           ;diag.c: 1088: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11231  128F  3009               	movlw	9
 11232  1290  0021               	movlb	1	; select bank1
 11233  1291  009D               	movwf	29	;volatile
 11234  1292  0024               	movlb	4	; select bank4
 11235  1293  01A6               	clrf	EOL@_dcnt_418^(0+512)
 11236  1294  2A97               	goto	l614
 11237  1295                     l615:	
 11238  1295  0000               	nop	;# 
 11239  1296  0000               	nop	;# 
 11240  1297                     l614:	
 11241  1297  0024               	movlb	4	; select bank4
 11242  1298  0BA6               	decfsz	EOL@_dcnt_418^(0+512),f
 11243  1299  2A95               	goto	l615
 11244  129A  01A7               	clrf	EOL@_dcnt_419^(0+512)
 11245  129B  2A9E               	goto	l619
 11246  129C                     l620:	
 11247  129C  0000               	nop	;# 
 11248  129D  0000               	nop	;# 
 11249  129E                     l619:	
 11250  129E  0024               	movlb	4	; select bank4
 11251  129F  0BA7               	decfsz	EOL@_dcnt_419^(0+512),f
 11252  12A0  2A9C               	goto	l620
 11253  12A1  01A8               	clrf	EOL@_dcnt_420^(0+512)
 11254  12A2  2AA5               	goto	l624
 11255  12A3                     l625:	
 11256  12A3  0000               	nop	;# 
 11257  12A4  0000               	nop	;# 
 11258  12A5                     l624:	
 11259  12A5  0024               	movlb	4	; select bank4
 11260  12A6  0BA8               	decfsz	EOL@_dcnt_420^(0+512),f
 11261  12A7  2AA3               	goto	l625
 11262  12A8  01A9               	clrf	EOL@_dcnt_421^(0+512)
 11263  12A9  2AAC               	goto	l629
 11264  12AA                     l630:	
 11265  12AA  0000               	nop	;# 
 11266  12AB  0000               	nop	;# 
 11267  12AC                     l629:	
 11268  12AC  0024               	movlb	4	; select bank4
 11269  12AD  0BA9               	decfsz	EOL@_dcnt_421^(0+512),f
 11270  12AE  2AAA               	goto	l630
 11271  12AF  01AA               	clrf	EOL@_dcnt_422^(0+512)
 11272  12B0  2AB3               	goto	l634
 11273  12B1                     l635:	
 11274  12B1  0000               	nop	;# 
 11275  12B2  0000               	nop	;# 
 11276  12B3                     l634:	
 11277  12B3  0024               	movlb	4	; select bank4
 11278  12B4  0BAA               	decfsz	EOL@_dcnt_422^(0+512),f
 11279  12B5  2AB1               	goto	l635
 11280  12B6  01AB               	clrf	EOL@_dcnt_423^(0+512)
 11281  12B7  2ABA               	goto	l639
 11282  12B8                     l640:	
 11283  12B8  0000               	nop	;# 
 11284  12B9  0000               	nop	;# 
 11285  12BA                     l639:	
 11286  12BA  0024               	movlb	4	; select bank4
 11287  12BB  0BAB               	decfsz	EOL@_dcnt_423^(0+512),f
 11288  12BC  2AB8               	goto	l640
 11289                           
 11290                           ;diag.c: 1096: ADC_Wait();
 11291  12BD  3182  2268  3190   	fcall	_ADC_Wait
 11292                           
 11293                           ;diag.c: 1097: ( GO_nDONE = 1 );
 11294  12C0  0021               	movlb	1	; select bank1
 11295  12C1  149D               	bsf	29,1	;volatile
 11296                           
 11297                           ;diag.c: 1098: ui16_IPhase1_bldc_cal.w = ADC_Read() - ui8_current_cal[0];
 11298  12C2  3182  2281  3190   	fcall	_ADC_Read
 11299  12C5  0831               	movf	?_ADC_Read+1,w
 11300  12C6  0022               	movlb	2	; select bank2
 11301  12C7  00E7               	movwf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
 11302  12C8  0020               	movlb	0	; select bank0
 11303  12C9  0830               	movf	?_ADC_Read,w
 11304  12CA  0022               	movlb	2	; select bank2
 11305  12CB  00E6               	movwf	_ui16_IPhase1_bldc_cal^(0+256)
 11306  12CC  0820               	movf	_ui8_current_cal^(0+256),w
 11307  12CD  02E6               	subwf	_ui16_IPhase1_bldc_cal^(0+256),f
 11308  12CE  1C03               	skipc
 11309  12CF  03E7               	decf	(_ui16_IPhase1_bldc_cal+1)^(0+256),f
 11310                           
 11311                           ;diag.c: 1104: LATB1 = 1;
 11312  12D0  148D               	bsf	13,1	;volatile
 11313                           
 11314                           ;diag.c: 1105: LATC4 = 1;
 11315  12D1  160E               	bsf	14,4	;volatile
 11316                           
 11317                           ;diag.c: 1107: LATC1 = 0;
 11318  12D2  108E               	bcf	14,1	;volatile
 11319                           
 11320                           ;diag.c: 1108: LATC3 = 0;
 11321  12D3  118E               	bcf	14,3	;volatile
 11322                           
 11323                           ;diag.c: 1115: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11324  12D4  3011               	movlw	17
 11325  12D5  0021               	movlb	1	; select bank1
 11326  12D6  009D               	movwf	29	;volatile
 11327  12D7  0024               	movlb	4	; select bank4
 11328  12D8  01AC               	clrf	EOL@_dcnt_424^(0+512)
 11329  12D9  2ADC               	goto	l644
 11330  12DA                     l645:	
 11331  12DA  0000               	nop	;# 
 11332  12DB  0000               	nop	;# 
 11333  12DC                     l644:	
 11334  12DC  0024               	movlb	4	; select bank4
 11335  12DD  0BAC               	decfsz	EOL@_dcnt_424^(0+512),f
 11336  12DE  2ADA               	goto	l645
 11337  12DF  01AD               	clrf	EOL@_dcnt_425^(0+512)
 11338  12E0  2AE3               	goto	l649
 11339  12E1                     l650:	
 11340  12E1  0000               	nop	;# 
 11341  12E2  0000               	nop	;# 
 11342  12E3                     l649:	
 11343  12E3  0024               	movlb	4	; select bank4
 11344  12E4  0BAD               	decfsz	EOL@_dcnt_425^(0+512),f
 11345  12E5  2AE1               	goto	l650
 11346  12E6  01AE               	clrf	EOL@_dcnt_426^(0+512)
 11347  12E7  2AEA               	goto	l654
 11348  12E8                     l655:	
 11349  12E8  0000               	nop	;# 
 11350  12E9  0000               	nop	;# 
 11351  12EA                     l654:	
 11352  12EA  0024               	movlb	4	; select bank4
 11353  12EB  0BAE               	decfsz	EOL@_dcnt_426^(0+512),f
 11354  12EC  2AE8               	goto	l655
 11355  12ED  01AF               	clrf	EOL@_dcnt_427^(0+512)
 11356  12EE  2AF1               	goto	l659
 11357  12EF                     l660:	
 11358  12EF  0000               	nop	;# 
 11359  12F0  0000               	nop	;# 
 11360  12F1                     l659:	
 11361  12F1  0024               	movlb	4	; select bank4
 11362  12F2  0BAF               	decfsz	EOL@_dcnt_427^(0+512),f
 11363  12F3  2AEF               	goto	l660
 11364  12F4  01B0               	clrf	EOL@_dcnt_428^(0+512)
 11365  12F5  2AF8               	goto	l664
 11366  12F6                     l665:	
 11367  12F6  0000               	nop	;# 
 11368  12F7  0000               	nop	;# 
 11369  12F8                     l664:	
 11370  12F8  0024               	movlb	4	; select bank4
 11371  12F9  0BB0               	decfsz	EOL@_dcnt_428^(0+512),f
 11372  12FA  2AF6               	goto	l665
 11373  12FB  01B1               	clrf	EOL@_dcnt_429^(0+512)
 11374  12FC  2AFF               	goto	l669
 11375  12FD                     l670:	
 11376  12FD  0000               	nop	;# 
 11377  12FE  0000               	nop	;# 
 11378  12FF                     l669:	
 11379  12FF  0024               	movlb	4	; select bank4
 11380  1300  0BB1               	decfsz	EOL@_dcnt_429^(0+512),f
 11381  1301  2AFD               	goto	l670
 11382                           
 11383                           ;diag.c: 1123: ADC_Wait();
 11384  1302  3182  2268  3190   	fcall	_ADC_Wait
 11385                           
 11386                           ;diag.c: 1124: ( GO_nDONE = 1 );
 11387  1305  0021               	movlb	1	; select bank1
 11388  1306  149D               	bsf	29,1	;volatile
 11389                           
 11390                           ;diag.c: 1125: ui16_IPhase3_bldc_cal.w = ADC_Read() - ui8_current_cal[2];
 11391  1307  3182  2281         	fcall	_ADC_Read
 11392  1309  0831               	movf	?_ADC_Read+1,w
 11393  130A  0022               	movlb	2	; select bank2
 11394  130B  00E3               	movwf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
 11395  130C  0020               	movlb	0	; select bank0
 11396  130D  0830               	movf	?_ADC_Read,w
 11397  130E  0022               	movlb	2	; select bank2
 11398  130F  00E2               	movwf	_ui16_IPhase3_bldc_cal^(0+256)
 11399  1310  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 11400  1311  02E2               	subwf	_ui16_IPhase3_bldc_cal^(0+256),f
 11401  1312  1C03               	skipc
 11402  1313  03E3               	decf	(_ui16_IPhase3_bldc_cal+1)^(0+256),f
 11403                           
 11404                           ;diag.c: 1128: LATC = LATC & 0b11100101;
 11405  1314  30E5               	movlw	229
 11406  1315  058E               	andwf	14,f	;volatile
 11407                           
 11408                           ;diag.c: 1131: CCP1CON = 0x0c;
 11409  1316  300C               	movlw	12
 11410  1317  0025               	movlb	5	; select bank5
 11411  1318  0093               	movwf	19	;volatile
 11412                           
 11413                           ;diag.c: 1132: PEIE = 1;
 11414  1319  170B               	bsf	11,6	;volatile
 11415                           
 11416                           ;diag.c: 1133: GIE = 1;
 11417  131A  178B               	bsf	11,7	;volatile
 11418                           
 11419                           ;diag.c: 1136: phaseCal = 1;
 11420  131B  0021               	movlb	1	; select bank1
 11421  131C  01D7               	clrf	_phaseCal^(0+128)
 11422  131D  0AD7               	incf	_phaseCal^(0+128),f
 11423                           
 11424                           ;diag.c: 1139: break;
 11425  131E  0008               	return
 11426  131F                     l13234:	
 11427                           
 11428                           ;diag.c: 1146: {
 11429                           ;diag.c: 1151: write_eeprom_data( 0x02, ( unsigned char )( ( 0x7800 / ui16_IPhase1_bldc_
      +                          cal.w )>>8 ) );
 11430  131F  25FF  3190         	fcall	PL54	;call to abstracted procedure
 11431  1321  25F9  3190         	fcall	PL52	;call to abstracted procedure
 11432  1323  2720  3190         	fcall	___lwdiv
 11433  1325  0831               	movf	?___lwdiv+1,w
 11434  1326  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11435  1327  3002               	movlw	2
 11436  1328  2707  3190         	fcall	_write_eeprom_data
 11437                           
 11438                           ;diag.c: 1152: write_eeprom_data( 0x03, ( unsigned char )( 0x7800 / ui16_IPhase1_bldc_ca
      +                          l.w ) );
 11439  132A  25FF  3190         	fcall	PL54	;call to abstracted procedure
 11440  132C  25F9  3190         	fcall	PL52	;call to abstracted procedure
 11441  132E  2720  3190         	fcall	___lwdiv
 11442  1330  0830               	movf	?___lwdiv,w
 11443  1331  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11444  1332  3003               	movlw	3
 11445  1333  2707               	fcall	_write_eeprom_data
 11446                           
 11447                           ;diag.c: 1155: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03
      +                           );
 11448  1334  3003               	movlw	3
 11449  1335  3182  225D  3190   	fcall	_read_eeprom_data
 11450  1338  00C5               	movwf	??_EOL
 11451  1339  3002               	movlw	2
 11452  133A  3182  225D  3190   	fcall	_read_eeprom_data
 11453  133D  0021               	movlb	1	; select bank1
 11454  133E  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
 11455  133F  0020               	movlb	0	; select bank0
 11456  1340  0845               	movf	??_EOL,w
 11457  1341  0021               	movlb	1	; select bank1
 11458  1342  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
 11459                           
 11460                           ;diag.c: 1167: ui8_b_DResB0_RD = phaseCal;
 11461                           
 11462                           ;diag.c: 1168: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase1_bldc_cal.w * ui16_I
      +                          _cal_Ph1 )>>8 )>>8 );
 11463                           
 11464                           ;diag.c: 1169: ui8_b_DResB2_RD = ( unsigned char )( ( ui16_IPhase1_bldc_cal.w * ui16_I_c
      +                          al_Ph1 )>>8 );
 11465  1343  261E               	fcall	PL82	;call to abstracted procedure
 11466  1344  0867               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
 11467  1345  0020               	movlb	0	; select bank0
 11468  1346  00B1               	movwf	___wmul@multiplier+1
 11469  1347  0022               	movlb	2	; select bank2
 11470  1348  0866               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
 11471  1349  0020               	movlb	0	; select bank0
 11472  134A  00B0               	movwf	___wmul@multiplier
 11473  134B  0021               	movlb	1	; select bank1
 11474  134C  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 11475  134D  0020               	movlb	0	; select bank0
 11476  134E  00B3               	movwf	___wmul@multiplicand+1
 11477  134F  0021               	movlb	1	; select bank1
 11478  1350  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 11479  1351  0020               	movlb	0	; select bank0
 11480  1352  00B2               	movwf	___wmul@multiplicand
 11481  1353  318E  266A  3190   	fcall	___wmul
 11482  1356  0831               	movf	?___wmul+1,w
 11483  1357  0024               	movlb	4	; select bank4
 11484  1358  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 11485                           
 11486                           ;diag.c: 1170: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph1 >> 8);
 11487  1359  0021               	movlb	1	; select bank1
 11488  135A  086D               	movf	(_ui16_I_cal_Ph1^(0+128)+1),w
 11489  135B  0024               	movlb	4	; select bank4
 11490  135C  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 11491                           
 11492                           ;diag.c: 1171: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph1 );
 11493  135D  0021               	movlb	1	; select bank1
 11494  135E  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 11495                           
 11496                           ;diag.c: 1172: ui8_b_DResB5_RD = 0;
 11497  135F  25A3  3190         	fcall	PL8	;call to abstracted procedure
 11498                           
 11499                           ;diag.c: 1177: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11500                           ;diag.c: 1178: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11501                           ;diag.c: 1179: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11502                           ;diag.c: 1180: ui8_b_DResB5_RD );
 11503  1361  2562  3190         	fcall	PL2	;call to abstracted procedure
 11504  1363  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11505  1364  3010               	movlw	16
 11506  1365  2639               	fcall	_Transmit_LIN_8Bytes
 11507                           
 11508                           ;diag.c: 1182: phaseCal = 2;
 11509  1366  3002               	movlw	2
 11510  1367  00D7               	movwf	_phaseCal^(0+128)
 11511                           
 11512                           ;diag.c: 1184: break;
 11513  1368  0008               	return
 11514  1369                     l13254:	
 11515                           
 11516                           ;diag.c: 1191: {
 11517                           ;diag.c: 1195: write_eeprom_data( 0x04, ( unsigned char )( ( 0x7800 / ui16_IPhase2_bldc_
      +                          cal.w )>>8 ) );
 11518  1369  25ED  3190         	fcall	PL50	;call to abstracted procedure
 11519  136B  2720  3190         	fcall	___lwdiv
 11520  136D  0831               	movf	?___lwdiv+1,w
 11521  136E  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11522  136F  3004               	movlw	4
 11523  1370  2707  3190         	fcall	_write_eeprom_data
 11524                           
 11525                           ;diag.c: 1196: write_eeprom_data( 0x05, ( unsigned char )( 0x7800 / ui16_IPhase2_bldc_ca
      +                          l.w ) );
 11526  1372  25ED  3190         	fcall	PL50	;call to abstracted procedure
 11527  1374  2720  3190         	fcall	___lwdiv
 11528  1376  0830               	movf	?___lwdiv,w
 11529  1377  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11530  1378  3005               	movlw	5
 11531  1379  2707               	fcall	_write_eeprom_data
 11532                           
 11533                           ;diag.c: 1199: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05
      +                           );
 11534  137A  3005               	movlw	5
 11535  137B  3182  225D  3190   	fcall	_read_eeprom_data
 11536  137E  00C5               	movwf	??_EOL
 11537  137F  3004               	movlw	4
 11538  1380  3182  225D  3190   	fcall	_read_eeprom_data
 11539  1383  0021               	movlb	1	; select bank1
 11540  1384  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
 11541  1385  0020               	movlb	0	; select bank0
 11542  1386  0845               	movf	??_EOL,w
 11543  1387  0021               	movlb	1	; select bank1
 11544  1388  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
 11545                           
 11546                           ;diag.c: 1211: ui8_b_DResB0_RD = phaseCal;
 11547                           
 11548                           ;diag.c: 1212: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 )>>8 );
 11549                           
 11550                           ;diag.c: 1213: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 ) );
 11551  1389  261E               	fcall	PL82	;call to abstracted procedure
 11552  138A  0865               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
 11553  138B  0020               	movlb	0	; select bank0
 11554  138C  00B1               	movwf	___wmul@multiplier+1
 11555  138D  0022               	movlb	2	; select bank2
 11556  138E  0864               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
 11557  138F  0020               	movlb	0	; select bank0
 11558  1390  00B0               	movwf	___wmul@multiplier
 11559  1391  0021               	movlb	1	; select bank1
 11560  1392  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 11561  1393  0020               	movlb	0	; select bank0
 11562  1394  00B3               	movwf	___wmul@multiplicand+1
 11563  1395  0021               	movlb	1	; select bank1
 11564  1396  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 11565  1397  0020               	movlb	0	; select bank0
 11566  1398  00B2               	movwf	___wmul@multiplicand
 11567  1399  318E  266A  3190   	fcall	___wmul
 11568  139C  0831               	movf	?___wmul+1,w
 11569  139D  0024               	movlb	4	; select bank4
 11570  139E  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 11571                           
 11572                           ;diag.c: 1214: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph2>>8 );
 11573  139F  0021               	movlb	1	; select bank1
 11574  13A0  086B               	movf	(_ui16_I_cal_Ph2^(0+128)+1),w
 11575  13A1  0024               	movlb	4	; select bank4
 11576  13A2  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 11577                           
 11578                           ;diag.c: 1215: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph2 );
 11579  13A3  0021               	movlb	1	; select bank1
 11580  13A4  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 11581                           
 11582                           ;diag.c: 1216: ui8_b_DResB5_RD = 0;
 11583  13A5  25A3  3190         	fcall	PL8	;call to abstracted procedure
 11584                           
 11585                           ;diag.c: 1221: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11586                           ;diag.c: 1222: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11587                           ;diag.c: 1223: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11588                           ;diag.c: 1224: ui8_b_DResB5_RD );
 11589  13A7  2562  3190         	fcall	PL2	;call to abstracted procedure
 11590  13A9  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11591  13AA  3010               	movlw	16
 11592  13AB  2639               	fcall	_Transmit_LIN_8Bytes
 11593                           
 11594                           ;diag.c: 1227: phaseCal = 3;
 11595  13AC  3003               	movlw	3
 11596  13AD  00D7               	movwf	_phaseCal^(0+128)
 11597                           
 11598                           ;diag.c: 1229: break;
 11599  13AE  0008               	return
 11600  13AF                     l13274:	
 11601                           
 11602                           ;diag.c: 1236: {
 11603                           ;diag.c: 1240: write_eeprom_data( 0x06, ( unsigned char )( ( 0x7800 / ui16_IPhase3_bldc_
      +                          cal.w )>>8 ) );
 11604  13AF  2606  3190         	fcall	PL56	;call to abstracted procedure
 11605  13B1  25F9  3190         	fcall	PL52	;call to abstracted procedure
 11606  13B3  2720  3190         	fcall	___lwdiv
 11607  13B5  0831               	movf	?___lwdiv+1,w
 11608  13B6  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11609  13B7  3006               	movlw	6
 11610  13B8  2707  3190         	fcall	_write_eeprom_data
 11611                           
 11612                           ;diag.c: 1241: write_eeprom_data( 0x07, ( unsigned char )( 0x7800 / ui16_IPhase3_bldc_ca
      +                          l.w ) );
 11613  13BA  2606  3190         	fcall	PL56	;call to abstracted procedure
 11614  13BC  25F9  3190         	fcall	PL52	;call to abstracted procedure
 11615  13BE  2720  3190         	fcall	___lwdiv
 11616  13C0  0830               	movf	?___lwdiv,w
 11617  13C1  00B7               	movwf	write_eeprom_data@ui8_adress_data
 11618  13C2  3007               	movlw	7
 11619  13C3  2707               	fcall	_write_eeprom_data
 11620                           
 11621                           ;diag.c: 1245: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07
      +                           );
 11622  13C4  3007               	movlw	7
 11623  13C5  3182  225D  3190   	fcall	_read_eeprom_data
 11624  13C8  00C5               	movwf	??_EOL
 11625  13C9  3006               	movlw	6
 11626  13CA  3182  225D  3190   	fcall	_read_eeprom_data
 11627  13CD  0021               	movlb	1	; select bank1
 11628  13CE  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
 11629  13CF  0020               	movlb	0	; select bank0
 11630  13D0  0845               	movf	??_EOL,w
 11631  13D1  0021               	movlb	1	; select bank1
 11632  13D2  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
 11633                           
 11634                           ;diag.c: 1258: ui8_b_DResB0_RD = phaseCal;
 11635                           
 11636                           ;diag.c: 1259: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 )>>8 );
 11637                           
 11638                           ;diag.c: 1260: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 ) );
 11639  13D3  261E               	fcall	PL82	;call to abstracted procedure
 11640  13D4  0863               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
 11641  13D5  0020               	movlb	0	; select bank0
 11642  13D6  00B1               	movwf	___wmul@multiplier+1
 11643  13D7  0022               	movlb	2	; select bank2
 11644  13D8  0862               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
 11645  13D9  0020               	movlb	0	; select bank0
 11646  13DA  00B0               	movwf	___wmul@multiplier
 11647  13DB  0021               	movlb	1	; select bank1
 11648  13DC  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 11649  13DD  0020               	movlb	0	; select bank0
 11650  13DE  00B3               	movwf	___wmul@multiplicand+1
 11651  13DF  0021               	movlb	1	; select bank1
 11652  13E0  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 11653  13E1  0020               	movlb	0	; select bank0
 11654  13E2  00B2               	movwf	___wmul@multiplicand
 11655  13E3  318E  266A  3190   	fcall	___wmul
 11656  13E6  0831               	movf	?___wmul+1,w
 11657  13E7  0024               	movlb	4	; select bank4
 11658  13E8  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 11659                           
 11660                           ;diag.c: 1261: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph3>>8 );
 11661  13E9  0021               	movlb	1	; select bank1
 11662  13EA  0869               	movf	(_ui16_I_cal_Ph3^(0+128)+1),w
 11663  13EB  0024               	movlb	4	; select bank4
 11664  13EC  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 11665                           
 11666                           ;diag.c: 1262: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph3 );
 11667  13ED  0021               	movlb	1	; select bank1
 11668  13EE  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 11669                           
 11670                           ;diag.c: 1263: ui8_b_DResB5_RD = 0;
 11671  13EF  25A3  3190         	fcall	PL8	;call to abstracted procedure
 11672                           
 11673                           ;diag.c: 1267: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11674                           ;diag.c: 1268: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11675                           ;diag.c: 1269: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11676                           ;diag.c: 1270: ui8_b_DResB5_RD );
 11677  13F1  2562  3190         	fcall	PL2	;call to abstracted procedure
 11678  13F3  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11679  13F4  3010               	movlw	16
 11680  13F5  2639               	fcall	_Transmit_LIN_8Bytes
 11681                           
 11682                           ;diag.c: 1271: ui8_selected_lid = 0x98;
 11683  13F6  3098               	movlw	152
 11684  13F7  0020               	movlb	0	; select bank0
 11685  13F8  00D9               	movwf	_ui8_selected_lid
 11686                           
 11687                           ;diag.c: 1274: break;
 11688  13F9  0008               	return
 11689  13FA                     l13294:	
 11690                           
 11691                           ;diag.c: 1281: {
 11692                           ;diag.c: 1283: NegativeAnswer(ui8_b_DResLocID_c);
 11693  13FA  0020               	movlb	0	; select bank0
 11694  13FB  0855               	movf	_ui8_b_DResLocID_c,w
 11695  13FC  2E29               	ljmp	_NegativeAnswer
 11696  13FD                     l13296:	
 11697                           ;diag.c: 1285: }
 11698                           ;diag.c: 1287: }
 11699                           
 11700  13FD  0021               	movlb	1	; select bank1
 11701  13FE  0857               	movf	_phaseCal^(0+128),w
 11702                           
 11703                           ; Switch size 1, requested type "space"
 11704                           ; Number of cases is 4, Range of values is 0 to 3
 11705                           ; switch strategies available:
 11706                           ; Name         Instructions Cycles
 11707                           ; simple_byte           13     7 (average)
 11708                           ; direct_byte           14     6 (fixed)
 11709                           ; jumptable            260     6 (fixed)
 11710                           ;	Chosen strategy is simple_byte
 11711  13FF  3A00               	xorlw	0	; case 0
 11712  1400  1903               	skipnz
 11713  1401  2A3E               	goto	l13136
 11714  1402  3A01               	xorlw	1	; case 1
 11715  1403  1903               	skipnz
 11716  1404  2B1F               	goto	l13234
 11717  1405  3A03               	xorlw	3	; case 2
 11718  1406  1903               	skipnz
 11719  1407  2B69               	goto	l13254
 11720  1408  3A01               	xorlw	1	; case 3
 11721  1409  1903               	skipnz
 11722  140A  2BAF               	goto	l13274
 11723  140B  2BFA               	goto	l13294
 11724  140C                     l13298:	
 11725                           
 11726                           ;diag.c: 1293: else
 11727                           ;diag.c: 1294: {
 11728                           ;diag.c: 1296: NegativeAnswer(ui8_b_DResLocID_c);
 11729  140C  0855               	movf	_ui8_b_DResLocID_c,w
 11730  140D  2E29               	ljmp	_NegativeAnswer
 11731  140E                     l13300:	
 11732                           
 11733                           ;diag.c: 1311: {
 11734                           ;diag.c: 1313: if( 0x98 == ui8_selected_lid )
 11735  140E  3098               	movlw	152
 11736  140F  0659               	xorwf	_ui8_selected_lid,w
 11737  1410  1D03               	btfss	3,2
 11738  1411  0008               	return
 11739                           
 11740                           ;diag.c: 1315: {
 11741                           ;diag.c: 1328: wkpoint = ui8_b_DResB0_c;
 11742  1412  0854               	movf	_ui8_b_DResB0_c,w
 11743  1413  0021               	movlb	1	; select bank1
 11744  1414  00EE               	movwf	_wkpoint^(0+128)
 11745                           
 11746                           ;diag.c: 1953: break;
 11747                           
 11748                           ;diag.c: 1334: switch( ui8_b_DResB0_c )
 11749  1415  0020               	movlb	0	; select bank0
 11750  1416  0854               	movf	_ui8_b_DResB0_c,w
 11751                           
 11752                           ; Switch size 1, requested type "space"
 11753                           ; Number of cases is 4, Range of values is 1 to 5
 11754                           ; switch strategies available:
 11755                           ; Name         Instructions Cycles
 11756                           ; simple_byte           13     7 (average)
 11757                           ; direct_byte           19     9 (fixed)
 11758                           ; jumptable            263     9 (fixed)
 11759                           ;	Chosen strategy is simple_byte
 11760  1417  3A01               	xorlw	1	; case 1
 11761  1418  1903               	skipnz
 11762  1419  2C24               	goto	l13304
 11763  141A  3A02               	xorlw	2	; case 3
 11764  141B  1903               	skipnz
 11765  141C  2C42               	goto	l13326
 11766  141D  3A07               	xorlw	7	; case 4
 11767  141E  1903               	skipnz
 11768  141F  2C60               	goto	l13348
 11769  1420  3A01               	xorlw	1	; case 5
 11770  1421  1903               	skipnz
 11771  1422  2C7E               	goto	l13370
 11772  1423  2C9C               	goto	l13392
 11773  1424                     l13304:	
 11774                           
 11775                           ;diag.c: 1342: {
 11776                           ;diag.c: 1344: if( wkpoint == ui8_b_DResB0_c )
 11777  1424  2624  3190         	fcall	PL110	;call to abstracted procedure
 11778  1426  1D03               	skipz
 11779  1427  0008               	return
 11780                           
 11781                           ;diag.c: 1346: {
 11782                           ;diag.c: 1348: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11783  1428  0854               	movf	_ui8_b_DResB0_c,w
 11784  1429  0024               	movlb	4	; select bank4
 11785  142A  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11786                           
 11787                           ;diag.c: 1349: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11788  142B  2745  3190         	fcall	_PWMReadDC
 11789                           
 11790                           ;diag.c: 1350: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11791  142D  25CA               	fcall	PL14	;call to abstracted procedure
 11792  142E  318E  266A  3190   	fcall	___wmul
 11793                           
 11794                           ;diag.c: 1351: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11795                           
 11796                           ;diag.c: 1352: ui8_b_DResB4_RD = 0;
 11797                           
 11798                           ;diag.c: 1353: ui8_b_DResB5_RD = 0;
 11799                           
 11800                           ;diag.c: 1356: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11801  1431  257E  3190         	fcall	PL4	;call to abstracted procedure
 11802  1433  1803               	skipnc
 11803  1434  2C3F               	goto	l13324
 11804  1435  25A8  3190         	fcall	PL10	;call to abstracted procedure
 11805  1437  1803               	skipnc
 11806  1438  2C3F               	goto	l13324
 11807                           
 11808                           ;diag.c: 1358: {
 11809                           ;diag.c: 1360: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 11810  1439  303A               	movlw	58
 11811  143A  2562  3190         	fcall	PL2	;call to abstracted procedure
 11812  143C  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11813  143D  3010               	movlw	16
 11814  143E  2E39               	ljmp	_Transmit_LIN_8Bytes
 11815  143F                     l13324:	
 11816                           ;diag.c: 1363: }
 11817                           
 11818                           
 11819                           ;diag.c: 1366: else
 11820                           ;diag.c: 1367: {
 11821                           ;diag.c: 1369: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11822  143F  25BC  3190         	fcall	PL12	;call to abstracted procedure
 11823  1441  2E39               	ljmp	_Transmit_LIN_8Bytes
 11824  1442                     l13326:	
 11825                           
 11826                           ;diag.c: 1519: {
 11827                           ;diag.c: 1521: if( wkpoint == ui8_b_DResB0_c )
 11828  1442  2624  3190         	fcall	PL110	;call to abstracted procedure
 11829  1444  1D03               	skipz
 11830  1445  0008               	return
 11831                           
 11832                           ;diag.c: 1523: {
 11833                           ;diag.c: 1525: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11834  1446  0854               	movf	_ui8_b_DResB0_c,w
 11835  1447  0024               	movlb	4	; select bank4
 11836  1448  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11837                           
 11838                           ;diag.c: 1526: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11839  1449  2745  3190         	fcall	_PWMReadDC
 11840                           
 11841                           ;diag.c: 1527: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11842  144B  25CA               	fcall	PL14	;call to abstracted procedure
 11843  144C  318E  266A  3190   	fcall	___wmul
 11844                           
 11845                           ;diag.c: 1528: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11846                           
 11847                           ;diag.c: 1529: ui8_b_DResB4_RD = 0;
 11848                           
 11849                           ;diag.c: 1530: ui8_b_DResB5_RD = 0;
 11850                           
 11851                           ;diag.c: 1534: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11852  144F  257E  3190         	fcall	PL4	;call to abstracted procedure
 11853  1451  1803               	skipnc
 11854  1452  2C5D               	goto	l13346
 11855  1453  25A8  3190         	fcall	PL10	;call to abstracted procedure
 11856  1455  1803               	skipnc
 11857  1456  2C5D               	goto	l13346
 11858                           
 11859                           ;diag.c: 1536: {
 11860                           ;diag.c: 1538: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 11861                           ;diag.c: 1539: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 11862                           ;diag.c: 1540: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 11863                           ;diag.c: 1541: ui8_b_DResB4_RD,
 11864                           ;diag.c: 1542: ui8_b_DResB5_RD );
 11865  1457  303A               	movlw	58
 11866  1458  2562  3190         	fcall	PL2	;call to abstracted procedure
 11867  145A  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11868  145B  3010               	movlw	16
 11869  145C  2E39               	ljmp	_Transmit_LIN_8Bytes
 11870  145D                     l13346:	
 11871                           ;diag.c: 1545: }
 11872                           
 11873                           
 11874                           ;diag.c: 1548: else
 11875                           ;diag.c: 1549: {
 11876                           ;diag.c: 1551: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11877  145D  25BC  3190         	fcall	PL12	;call to abstracted procedure
 11878  145F  2E39               	ljmp	_Transmit_LIN_8Bytes
 11879  1460                     l13348:	
 11880                           
 11881                           ;diag.c: 1607: {
 11882                           ;diag.c: 1609: if( wkpoint == ui8_b_DResB0_c )
 11883  1460  2624  3190         	fcall	PL110	;call to abstracted procedure
 11884  1462  1D03               	skipz
 11885  1463  0008               	return
 11886                           
 11887                           ;diag.c: 1611: {
 11888                           ;diag.c: 1613: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11889  1464  0854               	movf	_ui8_b_DResB0_c,w
 11890  1465  0024               	movlb	4	; select bank4
 11891  1466  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11892                           
 11893                           ;diag.c: 1614: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11894  1467  2745  3190         	fcall	_PWMReadDC
 11895                           
 11896                           ;diag.c: 1615: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11897  1469  25CA               	fcall	PL14	;call to abstracted procedure
 11898  146A  318E  266A  3190   	fcall	___wmul
 11899                           
 11900                           ;diag.c: 1616: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11901                           
 11902                           ;diag.c: 1617: ui8_b_DResB4_RD = 0;
 11903                           
 11904                           ;diag.c: 1618: ui8_b_DResB5_RD = 0;
 11905                           
 11906                           ;diag.c: 1622: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11907  146D  257E  3190         	fcall	PL4	;call to abstracted procedure
 11908  146F  1803               	skipnc
 11909  1470  2C7B               	goto	l13368
 11910  1471  25A8  3190         	fcall	PL10	;call to abstracted procedure
 11911  1473  1803               	skipnc
 11912  1474  2C7B               	goto	l13368
 11913                           
 11914                           ;diag.c: 1624: {
 11915                           ;diag.c: 1626: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 11916                           ;diag.c: 1627: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 11917                           ;diag.c: 1628: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 11918                           ;diag.c: 1629: ui8_b_DResB4_RD,
 11919                           ;diag.c: 1630: ui8_b_DResB5_RD );
 11920  1475  303A               	movlw	58
 11921  1476  2562  3190         	fcall	PL2	;call to abstracted procedure
 11922  1478  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11923  1479  3010               	movlw	16
 11924  147A  2E39               	ljmp	_Transmit_LIN_8Bytes
 11925  147B                     l13368:	
 11926                           ;diag.c: 1633: }
 11927                           
 11928                           
 11929                           ;diag.c: 1636: else
 11930                           ;diag.c: 1637: {
 11931                           ;diag.c: 1639: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11932  147B  25BC  3190         	fcall	PL12	;call to abstracted procedure
 11933  147D  2E39               	ljmp	_Transmit_LIN_8Bytes
 11934  147E                     l13370:	
 11935                           
 11936                           ;diag.c: 1693: {
 11937                           ;diag.c: 1695: if( wkpoint == ui8_b_DResB0_c )
 11938  147E  2624  3190         	fcall	PL110	;call to abstracted procedure
 11939  1480  1D03               	skipz
 11940  1481  0008               	return
 11941                           
 11942                           ;diag.c: 1697: {
 11943                           ;diag.c: 1699: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11944  1482  0854               	movf	_ui8_b_DResB0_c,w
 11945  1483  0024               	movlb	4	; select bank4
 11946  1484  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 11947                           
 11948                           ;diag.c: 1700: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11949  1485  2745  3190         	fcall	_PWMReadDC
 11950                           
 11951                           ;diag.c: 1701: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11952  1487  25CA               	fcall	PL14	;call to abstracted procedure
 11953  1488  318E  266A  3190   	fcall	___wmul
 11954                           
 11955                           ;diag.c: 1702: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11956                           
 11957                           ;diag.c: 1703: ui8_b_DResB4_RD = 0;
 11958                           
 11959                           ;diag.c: 1704: ui8_b_DResB5_RD = 0;
 11960                           
 11961                           ;diag.c: 1707: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11962  148B  257E  3190         	fcall	PL4	;call to abstracted procedure
 11963  148D  1803               	skipnc
 11964  148E  2C99               	goto	l13390
 11965  148F  25A8  3190         	fcall	PL10	;call to abstracted procedure
 11966  1491  1803               	skipnc
 11967  1492  2C99               	goto	l13390
 11968                           
 11969                           ;diag.c: 1709: {
 11970                           ;diag.c: 1711: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 11971                           ;diag.c: 1712: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 11972                           ;diag.c: 1713: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 11973                           ;diag.c: 1714: ui8_b_DResB4_RD,
 11974                           ;diag.c: 1715: ui8_b_DResB5_RD );
 11975  1493  303A               	movlw	58
 11976  1494  2562  3190         	fcall	PL2	;call to abstracted procedure
 11977  1496  00C2               	movwf	Transmit_LIN_8Bytes@B7
 11978  1497  3010               	movlw	16
 11979  1498  2E39               	ljmp	_Transmit_LIN_8Bytes
 11980  1499                     l13390:	
 11981                           ;diag.c: 1718: }
 11982                           
 11983                           
 11984                           ;diag.c: 1721: else
 11985                           ;diag.c: 1722: {
 11986                           ;diag.c: 1724: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11987  1499  25BC  3190         	fcall	PL12	;call to abstracted procedure
 11988  149B  2E39               	ljmp	_Transmit_LIN_8Bytes
 11989  149C                     l13392:	
 11990                           
 11991                           ;diag.c: 1948: {
 11992                           ;diag.c: 1952: NegativeAnswer(ui8_b_DResLocID_c);
 11993  149C  0855               	movf	_ui8_b_DResLocID_c,w
 11994  149D  2E29               	ljmp	_NegativeAnswer
 11995  149E                     l13398:	
 11996                           
 11997                           ;diag.c: 1992: {
 11998                           ;diag.c: 1994: if( 0x9f == ui8_selected_lid )
 11999  149E  309F               	movlw	159
 12000  149F  0659               	xorwf	_ui8_selected_lid,w
 12001  14A0  1D03               	btfss	3,2
 12002  14A1  0008               	return
 12003                           
 12004                           ;diag.c: 1996: {
 12005                           ;diag.c: 2000: ui8_failure = ui8_b_DResB0_c;
 12006  14A2  0854               	movf	_ui8_b_DResB0_c,w
 12007  14A3  0022               	movlb	2	; select bank2
 12008  14A4  00EE               	movwf	_ui8_failure^(0+256)
 12009                           
 12010                           ;diag.c: 2005: switch (ui8_failure)
 12011  14A5  2CD3               	goto	l13470
 12012  14A6                     l13402:	
 12013                           
 12014                           ;diag.c: 2098: {
 12015                           ;diag.c: 2102: PWM_Write_Out( 55 );
 12016  14A6  3037               	movlw	55
 12017  14A7  255D  3190         	fcall	_PWM_Write_Out
 12018                           
 12019                           ;diag.c: 2103: ui8_error_Flags.bits.B0 = 0;
 12020  14A9  0021               	movlb	1	; select bank1
 12021  14AA  3037               	movlw	55
 12022  14AB  1066               	bcf	_ui8_error_Flags^(0+128),0
 12023                           
 12024                           ;diag.c: 2104: ui8_error_Flags.bits.B1 = 0;
 12025  14AC  10E6               	bcf	_ui8_error_Flags^(0+128),1
 12026                           
 12027                           ;diag.c: 2105: ui8_error_Flags.bits.B7 = 0;
 12028  14AD  13E6               	bcf	_ui8_error_Flags^(0+128),7
 12029                           
 12030                           ;diag.c: 2106: ui8_error_Flags.bits.B2 = 0;
 12031  14AE  1166               	bcf	_ui8_error_Flags^(0+128),2
 12032                           
 12033                           ;diag.c: 2107: ui8_error_Flags.bits.B3 = 1;
 12034  14AF  15E6               	bsf	_ui8_error_Flags^(0+128),3
 12035                           
 12036                           ;diag.c: 2108: ui8_error_Flags.bits.B4 = 0;
 12037  14B0  1266               	bcf	_ui8_error_Flags^(0+128),4
 12038                           
 12039                           ;diag.c: 2109: ui8_error_Flags.bits.B6 = 0;
 12040  14B1  1366               	bcf	_ui8_error_Flags^(0+128),6
 12041                           
 12042                           ;diag.c: 2110: ui8_error_Flags.bits.B5 = 0;
 12043  14B2  12E6               	bcf	_ui8_error_Flags^(0+128),5
 12044                           
 12045                           ;diag.c: 2111: ui8_b_DResB1_RD = 55;
 12046  14B3  0024               	movlb	4	; select bank4
 12047  14B4  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 12048                           
 12049                           ;diag.c: 2112: ui8_b_DResB0_RD = 8;
 12050  14B5  3008               	movlw	8
 12051  14B6  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 12052                           
 12053                           ;diag.c: 2113: ui8_failure = 3;
 12054  14B7  3003               	movlw	3
 12055  14B8  0022               	movlb	2	; select bank2
 12056  14B9  00EE               	movwf	_ui8_failure^(0+256)
 12057                           
 12058                           ;diag.c: 2114: break;
 12059  14BA  2CDB               	goto	l13472
 12060  14BB                     l13426:	
 12061                           
 12062                           ;diag.c: 2151: {
 12063                           ;diag.c: 2155: PWM_Write_Out( 77 );
 12064  14BB  304D               	movlw	77
 12065  14BC  255D  3190         	fcall	_PWM_Write_Out
 12066                           
 12067                           ;diag.c: 2156: ui8_error_Flags.bits.B0 = 0;
 12068  14BE  0021               	movlb	1	; select bank1
 12069  14BF  304D               	movlw	77
 12070                           
 12071                           ;diag.c: 2157: ui8_error_Flags.bits.B1 = 0;
 12072                           
 12073                           ;diag.c: 2158: ui8_error_Flags.bits.B7 = 0;
 12074                           
 12075                           ;diag.c: 2159: ui8_error_Flags.bits.B2 = 0;
 12076                           
 12077                           ;diag.c: 2160: ui8_error_Flags.bits.B3 = 0;
 12078                           
 12079                           ;diag.c: 2161: ui8_error_Flags.bits.B4 = 0;
 12080                           
 12081                           ;diag.c: 2162: ui8_error_Flags.bits.B6 = 0;
 12082  14C0  2616  3190         	fcall	PL78	;call to abstracted procedure
 12083                           
 12084                           ;diag.c: 2163: ui8_error_Flags.bits.B5 = 1;
 12085  14C2  16E6               	bsf	_ui8_error_Flags^(0+128),5
 12086                           
 12087                           ;diag.c: 2165: ui8_b_DResB1_RD = 77;
 12088  14C3  0024               	movlb	4	; select bank4
 12089  14C4  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 12090                           
 12091                           ;diag.c: 2166: ui8_b_DResB0_RD= 1;
 12092  14C5  01B4               	clrf	EOL@ui8_b_DResB0_RD^(0+512)
 12093  14C6  0AB4               	incf	EOL@ui8_b_DResB0_RD^(0+512),f
 12094                           
 12095                           ;diag.c: 2167: ui8_failure = 1;
 12096  14C7  0022               	movlb	2	; select bank2
 12097  14C8  01EE               	clrf	_ui8_failure^(0+256)
 12098  14C9  0AEE               	incf	_ui8_failure^(0+256),f
 12099                           
 12100                           ;diag.c: 2168: break;
 12101  14CA  2CDB               	goto	l13472
 12102  14CB                     l13450:	
 12103                           
 12104                           ;diag.c: 2205: {
 12105                           ;diag.c: 2209: PWM_Write_Out( 11 );
 12106  14CB  300B               	movlw	11
 12107  14CC  255D  3190         	fcall	_PWM_Write_Out
 12108                           
 12109                           ;diag.c: 2210: ui8_error_Flags.bits.B0 = 0;
 12110  14CE  0021               	movlb	1	; select bank1
 12111                           
 12112                           ;diag.c: 2211: ui8_error_Flags.bits.B1 = 0;
 12113                           
 12114                           ;diag.c: 2212: ui8_error_Flags.bits.B7 = 0;
 12115                           
 12116                           ;diag.c: 2213: ui8_error_Flags.bits.B2 = 0;
 12117                           
 12118                           ;diag.c: 2214: ui8_error_Flags.bits.B3 = 0;
 12119                           
 12120                           ;diag.c: 2215: ui8_error_Flags.bits.B4 = 0;
 12121                           
 12122                           ;diag.c: 2216: ui8_error_Flags.bits.B6 = 0;
 12123  14CF  2616  3190         	fcall	PL78	;call to abstracted procedure
 12124                           
 12125                           ;diag.c: 2217: ui8_error_Flags.bits.B5 = 0;
 12126  14D1  12E6               	bcf	_ui8_error_Flags^(0+128),5
 12127                           
 12128                           ;diag.c: 2218: break;
 12129  14D2  2CDB               	goto	l13472
 12130  14D3                     l13470:	
 12131  14D3  086E               	movf	_ui8_failure^(0+256),w
 12132                           
 12133                           ; Switch size 1, requested type "space"
 12134                           ; Number of cases is 2, Range of values is 2 to 4
 12135                           ; switch strategies available:
 12136                           ; Name         Instructions Cycles
 12137                           ; simple_byte            7     4 (average)
 12138                           ; direct_byte           15     9 (fixed)
 12139                           ; jumptable            263     9 (fixed)
 12140                           ;	Chosen strategy is simple_byte
 12141  14D4  3A02               	xorlw	2	; case 2
 12142  14D5  1903               	skipnz
 12143  14D6  2CBB               	goto	l13426
 12144  14D7  3A06               	xorlw	6	; case 4
 12145  14D8  1903               	skipnz
 12146  14D9  2CA6               	goto	l13402
 12147  14DA  2CCB               	goto	l13450
 12148  14DB                     l13472:	
 12149                           
 12150                           ;diag.c: 2231: ui8_b_DResB2_RD = 0;
 12151  14DB  0024               	movlb	4	; select bank4
 12152  14DC  303A               	movlw	58
 12153  14DD  01B6               	clrf	EOL@ui8_b_DResB2_RD^(0+512)
 12154                           
 12155                           ;diag.c: 2232: ui8_b_DResB3_RD = 0;
 12156  14DE  01B7               	clrf	EOL@ui8_b_DResB3_RD^(0+512)
 12157                           
 12158                           ;diag.c: 2233: ui8_b_DResB4_RD = 0;
 12159  14DF  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
 12160                           
 12161                           ;diag.c: 2234: ui8_b_DResB5_RD = 0;
 12162  14E0  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 12163                           
 12164                           ;diag.c: 2237: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 12165                           ;diag.c: 2238: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 12166                           ;diag.c: 2239: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 12167                           ;diag.c: 2240: ui8_b_DResB5_RD );
 12168  14E1  2562  3190         	fcall	PL2	;call to abstracted procedure
 12169  14E3  00C2               	movwf	Transmit_LIN_8Bytes@B7
 12170  14E4  3010               	movlw	16
 12171  14E5  2E39               	ljmp	_Transmit_LIN_8Bytes
 12172  14E6                     l13476:	
 12173                           ;diag.c: 2243: }
 12174                           
 12175                           
 12176                           ;diag.c: 2271: {
 12177                           ;diag.c: 2273: if( 0xa0 == ui8_selected_lid )
 12178  14E6  30A0               	movlw	160
 12179  14E7  0659               	xorwf	_ui8_selected_lid,w
 12180  14E8  1D03               	btfss	3,2
 12181  14E9  0008               	return
 12182                           
 12183                           ;diag.c: 2275: {
 12184                           ;diag.c: 2285: write_eeprom_data( 0xf4, ui8_b_DResB0_c );
 12185  14EA  0854               	movf	_ui8_b_DResB0_c,w
 12186  14EB  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12187  14EC  30F4               	movlw	244
 12188  14ED  2707  3190         	fcall	_write_eeprom_data
 12189                           
 12190                           ;diag.c: 2286: write_eeprom_data( 0xf5, ui8_b_DResB1_c );
 12191  14EF  0022               	movlb	2	; select bank2
 12192  14F0  0860               	movf	_ui8_b_DResB1_c^(0+256),w
 12193  14F1  0020               	movlb	0	; select bank0
 12194  14F2  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12195  14F3  30F5               	movlw	245
 12196  14F4  2707  3190         	fcall	_write_eeprom_data
 12197                           
 12198                           ;diag.c: 2287: write_eeprom_data( 0xf6, ui8_b_DResB2_c );
 12199  14F6  0022               	movlb	2	; select bank2
 12200  14F7  085F               	movf	_ui8_b_DResB2_c^(0+256),w
 12201  14F8  0020               	movlb	0	; select bank0
 12202  14F9  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12203  14FA  30F6               	movlw	246
 12204  14FB  2707  3190         	fcall	_write_eeprom_data
 12205                           
 12206                           ;diag.c: 2288: write_eeprom_data( 0xf7, ui8_b_DResB3_c );
 12207  14FD  0022               	movlb	2	; select bank2
 12208  14FE  085E               	movf	_ui8_b_DResB3_c^(0+256),w
 12209  14FF  0020               	movlb	0	; select bank0
 12210  1500  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12211  1501  30F7               	movlw	247
 12212  1502  2707  3190         	fcall	_write_eeprom_data
 12213                           
 12214                           ;diag.c: 2289: write_eeprom_data( 0xf8, ui8_b_DResB4_c );
 12215  1504  0022               	movlb	2	; select bank2
 12216  1505  085D               	movf	_ui8_b_DResB4_c^(0+256),w
 12217  1506  0020               	movlb	0	; select bank0
 12218  1507  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12219  1508  30F8               	movlw	248
 12220  1509  2707               	fcall	_write_eeprom_data
 12221                           
 12222                           ;diag.c: 2301: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
 12223  150A  30F4               	movlw	244
 12224  150B  3182  225D  3190   	fcall	_read_eeprom_data
 12225  150E  0024               	movlb	4	; select bank4
 12226  150F  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 12227                           
 12228                           ;diag.c: 2302: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
 12229  1510  30F5               	movlw	245
 12230  1511  3182  225D  3190   	fcall	_read_eeprom_data
 12231  1514  0024               	movlb	4	; select bank4
 12232  1515  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 12233                           
 12234                           ;diag.c: 2303: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
 12235  1516  30F6               	movlw	246
 12236  1517  3182  225D  3190   	fcall	_read_eeprom_data
 12237  151A  0024               	movlb	4	; select bank4
 12238  151B  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 12239                           
 12240                           ;diag.c: 2304: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
 12241  151C  30F7               	movlw	247
 12242  151D  3182  225D  3190   	fcall	_read_eeprom_data
 12243  1520  0024               	movlb	4	; select bank4
 12244  1521  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 12245                           
 12246                           ;diag.c: 2305: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
 12247  1522  30F8               	movlw	248
 12248  1523  3182  225D  3190   	fcall	_read_eeprom_data
 12249  1526  0024               	movlb	4	; select bank4
 12250  1527  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 12251                           
 12252                           ;diag.c: 2306: ui8_b_DResB5_RD = 0;
 12253  1528  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 12254                           
 12255                           ;diag.c: 2309: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DRes
      +                          B2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF))
 12256  1529  0A34               	incf	EOL@ui8_b_DResB0_RD^(0+512),w
 12257  152A  1903               	btfsc	3,2
 12258  152B  2D3C               	goto	l13504
 12259  152C  0A35               	incf	EOL@ui8_b_DResB1_RD^(0+512),w
 12260  152D  1903               	btfsc	3,2
 12261  152E  2D3C               	goto	l13504
 12262  152F  0A36               	incf	EOL@ui8_b_DResB2_RD^(0+512),w
 12263  1530  1903               	btfsc	3,2
 12264  1531  2D3C               	goto	l13504
 12265  1532  0A37               	incf	EOL@ui8_b_DResB3_RD^(0+512),w
 12266  1533  1903               	btfsc	3,2
 12267  1534  2D3C               	goto	l13504
 12268  1535  0A33               	incf	EOL@ui8_b_DResB4_RD^(0+512),w
 12269  1536  1903               	btfsc	3,2
 12270  1537  2D3C               	goto	l13504
 12271                           
 12272                           ;diag.c: 2311: {
 12273                           ;diag.c: 2313: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 12274  1538  303A               	movlw	58
 12275  1539  2562  3190         	fcall	PL2	;call to abstracted procedure
 12276  153B  2D3F               	goto	L17
 12277  153C                     l13504:	
 12278                           ;diag.c: 2316: }
 12279                           
 12280                           
 12281                           ;diag.c: 2319: else
 12282                           ;diag.c: 2320: {
 12283                           ;diag.c: 2322: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF,0xFF
      +                          , 0xFF, 0xFF );
 12284  153C  307F               	movlw	127
 12285  153D  25D9  3190         	fcall	PL18	;call to abstracted procedure
 12286  153F                     L17:	
 12287  153F  00C2               	movwf	Transmit_LIN_8Bytes@B7
 12288  1540  3010               	movlw	16
 12289  1541  2639               	fcall	_Transmit_LIN_8Bytes
 12290                           
 12291                           ;diag.c: 2332: }
 12292                           ;diag.c: 2336: ui8_selected_lid = 0xfa;
 12293  1542  30FA               	movlw	250
 12294  1543  0020               	movlb	0	; select bank0
 12295  1544  00D9               	movwf	_ui8_selected_lid
 12296                           
 12297                           ;diag.c: 2339: }
 12298  1545  0008               	return
 12299  1546                     l13508:	
 12300                           
 12301                           ;diag.c: 2365: {
 12302                           ;diag.c: 2367: if( 0xfa == ui8_selected_lid )
 12303  1546  30FA               	movlw	250
 12304  1547  0659               	xorwf	_ui8_selected_lid,w
 12305  1548  1D03               	btfss	3,2
 12306  1549  0008               	return
 12307                           
 12308                           ;diag.c: 2369: {
 12309                           ;diag.c: 2371: Transmit_LIN_8Bytes( 0x10, 0x3a, ui8_b_DResLocID_c, 0x00, 0x00, 0x00, 0x0
      +                          0, 0x00, 0x00 );
 12310  154A  303A               	movlw	58
 12311  154B  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12312  154C  0855               	movf	_ui8_b_DResLocID_c,w
 12313  154D  260D  3190         	fcall	PL72	;call to abstracted procedure
 12314  154F  2639  3190         	fcall	_Transmit_LIN_8Bytes
 12315                           
 12316                           ;diag.c: 2372: write_eeprom_data(0x55,0x55);
 12317  1551  3055               	movlw	85
 12318  1552  0020               	movlb	0	; select bank0
 12319  1553  00B7               	movwf	write_eeprom_data@ui8_adress_data
 12320  1554  2707               	fcall	_write_eeprom_data
 12321                           
 12322                           ;diag.c: 2373: RC5 = 0;
 12323  1555  0020               	movlb	0	; select bank0
 12324  1556  128E               	bcf	14,5	;volatile
 12325                           
 12326                           ;diag.c: 2375: }
 12327  1557  0008               	return
 12328  1558                     l13516:	
 12329                           
 12330                           ;diag.c: 2399: {
 12331                           ;diag.c: 2405: NegativeAnswer(ui8_selected_lid);
 12332  1558  0859               	movf	_ui8_selected_lid,w
 12333  1559  2E29               	ljmp	_NegativeAnswer
 12334  155A                     l13522:	
 12335                           
 12336                           ;diag.c: 2417: else
 12337                           ;diag.c: 2418: {
 12338                           ;diag.c: 2424: NegativeAnswer(ui8_selected_lid);
 12339  155A  0020               	movlb	0	; select bank0
 12340  155B  0859               	movf	_ui8_selected_lid,w
 12341  155C  2E29               	ljmp	_NegativeAnswer
 12342  155D                     __end_of_EOL:	
 12343  155D                     __ptext29:	
 12344 ;; *************** function _PWM_Write_Out *****************
 12345 ;; Defined at:
 12346 ;;		line 340 in file "../pwm.c"
 12347 ;; Parameters:    Size  Location     Type
 12348 ;;  ui8_DutyCycl    1    wreg     unsigned char 
 12349 ;; Auto vars:     Size  Location     Type
 12350 ;;  ui8_DutyCycl    1   16[BANK0 ] unsigned char 
 12351 ;; Return value:  Size  Location     Type
 12352 ;;                  1    wreg      void 
 12353 ;; Registers used:
 12354 ;;		wreg
 12355 ;; Tracked objects:
 12356 ;;		On entry : 1C/1
 12357 ;;		On exit  : 1F/2
 12358 ;;		Unchanged: 0/0
 12359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12360 ;;      Params:         0       0       0       0       0       0       0       0
 12361 ;;      Locals:         0       1       0       0       0       0       0       0
 12362 ;;      Temps:          0       0       0       0       0       0       0       0
 12363 ;;      Totals:         0       1       0       0       0       0       0       0
 12364 ;;Total ram usage:        1 bytes
 12365 ;; Hardware stack levels used:    1
 12366 ;; Hardware stack levels required when called:    4
 12367 ;; This function calls:
 12368 ;;		Nothing
 12369 ;; This function is called by:
 12370 ;;		_DiagInit
 12371 ;;		_SetDiagAlarm
 12372 ;;		_EOL
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           
 12377                           ;psect for function _PWM_Write_Out
 12378  155D                     _PWM_Write_Out:	
 12379                           
 12380                           ;incstack = 0
 12381                           ; Regs used in _PWM_Write_Out: [wreg]
 12382                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
 12383  155D  0020               	movlb	0	; select bank0
 12384  155E  00B0               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
 12385                           
 12386                           ;pwm.c: 344: ui8_PWMoutvalue = ui8_DutyCycle_Out;
 12387  155F  0022               	movlb	2	; select bank2
 12388  1560  00D1               	movwf	_ui8_PWMoutvalue^(0+256)
 12389  1561  0008               	return
 12390  1562                     __end_of_PWM_Write_Out:	
 12391  1562                     PL2:	
 12392  1562  0020               	movlb	0	; select bank0
 12393  1563  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12394  1564  0855               	movf	_ui8_b_DResLocID_c,w
 12395  1565  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12396  1566  0024               	movlb	4	; select bank4
 12397  1567  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
 12398  1568  0020               	movlb	0	; select bank0
 12399  1569  00BD               	movwf	Transmit_LIN_8Bytes@B2
 12400  156A  0024               	movlb	4	; select bank4
 12401  156B  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
 12402  156C  0020               	movlb	0	; select bank0
 12403  156D  00BE               	movwf	Transmit_LIN_8Bytes@B3
 12404  156E  0024               	movlb	4	; select bank4
 12405  156F  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
 12406  1570  0020               	movlb	0	; select bank0
 12407  1571  00BF               	movwf	Transmit_LIN_8Bytes@B4
 12408  1572  0024               	movlb	4	; select bank4
 12409  1573  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
 12410  1574  0020               	movlb	0	; select bank0
 12411  1575  00C0               	movwf	Transmit_LIN_8Bytes@B5
 12412  1576  0024               	movlb	4	; select bank4
 12413  1577  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
 12414  1578  0020               	movlb	0	; select bank0
 12415  1579  00C1               	movwf	Transmit_LIN_8Bytes@B6
 12416  157A  0024               	movlb	4	; select bank4
 12417  157B  0832               	movf	EOL@ui8_b_DResB5_RD^(0+512),w
 12418  157C  0020               	movlb	0	; select bank0
 12419  157D  0008               	return
 12420  157E                     __end_ofPL2:	
 12421  157E                     PL4:	
 12422  157E  0830               	movf	?___wmul,w
 12423  157F  00C5               	movwf	??_EOL
 12424  1580  0831               	movf	?___wmul+1,w
 12425  1581  00C6               	movwf	??_EOL+1
 12426  1582  36C6               	lsrf	??_EOL+1,f
 12427  1583  0CC5               	rrf	??_EOL,f
 12428  1584  36C6               	lsrf	??_EOL+1,f
 12429  1585  0CC5               	rrf	??_EOL,f
 12430  1586  0845               	movf	??_EOL,w
 12431  1587  0024               	movlb	4	; select bank4
 12432  1588  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
 12433  1589  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
 12434  158A  3E00               	addlw	low (_PWM_trans_table| (0+32768))
 12435  158B  0084               	movwf	4
 12436  158C  3098               	movlw	high (_PWM_trans_table| (0+32768))
 12437  158D  1803               	skipnc
 12438  158E  3E01               	addlw	1
 12439  158F  0085               	movwf	5
 12440  1590  0800               	movf	0,w	;code access
 12441  1591  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
 12442  1592  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
 12443  1593  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 12444  1594  3E03               	addlw	3
 12445  1595  0020               	movlb	0	; select bank0
 12446  1596  00C5               	movwf	??_EOL
 12447  1597  3000               	movlw	0
 12448  1598  1803               	skipnc
 12449  1599  3001               	movlw	1
 12450  159A  00C6               	movwf	??_EOL+1
 12451  159B  3A80               	xorlw	128
 12452  159C  3C80               	sublw	128
 12453  159D  1D03               	skipz
 12454  159E  0008               	return
 12455  159F  0845               	movf	??_EOL,w
 12456  15A0  0024               	movlb	4	; select bank4
 12457  15A1  0236               	subwf	EOL@ui8_b_DResB2_RD^(0+512),w
 12458  15A2  0008               	return
 12459  15A3                     __end_ofPL4:	
 12460  15A3                     PL8:	
 12461  15A3  0024               	movlb	4	; select bank4
 12462  15A4  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
 12463  15A5  303A               	movlw	58
 12464  15A6  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
 12465  15A7  0008               	return
 12466  15A8                     __end_ofPL8:	
 12467  15A8                     PL10:	
 12468  15A8  0024               	movlb	4	; select bank4
 12469  15A9  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
 12470  15AA  3EFD               	addlw	253
 12471  15AB  0020               	movlb	0	; select bank0
 12472  15AC  00C5               	movwf	??_EOL
 12473  15AD  30FF               	movlw	255
 12474  15AE  1803               	skipnc
 12475  15AF  3000               	movlw	0
 12476  15B0  00C6               	movwf	??_EOL+1
 12477  15B1  3A80               	xorlw	128
 12478  15B2  00C7               	movwf	??_EOL+2
 12479  15B3  3080               	movlw	128
 12480  15B4  0247               	subwf	??_EOL+2,w
 12481  15B5  1D03               	skipz
 12482  15B6  0008               	return
 12483  15B7  0024               	movlb	4	; select bank4
 12484  15B8  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
 12485  15B9  0020               	movlb	0	; select bank0
 12486  15BA  0245               	subwf	??_EOL,w
 12487  15BB  0008               	return
 12488  15BC                     __end_ofPL10:	
 12489  15BC                     PL12:	
 12490  15BC  307F               	movlw	127
 12491  15BD  0020               	movlb	0	; select bank0
 12492  15BE  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12493  15BF  0855               	movf	_ui8_b_DResLocID_c,w
 12494  15C0  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12495  15C1  0854               	movf	_ui8_b_DResB0_c,w
 12496  15C2  00BD               	movwf	Transmit_LIN_8Bytes@B2
 12497  15C3  30FF               	movlw	255
 12498  15C4  00BE               	movwf	Transmit_LIN_8Bytes@B3
 12499  15C5  00BF               	movwf	Transmit_LIN_8Bytes@B4
 12500  15C6  00C0               	movwf	Transmit_LIN_8Bytes@B5
 12501  15C7  00C1               	movwf	Transmit_LIN_8Bytes@B6
 12502  15C8  00C2               	movwf	Transmit_LIN_8Bytes@B7
 12503  15C9  3410               	retlw	16
 12504  15CA                     __end_ofPL12:	
 12505  15CA                     PL14:	
 12506  15CA  3689               	lsrf	9,f
 12507  15CB  0024               	movlb	4	; select bank4
 12508  15CC  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
 12509  15CD  0021               	movlb	1	; select bank1
 12510  15CE  0835               	movf	(_ui16_speed_fil+1)^(0+128),w
 12511  15CF  0020               	movlb	0	; select bank0
 12512  15D0  00B1               	movwf	___wmul@multiplier+1
 12513  15D1  0021               	movlb	1	; select bank1
 12514  15D2  0834               	movf	_ui16_speed_fil^(0+128),w
 12515  15D3  0020               	movlb	0	; select bank0
 12516  15D4  00B0               	movwf	___wmul@multiplier
 12517  15D5  3005               	movlw	5
 12518  15D6  00B2               	movwf	___wmul@multiplicand
 12519  15D7  01B3               	clrf	___wmul@multiplicand+1
 12520  15D8  0008               	return
 12521  15D9                     __end_ofPL14:	
 12522  15D9                     PL18:	
 12523  15D9  0020               	movlb	0	; select bank0
 12524  15DA  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12525  15DB  0855               	movf	_ui8_b_DResLocID_c,w
 12526  15DC  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12527  15DD  30FF               	movlw	255
 12528  15DE  00BD               	movwf	Transmit_LIN_8Bytes@B2
 12529  15DF  00BE               	movwf	Transmit_LIN_8Bytes@B3
 12530  15E0  00BF               	movwf	Transmit_LIN_8Bytes@B4
 12531  15E1  00C0               	movwf	Transmit_LIN_8Bytes@B5
 12532  15E2  00C1               	movwf	Transmit_LIN_8Bytes@B6
 12533  15E3  0008               	return
 12534  15E4                     __end_ofPL18:	
 12535  15E4                     PL20:	
 12536  15E4  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12537  15E5  30FF               	movlw	255
 12538  15E6  00BD               	movwf	Transmit_LIN_8Bytes@B2
 12539  15E7  00BE               	movwf	Transmit_LIN_8Bytes@B3
 12540  15E8  00BF               	movwf	Transmit_LIN_8Bytes@B4
 12541  15E9  00C0               	movwf	Transmit_LIN_8Bytes@B5
 12542  15EA  00C1               	movwf	Transmit_LIN_8Bytes@B6
 12543  15EB  00C2               	movwf	Transmit_LIN_8Bytes@B7
 12544  15EC  3410               	retlw	16
 12545  15ED                     __end_ofPL20:	
 12546  15ED                     PL50:	
 12547  15ED  0022               	movlb	2	; select bank2
 12548  15EE  0865               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
 12549  15EF  0020               	movlb	0	; select bank0
 12550  15F0  00B1               	movwf	___lwdiv@divisor+1
 12551  15F1  0022               	movlb	2	; select bank2
 12552  15F2  0864               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
 12553  15F3  0020               	movlb	0	; select bank0
 12554  15F4  00B0               	movwf	___lwdiv@divisor
 12555  15F5  3078               	movlw	120
 12556  15F6  01B2               	clrf	___lwdiv@dividend
 12557  15F7  00B3               	movwf	___lwdiv@dividend+1
 12558  15F8  0008               	return
 12559  15F9                     __end_ofPL50:	
 12560  15F9                     PL52:	
 12561  15F9  0020               	movlb	0	; select bank0
 12562  15FA  00B0               	movwf	___lwdiv@divisor
 12563  15FB  3078               	movlw	120
 12564  15FC  01B2               	clrf	___lwdiv@dividend
 12565  15FD  00B3               	movwf	___lwdiv@dividend+1
 12566  15FE  0008               	return
 12567  15FF                     __end_ofPL52:	
 12568  15FF                     PL54:	
 12569  15FF  0022               	movlb	2	; select bank2
 12570  1600  0867               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
 12571  1601  0020               	movlb	0	; select bank0
 12572  1602  00B1               	movwf	___lwdiv@divisor+1
 12573  1603  0022               	movlb	2	; select bank2
 12574  1604  0866               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
 12575  1605  0008               	return
 12576  1606                     __end_ofPL54:	
 12577  1606                     PL56:	
 12578  1606  0022               	movlb	2	; select bank2
 12579  1607  0863               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
 12580  1608  0020               	movlb	0	; select bank0
 12581  1609  00B1               	movwf	___lwdiv@divisor+1
 12582  160A  0022               	movlb	2	; select bank2
 12583  160B  0862               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
 12584  160C  0008               	return
 12585  160D                     __end_ofPL56:	
 12586  160D                     PL72:	
 12587  160D  00BC               	movwf	Transmit_LIN_8Bytes@B1
 12588  160E  3010               	movlw	16
 12589  160F  01BD               	clrf	Transmit_LIN_8Bytes@B2
 12590  1610  01BE               	clrf	Transmit_LIN_8Bytes@B3
 12591  1611  01BF               	clrf	Transmit_LIN_8Bytes@B4
 12592  1612  01C0               	clrf	Transmit_LIN_8Bytes@B5
 12593  1613  01C1               	clrf	Transmit_LIN_8Bytes@B6
 12594  1614  01C2               	clrf	Transmit_LIN_8Bytes@B7
 12595  1615  0008               	return
 12596  1616                     __end_ofPL72:	
 12597  1616                     PL78:	
 12598  1616  1066               	bcf	_ui8_error_Flags^(0+128),0
 12599  1617  10E6               	bcf	_ui8_error_Flags^(0+128),1
 12600  1618  13E6               	bcf	_ui8_error_Flags^(0+128),7
 12601  1619  1166               	bcf	_ui8_error_Flags^(0+128),2
 12602  161A  11E6               	bcf	_ui8_error_Flags^(0+128),3
 12603  161B  1266               	bcf	_ui8_error_Flags^(0+128),4
 12604  161C  1366               	bcf	_ui8_error_Flags^(0+128),6
 12605  161D  0008               	return
 12606  161E                     __end_ofPL78:	
 12607  161E                     PL82:	
 12608  161E  0857               	movf	_phaseCal^(0+128),w
 12609  161F  0024               	movlb	4	; select bank4
 12610  1620  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
 12611  1621  01B5               	clrf	EOL@ui8_b_DResB1_RD^(0+512)
 12612  1622  0022               	movlb	2	; select bank2
 12613  1623  0008               	return
 12614  1624                     __end_ofPL82:	
 12615  1624                     PL110:	
 12616  1624  0021               	movlb	1	; select bank1
 12617  1625  086E               	movf	_wkpoint^(0+128),w
 12618  1626  0020               	movlb	0	; select bank0
 12619  1627  0654               	xorwf	_ui8_b_DResB0_c,w
 12620  1628  0008               	return
 12621  1629                     __end_ofPL110:	
 12622  1629                     __ptext33:	
 12623 ;; *************** function _NegativeAnswer *****************
 12624 ;; Defined at:
 12625 ;;		line 2436 in file "../diag.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;  LID             1    wreg     unsigned char 
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  LID             1   36[BANK0 ] unsigned char 
 12630 ;; Return value:  Size  Location     Type
 12631 ;;                  1    wreg      void 
 12632 ;; Registers used:
 12633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12634 ;; Tracked objects:
 12635 ;;		On entry : 1D/2
 12636 ;;		On exit  : 1F/1
 12637 ;;		Unchanged: 0/0
 12638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12639 ;;      Params:         0       0       0       0       0       0       0       0
 12640 ;;      Locals:         0       1       0       0       0       0       0       0
 12641 ;;      Temps:          0       0       0       0       0       0       0       0
 12642 ;;      Totals:         0       1       0       0       0       0       0       0
 12643 ;;Total ram usage:        1 bytes
 12644 ;; Hardware stack levels used:    1
 12645 ;; Hardware stack levels required when called:    7
 12646 ;; This function calls:
 12647 ;;		_Transmit_LIN_8Bytes
 12648 ;; This function is called by:
 12649 ;;		_EOL
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653                           
 12654                           ;psect for function _NegativeAnswer
 12655  1629                     _NegativeAnswer:	
 12656                           
 12657                           ;incstack = 0
 12658                           ; Regs used in _NegativeAnswer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12659                           ;NegativeAnswer@LID stored from wreg
 12660  1629  0020               	movlb	0	; select bank0
 12661  162A  00C4               	movwf	NegativeAnswer@LID
 12662                           
 12663                           ;diag.c: 2440: ui8_b_DResB0_c = 0xFF;
 12664  162B  30FF               	movlw	255
 12665  162C  00D4               	movwf	_ui8_b_DResB0_c
 12666                           
 12667                           ;diag.c: 2441: ui8_b_DResB1_c = 0xFF;
 12668  162D  0022               	movlb	2	; select bank2
 12669  162E  00E0               	movwf	_ui8_b_DResB1_c^(0+256)
 12670                           
 12671                           ;diag.c: 2442: ui8_b_DResB2_c = 0xFF;
 12672  162F  00DF               	movwf	_ui8_b_DResB2_c^(0+256)
 12673                           
 12674                           ;diag.c: 2443: ui8_b_DResB3_c = 0xFF;
 12675  1630  00DE               	movwf	_ui8_b_DResB3_c^(0+256)
 12676                           
 12677                           ;diag.c: 2445: ui8_b_DResB5_c = 0xFF;
 12678  1631  00DD               	movwf	_ui8_b_DResB4_c^(0+256)
 12679                           
 12680                           ;diag.c: 2447: Transmit_LIN_8Bytes( 0x10, 0x7F, LID, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
 12681  1632  307F               	movlw	127
 12682  1633  0020               	movlb	0	; select bank0
 12683  1634  00BB               	movwf	Transmit_LIN_8Bytes@B0
 12684  1635  0844               	movf	NegativeAnswer@LID,w
 12685  1636  25E4  3190         	fcall	PL20	;call to abstracted procedure
 12686  1638  2E39               	ljmp	_Transmit_LIN_8Bytes
 12687  1639                     __end_of_NegativeAnswer:	
 12688  1639                     __ptext34:	
 12689 ;; *************** function _Transmit_LIN_8Bytes *****************
 12690 ;; Defined at:
 12691 ;;		line 167 in file "../lin.c"
 12692 ;; Parameters:    Size  Location     Type
 12693 ;;  ID              1    wreg     unsigned char 
 12694 ;;  B0              1   27[BANK0 ] unsigned char 
 12695 ;;  B1              1   28[BANK0 ] unsigned char 
 12696 ;;  B2              1   29[BANK0 ] unsigned char 
 12697 ;;  B3              1   30[BANK0 ] unsigned char 
 12698 ;;  B4              1   31[BANK0 ] unsigned char 
 12699 ;;  B5              1   32[BANK0 ] unsigned char 
 12700 ;;  B6              1   33[BANK0 ] unsigned char 
 12701 ;;  B7              1   34[BANK0 ] unsigned char 
 12702 ;; Auto vars:     Size  Location     Type
 12703 ;;  ID              1   35[BANK0 ] unsigned char 
 12704 ;; Return value:  Size  Location     Type
 12705 ;;                  1    wreg      void 
 12706 ;; Registers used:
 12707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12708 ;; Tracked objects:
 12709 ;;		On entry : 1F/0
 12710 ;;		On exit  : 1F/1
 12711 ;;		Unchanged: 0/0
 12712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12713 ;;      Params:         0       8       0       0       0       0       0       0
 12714 ;;      Locals:         0       1       0       0       0       0       0       0
 12715 ;;      Temps:          0       0       0       0       0       0       0       0
 12716 ;;      Totals:         0       9       0       0       0       0       0       0
 12717 ;;Total ram usage:        9 bytes
 12718 ;; Hardware stack levels used:    1
 12719 ;; Hardware stack levels required when called:    6
 12720 ;; This function calls:
 12721 ;;		__ELINMIntGetPointer
 12722 ;;		__ELINMIntSendMessage
 12723 ;; This function is called by:
 12724 ;;		_EOL
 12725 ;;		_NegativeAnswer
 12726 ;; This function uses a non-reentrant model
 12727 ;;
 12728                           
 12729                           
 12730                           ;psect for function _Transmit_LIN_8Bytes
 12731  1639                     _Transmit_LIN_8Bytes:	
 12732                           
 12733                           ;incstack = 0
 12734                           ; Regs used in _Transmit_LIN_8Bytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12735                           ;Transmit_LIN_8Bytes@ID stored from wreg
 12736  1639  00C3               	movwf	Transmit_LIN_8Bytes@ID
 12737  163A                     l895:	
 12738                           ;lin.c: 179: {
 12739                           ;lin.c: 180: ;
 12740                           
 12741  163A  1DD3               	btfss	__ELINMIntStatus,3
 12742  163B  2E3A               	goto	l895
 12743                           
 12744                           ;lin.c: 181: }
 12745                           ;lin.c: 182: pt = _ELINMIntGetPointer ( 5, 2 );
 12746  163C  3002               	movlw	2
 12747  163D  00B0               	movwf	__ELINMIntGetPointer@_ELINMInt_position
 12748  163E  3005               	movlw	5
 12749  163F  3183  2361  3190   	fcall	__ELINMIntGetPointer
 12750  1642  00D2               	movwf	_pt
 12751                           
 12752                           ;lin.c: 183: *pt++ = B0;
 12753  1643  0086               	movwf	6
 12754  1644  3002               	movlw	2	; select bank4/5
 12755  1645  0087               	movwf	7
 12756  1646  083B               	movf	Transmit_LIN_8Bytes@B0,w
 12757  1647  0081               	movwf	1
 12758  1648  0AD2               	incf	_pt,f
 12759                           
 12760                           ;lin.c: 184: *pt++ = B1;
 12761  1649  0852               	movf	_pt,w
 12762  164A  0086               	movwf	6
 12763  164B  083C               	movf	Transmit_LIN_8Bytes@B1,w
 12764  164C  0081               	movwf	1
 12765  164D  0AD2               	incf	_pt,f
 12766                           
 12767                           ;lin.c: 185: *pt++ = B2;
 12768  164E  0852               	movf	_pt,w
 12769  164F  0086               	movwf	6
 12770  1650  083D               	movf	Transmit_LIN_8Bytes@B2,w
 12771  1651  0081               	movwf	1
 12772  1652  0AD2               	incf	_pt,f
 12773                           
 12774                           ;lin.c: 186: *pt++ = B3;
 12775  1653  0852               	movf	_pt,w
 12776  1654  0086               	movwf	6
 12777  1655  083E               	movf	Transmit_LIN_8Bytes@B3,w
 12778  1656  0081               	movwf	1
 12779  1657  0AD2               	incf	_pt,f
 12780                           
 12781                           ;lin.c: 187: *pt++ = B4;
 12782  1658  0852               	movf	_pt,w
 12783  1659  0086               	movwf	6
 12784  165A  083F               	movf	Transmit_LIN_8Bytes@B4,w
 12785  165B  0081               	movwf	1
 12786  165C  0AD2               	incf	_pt,f
 12787                           
 12788                           ;lin.c: 188: *pt++ = B5;
 12789  165D  0852               	movf	_pt,w
 12790  165E  0086               	movwf	6
 12791  165F  0840               	movf	Transmit_LIN_8Bytes@B5,w
 12792  1660  0081               	movwf	1
 12793  1661  0AD2               	incf	_pt,f
 12794                           
 12795                           ;lin.c: 189: *pt++ = B6;
 12796  1662  0852               	movf	_pt,w
 12797  1663  0086               	movwf	6
 12798  1664  0841               	movf	Transmit_LIN_8Bytes@B6,w
 12799  1665  0081               	movwf	1
 12800  1666  0AD2               	incf	_pt,f
 12801                           
 12802                           ;lin.c: 190: *pt++ = B7;
 12803  1667  0852               	movf	_pt,w
 12804  1668  0086               	movwf	6
 12805  1669  0842               	movf	Transmit_LIN_8Bytes@B7,w
 12806  166A  0081               	movwf	1
 12807  166B  3008               	movlw	8
 12808  166C  0AD2               	incf	_pt,f
 12809                           
 12810                           ;lin.c: 192: _ELINMIntSendMessage ( ID, 8, ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) * ( 100L * 
      +                          1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) + 1L ) * 
      +                          14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
 12811  166D  00B1               	movwf	__ELINMIntSendMessage@_ELINM_size
 12812  166E  3055               	movlw	85
 12813  166F  00B2               	movwf	__ELINMIntSendMessage@_ELINM_fmin
 12814  1670  3077               	movlw	119
 12815  1671  01B3               	clrf	__ELINMIntSendMessage@_ELINM_fmin+1
 12816  1672  00B4               	movwf	__ELINMIntSendMessage@_ELINM_fmax
 12817  1673  01B5               	clrf	__ELINMIntSendMessage@_ELINM_fmax+1
 12818  1674  0843               	movf	Transmit_LIN_8Bytes@ID,w
 12819  1675  267C               	fcall	__ELINMIntSendMessage
 12820                           
 12821                           ;lin.c: 193: if( ( ErrorCode = ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
 12822  1676  0853               	movf	__ELINMIntStatus,w
 12823  1677  0021               	movlb	1	; select bank1
 12824  1678  00D0               	movwf	_ErrorCode^(0+128)
 12825  1679  30F0               	movlw	240
 12826  167A  05D0               	andwf	_ErrorCode^(0+128),f
 12827  167B  0008               	return
 12828  167C                     __end_of_Transmit_LIN_8Bytes:	
 12829  167C                     __ptext35:	
 12830 ;; *************** function __ELINMIntSendMessage *****************
 12831 ;; Defined at:
 12832 ;;		line 1178 in file "../lin.c"
 12833 ;; Parameters:    Size  Location     Type
 12834 ;;  _ELINM_idr      1    wreg     unsigned char 
 12835 ;;  _ELINM_size     1   17[BANK0 ] unsigned char 
 12836 ;;  _ELINM_fmin     2   18[BANK0 ] unsigned int 
 12837 ;;  _ELINM_fmax     2   20[BANK0 ] unsigned int 
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;  _ELINM_idr      1   22[BANK0 ] unsigned char 
 12840 ;;  _ELINM_chk      2   25[BANK0 ] unsigned int 
 12841 ;;  _ELINM_i        1   24[BANK0 ] unsigned char 
 12842 ;;  _ELINM_tid      1   23[BANK0 ] struct ELINMINT_ID
 12843 ;; Return value:  Size  Location     Type
 12844 ;;                  1    wreg      void 
 12845 ;; Registers used:
 12846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12847 ;; Tracked objects:
 12848 ;;		On entry : 1F/0
 12849 ;;		On exit  : 1F/0
 12850 ;;		Unchanged: 0/0
 12851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12852 ;;      Params:         0       5       0       0       0       0       0       0
 12853 ;;      Locals:         0       5       0       0       0       0       0       0
 12854 ;;      Temps:          0       0       0       0       0       0       0       0
 12855 ;;      Totals:         0      10       0       0       0       0       0       0
 12856 ;;Total ram usage:       10 bytes
 12857 ;; Hardware stack levels used:    1
 12858 ;; Hardware stack levels required when called:    5
 12859 ;; This function calls:
 12860 ;;		__ELINMIntCalcIDParity
 12861 ;; This function is called by:
 12862 ;;		_Transmit_LIN_8Bytes
 12863 ;;		__ELINMIntReceiveMessage
 12864 ;; This function uses a non-reentrant model
 12865 ;;
 12866                           
 12867                           
 12868                           ;psect for function __ELINMIntSendMessage
 12869  167C                     __ELINMIntSendMessage:	
 12870                           
 12871                           ;incstack = 0
 12872                           ; Regs used in __ELINMIntSendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12873                           ;__ELINMIntSendMessage@_ELINM_idr stored from wreg
 12874  167C  00B6               	movwf	__ELINMIntSendMessage@_ELINM_idr
 12875                           
 12876                           ;lin.c: 1186: char _ELINM_i;
 12877                           ;lin.c: 1187: ELINMINT_ID _ELINM_tid;
 12878                           ;lin.c: 1188: unsigned int _ELINM_chk;
 12879                           ;lin.c: 1191: _ELINM_tid.ID = _ELINM_idr;
 12880  167D  00B7               	movwf	__ELINMIntSendMessage@_ELINM_tid
 12881                           
 12882                           ;lin.c: 1192: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
 12883  167E  300F               	movlw	15
 12884  167F  05D3               	andwf	__ELINMIntStatus,f
 12885                           
 12886                           ;lin.c: 1194: _ELINMIntTHeaderMin = ( 34L * ( 100L * 1000000L / 19200L ) / 128L ) / 100;
 12887  1680  300D               	movlw	13
 12888  1681  0022               	movlb	2	; select bank2
 12889  1682  00A7               	movwf	__ELINMIntTHeaderMin^(0+256)
 12890  1683  3013               	movlw	19
 12891  1684  01A8               	clrf	(__ELINMIntTHeaderMin+1)^(0+256)
 12892                           
 12893                           ;lin.c: 1195: _ELINMIntTHeaderMax = ( ( ( ( 34L + 1 ) * 14L ) / 10L ) * ( 100L * 1000000
      +                          L / 19200L ) / 128L ) / 100;
 12894  1685  0023               	movlb	3	; select bank3
 12895  1686  00D0               	movwf	__ELINMIntTHeaderMax^(0+384)
 12896  1687  01D1               	clrf	(__ELINMIntTHeaderMax+1)^(0+384)
 12897                           
 12898                           ;lin.c: 1196: _ELINMIntTFrameMin = _ELINM_fmin;
 12899  1688  0020               	movlb	0	; select bank0
 12900  1689  0833               	movf	__ELINMIntSendMessage@_ELINM_fmin+1,w
 12901  168A  0022               	movlb	2	; select bank2
 12902  168B  00AA               	movwf	(__ELINMIntTFrameMin+1)^(0+256)
 12903  168C  0020               	movlb	0	; select bank0
 12904  168D  0832               	movf	__ELINMIntSendMessage@_ELINM_fmin,w
 12905  168E  0022               	movlb	2	; select bank2
 12906  168F  00A9               	movwf	__ELINMIntTFrameMin^(0+256)
 12907                           
 12908                           ;lin.c: 1197: _ELINMIntTFrameMax = _ELINM_fmax;
 12909  1690  0020               	movlb	0	; select bank0
 12910  1691  0835               	movf	__ELINMIntSendMessage@_ELINM_fmax+1,w
 12911  1692  0023               	movlb	3	; select bank3
 12912  1693  00D3               	movwf	(__ELINMIntTFrameMax+1)^(0+384)
 12913  1694  0020               	movlb	0	; select bank0
 12914  1695  0834               	movf	__ELINMIntSendMessage@_ELINM_fmax,w
 12915  1696  0023               	movlb	3	; select bank3
 12916  1697  00D2               	movwf	__ELINMIntTFrameMax^(0+384)
 12917                           
 12918                           ;lin.c: 1207: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
 12919  1698  0020               	movlb	0	; select bank0
 12920  1699  1DD3               	btfss	__ELINMIntStatus,3
 12921  169A  0008               	return
 12922                           
 12923                           ;lin.c: 1210: {
 12924                           ;lin.c: 1229: _ELINMIntMessageBuffer[ 0 ] = 0x55;
 12925  169B  3055               	movlw	85
 12926  169C  0024               	movlb	4	; select bank4
 12927  169D  00D0               	movwf	__ELINMIntMessageBuffer^(0+512)
 12928                           
 12929                           ;lin.c: 1230: _ELINMIntMessageBuffer[ 1 ] = _ELINMIntCalcIDParity( _ELINM_tid );
 12930  169E  0020               	movlb	0	; select bank0
 12931  169F  0837               	movf	__ELINMIntSendMessage@_ELINM_tid,w
 12932  16A0  26E1  3190         	fcall	__ELINMIntCalcIDParity
 12933  16A2  0024               	movlb	4	; select bank4
 12934  16A3  00D1               	movwf	(__ELINMIntMessageBuffer^(0+512)+1)
 12935                           
 12936                           ;lin.c: 1231: _ELINMIntMessageBufferPointer = 0;
 12937  16A4  0021               	movlb	1	; select bank1
 12938  16A5  01D1               	clrf	__ELINMIntMessageBufferPointer^(0+128)
 12939                           
 12940                           ;lin.c: 1238: if( _ELINMIntStatus.ELINMINTSTS.RX )
 12941  16A6  0020               	movlb	0	; select bank0
 12942  16A7  1CD3               	btfss	__ELINMIntStatus,1
 12943  16A8  2EAD               	goto	l9730
 12944                           
 12945                           ;lin.c: 1241: {
 12946                           ;lin.c: 1243: _ELINMIntMessageSize.SIZE = 2;
 12947  16A9  3002               	movlw	2
 12948  16AA  0021               	movlb	1	; select bank1
 12949  16AB  00D3               	movwf	__ELINMIntMessageSize^(0+128)
 12950                           
 12951                           ;lin.c: 1246: }
 12952  16AC  2ED2               	goto	l9746
 12953  16AD                     l9730:	
 12954                           
 12955                           ;lin.c: 1249: else
 12956                           ;lin.c: 1250: {
 12957                           ;lin.c: 1252: _ELINMIntMessageSize.SIZE = _ELINM_size + 2;
 12958  16AD  0831               	movf	__ELINMIntSendMessage@_ELINM_size,w
 12959  16AE  3E02               	addlw	2
 12960  16AF  0021               	movlb	1	; select bank1
 12961  16B0  00D3               	movwf	__ELINMIntMessageSize^(0+128)
 12962                           
 12963                           ;lin.c: 1253: _ELINM_chk = 0;
 12964  16B1  0020               	movlb	0	; select bank0
 12965  16B2  3002               	movlw	2
 12966  16B3  01B9               	clrf	__ELINMIntSendMessage@_ELINM_chk
 12967  16B4  01BA               	clrf	__ELINMIntSendMessage@_ELINM_chk+1
 12968                           
 12969                           ;lin.c: 1256: for( _ELINM_i = 2;
 12970  16B5  00B8               	movwf	__ELINMIntSendMessage@_ELINM_i
 12971  16B6                     l9740:	
 12972                           ;lin.c: 1257: _ELINM_i < _ELINMIntMessageSize.SIZE;
 12973                           ;lin.c: 1258: _ELINM_i++ )
 12974                           
 12975  16B6  0021               	movlb	1	; select bank1
 12976  16B7  0853               	movf	__ELINMIntMessageSize^(0+128),w
 12977  16B8  0020               	movlb	0	; select bank0
 12978  16B9  0238               	subwf	__ELINMIntSendMessage@_ELINM_i,w
 12979  16BA  1803               	btfsc	3,0
 12980  16BB  2EC5               	goto	l9742
 12981                           
 12982                           ;lin.c: 1261: {
 12983                           ;lin.c: 1263: _ELINM_chk += _ELINMIntMessageBuffer[ _ELINM_i ];
 12984  16BC  0838               	movf	__ELINMIntSendMessage@_ELINM_i,w
 12985  16BD  3186  2685  3190   	fcall	PL106	;call to abstracted procedure
 12986  16C0  07B9               	addwf	__ELINMIntSendMessage@_ELINM_chk,f
 12987  16C1  1803               	skipnc
 12988  16C2  0ABA               	incf	__ELINMIntSendMessage@_ELINM_chk+1,f
 12989  16C3  0AB8               	incf	__ELINMIntSendMessage@_ELINM_i,f
 12990  16C4  2EB6               	goto	l9740
 12991  16C5                     l9742:	
 12992                           
 12993                           ;lin.c: 1266: }
 12994                           ;lin.c: 1269: _ELINMIntMessageBuffer[ _ELINMIntMessageSize.SIZE ]
 12995                           ;lin.c: 1270: = ( ~( _ELINM_chk + ( _ELINM_chk>>8 ) ) );
 12996  16C5  0021               	movlb	1	; select bank1
 12997  16C6  0853               	movf	__ELINMIntMessageSize^(0+128),w
 12998  16C7  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
 12999  16C8  0086               	movwf	6
 13000  16C9  3002               	movlw	2	; select bank4/5
 13001  16CA  0087               	movwf	7
 13002  16CB  0020               	movlb	0	; select bank0
 13003  16CC  083A               	movf	__ELINMIntSendMessage@_ELINM_chk+1,w
 13004  16CD  0739               	addwf	__ELINMIntSendMessage@_ELINM_chk,w
 13005  16CE  3AFF               	xorlw	255
 13006  16CF  0081               	movwf	1
 13007                           
 13008                           ;lin.c: 1271: _ELINMIntMessageSize.SIZE++;
 13009  16D0  0021               	movlb	1	; select bank1
 13010  16D1  0AD3               	incf	__ELINMIntMessageSize^(0+128),f
 13011  16D2                     l9746:	
 13012                           
 13013                           ;lin.c: 1274: }
 13014                           ;lin.c: 1277: SENDB = 1;
 13015  16D2  0023               	movlb	3	; select bank3
 13016  16D3  159E               	bsf	30,3	;volatile
 13017                           
 13018                           ;lin.c: 1278: TXREG = 0xFF;
 13019  16D4  30FF               	movlw	255
 13020  16D5  009A               	movwf	26	;volatile
 13021                           
 13022                           ;lin.c: 1279: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
 13023  16D6  300F               	movlw	15
 13024  16D7  0020               	movlb	0	; select bank0
 13025  16D8  05D3               	andwf	__ELINMIntStatus,f
 13026                           
 13027                           ;lin.c: 1280: _ELINMIntStatus.ELINMINTSTS.TX = 1;
 13028  16D9  1453               	bsf	__ELINMIntStatus,0
 13029                           
 13030                           ;lin.c: 1281: _ELINMIntStatus1.ELINMINTSTS.HEADER = 1;
 13031  16DA  0021               	movlb	1	; select bank1
 13032  16DB  14D4               	bsf	__ELINMIntStatus1^(0+128),1
 13033                           
 13034                           ;lin.c: 1282: _ELINMIntStatus1.ELINMINTSTS.FRAME = 1;
 13035  16DC  1554               	bsf	__ELINMIntStatus1^(0+128),2
 13036                           
 13037                           ;lin.c: 1283: _ELINMIntReadBack = 0x00;
 13038  16DD  01D2               	clrf	__ELINMIntReadBack^(0+128)
 13039                           
 13040                           ;lin.c: 1284: _ELINMIntStatus.ELINMINTSTS.IDLE = 0;
 13041  16DE  0020               	movlb	0	; select bank0
 13042  16DF  11D3               	bcf	__ELINMIntStatus,3
 13043  16E0  0008               	return
 13044  16E1                     __end_of__ELINMIntSendMessage:	
 13045  16E1                     __ptext36:	
 13046 ;; *************** function __ELINMIntCalcIDParity *****************
 13047 ;; Defined at:
 13048 ;;		line 1048 in file "../lin.c"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;  ELINM_idtr      1    wreg     struct ELINMINT_ID
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;  ELINM_idtr      1   16[BANK0 ] struct ELINMINT_ID
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      unsigned char 
 13055 ;; Registers used:
 13056 ;;		wreg, status,2, status,0
 13057 ;; Tracked objects:
 13058 ;;		On entry : 1F/0
 13059 ;;		On exit  : 1F/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13062 ;;      Params:         0       0       0       0       0       0       0       0
 13063 ;;      Locals:         0       1       0       0       0       0       0       0
 13064 ;;      Temps:          0       0       0       0       0       0       0       0
 13065 ;;      Totals:         0       1       0       0       0       0       0       0
 13066 ;;Total ram usage:        1 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    4
 13069 ;; This function calls:
 13070 ;;		Nothing
 13071 ;; This function is called by:
 13072 ;;		__ELINMIntSendMessage
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           
 13077                           ;psect for function __ELINMIntCalcIDParity
 13078  16E1                     __ELINMIntCalcIDParity:	
 13079                           
 13080                           ;incstack = 0
 13081                           ; Regs used in __ELINMIntCalcIDParity: [wreg+status,2+status,0]
 13082                           ;__ELINMIntCalcIDParity@ELINM_idtr stored from wreg
 13083  16E1  00B0               	movwf	__ELINMIntCalcIDParity@ELINM_idtr
 13084                           
 13085                           ;lin.c: 1053: ELINM_idtr.ID &= 0x3F;
 13086  16E2  303F               	movlw	63
 13087  16E3  05B0               	andwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13088                           
 13089                           ;lin.c: 1056: if( ELINM_idtr.IDbits.ID0)
 13090  16E4  1C30               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,0
 13091  16E5  2EE8               	goto	l1011
 13092                           
 13093                           ;lin.c: 1059: {
 13094                           ;lin.c: 1061: ELINM_idtr.ID ^= 0x40;
 13095  16E6  3040               	movlw	64
 13096  16E7  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13097  16E8                     l1011:	
 13098                           
 13099                           ;lin.c: 1064: }
 13100                           ;lin.c: 1067: if( ELINM_idtr.IDbits.ID1 )
 13101  16E8  1CB0               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
 13102  16E9  2EEC               	goto	l1012
 13103                           
 13104                           ;lin.c: 1070: {
 13105                           ;lin.c: 1072: ELINM_idtr.ID ^= 0x40;
 13106  16EA  3040               	movlw	64
 13107  16EB  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13108  16EC                     l1012:	
 13109                           
 13110                           ;lin.c: 1075: }
 13111                           ;lin.c: 1078: if( ELINM_idtr.IDbits.ID2 )
 13112  16EC  1D30               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,2
 13113  16ED  2EF0               	goto	l1013
 13114                           
 13115                           ;lin.c: 1081: {
 13116                           ;lin.c: 1083: ELINM_idtr.ID ^= 0x40;
 13117  16EE  3040               	movlw	64
 13118  16EF  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13119  16F0                     l1013:	
 13120                           
 13121                           ;lin.c: 1086: }
 13122                           ;lin.c: 1089: if( ELINM_idtr.IDbits.ID4 )
 13123  16F0  1E30               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
 13124  16F1  2EF4               	goto	l1014
 13125                           
 13126                           ;lin.c: 1092: {
 13127                           ;lin.c: 1094: ELINM_idtr.ID ^= 0x40;
 13128  16F2  3040               	movlw	64
 13129  16F3  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13130  16F4                     l1014:	
 13131                           
 13132                           ;lin.c: 1097: }
 13133                           ;lin.c: 1100: ELINM_idtr.IDbits.ID7 = 1;
 13134  16F4  17B0               	bsf	__ELINMIntCalcIDParity@ELINM_idtr,7
 13135                           
 13136                           ;lin.c: 1103: if( ELINM_idtr.IDbits.ID1 )
 13137  16F5  1CB0               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
 13138  16F6  2EF9               	goto	l1015
 13139                           
 13140                           ;lin.c: 1106: {
 13141                           ;lin.c: 1108: ELINM_idtr.ID ^= 0x80;
 13142  16F7  3080               	movlw	128
 13143  16F8  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13144  16F9                     l1015:	
 13145                           
 13146                           ;lin.c: 1111: }
 13147                           ;lin.c: 1114: if( ELINM_idtr.IDbits.ID3 )
 13148  16F9  1DB0               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,3
 13149  16FA  2EFD               	goto	l1016
 13150                           
 13151                           ;lin.c: 1117: {
 13152                           ;lin.c: 1119: ELINM_idtr.ID ^= 0x80;
 13153  16FB  3080               	movlw	128
 13154  16FC  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13155  16FD                     l1016:	
 13156                           
 13157                           ;lin.c: 1122: }
 13158                           ;lin.c: 1125: if( ELINM_idtr.IDbits.ID4 )
 13159  16FD  1E30               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
 13160  16FE  2F01               	goto	l1017
 13161                           
 13162                           ;lin.c: 1128: {
 13163                           ;lin.c: 1130: ELINM_idtr.ID ^= 0x80;
 13164  16FF  3080               	movlw	128
 13165  1700  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13166  1701                     l1017:	
 13167                           
 13168                           ;lin.c: 1133: }
 13169                           ;lin.c: 1136: if( ELINM_idtr.IDbits.ID5 )
 13170  1701  1EB0               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,5
 13171  1702  2F05               	goto	l1018
 13172                           
 13173                           ;lin.c: 1139: {
 13174                           ;lin.c: 1141: ELINM_idtr.ID ^= 0x80;
 13175  1703  3080               	movlw	128
 13176  1704  06B0               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13177  1705                     l1018:	
 13178                           
 13179                           ;lin.c: 1144: }
 13180                           ;lin.c: 1147: return ( ( BYTE )ELINM_idtr.ID );
 13181  1705  0830               	movf	__ELINMIntCalcIDParity@ELINM_idtr,w
 13182  1706  0008               	return
 13183  1707                     __end_of__ELINMIntCalcIDParity:	
 13184  1707                     __ptext25:	
 13185 ;; *************** function _write_eeprom_data *****************
 13186 ;; Defined at:
 13187 ;;		line 83 in file "../eeprom.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;  ui8_adress      1    wreg     unsigned char 
 13190 ;;  ui8_adress_d    1   23[BANK0 ] unsigned char 
 13191 ;; Auto vars:     Size  Location     Type
 13192 ;;  ui8_adress      1   24[BANK0 ] unsigned char 
 13193 ;; Return value:  Size  Location     Type
 13194 ;;                  1    wreg      void 
 13195 ;; Registers used:
 13196 ;;		wreg
 13197 ;; Tracked objects:
 13198 ;;		On entry : 1F/0
 13199 ;;		On exit  : 1F/3
 13200 ;;		Unchanged: 0/0
 13201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13202 ;;      Params:         0       1       0       0       0       0       0       0
 13203 ;;      Locals:         0       1       0       0       0       0       0       0
 13204 ;;      Temps:          0       0       0       0       0       0       0       0
 13205 ;;      Totals:         0       2       0       0       0       0       0       0
 13206 ;;Total ram usage:        2 bytes
 13207 ;; Hardware stack levels used:    1
 13208 ;; Hardware stack levels required when called:    4
 13209 ;; This function calls:
 13210 ;;		Nothing
 13211 ;; This function is called by:
 13212 ;;		_EOL
 13213 ;; This function uses a non-reentrant model
 13214 ;;
 13215                           
 13216                           
 13217                           ;psect for function _write_eeprom_data
 13218  1707                     _write_eeprom_data:	
 13219                           
 13220                           ;incstack = 0
 13221                           ; Regs used in _write_eeprom_data: [wreg]
 13222                           ;write_eeprom_data@ui8_adress stored from wreg
 13223  1707  00B8               	movwf	write_eeprom_data@ui8_adress
 13224                           
 13225                           ;eeprom.c: 89: EEADRL = ui8_adress;
 13226  1708  0023               	movlb	3	; select bank3
 13227  1709  0091               	movwf	17	;volatile
 13228                           
 13229                           ;eeprom.c: 90: EEDATL = ui8_adress_data;
 13230  170A  0020               	movlb	0	; select bank0
 13231  170B  0837               	movf	write_eeprom_data@ui8_adress_data,w
 13232  170C  0023               	movlb	3	; select bank3
 13233  170D  0093               	movwf	19	;volatile
 13234                           
 13235                           ;eeprom.c: 91: CFGS = 0;
 13236  170E  1315               	bcf	21,6	;volsfr
 13237                           
 13238                           ;eeprom.c: 92: EEPGD = 0;
 13239  170F  1395               	bcf	21,7	;volsfr
 13240                           
 13241                           ;eeprom.c: 93: WREN = 1;
 13242  1710  1515               	bsf	21,2	;volsfr
 13243                           
 13244                           ;eeprom.c: 95: GIE = 0;
 13245  1711  138B               	bcf	11,7	;volatile
 13246                           
 13247                           ;eeprom.c: 96: EECON2 = 0x55;
 13248  1712  3055               	movlw	85
 13249  1713  0096               	movwf	22	;volsfr
 13250                           
 13251                           ;eeprom.c: 97: EECON2 = 0xAA;
 13252  1714  30AA               	movlw	170
 13253  1715  0096               	movwf	22	;volsfr
 13254                           
 13255                           ;eeprom.c: 98: WR = 1;
 13256  1716  1495               	bsf	21,1	;volsfr
 13257                           
 13258                           ;eeprom.c: 99: GIE = 1;
 13259  1717  178B               	bsf	11,7	;volatile
 13260                           
 13261                           ;eeprom.c: 100: WREN = 0;
 13262  1718  1115               	bcf	21,2	;volsfr
 13263  1719                     l751:	
 13264                           ;eeprom.c: 103: while( WR )
 13265                           
 13266  1719  0023               	movlb	3	; select bank3
 13267  171A  1895               	btfsc	21,1	;volsfr
 13268  171B  2F1D               	goto	l752
 13269  171C  0008               	return
 13270  171D                     l752:	
 13271  171D  0000               	nop	;# 
 13272  171E  0000               	nop	;# 
 13273  171F  2F19               	goto	l751
 13274  1720                     __end_of_write_eeprom_data:	
 13275  1720                     __ptext28:	
 13276 ;; *************** function ___lwdiv *****************
 13277 ;; Defined at:
 13278 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13279 ;; Parameters:    Size  Location     Type
 13280 ;;  divisor         2   16[BANK0 ] unsigned int 
 13281 ;;  dividend        2   18[BANK0 ] unsigned int 
 13282 ;; Auto vars:     Size  Location     Type
 13283 ;;  quotient        2   21[BANK0 ] unsigned int 
 13284 ;;  counter         1   20[BANK0 ] unsigned char 
 13285 ;; Return value:  Size  Location     Type
 13286 ;;                  2   16[BANK0 ] unsigned int 
 13287 ;; Registers used:
 13288 ;;		wreg, status,2, status,0
 13289 ;; Tracked objects:
 13290 ;;		On entry : 1F/0
 13291 ;;		On exit  : 1F/0
 13292 ;;		Unchanged: 0/0
 13293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13294 ;;      Params:         0       4       0       0       0       0       0       0
 13295 ;;      Locals:         0       3       0       0       0       0       0       0
 13296 ;;      Temps:          0       0       0       0       0       0       0       0
 13297 ;;      Totals:         0       7       0       0       0       0       0       0
 13298 ;;Total ram usage:        7 bytes
 13299 ;; Hardware stack levels used:    1
 13300 ;; Hardware stack levels required when called:    4
 13301 ;; This function calls:
 13302 ;;		Nothing
 13303 ;; This function is called by:
 13304 ;;		_EOL
 13305 ;;		_interrrupt_bldc
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           
 13310                           ;psect for function ___lwdiv
 13311  1720                     ___lwdiv:	
 13312                           
 13313                           ;incstack = 0
 13314                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13315  1720  01B5               	clrf	___lwdiv@quotient
 13316  1721  01B6               	clrf	___lwdiv@quotient+1
 13317  1722  0830               	movf	___lwdiv@divisor,w
 13318  1723  0431               	iorwf	___lwdiv@divisor+1,w
 13319  1724  1903               	btfsc	3,2
 13320  1725  2F40               	goto	l10368
 13321  1726  01B4               	clrf	___lwdiv@counter
 13322  1727                     L18:	
 13323  1727  0AB4               	incf	___lwdiv@counter,f
 13324  1728  1BB1               	btfsc	___lwdiv@divisor+1,7
 13325  1729  2F2D               	goto	l10356
 13326  172A  35B0               	lslf	___lwdiv@divisor,f
 13327  172B  0DB1               	rlf	___lwdiv@divisor+1,f
 13328  172C  2F27               	goto	L18
 13329  172D                     l10356:	
 13330  172D  35B5               	lslf	___lwdiv@quotient,f
 13331  172E  0DB6               	rlf	___lwdiv@quotient+1,f
 13332  172F  0831               	movf	___lwdiv@divisor+1,w
 13333  1730  0233               	subwf	___lwdiv@dividend+1,w
 13334  1731  1D03               	skipz
 13335  1732  2F35               	goto	u8065
 13336  1733  0830               	movf	___lwdiv@divisor,w
 13337  1734  0232               	subwf	___lwdiv@dividend,w
 13338  1735                     u8065:	
 13339  1735  1C03               	skipc
 13340  1736  2F3C               	goto	l10364
 13341  1737  0830               	movf	___lwdiv@divisor,w
 13342  1738  02B2               	subwf	___lwdiv@dividend,f
 13343  1739  0831               	movf	___lwdiv@divisor+1,w
 13344  173A  3BB3               	subwfb	___lwdiv@dividend+1,f
 13345  173B  1435               	bsf	___lwdiv@quotient,0
 13346  173C                     l10364:	
 13347  173C  36B1               	lsrf	___lwdiv@divisor+1,f
 13348  173D  0CB0               	rrf	___lwdiv@divisor,f
 13349  173E  0BB4               	decfsz	___lwdiv@counter,f
 13350  173F  2F2D               	goto	l10356
 13351  1740                     l10368:	
 13352  1740  0836               	movf	___lwdiv@quotient+1,w
 13353  1741  00B1               	movwf	?___lwdiv+1
 13354  1742  0835               	movf	___lwdiv@quotient,w
 13355  1743  00B0               	movwf	?___lwdiv
 13356  1744  0008               	return
 13357  1745                     __end_of___lwdiv:	
 13358  1745                     __ptext30:	
 13359 ;; *************** function _PWMReadDC *****************
 13360 ;; Defined at:
 13361 ;;		line 361 in file "../pwm.c"
 13362 ;; Parameters:    Size  Location     Type
 13363 ;;		None
 13364 ;; Auto vars:     Size  Location     Type
 13365 ;;		None
 13366 ;; Return value:  Size  Location     Type
 13367 ;;                  1    wreg      unsigned char 
 13368 ;; Registers used:
 13369 ;;		wreg, status,2, status,0, pclath, cstack
 13370 ;; Tracked objects:
 13371 ;;		On entry : 1F/4
 13372 ;;		On exit  : 1F/2
 13373 ;;		Unchanged: 0/0
 13374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13375 ;;      Params:         0       0       0       0       0       0       0       0
 13376 ;;      Locals:         0       0       0       0       0       0       0       0
 13377 ;;      Temps:          0       0       0       0       0       0       0       0
 13378 ;;      Totals:         0       0       0       0       0       0       0       0
 13379 ;;Total ram usage:        0 bytes
 13380 ;; Hardware stack levels used:    1
 13381 ;; Hardware stack levels required when called:    5
 13382 ;; This function calls:
 13383 ;;		___ltdiv
 13384 ;;		___tmul
 13385 ;; This function is called by:
 13386 ;;		_EOL
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           
 13391                           ;psect for function _PWMReadDC
 13392  1745                     _PWMReadDC:	
 13393                           
 13394                           ;pwm.c: 366: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
 13395                           
 13396                           ;incstack = 0
 13397                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
 13398  1745  0022               	movlb	2	; select bank2
 13399  1746  0823               	movf	_ui16_PWM_Freq_In^(0+256),w
 13400  1747  0020               	movlb	0	; select bank0
 13401  1748  00B9               	movwf	___ltdiv@divisor
 13402  1749  0022               	movlb	2	; select bank2
 13403  174A  0824               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
 13404  174B  0020               	movlb	0	; select bank0
 13405  174C  00BA               	movwf	___ltdiv@divisor+1
 13406  174D  01BB               	clrf	___ltdiv@divisor+2
 13407  174E  0023               	movlb	3	; select bank3
 13408  174F  086A               	movf	_ui16_Duty_Cycle_In^(0+384),w
 13409  1750  0020               	movlb	0	; select bank0
 13410  1751  00B0               	movwf	___tmul@multiplier
 13411  1752  0023               	movlb	3	; select bank3
 13412  1753  086B               	movf	(_ui16_Duty_Cycle_In+1)^(0+384),w
 13413  1754  0020               	movlb	0	; select bank0
 13414  1755  00B1               	movwf	___tmul@multiplier+1
 13415  1756  30C8               	movlw	200
 13416  1757  01B2               	clrf	___tmul@multiplier+2
 13417  1758  00B3               	movwf	___tmul@multiplicand
 13418  1759  01B4               	clrf	___tmul@multiplicand+1
 13419  175A  01B5               	clrf	___tmul@multiplicand+2
 13420  175B  27B5  3190         	fcall	___tmul
 13421  175D  0830               	movf	?___tmul,w
 13422  175E  00BC               	movwf	___ltdiv@dividend
 13423  175F  0831               	movf	?___tmul+1,w
 13424  1760  00BD               	movwf	___ltdiv@dividend+1
 13425  1761  0832               	movf	?___tmul+2,w
 13426  1762  00BE               	movwf	___ltdiv@dividend+2
 13427  1763  2783  3190         	fcall	___ltdiv
 13428  1765  0839               	movf	?___ltdiv,w
 13429  1766  0021               	movlb	1	; select bank1
 13430  1767  00CA               	movwf	_ui8_PWMinDC_sav^(0+128)
 13431                           
 13432                           ;pwm.c: 368: if( ui8_PWMinDC_sav == 0 )
 13433  1768  084A               	movf	_ui8_PWMinDC_sav^(0+128),w
 13434  1769  1D03               	btfss	3,2
 13435  176A  2F76               	goto	l12410
 13436                           
 13437                           ;pwm.c: 370: {
 13438                           ;pwm.c: 374: ui8_PWMin_failCnt++;
 13439  176B  0022               	movlb	2	; select bank2
 13440  176C  3005               	movlw	5
 13441  176D  0ACE               	incf	_ui8_PWMin_failCnt^(0+256),f
 13442                           
 13443                           ;pwm.c: 376: if( ui8_PWMin_failCnt >= 5 )
 13444  176E  024E               	subwf	_ui8_PWMin_failCnt^(0+256),w
 13445  176F  1C03               	skipc
 13446  1770  2F7F               	goto	l12416
 13447                           
 13448                           ;pwm.c: 378: {
 13449                           ;pwm.c: 380: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
 13450  1771  0021               	movlb	1	; select bank1
 13451  1772  084A               	movf	_ui8_PWMinDC_sav^(0+128),w
 13452  1773  0022               	movlb	2	; select bank2
 13453  1774  00CF               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
 13454  1775  2F7F               	goto	l12416
 13455  1776                     l12410:	
 13456                           
 13457                           ;pwm.c: 391: else
 13458                           ;pwm.c: 392: {
 13459                           ;pwm.c: 396: ui8_PWMin_failCnt = 0;
 13460  1776  0022               	movlb	2	; select bank2
 13461  1777  01CE               	clrf	_ui8_PWMin_failCnt^(0+256)
 13462                           
 13463                           ;pwm.c: 399: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
 13464  1778  0021               	movlb	1	; select bank1
 13465  1779  084A               	movf	_ui8_PWMinDC_sav^(0+128),w
 13466  177A  0022               	movlb	2	; select bank2
 13467  177B  00CF               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
 13468                           
 13469                           ;pwm.c: 401: ui16_Duty_Cycle_In = 0;
 13470  177C  0023               	movlb	3	; select bank3
 13471  177D  01EA               	clrf	_ui16_Duty_Cycle_In^(0+384)
 13472  177E  01EB               	clrf	(_ui16_Duty_Cycle_In+1)^(0+384)
 13473  177F                     l12416:	
 13474                           
 13475                           ;pwm.c: 403: }
 13476                           ;pwm.c: 408: return ( 200 - ui8_Duty_Cycle_In_Ratio );
 13477  177F  0022               	movlb	2	; select bank2
 13478  1780  084F               	movf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
 13479  1781  3CC8               	sublw	200
 13480  1782  0008               	return
 13481  1783                     __end_of_PWMReadDC:	
 13482  1783                     __ptext32:	
 13483 ;; *************** function ___ltdiv *****************
 13484 ;; Defined at:
 13485 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ltdiv.c"
 13486 ;; Parameters:    Size  Location     Type
 13487 ;;  divisor         3   25[BANK0 ] unsigned um
 13488 ;;  dividend        3   28[BANK0 ] unsigned um
 13489 ;; Auto vars:     Size  Location     Type
 13490 ;;  quotient        3   31[BANK0 ] unsigned um
 13491 ;;  counter         1   34[BANK0 ] unsigned char 
 13492 ;; Return value:  Size  Location     Type
 13493 ;;                  3   25[BANK0 ] unsigned um
 13494 ;; Registers used:
 13495 ;;		wreg, status,2, status,0
 13496 ;; Tracked objects:
 13497 ;;		On entry : 1F/0
 13498 ;;		On exit  : 1F/0
 13499 ;;		Unchanged: 0/0
 13500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13501 ;;      Params:         0       6       0       0       0       0       0       0
 13502 ;;      Locals:         0       4       0       0       0       0       0       0
 13503 ;;      Temps:          0       0       0       0       0       0       0       0
 13504 ;;      Totals:         0      10       0       0       0       0       0       0
 13505 ;;Total ram usage:       10 bytes
 13506 ;; Hardware stack levels used:    1
 13507 ;; Hardware stack levels required when called:    4
 13508 ;; This function calls:
 13509 ;;		Nothing
 13510 ;; This function is called by:
 13511 ;;		_PWMReadDC
 13512 ;; This function uses a non-reentrant model
 13513 ;;
 13514                           
 13515                           
 13516                           ;psect for function ___ltdiv
 13517  1783                     ___ltdiv:	
 13518                           
 13519                           ;incstack = 0
 13520                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
 13521  1783  01BF               	clrf	___ltdiv@quotient
 13522  1784  01C0               	clrf	___ltdiv@quotient+1
 13523  1785  01C1               	clrf	___ltdiv@quotient+2
 13524  1786  083B               	movf	___ltdiv@divisor+2,w
 13525  1787  043A               	iorwf	___ltdiv@divisor+1,w
 13526  1788  0439               	iorwf	___ltdiv@divisor,w
 13527  1789  1903               	skipnz
 13528  178A  2FAE               	goto	l12378
 13529  178B  01C2               	clrf	___ltdiv@counter
 13530  178C                     L19:	
 13531  178C  0AC2               	incf	___ltdiv@counter,f
 13532  178D  1BBB               	btfsc	___ltdiv@divisor+2,7
 13533  178E  2F93               	goto	l12366
 13534  178F  35B9               	lslf	___ltdiv@divisor,f
 13535  1790  0DBA               	rlf	___ltdiv@divisor+1,f
 13536  1791  0DBB               	rlf	___ltdiv@divisor+2,f
 13537  1792  2F8C               	goto	L19
 13538  1793                     l12366:	
 13539  1793  35BF               	lslf	___ltdiv@quotient,f
 13540  1794  0DC0               	rlf	___ltdiv@quotient+1,f
 13541  1795  0DC1               	rlf	___ltdiv@quotient+2,f
 13542  1796  083B               	movf	___ltdiv@divisor+2,w
 13543  1797  023E               	subwf	___ltdiv@dividend+2,w
 13544  1798  1D03               	skipz
 13545  1799  2FA0               	goto	u10635
 13546  179A  083A               	movf	___ltdiv@divisor+1,w
 13547  179B  023D               	subwf	___ltdiv@dividend+1,w
 13548  179C  1D03               	skipz
 13549  179D  2FA0               	goto	u10635
 13550  179E  0839               	movf	___ltdiv@divisor,w
 13551  179F  023C               	subwf	___ltdiv@dividend,w
 13552  17A0                     u10635:	
 13553  17A0  1C03               	skipc
 13554  17A1  2FA9               	goto	l12374
 13555  17A2  0839               	movf	___ltdiv@divisor,w
 13556  17A3  02BC               	subwf	___ltdiv@dividend,f
 13557  17A4  083A               	movf	___ltdiv@divisor+1,w
 13558  17A5  3BBD               	subwfb	___ltdiv@dividend+1,f
 13559  17A6  083B               	movf	___ltdiv@divisor+2,w
 13560  17A7  3BBE               	subwfb	___ltdiv@dividend+2,f
 13561  17A8  143F               	bsf	___ltdiv@quotient,0
 13562  17A9                     l12374:	
 13563  17A9  36BB               	lsrf	___ltdiv@divisor+2,f
 13564  17AA  0CBA               	rrf	___ltdiv@divisor+1,f
 13565  17AB  0CB9               	rrf	___ltdiv@divisor,f
 13566  17AC  0BC2               	decfsz	___ltdiv@counter,f
 13567  17AD  2F93               	goto	l12366
 13568  17AE                     l12378:	
 13569  17AE  083F               	movf	___ltdiv@quotient,w
 13570  17AF  00B9               	movwf	?___ltdiv
 13571  17B0  0840               	movf	___ltdiv@quotient+1,w
 13572  17B1  00BA               	movwf	?___ltdiv+1
 13573  17B2  0841               	movf	___ltdiv@quotient+2,w
 13574  17B3  00BB               	movwf	?___ltdiv+2
 13575  17B4  0008               	return
 13576  17B5                     __end_of___ltdiv:	
 13577  17B5                     __ptext31:	
 13578 ;; *************** function ___tmul *****************
 13579 ;; Defined at:
 13580 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul24.c"
 13581 ;; Parameters:    Size  Location     Type
 13582 ;;  multiplier      3   16[BANK0 ] unsigned um
 13583 ;;  multiplicand    3   19[BANK0 ] unsigned um
 13584 ;; Auto vars:     Size  Location     Type
 13585 ;;  product         3   22[BANK0 ] unsigned um
 13586 ;; Return value:  Size  Location     Type
 13587 ;;                  3   16[BANK0 ] unsigned um
 13588 ;; Registers used:
 13589 ;;		wreg, status,2, status,0
 13590 ;; Tracked objects:
 13591 ;;		On entry : 1F/0
 13592 ;;		On exit  : 1F/0
 13593 ;;		Unchanged: 0/0
 13594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13595 ;;      Params:         0       6       0       0       0       0       0       0
 13596 ;;      Locals:         0       3       0       0       0       0       0       0
 13597 ;;      Temps:          0       0       0       0       0       0       0       0
 13598 ;;      Totals:         0       9       0       0       0       0       0       0
 13599 ;;Total ram usage:        9 bytes
 13600 ;; Hardware stack levels used:    1
 13601 ;; Hardware stack levels required when called:    4
 13602 ;; This function calls:
 13603 ;;		Nothing
 13604 ;; This function is called by:
 13605 ;;		_PWMReadDC
 13606 ;; This function uses a non-reentrant model
 13607 ;;
 13608                           
 13609                           
 13610                           ;psect for function ___tmul
 13611  17B5                     ___tmul:	
 13612                           
 13613                           ;incstack = 0
 13614                           ; Regs used in ___tmul: [wreg+status,2+status,0]
 13615  17B5  01B6               	clrf	___tmul@product
 13616  17B6  01B7               	clrf	___tmul@product+1
 13617  17B7  01B8               	clrf	___tmul@product+2
 13618  17B8                     l2065:	
 13619  17B8  1C30               	btfss	___tmul@multiplier,0
 13620  17B9  2FC0               	goto	l9866
 13621  17BA  0833               	movf	___tmul@multiplicand,w
 13622  17BB  07B6               	addwf	___tmul@product,f
 13623  17BC  0834               	movf	___tmul@multiplicand+1,w
 13624  17BD  3DB7               	addwfc	___tmul@product+1,f
 13625  17BE  0835               	movf	___tmul@multiplicand+2,w
 13626  17BF  3DB8               	addwfc	___tmul@product+2,f
 13627  17C0                     l9866:	
 13628  17C0  35B3               	lslf	___tmul@multiplicand,f
 13629  17C1  0DB4               	rlf	___tmul@multiplicand+1,f
 13630  17C2  0DB5               	rlf	___tmul@multiplicand+2,f
 13631  17C3  36B2               	lsrf	___tmul@multiplier+2,f
 13632  17C4  0CB1               	rrf	___tmul@multiplier+1,f
 13633  17C5  0CB0               	rrf	___tmul@multiplier,f
 13634  17C6  0832               	movf	___tmul@multiplier+2,w
 13635  17C7  0431               	iorwf	___tmul@multiplier+1,w
 13636  17C8  0430               	iorwf	___tmul@multiplier,w
 13637  17C9  1D03               	skipz
 13638  17CA  2FB8               	goto	l2065
 13639  17CB  0836               	movf	___tmul@product,w
 13640  17CC  00B0               	movwf	?___tmul
 13641  17CD  0837               	movf	___tmul@product+1,w
 13642  17CE  00B1               	movwf	?___tmul+1
 13643  17CF  0838               	movf	___tmul@product+2,w
 13644  17D0  00B2               	movwf	?___tmul+2
 13645  17D1  0008               	return
 13646  17D2                     __end_of___tmul:	
 13647  17D2                     __ptext27:	
 13648 ;; *************** function _cksum *****************
 13649 ;; Defined at:
 13650 ;;		line 6 in file "../cksum.c"
 13651 ;; Parameters:    Size  Location     Type
 13652 ;;		None
 13653 ;; Auto vars:     Size  Location     Type
 13654 ;;  addr            2   22[BANK0 ] unsigned short 
 13655 ;;  sum             2   20[BANK0 ] unsigned int 
 13656 ;;  counter         2   18[BANK0 ] unsigned int 
 13657 ;; Return value:  Size  Location     Type
 13658 ;;                  2   16[BANK0 ] unsigned int 
 13659 ;; Registers used:
 13660 ;;		wreg, status,2, status,0
 13661 ;; Tracked objects:
 13662 ;;		On entry : 1F/0
 13663 ;;		On exit  : 1F/0
 13664 ;;		Unchanged: 0/0
 13665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13666 ;;      Params:         0       2       0       0       0       0       0       0
 13667 ;;      Locals:         0       6       0       0       0       0       0       0
 13668 ;;      Temps:          0       0       0       0       0       0       0       0
 13669 ;;      Totals:         0       8       0       0       0       0       0       0
 13670 ;;Total ram usage:        8 bytes
 13671 ;; Hardware stack levels used:    1
 13672 ;; Hardware stack levels required when called:    4
 13673 ;; This function calls:
 13674 ;;		Nothing
 13675 ;; This function is called by:
 13676 ;;		_EOL
 13677 ;; This function uses a non-reentrant model
 13678 ;;
 13679                           
 13680                           
 13681                           ;psect for function _cksum
 13682  17D2                     _cksum:	
 13683  17D2  30FE               	movlw	254
 13684                           
 13685                           ;cksum.c: 7: unsigned int sum;
 13686                           ;cksum.c: 8: unsigned short addr;
 13687                           ;cksum.c: 9: unsigned int counter;
 13688                           ;cksum.c: 11: addr = 0L;
 13689                           
 13690                           ;incstack = 0
 13691                           ; Regs used in _cksum: [wreg+status,2+status,0]
 13692  17D3  01B6               	clrf	cksum@addr
 13693  17D4  01B7               	clrf	cksum@addr+1
 13694                           
 13695                           ;cksum.c: 12: sum = 0;
 13696  17D5  01B4               	clrf	cksum@sum
 13697  17D6  01B5               	clrf	cksum@sum+1
 13698                           
 13699                           ;cksum.c: 13: counter = ( (8192 - 2 - 1) - 0L + 1 );
 13700  17D7  00B2               	movwf	cksum@counter
 13701  17D8  301F               	movlw	31
 13702  17D9  00B3               	movwf	cksum@counter+1
 13703  17DA                     l1973:	
 13704                           ;cksum.c: 15: while(counter--){
 13705                           
 13706  17DA  3001               	movlw	1
 13707  17DB  02B2               	subwf	cksum@counter,f
 13708  17DC  3000               	movlw	0
 13709  17DD  3BB3               	subwfb	cksum@counter+1,f
 13710  17DE  0F32               	incfsz	cksum@counter,w
 13711  17DF  2FE3               	goto	l9974
 13712  17E0  0A33               	incf	cksum@counter+1,w
 13713  17E1  1903               	btfsc	3,2
 13714  17E2  2FFB               	goto	l9988
 13715  17E3                     l9974:	
 13716                           
 13717                           ;cksum.c: 22: sum += (EEADRL=(addr)&0xff, EEADRH=(addr)>>8, WREN=0, EECON1 |= 0x80, RD=1
      +                          , __nop(), __nop(), (EEDATH << 8) | EEDATA);
 13718  17E3  0836               	movf	cksum@addr,w
 13719  17E4  0023               	movlb	3	; select bank3
 13720  17E5  0091               	movwf	17	;volatile
 13721  17E6  0020               	movlb	0	; select bank0
 13722  17E7  0837               	movf	cksum@addr+1,w
 13723  17E8  0023               	movlb	3	; select bank3
 13724  17E9  0092               	movwf	18	;volatile
 13725  17EA  1115               	bcf	21,2	;volsfr
 13726  17EB  1795               	bsf	21,7	;volsfr
 13727  17EC  1415               	bsf	21,0	;volsfr
 13728  17ED  0000               	nop
 13729  17EE  0000               	nop
 13730  17EF  0023               	movlb	3	; select bank3
 13731  17F0  0813               	movf	19,w	;volatile
 13732  17F1  0020               	movlb	0	; select bank0
 13733  17F2  07B4               	addwf	cksum@sum,f
 13734  17F3  0023               	movlb	3	; select bank3
 13735  17F4  0814               	movf	20,w	;volatile
 13736  17F5  0020               	movlb	0	; select bank0
 13737  17F6  3DB5               	addwfc	cksum@sum+1,f
 13738                           
 13739                           ;cksum.c: 31: addr++;
 13740  17F7  0AB6               	incf	cksum@addr,f
 13741  17F8  1903               	skipnz
 13742  17F9  0AB7               	incf	cksum@addr+1,f
 13743  17FA  2FDA               	goto	l1973
 13744  17FB                     l9988:	
 13745                           
 13746                           ;cksum.c: 32: }
 13747                           ;cksum.c: 33: return sum;
 13748  17FB  0835               	movf	cksum@sum+1,w
 13749  17FC  00B1               	movwf	?_cksum+1
 13750  17FD  0834               	movf	cksum@sum,w
 13751  17FE  00B0               	movwf	?_cksum
 13752  17FF  0008               	return
 13753  1800                     __end_of_cksum:	
 13754                           
 13755                           	psect	text41
 13756  0865                     __ptext41:	
 13757 ;; *************** function _BVH2_Appl_Layer *****************
 13758 ;; Defined at:
 13759 ;;		line 331 in file "../T_Link/BVH2_Appl_Layer.c"
 13760 ;; Parameters:    Size  Location     Type
 13761 ;;		None
 13762 ;; Auto vars:     Size  Location     Type
 13763 ;;  Sb3_Sum1        2   28[BANK4 ] short 
 13764 ;;  Sb3_Product1    2   15[BANK4 ] unsigned short 
 13765 ;;  Sb4_PI_sum      2   30[BANK4 ] short 
 13766 ;;  Sb2_Switch2     2   25[BANK4 ] unsigned short 
 13767 ;;  Sb2_Error       2   23[BANK4 ] short 
 13768 ;;  Sb2_Switch5     2   17[BANK4 ] unsigned short 
 13769 ;;  Sb1_Logical_    1   27[BANK4 ] unsigned char 
 13770 ;;  Sb2_Logical_    1   22[BANK4 ] unsigned char 
 13771 ;;  Sb1_Logical_    1   21[BANK4 ] unsigned char 
 13772 ;;  Sb1_Logical_    1   20[BANK4 ] unsigned char 
 13773 ;;  Cb24_Reset      1   19[BANK4 ] unsigned char 
 13774 ;;  Sb1_Logical_    1    8[BANK4 ] unsigned char 
 13775 ;; Return value:  Size  Location     Type
 13776 ;;                  1    wreg      void 
 13777 ;; Registers used:
 13778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13779 ;; Tracked objects:
 13780 ;;		On entry : 1F/1
 13781 ;;		On exit  : 1F/2
 13782 ;;		Unchanged: 0/0
 13783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13784 ;;      Params:         0       0       0       0       0       0       0       0
 13785 ;;      Locals:         0       0       0       0       0      32       0       0
 13786 ;;      Temps:          0       6       0       0       0       0       0       0
 13787 ;;      Totals:         0       6       0       0       0      32       0       0
 13788 ;;Total ram usage:       38 bytes
 13789 ;; Hardware stack levels used:    1
 13790 ;; Hardware stack levels required when called:    5
 13791 ;; This function calls:
 13792 ;;		_Cb1_Current_An___High_node_fcn1
 13793 ;;		_Cb34_PWM_Detection_node_fcn1
 13794 ;;		_Cb44_Pic_etat_monitor_node_fcn1
 13795 ;;		_Cb56_UbatHandling_node_fcn2
 13796 ;;		___aldiv
 13797 ;;		___lmul
 13798 ;;		___wmul
 13799 ;; This function is called by:
 13800 ;;		_main
 13801 ;; This function uses a non-reentrant model
 13802 ;;
 13803                           
 13804                           
 13805                           ;psect for function _BVH2_Appl_Layer
 13806  0865                     _BVH2_Appl_Layer:	
 13807                           
 13808                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;
 13809                           ;BVH2_Appl_Layer.c: 335: static UInt16 Cb19_Counter = 0;
 13810                           ;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;
 13811                           ;BVH2_Appl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;
 13812                           ;BVH2_Appl_Layer.c: 338: static UInt8 Cb24_RestartCounter = 0;
 13813                           ;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;
 13814                           ;BVH2_Appl_Layer.c: 340: static UInt8 Cb9_StateCnt = 0;
 13815                           ;BVH2_Appl_Layer.c: 342: static struct tag_SIBFS_Current_Analysis_low_ SIBFS_Current_Ana
      +                          lysis_low_b = {
 13816                           ;BVH2_Appl_Layer.c: 343: 0 ,
 13817                           
 13818                           ;incstack = 0
 13819                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13820  0865  28A4               	goto	l11398
 13821  0866                     l11338:	
 13822                           
 13823                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
 13824  0866  3000               	movlw	0
 13825  0867  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 13826  0868  3033               	movlw	51
 13827  0869                     L21:	
 13828  0869  1903               	skipnz
 13829  086A  0226               	subwf	_Cb44_StateCnt^(0+128),w
 13830  086B  1C03               	skipc
 13831  086C  2877               	goto	l11346
 13832                           
 13833                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
 13834  086D  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13835  086E  39F8               	andlw	-8
 13836  086F  3805               	iorlw	5
 13837  0870  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13838                           
 13839                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
 13840  0871  0022               	movlb	2	; select bank2
 13841  0872  01C5               	clrf	_Cb44_oShutoff^(0+256)
 13842  0873                     l11344:	
 13843                           
 13844                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
 13845  0873  0021               	movlb	1	; select bank1
 13846  0874  01A6               	clrf	_Cb44_StateCnt^(0+128)
 13847  0875  01A7               	clrf	(_Cb44_StateCnt+1)^(0+128)
 13848                           
 13849                           ;BVH2_Appl_Layer.c: 422: }
 13850  0876  28B9               	goto	l11400
 13851  0877                     l11346:	
 13852                           
 13853                           ;BVH2_Appl_Layer.c: 423: else {
 13854                           ;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 1 ;
 13855  0877  0021               	movlb	1	; select bank1
 13856  0878  0826               	movf	_Cb44_StateCnt^(0+128),w
 13857  0879  3E01               	addlw	1
 13858  087A  00A6               	movwf	_Cb44_StateCnt^(0+128)
 13859  087B  3000               	movlw	0
 13860  087C  3D27               	addwfc	(_Cb44_StateCnt+1)^(0+128),w
 13861  087D  00A7               	movwf	(_Cb44_StateCnt+1)^(0+128)
 13862  087E  28B9               	goto	l11400
 13863  087F                     l11348:	
 13864                           
 13865                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
 13866  087F  2630  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
 13867                           
 13868                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
 13869  0881  0C47               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13870  0882  27E8  3188         	fcall	PL86	;call to abstracted procedure
 13871  0884  1D03               	btfss	3,2
 13872  0885  2877               	goto	l11346
 13873  0886  28B9               	goto	l11400
 13874  0887                     l11354:	
 13875                           
 13876                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
 13877  0887  2630  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
 13878                           
 13879                           ;BVH2_Appl_Layer.c: 445: break;
 13880  0889  28B9               	goto	l11400
 13881  088A                     l11356:	
 13882                           
 13883                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
 13884  088A  3000               	movlw	0
 13885  088B  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 13886  088C  3010               	movlw	16
 13887  088D  2869               	goto	L21
 13888  088E                     l11372:	
 13889                           
 13890                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
 13891  088E  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13892  088F  39F8               	andlw	-8
 13893  0890  3803               	iorlw	3
 13894  0891  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13895                           
 13896                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
 13897  0892  0022               	movlb	2	; select bank2
 13898  0893  01C5               	clrf	_Cb44_oShutoff^(0+256)
 13899                           
 13900                           ;BVH2_Appl_Layer.c: 484: }
 13901  0894  28B9               	goto	l11400
 13902  0895                     l11386:	
 13903                           
 13904                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
 13905  0895  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13906  0896  39F8               	andlw	-8
 13907  0897  3806               	iorlw	6
 13908  0898  28A2               	goto	L22
 13909  0899                     l1577:	
 13910                           ;BVH2_Appl_Layer.c: 515: }
 13911                           ;BVH2_Appl_Layer.c: 516: default: {
 13912                           
 13913                           
 13914                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
 13915  0899  1AC7               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
 13916  089A  28B9               	goto	l11400
 13917                           
 13918                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
 13919  089B  16C7               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
 13920                           
 13921                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
 13922  089C  086F               	movf	_ui8_ResetMatlab^(0+128),w
 13923  089D  1903               	btfsc	3,2
 13924  089E  28B9               	goto	l11400
 13925                           
 13926                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
 13927  089F  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13928  08A0  39F8               	andlw	-8
 13929  08A1  3804               	iorlw	4
 13930  08A2                     L22:	
 13931  08A2  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13932  08A3  2873               	goto	l11344
 13933  08A4                     l11398:	
 13934  08A4  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13935  08A5  3907               	andlw	7
 13936                           
 13937                           ; Switch size 1, requested type "space"
 13938                           ; Number of cases is 6, Range of values is 1 to 6
 13939                           ; switch strategies available:
 13940                           ; Name         Instructions Cycles
 13941                           ; simple_byte           19    10 (average)
 13942                           ; direct_byte           21     9 (fixed)
 13943                           ; jumptable            263     9 (fixed)
 13944                           ;	Chosen strategy is simple_byte
 13945  08A6  3A01               	xorlw	1	; case 1
 13946  08A7  1903               	skipnz
 13947  08A8  2895               	goto	l11386
 13948  08A9  3A03               	xorlw	3	; case 2
 13949  08AA  1903               	skipnz
 13950  08AB  288E               	goto	l11372
 13951  08AC  3A01               	xorlw	1	; case 3
 13952  08AD  1903               	skipnz
 13953  08AE  2887               	goto	l11354
 13954  08AF  3A07               	xorlw	7	; case 4
 13955  08B0  1903               	skipnz
 13956  08B1  2866               	goto	l11338
 13957  08B2  3A01               	xorlw	1	; case 5
 13958  08B3  1903               	skipnz
 13959  08B4  287F               	goto	l11348
 13960  08B5  3A03               	xorlw	3	; case 6
 13961  08B6  1903               	skipnz
 13962  08B7  288A               	goto	l11356
 13963  08B8  2899               	goto	l1577
 13964  08B9                     l11400:	
 13965                           
 13966                           ;BVH2_Appl_Layer.c: 538: Cb34_idPWM = ui8_PWM_dc_mat;
 13967  08B9  0021               	movlb	1	; select bank1
 13968  08BA  084F               	movf	_ui8_PWM_dc_mat^(0+128),w
 13969  08BB  00C5               	movwf	_Cb34_idPWM^(0+128)
 13970                           
 13971                           ;BVH2_Appl_Layer.c: 543: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
 13972  08BC  1A48               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
 13973  08BD  28C2               	goto	l11424
 13974  08BE  28D0               	goto	l1580
 13975  08BF                     l11406:	
 13976                           
 13977                           ;BVH2_Appl_Layer.c: 549: Cb34_PWM_Detection_node_fcn1();
 13978  08BF  267F  3188         	fcall	_Cb34_PWM_Detection_node_fcn1
 13979                           
 13980                           ;BVH2_Appl_Layer.c: 552: break;
 13981  08C1  28D9               	goto	l11440
 13982  08C2                     l11424:	
 13983  08C2  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 13984  08C3  390F               	andlw	15
 13985                           
 13986                           ; Switch size 1, requested type "space"
 13987                           ; Number of cases is 8, Range of values is 1 to 8
 13988                           ; switch strategies available:
 13989                           ; Name         Instructions Cycles
 13990                           ; direct_byte           25     9 (fixed)
 13991                           ; simple_byte           25    13 (average)
 13992                           ; jumptable            263     9 (fixed)
 13993                           ;	Chosen strategy is direct_byte
 13994  08C4  3EFF               	addlw	-1
 13995  08C5  1C03               	skipc
 13996  08C6  28D9               	goto	l11440
 13997  08C7  0084               	movwf	4
 13998  08C8  3008               	movlw	8
 13999  08C9  0204               	subwf	4,w
 14000  08CA  1803               	skipnc
 14001  08CB  28D9               	goto	l11440
 14002  08CC  3187               	movlp	high S13832
 14003  08CD  3504               	lslf	4,w
 14004  08CE  3E60               	addlw	low S13832
 14005  08CF  0082               	movwf	2
 14006  08D0                     l1580:	
 14007                           
 14008                           ;BVH2_Appl_Layer.c: 615: else {
 14009                           ;BVH2_Appl_Layer.c: 616: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling = 1;
 14010  08D0  1648               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
 14011                           
 14012                           ;BVH2_Appl_Layer.c: 619: if (ui8_ResetMatlab == 1) {
 14013  08D1  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 14014  08D2  28D4               	goto	u9181
 14015  08D3  28D5               	goto	l11428
 14016  08D4                     u9181:	
 14017  08D4  28D9               	goto	l11440
 14018  08D5                     l11428:	
 14019                           
 14020                           ;BVH2_Appl_Layer.c: 621: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
 14021                           
 14022                           ;BVH2_Appl_Layer.c: 622: Cb34_odPumpOff = 1;
 14023                           
 14024                           ;BVH2_Appl_Layer.c: 623: Cb34_odFixedValueSel = 0;
 14025                           
 14026                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedLowValueSel = 0;
 14027  08D5  27B4  3188         	fcall	PL58	;call to abstracted procedure
 14028                           
 14029                           ;BVH2_Appl_Layer.c: 625: Cb34_oPWM_SC_Alarm = 0;
 14030  08D7  01C9               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 14031                           
 14032                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_Alarm = 0;
 14033  08D8  01CA               	clrf	_Cb34_oPWM_Alarm^(0+256)
 14034  08D9                     l11440:	
 14035                           
 14036                           ;BVH2_Appl_Layer.c: 627: }
 14037                           ;BVH2_Appl_Layer.c: 628: }
 14038                           ;BVH2_Appl_Layer.c: 633: bool_PWMin_Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
 14039  08D9  0022               	movlb	2	; select bank2
 14040  08DA  0849               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
 14041  08DB  00D5               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
 14042                           
 14043                           ;BVH2_Appl_Layer.c: 638: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
 14044  08DC  0021               	movlb	1	; select bank1
 14045  08DD  1DC6               	btfss	_SIBFS_UbatHandling_b^(0+128),3
 14046  08DE  28FE               	goto	l1593
 14047                           
 14048                           ;BVH2_Appl_Layer.c: 642: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
 14049  08DF  1E46               	btfss	_SIBFS_UbatHandling_b^(0+128),4
 14050  08E0  28EC               	goto	l1594
 14051                           
 14052                           ;BVH2_Appl_Layer.c: 644: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
 14053  08E1  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14054  08E2  39F8               	andlw	-8
 14055  08E3  3802               	iorlw	2
 14056  08E4  00C6               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14057                           
 14058                           ;BVH2_Appl_Layer.c: 647: if (((UInt8)ui8_BattVolt_mat) < 222) {
 14059  08E5  30DE               	movlw	222
 14060  08E6  0232               	subwf	_ui8_BattVolt_mat^(0+128),w
 14061  08E7  1803               	skipnc
 14062  08E8  2903               	goto	l1601
 14063  08E9                     l11450:	
 14064                           
 14065                           ;BVH2_Appl_Layer.c: 648: Cb56_UbatHandling_node_fcn2();
 14066  08E9  26EA  3188         	fcall	_Cb56_UbatHandling_node_fcn2
 14067  08EB  2903               	goto	l1601
 14068  08EC                     l1594:	
 14069                           
 14070                           ;BVH2_Appl_Layer.c: 653: else {
 14071                           ;BVH2_Appl_Layer.c: 655: if (SIBFS_UbatHandling_b.Cb59_SaturationLow) {
 14072  08EC  1EC6               	btfss	_SIBFS_UbatHandling_b^(0+128),5
 14073  08ED  28F7               	goto	l1597
 14074                           
 14075                           ;BVH2_Appl_Layer.c: 657: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
 14076  08EE  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14077  08EF  39F8               	andlw	-8
 14078  08F0  3803               	iorlw	3
 14079  08F1  00C6               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14080                           
 14081                           ;BVH2_Appl_Layer.c: 660: if (((UInt8)ui8_BattVolt_mat) > 49) {
 14082  08F2  3032               	movlw	50
 14083  08F3  0232               	subwf	_ui8_BattVolt_mat^(0+128),w
 14084  08F4  1803               	btfsc	3,0
 14085  08F5  28E9               	goto	l11450
 14086  08F6  2903               	goto	l1601
 14087  08F7                     l1597:	
 14088                           
 14089                           ;BVH2_Appl_Layer.c: 666: else {
 14090                           ;BVH2_Appl_Layer.c: 668: if (SIBFS_UbatHandling_b.Cb60_NormalUbat) {
 14091  08F7  1F46               	btfss	_SIBFS_UbatHandling_b^(0+128),6
 14092  08F8  2903               	goto	l1601
 14093                           
 14094                           ;BVH2_Appl_Layer.c: 670: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
 14095  08F9  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14096  08FA  39F8               	andlw	-8
 14097  08FB  3801               	iorlw	1
 14098  08FC  00C6               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14099  08FD  28E9               	goto	l11450
 14100  08FE                     l1593:	
 14101                           
 14102                           ;BVH2_Appl_Layer.c: 680: else {
 14103                           ;BVH2_Appl_Layer.c: 681: SIBFS_UbatHandling_b.Cb57_Ubat_Handling = 1;
 14104  08FE  15C6               	bsf	_SIBFS_UbatHandling_b^(0+128),3
 14105                           
 14106                           ;BVH2_Appl_Layer.c: 684: if (ui8_ResetMatlab == 1) {
 14107  08FF  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 14108  0900  2903               	goto	l1601
 14109                           
 14110                           ;BVH2_Appl_Layer.c: 686: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 14111                           
 14112                           ;BVH2_Appl_Layer.c: 687: Cb56_odPumpOff = 0;
 14113                           
 14114                           ;BVH2_Appl_Layer.c: 688: Cb56_odFixedValueSel = 0;
 14115                           
 14116                           ;BVH2_Appl_Layer.c: 689: Cb56_oUbat_Alarm_High = 0;
 14117  0901  27DA  3188         	fcall	PL76	;call to abstracted procedure
 14118  0903                     l1601:	
 14119                           
 14120                           ;BVH2_Appl_Layer.c: 690: }
 14121                           ;BVH2_Appl_Layer.c: 691: }
 14122                           ;BVH2_Appl_Layer.c: 694: Sb1_Logical_Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueS
      +                          el));
 14123  0903  0024               	movlb	4	; select bank4
 14124  0904  01A9               	clrf	_BVH2_Appl_Layer$1207^(0+512)
 14125  0905  0022               	movlb	2	; select bank2
 14126  0906  0846               	movf	_Cb34_odPumpOff^(0+256),w
 14127  0907  1903               	btfsc	3,2
 14128  0908  2910               	goto	l11474
 14129  0909  0021               	movlb	1	; select bank1
 14130  090A  0844               	movf	_Cb56_odFixedValueSel^(0+128),w
 14131  090B  1D03               	btfss	3,2
 14132  090C  2910               	goto	l11474
 14133  090D  0024               	movlb	4	; select bank4
 14134  090E  01A9               	clrf	_BVH2_Appl_Layer$1207^(0+512)
 14135  090F  0AA9               	incf	_BVH2_Appl_Layer$1207^(0+512),f
 14136  0910                     l11474:	
 14137  0910  0024               	movlb	4	; select bank4
 14138  0911  0829               	movf	_BVH2_Appl_Layer$1207^(0+512),w
 14139  0912  00A8               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512)
 14140                           
 14141                           ;BVH2_Appl_Layer.c: 699: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
 14142  0913  0021               	movlb	1	; select bank1
 14143  0914  1CBF               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14144  0915  2925               	goto	l1605
 14145                           
 14146                           ;BVH2_Appl_Layer.c: 701: if (Cb51_Counter > 80) {
 14147  0916  3051               	movlw	81
 14148  0917  0022               	movlb	2	; select bank2
 14149  0918  0241               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+256),w
 14150  0919  1C03               	skipc
 14151  091A  2923               	goto	l11484
 14152                           
 14153                           ;BVH2_Appl_Layer.c: 704: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
 14154  091B  0021               	movlb	1	; select bank1
 14155  091C  10BF               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14156  091D                     L24:	
 14157                           
 14158                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
 14159  091D  15BF               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14160                           
 14161                           ;BVH2_Appl_Layer.c: 706: Cb51_oTempRedAlarm = 0;
 14162  091E  0022               	movlb	2	; select bank2
 14163  091F  01BB               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
 14164                           
 14165                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempAlarm = 0;
 14166  0920  01BC               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
 14167                           
 14168                           ;BVH2_Appl_Layer.c: 708: Cb51_odPumpOff = 0;
 14169  0921  01BA               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
 14170  0922  2953               	goto	L23
 14171  0923                     l11484:	
 14172                           ;BVH2_Appl_Layer.c: 710: }
 14173                           
 14174                           ;BVH2_Appl_Layer.c: 709: Cb51_Counter = 0 ;
 14175                           
 14176                           
 14177                           ;BVH2_Appl_Layer.c: 711: else {
 14178                           ;BVH2_Appl_Layer.c: 712: Cb51_Counter = Cb51_Counter + 1 ;
 14179  0923  0AC1               	incf	BVH2_Appl_Layer@Cb51_Counter^(0+256),f
 14180                           
 14181                           ;BVH2_Appl_Layer.c: 713: }
 14182                           ;BVH2_Appl_Layer.c: 716: }
 14183  0924  29C3               	goto	l11596
 14184  0925                     l1605:	
 14185                           
 14186                           ;BVH2_Appl_Layer.c: 717: else {
 14187                           ;BVH2_Appl_Layer.c: 719: if (SIBFS_Temperature_Alarm_b.Cb53_reset) {
 14188  0925  1D3F               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14189  0926  292A               	goto	l1609
 14190                           
 14191                           ;BVH2_Appl_Layer.c: 724: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
 14192  0927  113F               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14193                           
 14194                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
 14195  0928  14BF               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14196                           
 14197                           ;BVH2_Appl_Layer.c: 728: }
 14198  0929  29C3               	goto	l11596
 14199  092A                     l1609:	
 14200                           
 14201                           ;BVH2_Appl_Layer.c: 729: else {
 14202                           ;BVH2_Appl_Layer.c: 731: if (SIBFS_Temperature_Alarm_b.Cb54_greenTemp) {
 14203  092A  1DBF               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14204  092B  293E               	goto	l1611
 14205                           
 14206                           ;BVH2_Appl_Layer.c: 735: if (ui16_mat_inpTemp < 72) {
 14207  092C  3000               	movlw	0
 14208  092D  0023               	movlb	3	; select bank3
 14209  092E  024F               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
 14210  092F  3048               	movlw	72
 14211  0930  1903               	skipnz
 14212  0931  024E               	subwf	_ui16_mat_inpTemp^(0+384),w
 14213  0932  1803               	skipnc
 14214  0933  29C3               	goto	l11596
 14215                           
 14216                           ;BVH2_Appl_Layer.c: 738: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
 14217  0934  0021               	movlb	1	; select bank1
 14218  0935  11BF               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14219                           
 14220                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
 14221  0936  163F               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14222                           
 14223                           ;BVH2_Appl_Layer.c: 740: Cb51_oTempRedAlarm = 1;
 14224  0937  0022               	movlb	2	; select bank2
 14225  0938  01BB               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
 14226  0939  0ABB               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
 14227                           
 14228                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempAlarm = 1;
 14229  093A  01BC               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
 14230  093B  0ABC               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
 14231                           
 14232                           ;BVH2_Appl_Layer.c: 744: Cb51_odPumpOff = 0;
 14233  093C  01BA               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
 14234  093D  29C3               	goto	l11596
 14235  093E                     l1611:	
 14236                           
 14237                           ;BVH2_Appl_Layer.c: 749: else {
 14238                           ;BVH2_Appl_Layer.c: 751: if (SIBFS_Temperature_Alarm_b.Cb55_redTemp) {
 14239  093E  1E3F               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14240  093F  294B               	goto	l1614
 14241                           
 14242                           ;BVH2_Appl_Layer.c: 755: if (ui16_mat_inpTemp > 185) {
 14243  0940  3000               	movlw	0
 14244  0941  0023               	movlb	3	; select bank3
 14245  0942  024F               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
 14246  0943  30BA               	movlw	186
 14247  0944  1903               	skipnz
 14248  0945  024E               	subwf	_ui16_mat_inpTemp^(0+384),w
 14249  0946  1C03               	skipc
 14250  0947  29C3               	goto	l11596
 14251                           
 14252                           ;BVH2_Appl_Layer.c: 758: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
 14253  0948  0021               	movlb	1	; select bank1
 14254  0949  123F               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14255  094A  291D               	goto	L24
 14256  094B                     l1614:	
 14257                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
 14258                           
 14259                           
 14260                           ;BVH2_Appl_Layer.c: 768: else {
 14261                           ;BVH2_Appl_Layer.c: 770: if (!(SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm)) {
 14262  094B  183F               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
 14263  094C  29C3               	goto	l11596
 14264                           
 14265                           ;BVH2_Appl_Layer.c: 771: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
 14266  094D  143F               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
 14267                           
 14268                           ;BVH2_Appl_Layer.c: 775: if (ui8_ResetMatlab != 0) {
 14269  094E  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14270  094F  1903               	btfsc	3,2
 14271  0950  29C3               	goto	l11596
 14272                           
 14273                           ;BVH2_Appl_Layer.c: 777: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
 14274  0951  153F               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14275                           
 14276                           ;BVH2_Appl_Layer.c: 778: Cb51_Counter = 0 ;
 14277  0952  0022               	movlb	2	; select bank2
 14278  0953                     L23:	
 14279  0953  01C1               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+256)
 14280  0954  29C3               	goto	l11596
 14281  0955                     l11508:	
 14282                           
 14283                           ;BVH2_Appl_Layer.c: 792: if (Cb1_StateCnt > 50) {
 14284  0955  3000               	movlw	0
 14285  0956  0229               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14286  0957  3033               	movlw	51
 14287  0958  1903               	skipnz
 14288  0959  0228               	subwf	_Cb1_StateCnt^(0+128),w
 14289  095A  1C03               	skipc
 14290  095B  2962               	goto	l11518
 14291                           
 14292                           ;BVH2_Appl_Layer.c: 795: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14293                           ;BVH2_Appl_Layer.c: 796: (UInt8)5;
 14294  095C  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14295                           
 14296                           ;BVH2_Appl_Layer.c: 797: Cb1_oShutoff = 0;
 14297                           
 14298                           ;BVH2_Appl_Layer.c: 798: Cb1_oCurrentAlarm = 0;
 14299  095D  27EF  3188         	fcall	PL92	;call to abstracted procedure
 14300  095F                     l11516:	
 14301                           
 14302                           ;BVH2_Appl_Layer.c: 799: Cb1_RestartCounter = 0 ;
 14303  095F  0022               	movlb	2	; select bank2
 14304  0960  01CD               	clrf	_Cb1_RestartCounter^(0+256)
 14305                           
 14306                           ;BVH2_Appl_Layer.c: 800: }
 14307  0961  29DC               	goto	l1623
 14308  0962                     l11518:	
 14309                           
 14310                           ;BVH2_Appl_Layer.c: 801: else {
 14311                           ;BVH2_Appl_Layer.c: 802: Cb1_StateCnt = Cb1_StateCnt + 1 ;
 14312  0962  0828               	movf	_Cb1_StateCnt^(0+128),w
 14313  0963  3E01               	addlw	1
 14314  0964  00A8               	movwf	_Cb1_StateCnt^(0+128)
 14315  0965  3000               	movlw	0
 14316  0966  3D29               	addwfc	(_Cb1_StateCnt+1)^(0+128),w
 14317  0967  00A9               	movwf	(_Cb1_StateCnt+1)^(0+128)
 14318  0968  29DC               	goto	l1623
 14319  0969                     l11520:	
 14320                           
 14321                           ;BVH2_Appl_Layer.c: 810: Cb1_Current_An___High_node_fcn1();
 14322  0969  2614  3188         	fcall	_Cb1_Current_An___High_node_fcn1
 14323                           
 14324                           ;BVH2_Appl_Layer.c: 811: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
 14325  096B  0E49               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14326  096C  3903               	andlw	3
 14327  096D  3A03               	xorlw	3
 14328  096E  1D03               	btfss	3,2
 14329  096F  2962               	goto	l11518
 14330  0970  29DC               	goto	l1623
 14331  0971                     l11526:	
 14332                           
 14333                           ;BVH2_Appl_Layer.c: 820: if (Cb1_RestartCounter < 10) {
 14334  0971  300A               	movlw	10
 14335  0972  0022               	movlb	2	; select bank2
 14336  0973  024D               	subwf	_Cb1_RestartCounter^(0+256),w
 14337  0974  1803               	skipnc
 14338  0975  29DC               	goto	l1623
 14339  0976                     l11528:	
 14340                           
 14341                           ;BVH2_Appl_Layer.c: 823: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14342                           ;BVH2_Appl_Layer.c: 824: (UInt8)3;
 14343  0976  0021               	movlb	1	; select bank1
 14344  0977  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14345  0978  39F0               	andlw	-16
 14346  0979  3803               	iorlw	3
 14347  097A  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14348                           
 14349                           ;BVH2_Appl_Layer.c: 825: Cb1_oShutoff = 0;
 14350  097B  0022               	movlb	2	; select bank2
 14351  097C  01CB               	clrf	_Cb1_oShutoff^(0+256)
 14352                           
 14353                           ;BVH2_Appl_Layer.c: 826: Cb1_oCurrentAlarm = 1;
 14354  097D  01CC               	clrf	_Cb1_oCurrentAlarm^(0+256)
 14355  097E  0ACC               	incf	_Cb1_oCurrentAlarm^(0+256),f
 14356  097F                     l11534:	
 14357                           
 14358                           ;BVH2_Appl_Layer.c: 827: Cb1_StateCnt = 0 ;
 14359  097F  0021               	movlb	1	; select bank1
 14360  0980  01A8               	clrf	_Cb1_StateCnt^(0+128)
 14361  0981  01A9               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14362  0982  29DC               	goto	l1623
 14363  0983                     l11536:	
 14364                           
 14365                           ;BVH2_Appl_Layer.c: 835: Cb1_Current_An___High_node_fcn1();
 14366  0983  2614  3188         	fcall	_Cb1_Current_An___High_node_fcn1
 14367                           
 14368                           ;BVH2_Appl_Layer.c: 838: break;
 14369  0985  29DC               	goto	l1623
 14370  0986                     l11538:	
 14371                           
 14372                           ;BVH2_Appl_Layer.c: 842: if (Cb1_StateCnt > 200) {
 14373  0986  3000               	movlw	0
 14374  0987  0229               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14375  0988  30C9               	movlw	201
 14376  0989  1903               	skipnz
 14377  098A  0228               	subwf	_Cb1_StateCnt^(0+128),w
 14378  098B  1C03               	skipc
 14379  098C  2994               	goto	l11544
 14380                           
 14381                           ;BVH2_Appl_Layer.c: 844: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14382                           ;BVH2_Appl_Layer.c: 845: (UInt8)7;
 14383  098D  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14384  098E  39F0               	andlw	-16
 14385  098F  3807               	iorlw	7
 14386  0990  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14387                           
 14388                           ;BVH2_Appl_Layer.c: 846: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
 14389  0991  0022               	movlb	2	; select bank2
 14390  0992  0ACD               	incf	_Cb1_RestartCounter^(0+256),f
 14391                           
 14392                           ;BVH2_Appl_Layer.c: 847: }
 14393  0993  29DC               	goto	l1623
 14394  0994                     l11544:	
 14395                           
 14396                           ;BVH2_Appl_Layer.c: 848: else {
 14397                           ;BVH2_Appl_Layer.c: 851: if (bool_mat_currAlarm_bldc) {
 14398  0994  084E               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14399  0995  1903               	btfsc	3,2
 14400  0996  2962               	goto	l11518
 14401  0997                     l11546:	
 14402                           
 14403                           ;BVH2_Appl_Layer.c: 853: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14404                           ;BVH2_Appl_Layer.c: 854: (UInt8)1;
 14405  0997  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14406  0998  39F0               	andlw	-16
 14407  0999  3801               	iorlw	1
 14408  099A  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14409                           
 14410                           ;BVH2_Appl_Layer.c: 855: Cb1_StateCnt = 0 ;
 14411  099B  01A8               	clrf	_Cb1_StateCnt^(0+128)
 14412  099C  01A9               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14413                           
 14414                           ;BVH2_Appl_Layer.c: 856: Cb1_oShutoff = 1;
 14415  099D  0022               	movlb	2	; select bank2
 14416  099E  01CB               	clrf	_Cb1_oShutoff^(0+256)
 14417  099F  0ACB               	incf	_Cb1_oShutoff^(0+256),f
 14418                           
 14419                           ;BVH2_Appl_Layer.c: 857: Cb1_oCurrentAlarm = 1;
 14420  09A0  01CC               	clrf	_Cb1_oCurrentAlarm^(0+256)
 14421  09A1  0ACC               	incf	_Cb1_oCurrentAlarm^(0+256),f
 14422                           
 14423                           ;BVH2_Appl_Layer.c: 858: }
 14424  09A2  29DC               	goto	l1623
 14425  09A3                     l11556:	
 14426                           
 14427                           ;BVH2_Appl_Layer.c: 872: if (!(bool_mat_currAlarm_bldc)) {
 14428  09A3  084E               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14429  09A4  1903               	btfsc	3,2
 14430  09A5  2976               	goto	l11528
 14431                           
 14432                           ;BVH2_Appl_Layer.c: 880: else {
 14433                           ;BVH2_Appl_Layer.c: 881: if (Cb1_StateCnt > 1) {
 14434  09A6  3000               	movlw	0
 14435  09A7  0229               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14436  09A8  3002               	movlw	2
 14437  09A9  1903               	skipnz
 14438  09AA  0228               	subwf	_Cb1_StateCnt^(0+128),w
 14439  09AB  1803               	btfsc	3,0
 14440  09AC  2997               	goto	l11546
 14441  09AD  2962               	goto	l11518
 14442  09AE                     l11578:	
 14443                           
 14444                           ;BVH2_Appl_Layer.c: 902: if (!(bool_mat_currAlarm_bldc)) {
 14445  09AE  084E               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14446  09AF  1D03               	btfss	3,2
 14447  09B0  2962               	goto	l11518
 14448                           
 14449                           ;BVH2_Appl_Layer.c: 905: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
 14450  09B1  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14451  09B2  39F0               	andlw	-16
 14452  09B3  3804               	iorlw	4
 14453  09B4  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14454  09B5  297F               	goto	l11534
 14455  09B6                     l1642:	
 14456                           ;BVH2_Appl_Layer.c: 914: }
 14457                           ;BVH2_Appl_Layer.c: 915: default: {
 14458                           
 14459                           
 14460                           ;BVH2_Appl_Layer.c: 917: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
 14461  09B6  1B49               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
 14462  09B7  29DC               	goto	l1623
 14463                           
 14464                           ;BVH2_Appl_Layer.c: 918: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
 14465  09B8  1749               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
 14466                           
 14467                           ;BVH2_Appl_Layer.c: 922: if (ui8_ResetMatlab != 0) {
 14468  09B9  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14469  09BA  1903               	btfsc	3,2
 14470  09BB  29DC               	goto	l1623
 14471                           
 14472                           ;BVH2_Appl_Layer.c: 924: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14473                           ;BVH2_Appl_Layer.c: 925: (UInt8)6;
 14474  09BC  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14475  09BD  39F0               	andlw	-16
 14476  09BE  3806               	iorlw	6
 14477  09BF  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14478                           
 14479                           ;BVH2_Appl_Layer.c: 926: Cb1_StateCnt = 0 ;
 14480  09C0  01A8               	clrf	_Cb1_StateCnt^(0+128)
 14481  09C1  01A9               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14482  09C2  295F               	goto	l11516
 14483  09C3                     l11596:	
 14484  09C3  0021               	movlb	1	; select bank1
 14485  09C4  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14486  09C5  390F               	andlw	15
 14487                           
 14488                           ; Switch size 1, requested type "space"
 14489                           ; Number of cases is 7, Range of values is 1 to 7
 14490                           ; switch strategies available:
 14491                           ; Name         Instructions Cycles
 14492                           ; simple_byte           22    12 (average)
 14493                           ; direct_byte           23     9 (fixed)
 14494                           ; jumptable            263     9 (fixed)
 14495                           ;	Chosen strategy is simple_byte
 14496  09C6  3A01               	xorlw	1	; case 1
 14497  09C7  1903               	skipnz
 14498  09C8  29AE               	goto	l11578
 14499  09C9  3A03               	xorlw	3	; case 2
 14500  09CA  1903               	skipnz
 14501  09CB  29A3               	goto	l11556
 14502  09CC  3A01               	xorlw	1	; case 3
 14503  09CD  1903               	skipnz
 14504  09CE  2969               	goto	l11520
 14505  09CF  3A07               	xorlw	7	; case 4
 14506  09D0  1903               	skipnz
 14507  09D1  2986               	goto	l11538
 14508  09D2  3A01               	xorlw	1	; case 5
 14509  09D3  1903               	skipnz
 14510  09D4  2983               	goto	l11536
 14511  09D5  3A03               	xorlw	3	; case 6
 14512  09D6  1903               	skipnz
 14513  09D7  2955               	goto	l11508
 14514  09D8  3A01               	xorlw	1	; case 7
 14515  09D9  1903               	skipnz
 14516  09DA  2971               	goto	l11526
 14517  09DB  29B6               	goto	l1642
 14518  09DC                     l1623:	
 14519                           
 14520                           ;BVH2_Appl_Layer.c: 934: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||
 14521                           ;BVH2_Appl_Layer.c: 935: Cb1_oShutoff || Cb44_oShutoff;
 14522  09DC  0024               	movlb	4	; select bank4
 14523  09DD  01AA               	clrf	_BVH2_Appl_Layer$1208^(0+512)
 14524  09DE  0AAA               	incf	_BVH2_Appl_Layer$1208^(0+512),f
 14525  09DF  0828               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512),w
 14526  09E0  1D03               	btfss	3,2
 14527  09E1  29F1               	goto	l11610
 14528  09E2  0022               	movlb	2	; select bank2
 14529  09E3  0843               	movf	_Cb56_odPumpOff^(0+256),w
 14530  09E4  1D03               	btfss	3,2
 14531  09E5  29F1               	goto	l11610
 14532  09E6  083A               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
 14533  09E7  1D03               	btfss	3,2
 14534  09E8  29F1               	goto	l11610
 14535  09E9  084B               	movf	_Cb1_oShutoff^(0+256),w
 14536  09EA  1D03               	btfss	3,2
 14537  09EB  29F1               	goto	l11610
 14538  09EC  0845               	movf	_Cb44_oShutoff^(0+256),w
 14539  09ED  1D03               	btfss	3,2
 14540  09EE  29F1               	goto	l11610
 14541  09EF  0024               	movlb	4	; select bank4
 14542  09F0  01AA               	clrf	_BVH2_Appl_Layer$1208^(0+512)
 14543  09F1                     l11610:	
 14544  09F1  0024               	movlb	4	; select bank4
 14545  09F2  082A               	movf	_BVH2_Appl_Layer$1208^(0+512),w
 14546  09F3  00BB               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512)
 14547                           
 14548                           ;BVH2_Appl_Layer.c: 938: Cb24_Reset = ui8_ResetMatlab != 0 ;
 14549  09F4  0021               	movlb	1	; select bank1
 14550  09F5  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14551  09F6  1903               	btfsc	3,2
 14552  09F7  29FA               	goto	u9520
 14553  09F8  3001               	movlw	1
 14554  09F9  29FB               	goto	u9530
 14555  09FA                     u9520:	
 14556  09FA  3000               	movlw	0
 14557  09FB                     u9530:	
 14558  09FB  0024               	movlb	4	; select bank4
 14559  09FC  00B3               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+512)
 14560                           
 14561                           ;BVH2_Appl_Layer.c: 943: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
 14562  09FD  0021               	movlb	1	; select bank1
 14563  09FE  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14564  09FF  2AF5               	goto	l1647
 14565                           
 14566                           ;BVH2_Appl_Layer.c: 949: if (Sb1_Logical_Operator1 || Cb24_Reset) {
 14567  0A00  0024               	movlb	4	; select bank4
 14568  0A01  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 14569  0A02  1D03               	btfss	3,2
 14570  0A03  2A0D               	goto	l11636
 14571  0A04  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 14572  0A05  1D03               	btfss	3,2
 14573  0A06  2A0D               	goto	l11636
 14574  0A07  2ADE               	goto	l11754
 14575  0A08                     l11620:	
 14576                           
 14577                           ;BVH2_Appl_Layer.c: 954: Cb24_StateCnt = 0 ;
 14578  0A08  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14579  0A09  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14580  0A0A                     l11622:	
 14581                           
 14582                           ;BVH2_Appl_Layer.c: 955: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 14583  0A0A  30F8               	movlw	-8
 14584  0A0B  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14585                           
 14586                           ;BVH2_Appl_Layer.c: 956: break;
 14587  0A0C  2A23               	goto	l1653
 14588  0A0D                     l11636:	
 14589  0A0D  0021               	movlb	1	; select bank1
 14590  0A0E  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14591  0A0F  3907               	andlw	7
 14592                           
 14593                           ; Switch size 1, requested type "space"
 14594                           ; Number of cases is 6, Range of values is 1 to 6
 14595                           ; switch strategies available:
 14596                           ; Name         Instructions Cycles
 14597                           ; simple_byte           19    10 (average)
 14598                           ; direct_byte           21     9 (fixed)
 14599                           ; jumptable            263     9 (fixed)
 14600                           ;	Chosen strategy is simple_byte
 14601  0A10  3A01               	xorlw	1	; case 1
 14602  0A11  1903               	skipnz
 14603  0A12  2A0A               	goto	l11622
 14604  0A13  3A03               	xorlw	3	; case 2
 14605  0A14  1903               	skipnz
 14606  0A15  2A0A               	goto	l11622
 14607  0A16  3A01               	xorlw	1	; case 3
 14608  0A17  1903               	skipnz
 14609  0A18  2A08               	goto	l11620
 14610  0A19  3A07               	xorlw	7	; case 4
 14611  0A1A  1903               	skipnz
 14612  0A1B  2A0A               	goto	l11622
 14613  0A1C  3A01               	xorlw	1	; case 5
 14614  0A1D  1903               	skipnz
 14615  0A1E  2A0A               	goto	l11622
 14616  0A1F  3A03               	xorlw	3	; case 6
 14617  0A20  1903               	skipnz
 14618  0A21  2A0A               	goto	l11622
 14619  0A22  2A23               	goto	l1653
 14620  0A23                     l1653:	
 14621                           
 14622                           ;BVH2_Appl_Layer.c: 979: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 14623  0A23  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14624  0A24  2B11               	goto	L38
 14625  0A25                     l11640:	
 14626                           ;BVH2_Appl_Layer.c: 984: }
 14627                           
 14628                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 14629                           
 14630                           
 14631                           ;BVH2_Appl_Layer.c: 990: if (Cb24_StateCnt) {
 14632  0A25  0822               	movf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14633  0A26  0423               	iorwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14634  0A27  1903               	btfsc	3,2
 14635  0A28  2A79               	goto	L26
 14636                           
 14637                           ;BVH2_Appl_Layer.c: 994: Cb24_StateCnt = 0 ;
 14638  0A29  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14639  0A2A  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14640  0A2B                     l11644:	
 14641                           
 14642                           ;BVH2_Appl_Layer.c: 995: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int)
 14643                           ;BVH2_Appl_Layer.c: 996: (UInt8)2;
 14644  0A2B  0021               	movlb	1	; select bank1
 14645  0A2C  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14646  0A2D  39F8               	andlw	-8
 14647  0A2E  3802               	iorlw	2
 14648  0A2F  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14649                           
 14650                           ;BVH2_Appl_Layer.c: 997: }
 14651  0A30  2B16               	goto	l11776
 14652  0A31                     l11648:	
 14653                           ;BVH2_Appl_Layer.c: 998: else {
 14654                           ;BVH2_Appl_Layer.c: 999: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 14655                           
 14656                           
 14657                           ;BVH2_Appl_Layer.c: 1009: if (Cb24_StateCnt > 1000) {
 14658  0A31  3003               	movlw	3
 14659  0A32  0223               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14660  0A33  30E9               	movlw	233
 14661  0A34  1903               	skipnz
 14662  0A35  0222               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14663  0A36  1C03               	skipc
 14664  0A37  2A3E               	goto	l11660
 14665                           
 14666                           ;BVH2_Appl_Layer.c: 1012: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14667                           ;BVH2_Appl_Layer.c: 1013: (UInt8)5;
 14668  0A38  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14669                           
 14670                           ;BVH2_Appl_Layer.c: 1014: Cb24_StateCnt = 0 ;
 14671                           
 14672                           ;BVH2_Appl_Layer.c: 1015: Cb24_BadCnt = 0 ;
 14673                           
 14674                           ;BVH2_Appl_Layer.c: 1016: Cb24_oMotorStalled = 0;
 14675  0A39  27BE  3188         	fcall	PL60	;call to abstracted procedure
 14676  0A3B  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14677                           
 14678                           ;BVH2_Appl_Layer.c: 1019: Cb24_oStalledAlarm = 0;
 14679  0A3C  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14680                           
 14681                           ;BVH2_Appl_Layer.c: 1020: }
 14682  0A3D  2B16               	goto	l11776
 14683  0A3E                     l11660:	
 14684                           
 14685                           ;BVH2_Appl_Layer.c: 1021: else {
 14686                           ;BVH2_Appl_Layer.c: 1024: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 14687  0A3E  27FC  3188         	fcall	PL116	;call to abstracted procedure
 14688  0A40  1903               	skipnz
 14689  0A41  024C               	subwf	_ui16_Speed_mat,w
 14690  0A42  1C03               	skipc
 14691  0A43  2A4B               	goto	l11664
 14692  0A44  3001               	movlw	1
 14693  0A45  024D               	subwf	_ui16_Speed_mat+1,w
 14694  0A46  302D               	movlw	45
 14695  0A47  1903               	skipnz
 14696  0A48  024C               	subwf	_ui16_Speed_mat,w
 14697  0A49  1C03               	skipc
 14698  0A4A  2A79               	goto	L26
 14699  0A4B                     l11664:	
 14700                           
 14701                           ;BVH2_Appl_Layer.c: 1027: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14702                           ;BVH2_Appl_Layer.c: 1028: (UInt8)1;
 14703  0A4B  0021               	movlb	1	; select bank1
 14704  0A4C  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14705  0A4D  39F8               	andlw	-8
 14706  0A4E  3801               	iorlw	1
 14707  0A4F  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14708                           
 14709                           ;BVH2_Appl_Layer.c: 1029: Cb24_oStalledAlarm = 0;
 14710  0A50  0022               	movlb	2	; select bank2
 14711  0A51  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14712                           
 14713                           ;BVH2_Appl_Layer.c: 1030: Cb24_StateCnt = 0 ;
 14714  0A52  0021               	movlb	1	; select bank1
 14715  0A53  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14716  0A54  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14717                           
 14718                           ;BVH2_Appl_Layer.c: 1031: }
 14719  0A55  2B16               	goto	l11776
 14720  0A56                     l11672:	
 14721                           
 14722                           ;BVH2_Appl_Layer.c: 1044: if (Cb24_BadCnt > 100) {
 14723  0A56  3000               	movlw	0
 14724  0A57  0023               	movlb	3	; select bank3
 14725  0A58  0243               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 14726  0A59  3065               	movlw	101
 14727  0A5A  1903               	skipnz
 14728  0A5B  0242               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 14729  0A5C  1C03               	skipc
 14730  0A5D  2A65               	goto	l11682
 14731                           
 14732                           ;BVH2_Appl_Layer.c: 1047: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14733                           ;BVH2_Appl_Layer.c: 1048: (UInt8)4;
 14734                           
 14735                           ;BVH2_Appl_Layer.c: 1049: Cb24_StateCnt = 0 ;
 14736                           
 14737                           ;BVH2_Appl_Layer.c: 1050: Cb24_oMotorStalled = 1;
 14738  0A5E  27C8  3188         	fcall	PL64	;call to abstracted procedure
 14739  0A60  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14740  0A61  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14741                           
 14742                           ;BVH2_Appl_Layer.c: 1051: Cb24_oStalledAlarm = 1;
 14743  0A62  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14744  0A63  0ABD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14745                           
 14746                           ;BVH2_Appl_Layer.c: 1052: }
 14747  0A64  2B16               	goto	l11776
 14748  0A65                     l11682:	
 14749                           
 14750                           ;BVH2_Appl_Layer.c: 1053: else {
 14751                           ;BVH2_Appl_Layer.c: 1056: if ((ui16_Speed_mat >= 5) && (ui16_Speed_mat <= 300)) {
 14752  0A65  27FC  3188         	fcall	PL116	;call to abstracted procedure
 14753  0A67  1903               	skipnz
 14754  0A68  024C               	subwf	_ui16_Speed_mat,w
 14755  0A69  1C03               	skipc
 14756  0A6A  2A72               	goto	l11688
 14757  0A6B  3001               	movlw	1
 14758  0A6C  024D               	subwf	_ui16_Speed_mat+1,w
 14759  0A6D  302D               	movlw	45
 14760  0A6E  1903               	skipnz
 14761  0A6F  024C               	subwf	_ui16_Speed_mat,w
 14762  0A70  1C03               	btfss	3,0
 14763  0A71  2A2B               	goto	l11644
 14764  0A72                     l11688:	
 14765                           
 14766                           ;BVH2_Appl_Layer.c: 1062: else {
 14767                           ;BVH2_Appl_Layer.c: 1063: Cb24_BadCnt = Cb24_BadCnt + 1 ;
 14768  0A72  0023               	movlb	3	; select bank3
 14769  0A73  0842               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 14770  0A74  3E01               	addlw	1
 14771  0A75  00C2               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 14772  0A76  3000               	movlw	0
 14773  0A77  3D43               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 14774  0A78  00C3               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 14775  0A79                     L26:	
 14776                           
 14777                           ;BVH2_Appl_Layer.c: 1064: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 14778  0A79  0021               	movlb	1	; select bank1
 14779  0A7A  0822               	movf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14780  0A7B  3E01               	addlw	1
 14781  0A7C  00A2               	movwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14782  0A7D  3000               	movlw	0
 14783  0A7E  3D23               	addwfc	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14784  0A7F  00A3               	movwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14785  0A80  2B16               	goto	l11776
 14786  0A81                     l11692:	
 14787                           
 14788                           ;BVH2_Appl_Layer.c: 1089: if (Cb24_StateCnt > 10) {
 14789  0A81  3000               	movlw	0
 14790  0A82  0223               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14791  0A83  300B               	movlw	11
 14792  0A84  1903               	skipnz
 14793  0A85  0222               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14794  0A86  1C03               	skipc
 14795  0A87  2AC3               	goto	l11734
 14796                           
 14797                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_RestartCounter == 10) {
 14798  0A88  300A               	movlw	10
 14799  0A89  0022               	movlb	2	; select bank2
 14800  0A8A  0642               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),w
 14801  0A8B  1D03               	btfss	3,2
 14802  0A8C  2A99               	goto	l11706
 14803                           
 14804                           ;BVH2_Appl_Layer.c: 1092: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 14805  0A8D  30F8               	movlw	-8
 14806  0A8E  0021               	movlb	1	; select bank1
 14807  0A8F  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14808                           
 14809                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 14810  0A90  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14811                           
 14812                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
 14813  0A91  1421               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 14814                           
 14815                           ;BVH2_Appl_Layer.c: 1095: Cb24_oStalledAlarm = 1;
 14816  0A92  0022               	movlb	2	; select bank2
 14817  0A93  3018               	movlw	24
 14818  0A94  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14819  0A95  0ABD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14820  0A96  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14821  0A97  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14822  0A98  2ABC               	goto	L28
 14823  0A99                     l11706:	
 14824                           ;BVH2_Appl_Layer.c: 1098: }
 14825                           
 14826                           ;BVH2_Appl_Layer.c: 1097: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14827                           
 14828                           
 14829                           ;BVH2_Appl_Layer.c: 1099: else {
 14830                           ;BVH2_Appl_Layer.c: 1102: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 14831  0A99  27FC  3188         	fcall	PL116	;call to abstracted procedure
 14832  0A9B  1903               	skipnz
 14833  0A9C  024C               	subwf	_ui16_Speed_mat,w
 14834  0A9D  1C03               	skipc
 14835  0A9E  2AA6               	goto	l11710
 14836  0A9F  3001               	movlw	1
 14837  0AA0  024D               	subwf	_ui16_Speed_mat+1,w
 14838  0AA1  302D               	movlw	45
 14839  0AA2  1903               	skipnz
 14840  0AA3  024C               	subwf	_ui16_Speed_mat,w
 14841  0AA4  1C03               	skipc
 14842  0AA5  2AAE               	goto	l11720
 14843  0AA6                     l11710:	
 14844                           
 14845                           ;BVH2_Appl_Layer.c: 1105: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14846                           ;BVH2_Appl_Layer.c: 1106: (UInt8)4;
 14847                           
 14848                           ;BVH2_Appl_Layer.c: 1107: Cb24_StateCnt = 0 ;
 14849                           
 14850                           ;BVH2_Appl_Layer.c: 1108: Cb24_oMotorStalled = 1;
 14851  0AA6  27C8  3188         	fcall	PL64	;call to abstracted procedure
 14852  0AA8  3018               	movlw	24
 14853  0AA9  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14854  0AAA  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14855                           
 14856                           ;BVH2_Appl_Layer.c: 1109: Cb24_oStalledAlarm = 1;
 14857  0AAB  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14858  0AAC  0ABD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14859                           
 14860                           ;BVH2_Appl_Layer.c: 1110: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14861  0AAD  2ABC               	goto	L28
 14862  0AAE                     l11720:	
 14863                           ;BVH2_Appl_Layer.c: 1111: }
 14864                           
 14865                           
 14866                           ;BVH2_Appl_Layer.c: 1112: else {
 14867                           ;BVH2_Appl_Layer.c: 1113: if (Cb24_StateCnt > 200) {
 14868  0AAE  3000               	movlw	0
 14869  0AAF  0021               	movlb	1	; select bank1
 14870  0AB0  0223               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14871  0AB1  30C9               	movlw	201
 14872  0AB2  1903               	skipnz
 14873  0AB3  0222               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14874                           
 14875                           ;BVH2_Appl_Layer.c: 1116: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14876                           ;BVH2_Appl_Layer.c: 1117: (UInt8)5;
 14877  0AB4  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14878  0AB5  1C03               	skipc
 14879  0AB6  2ABF               	goto	L40
 14880                           
 14881                           ;BVH2_Appl_Layer.c: 1118: Cb24_StateCnt = 0 ;
 14882                           
 14883                           ;BVH2_Appl_Layer.c: 1119: Cb24_BadCnt = 0 ;
 14884                           
 14885                           ;BVH2_Appl_Layer.c: 1120: Cb24_oMotorStalled = 0;
 14886  0AB7  27BE  3188         	fcall	PL60	;call to abstracted procedure
 14887  0AB9  3018               	movlw	24
 14888  0ABA  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14889  0ABB  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14890  0ABC                     L28:	
 14891                           
 14892                           ;BVH2_Appl_Layer.c: 1124: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14893  0ABC  0021               	movlb	1	; select bank1
 14894  0ABD  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14895                           
 14896                           ;BVH2_Appl_Layer.c: 1125: }
 14897  0ABE  2AC5               	goto	l1688
 14898  0ABF                     L40:	
 14899                           ;BVH2_Appl_Layer.c: 1126: else {
 14900                           ;BVH2_Appl_Layer.c: 1127: SIBFS_Motor_Stalled_b.Cb24_glflag = 1 ;
 14901                           
 14902  0ABF  39E7               	andlw	-25
 14903  0AC0  3808               	iorlw	8
 14904  0AC1  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14905  0AC2  2AC5               	goto	l1688
 14906  0AC3                     l11734:	
 14907                           
 14908                           ;BVH2_Appl_Layer.c: 1132: else {
 14909                           ;BVH2_Appl_Layer.c: 1133: SIBFS_Motor_Stalled_b.Cb24_glflag = 0 ;
 14910  0AC3  30E7               	movlw	-25
 14911  0AC4  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14912  0AC5                     l1688:	
 14913                           
 14914                           ;BVH2_Appl_Layer.c: 1134: }
 14915                           ;BVH2_Appl_Layer.c: 1135: if (SIBFS_Motor_Stalled_b.Cb24_glflag <= 2) {
 14916  0AC5  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14917  0AC6  27E8  3188         	fcall	PL86	;call to abstracted procedure
 14918  0AC8  1D03               	btfss	3,2
 14919  0AC9  2A79               	goto	L26
 14920  0ACA  2B16               	goto	l11776
 14921  0ACB                     l11738:	
 14922                           
 14923                           ;BVH2_Appl_Layer.c: 1146: if (Cb24_StateCnt > 200) {
 14924  0ACB  3000               	movlw	0
 14925  0ACC  0223               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 14926  0ACD  30C9               	movlw	201
 14927  0ACE  1903               	skipnz
 14928  0ACF  0222               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 14929  0AD0  1C03               	skipc
 14930  0AD1  2A79               	goto	L26
 14931                           
 14932                           ;BVH2_Appl_Layer.c: 1150: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14933                           ;BVH2_Appl_Layer.c: 1151: (UInt8)6;
 14934  0AD2  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14935  0AD3  39F8               	andlw	-8
 14936  0AD4  3806               	iorlw	6
 14937  0AD5  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14938                           
 14939                           ;BVH2_Appl_Layer.c: 1152: Cb24_StateCnt = 0 ;
 14940  0AD6  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 14941  0AD7  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 14942                           
 14943                           ;BVH2_Appl_Layer.c: 1153: Cb24_oMotorStalled = 0;
 14944  0AD8  0022               	movlb	2	; select bank2
 14945  0AD9  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14946                           
 14947                           ;BVH2_Appl_Layer.c: 1154: Cb24_oStalledAlarm = 1;
 14948  0ADA  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14949  0ADB  0ABD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14950                           
 14951                           ;BVH2_Appl_Layer.c: 1155: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
 14952  0ADC  0AC2               	incf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),f
 14953                           
 14954                           ;BVH2_Appl_Layer.c: 1156: }
 14955  0ADD  2B16               	goto	l11776
 14956  0ADE                     l11754:	
 14957  0ADE  0021               	movlb	1	; select bank1
 14958  0ADF  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14959  0AE0  3907               	andlw	7
 14960                           
 14961                           ; Switch size 1, requested type "space"
 14962                           ; Number of cases is 6, Range of values is 1 to 6
 14963                           ; switch strategies available:
 14964                           ; Name         Instructions Cycles
 14965                           ; simple_byte           19    10 (average)
 14966                           ; direct_byte           21     9 (fixed)
 14967                           ; jumptable            263     9 (fixed)
 14968                           ;	Chosen strategy is simple_byte
 14969  0AE1  3A01               	xorlw	1	; case 1
 14970  0AE2  1903               	skipnz
 14971  0AE3  2A56               	goto	l11672
 14972  0AE4  3A03               	xorlw	3	; case 2
 14973  0AE5  1903               	skipnz
 14974  0AE6  2A31               	goto	l11648
 14975  0AE7  3A01               	xorlw	1	; case 3
 14976  0AE8  1903               	skipnz
 14977  0AE9  2A25               	goto	l11640
 14978  0AEA  3A07               	xorlw	7	; case 4
 14979  0AEB  1903               	skipnz
 14980  0AEC  2ACB               	goto	l11738
 14981  0AED  3A01               	xorlw	1	; case 5
 14982  0AEE  1903               	skipnz
 14983  0AEF  2A2B               	goto	l11644
 14984  0AF0  3A03               	xorlw	3	; case 6
 14985  0AF1  1903               	skipnz
 14986  0AF2  2A81               	goto	l11692
 14987  0AF3  2B16               	goto	l11776
 14988                           
 14989                           ;BVH2_Appl_Layer.c: 1166: }
 14990                           ;BVH2_Appl_Layer.c: 1169: }
 14991  0AF4  2B16               	goto	l11776
 14992  0AF5                     l1647:	
 14993                           
 14994                           ;BVH2_Appl_Layer.c: 1170: else {
 14995                           ;BVH2_Appl_Layer.c: 1172: if (SIBFS_Motor_Stalled_b.Cb32_default) {
 14996  0AF5  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 14997  0AF6  2B08               	goto	l1694
 14998                           
 14999                           ;BVH2_Appl_Layer.c: 1177: if (!(Sb1_Logical_Operator1)) {
 15000  0AF7  0024               	movlb	4	; select bank4
 15001  0AF8  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 15002  0AF9  1D03               	btfss	3,2
 15003  0AFA  2B16               	goto	l11776
 15004                           
 15005                           ;BVH2_Appl_Layer.c: 1180: SIBFS_Motor_Stalled_b.Cb32_default = 0;
 15006  0AFB  0021               	movlb	1	; select bank1
 15007  0AFC  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15008                           
 15009                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
 15010  0AFD  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 15011                           
 15012                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
 15013  0AFE  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 15014  0AFF  39F8               	andlw	-8
 15015  0B00  3803               	iorlw	3
 15016  0B01  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 15017                           
 15018                           ;BVH2_Appl_Layer.c: 1183: Cb24_StateCnt = 0 ;
 15019  0B02  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 15020  0B03  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 15021                           
 15022                           ;BVH2_Appl_Layer.c: 1184: Cb24_BadCnt = 0 ;
 15023  0B04  0023               	movlb	3	; select bank3
 15024  0B05  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 15025  0B06  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 15026  0B07  2B16               	goto	l11776
 15027  0B08                     l1694:	
 15028                           
 15029                           ;BVH2_Appl_Layer.c: 1189: else {
 15030                           ;BVH2_Appl_Layer.c: 1191: if (!(SIBFS_Motor_Stalled_b.Cb33_Stop)) {
 15031  0B08  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 15032                           
 15033                           ;BVH2_Appl_Layer.c: 1193: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
 15034  0B09  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 15035  0B0A  2B16               	goto	l11776
 15036                           
 15037                           ;BVH2_Appl_Layer.c: 1194: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
 15038  0B0B  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 15039                           
 15040                           ;BVH2_Appl_Layer.c: 1197: if (Cb24_Reset) {
 15041  0B0C  0024               	movlb	4	; select bank4
 15042  0B0D  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 15043  0B0E  1903               	btfsc	3,2
 15044  0B0F  2B16               	goto	l11776
 15045                           
 15046                           ;BVH2_Appl_Layer.c: 1199: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 15047  0B10  0021               	movlb	1	; select bank1
 15048  0B11                     L38:	
 15049  0B11  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15050                           
 15051                           ;BVH2_Appl_Layer.c: 981: Cb24_oMotorStalled = 0;
 15052  0B12  0022               	movlb	2	; select bank2
 15053  0B13  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 15054                           
 15055                           ;BVH2_Appl_Layer.c: 982: Cb24_oStalledAlarm = 0;
 15056  0B14  01BD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 15057                           
 15058                           ;BVH2_Appl_Layer.c: 983: Cb24_RestartCounter = 0 ;
 15059  0B15  01C2               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256)
 15060  0B16                     l11776:	
 15061                           
 15062                           ;BVH2_Appl_Layer.c: 1213: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
 15063  0B16  0024               	movlb	4	; select bank4
 15064  0B17  01AB               	clrf	_BVH2_Appl_Layer$1209^(0+512)
 15065  0B18  0AAB               	incf	_BVH2_Appl_Layer$1209^(0+512),f
 15066  0B19  0022               	movlb	2	; select bank2
 15067  0B1A  0847               	movf	_Cb34_odFixedValueSel^(0+256),w
 15068  0B1B  1D03               	btfss	3,2
 15069  0B1C  2B23               	goto	l11784
 15070  0B1D  0021               	movlb	1	; select bank1
 15071  0B1E  0844               	movf	_Cb56_odFixedValueSel^(0+128),w
 15072  0B1F  1D03               	btfss	3,2
 15073  0B20  2B23               	goto	l11784
 15074  0B21  0024               	movlb	4	; select bank4
 15075  0B22  01AB               	clrf	_BVH2_Appl_Layer$1209^(0+512)
 15076  0B23                     l11784:	
 15077  0B23  0024               	movlb	4	; select bank4
 15078  0B24  082B               	movf	_BVH2_Appl_Layer$1209^(0+512),w
 15079  0B25  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512)
 15080                           
 15081                           ;BVH2_Appl_Layer.c: 1217: if (bool_start_demand_mat) {
 15082  0B26  0021               	movlb	1	; select bank1
 15083  0B27  0865               	movf	_bool_start_demand_mat^(0+128),w
 15084  0B28  1903               	btfsc	3,2
 15085  0B29  2B31               	goto	l11790
 15086                           
 15087                           ;BVH2_Appl_Layer.c: 1218: Sb2_Switch5 = ui8_fixed_start_speed_mat;
 15088  0B2A  0023               	movlb	3	; select bank3
 15089  0B2B  085D               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
 15090  0B2C  0024               	movlb	4	; select bank4
 15091  0B2D  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15092  0B2E  0023               	movlb	3	; select bank3
 15093  0B2F  085C               	movf	_ui8_fixed_start_speed_mat^(0+384),w
 15094  0B30  2B4D               	goto	L29
 15095  0B31                     l11790:	
 15096                           ;BVH2_Appl_Layer.c: 1219: }
 15097                           
 15098                           
 15099                           ;BVH2_Appl_Layer.c: 1220: else {
 15100                           ;BVH2_Appl_Layer.c: 1223: if (Cb34_odFixedLowValueSel) {
 15101  0B31  0022               	movlb	2	; select bank2
 15102  0B32  0848               	movf	_Cb34_odFixedLowValueSel^(0+256),w
 15103  0B33  1903               	btfsc	3,2
 15104  0B34  2B3C               	goto	l11794
 15105                           
 15106                           ;BVH2_Appl_Layer.c: 1224: Sb2_Switch5 = ui16_Speed_demand_mat_min;
 15107  0B35  0023               	movlb	3	; select bank3
 15108  0B36  0847               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
 15109  0B37  0024               	movlb	4	; select bank4
 15110  0B38  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15111  0B39  0023               	movlb	3	; select bank3
 15112  0B3A  0846               	movf	_ui16_Speed_demand_mat_min^(0+384),w
 15113  0B3B  2B4D               	goto	L29
 15114  0B3C                     l11794:	
 15115                           ;BVH2_Appl_Layer.c: 1225: }
 15116                           
 15117                           
 15118                           ;BVH2_Appl_Layer.c: 1226: else {
 15119                           ;BVH2_Appl_Layer.c: 1229: if (Sb1_Logical_Operator5) {
 15120  0B3C  0024               	movlb	4	; select bank4
 15121  0B3D  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 15122  0B3E  1903               	btfsc	3,2
 15123  0B3F  2B47               	goto	l11798
 15124                           
 15125                           ;BVH2_Appl_Layer.c: 1230: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
 15126  0B40  0023               	movlb	3	; select bank3
 15127  0B41  0849               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
 15128  0B42  0024               	movlb	4	; select bank4
 15129  0B43  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15130  0B44  0023               	movlb	3	; select bank3
 15131  0B45  0848               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
 15132  0B46  2B4D               	goto	L29
 15133  0B47                     l11798:	
 15134                           ;BVH2_Appl_Layer.c: 1231: }
 15135                           
 15136                           
 15137                           ;BVH2_Appl_Layer.c: 1232: else {
 15138                           ;BVH2_Appl_Layer.c: 1233: Sb2_Switch5 = ui16_Speed_demand_mat;
 15139  0B47  0023               	movlb	3	; select bank3
 15140  0B48  084B               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 15141  0B49  0024               	movlb	4	; select bank4
 15142  0B4A  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15143  0B4B  0023               	movlb	3	; select bank3
 15144  0B4C  084A               	movf	_ui16_Speed_demand_mat^(0+384),w
 15145  0B4D                     L29:	
 15146  0B4D  0024               	movlb	4	; select bank4
 15147  0B4E  00B1               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+512)
 15148                           
 15149                           ;BVH2_Appl_Layer.c: 1234: }
 15150                           ;BVH2_Appl_Layer.c: 1235: }
 15151                           ;BVH2_Appl_Layer.c: 1236: }
 15152                           ;BVH2_Appl_Layer.c: 1239: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
 15153  0B4F  0020               	movlb	0	; select bank0
 15154  0B50  084D               	movf	_ui16_Speed_mat+1,w
 15155  0B51  0024               	movlb	4	; select bank4
 15156  0B52  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512)
 15157  0B53  0020               	movlb	0	; select bank0
 15158  0B54  084C               	movf	_ui16_Speed_mat,w
 15159  0B55  0024               	movlb	4	; select bank4
 15160  0B56  00B7               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+512)
 15161  0B57  0831               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+512),w
 15162  0B58  02B7               	subwf	BVH2_Appl_Layer@Sb2_Error^(0+512),f
 15163  0B59  0832               	movf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512),w
 15164  0B5A  3BB8               	subwfb	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),f
 15165                           
 15166                           ;BVH2_Appl_Layer.c: 1244: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 15167  0B5B  0021               	movlb	1	; select bank1
 15168  0B5C  1CC0               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15169  0B5D  2B8A               	goto	l1708
 15170                           
 15171                           ;BVH2_Appl_Layer.c: 1251: if ((((Int32)ui16_mat_Current) < (ui16_dryRun_Thresh - 5)) && 
      +                          (ui16_Speed_mat < 400) &&
 15172                           ;BVH2_Appl_Layer.c: 1252: (ui16_Speed_mat > 80)) {
 15173  0B5E  0023               	movlb	3	; select bank3
 15174  0B5F  086E               	movf	_ui16_dryRun_Thresh^(0+384),w
 15175  0B60  3EFB               	addlw	251
 15176  0B61  0020               	movlb	0	; select bank0
 15177  0B62  00BE               	movwf	??_BVH2_Appl_Layer
 15178  0B63  30FF               	movlw	255
 15179  0B64  0023               	movlb	3	; select bank3
 15180  0B65  3D6F               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 15181  0B66  0020               	movlb	0	; select bank0
 15182  0B67  00BF               	movwf	??_BVH2_Appl_Layer+1
 15183  0B68  0021               	movlb	1	; select bank1
 15184  0B69  0231               	subwf	(_ui16_mat_Current+1)^(0+128),w
 15185  0B6A  1D03               	skipz
 15186  0B6B  2B70               	goto	u9825
 15187  0B6C  0020               	movlb	0	; select bank0
 15188  0B6D  083E               	movf	??_BVH2_Appl_Layer,w
 15189  0B6E  0021               	movlb	1	; select bank1
 15190  0B6F  0230               	subwf	_ui16_mat_Current^(0+128),w
 15191  0B70                     u9825:	
 15192  0B70  1803               	skipnc
 15193  0B71  2BD2               	goto	l11846
 15194  0B72  3001               	movlw	1
 15195  0B73  0020               	movlb	0	; select bank0
 15196  0B74  024D               	subwf	_ui16_Speed_mat+1,w
 15197  0B75  3090               	movlw	144
 15198  0B76  1903               	skipnz
 15199  0B77  024C               	subwf	_ui16_Speed_mat,w
 15200  0B78  1803               	skipnc
 15201  0B79  2BD2               	goto	l11846
 15202  0B7A  3000               	movlw	0
 15203  0B7B  024D               	subwf	_ui16_Speed_mat+1,w
 15204  0B7C  3051               	movlw	81
 15205  0B7D  1903               	skipnz
 15206  0B7E  024C               	subwf	_ui16_Speed_mat,w
 15207  0B7F  1C03               	skipc
 15208  0B80  2BD2               	goto	l11846
 15209                           
 15210                           ;BVH2_Appl_Layer.c: 1255: SIBFS_Dry_Running_b.Cb15_greenState = 0;
 15211  0B81  0021               	movlb	1	; select bank1
 15212  0B82  10C0               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15213                           
 15214                           ;BVH2_Appl_Layer.c: 1256: SIBFS_Dry_Running_b.Cb16_DryRunning = 1;
 15215  0B83  1540               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15216                           
 15217                           ;BVH2_Appl_Layer.c: 1257: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 1;
 15218  0B84  1640               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15219                           
 15220                           ;BVH2_Appl_Layer.c: 1258: Cb14_StateCnt = 0 ;
 15221  0B85  0023               	movlb	3	; select bank3
 15222  0B86  01C4               	clrf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384)
 15223  0B87  01C5               	clrf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384)
 15224                           
 15225                           ;BVH2_Appl_Layer.c: 1259: Cb14_oDryRunAlarm = 0;
 15226  0B88  0021               	movlb	1	; select bank1
 15227  0B89  2BD1               	goto	l11822
 15228  0B8A                     l1708:	
 15229                           
 15230                           ;BVH2_Appl_Layer.c: 1264: else {
 15231                           ;BVH2_Appl_Layer.c: 1266: if (SIBFS_Dry_Running_b.Cb16_DryRunning) {
 15232  0B8A  1D40               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15233  0B8B  2BCB               	goto	l1711
 15234                           
 15235                           ;BVH2_Appl_Layer.c: 1270: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 15236  0B8C  1DC0               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 15237                           
 15238                           ;BVH2_Appl_Layer.c: 1272: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 15239  0B8D  1E40               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15240  0B8E  2BD2               	goto	l11846
 15241                           
 15242                           ;BVH2_Appl_Layer.c: 1279: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >
 15243                           ;BVH2_Appl_Layer.c: 1280: 400) || (ui16_Speed_mat < 80)) {
 15244  0B8F  0023               	movlb	3	; select bank3
 15245  0B90  086E               	movf	_ui16_dryRun_Thresh^(0+384),w
 15246  0B91  3E05               	addlw	5
 15247  0B92  0020               	movlb	0	; select bank0
 15248  0B93  00BE               	movwf	??_BVH2_Appl_Layer
 15249  0B94  3000               	movlw	0
 15250  0B95  0023               	movlb	3	; select bank3
 15251  0B96  3D6F               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 15252  0B97  278B  3188         	fcall	PL22	;call to abstracted procedure
 15253  0B99  1C03               	skipc
 15254  0B9A  2BA9               	goto	l1716
 15255  0B9B  3001               	movlw	1
 15256  0B9C  024D               	subwf	_ui16_Speed_mat+1,w
 15257  0B9D  3091               	movlw	145
 15258  0B9E  1903               	skipnz
 15259  0B9F  024C               	subwf	_ui16_Speed_mat,w
 15260  0BA0  1803               	skipnc
 15261  0BA1  2BA9               	goto	l1716
 15262  0BA2  3000               	movlw	0
 15263  0BA3  024D               	subwf	_ui16_Speed_mat+1,w
 15264  0BA4  3050               	movlw	80
 15265  0BA5  1903               	skipnz
 15266  0BA6  024C               	subwf	_ui16_Speed_mat,w
 15267  0BA7  1803               	skipnc
 15268  0BA8  2BAD               	goto	l11824
 15269  0BA9                     l1716:	
 15270                           
 15271                           ;BVH2_Appl_Layer.c: 1282: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 15272  0BA9  0021               	movlb	1	; select bank1
 15273  0BAA  1240               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15274                           
 15275                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 15276  0BAB  1140               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15277  0BAC  2BD0               	goto	l11842
 15278  0BAD                     l11824:	
 15279                           ;BVH2_Appl_Layer.c: 1286: }
 15280                           
 15281                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 15282                           
 15283                           
 15284                           ;BVH2_Appl_Layer.c: 1287: else {
 15285                           ;BVH2_Appl_Layer.c: 1288: if ((ui8_PWM_dc_mat < 20) && (ui8_PWM_dc_mat > 4)) {
 15286  0BAD  3014               	movlw	20
 15287  0BAE  0021               	movlb	1	; select bank1
 15288  0BAF  024F               	subwf	_ui8_PWM_dc_mat^(0+128),w
 15289  0BB0  1803               	skipnc
 15290  0BB1  2BB6               	goto	l11832
 15291  0BB2  3005               	movlw	5
 15292  0BB3  024F               	subwf	_ui8_PWM_dc_mat^(0+128),w
 15293  0BB4  1803               	btfsc	3,0
 15294  0BB5  2BA9               	goto	l1716
 15295  0BB6                     l11832:	
 15296                           
 15297                           ;BVH2_Appl_Layer.c: 1295: else {
 15298                           ;BVH2_Appl_Layer.c: 1296: if (Cb14_StateCnt > 2000) {
 15299  0BB6  3007               	movlw	7
 15300  0BB7  0023               	movlb	3	; select bank3
 15301  0BB8  0245               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 15302  0BB9  30D1               	movlw	209
 15303  0BBA  1903               	skipnz
 15304  0BBB  0244               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 15305  0BBC  1C03               	skipc
 15306  0BBD  2BC4               	goto	l11836
 15307                           
 15308                           ;BVH2_Appl_Layer.c: 1298: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 15309  0BBE  0021               	movlb	1	; select bank1
 15310  0BBF  1240               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15311                           
 15312                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb17_redState = 1;
 15313  0BC0  15C0               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 15314                           
 15315                           ;BVH2_Appl_Layer.c: 1300: Cb14_oDryRunAlarm = 1;
 15316  0BC1  01BE               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 15317  0BC2  0ABE               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 15318                           
 15319                           ;BVH2_Appl_Layer.c: 1301: }
 15320  0BC3  2BD2               	goto	l11846
 15321  0BC4                     l11836:	
 15322                           
 15323                           ;BVH2_Appl_Layer.c: 1302: else {
 15324                           ;BVH2_Appl_Layer.c: 1303: Cb14_StateCnt = Cb14_StateCnt + 1 ;
 15325  0BC4  0844               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 15326  0BC5  3E01               	addlw	1
 15327  0BC6  00C4               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384)
 15328  0BC7  3000               	movlw	0
 15329  0BC8  3D45               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 15330  0BC9  00C5               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384)
 15331  0BCA  2BD2               	goto	l11846
 15332  0BCB                     l1711:	
 15333                           
 15334                           ;BVH2_Appl_Layer.c: 1314: else {
 15335                           ;BVH2_Appl_Layer.c: 1316: if (!(SIBFS_Dry_Running_b.Cb14_Dry_Running)) {
 15336  0BCB  1840               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 15337  0BCC  2BD2               	goto	l11846
 15338                           
 15339                           ;BVH2_Appl_Layer.c: 1317: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
 15340  0BCD  1440               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 15341                           
 15342                           ;BVH2_Appl_Layer.c: 1320: if (ui8_ResetMatlab == 1) {
 15343  0BCE  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 15344  0BCF  2BD2               	goto	l11846
 15345  0BD0                     l11842:	
 15346                           
 15347                           ;BVH2_Appl_Layer.c: 1322: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 15348  0BD0  14C0               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15349  0BD1                     l11822:	
 15350                           
 15351                           ;BVH2_Appl_Layer.c: 1285: Cb14_oDryRunAlarm = 0;
 15352  0BD1  01BE               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 15353  0BD2                     l11846:	
 15354                           
 15355                           ;BVH2_Appl_Layer.c: 1324: }
 15356                           ;BVH2_Appl_Layer.c: 1325: }
 15357                           ;BVH2_Appl_Layer.c: 1326: }
 15358                           ;BVH2_Appl_Layer.c: 1327: }
 15359                           ;BVH2_Appl_Layer.c: 1334: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenState) {
 15360  0BD2  0021               	movlb	1	; select bank1
 15361  0BD3  1CC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 15362  0BD4  2BE2               	goto	l1725
 15363                           
 15364                           ;BVH2_Appl_Layer.c: 1339: if (Cb14_oDryRunAlarm) {
 15365  0BD5  083E               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15366  0BD6  1903               	btfsc	3,2
 15367  0BD7  2C21               	goto	l11894
 15368                           
 15369                           ;BVH2_Appl_Layer.c: 1342: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 15370  0BD8  10C1               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 15371                           
 15372                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
 15373  0BD9  1541               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 15374  0BDA                     L30:	
 15375                           
 15376                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 15377  0BDA  15C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15378                           
 15379                           ;BVH2_Appl_Layer.c: 1345: Cb19_Counter = 0 ;
 15380  0BDB  01A4               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15381  0BDC  01A5               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15382                           
 15383                           ;BVH2_Appl_Layer.c: 1346: Cb19_oDryRun66 = 1;
 15384  0BDD  0022               	movlb	2	; select bank2
 15385  0BDE  01BF               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15386  0BDF  0ABF               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),f
 15387                           
 15388                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun55 = 0;
 15389  0BE0  01C0               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15390                           
 15391                           ;BVH2_Appl_Layer.c: 1348: }
 15392                           ;BVH2_Appl_Layer.c: 1351: }
 15393  0BE1  2C21               	goto	l11894
 15394  0BE2                     l1725:	
 15395                           
 15396                           ;BVH2_Appl_Layer.c: 1352: else {
 15397                           ;BVH2_Appl_Layer.c: 1354: if (SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm) {
 15398  0BE2  1D41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 15399  0BE3  2C14               	goto	l1728
 15400                           
 15401                           ;BVH2_Appl_Layer.c: 1359: if (!(Cb14_oDryRunAlarm)) {
 15402  0BE4  083E               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15403  0BE5  1D03               	btfss	3,2
 15404  0BE6  2BF0               	goto	l1729
 15405                           
 15406                           ;BVH2_Appl_Layer.c: 1364: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 15407  0BE7  1DC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15408  0BE8  2BEB               	goto	l1730
 15409                           
 15410                           ;BVH2_Appl_Layer.c: 1365: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15411  0BE9  11C1               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15412                           
 15413                           ;BVH2_Appl_Layer.c: 1366: }
 15414  0BEA  2BEE               	goto	l1731
 15415  0BEB                     l1730:	
 15416                           
 15417                           ;BVH2_Appl_Layer.c: 1367: else {
 15418                           ;BVH2_Appl_Layer.c: 1369: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 15419  0BEB  1E41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15420  0BEC  2BEE               	goto	l1731
 15421                           
 15422                           ;BVH2_Appl_Layer.c: 1370: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15423  0BED  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15424  0BEE                     l1731:	
 15425                           
 15426                           ;BVH2_Appl_Layer.c: 1371: }
 15427                           ;BVH2_Appl_Layer.c: 1372: }
 15428                           ;BVH2_Appl_Layer.c: 1373: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 15429  0BEE  1141               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 15430  0BEF  2C1A               	goto	l11890
 15431  0BF0                     l1729:	
 15432                           ;BVH2_Appl_Layer.c: 1378: }
 15433                           
 15434                           ;BVH2_Appl_Layer.c: 1374: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 15435                           
 15436                           
 15437                           ;BVH2_Appl_Layer.c: 1379: else {
 15438                           ;BVH2_Appl_Layer.c: 1381: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 15439  0BF0  1DC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15440  0BF1  2C09               	goto	l1734
 15441                           
 15442                           ;BVH2_Appl_Layer.c: 1384: if (Cb19_Counter > 400) {
 15443  0BF2  3001               	movlw	1
 15444  0BF3  0225               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 15445  0BF4  3091               	movlw	145
 15446  0BF5  1903               	skipnz
 15447  0BF6  0224               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15448  0BF7  1C03               	skipc
 15449  0BF8  2C02               	goto	l11874
 15450                           
 15451                           ;BVH2_Appl_Layer.c: 1387: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15452  0BF9  11C1               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 15453                           
 15454                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
 15455  0BFA  1641               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15456                           
 15457                           ;BVH2_Appl_Layer.c: 1389: Cb19_Counter = 0 ;
 15458  0BFB  01A4               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15459  0BFC  01A5               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15460                           
 15461                           ;BVH2_Appl_Layer.c: 1390: Cb19_oDryRun66 = 0;
 15462  0BFD  0022               	movlb	2	; select bank2
 15463  0BFE  01BF               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15464                           
 15465                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun55 = 1;
 15466  0BFF  01C0               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15467  0C00  0AC0               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 15468                           
 15469                           ;BVH2_Appl_Layer.c: 1392: }
 15470  0C01  2C21               	goto	l11894
 15471  0C02                     l11874:	
 15472                           
 15473                           ;BVH2_Appl_Layer.c: 1393: else {
 15474                           ;BVH2_Appl_Layer.c: 1394: Cb19_Counter = Cb19_Counter + 1 ;
 15475  0C02  0824               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15476  0C03  3E01               	addlw	1
 15477  0C04  00A4               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15478  0C05  3000               	movlw	0
 15479  0C06  3D25               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 15480  0C07  00A5               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15481  0C08  2C21               	goto	l11894
 15482  0C09                     l1734:	
 15483                           
 15484                           ;BVH2_Appl_Layer.c: 1400: else {
 15485                           ;BVH2_Appl_Layer.c: 1402: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 15486  0C09  1E41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15487  0C0A  2C21               	goto	l11894
 15488                           
 15489                           ;BVH2_Appl_Layer.c: 1405: if (Cb19_Counter > 400) {
 15490  0C0B  3001               	movlw	1
 15491  0C0C  0225               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 15492  0C0D  3091               	movlw	145
 15493  0C0E  1903               	skipnz
 15494  0C0F  0224               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15495  0C10  1C03               	skipc
 15496  0C11  2C02               	goto	l11874
 15497                           
 15498                           ;BVH2_Appl_Layer.c: 1408: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15499  0C12  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 15500  0C13  2BDA               	goto	L30
 15501  0C14                     l1728:	
 15502                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 15503                           
 15504                           
 15505                           ;BVH2_Appl_Layer.c: 1426: else {
 15506                           ;BVH2_Appl_Layer.c: 1428: if (!(SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm)) {
 15507  0C14  1841               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),0
 15508  0C15  2C21               	goto	l11894
 15509                           
 15510                           ;BVH2_Appl_Layer.c: 1429: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 15511  0C16  1441               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),0
 15512                           
 15513                           ;BVH2_Appl_Layer.c: 1433: if (!(Cb14_oDryRunAlarm)) {
 15514  0C17  083E               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15515  0C18  1D03               	btfss	3,2
 15516  0C19  2C21               	goto	l11894
 15517  0C1A                     l11890:	
 15518                           
 15519                           ;BVH2_Appl_Layer.c: 1435: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 15520  0C1A  14C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 15521                           
 15522                           ;BVH2_Appl_Layer.c: 1375: Cb19_oDryRun55 = 0;
 15523  0C1B  0022               	movlb	2	; select bank2
 15524  0C1C  01C0               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15525                           
 15526                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun66 = 0;
 15527  0C1D  01BF               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15528                           
 15529                           ;BVH2_Appl_Layer.c: 1377: Cb19_Counter = 0 ;
 15530  0C1E  0021               	movlb	1	; select bank1
 15531  0C1F  01A4               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15532  0C20  01A5               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15533  0C21                     l11894:	
 15534                           
 15535                           ;BVH2_Appl_Layer.c: 1439: }
 15536                           ;BVH2_Appl_Layer.c: 1440: }
 15537                           ;BVH2_Appl_Layer.c: 1441: }
 15538                           ;BVH2_Appl_Layer.c: 1442: }
 15539                           ;BVH2_Appl_Layer.c: 1447: bool_DryRunningAlarm = Cb19_oDryRun66;
 15540  0C21  0022               	movlb	2	; select bank2
 15541  0C22  083F               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 15542  0C23  0021               	movlb	1	; select bank1
 15543  0C24  00DA               	movwf	_bool_DryRunningAlarm^(0+128)
 15544                           
 15545                           ;BVH2_Appl_Layer.c: 1450: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 15546  0C25  0022               	movlb	2	; select bank2
 15547  0C26  083C               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 15548  0C27  0021               	movlb	1	; select bank1
 15549  0C28  00DB               	movwf	_bool_CPU_TempAlarm^(0+128)
 15550                           
 15551                           ;BVH2_Appl_Layer.c: 1455: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 15552  0C29  1C42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15553  0C2A  2C36               	goto	l1744
 15554                           
 15555                           ;BVH2_Appl_Layer.c: 1460: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 15556  0C2B  2798  3188         	fcall	PL26	;call to abstracted procedure
 15557  0C2D  278B  3188         	fcall	PL22	;call to abstracted procedure
 15558  0C2F  1803               	skipnc
 15559  0C30  2C6D               	goto	l11944
 15560                           
 15561                           ;BVH2_Appl_Layer.c: 1463: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 15562  0C31  0021               	movlb	1	; select bank1
 15563  0C32  1042               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15564                           
 15565                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
 15566  0C33  1542               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15567  0C34                     l11904:	
 15568                           
 15569                           ;BVH2_Appl_Layer.c: 1465: Cb9_StateCnt = 0 ;
 15570  0C34  01C3               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 15571  0C35  2C6D               	goto	l11944
 15572  0C36                     l1744:	
 15573                           
 15574                           ;BVH2_Appl_Layer.c: 1470: else {
 15575                           ;BVH2_Appl_Layer.c: 1472: if (SIBFS_Current_Analysis_low_b.Cb11_Wait) {
 15576  0C36  1CC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15577  0C37  2C4A               	goto	l1747
 15578                           
 15579                           ;BVH2_Appl_Layer.c: 1477: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 15580  0C38  2798  3188         	fcall	PL26	;call to abstracted procedure
 15581  0C3A  278B  3188         	fcall	PL22	;call to abstracted procedure
 15582  0C3C  1803               	skipnc
 15583  0C3D  2C41               	goto	l11910
 15584                           
 15585                           ;BVH2_Appl_Layer.c: 1479: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15586  0C3E  0021               	movlb	1	; select bank1
 15587  0C3F  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15588  0C40  2C57               	goto	L31
 15589  0C41                     l11910:	
 15590                           ;BVH2_Appl_Layer.c: 1482: }
 15591                           
 15592                           ;BVH2_Appl_Layer.c: 1481: Cb9_oCurrentAlarm = 1;
 15593                           
 15594                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 15595                           
 15596                           
 15597                           ;BVH2_Appl_Layer.c: 1483: else {
 15598                           ;BVH2_Appl_Layer.c: 1484: if (Cb9_StateCnt > 100) {
 15599  0C41  3065               	movlw	101
 15600  0C42  0021               	movlb	1	; select bank1
 15601  0C43  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 15602  0C44  1C03               	skipc
 15603  0C45  2C48               	goto	l11916
 15604                           
 15605                           ;BVH2_Appl_Layer.c: 1486: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15606  0C46  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15607  0C47  2C6A               	goto	l11940
 15608  0C48                     l11916:	
 15609                           ;BVH2_Appl_Layer.c: 1489: }
 15610                           
 15611                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15612                           
 15613                           
 15614                           ;BVH2_Appl_Layer.c: 1490: else {
 15615                           ;BVH2_Appl_Layer.c: 1491: Cb9_StateCnt = Cb9_StateCnt + 1 ;
 15616  0C48  0AC3               	incf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),f
 15617  0C49  2C6D               	goto	l11944
 15618  0C4A                     l1747:	
 15619                           
 15620                           ;BVH2_Appl_Layer.c: 1497: else {
 15621                           ;BVH2_Appl_Layer.c: 1499: if (SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent) {
 15622  0C4A  1D42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15623  0C4B  2C5C               	goto	l1753
 15624                           
 15625                           ;BVH2_Appl_Layer.c: 1504: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 15626  0C4C  27A1  3188         	fcall	PL30	;call to abstracted procedure
 15627  0C4E  1803               	skipnc
 15628  0C4F  2C52               	goto	l11924
 15629                           
 15630                           ;BVH2_Appl_Layer.c: 1506: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15631  0C50  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15632  0C51  2C6A               	goto	l11940
 15633  0C52                     l11924:	
 15634                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15635                           
 15636                           
 15637                           ;BVH2_Appl_Layer.c: 1510: else {
 15638                           ;BVH2_Appl_Layer.c: 1511: if (Cb9_StateCnt > 50) {
 15639  0C52  3033               	movlw	51
 15640  0C53  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 15641  0C54  1C03               	skipc
 15642  0C55  2C48               	goto	l11916
 15643                           
 15644                           ;BVH2_Appl_Layer.c: 1513: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15645  0C56  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15646  0C57                     L31:	
 15647                           
 15648                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 15649  0C57  15C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15650                           
 15651                           ;BVH2_Appl_Layer.c: 1515: Cb9_oCurrentAlarm = 1;
 15652  0C58  0022               	movlb	2	; select bank2
 15653  0C59  01B9               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 15654  0C5A  0AB9               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 15655                           
 15656                           ;BVH2_Appl_Layer.c: 1516: }
 15657  0C5B  2C6D               	goto	l11944
 15658  0C5C                     l1753:	
 15659                           
 15660                           ;BVH2_Appl_Layer.c: 1524: else {
 15661                           ;BVH2_Appl_Layer.c: 1526: if (SIBFS_Current_Analysis_low_b.Cb13_redState) {
 15662  0C5C  1DC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15663  0C5D  2C65               	goto	l1759
 15664                           
 15665                           ;BVH2_Appl_Layer.c: 1531: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 15666  0C5E  27A1  3188         	fcall	PL30	;call to abstracted procedure
 15667  0C60  1803               	skipnc
 15668  0C61  2C6D               	goto	l11944
 15669                           
 15670                           ;BVH2_Appl_Layer.c: 1534: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 15671  0C62  11C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15672                           
 15673                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
 15674  0C63  14C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15675  0C64  2C34               	goto	l11904
 15676  0C65                     l1759:	
 15677                           
 15678                           ;BVH2_Appl_Layer.c: 1541: else {
 15679                           ;BVH2_Appl_Layer.c: 1543: if (!(SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low)) 
      +                          {
 15680  0C65  1A42               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 15681  0C66  2C6D               	goto	l11944
 15682                           
 15683                           ;BVH2_Appl_Layer.c: 1544: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
 15684  0C67  1642               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 15685                           
 15686                           ;BVH2_Appl_Layer.c: 1547: if (ui8_ResetMatlab == 1) {
 15687  0C68  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 15688  0C69  2C6D               	goto	l11944
 15689  0C6A                     l11940:	
 15690                           
 15691                           ;BVH2_Appl_Layer.c: 1549: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15692  0C6A  1442               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15693                           
 15694                           ;BVH2_Appl_Layer.c: 1488: Cb9_oCurrentAlarm = 0;
 15695  0C6B  0022               	movlb	2	; select bank2
 15696  0C6C  01B9               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 15697  0C6D                     l11944:	
 15698                           
 15699                           ;BVH2_Appl_Layer.c: 1551: }
 15700                           ;BVH2_Appl_Layer.c: 1552: }
 15701                           ;BVH2_Appl_Layer.c: 1553: }
 15702                           ;BVH2_Appl_Layer.c: 1554: }
 15703                           ;BVH2_Appl_Layer.c: 1555: }
 15704                           ;BVH2_Appl_Layer.c: 1556: }
 15705                           ;BVH2_Appl_Layer.c: 1561: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 15706  0C6D  0022               	movlb	2	; select bank2
 15707  0C6E  0839               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 15708  0C6F  0021               	movlb	1	; select bank1
 15709  0C70  00D8               	movwf	_bool_HighCurrentAlarm^(0+128)
 15710                           
 15711                           ;BVH2_Appl_Layer.c: 1564: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 15712  0C71  0022               	movlb	2	; select bank2
 15713  0C72  084A               	movf	_Cb34_oPWM_Alarm^(0+256),w
 15714  0C73  00D8               	movwf	_bool_PWMin_err_Alarm^(0+256)
 15715                           
 15716                           ;BVH2_Appl_Layer.c: 1567: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 15717  0C74  0844               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 15718  0C75  00D6               	movwf	_bool_UbatAlarm^(0+256)
 15719                           
 15720                           ;BVH2_Appl_Layer.c: 1568: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 15721  0C76  0024               	movlb	4	; select bank4
 15722  0C77  01AC               	clrf	_BVH2_Appl_Layer$1210^(0+512)
 15723  0C78  0AAC               	incf	_BVH2_Appl_Layer$1210^(0+512),f
 15724  0C79  0022               	movlb	2	; select bank2
 15725  0C7A  083D               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
 15726  0C7B  1D03               	btfss	3,2
 15727  0C7C  2C85               	goto	l11960
 15728  0C7D  084C               	movf	_Cb1_oCurrentAlarm^(0+256),w
 15729  0C7E  1D03               	btfss	3,2
 15730  0C7F  2C85               	goto	l11960
 15731  0C80  0840               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),w
 15732  0C81  1D03               	btfss	3,2
 15733  0C82  2C85               	goto	l11960
 15734  0C83  0024               	movlb	4	; select bank4
 15735  0C84  01AC               	clrf	_BVH2_Appl_Layer$1210^(0+512)
 15736  0C85                     l11960:	
 15737  0C85  0024               	movlb	4	; select bank4
 15738  0C86  082C               	movf	_BVH2_Appl_Layer$1210^(0+512),w
 15739  0C87  0021               	movlb	1	; select bank1
 15740  0C88  00D9               	movwf	_bool_MotorStalled^(0+128)
 15741                           
 15742                           ;BVH2_Appl_Layer.c: 1574: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 15743  0C89  0022               	movlb	2	; select bank2
 15744  0C8A  083B               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 15745  0C8B  00D7               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 15746                           
 15747                           ;BVH2_Appl_Layer.c: 1575: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 15748  0C8C  0024               	movlb	4	; select bank4
 15749  0C8D  01AD               	clrf	_BVH2_Appl_Layer$1211^(0+512)
 15750  0C8E  0AAD               	incf	_BVH2_Appl_Layer$1211^(0+512),f
 15751  0C8F  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 15752  0C90  1D03               	btfss	3,2
 15753  0C91  2C9C               	goto	l11974
 15754  0C92  0022               	movlb	2	; select bank2
 15755  0C93  083E               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),w
 15756  0C94  1D03               	btfss	3,2
 15757  0C95  2C9C               	goto	l11974
 15758  0C96  0021               	movlb	1	; select bank1
 15759  0C97  083E               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15760  0C98  1D03               	btfss	3,2
 15761  0C99  2C9C               	goto	l11974
 15762  0C9A  0024               	movlb	4	; select bank4
 15763  0C9B  01AD               	clrf	_BVH2_Appl_Layer$1211^(0+512)
 15764  0C9C                     l11974:	
 15765  0C9C  0024               	movlb	4	; select bank4
 15766  0C9D  082D               	movf	_BVH2_Appl_Layer$1211^(0+512),w
 15767  0C9E  00B4               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512)
 15768                           
 15769                           ;BVH2_Appl_Layer.c: 1576: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 15770  0C9F  01AE               	clrf	_BVH2_Appl_Layer$1212^(0+512)
 15771  0CA0  0AAE               	incf	_BVH2_Appl_Layer$1212^(0+512),f
 15772  0CA1  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 15773  0CA2  1D03               	btfss	3,2
 15774  0CA3  2CAA               	goto	l11984
 15775  0CA4  0021               	movlb	1	; select bank1
 15776  0CA5  084D               	movf	_bool_ControlLoopMode^(0+128),w
 15777  0CA6  1D03               	btfss	3,2
 15778  0CA7  2CAA               	goto	l11984
 15779  0CA8  0024               	movlb	4	; select bank4
 15780  0CA9  01AE               	clrf	_BVH2_Appl_Layer$1212^(0+512)
 15781  0CAA                     l11984:	
 15782  0CAA  0024               	movlb	4	; select bank4
 15783  0CAB  082E               	movf	_BVH2_Appl_Layer$1212^(0+512),w
 15784  0CAC  00B6               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512)
 15785                           
 15786                           ;BVH2_Appl_Layer.c: 1577: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 15787  0CAD  0022               	movlb	2	; select bank2
 15788  0CAE  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 15789  0CAF  1903               	btfsc	3,2
 15790  0CB0  2CBB               	goto	l11992
 15791  0CB1  086D               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
 15792  0CB2  1D03               	btfss	3,2
 15793  0CB3  2CBB               	goto	l11992
 15794                           
 15795                           ;BVH2_Appl_Layer.c: 1578: {
 15796                           ;BVH2_Appl_Layer.c: 1579: X_Sb4_Intergrator = 80000 ;
 15797  0CB4  3001               	movlw	1
 15798  0CB5  01EB               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 15799  0CB6  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 15800  0CB7  3038               	movlw	56
 15801  0CB8  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 15802  0CB9  3080               	movlw	128
 15803  0CBA  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 15804  0CBB                     l11992:	
 15805                           
 15806                           ;BVH2_Appl_Layer.c: 1580: }
 15807                           ;BVH2_Appl_Layer.c: 1584: if (Sb1_Logical_Operator3) {
 15808  0CBB  0024               	movlb	4	; select bank4
 15809  0CBC  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 15810  0CBD  1903               	btfsc	3,2
 15811  0CBE  2CC1               	goto	l11996
 15812                           
 15813                           ;BVH2_Appl_Layer.c: 1585: Sb2_Switch2 = 0 ;
 15814  0CBF  01B9               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15815  0CC0  2D35               	goto	L34
 15816  0CC1                     l11996:	
 15817                           ;BVH2_Appl_Layer.c: 1586: }
 15818                           
 15819                           
 15820                           ;BVH2_Appl_Layer.c: 1587: else {
 15821                           ;BVH2_Appl_Layer.c: 1590: if (bool_ControlLoopMode) {
 15822  0CC1  0021               	movlb	1	; select bank1
 15823  0CC2  084D               	movf	_bool_ControlLoopMode^(0+128),w
 15824  0CC3  1903               	btfsc	3,2
 15825  0CC4  2D37               	goto	l12016
 15826                           
 15827                           ;BVH2_Appl_Layer.c: 1593: if (Sb1_Logical_Operator5) {
 15828  0CC5  0024               	movlb	4	; select bank4
 15829  0CC6  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 15830  0CC7  1903               	btfsc	3,2
 15831  0CC8  2CCB               	goto	l12002
 15832  0CC9                     l12000:	
 15833                           
 15834                           ;BVH2_Appl_Layer.c: 1594: Sb2_Switch2 = Sb2_Fixed_Power;
 15835  0CC9  30CA               	movlw	202
 15836  0CCA  2D34               	goto	L39
 15837  0CCB                     l12002:	
 15838                           ;BVH2_Appl_Layer.c: 1595: }
 15839                           
 15840                           
 15841                           ;BVH2_Appl_Layer.c: 1596: else {
 15842                           ;BVH2_Appl_Layer.c: 1598: UInt16 Sb3_Product1 ;
 15843                           ;BVH2_Appl_Layer.c: 1599: Int16 Sb3_Sum1;
 15844                           ;BVH2_Appl_Layer.c: 1607: Sb3_Product1 = (UInt16) (((UInt16) (140 << 8)) / 160 );
 15845  0CCB  30E0               	movlw	224
 15846  0CCC  00AF               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+512)
 15847  0CCD  01B0               	clrf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512)
 15848                           
 15849                           ;BVH2_Appl_Layer.c: 1613: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>
 15850                           ;BVH2_Appl_Layer.c: 1614: 8)) + ((Int16) (((Int16) (-((Int16) (UInt16) ((((UInt32) Sb3_P
      +                          roduct1) * 95) >> 7)))) + 200)));
 15851  0CCE  0021               	movlb	1	; select bank1
 15852  0CCF  084F               	movf	_ui8_PWM_dc_mat^(0+128),w
 15853  0CD0  0020               	movlb	0	; select bank0
 15854  0CD1  00B0               	movwf	___lmul@multiplier
 15855  0CD2  01B1               	clrf	___lmul@multiplier+1
 15856  0CD3  01B2               	clrf	___lmul@multiplier+2
 15857  0CD4  01B3               	clrf	___lmul@multiplier+3
 15858  0CD5  0024               	movlb	4	; select bank4
 15859  0CD6  082F               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+512),w
 15860  0CD7  0020               	movlb	0	; select bank0
 15861  0CD8  00B4               	movwf	___lmul@multiplicand
 15862  0CD9  0024               	movlb	4	; select bank4
 15863  0CDA  0830               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512),w
 15864  0CDB  0020               	movlb	0	; select bank0
 15865  0CDC  00B5               	movwf	___lmul@multiplicand+1
 15866  0CDD  01B6               	clrf	___lmul@multiplicand+2
 15867  0CDE  01B7               	clrf	___lmul@multiplicand+3
 15868  0CDF  2645  3188         	fcall	___lmul
 15869  0CE1  0832               	movf	?___lmul+2,w
 15870  0CE2  0024               	movlb	4	; select bank4
 15871  0CE3  00BD               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512)
 15872  0CE4  0020               	movlb	0	; select bank0
 15873  0CE5  0831               	movf	?___lmul+1,w
 15874  0CE6  0024               	movlb	4	; select bank4
 15875  0CE7  00BC               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512)
 15876  0CE8  082F               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+512),w
 15877  0CE9  0020               	movlb	0	; select bank0
 15878  0CEA  00B0               	movwf	___lmul@multiplier
 15879  0CEB  0024               	movlb	4	; select bank4
 15880  0CEC  0830               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512),w
 15881  0CED  0020               	movlb	0	; select bank0
 15882  0CEE  00B1               	movwf	___lmul@multiplier+1
 15883  0CEF  305F               	movlw	95
 15884  0CF0  01B2               	clrf	___lmul@multiplier+2
 15885  0CF1  01B3               	clrf	___lmul@multiplier+3
 15886  0CF2  00B4               	movwf	___lmul@multiplicand
 15887  0CF3  01B5               	clrf	___lmul@multiplicand+1
 15888  0CF4  01B6               	clrf	___lmul@multiplicand+2
 15889  0CF5  01B7               	clrf	___lmul@multiplicand+3
 15890  0CF6  2645  3188         	fcall	___lmul
 15891  0CF8  0830               	movf	?___lmul,w
 15892  0CF9  00BE               	movwf	??_BVH2_Appl_Layer
 15893  0CFA  0831               	movf	?___lmul+1,w
 15894  0CFB  00BF               	movwf	??_BVH2_Appl_Layer+1
 15895  0CFC  0832               	movf	?___lmul+2,w
 15896  0CFD  00C0               	movwf	??_BVH2_Appl_Layer+2
 15897  0CFE  0833               	movf	?___lmul+3,w
 15898  0CFF  00C1               	movwf	??_BVH2_Appl_Layer+3
 15899  0D00  3007               	movlw	7
 15900  0D01                     u10335:	
 15901  0D01  36C1               	lsrf	??_BVH2_Appl_Layer+3,f
 15902  0D02  0CC0               	rrf	??_BVH2_Appl_Layer+2,f
 15903  0D03  0CBF               	rrf	??_BVH2_Appl_Layer+1,f
 15904  0D04  0CBE               	rrf	??_BVH2_Appl_Layer,f
 15905  0D05  0B89               	decfsz	9,f
 15906  0D06  2D01               	goto	u10335
 15907  0D07  083E               	movf	??_BVH2_Appl_Layer,w
 15908  0D08  0024               	movlb	4	; select bank4
 15909  0D09  02BC               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 15910  0D0A  0020               	movlb	0	; select bank0
 15911  0D0B  083F               	movf	??_BVH2_Appl_Layer+1,w
 15912  0D0C  0024               	movlb	4	; select bank4
 15913  0D0D  3BBD               	subwfb	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 15914  0D0E  30C8               	movlw	200
 15915  0D0F  07BC               	addwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 15916  0D10  1803               	skipnc
 15917  0D11  0ABD               	incf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 15918                           
 15919                           ;BVH2_Appl_Layer.c: 1617: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 15920  0D12  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 15921  0D13  27E2  3188         	fcall	PL84	;call to abstracted procedure
 15922  0D15  1D03               	skipz
 15923  0D16  2D1A               	goto	u10345
 15924  0D17  30C9               	movlw	201
 15925  0D18  0024               	movlb	4	; select bank4
 15926  0D19  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15927  0D1A                     u10345:	
 15928  0D1A  1803               	skipnc
 15929  0D1B  2D32               	goto	l12014
 15930  0D1C  0024               	movlb	4	; select bank4
 15931  0D1D  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 15932  0D1E  27E2  3188         	fcall	PL84	;call to abstracted procedure
 15933  0D20  1D03               	skipz
 15934  0D21  2D25               	goto	u10355
 15935  0D22  303C               	movlw	60
 15936  0D23  0024               	movlb	4	; select bank4
 15937  0D24  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15938  0D25                     u10355:	
 15939  0D25  1C03               	skipc
 15940  0D26  2D2A               	goto	l12012
 15941  0D27  0024               	movlb	4	; select bank4
 15942  0D28  083C               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15943  0D29  2D2C               	goto	L35
 15944  0D2A                     l12012:	
 15945  0D2A  303C               	movlw	60
 15946  0D2B  0024               	movlb	4	; select bank4
 15947  0D2C                     L35:	
 15948  0D2C  00A4               	movwf	_BVH2_Appl_Layer$1215^(0+512)
 15949  0D2D  01A5               	clrf	(_BVH2_Appl_Layer$1215+1)^(0+512)
 15950  0D2E  0825               	movf	(_BVH2_Appl_Layer$1215+1)^(0+512),w
 15951  0D2F  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15952  0D30  0824               	movf	_BVH2_Appl_Layer$1215^(0+512),w
 15953  0D31  2D8E               	goto	L36
 15954  0D32                     l12014:	
 15955  0D32  30C8               	movlw	200
 15956  0D33  0024               	movlb	4	; select bank4
 15957  0D34                     L39:	
 15958  0D34  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15959  0D35                     L34:	
 15960  0D35  01BA               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15961  0D36  2D8F               	goto	l12030
 15962  0D37                     l12016:	
 15963                           
 15964                           ;BVH2_Appl_Layer.c: 1620: else {
 15965                           ;BVH2_Appl_Layer.c: 1622: Int16 Sb4_PI_sum;
 15966                           ;BVH2_Appl_Layer.c: 1627: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / (
      +                          (Int32) 800))) + ((UInt16)
 15967                           ;BVH2_Appl_Layer.c: 1628: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 15968  0D37  0020               	movlb	0	; select bank0
 15969  0D38  3003               	movlw	3
 15970  0D39  01B3               	clrf	___aldiv@divisor+3
 15971  0D3A  01B2               	clrf	___aldiv@divisor+2
 15972  0D3B  00B1               	movwf	___aldiv@divisor+1
 15973  0D3C  3020               	movlw	32
 15974  0D3D  00B0               	movwf	___aldiv@divisor
 15975  0D3E  0022               	movlb	2	; select bank2
 15976  0D3F  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 15977  0D40  0020               	movlb	0	; select bank0
 15978  0D41  00B7               	movwf	___aldiv@dividend+3
 15979  0D42  0022               	movlb	2	; select bank2
 15980  0D43  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 15981  0D44  0020               	movlb	0	; select bank0
 15982  0D45  00B6               	movwf	___aldiv@dividend+2
 15983  0D46  0022               	movlb	2	; select bank2
 15984  0D47  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 15985  0D48  0020               	movlb	0	; select bank0
 15986  0D49  00B5               	movwf	___aldiv@dividend+1
 15987  0D4A  0022               	movlb	2	; select bank2
 15988  0D4B  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 15989  0D4C  0020               	movlb	0	; select bank0
 15990  0D4D  00B4               	movwf	___aldiv@dividend
 15991  0D4E  271F  3188         	fcall	___aldiv
 15992  0D50  0831               	movf	?___aldiv+1,w
 15993  0D51  0024               	movlb	4	; select bank4
 15994  0D52  00BF               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512)
 15995  0D53  0020               	movlb	0	; select bank0
 15996  0D54  0830               	movf	?___aldiv,w
 15997  0D55  0024               	movlb	4	; select bank4
 15998  0D56  00BE               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512)
 15999  0D57  0022               	movlb	2	; select bank2
 16000  0D58  085A               	movf	_ui8_Kp_mat^(0+256),w
 16001  0D59  0020               	movlb	0	; select bank0
 16002  0D5A  00B0               	movwf	___wmul@multiplier
 16003  0D5B  01B1               	clrf	___wmul@multiplier+1
 16004  0D5C  27D1  3188         	fcall	PL68	;call to abstracted procedure
 16005  0D5E  266A  3188         	fcall	___wmul
 16006  0D60  0830               	movf	?___wmul,w
 16007  0D61  0024               	movlb	4	; select bank4
 16008  0D62  07BE               	addwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),f
 16009  0D63  0020               	movlb	0	; select bank0
 16010  0D64  0831               	movf	?___wmul+1,w
 16011  0D65  0024               	movlb	4	; select bank4
 16012  0D66  3DBF               	addwfc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),f
 16013                           
 16014                           ;BVH2_Appl_Layer.c: 1631: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 16015  0D67  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 16016  0D68  27E2  3188         	fcall	PL84	;call to abstracted procedure
 16017  0D6A  1D03               	skipz
 16018  0D6B  2D6F               	goto	u10365
 16019  0D6C  3001               	movlw	1
 16020  0D6D  0024               	movlb	4	; select bank4
 16021  0D6E  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 16022  0D6F                     u10365:	
 16023  0D6F  1C03               	skipc
 16024  0D70  2D79               	goto	l1790
 16025  0D71  3000               	movlw	0
 16026  0D72  0024               	movlb	4	; select bank4
 16027  0D73  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 16028  0D74  30CB               	movlw	203
 16029  0D75  1903               	skipnz
 16030  0D76  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 16031  0D77  1803               	skipnc
 16032  0D78  2CC9               	goto	l12000
 16033  0D79                     l1790:	
 16034  0D79  0024               	movlb	4	; select bank4
 16035  0D7A  1BBF               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),7
 16036  0D7B  2D88               	goto	l12026
 16037  0D7C  3000               	movlw	0
 16038  0D7D  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 16039  0D7E  3028               	movlw	40
 16040  0D7F  1903               	skipnz
 16041  0D80  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 16042  0D81  1C03               	skipc
 16043  0D82  2D88               	goto	l12026
 16044  0D83  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 16045  0D84  00A7               	movwf	(_BVH2_Appl_Layer$1217+1)^(0+512)
 16046  0D85  083E               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 16047  0D86  00A6               	movwf	_BVH2_Appl_Layer$1217^(0+512)
 16048  0D87  2D8B               	goto	l1794
 16049  0D88                     l12026:	
 16050  0D88  3028               	movlw	40
 16051  0D89  00A6               	movwf	_BVH2_Appl_Layer$1217^(0+512)
 16052  0D8A  01A7               	clrf	(_BVH2_Appl_Layer$1217+1)^(0+512)
 16053  0D8B                     l1794:	
 16054  0D8B  0827               	movf	(_BVH2_Appl_Layer$1217+1)^(0+512),w
 16055  0D8C  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 16056  0D8D  0826               	movf	_BVH2_Appl_Layer$1217^(0+512),w
 16057  0D8E                     L36:	
 16058  0D8E  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 16059  0D8F                     l12030:	
 16060                           
 16061                           ;BVH2_Appl_Layer.c: 1640: bl_Pumpoff_Alarm = Sb1_Logical_Operator2;
 16062  0D8F  083A               	movf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512),w
 16063  0D90  0020               	movlb	0	; select bank0
 16064  0D91  00BF               	movwf	??_BVH2_Appl_Layer+1
 16065  0D92  0024               	movlb	4	; select bank4
 16066  0D93  0839               	movf	BVH2_Appl_Layer@Sb2_Switch2^(0+512),w
 16067  0D94  0020               	movlb	0	; select bank0
 16068  0D95  00BE               	movwf	??_BVH2_Appl_Layer
 16069  0D96  36BF               	lsrf	??_BVH2_Appl_Layer+1,f
 16070  0D97  0CBE               	rrf	??_BVH2_Appl_Layer,f
 16071  0D98  083E               	movf	??_BVH2_Appl_Layer,w
 16072  0D99  0022               	movlb	2	; select bank2
 16073  0D9A  00D9               	movwf	_ui8_duty_cycle_mat^(0+256)
 16074                           
 16075                           ;BVH2_Appl_Layer.c: 1641: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 16076  0D9B  0024               	movlb	4	; select bank4
 16077  0D9C  0836               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512),w
 16078  0D9D  0022               	movlb	2	; select bank2
 16079  0D9E  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 16080                           
 16081                           ;BVH2_Appl_Layer.c: 1645: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<
 16082                           ;BVH2_Appl_Layer.c: 1646: 3));
 16083  0D9F  0023               	movlb	3	; select bank3
 16084  0DA0  084D               	movf	(_ui8_Ki_mat+1)^(0+384),w
 16085  0DA1  0020               	movlb	0	; select bank0
 16086  0DA2  00B1               	movwf	___wmul@multiplier+1
 16087  0DA3  0023               	movlb	3	; select bank3
 16088  0DA4  084C               	movf	_ui8_Ki_mat^(0+384),w
 16089  0DA5  0020               	movlb	0	; select bank0
 16090  0DA6  00B0               	movwf	___wmul@multiplier
 16091  0DA7  27D1  3188         	fcall	PL68	;call to abstracted procedure
 16092  0DA9  266A  3188         	fcall	___wmul
 16093  0DAB  0830               	movf	?___wmul,w
 16094  0DAC  00BE               	movwf	??_BVH2_Appl_Layer
 16095  0DAD  0831               	movf	?___wmul+1,w
 16096  0DAE  00BF               	movwf	??_BVH2_Appl_Layer+1
 16097  0DAF  35BE               	lslf	??_BVH2_Appl_Layer,f
 16098  0DB0  0DBF               	rlf	??_BVH2_Appl_Layer+1,f
 16099  0DB1  35BE               	lslf	??_BVH2_Appl_Layer,f
 16100  0DB2  0DBF               	rlf	??_BVH2_Appl_Layer+1,f
 16101  0DB3  35BE               	lslf	??_BVH2_Appl_Layer,f
 16102  0DB4  0DBF               	rlf	??_BVH2_Appl_Layer+1,f
 16103  0DB5  083E               	movf	??_BVH2_Appl_Layer,w
 16104  0DB6  00C0               	movwf	??_BVH2_Appl_Layer+2
 16105  0DB7  083F               	movf	??_BVH2_Appl_Layer+1,w
 16106  0DB8  00C1               	movwf	??_BVH2_Appl_Layer+3
 16107  0DB9  3000               	movlw	0
 16108  0DBA  1BC1               	btfsc	??_BVH2_Appl_Layer+3,7
 16109  0DBB  30FF               	movlw	255
 16110  0DBC  00C2               	movwf	??_BVH2_Appl_Layer+4
 16111  0DBD  00C3               	movwf	??_BVH2_Appl_Layer+5
 16112  0DBE  0840               	movf	??_BVH2_Appl_Layer+2,w
 16113  0DBF  0022               	movlb	2	; select bank2
 16114  0DC0  07E8               	addwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),f
 16115  0DC1  0020               	movlb	0	; select bank0
 16116  0DC2  0841               	movf	??_BVH2_Appl_Layer+3,w
 16117  0DC3  0022               	movlb	2	; select bank2
 16118  0DC4  3DE9               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),f
 16119  0DC5  0020               	movlb	0	; select bank0
 16120  0DC6  0842               	movf	??_BVH2_Appl_Layer+4,w
 16121  0DC7  0022               	movlb	2	; select bank2
 16122  0DC8  3DEA               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),f
 16123  0DC9  0020               	movlb	0	; select bank0
 16124  0DCA  0843               	movf	??_BVH2_Appl_Layer+5,w
 16125  0DCB  0022               	movlb	2	; select bank2
 16126  0DCC  3DEB               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),f
 16127                           
 16128                           ;BVH2_Appl_Layer.c: 1649: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 16129  0DCD  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 16130  0DCE  2DDA               	goto	l12038
 16131  0DCF  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16132  0DD0  1D03               	btfss	3,2
 16133  0DD1  2E0B               	goto	l12044
 16134  0DD2  3041               	movlw	65
 16135  0DD3  0268               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 16136  0DD4  3077               	movlw	119
 16137  0DD5  3B69               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16138  0DD6  3002               	movlw	2
 16139  0DD7  3B6A               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16140  0DD8  1803               	btfsc	3,0
 16141  0DD9  2E0B               	goto	l12044
 16142  0DDA                     l12038:	
 16143  0DDA  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 16144  0DDB  2DF6               	goto	l12042
 16145  0DDC  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16146  0DDD  1D03               	btfss	3,2
 16147  0DDE  2DE6               	goto	l12040
 16148  0DDF  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16149  0DE0  1D03               	btfss	3,2
 16150  0DE1  2DE6               	goto	l12040
 16151  0DE2  307D               	movlw	125
 16152  0DE3  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16153  0DE4  1C03               	btfss	3,0
 16154  0DE5  2DF6               	goto	l12042
 16155  0DE6                     l12040:	
 16156  0DE6  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16157  0DE7  0024               	movlb	4	; select bank4
 16158  0DE8  00A3               	movwf	(_BVH2_Appl_Layer$1218+3)^(0+512)
 16159  0DE9  0022               	movlb	2	; select bank2
 16160  0DEA  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16161  0DEB  0024               	movlb	4	; select bank4
 16162  0DEC  00A2               	movwf	(_BVH2_Appl_Layer$1218+2)^(0+512)
 16163  0DED  0022               	movlb	2	; select bank2
 16164  0DEE  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16165  0DEF  0024               	movlb	4	; select bank4
 16166  0DF0  00A1               	movwf	(_BVH2_Appl_Layer$1218+1)^(0+512)
 16167  0DF1  0022               	movlb	2	; select bank2
 16168  0DF2  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 16169  0DF3  0024               	movlb	4	; select bank4
 16170  0DF4  00A0               	movwf	_BVH2_Appl_Layer$1218^(0+512)
 16171  0DF5  2DFC               	goto	l1802
 16172  0DF6                     l12042:	
 16173  0DF6  0024               	movlb	4	; select bank4
 16174  0DF7  307D               	movlw	125
 16175  0DF8  01A3               	clrf	(_BVH2_Appl_Layer$1218+3)^(0+512)
 16176  0DF9  01A2               	clrf	(_BVH2_Appl_Layer$1218+2)^(0+512)
 16177  0DFA  00A1               	movwf	(_BVH2_Appl_Layer$1218+1)^(0+512)
 16178  0DFB  01A0               	clrf	_BVH2_Appl_Layer$1218^(0+512)
 16179  0DFC                     l1802:	
 16180  0DFC  0823               	movf	(_BVH2_Appl_Layer$1218+3)^(0+512),w
 16181  0DFD  0022               	movlb	2	; select bank2
 16182  0DFE  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 16183  0DFF  0024               	movlb	4	; select bank4
 16184  0E00  0822               	movf	(_BVH2_Appl_Layer$1218+2)^(0+512),w
 16185  0E01  0022               	movlb	2	; select bank2
 16186  0E02  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 16187  0E03  0024               	movlb	4	; select bank4
 16188  0E04  0821               	movf	(_BVH2_Appl_Layer$1218+1)^(0+512),w
 16189  0E05  0022               	movlb	2	; select bank2
 16190  0E06  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 16191  0E07  0024               	movlb	4	; select bank4
 16192  0E08  0820               	movf	_BVH2_Appl_Layer$1218^(0+512),w
 16193  0E09  0022               	movlb	2	; select bank2
 16194  0E0A  2E11               	goto	L37
 16195  0E0B                     l12044:	
 16196  0E0B  3002               	movlw	2
 16197  0E0C  01EB               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 16198  0E0D  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 16199  0E0E  3077               	movlw	119
 16200  0E0F  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 16201  0E10  3040               	movlw	64
 16202  0E11                     L37:	
 16203  0E11  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 16204                           
 16205                           ;BVH2_Appl_Layer.c: 1652: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 16206  0E12  01ED               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 16207  0E13  0008               	return
 16208  0E14                     __end_of_BVH2_Appl_Layer:	
 16209  0E14                     __ptext48:	
 16210 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 16211 ;; Defined at:
 16212 ;;		line 1676 in file "../T_Link/BVH2_Appl_Layer.c"
 16213 ;; Parameters:    Size  Location     Type
 16214 ;;		None
 16215 ;; Auto vars:     Size  Location     Type
 16216 ;;		None
 16217 ;; Return value:  Size  Location     Type
 16218 ;;                  1    wreg      void 
 16219 ;; Registers used:
 16220 ;;		wreg, status,2, status,0
 16221 ;; Tracked objects:
 16222 ;;		On entry : 1F/1
 16223 ;;		On exit  : 1F/1
 16224 ;;		Unchanged: 0/0
 16225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16226 ;;      Params:         0       0       0       0       0       0       0       0
 16227 ;;      Locals:         0       0       0       0       0       0       0       0
 16228 ;;      Temps:          0       0       0       0       0       0       0       0
 16229 ;;      Totals:         0       0       0       0       0       0       0       0
 16230 ;;Total ram usage:        0 bytes
 16231 ;; Hardware stack levels used:    1
 16232 ;; Hardware stack levels required when called:    4
 16233 ;; This function calls:
 16234 ;;		Nothing
 16235 ;; This function is called by:
 16236 ;;		_BVH2_Appl_Layer
 16237 ;; This function uses a non-reentrant model
 16238 ;;
 16239                           
 16240                           
 16241                           ;psect for function _Cb1_Current_An___High_node_fcn1
 16242  0E14                     _Cb1_Current_An___High_node_fcn1:	
 16243                           
 16244                           ;BVH2_Appl_Layer.c: 1680: if (bool_mat_currAlarm_bldc) {
 16245                           
 16246                           ;incstack = 0
 16247                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 16248  0E14  084E               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 16249  0E15  1903               	btfsc	3,2
 16250  0E16  2E24               	goto	l10280
 16251                           
 16252                           ;BVH2_Appl_Layer.c: 1682: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 16253                           ;BVH2_Appl_Layer.c: 1683: (UInt8)2;
 16254  0E17  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 16255  0E18  39F0               	andlw	-16
 16256  0E19  3802               	iorlw	2
 16257  0E1A  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 16258                           
 16259                           ;BVH2_Appl_Layer.c: 1684: Cb1_StateCnt = 0 ;
 16260  0E1B  01A8               	clrf	_Cb1_StateCnt^(0+128)
 16261  0E1C  01A9               	clrf	(_Cb1_StateCnt+1)^(0+128)
 16262  0E1D  2E20               	goto	l10278
 16263  0E1E                     L45:	
 16264                           ;BVH2_Appl_Layer.c: 1690: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 16265                           ;BVH2_Appl_Layer.c: 1691: (UInt8)5;
 16266                           
 16267                           
 16268                           ;BVH2_Appl_Layer.c: 1692: Cb1_oShutoff = 0;
 16269                           
 16270                           ;BVH2_Appl_Layer.c: 1693: Cb1_oCurrentAlarm = 0;
 16271  0E1E  27EF               	fcall	PL92	;call to abstracted procedure
 16272                           
 16273                           ;BVH2_Appl_Layer.c: 1694: Cb1_RestartCounter = 0 ;
 16274  0E1F  01CD               	clrf	_Cb1_RestartCounter^(0+256)
 16275  0E20                     l10278:	
 16276                           
 16277                           ;BVH2_Appl_Layer.c: 1685: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 16278  0E20  3030               	movlw	48
 16279  0E21  0021               	movlb	1	; select bank1
 16280  0E22  04C9               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 16281                           
 16282                           ;BVH2_Appl_Layer.c: 1686: }
 16283  0E23  0008               	return
 16284  0E24                     l10280:	
 16285                           
 16286                           ;BVH2_Appl_Layer.c: 1687: else {
 16287                           ;BVH2_Appl_Layer.c: 1688: if (Cb1_StateCnt > 100) {
 16288  0E24  3000               	movlw	0
 16289  0E25  0229               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 16290  0E26  3065               	movlw	101
 16291  0E27  1903               	skipnz
 16292  0E28  0228               	subwf	_Cb1_StateCnt^(0+128),w
 16293                           
 16294                           ;BVH2_Appl_Layer.c: 1697: else {
 16295                           ;BVH2_Appl_Layer.c: 1698: SIBFS_Current_Analysis_High_b.Cb1_glflag = 1 ;
 16296  0E29  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 16297  0E2A  1803               	btfsc	3,0
 16298  0E2B  2E1E               	goto	L45
 16299  0E2C  39CF               	andlw	-49
 16300  0E2D  3810               	iorlw	16
 16301  0E2E  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 16302  0E2F  0008               	return
 16303  0E30                     __end_of_Cb1_Current_An___High_node_fcn1:	
 16304  0E30                     __ptext46:	
 16305 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 16306 ;; Defined at:
 16307 ;;		line 1839 in file "../T_Link/BVH2_Appl_Layer.c"
 16308 ;; Parameters:    Size  Location     Type
 16309 ;;		None
 16310 ;; Auto vars:     Size  Location     Type
 16311 ;;		None
 16312 ;; Return value:  Size  Location     Type
 16313 ;;                  1    wreg      void 
 16314 ;; Registers used:
 16315 ;;		wreg, status,2, status,0
 16316 ;; Tracked objects:
 16317 ;;		On entry : 1F/1
 16318 ;;		On exit  : 1F/1
 16319 ;;		Unchanged: 0/0
 16320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16321 ;;      Params:         0       0       0       0       0       0       0       0
 16322 ;;      Locals:         0       0       0       0       0       0       0       0
 16323 ;;      Temps:          0       0       0       0       0       0       0       0
 16324 ;;      Totals:         0       0       0       0       0       0       0       0
 16325 ;;Total ram usage:        0 bytes
 16326 ;; Hardware stack levels used:    1
 16327 ;; Hardware stack levels required when called:    4
 16328 ;; This function calls:
 16329 ;;		Nothing
 16330 ;; This function is called by:
 16331 ;;		_BVH2_Appl_Layer
 16332 ;; This function uses a non-reentrant model
 16333 ;;
 16334                           
 16335                           
 16336                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
 16337  0E30                     _Cb44_Pic_etat_monitor_node_fcn1:	
 16338                           
 16339                           ;BVH2_Appl_Layer.c: 1849: else {
 16340                           ;BVH2_Appl_Layer.c: 1850: if (Cb44_StateCnt > 5) {
 16341                           
 16342                           ;BVH2_Appl_Layer.c: 1843: if (bool_mat_pic_etat) {
 16343                           
 16344                           ;incstack = 0
 16345                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 16346  0E30  3000               	movlw	0
 16347  0E31  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 16348  0E32  3006               	movlw	6
 16349  0E33  1903               	skipnz
 16350  0E34  0226               	subwf	_Cb44_StateCnt^(0+128),w
 16351                           
 16352                           ;BVH2_Appl_Layer.c: 1852: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 16353  0E35  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 16354  0E36  1C03               	skipc
 16355  0E37  2E41               	goto	L43
 16356  0E38  39F8               	andlw	-8
 16357  0E39  3803               	iorlw	3
 16358  0E3A  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 16359                           
 16360                           ;BVH2_Appl_Layer.c: 1854: Cb44_oAlarm = 0;
 16361  0E3B  0022               	movlb	2	; select bank2
 16362  0E3C  3018               	movlw	24
 16363  0E3D  01C5               	clrf	_Cb44_oShutoff^(0+256)
 16364                           
 16365                           ;BVH2_Appl_Layer.c: 1855: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 16366  0E3E  0021               	movlb	1	; select bank1
 16367  0E3F  04C7               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 16368                           
 16369                           ;BVH2_Appl_Layer.c: 1856: }
 16370  0E40  0008               	return
 16371  0E41                     L43:	
 16372                           ;BVH2_Appl_Layer.c: 1857: else {
 16373                           ;BVH2_Appl_Layer.c: 1858: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 1 ;
 16374                           
 16375  0E41  39E7               	andlw	-25
 16376  0E42  3808               	iorlw	8
 16377  0E43  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 16378  0E44  0008               	return
 16379  0E45                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 16380  0E45                     __ptext43:	
 16381 ;; *************** function ___lmul *****************
 16382 ;; Defined at:
 16383 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
 16384 ;; Parameters:    Size  Location     Type
 16385 ;;  multiplier      4   16[BANK0 ] unsigned long 
 16386 ;;  multiplicand    4   20[BANK0 ] unsigned long 
 16387 ;; Auto vars:     Size  Location     Type
 16388 ;;  product         4   24[BANK0 ] unsigned long 
 16389 ;; Return value:  Size  Location     Type
 16390 ;;                  4   16[BANK0 ] unsigned long 
 16391 ;; Registers used:
 16392 ;;		wreg, status,2, status,0
 16393 ;; Tracked objects:
 16394 ;;		On entry : 1F/0
 16395 ;;		On exit  : 1F/0
 16396 ;;		Unchanged: 0/0
 16397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16398 ;;      Params:         0       8       0       0       0       0       0       0
 16399 ;;      Locals:         0       4       0       0       0       0       0       0
 16400 ;;      Temps:          0       0       0       0       0       0       0       0
 16401 ;;      Totals:         0      12       0       0       0       0       0       0
 16402 ;;Total ram usage:       12 bytes
 16403 ;; Hardware stack levels used:    1
 16404 ;; Hardware stack levels required when called:    4
 16405 ;; This function calls:
 16406 ;;		Nothing
 16407 ;; This function is called by:
 16408 ;;		_BVH2_Appl_Layer
 16409 ;; This function uses a non-reentrant model
 16410 ;;
 16411                           
 16412                           
 16413                           ;psect for function ___lmul
 16414  0E45                     ___lmul:	
 16415                           
 16416                           ;incstack = 0
 16417                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 16418  0E45  01B8               	clrf	___lmul@product
 16419  0E46  01B9               	clrf	___lmul@product+1
 16420  0E47  01BA               	clrf	___lmul@product+2
 16421  0E48  01BB               	clrf	___lmul@product+3
 16422  0E49                     l2071:	
 16423  0E49  1C30               	btfss	___lmul@multiplier,0
 16424  0E4A  2E53               	goto	l10298
 16425  0E4B  0834               	movf	___lmul@multiplicand,w
 16426  0E4C  07B8               	addwf	___lmul@product,f
 16427  0E4D  0835               	movf	___lmul@multiplicand+1,w
 16428  0E4E  3DB9               	addwfc	___lmul@product+1,f
 16429  0E4F  0836               	movf	___lmul@multiplicand+2,w
 16430  0E50  3DBA               	addwfc	___lmul@product+2,f
 16431  0E51  0837               	movf	___lmul@multiplicand+3,w
 16432  0E52  3DBB               	addwfc	___lmul@product+3,f
 16433  0E53                     l10298:	
 16434  0E53  35B4               	lslf	___lmul@multiplicand,f
 16435  0E54  0DB5               	rlf	___lmul@multiplicand+1,f
 16436  0E55  0DB6               	rlf	___lmul@multiplicand+2,f
 16437  0E56  0DB7               	rlf	___lmul@multiplicand+3,f
 16438  0E57  36B3               	lsrf	___lmul@multiplier+3,f
 16439  0E58  0CB2               	rrf	___lmul@multiplier+2,f
 16440  0E59  0CB1               	rrf	___lmul@multiplier+1,f
 16441  0E5A  0CB0               	rrf	___lmul@multiplier,f
 16442  0E5B  0833               	movf	___lmul@multiplier+3,w
 16443  0E5C  0432               	iorwf	___lmul@multiplier+2,w
 16444  0E5D  0431               	iorwf	___lmul@multiplier+1,w
 16445  0E5E  0430               	iorwf	___lmul@multiplier,w
 16446  0E5F  1D03               	skipz
 16447  0E60  2E49               	goto	l2071
 16448  0E61  083B               	movf	___lmul@product+3,w
 16449  0E62  00B3               	movwf	?___lmul+3
 16450  0E63  083A               	movf	___lmul@product+2,w
 16451  0E64  00B2               	movwf	?___lmul+2
 16452  0E65  0839               	movf	___lmul@product+1,w
 16453  0E66  00B1               	movwf	?___lmul+1
 16454  0E67  0838               	movf	___lmul@product,w
 16455  0E68  00B0               	movwf	?___lmul
 16456  0E69  0008               	return
 16457  0E6A                     __end_of___lmul:	
 16458  0E6A                     __ptext42:	
 16459 ;; *************** function ___wmul *****************
 16460 ;; Defined at:
 16461 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 16462 ;; Parameters:    Size  Location     Type
 16463 ;;  multiplier      2   16[BANK0 ] unsigned int 
 16464 ;;  multiplicand    2   18[BANK0 ] unsigned int 
 16465 ;; Auto vars:     Size  Location     Type
 16466 ;;  product         2   20[BANK0 ] unsigned int 
 16467 ;; Return value:  Size  Location     Type
 16468 ;;                  2   16[BANK0 ] unsigned int 
 16469 ;; Registers used:
 16470 ;;		wreg, status,2, status,0
 16471 ;; Tracked objects:
 16472 ;;		On entry : 1F/0
 16473 ;;		On exit  : 1F/0
 16474 ;;		Unchanged: 0/0
 16475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16476 ;;      Params:         0       4       0       0       0       0       0       0
 16477 ;;      Locals:         0       2       0       0       0       0       0       0
 16478 ;;      Temps:          0       0       0       0       0       0       0       0
 16479 ;;      Totals:         0       6       0       0       0       0       0       0
 16480 ;;Total ram usage:        6 bytes
 16481 ;; Hardware stack levels used:    1
 16482 ;; Hardware stack levels required when called:    4
 16483 ;; This function calls:
 16484 ;;		Nothing
 16485 ;; This function is called by:
 16486 ;;		_commutate
 16487 ;;		_EOL
 16488 ;;		_BVH2_Appl_Layer
 16489 ;; This function uses a non-reentrant model
 16490 ;;
 16491                           
 16492                           
 16493                           ;psect for function ___wmul
 16494  0E6A                     ___wmul:	
 16495                           
 16496                           ;incstack = 0
 16497                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16498  0E6A  01B4               	clrf	___wmul@product
 16499  0E6B  01B5               	clrf	___wmul@product+1
 16500  0E6C                     l9426:	
 16501  0E6C  1C30               	btfss	___wmul@multiplier,0
 16502  0E6D  2E72               	goto	l9430
 16503  0E6E  0832               	movf	___wmul@multiplicand,w
 16504  0E6F  07B4               	addwf	___wmul@product,f
 16505  0E70  0833               	movf	___wmul@multiplicand+1,w
 16506  0E71  3DB5               	addwfc	___wmul@product+1,f
 16507  0E72                     l9430:	
 16508  0E72  35B2               	lslf	___wmul@multiplicand,f
 16509  0E73  0DB3               	rlf	___wmul@multiplicand+1,f
 16510  0E74  36B1               	lsrf	___wmul@multiplier+1,f
 16511  0E75  0CB0               	rrf	___wmul@multiplier,f
 16512  0E76  0830               	movf	___wmul@multiplier,w
 16513  0E77  0431               	iorwf	___wmul@multiplier+1,w
 16514  0E78  1D03               	btfss	3,2
 16515  0E79  2E6C               	goto	l9426
 16516  0E7A  0835               	movf	___wmul@product+1,w
 16517  0E7B  00B1               	movwf	?___wmul+1
 16518  0E7C  0834               	movf	___wmul@product,w
 16519  0E7D  00B0               	movwf	?___wmul
 16520  0E7E  0008               	return
 16521  0E7F                     __end_of___wmul:	
 16522  0E7F                     __ptext47:	
 16523 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 16524 ;; Defined at:
 16525 ;;		line 1720 in file "../T_Link/BVH2_Appl_Layer.c"
 16526 ;; Parameters:    Size  Location     Type
 16527 ;;		None
 16528 ;; Auto vars:     Size  Location     Type
 16529 ;;		None
 16530 ;; Return value:  Size  Location     Type
 16531 ;;                  1    wreg      void 
 16532 ;; Registers used:
 16533 ;;		wreg, status,2, status,0
 16534 ;; Tracked objects:
 16535 ;;		On entry : 1F/1
 16536 ;;		On exit  : 1C/0
 16537 ;;		Unchanged: 0/0
 16538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16539 ;;      Params:         0       0       0       0       0       0       0       0
 16540 ;;      Locals:         0       0       0       0       0       0       0       0
 16541 ;;      Temps:          0       0       0       0       0       0       0       0
 16542 ;;      Totals:         0       0       0       0       0       0       0       0
 16543 ;;Total ram usage:        0 bytes
 16544 ;; Hardware stack levels used:    1
 16545 ;; Hardware stack levels required when called:    4
 16546 ;; This function calls:
 16547 ;;		Nothing
 16548 ;; This function is called by:
 16549 ;;		_BVH2_Appl_Layer
 16550 ;; This function uses a non-reentrant model
 16551 ;;
 16552                           
 16553                           
 16554                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 16555  0E7F                     _Cb34_PWM_Detection_node_fcn1:	
 16556                           
 16557                           ;BVH2_Appl_Layer.c: 1722: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 16558                           
 16559                           ;incstack = 0
 16560                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 16561  0E7F  0845               	movf	_Cb34_idPWM^(0+128),w
 16562  0E80  1903               	btfsc	3,2
 16563  0E81  2E86               	goto	l10138
 16564  0E82  30C8               	movlw	200
 16565  0E83  0245               	subwf	_Cb34_idPWM^(0+128),w
 16566  0E84  1C03               	skipc
 16567  0E85  2E8F               	goto	l10150
 16568  0E86                     l10138:	
 16569                           
 16570                           ;BVH2_Appl_Layer.c: 1724: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 16571  0E86  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16572  0E87  39F0               	andlw	-16
 16573  0E88  3807               	iorlw	7
 16574                           
 16575                           ;BVH2_Appl_Layer.c: 1725: Cb34_odPumpOff = 0;
 16576                           
 16577                           ;BVH2_Appl_Layer.c: 1726: Cb34_odFixedValueSel = 1;
 16578  0E89  27F6               	fcall	PL112	;call to abstracted procedure
 16579                           
 16580                           ;BVH2_Appl_Layer.c: 1727: Cb34_odFixedLowValueSel = 0;
 16581  0E8A  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16582                           
 16583                           ;BVH2_Appl_Layer.c: 1728: Cb34_oPWM_SC_Alarm = 0;
 16584  0E8B  01C9               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16585                           
 16586                           ;BVH2_Appl_Layer.c: 1729: Cb34_oPWM_Alarm = 1;
 16587  0E8C  01CA               	clrf	_Cb34_oPWM_Alarm^(0+256)
 16588  0E8D  0ACA               	incf	_Cb34_oPWM_Alarm^(0+256),f
 16589                           
 16590                           ;BVH2_Appl_Layer.c: 1730: }
 16591  0E8E  0008               	return
 16592  0E8F                     l10150:	
 16593                           
 16594                           ;BVH2_Appl_Layer.c: 1731: else {
 16595                           ;BVH2_Appl_Layer.c: 1734: if ((ui16_PWM_Freq_mat < 36000) || (ui16_PWM_Freq_mat > 44000)
      +                          ) {
 16596  0E8F  308C               	movlw	140
 16597  0E90  0022               	movlb	2	; select bank2
 16598  0E91  0226               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 16599  0E92  30A0               	movlw	160
 16600  0E93  1903               	skipnz
 16601  0E94  0225               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 16602  0E95  1C03               	skipc
 16603  0E96  2E9E               	goto	l10154
 16604  0E97  30AB               	movlw	171
 16605  0E98  0226               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 16606  0E99  30E1               	movlw	225
 16607  0E9A  1903               	skipnz
 16608  0E9B  0225               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 16609  0E9C  1C03               	skipc
 16610  0E9D  2EB6               	goto	l10166
 16611  0E9E                     l10154:	
 16612                           
 16613                           ;BVH2_Appl_Layer.c: 1736: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 16614  0E9E  0021               	movlb	1	; select bank1
 16615  0E9F  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16616  0EA0  39F0               	andlw	-16
 16617  0EA1  3806               	iorlw	6
 16618  0EA2  2EA6               	goto	L44
 16619  0EA3                     l10168:	
 16620                           
 16621                           ;BVH2_Appl_Layer.c: 1746: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 16622  0EA3  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16623  0EA4  39F0               	andlw	-16
 16624  0EA5  3803               	iorlw	3
 16625  0EA6                     L44:	
 16626                           
 16627                           ;BVH2_Appl_Layer.c: 1737: Cb34_odPumpOff = 0;
 16628                           
 16629                           ;BVH2_Appl_Layer.c: 1738: Cb34_odFixedValueSel = 1;
 16630  0EA6  27F6  3188         	fcall	PL112	;call to abstracted procedure
 16631  0EA8  2EB1               	goto	l10160
 16632  0EA9                     l10182:	
 16633                           
 16634                           ;BVH2_Appl_Layer.c: 1757: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16635                           ;BVH2_Appl_Layer.c: 1758: (UInt8)8;
 16636  0EA9  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16637  0EAA  39F0               	andlw	-16
 16638  0EAB  3808               	iorlw	8
 16639  0EAC  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16640                           
 16641                           ;BVH2_Appl_Layer.c: 1759: Cb34_odPumpOff = 1;
 16642  0EAD  0022               	movlb	2	; select bank2
 16643  0EAE  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 16644  0EAF  0AC6               	incf	_Cb34_odPumpOff^(0+256),f
 16645                           
 16646                           ;BVH2_Appl_Layer.c: 1760: Cb34_odFixedValueSel = 0;
 16647  0EB0  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 16648  0EB1                     l10160:	
 16649                           
 16650                           ;BVH2_Appl_Layer.c: 1739: Cb34_odFixedLowValueSel = 0;
 16651  0EB1  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16652                           
 16653                           ;BVH2_Appl_Layer.c: 1740: Cb34_oPWM_SC_Alarm = 1;
 16654  0EB2  01C9               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16655  0EB3  0AC9               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 16656  0EB4                     l10164:	
 16657                           
 16658                           ;BVH2_Appl_Layer.c: 1741: Cb34_oPWM_Alarm = 0;
 16659  0EB4  01CA               	clrf	_Cb34_oPWM_Alarm^(0+256)
 16660                           
 16661                           ;BVH2_Appl_Layer.c: 1742: }
 16662  0EB5  0008               	return
 16663  0EB6                     l10166:	
 16664                           
 16665                           ;BVH2_Appl_Layer.c: 1743: else {
 16666                           ;BVH2_Appl_Layer.c: 1744: if (Cb34_idPWM <= 5) {
 16667  0EB6  3006               	movlw	6
 16668  0EB7  0021               	movlb	1	; select bank1
 16669  0EB8  0245               	subwf	_Cb34_idPWM^(0+128),w
 16670  0EB9  1C03               	btfss	3,0
 16671  0EBA  2EA3               	goto	l10168
 16672                           
 16673                           ;BVH2_Appl_Layer.c: 1753: else {
 16674                           ;BVH2_Appl_Layer.c: 1754: if (Cb34_idPWM < 9) {
 16675  0EBB  3009               	movlw	9
 16676  0EBC  0245               	subwf	_Cb34_idPWM^(0+128),w
 16677  0EBD  1C03               	btfss	3,0
 16678  0EBE  2EA9               	goto	l10182
 16679                           
 16680                           ;BVH2_Appl_Layer.c: 1765: else {
 16681                           ;BVH2_Appl_Layer.c: 1766: if (Cb34_idPWM > 191) {
 16682  0EBF  30C0               	movlw	192
 16683  0EC0  0245               	subwf	_Cb34_idPWM^(0+128),w
 16684  0EC1  1C03               	skipc
 16685  0EC2  2EC7               	goto	l10208
 16686                           
 16687                           ;BVH2_Appl_Layer.c: 1769: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16688                           ;BVH2_Appl_Layer.c: 1770: (UInt8)4;
 16689  0EC3  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16690  0EC4  39F0               	andlw	-16
 16691  0EC5  3804               	iorlw	4
 16692  0EC6  2EA6               	goto	L44
 16693  0EC7                     l10208:	
 16694                           
 16695                           ;BVH2_Appl_Layer.c: 1777: else {
 16696                           ;BVH2_Appl_Layer.c: 1778: if (Cb34_idPWM >= 23) {
 16697  0EC7  3017               	movlw	23
 16698  0EC8  0245               	subwf	_Cb34_idPWM^(0+128),w
 16699  0EC9  1C03               	skipc
 16700  0ECA  2ED5               	goto	l10222
 16701                           
 16702                           ;BVH2_Appl_Layer.c: 1781: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16703                           ;BVH2_Appl_Layer.c: 1782: (UInt8)2;
 16704  0ECB  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16705  0ECC  39F0               	andlw	-16
 16706  0ECD  3802               	iorlw	2
 16707  0ECE  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16708                           
 16709                           ;BVH2_Appl_Layer.c: 1783: Cb34_odPumpOff = 0;
 16710  0ECF  0022               	movlb	2	; select bank2
 16711  0ED0  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 16712                           
 16713                           ;BVH2_Appl_Layer.c: 1784: Cb34_odFixedLowValueSel = 0;
 16714  0ED1  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16715                           
 16716                           ;BVH2_Appl_Layer.c: 1785: Cb34_odFixedValueSel = 0;
 16717  0ED2  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 16718  0ED3                     l10218:	
 16719                           
 16720                           ;BVH2_Appl_Layer.c: 1786: Cb34_oPWM_SC_Alarm = 0;
 16721  0ED3  01C9               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16722  0ED4  2EB4               	goto	l10164
 16723  0ED5                     l10222:	
 16724                           
 16725                           ;BVH2_Appl_Layer.c: 1789: else {
 16726                           ;BVH2_Appl_Layer.c: 1790: if (Cb34_idPWM > 19) {
 16727  0ED5  3014               	movlw	20
 16728  0ED6  0245               	subwf	_Cb34_idPWM^(0+128),w
 16729  0ED7  1C03               	skipc
 16730  0ED8  2EE3               	goto	l10236
 16731                           
 16732                           ;BVH2_Appl_Layer.c: 1793: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16733                           ;BVH2_Appl_Layer.c: 1794: (UInt8)5;
 16734  0ED9  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16735  0EDA  39F0               	andlw	-16
 16736  0EDB  3805               	iorlw	5
 16737  0EDC  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16738                           
 16739                           ;BVH2_Appl_Layer.c: 1795: Cb34_odPumpOff = 0;
 16740  0EDD  0022               	movlb	2	; select bank2
 16741  0EDE  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 16742                           
 16743                           ;BVH2_Appl_Layer.c: 1796: Cb34_odFixedValueSel = 0;
 16744  0EDF  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 16745                           
 16746                           ;BVH2_Appl_Layer.c: 1797: Cb34_odFixedLowValueSel = 1;
 16747  0EE0  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16748  0EE1  0AC8               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 16749  0EE2  2ED3               	goto	l10218
 16750  0EE3                     l10236:	
 16751                           
 16752                           ;BVH2_Appl_Layer.c: 1801: else {
 16753                           ;BVH2_Appl_Layer.c: 1802: if (Cb34_idPWM <= 19) {
 16754  0EE3  3014               	movlw	20
 16755  0EE4  0245               	subwf	_Cb34_idPWM^(0+128),w
 16756  0EE5  1803               	skipnc
 16757  0EE6  0008               	return
 16758                           
 16759                           ;BVH2_Appl_Layer.c: 1805: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16760                           ;BVH2_Appl_Layer.c: 1806: (UInt8)1;
 16761                           
 16762                           ;BVH2_Appl_Layer.c: 1807: Cb34_odPumpOff = 1;
 16763                           
 16764                           ;BVH2_Appl_Layer.c: 1808: Cb34_odFixedValueSel = 0;
 16765                           
 16766                           ;BVH2_Appl_Layer.c: 1809: Cb34_odFixedLowValueSel = 0;
 16767  0EE7  27B4  3188         	fcall	PL58	;call to abstracted procedure
 16768  0EE9  2ED3               	goto	l10218
 16769  0EEA                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 16770  0EEA                     __ptext45:	
 16771 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 16772 ;; Defined at:
 16773 ;;		line 1880 in file "../T_Link/BVH2_Appl_Layer.c"
 16774 ;; Parameters:    Size  Location     Type
 16775 ;;		None
 16776 ;; Auto vars:     Size  Location     Type
 16777 ;;		None
 16778 ;; Return value:  Size  Location     Type
 16779 ;;                  1    wreg      void 
 16780 ;; Registers used:
 16781 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16782 ;; Tracked objects:
 16783 ;;		On entry : 1F/1
 16784 ;;		On exit  : 1F/2
 16785 ;;		Unchanged: 0/0
 16786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16787 ;;      Params:         0       0       0       0       0       0       0       0
 16788 ;;      Locals:         0       0       0       0       0       0       0       0
 16789 ;;      Temps:          0       0       0       0       0       0       0       0
 16790 ;;      Totals:         0       0       0       0       0       0       0       0
 16791 ;;Total ram usage:        0 bytes
 16792 ;; Hardware stack levels used:    1
 16793 ;; Hardware stack levels required when called:    4
 16794 ;; This function calls:
 16795 ;;		Nothing
 16796 ;; This function is called by:
 16797 ;;		_BVH2_Appl_Layer
 16798 ;; This function uses a non-reentrant model
 16799 ;;
 16800                           
 16801                           
 16802                           ;psect for function _Cb56_UbatHandling_node_fcn2
 16803  0EEA                     _Cb56_UbatHandling_node_fcn2:	
 16804                           
 16805                           ;BVH2_Appl_Layer.c: 1883: if (((UInt8)ui8_BattVolt_mat) > 230) {
 16806                           
 16807                           ;incstack = 0
 16808                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 16809  0EEA  30E7               	movlw	231
 16810  0EEB  0232               	subwf	_ui8_BattVolt_mat^(0+128),w
 16811  0EEC  1803               	btfsc	3,0
 16812  0EED  2EF5               	goto	l10254
 16813  0EEE  2F0E               	goto	l10260
 16814  0EEF                     l1844:	
 16815                           ;BVH2_Appl_Layer.c: 1886: case 2: {
 16816                           
 16817                           
 16818                           ;BVH2_Appl_Layer.c: 1887: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 16819  0EEF  1246               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 16820                           
 16821                           ;BVH2_Appl_Layer.c: 1888: break;
 16822  0EF0  2EFE               	goto	l1845
 16823  0EF1                     l1846:	
 16824                           ;BVH2_Appl_Layer.c: 1889: }
 16825                           ;BVH2_Appl_Layer.c: 1890: case 3: {
 16826                           
 16827                           
 16828                           ;BVH2_Appl_Layer.c: 1891: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 16829  0EF1  12C6               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 16830                           
 16831                           ;BVH2_Appl_Layer.c: 1892: break;
 16832  0EF2  2EFE               	goto	l1845
 16833  0EF3                     l1847:	
 16834                           ;BVH2_Appl_Layer.c: 1893: }
 16835                           ;BVH2_Appl_Layer.c: 1894: default: {
 16836                           
 16837                           
 16838                           ;BVH2_Appl_Layer.c: 1895: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 16839  0EF3  1346               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 16840                           
 16841                           ;BVH2_Appl_Layer.c: 1896: }
 16842                           ;BVH2_Appl_Layer.c: 1897: }
 16843  0EF4  2EFE               	goto	l1845
 16844  0EF5                     l10254:	
 16845  0EF5  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 16846  0EF6  3907               	andlw	7
 16847                           
 16848                           ; Switch size 1, requested type "space"
 16849                           ; Number of cases is 2, Range of values is 2 to 3
 16850                           ; switch strategies available:
 16851                           ; Name         Instructions Cycles
 16852                           ; simple_byte            7     4 (average)
 16853                           ; direct_byte           13     9 (fixed)
 16854                           ; jumptable            263     9 (fixed)
 16855                           ;	Chosen strategy is simple_byte
 16856  0EF7  3A02               	xorlw	2	; case 2
 16857  0EF8  1903               	skipnz
 16858  0EF9  2EEF               	goto	l1844
 16859  0EFA  3A01               	xorlw	1	; case 3
 16860  0EFB  1903               	skipnz
 16861  0EFC  2EF1               	goto	l1846
 16862  0EFD  2EF3               	goto	l1847
 16863  0EFE                     l1845:	
 16864                           
 16865                           ;BVH2_Appl_Layer.c: 1898: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 16866  0EFE  1646               	bsf	_SIBFS_UbatHandling_b^(0+128),4
 16867  0EFF                     L42:	
 16868                           
 16869                           ;BVH2_Appl_Layer.c: 1899: Cb56_odPumpOff = 1;
 16870  0EFF  0022               	movlb	2	; select bank2
 16871  0F00  01C3               	clrf	_Cb56_odPumpOff^(0+256)
 16872  0F01  0AC3               	incf	_Cb56_odPumpOff^(0+256),f
 16873                           
 16874                           ;BVH2_Appl_Layer.c: 1900: Cb56_odFixedValueSel = 0;
 16875  0F02  0021               	movlb	1	; select bank1
 16876  0F03  01C4               	clrf	_Cb56_odFixedValueSel^(0+128)
 16877                           
 16878                           ;BVH2_Appl_Layer.c: 1901: Cb56_oUbat_Alarm_High = 1;
 16879  0F04  0022               	movlb	2	; select bank2
 16880  0F05  01C4               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 16881  0F06  0AC4               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 16882                           
 16883                           ;BVH2_Appl_Layer.c: 1902: }
 16884  0F07  0008               	return
 16885  0F08                     l1850:	
 16886                           ;BVH2_Appl_Layer.c: 1905: case 2: {
 16887                           
 16888                           
 16889                           ;BVH2_Appl_Layer.c: 1906: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 16890  0F08  1246               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 16891                           
 16892                           ;BVH2_Appl_Layer.c: 1907: break;
 16893  0F09  2F17               	goto	l10262
 16894  0F0A                     l1852:	
 16895                           ;BVH2_Appl_Layer.c: 1908: }
 16896                           ;BVH2_Appl_Layer.c: 1909: case 3: {
 16897                           
 16898                           
 16899                           ;BVH2_Appl_Layer.c: 1910: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 16900  0F0A  12C6               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 16901                           
 16902                           ;BVH2_Appl_Layer.c: 1911: break;
 16903  0F0B  2F17               	goto	l10262
 16904  0F0C                     l1853:	
 16905                           ;BVH2_Appl_Layer.c: 1912: }
 16906                           ;BVH2_Appl_Layer.c: 1913: default: {
 16907                           
 16908                           
 16909                           ;BVH2_Appl_Layer.c: 1914: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 16910  0F0C  1346               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 16911                           
 16912                           ;BVH2_Appl_Layer.c: 1915: }
 16913                           ;BVH2_Appl_Layer.c: 1916: }
 16914  0F0D  2F17               	goto	l10262
 16915  0F0E                     l10260:	
 16916  0F0E  0846               	movf	_SIBFS_UbatHandling_b^(0+128),w
 16917  0F0F  3907               	andlw	7
 16918                           
 16919                           ; Switch size 1, requested type "space"
 16920                           ; Number of cases is 2, Range of values is 2 to 3
 16921                           ; switch strategies available:
 16922                           ; Name         Instructions Cycles
 16923                           ; simple_byte            7     4 (average)
 16924                           ; direct_byte           13     9 (fixed)
 16925                           ; jumptable            263     9 (fixed)
 16926                           ;	Chosen strategy is simple_byte
 16927  0F10  3A02               	xorlw	2	; case 2
 16928  0F11  1903               	skipnz
 16929  0F12  2F08               	goto	l1850
 16930  0F13  3A01               	xorlw	1	; case 3
 16931  0F14  1903               	skipnz
 16932  0F15  2F0A               	goto	l1852
 16933  0F16  2F0C               	goto	l1853
 16934  0F17                     l10262:	
 16935                           
 16936                           ;BVH2_Appl_Layer.c: 1919: if (((UInt8)ui8_BattVolt_mat) < 45) {
 16937  0F17  302D               	movlw	45
 16938  0F18  0232               	subwf	_ui8_BattVolt_mat^(0+128),w
 16939  0F19  1803               	skipnc
 16940  0F1A  2F1D               	goto	l1854
 16941                           
 16942                           ;BVH2_Appl_Layer.c: 1921: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 16943  0F1B  16C6               	bsf	_SIBFS_UbatHandling_b^(0+128),5
 16944  0F1C  2EFF               	goto	L42
 16945  0F1D                     l1854:	
 16946                           ;BVH2_Appl_Layer.c: 1922: Cb56_odPumpOff = 1;
 16947                           
 16948                           
 16949                           ;BVH2_Appl_Layer.c: 1926: else {
 16950                           ;BVH2_Appl_Layer.c: 1928: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 16951                           
 16952                           ;BVH2_Appl_Layer.c: 1929: Cb56_odPumpOff = 0;
 16953                           
 16954                           ;BVH2_Appl_Layer.c: 1930: Cb56_odFixedValueSel = 0;
 16955                           
 16956                           ;BVH2_Appl_Layer.c: 1931: Cb56_oUbat_Alarm_High = 0;
 16957  0F1D  27DA               	fcall	PL76	;call to abstracted procedure
 16958  0F1E  0008               	return
 16959  0F1F                     __end_of_Cb56_UbatHandling_node_fcn2:	
 16960  0F1F                     __ptext44:	
 16961 ;; *************** function ___aldiv *****************
 16962 ;; Defined at:
 16963 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
 16964 ;; Parameters:    Size  Location     Type
 16965 ;;  divisor         4   16[BANK0 ] long 
 16966 ;;  dividend        4   20[BANK0 ] long 
 16967 ;; Auto vars:     Size  Location     Type
 16968 ;;  quotient        4   26[BANK0 ] long 
 16969 ;;  sign            1   25[BANK0 ] unsigned char 
 16970 ;;  counter         1   24[BANK0 ] unsigned char 
 16971 ;; Return value:  Size  Location     Type
 16972 ;;                  4   16[BANK0 ] long 
 16973 ;; Registers used:
 16974 ;;		wreg, status,2, status,0
 16975 ;; Tracked objects:
 16976 ;;		On entry : 1F/0
 16977 ;;		On exit  : 1F/0
 16978 ;;		Unchanged: 0/0
 16979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16980 ;;      Params:         0       8       0       0       0       0       0       0
 16981 ;;      Locals:         0       6       0       0       0       0       0       0
 16982 ;;      Temps:          0       0       0       0       0       0       0       0
 16983 ;;      Totals:         0      14       0       0       0       0       0       0
 16984 ;;Total ram usage:       14 bytes
 16985 ;; Hardware stack levels used:    1
 16986 ;; Hardware stack levels required when called:    4
 16987 ;; This function calls:
 16988 ;;		Nothing
 16989 ;; This function is called by:
 16990 ;;		_BVH2_Appl_Layer
 16991 ;; This function uses a non-reentrant model
 16992 ;;
 16993                           
 16994                           
 16995                           ;psect for function ___aldiv
 16996  0F1F                     ___aldiv:	
 16997                           
 16998                           ;incstack = 0
 16999                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 17000  0F1F  01B9               	clrf	___aldiv@sign
 17001  0F20  1FB3               	btfss	___aldiv@divisor+3,7
 17002  0F21  2F2F               	goto	l2115
 17003  0F22  09B0               	comf	___aldiv@divisor,f
 17004  0F23  09B1               	comf	___aldiv@divisor+1,f
 17005  0F24  09B2               	comf	___aldiv@divisor+2,f
 17006  0F25  09B3               	comf	___aldiv@divisor+3,f
 17007  0F26  0AB0               	incf	___aldiv@divisor,f
 17008  0F27  1903               	skipnz
 17009  0F28  0AB1               	incf	___aldiv@divisor+1,f
 17010  0F29  1903               	skipnz
 17011  0F2A  0AB2               	incf	___aldiv@divisor+2,f
 17012  0F2B  1903               	skipnz
 17013  0F2C  0AB3               	incf	___aldiv@divisor+3,f
 17014  0F2D  01B9               	clrf	___aldiv@sign
 17015  0F2E  0AB9               	incf	___aldiv@sign,f
 17016  0F2F                     l2115:	
 17017  0F2F  1FB7               	btfss	___aldiv@dividend+3,7
 17018  0F30  2F3E               	goto	l10316
 17019  0F31  09B4               	comf	___aldiv@dividend,f
 17020  0F32  09B5               	comf	___aldiv@dividend+1,f
 17021  0F33  09B6               	comf	___aldiv@dividend+2,f
 17022  0F34  09B7               	comf	___aldiv@dividend+3,f
 17023  0F35  0AB4               	incf	___aldiv@dividend,f
 17024  0F36  1903               	skipnz
 17025  0F37  0AB5               	incf	___aldiv@dividend+1,f
 17026  0F38  1903               	skipnz
 17027  0F39  0AB6               	incf	___aldiv@dividend+2,f
 17028  0F3A  1903               	skipnz
 17029  0F3B  0AB7               	incf	___aldiv@dividend+3,f
 17030  0F3C  3001               	movlw	1
 17031  0F3D  06B9               	xorwf	___aldiv@sign,f
 17032  0F3E                     l10316:	
 17033  0F3E  01BA               	clrf	___aldiv@quotient
 17034  0F3F  01BB               	clrf	___aldiv@quotient+1
 17035  0F40  01BC               	clrf	___aldiv@quotient+2
 17036  0F41  01BD               	clrf	___aldiv@quotient+3
 17037  0F42  0833               	movf	___aldiv@divisor+3,w
 17038  0F43  0432               	iorwf	___aldiv@divisor+2,w
 17039  0F44  0431               	iorwf	___aldiv@divisor+1,w
 17040  0F45  0430               	iorwf	___aldiv@divisor,w
 17041  0F46  1903               	skipnz
 17042  0F47  2F74               	goto	l10338
 17043  0F48  01B8               	clrf	___aldiv@counter
 17044  0F49                     L41:	
 17045  0F49  0AB8               	incf	___aldiv@counter,f
 17046  0F4A  1BB3               	btfsc	___aldiv@divisor+3,7
 17047  0F4B  2F51               	goto	l10326
 17048  0F4C  35B0               	lslf	___aldiv@divisor,f
 17049  0F4D  0DB1               	rlf	___aldiv@divisor+1,f
 17050  0F4E  0DB2               	rlf	___aldiv@divisor+2,f
 17051  0F4F  0DB3               	rlf	___aldiv@divisor+3,f
 17052  0F50  2F49               	goto	L41
 17053  0F51                     l10326:	
 17054  0F51  35BA               	lslf	___aldiv@quotient,f
 17055  0F52  0DBB               	rlf	___aldiv@quotient+1,f
 17056  0F53  0DBC               	rlf	___aldiv@quotient+2,f
 17057  0F54  0DBD               	rlf	___aldiv@quotient+3,f
 17058  0F55  0833               	movf	___aldiv@divisor+3,w
 17059  0F56  0237               	subwf	___aldiv@dividend+3,w
 17060  0F57  1D03               	skipz
 17061  0F58  2F63               	goto	u8015
 17062  0F59  0832               	movf	___aldiv@divisor+2,w
 17063  0F5A  0236               	subwf	___aldiv@dividend+2,w
 17064  0F5B  1D03               	skipz
 17065  0F5C  2F63               	goto	u8015
 17066  0F5D  0831               	movf	___aldiv@divisor+1,w
 17067  0F5E  0235               	subwf	___aldiv@dividend+1,w
 17068  0F5F  1D03               	skipz
 17069  0F60  2F63               	goto	u8015
 17070  0F61  0830               	movf	___aldiv@divisor,w
 17071  0F62  0234               	subwf	___aldiv@dividend,w
 17072  0F63                     u8015:	
 17073  0F63  1C03               	skipc
 17074  0F64  2F6E               	goto	l10334
 17075  0F65  0830               	movf	___aldiv@divisor,w
 17076  0F66  02B4               	subwf	___aldiv@dividend,f
 17077  0F67  0831               	movf	___aldiv@divisor+1,w
 17078  0F68  3BB5               	subwfb	___aldiv@dividend+1,f
 17079  0F69  0832               	movf	___aldiv@divisor+2,w
 17080  0F6A  3BB6               	subwfb	___aldiv@dividend+2,f
 17081  0F6B  0833               	movf	___aldiv@divisor+3,w
 17082  0F6C  3BB7               	subwfb	___aldiv@dividend+3,f
 17083  0F6D  143A               	bsf	___aldiv@quotient,0
 17084  0F6E                     l10334:	
 17085  0F6E  36B3               	lsrf	___aldiv@divisor+3,f
 17086  0F6F  0CB2               	rrf	___aldiv@divisor+2,f
 17087  0F70  0CB1               	rrf	___aldiv@divisor+1,f
 17088  0F71  0CB0               	rrf	___aldiv@divisor,f
 17089  0F72  0BB8               	decfsz	___aldiv@counter,f
 17090  0F73  2F51               	goto	l10326
 17091  0F74                     l10338:	
 17092  0F74  0839               	movf	___aldiv@sign,w
 17093  0F75  1903               	btfsc	3,2
 17094  0F76  2F82               	goto	l10342
 17095  0F77  09BA               	comf	___aldiv@quotient,f
 17096  0F78  09BB               	comf	___aldiv@quotient+1,f
 17097  0F79  09BC               	comf	___aldiv@quotient+2,f
 17098  0F7A  09BD               	comf	___aldiv@quotient+3,f
 17099  0F7B  0ABA               	incf	___aldiv@quotient,f
 17100  0F7C  1903               	skipnz
 17101  0F7D  0ABB               	incf	___aldiv@quotient+1,f
 17102  0F7E  1903               	skipnz
 17103  0F7F  0ABC               	incf	___aldiv@quotient+2,f
 17104  0F80  1903               	skipnz
 17105  0F81  0ABD               	incf	___aldiv@quotient+3,f
 17106  0F82                     l10342:	
 17107  0F82  083D               	movf	___aldiv@quotient+3,w
 17108  0F83  00B3               	movwf	?___aldiv+3
 17109  0F84  083C               	movf	___aldiv@quotient+2,w
 17110  0F85  00B2               	movwf	?___aldiv+2
 17111  0F86  083B               	movf	___aldiv@quotient+1,w
 17112  0F87  00B1               	movwf	?___aldiv+1
 17113  0F88  083A               	movf	___aldiv@quotient,w
 17114  0F89  00B0               	movwf	?___aldiv
 17115  0F8A  0008               	return
 17116  0F8B                     __end_of___aldiv:	
 17117  0F8B                     PL22:	
 17118  0F8B  0020               	movlb	0	; select bank0
 17119  0F8C  00BF               	movwf	??_BVH2_Appl_Layer+1
 17120  0F8D  0021               	movlb	1	; select bank1
 17121  0F8E  0831               	movf	(_ui16_mat_Current+1)^(0+128),w
 17122  0F8F  0020               	movlb	0	; select bank0
 17123  0F90  023F               	subwf	??_BVH2_Appl_Layer+1,w
 17124  0F91  1D03               	skipz
 17125  0F92  0008               	return
 17126  0F93  0021               	movlb	1	; select bank1
 17127  0F94  0830               	movf	_ui16_mat_Current^(0+128),w
 17128  0F95  0020               	movlb	0	; select bank0
 17129  0F96  023E               	subwf	??_BVH2_Appl_Layer,w
 17130  0F97  0008               	return
 17131  0F98                     __end_ofPL22:	
 17132  0F98                     PL26:	
 17133  0F98  0023               	movlb	3	; select bank3
 17134  0F99  086C               	movf	_ui16_Current_Thresh^(0+384),w
 17135  0F9A  3EFE               	addlw	254
 17136  0F9B  0020               	movlb	0	; select bank0
 17137  0F9C  00BE               	movwf	??_BVH2_Appl_Layer
 17138  0F9D  30FF               	movlw	255
 17139  0F9E  0023               	movlb	3	; select bank3
 17140  0F9F  3D6D               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 17141  0FA0  0008               	return
 17142  0FA1                     __end_ofPL26:	
 17143  0FA1                     PL30:	
 17144  0FA1  0023               	movlb	3	; select bank3
 17145  0FA2  086C               	movf	_ui16_Current_Thresh^(0+384),w
 17146  0FA3  3E02               	addlw	2
 17147  0FA4  0020               	movlb	0	; select bank0
 17148  0FA5  00BE               	movwf	??_BVH2_Appl_Layer
 17149  0FA6  3000               	movlw	0
 17150  0FA7  0023               	movlb	3	; select bank3
 17151  0FA8  3D6D               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 17152  0FA9  0020               	movlb	0	; select bank0
 17153  0FAA  00BF               	movwf	??_BVH2_Appl_Layer+1
 17154  0FAB  0021               	movlb	1	; select bank1
 17155  0FAC  0231               	subwf	(_ui16_mat_Current+1)^(0+128),w
 17156  0FAD  1D03               	skipz
 17157  0FAE  0008               	return
 17158  0FAF  0020               	movlb	0	; select bank0
 17159  0FB0  083E               	movf	??_BVH2_Appl_Layer,w
 17160  0FB1  0021               	movlb	1	; select bank1
 17161  0FB2  0230               	subwf	_ui16_mat_Current^(0+128),w
 17162  0FB3  0008               	return
 17163  0FB4                     __end_ofPL30:	
 17164  0FB4                     PL58:	
 17165  0FB4  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 17166  0FB5  39F0               	andlw	-16
 17167  0FB6  3801               	iorlw	1
 17168  0FB7  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 17169  0FB8  0022               	movlb	2	; select bank2
 17170  0FB9  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 17171  0FBA  0AC6               	incf	_Cb34_odPumpOff^(0+256),f
 17172  0FBB  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 17173  0FBC  01C8               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 17174  0FBD  0008               	return
 17175  0FBE                     __end_ofPL58:	
 17176  0FBE                     PL60:	
 17177  0FBE  39F8               	andlw	-8
 17178  0FBF  3805               	iorlw	5
 17179  0FC0  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 17180  0FC1  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 17181  0FC2  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 17182  0FC3  0023               	movlb	3	; select bank3
 17183  0FC4  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 17184  0FC5  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 17185  0FC6  0022               	movlb	2	; select bank2
 17186  0FC7  0008               	return
 17187  0FC8                     __end_ofPL60:	
 17188  0FC8                     PL64:	
 17189  0FC8  0021               	movlb	1	; select bank1
 17190  0FC9  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 17191  0FCA  39F8               	andlw	-8
 17192  0FCB  3804               	iorlw	4
 17193  0FCC  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 17194  0FCD  01A2               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 17195  0FCE  01A3               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 17196  0FCF  0022               	movlb	2	; select bank2
 17197  0FD0  0008               	return
 17198  0FD1                     __end_ofPL64:	
 17199  0FD1                     PL68:	
 17200  0FD1  0024               	movlb	4	; select bank4
 17201  0FD2  0838               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),w
 17202  0FD3  0020               	movlb	0	; select bank0
 17203  0FD4  00B3               	movwf	___wmul@multiplicand+1
 17204  0FD5  0024               	movlb	4	; select bank4
 17205  0FD6  0837               	movf	BVH2_Appl_Layer@Sb2_Error^(0+512),w
 17206  0FD7  0020               	movlb	0	; select bank0
 17207  0FD8  00B2               	movwf	___wmul@multiplicand
 17208  0FD9  0008               	return
 17209  0FDA                     __end_ofPL68:	
 17210  0FDA                     PL76:	
 17211  0FDA  1746               	bsf	_SIBFS_UbatHandling_b^(0+128),6
 17212  0FDB  0022               	movlb	2	; select bank2
 17213  0FDC  01C3               	clrf	_Cb56_odPumpOff^(0+256)
 17214  0FDD  0021               	movlb	1	; select bank1
 17215  0FDE  01C4               	clrf	_Cb56_odFixedValueSel^(0+128)
 17216  0FDF  0022               	movlb	2	; select bank2
 17217  0FE0  01C4               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 17218  0FE1  0008               	return
 17219  0FE2                     __end_ofPL76:	
 17220  0FE2                     PL84:	
 17221  0FE2  3A80               	xorlw	128
 17222  0FE3  0020               	movlb	0	; select bank0
 17223  0FE4  00BE               	movwf	??_BVH2_Appl_Layer
 17224  0FE5  3080               	movlw	128
 17225  0FE6  023E               	subwf	??_BVH2_Appl_Layer,w
 17226  0FE7  0008               	return
 17227  0FE8                     __end_ofPL84:	
 17228  0FE8                     PL86:	
 17229  0FE8  0020               	movlb	0	; select bank0
 17230  0FE9  00BE               	movwf	??_BVH2_Appl_Layer
 17231  0FEA  0CBE               	rrf	??_BVH2_Appl_Layer,f
 17232  0FEB  0C3E               	rrf	??_BVH2_Appl_Layer,w
 17233  0FEC  3903               	andlw	3
 17234  0FED  3A03               	xorlw	3
 17235  0FEE  0008               	return
 17236  0FEF                     __end_ofPL86:	
 17237  0FEF                     PL92:	
 17238  0FEF  39F0               	andlw	-16
 17239  0FF0  3805               	iorlw	5
 17240  0FF1  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 17241  0FF2  0022               	movlb	2	; select bank2
 17242  0FF3  01CB               	clrf	_Cb1_oShutoff^(0+256)
 17243  0FF4  01CC               	clrf	_Cb1_oCurrentAlarm^(0+256)
 17244  0FF5  0008               	return
 17245  0FF6                     __end_ofPL92:	
 17246  0FF6                     PL112:	
 17247  0FF6  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 17248  0FF7  0022               	movlb	2	; select bank2
 17249  0FF8  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 17250  0FF9  01C7               	clrf	_Cb34_odFixedValueSel^(0+256)
 17251  0FFA  0AC7               	incf	_Cb34_odFixedValueSel^(0+256),f
 17252  0FFB  0008               	return
 17253  0FFC                     __end_ofPL112:	
 17254  0FFC                     PL116:	
 17255  0FFC  3000               	movlw	0
 17256  0FFD  0020               	movlb	0	; select bank0
 17257  0FFE  024D               	subwf	_ui16_Speed_mat+1,w
 17258  0FFF  3405               	retlw	5
 17259  1000                     __end_ofPL116:	
 17260                           
 17261                           	psect	swtext2
 17262  0760                     __pswtext2:	
 17263  0760                     S13832:	
 17264  0760  3188  28BF         	ljmp	l11406
 17265  0762  3188  28BF         	ljmp	l11406
 17266  0764  3188  28BF         	ljmp	l11406
 17267  0766  3188  28BF         	ljmp	l11406
 17268  0768  3188  28BF         	ljmp	l11406
 17269  076A  3188  28BF         	ljmp	l11406
 17270  076C  3188  28BF         	ljmp	l11406
 17271  076E  3188  28BF         	ljmp	l11406
 17272                           
 17273                           	psect	intentry
 17274  0004                     __pintentry:	
 17275 ;; *************** function _interrupt_handler *****************
 17276 ;; Defined at:
 17277 ;;		line 77 in file "../interrupt.c"
 17278 ;; Parameters:    Size  Location     Type
 17279 ;;		None
 17280 ;; Auto vars:     Size  Location     Type
 17281 ;;		None
 17282 ;; Return value:  Size  Location     Type
 17283 ;;                  1    wreg      void 
 17284 ;; Registers used:
 17285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17286 ;; Tracked objects:
 17287 ;;		On entry : 0/0
 17288 ;;		On exit  : 1F/0
 17289 ;;		Unchanged: 0/0
 17290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17291 ;;      Params:         0       0       0       0       0       0       0       0
 17292 ;;      Locals:         0       0       0       0       0       0       0       0
 17293 ;;      Temps:          0       0       0       0       0       0       0       0
 17294 ;;      Totals:         0       0       0       0       0       0       0       0
 17295 ;;Total ram usage:        0 bytes
 17296 ;; Hardware stack levels used:    1
 17297 ;; Hardware stack levels required when called:    3
 17298 ;; This function calls:
 17299 ;;		_ELINMIntHandler
 17300 ;;		_PWM_CTRL
 17301 ;;		_Task1ms
 17302 ;;		_interrrupt_bldc
 17303 ;;		_interrupt_PWMCapture
 17304 ;; This function is called by:
 17305 ;;		Interrupt level 1
 17306 ;; This function uses a non-reentrant model
 17307 ;;
 17308                           
 17309  0004                     _interrupt_handler:	
 17310                           
 17311                           ;incstack = 0
 17312  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17313                           
 17314                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17315  0005  3180               	pagesel	$
 17316                           
 17317                           ;interrupt.c: 81: if( TMR1IF )
 17318  0006  0020               	movlb	0	; select bank0
 17319  0007  1811               	btfsc	17,0	;volatile
 17320                           
 17321                           ;interrupt.c: 83: {
 17322                           ;interrupt.c: 85: TMR1IF = 0;
 17323  0008  1011               	bcf	17,0	;volatile
 17324                           
 17325                           ;interrupt.c: 87: }
 17326                           ;interrupt.c: 90: if( TMR4IF )
 17327  0009  1C93               	btfss	19,1	;volatile
 17328  000A  2812               	goto	i1l13534
 17329                           
 17330                           ;interrupt.c: 92: {
 17331                           ;interrupt.c: 94: TMR4IF = 0;
 17332  000B  1093               	bcf	19,1	;volatile
 17333                           
 17334                           ;interrupt.c: 96: PWM_CTRL( );
 17335  000C  3187  274D  3180   	fcall	_PWM_CTRL
 17336                           
 17337                           ;interrupt.c: 98: Task1ms( );
 17338  000F  3187  2776  3180   	fcall	_Task1ms
 17339  0012                     i1l13534:	
 17340                           
 17341                           ;interrupt.c: 100: }
 17342                           ;interrupt.c: 106: if( TMR2IF )
 17343  0012  0020               	movlb	0	; select bank0
 17344  0013  1C91               	btfss	17,1	;volatile
 17345  0014  2819               	goto	i1l13540
 17346                           
 17347                           ;interrupt.c: 108: {
 17348                           ;interrupt.c: 110: TMR2IF = 0;
 17349  0015  1091               	bcf	17,1	;volatile
 17350                           
 17351                           ;interrupt.c: 112: interrrupt_bldc( );
 17352  0016  319B  23B4  3180   	fcall	_interrrupt_bldc
 17353  0019                     i1l13540:	
 17354                           
 17355                           ;interrupt.c: 114: }
 17356                           ;interrupt.c: 117: if( TMR6IF )
 17357  0019  0020               	movlb	0	; select bank0
 17358  001A  1D93               	btfss	19,3	;volatile
 17359  001B  2820               	goto	i1l13546
 17360                           
 17361                           ;interrupt.c: 119: {
 17362                           ;interrupt.c: 121: TMR6IF = 0;
 17363  001C  1193               	bcf	19,3	;volatile
 17364                           
 17365                           ;interrupt.c: 126: ELINMIntHandler( );
 17366  001D  3185  2596  3180   	fcall	_ELINMIntHandler
 17367  0020                     i1l13546:	
 17368                           
 17369                           ;interrupt.c: 131: }
 17370                           ;interrupt.c: 134: if( CCP5IF )
 17371  0020  0020               	movlb	0	; select bank0
 17372  0021  1F13               	btfss	19,6	;volatile
 17373  0022  2826               	goto	i1l13552
 17374                           
 17375                           ;interrupt.c: 136: {
 17376                           ;interrupt.c: 138: CCP5IF = 0;
 17377  0023  1313               	bcf	19,6	;volatile
 17378                           
 17379                           ;interrupt.c: 140: interrupt_PWMCapture( );
 17380  0024  3186  268B         	fcall	_interrupt_PWMCapture
 17381  0026                     i1l13552:	
 17382                           
 17383                           ;interrupt.c: 142: }
 17384                           ;interrupt.c: 145: if( CCP2IF )
 17385  0026  0020               	movlb	0	; select bank0
 17386  0027  1812               	btfsc	18,0	;volatile
 17387                           
 17388                           ;interrupt.c: 147: {
 17389                           ;interrupt.c: 149: CCP2IF = 0;
 17390  0028  1012               	bcf	18,0	;volatile
 17391  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17392  002A  0009               	retfie
 17393  002B                     __end_of_interrupt_handler:	
 17394                           
 17395                           	psect	swtext3
 17396  0725                     __pswtext3:	
 17397  0725                     i1S13834:	
 17398  0725  319B  2BDF         	ljmp	i1l12742
 17399  0727  319B  2BF6         	ljmp	i1l12754
 17400  0729  319C  2C10         	ljmp	i1l12794
 17401  072B  319C  2C3F         	ljmp	i1l12832
 17402  072D  319B  2BF3         	ljmp	i1l12752
 17403  072F  319B  2BF3         	ljmp	i1l12752
 17404  0731  319B  2BF3         	ljmp	i1l12752
 17405  0733  319C  2C51         	ljmp	i1l284
 17406  0735  319C  2C56         	ljmp	i1l12866
 17407  0737  319C  2CEB         	ljmp	i1l267
 17408                           
 17409                           	psect	swtext4
 17410  0739                     __pswtext4:	
 17411  0739                     i1S13838:	
 17412  0739  319D  2DF1         	ljmp	i1l12466
 17413  073B  319D  2DF3         	ljmp	i1l12468
 17414  073D  319D  2DF6         	ljmp	i1l12470
 17415  073F  319D  2DF8         	ljmp	i1l12472
 17416  0741  319D  2DFA         	ljmp	i1l12474
 17417  0743  319D  2DFC         	ljmp	i1l12476
 17418  0745  319D  2DFC         	ljmp	i1l12476
 17419  0747  319D  2DFC         	ljmp	i1l12476
 17420  0749  319D  2DFC         	ljmp	i1l12476
 17421  074B  319D  2DFC         	ljmp	i1l12476
 17422                           
 17423                           	psect	text58
 17424  0776                     __ptext58:	
 17425 ;; *************** function _Task1ms *****************
 17426 ;; Defined at:
 17427 ;;		line 52 in file "../interrupt.c"
 17428 ;; Parameters:    Size  Location     Type
 17429 ;;		None
 17430 ;; Auto vars:     Size  Location     Type
 17431 ;;		None
 17432 ;; Return value:  Size  Location     Type
 17433 ;;                  1    wreg      void 
 17434 ;; Registers used:
 17435 ;;		status,2, status,0
 17436 ;; Tracked objects:
 17437 ;;		On entry : 1C/0
 17438 ;;		On exit  : 1F/1
 17439 ;;		Unchanged: 0/0
 17440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17441 ;;      Params:         0       0       0       0       0       0       0       0
 17442 ;;      Locals:         0       0       0       0       0       0       0       0
 17443 ;;      Temps:          0       0       0       0       0       0       0       0
 17444 ;;      Totals:         0       0       0       0       0       0       0       0
 17445 ;;Total ram usage:        0 bytes
 17446 ;; Hardware stack levels used:    1
 17447 ;; This function calls:
 17448 ;;		Nothing
 17449 ;; This function is called by:
 17450 ;;		_interrupt_handler
 17451 ;; This function uses a non-reentrant model
 17452 ;;
 17453                           
 17454                           
 17455                           ;psect for function _Task1ms
 17456  0776                     _Task1ms:	
 17457                           
 17458                           ;interrupt.c: 56: ui8_Task_Cont1ms++;
 17459                           
 17460                           ;incstack = 0
 17461                           ; Regs used in _Task1ms: [status]
 17462  0776  0021               	movlb	1	; select bank1
 17463  0777  0AD5               	incf	_ui8_Task_Cont1ms^(0+128),f
 17464  0778  0008               	return
 17465  0779                     __end_of_Task1ms:	
 17466                           
 17467                           	psect	text59
 17468  074D                     __ptext59:	
 17469 ;; *************** function _PWM_CTRL *****************
 17470 ;; Defined at:
 17471 ;;		line 198 in file "../pwm.c"
 17472 ;; Parameters:    Size  Location     Type
 17473 ;;		None
 17474 ;; Auto vars:     Size  Location     Type
 17475 ;;		None
 17476 ;; Return value:  Size  Location     Type
 17477 ;;                  1    wreg      void 
 17478 ;; Registers used:
 17479 ;;		wreg, status,2, status,0
 17480 ;; Tracked objects:
 17481 ;;		On entry : 1F/0
 17482 ;;		On exit  : 1C/0
 17483 ;;		Unchanged: 0/0
 17484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17485 ;;      Params:         0       0       0       0       0       0       0       0
 17486 ;;      Locals:         0       0       0       0       0       0       0       0
 17487 ;;      Temps:          0       0       0       0       0       0       0       0
 17488 ;;      Totals:         0       0       0       0       0       0       0       0
 17489 ;;Total ram usage:        0 bytes
 17490 ;; Hardware stack levels used:    1
 17491 ;; This function calls:
 17492 ;;		Nothing
 17493 ;; This function is called by:
 17494 ;;		_interrupt_handler
 17495 ;; This function uses a non-reentrant model
 17496 ;;
 17497                           
 17498                           
 17499                           ;psect for function _PWM_CTRL
 17500  074D                     _PWM_CTRL:	
 17501                           
 17502                           ;pwm.c: 288: ui8_PWM_FreqCnt++;
 17503                           
 17504                           ;incstack = 0
 17505                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 17506  074D  0021               	movlb	1	; select bank1
 17507  074E  3064               	movlw	100
 17508  074F  0ACB               	incf	_ui8_PWM_FreqCnt^(0+128),f
 17509                           
 17510                           ;pwm.c: 290: if( ui8_PWM_FreqCnt >= 100 )
 17511  0750  024B               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 17512  0751  1C03               	skipc
 17513  0752  2F57               	goto	i1l8094
 17514                           
 17515                           ;pwm.c: 292: {
 17516                           ;pwm.c: 294: ui8_PWM_FreqCnt = 0;
 17517  0753  01CB               	clrf	_ui8_PWM_FreqCnt^(0+128)
 17518                           
 17519                           ;pwm.c: 295: LATC0 = 0;
 17520  0754  0022               	movlb	2	; select bank2
 17521  0755  100E               	bcf	14,0	;volatile
 17522                           
 17523                           ;pwm.c: 298: }
 17524  0756  0008               	return
 17525  0757                     i1l8094:	
 17526                           
 17527                           ;pwm.c: 301: else
 17528                           ;pwm.c: 302: {
 17529                           ;pwm.c: 304: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 17530  0757  0022               	movlb	2	; select bank2
 17531  0758  0851               	movf	_ui8_PWMoutvalue^(0+256),w
 17532  0759  0021               	movlb	1	; select bank1
 17533  075A  024B               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 17534  075B  1C03               	skipc
 17535  075C  0008               	return
 17536                           
 17537                           ;pwm.c: 306: {
 17538                           ;pwm.c: 308: LATC0 = 1;
 17539  075D  0022               	movlb	2	; select bank2
 17540  075E  140E               	bsf	14,0	;volatile
 17541  075F  0008               	return
 17542  0760                     __end_of_PWM_CTRL:	


Data Sizes:
    Strings     0
    Constant    101
    Data        16
    BSS         261
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     44      58
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      80
    BANK4            80     32      59
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sp___ELINMIntGetPointer	PTR unsigned char  size(1) Largest target is 11
		 -> _ELINMIntMessageBuffer(BANK4[11]), 

    pt	PTR unsigned char  size(1) Largest target is 11
		 -> NULL(NULL[0]), _ELINMIntMessageBuffer(BANK4[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrupt_handler->_interrrupt_bldc
    _interrrupt_bldc->i1___lwdiv
    i1_commutate->i1___wmul
    _ELINMIntHandler->__ELINMIntResetProtocol

Critical Paths under _main in BANK0

    _main->_EOL
    _timer_init->_clear_timer
    _init_ports->_read_eeprom_data
    _InitMotorRun->_commutate
    _commutate->___wmul
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    _SetDiagAlarm->_PWM_Write_Out
    _Receive_Diag->__ELINMIntReceiveMessage
    __ELINMIntReceiveMessage->__ELINMIntSendMessage
    _Get_Analog_Value->_FILTER_Ubat
    _EOL->_NegativeAnswer
    _write_eeprom_data->___lwdiv
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _NegativeAnswer->_Transmit_LIN_8Bytes
    _Transmit_LIN_8Bytes->__ELINMIntSendMessage
    __ELINMIntSendMessage->__ELINMIntCalcIDParity
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc
    _interrrupt_bldc->i1_commutate

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   60125
                                             40 BANK0      4     4      0
                    _BVH2_Appl_Layer
                                _EOL
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                       _Receive_Diag
                       _SetDiagAlarm
                            ___awdiv
                        _clear_timer
                   _read_eeprom_data
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0    1449
                           _ADC_Init
                           _DiagInit
                       _EnableMCP201
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                __ELINMIntInitialize
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                             17 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0      65
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            0     0      0    1076
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0    1076
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0    1076
                                             22 BANK0     12    12      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) __ELINMIntInitialize                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    1     1      0     102
                                             19 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          0     0      0      37
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (2) _EnableMCP201                                         3     3      0      72
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      31
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     651
                                             16 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      31
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (1) _Receive_Diag                                         2     2      0    2426
                                             30 BANK0      2     2      0
                __ELINMIntGetPointer
            __ELINMIntReceiveMessage
 ---------------------------------------------------------------------------------
 (2) __ELINMIntReceiveMessage                              3     1      2    1961
                                             27 BANK0      3     1      2
               __ELINMIntSendMessage
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                             16 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EOL                                                 27    27      0   51143
                                             37 BANK0      3     3      0
                                              0 BANK4     24    24      0
                           _ADC_Read
                           _ADC_Wait
                      _InitMotorStop
                     _NegativeAnswer
                          _PWMReadDC
                      _PWM_Write_Out
                _Transmit_LIN_8Bytes
                            ___lwdiv
                             ___wmul
                              _cksum
                   _read_eeprom_data
                  _write_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _write_eeprom_data                                    2     1      1    1142
                                             23 BANK0      2     1      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     2     2      0      65
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _cksum                                                8     6      2     142
                                             16 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1333
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        1     1      0      31
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWMReadDC                                            0     0      0     368
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (3) ___tmul                                               9     3      6     316
                                             16 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___ltdiv                                             10     4      6      52
                                             25 BANK0     10     4      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _NegativeAnswer                                       1     1      0   20310
                                             36 BANK0      1     1      0
                _Transmit_LIN_8Bytes
 ---------------------------------------------------------------------------------
 (2) _Transmit_LIN_8Bytes                                  9     1      8   20279
                                             27 BANK0      9     1      8
                __ELINMIntGetPointer
               __ELINMIntSendMessage
 ---------------------------------------------------------------------------------
 (3) __ELINMIntSendMessage                                10     5      5    1566
                                             17 BANK0     10     5      5
              __ELINMIntCalcIDParity
 ---------------------------------------------------------------------------------
 (4) __ELINMIntCalcIDParity                                1     1      0     309
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) __ELINMIntGetPointer                                  2     1      1     434
                                             16 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             3     1      2      37
                                             16 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     38    38      0    3262
                                             30 BANK0      6     6      0
                                              0 BANK4     32    32      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1076
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                             16 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                             16 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                    0     0      0     685
                    _ELINMIntHandler
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (7) _interrupt_PWMCapture                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _interrrupt_bldc                                      6     6      0     663
                                              7 COMMON     2     2      0
                                             12 BANK0      4     4      0
                           _BLDCWait
                         i1_ADC_Read
                         i1_ADC_Wait
                          i1___lwdiv
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (8) i1_commutate                                         12    12      0     260
                                              0 BANK0     12    12      0
                           i1___wmul
 ---------------------------------------------------------------------------------
 (9) i1___wmul                                             6     2      4     260
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) i1___lwdiv                                            7     3      4      52
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_ADC_Read                                           3     1      2      37
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (8) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Task1ms                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PWM_CTRL                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ELINMIntHandler                                      0     0      0      22
             __ELINMIntResetProtocol
 ---------------------------------------------------------------------------------
 (8) __ELINMIntResetProtocol                               1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _EOL
     _ADC_Read
     _ADC_Wait
     _InitMotorStop
     _NegativeAnswer
       _Transmit_LIN_8Bytes
         __ELINMIntGetPointer
         __ELINMIntSendMessage
           __ELINMIntCalcIDParity
     _PWMReadDC
       ___ltdiv
         ___tmul (ARG)
       ___tmul
     _PWM_Write_Out
     _Transmit_LIN_8Bytes
       __ELINMIntGetPointer
       __ELINMIntSendMessage
         __ELINMIntCalcIDParity
     ___lwdiv
     ___wmul
     _cksum
     _read_eeprom_data
     _write_eeprom_data
       ___lwdiv (ARG)
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
       ___wmul
   _InitMotorStop
   _Receive_Diag
     __ELINMIntGetPointer
     __ELINMIntReceiveMessage
       __ELINMIntSendMessage
         __ELINMIntCalcIDParity
   _SetDiagAlarm
     _PWM_Write_Out
   ___awdiv
   _clear_timer
   _read_eeprom_data
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _EnableMCP201
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     __ELINMIntInitialize
     _init_bldc
       _InitMotorRun
         _commutate
           ___wmul
     _init_ports
       _read_eeprom_data
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _ELINMIntHandler
     __ELINMIntResetProtocol
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     i1_ADC_Read
     i1_ADC_Wait
     i1___lwdiv
     i1___wmul
     i1_commutate
       i1___wmul
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     170       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2C      3A       6       72.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     20      3B      14       73.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     170      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Jun 04 14:38:05 2018

                               EOL@_dcnt_420 0228                                 EOL@_dcnt_421 0229  
                               EOL@_dcnt_413 0221                                 EOL@_dcnt_422 022A  
                               EOL@_dcnt_414 0222                                 EOL@_dcnt_423 022B  
                               EOL@_dcnt_415 0223                                 EOL@_dcnt_424 022C  
                               EOL@_dcnt_416 0224                                 EOL@_dcnt_425 022D  
                               EOL@_dcnt_417 0225                                 EOL@_dcnt_426 022E  
                               EOL@_dcnt_418 0226                                 EOL@_dcnt_427 022F  
                               EOL@_dcnt_419 0227                                 EOL@_dcnt_428 0230  
                               EOL@_dcnt_429 0231                            ?_PWM_Capture_init 0070  
                                          _B 01A0                                            pc 0002  
                                         PL2 1562                                           PL4 157E  
                                         PL6 03C3                                           PL8 15A3  
                                         l69 0283                                           _RD 0CA8  
                                         _WR 0CA9                                 ___awdiv@sign 0035  
                         ??_PWM_Capture_init 0030                                           _pt 0052  
                        ___wmul@multiplicand 0032                             i1___wmul@product 0074  
                   _SIBFS_Pic_etat_monitor_b 00C7             BVH2_Appl_Layer@X_Sb4_Intergrator 0168  
                        __end_of_system_init 043C                                          PL10 15A8  
                                        PL20 15E4                                          PL12 15BC  
                                        PL30 0FA1                                          PL22 0F8B  
                                        PL14 15CA                                          PL40 1F2A  
                                        PL32 1EE9                                          PL24 03CB  
                                        PL16 1ED0                                          PL50 15ED  
                                        PL42 1F39                                          PL34 1EFA  
                                        PL26 0F98                                          PL18 15D9  
                                        PL60 0FBE                                          PL52 15F9  
                                        PL44 1F48                                          PL36 1F0A  
                                        PL28 03D8                                          PL70 1F78  
                                        PL62 067E                                          PL54 15FF  
                                        PL46 1F58                                          PL38 1F1A  
                                        PL80 1F84                                          PL72 160D  
                                        PL64 0FC8                                          PL56 1606  
                                        PL48 1F68                                          PL90 1F91  
                                        PL82 161E                                          PL74 1F7E  
                                        PL66 1F72                                          PL58 0FB4  
                                        PL92 0FEF                                          PL84 0FE2  
                                        PL76 0FDA                                          PL68 0FD1  
                                        PL94 0589                                          PL86 0FE8  
                                        PL78 1616                                          PL96 1F97  
                                        PL88 1F8A  BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00C2  
                                        PL98 1F9E                                  ?i1_ADC_Read 0070  
                                        l327 1B24                                          l600 1265  
                                        l345 1B53                                          l610 1273  
                                        l620 129C                                          l604 126E  
                                        l605 126C                                          l630 12AA  
                                        l614 1297                                          l534 0396  
                                        l615 1295                                          l640 12B8  
                                        l624 12A5                                          l536 039B  
                                        l625 12A3                                          l609 1275  
                                ?i1_ADC_Wait 0070                                          l650 12E1  
                                        l634 12B3                                          l635 12B1  
                                        l619 129E                                          l660 12EF  
                                        l644 12DC                                          l645 12DA  
                                        l629 12AC                                          l670 12FD  
                                        l654 12EA                                          l590 1257  
                                        l751 1719                                          l655 12E8  
                                        l639 12BA                                          l752 171D  
                                        l664 12F8                                          l584 1252  
                                        l665 12F6                                          l649 12E3  
                                        l585 1250                                          l594 1260  
                                        l659 12F1                                          l595 125E  
                                        l916 0313                                          l940 04B3  
                                        l669 12FF                                          l589 1259  
                                        l941 04B1                                          l950 04C3  
                                        l599 1267                                          l919 031C  
                                        l951 04C1                                          l945 04BB  
                                        l946 04B9                                          l895 163A  
                                        _GIE 005F                                          _EOL 1095  
                                        _RC5 0075                                          _PR2 001B  
                                        _sum 012B                             _ui16_IPhase_bldc 004E  
                               __CFG_BORV$LO 0000                                          wreg 0009  
                          _ui16_IPhase1_bldc 0137                           __ELINMIntTFrameMax 01D2  
                          _ui16_IPhase2_bldc 01D8                           __ELINMIntTFrameMin 0129  
                          _ui16_IPhase3_bldc 01D6                    BVH2_Appl_Layer@Cb24_Reset 0233  
                                       PL100 1FA4                                         PL110 1624  
                                       PL102 06DA                                         PL120 06E0  
                                       PL112 0FF6                                         PL104 0590  
                                       PL130 1FCF                                         PL122 1FBB  
                                       PL114 1FB0                                         PL106 0685  
                                       PL132 1FD4                                         PL124 1FC0  
                                       PL116 0FFC                                         PL108 1FAA  
                                       PL134 06E4                                         PL126 1FC5  
                                       PL118 1FB6                                         PL128 1FCA  
                               __CFG_LVP$OFF 0000                                         ?_EOL 0070  
                        __ELINMIntTHeaderMax 01D0                          __ELINMIntTHeaderMin 0127  
                    __end_of_interrrupt_bldc 1D3B                                         l1011 16E8  
                                       l1012 16EC                                         l1013 16F0  
                                       l1014 16F4                                         l1015 16F9  
                                       l1016 16FD                                         l1017 1701  
                                       l1018 1705                                         _C1IE 0495  
                                       l2115 0F2F                                         l2071 0E49  
                       __end_of_EnableMCP201 04C8                                         l1601 0903  
                                       l2065 17B8                                         l1611 093E  
                                       l1605 0925                                         l1614 094B  
                                       l1366 0537                                         l1711 0BCB  
                                       l1623 09DC                                         l1609 092A  
                                       l1802 0DFC                                         l1730 0BEB  
                                       l1642 09B6                                         l1731 0BEE  
                                       l1716 0BA9                                         l1708 0B8A  
                                       l1580 08D0                                         l1725 0BE2  
                                       l1653 0A23                                         l1734 0C09  
                                       l1647 0AF5                                         l1744 0C36  
                                       l1728 0C14                                         l1753 0C5C  
                                       l1729 0BF0                                         l1593 08FE  
                                       l1577 0899                                         l1850 0F08  
                                       l1594 08EC                                         l1747 0C4A  
                                       l1852 0F0A                                         l1844 0EEF  
                                       l1940 0496                                         l1853 0F0C  
                                       l1845 0EFE                                         l1597 08F7  
                                       l1917 0474                                         l1854 0F1D  
                                       l1846 0EF1                                         l1790 0D79  
                                       l1694 0B08                                         l1847 0EF3  
                                       l1759 0C65                                         l1688 0AC5  
                                       l1794 0D8B                                         l1973 17DA  
                                       l6330 047F                                         l6404 06E8  
                                       l6332 0482                                         l6324 0478  
                                       l6326 047A                                         l6328 047D  
                                       l6336 0485                                         l6640 043F  
                                       l6706 052E                                         l6650 044B  
                                       l6644 0443                                         l9070 01A7  
                                       l6662 045B                                         l6670 0463  
                                       l9080 01B4                                         l9064 019E  
                                       l6656 0453                                         l6690 0516  
                                       l6682 050A                                         l6674 04FE  
                                       l9092 01C7                                         l9500 1B1E  
                                       l9430 0E72                                         l9096 01CF  
                                       l9088 01C3                                         l9440 1A7A  
                                       l9426 0E6C                                         l6698 0522  
                                       l9506 1B2A                                         l9612 1B81  
                                       l9532 1B51                                         l9508 1B38  
                                       l9444 1A84                                         _ADON 04E8  
                                       l9630 1B84                                         l9606 1B7A  
                                       l9526 1B4B                                         l9470 1AF2  
                                       l9544 1B61                                         l9480 1AFF  
                                       l9472 1AF6                                         l9730 16AD  
                                       l9562 1B64                                         l9538 1B5A  
                                       l9482 1B01                                         l9474 1AF8  
                                       l9740 16B6                                         l9660 1B96  
                                       l9636 1B8B                                         l9476 1AFB  
                                       l9742 16C5                                         l9902 04CA  
                                       l9654 1B8F                                         l9582 1B6D  
                                       l9478 1AFD                                         l9494 1B06  
                                       l9592 1B77                                         l9568 1B6B  
                                       l9496 1B14                                         _CFGS 0CAE  
                                       l9746 16D2                                         l9674 1B9C  
                                       l9586 1B70                                         l9682 1B9F  
                                       l9772 028C                                         l9684 1BB3  
                                       l9776 03A3                                         l9866 17C0  
                                       l9974 17E3                                         l9988 17FB  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         _PIE1 0091  
                                       _PIE2 0092                                         _PIE3 0093  
                                       _PEIE 005E                                         u7015 01BC  
                                       u3675 03EF                                         _RCIF 008D  
                                       u3685 06F4                                         u8015 0F63  
                                       i1l69 1D55                                         u8065 1735  
                                       u7355 1AE1                                         u7365 1AED  
                                       u9181 08D4                                         u9520 09FA  
                                       u9530 09FB                                         u9825 0B70  
                                       _TMR0 0015                                         _TMR2 001A  
                                       _TMR4 0415                                         _TMR6 041C  
                                       _WREN 0CAA                                         _Bcnt 00DC  
                           _ui8_Task_Cont1ms 00D5                             _ui8_Task_Cont3ms 0154  
                           _ui8_Task_Cont5ms 0153                             _ui16_PWM_Freq_In 0123  
                 BVH2_Appl_Layer@Cb24_BadCnt 01C2                                         _main 0073  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                            _ui8_b_DResLocID_c 0055  
                        timer_init@ui8_TmrNb 0031                             __end_of_ADC_Init 04A1  
                           __end_of_ADC_Read 0296                             __end_of_ADC_Wait 0281  
                                       start 002B                              _ui8_sampleState 00DE  
                           __end_of_BLDCWait 1ED0                       __size_of_PWM_Write_Out 0005  
                         _ui16_comm_time_max 012D                                        S13830 0711  
                                      S13832 0760              __end_of__ELINMIntReceiveMessage 0379  
                                      ??_EOL 0045                                  i1_commutate 1D77  
                              ?_InitMotorRun 0070                              __end_of_Task1ms 0779  
                        __ELINMIntGetPointer 0361                                __CFG_PLLEN$ON 0000  
                               cksum@counter 0032                                        l10110 0560  
                                      l10114 0563                                        l10060 022A  
                                      l10052 020C                                        l10044 01EE  
                                      l10222 0ED5                                        l10150 0E8F  
                                      l10062 022E                                        l10054 0210  
                                      l10046 01F2                                        l10208 0EC7  
                                      l10160 0EB1                                        l12000 0CC9  
                                      l10218 0ED3                                        l10154 0E9E  
                                      l10138 0E86                                        l12002 0CCB  
                                      l10236 0EE3                                        l10164 0EB4  
                                      l10260 0F0E                                        l10316 0F3E  
                                      l12012 0D2A                                        l10182 0EA9  
                                      l10166 0EB6                                        l10262 0F17  
                                      l10254 0EF5                                        l10342 0F82  
                                      l10334 0F6E                                        l10326 0F51  
                                      l12014 0D32                                        l12030 0D8F  
                                      l10280 0E24                                        l10168 0EA3  
                                      l12040 0DE6                                        l12016 0D37  
                                      l11400 08B9                                        l13000 1113  
                                      l10338 0F74                                        l12042 0DF6  
                                      l12026 0D88                                        l12044 0E0B  
                                      l10364 173C                                        l10356 172D  
                                      l13020 1139                                        l13004 1117  
                                      l10278 0E20                                        l12038 0DDA  
                                      l11406 08BF                                        l13110 11F0  
                                      l13102 11E4                                        l13022 1140  
                                      l13006 1120                                        l11520 0969  
                                      l11440 08D9                                        l11424 08C2  
                                      l11344 0873                                        l10368 1740  
                                      l13040 1171                                        l10298 0E53  
                                      l11610 09F1                                        l11450 08E9  
                                      l11354 0887                                        l11346 0877  
                                      l11338 0866                                        l12410 1776  
                                      l10650 037E                                        l11620 0A08  
                                      l11516 095F                                        l11508 0955  
                                      l11428 08D5                                        l11372 088E  
                                      l11356 088A                                        l11348 087F  
                                      l13300 140E                                        l13132 1239  
                                      l13044 117B                                        l11710 0AA6  
                                      l11622 0A0A                                        l11534 097F  
                                      l11526 0971                                        l11518 0962  
                                      l10670 03A0                                        l10662 0390  
                                      l10654 0384                                        l11720 0AAE  
                                      l11640 0A25                                        l11544 0994  
                                      l11536 0983                                        l11528 0976  
                                      l12416 177F                                        l13304 1424  
                                      l13136 123E                                        l13128 122F  
                                      l11706 0A99                                        l11546 0997  
                                      l11538 0986                                        l11474 0910  
                                      l11386 0895                                        l13402 14A6  
                                      l13234 131F                                        l10658 038A  
                                      l11660 0A3E                                        l11644 0A2B  
                                      l11636 0A0D                                        l11556 09A3  
                                      l11484 0923                                        l13324 143F  
                                      l11910 0C41                                        l11822 0BD1  
                                      l11734 0AC3                                        l11398 08A4  
                                      l12374 17A9                                        l12366 1793  
                                      l13326 1442                                        l13254 1369  
                                      l11904 0C34                                        l11832 0BB6  
                                      l11824 0BAD                                        l11672 0A56  
                                      l11664 0A4B                                        l11648 0A31  
                                      l13504 153C                                        l11842 0BD0  
                                      l11738 0ACB                                        l11682 0A65  
                                      l11754 0ADE                                        l11578 09AE  
                                      l12378 17AE                                        l13450 14CB  
                                      l13426 14BB                                        l13370 147E  
                                      l13346 145D                                        l13274 13AF  
                                      l13098 11DA                                        l13522 155A  
                                      l11940 0C6A                                        l11924 0C52  
                                      l11916 0C48                                        l11836 0BC4  
                                      l11692 0A81                                        l11596 09C3  
                                      l13516 1558                                        l13508 1546  
                                      l13348 1460                                        l13604 00E0  
                                      l11846 0BD2                                        l11790 0B31  
                                      l13470 14D3                                        l13390 1499  
                                      l13294 13FA                                        l13622 013A  
                                      l13606 0111                                        l11960 0C85  
                                      l11944 0C6D                                        l11784 0B23  
                                      l11688 0A72                                        l11776 0B16  
                                      l13472 14DB                                        l13392 149C  
                                      l13368 147B                                        l13296 13FD  
                                      l13624 013C                                        l11890 0C1A  
                                      l11874 0C02                                        l11794 0B3C  
                                      l13298 140C                                        l13642 016D  
                                      l13562 007A                                        l13476 14E6  
                                      l13652 017E                                        l11974 0C9C  
                                      l11894 0C21                                        l11798 0B47  
                                      l13398 149E                                        l11992 0CBB  
                                      l11984 0CAA                                        l13664 018D  
                                      l13576 009A                                        l11996 0CC1  
                                      l13828 1B0C                                        l12982 10CD  
                                      l12974 10BD                                        l12994 10F0  
                                      l12986 10D2                                        _C1OUT 088E  
                            __end_of___aldiv 0F8B                                        ?_main 0070  
                            __end_of___awdiv 01D4                                        _EEPGD 0CAF  
                                      u10335 0D01                                        u10345 0D1A  
                                      u10355 0D25                              ___awdiv@divisor 0030  
                                      u10365 0D6F                                        _T1CON 0018  
                                      u11425 1217                                        u10635 17A0  
                                      u11435 1229                                        _T2CON 001C  
                                      u11395 11D4                                        _LATB1 0869  
                                      _LATB2 086A                                        _LATC0 0870  
                                      _LATC1 0871                                        _LATC2 0872  
                                      _LATC3 0873                                _InitMotorStop 0296  
                                      _LATC4 0874                                        _T4CON 0417  
                            __end_of___ltdiv 17B5                                        _T6CON 041E  
                            __end_of___lwdiv 1745                                        i1l316 1D29  
                                      i1l327 1E1F                                        i1l263 1BDB  
                                      i1l345 1E4E                                        i1l267 1CEB  
                                      i1l284 1C51                                        i1l970 05ED  
                                      i1l980 05EA                                        i1l964 05B2  
                                      i1l991 065B                                        i1l967 05B0  
                                      i1l978 05E3                              ___awdiv@counter 0034  
                                      _RCREG 0199                             ?_ELINMIntHandler 0070  
                                      _SENDB 0CF3                                        _RCSTA 019D  
                                      _TMR1H 0017                                        _TMR1L 0016  
                                      _SPBRG 019B                            _ui8_BlankingCount 00E2  
                          EnableMCP201@_dcnt 0030                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
                                      _TXREG 019A                                        _TXSTA 019E  
                        ___lmul@multiplicand 0034                            _ui16_PWM_Freq_mat 0125  
                     ?__ELINMIntCalcIDParity 0070                                        _cksum 17D2  
                       ?__ELINMIntGetPointer 0030     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00BF  
                           __end_of_PWM_CTRL 0760                 ?_Cb56_UbatHandling_node_fcn2 0070  
                             __pbitbssCOMMON 03C8                             __end_ofi1___wmul 1D77  
          BVH2_Appl_Layer@Cb24_oMotorStalled 013E                                        status 0003  
                           __end_of_DiagInit 04AD                          i1___wmul@multiplier 0070  
                                      wtemp0 007E                           __size_of_PWMReadDC 003E  
             ??_Cb34_PWM_Detection_node_fcn1 0030                                 __end_ofPL100 1FAA  
                               __end_ofPL110 1629                                 __end_ofPL102 06E0  
                               __end_ofPL120 06E4                                 __end_ofPL112 0FFC  
                               __end_ofPL104 0596                                 __end_ofPL130 1FD4  
                               __end_ofPL122 1FC0                                 __end_ofPL114 1FB6  
                               __end_ofPL106 068B                                 __end_ofPL132 1FD9  
                               __end_ofPL124 1FC5                                 __end_ofPL116 1000  
                               __end_ofPL108 1FB0                                 __end_ofPL134 06E8  
                               __end_ofPL126 1FCA                                 __end_ofPL118 1FBB  
                               __end_ofPL128 1FCF                           __size_ofi1___lwdiv 0025  
                        __size_ofi1_ADC_Read 000E                          __size_ofi1_ADC_Wait 0019  
                             __CFG_MCLRE$OFF 0000                           _ui8_b_DResServID_c 0161  
                            __initialization 002D                             _ui8_selected_lid 0059  
                BVH2_Appl_Layer@Cb51_Counter 0141                  BVH2_Appl_Layer@Cb19_Counter 00A4  
                             _NegativeAnswer 1629                                  _system_init 0402  
                         _ui8_duty_cycle_mat 0159                                 __end_of_main 0194  
                             ??_InitMotorRun 0042                              _PWM_trans_table 1800  
                        __ELINMIntInitialize 0538                         __size_of_clear_timer 0022  
                             ?_InitMotorStop 0070                                       ??_main 0048  
                       __size_of_FILTER_Init 0018                         __size_of_FILTER_Ubat 006B  
                       __size_of_FILTER_Temp 0029                            ?_read_eeprom_data 0070  
                       _BVH2_Appl_Layer$1210 022C                         _BVH2_Appl_Layer$1211 022D  
                       _BVH2_Appl_Layer$1212 022E                         _BVH2_Appl_Layer$1207 0229  
                       _BVH2_Appl_Layer$1215 0224                         _BVH2_Appl_Layer$1208 022A  
                       _BVH2_Appl_Layer$1209 022B                         _BVH2_Appl_Layer$1217 0226  
                       _BVH2_Appl_Layer$1218 0220                                ?_Receive_Diag 0070  
                       _interrupt_PWMCapture 068B                            ?_Get_Analog_Value 0070  
               __end_of__ELINMIntSendMessage 16E1                  _ui16_NTC_Temp_bldc_mean_cal 01DE  
                         ??_read_eeprom_data 0030                                _PWM_Write_Out 155D  
                                     _ADCON0 009D                           ??_Get_Analog_Value 003C  
                                     _ADCON1 009E                                       ?_cksum 0030  
                      ??__ELINMIntGetPointer 0031                         ?__ELINMIntInitialize 0070  
                                     _CCP1AS 0295                                       _CCP1IE 048A  
                                     _CCP1IF 008A                                       _CCP2IE 0490  
                                     _CCP2IF 0090                                       _CCP3IE 049C  
                                     _CCP3IF 009C                                       _CCP4IE 049D  
                                     _CCP4IF 009D                                       _CCP5IE 049E  
                                     _CCP5IF 009E                                       _ADRESH 009C  
                                     _EEADRH 0192                                       _ADRESL 009B  
                                     _EEADRL 0191                                       _EEDATA 0193  
                                     _CCPR1H 0292                                       _CCPR2H 0299  
                                     _EEDATH 0194                                       _CCPR3H 0312  
                                     _CCPR1L 0291                                       _CCPR4H 0319  
                                     _CCPR2L 0298                                       _EEDATL 0193  
                                     _CCPR3L 0311                                       _CCPR5H 031D  
                                     _CCPR4L 0318                                       _CCPR5L 031C  
                                     _EECON1 0195                                       _EECON2 0196  
                           ___awdiv@dividend 0032                                    ADC_Read@i 0032  
                                     _ANSELA 018C                                       _ANSELB 018D  
                           ?_interrrupt_bldc 0070                                ?_SetDiagAlarm 0070  
                                     i1l1006 066C                                       i1l1385 068C  
                                     i1l1388 069F                                       i1l8200 0652  
                                     i1l8120 05BD                                       i1l8202 0654  
                                     i1l8132 05D0                                       i1l8142 05E0  
                                     i1l8222 06CB                                       i1l8214 0694  
                                     i1l8152 05F4                                       i1l8128 05C8  
                                     i1l8170 0617                                       i1l8154 05F6  
                                     i1l8226 06CD                                       i1l8172 061A  
                            _ui8_PWM_FreqCnt 00CB                                       i1l8182 062B  
                                     i1l8166 060E                                       i1l8094 0757  
                                     i1l8192 063F                                       i1l8186 0635  
                                     i1l8196 0648                                       i1l8188 0637  
                                     _INTCON 000B                                       _FVRCON 0117  
                         _ui8_Task_Cont100ms 00CC            __ELINMIntReceiveMessage@_ELINM_id 003B  
                                     _OSCCON 0099                ??_Cb56_UbatHandling_node_fcn2 0030  
                                     _TMR0IE 005D                                       _TMR1IE 0488  
                                     _TMR1IF 0088                                       _TMR2IE 0489  
                                     _TMR2IF 0089                                       _TMR4IE 0499  
                                     _TMR4IF 0099                                       _SPBRGH 019C  
                                     _TMR6IE 049B                                       _TMR6IF 009B  
                                     _WDTCON 0097         BVH2_Appl_Layer@Sb1_Logical_Operator1 023B  
       BVH2_Appl_Layer@Sb1_Logical_Operator2 0228         BVH2_Appl_Layer@Sb1_Logical_Operator3 0234  
       BVH2_Appl_Layer@Sb1_Logical_Operator5 0235                       __end_of_NegativeAnswer 1639  
                                  ??_Task1ms 0070                                   _MotorFlags 007A  
 BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C                       __ELINMIntMessageBuffer 0250  
                                     ___lmul 0E45                                    ??___aldiv 0038  
                                     ___tmul 17B5                                       ___wmul 0E6A  
                                  ??___awdiv 0034                    BVH2_Appl_Layer@Sb4_PI_sum 023E  
                                  ??___ltdiv 003F                                    ??___lwdiv 0034  
                            _ui8_PWMinDC_sav 00CA                             ___awdiv@quotient 0036  
                                     _my_msg 01B0                            _write_eeprom_data 1707  
          BVH2_Appl_Layer@Cb24_oStalledAlarm 013D                            __end_of_PWMReadDC 1783  
                             ??_Receive_Diag 003E                            __end_ofi1___lwdiv 1FFE  
                         EOL@ui8_b_DResB0_RD 0234                           EOL@ui8_b_DResB1_RD 0235  
                         EOL@ui8_b_DResB2_RD 0236                           EOL@ui8_b_DResB3_RD 0237  
                      ?_interrupt_PWMCapture 0070                           EOL@ui8_b_DResB4_RD 0233  
                         EOL@ui8_b_DResB5_RD 0232                           ?_write_eeprom_data 0037  
                      __size_of_EnableMCP201 001B                                    ?_ADC_Init 0070  
                                  ?_ADC_Read 0030                                    ?_ADC_Wait 0070  
                             ?_PWM_Write_Out 0070                                    ?_BLDCWait 0070  
                   __size_of_BVH2_Appl_Layer 05AF                        ??__ELINMIntInitialize 0030  
                             ??_SetDiagAlarm 0031                          ??_write_eeprom_data 0038  
           __size_of__ELINMIntReceiveMessage 0015             BVH2_Appl_Layer@Cb9_oCurrentAlarm 0139  
                    __end_of__initialization 0070                        __end_of_FILTER_IPhase 0402  
                    __end_of_PWM_trans_table 1865                     ??__ELINMIntResetProtocol 0070  
                            ?_NegativeAnswer 0070                          _ui8_duty_cycle_BLDC 0056  
                             __pcstackCOMMON 0070                              _ui8_PWMoutvalue 0151  
                               __pidataBANK0 0000                                 __pidataBANK1 0000  
                               __pidataBANK2 0000                           _ui16_dryRun_Thresh 01EE  
                              __end_of_cksum 1800                                 _EnableMCP201 04AD  
                            ??_InitMotorStop 0030         __size_of_Cb56_UbatHandling_node_fcn2 0035  
     __ELINMIntGetPointer@_ELINMInt_position 0030                    __end_of_write_eeprom_data 1720  
            __ELINMIntSendMessage@_ELINM_chk 0039              __ELINMIntSendMessage@_ELINM_idr 0036  
                                 __end_ofPL2 157E                                   __end_ofPL4 15A3  
                                 __end_ofPL6 03CB                                   __end_ofPL8 15A8  
            __ELINMIntSendMessage@_ELINM_tid 0037                                    ?_PWM_CTRL 0070  
                               ??i1_ADC_Read 0072                                    ?i1___wmul 0070  
                               ??i1_ADC_Wait 0070                                    ?_DiagInit 0070  
                      Transmit_LIN_8Bytes@B0 003B                        Transmit_LIN_8Bytes@B1 003C  
                      Transmit_LIN_8Bytes@B2 003D                        Transmit_LIN_8Bytes@B3 003E  
                      Transmit_LIN_8Bytes@B4 003F                        Transmit_LIN_8Bytes@B5 0040  
                      Transmit_LIN_8Bytes@B6 0041                        Transmit_LIN_8Bytes@B7 0042  
                      Transmit_LIN_8Bytes@ID 0043                            _Cb1_oCurrentAlarm 014C  
                                 ??_ADC_Init 0030                                   ??_ADC_Read 0032  
                                 ??_ADC_Wait 0030                        _ui16_Speed_demand_mat 01CA  
                                 ??_BLDCWait 0070                  __end_of_Oscill_Source_Block 04E6  
                  __size_of_PWM_Capture_init 0052                         __ELINMIntMessageSize 00D3  
                         _ui16_Duty_Cycle_In 01EA                                      ??_cksum 0032  
           write_eeprom_data@ui8_adress_data 0037                                 _analog_value 00BC  
                __end_of_Transmit_LIN_8Bytes 167C                         __end_of_InitMotorRun 03C3  
                         __size_of_commutate 013A                                   __pbssBANK0 004C  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK4 0240  
                    _ui8_Duty_Cycle_In_Ratio 014F                           __size_of_init_bldc 0022  
                       _bool_ControlLoopMode 00CD                           __end_ofi1_ADC_Read 1D62  
                         __end_ofi1_ADC_Wait 1D54                                   __pmaintext 0073  
                       __ELINMIntSendMessage 167C                                      ?___lmul 0030  
                            _Cb34_oPWM_Alarm 014A                                      ?___tmul 0030  
                                    ?___wmul 0030                                 ?i1_commutate 0070  
                                 __pintentry 0004                                      _CM1CON0 0111  
                                    _CM1CON1 0112                                      _CCP1ASE 14AF  
                                    _CCP1CON 0293                                      _CCP2CON 029A  
                                    _CCP3CON 0313                                      _CCP4CON 031A  
    __end_of_Cb1_Current_An___High_node_fcn1 0E30     __size_of_Cb1_Current_An___High_node_fcn1 001C  
          ??_Cb1_Current_An___High_node_fcn1 0030             ?_Cb1_Current_An___High_node_fcn1 0070  
            _Cb1_Current_An___High_node_fcn1 0E14                                      _CCP5CON 031E  
                                    i1S13834 0725                                      i1S13838 0739  
                      _bool_CPU_TempRedAlarm 0157                                      _BAUDCON 019F  
                             ___lmul@product 0038                                   ??_PWM_CTRL 0070  
                                 ??i1___wmul 0074                                      u1101_25 1C2B  
                     ??_interrupt_PWMCapture 0070                                   _ui8_Ki_mat 01CC  
                                    u1073_25 1DDC                                      u1074_25 1DE8  
                                    u1092_25 1FEE                                      u1094_25 1BC0  
                            ??_PWM_Write_Out 0030                                   _ui8_Kp_mat 015A  
                                    i1l12500 1E25                                      i1l12430 1D5D  
                                    i1l12502 1E33                                      i1l12600 1E75  
                                    i1l12520 1E46                                      i1l12532 1E55  
                                    i1l12630 1E86                                      i1l12606 1E7C  
                                    i1l12526 1E4C                                      i1l12470 1DF6  
                                    i1l12438 1D82                                      i1l12384 1D64  
                                    i1l12624 1E7F                                      i1l12472 1DF8  
                                    i1l12464 1DED                                      i1l12714 1FF5  
                                    i1l12706 1FE6                                      i1l12562 1E66  
                                    i1l12538 1E5C                                      i1l12474 1DFA  
                                    i1l12490 1E0F                                      i1l12466 1DF1  
                                    i1l12388 1D6A                                      i1l12580 1E6B  
                                    i1l12556 1E5F                                      i1l12476 1DFC  
                                    i1l12468 1DF3                                      i1l13540 0019  
                                    i1l12718 1FF9                                      i1l12654 1E91  
                                    i1l12494 1E19                                      i1l12902 1CD0  
                                    i1l12814 1C36                                      i1l12806 1C2D  
                                    i1l12742 1BDF                                      i1l13534 0012  
                                    i1l12648 1E8A                                      i1l12576 1E68  
                                    i1l12488 1E01                                      i1l12832 1C3F  
                                    i1l12752 1BF3                                      i1l12728 1BC4  
                                    i1l13552 0026                                      i1l12586 1E72  
                                    i1l12754 1BF6                                      i1l13546 0020  
                                    i1l12668 1E97                                      i1l12676 1E9A  
                                    i1l12678 1EAE                                      i1l12942 1D18  
                                    i1l12846 1C4C                                      i1l12918 1CDE  
                                    i1l12944 1D1A                                      i1l12872 1C60  
                                    i1l12962 1D34                                      i1l12938 1D0F  
                                    i1l12946 1D1E                                      i1l12890 1CAF  
                                    i1l12882 1C92                                      i1l12866 1C56  
                                    i1l12794 1C10                                      i1l13836 1E07  
                                    i1l12964 1D39                                      i1l12948 1D20  
                                    i1l12884 1C96                                      i1l12876 1C77  
                                    i1l12892 1CB0                                      i1l12878 1C7B  
                                    i1l12894 1CBC                                      i1l12888 1CAD  
                                    i1l12896 1CC4                                   ??_DiagInit 0031  
                    ??__ELINMIntCalcIDParity 0030                                      _PWM1CON 0294  
                                 _comm_state 00E3                  BVH2_Appl_Layer@Cb9_StateCnt 00C3  
                          ??_BVH2_Appl_Layer 003E                    _ui16_Speed_demand_mat_Max 01C8  
                  _ui16_Speed_demand_mat_min 01C6              __size_of__ELINMIntResetProtocol 000F  
                                    _Task1ms 0776                         __end_of_Receive_Diag 0361  
                      ?__ELINMIntSendMessage 0031                                 ?_system_init 0070  
                                    ___aldiv 0F1F                      BVH2_Appl_Layer@Sb3_Sum1 023C  
                                    ___awdiv 0194                              __size_of___lmul 0025  
                            __size_of___tmul 001D                              __size_of___wmul 0015  
                                    ___ltdiv 1783                                      ___lwdiv 1720  
                       __end_of_SetDiagAlarm 03A3                            __end_of_commutate 1BB4  
                 __size_of_write_eeprom_data 0019                                 _ui8_CompFlag 00DD  
                                 _init_ports 0550                                      __ptext1 0402  
                                    __ptext2 043C                                      __ptext3 0475  
                                    __ptext4 0550                                      __ptext5 0567  
                                    __ptext6 03A3                                      __ptext7 1A7A  
                                    __ptext8 0538                                      __ptext9 04E6  
                        _phase_delay_counter 01DA                                      _filter1 01E4  
                                    _filter3 01E2                                 __size_of_EOL 04C8  
                          i1___lwdiv@divisor 0070                            __end_of_init_bldc 0589  
                          i1___lwdiv@counter 0074                                _ui16_Temp_cal 01E6  
                           ___aldiv@dividend 0034                   BVH2_Appl_Layer@Sb2_Switch2 0239  
                 BVH2_Appl_Layer@Sb2_Switch5 0231                               __ELINMIntRXCRC 01D4  
                                    clrloop0 0771                      __ELINMIntReceiveMessage 0364  
                                    _wkpoint 00EE                         end_of_initialization 0070  
                             __ELINMIntSpace 015B                     __size_of_ELINMIntHandler 00D9  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00C0         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0  
                     __ELINMIntRXMessageSize 015C                         _ui16_fir_IPhase_mean 0133  
                  __size_of_read_eeprom_data 000B                    __size_of_Get_Analog_Value 0005  
                           ___ltdiv@dividend 003C                             __CFG_CLKOUTEN$ON 0000  
                              ??_clear_timer 0030                             ___aldiv@quotient 003A  
            read_eeprom_data@ui8_adress_data 0031                        i1___wmul@multiplicand 0072  
                              ??_FILTER_Init 0033                                ??_FILTER_Ubat 0030  
                              ??_FILTER_Temp 0030                         _Cb56_odFixedValueSel 00C4  
                                 _timer_init 043C               PWM_Write_Out@ui8_DutyCycle_Out 0030  
                      _ui16_IPhase1_bldc_cal 0166                        EnableMCP201@_dcnt_712 0031  
                      EnableMCP201@_dcnt_713 0032                  __end_of__ELINMIntGetPointer 0364  
                     __ELINMIntResetProtocol 066F                        _ui16_IPhase2_bldc_cal 0164  
                           __CFG_FOSC$INTOSC 0000                        __size_of_InitMotorRun 0020  
                        _ui16_Current_Thresh 01EC                            NegativeAnswer@LID 0044  
                           _PWM_Capture_init 04E6                             ___ltdiv@quotient 003F  
                                  _PWMReadDC 1745                        _ui16_IPhase3_bldc_cal 0162  
                          __size_of_ADC_Init 000A                            __size_of_ADC_Read 0015  
                              _ui16_step_cnt 00BA                                    i1___lwdiv 1FD9  
                          __size_of_ADC_Wait 0019                            __size_of_BLDCWait 0021  
                                 _windowPtr1 00E7                             _ui8_BattVolt_mat 00B2  
                           ??_NegativeAnswer 0044         BVH2_Appl_Layer@Sb2_Logical_Operator2 0236  
                     ??__ELINMIntSendMessage 0036                     __size_of_interrrupt_bldc 0187  
                          __ELINMIntReadBack 00D2                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 03A3                               __end_of___lmul 0E6A  
                     _ui16_phase_advancement 00B8                               __end_of___tmul 17D2  
                             __end_of___wmul 0E7F                                  ?_init_ports 0070  
                       __size_ofi1_commutate 0138                          __end_of_clear_timer 0497  
                __end_of__ELINMIntInitialize 0550                            __size_of_PWM_CTRL 0013  
                                i1ADC_Read@i 0072                                  __end_ofPL10 15BC  
                                __end_ofPL20 15ED                                  __end_ofPL12 15CA  
                                __end_ofPL30 0FB4                                  __end_ofPL22 0F98  
                                __end_ofPL14 15D9                                  __end_ofPL40 1F39  
                                __end_ofPL32 1EFA                                  __end_ofPL24 03D8  
                                __end_ofPL16 1EE9                                  __end_ofPL50 15F9  
                                __end_ofPL42 1F48                                  __end_ofPL34 1F0A  
                                __end_ofPL26 0FA1                                  __end_ofPL18 15E4  
                                __end_ofPL60 0FC8                                  __end_ofPL52 15FF  
                                __end_ofPL44 1F58                                  __end_ofPL36 1F1A  
                                __end_ofPL28 03DF                                  __end_ofPL70 1F7E  
                                __end_ofPL62 0685                                  __end_ofPL54 1606  
                                __end_ofPL46 1F68                                  __end_ofPL38 1F2A  
                                __end_ofPL80 1F8A                                  __end_ofPL72 1616  
                                __end_ofPL64 0FD1                                  __end_ofPL56 160D  
                                __end_ofPL48 1F72                                  __end_ofPL90 1F97  
                                __end_ofPL82 1624                                  __end_ofPL74 1F84  
                                __end_ofPL66 1F78                                  __end_ofPL58 0FBE  
                                __end_ofPL92 0FF6                                  __end_ofPL84 0FE8  
                                __end_ofPL76 0FE2                                  __end_ofPL68 0FDA  
                                __end_ofPL94 0590                                  __end_ofPL86 0FEF  
                                __end_ofPL78 161E                                  __end_ofPL96 1F9E  
                                __end_ofPL88 1F91                                  __end_ofPL98 1FA4  
           __ELINMIntSendMessage@_ELINM_fmax 0034             __ELINMIntSendMessage@_ELINM_fmin 0032  
                        start_initialization 002D                            __size_ofi1___wmul 0015  
                  ??__ELINMIntReceiveMessage 003D             __ELINMIntSendMessage@_ELINM_size 0031  
                                __end_of_EOL 155D                          __end_of_FILTER_Init 04E0  
                        __end_of_FILTER_Ubat 0312                          __end_of_FILTER_Temp 0711  
                          __size_of_DiagInit 000C                                   ?_PWMReadDC 0070  
                                  _ErrorCode 00D0                                   ?i1___lwdiv 0070  
        __end_of_Cb56_UbatHandling_node_fcn2 0F1F                  _Cb56_UbatHandling_node_fcn2 0EEA  
                             _ui8_IPhase_sel 00E1                                 _Cb1_StateCnt 00A8  
                      __size_of_Receive_Diag 004F                               Receive_Diag@id 003F  
                          ??_ELINMIntHandler 0071                        __size_of_SetDiagAlarm 002A  
                    _ui16_NTC_Temp_bldc_mean 0131                               _ui8_PWM_dc_mat 00CF  
                                   ??___lmul 0038                                     ??___tmul 0036  
                                   ??___wmul 0034                                  __pdataBANK0 0059  
                                __pdataBANK1 00E8                                  __pdataBANK2 0168  
                 read_eeprom_data@ui8_adress 0030                         __size_of_system_init 003A  
                               _Cb1_oShutoff 014B                                  ?_timer_init 0070  
                             ___tmul@product 0036                        __end_of_InitMotorStop 02A2  
                                   EOL@_dcnt 0220                       __size_of_FILTER_IPhase 0023  
                            _ui8_Pulse_State 0150                                  __pbssCOMMON 007A  
                                  ___latbits 0002                              _BVH2_Appl_Layer 0865  
                               _Receive_Diag 0312                                __pcstackBANK0 0020  
                              __pcstackBANK4 0220               __size_of__ELINMIntCalcIDParity 0026  
              __end_of__ELINMIntCalcIDParity 1707                            _bool_MotorStalled 00D9  
                               _SetDiagAlarm 0379                 __size_of_Oscill_Source_Block 0006  
                        __size_of_init_ports 0017                             _read_eeprom_data 025D  
                                  __pnvBANK1 00EF                                    __pnvBANK3 01EC  
             BVH2_Appl_Layer@Cb51_oTempAlarm 013C                             _Get_Analog_Value 02A2  
               __size_of_Transmit_LIN_8Bytes 0043                                     ?_Task1ms 0070  
                           ___lwdiv@dividend 0032                                  _clear_timer 0475  
                                   ?___aldiv 0030                __ELINMIntSendMessage@_ELINM_i 0038  
                                   ?___awdiv 0030                                     ?___ltdiv 0039  
                                   ?___lwdiv 0030                        _bool_HighCurrentAlarm 00D8  
                       clear_timer@ui8_TmrNb 0030                            ??_interrrupt_bldc 0077  
              _SIBFS_Current_Analysis_High_b 00C9                               _ui8_UPhase_sel 00E0  
                             _bool_UbatAlarm 0156                                  _FILTER_Init 04C8  
                                _FILTER_Ubat 02A7                                  _FILTER_Temp 06E8  
                                  _comm_time 0050                                    __pswtext1 0711  
                                  __pswtext2 0760                                    __pswtext3 0725  
                                  __pswtext4 0739                           _Cb34_oPWM_SC_Alarm 0149  
                          _interrupt_handler 0004                                    _ict_stamp 016F  
                            _ui16_Ubemf_bldc 00B6                                    _commutate 1A7A  
                      _SIBFS_PWM_Detection_b 00C8                  __ELINMIntResetProtocol@code 0070  
                                   _ADC_Init 0497                                     _ADC_Read 0281  
              __size_of_interrupt_PWMCapture 004F                         _bool_DryRunningAlarm 00DA  
                                   _ADC_Wait 0268                           ?_interrupt_handler 0070  
                      __end_of_PWM_Write_Out 1562                                     _BLDCWait 1EAF  
                                ??_PWMReadDC 0043                             __CFG_WDTE$SWDTEN 0000  
                          _I_calibrationInit 01D4                             ___lwdiv@quotient 0035  
                                ??i1___lwdiv 0074                                    _init_bldc 0567  
                             __size_of_cksum 002E      BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 00C1  
                         ?_I_calibrationInit 0070                          ??_interrupt_handler 0079  
                      _Cb56_oUbat_Alarm_High 0144                              ___aldiv@divisor 0030  
                            ___aldiv@counter 0038                               ___wmul@product 0034  
                        __size_of_timer_init 0039                                    clear_ram0 0770  
                              _FILTER_IPhase 03DF            __ELINMIntGetPointer@_ELINMInt_tag 0031  
                        ??_I_calibrationInit 0033                              ___ltdiv@divisor 0039  
                             _Cb34_odPumpOff 0146                              ___ltdiv@counter 0042  
                                   _GO_nDONE 04E9                     __end_of_PWM_Capture_init 0538  
                                _ui8_failure 016E                                     _PSTR1CON 0296  
                    ?__ELINMIntResetProtocol 0070                    __end_of_interrupt_handler 002B  
                    __end_of_BVH2_Appl_Layer 0E14                                     _PWM_CTRL 074D  
                             _ui8_b_DResB0_c 0054                               _ui8_b_DResB1_c 0160  
                             _ui8_b_DResB2_c 015F                               _ui8_b_DResB3_c 015E  
                             _ui8_b_DResB4_c 015D                            ___wmul@multiplier 0030  
                                   i1___wmul 1D62                                   ?_commutate 0070  
                                  cksum@addr 0036                      interrrupt_bldc@ui32_tmp 002C  
                                   _DiagInit 04A1                    __end_of_I_calibrationInit 025D  
                        ___tmul@multiplicand 0033                          _ui16_fir_Bat_mittel 0135  
                  _ui8_fixed_start_speed_mat 01DC                        __ELINMIntSleepTimeout 01BE  
                                 ?_init_bldc 0070                            ___lmul@multiplier 0030  
                             _ui16_Capt_Val0 00AE                               _ui16_Capt_Val1 00AC  
                             _ui16_Capt_Val2 00AA                               _ui16_I_cal_Ph1 00EC  
                             _ui16_I_cal_Ph2 00EA                               _ui16_I_cal_Ph3 00E8  
                           __ELINMIntStatus1 00D4                               ?_FILTER_IPhase 0070  
                         _bool_CPU_TempAlarm 00DB                             _ui16_mat_Current 00B0  
                           __size_of_Task1ms 0003                         _SIBFS_UbatHandling_b 00C6  
                    _Cb34_odFixedLowValueSel 0148               __end_of__ELINMIntResetProtocol 067E  
                              ?_EnableMCP201 0070                     BVH2_Appl_Layer@Sb2_Error 0237  
                           __size_of___aldiv 006C                             __size_of___awdiv 0040  
              BVH2_Appl_Layer@Cb19_oDryRun55 0140                BVH2_Appl_Layer@Cb19_oDryRun66 013F  
                           __size_of___ltdiv 0032                             __size_of___lwdiv 0025  
                               ??_init_ports 0032                            _ui8_lastTaskvalue 0152  
                           _ui16_mat_inpTemp 01CE                               _ui8_StartupPWM 00E4  
                       _bool_PWMin_err_Alarm 0158                __ELINMIntMessageBufferPointer 00D1  
                                   _checksum 01B8                           _Cb1_RestartCounter 014D  
           BVH2_Appl_Layer@Cb14_oDryRunAlarm 00BE                           _ui16_NTC_Temp_bldc 01E8  
                            ___lwdiv@divisor 0030                               _Cb56_odPumpOff 0143  
                            ___lwdiv@counter 0034                                     __ptext10 04E0  
                                   __ptext11 01D4                                     __ptext20 02A2  
                                   __ptext12 04C8                                     __ptext21 02A7  
                                   __ptext13 04AD                                     __ptext30 1745  
                                   __ptext22 06E8                                     __ptext14 04A1  
                                   __ptext31 17B5                                     __ptext23 03DF  
                                   __ptext15 0497                                     __ptext40 0281  
                                   __ptext32 1783                                     __ptext24 1095  
                                   __ptext16 0194                                     __ptext41 0865  
                                   __ptext33 1629                                     __ptext25 1707  
                                   __ptext17 0379                                     __ptext50 068B  
                                   __ptext42 0E6A                                     __ptext34 1639  
                                   __ptext26 025D                                     __ptext18 0312  
                                   __ptext51 1BB4                                     __ptext43 0E45  
                                   __ptext35 167C                                     __ptext27 17D2  
                                   __ptext19 0364                                     __ptext60 0596  
                                   __ptext52 1D77                                     __ptext44 0F1F  
                                   __ptext36 16E1                                     __ptext28 1720  
                                   __ptext61 066F                                     __ptext53 1D62  
                                   __ptext45 0EEA                                     __ptext37 0361  
                                   __ptext29 155D                                     __ptext54 1FD9  
                                   __ptext46 0E30                                     __ptext38 0296  
                                   __ptext55 1D3B                                     __ptext47 0E7F  
                                   __ptext39 0268                                     __ptext56 1D54  
                                   __ptext48 0E14                                     __ptext57 1EAF  
                                   __ptext58 0776                                     __ptext59 074D  
                            _ELINMIntHandler 0596                 __size_of__ELINMIntGetPointer 0003  
                             _ui16_Ubat_bldc 0057                      _bool_mat_currAlarm_bldc 00CE  
               BVH2_Appl_Layer@Cb14_StateCnt 01C4                                _Cb44_StateCnt 00A6  
                         i1___lwdiv@dividend 0072                BVH2_Appl_Layer@Cb51_odPumpOff 013A  
                              __size_of_main 0121                                   _Cb34_idPWM 00C5  
                                   _phaseCal 00D7                           __end_of_init_ports 0567  
                                _inputArray1 0240                               _ui16_Speed_mat 004C  
               BVH2_Appl_Layer@Cb24_StateCnt 00A2                  BVH2_Appl_Layer@Sb3_Product1 022F  
              __size_of__ELINMIntSendMessage 0065                                ??i1_commutate 0020  
                             ??_EnableMCP201 0030                                     int$flags 007E  
          BVH2_Appl_Layer@Cb51_oTempRedAlarm 013B                                _ui8_Ubemf_sel 00DF  
                              _Cb44_oShutoff 0145                   __size_of_interrupt_handler 0027  
                                   cksum@sum 0034                             ?_BVH2_Appl_Layer 0070  
                               ??_timer_init 0031                          _Oscill_Source_Block 04E0  
                         i1___lwdiv@quotient 0075                                   i1_ADC_Read 1D54  
                                 i1_ADC_Wait 1D3B                                  ??_commutate 0036  
                            __ELINMIntStatus 0053                     __end_of_read_eeprom_data 0268  
                   __end_of_Get_Analog_Value 02A7                          _Transmit_LIN_8Bytes 1639  
                 __size_of_I_calibrationInit 0089                             _ui8_given_supply 00D6  
    __end_of_Cb44_Pic_etat_monitor_node_fcn1 0E45     __size_of_Cb44_Pic_etat_monitor_node_fcn1 0015  
          ??_Cb44_Pic_etat_monitor_node_fcn1 0030             ?_Cb44_Pic_etat_monitor_node_fcn1 0070  
            _Cb44_Pic_etat_monitor_node_fcn1 0E30         __end_of_Cb34_PWM_Detection_node_fcn1 0EEA  
      __size_of_Cb34_PWM_Detection_node_fcn1 006B                 _Cb34_PWM_Detection_node_fcn1 0E7F  
                                ??_init_bldc 0042                 __size_of__ELINMIntInitialize 0018  
                                   intlevel1 0000          __ELINMIntReceiveMessage@_ELINM_size 003C  
                           _rising_bemf_flag 03C8                              ??_FILTER_IPhase 0030  
                  _bool_PWMin_Freq_err_Alarm 0155                  write_eeprom_data@ui8_adress 0038  
                       ?_Oscill_Source_Block 0070                              _interrrupt_bldc 1BB4  
                         __end_of_timer_init 0475                         ?_Transmit_LIN_8Bytes 003B  
                               ?_clear_timer 0070                        _bool_start_demand_mat 00E5  
                              ??_system_init 0042                            _ui8_PWMin_failCnt 014E  
                 PWM_Capture_init@ui8_CCP_Nb 0030                      __size_of_NegativeAnswer 0010  
                          ___tmul@multiplier 0030                                 ?_FILTER_Init 0070  
                               ?_FILTER_Ubat 0070                                 ?_FILTER_Temp 0070  
                              __pstringtext1 1800                     ?__ELINMIntReceiveMessage 003B  
                                 _OPTION_REG 0095                      __end_of_ELINMIntHandler 066F  
         __ELINMIntReceiveMessage@_ELINM_tag 003D                          __end_ofi1_commutate 1EAF  
                               ___aldiv@sign 0039  BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016D  
              ?_Cb34_PWM_Detection_node_fcn1 0070                        __ELINMIntCalcIDParity 16E1  
         BVH2_Appl_Layer@Cb24_RestartCounter 0142                        ??_Oscill_Source_Block 0030  
                       _Cb34_odFixedValueSel 0147             __ELINMIntCalcIDParity@ELINM_idtr 0030  
                            _ui8_error_Flags 00E6                              _ui8_current_cal 0120  
                      ??_Transmit_LIN_8Bytes 0043                       __size_of_InitMotorStop 000C  
               __end_of_interrupt_PWMCapture 06DA                               _ui16_speed_fil 00B4  
                             _ui16_speed_rar 012F                                _filterTempNTC 01E0  
