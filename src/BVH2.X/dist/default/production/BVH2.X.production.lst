

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Apr 21 13:14:11 2023

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext1,local,class=CONST,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	swtext2,local,class=CONST,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	intentry,global,class=CODE,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	swtext3,local,class=CONST,delta=2
    72                           	psect	text40,local,class=CODE,merge=1,delta=2
    73                           	psect	swtext4,local,class=CONST,delta=2
    74                           	psect	text41,local,class=CODE,merge=1,delta=2
    75                           	psect	text42,local,class=CODE,merge=1,delta=2
    76                           	psect	text43,local,class=CODE,merge=1,delta=2
    77                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text45,local,class=CODE,merge=1,delta=2
    79                           	psect	text46,local,class=CODE,merge=1,delta=2
    80                           	psect	text47,local,class=CODE,merge=1,delta=2
    81                           	dabs	1,0x7E,2
    82  0000                     
    83                           ; Version 2.00
    84                           ; Generated 27/05/2018 GMT
    85                           ; 
    86                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC16F1936 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  0110                     	;# 
   169  0111                     	;# 
   170  0112                     	;# 
   171  0113                     	;# 
   172  0114                     	;# 
   173  0115                     	;# 
   174  0116                     	;# 
   175  0117                     	;# 
   176  0118                     	;# 
   177  0119                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011D                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  0191                     	;# 
   184  0191                     	;# 
   185  0192                     	;# 
   186  0193                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0194                     	;# 
   190  0195                     	;# 
   191  0196                     	;# 
   192  0199                     	;# 
   193  019A                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019D                     	;# 
   201  019E                     	;# 
   202  019F                     	;# 
   203  020D                     	;# 
   204  0210                     	;# 
   205  0211                     	;# 
   206  0212                     	;# 
   207  0213                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0216                     	;# 
   212  0217                     	;# 
   213  0291                     	;# 
   214  0291                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0294                     	;# 
   218  0295                     	;# 
   219  0295                     	;# 
   220  0296                     	;# 
   221  0298                     	;# 
   222  0298                     	;# 
   223  0299                     	;# 
   224  029A                     	;# 
   225  029B                     	;# 
   226  029C                     	;# 
   227  029C                     	;# 
   228  029D                     	;# 
   229  029E                     	;# 
   230  029F                     	;# 
   231  0311                     	;# 
   232  0311                     	;# 
   233  0312                     	;# 
   234  0313                     	;# 
   235  0314                     	;# 
   236  0315                     	;# 
   237  0315                     	;# 
   238  0316                     	;# 
   239  0318                     	;# 
   240  0318                     	;# 
   241  0319                     	;# 
   242  031A                     	;# 
   243  031C                     	;# 
   244  031C                     	;# 
   245  031D                     	;# 
   246  031E                     	;# 
   247  0394                     	;# 
   248  0395                     	;# 
   249  0396                     	;# 
   250  0415                     	;# 
   251  0416                     	;# 
   252  0417                     	;# 
   253  041C                     	;# 
   254  041D                     	;# 
   255  041E                     	;# 
   256  0791                     	;# 
   257  0792                     	;# 
   258  0793                     	;# 
   259  0794                     	;# 
   260  0795                     	;# 
   261  0798                     	;# 
   262  0799                     	;# 
   263  07A0                     	;# 
   264  07A1                     	;# 
   265  07A3                     	;# 
   266  07A4                     	;# 
   267  07A6                     	;# 
   268  07A7                     	;# 
   269  07A9                     	;# 
   270  07AA                     	;# 
   271  0FE4                     	;# 
   272  0FE5                     	;# 
   273  0FE6                     	;# 
   274  0FE7                     	;# 
   275  0FE8                     	;# 
   276  0FE9                     	;# 
   277  0FEA                     	;# 
   278  0FEB                     	;# 
   279  0FED                     	;# 
   280  0FEE                     	;# 
   281  0FEF                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0013                     	;# 
   301  0015                     	;# 
   302  0016                     	;# 
   303  0016                     	;# 
   304  0017                     	;# 
   305  0018                     	;# 
   306  0019                     	;# 
   307  001A                     	;# 
   308  001B                     	;# 
   309  001C                     	;# 
   310  001E                     	;# 
   311  001F                     	;# 
   312  008C                     	;# 
   313  008D                     	;# 
   314  008E                     	;# 
   315  0090                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0093                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  010C                     	;# 
   331  010D                     	;# 
   332  010E                     	;# 
   333  0110                     	;# 
   334  0111                     	;# 
   335  0112                     	;# 
   336  0113                     	;# 
   337  0114                     	;# 
   338  0115                     	;# 
   339  0116                     	;# 
   340  0117                     	;# 
   341  0118                     	;# 
   342  0119                     	;# 
   343  011A                     	;# 
   344  011B                     	;# 
   345  011D                     	;# 
   346  018C                     	;# 
   347  018D                     	;# 
   348  0191                     	;# 
   349  0191                     	;# 
   350  0192                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0194                     	;# 
   355  0195                     	;# 
   356  0196                     	;# 
   357  0199                     	;# 
   358  019A                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019C                     	;# 
   364  019C                     	;# 
   365  019D                     	;# 
   366  019E                     	;# 
   367  019F                     	;# 
   368  020D                     	;# 
   369  0210                     	;# 
   370  0211                     	;# 
   371  0212                     	;# 
   372  0213                     	;# 
   373  0214                     	;# 
   374  0215                     	;# 
   375  0215                     	;# 
   376  0216                     	;# 
   377  0217                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029C                     	;# 
   393  029D                     	;# 
   394  029E                     	;# 
   395  029F                     	;# 
   396  0311                     	;# 
   397  0311                     	;# 
   398  0312                     	;# 
   399  0313                     	;# 
   400  0314                     	;# 
   401  0315                     	;# 
   402  0315                     	;# 
   403  0316                     	;# 
   404  0318                     	;# 
   405  0318                     	;# 
   406  0319                     	;# 
   407  031A                     	;# 
   408  031C                     	;# 
   409  031C                     	;# 
   410  031D                     	;# 
   411  031E                     	;# 
   412  0394                     	;# 
   413  0395                     	;# 
   414  0396                     	;# 
   415  0415                     	;# 
   416  0416                     	;# 
   417  0417                     	;# 
   418  041C                     	;# 
   419  041D                     	;# 
   420  041E                     	;# 
   421  0791                     	;# 
   422  0792                     	;# 
   423  0793                     	;# 
   424  0794                     	;# 
   425  0795                     	;# 
   426  0798                     	;# 
   427  0799                     	;# 
   428  07A0                     	;# 
   429  07A1                     	;# 
   430  07A3                     	;# 
   431  07A4                     	;# 
   432  07A6                     	;# 
   433  07A7                     	;# 
   434  07A9                     	;# 
   435  07AA                     	;# 
   436  0FE4                     	;# 
   437  0FE5                     	;# 
   438  0FE6                     	;# 
   439  0FE7                     	;# 
   440  0FE8                     	;# 
   441  0FE9                     	;# 
   442  0FEA                     	;# 
   443  0FEB                     	;# 
   444  0FED                     	;# 
   445  0FEE                     	;# 
   446  0FEF                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  0010                     	;# 
   463  0011                     	;# 
   464  0012                     	;# 
   465  0013                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0016                     	;# 
   469  0017                     	;# 
   470  0018                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  008C                     	;# 
   478  008D                     	;# 
   479  008E                     	;# 
   480  0090                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0095                     	;# 
   485  0096                     	;# 
   486  0097                     	;# 
   487  0098                     	;# 
   488  0099                     	;# 
   489  009A                     	;# 
   490  009B                     	;# 
   491  009B                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009E                     	;# 
   495  010C                     	;# 
   496  010D                     	;# 
   497  010E                     	;# 
   498  0110                     	;# 
   499  0111                     	;# 
   500  0112                     	;# 
   501  0113                     	;# 
   502  0114                     	;# 
   503  0115                     	;# 
   504  0116                     	;# 
   505  0117                     	;# 
   506  0118                     	;# 
   507  0119                     	;# 
   508  011A                     	;# 
   509  011B                     	;# 
   510  011D                     	;# 
   511  018C                     	;# 
   512  018D                     	;# 
   513  0191                     	;# 
   514  0191                     	;# 
   515  0192                     	;# 
   516  0193                     	;# 
   517  0193                     	;# 
   518  0193                     	;# 
   519  0194                     	;# 
   520  0195                     	;# 
   521  0196                     	;# 
   522  0199                     	;# 
   523  019A                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019C                     	;# 
   529  019C                     	;# 
   530  019D                     	;# 
   531  019E                     	;# 
   532  019F                     	;# 
   533  020D                     	;# 
   534  0210                     	;# 
   535  0211                     	;# 
   536  0212                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0215                     	;# 
   540  0215                     	;# 
   541  0216                     	;# 
   542  0217                     	;# 
   543  0291                     	;# 
   544  0291                     	;# 
   545  0292                     	;# 
   546  0293                     	;# 
   547  0294                     	;# 
   548  0295                     	;# 
   549  0295                     	;# 
   550  0296                     	;# 
   551  0298                     	;# 
   552  0298                     	;# 
   553  0299                     	;# 
   554  029A                     	;# 
   555  029B                     	;# 
   556  029C                     	;# 
   557  029C                     	;# 
   558  029D                     	;# 
   559  029E                     	;# 
   560  029F                     	;# 
   561  0311                     	;# 
   562  0311                     	;# 
   563  0312                     	;# 
   564  0313                     	;# 
   565  0314                     	;# 
   566  0315                     	;# 
   567  0315                     	;# 
   568  0316                     	;# 
   569  0318                     	;# 
   570  0318                     	;# 
   571  0319                     	;# 
   572  031A                     	;# 
   573  031C                     	;# 
   574  031C                     	;# 
   575  031D                     	;# 
   576  031E                     	;# 
   577  0394                     	;# 
   578  0395                     	;# 
   579  0396                     	;# 
   580  0415                     	;# 
   581  0416                     	;# 
   582  0417                     	;# 
   583  041C                     	;# 
   584  041D                     	;# 
   585  041E                     	;# 
   586  0791                     	;# 
   587  0792                     	;# 
   588  0793                     	;# 
   589  0794                     	;# 
   590  0795                     	;# 
   591  0798                     	;# 
   592  0799                     	;# 
   593  07A0                     	;# 
   594  07A1                     	;# 
   595  07A3                     	;# 
   596  07A4                     	;# 
   597  07A6                     	;# 
   598  07A7                     	;# 
   599  07A9                     	;# 
   600  07AA                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0013                     	;# 
   631  0015                     	;# 
   632  0016                     	;# 
   633  0016                     	;# 
   634  0017                     	;# 
   635  0018                     	;# 
   636  0019                     	;# 
   637  001A                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  001E                     	;# 
   641  001F                     	;# 
   642  008C                     	;# 
   643  008D                     	;# 
   644  008E                     	;# 
   645  0090                     	;# 
   646  0091                     	;# 
   647  0092                     	;# 
   648  0093                     	;# 
   649  0095                     	;# 
   650  0096                     	;# 
   651  0097                     	;# 
   652  0098                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  0110                     	;# 
   664  0111                     	;# 
   665  0112                     	;# 
   666  0113                     	;# 
   667  0114                     	;# 
   668  0115                     	;# 
   669  0116                     	;# 
   670  0117                     	;# 
   671  0118                     	;# 
   672  0119                     	;# 
   673  011A                     	;# 
   674  011B                     	;# 
   675  011D                     	;# 
   676  018C                     	;# 
   677  018D                     	;# 
   678  0191                     	;# 
   679  0191                     	;# 
   680  0192                     	;# 
   681  0193                     	;# 
   682  0193                     	;# 
   683  0193                     	;# 
   684  0194                     	;# 
   685  0195                     	;# 
   686  0196                     	;# 
   687  0199                     	;# 
   688  019A                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019B                     	;# 
   693  019C                     	;# 
   694  019C                     	;# 
   695  019D                     	;# 
   696  019E                     	;# 
   697  019F                     	;# 
   698  020D                     	;# 
   699  0210                     	;# 
   700  0211                     	;# 
   701  0212                     	;# 
   702  0213                     	;# 
   703  0214                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0216                     	;# 
   707  0217                     	;# 
   708  0291                     	;# 
   709  0291                     	;# 
   710  0292                     	;# 
   711  0293                     	;# 
   712  0294                     	;# 
   713  0295                     	;# 
   714  0295                     	;# 
   715  0296                     	;# 
   716  0298                     	;# 
   717  0298                     	;# 
   718  0299                     	;# 
   719  029A                     	;# 
   720  029B                     	;# 
   721  029C                     	;# 
   722  029C                     	;# 
   723  029D                     	;# 
   724  029E                     	;# 
   725  029F                     	;# 
   726  0311                     	;# 
   727  0311                     	;# 
   728  0312                     	;# 
   729  0313                     	;# 
   730  0314                     	;# 
   731  0315                     	;# 
   732  0315                     	;# 
   733  0316                     	;# 
   734  0318                     	;# 
   735  0318                     	;# 
   736  0319                     	;# 
   737  031A                     	;# 
   738  031C                     	;# 
   739  031C                     	;# 
   740  031D                     	;# 
   741  031E                     	;# 
   742  0394                     	;# 
   743  0395                     	;# 
   744  0396                     	;# 
   745  0415                     	;# 
   746  0416                     	;# 
   747  0417                     	;# 
   748  041C                     	;# 
   749  041D                     	;# 
   750  041E                     	;# 
   751  0791                     	;# 
   752  0792                     	;# 
   753  0793                     	;# 
   754  0794                     	;# 
   755  0795                     	;# 
   756  0798                     	;# 
   757  0799                     	;# 
   758  07A0                     	;# 
   759  07A1                     	;# 
   760  07A3                     	;# 
   761  07A4                     	;# 
   762  07A6                     	;# 
   763  07A7                     	;# 
   764  07A9                     	;# 
   765  07AA                     	;# 
   766  0FE4                     	;# 
   767  0FE5                     	;# 
   768  0FE6                     	;# 
   769  0FE7                     	;# 
   770  0FE8                     	;# 
   771  0FE9                     	;# 
   772  0FEA                     	;# 
   773  0FEB                     	;# 
   774  0FED                     	;# 
   775  0FEE                     	;# 
   776  0FEF                     	;# 
   777  0000                     	;# 
   778  0001                     	;# 
   779  0002                     	;# 
   780  0003                     	;# 
   781  0004                     	;# 
   782  0005                     	;# 
   783  0006                     	;# 
   784  0007                     	;# 
   785  0008                     	;# 
   786  0009                     	;# 
   787  000A                     	;# 
   788  000B                     	;# 
   789  000C                     	;# 
   790  000D                     	;# 
   791  000E                     	;# 
   792  0010                     	;# 
   793  0011                     	;# 
   794  0012                     	;# 
   795  0013                     	;# 
   796  0015                     	;# 
   797  0016                     	;# 
   798  0016                     	;# 
   799  0017                     	;# 
   800  0018                     	;# 
   801  0019                     	;# 
   802  001A                     	;# 
   803  001B                     	;# 
   804  001C                     	;# 
   805  001E                     	;# 
   806  001F                     	;# 
   807  008C                     	;# 
   808  008D                     	;# 
   809  008E                     	;# 
   810  0090                     	;# 
   811  0091                     	;# 
   812  0092                     	;# 
   813  0093                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0098                     	;# 
   818  0099                     	;# 
   819  009A                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  010C                     	;# 
   826  010D                     	;# 
   827  010E                     	;# 
   828  0110                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  011A                     	;# 
   839  011B                     	;# 
   840  011D                     	;# 
   841  018C                     	;# 
   842  018D                     	;# 
   843  0191                     	;# 
   844  0191                     	;# 
   845  0192                     	;# 
   846  0193                     	;# 
   847  0193                     	;# 
   848  0193                     	;# 
   849  0194                     	;# 
   850  0195                     	;# 
   851  0196                     	;# 
   852  0199                     	;# 
   853  019A                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019C                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  020D                     	;# 
   864  0210                     	;# 
   865  0211                     	;# 
   866  0212                     	;# 
   867  0213                     	;# 
   868  0214                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0216                     	;# 
   872  0217                     	;# 
   873  0291                     	;# 
   874  0291                     	;# 
   875  0292                     	;# 
   876  0293                     	;# 
   877  0294                     	;# 
   878  0295                     	;# 
   879  0295                     	;# 
   880  0296                     	;# 
   881  0298                     	;# 
   882  0298                     	;# 
   883  0299                     	;# 
   884  029A                     	;# 
   885  029B                     	;# 
   886  029C                     	;# 
   887  029C                     	;# 
   888  029D                     	;# 
   889  029E                     	;# 
   890  029F                     	;# 
   891  0311                     	;# 
   892  0311                     	;# 
   893  0312                     	;# 
   894  0313                     	;# 
   895  0314                     	;# 
   896  0315                     	;# 
   897  0315                     	;# 
   898  0316                     	;# 
   899  0318                     	;# 
   900  0318                     	;# 
   901  0319                     	;# 
   902  031A                     	;# 
   903  031C                     	;# 
   904  031C                     	;# 
   905  031D                     	;# 
   906  031E                     	;# 
   907  0394                     	;# 
   908  0395                     	;# 
   909  0396                     	;# 
   910  0415                     	;# 
   911  0416                     	;# 
   912  0417                     	;# 
   913  041C                     	;# 
   914  041D                     	;# 
   915  041E                     	;# 
   916  0791                     	;# 
   917  0792                     	;# 
   918  0793                     	;# 
   919  0794                     	;# 
   920  0795                     	;# 
   921  0798                     	;# 
   922  0799                     	;# 
   923  07A0                     	;# 
   924  07A1                     	;# 
   925  07A3                     	;# 
   926  07A4                     	;# 
   927  07A6                     	;# 
   928  07A7                     	;# 
   929  07A9                     	;# 
   930  07AA                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0010                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0013                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  001E                     	;# 
   971  001F                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0093                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0098                     	;# 
   983  0099                     	;# 
   984  009A                     	;# 
   985  009B                     	;# 
   986  009B                     	;# 
   987  009C                     	;# 
   988  009D                     	;# 
   989  009E                     	;# 
   990  010C                     	;# 
   991  010D                     	;# 
   992  010E                     	;# 
   993  0110                     	;# 
   994  0111                     	;# 
   995  0112                     	;# 
   996  0113                     	;# 
   997  0114                     	;# 
   998  0115                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  0118                     	;# 
  1002  0119                     	;# 
  1003  011A                     	;# 
  1004  011B                     	;# 
  1005  011D                     	;# 
  1006  018C                     	;# 
  1007  018D                     	;# 
  1008  0191                     	;# 
  1009  0191                     	;# 
  1010  0192                     	;# 
  1011  0193                     	;# 
  1012  0193                     	;# 
  1013  0193                     	;# 
  1014  0194                     	;# 
  1015  0195                     	;# 
  1016  0196                     	;# 
  1017  0199                     	;# 
  1018  019A                     	;# 
  1019  019B                     	;# 
  1020  019B                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019C                     	;# 
  1025  019D                     	;# 
  1026  019E                     	;# 
  1027  019F                     	;# 
  1028  020D                     	;# 
  1029  0210                     	;# 
  1030  0211                     	;# 
  1031  0212                     	;# 
  1032  0213                     	;# 
  1033  0214                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0291                     	;# 
  1039  0291                     	;# 
  1040  0292                     	;# 
  1041  0293                     	;# 
  1042  0294                     	;# 
  1043  0295                     	;# 
  1044  0295                     	;# 
  1045  0296                     	;# 
  1046  0298                     	;# 
  1047  0298                     	;# 
  1048  0299                     	;# 
  1049  029A                     	;# 
  1050  029B                     	;# 
  1051  029C                     	;# 
  1052  029C                     	;# 
  1053  029D                     	;# 
  1054  029E                     	;# 
  1055  029F                     	;# 
  1056  0311                     	;# 
  1057  0311                     	;# 
  1058  0312                     	;# 
  1059  0313                     	;# 
  1060  0314                     	;# 
  1061  0315                     	;# 
  1062  0315                     	;# 
  1063  0316                     	;# 
  1064  0318                     	;# 
  1065  0318                     	;# 
  1066  0319                     	;# 
  1067  031A                     	;# 
  1068  031C                     	;# 
  1069  031C                     	;# 
  1070  031D                     	;# 
  1071  031E                     	;# 
  1072  0394                     	;# 
  1073  0395                     	;# 
  1074  0396                     	;# 
  1075  0415                     	;# 
  1076  0416                     	;# 
  1077  0417                     	;# 
  1078  041C                     	;# 
  1079  041D                     	;# 
  1080  041E                     	;# 
  1081  0791                     	;# 
  1082  0792                     	;# 
  1083  0793                     	;# 
  1084  0794                     	;# 
  1085  0795                     	;# 
  1086  0798                     	;# 
  1087  0799                     	;# 
  1088  07A0                     	;# 
  1089  07A1                     	;# 
  1090  07A3                     	;# 
  1091  07A4                     	;# 
  1092  07A6                     	;# 
  1093  07A7                     	;# 
  1094  07A9                     	;# 
  1095  07AA                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000D                     	;# 
  1121  000E                     	;# 
  1122  0010                     	;# 
  1123  0011                     	;# 
  1124  0012                     	;# 
  1125  0013                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  001E                     	;# 
  1136  001F                     	;# 
  1137  008C                     	;# 
  1138  008D                     	;# 
  1139  008E                     	;# 
  1140  0090                     	;# 
  1141  0091                     	;# 
  1142  0092                     	;# 
  1143  0093                     	;# 
  1144  0095                     	;# 
  1145  0096                     	;# 
  1146  0097                     	;# 
  1147  0098                     	;# 
  1148  0099                     	;# 
  1149  009A                     	;# 
  1150  009B                     	;# 
  1151  009B                     	;# 
  1152  009C                     	;# 
  1153  009D                     	;# 
  1154  009E                     	;# 
  1155  010C                     	;# 
  1156  010D                     	;# 
  1157  010E                     	;# 
  1158  0110                     	;# 
  1159  0111                     	;# 
  1160  0112                     	;# 
  1161  0113                     	;# 
  1162  0114                     	;# 
  1163  0115                     	;# 
  1164  0116                     	;# 
  1165  0117                     	;# 
  1166  0118                     	;# 
  1167  0119                     	;# 
  1168  011A                     	;# 
  1169  011B                     	;# 
  1170  011D                     	;# 
  1171  018C                     	;# 
  1172  018D                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0193                     	;# 
  1179  0194                     	;# 
  1180  0195                     	;# 
  1181  0196                     	;# 
  1182  0199                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020D                     	;# 
  1194  0210                     	;# 
  1195  0211                     	;# 
  1196  0212                     	;# 
  1197  0213                     	;# 
  1198  0214                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0216                     	;# 
  1202  0217                     	;# 
  1203  0291                     	;# 
  1204  0291                     	;# 
  1205  0292                     	;# 
  1206  0293                     	;# 
  1207  0294                     	;# 
  1208  0295                     	;# 
  1209  0295                     	;# 
  1210  0296                     	;# 
  1211  0298                     	;# 
  1212  0298                     	;# 
  1213  0299                     	;# 
  1214  029A                     	;# 
  1215  029B                     	;# 
  1216  029C                     	;# 
  1217  029C                     	;# 
  1218  029D                     	;# 
  1219  029E                     	;# 
  1220  029F                     	;# 
  1221  0311                     	;# 
  1222  0311                     	;# 
  1223  0312                     	;# 
  1224  0313                     	;# 
  1225  0314                     	;# 
  1226  0315                     	;# 
  1227  0315                     	;# 
  1228  0316                     	;# 
  1229  0318                     	;# 
  1230  0318                     	;# 
  1231  0319                     	;# 
  1232  031A                     	;# 
  1233  031C                     	;# 
  1234  031C                     	;# 
  1235  031D                     	;# 
  1236  031E                     	;# 
  1237  0394                     	;# 
  1238  0395                     	;# 
  1239  0396                     	;# 
  1240  0415                     	;# 
  1241  0416                     	;# 
  1242  0417                     	;# 
  1243  041C                     	;# 
  1244  041D                     	;# 
  1245  041E                     	;# 
  1246  0791                     	;# 
  1247  0792                     	;# 
  1248  0793                     	;# 
  1249  0794                     	;# 
  1250  0795                     	;# 
  1251  0798                     	;# 
  1252  0799                     	;# 
  1253  07A0                     	;# 
  1254  07A1                     	;# 
  1255  07A3                     	;# 
  1256  07A4                     	;# 
  1257  07A6                     	;# 
  1258  07A7                     	;# 
  1259  07A9                     	;# 
  1260  07AA                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  0010                     	;# 
  1288  0011                     	;# 
  1289  0012                     	;# 
  1290  0013                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  001E                     	;# 
  1301  001F                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0090                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0093                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0098                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0110                     	;# 
  1324  0111                     	;# 
  1325  0112                     	;# 
  1326  0113                     	;# 
  1327  0114                     	;# 
  1328  0115                     	;# 
  1329  0116                     	;# 
  1330  0117                     	;# 
  1331  0118                     	;# 
  1332  0119                     	;# 
  1333  011A                     	;# 
  1334  011B                     	;# 
  1335  011D                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  0191                     	;# 
  1339  0191                     	;# 
  1340  0192                     	;# 
  1341  0193                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0199                     	;# 
  1348  019A                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019B                     	;# 
  1353  019C                     	;# 
  1354  019C                     	;# 
  1355  019D                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  020D                     	;# 
  1359  0210                     	;# 
  1360  0211                     	;# 
  1361  0212                     	;# 
  1362  0213                     	;# 
  1363  0214                     	;# 
  1364  0215                     	;# 
  1365  0215                     	;# 
  1366  0216                     	;# 
  1367  0217                     	;# 
  1368  0291                     	;# 
  1369  0291                     	;# 
  1370  0292                     	;# 
  1371  0293                     	;# 
  1372  0294                     	;# 
  1373  0295                     	;# 
  1374  0295                     	;# 
  1375  0296                     	;# 
  1376  0298                     	;# 
  1377  0298                     	;# 
  1378  0299                     	;# 
  1379  029A                     	;# 
  1380  029B                     	;# 
  1381  029C                     	;# 
  1382  029C                     	;# 
  1383  029D                     	;# 
  1384  029E                     	;# 
  1385  029F                     	;# 
  1386  0311                     	;# 
  1387  0311                     	;# 
  1388  0312                     	;# 
  1389  0313                     	;# 
  1390  0314                     	;# 
  1391  0315                     	;# 
  1392  0315                     	;# 
  1393  0316                     	;# 
  1394  0318                     	;# 
  1395  0318                     	;# 
  1396  0319                     	;# 
  1397  031A                     	;# 
  1398  031C                     	;# 
  1399  031C                     	;# 
  1400  031D                     	;# 
  1401  031E                     	;# 
  1402  0394                     	;# 
  1403  0395                     	;# 
  1404  0396                     	;# 
  1405  0415                     	;# 
  1406  0416                     	;# 
  1407  0417                     	;# 
  1408  041C                     	;# 
  1409  041D                     	;# 
  1410  041E                     	;# 
  1411  0791                     	;# 
  1412  0792                     	;# 
  1413  0793                     	;# 
  1414  0794                     	;# 
  1415  0795                     	;# 
  1416  0798                     	;# 
  1417  0799                     	;# 
  1418  07A0                     	;# 
  1419  07A1                     	;# 
  1420  07A3                     	;# 
  1421  07A4                     	;# 
  1422  07A6                     	;# 
  1423  07A7                     	;# 
  1424  07A9                     	;# 
  1425  07AA                     	;# 
  1426  0FE4                     	;# 
  1427  0FE5                     	;# 
  1428  0FE6                     	;# 
  1429  0FE7                     	;# 
  1430  0FE8                     	;# 
  1431  0FE9                     	;# 
  1432  0FEA                     	;# 
  1433  0FEB                     	;# 
  1434  0FED                     	;# 
  1435  0FEE                     	;# 
  1436  0FEF                     	;# 
  1437  0000                     	;# 
  1438  0001                     	;# 
  1439  0002                     	;# 
  1440  0003                     	;# 
  1441  0004                     	;# 
  1442  0005                     	;# 
  1443  0006                     	;# 
  1444  0007                     	;# 
  1445  0008                     	;# 
  1446  0009                     	;# 
  1447  000A                     	;# 
  1448  000B                     	;# 
  1449  000C                     	;# 
  1450  000D                     	;# 
  1451  000E                     	;# 
  1452  0010                     	;# 
  1453  0011                     	;# 
  1454  0012                     	;# 
  1455  0013                     	;# 
  1456  0015                     	;# 
  1457  0016                     	;# 
  1458  0016                     	;# 
  1459  0017                     	;# 
  1460  0018                     	;# 
  1461  0019                     	;# 
  1462  001A                     	;# 
  1463  001B                     	;# 
  1464  001C                     	;# 
  1465  001E                     	;# 
  1466  001F                     	;# 
  1467  008C                     	;# 
  1468  008D                     	;# 
  1469  008E                     	;# 
  1470  0090                     	;# 
  1471  0091                     	;# 
  1472  0092                     	;# 
  1473  0093                     	;# 
  1474  0095                     	;# 
  1475  0096                     	;# 
  1476  0097                     	;# 
  1477  0098                     	;# 
  1478  0099                     	;# 
  1479  009A                     	;# 
  1480  009B                     	;# 
  1481  009B                     	;# 
  1482  009C                     	;# 
  1483  009D                     	;# 
  1484  009E                     	;# 
  1485  010C                     	;# 
  1486  010D                     	;# 
  1487  010E                     	;# 
  1488  0110                     	;# 
  1489  0111                     	;# 
  1490  0112                     	;# 
  1491  0113                     	;# 
  1492  0114                     	;# 
  1493  0115                     	;# 
  1494  0116                     	;# 
  1495  0117                     	;# 
  1496  0118                     	;# 
  1497  0119                     	;# 
  1498  011A                     	;# 
  1499  011B                     	;# 
  1500  011D                     	;# 
  1501  018C                     	;# 
  1502  018D                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019C                     	;# 
  1519  019C                     	;# 
  1520  019D                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  020D                     	;# 
  1524  0210                     	;# 
  1525  0211                     	;# 
  1526  0212                     	;# 
  1527  0213                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0216                     	;# 
  1532  0217                     	;# 
  1533  0291                     	;# 
  1534  0291                     	;# 
  1535  0292                     	;# 
  1536  0293                     	;# 
  1537  0294                     	;# 
  1538  0295                     	;# 
  1539  0295                     	;# 
  1540  0296                     	;# 
  1541  0298                     	;# 
  1542  0298                     	;# 
  1543  0299                     	;# 
  1544  029A                     	;# 
  1545  029B                     	;# 
  1546  029C                     	;# 
  1547  029C                     	;# 
  1548  029D                     	;# 
  1549  029E                     	;# 
  1550  029F                     	;# 
  1551  0311                     	;# 
  1552  0311                     	;# 
  1553  0312                     	;# 
  1554  0313                     	;# 
  1555  0314                     	;# 
  1556  0315                     	;# 
  1557  0315                     	;# 
  1558  0316                     	;# 
  1559  0318                     	;# 
  1560  0318                     	;# 
  1561  0319                     	;# 
  1562  031A                     	;# 
  1563  031C                     	;# 
  1564  031C                     	;# 
  1565  031D                     	;# 
  1566  031E                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0415                     	;# 
  1571  0416                     	;# 
  1572  0417                     	;# 
  1573  041C                     	;# 
  1574  041D                     	;# 
  1575  041E                     	;# 
  1576  0791                     	;# 
  1577  0792                     	;# 
  1578  0793                     	;# 
  1579  0794                     	;# 
  1580  0795                     	;# 
  1581  0798                     	;# 
  1582  0799                     	;# 
  1583  07A0                     	;# 
  1584  07A1                     	;# 
  1585  07A3                     	;# 
  1586  07A4                     	;# 
  1587  07A6                     	;# 
  1588  07A7                     	;# 
  1589  07A9                     	;# 
  1590  07AA                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0013                     	;# 
  1621  0015                     	;# 
  1622  0016                     	;# 
  1623  0016                     	;# 
  1624  0017                     	;# 
  1625  0018                     	;# 
  1626  0019                     	;# 
  1627  001A                     	;# 
  1628  001B                     	;# 
  1629  001C                     	;# 
  1630  001E                     	;# 
  1631  001F                     	;# 
  1632  008C                     	;# 
  1633  008D                     	;# 
  1634  008E                     	;# 
  1635  0090                     	;# 
  1636  0091                     	;# 
  1637  0092                     	;# 
  1638  0093                     	;# 
  1639  0095                     	;# 
  1640  0096                     	;# 
  1641  0097                     	;# 
  1642  0098                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0110                     	;# 
  1654  0111                     	;# 
  1655  0112                     	;# 
  1656  0113                     	;# 
  1657  0114                     	;# 
  1658  0115                     	;# 
  1659  0116                     	;# 
  1660  0117                     	;# 
  1661  0118                     	;# 
  1662  0119                     	;# 
  1663  011A                     	;# 
  1664  011B                     	;# 
  1665  011D                     	;# 
  1666  018C                     	;# 
  1667  018D                     	;# 
  1668  0191                     	;# 
  1669  0191                     	;# 
  1670  0192                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0193                     	;# 
  1674  0194                     	;# 
  1675  0195                     	;# 
  1676  0196                     	;# 
  1677  0199                     	;# 
  1678  019A                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019C                     	;# 
  1685  019D                     	;# 
  1686  019E                     	;# 
  1687  019F                     	;# 
  1688  020D                     	;# 
  1689  0210                     	;# 
  1690  0211                     	;# 
  1691  0212                     	;# 
  1692  0213                     	;# 
  1693  0214                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0294                     	;# 
  1703  0295                     	;# 
  1704  0295                     	;# 
  1705  0296                     	;# 
  1706  0298                     	;# 
  1707  0298                     	;# 
  1708  0299                     	;# 
  1709  029A                     	;# 
  1710  029B                     	;# 
  1711  029C                     	;# 
  1712  029C                     	;# 
  1713  029D                     	;# 
  1714  029E                     	;# 
  1715  029F                     	;# 
  1716  0311                     	;# 
  1717  0311                     	;# 
  1718  0312                     	;# 
  1719  0313                     	;# 
  1720  0314                     	;# 
  1721  0315                     	;# 
  1722  0315                     	;# 
  1723  0316                     	;# 
  1724  0318                     	;# 
  1725  0318                     	;# 
  1726  0319                     	;# 
  1727  031A                     	;# 
  1728  031C                     	;# 
  1729  031C                     	;# 
  1730  031D                     	;# 
  1731  031E                     	;# 
  1732  0394                     	;# 
  1733  0395                     	;# 
  1734  0396                     	;# 
  1735  0415                     	;# 
  1736  0416                     	;# 
  1737  0417                     	;# 
  1738  041C                     	;# 
  1739  041D                     	;# 
  1740  041E                     	;# 
  1741  0791                     	;# 
  1742  0792                     	;# 
  1743  0793                     	;# 
  1744  0794                     	;# 
  1745  0795                     	;# 
  1746  0798                     	;# 
  1747  0799                     	;# 
  1748  07A0                     	;# 
  1749  07A1                     	;# 
  1750  07A3                     	;# 
  1751  07A4                     	;# 
  1752  07A6                     	;# 
  1753  07A7                     	;# 
  1754  07A9                     	;# 
  1755  07AA                     	;# 
  1756  0FE4                     	;# 
  1757  0FE5                     	;# 
  1758  0FE6                     	;# 
  1759  0FE7                     	;# 
  1760  0FE8                     	;# 
  1761  0FE9                     	;# 
  1762  0FEA                     	;# 
  1763  0FEB                     	;# 
  1764  0FED                     	;# 
  1765  0FEE                     	;# 
  1766  0FEF                     	;# 
  1767  0000                     	;# 
  1768  0001                     	;# 
  1769  0002                     	;# 
  1770  0003                     	;# 
  1771  0004                     	;# 
  1772  0005                     	;# 
  1773  0006                     	;# 
  1774  0007                     	;# 
  1775  0008                     	;# 
  1776  0009                     	;# 
  1777  000A                     	;# 
  1778  000B                     	;# 
  1779  000C                     	;# 
  1780  000D                     	;# 
  1781  000E                     	;# 
  1782  0010                     	;# 
  1783  0011                     	;# 
  1784  0012                     	;# 
  1785  0013                     	;# 
  1786  0015                     	;# 
  1787  0016                     	;# 
  1788  0016                     	;# 
  1789  0017                     	;# 
  1790  0018                     	;# 
  1791  0019                     	;# 
  1792  001A                     	;# 
  1793  001B                     	;# 
  1794  001C                     	;# 
  1795  001E                     	;# 
  1796  001F                     	;# 
  1797  008C                     	;# 
  1798  008D                     	;# 
  1799  008E                     	;# 
  1800  0090                     	;# 
  1801  0091                     	;# 
  1802  0092                     	;# 
  1803  0093                     	;# 
  1804  0095                     	;# 
  1805  0096                     	;# 
  1806  0097                     	;# 
  1807  0098                     	;# 
  1808  0099                     	;# 
  1809  009A                     	;# 
  1810  009B                     	;# 
  1811  009B                     	;# 
  1812  009C                     	;# 
  1813  009D                     	;# 
  1814  009E                     	;# 
  1815  010C                     	;# 
  1816  010D                     	;# 
  1817  010E                     	;# 
  1818  0110                     	;# 
  1819  0111                     	;# 
  1820  0112                     	;# 
  1821  0113                     	;# 
  1822  0114                     	;# 
  1823  0115                     	;# 
  1824  0116                     	;# 
  1825  0117                     	;# 
  1826  0118                     	;# 
  1827  0119                     	;# 
  1828  011A                     	;# 
  1829  011B                     	;# 
  1830  011D                     	;# 
  1831  018C                     	;# 
  1832  018D                     	;# 
  1833  0191                     	;# 
  1834  0191                     	;# 
  1835  0192                     	;# 
  1836  0193                     	;# 
  1837  0193                     	;# 
  1838  0193                     	;# 
  1839  0194                     	;# 
  1840  0195                     	;# 
  1841  0196                     	;# 
  1842  0199                     	;# 
  1843  019A                     	;# 
  1844  019B                     	;# 
  1845  019B                     	;# 
  1846  019B                     	;# 
  1847  019B                     	;# 
  1848  019C                     	;# 
  1849  019C                     	;# 
  1850  019D                     	;# 
  1851  019E                     	;# 
  1852  019F                     	;# 
  1853  020D                     	;# 
  1854  0210                     	;# 
  1855  0211                     	;# 
  1856  0212                     	;# 
  1857  0213                     	;# 
  1858  0214                     	;# 
  1859  0215                     	;# 
  1860  0215                     	;# 
  1861  0216                     	;# 
  1862  0217                     	;# 
  1863  0291                     	;# 
  1864  0291                     	;# 
  1865  0292                     	;# 
  1866  0293                     	;# 
  1867  0294                     	;# 
  1868  0295                     	;# 
  1869  0295                     	;# 
  1870  0296                     	;# 
  1871  0298                     	;# 
  1872  0298                     	;# 
  1873  0299                     	;# 
  1874  029A                     	;# 
  1875  029B                     	;# 
  1876  029C                     	;# 
  1877  029C                     	;# 
  1878  029D                     	;# 
  1879  029E                     	;# 
  1880  029F                     	;# 
  1881  0311                     	;# 
  1882  0311                     	;# 
  1883  0312                     	;# 
  1884  0313                     	;# 
  1885  0314                     	;# 
  1886  0315                     	;# 
  1887  0315                     	;# 
  1888  0316                     	;# 
  1889  0318                     	;# 
  1890  0318                     	;# 
  1891  0319                     	;# 
  1892  031A                     	;# 
  1893  031C                     	;# 
  1894  031C                     	;# 
  1895  031D                     	;# 
  1896  031E                     	;# 
  1897  0394                     	;# 
  1898  0395                     	;# 
  1899  0396                     	;# 
  1900  0415                     	;# 
  1901  0416                     	;# 
  1902  0417                     	;# 
  1903  041C                     	;# 
  1904  041D                     	;# 
  1905  041E                     	;# 
  1906  0791                     	;# 
  1907  0792                     	;# 
  1908  0793                     	;# 
  1909  0794                     	;# 
  1910  0795                     	;# 
  1911  0798                     	;# 
  1912  0799                     	;# 
  1913  07A0                     	;# 
  1914  07A1                     	;# 
  1915  07A3                     	;# 
  1916  07A4                     	;# 
  1917  07A6                     	;# 
  1918  07A7                     	;# 
  1919  07A9                     	;# 
  1920  07AA                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932                           
  1933                           	psect	idataBANK0
  1934  0003                     __pidataBANK0:	
  1935                           
  1936                           ;initializer for _ui8_selected_lid
  1937  0003  3480               	retlw	128
  1938                           
  1939                           	psect	idataBANK1
  1940  1D5B                     __pidataBANK1:	
  1941                           
  1942                           ;initializer for _ui16_I_cal_Ph3
  1943  1D5B  3401               	retlw	1
  1944  1D5C  3400               	retlw	0
  1945                           
  1946                           ;initializer for _ui16_I_cal_Ph2
  1947  1D5D  3401               	retlw	1
  1948  1D5E  3400               	retlw	0
  1949                           
  1950                           ;initializer for _ui16_I_cal_Ph1
  1951  1D5F  3401               	retlw	1
  1952  1D60  3400               	retlw	0
  1953                           
  1954                           ;initializer for _wkpoint
  1955  1D61  3401               	retlw	1
  1956                           
  1957                           	psect	idataBANK2
  1958  1D6A                     __pidataBANK2:	
  1959                           
  1960                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  1961  1D6A  3480               	retlw	128
  1962  1D6B  3438               	retlw	56
  1963  1D6C  3401               	retlw	1
  1964  1D6D  3400               	retlw	0
  1965                           
  1966                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  1967  1D6E  3401               	retlw	1
  1968                           
  1969                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  1970  1D6F  3401               	retlw	1
  1971                           
  1972                           ;initializer for _ui8_failure
  1973  1D70  3407               	retlw	7
  1974                           
  1975                           ;initializer for _ict_stamp
  1976  1D71  3401               	retlw	1
  1977                           
  1978                           	psect	stringtext1
  1979  1000                     __pstringtext1:	
  1980  1000                     _PWM_trans_table:	
  1981  1000  3400               	retlw	0
  1982  1001  3400               	retlw	0
  1983  1002  3400               	retlw	0
  1984  1003  3400               	retlw	0
  1985  1004  3400               	retlw	0
  1986  1005  3400               	retlw	0
  1987  1006  3400               	retlw	0
  1988  1007  3400               	retlw	0
  1989  1008  3400               	retlw	0
  1990  1009  3400               	retlw	0
  1991  100A  3400               	retlw	0
  1992  100B  3400               	retlw	0
  1993  100C  3400               	retlw	0
  1994  100D  3400               	retlw	0
  1995  100E  3400               	retlw	0
  1996  100F  3400               	retlw	0
  1997  1010  3400               	retlw	0
  1998  1011  3400               	retlw	0
  1999  1012  3400               	retlw	0
  2000  1013  3400               	retlw	0
  2001  1014  34B5               	retlw	181
  2002  1015  3400               	retlw	0
  2003  1016  34B5               	retlw	181
  2004  1017  3400               	retlw	0
  2005  1018  34B5               	retlw	181
  2006  1019  3400               	retlw	0
  2007  101A  34B5               	retlw	181
  2008  101B  3400               	retlw	0
  2009  101C  34B5               	retlw	181
  2010  101D  3400               	retlw	0
  2011  101E  34B5               	retlw	181
  2012  101F  3400               	retlw	0
  2013  1020  34B5               	retlw	181
  2014  1021  3400               	retlw	0
  2015  1022  34B5               	retlw	181
  2016  1023  3400               	retlw	0
  2017  1024  34B5               	retlw	181
  2018  1025  3400               	retlw	0
  2019  1026  34B5               	retlw	181
  2020  1027  3400               	retlw	0
  2021  1028  34B5               	retlw	181
  2022  1029  3400               	retlw	0
  2023  102A  34B6               	retlw	182
  2024  102B  3400               	retlw	0
  2025  102C  34B8               	retlw	184
  2026  102D  3400               	retlw	0
  2027  102E  34B9               	retlw	185
  2028  102F  3400               	retlw	0
  2029  1030  34BA               	retlw	186
  2030  1031  3400               	retlw	0
  2031  1032  34BB               	retlw	187
  2032  1033  3400               	retlw	0
  2033  1034  34BD               	retlw	189
  2034  1035  3400               	retlw	0
  2035  1036  34BE               	retlw	190
  2036  1037  3400               	retlw	0
  2037  1038  34BF               	retlw	191
  2038  1039  3400               	retlw	0
  2039  103A  34C1               	retlw	193
  2040  103B  3400               	retlw	0
  2041  103C  34C2               	retlw	194
  2042  103D  3400               	retlw	0
  2043  103E  34C3               	retlw	195
  2044  103F  3400               	retlw	0
  2045  1040  34C4               	retlw	196
  2046  1041  3400               	retlw	0
  2047  1042  34C6               	retlw	198
  2048  1043  3400               	retlw	0
  2049  1044  34C7               	retlw	199
  2050  1045  3400               	retlw	0
  2051  1046  34C8               	retlw	200
  2052  1047  3400               	retlw	0
  2053  1048  34CA               	retlw	202
  2054  1049  3400               	retlw	0
  2055  104A  34CB               	retlw	203
  2056  104B  3400               	retlw	0
  2057  104C  34CC               	retlw	204
  2058  104D  3400               	retlw	0
  2059  104E  34CD               	retlw	205
  2060  104F  3400               	retlw	0
  2061  1050  34CF               	retlw	207
  2062  1051  3400               	retlw	0
  2063  1052  34D0               	retlw	208
  2064  1053  3400               	retlw	0
  2065  1054  34D1               	retlw	209
  2066  1055  3400               	retlw	0
  2067  1056  34D3               	retlw	211
  2068  1057  3400               	retlw	0
  2069  1058  34D4               	retlw	212
  2070  1059  3400               	retlw	0
  2071  105A  34D5               	retlw	213
  2072  105B  3400               	retlw	0
  2073  105C  34D6               	retlw	214
  2074  105D  3400               	retlw	0
  2075  105E  34D8               	retlw	216
  2076  105F  3400               	retlw	0
  2077  1060  34D9               	retlw	217
  2078  1061  3400               	retlw	0
  2079  1062  34DA               	retlw	218
  2080  1063  3400               	retlw	0
  2081  1064  34DC               	retlw	220
  2082  1065  3400               	retlw	0
  2083  1066  34DD               	retlw	221
  2084  1067  3400               	retlw	0
  2085  1068  34DE               	retlw	222
  2086  1069  3400               	retlw	0
  2087  106A  34E0               	retlw	224
  2088  106B  3400               	retlw	0
  2089  106C  34E1               	retlw	225
  2090  106D  3400               	retlw	0
  2091  106E  34E2               	retlw	226
  2092  106F  3400               	retlw	0
  2093  1070  34E3               	retlw	227
  2094  1071  3400               	retlw	0
  2095  1072  34E5               	retlw	229
  2096  1073  3400               	retlw	0
  2097  1074  34E6               	retlw	230
  2098  1075  3400               	retlw	0
  2099  1076  34E7               	retlw	231
  2100  1077  3400               	retlw	0
  2101  1078  34E9               	retlw	233
  2102  1079  3400               	retlw	0
  2103  107A  34EA               	retlw	234
  2104  107B  3400               	retlw	0
  2105  107C  34EB               	retlw	235
  2106  107D  3400               	retlw	0
  2107  107E  34EC               	retlw	236
  2108  107F  3400               	retlw	0
  2109  1080  34EE               	retlw	238
  2110  1081  3400               	retlw	0
  2111  1082  34EF               	retlw	239
  2112  1083  3400               	retlw	0
  2113  1084  34F0               	retlw	240
  2114  1085  3400               	retlw	0
  2115  1086  34F2               	retlw	242
  2116  1087  3400               	retlw	0
  2117  1088  34F3               	retlw	243
  2118  1089  3400               	retlw	0
  2119  108A  34F4               	retlw	244
  2120  108B  3400               	retlw	0
  2121  108C  34F5               	retlw	245
  2122  108D  3400               	retlw	0
  2123  108E  34F7               	retlw	247
  2124  108F  3400               	retlw	0
  2125  1090  34F8               	retlw	248
  2126  1091  3400               	retlw	0
  2127  1092  34F9               	retlw	249
  2128  1093  3400               	retlw	0
  2129  1094  34FB               	retlw	251
  2130  1095  3400               	retlw	0
  2131  1096  34FC               	retlw	252
  2132  1097  3400               	retlw	0
  2133  1098  34FD               	retlw	253
  2134  1099  3400               	retlw	0
  2135  109A  34FE               	retlw	254
  2136  109B  3400               	retlw	0
  2137  109C  3400               	retlw	0
  2138  109D  3401               	retlw	1
  2139  109E  3401               	retlw	1
  2140  109F  3401               	retlw	1
  2141  10A0  3402               	retlw	2
  2142  10A1  3401               	retlw	1
  2143  10A2  3404               	retlw	4
  2144  10A3  3401               	retlw	1
  2145  10A4  3405               	retlw	5
  2146  10A5  3401               	retlw	1
  2147  10A6  3406               	retlw	6
  2148  10A7  3401               	retlw	1
  2149  10A8  3407               	retlw	7
  2150  10A9  3401               	retlw	1
  2151  10AA  3409               	retlw	9
  2152  10AB  3401               	retlw	1
  2153  10AC  340A               	retlw	10
  2154  10AD  3401               	retlw	1
  2155  10AE  340B               	retlw	11
  2156  10AF  3401               	retlw	1
  2157  10B0  340D               	retlw	13
  2158  10B1  3401               	retlw	1
  2159  10B2  340E               	retlw	14
  2160  10B3  3401               	retlw	1
  2161  10B4  340F               	retlw	15
  2162  10B5  3401               	retlw	1
  2163  10B6  3410               	retlw	16
  2164  10B7  3401               	retlw	1
  2165  10B8  3412               	retlw	18
  2166  10B9  3401               	retlw	1
  2167  10BA  3413               	retlw	19
  2168  10BB  3401               	retlw	1
  2169  10BC  3414               	retlw	20
  2170  10BD  3401               	retlw	1
  2171  10BE  3416               	retlw	22
  2172  10BF  3401               	retlw	1
  2173  10C0  3417               	retlw	23
  2174  10C1  3401               	retlw	1
  2175  10C2  3418               	retlw	24
  2176  10C3  3401               	retlw	1
  2177  10C4  3419               	retlw	25
  2178  10C5  3401               	retlw	1
  2179  10C6  341B               	retlw	27
  2180  10C7  3401               	retlw	1
  2181  10C8  341C               	retlw	28
  2182  10C9  3401               	retlw	1
  2183  10CA  341D               	retlw	29
  2184  10CB  3401               	retlw	1
  2185  10CC  341F               	retlw	31
  2186  10CD  3401               	retlw	1
  2187  10CE  3420               	retlw	32
  2188  10CF  3401               	retlw	1
  2189  10D0  3421               	retlw	33
  2190  10D1  3401               	retlw	1
  2191  10D2  3422               	retlw	34
  2192  10D3  3401               	retlw	1
  2193  10D4  3424               	retlw	36
  2194  10D5  3401               	retlw	1
  2195  10D6  3425               	retlw	37
  2196  10D7  3401               	retlw	1
  2197  10D8  3426               	retlw	38
  2198  10D9  3401               	retlw	1
  2199  10DA  3428               	retlw	40
  2200  10DB  3401               	retlw	1
  2201  10DC  3429               	retlw	41
  2202  10DD  3401               	retlw	1
  2203  10DE  342A               	retlw	42
  2204  10DF  3401               	retlw	1
  2205  10E0  342C               	retlw	44
  2206  10E1  3401               	retlw	1
  2207  10E2  342D               	retlw	45
  2208  10E3  3401               	retlw	1
  2209  10E4  342E               	retlw	46
  2210  10E5  3401               	retlw	1
  2211  10E6  342F               	retlw	47
  2212  10E7  3401               	retlw	1
  2213  10E8  3431               	retlw	49
  2214  10E9  3401               	retlw	1
  2215  10EA  3432               	retlw	50
  2216  10EB  3401               	retlw	1
  2217  10EC  3433               	retlw	51
  2218  10ED  3401               	retlw	1
  2219  10EE  3435               	retlw	53
  2220  10EF  3401               	retlw	1
  2221  10F0  3436               	retlw	54
  2222  10F1  3401               	retlw	1
  2223  10F2  3437               	retlw	55
  2224  10F3  3401               	retlw	1
  2225  10F4  3438               	retlw	56
  2226  10F5  3401               	retlw	1
  2227  10F6  343A               	retlw	58
  2228  10F7  3401               	retlw	1
  2229  10F8  343B               	retlw	59
  2230  10F9  3401               	retlw	1
  2231  10FA  343C               	retlw	60
  2232  10FB  3401               	retlw	1
  2233  10FC  343E               	retlw	62
  2234  10FD  3401               	retlw	1
  2235  10FE  343F               	retlw	63
  2236  10FF  3401               	retlw	1
  2237  1100  3440               	retlw	64
  2238  1101  3401               	retlw	1
  2239  1102  3441               	retlw	65
  2240  1103  3401               	retlw	1
  2241  1104  3443               	retlw	67
  2242  1105  3401               	retlw	1
  2243  1106  3444               	retlw	68
  2244  1107  3401               	retlw	1
  2245  1108  3445               	retlw	69
  2246  1109  3401               	retlw	1
  2247  110A  3447               	retlw	71
  2248  110B  3401               	retlw	1
  2249  110C  3448               	retlw	72
  2250  110D  3401               	retlw	1
  2251  110E  3449               	retlw	73
  2252  110F  3401               	retlw	1
  2253  1110  344A               	retlw	74
  2254  1111  3401               	retlw	1
  2255  1112  344C               	retlw	76
  2256  1113  3401               	retlw	1
  2257  1114  344D               	retlw	77
  2258  1115  3401               	retlw	1
  2259  1116  344E               	retlw	78
  2260  1117  3401               	retlw	1
  2261  1118  3450               	retlw	80
  2262  1119  3401               	retlw	1
  2263  111A  3451               	retlw	81
  2264  111B  3401               	retlw	1
  2265  111C  3452               	retlw	82
  2266  111D  3401               	retlw	1
  2267  111E  3453               	retlw	83
  2268  111F  3401               	retlw	1
  2269  1120  3455               	retlw	85
  2270  1121  3401               	retlw	1
  2271  1122  3456               	retlw	86
  2272  1123  3401               	retlw	1
  2273  1124  3457               	retlw	87
  2274  1125  3401               	retlw	1
  2275  1126  3459               	retlw	89
  2276  1127  3401               	retlw	1
  2277  1128  345A               	retlw	90
  2278  1129  3401               	retlw	1
  2279  112A  345B               	retlw	91
  2280  112B  3401               	retlw	1
  2281  112C  345C               	retlw	92
  2282  112D  3401               	retlw	1
  2283  112E  345E               	retlw	94
  2284  112F  3401               	retlw	1
  2285  1130  345F               	retlw	95
  2286  1131  3401               	retlw	1
  2287  1132  3460               	retlw	96
  2288  1133  3401               	retlw	1
  2289  1134  3462               	retlw	98
  2290  1135  3401               	retlw	1
  2291  1136  3463               	retlw	99
  2292  1137  3401               	retlw	1
  2293  1138  3464               	retlw	100
  2294  1139  3401               	retlw	1
  2295  113A  3465               	retlw	101
  2296  113B  3401               	retlw	1
  2297  113C  3467               	retlw	103
  2298  113D  3401               	retlw	1
  2299  113E  3468               	retlw	104
  2300  113F  3401               	retlw	1
  2301  1140  3469               	retlw	105
  2302  1141  3401               	retlw	1
  2303  1142  346B               	retlw	107
  2304  1143  3401               	retlw	1
  2305  1144  346C               	retlw	108
  2306  1145  3401               	retlw	1
  2307  1146  346D               	retlw	109
  2308  1147  3401               	retlw	1
  2309  1148  346F               	retlw	111
  2310  1149  3401               	retlw	1
  2311  114A  3470               	retlw	112
  2312  114B  3401               	retlw	1
  2313  114C  3471               	retlw	113
  2314  114D  3401               	retlw	1
  2315  114E  3472               	retlw	114
  2316  114F  3401               	retlw	1
  2317  1150  3474               	retlw	116
  2318  1151  3401               	retlw	1
  2319  1152  3475               	retlw	117
  2320  1153  3401               	retlw	1
  2321  1154  3476               	retlw	118
  2322  1155  3401               	retlw	1
  2323  1156  3478               	retlw	120
  2324  1157  3401               	retlw	1
  2325  1158  3479               	retlw	121
  2326  1159  3401               	retlw	1
  2327  115A  347A               	retlw	122
  2328  115B  3401               	retlw	1
  2329  115C  347B               	retlw	123
  2330  115D  3401               	retlw	1
  2331  115E  347D               	retlw	125
  2332  115F  3401               	retlw	1
  2333  1160  347E               	retlw	126
  2334  1161  3401               	retlw	1
  2335  1162  347F               	retlw	127
  2336  1163  3401               	retlw	1
  2337  1164  3481               	retlw	129
  2338  1165  3401               	retlw	1
  2339  1166  3482               	retlw	130
  2340  1167  3401               	retlw	1
  2341  1168  3483               	retlw	131
  2342  1169  3401               	retlw	1
  2343  116A  3484               	retlw	132
  2344  116B  3401               	retlw	1
  2345  116C  3486               	retlw	134
  2346  116D  3401               	retlw	1
  2347  116E  3487               	retlw	135
  2348  116F  3401               	retlw	1
  2349  1170  3488               	retlw	136
  2350  1171  3401               	retlw	1
  2351  1172  348A               	retlw	138
  2352  1173  3401               	retlw	1
  2353  1174  348B               	retlw	139
  2354  1175  3401               	retlw	1
  2355  1176  348C               	retlw	140
  2356  1177  3401               	retlw	1
  2357  1178  348D               	retlw	141
  2358  1179  3401               	retlw	1
  2359  117A  348F               	retlw	143
  2360  117B  3401               	retlw	1
  2361  117C  3490               	retlw	144
  2362  117D  3401               	retlw	1
  2363  117E  3490               	retlw	144
  2364  117F  3401               	retlw	1
  2365  1180  3490               	retlw	144
  2366  1181  3401               	retlw	1
  2367  1182  3490               	retlw	144
  2368  1183  3401               	retlw	1
  2369  1184  3490               	retlw	144
  2370  1185  3401               	retlw	1
  2371  1186  3490               	retlw	144
  2372  1187  3401               	retlw	1
  2373  1188  3490               	retlw	144
  2374  1189  3401               	retlw	1
  2375  118A  3490               	retlw	144
  2376  118B  3401               	retlw	1
  2377  118C  3490               	retlw	144
  2378  118D  3401               	retlw	1
  2379  118E  3490               	retlw	144
  2380  118F  3401               	retlw	1
  2381  1190  3490               	retlw	144
  2382  1191  3401               	retlw	1
  2383  1192  3490               	retlw	144
  2384  1193  3401               	retlw	1
  2385  1194                     __end_of_PWM_trans_table:	
  2386                           
  2387                           	psect	stringtext2
  2388  1800                     __pstringtext2:	
  2389  1800                     _cBEMF_FILTER:	
  2390  1800  3400               	retlw	0
  2391  1801  3402               	retlw	2
  2392  1802  3404               	retlw	4
  2393  1803  3406               	retlw	6
  2394  1804  3408               	retlw	8
  2395  1805  340A               	retlw	10
  2396  1806  340C               	retlw	12
  2397  1807  340E               	retlw	14
  2398  1808  3410               	retlw	16
  2399  1809  3412               	retlw	18
  2400  180A  3414               	retlw	20
  2401  180B  3416               	retlw	22
  2402  180C  3418               	retlw	24
  2403  180D  341A               	retlw	26
  2404  180E  341C               	retlw	28
  2405  180F  341E               	retlw	30
  2406  1810  3420               	retlw	32
  2407  1811  3422               	retlw	34
  2408  1812  3424               	retlw	36
  2409  1813  3426               	retlw	38
  2410  1814  3428               	retlw	40
  2411  1815  342A               	retlw	42
  2412  1816  342C               	retlw	44
  2413  1817  342E               	retlw	46
  2414  1818  3401               	retlw	1
  2415  1819  3401               	retlw	1
  2416  181A  3401               	retlw	1
  2417  181B  3436               	retlw	54
  2418  181C  3401               	retlw	1
  2419  181D  343A               	retlw	58
  2420  181E  343C               	retlw	60
  2421  181F  343E               	retlw	62
  2422  1820  3400               	retlw	0
  2423  1821  3402               	retlw	2
  2424  1822  3404               	retlw	4
  2425  1823  3406               	retlw	6
  2426  1824  3408               	retlw	8
  2427  1825  340A               	retlw	10
  2428  1826  340C               	retlw	12
  2429  1827  340E               	retlw	14
  2430  1828  3401               	retlw	1
  2431  1829  3401               	retlw	1
  2432  182A  3401               	retlw	1
  2433  182B  3416               	retlw	22
  2434  182C  3401               	retlw	1
  2435  182D  341A               	retlw	26
  2436  182E  341C               	retlw	28
  2437  182F  341E               	retlw	30
  2438  1830  3401               	retlw	1
  2439  1831  3401               	retlw	1
  2440  1832  3401               	retlw	1
  2441  1833  3426               	retlw	38
  2442  1834  3401               	retlw	1
  2443  1835  342A               	retlw	42
  2444  1836  342C               	retlw	44
  2445  1837  342E               	retlw	46
  2446  1838  3401               	retlw	1
  2447  1839  3401               	retlw	1
  2448  183A  3401               	retlw	1
  2449  183B  3436               	retlw	54
  2450  183C  3401               	retlw	1
  2451  183D  343A               	retlw	58
  2452  183E  343C               	retlw	60
  2453  183F  343E               	retlw	62
  2454  1840                     __end_of_cBEMF_FILTER:	
  2455                           
  2456                           	psect	stringtext3
  2457  1878                     __pstringtext3:	
  2458  1878                     _Sb2_Fixed_Power:	
  2459  1878  34CA               	retlw	202
  2460  1879  3400               	retlw	0
  2461  187A                     __end_of_Sb2_Fixed_Power:	
  2462                           
  2463                           	psect	nvBANK1
  2464  00EF                     __pnvBANK1:	
  2465  00EF                     _ui8_ResetMatlab:	
  2466  00EF                     	ds	1
  2467                           
  2468                           	psect	nvBANK3
  2469  01ED                     __pnvBANK3:	
  2470  01ED                     _ui16_Current_Thresh:	
  2471  01ED                     	ds	2
  2472                           
  2473                           	psect	nvBANK4
  2474  026C                     __pnvBANK4:	
  2475  026C                     _ui16_dryRun_Thresh:	
  2476  026C                     	ds	2
  2477  0017                     _TMR1H	set	23
  2478  0016                     _TMR1L	set	22
  2479  001A                     _TMR2	set	26
  2480  0015                     _TMR0	set	21
  2481  0018                     _T1CON	set	24
  2482  000B                     _INTCON	set	11
  2483  001C                     _T2CON	set	28
  2484  001B                     _PR2	set	27
  2485  00E2                     _TMR2ON	set	226
  2486  005D                     _TMR0IE	set	93
  2487  0064                     _RA4	set	100
  2488  009D                     _CCP4IF	set	157
  2489  009C                     _CCP3IF	set	156
  2490  008A                     _CCP1IF	set	138
  2491  0090                     _CCP2IF	set	144
  2492  009E                     _CCP5IF	set	158
  2493  009B                     _TMR6IF	set	155
  2494  0089                     _TMR2IF	set	137
  2495  0099                     _TMR4IF	set	153
  2496  0088                     _TMR1IF	set	136
  2497  0075                     _RC5	set	117
  2498  005F                     _GIE	set	95
  2499  005E                     _PEIE	set	94
  2500  0097                     _WDTCON	set	151
  2501  0099                     _OSCCON	set	153
  2502  0093                     _PIE3	set	147
  2503  0092                     _PIE2	set	146
  2504  0091                     _PIE1	set	145
  2505  0095                     _OPTION_REG	set	149
  2506  008E                     _TRISC	set	142
  2507  008D                     _TRISB	set	141
  2508  008C                     _TRISA	set	140
  2509  009B                     _ADRESL	set	155
  2510  009C                     _ADRESH	set	156
  2511  009D                     _ADCON0	set	157
  2512  009E                     _ADCON1	set	158
  2513  049B                     _TMR6IE	set	1179
  2514  0499                     _TMR4IE	set	1177
  2515  0488                     _TMR1IE	set	1160
  2516  049E                     _CCP5IE	set	1182
  2517  049D                     _CCP4IE	set	1181
  2518  049C                     _CCP3IE	set	1180
  2519  048A                     _CCP1IE	set	1162
  2520  0489                     _TMR2IE	set	1161
  2521  0490                     _CCP2IE	set	1168
  2522  0495                     _C1IE	set	1173
  2523  04E9                     _GO_nDONE	set	1257
  2524  04E8                     _ADON	set	1256
  2525  010D                     _LATB	set	269
  2526  010C                     _LATA	set	268
  2527  010E                     _LATC	set	270
  2528  0112                     _CM1CON1	set	274
  2529  0111                     _CM1CON0	set	273
  2530  0117                     _FVRCON	set	279
  2531  0870                     _LATC0	set	2160
  2532  0874                     _LATC4	set	2164
  2533  0873                     _LATC3	set	2163
  2534  0871                     _LATC1	set	2161
  2535  0872                     _LATC2	set	2162
  2536  0869                     _LATB1	set	2153
  2537  086A                     _LATB2	set	2154
  2538  088E                     _C1OUT	set	2190
  2539  018D                     _ANSELB	set	397
  2540  018C                     _ANSELA	set	396
  2541  0196                     _EECON2	set	406
  2542  0193                     _EEDATL	set	403
  2543  0191                     _EEADRL	set	401
  2544  0CA9                     _WR	set	3241
  2545  0CAA                     _WREN	set	3242
  2546  0CA8                     _RD	set	3240
  2547  0CAE                     _CFGS	set	3246
  2548  0CAF                     _EEPGD	set	3247
  2549  0292                     _CCPR1H	set	658
  2550  0299                     _CCPR2H	set	665
  2551  0298                     _CCPR2L	set	664
  2552  029A                     _CCP2CON	set	666
  2553  0291                     _CCPR1L	set	657
  2554  0293                     _CCP1CON	set	659
  2555  0295                     _CCP1AS	set	661
  2556  0294                     _PWM1CON	set	660
  2557  0296                     _PSTR1CON	set	662
  2558  14AF                     _CCP1ASE	set	5295
  2559  031D                     _CCPR5H	set	797
  2560  031C                     _CCPR5L	set	796
  2561  031E                     _CCP5CON	set	798
  2562  0319                     _CCPR4H	set	793
  2563  0318                     _CCPR4L	set	792
  2564  031A                     _CCP4CON	set	794
  2565  0312                     _CCPR3H	set	786
  2566  0311                     _CCPR3L	set	785
  2567  0313                     _CCP3CON	set	787
  2568  041D                     _PR6	set	1053
  2569  0416                     _PR4	set	1046
  2570  041C                     _TMR6	set	1052
  2571  0415                     _TMR4	set	1045
  2572  041E                     _T6CON	set	1054
  2573  0417                     _T4CON	set	1047
  2574  20F2                     _TMR6ON	set	8434
  2575  20BA                     _TMR4ON	set	8378
  2576                           
  2577                           ; #config settings
  2578  0000                     
  2579                           	psect	cinit
  2580  0028                     start_initialization:	
  2581  0028                     __initialization:	
  2582                           
  2583                           ; Initialize objects allocated to BANK0
  2584  0028  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  2585  002B  00DE               	movwf	__pdataBANK0& (0+127)
  2586                           
  2587                           ; Initialize objects allocated to BANK1
  2588  002C  305B               	movlw	low __pidataBANK1
  2589  002D  0084               	movwf	4
  2590  002E  309D               	movlw	(high __pidataBANK1)| (0+128)
  2591  002F  0085               	movwf	5
  2592  0030  30E8               	movlw	low __pdataBANK1
  2593  0031  0086               	movwf	6
  2594  0032  3000               	movlw	high __pdataBANK1
  2595  0033  0087               	movwf	7
  2596  0034  3007               	movlw	7
  2597  0035  319D  2555  3180   	fcall	init_ram
  2598                           
  2599                           ; Initialize objects allocated to BANK2
  2600  0038  306A               	movlw	low __pidataBANK2
  2601  0039  0084               	movwf	4
  2602  003A  309D               	movlw	(high __pidataBANK2)| (0+128)
  2603  003B  0085               	movwf	5
  2604  003C  3068               	movlw	low __pdataBANK2
  2605  003D  0086               	movwf	6
  2606  003E  3001               	movlw	high __pdataBANK2
  2607  003F  0087               	movwf	7
  2608  0040  3008               	movlw	8
  2609  0041  319D  2555  3180   	fcall	init_ram
  2610                           
  2611                           ; Clear objects allocated to BITBANK0
  2612  0044  01DD               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2613                           
  2614                           ; Clear objects allocated to BANK0
  2615  0045  304B               	movlw	low __pbssBANK0
  2616  0046  0084               	movwf	4
  2617  0047  3000               	movlw	high __pbssBANK0
  2618  0048  0085               	movwf	5
  2619  0049  3012               	movlw	18
  2620  004A  319D  254F  3180   	fcall	clear_ram0
  2621                           
  2622                           ; Clear objects allocated to BANK1
  2623  004D  30A0               	movlw	low __pbssBANK1
  2624  004E  0084               	movwf	4
  2625  004F  3000               	movlw	high __pbssBANK1
  2626  0050  0085               	movwf	5
  2627  0051  3048               	movlw	72
  2628  0052  319D  254F  3180   	fcall	clear_ram0
  2629                           
  2630                           ; Clear objects allocated to BANK2
  2631  0055  3020               	movlw	low __pbssBANK2
  2632  0056  0084               	movwf	4
  2633  0057  3001               	movlw	high __pbssBANK2
  2634  0058  0085               	movwf	5
  2635  0059  3048               	movlw	72
  2636  005A  319D  254F  3180   	fcall	clear_ram0
  2637                           
  2638                           ; Clear objects allocated to BANK3
  2639  005D  30A0               	movlw	low __pbssBANK3
  2640  005E  0084               	movwf	4
  2641  005F  3001               	movlw	high __pbssBANK3
  2642  0060  0085               	movwf	5
  2643  0061  304D               	movlw	77
  2644  0062  319D  254F  3180   	fcall	clear_ram0
  2645                           
  2646                           ; Clear objects allocated to BANK4
  2647  0065  3020               	movlw	low __pbssBANK4
  2648  0066  0084               	movwf	4
  2649  0067  3002               	movlw	high __pbssBANK4
  2650  0068  0085               	movwf	5
  2651  0069  304C               	movlw	76
  2652  006A  319D  254F  3180   	fcall	clear_ram0
  2653                           
  2654                           ; Clear objects allocated to BANK5
  2655  006D  30C0               	movlw	low __pbssBANK5
  2656  006E  0084               	movwf	4
  2657  006F  3002               	movlw	high __pbssBANK5
  2658  0070  0085               	movwf	5
  2659  0071  300B               	movlw	11
  2660  0072  319D  254F         	fcall	clear_ram0
  2661  0074                     end_of_initialization:	
  2662                           ;End of C runtime variable initialization code
  2663                           
  2664  0074                     __end_of__initialization:	
  2665  0074  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2666  0075  0020               	movlb	0
  2667  0076  3196  2ECD         	ljmp	_main	;jump to C main() function
  2668                           
  2669                           	psect	bitbssBANK0
  2670  02E8                     __pbitbssBANK0:	
  2671  02E8                     _rising_bemf_flag:	
  2672  02E8                     	ds	1
  2673                           
  2674                           	psect	bssBANK0
  2675  004B                     __pbssBANK0:	
  2676  004B                     BVH2_Appl_Layer@Cb24_StateCnt:	
  2677  004B                     	ds	2
  2678  004D                     _Cb1_StateCnt:	
  2679  004D                     	ds	2
  2680  004F                     _ui16_Speed_mat:	
  2681  004F                     	ds	2
  2682  0051                     _ui16_IPhase_bldc:	
  2683  0051                     	ds	2
  2684  0053                     _comm_time:	
  2685  0053                     	ds	2
  2686  0055                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  2687  0055                     	ds	1
  2688  0056                     _Cb34_idPWM:	
  2689  0056                     	ds	1
  2690  0057                     _SIBFS_UbatHandling_b:	
  2691  0057                     	ds	1
  2692  0058                     _ui8_b_DResB0_c:	
  2693  0058                     	ds	1
  2694  0059                     _ui8_b_DResLocID_c:	
  2695  0059                     	ds	1
  2696  005A                     _MotorFlags:	
  2697  005A                     	ds	1
  2698  005B                     _ui16_Ubat_bldc:	
  2699  005B                     	ds	2
  2700                           
  2701                           	psect	dataBANK0
  2702  005E                     __pdataBANK0:	
  2703  005E                     _ui8_selected_lid:	
  2704  005E                     	ds	1
  2705                           
  2706                           	psect	bssBANK1
  2707  00A0                     __pbssBANK1:	
  2708  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  2709  00A0                     	ds	2
  2710  00A2                     BVH2_Appl_Layer@Cb19_Counter:	
  2711  00A2                     	ds	2
  2712  00A4                     _Cb44_StateCnt:	
  2713  00A4                     	ds	2
  2714  00A6                     _ui16_Capt_Val2:	
  2715  00A6                     	ds	2
  2716  00A8                     _ui16_Capt_Val1:	
  2717  00A8                     	ds	2
  2718  00AA                     _ui16_Capt_Val0:	
  2719  00AA                     	ds	2
  2720  00AC                     _ui16_mat_Current:	
  2721  00AC                     	ds	2
  2722  00AE                     _ui8_BattVolt_mat:	
  2723  00AE                     	ds	2
  2724  00B0                     _ui16_duty_cycle_BLDC:	
  2725  00B0                     	ds	2
  2726  00B2                     _ui16_speed_fil:	
  2727  00B2                     	ds	2
  2728  00B4                     _ui16_Ubemf_bldc:	
  2729  00B4                     	ds	2
  2730  00B6                     _ui16_phase_advancement:	
  2731  00B6                     	ds	2
  2732  00B8                     _phase_delay_counter:	
  2733  00B8                     	ds	2
  2734  00BA                     _ui16_step_cnt:	
  2735  00BA                     	ds	2
  2736  00BC                     _analog_value:	
  2737  00BC                     	ds	2
  2738  00BE                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  2739  00BE                     	ds	1
  2740  00BF                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  2741  00BF                     	ds	1
  2742  00C0                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  2743  00C0                     	ds	1
  2744  00C1                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  2745  00C1                     	ds	1
  2746  00C2                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  2747  00C2                     	ds	1
  2748  00C3                     BVH2_Appl_Layer@Cb9_StateCnt:	
  2749  00C3                     	ds	1
  2750  00C4                     BVH2_Appl_Layer@Cb51_Counter:	
  2751  00C4                     	ds	1
  2752  00C5                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  2753  00C5                     	ds	1
  2754  00C6                     _Cb56_odFixedValueSel:	
  2755  00C6                     	ds	1
  2756  00C7                     _SIBFS_Pic_etat_monitor_b:	
  2757  00C7                     	ds	1
  2758  00C8                     _SIBFS_PWM_Detection_b:	
  2759  00C8                     	ds	1
  2760  00C9                     _SIBFS_Current_Analysis_High_b:	
  2761  00C9                     	ds	1
  2762  00CA                     _Cb1_RestartCounter:	
  2763  00CA                     	ds	1
  2764  00CB                     _bool_mat_pic_etat:	
  2765  00CB                     	ds	1
  2766  00CC                     _ui8_PWMinDC_sav:	
  2767  00CC                     	ds	1
  2768  00CD                     _ui8_PWM_FreqCnt:	
  2769  00CD                     	ds	1
  2770  00CE                     _ui8_Task_Cont100ms:	
  2771  00CE                     	ds	1
  2772  00CF                     _bool_ControlLoopMode:	
  2773  00CF                     	ds	1
  2774  00D0                     _bool_mat_currAlarm_bldc:	
  2775  00D0                     	ds	1
  2776  00D1                     _ui8_PWM_dc_mat:	
  2777  00D1                     	ds	1
  2778  00D2                     _ui8_Task_Cont1ms:	
  2779  00D2                     	ds	1
  2780  00D3                     _ui8_given_supply:	
  2781  00D3                     	ds	1
  2782  00D4                     _phaseCal:	
  2783  00D4                     	ds	1
  2784  00D5                     _bool_HighCurrentAlarm:	
  2785  00D5                     	ds	1
  2786  00D6                     _bool_MotorStalled:	
  2787  00D6                     	ds	1
  2788  00D7                     _bool_DryRunningAlarm:	
  2789  00D7                     	ds	1
  2790  00D8                     _bool_CPU_TempAlarm:	
  2791  00D8                     	ds	1
  2792  00D9                     _Bcnt:	
  2793  00D9                     	ds	1
  2794  00DA                     _ui8_CompFlag:	
  2795  00DA                     	ds	1
  2796  00DB                     _ui8_UPhase_sel:	
  2797  00DB                     	ds	1
  2798  00DC                     _ui8_IPhase_sel:	
  2799  00DC                     	ds	1
  2800  00DD                     _ui8_BlankingCount:	
  2801  00DD                     	ds	1
  2802  00DE                     _comm_state:	
  2803  00DE                     	ds	1
  2804  00DF                     _ui8_StartupPWM:	
  2805  00DF                     	ds	1
  2806  00E0                     _ui8_error_Flags:	
  2807  00E0                     	ds	1
  2808  00E1                     _windowPtr1:	
  2809  00E1                     	ds	1
  2810  00E2                     _ui16_IPhase3_bldc_cal:	
  2811  00E2                     	ds	2
  2812  00E4                     _ui16_IPhase2_bldc_cal:	
  2813  00E4                     	ds	2
  2814  00E6                     _ui16_IPhase1_bldc_cal:	
  2815  00E6                     	ds	2
  2816                           
  2817                           	psect	dataBANK1
  2818  00E8                     __pdataBANK1:	
  2819  00E8                     _ui16_I_cal_Ph3:	
  2820  00E8                     	ds	2
  2821  00EA                     _ui16_I_cal_Ph2:	
  2822  00EA                     	ds	2
  2823  00EC                     _ui16_I_cal_Ph1:	
  2824  00EC                     	ds	2
  2825  00EE                     _wkpoint:	
  2826  00EE                     	ds	1
  2827                           
  2828                           	psect	bssBANK2
  2829  0120                     __pbssBANK2:	
  2830  0120                     _ui8_current_cal:	
  2831  0120                     	ds	3
  2832  0123                     _last_pwm:	
  2833  0123                     	ds	2
  2834  0125                     _sum:	
  2835  0125                     	ds	2
  2836  0127                     _ui16_comm_time_max:	
  2837  0127                     	ds	2
  2838  0129                     _filterTempNTC:	
  2839  0129                     	ds	2
  2840  012B                     _filterPh:	
  2841  012B                     	ds	2
  2842  012D                     _filter3:	
  2843  012D                     	ds	2
  2844  012F                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  2845  012F                     	ds	1
  2846  0130                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  2847  0130                     	ds	1
  2848  0131                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  2849  0131                     	ds	1
  2850  0132                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  2851  0132                     	ds	1
  2852  0133                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  2853  0133                     	ds	1
  2854  0134                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  2855  0134                     	ds	1
  2856  0135                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  2857  0135                     	ds	1
  2858  0136                     _Cb56_odPumpOff:	
  2859  0136                     	ds	1
  2860  0137                     _Cb56_oUbat_Alarm_High:	
  2861  0137                     	ds	1
  2862  0138                     _Cb44_oShutoff:	
  2863  0138                     	ds	1
  2864  0139                     _Cb44_oAlarm:	
  2865  0139                     	ds	1
  2866  013A                     _Cb34_odPumpOff:	
  2867  013A                     	ds	1
  2868  013B                     _Cb34_odFixedValueSel:	
  2869  013B                     	ds	1
  2870  013C                     _Cb34_odFixedLowValueSel:	
  2871  013C                     	ds	1
  2872  013D                     _Cb34_oPWM_SC_Alarm:	
  2873  013D                     	ds	1
  2874  013E                     _Cb34_oPWM_Alarm:	
  2875  013E                     	ds	1
  2876  013F                     _Cb1_oShutoff:	
  2877  013F                     	ds	1
  2878  0140                     _Cb1_oCurrentAlarm:	
  2879  0140                     	ds	1
  2880  0141                     _ui8_Duty_Cycle_In_Ratio:	
  2881  0141                     	ds	1
  2882  0142                     _ui8_Pulse_State:	
  2883  0142                     	ds	1
  2884  0143                     _ui8_PWMoutvalue:	
  2885  0143                     	ds	1
  2886  0144                     _pwm_cmd:	
  2887  0144                     	ds	1
  2888  0145                     _ui8_lastTaskvalue:	
  2889  0145                     	ds	1
  2890  0146                     _ui8_Task_Cont5ms:	
  2891  0146                     	ds	1
  2892  0147                     _ui8_Task_Cont3ms:	
  2893  0147                     	ds	1
  2894  0148                     _bool_PWMin_Freq_err_Alarm:	
  2895  0148                     	ds	1
  2896  0149                     _bool_UbatAlarm:	
  2897  0149                     	ds	1
  2898  014A                     _bool_CPU_TempRedAlarm:	
  2899  014A                     	ds	1
  2900  014B                     _bool_PWMin_err_Alarm:	
  2901  014B                     	ds	1
  2902  014C                     _ui8_Kp_mat:	
  2903  014C                     	ds	1
  2904  014D                     __ELINMIntSpace:	
  2905  014D                     	ds	1
  2906  014E                     __ELINMIntMessageBufferPointer:	
  2907  014E                     	ds	1
  2908  014F                     __ELINMIntReadBack:	
  2909  014F                     	ds	1
  2910  0150                     __ELINMIntRXMessageSize:	
  2911  0150                     	ds	1
  2912  0151                     __ELINMIntMessageSize:	
  2913  0151                     	ds	1
  2914  0152                     __ELINMIntStatus1:	
  2915  0152                     	ds	1
  2916  0153                     __ELINMIntStatus:	
  2917  0153                     	ds	1
  2918  0154                     __ELINMIntMessageTag:	
  2919  0154                     	ds	1
  2920  0155                     _ui8_cnt_PWM:	
  2921  0155                     	ds	1
  2922  0156                     _ui8_cnt1:	
  2923  0156                     	ds	1
  2924  0157                     _DC_pic_etat_monitor:	
  2925  0157                     	ds	1
  2926  0158                     _Error_PICetatMonitor:	
  2927  0158                     	ds	1
  2928  0159                     _ui8_lin_sim_Failures_ena:	
  2929  0159                     	ds	1
  2930  015A                     _ui8_lin_sim_Failures:	
  2931  015A                     	ds	1
  2932  015B                     _ui8_b_DResB5_c:	
  2933  015B                     	ds	1
  2934  015C                     _ui8_b_DResB4_c:	
  2935  015C                     	ds	1
  2936  015D                     _ui8_b_DResB3_c:	
  2937  015D                     	ds	1
  2938  015E                     _ui8_b_DResB2_c:	
  2939  015E                     	ds	1
  2940  015F                     _ui8_b_DResB1_c:	
  2941  015F                     	ds	1
  2942  0160                     _ui8_b_DResServID_c:	
  2943  0160                     	ds	1
  2944  0161                     _CompFlag_prev:	
  2945  0161                     	ds	1
  2946  0162                     _ui8_sampleState:	
  2947  0162                     	ds	1
  2948  0163                     _ui8_Ubemf_sel:	
  2949  0163                     	ds	1
  2950  0164                     _BlankingCountdbg:	
  2951  0164                     	ds	1
  2952  0165                     _bemf_filter:	
  2953  0165                     	ds	1
  2954  0166                     _bool_start_demand_mat:	
  2955  0166                     	ds	1
  2956  0167                     _ui8_temp_calibration:	
  2957  0167                     	ds	1
  2958                           
  2959                           	psect	dataBANK2
  2960  0168                     __pdataBANK2:	
  2961  0168                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  2962  0168                     	ds	4
  2963  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  2964  016C                     	ds	1
  2965  016D                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  2966  016D                     	ds	1
  2967  016E                     _ui8_failure:	
  2968  016E                     	ds	1
  2969  016F                     _ict_stamp:	
  2970  016F                     	ds	1
  2971                           
  2972                           	psect	bssBANK3
  2973  01A0                     __pbssBANK3:	
  2974  01A0                     BVH2_Appl_Layer@Cb24_BadCnt:	
  2975  01A0                     	ds	2
  2976  01A2                     BVH2_Appl_Layer@Cb14_StateCnt:	
  2977  01A2                     	ds	2
  2978  01A4                     _prev_Debounce_Tmr:	
  2979  01A4                     	ds	2
  2980  01A6                     _Debounce_Tmr:	
  2981  01A6                     	ds	2
  2982  01A8                     _prev_RA4:	
  2983  01A8                     	ds	2
  2984  01AA                     _ui16_PWMin_failCnt:	
  2985  01AA                     	ds	2
  2986  01AC                     _ui16_Speed_demand_mat_min:	
  2987  01AC                     	ds	2
  2988  01AE                     _ui16_Speed_demand_mat_Max:	
  2989  01AE                     	ds	2
  2990  01B0                     _ui16_Speed_demand_mat:	
  2991  01B0                     	ds	2
  2992  01B2                     _ui8_Ki_mat:	
  2993  01B2                     	ds	2
  2994  01B4                     _ui16_mat_inpTemp:	
  2995  01B4                     	ds	2
  2996  01B6                     _ui16_PWM_Freq_In:	
  2997  01B6                     	ds	2
  2998  01B8                     _ui16_PWM_Freq_mat:	
  2999  01B8                     	ds	2
  3000  01BA                     _ui16_duty_cycle_mat:	
  3001  01BA                     	ds	2
  3002  01BC                     _ui16_speed_rar:	
  3003  01BC                     	ds	2
  3004  01BE                     _ui8_fixed_start_speed_mat:	
  3005  01BE                     	ds	2
  3006  01C0                     _ui16_NTC_Temp_bldc_mean_cal:	
  3007  01C0                     	ds	2
  3008  01C2                     _filterTempCPU:	
  3009  01C2                     	ds	2
  3010  01C4                     _filter1:	
  3011  01C4                     	ds	2
  3012  01C6                     _ui16_CPU_Temp_bldc_mean:	
  3013  01C6                     	ds	2
  3014  01C8                     _ui16_NTC_Temp_bldc_mean:	
  3015  01C8                     	ds	2
  3016  01CA                     _ui16_fir_UPhase_mittel:	
  3017  01CA                     	ds	2
  3018  01CC                     _ui16_fir_IPhase_mean:	
  3019  01CC                     	ds	2
  3020  01CE                     _ui16_fir_Bat_mittel:	
  3021  01CE                     	ds	2
  3022  01D0                     _ui16_Temp_cal:	
  3023  01D0                     	ds	2
  3024  01D2                     _ui16_NTC_Temp_bldc:	
  3025  01D2                     	ds	2
  3026  01D4                     _ui16_IPhase1_bldc:	
  3027  01D4                     	ds	2
  3028  01D6                     _ui16_UPhase_bldc:	
  3029  01D6                     	ds	2
  3030  01D8                     _ui8_debug_out0:	
  3031  01D8                     	ds	1
  3032  01D9                     _bool_StalledMotorStop:	
  3033  01D9                     	ds	1
  3034  01DA                     _bool_PIC_Alarm:	
  3035  01DA                     	ds	1
  3036  01DB                     _bl_Pumpoff_Alarm:	
  3037  01DB                     	ds	1
  3038  01DC                     _ui8_CMD_Mode:	
  3039  01DC                     	ds	1
  3040  01DD                     _ui8_calib_flag:	
  3041  01DD                     	ds	1
  3042  01DE                     _ui8_i_wob:	
  3043  01DE                     	ds	1
  3044  01DF                     _ui8_DebugCnt:	
  3045  01DF                     	ds	1
  3046  01E0                     _ui8_Sync_Cont10ms:	
  3047  01E0                     	ds	1
  3048  01E1                     _ui8_lin_calibration:	
  3049  01E1                     	ds	1
  3050  01E2                     _LIN_DEACTIVATION:	
  3051  01E2                     	ds	1
  3052  01E3                     _FCT_STAMP_WRITING:	
  3053  01E3                     	ds	1
  3054  01E4                     _SPEED_READING:	
  3055  01E4                     	ds	1
  3056  01E5                     _CURRENT_CALIBRATION:	
  3057  01E5                     	ds	1
  3058  01E6                     _VER_SUPPLY_VOLTAGE_VALUE:	
  3059  01E6                     	ds	1
  3060  01E7                     _VER_SW_VERSION_NUMBER:	
  3061  01E7                     	ds	1
  3062  01E8                     _TEMPERATURE_CALIBRATION:	
  3063  01E8                     	ds	1
  3064  01E9                     _FCT_STAMP_ABSENCE:	
  3065  01E9                     	ds	1
  3066  01EA                     _ICT_STAMP_PRESENCE:	
  3067  01EA                     	ds	1
  3068  01EB                     _ui16_Duty_Cycle_In:	
  3069  01EB                     	ds	2
  3070                           
  3071                           	psect	bssBANK4
  3072  0220                     __pbssBANK4:	
  3073  0220                     _B:	
  3074  0220                     	ds	16
  3075  0230                     _inputArray1:	
  3076  0230                     	ds	16
  3077  0240                     _checksum:	
  3078  0240                     	ds	6
  3079  0246                     __ELINMIntSleepTimeout:	
  3080  0246                     	ds	4
  3081  024A                     _ui16_CMD_Mode_Tmr:	
  3082  024A                     	ds	2
  3083  024C                     _ui16_wait:	
  3084  024C                     	ds	2
  3085  024E                     _ui16_Timer_VaL1:	
  3086  024E                     	ds	2
  3087  0250                     __ELINMIntTHeaderMax:	
  3088  0250                     	ds	2
  3089  0252                     __ELINMIntTHeaderMin:	
  3090  0252                     	ds	2
  3091  0254                     __ELINMIntTFrameMax:	
  3092  0254                     	ds	2
  3093  0256                     __ELINMIntTFrameMin:	
  3094  0256                     	ds	2
  3095  0258                     __ELINMIntRXCRC:	
  3096  0258                     	ds	2
  3097  025A                     _ui16_ambiant_temperature:	
  3098  025A                     	ds	2
  3099  025C                     _ui16_CPU_Temp_bldc:	
  3100  025C                     	ds	2
  3101  025E                     _ui16_IPhase3_bldc:	
  3102  025E                     	ds	2
  3103  0260                     _ui16_IPhase2_bldc:	
  3104  0260                     	ds	2
  3105  0262                     _ui16_phase_angle:	
  3106  0262                     	ds	2
  3107  0264                     _phase_delay_counter_debug:	
  3108  0264                     	ds	2
  3109  0266                     _ui8_zero_cros_cnt:	
  3110  0266                     	ds	2
  3111  0268                     _ui16_Task_Cont500ms:	
  3112  0268                     	ds	2
  3113  026A                     _ui16_CPU_Temp_bldc_mean_cal:	
  3114  026A                     	ds	2
  3115                           
  3116                           	psect	bssBANK5
  3117  02C0                     __pbssBANK5:	
  3118  02C0                     __ELINMIntMessageBuffer:	
  3119  02C0                     	ds	11
  3120                           
  3121                           	psect	inittext
  3122  1D55                     init_ram:	
  3123  1D55  00FE               	movwf	126
  3124  1D56                     initloop:	
  3125  1D56  0012               	moviw fsr0++
  3126  1D57  001E               	movwi fsr1++
  3127  1D58  0BFE               	decfsz	126,f
  3128  1D59  2D56               	goto	initloop
  3129  1D5A  3400               	retlw	0
  3130                           
  3131                           	psect	clrtext
  3132  1D4F                     clear_ram0:	
  3133                           ;	Called with FSR0 containing the base address, and
  3134                           ;	WREG with the size to clear
  3135                           
  3136  1D4F  0064               	clrwdt	;clear the watchdog before getting into this loop
  3137  1D50                     clrloop0:	
  3138  1D50  0180               	clrf	0	;clear RAM location pointed to by FSR
  3139  1D51  3101               	addfsr 0,1
  3140  1D52  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3141  1D53  2D50               	goto	clrloop0	;have we reached the end yet?
  3142  1D54  3400               	retlw	0	;all done for this memory range, return
  3143                           
  3144                           	psect	cstackBANK5
  3145  02A0                     __pcstackBANK5:	
  3146  02A0                     _BVH2_Appl_Layer$1067:	
  3147                           
  3148                           ; 4 bytes @ 0x0
  3149  02A0                     	ds	4
  3150  02A4                     _BVH2_Appl_Layer$1064:	
  3151                           
  3152                           ; 2 bytes @ 0x4
  3153  02A4                     	ds	2
  3154  02A6                     _BVH2_Appl_Layer$1066:	
  3155                           
  3156                           ; 2 bytes @ 0x6
  3157  02A6                     	ds	2
  3158  02A8                     BVH2_Appl_Layer@Sb2_Switch2:	
  3159                           
  3160                           ; 2 bytes @ 0x8
  3161  02A8                     	ds	2
  3162  02AA                     _BVH2_Appl_Layer$1056:	
  3163                           
  3164                           ; 1 bytes @ 0xA
  3165  02AA                     	ds	1
  3166  02AB                     _BVH2_Appl_Layer$1057:	
  3167                           
  3168                           ; 1 bytes @ 0xB
  3169  02AB                     	ds	1
  3170  02AC                     _BVH2_Appl_Layer$1058:	
  3171                           
  3172                           ; 1 bytes @ 0xC
  3173  02AC                     	ds	1
  3174  02AD                     _BVH2_Appl_Layer$1059:	
  3175                           
  3176                           ; 1 bytes @ 0xD
  3177  02AD                     	ds	1
  3178  02AE                     _BVH2_Appl_Layer$1060:	
  3179                           
  3180                           ; 1 bytes @ 0xE
  3181  02AE                     	ds	1
  3182  02AF                     _BVH2_Appl_Layer$1061:	
  3183                           
  3184                           ; 1 bytes @ 0xF
  3185  02AF                     	ds	1
  3186  02B0                     BVH2_Appl_Layer@Sb2_Error:	
  3187                           
  3188                           ; 2 bytes @ 0x10
  3189  02B0                     	ds	2
  3190  02B2                     BVH2_Appl_Layer@Sb3_Product1:	
  3191                           
  3192                           ; 2 bytes @ 0x12
  3193  02B2                     	ds	2
  3194  02B4                     BVH2_Appl_Layer@Cb24_Reset:	
  3195                           
  3196                           ; 1 bytes @ 0x14
  3197  02B4                     	ds	1
  3198  02B5                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  3199                           
  3200                           ; 1 bytes @ 0x15
  3201  02B5                     	ds	1
  3202  02B6                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  3203                           
  3204                           ; 1 bytes @ 0x16
  3205  02B6                     	ds	1
  3206  02B7                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  3207                           
  3208                           ; 1 bytes @ 0x17
  3209  02B7                     	ds	1
  3210  02B8                     BVH2_Appl_Layer@Sb2_Switch5:	
  3211                           
  3212                           ; 2 bytes @ 0x18
  3213  02B8                     	ds	2
  3214  02BA                     BVH2_Appl_Layer@Sb3_Sum1:	
  3215                           
  3216                           ; 2 bytes @ 0x1A
  3217  02BA                     	ds	2
  3218  02BC                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  3219                           
  3220                           ; 1 bytes @ 0x1C
  3221  02BC                     	ds	1
  3222  02BD                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  3223                           
  3224                           ; 1 bytes @ 0x1D
  3225  02BD                     	ds	1
  3226  02BE                     BVH2_Appl_Layer@Sb4_PI_sum:	
  3227                           
  3228                           ; 2 bytes @ 0x1E
  3229  02BE                     	ds	2
  3230                           
  3231                           	psect	cstackCOMMON
  3232  0070                     __pcstackCOMMON:	
  3233  0070                     ?_InitMotorRun:	
  3234  0070                     ?_commutate:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0070                     ?_PWM_Write_Out:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0070                     ?_read_eeprom_data:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0070                     ?_PWMReadDC:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0070                     ?_PWM_CTRL:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0070                     ??_PWM_CTRL:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0070                     ?_interrupt_PWMCapture:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0070                     ??_interrupt_PWMCapture:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0070                     ?_Oscill_Source_Block:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0070                     ?_timer_init:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0070                     ?_PWM_Capture_init:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0070                     ?_clear_timer:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0070                     ?_BVH2_Appl_Layer:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0070                     ?_ADC_Init:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0070                     ?_ADC_Wait:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291  0070                     ?_FILTER_Init:	
  3292                           ; 1 bytes @ 0x0
  3293                           
  3294  0070                     ?_FILTER_Ubat:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297  0070                     ?_FILTER_IPhase:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0070                     ?_FILTER_Temp:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0070                     ?_Get_Analog_Value:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0070                     ?_BLDCWait:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0070                     ??_BLDCWait:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0070                     ?_init_bldc:	
  3313                           ; 1 bytes @ 0x0
  3314                           
  3315  0070                     ?_interrrupt_bldc:	
  3316                           ; 1 bytes @ 0x0
  3317                           
  3318  0070                     ?_InitMotorStop:	
  3319                           ; 1 bytes @ 0x0
  3320                           
  3321  0070                     ?_DiagInit:	
  3322                           ; 1 bytes @ 0x0
  3323                           
  3324  0070                     ?_SetDiagAlarm:	
  3325                           ; 1 bytes @ 0x0
  3326                           
  3327  0070                     ?_Task1ms:	
  3328                           ; 1 bytes @ 0x0
  3329                           
  3330  0070                     ??_Task1ms:	
  3331                           ; 1 bytes @ 0x0
  3332                           
  3333  0070                     ?_interrupt_handler:	
  3334                           ; 1 bytes @ 0x0
  3335                           
  3336  0070                     ?_I_calibrationInit:	
  3337                           ; 1 bytes @ 0x0
  3338                           
  3339  0070                     ?_init_ports:	
  3340                           ; 1 bytes @ 0x0
  3341                           
  3342  0070                     ?_system_init:	
  3343                           ; 1 bytes @ 0x0
  3344                           
  3345  0070                     ?_main:	
  3346                           ; 1 bytes @ 0x0
  3347                           
  3348  0070                     ?i1_ADC_Wait:	
  3349                           ; 1 bytes @ 0x0
  3350                           
  3351  0070                     ??i1_ADC_Wait:	
  3352                           ; 1 bytes @ 0x0
  3353                           
  3354  0070                     ?i1_commutate:	
  3355                           ; 1 bytes @ 0x0
  3356                           
  3357  0070                     ??i1_commutate:	
  3358                           ; 1 bytes @ 0x0
  3359                           
  3360  0070                     ?___lwdiv:	
  3361                           ; 1 bytes @ 0x0
  3362                           
  3363  0070                     ?i1_ADC_Read:	
  3364                           ; 2 bytes @ 0x0
  3365                           
  3366  0070                     ?i1___wmul:	
  3367                           ; 2 bytes @ 0x0
  3368                           
  3369  0070                     ___lwdiv@divisor:	
  3370                           ; 2 bytes @ 0x0
  3371                           
  3372  0070                     i1___wmul@multiplier:	
  3373                           ; 2 bytes @ 0x0
  3374                           
  3375                           
  3376                           ; 2 bytes @ 0x0
  3377  0070                     	ds	2
  3378  0072                     ??i1_ADC_Read:	
  3379  0072                     ___lwdiv@dividend:	
  3380                           ; 1 bytes @ 0x2
  3381                           
  3382  0072                     i1___wmul@multiplicand:	
  3383                           ; 2 bytes @ 0x2
  3384                           
  3385                           
  3386                           ; 2 bytes @ 0x2
  3387  0072                     	ds	1
  3388  0073                     i1ADC_Read@i:	
  3389                           
  3390                           ; 1 bytes @ 0x3
  3391  0073                     	ds	1
  3392  0074                     ??___lwdiv:	
  3393  0074                     ??i1___wmul:	
  3394                           ; 1 bytes @ 0x4
  3395                           
  3396  0074                     i1___wmul@product:	
  3397                           ; 1 bytes @ 0x4
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x4
  3401  0074                     	ds	1
  3402  0075                     ___lwdiv@quotient:	
  3403                           
  3404                           ; 2 bytes @ 0x5
  3405  0075                     	ds	2
  3406  0077                     ___lwdiv@counter:	
  3407                           
  3408                           ; 1 bytes @ 0x7
  3409  0077                     	ds	5
  3410  007C                     ??_interrupt_handler:	
  3411                           
  3412                           	psect	cstackBANK0
  3413  0020                     __pcstackBANK0:	
  3414                           ; 1 bytes @ 0xC
  3415                           
  3416  0020                     ??_interrrupt_bldc:	
  3417                           
  3418                           ; 1 bytes @ 0x0
  3419  0020                     	ds	4
  3420  0024                     interrrupt_bldc@ui32_tmp:	
  3421                           
  3422                           ; 4 bytes @ 0x4
  3423  0024                     	ds	4
  3424  0028                     ??_commutate:	
  3425  0028                     ??_PWM_Write_Out:	
  3426                           ; 1 bytes @ 0x8
  3427                           
  3428  0028                     ??_read_eeprom_data:	
  3429                           ; 1 bytes @ 0x8
  3430                           
  3431  0028                     ??_Oscill_Source_Block:	
  3432                           ; 1 bytes @ 0x8
  3433                           
  3434  0028                     ??_PWM_Capture_init:	
  3435                           ; 1 bytes @ 0x8
  3436                           
  3437  0028                     ??_clear_timer:	
  3438                           ; 1 bytes @ 0x8
  3439                           
  3440  0028                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  3441                           ; 1 bytes @ 0x8
  3442                           
  3443  0028                     ??_Cb34_PWM_Detection_node_fcn1:	
  3444                           ; 1 bytes @ 0x8
  3445                           
  3446  0028                     ??_Cb56_UbatHandling_node_fcn2:	
  3447                           ; 1 bytes @ 0x8
  3448                           
  3449  0028                     ??_Cb1_Current_An___High_node_fcn1:	
  3450                           ; 1 bytes @ 0x8
  3451                           
  3452  0028                     ??_ADC_Init:	
  3453                           ; 1 bytes @ 0x8
  3454                           
  3455  0028                     ??_ADC_Wait:	
  3456                           ; 1 bytes @ 0x8
  3457                           
  3458  0028                     ??_FILTER_Ubat:	
  3459                           ; 1 bytes @ 0x8
  3460                           
  3461  0028                     ??_FILTER_IPhase:	
  3462                           ; 1 bytes @ 0x8
  3463                           
  3464  0028                     ??_FILTER_Temp:	
  3465                           ; 1 bytes @ 0x8
  3466                           
  3467  0028                     ??_InitMotorStop:	
  3468                           ; 1 bytes @ 0x8
  3469                           
  3470  0028                     ??_init_ports:	
  3471                           ; 1 bytes @ 0x8
  3472                           
  3473  0028                     ?_ADC_Read:	
  3474                           ; 1 bytes @ 0x8
  3475                           
  3476  0028                     ?_sign:	
  3477                           ; 2 bytes @ 0x8
  3478                           
  3479  0028                     ?___wmul:	
  3480                           ; 2 bytes @ 0x8
  3481                           
  3482  0028                     ?___tmul:	
  3483                           ; 2 bytes @ 0x8
  3484                           
  3485  0028                     ?___lmul:	
  3486                           ; 3 bytes @ 0x8
  3487                           
  3488  0028                     ?___aldiv:	
  3489                           ; 4 bytes @ 0x8
  3490                           
  3491  0028                     PWM_Capture_init@ui8_CCP_Nb:	
  3492                           ; 4 bytes @ 0x8
  3493                           
  3494  0028                     clear_timer@ui8_TmrNb:	
  3495                           ; 1 bytes @ 0x8
  3496                           
  3497  0028                     sign@x:	
  3498                           ; 1 bytes @ 0x8
  3499                           
  3500  0028                     ___wmul@multiplier:	
  3501                           ; 2 bytes @ 0x8
  3502                           
  3503  0028                     ___tmul@multiplier:	
  3504                           ; 2 bytes @ 0x8
  3505                           
  3506  0028                     ___lmul@multiplier:	
  3507                           ; 3 bytes @ 0x8
  3508                           
  3509  0028                     ___aldiv@divisor:	
  3510                           ; 4 bytes @ 0x8
  3511                           
  3512                           
  3513                           ; 4 bytes @ 0x8
  3514  0028                     	ds	1
  3515  0029                     ??_timer_init:	
  3516  0029                     read_eeprom_data@ui8_adress:	
  3517                           ; 1 bytes @ 0x9
  3518                           
  3519  0029                     PWM_Write_Out@ui8_DutyCycle_Out:	
  3520                           ; 1 bytes @ 0x9
  3521                           
  3522  0029                     timer_init@ui8_TmrNb:	
  3523                           ; 1 bytes @ 0x9
  3524                           
  3525                           
  3526                           ; 1 bytes @ 0x9
  3527  0029                     	ds	1
  3528  002A                     ??_ADC_Read:	
  3529  002A                     ??_DiagInit:	
  3530                           ; 1 bytes @ 0xA
  3531                           
  3532  002A                     ??_SetDiagAlarm:	
  3533                           ; 1 bytes @ 0xA
  3534                           
  3535  002A                     ??_sign:	
  3536                           ; 1 bytes @ 0xA
  3537                           
  3538  002A                     read_eeprom_data@ui8_adress_data:	
  3539                           ; 1 bytes @ 0xA
  3540                           
  3541  002A                     ___wmul@multiplicand:	
  3542                           ; 1 bytes @ 0xA
  3543                           
  3544                           
  3545                           ; 2 bytes @ 0xA
  3546  002A                     	ds	1
  3547  002B                     ADC_Read@i:	
  3548  002B                     ___tmul@multiplicand:	
  3549                           ; 1 bytes @ 0xB
  3550                           
  3551                           
  3552                           ; 3 bytes @ 0xB
  3553  002B                     	ds	1
  3554  002C                     ??_FILTER_Init:	
  3555  002C                     ??_I_calibrationInit:	
  3556                           ; 1 bytes @ 0xC
  3557                           
  3558  002C                     ??___wmul:	
  3559                           ; 1 bytes @ 0xC
  3560                           
  3561  002C                     ___wmul@product:	
  3562                           ; 1 bytes @ 0xC
  3563                           
  3564  002C                     ___lmul@multiplicand:	
  3565                           ; 2 bytes @ 0xC
  3566                           
  3567  002C                     ___aldiv@dividend:	
  3568                           ; 4 bytes @ 0xC
  3569                           
  3570                           
  3571                           ; 4 bytes @ 0xC
  3572  002C                     	ds	2
  3573  002E                     ??___tmul:	
  3574  002E                     ?_rate_limit:	
  3575                           ; 1 bytes @ 0xE
  3576                           
  3577  002E                     rate_limit@pwm:	
  3578                           ; 2 bytes @ 0xE
  3579                           
  3580  002E                     ___tmul@product:	
  3581                           ; 2 bytes @ 0xE
  3582                           
  3583                           
  3584                           ; 3 bytes @ 0xE
  3585  002E                     	ds	2
  3586  0030                     ??_rate_limit:	
  3587  0030                     ??___lmul:	
  3588                           ; 1 bytes @ 0x10
  3589                           
  3590  0030                     ??___aldiv:	
  3591                           ; 1 bytes @ 0x10
  3592                           
  3593  0030                     ___lmul@product:	
  3594                           ; 1 bytes @ 0x10
  3595                           
  3596                           
  3597                           ; 4 bytes @ 0x10
  3598  0030                     	ds	1
  3599  0031                     ?___ltdiv:	
  3600  0031                     ___aldiv@counter:	
  3601                           ; 3 bytes @ 0x11
  3602                           
  3603  0031                     ___ltdiv@divisor:	
  3604                           ; 1 bytes @ 0x11
  3605                           
  3606                           
  3607                           ; 3 bytes @ 0x11
  3608  0031                     	ds	1
  3609  0032                     ___aldiv@sign:	
  3610  0032                     rate_limit@sign_delta_pwm:	
  3611                           ; 1 bytes @ 0x12
  3612                           
  3613                           
  3614                           ; 2 bytes @ 0x12
  3615  0032                     	ds	1
  3616  0033                     ___aldiv@quotient:	
  3617                           
  3618                           ; 4 bytes @ 0x13
  3619  0033                     	ds	1
  3620  0034                     ??_InitMotorRun:	
  3621  0034                     ??_Get_Analog_Value:	
  3622                           ; 1 bytes @ 0x14
  3623                           
  3624  0034                     ??_init_bldc:	
  3625                           ; 1 bytes @ 0x14
  3626                           
  3627  0034                     rate_limit@abs_delta_pwm:	
  3628                           ; 1 bytes @ 0x14
  3629                           
  3630  0034                     ___ltdiv@dividend:	
  3631                           ; 2 bytes @ 0x14
  3632                           
  3633                           
  3634                           ; 3 bytes @ 0x14
  3635  0034                     	ds	1
  3636  0035                     ??_system_init:	
  3637                           
  3638                           ; 1 bytes @ 0x15
  3639  0035                     	ds	1
  3640  0036                     rate_limit@pwm_inc:	
  3641                           
  3642                           ; 2 bytes @ 0x16
  3643  0036                     	ds	1
  3644  0037                     ??_BVH2_Appl_Layer:	
  3645  0037                     ??___ltdiv:	
  3646                           ; 1 bytes @ 0x17
  3647                           
  3648                           
  3649                           ; 1 bytes @ 0x17
  3650  0037                     	ds	1
  3651  0038                     rate_limit@sign_pwm_inc:	
  3652  0038                     ___ltdiv@quotient:	
  3653                           ; 2 bytes @ 0x18
  3654                           
  3655                           
  3656                           ; 3 bytes @ 0x18
  3657  0038                     	ds	2
  3658  003A                     rate_limit@delta_pwm:	
  3659                           
  3660                           ; 2 bytes @ 0x1A
  3661  003A                     	ds	1
  3662  003B                     ___ltdiv@counter:	
  3663                           
  3664                           ; 1 bytes @ 0x1B
  3665  003B                     	ds	1
  3666  003C                     ??_PWMReadDC:	
  3667                           
  3668                           ; 1 bytes @ 0x1C
  3669  003C                     	ds	11
  3670  0047                     ??_main:	
  3671                           
  3672                           ; 1 bytes @ 0x27
  3673  0047                     	ds	4
  3674                           
  3675                           	psect	maintext
  3676  16CD                     __pmaintext:	
  3677 ;;
  3678 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3679 ;;
  3680 ;; *************** function _main *****************
  3681 ;; Defined at:
  3682 ;;		line 634 in file "../main.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;		None
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : B1F/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3696 ;;      Params:         0       0       0       0       0       0       0       0
  3697 ;;      Locals:         0       0       0       0       0       0       0       0
  3698 ;;      Temps:          0       4       0       0       0       0       0       0
  3699 ;;      Totals:         0       4       0       0       0       0       0       0
  3700 ;;Total ram usage:        4 bytes
  3701 ;; Hardware stack levels required when called:    7
  3702 ;; This function calls:
  3703 ;;		_BVH2_Appl_Layer
  3704 ;;		_Get_Analog_Value
  3705 ;;		_InitMotorRun
  3706 ;;		_InitMotorStop
  3707 ;;		_PWMReadDC
  3708 ;;		_SetDiagAlarm
  3709 ;;		___wmul
  3710 ;;		_clear_timer
  3711 ;;		_rate_limit
  3712 ;;		_system_init
  3713 ;; This function is called by:
  3714 ;;		Startup code after reset
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function _main
  3720  16CD                     _main:	
  3721                           
  3722                           ;main.c: 646: system_init( );
  3723                           
  3724                           ;incstack = 0
  3725                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3726  16CD  3193  234E  3196   	fcall	_system_init
  3727                           
  3728                           ;main.c: 647: clear_timer( 4 );
  3729  16D0  3004               	movlw	4
  3730  16D1  319E  26B7  3196   	fcall	_clear_timer
  3731                           
  3732                           ;main.c: 648: ui8_lastTaskvalue = 0;
  3733  16D4  0022               	movlb	2	; select bank2
  3734  16D5  01C5               	clrf	_ui8_lastTaskvalue^(0+256)
  3735  16D6                     l11621:	
  3736                           ;main.c: 699: while( 1 )
  3737                           
  3738                           
  3739                           ;main.c: 701: {;main.c: 703: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  3740  16D6  0022               	movlb	2	; select bank2
  3741  16D7  0845               	movf	_ui8_lastTaskvalue^(0+256),w
  3742  16D8  0020               	movlb	0	; select bank0
  3743  16D9  00C7               	movwf	??_main
  3744  16DA  01C8               	clrf	??_main+1
  3745  16DB  09C7               	comf	??_main,f
  3746  16DC  09C8               	comf	??_main+1,f
  3747  16DD  0AC7               	incf	??_main,f
  3748  16DE  1903               	skipnz
  3749  16DF  0AC8               	incf	??_main+1,f
  3750  16E0  0021               	movlb	1	; select bank1
  3751  16E1  0852               	movf	_ui8_Task_Cont1ms^(0+128),w
  3752  16E2  0020               	movlb	0	; select bank0
  3753  16E3  0747               	addwf	??_main,w
  3754  16E4  00C9               	movwf	??_main+2
  3755  16E5  0848               	movf	??_main+1,w
  3756  16E6  1803               	skipnc
  3757  16E7  0A48               	incf	??_main+1,w
  3758  16E8  00CA               	movwf	??_main+3
  3759  16E9  0849               	movf	??_main+2,w
  3760  16EA  044A               	iorwf	??_main+3,w
  3761  16EB  1903               	btfsc	3,2
  3762  16EC  2ED6               	goto	l11621
  3763                           
  3764                           ;main.c: 705: {;main.c: 711: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  3765  16ED  0021               	movlb	1	; select bank1
  3766  16EE  0852               	movf	_ui8_Task_Cont1ms^(0+128),w
  3767  16EF  0020               	movlb	0	; select bank0
  3768  16F0  00C7               	movwf	??_main
  3769  16F1  0847               	movf	??_main,w
  3770  16F2  0022               	movlb	2	; select bank2
  3771  16F3  00C5               	movwf	_ui8_lastTaskvalue^(0+256)
  3772                           
  3773                           ;main.c: 714: ui8_Task_Cont3ms++;
  3774  16F4  3001               	movlw	1
  3775  16F5  0020               	movlb	0	; select bank0
  3776  16F6  00C7               	movwf	??_main
  3777  16F7  0847               	movf	??_main,w
  3778  16F8  0022               	movlb	2	; select bank2
  3779  16F9  07C7               	addwf	_ui8_Task_Cont3ms^(0+256),f
  3780                           
  3781                           ;main.c: 715: ui8_Task_Cont5ms++;
  3782  16FA  3001               	movlw	1
  3783  16FB  0020               	movlb	0	; select bank0
  3784  16FC  00C7               	movwf	??_main
  3785  16FD  0847               	movf	??_main,w
  3786  16FE  0022               	movlb	2	; select bank2
  3787  16FF  07C6               	addwf	_ui8_Task_Cont5ms^(0+256),f
  3788                           
  3789                           ;main.c: 716: ui8_Task_Cont100ms++;
  3790  1700  3001               	movlw	1
  3791  1701  0020               	movlb	0	; select bank0
  3792  1702  00C7               	movwf	??_main
  3793  1703  0847               	movf	??_main,w
  3794  1704  0021               	movlb	1	; select bank1
  3795  1705  07CE               	addwf	_ui8_Task_Cont100ms^(0+128),f
  3796                           
  3797                           ;main.c: 935: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  3798  1706  307D               	movlw	125
  3799  1707  0020               	movlb	0	; select bank0
  3800  1708  009B               	movwf	27	;volatile
  3801                           
  3802                           ;main.c: 936: ui16_duty_cycle_BLDC = ui16_duty_cycle_mat*5/4;
  3803  1709  0023               	movlb	3	; select bank3
  3804  170A  083B               	movf	(_ui16_duty_cycle_mat+1)^(0+384),w
  3805  170B  0020               	movlb	0	; select bank0
  3806  170C  00A9               	movwf	___wmul@multiplier+1
  3807  170D  0023               	movlb	3	; select bank3
  3808  170E  083A               	movf	_ui16_duty_cycle_mat^(0+384),w
  3809  170F  0020               	movlb	0	; select bank0
  3810  1710  00A8               	movwf	___wmul@multiplier
  3811  1711  3005               	movlw	5
  3812  1712  00AA               	movwf	___wmul@multiplicand
  3813  1713  3000               	movlw	0
  3814  1714  00AB               	movwf	___wmul@multiplicand+1
  3815  1715  319E  2634  3196   	fcall	___wmul
  3816  1718  0020               	movlb	0	; select bank0
  3817  1719  0828               	movf	?___wmul,w
  3818  171A  00C7               	movwf	??_main
  3819  171B  0829               	movf	?___wmul+1,w
  3820  171C  00C8               	movwf	??_main+1
  3821  171D  36C8               	lsrf	??_main+1,f
  3822  171E  0CC7               	rrf	??_main,f
  3823  171F  36C8               	lsrf	??_main+1,f
  3824  1720  0CC7               	rrf	??_main,f
  3825  1721  0847               	movf	??_main,w
  3826  1722  0021               	movlb	1	; select bank1
  3827  1723  00B0               	movwf	_ui16_duty_cycle_BLDC^(0+128)
  3828  1724  0020               	movlb	0	; select bank0
  3829  1725  0848               	movf	??_main+1,w
  3830  1726  0021               	movlb	1	; select bank1
  3831  1727  00B1               	movwf	(_ui16_duty_cycle_BLDC+1)^(0+128)
  3832                           
  3833                           ;main.c: 953: Get_Analog_Value( );
  3834  1728  3187  27F7  3196   	fcall	_Get_Analog_Value
  3835                           
  3836                           ;main.c: 999: if( ui8_Task_Cont3ms > 2 )
  3837  172B  3003               	movlw	3
  3838  172C  0022               	movlb	2	; select bank2
  3839  172D  0247               	subwf	_ui8_Task_Cont3ms^(0+256),w
  3840  172E  1803               	btfsc	3,0
  3841                           
  3842                           ;main.c: 1001: {;main.c: 1003: ui8_Task_Cont3ms = 0;
  3843  172F  01C7               	clrf	_ui8_Task_Cont3ms^(0+256)
  3844                           
  3845                           ;main.c: 1038: };main.c: 1044: if( ui8_Task_Cont5ms > 4 )
  3846  1730  3005               	movlw	5
  3847  1731  0246               	subwf	_ui8_Task_Cont5ms^(0+256),w
  3848  1732  1C03               	skipc
  3849  1733  2FF0               	goto	l11699
  3850                           
  3851                           ;main.c: 1046: {;main.c: 1050: ui8_Task_Cont5ms = 0;
  3852  1734  01C6               	clrf	_ui8_Task_Cont5ms^(0+256)
  3853  1735  0064               	clrwdt	;# 
  3854                           
  3855                           ;main.c: 1058: pwm_cmd = PWMReadDC( );
  3856  1736  3196  261F  3196   	fcall	_PWMReadDC
  3857  1739  0020               	movlb	0	; select bank0
  3858  173A  00C7               	movwf	??_main
  3859  173B  0847               	movf	??_main,w
  3860  173C  0022               	movlb	2	; select bank2
  3861  173D  00C4               	movwf	_pwm_cmd^(0+256)
  3862                           
  3863                           ;main.c: 1059: ui8_PWM_dc_mat = rate_limit(pwm_cmd);
  3864  173E  0844               	movf	_pwm_cmd^(0+256),w
  3865  173F  0020               	movlb	0	; select bank0
  3866  1740  00C7               	movwf	??_main
  3867  1741  01C8               	clrf	??_main+1
  3868  1742  0847               	movf	??_main,w
  3869  1743  00AE               	movwf	rate_limit@pwm
  3870  1744  0848               	movf	??_main+1,w
  3871  1745  00AF               	movwf	rate_limit@pwm+1
  3872  1746  3194  247F  3196   	fcall	_rate_limit
  3873  1749  0020               	movlb	0	; select bank0
  3874  174A  082E               	movf	?_rate_limit,w
  3875  174B  00C9               	movwf	??_main+2
  3876  174C  0849               	movf	??_main+2,w
  3877  174D  0021               	movlb	1	; select bank1
  3878  174E  00D1               	movwf	_ui8_PWM_dc_mat^(0+128)
  3879                           
  3880                           ;main.c: 1062: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  3881  174F  0023               	movlb	3	; select bank3
  3882  1750  0837               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  3883  1751  00B9               	movwf	(_ui16_PWM_Freq_mat+1)^(0+384)
  3884  1752  0836               	movf	_ui16_PWM_Freq_In^(0+384),w
  3885  1753  00B8               	movwf	_ui16_PWM_Freq_mat^(0+384)
  3886                           
  3887                           ;main.c: 1063: ui16_Speed_mat = ui16_speed_fil;
  3888  1754  0021               	movlb	1	; select bank1
  3889  1755  0833               	movf	(_ui16_speed_fil+1)^(0+128),w
  3890  1756  0020               	movlb	0	; select bank0
  3891  1757  00D0               	movwf	_ui16_Speed_mat+1
  3892  1758  0021               	movlb	1	; select bank1
  3893  1759  0832               	movf	_ui16_speed_fil^(0+128),w
  3894  175A  0020               	movlb	0	; select bank0
  3895  175B  00CF               	movwf	_ui16_Speed_mat
  3896                           
  3897                           ;main.c: 1064: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  3898  175C  0023               	movlb	3	; select bank3
  3899  175D  0841               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  3900  175E  00B5               	movwf	(_ui16_mat_inpTemp+1)^(0+384)
  3901  175F  0840               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  3902  1760  00B4               	movwf	_ui16_mat_inpTemp^(0+384)
  3903                           
  3904                           ;main.c: 1065: ui8_Ki_mat = 5;
  3905  1761  3005               	movlw	5
  3906  1762  00B2               	movwf	_ui8_Ki_mat^(0+384)
  3907  1763  3000               	movlw	0
  3908  1764  00B3               	movwf	(_ui8_Ki_mat^(0+384)+1)
  3909                           
  3910                           ;main.c: 1066: ui8_Kp_mat = 0;
  3911  1765  0022               	movlb	2	; select bank2
  3912  1766  01CC               	clrf	_ui8_Kp_mat^(0+256)
  3913                           
  3914                           ;main.c: 1114: ui16_Speed_demand_mat = PWM_trans_table[ ui8_PWM_dc_mat ];
  3915  1767  0021               	movlb	1	; select bank1
  3916  1768  0851               	movf	_ui8_PWM_dc_mat^(0+128),w
  3917  1769  0020               	movlb	0	; select bank0
  3918  176A  00C7               	movwf	??_main
  3919  176B  01C8               	clrf	??_main+1
  3920  176C  35C7               	lslf	??_main,f
  3921  176D  0DC8               	rlf	??_main+1,f
  3922  176E  3000               	movlw	low (_PWM_trans_table| (0+32768))
  3923  176F  0747               	addwf	??_main,w
  3924  1770  0084               	movwf	4
  3925  1771  3090               	movlw	high (_PWM_trans_table| (0+32768))
  3926  1772  3D48               	addwfc	??_main+1,w
  3927  1773  0085               	movwf	5
  3928  1774  3F00               	moviw [0]fsr0
  3929  1775  0023               	movlb	3	; select bank3
  3930  1776  00B0               	movwf	_ui16_Speed_demand_mat^(0+384)
  3931  1777  3F01               	moviw [1]fsr0
  3932  1778  00B1               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  3933                           
  3934                           ;main.c: 1117: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 200 ] );
  3935  1779  3090               	movlw	low ((_PWM_trans_table+400)| (0+32768))
  3936  177A  0084               	movwf	4
  3937  177B  3091               	movlw	high ((_PWM_trans_table+400)| (0+32768))
  3938  177C  0085               	movwf	5
  3939  177D  3F00               	moviw [0]fsr0
  3940  177E  00AE               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  3941  177F  3F01               	moviw [1]fsr0
  3942  1780  00AF               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  3943                           
  3944                           ;main.c: 1120: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 20 ] );
  3945  1781  3028               	movlw	low ((_PWM_trans_table+40)| (0+32768))
  3946  1782  0084               	movwf	4
  3947  1783  3090               	movlw	high ((_PWM_trans_table+40)| (0+32768))
  3948  1784  0085               	movwf	5
  3949  1785  3F00               	moviw [0]fsr0
  3950  1786  00AC               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  3951  1787  3F01               	moviw [1]fsr0
  3952  1788  00AD               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  3953                           
  3954                           ;main.c: 1139: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  3955  1789  084F               	movf	(_ui16_fir_Bat_mittel+1)^(0+384),w
  3956  178A  0020               	movlb	0	; select bank0
  3957  178B  00C8               	movwf	??_main+1
  3958  178C  0023               	movlb	3	; select bank3
  3959  178D  084E               	movf	_ui16_fir_Bat_mittel^(0+384),w
  3960  178E  0020               	movlb	0	; select bank0
  3961  178F  00C7               	movwf	??_main
  3962  1790  36C8               	lsrf	??_main+1,f
  3963  1791  0CC7               	rrf	??_main,f
  3964  1792  36C8               	lsrf	??_main+1,f
  3965  1793  0CC7               	rrf	??_main,f
  3966  1794  0847               	movf	??_main,w
  3967  1795  00C9               	movwf	??_main+2
  3968  1796  01CA               	clrf	??_main+3
  3969  1797  0849               	movf	??_main+2,w
  3970  1798  0021               	movlb	1	; select bank1
  3971  1799  00AE               	movwf	_ui8_BattVolt_mat^(0+128)
  3972  179A  0020               	movlb	0	; select bank0
  3973  179B  084A               	movf	??_main+3,w
  3974  179C  0021               	movlb	1	; select bank1
  3975  179D  00AF               	movwf	(_ui8_BattVolt_mat+1)^(0+128)
  3976                           
  3977                           ;main.c: 1140: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  3978  179E  0023               	movlb	3	; select bank3
  3979  179F  084D               	movf	(_ui16_fir_IPhase_mean+1)^(0+384),w
  3980  17A0  0021               	movlb	1	; select bank1
  3981  17A1  00AD               	movwf	(_ui16_mat_Current+1)^(0+128)
  3982  17A2  0023               	movlb	3	; select bank3
  3983  17A3  084C               	movf	_ui16_fir_IPhase_mean^(0+384),w
  3984  17A4  0021               	movlb	1	; select bank1
  3985  17A5  00AC               	movwf	_ui16_mat_Current^(0+128)
  3986                           
  3987                           ;main.c: 1141: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  3988  17A6  3000               	movlw	0
  3989  17A7  0020               	movlb	0	; select bank0
  3990  17A8  185A               	btfsc	_MotorFlags,0
  3991  17A9  3001               	movlw	1
  3992  17AA  0021               	movlb	1	; select bank1
  3993  17AB  00D0               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  3994                           
  3995                           ;main.c: 1152: bool_ControlLoopMode = 0;
  3996  17AC  01CF               	clrf	_bool_ControlLoopMode^(0+128)
  3997                           
  3998                           ;main.c: 1160: BVH2_Appl_Layer( );
  3999  17AD  3180  2078  3196   	fcall	_BVH2_Appl_Layer
  4000                           
  4001                           ;main.c: 1163: ui8_ResetMatlab = 0;
  4002  17B0  0021               	movlb	1	; select bank1
  4003  17B1  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4004                           
  4005                           ;main.c: 1169: if( ui16_duty_cycle_mat == 0 )
  4006  17B2  0023               	movlb	3	; select bank3
  4007  17B3  083A               	movf	_ui16_duty_cycle_mat^(0+384),w
  4008  17B4  043B               	iorwf	(_ui16_duty_cycle_mat+1)^(0+384),w
  4009  17B5  1D03               	btfss	3,2
  4010  17B6  2FBB               	goto	l11679
  4011                           
  4012                           ;main.c: 1171: {;main.c: 1173: InitMotorStop( );
  4013  17B7  319D  258A  3196   	fcall	_InitMotorStop
  4014                           
  4015                           ;main.c: 1176: }
  4016  17BA  2FBE               	goto	l11681
  4017  17BB                     l11679:	
  4018                           
  4019                           ;main.c: 1179: else;main.c: 1180: {;main.c: 1182: InitMotorRun( );
  4020  17BB  319F  27CB  3196   	fcall	_InitMotorRun
  4021  17BE                     l11681:	
  4022                           
  4023                           ;main.c: 1185: };main.c: 1192: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  4024  17BE  0022               	movlb	2	; select bank2
  4025  17BF  084B               	movf	_bool_PWMin_err_Alarm^(0+256),w
  4026  17C0  3901               	andlw	1
  4027  17C1  0021               	movlb	1	; select bank1
  4028  17C2  1060               	bcf	_ui8_error_Flags^(0+128),0
  4029  17C3  1D03               	skipz
  4030  17C4  1460               	bsf	_ui8_error_Flags^(0+128),0
  4031                           
  4032                           ;main.c: 1193: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  4033  17C5  0858               	movf	_bool_CPU_TempAlarm^(0+128),w
  4034  17C6  3901               	andlw	1
  4035  17C7  10E0               	bcf	_ui8_error_Flags^(0+128),1
  4036  17C8  1D03               	skipz
  4037  17C9  14E0               	bsf	_ui8_error_Flags^(0+128),1
  4038                           
  4039                           ;main.c: 1194: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  4040  17CA  0022               	movlb	2	; select bank2
  4041  17CB  084A               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  4042  17CC  3901               	andlw	1
  4043  17CD  0021               	movlb	1	; select bank1
  4044  17CE  13E0               	bcf	_ui8_error_Flags^(0+128),7
  4045  17CF  1D03               	skipz
  4046  17D0  17E0               	bsf	_ui8_error_Flags^(0+128),7
  4047                           
  4048                           ;main.c: 1195: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  4049  17D1  0855               	movf	_bool_HighCurrentAlarm^(0+128),w
  4050  17D2  3901               	andlw	1
  4051  17D3  1160               	bcf	_ui8_error_Flags^(0+128),2
  4052  17D4  1D03               	skipz
  4053  17D5  1560               	bsf	_ui8_error_Flags^(0+128),2
  4054                           
  4055                           ;main.c: 1196: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  4056  17D6  0856               	movf	_bool_MotorStalled^(0+128),w
  4057  17D7  3901               	andlw	1
  4058  17D8  11E0               	bcf	_ui8_error_Flags^(0+128),3
  4059  17D9  1D03               	skipz
  4060  17DA  15E0               	bsf	_ui8_error_Flags^(0+128),3
  4061                           
  4062                           ;main.c: 1197: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  4063  17DB  0857               	movf	_bool_DryRunningAlarm^(0+128),w
  4064  17DC  3901               	andlw	1
  4065  17DD  1260               	bcf	_ui8_error_Flags^(0+128),4
  4066  17DE  1D03               	skipz
  4067  17DF  1660               	bsf	_ui8_error_Flags^(0+128),4
  4068                           
  4069                           ;main.c: 1198: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  4070  17E0  0022               	movlb	2	; select bank2
  4071  17E1  0849               	movf	_bool_UbatAlarm^(0+256),w
  4072  17E2  3901               	andlw	1
  4073  17E3  0021               	movlb	1	; select bank1
  4074  17E4  1360               	bcf	_ui8_error_Flags^(0+128),6
  4075  17E5  1D03               	skipz
  4076  17E6  1760               	bsf	_ui8_error_Flags^(0+128),6
  4077                           
  4078                           ;main.c: 1199: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  4079  17E7  0022               	movlb	2	; select bank2
  4080  17E8  0848               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  4081  17E9  3901               	andlw	1
  4082  17EA  0021               	movlb	1	; select bank1
  4083  17EB  12E0               	bcf	_ui8_error_Flags^(0+128),5
  4084  17EC  1D03               	skipz
  4085  17ED  16E0               	bsf	_ui8_error_Flags^(0+128),5
  4086                           
  4087                           ;main.c: 1204: MotorFlags.bits.B0 = 0;
  4088  17EE  0020               	movlb	0	; select bank0
  4089  17EF  105A               	bcf	_MotorFlags,0
  4090  17F0                     l11699:	
  4091                           
  4092                           ;main.c: 1260: };main.c: 1266: if( ui8_Task_Cont100ms == 25 )
  4093  17F0  3019               	movlw	25
  4094  17F1  0021               	movlb	1	; select bank1
  4095  17F2  064E               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  4096  17F3  1D03               	btfss	3,2
  4097  17F4  2FF8               	goto	l11709
  4098                           
  4099                           ;main.c: 1268: {;main.c: 1279: SetDiagAlarm( );
  4100  17F5  3192  2210  3196   	fcall	_SetDiagAlarm
  4101  17F8                     l11709:	
  4102                           ;main.c: 1439: {
  4103                           
  4104                           ;main.c: 1389: {
  4105                           
  4106                           ;main.c: 1351: {
  4107                           
  4108                           
  4109                           ;main.c: 1481: };main.c: 1487: if( ui8_Task_Cont100ms > 100 )
  4110  17F8  3065               	movlw	101
  4111  17F9  0021               	movlb	1	; select bank1
  4112  17FA  024E               	subwf	_ui8_Task_Cont100ms^(0+128),w
  4113  17FB  1803               	btfsc	3,0
  4114                           
  4115                           ;main.c: 1489: {;main.c: 1493: ui8_Task_Cont100ms = 0;
  4116  17FC  01CE               	clrf	_ui8_Task_Cont100ms^(0+128)
  4117                           
  4118                           ;main.c: 1533: };main.c: 1561: bool_start_demand_mat = 0;
  4119  17FD  0022               	movlb	2	; select bank2
  4120  17FE  01E6               	clrf	_bool_start_demand_mat^(0+256)
  4121                           
  4122                           ;main.c: 1570: else;main.c: 1571: {
  4123                           
  4124                           ;main.c: 1567: }
  4125  17FF  2ED6               	goto	l11621
  4126  1800                     __end_of_main:	
  4127                           
  4128                           	psect	text1
  4129  134E                     __ptext1:	
  4130 ;; *************** function _system_init *****************
  4131 ;; Defined at:
  4132 ;;		line 549 in file "../main.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  1    wreg      void 
  4139 ;; Registers used:
  4140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4146 ;;      Params:         0       0       0       0       0       0       0       0
  4147 ;;      Locals:         0       0       0       0       0       0       0       0
  4148 ;;      Temps:          0       0       0       0       0       0       0       0
  4149 ;;      Totals:         0       0       0       0       0       0       0       0
  4150 ;;Total ram usage:        0 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    6
  4153 ;; This function calls:
  4154 ;;		_ADC_Init
  4155 ;;		_DiagInit
  4156 ;;		_FILTER_Init
  4157 ;;		_I_calibrationInit
  4158 ;;		_Oscill_Source_Block
  4159 ;;		_PWM_Capture_init
  4160 ;;		_init_bldc
  4161 ;;		_init_ports
  4162 ;;		_timer_init
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _system_init
  4170  134E                     _system_init:	
  4171                           
  4172                           ;main.c: 553: OPTION_REG = 0b10000001;
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4176  134E  3081               	movlw	129
  4177  134F  0021               	movlb	1	; select bank1
  4178  1350  0095               	movwf	21	;volatile
  4179                           
  4180                           ;main.c: 562: ui8_ResetMatlab = 1;
  4181  1351  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4182  1352  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  4183                           
  4184                           ;main.c: 563: GIE = 0;
  4185  1353  138B               	bcf	11,7	;volatile
  4186                           
  4187                           ;main.c: 564: INTCON = 0;
  4188  1354  018B               	clrf	11	;volatile
  4189                           
  4190                           ;main.c: 565: PIE1 = 0;
  4191  1355  0191               	clrf	17	;volatile
  4192                           
  4193                           ;main.c: 566: PIE2 = 0;
  4194  1356  0192               	clrf	18	;volatile
  4195                           
  4196                           ;main.c: 567: PIE3 = 0;
  4197  1357  0193               	clrf	19	;volatile
  4198                           
  4199                           ;main.c: 569: ui16_Timer_VaL1 = 0;
  4200  1358  0024               	movlb	4	; select bank4
  4201  1359  01CE               	clrf	_ui16_Timer_VaL1^(0+512)
  4202  135A  01CF               	clrf	(_ui16_Timer_VaL1+1)^(0+512)
  4203                           
  4204                           ;main.c: 570: ui8_Task_Cont3ms = 0;
  4205  135B  0022               	movlb	2	; select bank2
  4206  135C  01C7               	clrf	_ui8_Task_Cont3ms^(0+256)
  4207                           
  4208                           ;main.c: 571: ui8_Task_Cont5ms = 0;
  4209  135D  01C6               	clrf	_ui8_Task_Cont5ms^(0+256)
  4210                           
  4211                           ;main.c: 572: ui8_Task_Cont100ms = 0;
  4212  135E  0021               	movlb	1	; select bank1
  4213  135F  01CE               	clrf	_ui8_Task_Cont100ms^(0+128)
  4214                           
  4215                           ;main.c: 573: ui8_DebugCnt = 0;
  4216  1360  0023               	movlb	3	; select bank3
  4217  1361  01DF               	clrf	_ui8_DebugCnt^(0+384)
  4218                           
  4219                           ;main.c: 575: ui8_Sync_Cont10ms = 0;
  4220  1362  01E0               	clrf	_ui8_Sync_Cont10ms^(0+384)
  4221                           
  4222                           ;main.c: 577: ui16_dryRun_Thresh = 73;
  4223  1363  3049               	movlw	73
  4224  1364  0024               	movlb	4	; select bank4
  4225  1365  00EC               	movwf	_ui16_dryRun_Thresh^(0+512)
  4226  1366  3000               	movlw	0
  4227  1367  00ED               	movwf	(_ui16_dryRun_Thresh^(0+512)+1)
  4228                           
  4229                           ;main.c: 579: ui16_Current_Thresh = 360;
  4230  1368  3068               	movlw	104
  4231  1369  0023               	movlb	3	; select bank3
  4232  136A  00ED               	movwf	_ui16_Current_Thresh^(0+384)
  4233  136B  3001               	movlw	1
  4234  136C  00EE               	movwf	(_ui16_Current_Thresh^(0+384)+1)
  4235                           
  4236                           ;main.c: 581: init_ports( );
  4237  136D  319D  25A7  3193   	fcall	_init_ports
  4238                           
  4239                           ;main.c: 592: Oscill_Source_Block( );
  4240  1370  319D  2549  3193   	fcall	_Oscill_Source_Block
  4241                           
  4242                           ;main.c: 593: timer_init( 1 );
  4243  1373  3001               	movlw	1
  4244  1374  3192  2281  3193   	fcall	_timer_init
  4245                           
  4246                           ;main.c: 594: timer_init( 4 );
  4247  1377  3004               	movlw	4
  4248  1378  3192  2281  3193   	fcall	_timer_init
  4249                           
  4250                           ;main.c: 595: timer_init( 6 );
  4251  137B  3006               	movlw	6
  4252  137C  3192  2281  3193   	fcall	_timer_init
  4253                           
  4254                           ;main.c: 598: PWM_Capture_init( 5 );
  4255  137F  3005               	movlw	5
  4256  1380  3188  2005  3193   	fcall	_PWM_Capture_init
  4257                           
  4258                           ;main.c: 599: ADC_Init( );
  4259  1383  319D  2572  3193   	fcall	_ADC_Init
  4260                           
  4261                           ;main.c: 600: DiagInit( );
  4262  1386  319D  257D  3193   	fcall	_DiagInit
  4263                           
  4264                           ;main.c: 601: FILTER_Init( );
  4265  1389  319E  26FE  3193   	fcall	_FILTER_Init
  4266                           
  4267                           ;main.c: 604: ui16_Temp_cal = 0;
  4268  138C  0023               	movlb	3	; select bank3
  4269  138D  01D0               	clrf	_ui16_Temp_cal^(0+384)
  4270  138E  01D1               	clrf	(_ui16_Temp_cal+1)^(0+384)
  4271                           
  4272                           ;main.c: 614: I_calibrationInit();
  4273  138F  3188  205C  3193   	fcall	_I_calibrationInit
  4274                           
  4275                           ;main.c: 616: init_bldc( );
  4276  1392  319F  2749         	fcall	_init_bldc
  4277                           
  4278                           ;main.c: 618: PEIE = 1;
  4279  1394  170B               	bsf	11,6	;volatile
  4280                           
  4281                           ;main.c: 619: GIE = 1;
  4282  1395  178B               	bsf	11,7	;volatile
  4283  1396  0008               	return
  4284  1397                     __end_of_system_init:	
  4285                           
  4286                           	psect	text2
  4287  1281                     __ptext2:	
  4288 ;; *************** function _timer_init *****************
  4289 ;; Defined at:
  4290 ;;		line 73 in file "../timer.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  ui8_TmrNb       1    9[BANK0 ] unsigned char 
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  1    wreg      void 
  4297 ;; Registers used:
  4298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4304 ;;      Params:         0       0       0       0       0       0       0       0
  4305 ;;      Locals:         0       1       0       0       0       0       0       0
  4306 ;;      Temps:          0       0       0       0       0       0       0       0
  4307 ;;      Totals:         0       1       0       0       0       0       0       0
  4308 ;;Total ram usage:        1 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    4
  4311 ;; This function calls:
  4312 ;;		_clear_timer
  4313 ;; This function is called by:
  4314 ;;		_system_init
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           
  4319                           ;psect for function _timer_init
  4320  1281                     _timer_init:	
  4321                           
  4322                           ;incstack = 0
  4323                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4324                           ;timer_init@ui8_TmrNb stored from wreg
  4325  1281  0020               	movlb	0	; select bank0
  4326  1282  00A9               	movwf	timer_init@ui8_TmrNb
  4327                           
  4328                           ;timer.c: 77: switch( ui8_TmrNb )
  4329  1283  2AAD               	goto	l5893
  4330  1284                     l5863:	
  4331                           ;timer.c: 79: {;timer.c: 81: case 0:
  4332                           
  4333                           
  4334                           ;timer.c: 83: {;timer.c: 86: clear_timer( 0 );
  4335  1284  3000               	movlw	0
  4336  1285  319E  26B7         	fcall	_clear_timer
  4337                           
  4338                           ;timer.c: 87: TMR0IE = 0;
  4339  1287  128B               	bcf	11,5	;volatile
  4340                           
  4341                           ;timer.c: 88: break;
  4342  1288  0008               	return
  4343  1289                     l5867:	
  4344                           ;timer.c: 90: };timer.c: 93: case 1:
  4345                           
  4346                           
  4347                           ;timer.c: 95: {;timer.c: 98: clear_timer( 1 );
  4348  1289  3001               	movlw	1
  4349  128A  319E  26B7         	fcall	_clear_timer
  4350                           
  4351                           ;timer.c: 99: T1CON = 0b01110101;
  4352  128C  3075               	movlw	117
  4353  128D  0020               	movlb	0	; select bank0
  4354  128E  0098               	movwf	24	;volatile
  4355                           
  4356                           ;timer.c: 100: TMR1IE = 0;
  4357  128F  0021               	movlb	1	; select bank1
  4358  1290  1011               	bcf	17,0	;volatile
  4359                           
  4360                           ;timer.c: 101: break;
  4361  1291  0008               	return
  4362  1292                     l5873:	
  4363                           ;timer.c: 103: };timer.c: 106: case 2:
  4364                           
  4365                           
  4366                           ;timer.c: 108: {;timer.c: 111: clear_timer( 2 );
  4367  1292  3002               	movlw	2
  4368  1293  319E  26B7         	fcall	_clear_timer
  4369                           
  4370                           ;timer.c: 112: T2CON = 0b00000111;
  4371  1295  3007               	movlw	7
  4372  1296  0020               	movlb	0	; select bank0
  4373  1297  009C               	movwf	28	;volatile
  4374                           
  4375                           ;timer.c: 113: TMR2IE = 0;
  4376  1298  0021               	movlb	1	; select bank1
  4377  1299  1091               	bcf	17,1	;volatile
  4378                           
  4379                           ;timer.c: 114: break;
  4380  129A  0008               	return
  4381  129B                     l5879:	
  4382                           ;timer.c: 116: };timer.c: 119: case 4:
  4383                           
  4384                           
  4385                           ;timer.c: 121: {;timer.c: 124: clear_timer( 4 );
  4386  129B  3004               	movlw	4
  4387  129C  319E  26B7         	fcall	_clear_timer
  4388                           
  4389                           ;timer.c: 125: T4CON = 0b00001110;
  4390  129E  300E               	movlw	14
  4391  129F  0028               	movlb	8	; select bank8
  4392  12A0  0097               	movwf	23	;volatile
  4393                           
  4394                           ;timer.c: 129: TMR4IE = 1;
  4395  12A1  0021               	movlb	1	; select bank1
  4396  12A2  1493               	bsf	19,1	;volatile
  4397                           
  4398                           ;timer.c: 131: break;
  4399  12A3  0008               	return
  4400  12A4                     l5885:	
  4401                           ;timer.c: 133: };timer.c: 136: case 6:
  4402                           
  4403                           
  4404                           ;timer.c: 138: {;timer.c: 141: clear_timer( 6 );
  4405  12A4  3006               	movlw	6
  4406  12A5  319E  26B7         	fcall	_clear_timer
  4407                           
  4408                           ;timer.c: 142: T6CON = 0b00000101;
  4409  12A7  3005               	movlw	5
  4410  12A8  0028               	movlb	8	; select bank8
  4411  12A9  009E               	movwf	30	;volatile
  4412                           
  4413                           ;timer.c: 161: TMR6IE = 0;
  4414  12AA  0021               	movlb	1	; select bank1
  4415  12AB  1193               	bcf	19,3	;volatile
  4416                           
  4417                           ;timer.c: 181: };timer.c: 183: }
  4418                           
  4419                           ;timer.c: 176: {;timer.c: 178: break;
  4420                           
  4421                           ;timer.c: 171: };timer.c: 175: default:
  4422                           
  4423                           ;timer.c: 169: break;
  4424  12AC  0008               	return
  4425  12AD                     l5893:	
  4426  12AD  0020               	movlb	0	; select bank0
  4427  12AE  0829               	movf	timer_init@ui8_TmrNb,w
  4428                           
  4429                           ; Switch size 1, requested type "space"
  4430                           ; Number of cases is 5, Range of values is 0 to 6
  4431                           ; switch strategies available:
  4432                           ; Name         Instructions Cycles
  4433                           ; simple_byte           16     9 (average)
  4434                           ; direct_byte           20     6 (fixed)
  4435                           ; jumptable            260     6 (fixed)
  4436                           ;	Chosen strategy is simple_byte
  4437  12AF  3A00               	xorlw	0	; case 0
  4438  12B0  1903               	skipnz
  4439  12B1  2A84               	goto	l5863
  4440  12B2  3A01               	xorlw	1	; case 1
  4441  12B3  1903               	skipnz
  4442  12B4  2A89               	goto	l5867
  4443  12B5  3A03               	xorlw	3	; case 2
  4444  12B6  1903               	skipnz
  4445  12B7  2A92               	goto	l5873
  4446  12B8  3A06               	xorlw	6	; case 4
  4447  12B9  1903               	skipnz
  4448  12BA  2A9B               	goto	l5879
  4449  12BB  3A02               	xorlw	2	; case 6
  4450  12BC  1903               	skipnz
  4451  12BD  2AA4               	goto	l5885
  4452  12BE  2ABF               	goto	l1730
  4453  12BF                     l1730:	
  4454  12BF  0008               	return
  4455  12C0                     __end_of_timer_init:	
  4456                           
  4457                           	psect	text3
  4458  1EB7                     __ptext3:	
  4459 ;; *************** function _clear_timer *****************
  4460 ;; Defined at:
  4461 ;;		line 302 in file "../timer.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;  ui8_TmrNb       1    8[BANK0 ] unsigned char 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  1    wreg      void 
  4468 ;; Registers used:
  4469 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4475 ;;      Params:         0       0       0       0       0       0       0       0
  4476 ;;      Locals:         0       1       0       0       0       0       0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0       0
  4478 ;;      Totals:         0       1       0       0       0       0       0       0
  4479 ;;Total ram usage:        1 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    3
  4482 ;; This function calls:
  4483 ;;		Nothing
  4484 ;; This function is called by:
  4485 ;;		_main
  4486 ;;		_timer_init
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           
  4491                           ;psect for function _clear_timer
  4492  1EB7                     _clear_timer:	
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  4496                           ;clear_timer@ui8_TmrNb stored from wreg
  4497  1EB7  0020               	movlb	0	; select bank0
  4498  1EB8  00A8               	movwf	clear_timer@ui8_TmrNb
  4499                           
  4500                           ;timer.c: 306: switch( ui8_TmrNb )
  4501  1EB9  2EC7               	goto	l5703
  4502  1EBA                     l5691:	
  4503                           ;timer.c: 308: {;timer.c: 310: case 0:
  4504                           
  4505                           
  4506                           ;timer.c: 312: {;timer.c: 314: TMR0 = 0;
  4507  1EBA  0195               	clrf	21	;volatile
  4508                           
  4509                           ;timer.c: 315: break;
  4510  1EBB  0008               	return
  4511  1EBC                     l5693:	
  4512                           ;timer.c: 317: };timer.c: 320: case 1:
  4513                           
  4514                           
  4515                           ;timer.c: 322: {;timer.c: 324: TMR1L = 0x00;
  4516  1EBC  0196               	clrf	22	;volatile
  4517                           
  4518                           ;timer.c: 325: TMR1H = 0x00;
  4519  1EBD  0197               	clrf	23	;volatile
  4520                           
  4521                           ;timer.c: 326: break;
  4522  1EBE  0008               	return
  4523  1EBF                     l5695:	
  4524                           ;timer.c: 328: };timer.c: 331: case 2:
  4525                           
  4526                           
  4527                           ;timer.c: 333: {;timer.c: 335: TMR2 = 0;
  4528  1EBF  019A               	clrf	26	;volatile
  4529                           
  4530                           ;timer.c: 336: break;
  4531  1EC0  0008               	return
  4532  1EC1                     l5697:	
  4533                           ;timer.c: 338: };timer.c: 341: case 4:
  4534                           
  4535                           
  4536                           ;timer.c: 343: {;timer.c: 345: TMR4 = 0;
  4537  1EC1  0028               	movlb	8	; select bank8
  4538  1EC2  0195               	clrf	21	;volatile
  4539                           
  4540                           ;timer.c: 346: break;
  4541  1EC3  0008               	return
  4542  1EC4                     l5699:	
  4543                           ;timer.c: 348: };timer.c: 351: case 6:
  4544                           
  4545                           
  4546                           ;timer.c: 353: {;timer.c: 355: TMR6 = 0;
  4547  1EC4  0028               	movlb	8	; select bank8
  4548  1EC5  019C               	clrf	28	;volatile
  4549                           
  4550                           ;timer.c: 368: };timer.c: 370: }
  4551                           
  4552                           ;timer.c: 363: {;timer.c: 365: break;
  4553                           
  4554                           ;timer.c: 358: };timer.c: 362: default:
  4555                           
  4556                           ;timer.c: 356: break;
  4557  1EC6  0008               	return
  4558  1EC7                     l5703:	
  4559  1EC7  0020               	movlb	0	; select bank0
  4560  1EC8  0828               	movf	clear_timer@ui8_TmrNb,w
  4561                           
  4562                           ; Switch size 1, requested type "space"
  4563                           ; Number of cases is 5, Range of values is 0 to 6
  4564                           ; switch strategies available:
  4565                           ; Name         Instructions Cycles
  4566                           ; simple_byte           16     9 (average)
  4567                           ; direct_byte           20     6 (fixed)
  4568                           ; jumptable            260     6 (fixed)
  4569                           ;	Chosen strategy is simple_byte
  4570  1EC9  3A00               	xorlw	0	; case 0
  4571  1ECA  1903               	skipnz
  4572  1ECB  2EBA               	goto	l5691
  4573  1ECC  3A01               	xorlw	1	; case 1
  4574  1ECD  1903               	skipnz
  4575  1ECE  2EBC               	goto	l5693
  4576  1ECF  3A03               	xorlw	3	; case 2
  4577  1ED0  1903               	skipnz
  4578  1ED1  2EBF               	goto	l5695
  4579  1ED2  3A06               	xorlw	6	; case 4
  4580  1ED3  1903               	skipnz
  4581  1ED4  2EC1               	goto	l5697
  4582  1ED5  3A02               	xorlw	2	; case 6
  4583  1ED6  1903               	skipnz
  4584  1ED7  2EC4               	goto	l5699
  4585  1ED8  2ED9               	goto	l1753
  4586  1ED9                     l1753:	
  4587  1ED9  0008               	return
  4588  1EDA                     __end_of_clear_timer:	
  4589                           
  4590                           	psect	text4
  4591  1DA7                     __ptext4:	
  4592 ;; *************** function _init_ports *****************
  4593 ;; Defined at:
  4594 ;;		line 408 in file "../main.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  1    wreg      void 
  4601 ;; Registers used:
  4602 ;;		wreg, status,2
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4608 ;;      Params:         0       0       0       0       0       0       0       0
  4609 ;;      Locals:         0       0       0       0       0       0       0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0
  4611 ;;      Totals:         0       0       0       0       0       0       0       0
  4612 ;;Total ram usage:        0 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    3
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_system_init
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           
  4623                           ;psect for function _init_ports
  4624  1DA7                     _init_ports:	
  4625                           
  4626                           ;main.c: 415: ANSELA = 0b00100111;
  4627                           
  4628                           ;incstack = 0
  4629                           ; Regs used in _init_ports: [wreg+status,2]
  4630  1DA7  3027               	movlw	39
  4631  1DA8  0023               	movlb	3	; select bank3
  4632  1DA9  008C               	movwf	12	;volatile
  4633                           
  4634                           ;main.c: 416: ANSELB = 0b00101001;
  4635  1DAA  3029               	movlw	41
  4636  1DAB  008D               	movwf	13	;volatile
  4637                           
  4638                           ;main.c: 419: LATA = 0;
  4639  1DAC  0022               	movlb	2	; select bank2
  4640  1DAD  018C               	clrf	12	;volatile
  4641                           
  4642                           ;main.c: 420: LATB = 0;
  4643  1DAE  018D               	clrf	13	;volatile
  4644                           
  4645                           ;main.c: 421: LATC = 0;
  4646  1DAF  018E               	clrf	14	;volatile
  4647                           
  4648                           ;main.c: 502: TRISA = 0b01111111;
  4649  1DB0  307F               	movlw	127
  4650  1DB1  0021               	movlb	1	; select bank1
  4651  1DB2  008C               	movwf	12	;volatile
  4652                           
  4653                           ;main.c: 511: TRISB = 0b00111001;
  4654  1DB3  3039               	movlw	57
  4655  1DB4  008D               	movwf	13	;volatile
  4656                           
  4657                           ;main.c: 520: TRISC = 0b00000000;
  4658  1DB5  018E               	clrf	14	;volatile
  4659  1DB6  0008               	return
  4660  1DB7                     __end_of_init_ports:	
  4661                           
  4662                           	psect	text5
  4663  1F49                     __ptext5:	
  4664 ;; *************** function _init_bldc *****************
  4665 ;; Defined at:
  4666 ;;		line 207 in file "../bldc.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      void 
  4673 ;; Registers used:
  4674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4680 ;;      Params:         0       0       0       0       0       0       0       0
  4681 ;;      Locals:         0       0       0       0       0       0       0       0
  4682 ;;      Temps:          0       1       0       0       0       0       0       0
  4683 ;;      Totals:         0       1       0       0       0       0       0       0
  4684 ;;Total ram usage:        1 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    5
  4687 ;; This function calls:
  4688 ;;		_InitMotorRun
  4689 ;; This function is called by:
  4690 ;;		_system_init
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           
  4695                           ;psect for function _init_bldc
  4696  1F49                     _init_bldc:	
  4697                           
  4698                           ;bldc.c: 218: PSTR1CON = 0;
  4699                           
  4700                           ;incstack = 0
  4701                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4702  1F49  0025               	movlb	5	; select bank5
  4703  1F4A  0196               	clrf	22	;volatile
  4704                           
  4705                           ;bldc.c: 222: CM1CON0 = 0x80;
  4706  1F4B  3080               	movlw	128
  4707  1F4C  0022               	movlb	2	; select bank2
  4708  1F4D  0091               	movwf	17	;volatile
  4709                           
  4710                           ;bldc.c: 228: CM1CON1 = 0x00;
  4711  1F4E  0192               	clrf	18	;volatile
  4712                           
  4713                           ;bldc.c: 230: C1IE = 0;
  4714  1F4F  0021               	movlb	1	; select bank1
  4715  1F50  1292               	bcf	18,5	;volatile
  4716                           
  4717                           ;bldc.c: 235: PWM1CON = 0x87;
  4718  1F51  3087               	movlw	135
  4719  1F52  0025               	movlb	5	; select bank5
  4720  1F53  0094               	movwf	20	;volatile
  4721                           
  4722                           ;bldc.c: 239: CCP1AS = 0x800;
  4723  1F54  0195               	clrf	21	;volatile
  4724                           
  4725                           ;bldc.c: 240: CCP1CON = 0x0C;
  4726  1F55  300C               	movlw	12
  4727  1F56  0093               	movwf	19	;volatile
  4728                           
  4729                           ;bldc.c: 246: CCPR1L = 0;
  4730  1F57  0191               	clrf	17	;volatile
  4731                           
  4732                           ;bldc.c: 248: CCP2IE = 0;
  4733  1F58  0021               	movlb	1	; select bank1
  4734  1F59  1012               	bcf	18,0	;volatile
  4735                           
  4736                           ;bldc.c: 249: CCP2CON = 0x04;
  4737  1F5A  3004               	movlw	4
  4738  1F5B  0025               	movlb	5	; select bank5
  4739  1F5C  009A               	movwf	26	;volatile
  4740                           
  4741                           ;bldc.c: 250: CCPR2L = 0xff;
  4742  1F5D  30FF               	movlw	255
  4743  1F5E  0098               	movwf	24	;volatile
  4744                           
  4745                           ;bldc.c: 251: CCPR2H = 0xff;
  4746  1F5F  30FF               	movlw	255
  4747  1F60  0099               	movwf	25	;volatile
  4748                           
  4749                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  4750  1F61  3064               	movlw	100
  4751  1F62  0020               	movlb	0	; select bank0
  4752  1F63  009B               	movwf	27	;volatile
  4753                           
  4754                           ;bldc.c: 255: T2CON = 0x05;
  4755  1F64  3005               	movlw	5
  4756  1F65  009C               	movwf	28	;volatile
  4757                           
  4758                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  4759  1F66  3028               	movlw	40
  4760  1F67  00B4               	movwf	??_init_bldc
  4761  1F68  0834               	movf	??_init_bldc,w
  4762  1F69  0021               	movlb	1	; select bank1
  4763  1F6A  00DD               	movwf	_ui8_BlankingCount^(0+128)
  4764                           
  4765                           ;bldc.c: 264: TMR2IE = 1;
  4766  1F6B  1491               	bsf	17,1	;volatile
  4767                           
  4768                           ;bldc.c: 267: MotorFlags.b = 0;
  4769  1F6C  0020               	movlb	0	; select bank0
  4770  1F6D  01DA               	clrf	_MotorFlags
  4771                           
  4772                           ;bldc.c: 270: InitMotorRun( );
  4773  1F6E  319F  27CB         	fcall	_InitMotorRun
  4774  1F70  0008               	return
  4775  1F71                     __end_of_init_bldc:	
  4776                           
  4777                           	psect	text6
  4778  1FCB                     __ptext6:	
  4779 ;; *************** function _InitMotorRun *****************
  4780 ;; Defined at:
  4781 ;;		line 2171 in file "../bldc.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4795 ;;      Params:         0       0       0       0       0       0       0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0       0
  4798 ;;      Totals:         0       0       0       0       0       0       0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    4
  4802 ;; This function calls:
  4803 ;;		_commutate
  4804 ;; This function is called by:
  4805 ;;		_init_bldc
  4806 ;;		_main
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           
  4811                           ;psect for function _InitMotorRun
  4812  1FCB                     _InitMotorRun:	
  4813                           
  4814                           ;bldc.c: 2176: if( 0 == MotorFlags.bits.B6 )
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4818  1FCB  0020               	movlb	0	; select bank0
  4819  1FCC  1B5A               	btfsc	_MotorFlags,6
  4820  1FCD  0008               	return
  4821                           
  4822                           ;bldc.c: 2179: {;bldc.c: 2181: MotorFlags.bits.B5 = 0;
  4823  1FCE  12DA               	bcf	_MotorFlags,5
  4824                           
  4825                           ;bldc.c: 2182: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  4826  1FCF  30A6               	movlw	166
  4827  1FD0  0022               	movlb	2	; select bank2
  4828  1FD1  00A7               	movwf	_ui16_comm_time_max^(0+256)
  4829  1FD2  3000               	movlw	0
  4830  1FD3  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
  4831                           
  4832                           ;bldc.c: 2183: comm_state = 1;
  4833  1FD4  0021               	movlb	1	; select bank1
  4834  1FD5  01DE               	clrf	_comm_state^(0+128)
  4835  1FD6  0ADE               	incf	_comm_state^(0+128),f
  4836                           
  4837                           ;bldc.c: 2184: ui16_step_cnt = 0;
  4838  1FD7  01BA               	clrf	_ui16_step_cnt^(0+128)
  4839  1FD8  01BB               	clrf	(_ui16_step_cnt+1)^(0+128)
  4840                           
  4841                           ;bldc.c: 2185: ui16_duty_cycle_BLDC = 0;
  4842  1FD9  01B0               	clrf	_ui16_duty_cycle_BLDC^(0+128)
  4843  1FDA  01B1               	clrf	(_ui16_duty_cycle_BLDC+1)^(0+128)
  4844                           
  4845                           ;bldc.c: 2186: comm_time = 0;
  4846  1FDB  0020               	movlb	0	; select bank0
  4847  1FDC  01D3               	clrf	_comm_time
  4848  1FDD  01D4               	clrf	_comm_time+1
  4849                           
  4850                           ;bldc.c: 2187: bemf_filter = 0;
  4851  1FDE  0022               	movlb	2	; select bank2
  4852  1FDF  01E5               	clrf	_bemf_filter^(0+256)
  4853                           
  4854                           ;bldc.c: 2188: phase_delay_counter = 0;
  4855  1FE0  0021               	movlb	1	; select bank1
  4856  1FE1  01B8               	clrf	_phase_delay_counter^(0+128)
  4857  1FE2  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  4858                           
  4859                           ;bldc.c: 2189: phase_delay_counter_debug = 0;
  4860  1FE3  0024               	movlb	4	; select bank4
  4861  1FE4  01E4               	clrf	_phase_delay_counter_debug^(0+512)
  4862  1FE5  01E5               	clrf	(_phase_delay_counter_debug+1)^(0+512)
  4863                           
  4864                           ;bldc.c: 2190: PSTR1CON = 0;
  4865  1FE6  0025               	movlb	5	; select bank5
  4866  1FE7  0196               	clrf	22	;volatile
  4867                           
  4868                           ;bldc.c: 2193: MotorFlags.bits.B3 = 1 ;
  4869  1FE8  0020               	movlb	0	; select bank0
  4870  1FE9  15DA               	bsf	_MotorFlags,3
  4871                           
  4872                           ;bldc.c: 2194: MotorFlags.bits.B6 = 1 ;
  4873  1FEA  175A               	bsf	_MotorFlags,6
  4874                           
  4875                           ;bldc.c: 2195: ui16_phase_angle = 128;
  4876  1FEB  3080               	movlw	128
  4877  1FEC  0024               	movlb	4	; select bank4
  4878  1FED  00E2               	movwf	_ui16_phase_angle^(0+512)
  4879  1FEE  3000               	movlw	0
  4880  1FEF  00E3               	movwf	(_ui16_phase_angle^(0+512)+1)
  4881                           
  4882                           ;bldc.c: 2196: ui8_StartupPWM = 0 ;
  4883  1FF0  0021               	movlb	1	; select bank1
  4884  1FF1  01DF               	clrf	_ui8_StartupPWM^(0+128)
  4885                           
  4886                           ;bldc.c: 2197: CCPR1L = 0 ;
  4887  1FF2  0025               	movlb	5	; select bank5
  4888  1FF3  0191               	clrf	17	;volatile
  4889                           
  4890                           ;bldc.c: 2198: ui8_sampleState = 0 ;
  4891  1FF4  0022               	movlb	2	; select bank2
  4892  1FF5  01E2               	clrf	_ui8_sampleState^(0+256)
  4893                           
  4894                           ;bldc.c: 2199: ui8_zero_cros_cnt = 0 ;
  4895  1FF6  0024               	movlb	4	; select bank4
  4896  1FF7  01E6               	clrf	_ui8_zero_cros_cnt^(0+512)
  4897  1FF8  01E7               	clrf	(_ui8_zero_cros_cnt+1)^(0+512)
  4898                           
  4899                           ;bldc.c: 2200: MotorFlags.bits.B4 = 1 ;
  4900  1FF9  0020               	movlb	0	; select bank0
  4901  1FFA  165A               	bsf	_MotorFlags,4
  4902                           
  4903                           ;bldc.c: 2208: commutate( );
  4904  1FFB  318D  25A4         	fcall	_commutate
  4905  1FFD  0008               	return
  4906  1FFE                     __end_of_InitMotorRun:	
  4907                           
  4908                           	psect	text7
  4909  0DA4                     __ptext7:	
  4910 ;; *************** function _commutate *****************
  4911 ;; Defined at:
  4912 ;;		line 1426 in file "../bldc.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4926 ;;      Params:         0       0       0       0       0       0       0       0
  4927 ;;      Locals:         0       0       0       0       0       0       0       0
  4928 ;;      Temps:          0      12       0       0       0       0       0       0
  4929 ;;      Totals:         0      12       0       0       0       0       0       0
  4930 ;;Total ram usage:       12 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    3
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_InitMotorRun
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           
  4941                           ;psect for function _commutate
  4942  0DA4                     _commutate:	
  4943                           
  4944                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0]
  4948  0DA4  3000               	movlw	0
  4949  0DA5  0021               	movlb	1	; select bank1
  4950  0DA6  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  4951  0DA7  300A               	movlw	10
  4952  0DA8  1903               	skipnz
  4953  0DA9  023A               	subwf	_ui16_step_cnt^(0+128),w
  4954  0DAA  1803               	skipnc
  4955  0DAB  2DB0               	goto	l5389
  4956                           
  4957                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
  4958  0DAC  3001               	movlw	1
  4959  0DAD  07BA               	addwf	_ui16_step_cnt^(0+128),f
  4960  0DAE  3000               	movlw	0
  4961  0DAF  3DBB               	addwfc	(_ui16_step_cnt+1)^(0+128),f
  4962  0DB0                     l5389:	
  4963                           
  4964                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  4965  0DB0  3559               	lslf	_Bcnt^(0+128),w
  4966  0DB1  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4967  0DB2  0086               	movwf	6
  4968  0DB3  3002               	movlw	2	; select bank4/5
  4969  0DB4  0087               	movwf	7
  4970  0DB5  0020               	movlb	0	; select bank0
  4971  0DB6  0853               	movf	_comm_time,w
  4972  0DB7  3FC0               	movwi [0]fsr1
  4973  0DB8  0854               	movf	_comm_time+1,w
  4974  0DB9  3FC1               	movwi [1]fsr1
  4975  0DBA  3001               	movlw	1
  4976  0DBB  00A8               	movwf	??_commutate
  4977  0DBC  0828               	movf	??_commutate,w
  4978  0DBD  0021               	movlb	1	; select bank1
  4979  0DBE  07D9               	addwf	_Bcnt^(0+128),f
  4980                           
  4981                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  4982  0DBF  3007               	movlw	7
  4983  0DC0  0020               	movlb	0	; select bank0
  4984  0DC1  00A8               	movwf	??_commutate
  4985  0DC2  0828               	movf	??_commutate,w
  4986  0DC3  0021               	movlb	1	; select bank1
  4987  0DC4  05D9               	andwf	_Bcnt^(0+128),f
  4988                           
  4989                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  4990  0DC5  300E               	movlw	14
  4991  0DC6  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4992  0DC7  0086               	movwf	6
  4993  0DC8  3002               	movlw	2	; select bank4/5
  4994  0DC9  0087               	movwf	7
  4995  0DCA  300C               	movlw	12
  4996  0DCB  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4997  0DCC  0084               	movwf	4
  4998  0DCD  3002               	movlw	2	; select bank4/5
  4999  0DCE  0085               	movwf	5
  5000  0DCF  0024               	movlb	4	; select bank4
  5001  0DD0  0824               	movf	(_B^(0+512)+4),w
  5002  0DD1  0722               	addwf	(_B^(0+512)+2),w
  5003  0DD2  0020               	movlb	0	; select bank0
  5004  0DD3  00A8               	movwf	??_commutate
  5005  0DD4  0024               	movlb	4	; select bank4
  5006  0DD5  0825               	movf	((_B+1)^(0+512)+4),w
  5007  0DD6  3D23               	addwfc	((_B+1)^(0+512)+2),w
  5008  0DD7  0020               	movlb	0	; select bank0
  5009  0DD8  00A9               	movwf	??_commutate+1
  5010  0DD9  0024               	movlb	4	; select bank4
  5011  0DDA  0826               	movf	(_B^(0+512)+6),w
  5012  0DDB  0020               	movlb	0	; select bank0
  5013  0DDC  0728               	addwf	??_commutate,w
  5014  0DDD  00AA               	movwf	??_commutate+2
  5015  0DDE  0024               	movlb	4	; select bank4
  5016  0DDF  0827               	movf	((_B+1)^(0+512)+6),w
  5017  0DE0  0020               	movlb	0	; select bank0
  5018  0DE1  3D29               	addwfc	??_commutate+1,w
  5019  0DE2  00AB               	movwf	??_commutate+3
  5020  0DE3  0024               	movlb	4	; select bank4
  5021  0DE4  0828               	movf	(_B^(0+512)+8),w
  5022  0DE5  0020               	movlb	0	; select bank0
  5023  0DE6  072A               	addwf	??_commutate+2,w
  5024  0DE7  00AC               	movwf	??_commutate+4
  5025  0DE8  0024               	movlb	4	; select bank4
  5026  0DE9  0829               	movf	((_B+1)^(0+512)+8),w
  5027  0DEA  0020               	movlb	0	; select bank0
  5028  0DEB  3D2B               	addwfc	??_commutate+3,w
  5029  0DEC  00AD               	movwf	??_commutate+5
  5030  0DED  0024               	movlb	4	; select bank4
  5031  0DEE  082A               	movf	(_B^(0+512)+10),w
  5032  0DEF  0020               	movlb	0	; select bank0
  5033  0DF0  072C               	addwf	??_commutate+4,w
  5034  0DF1  00AE               	movwf	??_commutate+6
  5035  0DF2  0024               	movlb	4	; select bank4
  5036  0DF3  082B               	movf	((_B+1)^(0+512)+10),w
  5037  0DF4  0020               	movlb	0	; select bank0
  5038  0DF5  3D2D               	addwfc	??_commutate+5,w
  5039  0DF6  00AF               	movwf	??_commutate+7
  5040  0DF7  3F00               	moviw [0]fsr0
  5041  0DF8  072E               	addwf	??_commutate+6,w
  5042  0DF9  00B0               	movwf	??_commutate+8
  5043  0DFA  3F01               	moviw [1]fsr0
  5044  0DFB  3D2F               	addwfc	??_commutate+7,w
  5045  0DFC  00B1               	movwf	??_commutate+9
  5046  0DFD  3F40               	moviw [0]fsr1
  5047  0DFE  0730               	addwf	??_commutate+8,w
  5048  0DFF  00B2               	movwf	??_commutate+10
  5049  0E00  3F41               	moviw [1]fsr1
  5050  0E01  3D31               	addwfc	??_commutate+9,w
  5051  0E02  00B3               	movwf	??_commutate+11
  5052  0E03  0024               	movlb	4	; select bank4
  5053  0E04  0820               	movf	_B^(0+512),w
  5054  0E05  0020               	movlb	0	; select bank0
  5055  0E06  0732               	addwf	??_commutate+10,w
  5056  0E07  0021               	movlb	1	; select bank1
  5057  0E08  00B2               	movwf	_ui16_speed_fil^(0+128)
  5058  0E09  0024               	movlb	4	; select bank4
  5059  0E0A  0821               	movf	(_B+1)^(0+512),w
  5060  0E0B  0020               	movlb	0	; select bank0
  5061  0E0C  3D33               	addwfc	??_commutate+11,w
  5062  0E0D  0021               	movlb	1	; select bank1
  5063  0E0E  00B3               	movwf	(_ui16_speed_fil+1)^(0+128)
  5064                           
  5065                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  5066  0E0F  0020               	movlb	0	; select bank0
  5067  0E10  0854               	movf	_comm_time+1,w
  5068  0E11  0023               	movlb	3	; select bank3
  5069  0E12  00BD               	movwf	(_ui16_speed_rar+1)^(0+384)
  5070  0E13  0020               	movlb	0	; select bank0
  5071  0E14  0853               	movf	_comm_time,w
  5072  0E15  0023               	movlb	3	; select bank3
  5073  0E16  00BC               	movwf	_ui16_speed_rar^(0+384)
  5074                           
  5075                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  5076  0E17  0020               	movlb	0	; select bank0
  5077  0E18  12DA               	bcf	_MotorFlags,5
  5078                           
  5079                           ;bldc.c: 1451: ui8_sampleState = 1;
  5080  0E19  0022               	movlb	2	; select bank2
  5081  0E1A  01E2               	clrf	_ui8_sampleState^(0+256)
  5082  0E1B  0AE2               	incf	_ui8_sampleState^(0+256),f
  5083                           
  5084                           ;bldc.c: 1455: bemf_filter = 62;
  5085  0E1C  303E               	movlw	62
  5086  0E1D  0020               	movlb	0	; select bank0
  5087  0E1E  00A8               	movwf	??_commutate
  5088  0E1F  0828               	movf	??_commutate,w
  5089  0E20  0022               	movlb	2	; select bank2
  5090  0E21  00E5               	movwf	_bemf_filter^(0+256)
  5091                           
  5092                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  5093  0E22  0020               	movlb	0	; select bank0
  5094  0E23  17DA               	bsf	_MotorFlags,7
  5095                           
  5096                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  5097  0E24  1DDA               	btfss	_MotorFlags,3
  5098  0E25  2E9F               	goto	l327
  5099                           
  5100                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
  5101  0E26  0023               	movlb	3	; select bank3
  5102  0E27  083D               	movf	(_ui16_speed_rar+1)^(0+384),w
  5103  0E28  0020               	movlb	0	; select bank0
  5104  0E29  00A9               	movwf	??_commutate+1
  5105  0E2A  0023               	movlb	3	; select bank3
  5106  0E2B  083C               	movf	_ui16_speed_rar^(0+384),w
  5107  0E2C  0020               	movlb	0	; select bank0
  5108  0E2D  00A8               	movwf	??_commutate
  5109  0E2E  36A9               	lsrf	??_commutate+1,f
  5110  0E2F  0CA8               	rrf	??_commutate,f
  5111  0E30  36A9               	lsrf	??_commutate+1,f
  5112  0E31  0CA8               	rrf	??_commutate,f
  5113  0E32  36A9               	lsrf	??_commutate+1,f
  5114  0E33  0CA8               	rrf	??_commutate,f
  5115  0E34  30FF               	movlw	255
  5116  0E35  0528               	andwf	??_commutate,w
  5117  0E36  0021               	movlb	1	; select bank1
  5118  0E37  00B6               	movwf	_ui16_phase_advancement^(0+128)
  5119  0E38  3001               	movlw	1
  5120  0E39  0020               	movlb	0	; select bank0
  5121  0E3A  0529               	andwf	??_commutate+1,w
  5122  0E3B  0021               	movlb	1	; select bank1
  5123  0E3C  00B7               	movwf	(_ui16_phase_advancement+1)^(0+128)
  5124                           
  5125                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  5126  0E3D  0020               	movlb	0	; select bank0
  5127  0E3E  0854               	movf	_comm_time+1,w
  5128  0E3F  0021               	movlb	1	; select bank1
  5129  0E40  0237               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  5130  0E41  1D03               	skipz
  5131  0E42  2E47               	goto	u2805
  5132  0E43  0020               	movlb	0	; select bank0
  5133  0E44  0853               	movf	_comm_time,w
  5134  0E45  0021               	movlb	1	; select bank1
  5135  0E46  0236               	subwf	_ui16_phase_advancement^(0+128),w
  5136  0E47                     u2805:	
  5137  0E47  1803               	skipnc
  5138  0E48  2E5D               	goto	l5415
  5139                           
  5140                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
  5141  0E49  0936               	comf	_ui16_phase_advancement^(0+128),w
  5142  0E4A  0020               	movlb	0	; select bank0
  5143  0E4B  00A8               	movwf	??_commutate
  5144  0E4C  0021               	movlb	1	; select bank1
  5145  0E4D  0937               	comf	(_ui16_phase_advancement+1)^(0+128),w
  5146  0E4E  0020               	movlb	0	; select bank0
  5147  0E4F  00A9               	movwf	??_commutate+1
  5148  0E50  0AA8               	incf	??_commutate,f
  5149  0E51  1903               	skipnz
  5150  0E52  0AA9               	incf	??_commutate+1,f
  5151  0E53  0853               	movf	_comm_time,w
  5152  0E54  0728               	addwf	??_commutate,w
  5153  0E55  0021               	movlb	1	; select bank1
  5154  0E56  00B8               	movwf	_phase_delay_counter^(0+128)
  5155  0E57  0020               	movlb	0	; select bank0
  5156  0E58  0854               	movf	_comm_time+1,w
  5157  0E59  3D29               	addwfc	??_commutate+1,w
  5158  0E5A  0021               	movlb	1	; select bank1
  5159  0E5B  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
  5160                           
  5161                           ;bldc.c: 1478: }
  5162  0E5C  2E5F               	goto	l5417
  5163  0E5D                     l5415:	
  5164                           
  5165                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
  5166  0E5D  01B8               	clrf	_phase_delay_counter^(0+128)
  5167  0E5E  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5168  0E5F                     l5417:	
  5169                           
  5170                           ;bldc.c: 1486: };bldc.c: 1489: phase_delay_counter_debug = phase_delay_counter;
  5171  0E5F  0839               	movf	(_phase_delay_counter+1)^(0+128),w
  5172  0E60  0024               	movlb	4	; select bank4
  5173  0E61  00E5               	movwf	(_phase_delay_counter_debug+1)^(0+512)
  5174  0E62  0021               	movlb	1	; select bank1
  5175  0E63  0838               	movf	_phase_delay_counter^(0+128),w
  5176  0E64  0024               	movlb	4	; select bank4
  5177  0E65  00E4               	movwf	_phase_delay_counter_debug^(0+512)
  5178                           
  5179                           ;bldc.c: 1508: switch (ui16_step_cnt)
  5180  0E66  2E7A               	goto	l5441
  5181  0E67                     l5419:	
  5182                           ;bldc.c: 1510: {;bldc.c: 1512: case 0 :
  5183                           
  5184                           
  5185                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
  5186  0E67  30A6               	movlw	166
  5187  0E68  2E75               	goto	L17
  5188  0E69                     l5421:	
  5189                           ;bldc.c: 1519: };bldc.c: 1522: case 1:
  5190                           
  5191                           ;bldc.c: 1517: break;
  5192                           
  5193                           
  5194                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
  5195  0E69  30F4               	movlw	244
  5196  0E6A  0022               	movlb	2	; select bank2
  5197  0E6B  00A7               	movwf	_ui16_comm_time_max^(0+256)
  5198  0E6C  3001               	movlw	1
  5199  0E6D  2E78               	goto	L10
  5200  0E6E                     l5423:	
  5201                           ;bldc.c: 1529: };bldc.c: 1532: case 2:
  5202                           
  5203                           ;bldc.c: 1527: break;
  5204                           
  5205                           
  5206                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
  5207  0E6E  307D               	movlw	125
  5208  0E6F  2E75               	goto	L17
  5209  0E70                     l5425:	
  5210                           ;bldc.c: 1539: };bldc.c: 1542: case 3:
  5211                           
  5212                           ;bldc.c: 1537: break;
  5213                           
  5214                           
  5215                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
  5216  0E70  3053               	movlw	83
  5217  0E71  2E75               	goto	L17
  5218  0E72                     l5427:	
  5219                           ;bldc.c: 1549: };bldc.c: 1552: case 4:
  5220                           
  5221                           ;bldc.c: 1547: break;
  5222                           
  5223                           
  5224                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
  5225  0E72  303E               	movlw	62
  5226  0E73  2E75               	goto	L17
  5227  0E74                     l5429:	
  5228                           ;bldc.c: 1559: };bldc.c: 1562: case 5:
  5229                           
  5230                           ;bldc.c: 1557: break;
  5231                           
  5232  0E74                     l5431:	
  5233                           ;bldc.c: 1569: };bldc.c: 1572: case 6:
  5234                           
  5235                           ;bldc.c: 1567: break;
  5236                           
  5237                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5238                           
  5239  0E74                     l5433:	
  5240                           ;bldc.c: 1579: };bldc.c: 1582: case 7:
  5241                           
  5242                           ;bldc.c: 1577: break;
  5243                           
  5244                           ;bldc.c: 1574: {;bldc.c: 1576: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5245                           
  5246  0E74                     l5435:	
  5247                           ;bldc.c: 1589: };bldc.c: 1592: case 8:
  5248                           
  5249                           ;bldc.c: 1587: break;
  5250                           
  5251                           ;bldc.c: 1584: {;bldc.c: 1586: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5252                           
  5253  0E74                     l5437:	
  5254                           ;bldc.c: 1599: };bldc.c: 1602: case 9:
  5255                           
  5256                           ;bldc.c: 1597: break;
  5257                           
  5258                           ;bldc.c: 1594: {;bldc.c: 1596: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5259                           
  5260  0E74                     l5439:	
  5261                           ;bldc.c: 1609: };bldc.c: 1613: default:
  5262                           
  5263                           ;bldc.c: 1607: break;
  5264                           
  5265                           ;bldc.c: 1604: {;bldc.c: 1606: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5266                           
  5267                           
  5268                           ;bldc.c: 1614: {;bldc.c: 1616: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
  5269  0E74  3032               	movlw	50
  5270  0E75                     L17:	
  5271  0E75  0022               	movlb	2	; select bank2
  5272  0E76  00A7               	movwf	_ui16_comm_time_max^(0+256)
  5273  0E77  3000               	movlw	0
  5274  0E78                     L10:	
  5275  0E78  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5276                           
  5277                           ;bldc.c: 1618: };bldc.c: 1620: }
  5278  0E79  2E8A               	goto	l5443
  5279  0E7A                     l5441:	
  5280                           
  5281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5282                           ; Switch size 1, requested type "space"
  5283                           ; Number of cases is 1, Range of values is 0 to 0
  5284                           ; switch strategies available:
  5285                           ; Name         Instructions Cycles
  5286                           ; simple_byte            4     3 (average)
  5287                           ; direct_byte            8     6 (fixed)
  5288                           ; jumptable            260     6 (fixed)
  5289                           ;	Chosen strategy is simple_byte
  5290  0E7A  0021               	movlb	1	; select bank1
  5291  0E7B  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
  5292  0E7C  3A00               	xorlw	0	; case 0
  5293  0E7D  1903               	skipnz
  5294  0E7E  2E80               	goto	l11833
  5295  0E7F  2E74               	goto	l5439
  5296  0E80                     l11833:	
  5297                           
  5298                           ; Switch size 1, requested type "space"
  5299                           ; Number of cases is 10, Range of values is 0 to 9
  5300                           ; switch strategies available:
  5301                           ; Name         Instructions Cycles
  5302                           ; direct_byte           26     6 (fixed)
  5303                           ; simple_byte           31    16 (average)
  5304                           ; jumptable            260     6 (fixed)
  5305                           ;	Chosen strategy is direct_byte
  5306  0E80  083A               	movf	_ui16_step_cnt^(0+128),w
  5307  0E81  0084               	movwf	4
  5308  0E82  300A               	movlw	10
  5309  0E83  0204               	subwf	4,w
  5310  0E84  1803               	skipnc
  5311  0E85  2E74               	goto	l5439
  5312  0E86  3191               	movlp	high S11835
  5313  0E87  3504               	lslf	4,w
  5314  0E88  3E94               	addlw	low S11835
  5315  0E89  0082               	movwf	2
  5316  0E8A                     l5443:	
  5317                           
  5318                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
  5319  0E8A  3000               	movlw	0
  5320  0E8B  0022               	movlb	2	; select bank2
  5321  0E8C  0228               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  5322  0E8D  3032               	movlw	50
  5323  0E8E  1903               	skipnz
  5324  0E8F  0227               	subwf	_ui16_comm_time_max^(0+256),w
  5325  0E90  1803               	skipnc
  5326  0E91  2E96               	goto	l5447
  5327                           
  5328                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
  5329  0E92  3032               	movlw	50
  5330  0E93  00A7               	movwf	_ui16_comm_time_max^(0+256)
  5331  0E94  3000               	movlw	0
  5332  0E95  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5333  0E96                     l5447:	
  5334                           
  5335                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
  5336  0E96  0020               	movlb	0	; select bank0
  5337  0E97  1E5A               	btfss	_MotorFlags,4
  5338  0E98  2EE4               	goto	l345
  5339                           
  5340                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
  5341  0E99  300A               	movlw	10
  5342  0E9A  00A8               	movwf	??_commutate
  5343  0E9B  0828               	movf	??_commutate,w
  5344  0E9C  0021               	movlb	1	; select bank1
  5345  0E9D  00DF               	movwf	_ui8_StartupPWM^(0+128)
  5346                           
  5347                           ;bldc.c: 1641: };bldc.c: 1644: }
  5348  0E9E  2EE4               	goto	l345
  5349  0E9F                     l327:	
  5350                           
  5351                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
  5352  0E9F  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5353  0EA0  2EA5               	goto	l5453
  5354                           
  5355                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
  5356  0EA1  0021               	movlb	1	; select bank1
  5357  0EA2  01B8               	clrf	_phase_delay_counter^(0+128)
  5358  0EA3  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5359                           
  5360                           ;bldc.c: 1659: }
  5361  0EA4  2EB3               	goto	l5455
  5362  0EA5                     l5453:	
  5363                           
  5364                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  5365  0EA5  0020               	movlb	0	; select bank0
  5366  0EA6  0854               	movf	_comm_time+1,w
  5367  0EA7  00A9               	movwf	??_commutate+1
  5368  0EA8  0853               	movf	_comm_time,w
  5369  0EA9  00A8               	movwf	??_commutate
  5370  0EAA  36A9               	lsrf	??_commutate+1,f
  5371  0EAB  0CA8               	rrf	??_commutate,f
  5372  0EAC  0828               	movf	??_commutate,w
  5373  0EAD  0021               	movlb	1	; select bank1
  5374  0EAE  00B8               	movwf	_phase_delay_counter^(0+128)
  5375  0EAF  0020               	movlb	0	; select bank0
  5376  0EB0  0829               	movf	??_commutate+1,w
  5377  0EB1  0021               	movlb	1	; select bank1
  5378  0EB2  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
  5379  0EB3                     l5455:	
  5380                           
  5381                           ;bldc.c: 1670: };bldc.c: 1675: phase_delay_counter = 0;
  5382  0EB3  01B8               	clrf	_phase_delay_counter^(0+128)
  5383  0EB4  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5384                           
  5385                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  5386  0EB5  0839               	movf	(_phase_delay_counter+1)^(0+128),w
  5387  0EB6  0024               	movlb	4	; select bank4
  5388  0EB7  00E5               	movwf	(_phase_delay_counter_debug+1)^(0+512)
  5389  0EB8  0021               	movlb	1	; select bank1
  5390  0EB9  0838               	movf	_phase_delay_counter^(0+128),w
  5391  0EBA  0024               	movlb	4	; select bank4
  5392  0EBB  00E4               	movwf	_phase_delay_counter_debug^(0+512)
  5393                           
  5394                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
  5395  0EBC  3032               	movlw	50
  5396  0EBD  0022               	movlb	2	; select bank2
  5397  0EBE  00A7               	movwf	_ui16_comm_time_max^(0+256)
  5398  0EBF  3000               	movlw	0
  5399  0EC0  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5400                           
  5401                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  5402  0EC1  0020               	movlb	0	; select bank0
  5403  0EC2  1F5A               	btfss	_MotorFlags,6
  5404  0EC3  2EE2               	goto	l5465
  5405                           
  5406                           ;bldc.c: 1693: {;bldc.c: 1751: CCPR1L = ui16_duty_cycle_BLDC >> 2;
  5407  0EC4  0021               	movlb	1	; select bank1
  5408  0EC5  0831               	movf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
  5409  0EC6  0020               	movlb	0	; select bank0
  5410  0EC7  00A9               	movwf	??_commutate+1
  5411  0EC8  0021               	movlb	1	; select bank1
  5412  0EC9  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
  5413  0ECA  0020               	movlb	0	; select bank0
  5414  0ECB  00A8               	movwf	??_commutate
  5415  0ECC  36A9               	lsrf	??_commutate+1,f
  5416  0ECD  0CA8               	rrf	??_commutate,f
  5417  0ECE  36A9               	lsrf	??_commutate+1,f
  5418  0ECF  0CA8               	rrf	??_commutate,f
  5419  0ED0  0828               	movf	??_commutate,w
  5420  0ED1  0025               	movlb	5	; select bank5
  5421  0ED2  0091               	movwf	17	;volatile
  5422                           
  5423                           ;bldc.c: 1752: CCP1CON = ((ui16_duty_cycle_BLDC & 0b11) << 4) | 0x0C;
  5424  0ED3  0021               	movlb	1	; select bank1
  5425  0ED4  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
  5426  0ED5  3903               	andlw	3
  5427  0ED6  0020               	movlb	0	; select bank0
  5428  0ED7  00A8               	movwf	??_commutate
  5429  0ED8  3003               	movlw	3
  5430  0ED9                     u2855:	
  5431  0ED9  35A8               	lslf	??_commutate,f
  5432  0EDA  3EFF               	addlw	-1
  5433  0EDB  1D03               	skipz
  5434  0EDC  2ED9               	goto	u2855
  5435  0EDD  3528               	lslf	??_commutate,w
  5436  0EDE  380C               	iorlw	12
  5437  0EDF  0025               	movlb	5	; select bank5
  5438  0EE0  0093               	movwf	19	;volatile
  5439                           
  5440                           ;bldc.c: 1766: }
  5441  0EE1  2EE4               	goto	l345
  5442  0EE2                     l5465:	
  5443                           
  5444                           ;bldc.c: 1769: else;bldc.c: 1770: {;bldc.c: 1772: CCPR1L = 0;
  5445  0EE2  0025               	movlb	5	; select bank5
  5446  0EE3  0191               	clrf	17	;volatile
  5447  0EE4                     l345:	
  5448                           
  5449                           ;bldc.c: 1774: };bldc.c: 1778: };bldc.c: 1781: comm_time = 0;
  5450  0EE4  0020               	movlb	0	; select bank0
  5451  0EE5  01D3               	clrf	_comm_time
  5452  0EE6  01D4               	clrf	_comm_time+1
  5453                           
  5454                           ;bldc.c: 1785: if( comm_state == 0xff )
  5455  0EE7  0021               	movlb	1	; select bank1
  5456  0EE8  0A5E               	incf	_comm_state^(0+128),w
  5457  0EE9  1D03               	btfss	3,2
  5458  0EEA  2FDD               	goto	l5615
  5459                           
  5460                           ;bldc.c: 1787: {;bldc.c: 1789: comm_state = 6;
  5461  0EEB  3006               	movlw	6
  5462  0EEC  0020               	movlb	0	; select bank0
  5463  0EED  00A8               	movwf	??_commutate
  5464  0EEE  0828               	movf	??_commutate,w
  5465  0EEF  0021               	movlb	1	; select bank1
  5466  0EF0  00DE               	movwf	_comm_state^(0+128)
  5467                           
  5468                           ;bldc.c: 1791: };bldc.c: 1794: switch( comm_state )
  5469  0EF1  2FDD               	goto	l5615
  5470  0EF2                     l5471:	
  5471                           ;bldc.c: 1796: {;bldc.c: 1798: case 1:
  5472                           
  5473                           
  5474                           ;bldc.c: 1801: {;bldc.c: 1807: PSTR1CON = 0b00000001;
  5475  0EF2  3001               	movlw	1
  5476  0EF3  0025               	movlb	5	; select bank5
  5477  0EF4  0096               	movwf	22	;volatile
  5478                           
  5479                           ;bldc.c: 1810: if( MotorFlags.bits.B6 )
  5480  0EF5  0020               	movlb	0	; select bank0
  5481  0EF6  1F5A               	btfss	_MotorFlags,6
  5482  0EF7  2EFD               	goto	l5477
  5483                           
  5484                           ;bldc.c: 1812: {;bldc.c: 1814: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  5485  0EF8  0022               	movlb	2	; select bank2
  5486  0EF9  080E               	movf	14,w	;volatile
  5487  0EFA  39E5               	andlw	229
  5488  0EFB  380A               	iorlw	10
  5489  0EFC  008E               	movwf	14	;volatile
  5490  0EFD                     l5477:	
  5491                           
  5492                           ;bldc.c: 1816: };bldc.c: 1820: LATB2 = 0;
  5493  0EFD  0022               	movlb	2	; select bank2
  5494  0EFE  110D               	bcf	13,2	;volatile
  5495                           
  5496                           ;bldc.c: 1821: LATB1 = 0;
  5497  0EFF  108D               	bcf	13,1	;volatile
  5498                           
  5499                           ;bldc.c: 1822: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  5500  0F00  3009               	movlw	9
  5501  0F01  0020               	movlb	0	; select bank0
  5502  0F02  00A8               	movwf	??_commutate
  5503  0F03  0828               	movf	??_commutate,w
  5504  0F04  0021               	movlb	1	; select bank1
  5505  0F05  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5506                           
  5507                           ;bldc.c: 1823: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  5508  0F06  01DB               	clrf	_ui8_UPhase_sel^(0+128)
  5509  0F07  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
  5510                           
  5511                           ;bldc.c: 1824: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  5512  0F08  3025               	movlw	37
  5513  0F09  0020               	movlb	0	; select bank0
  5514  0F0A  00A8               	movwf	??_commutate
  5515  0F0B  0828               	movf	??_commutate,w
  5516  0F0C  0022               	movlb	2	; select bank2
  5517  0F0D  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
  5518                           
  5519                           ;bldc.c: 1825: CM1CON1 = 0x02;
  5520  0F0E  3002               	movlw	2
  5521  0F0F  0092               	movwf	18	;volatile
  5522                           
  5523                           ;bldc.c: 1838: CM1CON0 = 0x84;
  5524  0F10  3084               	movlw	132
  5525  0F11  0091               	movwf	17	;volatile
  5526                           
  5527                           ;bldc.c: 1839: rising_bemf_flag = 1;
  5528  0F12  0020               	movlb	0	; select bank0
  5529  0F13  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5530                           
  5531                           ;bldc.c: 1840: comm_state = 6;
  5532  0F14  3006               	movlw	6
  5533  0F15  2FCE               	goto	L14
  5534  0F16                     l5495:	
  5535                           ;bldc.c: 1850: };bldc.c: 1853: case 2:
  5536                           
  5537                           ;bldc.c: 1846: break;
  5538                           
  5539                           
  5540                           ;bldc.c: 1856: {;bldc.c: 1861: PSTR1CON = 0b00000001;
  5541  0F16  3001               	movlw	1
  5542  0F17  0025               	movlb	5	; select bank5
  5543  0F18  0096               	movwf	22	;volatile
  5544                           
  5545                           ;bldc.c: 1864: if( MotorFlags.bits.B6 )
  5546  0F19  0020               	movlb	0	; select bank0
  5547  0F1A  1F5A               	btfss	_MotorFlags,6
  5548  0F1B  2F21               	goto	l5501
  5549                           
  5550                           ;bldc.c: 1866: {;bldc.c: 1868: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  5551  0F1C  0022               	movlb	2	; select bank2
  5552  0F1D  080E               	movf	14,w	;volatile
  5553  0F1E  39E5               	andlw	229
  5554  0F1F  3812               	iorlw	18
  5555  0F20  008E               	movwf	14	;volatile
  5556  0F21                     l5501:	
  5557                           
  5558                           ;bldc.c: 1870: };bldc.c: 1874: LATB2 = 1;
  5559  0F21  0022               	movlb	2	; select bank2
  5560  0F22  150D               	bsf	13,2	;volatile
  5561                           
  5562                           ;bldc.c: 1875: LATB1 = 0;
  5563  0F23  108D               	bcf	13,1	;volatile
  5564                           
  5565                           ;bldc.c: 1876: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  5566  0F24  3009               	movlw	9
  5567  0F25  0020               	movlb	0	; select bank0
  5568  0F26  00A8               	movwf	??_commutate
  5569  0F27  0828               	movf	??_commutate,w
  5570  0F28  0021               	movlb	1	; select bank1
  5571  0F29  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5572                           
  5573                           ;bldc.c: 1877: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  5574  0F2A  01DB               	clrf	_ui8_UPhase_sel^(0+128)
  5575  0F2B  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
  5576                           
  5577                           ;bldc.c: 1878: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  5578  0F2C  3005               	movlw	5
  5579  0F2D  0020               	movlb	0	; select bank0
  5580  0F2E  00A8               	movwf	??_commutate
  5581  0F2F  0828               	movf	??_commutate,w
  5582  0F30  0022               	movlb	2	; select bank2
  5583  0F31  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
  5584                           
  5585                           ;bldc.c: 1879: CM1CON1 = 0x01;
  5586  0F32  3001               	movlw	1
  5587  0F33  0092               	movwf	18	;volatile
  5588                           
  5589                           ;bldc.c: 1893: CM1CON0 = 0x94;
  5590  0F34  3094               	movlw	148
  5591  0F35  0091               	movwf	17	;volatile
  5592  0F36  2FD7               	goto	L16
  5593  0F37                     l5519:	
  5594                           ;bldc.c: 1907: };bldc.c: 1910: case 3:
  5595                           
  5596                           ;bldc.c: 1903: break;
  5597                           
  5598                           ;bldc.c: 1895: comm_state = 1;
  5599                           
  5600                           ;bldc.c: 1894: rising_bemf_flag = 0;
  5601                           
  5602                           
  5603                           ;bldc.c: 1913: {;bldc.c: 1918: PSTR1CON = 0b00000010;
  5604  0F37  3002               	movlw	2
  5605  0F38  0025               	movlb	5	; select bank5
  5606  0F39  0096               	movwf	22	;volatile
  5607                           
  5608                           ;bldc.c: 1921: if( MotorFlags.bits.B6 )
  5609  0F3A  0020               	movlb	0	; select bank0
  5610  0F3B  1F5A               	btfss	_MotorFlags,6
  5611  0F3C  2F42               	goto	l5525
  5612                           
  5613                           ;bldc.c: 1923: {;bldc.c: 1925: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  5614  0F3D  0022               	movlb	2	; select bank2
  5615  0F3E  080E               	movf	14,w	;volatile
  5616  0F3F  39E5               	andlw	229
  5617  0F40  3818               	iorlw	24
  5618  0F41  008E               	movwf	14	;volatile
  5619  0F42                     l5525:	
  5620                           
  5621                           ;bldc.c: 1927: };bldc.c: 1930: LATC2 = 0;
  5622  0F42  0022               	movlb	2	; select bank2
  5623  0F43  110E               	bcf	14,2	;volatile
  5624                           
  5625                           ;bldc.c: 1932: LATB1 = 0;
  5626  0F44  108D               	bcf	13,1	;volatile
  5627                           
  5628                           ;bldc.c: 1933: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  5629  0F45  3035               	movlw	53
  5630  0F46  0020               	movlb	0	; select bank0
  5631  0F47  00A8               	movwf	??_commutate
  5632  0F48  0828               	movf	??_commutate,w
  5633  0F49  0021               	movlb	1	; select bank1
  5634  0F4A  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5635                           
  5636                           ;bldc.c: 1934: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  5637  0F4B  3005               	movlw	5
  5638  0F4C  0020               	movlb	0	; select bank0
  5639  0F4D  00A8               	movwf	??_commutate
  5640  0F4E  0828               	movf	??_commutate,w
  5641  0F4F  0021               	movlb	1	; select bank1
  5642  0F50  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5643                           
  5644                           ;bldc.c: 1935: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  5645  0F51  0022               	movlb	2	; select bank2
  5646  0F52  01E3               	clrf	_ui8_Ubemf_sel^(0+256)
  5647  0F53  0AE3               	incf	_ui8_Ubemf_sel^(0+256),f
  5648                           
  5649                           ;bldc.c: 1936: CM1CON1 = 0x00;
  5650  0F54  0192               	clrf	18	;volatile
  5651                           
  5652                           ;bldc.c: 1950: CM1CON0 = 0x84;
  5653  0F55  3084               	movlw	132
  5654  0F56  0091               	movwf	17	;volatile
  5655                           
  5656                           ;bldc.c: 1951: rising_bemf_flag = 1;
  5657  0F57  0020               	movlb	0	; select bank0
  5658  0F58  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5659                           
  5660                           ;bldc.c: 1952: comm_state = 2;
  5661  0F59  3002               	movlw	2
  5662  0F5A  2FCE               	goto	L14
  5663  0F5B                     l5539:	
  5664                           ;bldc.c: 1961: };bldc.c: 1964: case 4:
  5665                           
  5666                           ;bldc.c: 1957: break;
  5667                           
  5668                           
  5669                           ;bldc.c: 1967: {;bldc.c: 1973: PSTR1CON = 0b00000010;
  5670  0F5B  3002               	movlw	2
  5671  0F5C  0025               	movlb	5	; select bank5
  5672  0F5D  0096               	movwf	22	;volatile
  5673                           
  5674                           ;bldc.c: 1976: if( MotorFlags.bits.B6 )
  5675  0F5E  0020               	movlb	0	; select bank0
  5676  0F5F  1F5A               	btfss	_MotorFlags,6
  5677  0F60  2F66               	goto	l5545
  5678                           
  5679                           ;bldc.c: 1978: {;bldc.c: 1980: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  5680  0F61  0022               	movlb	2	; select bank2
  5681  0F62  080E               	movf	14,w	;volatile
  5682  0F63  39E5               	andlw	229
  5683  0F64  380A               	iorlw	10
  5684  0F65  008E               	movwf	14	;volatile
  5685  0F66                     l5545:	
  5686                           
  5687                           ;bldc.c: 1982: };bldc.c: 1985: LATC2 = 0;
  5688  0F66  0022               	movlb	2	; select bank2
  5689  0F67  110E               	bcf	14,2	;volatile
  5690                           
  5691                           ;bldc.c: 1987: LATB1 = 1;
  5692  0F68  148D               	bsf	13,1	;volatile
  5693                           
  5694                           ;bldc.c: 1988: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  5695  0F69  3035               	movlw	53
  5696  0F6A  0020               	movlb	0	; select bank0
  5697  0F6B  00A8               	movwf	??_commutate
  5698  0F6C  0828               	movf	??_commutate,w
  5699  0F6D  0021               	movlb	1	; select bank1
  5700  0F6E  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5701                           
  5702                           ;bldc.c: 1989: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  5703  0F6F  3005               	movlw	5
  5704  0F70  0020               	movlb	0	; select bank0
  5705  0F71  00A8               	movwf	??_commutate
  5706  0F72  0828               	movf	??_commutate,w
  5707  0F73  0021               	movlb	1	; select bank1
  5708  0F74  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5709                           
  5710                           ;bldc.c: 1990: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  5711  0F75  3025               	movlw	37
  5712  0F76  0020               	movlb	0	; select bank0
  5713  0F77  00A8               	movwf	??_commutate
  5714  0F78  0828               	movf	??_commutate,w
  5715  0F79  0022               	movlb	2	; select bank2
  5716  0F7A  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
  5717                           
  5718                           ;bldc.c: 1991: CM1CON1 = 0x02;
  5719  0F7B  3002               	movlw	2
  5720  0F7C  0092               	movwf	18	;volatile
  5721                           
  5722                           ;bldc.c: 2005: CM1CON0 = 0x94;
  5723  0F7D  3094               	movlw	148
  5724  0F7E  0091               	movwf	17	;volatile
  5725                           
  5726                           ;bldc.c: 2006: rising_bemf_flag = 0;
  5727  0F7F  0020               	movlb	0	; select bank0
  5728  0F80  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5729                           
  5730                           ;bldc.c: 2007: comm_state = 3;
  5731  0F81  3003               	movlw	3
  5732  0F82  2FCE               	goto	L14
  5733  0F83                     l5563:	
  5734                           ;bldc.c: 2015: };bldc.c: 2018: case 5:
  5735                           
  5736                           ;bldc.c: 2012: break;
  5737                           
  5738                           
  5739                           ;bldc.c: 2021: {;bldc.c: 2027: PSTR1CON = 0b00000100;
  5740  0F83  3004               	movlw	4
  5741  0F84  0025               	movlb	5	; select bank5
  5742  0F85  0096               	movwf	22	;volatile
  5743                           
  5744                           ;bldc.c: 2030: if( MotorFlags.bits.B6 )
  5745  0F86  0020               	movlb	0	; select bank0
  5746  0F87  1F5A               	btfss	_MotorFlags,6
  5747  0F88  2F8E               	goto	l5569
  5748                           
  5749                           ;bldc.c: 2032: {;bldc.c: 2034: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  5750  0F89  0022               	movlb	2	; select bank2
  5751  0F8A  080E               	movf	14,w	;volatile
  5752  0F8B  39E5               	andlw	229
  5753  0F8C  3812               	iorlw	18
  5754  0F8D  008E               	movwf	14	;volatile
  5755  0F8E                     l5569:	
  5756                           
  5757                           ;bldc.c: 2036: };bldc.c: 2039: LATC2 = 0;
  5758  0F8E  0022               	movlb	2	; select bank2
  5759  0F8F  110E               	bcf	14,2	;volatile
  5760                           
  5761                           ;bldc.c: 2040: LATB2 = 0;
  5762  0F90  110D               	bcf	13,2	;volatile
  5763                           
  5764                           ;bldc.c: 2042: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  5765  0F91  3011               	movlw	17
  5766  0F92  0020               	movlb	0	; select bank0
  5767  0F93  00A8               	movwf	??_commutate
  5768  0F94  0828               	movf	??_commutate,w
  5769  0F95  0021               	movlb	1	; select bank1
  5770  0F96  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5771                           
  5772                           ;bldc.c: 2043: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  5773  0F97  3025               	movlw	37
  5774  0F98  0020               	movlb	0	; select bank0
  5775  0F99  00A8               	movwf	??_commutate
  5776  0F9A  0828               	movf	??_commutate,w
  5777  0F9B  0021               	movlb	1	; select bank1
  5778  0F9C  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5779                           
  5780                           ;bldc.c: 2044: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  5781  0F9D  3005               	movlw	5
  5782  0F9E  0020               	movlb	0	; select bank0
  5783  0F9F  00A8               	movwf	??_commutate
  5784  0FA0  0828               	movf	??_commutate,w
  5785  0FA1  0022               	movlb	2	; select bank2
  5786  0FA2  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
  5787                           
  5788                           ;bldc.c: 2045: CM1CON1 = 0x01;
  5789  0FA3  3001               	movlw	1
  5790  0FA4  0092               	movwf	18	;volatile
  5791                           
  5792                           ;bldc.c: 2060: CM1CON0 = 0x84;
  5793  0FA5  3084               	movlw	132
  5794  0FA6  0091               	movwf	17	;volatile
  5795                           
  5796                           ;bldc.c: 2061: rising_bemf_flag = 1;
  5797  0FA7  0020               	movlb	0	; select bank0
  5798  0FA8  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5799                           
  5800                           ;bldc.c: 2062: comm_state = 4;
  5801  0FA9  3004               	movlw	4
  5802  0FAA  2FCE               	goto	L14
  5803  0FAB                     l5587:	
  5804                           ;bldc.c: 2071: };bldc.c: 2074: case 6:
  5805                           
  5806                           ;bldc.c: 2067: break;
  5807                           
  5808                           
  5809                           ;bldc.c: 2077: {;bldc.c: 2082: PSTR1CON = 0b00000100;
  5810  0FAB  3004               	movlw	4
  5811  0FAC  0025               	movlb	5	; select bank5
  5812  0FAD  0096               	movwf	22	;volatile
  5813                           
  5814                           ;bldc.c: 2085: if( MotorFlags.bits.B6 )
  5815  0FAE  0020               	movlb	0	; select bank0
  5816  0FAF  1F5A               	btfss	_MotorFlags,6
  5817  0FB0  2FB6               	goto	l5593
  5818                           
  5819                           ;bldc.c: 2087: {;bldc.c: 2089: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  5820  0FB1  0022               	movlb	2	; select bank2
  5821  0FB2  080E               	movf	14,w	;volatile
  5822  0FB3  39E5               	andlw	229
  5823  0FB4  3818               	iorlw	24
  5824  0FB5  008E               	movwf	14	;volatile
  5825  0FB6                     l5593:	
  5826                           
  5827                           ;bldc.c: 2091: };bldc.c: 2094: LATC2 = 1;
  5828  0FB6  0022               	movlb	2	; select bank2
  5829  0FB7  150E               	bsf	14,2	;volatile
  5830                           
  5831                           ;bldc.c: 2095: LATB2 = 0;
  5832  0FB8  110D               	bcf	13,2	;volatile
  5833                           
  5834                           ;bldc.c: 2097: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  5835  0FB9  3011               	movlw	17
  5836  0FBA  0020               	movlb	0	; select bank0
  5837  0FBB  00A8               	movwf	??_commutate
  5838  0FBC  0828               	movf	??_commutate,w
  5839  0FBD  0021               	movlb	1	; select bank1
  5840  0FBE  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5841                           
  5842                           ;bldc.c: 2098: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  5843  0FBF  3025               	movlw	37
  5844  0FC0  0020               	movlb	0	; select bank0
  5845  0FC1  00A8               	movwf	??_commutate
  5846  0FC2  0828               	movf	??_commutate,w
  5847  0FC3  0021               	movlb	1	; select bank1
  5848  0FC4  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5849                           
  5850                           ;bldc.c: 2099: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  5851  0FC5  0022               	movlb	2	; select bank2
  5852  0FC6  01E3               	clrf	_ui8_Ubemf_sel^(0+256)
  5853  0FC7  0AE3               	incf	_ui8_Ubemf_sel^(0+256),f
  5854                           
  5855                           ;bldc.c: 2100: CM1CON1 = 0x00;
  5856  0FC8  0192               	clrf	18	;volatile
  5857                           
  5858                           ;bldc.c: 2114: CM1CON0 = 0x94;
  5859  0FC9  3094               	movlw	148
  5860  0FCA  0091               	movwf	17	;volatile
  5861                           
  5862                           ;bldc.c: 2115: rising_bemf_flag = 0;
  5863  0FCB  0020               	movlb	0	; select bank0
  5864  0FCC  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5865                           
  5866                           ;bldc.c: 2116: comm_state = 5;
  5867  0FCD  3005               	movlw	5
  5868  0FCE                     L14:	
  5869  0FCE  00A8               	movwf	??_commutate
  5870  0FCF  0828               	movf	??_commutate,w
  5871  0FD0  0021               	movlb	1	; select bank1
  5872  0FD1  00DE               	movwf	_comm_state^(0+128)
  5873                           
  5874                           ;bldc.c: 2121: break;
  5875  0FD2  2FF1               	goto	l354
  5876  0FD3                     l5607:	
  5877                           ;bldc.c: 2125: };bldc.c: 2129: default:
  5878                           
  5879                           
  5880                           ;bldc.c: 2130: {;bldc.c: 2132: PSTR1CON = 0x00;
  5881  0FD3  0025               	movlb	5	; select bank5
  5882  0FD4  0196               	clrf	22	;volatile
  5883                           
  5884                           ;bldc.c: 2133: CM1CON0 = 0x00;
  5885  0FD5  0022               	movlb	2	; select bank2
  5886  0FD6  0191               	clrf	17	;volatile
  5887  0FD7                     L16:	
  5888                           
  5889                           ;bldc.c: 2134: rising_bemf_flag = 0;
  5890  0FD7  0020               	movlb	0	; select bank0
  5891  0FD8  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5892                           
  5893                           ;bldc.c: 2135: comm_state = 1;
  5894  0FD9  0021               	movlb	1	; select bank1
  5895  0FDA  01DE               	clrf	_comm_state^(0+128)
  5896  0FDB  0ADE               	incf	_comm_state^(0+128),f
  5897                           
  5898                           ;bldc.c: 2139: };bldc.c: 2141: }
  5899                           
  5900                           ;bldc.c: 2136: break;
  5901  0FDC  2FF1               	goto	l354
  5902  0FDD                     l5615:	
  5903  0FDD  085E               	movf	_comm_state^(0+128),w
  5904                           
  5905                           ; Switch size 1, requested type "space"
  5906                           ; Number of cases is 6, Range of values is 1 to 6
  5907                           ; switch strategies available:
  5908                           ; Name         Instructions Cycles
  5909                           ; simple_byte           19    10 (average)
  5910                           ; direct_byte           21     9 (fixed)
  5911                           ; jumptable            263     9 (fixed)
  5912                           ;	Chosen strategy is simple_byte
  5913  0FDE  3A01               	xorlw	1	; case 1
  5914  0FDF  1903               	skipnz
  5915  0FE0  2EF2               	goto	l5471
  5916  0FE1  3A03               	xorlw	3	; case 2
  5917  0FE2  1903               	skipnz
  5918  0FE3  2F16               	goto	l5495
  5919  0FE4  3A01               	xorlw	1	; case 3
  5920  0FE5  1903               	skipnz
  5921  0FE6  2F37               	goto	l5519
  5922  0FE7  3A07               	xorlw	7	; case 4
  5923  0FE8  1903               	skipnz
  5924  0FE9  2F5B               	goto	l5539
  5925  0FEA  3A01               	xorlw	1	; case 5
  5926  0FEB  1903               	skipnz
  5927  0FEC  2F83               	goto	l5563
  5928  0FED  3A03               	xorlw	3	; case 6
  5929  0FEE  1903               	skipnz
  5930  0FEF  2FAB               	goto	l5587
  5931  0FF0  2FD3               	goto	l5607
  5932  0FF1                     l354:	
  5933                           
  5934                           ;bldc.c: 2145: if( rising_bemf_flag )
  5935  0FF1  0020               	movlb	0	; select bank0
  5936  0FF2  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5937  0FF3  2FF6               	goto	l5619
  5938                           
  5939                           ;bldc.c: 2147: {;bldc.c: 2149: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
  5940  0FF4  3028               	movlw	40
  5941  0FF5  2FF8               	goto	L15
  5942  0FF6                     l5619:	
  5943                           ;bldc.c: 2151: }
  5944                           
  5945                           
  5946                           ;bldc.c: 2154: else;bldc.c: 2155: {;bldc.c: 2157: ui8_BlankingCount = ( unsigned char ) 
      +                          ( 0.002 * 20000UL );
  5947  0FF6  3028               	movlw	40
  5948  0FF7  0020               	movlb	0	; select bank0
  5949  0FF8                     L15:	
  5950  0FF8  00A8               	movwf	??_commutate
  5951  0FF9  0828               	movf	??_commutate,w
  5952  0FFA  0021               	movlb	1	; select bank1
  5953  0FFB  00DD               	movwf	_ui8_BlankingCount^(0+128)
  5954                           
  5955                           ;bldc.c: 2159: };bldc.c: 2162: comm_time = 0;
  5956  0FFC  0020               	movlb	0	; select bank0
  5957  0FFD  01D3               	clrf	_comm_time
  5958  0FFE  01D4               	clrf	_comm_time+1
  5959  0FFF  0008               	return
  5960  1000                     __end_of_commutate:	
  5961                           
  5962                           	psect	swtext1
  5963  1194                     __pswtext1:	
  5964  1194                     S11835:	
  5965  1194  318E  2E67         	ljmp	l5419
  5966  1196  318E  2E69         	ljmp	l5421
  5967  1198  318E  2E6E         	ljmp	l5423
  5968  119A  318E  2E70         	ljmp	l5425
  5969  119C  318E  2E72         	ljmp	l5427
  5970  119E  318E  2E74         	ljmp	l5429
  5971  11A0  318E  2E74         	ljmp	l5431
  5972  11A2  318E  2E74         	ljmp	l5433
  5973  11A4  318E  2E74         	ljmp	l5435
  5974  11A6  318E  2E74         	ljmp	l5437
  5975                           
  5976                           	psect	text8
  5977  0805                     __ptext8:	
  5978 ;; *************** function _PWM_Capture_init *****************
  5979 ;; Defined at:
  5980 ;;		line 87 in file "../pwm.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  ui8_CCP_Nb      1    8[BANK0 ] unsigned char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  1    wreg      void 
  5987 ;; Registers used:
  5988 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5994 ;;      Params:         0       0       0       0       0       0       0       0
  5995 ;;      Locals:         0       1       0       0       0       0       0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0
  5997 ;;      Totals:         0       1       0       0       0       0       0       0
  5998 ;;Total ram usage:        1 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    3
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_system_init
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           
  6009                           ;psect for function _PWM_Capture_init
  6010  0805                     _PWM_Capture_init:	
  6011                           
  6012                           ;incstack = 0
  6013                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  6014                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  6015  0805  0020               	movlb	0	; select bank0
  6016  0806  00A8               	movwf	PWM_Capture_init@ui8_CCP_Nb
  6017                           
  6018                           ;pwm.c: 92: ui8_PWMinDC_sav = 0;
  6019  0807  0021               	movlb	1	; select bank1
  6020  0808  01CC               	clrf	_ui8_PWMinDC_sav^(0+128)
  6021                           
  6022                           ;pwm.c: 93: ui16_PWMin_failCnt = 0;
  6023  0809  0023               	movlb	3	; select bank3
  6024  080A  01AA               	clrf	_ui16_PWMin_failCnt^(0+384)
  6025  080B  01AB               	clrf	(_ui16_PWMin_failCnt+1)^(0+384)
  6026                           
  6027                           ;pwm.c: 102: switch( ui8_CCP_Nb )
  6028  080C  2849               	goto	l5939
  6029  080D                     l5897:	
  6030                           ;pwm.c: 104: {;pwm.c: 106: case 1:
  6031                           
  6032                           
  6033                           ;pwm.c: 108: {;pwm.c: 110: CCP1CON = 0x00;
  6034  080D  0025               	movlb	5	; select bank5
  6035  080E  0193               	clrf	19	;volatile
  6036                           
  6037                           ;pwm.c: 111: CCPR1L = 0x00;
  6038  080F  0191               	clrf	17	;volatile
  6039                           
  6040                           ;pwm.c: 112: CCPR1H = 0x00;
  6041  0810  0192               	clrf	18	;volatile
  6042                           
  6043                           ;pwm.c: 113: CCP1IE = 1;
  6044  0811  0021               	movlb	1	; select bank1
  6045  0812  1511               	bsf	17,2	;volatile
  6046                           
  6047                           ;pwm.c: 114: CCP1IF = 0;
  6048  0813  0020               	movlb	0	; select bank0
  6049  0814  1111               	bcf	17,2	;volatile
  6050                           
  6051                           ;pwm.c: 115: CCP1CON = 0x05;
  6052  0815  3005               	movlw	5
  6053  0816  0025               	movlb	5	; select bank5
  6054  0817  0093               	movwf	19	;volatile
  6055                           
  6056                           ;pwm.c: 116: break;
  6057  0818  0008               	return
  6058  0819                     l5905:	
  6059                           ;pwm.c: 118: };pwm.c: 121: case 2:
  6060                           
  6061                           
  6062                           ;pwm.c: 123: {;pwm.c: 125: CCP2CON = 0x00;
  6063  0819  0025               	movlb	5	; select bank5
  6064  081A  019A               	clrf	26	;volatile
  6065                           
  6066                           ;pwm.c: 126: CCPR2L = 0x00;
  6067  081B  0198               	clrf	24	;volatile
  6068                           
  6069                           ;pwm.c: 127: CCPR2H = 0x00;
  6070  081C  0199               	clrf	25	;volatile
  6071                           
  6072                           ;pwm.c: 128: CCP2IE = 1;
  6073  081D  0021               	movlb	1	; select bank1
  6074  081E  1412               	bsf	18,0	;volatile
  6075                           
  6076                           ;pwm.c: 129: CCP2IF = 0;
  6077  081F  0020               	movlb	0	; select bank0
  6078  0820  1012               	bcf	18,0	;volatile
  6079                           
  6080                           ;pwm.c: 130: CCP2CON = 0x05;
  6081  0821  3005               	movlw	5
  6082  0822  0025               	movlb	5	; select bank5
  6083  0823  009A               	movwf	26	;volatile
  6084                           
  6085                           ;pwm.c: 131: break;
  6086  0824  0008               	return
  6087  0825                     l5913:	
  6088                           ;pwm.c: 133: };pwm.c: 136: case 3:
  6089                           
  6090                           
  6091                           ;pwm.c: 138: {;pwm.c: 140: CCP3CON = 0x00;
  6092  0825  0026               	movlb	6	; select bank6
  6093  0826  0193               	clrf	19	;volatile
  6094                           
  6095                           ;pwm.c: 141: CCPR3L = 0x00;
  6096  0827  0191               	clrf	17	;volatile
  6097                           
  6098                           ;pwm.c: 142: CCPR3H = 0x00;
  6099  0828  0192               	clrf	18	;volatile
  6100                           
  6101                           ;pwm.c: 143: CCP3IE = 1;
  6102  0829  0021               	movlb	1	; select bank1
  6103  082A  1613               	bsf	19,4	;volatile
  6104                           
  6105                           ;pwm.c: 144: CCP3IF = 0;
  6106  082B  0020               	movlb	0	; select bank0
  6107  082C  1213               	bcf	19,4	;volatile
  6108                           
  6109                           ;pwm.c: 145: CCP3CON = 0x05;
  6110  082D  3005               	movlw	5
  6111  082E  0026               	movlb	6	; select bank6
  6112  082F  0093               	movwf	19	;volatile
  6113                           
  6114                           ;pwm.c: 146: break;
  6115  0830  0008               	return
  6116  0831                     l5921:	
  6117                           ;pwm.c: 148: };pwm.c: 151: case 4:
  6118                           
  6119                           
  6120                           ;pwm.c: 153: {;pwm.c: 155: CCP4CON = 0x00;
  6121  0831  0026               	movlb	6	; select bank6
  6122  0832  019A               	clrf	26	;volatile
  6123                           
  6124                           ;pwm.c: 156: CCPR4L = 0x00;
  6125  0833  0198               	clrf	24	;volatile
  6126                           
  6127                           ;pwm.c: 157: CCPR4H = 0x00;
  6128  0834  0199               	clrf	25	;volatile
  6129                           
  6130                           ;pwm.c: 158: CCP4IE = 1;
  6131  0835  0021               	movlb	1	; select bank1
  6132  0836  1693               	bsf	19,5	;volatile
  6133                           
  6134                           ;pwm.c: 159: CCP4IF = 0;
  6135  0837  0020               	movlb	0	; select bank0
  6136  0838  1293               	bcf	19,5	;volatile
  6137                           
  6138                           ;pwm.c: 160: CCP4CON = 0x05;
  6139  0839  3005               	movlw	5
  6140  083A  0026               	movlb	6	; select bank6
  6141  083B  009A               	movwf	26	;volatile
  6142                           
  6143                           ;pwm.c: 161: break;
  6144  083C  0008               	return
  6145  083D                     l5929:	
  6146                           ;pwm.c: 163: };pwm.c: 166: case 5:
  6147                           
  6148                           
  6149                           ;pwm.c: 168: {;pwm.c: 170: CCP5CON = 0x00;
  6150  083D  0026               	movlb	6	; select bank6
  6151  083E  019E               	clrf	30	;volatile
  6152                           
  6153                           ;pwm.c: 171: CCPR5L = 0x00;
  6154  083F  019C               	clrf	28	;volatile
  6155                           
  6156                           ;pwm.c: 172: CCPR5H = 0x00;
  6157  0840  019D               	clrf	29	;volatile
  6158                           
  6159                           ;pwm.c: 173: CCP5IE = 1;
  6160  0841  0021               	movlb	1	; select bank1
  6161  0842  1713               	bsf	19,6	;volatile
  6162                           
  6163                           ;pwm.c: 174: CCP5IF = 0;
  6164  0843  0020               	movlb	0	; select bank0
  6165  0844  1313               	bcf	19,6	;volatile
  6166                           
  6167                           ;pwm.c: 175: CCP5CON = 0x05;
  6168  0845  3005               	movlw	5
  6169  0846  0026               	movlb	6	; select bank6
  6170  0847  009E               	movwf	30	;volatile
  6171                           
  6172                           ;pwm.c: 187: };pwm.c: 189: }
  6173                           
  6174                           ;pwm.c: 183: {;pwm.c: 185: break;
  6175                           
  6176                           ;pwm.c: 178: };pwm.c: 182: default:
  6177                           
  6178                           ;pwm.c: 176: break;
  6179  0848  0008               	return
  6180  0849                     l5939:	
  6181  0849  0020               	movlb	0	; select bank0
  6182  084A  0828               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  6183                           
  6184                           ; Switch size 1, requested type "space"
  6185                           ; Number of cases is 5, Range of values is 1 to 5
  6186                           ; switch strategies available:
  6187                           ; Name         Instructions Cycles
  6188                           ; simple_byte           16     9 (average)
  6189                           ; direct_byte           19     9 (fixed)
  6190                           ; jumptable            263     9 (fixed)
  6191                           ;	Chosen strategy is simple_byte
  6192  084B  3A01               	xorlw	1	; case 1
  6193  084C  1903               	skipnz
  6194  084D  280D               	goto	l5897
  6195  084E  3A03               	xorlw	3	; case 2
  6196  084F  1903               	skipnz
  6197  0850  2819               	goto	l5905
  6198  0851  3A01               	xorlw	1	; case 3
  6199  0852  1903               	skipnz
  6200  0853  2825               	goto	l5913
  6201  0854  3A07               	xorlw	7	; case 4
  6202  0855  1903               	skipnz
  6203  0856  2831               	goto	l5921
  6204  0857  3A01               	xorlw	1	; case 5
  6205  0858  1903               	skipnz
  6206  0859  283D               	goto	l5929
  6207  085A  285B               	goto	l1172
  6208  085B                     l1172:	
  6209  085B  0008               	return
  6210  085C                     __end_of_PWM_Capture_init:	
  6211                           
  6212                           	psect	text9
  6213  1D49                     __ptext9:	
  6214 ;; *************** function _Oscill_Source_Block *****************
  6215 ;; Defined at:
  6216 ;;		line 478 in file "../timer.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;		None
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;		None
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  1    wreg      void 
  6223 ;; Registers used:
  6224 ;;		wreg
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6230 ;;      Params:         0       0       0       0       0       0       0       0
  6231 ;;      Locals:         0       0       0       0       0       0       0       0
  6232 ;;      Temps:          0       0       0       0       0       0       0       0
  6233 ;;      Totals:         0       0       0       0       0       0       0       0
  6234 ;;Total ram usage:        0 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    3
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_system_init
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function _Oscill_Source_Block
  6246  1D49                     _Oscill_Source_Block:	
  6247                           
  6248                           ;timer.c: 482: OSCCON = 0xF0;
  6249                           
  6250                           ;incstack = 0
  6251                           ; Regs used in _Oscill_Source_Block: [wreg]
  6252  1D49  30F0               	movlw	240
  6253  1D4A  0021               	movlb	1	; select bank1
  6254  1D4B  0099               	movwf	25	;volatile
  6255                           
  6256                           ;timer.c: 483: WDTCON = 0b00010001;
  6257  1D4C  3011               	movlw	17
  6258  1D4D  0097               	movwf	23	;volatile
  6259  1D4E  0008               	return
  6260  1D4F                     __end_of_Oscill_Source_Block:	
  6261                           
  6262                           	psect	text10
  6263  085C                     __ptext10:	
  6264 ;; *************** function _I_calibrationInit *****************
  6265 ;; Defined at:
  6266 ;;		line 178 in file "../main.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;		None
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0, pclath, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6280 ;;      Params:         0       0       0       0       0       0       0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0       0
  6282 ;;      Temps:          0       5       0       0       0       0       0       0
  6283 ;;      Totals:         0       5       0       0       0       0       0       0
  6284 ;;Total ram usage:        5 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    4
  6287 ;; This function calls:
  6288 ;;		_ADC_Read
  6289 ;;		_ADC_Wait
  6290 ;;		_read_eeprom_data
  6291 ;; This function is called by:
  6292 ;;		_system_init
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _I_calibrationInit
  6298  085C                     _I_calibrationInit:	
  6299                           
  6300                           ;main.c: 182: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  6301                           
  6302                           ;incstack = 0
  6303                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  6304  085C  3003               	movlw	3
  6305  085D  319D  2598  3188   	fcall	_read_eeprom_data
  6306  0860  3A00               	xorlw	0
  6307  0861  1903               	skipnz
  6308  0862  2885               	goto	l5791
  6309  0863  3003               	movlw	3
  6310  0864  319D  2598  3188   	fcall	_read_eeprom_data
  6311  0867  3AFF               	xorlw	255
  6312  0868  1903               	skipnz
  6313  0869  2885               	goto	l5791
  6314                           
  6315                           ;main.c: 184: {;main.c: 186: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eep
      +                          rom_data( 0x03 );
  6316  086A  3003               	movlw	3
  6317  086B  319D  2598  3188   	fcall	_read_eeprom_data
  6318  086E  0020               	movlb	0	; select bank0
  6319  086F  00AC               	movwf	??_I_calibrationInit
  6320  0870  01AD               	clrf	??_I_calibrationInit+1
  6321  0871  3002               	movlw	2
  6322  0872  319D  2598  3188   	fcall	_read_eeprom_data
  6323  0875  0020               	movlb	0	; select bank0
  6324  0876  00AE               	movwf	??_I_calibrationInit+2
  6325  0877  01AF               	clrf	??_I_calibrationInit+3
  6326  0878  082E               	movf	??_I_calibrationInit+2,w
  6327  0879  00AF               	movwf	??_I_calibrationInit+3
  6328  087A  01AE               	clrf	??_I_calibrationInit+2
  6329  087B  082C               	movf	??_I_calibrationInit,w
  6330  087C  042E               	iorwf	??_I_calibrationInit+2,w
  6331  087D  0021               	movlb	1	; select bank1
  6332  087E  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
  6333  087F  0020               	movlb	0	; select bank0
  6334  0880  082D               	movf	??_I_calibrationInit+1,w
  6335  0881  042F               	iorwf	??_I_calibrationInit+3,w
  6336  0882  0021               	movlb	1	; select bank1
  6337  0883  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  6338                           
  6339                           ;main.c: 189: }
  6340  0884  288A               	goto	l5793
  6341  0885                     l5791:	
  6342                           
  6343                           ;main.c: 192: else;main.c: 193: {;main.c: 195: ui16_I_cal_Ph1 = 0x0100;
  6344  0885  3000               	movlw	0
  6345  0886  0021               	movlb	1	; select bank1
  6346  0887  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
  6347  0888  3001               	movlw	1
  6348  0889  00ED               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
  6349  088A                     l5793:	
  6350                           
  6351                           ;main.c: 198: };main.c: 201: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 
      +                          0x05 ) != 0xFF)
  6352  088A  3005               	movlw	5
  6353  088B  319D  2598  3188   	fcall	_read_eeprom_data
  6354  088E  3A00               	xorlw	0
  6355  088F  1903               	skipnz
  6356  0890  28B3               	goto	l5799
  6357  0891  3005               	movlw	5
  6358  0892  319D  2598  3188   	fcall	_read_eeprom_data
  6359  0895  3AFF               	xorlw	255
  6360  0896  1903               	skipnz
  6361  0897  28B3               	goto	l5799
  6362                           
  6363                           ;main.c: 203: {;main.c: 205: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eep
      +                          rom_data( 0x05 );
  6364  0898  3005               	movlw	5
  6365  0899  319D  2598  3188   	fcall	_read_eeprom_data
  6366  089C  0020               	movlb	0	; select bank0
  6367  089D  00AC               	movwf	??_I_calibrationInit
  6368  089E  01AD               	clrf	??_I_calibrationInit+1
  6369  089F  3004               	movlw	4
  6370  08A0  319D  2598  3188   	fcall	_read_eeprom_data
  6371  08A3  0020               	movlb	0	; select bank0
  6372  08A4  00AE               	movwf	??_I_calibrationInit+2
  6373  08A5  01AF               	clrf	??_I_calibrationInit+3
  6374  08A6  082E               	movf	??_I_calibrationInit+2,w
  6375  08A7  00AF               	movwf	??_I_calibrationInit+3
  6376  08A8  01AE               	clrf	??_I_calibrationInit+2
  6377  08A9  082C               	movf	??_I_calibrationInit,w
  6378  08AA  042E               	iorwf	??_I_calibrationInit+2,w
  6379  08AB  0021               	movlb	1	; select bank1
  6380  08AC  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  6381  08AD  0020               	movlb	0	; select bank0
  6382  08AE  082D               	movf	??_I_calibrationInit+1,w
  6383  08AF  042F               	iorwf	??_I_calibrationInit+3,w
  6384  08B0  0021               	movlb	1	; select bank1
  6385  08B1  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  6386                           
  6387                           ;main.c: 208: }
  6388  08B2  28B8               	goto	l5801
  6389  08B3                     l5799:	
  6390                           
  6391                           ;main.c: 211: else;main.c: 212: {;main.c: 214: ui16_I_cal_Ph2 = 0x0100;
  6392  08B3  3000               	movlw	0
  6393  08B4  0021               	movlb	1	; select bank1
  6394  08B5  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  6395  08B6  3001               	movlw	1
  6396  08B7  00EB               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
  6397  08B8                     l5801:	
  6398                           
  6399                           ;main.c: 217: };main.c: 220: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 
      +                          0x07 ) != 0xFF)
  6400  08B8  3007               	movlw	7
  6401  08B9  319D  2598  3188   	fcall	_read_eeprom_data
  6402  08BC  3A00               	xorlw	0
  6403  08BD  1903               	skipnz
  6404  08BE  28E1               	goto	l5807
  6405  08BF  3007               	movlw	7
  6406  08C0  319D  2598  3188   	fcall	_read_eeprom_data
  6407  08C3  3AFF               	xorlw	255
  6408  08C4  1903               	skipnz
  6409  08C5  28E1               	goto	l5807
  6410                           
  6411                           ;main.c: 222: {;main.c: 224: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eep
      +                          rom_data( 0x07 );
  6412  08C6  3007               	movlw	7
  6413  08C7  319D  2598  3188   	fcall	_read_eeprom_data
  6414  08CA  0020               	movlb	0	; select bank0
  6415  08CB  00AC               	movwf	??_I_calibrationInit
  6416  08CC  01AD               	clrf	??_I_calibrationInit+1
  6417  08CD  3006               	movlw	6
  6418  08CE  319D  2598  3188   	fcall	_read_eeprom_data
  6419  08D1  0020               	movlb	0	; select bank0
  6420  08D2  00AE               	movwf	??_I_calibrationInit+2
  6421  08D3  01AF               	clrf	??_I_calibrationInit+3
  6422  08D4  082E               	movf	??_I_calibrationInit+2,w
  6423  08D5  00AF               	movwf	??_I_calibrationInit+3
  6424  08D6  01AE               	clrf	??_I_calibrationInit+2
  6425  08D7  082C               	movf	??_I_calibrationInit,w
  6426  08D8  042E               	iorwf	??_I_calibrationInit+2,w
  6427  08D9  0021               	movlb	1	; select bank1
  6428  08DA  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
  6429  08DB  0020               	movlb	0	; select bank0
  6430  08DC  082D               	movf	??_I_calibrationInit+1,w
  6431  08DD  042F               	iorwf	??_I_calibrationInit+3,w
  6432  08DE  0021               	movlb	1	; select bank1
  6433  08DF  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  6434                           
  6435                           ;main.c: 226: }
  6436  08E0  28E6               	goto	l5809
  6437  08E1                     l5807:	
  6438                           
  6439                           ;main.c: 229: else;main.c: 230: {;main.c: 232: ui16_I_cal_Ph3 = 0x0100;
  6440  08E1  3000               	movlw	0
  6441  08E2  0021               	movlb	1	; select bank1
  6442  08E3  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
  6443  08E4  3001               	movlw	1
  6444  08E5  00E9               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
  6445  08E6                     l5809:	
  6446                           
  6447                           ;main.c: 235: };main.c: 328: LATC2 = 0;
  6448  08E6  0022               	movlb	2	; select bank2
  6449  08E7  110E               	bcf	14,2	;volatile
  6450                           
  6451                           ;main.c: 329: LATB2 = 0;
  6452  08E8  110D               	bcf	13,2	;volatile
  6453                           
  6454                           ;main.c: 330: LATB1 = 0;
  6455  08E9  108D               	bcf	13,1	;volatile
  6456                           
  6457                           ;main.c: 331: LATC = LATC | 0b00011010;
  6458  08EA  080E               	movf	14,w	;volatile
  6459  08EB  381A               	iorlw	26
  6460  08EC  008E               	movwf	14	;volatile
  6461                           
  6462                           ;main.c: 333: ADC_Wait();
  6463  08ED  319D  25E6  3188   	fcall	_ADC_Wait
  6464                           
  6465                           ;main.c: 334: ADC_Wait();
  6466  08F0  319D  25E6  3188   	fcall	_ADC_Wait
  6467                           
  6468                           ;main.c: 336: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  6469  08F3  3011               	movlw	17
  6470  08F4  0021               	movlb	1	; select bank1
  6471  08F5  009D               	movwf	29	;volatile
  6472                           
  6473                           ;main.c: 337: ADC_Wait();
  6474  08F6  319D  25E6  3188   	fcall	_ADC_Wait
  6475                           
  6476                           ;main.c: 338: ( GO_nDONE = 1 );
  6477  08F9  0021               	movlb	1	; select bank1
  6478  08FA  149D               	bsf	29,1	;volatile
  6479                           
  6480                           ;main.c: 341: ui8_current_cal[2] = ADC_Read();
  6481  08FB  319E  2694  3188   	fcall	_ADC_Read
  6482  08FE  0020               	movlb	0	; select bank0
  6483  08FF  0828               	movf	?_ADC_Read,w
  6484  0900  00AC               	movwf	??_I_calibrationInit
  6485  0901  082C               	movf	??_I_calibrationInit,w
  6486  0902  0022               	movlb	2	; select bank2
  6487  0903  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  6488                           
  6489                           ;main.c: 343: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  6490  0904  3035               	movlw	53
  6491  0905  0021               	movlb	1	; select bank1
  6492  0906  009D               	movwf	29	;volatile
  6493                           
  6494                           ;main.c: 344: ADC_Wait();
  6495  0907  319D  25E6  3188   	fcall	_ADC_Wait
  6496                           
  6497                           ;main.c: 345: ( GO_nDONE = 1 );
  6498  090A  0021               	movlb	1	; select bank1
  6499  090B  149D               	bsf	29,1	;volatile
  6500                           
  6501                           ;main.c: 348: ui8_current_cal[1] = ADC_Read();
  6502  090C  319E  2694  3188   	fcall	_ADC_Read
  6503  090F  0020               	movlb	0	; select bank0
  6504  0910  0828               	movf	?_ADC_Read,w
  6505  0911  00AC               	movwf	??_I_calibrationInit
  6506  0912  082C               	movf	??_I_calibrationInit,w
  6507  0913  0022               	movlb	2	; select bank2
  6508  0914  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  6509                           
  6510                           ;main.c: 350: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  6511  0915  3009               	movlw	9
  6512  0916  0021               	movlb	1	; select bank1
  6513  0917  009D               	movwf	29	;volatile
  6514                           
  6515                           ;main.c: 351: ADC_Wait();
  6516  0918  319D  25E6  3188   	fcall	_ADC_Wait
  6517                           
  6518                           ;main.c: 352: ( GO_nDONE = 1 );
  6519  091B  0021               	movlb	1	; select bank1
  6520  091C  149D               	bsf	29,1	;volatile
  6521                           
  6522                           ;main.c: 355: ui8_current_cal[0] = ADC_Read();
  6523  091D  319E  2694         	fcall	_ADC_Read
  6524  091F  0020               	movlb	0	; select bank0
  6525  0920  0828               	movf	?_ADC_Read,w
  6526  0921  00AC               	movwf	??_I_calibrationInit
  6527  0922  082C               	movf	??_I_calibrationInit,w
  6528  0923  0022               	movlb	2	; select bank2
  6529  0924  00A0               	movwf	_ui8_current_cal^(0+256)
  6530  0925  0008               	return
  6531  0926                     __end_of_I_calibrationInit:	
  6532                           
  6533                           	psect	text11
  6534  1D98                     __ptext11:	
  6535 ;; *************** function _read_eeprom_data *****************
  6536 ;; Defined at:
  6537 ;;		line 52 in file "../eeprom.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  ui8_adress      1    wreg     unsigned char 
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;  ui8_adress      1    9[BANK0 ] unsigned char 
  6542 ;;  ui8_adress_d    1   10[BANK0 ] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      unsigned char 
  6545 ;; Registers used:
  6546 ;;		wreg
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6552 ;;      Params:         0       0       0       0       0       0       0       0
  6553 ;;      Locals:         0       2       0       0       0       0       0       0
  6554 ;;      Temps:          0       1       0       0       0       0       0       0
  6555 ;;      Totals:         0       3       0       0       0       0       0       0
  6556 ;;Total ram usage:        3 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    3
  6559 ;; This function calls:
  6560 ;;		Nothing
  6561 ;; This function is called by:
  6562 ;;		_I_calibrationInit
  6563 ;;		_EOL
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           
  6568                           ;psect for function _read_eeprom_data
  6569  1D98                     _read_eeprom_data:	
  6570                           
  6571                           ;incstack = 0
  6572                           ; Regs used in _read_eeprom_data: [wreg]
  6573                           ;read_eeprom_data@ui8_adress stored from wreg
  6574  1D98  0020               	movlb	0	; select bank0
  6575  1D99  00A9               	movwf	read_eeprom_data@ui8_adress
  6576                           
  6577                           ;eeprom.c: 56: unsigned char ui8_adress_data;;eeprom.c: 58: EEADRL = ui8_adress;
  6578  1D9A  0829               	movf	read_eeprom_data@ui8_adress,w
  6579  1D9B  0023               	movlb	3	; select bank3
  6580  1D9C  0091               	movwf	17	;volatile
  6581                           
  6582                           ;eeprom.c: 59: EEPGD = 0;
  6583  1D9D  1395               	bcf	21,7	;volsfr
  6584                           
  6585                           ;eeprom.c: 60: CFGS = 0;
  6586  1D9E  1315               	bcf	21,6	;volsfr
  6587                           
  6588                           ;eeprom.c: 61: RD = 1;
  6589  1D9F  1415               	bsf	21,0	;volsfr
  6590                           
  6591                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  6592  1DA0  0813               	movf	19,w	;volatile
  6593  1DA1  0020               	movlb	0	; select bank0
  6594  1DA2  00A8               	movwf	??_read_eeprom_data
  6595  1DA3  0828               	movf	??_read_eeprom_data,w
  6596  1DA4  00AA               	movwf	read_eeprom_data@ui8_adress_data
  6597                           
  6598                           ;eeprom.c: 64: return ui8_adress_data;
  6599  1DA5  082A               	movf	read_eeprom_data@ui8_adress_data,w
  6600  1DA6  0008               	return
  6601  1DA7                     __end_of_read_eeprom_data:	
  6602                           
  6603                           	psect	text12
  6604  1EFE                     __ptext12:	
  6605 ;; *************** function _FILTER_Init *****************
  6606 ;; Defined at:
  6607 ;;		line 226 in file "../adc.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  1    wreg      void 
  6614 ;; Registers used:
  6615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6621 ;;      Params:         0       0       0       0       0       0       0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0       0
  6623 ;;      Temps:          0       1       0       0       0       0       0       0
  6624 ;;      Totals:         0       1       0       0       0       0       0       0
  6625 ;;Total ram usage:        1 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    4
  6628 ;; This function calls:
  6629 ;;		_ADC_Read
  6630 ;;		_ADC_Wait
  6631 ;; This function is called by:
  6632 ;;		_system_init
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           
  6637                           ;psect for function _FILTER_Init
  6638  1EFE                     _FILTER_Init:	
  6639                           
  6640                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  6641                           
  6642                           ;incstack = 0
  6643                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6644  1EFE  0021               	movlb	1	; select bank1
  6645  1EFF  01E1               	clrf	_windowPtr1^(0+128)
  6646  1F00                     L18:	
  6647  1F00  3008               	movlw	8
  6648  1F01  0261               	subwf	_windowPtr1^(0+128),w
  6649  1F02  1803               	btfsc	3,0
  6650  1F03  0008               	return
  6651                           
  6652                           ;adc.c: 232: {;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  6653  1F04  3031               	movlw	49
  6654  1F05  009D               	movwf	29	;volatile
  6655                           
  6656                           ;adc.c: 235: ADC_Wait( );
  6657  1F06  319D  25E6  319E   	fcall	_ADC_Wait
  6658                           
  6659                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  6660  1F09  319E  2694  319E   	fcall	_ADC_Read
  6661  1F0C  0020               	movlb	0	; select bank0
  6662  1F0D  0829               	movf	?_ADC_Read+1,w
  6663  1F0E  00DC               	movwf	_ui16_Ubat_bldc+1	;volatile
  6664  1F0F  0828               	movf	?_ADC_Read,w
  6665  1F10  00DB               	movwf	_ui16_Ubat_bldc	;volatile
  6666                           
  6667                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  6668  1F11  0021               	movlb	1	; select bank1
  6669  1F12  3561               	lslf	_windowPtr1^(0+128),w
  6670  1F13  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  6671  1F14  0086               	movwf	6
  6672  1F15  3002               	movlw	2	; select bank4/5
  6673  1F16  0087               	movwf	7
  6674  1F17  305E               	movlw	94
  6675  1F18  3FC0               	movwi [0]fsr1
  6676  1F19  3001               	movlw	1
  6677  1F1A  3FC1               	movwi [1]fsr1
  6678  1F1B  3001               	movlw	1
  6679  1F1C  0020               	movlb	0	; select bank0
  6680  1F1D  00AC               	movwf	??_FILTER_Init
  6681  1F1E  082C               	movf	??_FILTER_Init,w
  6682  1F1F  0021               	movlb	1	; select bank1
  6683  1F20  07E1               	addwf	_windowPtr1^(0+128),f
  6684  1F21  2F00               	goto	L18
  6685  1F22                     __end_of_FILTER_Init:	
  6686                           
  6687                           	psect	text13
  6688  1DE6                     __ptext13:	
  6689 ;; *************** function _ADC_Wait *****************
  6690 ;; Defined at:
  6691 ;;		line 128 in file "../adc.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;		None
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;		None
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  1    wreg      void 
  6698 ;; Registers used:
  6699 ;;		None
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6705 ;;      Params:         0       0       0       0       0       0       0       0
  6706 ;;      Locals:         0       0       0       0       0       0       0       0
  6707 ;;      Temps:          0       0       0       0       0       0       0       0
  6708 ;;      Totals:         0       0       0       0       0       0       0       0
  6709 ;;Total ram usage:        0 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    3
  6712 ;; This function calls:
  6713 ;;		Nothing
  6714 ;; This function is called by:
  6715 ;;		_FILTER_Init
  6716 ;;		_I_calibrationInit
  6717 ;;		_EOL
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function _ADC_Wait
  6723  1DE6                     _ADC_Wait:	
  6724                           
  6725                           ;adc.c: 133: __nop();
  6726                           
  6727                           ;incstack = 0
  6728                           ; Regs used in _ADC_Wait: []
  6729  1DE6  0000               	nop
  6730                           
  6731                           ;adc.c: 134: __nop();
  6732  1DE7  0000               	nop
  6733                           
  6734                           ;adc.c: 135: __nop();
  6735  1DE8  0000               	nop
  6736                           
  6737                           ;adc.c: 136: __nop();
  6738  1DE9  0000               	nop
  6739                           
  6740                           ;adc.c: 137: __nop();
  6741  1DEA  0000               	nop
  6742                           
  6743                           ;adc.c: 138: __nop();
  6744  1DEB  0000               	nop
  6745                           
  6746                           ;adc.c: 139: __nop();
  6747  1DEC  0000               	nop
  6748                           
  6749                           ;adc.c: 140: __nop();
  6750  1DED  0000               	nop
  6751                           
  6752                           ;adc.c: 142: __nop();
  6753  1DEE  0000               	nop
  6754                           
  6755                           ;adc.c: 143: __nop();
  6756  1DEF  0000               	nop
  6757                           
  6758                           ;adc.c: 144: __nop();
  6759  1DF0  0000               	nop
  6760                           
  6761                           ;adc.c: 145: __nop();
  6762  1DF1  0000               	nop
  6763                           
  6764                           ;adc.c: 146: __nop();
  6765  1DF2  0000               	nop
  6766                           
  6767                           ;adc.c: 147: __nop();
  6768  1DF3  0000               	nop
  6769                           
  6770                           ;adc.c: 148: __nop();
  6771  1DF4  0000               	nop
  6772                           
  6773                           ;adc.c: 149: __nop();
  6774  1DF5  0000               	nop
  6775                           
  6776                           ;adc.c: 151: __nop();
  6777  1DF6  0000               	nop
  6778                           
  6779                           ;adc.c: 152: __nop();
  6780  1DF7  0000               	nop
  6781                           
  6782                           ;adc.c: 153: __nop();
  6783  1DF8  0000               	nop
  6784                           
  6785                           ;adc.c: 154: __nop();
  6786  1DF9  0000               	nop
  6787                           
  6788                           ;adc.c: 155: __nop();
  6789  1DFA  0000               	nop
  6790                           
  6791                           ;adc.c: 156: __nop();
  6792  1DFB  0000               	nop
  6793                           
  6794                           ;adc.c: 157: __nop();
  6795  1DFC  0000               	nop
  6796                           
  6797                           ;adc.c: 158: __nop();
  6798  1DFD  0000               	nop
  6799  1DFE  0008               	return
  6800  1DFF                     __end_of_ADC_Wait:	
  6801                           
  6802                           	psect	text14
  6803  1E94                     __ptext14:	
  6804 ;; *************** function _ADC_Read *****************
  6805 ;; Defined at:
  6806 ;;		line 175 in file "../adc.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;		None
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  i               1   11[BANK0 ] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  2    8[BANK0 ] unsigned int 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, status,0
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6820 ;;      Params:         0       2       0       0       0       0       0       0
  6821 ;;      Locals:         0       1       0       0       0       0       0       0
  6822 ;;      Temps:          0       1       0       0       0       0       0       0
  6823 ;;      Totals:         0       4       0       0       0       0       0       0
  6824 ;;Total ram usage:        4 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    3
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_FILTER_Init
  6831 ;;		_I_calibrationInit
  6832 ;;		_EOL
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           
  6837                           ;psect for function _ADC_Read
  6838  1E94                     _ADC_Read:	
  6839                           
  6840                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
  6841                           
  6842                           ;incstack = 0
  6843                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  6844  1E94  0020               	movlb	0	; select bank0
  6845  1E95  01AB               	clrf	ADC_Read@i
  6846  1E96                     l69:	
  6847                           ;adc.c: 182: while( GO_nDONE )
  6848                           
  6849  1E96  0021               	movlb	1	; select bank1
  6850  1E97  1C9D               	btfss	29,1	;volatile
  6851  1E98  2EA2               	goto	l5641
  6852                           
  6853                           ;adc.c: 184: {;adc.c: 186: i++;
  6854  1E99  3001               	movlw	1
  6855  1E9A  0020               	movlb	0	; select bank0
  6856  1E9B  00AA               	movwf	??_ADC_Read
  6857  1E9C  082A               	movf	??_ADC_Read,w
  6858  1E9D  07AB               	addwf	ADC_Read@i,f
  6859                           
  6860                           ;adc.c: 189: if( i > 64 )
  6861  1E9E  3041               	movlw	65
  6862  1E9F  022B               	subwf	ADC_Read@i,w
  6863  1EA0  1C03               	skipc
  6864  1EA1  2E96               	goto	l69
  6865  1EA2                     l5641:	
  6866                           ;adc.c: 191: {;adc.c: 193: break;
  6867                           
  6868                           
  6869                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
  6870  1EA2  0021               	movlb	1	; select bank1
  6871  1EA3  081C               	movf	28,w	;volatile
  6872  1EA4  0020               	movlb	0	; select bank0
  6873  1EA5  00AA               	movwf	??_ADC_Read
  6874  1EA6  082A               	movf	??_ADC_Read,w
  6875  1EA7  0021               	movlb	1	; select bank1
  6876  1EA8  00BD               	movwf	(_analog_value^(0+128)+1)	;volatile
  6877                           
  6878                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  6879  1EA9  081B               	movf	27,w	;volatile
  6880  1EAA  0020               	movlb	0	; select bank0
  6881  1EAB  00AA               	movwf	??_ADC_Read
  6882  1EAC  082A               	movf	??_ADC_Read,w
  6883  1EAD  0021               	movlb	1	; select bank1
  6884  1EAE  00BC               	movwf	_analog_value^(0+128)	;volatile
  6885                           
  6886                           ;adc.c: 204: return analog_value.w;
  6887  1EAF  083D               	movf	(_analog_value+1)^(0+128),w	;volatile
  6888  1EB0  0020               	movlb	0	; select bank0
  6889  1EB1  00A9               	movwf	?_ADC_Read+1
  6890  1EB2  0021               	movlb	1	; select bank1
  6891  1EB3  083C               	movf	_analog_value^(0+128),w	;volatile
  6892  1EB4  0020               	movlb	0	; select bank0
  6893  1EB5  00A8               	movwf	?_ADC_Read
  6894  1EB6  0008               	return
  6895  1EB7                     __end_of_ADC_Read:	
  6896                           
  6897                           	psect	text15
  6898  1D7D                     __ptext15:	
  6899 ;; *************** function _DiagInit *****************
  6900 ;; Defined at:
  6901 ;;		line 148 in file "../diag.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;		None
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;		None
  6906 ;; Return value:  Size  Location     Type
  6907 ;;                  1    wreg      void 
  6908 ;; Registers used:
  6909 ;;		wreg, status,2, status,0, pclath, cstack
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6915 ;;      Params:         0       0       0       0       0       0       0       0
  6916 ;;      Locals:         0       0       0       0       0       0       0       0
  6917 ;;      Temps:          0       0       0       0       0       0       0       0
  6918 ;;      Totals:         0       0       0       0       0       0       0       0
  6919 ;;Total ram usage:        0 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    4
  6922 ;; This function calls:
  6923 ;;		_PWM_Write_Out
  6924 ;; This function is called by:
  6925 ;;		_system_init
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           
  6930                           ;psect for function _DiagInit
  6931  1D7D                     _DiagInit:	
  6932                           
  6933                           ;diag.c: 162: ui8_error_Flags.b = 0;
  6934                           
  6935                           ;incstack = 0
  6936                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  6937  1D7D  0021               	movlb	1	; select bank1
  6938  1D7E  01E0               	clrf	_ui8_error_Flags^(0+128)
  6939                           
  6940                           ;diag.c: 163: PWM_Write_Out( 11 );
  6941  1D7F  300B               	movlw	11
  6942  1D80  319D  2562         	fcall	_PWM_Write_Out
  6943                           
  6944                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  6945  1D82  0021               	movlb	1	; select bank1
  6946  1D83  01E6               	clrf	_ui16_IPhase1_bldc_cal^(0+128)
  6947  1D84  01E7               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+128)
  6948                           
  6949                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  6950  1D85  01E4               	clrf	_ui16_IPhase2_bldc_cal^(0+128)
  6951  1D86  01E5               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+128)
  6952                           
  6953                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  6954  1D87  01E2               	clrf	_ui16_IPhase3_bldc_cal^(0+128)
  6955  1D88  01E3               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+128)
  6956  1D89  0008               	return
  6957  1D8A                     __end_of_DiagInit:	
  6958                           
  6959                           	psect	text16
  6960  1D72                     __ptext16:	
  6961 ;; *************** function _ADC_Init *****************
  6962 ;; Defined at:
  6963 ;;		line 102 in file "../adc.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;		None
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;		None
  6968 ;; Return value:  Size  Location     Type
  6969 ;;                  1    wreg      void 
  6970 ;; Registers used:
  6971 ;;		wreg, status,2
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6977 ;;      Params:         0       0       0       0       0       0       0       0
  6978 ;;      Locals:         0       0       0       0       0       0       0       0
  6979 ;;      Temps:          0       0       0       0       0       0       0       0
  6980 ;;      Totals:         0       0       0       0       0       0       0       0
  6981 ;;Total ram usage:        0 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    3
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_system_init
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           
  6992                           ;psect for function _ADC_Init
  6993  1D72                     _ADC_Init:	
  6994                           
  6995                           ;adc.c: 106: ADCON1 = 0b10100000;
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _ADC_Init: [wreg+status,2]
  6999  1D72  30A0               	movlw	160
  7000  1D73  0021               	movlb	1	; select bank1
  7001  1D74  009E               	movwf	30	;volatile
  7002                           
  7003                           ;adc.c: 108: ADCON0 = 0b00000000;
  7004  1D75  019D               	clrf	29	;volatile
  7005                           
  7006                           ;adc.c: 109: ADON = 1;
  7007  1D76  141D               	bsf	29,0	;volatile
  7008                           
  7009                           ;adc.c: 110: FVRCON = FVRCON | 0b00110000;
  7010  1D77  0022               	movlb	2	; select bank2
  7011  1D78  0817               	movf	23,w	;volatile
  7012  1D79  3830               	iorlw	48
  7013  1D7A  0097               	movwf	23	;volatile
  7014                           
  7015                           ;adc.c: 111: ui8_temp_calibration = 0;
  7016  1D7B  01E7               	clrf	_ui8_temp_calibration^(0+256)
  7017  1D7C  0008               	return
  7018  1D7D                     __end_of_ADC_Init:	
  7019                           
  7020                           	psect	text17
  7021  147F                     __ptext17:	
  7022 ;; *************** function _rate_limit *****************
  7023 ;; Defined at:
  7024 ;;		line 1589 in file "../main.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  pwm             2   14[BANK0 ] int 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  sign_pwm_inc    2   24[BANK0 ] int 
  7029 ;;  pwm_inc         2   22[BANK0 ] int 
  7030 ;;  abs_delta_pw    2   20[BANK0 ] int 
  7031 ;;  sign_delta_p    2   18[BANK0 ] int 
  7032 ;;  delta_pwm       2   26[BANK0 ] int 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  2   14[BANK0 ] int 
  7035 ;; Registers used:
  7036 ;;		wreg, status,2, status,0, pclath, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7042 ;;      Params:         0       2       0       0       0       0       0       0
  7043 ;;      Locals:         0      10       0       0       0       0       0       0
  7044 ;;      Temps:          0       2       0       0       0       0       0       0
  7045 ;;      Totals:         0      14       0       0       0       0       0       0
  7046 ;;Total ram usage:       14 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    4
  7049 ;; This function calls:
  7050 ;;		___wmul
  7051 ;;		_sign
  7052 ;; This function is called by:
  7053 ;;		_main
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           
  7058                           ;psect for function _rate_limit
  7059  147F                     _rate_limit:	
  7060                           
  7061                           ;main.c: 1590: int delta_pwm = last_pwm - pwm;
  7062                           
  7063                           ;incstack = 0
  7064                           ; Regs used in _rate_limit: [wreg+status,2+status,0+pclath+cstack]
  7065  147F  0020               	movlb	0	; select bank0
  7066  1480  092E               	comf	rate_limit@pwm,w
  7067  1481  00B0               	movwf	??_rate_limit
  7068  1482  092F               	comf	rate_limit@pwm+1,w
  7069  1483  00B1               	movwf	??_rate_limit+1
  7070  1484  0AB0               	incf	??_rate_limit,f
  7071  1485  1903               	skipnz
  7072  1486  0AB1               	incf	??_rate_limit+1,f
  7073  1487  0022               	movlb	2	; select bank2
  7074  1488  0823               	movf	_last_pwm^(0+256),w
  7075  1489  0020               	movlb	0	; select bank0
  7076  148A  0730               	addwf	??_rate_limit,w
  7077  148B  00BA               	movwf	rate_limit@delta_pwm
  7078  148C  0022               	movlb	2	; select bank2
  7079  148D  0824               	movf	(_last_pwm+1)^(0+256),w
  7080  148E  0020               	movlb	0	; select bank0
  7081  148F  3D31               	addwfc	??_rate_limit+1,w
  7082  1490  00BB               	movwf	rate_limit@delta_pwm+1
  7083                           
  7084                           ;main.c: 1591: if(delta_pwm < 0) {
  7085  1491  1FBB               	btfss	rate_limit@delta_pwm+1,7
  7086  1492  2CE8               	goto	l9153
  7087                           
  7088                           ;main.c: 1592: int sign_delta_pwm = sign(delta_pwm);
  7089  1493  083B               	movf	rate_limit@delta_pwm+1,w
  7090  1494  00A9               	movwf	sign@x+1
  7091  1495  083A               	movf	rate_limit@delta_pwm,w
  7092  1496  00A8               	movwf	sign@x
  7093  1497  319E  2671  3194   	fcall	_sign
  7094  149A  0020               	movlb	0	; select bank0
  7095  149B  0829               	movf	?_sign+1,w
  7096  149C  00B3               	movwf	rate_limit@sign_delta_pwm+1
  7097  149D  0828               	movf	?_sign,w
  7098  149E  00B2               	movwf	rate_limit@sign_delta_pwm
  7099                           
  7100                           ;main.c: 1593: int abs_delta_pwm = delta_pwm;
  7101  149F  083B               	movf	rate_limit@delta_pwm+1,w
  7102  14A0  00B5               	movwf	rate_limit@abs_delta_pwm+1
  7103  14A1  083A               	movf	rate_limit@delta_pwm,w
  7104  14A2  00B4               	movwf	rate_limit@abs_delta_pwm
  7105                           
  7106                           ;main.c: 1594: if(delta_pwm < 0) {abs_delta_pwm = delta_pwm * -1;}
  7107  14A3  1FBB               	btfss	rate_limit@delta_pwm+1,7
  7108  14A4  2CB0               	goto	l9141
  7109  14A5  093A               	comf	rate_limit@delta_pwm,w
  7110  14A6  00B0               	movwf	??_rate_limit
  7111  14A7  093B               	comf	rate_limit@delta_pwm+1,w
  7112  14A8  00B1               	movwf	??_rate_limit+1
  7113  14A9  0AB0               	incf	??_rate_limit,f
  7114  14AA  1903               	skipnz
  7115  14AB  0AB1               	incf	??_rate_limit+1,f
  7116  14AC  0830               	movf	??_rate_limit,w
  7117  14AD  00B4               	movwf	rate_limit@abs_delta_pwm
  7118  14AE  0831               	movf	??_rate_limit+1,w
  7119  14AF  00B5               	movwf	rate_limit@abs_delta_pwm+1
  7120  14B0                     l9141:	
  7121                           
  7122                           ;main.c: 1595: int pwm_inc = 10;
  7123  14B0  300A               	movlw	10
  7124  14B1  00B6               	movwf	rate_limit@pwm_inc
  7125  14B2  3000               	movlw	0
  7126  14B3  00B7               	movwf	rate_limit@pwm_inc+1
  7127                           
  7128                           ;main.c: 1596: int sign_pwm_inc = pwm_inc * sign_delta_pwm;
  7129  14B4  0837               	movf	rate_limit@pwm_inc+1,w
  7130  14B5  00A9               	movwf	___wmul@multiplier+1
  7131  14B6  0836               	movf	rate_limit@pwm_inc,w
  7132  14B7  00A8               	movwf	___wmul@multiplier
  7133  14B8  0833               	movf	rate_limit@sign_delta_pwm+1,w
  7134  14B9  00AB               	movwf	___wmul@multiplicand+1
  7135  14BA  0832               	movf	rate_limit@sign_delta_pwm,w
  7136  14BB  00AA               	movwf	___wmul@multiplicand
  7137  14BC  319E  2634  3194   	fcall	___wmul
  7138  14BF  0020               	movlb	0	; select bank0
  7139  14C0  0829               	movf	?___wmul+1,w
  7140  14C1  00B9               	movwf	rate_limit@sign_pwm_inc+1
  7141  14C2  0828               	movf	?___wmul,w
  7142  14C3  00B8               	movwf	rate_limit@sign_pwm_inc
  7143                           
  7144                           ;main.c: 1597: sign_pwm_inc = last_pwm - sign_pwm_inc;
  7145  14C4  0938               	comf	rate_limit@sign_pwm_inc,w
  7146  14C5  00B0               	movwf	??_rate_limit
  7147  14C6  0939               	comf	rate_limit@sign_pwm_inc+1,w
  7148  14C7  00B1               	movwf	??_rate_limit+1
  7149  14C8  0AB0               	incf	??_rate_limit,f
  7150  14C9  1903               	skipnz
  7151  14CA  0AB1               	incf	??_rate_limit+1,f
  7152  14CB  0022               	movlb	2	; select bank2
  7153  14CC  0823               	movf	_last_pwm^(0+256),w
  7154  14CD  0020               	movlb	0	; select bank0
  7155  14CE  0730               	addwf	??_rate_limit,w
  7156  14CF  00B8               	movwf	rate_limit@sign_pwm_inc
  7157  14D0  0022               	movlb	2	; select bank2
  7158  14D1  0824               	movf	(_last_pwm+1)^(0+256),w
  7159  14D2  0020               	movlb	0	; select bank0
  7160  14D3  3D31               	addwfc	??_rate_limit+1,w
  7161  14D4  00B9               	movwf	rate_limit@sign_pwm_inc+1
  7162                           
  7163                           ;main.c: 1599: if (pwm_inc >= abs_delta_pwm) {
  7164  14D5  0837               	movf	rate_limit@pwm_inc+1,w
  7165  14D6  3A80               	xorlw	128
  7166  14D7  00B0               	movwf	??_rate_limit
  7167  14D8  0835               	movf	rate_limit@abs_delta_pwm+1,w
  7168  14D9  3A80               	xorlw	128
  7169  14DA  0230               	subwf	??_rate_limit,w
  7170  14DB  1D03               	skipz
  7171  14DC  2CDF               	goto	u7215
  7172  14DD  0834               	movf	rate_limit@abs_delta_pwm,w
  7173  14DE  0236               	subwf	rate_limit@pwm_inc,w
  7174  14DF                     u7215:	
  7175  14DF  1803               	btfsc	3,0
  7176  14E0  2CE8               	goto	l9153
  7177                           
  7178                           ;main.c: 1602: else {;main.c: 1603: last_pwm = sign_pwm_inc;
  7179                           
  7180                           ;main.c: 1601: }
  7181                           
  7182                           ;main.c: 1600: last_pwm = pwm;
  7183  14E1  0020               	movlb	0	; select bank0
  7184  14E2  0839               	movf	rate_limit@sign_pwm_inc+1,w
  7185  14E3  0022               	movlb	2	; select bank2
  7186  14E4  00A4               	movwf	(_last_pwm+1)^(0+256)
  7187  14E5  0020               	movlb	0	; select bank0
  7188  14E6  0838               	movf	rate_limit@sign_pwm_inc,w
  7189  14E7  2CEE               	goto	L19
  7190  14E8                     l9153:	
  7191                           ;main.c: 1604: };main.c: 1605: }
  7192                           
  7193                           
  7194                           ;main.c: 1606: else {;main.c: 1607: last_pwm = pwm;
  7195  14E8  0020               	movlb	0	; select bank0
  7196  14E9  082F               	movf	rate_limit@pwm+1,w
  7197  14EA  0022               	movlb	2	; select bank2
  7198  14EB  00A4               	movwf	(_last_pwm+1)^(0+256)
  7199  14EC  0020               	movlb	0	; select bank0
  7200  14ED  082E               	movf	rate_limit@pwm,w
  7201  14EE                     L19:	
  7202  14EE  0022               	movlb	2	; select bank2
  7203  14EF  00A3               	movwf	_last_pwm^(0+256)
  7204                           
  7205                           ;main.c: 1608: };main.c: 1611: return last_pwm;
  7206  14F0  0824               	movf	(_last_pwm+1)^(0+256),w
  7207  14F1  0020               	movlb	0	; select bank0
  7208  14F2  00AF               	movwf	?_rate_limit+1
  7209  14F3  0022               	movlb	2	; select bank2
  7210  14F4  0823               	movf	_last_pwm^(0+256),w
  7211  14F5  0020               	movlb	0	; select bank0
  7212  14F6  00AE               	movwf	?_rate_limit
  7213  14F7  0008               	return
  7214  14F8                     __end_of_rate_limit:	
  7215                           
  7216                           	psect	text18
  7217  1E71                     __ptext18:	
  7218 ;; *************** function _sign *****************
  7219 ;; Defined at:
  7220 ;;		line 1585 in file "../main.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  x               2    8[BANK0 ] int 
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;		None
  7225 ;; Return value:  Size  Location     Type
  7226 ;;                  2    8[BANK0 ] int 
  7227 ;; Registers used:
  7228 ;;		wreg, status,2, status,0
  7229 ;; Tracked objects:
  7230 ;;		On entry : 0/0
  7231 ;;		On exit  : 0/0
  7232 ;;		Unchanged: 0/0
  7233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7234 ;;      Params:         0       2       0       0       0       0       0       0
  7235 ;;      Locals:         0       0       0       0       0       0       0       0
  7236 ;;      Temps:          0       3       0       0       0       0       0       0
  7237 ;;      Totals:         0       5       0       0       0       0       0       0
  7238 ;;Total ram usage:        5 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:    3
  7241 ;; This function calls:
  7242 ;;		Nothing
  7243 ;; This function is called by:
  7244 ;;		_rate_limit
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           
  7249                           ;psect for function _sign
  7250  1E71                     _sign:	
  7251                           
  7252                           ;main.c: 1586: return (x > 0) - (x < 0);
  7253                           
  7254                           ;incstack = 0
  7255                           ; Regs used in _sign: [wreg+status,2+status,0]
  7256  1E71  0020               	movlb	0	; select bank0
  7257  1E72  1FA9               	btfss	sign@x+1,7
  7258  1E73  2E76               	goto	u3080
  7259  1E74  3001               	movlw	1
  7260  1E75  2E77               	goto	u3090
  7261  1E76                     u3080:	
  7262  1E76  3000               	movlw	0
  7263  1E77                     u3090:	
  7264  1E77  00AA               	movwf	??_sign
  7265  1E78  01AB               	clrf	??_sign+1
  7266  1E79  09AA               	comf	??_sign,f
  7267  1E7A  09AB               	comf	??_sign+1,f
  7268  1E7B  0AAA               	incf	??_sign,f
  7269  1E7C  1903               	skipnz
  7270  1E7D  0AAB               	incf	??_sign+1,f
  7271  1E7E  0829               	movf	sign@x+1,w
  7272  1E7F  3A80               	xorlw	128
  7273  1E80  00AC               	movwf	??_sign+2
  7274  1E81  3080               	movlw	128
  7275  1E82  022C               	subwf	??_sign+2,w
  7276  1E83  1D03               	skipz
  7277  1E84  2E87               	goto	u3105
  7278  1E85  3001               	movlw	1
  7279  1E86  0228               	subwf	sign@x,w
  7280  1E87                     u3105:	
  7281  1E87  1C03               	btfss	3,0
  7282  1E88  2E8B               	goto	u3100
  7283  1E89  3001               	movlw	1
  7284  1E8A  2E8C               	goto	u3110
  7285  1E8B                     u3100:	
  7286  1E8B  3000               	movlw	0
  7287  1E8C                     u3110:	
  7288  1E8C  0020               	movlb	0	; select bank0
  7289  1E8D  072A               	addwf	??_sign,w
  7290  1E8E  00A8               	movwf	?_sign
  7291  1E8F  082B               	movf	??_sign+1,w
  7292  1E90  1803               	skipnc
  7293  1E91  0A2B               	incf	??_sign+1,w
  7294  1E92  00A9               	movwf	?_sign+1
  7295  1E93  0008               	return
  7296  1E94                     __end_of_sign:	
  7297                           
  7298                           	psect	text19
  7299  1210                     __ptext19:	
  7300 ;; *************** function _SetDiagAlarm *****************
  7301 ;; Defined at:
  7302 ;;		line 210 in file "../diag.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;		None
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;		None
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2, status,0, pclath, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7316 ;;      Params:         0       0       0       0       0       0       0       0
  7317 ;;      Locals:         0       0       0       0       0       0       0       0
  7318 ;;      Temps:          0       0       0       0       0       0       0       0
  7319 ;;      Totals:         0       0       0       0       0       0       0       0
  7320 ;;Total ram usage:        0 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    4
  7323 ;; This function calls:
  7324 ;;		_PWM_Write_Out
  7325 ;; This function is called by:
  7326 ;;		_main
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           
  7331                           ;psect for function _SetDiagAlarm
  7332  1210                     _SetDiagAlarm:	
  7333                           
  7334                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  7335                           
  7336                           ;incstack = 0
  7337                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  7338  1210  0021               	movlb	1	; select bank1
  7339  1211  1F60               	btfss	_ui8_error_Flags^(0+128),6
  7340  1212  2A17               	goto	l6769
  7341                           
  7342                           ;diag.c: 221: {;diag.c: 223: PWM_Write_Out( 88 );
  7343  1213  3058               	movlw	88
  7344  1214  319D  2562         	fcall	_PWM_Write_Out
  7345                           
  7346                           ;diag.c: 226: }
  7347  1216  0008               	return
  7348  1217                     l6769:	
  7349                           
  7350                           ;diag.c: 229: else;diag.c: 230: {;diag.c: 232: if( bool_CPU_TempAlarm )
  7351  1217  0021               	movlb	1	; select bank1
  7352  1218  0858               	movf	_bool_CPU_TempAlarm^(0+128),w
  7353  1219  1903               	btfsc	3,2
  7354  121A  2A1F               	goto	l6773
  7355                           
  7356                           ;diag.c: 235: {;diag.c: 237: PWM_Write_Out( 33 );
  7357  121B  3021               	movlw	33
  7358  121C  319D  2562         	fcall	_PWM_Write_Out
  7359                           
  7360                           ;diag.c: 240: }
  7361  121E  0008               	return
  7362  121F                     l6773:	
  7363                           
  7364                           ;diag.c: 243: else;diag.c: 244: {;diag.c: 246: if( bool_DryRunningAlarm )
  7365  121F  0021               	movlb	1	; select bank1
  7366  1220  0857               	movf	_bool_DryRunningAlarm^(0+128),w
  7367  1221  1903               	btfsc	3,2
  7368  1222  2A27               	goto	l6777
  7369                           
  7370                           ;diag.c: 248: {;diag.c: 250: PWM_Write_Out( 66 );
  7371  1223  3042               	movlw	66
  7372  1224  319D  2562         	fcall	_PWM_Write_Out
  7373                           
  7374                           ;diag.c: 253: }
  7375  1226  0008               	return
  7376  1227                     l6777:	
  7377                           
  7378                           ;diag.c: 256: else;diag.c: 257: {;diag.c: 259: if( bool_MotorStalled )
  7379  1227  0021               	movlb	1	; select bank1
  7380  1228  0856               	movf	_bool_MotorStalled^(0+128),w
  7381  1229  1903               	btfsc	3,2
  7382  122A  2A2F               	goto	l6781
  7383                           
  7384                           ;diag.c: 261: {;diag.c: 263: PWM_Write_Out( 55 );
  7385  122B  3037               	movlw	55
  7386  122C  319D  2562         	fcall	_PWM_Write_Out
  7387                           
  7388                           ;diag.c: 266: }
  7389  122E  0008               	return
  7390  122F                     l6781:	
  7391                           
  7392                           ;diag.c: 269: else;diag.c: 270: {;diag.c: 272: if( bool_HighCurrentAlarm )
  7393  122F  0021               	movlb	1	; select bank1
  7394  1230  0855               	movf	_bool_HighCurrentAlarm^(0+128),w
  7395  1231  1903               	btfsc	3,2
  7396  1232  2A37               	goto	l514
  7397                           
  7398                           ;diag.c: 274: {;diag.c: 276: PWM_Write_Out( 44 );
  7399  1233  302C               	movlw	44
  7400  1234  319D  2562         	fcall	_PWM_Write_Out
  7401                           
  7402                           ;diag.c: 278: }
  7403  1236  0008               	return
  7404  1237                     l514:	
  7405                           
  7406                           ;diag.c: 281: else;diag.c: 282: {;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  7407  1237  1EE0               	btfss	_ui8_error_Flags^(0+128),5
  7408  1238  2A3D               	goto	l516
  7409                           
  7410                           ;diag.c: 287: {;diag.c: 289: PWM_Write_Out( 77 );
  7411  1239  304D               	movlw	77
  7412  123A  319D  2562         	fcall	_PWM_Write_Out
  7413                           
  7414                           ;diag.c: 292: }
  7415  123C  0008               	return
  7416  123D                     l516:	
  7417                           
  7418                           ;diag.c: 295: else;diag.c: 296: {;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  7419  123D  1C60               	btfss	_ui8_error_Flags^(0+128),0
  7420  123E  2A43               	goto	l6789
  7421                           
  7422                           ;diag.c: 300: {;diag.c: 302: PWM_Write_Out( 22 );
  7423  123F  3016               	movlw	22
  7424  1240  319D  2562         	fcall	_PWM_Write_Out
  7425                           
  7426                           ;diag.c: 305: }
  7427  1242  0008               	return
  7428  1243                     l6789:	
  7429                           
  7430                           ;diag.c: 308: else;diag.c: 309: {;diag.c: 311: PWM_Write_Out( 11 );
  7431  1243  300B               	movlw	11
  7432  1244  319D  2562         	fcall	_PWM_Write_Out
  7433  1246  0008               	return
  7434  1247                     __end_of_SetDiagAlarm:	
  7435                           
  7436                           	psect	text20
  7437  1D62                     __ptext20:	
  7438 ;; *************** function _PWM_Write_Out *****************
  7439 ;; Defined at:
  7440 ;;		line 349 in file "../pwm.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;  ui8_DutyCycl    1    wreg     unsigned char 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  ui8_DutyCycl    1    9[BANK0 ] unsigned char 
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      void 
  7447 ;; Registers used:
  7448 ;;		wreg
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7454 ;;      Params:         0       0       0       0       0       0       0       0
  7455 ;;      Locals:         0       1       0       0       0       0       0       0
  7456 ;;      Temps:          0       1       0       0       0       0       0       0
  7457 ;;      Totals:         0       2       0       0       0       0       0       0
  7458 ;;Total ram usage:        2 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    3
  7461 ;; This function calls:
  7462 ;;		Nothing
  7463 ;; This function is called by:
  7464 ;;		_DiagInit
  7465 ;;		_SetDiagAlarm
  7466 ;;		_EOL
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           
  7471                           ;psect for function _PWM_Write_Out
  7472  1D62                     _PWM_Write_Out:	
  7473                           
  7474                           ;incstack = 0
  7475                           ; Regs used in _PWM_Write_Out: [wreg]
  7476                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
  7477  1D62  0020               	movlb	0	; select bank0
  7478  1D63  00A9               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
  7479                           
  7480                           ;pwm.c: 353: ui8_PWMoutvalue = ui8_DutyCycle_Out;
  7481  1D64  0829               	movf	PWM_Write_Out@ui8_DutyCycle_Out,w
  7482  1D65  00A8               	movwf	??_PWM_Write_Out
  7483  1D66  0828               	movf	??_PWM_Write_Out,w
  7484  1D67  0022               	movlb	2	; select bank2
  7485  1D68  00C3               	movwf	_ui8_PWMoutvalue^(0+256)
  7486  1D69  0008               	return
  7487  1D6A                     __end_of_PWM_Write_Out:	
  7488                           
  7489                           	psect	text21
  7490  161F                     __ptext21:	
  7491 ;; *************** function _PWMReadDC *****************
  7492 ;; Defined at:
  7493 ;;		line 370 in file "../pwm.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      unsigned char 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0, pclath, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7507 ;;      Params:         0       0       0       0       0       0       0       0
  7508 ;;      Locals:         0       0       0       0       0       0       0       0
  7509 ;;      Temps:          0       4       0       0       0       0       0       0
  7510 ;;      Totals:         0       4       0       0       0       0       0       0
  7511 ;;Total ram usage:        4 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    4
  7514 ;; This function calls:
  7515 ;;		___ltdiv
  7516 ;;		___tmul
  7517 ;; This function is called by:
  7518 ;;		_main
  7519 ;;		_EOL
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           
  7524                           ;psect for function _PWMReadDC
  7525  161F                     _PWMReadDC:	
  7526                           
  7527                           ;pwm.c: 375: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
  7528                           
  7529                           ;incstack = 0
  7530                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
  7531  161F  0023               	movlb	3	; select bank3
  7532  1620  0836               	movf	_ui16_PWM_Freq_In^(0+384),w
  7533  1621  0020               	movlb	0	; select bank0
  7534  1622  00B1               	movwf	___ltdiv@divisor
  7535  1623  0023               	movlb	3	; select bank3
  7536  1624  0837               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  7537  1625  0020               	movlb	0	; select bank0
  7538  1626  00B2               	movwf	___ltdiv@divisor+1
  7539  1627  01B3               	clrf	___ltdiv@divisor+2
  7540  1628  0023               	movlb	3	; select bank3
  7541  1629  086B               	movf	_ui16_Duty_Cycle_In^(0+384),w
  7542  162A  0020               	movlb	0	; select bank0
  7543  162B  00A8               	movwf	___tmul@multiplier
  7544  162C  0023               	movlb	3	; select bank3
  7545  162D  086C               	movf	(_ui16_Duty_Cycle_In+1)^(0+384),w
  7546  162E  0020               	movlb	0	; select bank0
  7547  162F  00A9               	movwf	___tmul@multiplier+1
  7548  1630  01AA               	clrf	___tmul@multiplier+2
  7549  1631  30C8               	movlw	200
  7550  1632  00AB               	movwf	___tmul@multiplicand
  7551  1633  3000               	movlw	0
  7552  1634  00AC               	movwf	___tmul@multiplicand+1
  7553  1635  3000               	movlw	0
  7554  1636  00AD               	movwf	___tmul@multiplicand+2
  7555  1637  319F  2722  3196   	fcall	___tmul
  7556  163A  0020               	movlb	0	; select bank0
  7557  163B  0828               	movf	?___tmul,w
  7558  163C  00B4               	movwf	___ltdiv@dividend
  7559  163D  0829               	movf	?___tmul+1,w
  7560  163E  00B5               	movwf	___ltdiv@dividend+1
  7561  163F  082A               	movf	?___tmul+2,w
  7562  1640  00B6               	movwf	___ltdiv@dividend+2
  7563  1641  3192  22C0  3196   	fcall	___ltdiv
  7564  1644  0020               	movlb	0	; select bank0
  7565  1645  0831               	movf	?___ltdiv,w
  7566  1646  00BC               	movwf	??_PWMReadDC
  7567  1647  083C               	movf	??_PWMReadDC,w
  7568  1648  0021               	movlb	1	; select bank1
  7569  1649  00CC               	movwf	_ui8_PWMinDC_sav^(0+128)
  7570                           
  7571                           ;pwm.c: 377: if( ui8_PWMinDC_sav == 0 )
  7572  164A  084C               	movf	_ui8_PWMinDC_sav^(0+128),w
  7573  164B  1D03               	btfss	3,2
  7574  164C  2EBB               	goto	l11017
  7575                           
  7576                           ;pwm.c: 379: {;pwm.c: 383: ui16_PWMin_failCnt++;
  7577  164D  3001               	movlw	1
  7578  164E  0023               	movlb	3	; select bank3
  7579  164F  07AA               	addwf	_ui16_PWMin_failCnt^(0+384),f
  7580  1650  3000               	movlw	0
  7581  1651  3DAB               	addwfc	(_ui16_PWMin_failCnt+1)^(0+384),f
  7582                           
  7583                           ;pwm.c: 385: if( ui16_PWMin_failCnt >= 5 )
  7584  1652  3000               	movlw	0
  7585  1653  022B               	subwf	(_ui16_PWMin_failCnt+1)^(0+384),w
  7586  1654  3005               	movlw	5
  7587  1655  1903               	skipnz
  7588  1656  022A               	subwf	_ui16_PWMin_failCnt^(0+384),w
  7589  1657  1C03               	skipc
  7590  1658  2EC8               	goto	l11023
  7591                           
  7592                           ;pwm.c: 386: {;pwm.c: 392: Debounce_Tmr++;
  7593  1659  3001               	movlw	1
  7594  165A  07A6               	addwf	_Debounce_Tmr^(0+384),f
  7595  165B  3000               	movlw	0
  7596  165C  3DA7               	addwfc	(_Debounce_Tmr+1)^(0+384),f
  7597                           
  7598                           ;pwm.c: 394: if(RA4 != prev_RA4) {
  7599  165D  1003               	clrc
  7600  165E  0020               	movlb	0	; select bank0
  7601  165F  1A0C               	btfsc	12,4	;volatile
  7602  1660  1403               	setc
  7603  1661  3000               	movlw	0
  7604  1662  3D09               	addwfc	9,w
  7605  1663  00BC               	movwf	??_PWMReadDC
  7606  1664  01BD               	clrf	??_PWMReadDC+1
  7607  1665  0023               	movlb	3	; select bank3
  7608  1666  0829               	movf	(_prev_RA4+1)^(0+384),w
  7609  1667  0020               	movlb	0	; select bank0
  7610  1668  063D               	xorwf	??_PWMReadDC+1,w
  7611  1669  1D03               	skipz
  7612  166A  2E6F               	goto	u9705
  7613  166B  0023               	movlb	3	; select bank3
  7614  166C  0828               	movf	_prev_RA4^(0+384),w
  7615  166D  0020               	movlb	0	; select bank0
  7616  166E  063C               	xorwf	??_PWMReadDC,w
  7617  166F                     u9705:	
  7618  166F  1903               	skipnz
  7619  1670  2E76               	goto	l11001
  7620                           
  7621                           ;pwm.c: 395: prev_Debounce_Tmr = Debounce_Tmr;
  7622  1671  0023               	movlb	3	; select bank3
  7623  1672  0827               	movf	(_Debounce_Tmr+1)^(0+384),w
  7624  1673  00A5               	movwf	(_prev_Debounce_Tmr+1)^(0+384)
  7625  1674  0826               	movf	_Debounce_Tmr^(0+384),w
  7626  1675  00A4               	movwf	_prev_Debounce_Tmr^(0+384)
  7627  1676                     l11001:	
  7628                           
  7629                           ;pwm.c: 396: };pwm.c: 397: prev_RA4 = RA4;
  7630  1676  1003               	clrc
  7631  1677  0020               	movlb	0	; select bank0
  7632  1678  1A0C               	btfsc	12,4	;volatile
  7633  1679  1403               	setc
  7634  167A  3000               	movlw	0
  7635  167B  3D09               	addwfc	9,w
  7636  167C  00BC               	movwf	??_PWMReadDC
  7637  167D  01BD               	clrf	??_PWMReadDC+1
  7638  167E  083C               	movf	??_PWMReadDC,w
  7639  167F  0023               	movlb	3	; select bank3
  7640  1680  00A8               	movwf	_prev_RA4^(0+384)
  7641  1681  0020               	movlb	0	; select bank0
  7642  1682  083D               	movf	??_PWMReadDC+1,w
  7643  1683  0023               	movlb	3	; select bank3
  7644  1684  00A9               	movwf	(_prev_RA4+1)^(0+384)
  7645                           
  7646                           ;pwm.c: 399: if((Debounce_Tmr - prev_Debounce_Tmr) > 20) {
  7647  1685  0924               	comf	_prev_Debounce_Tmr^(0+384),w
  7648  1686  0020               	movlb	0	; select bank0
  7649  1687  00BC               	movwf	??_PWMReadDC
  7650  1688  0023               	movlb	3	; select bank3
  7651  1689  0925               	comf	(_prev_Debounce_Tmr+1)^(0+384),w
  7652  168A  0020               	movlb	0	; select bank0
  7653  168B  00BD               	movwf	??_PWMReadDC+1
  7654  168C  0ABC               	incf	??_PWMReadDC,f
  7655  168D  1903               	skipnz
  7656  168E  0ABD               	incf	??_PWMReadDC+1,f
  7657  168F  0023               	movlb	3	; select bank3
  7658  1690  0826               	movf	_Debounce_Tmr^(0+384),w
  7659  1691  0020               	movlb	0	; select bank0
  7660  1692  073C               	addwf	??_PWMReadDC,w
  7661  1693  00BE               	movwf	??_PWMReadDC+2
  7662  1694  0023               	movlb	3	; select bank3
  7663  1695  0827               	movf	(_Debounce_Tmr+1)^(0+384),w
  7664  1696  0020               	movlb	0	; select bank0
  7665  1697  3D3D               	addwfc	??_PWMReadDC+1,w
  7666  1698  00BF               	movwf	??_PWMReadDC+3
  7667  1699  3000               	movlw	0
  7668  169A  023F               	subwf	??_PWMReadDC+3,w
  7669  169B  3015               	movlw	21
  7670  169C  1903               	skipnz
  7671  169D  023E               	subwf	??_PWMReadDC+2,w
  7672  169E  1C03               	skipc
  7673  169F  2EC8               	goto	l11023
  7674                           
  7675                           ;pwm.c: 400: if(RA4 == 1)
  7676  16A0  1E0C               	btfss	12,4	;volatile
  7677  16A1  2EAE               	goto	l11009
  7678                           
  7679                           ;pwm.c: 401: {;pwm.c: 402: ui16_PWM_Freq_In = 40000;
  7680  16A2  3040               	movlw	64
  7681  16A3  0023               	movlb	3	; select bank3
  7682  16A4  00B6               	movwf	_ui16_PWM_Freq_In^(0+384)
  7683  16A5  309C               	movlw	156
  7684  16A6  00B7               	movwf	(_ui16_PWM_Freq_In^(0+384)+1)
  7685                           
  7686                           ;pwm.c: 403: ui8_Duty_Cycle_In_Ratio = 180;
  7687  16A7  30B4               	movlw	180
  7688  16A8  0020               	movlb	0	; select bank0
  7689  16A9  00BC               	movwf	??_PWMReadDC
  7690  16AA  083C               	movf	??_PWMReadDC,w
  7691  16AB  0022               	movlb	2	; select bank2
  7692  16AC  00C1               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7693                           
  7694                           ;pwm.c: 404: }
  7695  16AD  2EB5               	goto	l11013
  7696  16AE                     l11009:	
  7697                           
  7698                           ;pwm.c: 405: else;pwm.c: 406: {;pwm.c: 407: ui16_PWM_Freq_In = 40000;
  7699  16AE  3040               	movlw	64
  7700  16AF  0023               	movlb	3	; select bank3
  7701  16B0  00B6               	movwf	_ui16_PWM_Freq_In^(0+384)
  7702  16B1  309C               	movlw	156
  7703  16B2  00B7               	movwf	(_ui16_PWM_Freq_In^(0+384)+1)
  7704                           
  7705                           ;pwm.c: 408: ui8_Duty_Cycle_In_Ratio = 0;
  7706  16B3  0022               	movlb	2	; select bank2
  7707  16B4  01C1               	clrf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7708  16B5                     l11013:	
  7709                           
  7710                           ;pwm.c: 409: };pwm.c: 410: Debounce_Tmr = 0;
  7711  16B5  0023               	movlb	3	; select bank3
  7712  16B6  01A6               	clrf	_Debounce_Tmr^(0+384)
  7713  16B7  01A7               	clrf	(_Debounce_Tmr+1)^(0+384)
  7714                           
  7715                           ;pwm.c: 411: prev_Debounce_Tmr = 0;
  7716  16B8  01A4               	clrf	_prev_Debounce_Tmr^(0+384)
  7717  16B9  01A5               	clrf	(_prev_Debounce_Tmr+1)^(0+384)
  7718                           
  7719                           ;pwm.c: 412: };pwm.c: 414: };pwm.c: 418: }
  7720  16BA  2EC8               	goto	l11023
  7721  16BB                     l11017:	
  7722                           
  7723                           ;pwm.c: 421: else;pwm.c: 422: {;pwm.c: 426: ui16_PWMin_failCnt = 0;
  7724  16BB  0023               	movlb	3	; select bank3
  7725  16BC  01AA               	clrf	_ui16_PWMin_failCnt^(0+384)
  7726  16BD  01AB               	clrf	(_ui16_PWMin_failCnt+1)^(0+384)
  7727                           
  7728                           ;pwm.c: 429: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  7729  16BE  0021               	movlb	1	; select bank1
  7730  16BF  084C               	movf	_ui8_PWMinDC_sav^(0+128),w
  7731  16C0  0020               	movlb	0	; select bank0
  7732  16C1  00BC               	movwf	??_PWMReadDC
  7733  16C2  083C               	movf	??_PWMReadDC,w
  7734  16C3  0022               	movlb	2	; select bank2
  7735  16C4  00C1               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7736                           
  7737                           ;pwm.c: 431: ui16_Duty_Cycle_In = 0;
  7738  16C5  0023               	movlb	3	; select bank3
  7739  16C6  01EB               	clrf	_ui16_Duty_Cycle_In^(0+384)
  7740  16C7  01EC               	clrf	(_ui16_Duty_Cycle_In+1)^(0+384)
  7741  16C8                     l11023:	
  7742                           
  7743                           ;pwm.c: 433: };pwm.c: 436: return ( 200 - ui8_Duty_Cycle_In_Ratio );
  7744  16C8  0022               	movlb	2	; select bank2
  7745  16C9  0341               	decf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
  7746  16CA  3AFF               	xorlw	255
  7747  16CB  3EC8               	addlw	200
  7748  16CC  0008               	return
  7749  16CD                     __end_of_PWMReadDC:	
  7750                           
  7751                           	psect	text22
  7752  1F22                     __ptext22:	
  7753 ;; *************** function ___tmul *****************
  7754 ;; Defined at:
  7755 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul24.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  multiplier      3    8[BANK0 ] unsigned um
  7758 ;;  multiplicand    3   11[BANK0 ] unsigned um
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  product         3   14[BANK0 ] unsigned um
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  3    8[BANK0 ] unsigned um
  7763 ;; Registers used:
  7764 ;;		wreg, status,2, status,0
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7770 ;;      Params:         0       6       0       0       0       0       0       0
  7771 ;;      Locals:         0       3       0       0       0       0       0       0
  7772 ;;      Temps:          0       0       0       0       0       0       0       0
  7773 ;;      Totals:         0       9       0       0       0       0       0       0
  7774 ;;Total ram usage:        9 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    3
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_PWMReadDC
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           
  7785                           ;psect for function ___tmul
  7786  1F22                     ___tmul:	
  7787                           
  7788                           ;incstack = 0
  7789                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  7790  1F22  3000               	movlw	0
  7791  1F23  0020               	movlb	0	; select bank0
  7792  1F24  00AE               	movwf	___tmul@product
  7793  1F25  3000               	movlw	0
  7794  1F26  00AF               	movwf	___tmul@product+1
  7795  1F27  3000               	movlw	0
  7796  1F28  00B0               	movwf	___tmul@product+2
  7797  1F29                     l6141:	
  7798  1F29  1C28               	btfss	___tmul@multiplier,0
  7799  1F2A  2F31               	goto	l6145
  7800  1F2B  082B               	movf	___tmul@multiplicand,w
  7801  1F2C  07AE               	addwf	___tmul@product,f
  7802  1F2D  082C               	movf	___tmul@multiplicand+1,w
  7803  1F2E  3DAF               	addwfc	___tmul@product+1,f
  7804  1F2F  082D               	movf	___tmul@multiplicand+2,w
  7805  1F30  3DB0               	addwfc	___tmul@product+2,f
  7806  1F31                     l6145:	
  7807  1F31  3001               	movlw	1
  7808  1F32                     u3345:	
  7809  1F32  35AB               	lslf	___tmul@multiplicand,f
  7810  1F33  0DAC               	rlf	___tmul@multiplicand+1,f
  7811  1F34  0DAD               	rlf	___tmul@multiplicand+2,f
  7812  1F35  0B89               	decfsz	9,f
  7813  1F36  2F32               	goto	u3345
  7814  1F37  3001               	movlw	1
  7815  1F38                     u3355:	
  7816  1F38  36AA               	lsrf	___tmul@multiplier+2,f
  7817  1F39  0CA9               	rrf	___tmul@multiplier+1,f
  7818  1F3A  0CA8               	rrf	___tmul@multiplier,f
  7819  1F3B  0B89               	decfsz	9,f
  7820  1F3C  2F38               	goto	u3355
  7821  1F3D  082A               	movf	___tmul@multiplier+2,w
  7822  1F3E  0429               	iorwf	___tmul@multiplier+1,w
  7823  1F3F  0428               	iorwf	___tmul@multiplier,w
  7824  1F40  1D03               	skipz
  7825  1F41  2F29               	goto	l6141
  7826  1F42  082E               	movf	___tmul@product,w
  7827  1F43  00A8               	movwf	?___tmul
  7828  1F44  082F               	movf	___tmul@product+1,w
  7829  1F45  00A9               	movwf	?___tmul+1
  7830  1F46  0830               	movf	___tmul@product+2,w
  7831  1F47  00AA               	movwf	?___tmul+2
  7832  1F48  0008               	return
  7833  1F49                     __end_of___tmul:	
  7834                           
  7835                           	psect	text23
  7836  12C0                     __ptext23:	
  7837 ;; *************** function ___ltdiv *****************
  7838 ;; Defined at:
  7839 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltdiv.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  divisor         3   17[BANK0 ] unsigned um
  7842 ;;  dividend        3   20[BANK0 ] unsigned um
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  quotient        3   24[BANK0 ] unsigned um
  7845 ;;  counter         1   27[BANK0 ] unsigned char 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  3   17[BANK0 ] unsigned um
  7848 ;; Registers used:
  7849 ;;		wreg, status,2, status,0
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7855 ;;      Params:         0       6       0       0       0       0       0       0
  7856 ;;      Locals:         0       4       0       0       0       0       0       0
  7857 ;;      Temps:          0       1       0       0       0       0       0       0
  7858 ;;      Totals:         0      11       0       0       0       0       0       0
  7859 ;;Total ram usage:       11 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    3
  7862 ;; This function calls:
  7863 ;;		Nothing
  7864 ;; This function is called by:
  7865 ;;		_PWMReadDC
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           
  7870                           ;psect for function ___ltdiv
  7871  12C0                     ___ltdiv:	
  7872                           
  7873                           ;incstack = 0
  7874                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  7875  12C0  3000               	movlw	0
  7876  12C1  0020               	movlb	0	; select bank0
  7877  12C2  00B8               	movwf	___ltdiv@quotient
  7878  12C3  3000               	movlw	0
  7879  12C4  00B9               	movwf	___ltdiv@quotient+1
  7880  12C5  3000               	movlw	0
  7881  12C6  00BA               	movwf	___ltdiv@quotient+2
  7882  12C7  0833               	movf	___ltdiv@divisor+2,w
  7883  12C8  0432               	iorwf	___ltdiv@divisor+1,w
  7884  12C9  0431               	iorwf	___ltdiv@divisor,w
  7885  12CA  1903               	skipnz
  7886  12CB  2AFE               	goto	l10715
  7887  12CC  01BB               	clrf	___ltdiv@counter
  7888  12CD  0ABB               	incf	___ltdiv@counter,f
  7889  12CE                     l10701:	
  7890  12CE  1BB3               	btfsc	___ltdiv@divisor+2,7
  7891  12CF  2ADB               	goto	l10703
  7892  12D0  3001               	movlw	1
  7893  12D1                     u9295:	
  7894  12D1  35B1               	lslf	___ltdiv@divisor,f
  7895  12D2  0DB2               	rlf	___ltdiv@divisor+1,f
  7896  12D3  0DB3               	rlf	___ltdiv@divisor+2,f
  7897  12D4  0B89               	decfsz	9,f
  7898  12D5  2AD1               	goto	u9295
  7899  12D6  3001               	movlw	1
  7900  12D7  00B7               	movwf	??___ltdiv
  7901  12D8  0837               	movf	??___ltdiv,w
  7902  12D9  07BB               	addwf	___ltdiv@counter,f
  7903  12DA  2ACE               	goto	l10701
  7904  12DB                     l10703:	
  7905  12DB  3001               	movlw	1
  7906  12DC                     u9315:	
  7907  12DC  35B8               	lslf	___ltdiv@quotient,f
  7908  12DD  0DB9               	rlf	___ltdiv@quotient+1,f
  7909  12DE  0DBA               	rlf	___ltdiv@quotient+2,f
  7910  12DF  0B89               	decfsz	9,f
  7911  12E0  2ADC               	goto	u9315
  7912  12E1  0833               	movf	___ltdiv@divisor+2,w
  7913  12E2  0236               	subwf	___ltdiv@dividend+2,w
  7914  12E3  1D03               	skipz
  7915  12E4  2AEB               	goto	u9325
  7916  12E5  0832               	movf	___ltdiv@divisor+1,w
  7917  12E6  0235               	subwf	___ltdiv@dividend+1,w
  7918  12E7  1D03               	skipz
  7919  12E8  2AEB               	goto	u9325
  7920  12E9  0831               	movf	___ltdiv@divisor,w
  7921  12EA  0234               	subwf	___ltdiv@dividend,w
  7922  12EB                     u9325:	
  7923  12EB  1C03               	skipc
  7924  12EC  2AF4               	goto	l10711
  7925  12ED  0831               	movf	___ltdiv@divisor,w
  7926  12EE  02B4               	subwf	___ltdiv@dividend,f
  7927  12EF  0832               	movf	___ltdiv@divisor+1,w
  7928  12F0  3BB5               	subwfb	___ltdiv@dividend+1,f
  7929  12F1  0833               	movf	___ltdiv@divisor+2,w
  7930  12F2  3BB6               	subwfb	___ltdiv@dividend+2,f
  7931  12F3  1438               	bsf	___ltdiv@quotient,0
  7932  12F4                     l10711:	
  7933  12F4  3001               	movlw	1
  7934  12F5                     u9335:	
  7935  12F5  36B3               	lsrf	___ltdiv@divisor+2,f
  7936  12F6  0CB2               	rrf	___ltdiv@divisor+1,f
  7937  12F7  0CB1               	rrf	___ltdiv@divisor,f
  7938  12F8  0B89               	decfsz	9,f
  7939  12F9  2AF5               	goto	u9335
  7940  12FA  3001               	movlw	1
  7941  12FB  02BB               	subwf	___ltdiv@counter,f
  7942  12FC  1D03               	btfss	3,2
  7943  12FD  2ADB               	goto	l10703
  7944  12FE                     l10715:	
  7945  12FE  0838               	movf	___ltdiv@quotient,w
  7946  12FF  00B1               	movwf	?___ltdiv
  7947  1300  0839               	movf	___ltdiv@quotient+1,w
  7948  1301  00B2               	movwf	?___ltdiv+1
  7949  1302  083A               	movf	___ltdiv@quotient+2,w
  7950  1303  00B3               	movwf	?___ltdiv+2
  7951  1304  0008               	return
  7952  1305                     __end_of___ltdiv:	
  7953                           
  7954                           	psect	text24
  7955  1D8A                     __ptext24:	
  7956 ;; *************** function _InitMotorStop *****************
  7957 ;; Defined at:
  7958 ;;		line 2222 in file "../bldc.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;		None
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;		None
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      void 
  7965 ;; Registers used:
  7966 ;;		status,2
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7972 ;;      Params:         0       0       0       0       0       0       0       0
  7973 ;;      Locals:         0       0       0       0       0       0       0       0
  7974 ;;      Temps:          0       0       0       0       0       0       0       0
  7975 ;;      Totals:         0       0       0       0       0       0       0       0
  7976 ;;Total ram usage:        0 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; Hardware stack levels required when called:    3
  7979 ;; This function calls:
  7980 ;;		Nothing
  7981 ;; This function is called by:
  7982 ;;		_main
  7983 ;;		_EOL
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           
  7988                           ;psect for function _InitMotorStop
  7989  1D8A                     _InitMotorStop:	
  7990                           
  7991                           ;bldc.c: 2227: if( 1 == MotorFlags.bits.B6 )
  7992                           
  7993                           ;incstack = 0
  7994                           ; Regs used in _InitMotorStop: [status,2]
  7995  1D8A  0020               	movlb	0	; select bank0
  7996  1D8B  1F5A               	btfss	_MotorFlags,6
  7997  1D8C  0008               	return
  7998                           
  7999                           ;bldc.c: 2230: {;bldc.c: 2232: LATC1 = 0;
  8000  1D8D  0022               	movlb	2	; select bank2
  8001  1D8E  108E               	bcf	14,1	;volatile
  8002                           
  8003                           ;bldc.c: 2233: LATC3 = 0;
  8004  1D8F  118E               	bcf	14,3	;volatile
  8005                           
  8006                           ;bldc.c: 2234: LATC4 = 0;
  8007  1D90  120E               	bcf	14,4	;volatile
  8008                           
  8009                           ;bldc.c: 2236: CCP1ASE = 0;
  8010  1D91  0025               	movlb	5	; select bank5
  8011  1D92  1395               	bcf	21,7	;volatile
  8012                           
  8013                           ;bldc.c: 2237: CCPR1L = 0;
  8014  1D93  0191               	clrf	17	;volatile
  8015                           
  8016                           ;bldc.c: 2238: MotorFlags.bits.B6 = 0;
  8017  1D94  0020               	movlb	0	; select bank0
  8018  1D95  135A               	bcf	_MotorFlags,6
  8019                           
  8020                           ;bldc.c: 2239: MotorFlags.bits.B7 = 0;
  8021  1D96  13DA               	bcf	_MotorFlags,7
  8022  1D97  0008               	return
  8023  1D98                     __end_of_InitMotorStop:	
  8024                           
  8025                           	psect	text25
  8026  07F7                     __ptext25:	
  8027 ;; *************** function _Get_Analog_Value *****************
  8028 ;; Defined at:
  8029 ;;		line 442 in file "../adc.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;		None
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;		None
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  1    wreg      void 
  8036 ;; Registers used:
  8037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8043 ;;      Params:         0       0       0       0       0       0       0       0
  8044 ;;      Locals:         0       0       0       0       0       0       0       0
  8045 ;;      Temps:          0       0       0       0       0       0       0       0
  8046 ;;      Totals:         0       0       0       0       0       0       0       0
  8047 ;;Total ram usage:        0 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    4
  8050 ;; This function calls:
  8051 ;;		_FILTER_IPhase
  8052 ;;		_FILTER_Temp
  8053 ;;		_FILTER_Ubat
  8054 ;; This function is called by:
  8055 ;;		_main
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function _Get_Analog_Value
  8061  07F7                     _Get_Analog_Value:	
  8062                           
  8063                           ;adc.c: 446: FILTER_Ubat( );
  8064                           
  8065                           ;incstack = 0
  8066                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8067  07F7  3194  2407  3187   	fcall	_FILTER_Ubat
  8068                           
  8069                           ;adc.c: 447: FILTER_IPhase( );
  8070  07FA  3191  21DC  3187   	fcall	_FILTER_IPhase
  8071                           
  8072                           ;adc.c: 448: FILTER_Temp( );
  8073  07FD  3192  2247         	fcall	_FILTER_Temp
  8074  07FF  0008               	return
  8075  0800                     __end_of_Get_Analog_Value:	
  8076                           
  8077                           	psect	text26
  8078  1407                     __ptext26:	
  8079 ;; *************** function _FILTER_Ubat *****************
  8080 ;; Defined at:
  8081 ;;		line 264 in file "../adc.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;		None
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      void 
  8088 ;; Registers used:
  8089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8095 ;;      Params:         0       0       0       0       0       0       0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0       0
  8097 ;;      Temps:          0      12       0       0       0       0       0       0
  8098 ;;      Totals:         0      12       0       0       0       0       0       0
  8099 ;;Total ram usage:       12 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    3
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_Get_Analog_Value
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           
  8110                           ;psect for function _FILTER_Ubat
  8111  1407                     _FILTER_Ubat:	
  8112                           
  8113                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  8114                           
  8115                           ;incstack = 0
  8116                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  8117  1407  0021               	movlb	1	; select bank1
  8118  1408  3561               	lslf	_windowPtr1^(0+128),w
  8119  1409  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  8120  140A  0086               	movwf	6
  8121  140B  3002               	movlw	2	; select bank4/5
  8122  140C  0087               	movwf	7
  8123  140D  0020               	movlb	0	; select bank0
  8124  140E  085B               	movf	_ui16_Ubat_bldc,w	;volatile
  8125  140F  3FC0               	movwi [0]fsr1
  8126  1410  085C               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8127  1411  3FC1               	movwi [1]fsr1
  8128                           
  8129                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  8130  1412  300E               	movlw	14
  8131  1413  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  8132  1414  0086               	movwf	6
  8133  1415  3002               	movlw	2	; select bank4/5
  8134  1416  0087               	movwf	7
  8135  1417  300C               	movlw	12
  8136  1418  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  8137  1419  0084               	movwf	4
  8138  141A  3002               	movlw	2	; select bank4/5
  8139  141B  0085               	movwf	5
  8140  141C  0024               	movlb	4	; select bank4
  8141  141D  0834               	movf	(_inputArray1^(0+512)+4),w
  8142  141E  0732               	addwf	(_inputArray1^(0+512)+2),w
  8143  141F  0020               	movlb	0	; select bank0
  8144  1420  00A8               	movwf	??_FILTER_Ubat
  8145  1421  0024               	movlb	4	; select bank4
  8146  1422  0835               	movf	((_inputArray1+1)^(0+512)+4),w
  8147  1423  3D33               	addwfc	((_inputArray1+1)^(0+512)+2),w
  8148  1424  0020               	movlb	0	; select bank0
  8149  1425  00A9               	movwf	??_FILTER_Ubat+1
  8150  1426  0024               	movlb	4	; select bank4
  8151  1427  0836               	movf	(_inputArray1^(0+512)+6),w
  8152  1428  0020               	movlb	0	; select bank0
  8153  1429  0728               	addwf	??_FILTER_Ubat,w
  8154  142A  00AA               	movwf	??_FILTER_Ubat+2
  8155  142B  0024               	movlb	4	; select bank4
  8156  142C  0837               	movf	((_inputArray1+1)^(0+512)+6),w
  8157  142D  0020               	movlb	0	; select bank0
  8158  142E  3D29               	addwfc	??_FILTER_Ubat+1,w
  8159  142F  00AB               	movwf	??_FILTER_Ubat+3
  8160  1430  0024               	movlb	4	; select bank4
  8161  1431  0838               	movf	(_inputArray1^(0+512)+8),w
  8162  1432  0020               	movlb	0	; select bank0
  8163  1433  072A               	addwf	??_FILTER_Ubat+2,w
  8164  1434  00AC               	movwf	??_FILTER_Ubat+4
  8165  1435  0024               	movlb	4	; select bank4
  8166  1436  0839               	movf	((_inputArray1+1)^(0+512)+8),w
  8167  1437  0020               	movlb	0	; select bank0
  8168  1438  3D2B               	addwfc	??_FILTER_Ubat+3,w
  8169  1439  00AD               	movwf	??_FILTER_Ubat+5
  8170  143A  0024               	movlb	4	; select bank4
  8171  143B  083A               	movf	(_inputArray1^(0+512)+10),w
  8172  143C  0020               	movlb	0	; select bank0
  8173  143D  072C               	addwf	??_FILTER_Ubat+4,w
  8174  143E  00AE               	movwf	??_FILTER_Ubat+6
  8175  143F  0024               	movlb	4	; select bank4
  8176  1440  083B               	movf	((_inputArray1+1)^(0+512)+10),w
  8177  1441  0020               	movlb	0	; select bank0
  8178  1442  3D2D               	addwfc	??_FILTER_Ubat+5,w
  8179  1443  00AF               	movwf	??_FILTER_Ubat+7
  8180  1444  3F00               	moviw [0]fsr0
  8181  1445  072E               	addwf	??_FILTER_Ubat+6,w
  8182  1446  00B0               	movwf	??_FILTER_Ubat+8
  8183  1447  3F01               	moviw [1]fsr0
  8184  1448  3D2F               	addwfc	??_FILTER_Ubat+7,w
  8185  1449  00B1               	movwf	??_FILTER_Ubat+9
  8186  144A  3F40               	moviw [0]fsr1
  8187  144B  0730               	addwf	??_FILTER_Ubat+8,w
  8188  144C  00B2               	movwf	??_FILTER_Ubat+10
  8189  144D  3F41               	moviw [1]fsr1
  8190  144E  3D31               	addwfc	??_FILTER_Ubat+9,w
  8191  144F  00B3               	movwf	??_FILTER_Ubat+11
  8192  1450  0024               	movlb	4	; select bank4
  8193  1451  0830               	movf	_inputArray1^(0+512),w
  8194  1452  0020               	movlb	0	; select bank0
  8195  1453  0732               	addwf	??_FILTER_Ubat+10,w
  8196  1454  0023               	movlb	3	; select bank3
  8197  1455  00C4               	movwf	_filter1^(0+384)
  8198  1456  0024               	movlb	4	; select bank4
  8199  1457  0831               	movf	(_inputArray1+1)^(0+512),w
  8200  1458  0020               	movlb	0	; select bank0
  8201  1459  3D33               	addwfc	??_FILTER_Ubat+11,w
  8202  145A  0023               	movlb	3	; select bank3
  8203  145B  00C5               	movwf	(_filter1+1)^(0+384)
  8204                           
  8205                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  8206  145C  0845               	movf	(_filter1+1)^(0+384),w
  8207  145D  0020               	movlb	0	; select bank0
  8208  145E  00A9               	movwf	??_FILTER_Ubat+1
  8209  145F  0023               	movlb	3	; select bank3
  8210  1460  0844               	movf	_filter1^(0+384),w
  8211  1461  0020               	movlb	0	; select bank0
  8212  1462  00A8               	movwf	??_FILTER_Ubat
  8213  1463  36A9               	lsrf	??_FILTER_Ubat+1,f
  8214  1464  0CA8               	rrf	??_FILTER_Ubat,f
  8215  1465  36A9               	lsrf	??_FILTER_Ubat+1,f
  8216  1466  0CA8               	rrf	??_FILTER_Ubat,f
  8217  1467  36A9               	lsrf	??_FILTER_Ubat+1,f
  8218  1468  0CA8               	rrf	??_FILTER_Ubat,f
  8219  1469  0828               	movf	??_FILTER_Ubat,w
  8220  146A  0023               	movlb	3	; select bank3
  8221  146B  00CE               	movwf	_ui16_fir_Bat_mittel^(0+384)
  8222  146C  0020               	movlb	0	; select bank0
  8223  146D  0829               	movf	??_FILTER_Ubat+1,w
  8224  146E  0023               	movlb	3	; select bank3
  8225  146F  00CF               	movwf	(_ui16_fir_Bat_mittel+1)^(0+384)
  8226                           
  8227                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  8228  1470  3001               	movlw	1
  8229  1471  0020               	movlb	0	; select bank0
  8230  1472  00A8               	movwf	??_FILTER_Ubat
  8231  1473  0828               	movf	??_FILTER_Ubat,w
  8232  1474  0021               	movlb	1	; select bank1
  8233  1475  07E1               	addwf	_windowPtr1^(0+128),f
  8234  1476  3008               	movlw	8
  8235  1477  0261               	subwf	_windowPtr1^(0+128),w
  8236  1478  1C03               	skipc
  8237  1479  0008               	return
  8238                           
  8239                           ;adc.c: 277: {;adc.c: 279: windowPtr1 = 0;
  8240  147A  01E1               	clrf	_windowPtr1^(0+128)
  8241                           
  8242                           ;adc.c: 280: filter1 = 0;
  8243  147B  0023               	movlb	3	; select bank3
  8244  147C  01C4               	clrf	_filter1^(0+384)
  8245  147D  01C5               	clrf	(_filter1+1)^(0+384)
  8246  147E  0008               	return
  8247  147F                     __end_of_FILTER_Ubat:	
  8248                           
  8249                           	psect	text27
  8250  1247                     __ptext27:	
  8251 ;; *************** function _FILTER_Temp *****************
  8252 ;; Defined at:
  8253 ;;		line 400 in file "../adc.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;		None
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;		None
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  1    wreg      void 
  8260 ;; Registers used:
  8261 ;;		wreg, status,2, status,0
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8267 ;;      Params:         0       0       0       0       0       0       0       0
  8268 ;;      Locals:         0       0       0       0       0       0       0       0
  8269 ;;      Temps:          0       2       0       0       0       0       0       0
  8270 ;;      Totals:         0       2       0       0       0       0       0       0
  8271 ;;Total ram usage:        2 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; Hardware stack levels required when called:    3
  8274 ;; This function calls:
  8275 ;;		Nothing
  8276 ;; This function is called by:
  8277 ;;		_Get_Analog_Value
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           
  8282                           ;psect for function _FILTER_Temp
  8283  1247                     _FILTER_Temp:	
  8284                           
  8285                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
  8286                           
  8287                           ;incstack = 0
  8288                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
  8289  1247  0023               	movlb	3	; select bank3
  8290  1248  0852               	movf	_ui16_NTC_Temp_bldc^(0+384),w
  8291  1249  0022               	movlb	2	; select bank2
  8292  124A  0729               	addwf	_filterTempNTC^(0+256),w
  8293  124B  00A9               	movwf	_filterTempNTC^(0+256)
  8294  124C  0023               	movlb	3	; select bank3
  8295  124D  0853               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
  8296  124E  0022               	movlb	2	; select bank2
  8297  124F  3D2A               	addwfc	(_filterTempNTC+1)^(0+256),w
  8298  1250  00AA               	movwf	(_filterTempNTC+1)^(0+256)
  8299                           
  8300                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
  8301  1251  082A               	movf	(_filterTempNTC+1)^(0+256),w
  8302  1252  0020               	movlb	0	; select bank0
  8303  1253  00A9               	movwf	??_FILTER_Temp+1
  8304  1254  0022               	movlb	2	; select bank2
  8305  1255  0829               	movf	_filterTempNTC^(0+256),w
  8306  1256  0020               	movlb	0	; select bank0
  8307  1257  00A8               	movwf	??_FILTER_Temp
  8308  1258  3006               	movlw	6
  8309  1259                     u3015:	
  8310  1259  36A9               	lsrf	??_FILTER_Temp+1,f
  8311  125A  0CA8               	rrf	??_FILTER_Temp,f
  8312  125B  0B89               	decfsz	9,f
  8313  125C  2A59               	goto	u3015
  8314  125D  0828               	movf	??_FILTER_Temp,w
  8315  125E  0023               	movlb	3	; select bank3
  8316  125F  00C8               	movwf	_ui16_NTC_Temp_bldc_mean^(0+384)
  8317  1260  0020               	movlb	0	; select bank0
  8318  1261  0829               	movf	??_FILTER_Temp+1,w
  8319  1262  0023               	movlb	3	; select bank3
  8320  1263  00C9               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+384)
  8321                           
  8322                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
  8323  1264  0948               	comf	_ui16_NTC_Temp_bldc_mean^(0+384),w
  8324  1265  0020               	movlb	0	; select bank0
  8325  1266  00A8               	movwf	??_FILTER_Temp
  8326  1267  0023               	movlb	3	; select bank3
  8327  1268  0949               	comf	(_ui16_NTC_Temp_bldc_mean+1)^(0+384),w
  8328  1269  0020               	movlb	0	; select bank0
  8329  126A  00A9               	movwf	??_FILTER_Temp+1
  8330  126B  0AA8               	incf	??_FILTER_Temp,f
  8331  126C  1903               	skipnz
  8332  126D  0AA9               	incf	??_FILTER_Temp+1,f
  8333  126E  0022               	movlb	2	; select bank2
  8334  126F  0829               	movf	_filterTempNTC^(0+256),w
  8335  1270  0020               	movlb	0	; select bank0
  8336  1271  0728               	addwf	??_FILTER_Temp,w
  8337  1272  0022               	movlb	2	; select bank2
  8338  1273  00A9               	movwf	_filterTempNTC^(0+256)
  8339  1274  082A               	movf	(_filterTempNTC+1)^(0+256),w
  8340  1275  0020               	movlb	0	; select bank0
  8341  1276  3D29               	addwfc	??_FILTER_Temp+1,w
  8342  1277  0022               	movlb	2	; select bank2
  8343  1278  00AA               	movwf	(_filterTempNTC+1)^(0+256)
  8344                           
  8345                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
  8346  1279  0023               	movlb	3	; select bank3
  8347  127A  0850               	movf	_ui16_Temp_cal^(0+384),w
  8348  127B  0748               	addwf	_ui16_NTC_Temp_bldc_mean^(0+384),w
  8349  127C  00C0               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
  8350  127D  0851               	movf	(_ui16_Temp_cal+1)^(0+384),w
  8351  127E  3D49               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+384),w
  8352  127F  00C1               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
  8353  1280  0008               	return
  8354  1281                     __end_of_FILTER_Temp:	
  8355                           
  8356                           	psect	text28
  8357  11DC                     __ptext28:	
  8358 ;; *************** function _FILTER_IPhase *****************
  8359 ;; Defined at:
  8360 ;;		line 357 in file "../adc.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;		None
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;		None
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      void 
  8367 ;; Registers used:
  8368 ;;		wreg, status,2, status,0
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8374 ;;      Params:         0       0       0       0       0       0       0       0
  8375 ;;      Locals:         0       0       0       0       0       0       0       0
  8376 ;;      Temps:          0       2       0       0       0       0       0       0
  8377 ;;      Totals:         0       2       0       0       0       0       0       0
  8378 ;;Total ram usage:        2 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; Hardware stack levels required when called:    3
  8381 ;; This function calls:
  8382 ;;		Nothing
  8383 ;; This function is called by:
  8384 ;;		_Get_Analog_Value
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           
  8389                           ;psect for function _FILTER_IPhase
  8390  11DC                     _FILTER_IPhase:	
  8391                           
  8392                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
  8393                           
  8394                           ;incstack = 0
  8395                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
  8396  11DC  0022               	movlb	2	; select bank2
  8397  11DD  082D               	movf	_filter3^(0+256),w
  8398  11DE  0023               	movlb	3	; select bank3
  8399  11DF  0754               	addwf	_ui16_IPhase1_bldc^(0+384),w	;volatile
  8400  11E0  0022               	movlb	2	; select bank2
  8401  11E1  00AD               	movwf	_filter3^(0+256)
  8402  11E2  082E               	movf	(_filter3+1)^(0+256),w
  8403  11E3  0023               	movlb	3	; select bank3
  8404  11E4  3D55               	addwfc	(_ui16_IPhase1_bldc+1)^(0+384),w	;volatile
  8405  11E5  0022               	movlb	2	; select bank2
  8406  11E6  00AE               	movwf	(_filter3+1)^(0+256)
  8407                           
  8408                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
  8409  11E7  082E               	movf	(_filter3+1)^(0+256),w
  8410  11E8  0020               	movlb	0	; select bank0
  8411  11E9  00A9               	movwf	??_FILTER_IPhase+1
  8412  11EA  0022               	movlb	2	; select bank2
  8413  11EB  082D               	movf	_filter3^(0+256),w
  8414  11EC  0020               	movlb	0	; select bank0
  8415  11ED  00A8               	movwf	??_FILTER_IPhase
  8416  11EE  3006               	movlw	6
  8417  11EF                     u3005:	
  8418  11EF  36A9               	lsrf	??_FILTER_IPhase+1,f
  8419  11F0  0CA8               	rrf	??_FILTER_IPhase,f
  8420  11F1  0B89               	decfsz	9,f
  8421  11F2  29EF               	goto	u3005
  8422  11F3  0828               	movf	??_FILTER_IPhase,w
  8423  11F4  0023               	movlb	3	; select bank3
  8424  11F5  00CC               	movwf	_ui16_fir_IPhase_mean^(0+384)
  8425  11F6  0020               	movlb	0	; select bank0
  8426  11F7  0829               	movf	??_FILTER_IPhase+1,w
  8427  11F8  0023               	movlb	3	; select bank3
  8428  11F9  00CD               	movwf	(_ui16_fir_IPhase_mean+1)^(0+384)
  8429                           
  8430                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
  8431  11FA  094C               	comf	_ui16_fir_IPhase_mean^(0+384),w
  8432  11FB  0020               	movlb	0	; select bank0
  8433  11FC  00A8               	movwf	??_FILTER_IPhase
  8434  11FD  0023               	movlb	3	; select bank3
  8435  11FE  094D               	comf	(_ui16_fir_IPhase_mean+1)^(0+384),w
  8436  11FF  0020               	movlb	0	; select bank0
  8437  1200  00A9               	movwf	??_FILTER_IPhase+1
  8438  1201  0AA8               	incf	??_FILTER_IPhase,f
  8439  1202  1903               	skipnz
  8440  1203  0AA9               	incf	??_FILTER_IPhase+1,f
  8441  1204  0022               	movlb	2	; select bank2
  8442  1205  082D               	movf	_filter3^(0+256),w
  8443  1206  0020               	movlb	0	; select bank0
  8444  1207  0728               	addwf	??_FILTER_IPhase,w
  8445  1208  0022               	movlb	2	; select bank2
  8446  1209  00AD               	movwf	_filter3^(0+256)
  8447  120A  082E               	movf	(_filter3+1)^(0+256),w
  8448  120B  0020               	movlb	0	; select bank0
  8449  120C  3D29               	addwfc	??_FILTER_IPhase+1,w
  8450  120D  0022               	movlb	2	; select bank2
  8451  120E  00AE               	movwf	(_filter3+1)^(0+256)
  8452  120F  0008               	return
  8453  1210                     __end_of_FILTER_IPhase:	
  8454                           
  8455                           	psect	text29
  8456  0078                     __ptext29:	
  8457 ;; *************** function _BVH2_Appl_Layer *****************
  8458 ;; Defined at:
  8459 ;;		line 331 in file "../T_Link/BVH2_Appl_Layer.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;		None
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;  Sb3_Sum1        2   26[BANK5 ] short 
  8464 ;;  Sb3_Product1    2   18[BANK5 ] unsigned short 
  8465 ;;  Sb4_PI_sum      2   30[BANK5 ] short 
  8466 ;;  Sb2_Switch5     2   24[BANK5 ] unsigned short 
  8467 ;;  Sb2_Error       2   16[BANK5 ] short 
  8468 ;;  Sb2_Switch2     2    8[BANK5 ] unsigned short 
  8469 ;;  Sb1_Logical_    1   29[BANK5 ] unsigned char 
  8470 ;;  Sb1_Logical_    1   28[BANK5 ] unsigned char 
  8471 ;;  Sb2_Logical_    1   23[BANK5 ] unsigned char 
  8472 ;;  Sb1_Logical_    1   22[BANK5 ] unsigned char 
  8473 ;;  Sb1_Logical_    1   21[BANK5 ] unsigned char 
  8474 ;;  Cb24_Reset      1   20[BANK5 ] unsigned char 
  8475 ;; Return value:  Size  Location     Type
  8476 ;;                  1    wreg      void 
  8477 ;; Registers used:
  8478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8484 ;;      Params:         0       0       0       0       0       0       0       0
  8485 ;;      Locals:         0       0       0       0       0       0      32       0
  8486 ;;      Temps:          0      16       0       0       0       0       0       0
  8487 ;;      Totals:         0      16       0       0       0       0      32       0
  8488 ;;Total ram usage:       48 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    4
  8491 ;; This function calls:
  8492 ;;		_Cb1_Current_An___High_node_fcn1
  8493 ;;		_Cb34_PWM_Detection_node_fcn1
  8494 ;;		_Cb44_Pic_etat_monitor_node_fcn1
  8495 ;;		_Cb56_UbatHandling_node_fcn2
  8496 ;;		___aldiv
  8497 ;;		___lmul
  8498 ;;		___wmul
  8499 ;; This function is called by:
  8500 ;;		_main
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           
  8505                           ;psect for function _BVH2_Appl_Layer
  8506  0078                     _BVH2_Appl_Layer:	
  8507                           
  8508                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;;BVH2_Appl_Layer.c: 335: static
      +                           UInt16 Cb19_Counter = 0;;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;;BVH2_Ap
      +                          pl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;;BVH2_Appl_Layer.c: 338: static UInt8 C
      +                          b24_RestartCounter = 0;;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;;BVH2_Appl
      +                          _Layer.c: 340: static UInt8 Cb9_StateCnt = 0;;BVH2_Appl_Layer.c: 342: static struct tag_
      +                          SIBFS_Current_Analysis_low_b_tp SIBFS_Current_Analysis_low_b = {;BVH2_Appl_Layer.c: 343:
      +                           0 ,
  8509                           
  8510                           ;incstack = 0
  8511                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8512  0078  28DF               	goto	l9235
  8513  0079                     l9159:	
  8514                           ;BVH2_Appl_Layer.c: 413: case (UInt8)4: {
  8515                           
  8516                           
  8517                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
  8518  0079  3000               	movlw	0
  8519  007A  0021               	movlb	1	; select bank1
  8520  007B  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  8521  007C  3033               	movlw	51
  8522  007D  1903               	skipnz
  8523  007E  0224               	subwf	_Cb44_StateCnt^(0+128),w
  8524  007F  1C03               	skipc
  8525  0080  28C4               	goto	L22
  8526  0081  289C               	goto	l9181
  8527  0082                     l9171:	
  8528                           ;BVH2_Appl_Layer.c: 429: };BVH2_Appl_Layer.c: 430: case (UInt8)5: {
  8529                           
  8530                           ;BVH2_Appl_Layer.c: 425: };BVH2_Appl_Layer.c: 428: break;
  8531                           
  8532                           ;BVH2_Appl_Layer.c: 423: else {;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1;
  8533                           
  8534                           ;BVH2_Appl_Layer.c: 422: }
  8535                           
  8536                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0;
  8537                           
  8538                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
  8539                           
  8540                           ;BVH2_Appl_Layer.c: 419: Cb44_oShutoff = 0;
  8541                           
  8542                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  8543                           
  8544                           
  8545                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
  8546  0082  319E  26DA  3180   	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  8547                           
  8548                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
  8549  0085  0021               	movlb	1	; select bank1
  8550  0086  0C47               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8551  0087  0020               	movlb	0	; select bank0
  8552  0088  00B7               	movwf	??_BVH2_Appl_Layer
  8553  0089  0CB7               	rrf	??_BVH2_Appl_Layer,f
  8554  008A  0C37               	rrf	??_BVH2_Appl_Layer,w
  8555  008B  3903               	andlw	3
  8556  008C  3A03               	xorlw	3
  8557  008D  1903               	skipnz
  8558  008E  28F5               	goto	l9237
  8559  008F  28C3               	goto	l9219
  8560  0090                     l9177:	
  8561                           ;BVH2_Appl_Layer.c: 439: };BVH2_Appl_Layer.c: 440: case (UInt8)3: {
  8562                           
  8563                           ;BVH2_Appl_Layer.c: 435: };BVH2_Appl_Layer.c: 438: break;
  8564                           
  8565                           ;BVH2_Appl_Layer.c: 434: Cb44_StateCnt = Cb44_StateCnt + 1;
  8566                           
  8567                           
  8568                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
  8569  0090  319E  26DA  3180   	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  8570                           
  8571                           ;BVH2_Appl_Layer.c: 445: break;
  8572  0093  28F5               	goto	l9237
  8573  0094                     l9179:	
  8574                           ;BVH2_Appl_Layer.c: 446: };BVH2_Appl_Layer.c: 447: case (UInt8)6: {
  8575                           
  8576                           
  8577                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
  8578  0094  3000               	movlw	0
  8579  0095  0021               	movlb	1	; select bank1
  8580  0096  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  8581  0097  3010               	movlw	16
  8582  0098  1903               	skipnz
  8583  0099  0224               	subwf	_Cb44_StateCnt^(0+128),w
  8584  009A  1C03               	skipc
  8585  009B  28A5               	goto	l9189
  8586  009C                     l9181:	
  8587                           
  8588                           ;BVH2_Appl_Layer.c: 451: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  8589  009C  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8590  009D  39F8               	andlw	-8
  8591  009E  3805               	iorlw	5
  8592  009F  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8593                           
  8594                           ;BVH2_Appl_Layer.c: 452: Cb44_oShutoff = 0;
  8595  00A0  0022               	movlb	2	; select bank2
  8596  00A1  01B8               	clrf	_Cb44_oShutoff^(0+256)
  8597                           
  8598                           ;BVH2_Appl_Layer.c: 453: Cb44_oAlarm = 0;
  8599  00A2  01B9               	clrf	_Cb44_oAlarm^(0+256)
  8600                           
  8601                           ;BVH2_Appl_Layer.c: 454: Cb44_StateCnt = 0;
  8602  00A3  0021               	movlb	1	; select bank1
  8603  00A4  28DC               	goto	l9233
  8604  00A5                     l9189:	
  8605                           ;BVH2_Appl_Layer.c: 455: }
  8606                           
  8607                           
  8608                           ;BVH2_Appl_Layer.c: 456: else {;BVH2_Appl_Layer.c: 459: if (bool_mat_pic_etat) {
  8609  00A5  084B               	movf	_bool_mat_pic_etat^(0+128),w
  8610  00A6  28B5               	goto	L49
  8611  00A7                     l9201:	
  8612                           ;BVH2_Appl_Layer.c: 473: };BVH2_Appl_Layer.c: 474: case (UInt8)2: {
  8613                           
  8614                           ;BVH2_Appl_Layer.c: 468: };BVH2_Appl_Layer.c: 469: };BVH2_Appl_Layer.c: 472: break;
  8615                           
  8616                           ;BVH2_Appl_Layer.c: 466: else {;BVH2_Appl_Layer.c: 467: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1;
  8617                           
  8618                           ;BVH2_Appl_Layer.c: 465: }
  8619                           
  8620                           ;BVH2_Appl_Layer.c: 464: Cb44_oAlarm = 1;
  8621                           
  8622                           ;BVH2_Appl_Layer.c: 463: Cb44_oShutoff = 1;
  8623                           
  8624                           ;BVH2_Appl_Layer.c: 462: Cb44_StateCnt = 0;
  8625                           
  8626                           ;BVH2_Appl_Layer.c: 461: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)1;
  8627                           
  8628                           
  8629                           ;BVH2_Appl_Layer.c: 479: if (!(bool_mat_pic_etat)) {
  8630  00A7  084B               	movf	_bool_mat_pic_etat^(0+128),w
  8631  00A8  1D03               	btfss	3,2
  8632  00A9  28B2               	goto	l9209
  8633                           
  8634                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
  8635  00AA  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8636  00AB  39F8               	andlw	-8
  8637  00AC  3803               	iorlw	3
  8638  00AD  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8639                           
  8640                           ;BVH2_Appl_Layer.c: 482: Cb44_oShutoff = 0;
  8641  00AE  0022               	movlb	2	; select bank2
  8642  00AF  01B8               	clrf	_Cb44_oShutoff^(0+256)
  8643                           
  8644                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
  8645  00B0  01B9               	clrf	_Cb44_oAlarm^(0+256)
  8646                           
  8647                           ;BVH2_Appl_Layer.c: 484: }
  8648  00B1  28F5               	goto	l9237
  8649  00B2                     l9209:	
  8650                           
  8651                           ;BVH2_Appl_Layer.c: 485: else {;BVH2_Appl_Layer.c: 486: if (Cb44_StateCnt) {
  8652  00B2  0021               	movlb	1	; select bank1
  8653  00B3  0824               	movf	_Cb44_StateCnt^(0+128),w
  8654  00B4  0425               	iorwf	(_Cb44_StateCnt+1)^(0+128),w
  8655  00B5                     L49:	
  8656  00B5  1903               	btfsc	3,2
  8657  00B6  28C3               	goto	l9219
  8658                           
  8659                           ;BVH2_Appl_Layer.c: 488: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)1;
  8660  00B7  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8661  00B8  39F8               	andlw	-8
  8662  00B9  3801               	iorlw	1
  8663  00BA  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8664                           
  8665                           ;BVH2_Appl_Layer.c: 489: Cb44_StateCnt = 0;
  8666  00BB  01A4               	clrf	_Cb44_StateCnt^(0+128)
  8667  00BC  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
  8668                           
  8669                           ;BVH2_Appl_Layer.c: 490: Cb44_oShutoff = 1;
  8670  00BD  0022               	movlb	2	; select bank2
  8671  00BE  01B8               	clrf	_Cb44_oShutoff^(0+256)
  8672  00BF  0AB8               	incf	_Cb44_oShutoff^(0+256),f
  8673                           
  8674                           ;BVH2_Appl_Layer.c: 491: Cb44_oAlarm = 1;
  8675  00C0  01B9               	clrf	_Cb44_oAlarm^(0+256)
  8676  00C1  0AB9               	incf	_Cb44_oAlarm^(0+256),f
  8677                           
  8678                           ;BVH2_Appl_Layer.c: 492: }
  8679  00C2  28F5               	goto	l9237
  8680  00C3                     l9219:	
  8681                           
  8682                           ;BVH2_Appl_Layer.c: 493: else {;BVH2_Appl_Layer.c: 494: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1;
  8683  00C3  0021               	movlb	1	; select bank1
  8684  00C4                     L22:	
  8685  00C4  0824               	movf	_Cb44_StateCnt^(0+128),w
  8686  00C5  3E01               	addlw	1
  8687  00C6  00A4               	movwf	_Cb44_StateCnt^(0+128)
  8688  00C7  3000               	movlw	0
  8689  00C8  3D25               	addwfc	(_Cb44_StateCnt+1)^(0+128),w
  8690  00C9  00A5               	movwf	(_Cb44_StateCnt+1)^(0+128)
  8691                           
  8692                           ;BVH2_Appl_Layer.c: 495: };BVH2_Appl_Layer.c: 496: };BVH2_Appl_Layer.c: 499: break;
  8693  00CA  28F5               	goto	l9237
  8694  00CB                     l9221:	
  8695                           ;BVH2_Appl_Layer.c: 500: };BVH2_Appl_Layer.c: 501: case (UInt8)1: {
  8696                           
  8697                           
  8698                           ;BVH2_Appl_Layer.c: 506: if (!(bool_mat_pic_etat)) {
  8699  00CB  084B               	movf	_bool_mat_pic_etat^(0+128),w
  8700  00CC  1D03               	btfss	3,2
  8701  00CD  28F5               	goto	l9237
  8702                           
  8703                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
  8704  00CE  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8705  00CF  39F8               	andlw	-8
  8706  00D0  3806               	iorlw	6
  8707  00D1  28DB               	goto	L40
  8708  00D2                     l1387:	
  8709                           ;BVH2_Appl_Layer.c: 515: };BVH2_Appl_Layer.c: 516: default: {
  8710                           
  8711                           ;BVH2_Appl_Layer.c: 511: };BVH2_Appl_Layer.c: 514: break;
  8712                           
  8713                           ;BVH2_Appl_Layer.c: 510: Cb44_StateCnt = 0;
  8714                           
  8715                           
  8716                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
  8717  00D2  1AC7               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
  8718  00D3  28F5               	goto	l9237
  8719                           
  8720                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
  8721  00D4  16C7               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
  8722                           
  8723                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
  8724  00D5  086F               	movf	_ui8_ResetMatlab^(0+128),w
  8725  00D6  1903               	btfsc	3,2
  8726  00D7  28F5               	goto	l9237
  8727                           
  8728                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
  8729  00D8  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8730  00D9  39F8               	andlw	-8
  8731  00DA  3804               	iorlw	4
  8732  00DB                     L40:	
  8733  00DB  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8734  00DC                     l9233:	
  8735                           
  8736                           ;BVH2_Appl_Layer.c: 526: Cb44_StateCnt = 0;
  8737  00DC  01A4               	clrf	_Cb44_StateCnt^(0+128)
  8738  00DD  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
  8739                           
  8740                           ;BVH2_Appl_Layer.c: 527: };BVH2_Appl_Layer.c: 528: };BVH2_Appl_Layer.c: 529: };BVH2_Appl
      +                          _Layer.c: 530: }
  8741  00DE  28F5               	goto	l9237
  8742  00DF                     l9235:	
  8743  00DF  0021               	movlb	1	; select bank1
  8744  00E0  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8745  00E1  3907               	andlw	7
  8746                           
  8747                           ; Switch size 1, requested type "space"
  8748                           ; Number of cases is 6, Range of values is 1 to 6
  8749                           ; switch strategies available:
  8750                           ; Name         Instructions Cycles
  8751                           ; simple_byte           19    10 (average)
  8752                           ; direct_byte           21     9 (fixed)
  8753                           ; jumptable            263     9 (fixed)
  8754                           ;	Chosen strategy is simple_byte
  8755  00E2  3A01               	xorlw	1	; case 1
  8756  00E3  1903               	skipnz
  8757  00E4  28CB               	goto	l9221
  8758  00E5  3A03               	xorlw	3	; case 2
  8759  00E6  1903               	skipnz
  8760  00E7  28A7               	goto	l9201
  8761  00E8  3A01               	xorlw	1	; case 3
  8762  00E9  1903               	skipnz
  8763  00EA  2890               	goto	l9177
  8764  00EB  3A07               	xorlw	7	; case 4
  8765  00EC  1903               	skipnz
  8766  00ED  2879               	goto	l9159
  8767  00EE  3A01               	xorlw	1	; case 5
  8768  00EF  1903               	skipnz
  8769  00F0  2882               	goto	l9171
  8770  00F1  3A03               	xorlw	3	; case 6
  8771  00F2  1903               	skipnz
  8772  00F3  2894               	goto	l9179
  8773  00F4  28D2               	goto	l1387
  8774  00F5                     l9237:	
  8775                           
  8776                           ;BVH2_Appl_Layer.c: 535: bool_PIC_Alarm = Cb44_oAlarm;
  8777  00F5  0022               	movlb	2	; select bank2
  8778  00F6  0839               	movf	_Cb44_oAlarm^(0+256),w
  8779  00F7  0020               	movlb	0	; select bank0
  8780  00F8  00B7               	movwf	??_BVH2_Appl_Layer
  8781  00F9  0837               	movf	??_BVH2_Appl_Layer,w
  8782  00FA  0023               	movlb	3	; select bank3
  8783  00FB  00DA               	movwf	_bool_PIC_Alarm^(0+384)
  8784                           
  8785                           ;BVH2_Appl_Layer.c: 539: Cb34_idPWM = 50;
  8786  00FC  3032               	movlw	50
  8787  00FD  0020               	movlb	0	; select bank0
  8788  00FE  00B7               	movwf	??_BVH2_Appl_Layer
  8789  00FF  0837               	movf	??_BVH2_Appl_Layer,w
  8790  0100  00D6               	movwf	_Cb34_idPWM
  8791                           
  8792                           ;BVH2_Appl_Layer.c: 544: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
  8793  0101  0021               	movlb	1	; select bank1
  8794  0102  1A48               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
  8795  0103  2925               	goto	l9261
  8796  0104  2935               	goto	l1390
  8797  0105                     l9243:	
  8798                           ;BVH2_Appl_Layer.c: 547: case (UInt8)3: {
  8799                           
  8800                           ;BVH2_Appl_Layer.c: 546: switch (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns) {
  8801                           
  8802                           
  8803                           ;BVH2_Appl_Layer.c: 550: Cb34_PWM_Detection_node_fcn1();
  8804  0105  3195  257A  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8805                           
  8806                           ;BVH2_Appl_Layer.c: 553: break;
  8807  0108  2944               	goto	l9277
  8808  0109                     l9245:	
  8809                           ;BVH2_Appl_Layer.c: 554: };BVH2_Appl_Layer.c: 555: case (UInt8)8: {
  8810                           
  8811                           
  8812                           ;BVH2_Appl_Layer.c: 558: Cb34_PWM_Detection_node_fcn1();
  8813  0109  3195  257A  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8814                           
  8815                           ;BVH2_Appl_Layer.c: 562: break;
  8816  010C  2944               	goto	l9277
  8817  010D                     l9247:	
  8818                           ;BVH2_Appl_Layer.c: 563: };BVH2_Appl_Layer.c: 564: case (UInt8)4: {
  8819                           
  8820                           
  8821                           ;BVH2_Appl_Layer.c: 567: Cb34_PWM_Detection_node_fcn1();
  8822  010D  3195  257A  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8823                           
  8824                           ;BVH2_Appl_Layer.c: 571: break;
  8825  0110  2944               	goto	l9277
  8826  0111                     l9249:	
  8827                           ;BVH2_Appl_Layer.c: 572: };BVH2_Appl_Layer.c: 573: case (UInt8)6: {
  8828                           
  8829                           
  8830                           ;BVH2_Appl_Layer.c: 575: Cb34_PWM_Detection_node_fcn1();
  8831  0111  3195  257A  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8832                           
  8833                           ;BVH2_Appl_Layer.c: 578: break;
  8834  0114  2944               	goto	l9277
  8835  0115                     l9251:	
  8836                           ;BVH2_Appl_Layer.c: 579: };BVH2_Appl_Layer.c: 580: case (UInt8)7: {
  8837                           
  8838                           
  8839                           ;BVH2_Appl_Layer.c: 583: Cb34_PWM_Detection_node_fcn1();
  8840  0115  3195  257A  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8841                           
  8842                           ;BVH2_Appl_Layer.c: 587: break;
  8843  0118  2944               	goto	l9277
  8844  0119                     l9253:	
  8845                           ;BVH2_Appl_Layer.c: 588: };BVH2_Appl_Layer.c: 589: case (UInt8)2: {
  8846                           
  8847                           
  8848                           ;BVH2_Appl_Layer.c: 591: Cb34_PWM_Detection_node_fcn1();
  8849  0119  3195  257A  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8850                           
  8851                           ;BVH2_Appl_Layer.c: 594: break;
  8852  011C  2944               	goto	l9277
  8853  011D                     l9255:	
  8854                           ;BVH2_Appl_Layer.c: 595: };BVH2_Appl_Layer.c: 596: case (UInt8)5: {
  8855                           
  8856                           
  8857                           ;BVH2_Appl_Layer.c: 599: Cb34_PWM_Detection_node_fcn1();
  8858  011D  3195  257A  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8859                           
  8860                           ;BVH2_Appl_Layer.c: 603: break;
  8861  0120  2944               	goto	l9277
  8862  0121                     l9257:	
  8863                           ;BVH2_Appl_Layer.c: 604: };BVH2_Appl_Layer.c: 605: case (UInt8)1: {
  8864                           
  8865                           
  8866                           ;BVH2_Appl_Layer.c: 607: Cb34_PWM_Detection_node_fcn1();
  8867  0121  3195  257A  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8868                           
  8869                           ;BVH2_Appl_Layer.c: 611: };BVH2_Appl_Layer.c: 612: }
  8870                           
  8871                           ;BVH2_Appl_Layer.c: 610: break;
  8872  0124  2944               	goto	l9277
  8873  0125                     l9261:	
  8874  0125  0021               	movlb	1	; select bank1
  8875  0126  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  8876  0127  390F               	andlw	15
  8877                           
  8878                           ; Switch size 1, requested type "space"
  8879                           ; Number of cases is 8, Range of values is 1 to 8
  8880                           ; switch strategies available:
  8881                           ; Name         Instructions Cycles
  8882                           ; direct_byte           25     9 (fixed)
  8883                           ; simple_byte           25    13 (average)
  8884                           ; jumptable            263     9 (fixed)
  8885                           ;	Chosen strategy is direct_byte
  8886  0128  3EFF               	addlw	-1
  8887  0129  1C03               	skipc
  8888  012A  2944               	goto	l9277
  8889  012B  0084               	movwf	4
  8890  012C  3008               	movlw	8
  8891  012D  0204               	subwf	4,w
  8892  012E  1803               	skipnc
  8893  012F  2944               	goto	l9277
  8894  0130  3198               	movlp	high S11837
  8895  0131  3504               	lslf	4,w
  8896  0132  3E68               	addlw	low S11837
  8897  0133  0082               	movwf	2
  8898                           
  8899                           ;BVH2_Appl_Layer.c: 615: }
  8900  0134  2944               	goto	l9277
  8901  0135                     l1390:	
  8902                           
  8903                           ;BVH2_Appl_Layer.c: 616: else {;BVH2_Appl_Layer.c: 617: SIBFS_PWM_Detection_b.Cb35_PWMin
      +                          put_handling = 1;
  8904  0135  1648               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
  8905                           
  8906                           ;BVH2_Appl_Layer.c: 620: if (ui8_ResetMatlab == 1) {
  8907  0136  036F               	decf	_ui8_ResetMatlab^(0+128),w
  8908  0137  1D03               	btfss	3,2
  8909  0138  2944               	goto	l9277
  8910                           
  8911                           ;BVH2_Appl_Layer.c: 622: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
  8912  0139  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  8913  013A  39F0               	andlw	-16
  8914  013B  3801               	iorlw	1
  8915  013C  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
  8916                           
  8917                           ;BVH2_Appl_Layer.c: 623: Cb34_odPumpOff = 1;
  8918  013D  0022               	movlb	2	; select bank2
  8919  013E  01BA               	clrf	_Cb34_odPumpOff^(0+256)
  8920  013F  0ABA               	incf	_Cb34_odPumpOff^(0+256),f
  8921                           
  8922                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedValueSel = 0;
  8923  0140  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
  8924                           
  8925                           ;BVH2_Appl_Layer.c: 625: Cb34_odFixedLowValueSel = 0;
  8926  0141  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
  8927                           
  8928                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_SC_Alarm = 0;
  8929  0142  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
  8930                           
  8931                           ;BVH2_Appl_Layer.c: 627: Cb34_oPWM_Alarm = 0;
  8932  0143  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
  8933  0144                     l9277:	
  8934                           
  8935                           ;BVH2_Appl_Layer.c: 628: };BVH2_Appl_Layer.c: 629: };BVH2_Appl_Layer.c: 634: bool_PWMin_
      +                          Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
  8936  0144  0022               	movlb	2	; select bank2
  8937  0145  083D               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
  8938  0146  0020               	movlb	0	; select bank0
  8939  0147  00B7               	movwf	??_BVH2_Appl_Layer
  8940  0148  0837               	movf	??_BVH2_Appl_Layer,w
  8941  0149  0022               	movlb	2	; select bank2
  8942  014A  00C8               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
  8943                           
  8944                           ;BVH2_Appl_Layer.c: 639: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
  8945  014B  0020               	movlb	0	; select bank0
  8946  014C  1DD7               	btfss	_SIBFS_UbatHandling_b,3
  8947  014D  2976               	goto	l1403
  8948                           
  8949                           ;BVH2_Appl_Layer.c: 643: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
  8950  014E  1E57               	btfss	_SIBFS_UbatHandling_b,4
  8951  014F  295D               	goto	l1404
  8952                           
  8953                           ;BVH2_Appl_Layer.c: 645: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
  8954  0150  0857               	movf	_SIBFS_UbatHandling_b,w
  8955  0151  39F8               	andlw	-8
  8956  0152  3802               	iorlw	2
  8957  0153  00D7               	movwf	_SIBFS_UbatHandling_b
  8958                           
  8959                           ;BVH2_Appl_Layer.c: 648: if (((UInt8)ui8_BattVolt_mat) < 139) {
  8960  0154  308B               	movlw	139
  8961  0155  0021               	movlb	1	; select bank1
  8962  0156  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
  8963  0157  1803               	skipnc
  8964  0158  2983               	goto	l1411
  8965                           
  8966                           ;BVH2_Appl_Layer.c: 649: Cb56_UbatHandling_node_fcn2();
  8967  0159  3193  2305  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  8968                           
  8969                           ;BVH2_Appl_Layer.c: 650: };BVH2_Appl_Layer.c: 653: }
  8970  015C  2983               	goto	l1411
  8971  015D                     l1404:	
  8972                           
  8973                           ;BVH2_Appl_Layer.c: 654: else {;BVH2_Appl_Layer.c: 656: if (SIBFS_UbatHandling_b.Cb59_Sa
      +                          turationLow) {
  8974  015D  1ED7               	btfss	_SIBFS_UbatHandling_b,5
  8975  015E  296C               	goto	l1407
  8976                           
  8977                           ;BVH2_Appl_Layer.c: 658: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
  8978  015F  0857               	movf	_SIBFS_UbatHandling_b,w
  8979  0160  39F8               	andlw	-8
  8980  0161  3803               	iorlw	3
  8981  0162  00D7               	movwf	_SIBFS_UbatHandling_b
  8982                           
  8983                           ;BVH2_Appl_Layer.c: 661: if (((UInt8)ui8_BattVolt_mat) > 49) {
  8984  0163  3032               	movlw	50
  8985  0164  0021               	movlb	1	; select bank1
  8986  0165  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
  8987  0166  1C03               	skipc
  8988  0167  2983               	goto	l1411
  8989                           
  8990                           ;BVH2_Appl_Layer.c: 662: Cb56_UbatHandling_node_fcn2();
  8991  0168  3193  2305  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  8992                           
  8993                           ;BVH2_Appl_Layer.c: 663: };BVH2_Appl_Layer.c: 666: }
  8994  016B  2983               	goto	l1411
  8995  016C                     l1407:	
  8996                           
  8997                           ;BVH2_Appl_Layer.c: 667: else {;BVH2_Appl_Layer.c: 669: if (SIBFS_UbatHandling_b.Cb60_No
      +                          rmalUbat) {
  8998  016C  1F57               	btfss	_SIBFS_UbatHandling_b,6
  8999  016D  2983               	goto	l1411
  9000                           
  9001                           ;BVH2_Appl_Layer.c: 671: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
  9002  016E  0857               	movf	_SIBFS_UbatHandling_b,w
  9003  016F  39F8               	andlw	-8
  9004  0170  3801               	iorlw	1
  9005  0171  00D7               	movwf	_SIBFS_UbatHandling_b
  9006                           
  9007                           ;BVH2_Appl_Layer.c: 672: Cb56_UbatHandling_node_fcn2();
  9008  0172  3193  2305  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  9009                           
  9010                           ;BVH2_Appl_Layer.c: 675: };BVH2_Appl_Layer.c: 676: };BVH2_Appl_Layer.c: 677: };BVH2_Appl
      +                          _Layer.c: 680: }
  9011  0175  2983               	goto	l1411
  9012  0176                     l1403:	
  9013                           
  9014                           ;BVH2_Appl_Layer.c: 681: else {;BVH2_Appl_Layer.c: 682: SIBFS_UbatHandling_b.Cb57_Ubat_H
      +                          andling = 1;
  9015  0176  15D7               	bsf	_SIBFS_UbatHandling_b,3
  9016                           
  9017                           ;BVH2_Appl_Layer.c: 685: if (ui8_ResetMatlab == 1) {
  9018  0177  0021               	movlb	1	; select bank1
  9019  0178  036F               	decf	_ui8_ResetMatlab^(0+128),w
  9020  0179  1D03               	btfss	3,2
  9021  017A  2983               	goto	l1411
  9022                           
  9023                           ;BVH2_Appl_Layer.c: 687: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
  9024  017B  0020               	movlb	0	; select bank0
  9025  017C  1757               	bsf	_SIBFS_UbatHandling_b,6
  9026                           
  9027                           ;BVH2_Appl_Layer.c: 688: Cb56_odPumpOff = 0;
  9028  017D  0022               	movlb	2	; select bank2
  9029  017E  01B6               	clrf	_Cb56_odPumpOff^(0+256)
  9030                           
  9031                           ;BVH2_Appl_Layer.c: 689: Cb56_odFixedValueSel = 0;
  9032  017F  0021               	movlb	1	; select bank1
  9033  0180  01C6               	clrf	_Cb56_odFixedValueSel^(0+128)
  9034                           
  9035                           ;BVH2_Appl_Layer.c: 690: Cb56_oUbat_Alarm_High = 0;
  9036  0181  0022               	movlb	2	; select bank2
  9037  0182  01B7               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
  9038  0183                     l1411:	
  9039                           
  9040                           ;BVH2_Appl_Layer.c: 691: };BVH2_Appl_Layer.c: 692: };BVH2_Appl_Layer.c: 695: Sb1_Logical
      +                          _Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueSel));
  9041  0183  0025               	movlb	5	; select bank5
  9042  0184  01AA               	clrf	_BVH2_Appl_Layer$1056^(0+640)
  9043  0185  0022               	movlb	2	; select bank2
  9044  0186  083A               	movf	_Cb34_odPumpOff^(0+256),w
  9045  0187  1903               	btfsc	3,2
  9046  0188  2990               	goto	l9311
  9047  0189  0021               	movlb	1	; select bank1
  9048  018A  0846               	movf	_Cb56_odFixedValueSel^(0+128),w
  9049  018B  1D03               	btfss	3,2
  9050  018C  2990               	goto	l9311
  9051  018D  0025               	movlb	5	; select bank5
  9052  018E  01AA               	clrf	_BVH2_Appl_Layer$1056^(0+640)
  9053  018F  0AAA               	incf	_BVH2_Appl_Layer$1056^(0+640),f
  9054  0190                     l9311:	
  9055  0190  0025               	movlb	5	; select bank5
  9056  0191  082A               	movf	_BVH2_Appl_Layer$1056^(0+640),w
  9057  0192  0020               	movlb	0	; select bank0
  9058  0193  00B7               	movwf	??_BVH2_Appl_Layer
  9059  0194  0837               	movf	??_BVH2_Appl_Layer,w
  9060  0195  0025               	movlb	5	; select bank5
  9061  0196  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640)
  9062                           
  9063                           ;BVH2_Appl_Layer.c: 700: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
  9064  0197  0021               	movlb	1	; select bank1
  9065  0198  1CC0               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9066  0199  29A8               	goto	l1415
  9067                           
  9068                           ;BVH2_Appl_Layer.c: 702: if (Cb51_Counter > 80) {
  9069  019A  3051               	movlw	81
  9070  019B  0244               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+128),w
  9071  019C  1C03               	skipc
  9072  019D  29A0               	goto	l9321
  9073                           
  9074                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
  9075  019E  10C0               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9076  019F  29CD               	goto	L41
  9077  01A0                     l9321:	
  9078                           ;BVH2_Appl_Layer.c: 711: }
  9079                           
  9080                           ;BVH2_Appl_Layer.c: 710: Cb51_Counter = 0 ;
  9081                           
  9082                           ;BVH2_Appl_Layer.c: 709: Cb51_odPumpOff = 0;
  9083                           
  9084                           ;BVH2_Appl_Layer.c: 708: Cb51_oTempAlarm = 0;
  9085                           
  9086                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempRedAlarm = 0;
  9087                           
  9088                           ;BVH2_Appl_Layer.c: 706: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  9089                           
  9090                           
  9091                           ;BVH2_Appl_Layer.c: 712: else {;BVH2_Appl_Layer.c: 713: Cb51_Counter = Cb51_Counter + 1 
      +                          ;
  9092  01A0  0844               	movf	BVH2_Appl_Layer@Cb51_Counter^(0+128),w
  9093  01A1  3E01               	addlw	1
  9094  01A2  0020               	movlb	0	; select bank0
  9095  01A3  00B7               	movwf	??_BVH2_Appl_Layer
  9096  01A4  0837               	movf	??_BVH2_Appl_Layer,w
  9097  01A5  0021               	movlb	1	; select bank1
  9098  01A6  00C4               	movwf	BVH2_Appl_Layer@Cb51_Counter^(0+128)
  9099                           
  9100                           ;BVH2_Appl_Layer.c: 714: };BVH2_Appl_Layer.c: 717: }
  9101  01A7  2A63               	goto	l9431
  9102  01A8                     l1415:	
  9103                           
  9104                           ;BVH2_Appl_Layer.c: 718: else {;BVH2_Appl_Layer.c: 720: if (SIBFS_Temperature_Alarm_b.Cb
      +                          53_reset) {
  9105  01A8  1D40               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9106  01A9  29AD               	goto	l1419
  9107                           
  9108                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
  9109  01AA  1140               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9110                           
  9111                           ;BVH2_Appl_Layer.c: 726: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
  9112  01AB  14C0               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9113                           
  9114                           ;BVH2_Appl_Layer.c: 729: }
  9115  01AC  2A63               	goto	l9431
  9116  01AD                     l1419:	
  9117                           
  9118                           ;BVH2_Appl_Layer.c: 730: else {;BVH2_Appl_Layer.c: 732: if (SIBFS_Temperature_Alarm_b.Cb
      +                          54_greenTemp) {
  9119  01AD  1DC0               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9120  01AE  29C1               	goto	l1421
  9121                           
  9122                           ;BVH2_Appl_Layer.c: 736: if (ui16_mat_inpTemp < 72) {
  9123  01AF  3000               	movlw	0
  9124  01B0  0023               	movlb	3	; select bank3
  9125  01B1  0235               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  9126  01B2  3048               	movlw	72
  9127  01B3  1903               	skipnz
  9128  01B4  0234               	subwf	_ui16_mat_inpTemp^(0+384),w
  9129  01B5  1803               	skipnc
  9130  01B6  2A63               	goto	l9431
  9131                           
  9132                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
  9133  01B7  0021               	movlb	1	; select bank1
  9134  01B8  11C0               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9135                           
  9136                           ;BVH2_Appl_Layer.c: 740: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
  9137  01B9  1640               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9138                           
  9139                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempRedAlarm = 1;
  9140  01BA  0022               	movlb	2	; select bank2
  9141  01BB  01B1               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  9142  01BC  0AB1               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
  9143                           
  9144                           ;BVH2_Appl_Layer.c: 742: Cb51_oTempAlarm = 1;
  9145  01BD  01B2               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  9146  01BE  0AB2               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
  9147                           
  9148                           ;BVH2_Appl_Layer.c: 745: Cb51_odPumpOff = 0;
  9149  01BF  01B0               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  9150                           
  9151                           ;BVH2_Appl_Layer.c: 746: };BVH2_Appl_Layer.c: 749: }
  9152  01C0  2A63               	goto	l9431
  9153  01C1                     l1421:	
  9154                           
  9155                           ;BVH2_Appl_Layer.c: 750: else {;BVH2_Appl_Layer.c: 752: if (SIBFS_Temperature_Alarm_b.Cb
      +                          55_redTemp) {
  9156  01C1  1E40               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9157  01C2  29D4               	goto	l1424
  9158                           
  9159                           ;BVH2_Appl_Layer.c: 756: if (ui16_mat_inpTemp > 185) {
  9160  01C3  3000               	movlw	0
  9161  01C4  0023               	movlb	3	; select bank3
  9162  01C5  0235               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  9163  01C6  30BA               	movlw	186
  9164  01C7  1903               	skipnz
  9165  01C8  0234               	subwf	_ui16_mat_inpTemp^(0+384),w
  9166  01C9  1C03               	skipc
  9167  01CA  2A63               	goto	l9431
  9168                           
  9169                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
  9170  01CB  0021               	movlb	1	; select bank1
  9171  01CC  1240               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9172  01CD                     L41:	
  9173                           
  9174                           ;BVH2_Appl_Layer.c: 760: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  9175  01CD  15C0               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9176                           
  9177                           ;BVH2_Appl_Layer.c: 761: Cb51_oTempRedAlarm = 0;
  9178  01CE  0022               	movlb	2	; select bank2
  9179  01CF  01B1               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  9180                           
  9181                           ;BVH2_Appl_Layer.c: 762: Cb51_oTempAlarm = 0;
  9182  01D0  01B2               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  9183                           
  9184                           ;BVH2_Appl_Layer.c: 763: Cb51_odPumpOff = 0;
  9185  01D1  01B0               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  9186                           
  9187                           ;BVH2_Appl_Layer.c: 764: Cb51_Counter = 0 ;
  9188  01D2  0021               	movlb	1	; select bank1
  9189  01D3  29DB               	goto	l9343
  9190  01D4                     l1424:	
  9191                           ;BVH2_Appl_Layer.c: 765: };BVH2_Appl_Layer.c: 768: }
  9192                           
  9193                           
  9194                           ;BVH2_Appl_Layer.c: 769: else {;BVH2_Appl_Layer.c: 771: if (!(SIBFS_Temperature_Alarm_b.
      +                          Cb51_Temperature_Alarm)) {
  9195  01D4  1840               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  9196  01D5  2A63               	goto	l9431
  9197                           
  9198                           ;BVH2_Appl_Layer.c: 772: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
  9199  01D6  1440               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  9200                           
  9201                           ;BVH2_Appl_Layer.c: 776: if (ui8_ResetMatlab != 0) {
  9202  01D7  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9203  01D8  1903               	btfsc	3,2
  9204  01D9  2A63               	goto	l9431
  9205                           
  9206                           ;BVH2_Appl_Layer.c: 778: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
  9207  01DA  1540               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9208  01DB                     l9343:	
  9209                           
  9210                           ;BVH2_Appl_Layer.c: 779: Cb51_Counter = 0 ;
  9211  01DB  01C4               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+128)
  9212                           
  9213                           ;BVH2_Appl_Layer.c: 780: };BVH2_Appl_Layer.c: 781: };BVH2_Appl_Layer.c: 782: };BVH2_Appl
      +                          _Layer.c: 783: };BVH2_Appl_Layer.c: 784: };BVH2_Appl_Layer.c: 785: };BVH2_Appl_Layer.c: 
      +                          790: switch (SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns) {
  9214  01DC  2A63               	goto	l9431
  9215  01DD                     l9345:	
  9216                           ;BVH2_Appl_Layer.c: 791: case (UInt8)6: {
  9217                           
  9218                           
  9219                           ;BVH2_Appl_Layer.c: 793: if (Cb1_StateCnt > 50) {
  9220  01DD  3000               	movlw	0
  9221  01DE  0020               	movlb	0	; select bank0
  9222  01DF  024E               	subwf	_Cb1_StateCnt+1,w
  9223  01E0  3033               	movlw	51
  9224  01E1  1903               	skipnz
  9225  01E2  024D               	subwf	_Cb1_StateCnt,w
  9226  01E3  1C03               	skipc
  9227  01E4  2A4B               	goto	l9419
  9228                           
  9229                           ;BVH2_Appl_Layer.c: 796: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 797: (UInt8)5;
  9230  01E5  0021               	movlb	1	; select bank1
  9231  01E6  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9232  01E7  39F0               	andlw	-16
  9233  01E8  3805               	iorlw	5
  9234  01E9  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9235                           
  9236                           ;BVH2_Appl_Layer.c: 798: Cb1_oShutoff = 0;
  9237  01EA  0022               	movlb	2	; select bank2
  9238  01EB  01BF               	clrf	_Cb1_oShutoff^(0+256)
  9239                           
  9240                           ;BVH2_Appl_Layer.c: 799: Cb1_oCurrentAlarm = 0;
  9241  01EC  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9242  01ED  2A60               	goto	l9429
  9243  01EE                     l9357:	
  9244                           ;BVH2_Appl_Layer.c: 808: };BVH2_Appl_Layer.c: 809: case (UInt8)3: {
  9245                           
  9246                           ;BVH2_Appl_Layer.c: 804: };BVH2_Appl_Layer.c: 807: break;
  9247                           
  9248                           ;BVH2_Appl_Layer.c: 802: else {;BVH2_Appl_Layer.c: 803: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9249                           
  9250                           ;BVH2_Appl_Layer.c: 801: }
  9251                           
  9252                           ;BVH2_Appl_Layer.c: 800: Cb1_RestartCounter = 0 ;
  9253                           
  9254                           
  9255                           ;BVH2_Appl_Layer.c: 811: Cb1_Current_An___High_node_fcn1();
  9256  01EE  319F  2771  3180   	fcall	_Cb1_Current_An___High_node_fcn1
  9257                           
  9258                           ;BVH2_Appl_Layer.c: 812: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
  9259  01F1  0021               	movlb	1	; select bank1
  9260  01F2  0E49               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9261  01F3  3903               	andlw	3
  9262  01F4  3A03               	xorlw	3
  9263  01F5  1903               	skipnz
  9264  01F6  2A7C               	goto	l1433
  9265  01F7  2A4B               	goto	l9419
  9266  01F8                     l9363:	
  9267                           ;BVH2_Appl_Layer.c: 818: };BVH2_Appl_Layer.c: 819: case (UInt8)7: {
  9268                           
  9269                           ;BVH2_Appl_Layer.c: 814: };BVH2_Appl_Layer.c: 817: break;
  9270                           
  9271                           ;BVH2_Appl_Layer.c: 813: Cb1_StateCnt = Cb1_StateCnt + 1 ;
  9272                           
  9273                           
  9274                           ;BVH2_Appl_Layer.c: 821: if (Cb1_RestartCounter < 10) {
  9275  01F8  300A               	movlw	10
  9276  01F9  0021               	movlb	1	; select bank1
  9277  01FA  024A               	subwf	_Cb1_RestartCounter^(0+128),w
  9278  01FB  1803               	skipnc
  9279  01FC  2A7C               	goto	l1433
  9280  01FD  2A20               	goto	L48
  9281  01FE                     l9373:	
  9282                           ;BVH2_Appl_Layer.c: 833: };BVH2_Appl_Layer.c: 834: case (UInt8)5: {
  9283                           
  9284                           ;BVH2_Appl_Layer.c: 829: };BVH2_Appl_Layer.c: 832: break;
  9285                           
  9286                           ;BVH2_Appl_Layer.c: 828: Cb1_StateCnt = 0 ;
  9287                           
  9288                           ;BVH2_Appl_Layer.c: 827: Cb1_oCurrentAlarm = 1;
  9289                           
  9290                           ;BVH2_Appl_Layer.c: 826: Cb1_oShutoff = 0;
  9291                           
  9292                           ;BVH2_Appl_Layer.c: 824: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 825: (UInt8)3;
  9293                           
  9294                           
  9295                           ;BVH2_Appl_Layer.c: 836: Cb1_Current_An___High_node_fcn1();
  9296  01FE  319F  2771  3180   	fcall	_Cb1_Current_An___High_node_fcn1
  9297                           
  9298                           ;BVH2_Appl_Layer.c: 839: break;
  9299  0201  2A7C               	goto	l1433
  9300  0202                     l9375:	
  9301                           ;BVH2_Appl_Layer.c: 840: };BVH2_Appl_Layer.c: 841: case (UInt8)4: {
  9302                           
  9303                           
  9304                           ;BVH2_Appl_Layer.c: 843: if (Cb1_StateCnt > 200) {
  9305  0202  3000               	movlw	0
  9306  0203  0020               	movlb	0	; select bank0
  9307  0204  024E               	subwf	_Cb1_StateCnt+1,w
  9308  0205  30C9               	movlw	201
  9309  0206  1903               	skipnz
  9310  0207  024D               	subwf	_Cb1_StateCnt,w
  9311  0208  1C03               	skipc
  9312  0209  2A17               	goto	l9379
  9313                           
  9314                           ;BVH2_Appl_Layer.c: 845: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 846: (UInt8)7;
  9315  020A  0021               	movlb	1	; select bank1
  9316  020B  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9317  020C  39F0               	andlw	-16
  9318  020D  3807               	iorlw	7
  9319  020E  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9320                           
  9321                           ;BVH2_Appl_Layer.c: 847: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
  9322  020F  084A               	movf	_Cb1_RestartCounter^(0+128),w
  9323  0210  3E01               	addlw	1
  9324  0211  0020               	movlb	0	; select bank0
  9325  0212  00B7               	movwf	??_BVH2_Appl_Layer
  9326  0213  0837               	movf	??_BVH2_Appl_Layer,w
  9327  0214  0021               	movlb	1	; select bank1
  9328  0215  00CA               	movwf	_Cb1_RestartCounter^(0+128)
  9329                           
  9330                           ;BVH2_Appl_Layer.c: 848: }
  9331  0216  2A7C               	goto	l1433
  9332  0217                     l9379:	
  9333                           
  9334                           ;BVH2_Appl_Layer.c: 849: else {;BVH2_Appl_Layer.c: 852: if (bool_mat_currAlarm_bldc) {
  9335  0217  0021               	movlb	1	; select bank1
  9336  0218  0850               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9337  0219  1903               	btfsc	3,2
  9338  021A  2A4B               	goto	l9419
  9339  021B  2A32               	goto	L42
  9340  021C                     l9391:	
  9341                           ;BVH2_Appl_Layer.c: 867: };BVH2_Appl_Layer.c: 868: case (UInt8)2: {
  9342                           
  9343                           ;BVH2_Appl_Layer.c: 862: };BVH2_Appl_Layer.c: 863: };BVH2_Appl_Layer.c: 866: break;
  9344                           
  9345                           ;BVH2_Appl_Layer.c: 860: else {;BVH2_Appl_Layer.c: 861: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9346                           
  9347                           ;BVH2_Appl_Layer.c: 859: }
  9348                           
  9349                           ;BVH2_Appl_Layer.c: 858: Cb1_oCurrentAlarm = 1;
  9350                           
  9351                           ;BVH2_Appl_Layer.c: 857: Cb1_oShutoff = 1;
  9352                           
  9353                           ;BVH2_Appl_Layer.c: 856: Cb1_StateCnt = 0 ;
  9354                           
  9355                           ;BVH2_Appl_Layer.c: 854: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 855: (UInt8)1;
  9356                           
  9357                           
  9358                           ;BVH2_Appl_Layer.c: 873: if (!(bool_mat_currAlarm_bldc)) {
  9359  021C  0021               	movlb	1	; select bank1
  9360  021D  0850               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9361  021E  1D03               	btfss	3,2
  9362  021F  2A29               	goto	l9401
  9363  0220                     L48:	
  9364                           
  9365                           ;BVH2_Appl_Layer.c: 875: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 876: (UInt8)3;
  9366  0220  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9367  0221  39F0               	andlw	-16
  9368  0222  3803               	iorlw	3
  9369  0223  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9370                           
  9371                           ;BVH2_Appl_Layer.c: 877: Cb1_oShutoff = 0;
  9372  0224  0022               	movlb	2	; select bank2
  9373  0225  01BF               	clrf	_Cb1_oShutoff^(0+256)
  9374                           
  9375                           ;BVH2_Appl_Layer.c: 878: Cb1_oCurrentAlarm = 1;
  9376  0226  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9377  0227  0AC0               	incf	_Cb1_oCurrentAlarm^(0+256),f
  9378  0228  2A47               	goto	l9417
  9379  0229                     l9401:	
  9380                           ;BVH2_Appl_Layer.c: 880: }
  9381                           
  9382                           ;BVH2_Appl_Layer.c: 879: Cb1_StateCnt = 0 ;
  9383                           
  9384                           
  9385                           ;BVH2_Appl_Layer.c: 881: else {;BVH2_Appl_Layer.c: 882: if (Cb1_StateCnt > 1) {
  9386  0229  3000               	movlw	0
  9387  022A  0020               	movlb	0	; select bank0
  9388  022B  024E               	subwf	_Cb1_StateCnt+1,w
  9389  022C  3002               	movlw	2
  9390  022D  1903               	skipnz
  9391  022E  024D               	subwf	_Cb1_StateCnt,w
  9392  022F  1C03               	skipc
  9393  0230  2A4B               	goto	l9419
  9394                           
  9395                           ;BVH2_Appl_Layer.c: 884: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 885: (UInt8)1;
  9396  0231  0021               	movlb	1	; select bank1
  9397  0232                     L42:	
  9398  0232  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9399  0233  39F0               	andlw	-16
  9400  0234  3801               	iorlw	1
  9401  0235  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9402                           
  9403                           ;BVH2_Appl_Layer.c: 886: Cb1_StateCnt = 0 ;
  9404  0236  0020               	movlb	0	; select bank0
  9405  0237  01CD               	clrf	_Cb1_StateCnt
  9406  0238  01CE               	clrf	_Cb1_StateCnt+1
  9407                           
  9408                           ;BVH2_Appl_Layer.c: 887: Cb1_oShutoff = 1;
  9409  0239  0022               	movlb	2	; select bank2
  9410  023A  01BF               	clrf	_Cb1_oShutoff^(0+256)
  9411  023B  0ABF               	incf	_Cb1_oShutoff^(0+256),f
  9412                           
  9413                           ;BVH2_Appl_Layer.c: 888: Cb1_oCurrentAlarm = 1;
  9414  023C  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9415  023D  0AC0               	incf	_Cb1_oCurrentAlarm^(0+256),f
  9416  023E  2A7C               	goto	l1433
  9417  023F                     l9413:	
  9418                           ;BVH2_Appl_Layer.c: 897: };BVH2_Appl_Layer.c: 898: case (UInt8)1: {
  9419                           
  9420                           ;BVH2_Appl_Layer.c: 892: };BVH2_Appl_Layer.c: 893: };BVH2_Appl_Layer.c: 896: break;
  9421                           
  9422                           ;BVH2_Appl_Layer.c: 890: else {;BVH2_Appl_Layer.c: 891: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9423                           
  9424                           ;BVH2_Appl_Layer.c: 889: }
  9425                           
  9426                           
  9427                           ;BVH2_Appl_Layer.c: 903: if (!(bool_mat_currAlarm_bldc)) {
  9428  023F  0021               	movlb	1	; select bank1
  9429  0240  0850               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9430  0241  1D03               	btfss	3,2
  9431  0242  2A4B               	goto	l9419
  9432                           
  9433                           ;BVH2_Appl_Layer.c: 906: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
  9434  0243  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9435  0244  39F0               	andlw	-16
  9436  0245  3804               	iorlw	4
  9437  0246  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9438  0247                     l9417:	
  9439                           
  9440                           ;BVH2_Appl_Layer.c: 907: Cb1_StateCnt = 0 ;
  9441  0247  0020               	movlb	0	; select bank0
  9442  0248  01CD               	clrf	_Cb1_StateCnt
  9443  0249  01CE               	clrf	_Cb1_StateCnt+1
  9444                           
  9445                           ;BVH2_Appl_Layer.c: 908: }
  9446  024A  2A7C               	goto	l1433
  9447  024B                     l9419:	
  9448                           
  9449                           ;BVH2_Appl_Layer.c: 909: else {;BVH2_Appl_Layer.c: 910: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9450  024B  0020               	movlb	0	; select bank0
  9451  024C  084D               	movf	_Cb1_StateCnt,w
  9452  024D  3E01               	addlw	1
  9453  024E  00CD               	movwf	_Cb1_StateCnt
  9454  024F  3000               	movlw	0
  9455  0250  3D4E               	addwfc	_Cb1_StateCnt+1,w
  9456  0251  00CE               	movwf	_Cb1_StateCnt+1
  9457                           
  9458                           ;BVH2_Appl_Layer.c: 911: };BVH2_Appl_Layer.c: 914: break;
  9459  0252  2A7C               	goto	l1433
  9460  0253                     l1452:	
  9461                           ;BVH2_Appl_Layer.c: 915: };BVH2_Appl_Layer.c: 916: default: {
  9462                           
  9463                           
  9464                           ;BVH2_Appl_Layer.c: 918: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
  9465  0253  1B49               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
  9466  0254  2A7C               	goto	l1433
  9467                           
  9468                           ;BVH2_Appl_Layer.c: 919: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
  9469  0255  1749               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
  9470                           
  9471                           ;BVH2_Appl_Layer.c: 923: if (ui8_ResetMatlab != 0) {
  9472  0256  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9473  0257  1903               	btfsc	3,2
  9474  0258  2A7C               	goto	l1433
  9475                           
  9476                           ;BVH2_Appl_Layer.c: 925: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 926: (UInt8)6;
  9477  0259  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9478  025A  39F0               	andlw	-16
  9479  025B  3806               	iorlw	6
  9480  025C  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9481                           
  9482                           ;BVH2_Appl_Layer.c: 927: Cb1_StateCnt = 0 ;
  9483  025D  0020               	movlb	0	; select bank0
  9484  025E  01CD               	clrf	_Cb1_StateCnt
  9485  025F  01CE               	clrf	_Cb1_StateCnt+1
  9486  0260                     l9429:	
  9487                           
  9488                           ;BVH2_Appl_Layer.c: 928: Cb1_RestartCounter = 0 ;
  9489  0260  0021               	movlb	1	; select bank1
  9490  0261  01CA               	clrf	_Cb1_RestartCounter^(0+128)
  9491                           
  9492                           ;BVH2_Appl_Layer.c: 929: };BVH2_Appl_Layer.c: 930: };BVH2_Appl_Layer.c: 931: };BVH2_Appl
      +                          _Layer.c: 932: }
  9493  0262  2A7C               	goto	l1433
  9494  0263                     l9431:	
  9495  0263  0021               	movlb	1	; select bank1
  9496  0264  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9497  0265  390F               	andlw	15
  9498                           
  9499                           ; Switch size 1, requested type "space"
  9500                           ; Number of cases is 7, Range of values is 1 to 7
  9501                           ; switch strategies available:
  9502                           ; Name         Instructions Cycles
  9503                           ; simple_byte           22    12 (average)
  9504                           ; direct_byte           23     9 (fixed)
  9505                           ; jumptable            263     9 (fixed)
  9506                           ;	Chosen strategy is simple_byte
  9507  0266  3A01               	xorlw	1	; case 1
  9508  0267  1903               	skipnz
  9509  0268  2A3F               	goto	l9413
  9510  0269  3A03               	xorlw	3	; case 2
  9511  026A  1903               	skipnz
  9512  026B  2A1C               	goto	l9391
  9513  026C  3A01               	xorlw	1	; case 3
  9514  026D  1903               	skipnz
  9515  026E  29EE               	goto	l9357
  9516  026F  3A07               	xorlw	7	; case 4
  9517  0270  1903               	skipnz
  9518  0271  2A02               	goto	l9375
  9519  0272  3A01               	xorlw	1	; case 5
  9520  0273  1903               	skipnz
  9521  0274  29FE               	goto	l9373
  9522  0275  3A03               	xorlw	3	; case 6
  9523  0276  1903               	skipnz
  9524  0277  29DD               	goto	l9345
  9525  0278  3A01               	xorlw	1	; case 7
  9526  0279  1903               	skipnz
  9527  027A  29F8               	goto	l9363
  9528  027B  2A53               	goto	l1452
  9529  027C                     l1433:	
  9530                           
  9531                           ;BVH2_Appl_Layer.c: 935: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||;BVH2_Appl_Layer.c: 936: Cb1_oShutoff || Cb44_oShutoff;
  9532  027C  0025               	movlb	5	; select bank5
  9533  027D  01AB               	clrf	_BVH2_Appl_Layer$1057^(0+640)
  9534  027E  0AAB               	incf	_BVH2_Appl_Layer$1057^(0+640),f
  9535  027F  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640),w
  9536  0280  1D03               	btfss	3,2
  9537  0281  2A91               	goto	l9445
  9538  0282  0022               	movlb	2	; select bank2
  9539  0283  0836               	movf	_Cb56_odPumpOff^(0+256),w
  9540  0284  1D03               	btfss	3,2
  9541  0285  2A91               	goto	l9445
  9542  0286  0830               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
  9543  0287  1D03               	btfss	3,2
  9544  0288  2A91               	goto	l9445
  9545  0289  083F               	movf	_Cb1_oShutoff^(0+256),w
  9546  028A  1D03               	btfss	3,2
  9547  028B  2A91               	goto	l9445
  9548  028C  0838               	movf	_Cb44_oShutoff^(0+256),w
  9549  028D  1D03               	btfss	3,2
  9550  028E  2A91               	goto	l9445
  9551  028F  0025               	movlb	5	; select bank5
  9552  0290  01AB               	clrf	_BVH2_Appl_Layer$1057^(0+640)
  9553  0291                     l9445:	
  9554  0291  0025               	movlb	5	; select bank5
  9555  0292  082B               	movf	_BVH2_Appl_Layer$1057^(0+640),w
  9556  0293  0020               	movlb	0	; select bank0
  9557  0294  00B7               	movwf	??_BVH2_Appl_Layer
  9558  0295  0837               	movf	??_BVH2_Appl_Layer,w
  9559  0296  0025               	movlb	5	; select bank5
  9560  0297  00BC               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640)
  9561                           
  9562                           ;BVH2_Appl_Layer.c: 939: Cb24_Reset = ui8_ResetMatlab != 0 ;
  9563  0298  0021               	movlb	1	; select bank1
  9564  0299  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9565  029A  1903               	btfsc	3,2
  9566  029B  2A9E               	goto	u7660
  9567  029C  3001               	movlw	1
  9568  029D  2A9F               	goto	u7670
  9569  029E                     u7660:	
  9570  029E  3000               	movlw	0
  9571  029F                     u7670:	
  9572  029F  0020               	movlb	0	; select bank0
  9573  02A0  00B7               	movwf	??_BVH2_Appl_Layer
  9574  02A1  0837               	movf	??_BVH2_Appl_Layer,w
  9575  02A2  0025               	movlb	5	; select bank5
  9576  02A3  00B4               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+640)
  9577                           
  9578                           ;BVH2_Appl_Layer.c: 944: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
  9579  02A4  0021               	movlb	1	; select bank1
  9580  02A5  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9581  02A6  2BE0               	goto	l1457
  9582                           
  9583                           ;BVH2_Appl_Layer.c: 950: if (Sb1_Logical_Operator1 || Cb24_Reset) {
  9584  02A7  0025               	movlb	5	; select bank5
  9585  02A8  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
  9586  02A9  1D03               	btfss	3,2
  9587  02AA  2AB8               	goto	l9471
  9588  02AB  0834               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+640),w
  9589  02AC  1D03               	btfss	3,2
  9590  02AD  2AB8               	goto	l9471
  9591  02AE  2BC9               	goto	l9587
  9592  02AF                     l9455:	
  9593                           ;BVH2_Appl_Layer.c: 954: case (UInt8)3: {
  9594                           
  9595                           ;BVH2_Appl_Layer.c: 953: switch (SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns) 
      +                          {
  9596                           
  9597                           
  9598                           ;BVH2_Appl_Layer.c: 955: Cb24_StateCnt = 0 ;
  9599  02AF  0020               	movlb	0	; select bank0
  9600  02B0  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9601  02B1  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9602                           
  9603                           ;BVH2_Appl_Layer.c: 956: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9604  02B2  30F8               	movlw	-8
  9605  02B3  0021               	movlb	1	; select bank1
  9606  02B4  2AB6               	goto	L27
  9607  02B5                     l9459:	
  9608                           ;BVH2_Appl_Layer.c: 958: };BVH2_Appl_Layer.c: 959: case (UInt8)2: {
  9609                           
  9610                           ;BVH2_Appl_Layer.c: 957: break;
  9611                           
  9612  02B5                     l9461:	
  9613                           ;BVH2_Appl_Layer.c: 962: };BVH2_Appl_Layer.c: 963: case (UInt8)1: {
  9614                           
  9615                           ;BVH2_Appl_Layer.c: 961: break;
  9616                           
  9617                           ;BVH2_Appl_Layer.c: 960: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9618                           
  9619  02B5                     l9463:	
  9620                           ;BVH2_Appl_Layer.c: 966: };BVH2_Appl_Layer.c: 967: case (UInt8)5: {
  9621                           
  9622                           ;BVH2_Appl_Layer.c: 965: break;
  9623                           
  9624                           ;BVH2_Appl_Layer.c: 964: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9625                           
  9626  02B5                     l9465:	
  9627                           ;BVH2_Appl_Layer.c: 970: };BVH2_Appl_Layer.c: 971: case (UInt8)6: {
  9628                           
  9629                           ;BVH2_Appl_Layer.c: 969: break;
  9630                           
  9631                           ;BVH2_Appl_Layer.c: 968: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9632                           
  9633  02B5                     l9467:	
  9634                           ;BVH2_Appl_Layer.c: 974: };BVH2_Appl_Layer.c: 975: case (UInt8)4: {
  9635                           
  9636                           ;BVH2_Appl_Layer.c: 973: break;
  9637                           
  9638                           ;BVH2_Appl_Layer.c: 972: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9639                           
  9640                           
  9641                           ;BVH2_Appl_Layer.c: 976: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9642  02B5  30F8               	movlw	-8
  9643  02B6                     L27:	
  9644  02B6  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9645                           
  9646                           ;BVH2_Appl_Layer.c: 978: };BVH2_Appl_Layer.c: 979: }
  9647                           
  9648                           ;BVH2_Appl_Layer.c: 977: break;
  9649  02B7  2ACE               	goto	l1463
  9650  02B8                     l9471:	
  9651  02B8  0021               	movlb	1	; select bank1
  9652  02B9  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9653  02BA  3907               	andlw	7
  9654                           
  9655                           ; Switch size 1, requested type "space"
  9656                           ; Number of cases is 6, Range of values is 1 to 6
  9657                           ; switch strategies available:
  9658                           ; Name         Instructions Cycles
  9659                           ; simple_byte           19    10 (average)
  9660                           ; direct_byte           21     9 (fixed)
  9661                           ; jumptable            263     9 (fixed)
  9662                           ;	Chosen strategy is simple_byte
  9663  02BB  3A01               	xorlw	1	; case 1
  9664  02BC  1903               	skipnz
  9665  02BD  2AB5               	goto	l9461
  9666  02BE  3A03               	xorlw	3	; case 2
  9667  02BF  1903               	skipnz
  9668  02C0  2AB5               	goto	l9459
  9669  02C1  3A01               	xorlw	1	; case 3
  9670  02C2  1903               	skipnz
  9671  02C3  2AAF               	goto	l9455
  9672  02C4  3A07               	xorlw	7	; case 4
  9673  02C5  1903               	skipnz
  9674  02C6  2AB5               	goto	l9467
  9675  02C7  3A01               	xorlw	1	; case 5
  9676  02C8  1903               	skipnz
  9677  02C9  2AB5               	goto	l9463
  9678  02CA  3A03               	xorlw	3	; case 6
  9679  02CB  1903               	skipnz
  9680  02CC  2AB5               	goto	l9465
  9681  02CD  2ACE               	goto	l1463
  9682  02CE                     l1463:	
  9683                           
  9684                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  9685  02CE  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9686  02CF  2BFD               	goto	L43
  9687  02D0                     l9475:	
  9688                           ;BVH2_Appl_Layer.c: 988: case (UInt8)3: {
  9689                           
  9690                           ;BVH2_Appl_Layer.c: 986: else {;BVH2_Appl_Layer.c: 987: switch (SIBFS_Motor_Stalled_b.Cb
      +                          25_Motor_sta__Statemachine_ns) {
  9691                           
  9692                           ;BVH2_Appl_Layer.c: 985: }
  9693                           
  9694                           ;BVH2_Appl_Layer.c: 984: Cb24_RestartCounter = 0 ;
  9695                           
  9696                           ;BVH2_Appl_Layer.c: 983: Cb24_oStalledAlarm = 0;
  9697                           
  9698                           ;BVH2_Appl_Layer.c: 982: Cb24_oMotorStalled = 0;
  9699                           
  9700                           ;BVH2_Appl_Layer.c: 981: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  9701                           
  9702                           
  9703                           ;BVH2_Appl_Layer.c: 991: if (Cb24_StateCnt) {
  9704  02D0  0020               	movlb	0	; select bank0
  9705  02D1  084B               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9706  02D2  044C               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9707  02D3  1903               	btfsc	3,2
  9708  02D4  2BC1               	goto	l9583
  9709                           
  9710                           ;BVH2_Appl_Layer.c: 995: Cb24_StateCnt = 0 ;
  9711  02D5  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9712  02D6  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9713  02D7  2B38               	goto	l9525
  9714  02D8                     l9483:	
  9715                           ;BVH2_Appl_Layer.c: 1006: };BVH2_Appl_Layer.c: 1007: case (UInt8)2: {
  9716                           
  9717                           ;BVH2_Appl_Layer.c: 1001: };BVH2_Appl_Layer.c: 1005: break;
  9718                           
  9719                           ;BVH2_Appl_Layer.c: 999: else {;BVH2_Appl_Layer.c: 1000: Cb24_StateCnt = Cb24_StateCnt +
      +                           1 ;
  9720                           
  9721                           ;BVH2_Appl_Layer.c: 998: }
  9722                           
  9723                           ;BVH2_Appl_Layer.c: 996: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int);BVH2_Appl_Layer.c: 997: (UInt8)2;
  9724                           
  9725                           
  9726                           ;BVH2_Appl_Layer.c: 1010: if (Cb24_StateCnt > 1000) {
  9727  02D8  3003               	movlw	3
  9728  02D9  0020               	movlb	0	; select bank0
  9729  02DA  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9730  02DB  30E9               	movlw	233
  9731  02DC  1903               	skipnz
  9732  02DD  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9733  02DE  1C03               	skipc
  9734  02DF  2AF0               	goto	l9495
  9735                           
  9736                           ;BVH2_Appl_Layer.c: 1013: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1014: (UInt8)5;
  9737  02E0  0021               	movlb	1	; select bank1
  9738  02E1  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9739  02E2  39F8               	andlw	-8
  9740  02E3  3805               	iorlw	5
  9741  02E4  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9742                           
  9743                           ;BVH2_Appl_Layer.c: 1015: Cb24_StateCnt = 0 ;
  9744  02E5  0020               	movlb	0	; select bank0
  9745  02E6  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9746  02E7  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9747                           
  9748                           ;BVH2_Appl_Layer.c: 1016: Cb24_BadCnt = 0 ;
  9749  02E8  0023               	movlb	3	; select bank3
  9750  02E9  01A0               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9751  02EA  01A1               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9752                           
  9753                           ;BVH2_Appl_Layer.c: 1017: Cb24_oMotorStalled = 0;
  9754  02EB  0021               	movlb	1	; select bank1
  9755  02EC  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9756                           
  9757                           ;BVH2_Appl_Layer.c: 1020: Cb24_oStalledAlarm = 0;
  9758  02ED  0022               	movlb	2	; select bank2
  9759  02EE  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9760                           
  9761                           ;BVH2_Appl_Layer.c: 1021: }
  9762  02EF  2C03               	goto	l9609
  9763  02F0                     l9495:	
  9764                           
  9765                           ;BVH2_Appl_Layer.c: 1022: else {;BVH2_Appl_Layer.c: 1025: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  9766  02F0  3000               	movlw	0
  9767  02F1  0020               	movlb	0	; select bank0
  9768  02F2  0250               	subwf	_ui16_Speed_mat+1,w
  9769  02F3  3005               	movlw	5
  9770  02F4  1903               	skipnz
  9771  02F5  024F               	subwf	_ui16_Speed_mat,w
  9772  02F6  1C03               	skipc
  9773  02F7  2AFF               	goto	l9499
  9774  02F8  3001               	movlw	1
  9775  02F9  0250               	subwf	_ui16_Speed_mat+1,w
  9776  02FA  302D               	movlw	45
  9777  02FB  1903               	skipnz
  9778  02FC  024F               	subwf	_ui16_Speed_mat,w
  9779  02FD  1C03               	skipc
  9780  02FE  2BC2               	goto	L31
  9781  02FF                     l9499:	
  9782                           
  9783                           ;BVH2_Appl_Layer.c: 1028: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1029: (UInt8)1;
  9784  02FF  0021               	movlb	1	; select bank1
  9785  0300  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9786  0301  39F8               	andlw	-8
  9787  0302  3801               	iorlw	1
  9788  0303  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9789                           
  9790                           ;BVH2_Appl_Layer.c: 1030: Cb24_oStalledAlarm = 0;
  9791  0304  0022               	movlb	2	; select bank2
  9792  0305  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9793                           
  9794                           ;BVH2_Appl_Layer.c: 1031: Cb24_StateCnt = 0 ;
  9795  0306  0020               	movlb	0	; select bank0
  9796  0307  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9797  0308  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9798                           
  9799                           ;BVH2_Appl_Layer.c: 1032: }
  9800  0309  2C03               	goto	l9609
  9801  030A                     l9507:	
  9802                           ;BVH2_Appl_Layer.c: 1041: };BVH2_Appl_Layer.c: 1042: case (UInt8)1: {
  9803                           
  9804                           ;BVH2_Appl_Layer.c: 1035: };BVH2_Appl_Layer.c: 1036: };BVH2_Appl_Layer.c: 1040: break;
  9805                           
  9806                           ;BVH2_Appl_Layer.c: 1033: else {;BVH2_Appl_Layer.c: 1034: Cb24_StateCnt = Cb24_StateCnt 
      +                          + 1 ;
  9807                           
  9808                           
  9809                           ;BVH2_Appl_Layer.c: 1045: if (Cb24_BadCnt > 100) {
  9810  030A  3000               	movlw	0
  9811  030B  0023               	movlb	3	; select bank3
  9812  030C  0221               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
  9813  030D  3065               	movlw	101
  9814  030E  1903               	skipnz
  9815  030F  0220               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
  9816  0310  1C03               	skipc
  9817  0311  2B21               	goto	l9517
  9818                           
  9819                           ;BVH2_Appl_Layer.c: 1048: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1049: (UInt8)4;
  9820  0312  0021               	movlb	1	; select bank1
  9821  0313  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9822  0314  39F8               	andlw	-8
  9823  0315  3804               	iorlw	4
  9824  0316  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9825                           
  9826                           ;BVH2_Appl_Layer.c: 1050: Cb24_StateCnt = 0 ;
  9827  0317  0020               	movlb	0	; select bank0
  9828  0318  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9829  0319  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9830                           
  9831                           ;BVH2_Appl_Layer.c: 1051: Cb24_oMotorStalled = 1;
  9832  031A  0021               	movlb	1	; select bank1
  9833  031B  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9834  031C  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9835                           
  9836                           ;BVH2_Appl_Layer.c: 1052: Cb24_oStalledAlarm = 1;
  9837  031D  0022               	movlb	2	; select bank2
  9838  031E  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9839  031F  0AB3               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9840                           
  9841                           ;BVH2_Appl_Layer.c: 1053: }
  9842  0320  2C03               	goto	l9609
  9843  0321                     l9517:	
  9844                           
  9845                           ;BVH2_Appl_Layer.c: 1054: else {;BVH2_Appl_Layer.c: 1057: if ((ui16_Speed_mat >= 5) && (
      +                          ui16_Speed_mat <= 300)) {
  9846  0321  3000               	movlw	0
  9847  0322  0020               	movlb	0	; select bank0
  9848  0323  0250               	subwf	_ui16_Speed_mat+1,w
  9849  0324  3005               	movlw	5
  9850  0325  1903               	skipnz
  9851  0326  024F               	subwf	_ui16_Speed_mat,w
  9852  0327  1C03               	skipc
  9853  0328  2B30               	goto	l9523
  9854  0329  3001               	movlw	1
  9855  032A  0250               	subwf	_ui16_Speed_mat+1,w
  9856  032B  302D               	movlw	45
  9857  032C  1903               	skipnz
  9858  032D  024F               	subwf	_ui16_Speed_mat,w
  9859  032E  1C03               	btfss	3,0
  9860  032F  2B38               	goto	l9525
  9861  0330                     l9523:	
  9862                           ;BVH2_Appl_Layer.c: 1062: }
  9863                           
  9864                           ;BVH2_Appl_Layer.c: 1060: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1061: (UInt8)2;
  9865                           
  9866                           
  9867                           ;BVH2_Appl_Layer.c: 1063: else {;BVH2_Appl_Layer.c: 1064: Cb24_BadCnt = Cb24_BadCnt + 1 
      +                          ;
  9868  0330  0023               	movlb	3	; select bank3
  9869  0331  0820               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
  9870  0332  3E01               	addlw	1
  9871  0333  00A0               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9872  0334  3000               	movlw	0
  9873  0335  3D21               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
  9874  0336  00A1               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9875  0337  2BC1               	goto	l9583
  9876  0338                     l9525:	
  9877                           ;BVH2_Appl_Layer.c: 1072: };BVH2_Appl_Layer.c: 1073: case (UInt8)5: {
  9878                           
  9879                           ;BVH2_Appl_Layer.c: 1066: };BVH2_Appl_Layer.c: 1067: };BVH2_Appl_Layer.c: 1071: break;
  9880                           
  9881                           ;BVH2_Appl_Layer.c: 1065: Cb24_StateCnt = Cb24_StateCnt + 1 ;
  9882                           
  9883                           
  9884                           ;BVH2_Appl_Layer.c: 1080: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1081: (UInt8)2;
  9885  0338  0021               	movlb	1	; select bank1
  9886  0339  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9887  033A  39F8               	andlw	-8
  9888  033B  3802               	iorlw	2
  9889  033C  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9890                           
  9891                           ;BVH2_Appl_Layer.c: 1085: break;
  9892  033D  2C03               	goto	l9609
  9893  033E                     l9527:	
  9894                           ;BVH2_Appl_Layer.c: 1086: };BVH2_Appl_Layer.c: 1087: case (UInt8)6: {
  9895                           
  9896                           
  9897                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_StateCnt > 10) {
  9898  033E  3000               	movlw	0
  9899  033F  0020               	movlb	0	; select bank0
  9900  0340  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9901  0341  300B               	movlw	11
  9902  0342  1903               	skipnz
  9903  0343  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9904  0344  1C03               	skipc
  9905  0345  2B96               	goto	l9569
  9906                           
  9907                           ;BVH2_Appl_Layer.c: 1091: if (Cb24_RestartCounter == 10) {
  9908  0346  300A               	movlw	10
  9909  0347  0021               	movlb	1	; select bank1
  9910  0348  0645               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),w
  9911  0349  1D03               	btfss	3,2
  9912  034A  2B57               	goto	l9541
  9913                           
  9914                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9915  034B  30F8               	movlw	-8
  9916  034C  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9917                           
  9918                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  9919  034D  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9920                           
  9921                           ;BVH2_Appl_Layer.c: 1095: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
  9922  034E  1421               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  9923                           
  9924                           ;BVH2_Appl_Layer.c: 1096: Cb24_oStalledAlarm = 1;
  9925  034F  0022               	movlb	2	; select bank2
  9926  0350  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9927  0351  0AB3               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9928                           
  9929                           ;BVH2_Appl_Layer.c: 1097: Cb24_oMotorStalled = 1;
  9930  0352  0021               	movlb	1	; select bank1
  9931  0353  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9932  0354  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9933                           
  9934                           ;BVH2_Appl_Layer.c: 1098: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9935  0355  3018               	movlw	24
  9936  0356  2B8E               	goto	L30
  9937  0357                     l9541:	
  9938                           ;BVH2_Appl_Layer.c: 1099: }
  9939                           
  9940                           
  9941                           ;BVH2_Appl_Layer.c: 1100: else {;BVH2_Appl_Layer.c: 1103: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  9942  0357  3000               	movlw	0
  9943  0358  0020               	movlb	0	; select bank0
  9944  0359  0250               	subwf	_ui16_Speed_mat+1,w
  9945  035A  3005               	movlw	5
  9946  035B  1903               	skipnz
  9947  035C  024F               	subwf	_ui16_Speed_mat,w
  9948  035D  1C03               	skipc
  9949  035E  2B66               	goto	l9545
  9950  035F  3001               	movlw	1
  9951  0360  0250               	subwf	_ui16_Speed_mat+1,w
  9952  0361  302D               	movlw	45
  9953  0362  1903               	skipnz
  9954  0363  024F               	subwf	_ui16_Speed_mat,w
  9955  0364  1C03               	skipc
  9956  0365  2B75               	goto	l9555
  9957  0366                     l9545:	
  9958                           
  9959                           ;BVH2_Appl_Layer.c: 1106: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1107: (UInt8)4;
  9960  0366  0021               	movlb	1	; select bank1
  9961  0367  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9962  0368  39F8               	andlw	-8
  9963  0369  3804               	iorlw	4
  9964  036A  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9965                           
  9966                           ;BVH2_Appl_Layer.c: 1108: Cb24_StateCnt = 0 ;
  9967  036B  0020               	movlb	0	; select bank0
  9968  036C  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9969  036D  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9970                           
  9971                           ;BVH2_Appl_Layer.c: 1109: Cb24_oMotorStalled = 1;
  9972  036E  0021               	movlb	1	; select bank1
  9973  036F  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9974  0370  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9975                           
  9976                           ;BVH2_Appl_Layer.c: 1110: Cb24_oStalledAlarm = 1;
  9977  0371  0022               	movlb	2	; select bank2
  9978  0372  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9979  0373  0AB3               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9980  0374  2B8C               	goto	L44
  9981  0375                     l9555:	
  9982                           ;BVH2_Appl_Layer.c: 1112: }
  9983                           
  9984                           ;BVH2_Appl_Layer.c: 1111: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9985                           
  9986                           
  9987                           ;BVH2_Appl_Layer.c: 1113: else {;BVH2_Appl_Layer.c: 1114: if (Cb24_StateCnt > 200) {
  9988  0375  3000               	movlw	0
  9989  0376  0020               	movlb	0	; select bank0
  9990  0377  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9991  0378  30C9               	movlw	201
  9992  0379  1903               	skipnz
  9993  037A  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9994  037B  1C03               	skipc
  9995  037C  2B90               	goto	l9567
  9996                           
  9997                           ;BVH2_Appl_Layer.c: 1117: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1118: (UInt8)5;
  9998  037D  0021               	movlb	1	; select bank1
  9999  037E  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10000  037F  39F8               	andlw	-8
 10001  0380  3805               	iorlw	5
 10002  0381  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10003                           
 10004                           ;BVH2_Appl_Layer.c: 1119: Cb24_StateCnt = 0 ;
 10005  0382  0020               	movlb	0	; select bank0
 10006  0383  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 10007  0384  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 10008                           
 10009                           ;BVH2_Appl_Layer.c: 1120: Cb24_BadCnt = 0 ;
 10010  0385  0023               	movlb	3	; select bank3
 10011  0386  01A0               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 10012  0387  01A1               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 10013                           
 10014                           ;BVH2_Appl_Layer.c: 1121: Cb24_oMotorStalled = 0;
 10015  0388  0021               	movlb	1	; select bank1
 10016  0389  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
 10017                           
 10018                           ;BVH2_Appl_Layer.c: 1124: Cb24_oStalledAlarm = 0;
 10019  038A  0022               	movlb	2	; select bank2
 10020  038B  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10021  038C                     L44:	
 10022                           
 10023                           ;BVH2_Appl_Layer.c: 1125: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 10024  038C  3018               	movlw	24
 10025  038D  0021               	movlb	1	; select bank1
 10026  038E                     L30:	
 10027  038E  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10028                           
 10029                           ;BVH2_Appl_Layer.c: 1126: }
 10030  038F  2B99               	goto	l1498
 10031  0390                     l9567:	
 10032                           
 10033                           ;BVH2_Appl_Layer.c: 1127: else {;BVH2_Appl_Layer.c: 1128: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 1 ;
 10034  0390  0021               	movlb	1	; select bank1
 10035  0391  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10036  0392  39E7               	andlw	-25
 10037  0393  3808               	iorlw	8
 10038  0394  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10039                           
 10040                           ;BVH2_Appl_Layer.c: 1129: };BVH2_Appl_Layer.c: 1130: };BVH2_Appl_Layer.c: 1131: };BVH2_A
      +                          ppl_Layer.c: 1132: }
 10041  0395  2B99               	goto	l1498
 10042  0396                     l9569:	
 10043                           
 10044                           ;BVH2_Appl_Layer.c: 1133: else {;BVH2_Appl_Layer.c: 1134: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 0 ;
 10045  0396  30E7               	movlw	-25
 10046  0397  0021               	movlb	1	; select bank1
 10047  0398  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10048  0399                     l1498:	
 10049                           
 10050                           ;BVH2_Appl_Layer.c: 1135: };BVH2_Appl_Layer.c: 1136: if (SIBFS_Motor_Stalled_b.Cb24_glfl
      +                          ag <= 2) {
 10051  0399  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10052  039A  0020               	movlb	0	; select bank0
 10053  039B  00B7               	movwf	??_BVH2_Appl_Layer
 10054  039C  0CB7               	rrf	??_BVH2_Appl_Layer,f
 10055  039D  0C37               	rrf	??_BVH2_Appl_Layer,w
 10056  039E  3903               	andlw	3
 10057  039F  3A03               	xorlw	3
 10058  03A0  1903               	skipnz
 10059  03A1  2C03               	goto	l9609
 10060  03A2  2BC2               	goto	L31
 10061  03A3                     l9573:	
 10062                           ;BVH2_Appl_Layer.c: 1143: };BVH2_Appl_Layer.c: 1144: case (UInt8)4: {
 10063                           
 10064                           ;BVH2_Appl_Layer.c: 1138: };BVH2_Appl_Layer.c: 1142: break;
 10065                           
 10066                           ;BVH2_Appl_Layer.c: 1137: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 10067                           
 10068                           
 10069                           ;BVH2_Appl_Layer.c: 1147: if (Cb24_StateCnt > 200) {
 10070  03A3  3000               	movlw	0
 10071  03A4  0020               	movlb	0	; select bank0
 10072  03A5  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 10073  03A6  30C9               	movlw	201
 10074  03A7  1903               	skipnz
 10075  03A8  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 10076  03A9  1C03               	skipc
 10077  03AA  2BC1               	goto	l9583
 10078                           
 10079                           ;BVH2_Appl_Layer.c: 1151: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1152: (UInt8)6;
 10080  03AB  0021               	movlb	1	; select bank1
 10081  03AC  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10082  03AD  39F8               	andlw	-8
 10083  03AE  3806               	iorlw	6
 10084  03AF  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10085                           
 10086                           ;BVH2_Appl_Layer.c: 1153: Cb24_StateCnt = 0 ;
 10087  03B0  0020               	movlb	0	; select bank0
 10088  03B1  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 10089  03B2  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 10090                           
 10091                           ;BVH2_Appl_Layer.c: 1154: Cb24_oMotorStalled = 0;
 10092  03B3  0021               	movlb	1	; select bank1
 10093  03B4  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
 10094                           
 10095                           ;BVH2_Appl_Layer.c: 1155: Cb24_oStalledAlarm = 1;
 10096  03B5  0022               	movlb	2	; select bank2
 10097  03B6  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10098  03B7  0AB3               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 10099                           
 10100                           ;BVH2_Appl_Layer.c: 1156: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
 10101  03B8  0021               	movlb	1	; select bank1
 10102  03B9  0845               	movf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),w
 10103  03BA  3E01               	addlw	1
 10104  03BB  0020               	movlb	0	; select bank0
 10105  03BC  00B7               	movwf	??_BVH2_Appl_Layer
 10106  03BD  0837               	movf	??_BVH2_Appl_Layer,w
 10107  03BE  0021               	movlb	1	; select bank1
 10108  03BF  00C5               	movwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128)
 10109                           
 10110                           ;BVH2_Appl_Layer.c: 1157: }
 10111  03C0  2C03               	goto	l9609
 10112  03C1                     l9583:	
 10113                           
 10114                           ;BVH2_Appl_Layer.c: 1158: else {;BVH2_Appl_Layer.c: 1159: Cb24_StateCnt = Cb24_StateCnt 
      +                          + 1 ;
 10115  03C1  0020               	movlb	0	; select bank0
 10116  03C2                     L31:	
 10117  03C2  084B               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
 10118  03C3  3E01               	addlw	1
 10119  03C4  00CB               	movwf	BVH2_Appl_Layer@Cb24_StateCnt
 10120  03C5  3000               	movlw	0
 10121  03C6  3D4C               	addwfc	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 10122  03C7  00CC               	movwf	BVH2_Appl_Layer@Cb24_StateCnt+1
 10123                           
 10124                           ;BVH2_Appl_Layer.c: 1165: };BVH2_Appl_Layer.c: 1166: }
 10125                           
 10126                           ;BVH2_Appl_Layer.c: 1160: };BVH2_Appl_Layer.c: 1164: break;
 10127  03C8  2C03               	goto	l9609
 10128  03C9                     l9587:	
 10129  03C9  0021               	movlb	1	; select bank1
 10130  03CA  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10131  03CB  3907               	andlw	7
 10132                           
 10133                           ; Switch size 1, requested type "space"
 10134                           ; Number of cases is 6, Range of values is 1 to 6
 10135                           ; switch strategies available:
 10136                           ; Name         Instructions Cycles
 10137                           ; simple_byte           19    10 (average)
 10138                           ; direct_byte           21     9 (fixed)
 10139                           ; jumptable            263     9 (fixed)
 10140                           ;	Chosen strategy is simple_byte
 10141  03CC  3A01               	xorlw	1	; case 1
 10142  03CD  1903               	skipnz
 10143  03CE  2B0A               	goto	l9507
 10144  03CF  3A03               	xorlw	3	; case 2
 10145  03D0  1903               	skipnz
 10146  03D1  2AD8               	goto	l9483
 10147  03D2  3A01               	xorlw	1	; case 3
 10148  03D3  1903               	skipnz
 10149  03D4  2AD0               	goto	l9475
 10150  03D5  3A07               	xorlw	7	; case 4
 10151  03D6  1903               	skipnz
 10152  03D7  2BA3               	goto	l9573
 10153  03D8  3A01               	xorlw	1	; case 5
 10154  03D9  1903               	skipnz
 10155  03DA  2B38               	goto	l9525
 10156  03DB  3A03               	xorlw	3	; case 6
 10157  03DC  1903               	skipnz
 10158  03DD  2B3E               	goto	l9527
 10159  03DE  2C03               	goto	l9609
 10160                           
 10161                           ;BVH2_Appl_Layer.c: 1167: };BVH2_Appl_Layer.c: 1170: }
 10162  03DF  2C03               	goto	l9609
 10163  03E0                     l1457:	
 10164                           
 10165                           ;BVH2_Appl_Layer.c: 1171: else {;BVH2_Appl_Layer.c: 1173: if (SIBFS_Motor_Stalled_b.Cb32
      +                          _default) {
 10166  03E0  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10167  03E1  2BF4               	goto	l1504
 10168                           
 10169                           ;BVH2_Appl_Layer.c: 1178: if (!(Sb1_Logical_Operator1)) {
 10170  03E2  0025               	movlb	5	; select bank5
 10171  03E3  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
 10172  03E4  1D03               	btfss	3,2
 10173  03E5  2C03               	goto	l9609
 10174                           
 10175                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb32_default = 0;
 10176  03E6  0021               	movlb	1	; select bank1
 10177  03E7  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10178                           
 10179                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
 10180  03E8  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 10181                           
 10182                           ;BVH2_Appl_Layer.c: 1183: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
 10183  03E9  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10184  03EA  39F8               	andlw	-8
 10185  03EB  3803               	iorlw	3
 10186  03EC  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10187                           
 10188                           ;BVH2_Appl_Layer.c: 1184: Cb24_StateCnt = 0 ;
 10189  03ED  0020               	movlb	0	; select bank0
 10190  03EE  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 10191  03EF  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 10192                           
 10193                           ;BVH2_Appl_Layer.c: 1185: Cb24_BadCnt = 0 ;
 10194  03F0  0023               	movlb	3	; select bank3
 10195  03F1  01A0               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 10196  03F2  01A1               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 10197                           
 10198                           ;BVH2_Appl_Layer.c: 1186: };BVH2_Appl_Layer.c: 1189: }
 10199  03F3  2C03               	goto	l9609
 10200  03F4                     l1504:	
 10201                           
 10202                           ;BVH2_Appl_Layer.c: 1190: else {;BVH2_Appl_Layer.c: 1192: if (!(SIBFS_Motor_Stalled_b.Cb
      +                          33_Stop)) {
 10203  03F4  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 10204                           
 10205                           ;BVH2_Appl_Layer.c: 1194: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
 10206  03F5  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 10207  03F6  2C03               	goto	l9609
 10208                           
 10209                           ;BVH2_Appl_Layer.c: 1195: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
 10210  03F7  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 10211                           
 10212                           ;BVH2_Appl_Layer.c: 1198: if (Cb24_Reset) {
 10213  03F8  0025               	movlb	5	; select bank5
 10214  03F9  0834               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+640),w
 10215  03FA  1903               	btfsc	3,2
 10216  03FB  2C03               	goto	l9609
 10217                           
 10218                           ;BVH2_Appl_Layer.c: 1200: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 10219  03FC  0021               	movlb	1	; select bank1
 10220  03FD                     L43:	
 10221  03FD  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10222                           
 10223                           ;BVH2_Appl_Layer.c: 1201: Cb24_oMotorStalled = 0;
 10224  03FE  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
 10225                           
 10226                           ;BVH2_Appl_Layer.c: 1202: Cb24_oStalledAlarm = 0;
 10227  03FF  0022               	movlb	2	; select bank2
 10228  0400  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10229                           
 10230                           ;BVH2_Appl_Layer.c: 1203: Cb24_RestartCounter = 0 ;
 10231  0401  0021               	movlb	1	; select bank1
 10232  0402  01C5               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128)
 10233  0403                     l9609:	
 10234                           
 10235                           ;BVH2_Appl_Layer.c: 1204: };BVH2_Appl_Layer.c: 1205: };BVH2_Appl_Layer.c: 1206: };BVH2_A
      +                          ppl_Layer.c: 1207: };BVH2_Appl_Layer.c: 1208: };BVH2_Appl_Layer.c: 1213: bool_StalledMot
      +                          orStop = Cb24_oMotorStalled;
 10236  0403  0021               	movlb	1	; select bank1
 10237  0404  083E               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),w
 10238  0405  0020               	movlb	0	; select bank0
 10239  0406  00B7               	movwf	??_BVH2_Appl_Layer
 10240  0407  0837               	movf	??_BVH2_Appl_Layer,w
 10241  0408  0023               	movlb	3	; select bank3
 10242  0409  00D9               	movwf	_bool_StalledMotorStop^(0+384)
 10243                           
 10244                           ;BVH2_Appl_Layer.c: 1214: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
 10245  040A  0025               	movlb	5	; select bank5
 10246  040B  01AC               	clrf	_BVH2_Appl_Layer$1058^(0+640)
 10247  040C  0AAC               	incf	_BVH2_Appl_Layer$1058^(0+640),f
 10248  040D  0022               	movlb	2	; select bank2
 10249  040E  083B               	movf	_Cb34_odFixedValueSel^(0+256),w
 10250  040F  1D03               	btfss	3,2
 10251  0410  2C17               	goto	l9619
 10252  0411  0021               	movlb	1	; select bank1
 10253  0412  0846               	movf	_Cb56_odFixedValueSel^(0+128),w
 10254  0413  1D03               	btfss	3,2
 10255  0414  2C17               	goto	l9619
 10256  0415  0025               	movlb	5	; select bank5
 10257  0416  01AC               	clrf	_BVH2_Appl_Layer$1058^(0+640)
 10258  0417                     l9619:	
 10259  0417  0025               	movlb	5	; select bank5
 10260  0418  082C               	movf	_BVH2_Appl_Layer$1058^(0+640),w
 10261  0419  0020               	movlb	0	; select bank0
 10262  041A  00B7               	movwf	??_BVH2_Appl_Layer
 10263  041B  0837               	movf	??_BVH2_Appl_Layer,w
 10264  041C  0025               	movlb	5	; select bank5
 10265  041D  00B6               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640)
 10266                           
 10267                           ;BVH2_Appl_Layer.c: 1218: if (bool_start_demand_mat) {
 10268  041E  0022               	movlb	2	; select bank2
 10269  041F  0866               	movf	_bool_start_demand_mat^(0+256),w
 10270  0420  1903               	btfsc	3,2
 10271  0421  2C29               	goto	l9625
 10272                           
 10273                           ;BVH2_Appl_Layer.c: 1219: Sb2_Switch5 = ui8_fixed_start_speed_mat;
 10274  0422  0023               	movlb	3	; select bank3
 10275  0423  083F               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
 10276  0424  0025               	movlb	5	; select bank5
 10277  0425  00B9               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
 10278  0426  0023               	movlb	3	; select bank3
 10279  0427  083E               	movf	_ui8_fixed_start_speed_mat^(0+384),w
 10280  0428  2C45               	goto	L34
 10281  0429                     l9625:	
 10282                           ;BVH2_Appl_Layer.c: 1220: }
 10283                           
 10284                           
 10285                           ;BVH2_Appl_Layer.c: 1221: else {;BVH2_Appl_Layer.c: 1224: if (Cb34_odFixedLowValueSel) {
 10286  0429  0022               	movlb	2	; select bank2
 10287  042A  083C               	movf	_Cb34_odFixedLowValueSel^(0+256),w
 10288  042B  1903               	btfsc	3,2
 10289  042C  2C34               	goto	l9629
 10290                           
 10291                           ;BVH2_Appl_Layer.c: 1225: Sb2_Switch5 = ui16_Speed_demand_mat_min;
 10292  042D  0023               	movlb	3	; select bank3
 10293  042E  082D               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
 10294  042F  0025               	movlb	5	; select bank5
 10295  0430  00B9               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
 10296  0431  0023               	movlb	3	; select bank3
 10297  0432  082C               	movf	_ui16_Speed_demand_mat_min^(0+384),w
 10298  0433  2C45               	goto	L34
 10299  0434                     l9629:	
 10300                           ;BVH2_Appl_Layer.c: 1226: }
 10301                           
 10302                           
 10303                           ;BVH2_Appl_Layer.c: 1227: else {;BVH2_Appl_Layer.c: 1230: if (Sb1_Logical_Operator5) {
 10304  0434  0025               	movlb	5	; select bank5
 10305  0435  0836               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640),w
 10306  0436  1903               	btfsc	3,2
 10307  0437  2C3F               	goto	l9633
 10308                           
 10309                           ;BVH2_Appl_Layer.c: 1231: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
 10310  0438  0023               	movlb	3	; select bank3
 10311  0439  082F               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
 10312  043A  0025               	movlb	5	; select bank5
 10313  043B  00B9               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
 10314  043C  0023               	movlb	3	; select bank3
 10315  043D  082E               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
 10316  043E  2C45               	goto	L34
 10317  043F                     l9633:	
 10318                           ;BVH2_Appl_Layer.c: 1232: }
 10319                           
 10320                           
 10321                           ;BVH2_Appl_Layer.c: 1233: else {;BVH2_Appl_Layer.c: 1234: Sb2_Switch5 = ui16_Speed_deman
      +                          d_mat;
 10322  043F  0023               	movlb	3	; select bank3
 10323  0440  0831               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 10324  0441  0025               	movlb	5	; select bank5
 10325  0442  00B9               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
 10326  0443  0023               	movlb	3	; select bank3
 10327  0444  0830               	movf	_ui16_Speed_demand_mat^(0+384),w
 10328  0445                     L34:	
 10329  0445  0025               	movlb	5	; select bank5
 10330  0446  00B8               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+640)
 10331                           
 10332                           ;BVH2_Appl_Layer.c: 1235: };BVH2_Appl_Layer.c: 1236: };BVH2_Appl_Layer.c: 1237: };BVH2_A
      +                          ppl_Layer.c: 1240: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
 10333  0447  0938               	comf	BVH2_Appl_Layer@Sb2_Switch5^(0+640),w
 10334  0448  0020               	movlb	0	; select bank0
 10335  0449  00B7               	movwf	??_BVH2_Appl_Layer
 10336  044A  0025               	movlb	5	; select bank5
 10337  044B  0939               	comf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640),w
 10338  044C  0020               	movlb	0	; select bank0
 10339  044D  00B8               	movwf	??_BVH2_Appl_Layer+1
 10340  044E  0AB7               	incf	??_BVH2_Appl_Layer,f
 10341  044F  1903               	skipnz
 10342  0450  0AB8               	incf	??_BVH2_Appl_Layer+1,f
 10343  0451  084F               	movf	_ui16_Speed_mat,w
 10344  0452  0737               	addwf	??_BVH2_Appl_Layer,w
 10345  0453  0025               	movlb	5	; select bank5
 10346  0454  00B0               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+640)
 10347  0455  0020               	movlb	0	; select bank0
 10348  0456  0850               	movf	_ui16_Speed_mat+1,w
 10349  0457  3D38               	addwfc	??_BVH2_Appl_Layer+1,w
 10350  0458  0025               	movlb	5	; select bank5
 10351  0459  00B1               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640)
 10352                           
 10353                           ;BVH2_Appl_Layer.c: 1245: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 10354  045A  0021               	movlb	1	; select bank1
 10355  045B  18C1               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10356  045C  2CB2               	goto	l9679
 10357                           
 10358                           ;BVH2_Appl_Layer.c: 1265: else {;BVH2_Appl_Layer.c: 1267: if (SIBFS_Dry_Running_b.Cb16_D
      +                          ryRunning) {
 10359                           
 10360                           ;BVH2_Appl_Layer.c: 1261: };BVH2_Appl_Layer.c: 1264: }
 10361  045D  1D41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10362  045E  2CAA               	goto	l1521
 10363                           
 10364                           ;BVH2_Appl_Layer.c: 1271: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 10365  045F  1DC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10366                           
 10367                           ;BVH2_Appl_Layer.c: 1273: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 10368  0460  1E41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10369  0461  2CB2               	goto	l9679
 10370                           
 10371                           ;BVH2_Appl_Layer.c: 1280: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >;BVH2_Appl_Layer.c: 1281: 400) || (ui16_Speed_mat < 80)) {
 10372  0462  0024               	movlb	4	; select bank4
 10373  0463  086C               	movf	_ui16_dryRun_Thresh^(0+512),w
 10374  0464  3E05               	addlw	5
 10375  0465  0020               	movlb	0	; select bank0
 10376  0466  00B7               	movwf	??_BVH2_Appl_Layer
 10377  0467  3000               	movlw	0
 10378  0468  0024               	movlb	4	; select bank4
 10379  0469  3D6D               	addwfc	(_ui16_dryRun_Thresh+1)^(0+512),w
 10380  046A  0020               	movlb	0	; select bank0
 10381  046B  00B8               	movwf	??_BVH2_Appl_Layer+1
 10382  046C  0021               	movlb	1	; select bank1
 10383  046D  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10384  046E  0020               	movlb	0	; select bank0
 10385  046F  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10386  0470  1D03               	skipz
 10387  0471  2C76               	goto	u7995
 10388  0472  0021               	movlb	1	; select bank1
 10389  0473  082C               	movf	_ui16_mat_Current^(0+128),w
 10390  0474  0020               	movlb	0	; select bank0
 10391  0475  0237               	subwf	??_BVH2_Appl_Layer,w
 10392  0476                     u7995:	
 10393  0476  1C03               	skipc
 10394  0477  2C86               	goto	l1526
 10395  0478  3001               	movlw	1
 10396  0479  0250               	subwf	_ui16_Speed_mat+1,w
 10397  047A  3091               	movlw	145
 10398  047B  1903               	skipnz
 10399  047C  024F               	subwf	_ui16_Speed_mat,w
 10400  047D  1803               	skipnc
 10401  047E  2C86               	goto	l1526
 10402  047F  3000               	movlw	0
 10403  0480  0250               	subwf	_ui16_Speed_mat+1,w
 10404  0481  3050               	movlw	80
 10405  0482  1903               	skipnz
 10406  0483  024F               	subwf	_ui16_Speed_mat,w
 10407  0484  1803               	skipnc
 10408  0485  2C88               	goto	l9657
 10409  0486                     l1526:	
 10410                           
 10411                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10412  0486  0021               	movlb	1	; select bank1
 10413  0487  2C91               	goto	L51
 10414  0488                     l9657:	
 10415                           ;BVH2_Appl_Layer.c: 1287: }
 10416                           
 10417                           ;BVH2_Appl_Layer.c: 1286: Cb14_oDryRunAlarm = 0;
 10418                           
 10419                           ;BVH2_Appl_Layer.c: 1285: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10420                           
 10421                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 10422                           
 10423                           
 10424                           ;BVH2_Appl_Layer.c: 1288: else {;BVH2_Appl_Layer.c: 1289: if ((ui8_PWM_dc_mat < 20) && (
      +                          ui8_PWM_dc_mat > 4)) {
 10425  0488  3014               	movlw	20
 10426  0489  0021               	movlb	1	; select bank1
 10427  048A  0251               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10428  048B  1803               	skipnc
 10429  048C  2C94               	goto	l9665
 10430  048D  3005               	movlw	5
 10431  048E  0251               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10432  048F  1C03               	skipc
 10433  0490  2C94               	goto	l9665
 10434  0491                     L51:	
 10435                           
 10436                           ;BVH2_Appl_Layer.c: 1291: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10437  0491  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10438                           
 10439                           ;BVH2_Appl_Layer.c: 1292: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 10440  0492  1141               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10441  0493  2CB0               	goto	l9675
 10442  0494                     l9665:	
 10443                           ;BVH2_Appl_Layer.c: 1295: }
 10444                           
 10445                           ;BVH2_Appl_Layer.c: 1294: Cb14_oDryRunAlarm = 0;
 10446                           
 10447                           ;BVH2_Appl_Layer.c: 1293: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10448                           
 10449                           
 10450                           ;BVH2_Appl_Layer.c: 1296: else {;BVH2_Appl_Layer.c: 1297: if (Cb14_StateCnt > 2000) {
 10451  0494  3007               	movlw	7
 10452  0495  0023               	movlb	3	; select bank3
 10453  0496  0223               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 10454  0497  30D1               	movlw	209
 10455  0498  1903               	skipnz
 10456  0499  0222               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 10457  049A  1C03               	skipc
 10458  049B  2CA2               	goto	l9669
 10459                           
 10460                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10461  049C  0021               	movlb	1	; select bank1
 10462  049D  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10463                           
 10464                           ;BVH2_Appl_Layer.c: 1300: SIBFS_Dry_Running_b.Cb17_redState = 1;
 10465  049E  15C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10466                           
 10467                           ;BVH2_Appl_Layer.c: 1301: Cb14_oDryRunAlarm = 1;
 10468  049F  01BF               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 10469  04A0  0ABF               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 10470                           
 10471                           ;BVH2_Appl_Layer.c: 1302: }
 10472  04A1  2CB2               	goto	l9679
 10473  04A2                     l9669:	
 10474                           
 10475                           ;BVH2_Appl_Layer.c: 1303: else {;BVH2_Appl_Layer.c: 1304: Cb14_StateCnt = Cb14_StateCnt 
      +                          + 1 ;
 10476  04A2  0023               	movlb	3	; select bank3
 10477  04A3  0822               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 10478  04A4  3E01               	addlw	1
 10479  04A5  00A2               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384)
 10480  04A6  3000               	movlw	0
 10481  04A7  3D23               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 10482  04A8  00A3               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384)
 10483                           
 10484                           ;BVH2_Appl_Layer.c: 1305: };BVH2_Appl_Layer.c: 1306: };BVH2_Appl_Layer.c: 1307: };BVH2_A
      +                          ppl_Layer.c: 1310: };BVH2_Appl_Layer.c: 1311: };BVH2_Appl_Layer.c: 1314: }
 10485  04A9  2CB2               	goto	l9679
 10486  04AA                     l1521:	
 10487                           
 10488                           ;BVH2_Appl_Layer.c: 1315: else {;BVH2_Appl_Layer.c: 1317: if (!(SIBFS_Dry_Running_b.Cb14
      +                          _Dry_Running)) {
 10489  04AA  1841               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 10490  04AB  2CB2               	goto	l9679
 10491                           
 10492                           ;BVH2_Appl_Layer.c: 1318: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
 10493  04AC  1441               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 10494                           
 10495                           ;BVH2_Appl_Layer.c: 1321: if (ui8_ResetMatlab == 1) {
 10496  04AD  036F               	decf	_ui8_ResetMatlab^(0+128),w
 10497  04AE  1D03               	btfss	3,2
 10498  04AF  2CB2               	goto	l9679
 10499  04B0                     l9675:	
 10500                           
 10501                           ;BVH2_Appl_Layer.c: 1323: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10502  04B0  14C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10503                           
 10504                           ;BVH2_Appl_Layer.c: 1324: Cb14_oDryRunAlarm = 0;
 10505  04B1  01BF               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 10506  04B2                     l9679:	
 10507                           
 10508                           ;BVH2_Appl_Layer.c: 1325: };BVH2_Appl_Layer.c: 1326: };BVH2_Appl_Layer.c: 1327: };BVH2_A
      +                          ppl_Layer.c: 1328: };BVH2_Appl_Layer.c: 1335: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenSta
      +                          te) {
 10509  04B2  0020               	movlb	0	; select bank0
 10510  04B3  1CD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10511  04B4  2CBD               	goto	l1535
 10512                           
 10513                           ;BVH2_Appl_Layer.c: 1340: if (Cb14_oDryRunAlarm) {
 10514  04B5  0021               	movlb	1	; select bank1
 10515  04B6  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10516  04B7  1903               	btfsc	3,2
 10517  04B8  2D0F               	goto	l9727
 10518                           
 10519                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 10520  04B9  0020               	movlb	0	; select bank0
 10521  04BA  10D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10522                           
 10523                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
 10524  04BB  1555               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10525  04BC  2CEF               	goto	L45
 10526  04BD                     l1535:	
 10527                           ;BVH2_Appl_Layer.c: 1349: };BVH2_Appl_Layer.c: 1352: }
 10528                           
 10529                           ;BVH2_Appl_Layer.c: 1348: Cb19_oDryRun55 = 0;
 10530                           
 10531                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun66 = 1;
 10532                           
 10533                           ;BVH2_Appl_Layer.c: 1346: Cb19_Counter = 0 ;
 10534                           
 10535                           ;BVH2_Appl_Layer.c: 1345: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 10536                           
 10537                           
 10538                           ;BVH2_Appl_Layer.c: 1353: else {;BVH2_Appl_Layer.c: 1355: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b21_DryRunningAlarm) {
 10539  04BD  1D55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10540  04BE  2D00               	goto	l1538
 10541                           
 10542                           ;BVH2_Appl_Layer.c: 1360: if (!(Cb14_oDryRunAlarm)) {
 10543  04BF  0021               	movlb	1	; select bank1
 10544  04C0  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10545  04C1  1D03               	btfss	3,2
 10546  04C2  2CCD               	goto	l1539
 10547                           
 10548                           ;BVH2_Appl_Layer.c: 1365: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 10549  04C3  0020               	movlb	0	; select bank0
 10550  04C4  1DD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10551  04C5  2CC8               	goto	l1540
 10552                           
 10553                           ;BVH2_Appl_Layer.c: 1366: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 10554  04C6  11D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10555                           
 10556                           ;BVH2_Appl_Layer.c: 1367: }
 10557  04C7  2CCB               	goto	l1541
 10558  04C8                     l1540:	
 10559                           
 10560                           ;BVH2_Appl_Layer.c: 1368: else {;BVH2_Appl_Layer.c: 1370: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
 10561  04C8  1E55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10562  04C9  2CCB               	goto	l1541
 10563                           
 10564                           ;BVH2_Appl_Layer.c: 1371: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 10565  04CA  1255               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10566  04CB                     l1541:	
 10567                           
 10568                           ;BVH2_Appl_Layer.c: 1372: };BVH2_Appl_Layer.c: 1373: };BVH2_Appl_Layer.c: 1374: SIBFS_Dr
      +                          y_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 10569  04CB  1155               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10570  04CC  2D08               	goto	L46
 10571  04CD                     l1539:	
 10572                           ;BVH2_Appl_Layer.c: 1379: }
 10573                           
 10574                           ;BVH2_Appl_Layer.c: 1378: Cb19_Counter = 0 ;
 10575                           
 10576                           ;BVH2_Appl_Layer.c: 1377: Cb19_oDryRun66 = 0;
 10577                           
 10578                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun55 = 0;
 10579                           
 10580                           ;BVH2_Appl_Layer.c: 1375: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 10581                           
 10582                           
 10583                           ;BVH2_Appl_Layer.c: 1380: else {;BVH2_Appl_Layer.c: 1382: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b22_DryRun66) {
 10584  04CD  0020               	movlb	0	; select bank0
 10585  04CE  1DD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10586  04CF  2CE3               	goto	l1544
 10587                           
 10588                           ;BVH2_Appl_Layer.c: 1385: if (Cb19_Counter > 400) {
 10589  04D0  3001               	movlw	1
 10590  04D1  0021               	movlb	1	; select bank1
 10591  04D2  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10592  04D3  3091               	movlw	145
 10593  04D4  1903               	skipnz
 10594  04D5  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10595  04D6  1C03               	skipc
 10596  04D7  2CF8               	goto	l9717
 10597                           
 10598                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 10599  04D8  0020               	movlb	0	; select bank0
 10600  04D9  11D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10601                           
 10602                           ;BVH2_Appl_Layer.c: 1389: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
 10603  04DA  1655               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10604                           
 10605                           ;BVH2_Appl_Layer.c: 1390: Cb19_Counter = 0 ;
 10606  04DB  0021               	movlb	1	; select bank1
 10607  04DC  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10608  04DD  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10609                           
 10610                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun66 = 0;
 10611  04DE  0022               	movlb	2	; select bank2
 10612  04DF  01B4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10613                           
 10614                           ;BVH2_Appl_Layer.c: 1392: Cb19_oDryRun55 = 1;
 10615  04E0  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10616  04E1  0AB5               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 10617  04E2  2D0F               	goto	l9727
 10618  04E3                     l1544:	
 10619                           ;BVH2_Appl_Layer.c: 1396: };BVH2_Appl_Layer.c: 1400: }
 10620                           
 10621                           ;BVH2_Appl_Layer.c: 1394: else {;BVH2_Appl_Layer.c: 1395: Cb19_Counter = Cb19_Counter + 
      +                          1 ;
 10622                           
 10623                           ;BVH2_Appl_Layer.c: 1393: }
 10624                           
 10625                           
 10626                           ;BVH2_Appl_Layer.c: 1401: else {;BVH2_Appl_Layer.c: 1403: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
 10627  04E3  1E55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10628  04E4  2D0F               	goto	l9727
 10629                           
 10630                           ;BVH2_Appl_Layer.c: 1406: if (Cb19_Counter > 400) {
 10631  04E5  3001               	movlw	1
 10632  04E6  0021               	movlb	1	; select bank1
 10633  04E7  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10634  04E8  3091               	movlw	145
 10635  04E9  1903               	skipnz
 10636  04EA  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10637  04EB  1C03               	skipc
 10638  04EC  2CF8               	goto	l9717
 10639                           
 10640                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 10641  04ED  0020               	movlb	0	; select bank0
 10642  04EE  1255               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10643  04EF                     L45:	
 10644                           
 10645                           ;BVH2_Appl_Layer.c: 1410: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 10646  04EF  15D5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10647                           
 10648                           ;BVH2_Appl_Layer.c: 1411: Cb19_Counter = 0 ;
 10649  04F0  0021               	movlb	1	; select bank1
 10650  04F1  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10651  04F2  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10652                           
 10653                           ;BVH2_Appl_Layer.c: 1412: Cb19_oDryRun66 = 1;
 10654  04F3  0022               	movlb	2	; select bank2
 10655  04F4  01B4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10656  04F5  0AB4               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),f
 10657                           
 10658                           ;BVH2_Appl_Layer.c: 1413: Cb19_oDryRun55 = 0;
 10659  04F6  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10660                           
 10661                           ;BVH2_Appl_Layer.c: 1414: }
 10662  04F7  2D0F               	goto	l9727
 10663  04F8                     l9717:	
 10664                           
 10665                           ;BVH2_Appl_Layer.c: 1415: else {;BVH2_Appl_Layer.c: 1416: Cb19_Counter = Cb19_Counter + 
      +                          1 ;
 10666  04F8  0021               	movlb	1	; select bank1
 10667  04F9  0822               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10668  04FA  3E01               	addlw	1
 10669  04FB  00A2               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10670  04FC  3000               	movlw	0
 10671  04FD  3D23               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10672  04FE  00A3               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10673                           
 10674                           ;BVH2_Appl_Layer.c: 1417: };BVH2_Appl_Layer.c: 1421: };BVH2_Appl_Layer.c: 1422: };BVH2_A
      +                          ppl_Layer.c: 1423: };BVH2_Appl_Layer.c: 1426: }
 10675  04FF  2D0F               	goto	l9727
 10676  0500                     l1538:	
 10677                           
 10678                           ;BVH2_Appl_Layer.c: 1427: else {;BVH2_Appl_Layer.c: 1429: if (!(SIBFS_Dry_RunningAlarm_b
      +                          .Cb19_Dry_RunningAlarm)) {
 10679  0500  1855               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 10680  0501  2D0F               	goto	l9727
 10681                           
 10682                           ;BVH2_Appl_Layer.c: 1430: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 10683  0502  1455               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 10684                           
 10685                           ;BVH2_Appl_Layer.c: 1434: if (!(Cb14_oDryRunAlarm)) {
 10686  0503  0021               	movlb	1	; select bank1
 10687  0504  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10688  0505  1D03               	btfss	3,2
 10689  0506  2D0F               	goto	l9727
 10690                           
 10691                           ;BVH2_Appl_Layer.c: 1436: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 10692  0507  0020               	movlb	0	; select bank0
 10693  0508                     L46:	
 10694  0508  14D5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10695                           
 10696                           ;BVH2_Appl_Layer.c: 1437: Cb19_oDryRun55 = 0;
 10697  0509  0022               	movlb	2	; select bank2
 10698  050A  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10699                           
 10700                           ;BVH2_Appl_Layer.c: 1438: Cb19_oDryRun66 = 0;
 10701  050B  01B4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10702                           
 10703                           ;BVH2_Appl_Layer.c: 1439: Cb19_Counter = 0 ;
 10704  050C  0021               	movlb	1	; select bank1
 10705  050D  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10706  050E  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10707  050F                     l9727:	
 10708                           
 10709                           ;BVH2_Appl_Layer.c: 1440: };BVH2_Appl_Layer.c: 1441: };BVH2_Appl_Layer.c: 1442: };BVH2_A
      +                          ppl_Layer.c: 1443: };BVH2_Appl_Layer.c: 1448: bool_DryRunningAlarm = Cb19_oDryRun66;
 10710  050F  0022               	movlb	2	; select bank2
 10711  0510  0834               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 10712  0511  0020               	movlb	0	; select bank0
 10713  0512  00B7               	movwf	??_BVH2_Appl_Layer
 10714  0513  0837               	movf	??_BVH2_Appl_Layer,w
 10715  0514  0021               	movlb	1	; select bank1
 10716  0515  00D7               	movwf	_bool_DryRunningAlarm^(0+128)
 10717                           
 10718                           ;BVH2_Appl_Layer.c: 1451: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 10719  0516  0022               	movlb	2	; select bank2
 10720  0517  0832               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 10721  0518  0020               	movlb	0	; select bank0
 10722  0519  00B7               	movwf	??_BVH2_Appl_Layer
 10723  051A  0837               	movf	??_BVH2_Appl_Layer,w
 10724  051B  0021               	movlb	1	; select bank1
 10725  051C  00D8               	movwf	_bool_CPU_TempAlarm^(0+128)
 10726                           
 10727                           ;BVH2_Appl_Layer.c: 1456: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 10728  051D  1C42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10729  051E  2D39               	goto	l1554
 10730                           
 10731                           ;BVH2_Appl_Layer.c: 1461: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 10732  051F  0023               	movlb	3	; select bank3
 10733  0520  086D               	movf	_ui16_Current_Thresh^(0+384),w
 10734  0521  3EFE               	addlw	254
 10735  0522  0020               	movlb	0	; select bank0
 10736  0523  00B7               	movwf	??_BVH2_Appl_Layer
 10737  0524  30FF               	movlw	255
 10738  0525  0023               	movlb	3	; select bank3
 10739  0526  3D6E               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10740  0527  0020               	movlb	0	; select bank0
 10741  0528  00B8               	movwf	??_BVH2_Appl_Layer+1
 10742  0529  0021               	movlb	1	; select bank1
 10743  052A  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10744  052B  0020               	movlb	0	; select bank0
 10745  052C  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10746  052D  1D03               	skipz
 10747  052E  2D33               	goto	u8205
 10748  052F  0021               	movlb	1	; select bank1
 10749  0530  082C               	movf	_ui16_mat_Current^(0+128),w
 10750  0531  0020               	movlb	0	; select bank0
 10751  0532  0237               	subwf	??_BVH2_Appl_Layer,w
 10752  0533                     u8205:	
 10753  0533  1803               	skipnc
 10754  0534  2DAC               	goto	l9777
 10755                           
 10756                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 10757  0535  0021               	movlb	1	; select bank1
 10758  0536  1042               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10759                           
 10760                           ;BVH2_Appl_Layer.c: 1465: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
 10761  0537  1542               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10762  0538  2DA1               	goto	l9767
 10763  0539                     l1554:	
 10764                           ;BVH2_Appl_Layer.c: 1467: };BVH2_Appl_Layer.c: 1470: }
 10765                           
 10766                           ;BVH2_Appl_Layer.c: 1466: Cb9_StateCnt = 0 ;
 10767                           
 10768                           
 10769                           ;BVH2_Appl_Layer.c: 1471: else {;BVH2_Appl_Layer.c: 1473: if (SIBFS_Current_Analysis_low
      +                          _b.Cb11_Wait) {
 10770  0539  1CC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10771  053A  2D5B               	goto	l1557
 10772                           
 10773                           ;BVH2_Appl_Layer.c: 1478: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 10774  053B  0023               	movlb	3	; select bank3
 10775  053C  086D               	movf	_ui16_Current_Thresh^(0+384),w
 10776  053D  3EFE               	addlw	254
 10777  053E  0020               	movlb	0	; select bank0
 10778  053F  00B7               	movwf	??_BVH2_Appl_Layer
 10779  0540  30FF               	movlw	255
 10780  0541  0023               	movlb	3	; select bank3
 10781  0542  3D6E               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10782  0543  0020               	movlb	0	; select bank0
 10783  0544  00B8               	movwf	??_BVH2_Appl_Layer+1
 10784  0545  0021               	movlb	1	; select bank1
 10785  0546  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10786  0547  0020               	movlb	0	; select bank0
 10787  0548  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10788  0549  1D03               	skipz
 10789  054A  2D4F               	goto	u8225
 10790  054B  0021               	movlb	1	; select bank1
 10791  054C  082C               	movf	_ui16_mat_Current^(0+128),w
 10792  054D  0020               	movlb	0	; select bank0
 10793  054E  0237               	subwf	??_BVH2_Appl_Layer,w
 10794  054F                     u8225:	
 10795  054F  1803               	skipnc
 10796  0550  2D54               	goto	l9743
 10797                           
 10798                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 10799  0551  0021               	movlb	1	; select bank1
 10800  0552  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10801  0553  2D7A               	goto	L35
 10802  0554                     l9743:	
 10803                           ;BVH2_Appl_Layer.c: 1483: }
 10804                           
 10805                           ;BVH2_Appl_Layer.c: 1482: Cb9_oCurrentAlarm = 1;
 10806                           
 10807                           ;BVH2_Appl_Layer.c: 1481: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 10808                           
 10809                           
 10810                           ;BVH2_Appl_Layer.c: 1484: else {;BVH2_Appl_Layer.c: 1485: if (Cb9_StateCnt > 100) {
 10811  0554  3065               	movlw	101
 10812  0555  0021               	movlb	1	; select bank1
 10813  0556  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10814  0557  1C03               	skipc
 10815  0558  2D7F               	goto	l9761
 10816                           
 10817                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 10818  0559  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10819  055A  2DA9               	goto	l9773
 10820  055B                     l1557:	
 10821                           ;BVH2_Appl_Layer.c: 1493: };BVH2_Appl_Layer.c: 1494: };BVH2_Appl_Layer.c: 1497: }
 10822                           
 10823                           ;BVH2_Appl_Layer.c: 1491: else {;BVH2_Appl_Layer.c: 1492: Cb9_StateCnt = Cb9_StateCnt + 
      +                          1 ;
 10824                           
 10825                           ;BVH2_Appl_Layer.c: 1490: }
 10826                           
 10827                           ;BVH2_Appl_Layer.c: 1489: Cb9_oCurrentAlarm = 0;
 10828                           
 10829                           ;BVH2_Appl_Layer.c: 1488: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10830                           
 10831                           
 10832                           ;BVH2_Appl_Layer.c: 1498: else {;BVH2_Appl_Layer.c: 1500: if (SIBFS_Current_Analysis_low
      +                          _b.Cb12_CntOverCurrent) {
 10833  055B  1D42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10834  055C  2D88               	goto	l1563
 10835                           
 10836                           ;BVH2_Appl_Layer.c: 1505: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 10837  055D  0023               	movlb	3	; select bank3
 10838  055E  086D               	movf	_ui16_Current_Thresh^(0+384),w
 10839  055F  3E02               	addlw	2
 10840  0560  0020               	movlb	0	; select bank0
 10841  0561  00B7               	movwf	??_BVH2_Appl_Layer
 10842  0562  3000               	movlw	0
 10843  0563  0023               	movlb	3	; select bank3
 10844  0564  3D6E               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10845  0565  0020               	movlb	0	; select bank0
 10846  0566  00B8               	movwf	??_BVH2_Appl_Layer+1
 10847  0567  0838               	movf	??_BVH2_Appl_Layer+1,w
 10848  0568  0021               	movlb	1	; select bank1
 10849  0569  022D               	subwf	(_ui16_mat_Current+1)^(0+128),w
 10850  056A  1D03               	skipz
 10851  056B  2D70               	goto	u8255
 10852  056C  0020               	movlb	0	; select bank0
 10853  056D  0837               	movf	??_BVH2_Appl_Layer,w
 10854  056E  0021               	movlb	1	; select bank1
 10855  056F  022C               	subwf	_ui16_mat_Current^(0+128),w
 10856  0570                     u8255:	
 10857  0570  1803               	skipnc
 10858  0571  2D74               	goto	l9757
 10859                           
 10860                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 10861  0572  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10862  0573  2DA9               	goto	l9773
 10863  0574                     l9757:	
 10864                           ;BVH2_Appl_Layer.c: 1510: }
 10865                           
 10866                           ;BVH2_Appl_Layer.c: 1509: Cb9_oCurrentAlarm = 0;
 10867                           
 10868                           ;BVH2_Appl_Layer.c: 1508: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10869                           
 10870                           
 10871                           ;BVH2_Appl_Layer.c: 1511: else {;BVH2_Appl_Layer.c: 1512: if (Cb9_StateCnt > 50) {
 10872  0574  3033               	movlw	51
 10873  0575  0021               	movlb	1	; select bank1
 10874  0576  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10875  0577  1C03               	skipc
 10876  0578  2D7F               	goto	l9761
 10877                           
 10878                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 10879  0579  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10880  057A                     L35:	
 10881                           
 10882                           ;BVH2_Appl_Layer.c: 1515: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 10883  057A  15C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10884                           
 10885                           ;BVH2_Appl_Layer.c: 1516: Cb9_oCurrentAlarm = 1;
 10886  057B  0022               	movlb	2	; select bank2
 10887  057C  01AF               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 10888  057D  0AAF               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 10889                           
 10890                           ;BVH2_Appl_Layer.c: 1517: }
 10891  057E  2DAC               	goto	l9777
 10892  057F                     l9761:	
 10893                           
 10894                           ;BVH2_Appl_Layer.c: 1518: else {;BVH2_Appl_Layer.c: 1519: Cb9_StateCnt = Cb9_StateCnt + 
      +                          1 ;
 10895  057F  0021               	movlb	1	; select bank1
 10896  0580  0843               	movf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10897  0581  3E01               	addlw	1
 10898  0582  0020               	movlb	0	; select bank0
 10899  0583  00B7               	movwf	??_BVH2_Appl_Layer
 10900  0584  0837               	movf	??_BVH2_Appl_Layer,w
 10901  0585  0021               	movlb	1	; select bank1
 10902  0586  00C3               	movwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 10903                           
 10904                           ;BVH2_Appl_Layer.c: 1520: };BVH2_Appl_Layer.c: 1521: };BVH2_Appl_Layer.c: 1524: }
 10905  0587  2DAC               	goto	l9777
 10906  0588                     l1563:	
 10907                           
 10908                           ;BVH2_Appl_Layer.c: 1525: else {;BVH2_Appl_Layer.c: 1527: if (SIBFS_Current_Analysis_low
      +                          _b.Cb13_redState) {
 10909  0588  1DC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10910  0589  2DA3               	goto	l1569
 10911                           
 10912                           ;BVH2_Appl_Layer.c: 1532: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 10913  058A  0023               	movlb	3	; select bank3
 10914  058B  086D               	movf	_ui16_Current_Thresh^(0+384),w
 10915  058C  3E02               	addlw	2
 10916  058D  0020               	movlb	0	; select bank0
 10917  058E  00B7               	movwf	??_BVH2_Appl_Layer
 10918  058F  3000               	movlw	0
 10919  0590  0023               	movlb	3	; select bank3
 10920  0591  3D6E               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10921  0592  0020               	movlb	0	; select bank0
 10922  0593  00B8               	movwf	??_BVH2_Appl_Layer+1
 10923  0594  0838               	movf	??_BVH2_Appl_Layer+1,w
 10924  0595  0021               	movlb	1	; select bank1
 10925  0596  022D               	subwf	(_ui16_mat_Current+1)^(0+128),w
 10926  0597  1D03               	skipz
 10927  0598  2D9D               	goto	u8285
 10928  0599  0020               	movlb	0	; select bank0
 10929  059A  0837               	movf	??_BVH2_Appl_Layer,w
 10930  059B  0021               	movlb	1	; select bank1
 10931  059C  022C               	subwf	_ui16_mat_Current^(0+128),w
 10932  059D                     u8285:	
 10933  059D  1803               	skipnc
 10934  059E  2DAC               	goto	l9777
 10935                           
 10936                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 10937  059F  11C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10938                           
 10939                           ;BVH2_Appl_Layer.c: 1536: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
 10940  05A0  14C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10941  05A1                     l9767:	
 10942                           
 10943                           ;BVH2_Appl_Layer.c: 1537: Cb9_StateCnt = 0 ;
 10944  05A1  01C3               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 10945                           
 10946                           ;BVH2_Appl_Layer.c: 1538: };BVH2_Appl_Layer.c: 1541: }
 10947  05A2  2DAC               	goto	l9777
 10948  05A3                     l1569:	
 10949                           
 10950                           ;BVH2_Appl_Layer.c: 1542: else {;BVH2_Appl_Layer.c: 1544: if (!(SIBFS_Current_Analysis_l
      +                          ow_b.Cb9_Current_Analysis_low)) {
 10951  05A3  1A42               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 10952  05A4  2DAC               	goto	l9777
 10953                           
 10954                           ;BVH2_Appl_Layer.c: 1545: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
 10955  05A5  1642               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 10956                           
 10957                           ;BVH2_Appl_Layer.c: 1548: if (ui8_ResetMatlab == 1) {
 10958  05A6  036F               	decf	_ui8_ResetMatlab^(0+128),w
 10959  05A7  1D03               	btfss	3,2
 10960  05A8  2DAC               	goto	l9777
 10961  05A9                     l9773:	
 10962                           
 10963                           ;BVH2_Appl_Layer.c: 1550: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10964  05A9  1442               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10965                           
 10966                           ;BVH2_Appl_Layer.c: 1551: Cb9_oCurrentAlarm = 0;
 10967  05AA  0022               	movlb	2	; select bank2
 10968  05AB  01AF               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 10969  05AC                     l9777:	
 10970                           
 10971                           ;BVH2_Appl_Layer.c: 1552: };BVH2_Appl_Layer.c: 1553: };BVH2_Appl_Layer.c: 1554: };BVH2_A
      +                          ppl_Layer.c: 1555: };BVH2_Appl_Layer.c: 1556: };BVH2_Appl_Layer.c: 1557: };BVH2_Appl_Lay
      +                          er.c: 1562: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 10972  05AC  0022               	movlb	2	; select bank2
 10973  05AD  082F               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 10974  05AE  0020               	movlb	0	; select bank0
 10975  05AF  00B7               	movwf	??_BVH2_Appl_Layer
 10976  05B0  0837               	movf	??_BVH2_Appl_Layer,w
 10977  05B1  0021               	movlb	1	; select bank1
 10978  05B2  00D5               	movwf	_bool_HighCurrentAlarm^(0+128)
 10979                           
 10980                           ;BVH2_Appl_Layer.c: 1565: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 10981  05B3  0022               	movlb	2	; select bank2
 10982  05B4  083E               	movf	_Cb34_oPWM_Alarm^(0+256),w
 10983  05B5  0020               	movlb	0	; select bank0
 10984  05B6  00B7               	movwf	??_BVH2_Appl_Layer
 10985  05B7  0837               	movf	??_BVH2_Appl_Layer,w
 10986  05B8  0022               	movlb	2	; select bank2
 10987  05B9  00CB               	movwf	_bool_PWMin_err_Alarm^(0+256)
 10988                           
 10989                           ;BVH2_Appl_Layer.c: 1568: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 10990  05BA  0837               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 10991  05BB  0020               	movlb	0	; select bank0
 10992  05BC  00B7               	movwf	??_BVH2_Appl_Layer
 10993  05BD  0837               	movf	??_BVH2_Appl_Layer,w
 10994  05BE  0022               	movlb	2	; select bank2
 10995  05BF  00C9               	movwf	_bool_UbatAlarm^(0+256)
 10996                           
 10997                           ;BVH2_Appl_Layer.c: 1569: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 10998  05C0  0025               	movlb	5	; select bank5
 10999  05C1  01AD               	clrf	_BVH2_Appl_Layer$1059^(0+640)
 11000  05C2  0AAD               	incf	_BVH2_Appl_Layer$1059^(0+640),f
 11001  05C3  0022               	movlb	2	; select bank2
 11002  05C4  0833               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
 11003  05C5  1D03               	btfss	3,2
 11004  05C6  2DCF               	goto	l9793
 11005  05C7  0840               	movf	_Cb1_oCurrentAlarm^(0+256),w
 11006  05C8  1D03               	btfss	3,2
 11007  05C9  2DCF               	goto	l9793
 11008  05CA  0835               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),w
 11009  05CB  1D03               	btfss	3,2
 11010  05CC  2DCF               	goto	l9793
 11011  05CD  0025               	movlb	5	; select bank5
 11012  05CE  01AD               	clrf	_BVH2_Appl_Layer$1059^(0+640)
 11013  05CF                     l9793:	
 11014  05CF  0025               	movlb	5	; select bank5
 11015  05D0  082D               	movf	_BVH2_Appl_Layer$1059^(0+640),w
 11016  05D1  0020               	movlb	0	; select bank0
 11017  05D2  00B7               	movwf	??_BVH2_Appl_Layer
 11018  05D3  0837               	movf	??_BVH2_Appl_Layer,w
 11019  05D4  0021               	movlb	1	; select bank1
 11020  05D5  00D6               	movwf	_bool_MotorStalled^(0+128)
 11021                           
 11022                           ;BVH2_Appl_Layer.c: 1572: bool_CPU_TempRedAlarm = Cb51_oTempRedAlarm;
 11023  05D6  0022               	movlb	2	; select bank2
 11024  05D7  0831               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 11025  05D8  0020               	movlb	0	; select bank0
 11026  05D9  00B7               	movwf	??_BVH2_Appl_Layer
 11027  05DA  0837               	movf	??_BVH2_Appl_Layer,w
 11028  05DB  0022               	movlb	2	; select bank2
 11029  05DC  00CA               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 11030                           
 11031                           ;BVH2_Appl_Layer.c: 1575: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 11032  05DD  0025               	movlb	5	; select bank5
 11033  05DE  0838               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+640),w
 11034  05DF  0020               	movlb	0	; select bank0
 11035  05E0  00B7               	movwf	??_BVH2_Appl_Layer
 11036  05E1  0837               	movf	??_BVH2_Appl_Layer,w
 11037  05E2  0023               	movlb	3	; select bank3
 11038  05E3  00D8               	movwf	_ui8_debug_out0^(0+384)
 11039                           
 11040                           ;BVH2_Appl_Layer.c: 1576: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 11041  05E4  0025               	movlb	5	; select bank5
 11042  05E5  01AE               	clrf	_BVH2_Appl_Layer$1060^(0+640)
 11043  05E6  0AAE               	incf	_BVH2_Appl_Layer$1060^(0+640),f
 11044  05E7  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
 11045  05E8  1D03               	btfss	3,2
 11046  05E9  2DF3               	goto	l9809
 11047  05EA  0021               	movlb	1	; select bank1
 11048  05EB  083E               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),w
 11049  05EC  1D03               	btfss	3,2
 11050  05ED  2DF3               	goto	l9809
 11051  05EE  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 11052  05EF  1D03               	btfss	3,2
 11053  05F0  2DF3               	goto	l9809
 11054  05F1  0025               	movlb	5	; select bank5
 11055  05F2  01AE               	clrf	_BVH2_Appl_Layer$1060^(0+640)
 11056  05F3                     l9809:	
 11057  05F3  0025               	movlb	5	; select bank5
 11058  05F4  082E               	movf	_BVH2_Appl_Layer$1060^(0+640),w
 11059  05F5  0020               	movlb	0	; select bank0
 11060  05F6  00B7               	movwf	??_BVH2_Appl_Layer
 11061  05F7  0837               	movf	??_BVH2_Appl_Layer,w
 11062  05F8  0025               	movlb	5	; select bank5
 11063  05F9  00BD               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640)
 11064                           
 11065                           ;BVH2_Appl_Layer.c: 1577: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 11066  05FA  01AF               	clrf	_BVH2_Appl_Layer$1061^(0+640)
 11067  05FB  0AAF               	incf	_BVH2_Appl_Layer$1061^(0+640),f
 11068  05FC  083D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 11069  05FD  1D03               	btfss	3,2
 11070  05FE  2E05               	goto	l9819
 11071  05FF  0021               	movlb	1	; select bank1
 11072  0600  084F               	movf	_bool_ControlLoopMode^(0+128),w
 11073  0601  1D03               	btfss	3,2
 11074  0602  2E05               	goto	l9819
 11075  0603  0025               	movlb	5	; select bank5
 11076  0604  01AF               	clrf	_BVH2_Appl_Layer$1061^(0+640)
 11077  0605                     l9819:	
 11078  0605  0025               	movlb	5	; select bank5
 11079  0606  082F               	movf	_BVH2_Appl_Layer$1061^(0+640),w
 11080  0607  0020               	movlb	0	; select bank0
 11081  0608  00B7               	movwf	??_BVH2_Appl_Layer
 11082  0609  0837               	movf	??_BVH2_Appl_Layer,w
 11083  060A  0025               	movlb	5	; select bank5
 11084  060B  00B7               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640)
 11085                           
 11086                           ;BVH2_Appl_Layer.c: 1578: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 11087  060C  0837               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640),w
 11088  060D  0022               	movlb	2	; select bank2
 11089  060E  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 11090  060F  1903               	btfsc	3,2
 11091  0610  2E1C               	goto	l9827
 11092  0611  086D               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
 11093  0612  1D03               	btfss	3,2
 11094  0613  2E1C               	goto	l9827
 11095                           
 11096                           ;BVH2_Appl_Layer.c: 1579: {;BVH2_Appl_Layer.c: 1580: X_Sb4_Intergrator = 80000 ;
 11097  0614  3000               	movlw	0
 11098  0615  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11099  0616  3001               	movlw	1
 11100  0617  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11101  0618  3038               	movlw	56
 11102  0619  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11103  061A  3080               	movlw	128
 11104  061B  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11105  061C                     l9827:	
 11106                           
 11107                           ;BVH2_Appl_Layer.c: 1581: };BVH2_Appl_Layer.c: 1585: if (Sb1_Logical_Operator3) {
 11108  061C  0025               	movlb	5	; select bank5
 11109  061D  083D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 11110  061E  1903               	btfsc	3,2
 11111  061F  2E23               	goto	l9831
 11112                           
 11113                           ;BVH2_Appl_Layer.c: 1586: Sb2_Switch2 = 0 ;
 11114  0620  01A8               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11115  0621  01A9               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11116                           
 11117                           ;BVH2_Appl_Layer.c: 1587: }
 11118  0622  2F46               	goto	l9865
 11119  0623                     l9831:	
 11120                           
 11121                           ;BVH2_Appl_Layer.c: 1588: else {;BVH2_Appl_Layer.c: 1591: if (bool_ControlLoopMode) {
 11122  0623  0021               	movlb	1	; select bank1
 11123  0624  084F               	movf	_bool_ControlLoopMode^(0+128),w
 11124  0625  1903               	btfsc	3,2
 11125  0626  2ED2               	goto	l9851
 11126                           
 11127                           ;BVH2_Appl_Layer.c: 1594: if (Sb1_Logical_Operator5) {
 11128  0627  0025               	movlb	5	; select bank5
 11129  0628  0836               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640),w
 11130  0629  1903               	btfsc	3,2
 11131  062A  2E34               	goto	l9837
 11132                           
 11133                           ;BVH2_Appl_Layer.c: 1595: Sb2_Switch2 = Sb2_Fixed_Power;
 11134  062B  3078               	movlw	low (_Sb2_Fixed_Power| (0+32768))
 11135  062C  0084               	movwf	4
 11136  062D  3098               	movlw	high (_Sb2_Fixed_Power| (0+32768))
 11137  062E  0085               	movwf	5
 11138  062F  3F00               	moviw [0]fsr0
 11139  0630  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11140  0631  3F01               	moviw [1]fsr0
 11141  0632  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11142                           
 11143                           ;BVH2_Appl_Layer.c: 1596: }
 11144  0633  2F46               	goto	l9865
 11145  0634                     l9837:	
 11146                           
 11147                           ;BVH2_Appl_Layer.c: 1597: else {;BVH2_Appl_Layer.c: 1599: UInt16 Sb3_Product1 ;;BVH2_App
      +                          l_Layer.c: 1600: Int16 Sb3_Sum1;;BVH2_Appl_Layer.c: 1608: Sb3_Product1 = (UInt16) (((UIn
      +                          t16) (140 << 8)) / 160 );
 11148  0634  30E0               	movlw	224
 11149  0635  00B2               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+640)
 11150  0636  3000               	movlw	0
 11151  0637  00B3               	movwf	(BVH2_Appl_Layer@Sb3_Product1^(0+640)+1)
 11152                           
 11153                           ;BVH2_Appl_Layer.c: 1614: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>;BVH2_Appl_Layer.c: 1615: 8)) + ((Int16) (((Int16) (-((Int16) (
      +                          UInt16) ((((UInt32) Sb3_Product1) * 95) >> 7)))) + 200)));
 11154  0638  0832               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+640),w
 11155  0639  0020               	movlb	0	; select bank0
 11156  063A  00A8               	movwf	___lmul@multiplier
 11157  063B  0025               	movlb	5	; select bank5
 11158  063C  0833               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+640),w
 11159  063D  0020               	movlb	0	; select bank0
 11160  063E  00A9               	movwf	___lmul@multiplier+1
 11161  063F  01AA               	clrf	___lmul@multiplier+2
 11162  0640  01AB               	clrf	___lmul@multiplier+3
 11163  0641  3000               	movlw	0
 11164  0642  00AF               	movwf	___lmul@multiplicand+3
 11165  0643  3000               	movlw	0
 11166  0644  00AE               	movwf	___lmul@multiplicand+2
 11167  0645  3000               	movlw	0
 11168  0646  00AD               	movwf	___lmul@multiplicand+1
 11169  0647  305F               	movlw	95
 11170  0648  00AC               	movwf	___lmul@multiplicand
 11171  0649  319F  279B  3180   	fcall	___lmul
 11172  064C  0020               	movlb	0	; select bank0
 11173  064D  0828               	movf	?___lmul,w
 11174  064E  00B7               	movwf	??_BVH2_Appl_Layer
 11175  064F  0829               	movf	?___lmul+1,w
 11176  0650  00B8               	movwf	??_BVH2_Appl_Layer+1
 11177  0651  082A               	movf	?___lmul+2,w
 11178  0652  00B9               	movwf	??_BVH2_Appl_Layer+2
 11179  0653  082B               	movf	?___lmul+3,w
 11180  0654  00BA               	movwf	??_BVH2_Appl_Layer+3
 11181  0655  3007               	movlw	7
 11182  0656                     u8445:	
 11183  0656  36BA               	lsrf	??_BVH2_Appl_Layer+3,f
 11184  0657  0CB9               	rrf	??_BVH2_Appl_Layer+2,f
 11185  0658  0CB8               	rrf	??_BVH2_Appl_Layer+1,f
 11186  0659  0CB7               	rrf	??_BVH2_Appl_Layer,f
 11187  065A  0B89               	decfsz	9,f
 11188  065B  2E56               	goto	u8445
 11189  065C  0937               	comf	??_BVH2_Appl_Layer,w
 11190  065D  00BB               	movwf	??_BVH2_Appl_Layer+4
 11191  065E  0938               	comf	??_BVH2_Appl_Layer+1,w
 11192  065F  00BC               	movwf	??_BVH2_Appl_Layer+5
 11193  0660  0ABB               	incf	??_BVH2_Appl_Layer+4,f
 11194  0661  1903               	skipnz
 11195  0662  0ABC               	incf	??_BVH2_Appl_Layer+5,f
 11196  0663  0021               	movlb	1	; select bank1
 11197  0664  0851               	movf	_ui8_PWM_dc_mat^(0+128),w
 11198  0665  0020               	movlb	0	; select bank0
 11199  0666  00BD               	movwf	??_BVH2_Appl_Layer+6
 11200  0667  01BE               	clrf	??_BVH2_Appl_Layer+7
 11201  0668  01BF               	clrf	??_BVH2_Appl_Layer+8
 11202  0669  01C0               	clrf	??_BVH2_Appl_Layer+9
 11203  066A  0840               	movf	??_BVH2_Appl_Layer+9,w
 11204  066B  00AB               	movwf	___lmul@multiplier+3
 11205  066C  083F               	movf	??_BVH2_Appl_Layer+8,w
 11206  066D  00AA               	movwf	___lmul@multiplier+2
 11207  066E  083E               	movf	??_BVH2_Appl_Layer+7,w
 11208  066F  00A9               	movwf	___lmul@multiplier+1
 11209  0670  083D               	movf	??_BVH2_Appl_Layer+6,w
 11210  0671  00A8               	movwf	___lmul@multiplier
 11211  0672  0025               	movlb	5	; select bank5
 11212  0673  0832               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+640),w
 11213  0674  0020               	movlb	0	; select bank0
 11214  0675  00AC               	movwf	___lmul@multiplicand
 11215  0676  0025               	movlb	5	; select bank5
 11216  0677  0833               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+640),w
 11217  0678  0020               	movlb	0	; select bank0
 11218  0679  00AD               	movwf	___lmul@multiplicand+1
 11219  067A  01AE               	clrf	___lmul@multiplicand+2
 11220  067B  01AF               	clrf	___lmul@multiplicand+3
 11221  067C  319F  279B  3180   	fcall	___lmul
 11222  067F  0020               	movlb	0	; select bank0
 11223  0680  0828               	movf	?___lmul,w
 11224  0681  00C1               	movwf	??_BVH2_Appl_Layer+10
 11225  0682  0829               	movf	?___lmul+1,w
 11226  0683  00C2               	movwf	??_BVH2_Appl_Layer+11
 11227  0684  082A               	movf	?___lmul+2,w
 11228  0685  00C3               	movwf	??_BVH2_Appl_Layer+12
 11229  0686  082B               	movf	?___lmul+3,w
 11230  0687  00C4               	movwf	??_BVH2_Appl_Layer+13
 11231  0688  3008               	movlw	8
 11232  0689                     u8455:	
 11233  0689  36C4               	lsrf	??_BVH2_Appl_Layer+13,f
 11234  068A  0CC3               	rrf	??_BVH2_Appl_Layer+12,f
 11235  068B  0CC2               	rrf	??_BVH2_Appl_Layer+11,f
 11236  068C  0CC1               	rrf	??_BVH2_Appl_Layer+10,f
 11237  068D  0B89               	decfsz	9,f
 11238  068E  2E89               	goto	u8455
 11239  068F  083B               	movf	??_BVH2_Appl_Layer+4,w
 11240  0690  0741               	addwf	??_BVH2_Appl_Layer+10,w
 11241  0691  00C5               	movwf	??_BVH2_Appl_Layer+14
 11242  0692  083C               	movf	??_BVH2_Appl_Layer+5,w
 11243  0693  3D42               	addwfc	??_BVH2_Appl_Layer+11,w
 11244  0694  00C6               	movwf	??_BVH2_Appl_Layer+15
 11245  0695  0845               	movf	??_BVH2_Appl_Layer+14,w
 11246  0696  3EC8               	addlw	200
 11247  0697  0025               	movlb	5	; select bank5
 11248  0698  00BA               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640)
 11249  0699  3000               	movlw	0
 11250  069A  0020               	movlb	0	; select bank0
 11251  069B  3D46               	addwfc	??_BVH2_Appl_Layer+15,w
 11252  069C  0025               	movlb	5	; select bank5
 11253  069D  00BB               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640)
 11254                           
 11255                           ;BVH2_Appl_Layer.c: 1618: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 11256  069E  083B               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640),w
 11257  069F  3A80               	xorlw	128
 11258  06A0  0020               	movlb	0	; select bank0
 11259  06A1  00B7               	movwf	??_BVH2_Appl_Layer
 11260  06A2  3080               	movlw	128
 11261  06A3  0237               	subwf	??_BVH2_Appl_Layer,w
 11262  06A4  1D03               	skipz
 11263  06A5  2EA9               	goto	u8465
 11264  06A6  30C9               	movlw	201
 11265  06A7  0025               	movlb	5	; select bank5
 11266  06A8  023A               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 11267  06A9                     u8465:	
 11268  06A9  1803               	skipnc
 11269  06AA  2ECF               	goto	l9849
 11270  06AB  0025               	movlb	5	; select bank5
 11271  06AC  083B               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640),w
 11272  06AD  3A80               	xorlw	128
 11273  06AE  0020               	movlb	0	; select bank0
 11274  06AF  00B7               	movwf	??_BVH2_Appl_Layer
 11275  06B0  3080               	movlw	128
 11276  06B1  0237               	subwf	??_BVH2_Appl_Layer,w
 11277  06B2  1D03               	skipz
 11278  06B3  2EB7               	goto	u8475
 11279  06B4  303C               	movlw	60
 11280  06B5  0025               	movlb	5	; select bank5
 11281  06B6  023A               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 11282  06B7                     u8475:	
 11283  06B7  1C03               	skipc
 11284  06B8  2EC6               	goto	l9847
 11285  06B9  0025               	movlb	5	; select bank5
 11286  06BA  083A               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 11287  06BB  0020               	movlb	0	; select bank0
 11288  06BC  00B7               	movwf	??_BVH2_Appl_Layer
 11289  06BD  01B8               	clrf	??_BVH2_Appl_Layer+1
 11290  06BE  0837               	movf	??_BVH2_Appl_Layer,w
 11291  06BF  0025               	movlb	5	; select bank5
 11292  06C0  00A4               	movwf	_BVH2_Appl_Layer$1064^(0+640)
 11293  06C1  0020               	movlb	0	; select bank0
 11294  06C2  0838               	movf	??_BVH2_Appl_Layer+1,w
 11295  06C3  0025               	movlb	5	; select bank5
 11296  06C4  00A5               	movwf	(_BVH2_Appl_Layer$1064+1)^(0+640)
 11297  06C5  2ECB               	goto	l1593
 11298  06C6                     l9847:	
 11299  06C6  303C               	movlw	60
 11300  06C7  0025               	movlb	5	; select bank5
 11301  06C8  00A4               	movwf	_BVH2_Appl_Layer$1064^(0+640)
 11302  06C9  3000               	movlw	0
 11303  06CA  00A5               	movwf	(_BVH2_Appl_Layer$1064^(0+640)+1)
 11304  06CB                     l1593:	
 11305  06CB  0825               	movf	(_BVH2_Appl_Layer$1064+1)^(0+640),w
 11306  06CC  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11307  06CD  0824               	movf	_BVH2_Appl_Layer$1064^(0+640),w
 11308  06CE  2F40               	goto	L36
 11309  06CF                     l9849:	
 11310  06CF  30C8               	movlw	200
 11311  06D0  0025               	movlb	5	; select bank5
 11312  06D1  2F43               	goto	L37
 11313  06D2                     l9851:	
 11314                           ;BVH2_Appl_Layer.c: 1619: };BVH2_Appl_Layer.c: 1620: }
 11315                           
 11316                           
 11317                           ;BVH2_Appl_Layer.c: 1621: else {;BVH2_Appl_Layer.c: 1623: Int16 Sb4_PI_sum;;BVH2_Appl_La
      +                          yer.c: 1628: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / ((Int32) 800))
      +                          ) + ((UInt16);BVH2_Appl_Layer.c: 1629: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 11318  06D2  3000               	movlw	0
 11319  06D3  0020               	movlb	0	; select bank0
 11320  06D4  00AB               	movwf	___aldiv@divisor+3
 11321  06D5  3000               	movlw	0
 11322  06D6  00AA               	movwf	___aldiv@divisor+2
 11323  06D7  3003               	movlw	3
 11324  06D8  00A9               	movwf	___aldiv@divisor+1
 11325  06D9  3020               	movlw	32
 11326  06DA  00A8               	movwf	___aldiv@divisor
 11327  06DB  0022               	movlb	2	; select bank2
 11328  06DC  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11329  06DD  0020               	movlb	0	; select bank0
 11330  06DE  00AF               	movwf	___aldiv@dividend+3
 11331  06DF  0022               	movlb	2	; select bank2
 11332  06E0  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11333  06E1  0020               	movlb	0	; select bank0
 11334  06E2  00AE               	movwf	___aldiv@dividend+2
 11335  06E3  0022               	movlb	2	; select bank2
 11336  06E4  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11337  06E5  0020               	movlb	0	; select bank0
 11338  06E6  00AD               	movwf	___aldiv@dividend+1
 11339  06E7  0022               	movlb	2	; select bank2
 11340  06E8  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11341  06E9  0020               	movlb	0	; select bank0
 11342  06EA  00AC               	movwf	___aldiv@dividend
 11343  06EB  3194  24F8  3180   	fcall	___aldiv
 11344  06EE  0020               	movlb	0	; select bank0
 11345  06EF  0828               	movf	?___aldiv,w
 11346  06F0  00B7               	movwf	??_BVH2_Appl_Layer
 11347  06F1  0829               	movf	?___aldiv+1,w
 11348  06F2  00B8               	movwf	??_BVH2_Appl_Layer+1
 11349  06F3  082A               	movf	?___aldiv+2,w
 11350  06F4  00B9               	movwf	??_BVH2_Appl_Layer+2
 11351  06F5  082B               	movf	?___aldiv+3,w
 11352  06F6  00BA               	movwf	??_BVH2_Appl_Layer+3
 11353  06F7  0022               	movlb	2	; select bank2
 11354  06F8  084C               	movf	_ui8_Kp_mat^(0+256),w
 11355  06F9  0020               	movlb	0	; select bank0
 11356  06FA  00BB               	movwf	??_BVH2_Appl_Layer+4
 11357  06FB  01BC               	clrf	??_BVH2_Appl_Layer+5
 11358  06FC  083B               	movf	??_BVH2_Appl_Layer+4,w
 11359  06FD  00A8               	movwf	___wmul@multiplier
 11360  06FE  083C               	movf	??_BVH2_Appl_Layer+5,w
 11361  06FF  00A9               	movwf	___wmul@multiplier+1
 11362  0700  0025               	movlb	5	; select bank5
 11363  0701  0831               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640),w
 11364  0702  0020               	movlb	0	; select bank0
 11365  0703  00AB               	movwf	___wmul@multiplicand+1
 11366  0704  0025               	movlb	5	; select bank5
 11367  0705  0830               	movf	BVH2_Appl_Layer@Sb2_Error^(0+640),w
 11368  0706  0020               	movlb	0	; select bank0
 11369  0707  00AA               	movwf	___wmul@multiplicand
 11370  0708  319E  2634  3180   	fcall	___wmul
 11371  070B  0020               	movlb	0	; select bank0
 11372  070C  0828               	movf	?___wmul,w
 11373  070D  0737               	addwf	??_BVH2_Appl_Layer,w
 11374  070E  0025               	movlb	5	; select bank5
 11375  070F  00BE               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640)
 11376  0710  0020               	movlb	0	; select bank0
 11377  0711  0829               	movf	?___wmul+1,w
 11378  0712  3D38               	addwfc	??_BVH2_Appl_Layer+1,w
 11379  0713  0025               	movlb	5	; select bank5
 11380  0714  00BF               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640)
 11381                           
 11382                           ;BVH2_Appl_Layer.c: 1632: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 11383  0715  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11384  0716  3A80               	xorlw	128
 11385  0717  0020               	movlb	0	; select bank0
 11386  0718  00B7               	movwf	??_BVH2_Appl_Layer
 11387  0719  3080               	movlw	128
 11388  071A  0237               	subwf	??_BVH2_Appl_Layer,w
 11389  071B  1D03               	skipz
 11390  071C  2F20               	goto	u8485
 11391  071D  3001               	movlw	1
 11392  071E  0025               	movlb	5	; select bank5
 11393  071F  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11394  0720                     u8485:	
 11395  0720  1C03               	skipc
 11396  0721  2F2A               	goto	l1600
 11397  0722  3000               	movlw	0
 11398  0723  0025               	movlb	5	; select bank5
 11399  0724  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11400  0725  30CB               	movlw	203
 11401  0726  1903               	skipnz
 11402  0727  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11403  0728  1803               	skipnc
 11404  0729  2F42               	goto	l9863
 11405  072A                     l1600:	
 11406  072A  0025               	movlb	5	; select bank5
 11407  072B  1BBF               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),7
 11408  072C  2F39               	goto	l9861
 11409  072D  3000               	movlw	0
 11410  072E  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11411  072F  3028               	movlw	40
 11412  0730  1903               	skipnz
 11413  0731  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11414  0732  1C03               	skipc
 11415  0733  2F39               	goto	l9861
 11416  0734  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11417  0735  00A7               	movwf	(_BVH2_Appl_Layer$1066+1)^(0+640)
 11418  0736  083E               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11419  0737  00A6               	movwf	_BVH2_Appl_Layer$1066^(0+640)
 11420  0738  2F3D               	goto	l1604
 11421  0739                     l9861:	
 11422  0739  3028               	movlw	40
 11423  073A  00A6               	movwf	_BVH2_Appl_Layer$1066^(0+640)
 11424  073B  3000               	movlw	0
 11425  073C  00A7               	movwf	(_BVH2_Appl_Layer$1066^(0+640)+1)
 11426  073D                     l1604:	
 11427  073D  0827               	movf	(_BVH2_Appl_Layer$1066+1)^(0+640),w
 11428  073E  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11429  073F  0826               	movf	_BVH2_Appl_Layer$1066^(0+640),w
 11430  0740                     L36:	
 11431  0740  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11432  0741  2F46               	goto	l9865
 11433  0742                     l9863:	
 11434  0742  30CA               	movlw	202
 11435  0743                     L37:	
 11436  0743  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11437  0744  3000               	movlw	0
 11438  0745  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2^(0+640)+1)
 11439  0746                     l9865:	
 11440                           
 11441                           ;BVH2_Appl_Layer.c: 1633: };BVH2_Appl_Layer.c: 1634: };BVH2_Appl_Layer.c: 1639: if (Sb1_
      +                          Logical_Operator3){
 11442  0746  083D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 11443  0747  1903               	btfsc	3,2
 11444  0748  2F4D               	goto	l9869
 11445                           
 11446                           ;BVH2_Appl_Layer.c: 1640: ui16_duty_cycle_mat = 0;
 11447  0749  0023               	movlb	3	; select bank3
 11448  074A  01BA               	clrf	_ui16_duty_cycle_mat^(0+384)
 11449  074B  01BB               	clrf	(_ui16_duty_cycle_mat+1)^(0+384)
 11450                           
 11451                           ;BVH2_Appl_Layer.c: 1641: }
 11452  074C  2F52               	goto	l1606
 11453  074D                     l9869:	
 11454                           
 11455                           ;BVH2_Appl_Layer.c: 1642: else {;BVH2_Appl_Layer.c: 1643: ui16_duty_cycle_mat = ui16_Spe
      +                          ed_demand_mat;
 11456  074D  0023               	movlb	3	; select bank3
 11457  074E  0831               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 11458  074F  00BB               	movwf	(_ui16_duty_cycle_mat+1)^(0+384)
 11459  0750  0830               	movf	_ui16_Speed_demand_mat^(0+384),w
 11460  0751  00BA               	movwf	_ui16_duty_cycle_mat^(0+384)
 11461  0752                     l1606:	
 11462                           
 11463                           ;BVH2_Appl_Layer.c: 1644: };BVH2_Appl_Layer.c: 1647: bl_Pumpoff_Alarm = Sb1_Logical_Oper
      +                          ator2;
 11464  0752  0025               	movlb	5	; select bank5
 11465  0753  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640),w
 11466  0754  0020               	movlb	0	; select bank0
 11467  0755  00B7               	movwf	??_BVH2_Appl_Layer
 11468  0756  0837               	movf	??_BVH2_Appl_Layer,w
 11469  0757  0023               	movlb	3	; select bank3
 11470  0758  00DB               	movwf	_bl_Pumpoff_Alarm^(0+384)
 11471                           
 11472                           ;BVH2_Appl_Layer.c: 1648: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 11473  0759  0025               	movlb	5	; select bank5
 11474  075A  0837               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640),w
 11475  075B  0020               	movlb	0	; select bank0
 11476  075C  00B7               	movwf	??_BVH2_Appl_Layer
 11477  075D  0837               	movf	??_BVH2_Appl_Layer,w
 11478  075E  0022               	movlb	2	; select bank2
 11479  075F  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 11480                           
 11481                           ;BVH2_Appl_Layer.c: 1652: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<;BVH2_Appl_Layer.c: 1653: 3));
 11482  0760  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11483  0761  0020               	movlb	0	; select bank0
 11484  0762  00B7               	movwf	??_BVH2_Appl_Layer
 11485  0763  0022               	movlb	2	; select bank2
 11486  0764  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11487  0765  0020               	movlb	0	; select bank0
 11488  0766  00B8               	movwf	??_BVH2_Appl_Layer+1
 11489  0767  0022               	movlb	2	; select bank2
 11490  0768  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11491  0769  0020               	movlb	0	; select bank0
 11492  076A  00B9               	movwf	??_BVH2_Appl_Layer+2
 11493  076B  0022               	movlb	2	; select bank2
 11494  076C  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11495  076D  0020               	movlb	0	; select bank0
 11496  076E  00BA               	movwf	??_BVH2_Appl_Layer+3
 11497  076F  0023               	movlb	3	; select bank3
 11498  0770  0833               	movf	(_ui8_Ki_mat+1)^(0+384),w
 11499  0771  0020               	movlb	0	; select bank0
 11500  0772  00A9               	movwf	___wmul@multiplier+1
 11501  0773  0023               	movlb	3	; select bank3
 11502  0774  0832               	movf	_ui8_Ki_mat^(0+384),w
 11503  0775  0020               	movlb	0	; select bank0
 11504  0776  00A8               	movwf	___wmul@multiplier
 11505  0777  0025               	movlb	5	; select bank5
 11506  0778  0831               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640),w
 11507  0779  0020               	movlb	0	; select bank0
 11508  077A  00AB               	movwf	___wmul@multiplicand+1
 11509  077B  0025               	movlb	5	; select bank5
 11510  077C  0830               	movf	BVH2_Appl_Layer@Sb2_Error^(0+640),w
 11511  077D  0020               	movlb	0	; select bank0
 11512  077E  00AA               	movwf	___wmul@multiplicand
 11513  077F  319E  2634  3180   	fcall	___wmul
 11514  0782  0020               	movlb	0	; select bank0
 11515  0783  0828               	movf	?___wmul,w
 11516  0784  00BB               	movwf	??_BVH2_Appl_Layer+4
 11517  0785  0829               	movf	?___wmul+1,w
 11518  0786  00BC               	movwf	??_BVH2_Appl_Layer+5
 11519  0787  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11520  0788  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11521  0789  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11522  078A  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11523  078B  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11524  078C  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11525  078D  083B               	movf	??_BVH2_Appl_Layer+4,w
 11526  078E  00BD               	movwf	??_BVH2_Appl_Layer+6
 11527  078F  083C               	movf	??_BVH2_Appl_Layer+5,w
 11528  0790  00BE               	movwf	??_BVH2_Appl_Layer+7
 11529  0791  3000               	movlw	0
 11530  0792  1BBE               	btfsc	??_BVH2_Appl_Layer+7,7
 11531  0793  30FF               	movlw	255
 11532  0794  00BF               	movwf	??_BVH2_Appl_Layer+8
 11533  0795  00C0               	movwf	??_BVH2_Appl_Layer+9
 11534  0796  083D               	movf	??_BVH2_Appl_Layer+6,w
 11535  0797  07B7               	addwf	??_BVH2_Appl_Layer,f
 11536  0798  083E               	movf	??_BVH2_Appl_Layer+7,w
 11537  0799  3DB8               	addwfc	??_BVH2_Appl_Layer+1,f
 11538  079A  083F               	movf	??_BVH2_Appl_Layer+8,w
 11539  079B  3DB9               	addwfc	??_BVH2_Appl_Layer+2,f
 11540  079C  0840               	movf	??_BVH2_Appl_Layer+9,w
 11541  079D  3DBA               	addwfc	??_BVH2_Appl_Layer+3,f
 11542  079E  083A               	movf	??_BVH2_Appl_Layer+3,w
 11543  079F  0022               	movlb	2	; select bank2
 11544  07A0  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11545  07A1  0020               	movlb	0	; select bank0
 11546  07A2  0839               	movf	??_BVH2_Appl_Layer+2,w
 11547  07A3  0022               	movlb	2	; select bank2
 11548  07A4  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11549  07A5  0020               	movlb	0	; select bank0
 11550  07A6  0838               	movf	??_BVH2_Appl_Layer+1,w
 11551  07A7  0022               	movlb	2	; select bank2
 11552  07A8  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11553  07A9  0020               	movlb	0	; select bank0
 11554  07AA  0837               	movf	??_BVH2_Appl_Layer,w
 11555  07AB  0022               	movlb	2	; select bank2
 11556  07AC  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11557                           
 11558                           ;BVH2_Appl_Layer.c: 1656: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 11559  07AD  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 11560  07AE  2FBA               	goto	l9875
 11561  07AF  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11562  07B0  1D03               	btfss	3,2
 11563  07B1  2FED               	goto	l9881
 11564  07B2  3041               	movlw	65
 11565  07B3  0268               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11566  07B4  3077               	movlw	119
 11567  07B5  3B69               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11568  07B6  3002               	movlw	2
 11569  07B7  3B6A               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11570  07B8  1803               	btfsc	3,0
 11571  07B9  2FED               	goto	l9881
 11572  07BA                     l9875:	
 11573  07BA  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 11574  07BB  2FD5               	goto	l9879
 11575  07BC  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11576  07BD  1D03               	btfss	3,2
 11577  07BE  2FC6               	goto	l9877
 11578  07BF  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11579  07C0  1D03               	btfss	3,2
 11580  07C1  2FC6               	goto	l9877
 11581  07C2  307D               	movlw	125
 11582  07C3  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11583  07C4  1C03               	btfss	3,0
 11584  07C5  2FD5               	goto	l9879
 11585  07C6                     l9877:	
 11586  07C6  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11587  07C7  0025               	movlb	5	; select bank5
 11588  07C8  00A3               	movwf	(_BVH2_Appl_Layer$1067+3)^(0+640)
 11589  07C9  0022               	movlb	2	; select bank2
 11590  07CA  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11591  07CB  0025               	movlb	5	; select bank5
 11592  07CC  00A2               	movwf	(_BVH2_Appl_Layer$1067+2)^(0+640)
 11593  07CD  0022               	movlb	2	; select bank2
 11594  07CE  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11595  07CF  0025               	movlb	5	; select bank5
 11596  07D0  00A1               	movwf	(_BVH2_Appl_Layer$1067+1)^(0+640)
 11597  07D1  0022               	movlb	2	; select bank2
 11598  07D2  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11599  07D3  0025               	movlb	5	; select bank5
 11600  07D4  2FDD               	goto	L38
 11601  07D5                     l9879:	
 11602  07D5  3000               	movlw	0
 11603  07D6  0025               	movlb	5	; select bank5
 11604  07D7  00A3               	movwf	(_BVH2_Appl_Layer$1067+3)^(0+640)
 11605  07D8  3000               	movlw	0
 11606  07D9  00A2               	movwf	(_BVH2_Appl_Layer$1067+2)^(0+640)
 11607  07DA  307D               	movlw	125
 11608  07DB  00A1               	movwf	(_BVH2_Appl_Layer$1067+1)^(0+640)
 11609  07DC  3000               	movlw	0
 11610  07DD                     L38:	
 11611  07DD  00A0               	movwf	_BVH2_Appl_Layer$1067^(0+640)
 11612  07DE  0823               	movf	(_BVH2_Appl_Layer$1067+3)^(0+640),w
 11613  07DF  0022               	movlb	2	; select bank2
 11614  07E0  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11615  07E1  0025               	movlb	5	; select bank5
 11616  07E2  0822               	movf	(_BVH2_Appl_Layer$1067+2)^(0+640),w
 11617  07E3  0022               	movlb	2	; select bank2
 11618  07E4  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11619  07E5  0025               	movlb	5	; select bank5
 11620  07E6  0821               	movf	(_BVH2_Appl_Layer$1067+1)^(0+640),w
 11621  07E7  0022               	movlb	2	; select bank2
 11622  07E8  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11623  07E9  0025               	movlb	5	; select bank5
 11624  07EA  0820               	movf	_BVH2_Appl_Layer$1067^(0+640),w
 11625  07EB  0022               	movlb	2	; select bank2
 11626  07EC  2FF4               	goto	L39
 11627  07ED                     l9881:	
 11628  07ED  3000               	movlw	0
 11629  07EE  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11630  07EF  3002               	movlw	2
 11631  07F0  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11632  07F1  3077               	movlw	119
 11633  07F2  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11634  07F3  3040               	movlw	64
 11635  07F4                     L39:	
 11636  07F4  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11637                           
 11638                           ;BVH2_Appl_Layer.c: 1659: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 11639  07F5  01ED               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 11640  07F6  0008               	return
 11641  07F7                     __end_of_BVH2_Appl_Layer:	
 11642                           
 11643                           	psect	swtext2
 11644  1868                     __pswtext2:	
 11645  1868                     S11837:	
 11646  1868  3181  2921         	ljmp	l9257
 11647  186A  3181  2919         	ljmp	l9253
 11648  186C  3181  2905         	ljmp	l9243
 11649  186E  3181  290D         	ljmp	l9247
 11650  1870  3181  291D         	ljmp	l9255
 11651  1872  3181  2911         	ljmp	l9249
 11652  1874  3181  2915         	ljmp	l9251
 11653  1876  3181  2909         	ljmp	l9245
 11654                           
 11655                           	psect	text30
 11656  1E34                     __ptext30:	
 11657 ;; *************** function ___wmul *****************
 11658 ;; Defined at:
 11659 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;  multiplier      2    8[BANK0 ] unsigned int 
 11662 ;;  multiplicand    2   10[BANK0 ] unsigned int 
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;  product         2   12[BANK0 ] unsigned int 
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  2    8[BANK0 ] unsigned int 
 11667 ;; Registers used:
 11668 ;;		wreg, status,2, status,0
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11674 ;;      Params:         0       4       0       0       0       0       0       0
 11675 ;;      Locals:         0       2       0       0       0       0       0       0
 11676 ;;      Temps:          0       0       0       0       0       0       0       0
 11677 ;;      Totals:         0       6       0       0       0       0       0       0
 11678 ;;Total ram usage:        6 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    3
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_rate_limit
 11685 ;;		_EOL
 11686 ;;		_interrrupt_bldc
 11687 ;;		_main
 11688 ;;		_BVH2_Appl_Layer
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           
 11693                           ;psect for function ___wmul
 11694  1E34                     ___wmul:	
 11695                           
 11696                           ;incstack = 0
 11697                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11698  1E34  0020               	movlb	0	; select bank0
 11699  1E35  01AC               	clrf	___wmul@product
 11700  1E36  01AD               	clrf	___wmul@product+1
 11701  1E37                     l8705:	
 11702  1E37  1C28               	btfss	___wmul@multiplier,0
 11703  1E38  2E3D               	goto	l1861
 11704  1E39  082A               	movf	___wmul@multiplicand,w
 11705  1E3A  07AC               	addwf	___wmul@product,f
 11706  1E3B  082B               	movf	___wmul@multiplicand+1,w
 11707  1E3C  3DAD               	addwfc	___wmul@product+1,f
 11708  1E3D                     l1861:	
 11709  1E3D  3001               	movlw	1
 11710  1E3E                     u6505:	
 11711  1E3E  35AA               	lslf	___wmul@multiplicand,f
 11712  1E3F  0DAB               	rlf	___wmul@multiplicand+1,f
 11713  1E40  0B89               	decfsz	9,f
 11714  1E41  2E3E               	goto	u6505
 11715  1E42  3001               	movlw	1
 11716  1E43                     u6515:	
 11717  1E43  36A9               	lsrf	___wmul@multiplier+1,f
 11718  1E44  0CA8               	rrf	___wmul@multiplier,f
 11719  1E45  0B89               	decfsz	9,f
 11720  1E46  2E43               	goto	u6515
 11721  1E47  0828               	movf	___wmul@multiplier,w
 11722  1E48  0429               	iorwf	___wmul@multiplier+1,w
 11723  1E49  1D03               	btfss	3,2
 11724  1E4A  2E37               	goto	l8705
 11725  1E4B  082D               	movf	___wmul@product+1,w
 11726  1E4C  00A9               	movwf	?___wmul+1
 11727  1E4D  082C               	movf	___wmul@product,w
 11728  1E4E  00A8               	movwf	?___wmul
 11729  1E4F  0008               	return
 11730  1E50                     __end_of___wmul:	
 11731                           
 11732                           	psect	text31
 11733  1F9B                     __ptext31:	
 11734 ;; *************** function ___lmul *****************
 11735 ;; Defined at:
 11736 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 11737 ;; Parameters:    Size  Location     Type
 11738 ;;  multiplier      4    8[BANK0 ] unsigned long 
 11739 ;;  multiplicand    4   12[BANK0 ] unsigned long 
 11740 ;; Auto vars:     Size  Location     Type
 11741 ;;  product         4   16[BANK0 ] unsigned long 
 11742 ;; Return value:  Size  Location     Type
 11743 ;;                  4    8[BANK0 ] unsigned long 
 11744 ;; Registers used:
 11745 ;;		wreg, status,2, status,0
 11746 ;; Tracked objects:
 11747 ;;		On entry : 0/0
 11748 ;;		On exit  : 0/0
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11751 ;;      Params:         0       8       0       0       0       0       0       0
 11752 ;;      Locals:         0       4       0       0       0       0       0       0
 11753 ;;      Temps:          0       0       0       0       0       0       0       0
 11754 ;;      Totals:         0      12       0       0       0       0       0       0
 11755 ;;Total ram usage:       12 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    3
 11758 ;; This function calls:
 11759 ;;		Nothing
 11760 ;; This function is called by:
 11761 ;;		_BVH2_Appl_Layer
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           
 11766                           ;psect for function ___lmul
 11767  1F9B                     ___lmul:	
 11768                           
 11769                           ;incstack = 0
 11770                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11771  1F9B  3000               	movlw	0
 11772  1F9C  0020               	movlb	0	; select bank0
 11773  1F9D  00B3               	movwf	___lmul@product+3
 11774  1F9E  3000               	movlw	0
 11775  1F9F  00B2               	movwf	___lmul@product+2
 11776  1FA0  3000               	movlw	0
 11777  1FA1  00B1               	movwf	___lmul@product+1
 11778  1FA2  3000               	movlw	0
 11779  1FA3  00B0               	movwf	___lmul@product
 11780  1FA4                     l8719:	
 11781  1FA4  1C28               	btfss	___lmul@multiplier,0
 11782  1FA5  2FAE               	goto	l8723
 11783  1FA6  082C               	movf	___lmul@multiplicand,w
 11784  1FA7  07B0               	addwf	___lmul@product,f
 11785  1FA8  082D               	movf	___lmul@multiplicand+1,w
 11786  1FA9  3DB1               	addwfc	___lmul@product+1,f
 11787  1FAA  082E               	movf	___lmul@multiplicand+2,w
 11788  1FAB  3DB2               	addwfc	___lmul@product+2,f
 11789  1FAC  082F               	movf	___lmul@multiplicand+3,w
 11790  1FAD  3DB3               	addwfc	___lmul@product+3,f
 11791  1FAE                     l8723:	
 11792  1FAE  3001               	movlw	1
 11793  1FAF                     u6545:	
 11794  1FAF  35AC               	lslf	___lmul@multiplicand,f
 11795  1FB0  0DAD               	rlf	___lmul@multiplicand+1,f
 11796  1FB1  0DAE               	rlf	___lmul@multiplicand+2,f
 11797  1FB2  0DAF               	rlf	___lmul@multiplicand+3,f
 11798  1FB3  0B89               	decfsz	9,f
 11799  1FB4  2FAF               	goto	u6545
 11800  1FB5  3001               	movlw	1
 11801  1FB6                     u6555:	
 11802  1FB6  36AB               	lsrf	___lmul@multiplier+3,f
 11803  1FB7  0CAA               	rrf	___lmul@multiplier+2,f
 11804  1FB8  0CA9               	rrf	___lmul@multiplier+1,f
 11805  1FB9  0CA8               	rrf	___lmul@multiplier,f
 11806  1FBA  0B89               	decfsz	9,f
 11807  1FBB  2FB6               	goto	u6555
 11808  1FBC  082B               	movf	___lmul@multiplier+3,w
 11809  1FBD  042A               	iorwf	___lmul@multiplier+2,w
 11810  1FBE  0429               	iorwf	___lmul@multiplier+1,w
 11811  1FBF  0428               	iorwf	___lmul@multiplier,w
 11812  1FC0  1D03               	skipz
 11813  1FC1  2FA4               	goto	l8719
 11814  1FC2  0833               	movf	___lmul@product+3,w
 11815  1FC3  00AB               	movwf	?___lmul+3
 11816  1FC4  0832               	movf	___lmul@product+2,w
 11817  1FC5  00AA               	movwf	?___lmul+2
 11818  1FC6  0831               	movf	___lmul@product+1,w
 11819  1FC7  00A9               	movwf	?___lmul+1
 11820  1FC8  0830               	movf	___lmul@product,w
 11821  1FC9  00A8               	movwf	?___lmul
 11822  1FCA  0008               	return
 11823  1FCB                     __end_of___lmul:	
 11824                           
 11825                           	psect	text32
 11826  14F8                     __ptext32:	
 11827 ;; *************** function ___aldiv *****************
 11828 ;; Defined at:
 11829 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11830 ;; Parameters:    Size  Location     Type
 11831 ;;  divisor         4    8[BANK0 ] long 
 11832 ;;  dividend        4   12[BANK0 ] long 
 11833 ;; Auto vars:     Size  Location     Type
 11834 ;;  quotient        4   19[BANK0 ] long 
 11835 ;;  sign            1   18[BANK0 ] unsigned char 
 11836 ;;  counter         1   17[BANK0 ] unsigned char 
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  4    8[BANK0 ] long 
 11839 ;; Registers used:
 11840 ;;		wreg, status,2, status,0
 11841 ;; Tracked objects:
 11842 ;;		On entry : 0/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11846 ;;      Params:         0       8       0       0       0       0       0       0
 11847 ;;      Locals:         0       6       0       0       0       0       0       0
 11848 ;;      Temps:          0       1       0       0       0       0       0       0
 11849 ;;      Totals:         0      15       0       0       0       0       0       0
 11850 ;;Total ram usage:       15 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    3
 11853 ;; This function calls:
 11854 ;;		Nothing
 11855 ;; This function is called by:
 11856 ;;		_BVH2_Appl_Layer
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           
 11861                           ;psect for function ___aldiv
 11862  14F8                     ___aldiv:	
 11863                           
 11864                           ;incstack = 0
 11865                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11866  14F8  0020               	movlb	0	; select bank0
 11867  14F9  01B2               	clrf	___aldiv@sign
 11868  14FA  1FAB               	btfss	___aldiv@divisor+3,7
 11869  14FB  2D09               	goto	l1926
 11870  14FC  09A8               	comf	___aldiv@divisor,f
 11871  14FD  09A9               	comf	___aldiv@divisor+1,f
 11872  14FE  09AA               	comf	___aldiv@divisor+2,f
 11873  14FF  09AB               	comf	___aldiv@divisor+3,f
 11874  1500  0AA8               	incf	___aldiv@divisor,f
 11875  1501  1903               	skipnz
 11876  1502  0AA9               	incf	___aldiv@divisor+1,f
 11877  1503  1903               	skipnz
 11878  1504  0AAA               	incf	___aldiv@divisor+2,f
 11879  1505  1903               	skipnz
 11880  1506  0AAB               	incf	___aldiv@divisor+3,f
 11881  1507  01B2               	clrf	___aldiv@sign
 11882  1508  0AB2               	incf	___aldiv@sign,f
 11883  1509                     l1926:	
 11884  1509  1FAF               	btfss	___aldiv@dividend+3,7
 11885  150A  2D1A               	goto	l8741
 11886  150B  09AC               	comf	___aldiv@dividend,f
 11887  150C  09AD               	comf	___aldiv@dividend+1,f
 11888  150D  09AE               	comf	___aldiv@dividend+2,f
 11889  150E  09AF               	comf	___aldiv@dividend+3,f
 11890  150F  0AAC               	incf	___aldiv@dividend,f
 11891  1510  1903               	skipnz
 11892  1511  0AAD               	incf	___aldiv@dividend+1,f
 11893  1512  1903               	skipnz
 11894  1513  0AAE               	incf	___aldiv@dividend+2,f
 11895  1514  1903               	skipnz
 11896  1515  0AAF               	incf	___aldiv@dividend+3,f
 11897  1516  3001               	movlw	1
 11898  1517  00B0               	movwf	??___aldiv
 11899  1518  0830               	movf	??___aldiv,w
 11900  1519  06B2               	xorwf	___aldiv@sign,f
 11901  151A                     l8741:	
 11902  151A  3000               	movlw	0
 11903  151B  00B6               	movwf	___aldiv@quotient+3
 11904  151C  3000               	movlw	0
 11905  151D  00B5               	movwf	___aldiv@quotient+2
 11906  151E  3000               	movlw	0
 11907  151F  00B4               	movwf	___aldiv@quotient+1
 11908  1520  3000               	movlw	0
 11909  1521  00B3               	movwf	___aldiv@quotient
 11910  1522  082B               	movf	___aldiv@divisor+3,w
 11911  1523  042A               	iorwf	___aldiv@divisor+2,w
 11912  1524  0429               	iorwf	___aldiv@divisor+1,w
 11913  1525  0428               	iorwf	___aldiv@divisor,w
 11914  1526  1903               	skipnz
 11915  1527  2D63               	goto	l8763
 11916  1528  01B1               	clrf	___aldiv@counter
 11917  1529  0AB1               	incf	___aldiv@counter,f
 11918  152A                     l8749:	
 11919  152A  1BAB               	btfsc	___aldiv@divisor+3,7
 11920  152B  2D38               	goto	l8751
 11921  152C  3001               	movlw	1
 11922  152D                     u6605:	
 11923  152D  35A8               	lslf	___aldiv@divisor,f
 11924  152E  0DA9               	rlf	___aldiv@divisor+1,f
 11925  152F  0DAA               	rlf	___aldiv@divisor+2,f
 11926  1530  0DAB               	rlf	___aldiv@divisor+3,f
 11927  1531  0B89               	decfsz	9,f
 11928  1532  2D2D               	goto	u6605
 11929  1533  3001               	movlw	1
 11930  1534  00B0               	movwf	??___aldiv
 11931  1535  0830               	movf	??___aldiv,w
 11932  1536  07B1               	addwf	___aldiv@counter,f
 11933  1537  2D2A               	goto	l8749
 11934  1538                     l8751:	
 11935  1538  3001               	movlw	1
 11936  1539                     u6625:	
 11937  1539  35B3               	lslf	___aldiv@quotient,f
 11938  153A  0DB4               	rlf	___aldiv@quotient+1,f
 11939  153B  0DB5               	rlf	___aldiv@quotient+2,f
 11940  153C  0DB6               	rlf	___aldiv@quotient+3,f
 11941  153D  0B89               	decfsz	9,f
 11942  153E  2D39               	goto	u6625
 11943  153F  082B               	movf	___aldiv@divisor+3,w
 11944  1540  022F               	subwf	___aldiv@dividend+3,w
 11945  1541  1D03               	skipz
 11946  1542  2D4D               	goto	u6635
 11947  1543  082A               	movf	___aldiv@divisor+2,w
 11948  1544  022E               	subwf	___aldiv@dividend+2,w
 11949  1545  1D03               	skipz
 11950  1546  2D4D               	goto	u6635
 11951  1547  0829               	movf	___aldiv@divisor+1,w
 11952  1548  022D               	subwf	___aldiv@dividend+1,w
 11953  1549  1D03               	skipz
 11954  154A  2D4D               	goto	u6635
 11955  154B  0828               	movf	___aldiv@divisor,w
 11956  154C  022C               	subwf	___aldiv@dividend,w
 11957  154D                     u6635:	
 11958  154D  1C03               	skipc
 11959  154E  2D58               	goto	l8759
 11960  154F  0828               	movf	___aldiv@divisor,w
 11961  1550  02AC               	subwf	___aldiv@dividend,f
 11962  1551  0829               	movf	___aldiv@divisor+1,w
 11963  1552  3BAD               	subwfb	___aldiv@dividend+1,f
 11964  1553  082A               	movf	___aldiv@divisor+2,w
 11965  1554  3BAE               	subwfb	___aldiv@dividend+2,f
 11966  1555  082B               	movf	___aldiv@divisor+3,w
 11967  1556  3BAF               	subwfb	___aldiv@dividend+3,f
 11968  1557  1433               	bsf	___aldiv@quotient,0
 11969  1558                     l8759:	
 11970  1558  3001               	movlw	1
 11971  1559                     u6645:	
 11972  1559  36AB               	lsrf	___aldiv@divisor+3,f
 11973  155A  0CAA               	rrf	___aldiv@divisor+2,f
 11974  155B  0CA9               	rrf	___aldiv@divisor+1,f
 11975  155C  0CA8               	rrf	___aldiv@divisor,f
 11976  155D  0B89               	decfsz	9,f
 11977  155E  2D59               	goto	u6645
 11978  155F  3001               	movlw	1
 11979  1560  02B1               	subwf	___aldiv@counter,f
 11980  1561  1D03               	btfss	3,2
 11981  1562  2D38               	goto	l8751
 11982  1563                     l8763:	
 11983  1563  0832               	movf	___aldiv@sign,w
 11984  1564  1903               	btfsc	3,2
 11985  1565  2D71               	goto	l8767
 11986  1566  09B3               	comf	___aldiv@quotient,f
 11987  1567  09B4               	comf	___aldiv@quotient+1,f
 11988  1568  09B5               	comf	___aldiv@quotient+2,f
 11989  1569  09B6               	comf	___aldiv@quotient+3,f
 11990  156A  0AB3               	incf	___aldiv@quotient,f
 11991  156B  1903               	skipnz
 11992  156C  0AB4               	incf	___aldiv@quotient+1,f
 11993  156D  1903               	skipnz
 11994  156E  0AB5               	incf	___aldiv@quotient+2,f
 11995  156F  1903               	skipnz
 11996  1570  0AB6               	incf	___aldiv@quotient+3,f
 11997  1571                     l8767:	
 11998  1571  0836               	movf	___aldiv@quotient+3,w
 11999  1572  00AB               	movwf	?___aldiv+3
 12000  1573  0835               	movf	___aldiv@quotient+2,w
 12001  1574  00AA               	movwf	?___aldiv+2
 12002  1575  0834               	movf	___aldiv@quotient+1,w
 12003  1576  00A9               	movwf	?___aldiv+1
 12004  1577  0833               	movf	___aldiv@quotient,w
 12005  1578  00A8               	movwf	?___aldiv
 12006  1579  0008               	return
 12007  157A                     __end_of___aldiv:	
 12008                           
 12009                           	psect	text33
 12010  1305                     __ptext33:	
 12011 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 12012 ;; Defined at:
 12013 ;;		line 1889 in file "../T_Link/BVH2_Appl_Layer.c"
 12014 ;; Parameters:    Size  Location     Type
 12015 ;;		None
 12016 ;; Auto vars:     Size  Location     Type
 12017 ;;		None
 12018 ;; Return value:  Size  Location     Type
 12019 ;;                  1    wreg      void 
 12020 ;; Registers used:
 12021 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12022 ;; Tracked objects:
 12023 ;;		On entry : 0/0
 12024 ;;		On exit  : 0/0
 12025 ;;		Unchanged: 0/0
 12026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12027 ;;      Params:         0       0       0       0       0       0       0       0
 12028 ;;      Locals:         0       0       0       0       0       0       0       0
 12029 ;;      Temps:          0       0       0       0       0       0       0       0
 12030 ;;      Totals:         0       0       0       0       0       0       0       0
 12031 ;;Total ram usage:        0 bytes
 12032 ;; Hardware stack levels used:    1
 12033 ;; Hardware stack levels required when called:    3
 12034 ;; This function calls:
 12035 ;;		Nothing
 12036 ;; This function is called by:
 12037 ;;		_BVH2_Appl_Layer
 12038 ;; This function uses a non-reentrant model
 12039 ;;
 12040                           
 12041                           
 12042                           ;psect for function _Cb56_UbatHandling_node_fcn2
 12043  1305                     _Cb56_UbatHandling_node_fcn2:	
 12044                           
 12045                           ;BVH2_Appl_Layer.c: 1892: if (((UInt8)ui8_BattVolt_mat) > 147) {
 12046                           
 12047                           ;incstack = 0
 12048                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 12049  1305  3094               	movlw	148
 12050  1306  0021               	movlb	1	; select bank1
 12051  1307  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
 12052  1308  1803               	btfsc	3,0
 12053  1309  2B11               	goto	l8663
 12054  130A  2B2B               	goto	l8669
 12055  130B                     l1657:	
 12056                           ;BVH2_Appl_Layer.c: 1895: case 2: {
 12057                           
 12058                           ;BVH2_Appl_Layer.c: 1894: switch (SIBFS_UbatHandling_b.Aux_sflag3) {
 12059                           
 12060                           
 12061                           ;BVH2_Appl_Layer.c: 1896: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 12062  130B  1257               	bcf	_SIBFS_UbatHandling_b,4
 12063                           
 12064                           ;BVH2_Appl_Layer.c: 1897: break;
 12065  130C  2B1B               	goto	l1658
 12066  130D                     l1659:	
 12067                           ;BVH2_Appl_Layer.c: 1898: };BVH2_Appl_Layer.c: 1899: case 3: {
 12068                           
 12069                           
 12070                           ;BVH2_Appl_Layer.c: 1900: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 12071  130D  12D7               	bcf	_SIBFS_UbatHandling_b,5
 12072                           
 12073                           ;BVH2_Appl_Layer.c: 1901: break;
 12074  130E  2B1B               	goto	l1658
 12075  130F                     l1660:	
 12076                           ;BVH2_Appl_Layer.c: 1902: };BVH2_Appl_Layer.c: 1903: default: {
 12077                           
 12078                           
 12079                           ;BVH2_Appl_Layer.c: 1904: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 12080  130F  1357               	bcf	_SIBFS_UbatHandling_b,6
 12081                           
 12082                           ;BVH2_Appl_Layer.c: 1905: };BVH2_Appl_Layer.c: 1906: }
 12083  1310  2B1B               	goto	l1658
 12084  1311                     l8663:	
 12085  1311  0020               	movlb	0	; select bank0
 12086  1312  0857               	movf	_SIBFS_UbatHandling_b,w
 12087  1313  3907               	andlw	7
 12088                           
 12089                           ; Switch size 1, requested type "space"
 12090                           ; Number of cases is 2, Range of values is 2 to 3
 12091                           ; switch strategies available:
 12092                           ; Name         Instructions Cycles
 12093                           ; simple_byte            7     4 (average)
 12094                           ; direct_byte           13     9 (fixed)
 12095                           ; jumptable            263     9 (fixed)
 12096                           ;	Chosen strategy is simple_byte
 12097  1314  3A02               	xorlw	2	; case 2
 12098  1315  1903               	skipnz
 12099  1316  2B0B               	goto	l1657
 12100  1317  3A01               	xorlw	1	; case 3
 12101  1318  1903               	skipnz
 12102  1319  2B0D               	goto	l1659
 12103  131A  2B0F               	goto	l1660
 12104  131B                     l1658:	
 12105                           
 12106                           ;BVH2_Appl_Layer.c: 1907: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 12107  131B  1657               	bsf	_SIBFS_UbatHandling_b,4
 12108                           
 12109                           ;BVH2_Appl_Layer.c: 1908: Cb56_odPumpOff = 1;
 12110  131C  0022               	movlb	2	; select bank2
 12111  131D  01B6               	clrf	_Cb56_odPumpOff^(0+256)
 12112  131E  0AB6               	incf	_Cb56_odPumpOff^(0+256),f
 12113                           
 12114                           ;BVH2_Appl_Layer.c: 1909: Cb56_odFixedValueSel = 0;
 12115  131F  0021               	movlb	1	; select bank1
 12116  1320  01C6               	clrf	_Cb56_odFixedValueSel^(0+128)
 12117                           
 12118                           ;BVH2_Appl_Layer.c: 1910: Cb56_oUbat_Alarm_High = 1;
 12119  1321  0022               	movlb	2	; select bank2
 12120  1322  01B7               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 12121  1323  0AB7               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 12122                           
 12123                           ;BVH2_Appl_Layer.c: 1911: }
 12124  1324  0008               	return
 12125  1325                     l1663:	
 12126                           ;BVH2_Appl_Layer.c: 1914: case 2: {
 12127                           
 12128                           ;BVH2_Appl_Layer.c: 1912: else {;BVH2_Appl_Layer.c: 1913: switch (SIBFS_UbatHandling_b.A
      +                          ux_sflag3) {
 12129                           
 12130                           
 12131                           ;BVH2_Appl_Layer.c: 1915: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 12132  1325  1257               	bcf	_SIBFS_UbatHandling_b,4
 12133                           
 12134                           ;BVH2_Appl_Layer.c: 1916: break;
 12135  1326  2B35               	goto	l8671
 12136  1327                     l1665:	
 12137                           ;BVH2_Appl_Layer.c: 1917: };BVH2_Appl_Layer.c: 1918: case 3: {
 12138                           
 12139                           
 12140                           ;BVH2_Appl_Layer.c: 1919: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 12141  1327  12D7               	bcf	_SIBFS_UbatHandling_b,5
 12142                           
 12143                           ;BVH2_Appl_Layer.c: 1920: break;
 12144  1328  2B35               	goto	l8671
 12145  1329                     l1666:	
 12146                           ;BVH2_Appl_Layer.c: 1921: };BVH2_Appl_Layer.c: 1922: default: {
 12147                           
 12148                           
 12149                           ;BVH2_Appl_Layer.c: 1923: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 12150  1329  1357               	bcf	_SIBFS_UbatHandling_b,6
 12151                           
 12152                           ;BVH2_Appl_Layer.c: 1924: };BVH2_Appl_Layer.c: 1925: }
 12153  132A  2B35               	goto	l8671
 12154  132B                     l8669:	
 12155  132B  0020               	movlb	0	; select bank0
 12156  132C  0857               	movf	_SIBFS_UbatHandling_b,w
 12157  132D  3907               	andlw	7
 12158                           
 12159                           ; Switch size 1, requested type "space"
 12160                           ; Number of cases is 2, Range of values is 2 to 3
 12161                           ; switch strategies available:
 12162                           ; Name         Instructions Cycles
 12163                           ; simple_byte            7     4 (average)
 12164                           ; direct_byte           13     9 (fixed)
 12165                           ; jumptable            263     9 (fixed)
 12166                           ;	Chosen strategy is simple_byte
 12167  132E  3A02               	xorlw	2	; case 2
 12168  132F  1903               	skipnz
 12169  1330  2B25               	goto	l1663
 12170  1331  3A01               	xorlw	1	; case 3
 12171  1332  1903               	skipnz
 12172  1333  2B27               	goto	l1665
 12173  1334  2B29               	goto	l1666
 12174  1335                     l8671:	
 12175                           
 12176                           ;BVH2_Appl_Layer.c: 1928: if (((UInt8)ui8_BattVolt_mat) < 45) {
 12177  1335  302D               	movlw	45
 12178  1336  0021               	movlb	1	; select bank1
 12179  1337  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
 12180  1338  1803               	skipnc
 12181  1339  2B45               	goto	l1667
 12182                           
 12183                           ;BVH2_Appl_Layer.c: 1930: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 12184  133A  0020               	movlb	0	; select bank0
 12185  133B  16D7               	bsf	_SIBFS_UbatHandling_b,5
 12186                           
 12187                           ;BVH2_Appl_Layer.c: 1931: Cb56_odPumpOff = 1;
 12188  133C  0022               	movlb	2	; select bank2
 12189  133D  01B6               	clrf	_Cb56_odPumpOff^(0+256)
 12190  133E  0AB6               	incf	_Cb56_odPumpOff^(0+256),f
 12191                           
 12192                           ;BVH2_Appl_Layer.c: 1932: Cb56_odFixedValueSel = 0;
 12193  133F  0021               	movlb	1	; select bank1
 12194  1340  01C6               	clrf	_Cb56_odFixedValueSel^(0+128)
 12195                           
 12196                           ;BVH2_Appl_Layer.c: 1933: Cb56_oUbat_Alarm_High = 1;
 12197  1341  0022               	movlb	2	; select bank2
 12198  1342  01B7               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 12199  1343  0AB7               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 12200                           
 12201                           ;BVH2_Appl_Layer.c: 1934: }
 12202  1344  0008               	return
 12203  1345                     l1667:	
 12204                           
 12205                           ;BVH2_Appl_Layer.c: 1935: else {;BVH2_Appl_Layer.c: 1937: SIBFS_UbatHandling_b.Cb60_Norm
      +                          alUbat = 1;
 12206  1345  0020               	movlb	0	; select bank0
 12207  1346  1757               	bsf	_SIBFS_UbatHandling_b,6
 12208                           
 12209                           ;BVH2_Appl_Layer.c: 1938: Cb56_odPumpOff = 0;
 12210  1347  0022               	movlb	2	; select bank2
 12211  1348  01B6               	clrf	_Cb56_odPumpOff^(0+256)
 12212                           
 12213                           ;BVH2_Appl_Layer.c: 1939: Cb56_odFixedValueSel = 0;
 12214  1349  0021               	movlb	1	; select bank1
 12215  134A  01C6               	clrf	_Cb56_odFixedValueSel^(0+128)
 12216                           
 12217                           ;BVH2_Appl_Layer.c: 1940: Cb56_oUbat_Alarm_High = 0;
 12218  134B  0022               	movlb	2	; select bank2
 12219  134C  01B7               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 12220  134D  0008               	return
 12221  134E                     __end_of_Cb56_UbatHandling_node_fcn2:	
 12222                           
 12223                           	psect	text34
 12224  1EDA                     __ptext34:	
 12225 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 12226 ;; Defined at:
 12227 ;;		line 1848 in file "../T_Link/BVH2_Appl_Layer.c"
 12228 ;; Parameters:    Size  Location     Type
 12229 ;;		None
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;		None
 12232 ;; Return value:  Size  Location     Type
 12233 ;;                  1    wreg      void 
 12234 ;; Registers used:
 12235 ;;		wreg, status,2, status,0
 12236 ;; Tracked objects:
 12237 ;;		On entry : 0/0
 12238 ;;		On exit  : 0/0
 12239 ;;		Unchanged: 0/0
 12240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12241 ;;      Params:         0       0       0       0       0       0       0       0
 12242 ;;      Locals:         0       0       0       0       0       0       0       0
 12243 ;;      Temps:          0       0       0       0       0       0       0       0
 12244 ;;      Totals:         0       0       0       0       0       0       0       0
 12245 ;;Total ram usage:        0 bytes
 12246 ;; Hardware stack levels used:    1
 12247 ;; Hardware stack levels required when called:    3
 12248 ;; This function calls:
 12249 ;;		Nothing
 12250 ;; This function is called by:
 12251 ;;		_BVH2_Appl_Layer
 12252 ;; This function uses a non-reentrant model
 12253 ;;
 12254                           
 12255                           
 12256                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
 12257  1EDA                     _Cb44_Pic_etat_monitor_node_fcn1:	
 12258                           
 12259                           ;BVH2_Appl_Layer.c: 1852: if (bool_mat_pic_etat) {
 12260                           
 12261                           ;incstack = 0
 12262                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 12263  1EDA  0021               	movlb	1	; select bank1
 12264  1EDB  084B               	movf	_bool_mat_pic_etat^(0+128),w
 12265  1EDC  1903               	btfsc	3,2
 12266  1EDD  2EE7               	goto	l8531
 12267                           
 12268                           ;BVH2_Appl_Layer.c: 1854: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)2;
 12269  1EDE  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 12270  1EDF  39F8               	andlw	-8
 12271  1EE0  3802               	iorlw	2
 12272  1EE1  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 12273                           
 12274                           ;BVH2_Appl_Layer.c: 1855: Cb44_StateCnt = 0 ;
 12275  1EE2  01A4               	clrf	_Cb44_StateCnt^(0+128)
 12276  1EE3  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
 12277                           
 12278                           ;BVH2_Appl_Layer.c: 1856: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 12279  1EE4  3018               	movlw	24
 12280  1EE5  04C7               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 12281                           
 12282                           ;BVH2_Appl_Layer.c: 1857: }
 12283  1EE6  0008               	return
 12284  1EE7                     l8531:	
 12285                           
 12286                           ;BVH2_Appl_Layer.c: 1858: else {;BVH2_Appl_Layer.c: 1859: if (Cb44_StateCnt > 5) {
 12287  1EE7  3000               	movlw	0
 12288  1EE8  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 12289  1EE9  3006               	movlw	6
 12290  1EEA  1903               	skipnz
 12291  1EEB  0224               	subwf	_Cb44_StateCnt^(0+128),w
 12292  1EEC  1C03               	skipc
 12293  1EED  2EF9               	goto	l8539
 12294                           
 12295                           ;BVH2_Appl_Layer.c: 1861: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 12296  1EEE  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 12297  1EEF  39F8               	andlw	-8
 12298  1EF0  3803               	iorlw	3
 12299  1EF1  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 12300                           
 12301                           ;BVH2_Appl_Layer.c: 1862: Cb44_oShutoff = 0;
 12302  1EF2  0022               	movlb	2	; select bank2
 12303  1EF3  01B8               	clrf	_Cb44_oShutoff^(0+256)
 12304                           
 12305                           ;BVH2_Appl_Layer.c: 1863: Cb44_oAlarm = 0;
 12306  1EF4  01B9               	clrf	_Cb44_oAlarm^(0+256)
 12307                           
 12308                           ;BVH2_Appl_Layer.c: 1864: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 12309  1EF5  3018               	movlw	24
 12310  1EF6  0021               	movlb	1	; select bank1
 12311  1EF7  04C7               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 12312                           
 12313                           ;BVH2_Appl_Layer.c: 1865: }
 12314  1EF8  0008               	return
 12315  1EF9                     l8539:	
 12316                           
 12317                           ;BVH2_Appl_Layer.c: 1866: else {;BVH2_Appl_Layer.c: 1867: SIBFS_Pic_etat_monitor_b.Cb44_
      +                          glflag = 1 ;
 12318  1EF9  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 12319  1EFA  39E7               	andlw	-25
 12320  1EFB  3808               	iorlw	8
 12321  1EFC  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 12322  1EFD  0008               	return
 12323  1EFE                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 12324                           
 12325                           	psect	text35
 12326  157A                     __ptext35:	
 12327 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 12328 ;; Defined at:
 12329 ;;		line 1727 in file "../T_Link/BVH2_Appl_Layer.c"
 12330 ;; Parameters:    Size  Location     Type
 12331 ;;		None
 12332 ;; Auto vars:     Size  Location     Type
 12333 ;;		None
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      void 
 12336 ;; Registers used:
 12337 ;;		wreg, status,2, status,0
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12343 ;;      Params:         0       0       0       0       0       0       0       0
 12344 ;;      Locals:         0       0       0       0       0       0       0       0
 12345 ;;      Temps:          0       0       0       0       0       0       0       0
 12346 ;;      Totals:         0       0       0       0       0       0       0       0
 12347 ;;Total ram usage:        0 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; Hardware stack levels required when called:    3
 12350 ;; This function calls:
 12351 ;;		Nothing
 12352 ;; This function is called by:
 12353 ;;		_BVH2_Appl_Layer
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           
 12358                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 12359  157A                     _Cb34_PWM_Detection_node_fcn1:	
 12360                           
 12361                           ;BVH2_Appl_Layer.c: 1729: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 12362                           
 12363                           ;incstack = 0
 12364                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 12365  157A  0020               	movlb	0	; select bank0
 12366  157B  0856               	movf	_Cb34_idPWM,w
 12367  157C  1903               	btfsc	3,2
 12368  157D  2D82               	goto	l8545
 12369  157E  30C8               	movlw	200
 12370  157F  0256               	subwf	_Cb34_idPWM,w
 12371  1580  1C03               	skipc
 12372  1581  2D94               	goto	l8559
 12373  1582                     l8545:	
 12374                           
 12375                           ;BVH2_Appl_Layer.c: 1730: if (Cb34_idPWM > 199) {
 12376  1582  30C8               	movlw	200
 12377  1583  0256               	subwf	_Cb34_idPWM,w
 12378  1584  1C03               	skipc
 12379  1585  0008               	return
 12380                           
 12381                           ;BVH2_Appl_Layer.c: 1732: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 12382  1586  0021               	movlb	1	; select bank1
 12383  1587  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12384  1588  39F0               	andlw	-16
 12385  1589  3807               	iorlw	7
 12386  158A  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12387                           
 12388                           ;BVH2_Appl_Layer.c: 1733: Cb34_odPumpOff = 0;
 12389  158B  0022               	movlb	2	; select bank2
 12390  158C  01BA               	clrf	_Cb34_odPumpOff^(0+256)
 12391                           
 12392                           ;BVH2_Appl_Layer.c: 1734: Cb34_odFixedValueSel = 1;
 12393  158D  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
 12394  158E  0ABB               	incf	_Cb34_odFixedValueSel^(0+256),f
 12395                           
 12396                           ;BVH2_Appl_Layer.c: 1735: Cb34_odFixedLowValueSel = 0;
 12397  158F  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12398                           
 12399                           ;BVH2_Appl_Layer.c: 1736: Cb34_oPWM_SC_Alarm = 0;
 12400  1590  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12401                           
 12402                           ;BVH2_Appl_Layer.c: 1737: Cb34_oPWM_Alarm = 1;
 12403  1591  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12404  1592  0ABE               	incf	_Cb34_oPWM_Alarm^(0+256),f
 12405                           
 12406                           ;BVH2_Appl_Layer.c: 1738: };BVH2_Appl_Layer.c: 1739: }
 12407  1593  0008               	return
 12408  1594                     l8559:	
 12409                           
 12410                           ;BVH2_Appl_Layer.c: 1740: else {;BVH2_Appl_Layer.c: 1743: if ((ui16_PWM_Freq_mat < 36000
      +                          ) || (ui16_PWM_Freq_mat > 44000)) {
 12411  1594  308C               	movlw	140
 12412  1595  0023               	movlb	3	; select bank3
 12413  1596  0239               	subwf	(_ui16_PWM_Freq_mat+1)^(0+384),w
 12414  1597  30A0               	movlw	160
 12415  1598  1903               	skipnz
 12416  1599  0238               	subwf	_ui16_PWM_Freq_mat^(0+384),w
 12417  159A  1C03               	skipc
 12418  159B  2DA3               	goto	l8563
 12419  159C  30AB               	movlw	171
 12420  159D  0239               	subwf	(_ui16_PWM_Freq_mat+1)^(0+384),w
 12421  159E  30E1               	movlw	225
 12422  159F  1903               	skipnz
 12423  15A0  0238               	subwf	_ui16_PWM_Freq_mat^(0+384),w
 12424  15A1  1C03               	skipc
 12425  15A2  2DB1               	goto	l8575
 12426  15A3                     l8563:	
 12427                           
 12428                           ;BVH2_Appl_Layer.c: 1745: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 12429  15A3  0021               	movlb	1	; select bank1
 12430  15A4  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12431  15A5  39F0               	andlw	-16
 12432  15A6  3806               	iorlw	6
 12433  15A7  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12434                           
 12435                           ;BVH2_Appl_Layer.c: 1746: Cb34_odPumpOff = 0;
 12436  15A8  0022               	movlb	2	; select bank2
 12437  15A9  01BA               	clrf	_Cb34_odPumpOff^(0+256)
 12438                           
 12439                           ;BVH2_Appl_Layer.c: 1747: Cb34_odFixedValueSel = 1;
 12440  15AA  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
 12441  15AB  0ABB               	incf	_Cb34_odFixedValueSel^(0+256),f
 12442                           
 12443                           ;BVH2_Appl_Layer.c: 1748: Cb34_odFixedLowValueSel = 0;
 12444  15AC  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12445                           
 12446                           ;BVH2_Appl_Layer.c: 1749: Cb34_oPWM_SC_Alarm = 1;
 12447  15AD  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12448  15AE  0ABD               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12449                           
 12450                           ;BVH2_Appl_Layer.c: 1750: Cb34_oPWM_Alarm = 0;
 12451  15AF  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12452                           
 12453                           ;BVH2_Appl_Layer.c: 1751: }
 12454  15B0  0008               	return
 12455  15B1                     l8575:	
 12456                           
 12457                           ;BVH2_Appl_Layer.c: 1752: else {;BVH2_Appl_Layer.c: 1753: if (Cb34_idPWM <= 5) {
 12458  15B1  3006               	movlw	6
 12459  15B2  0020               	movlb	0	; select bank0
 12460  15B3  0256               	subwf	_Cb34_idPWM,w
 12461  15B4  1803               	skipnc
 12462  15B5  2DC4               	goto	l8589
 12463                           
 12464                           ;BVH2_Appl_Layer.c: 1755: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 12465  15B6  0021               	movlb	1	; select bank1
 12466  15B7  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12467  15B8  39F0               	andlw	-16
 12468  15B9  3803               	iorlw	3
 12469  15BA  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12470                           
 12471                           ;BVH2_Appl_Layer.c: 1756: Cb34_odPumpOff = 0;
 12472  15BB  0022               	movlb	2	; select bank2
 12473  15BC  01BA               	clrf	_Cb34_odPumpOff^(0+256)
 12474                           
 12475                           ;BVH2_Appl_Layer.c: 1757: Cb34_odFixedValueSel = 1;
 12476  15BD  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
 12477  15BE  0ABB               	incf	_Cb34_odFixedValueSel^(0+256),f
 12478                           
 12479                           ;BVH2_Appl_Layer.c: 1758: Cb34_odFixedLowValueSel = 0;
 12480  15BF  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12481                           
 12482                           ;BVH2_Appl_Layer.c: 1759: Cb34_oPWM_SC_Alarm = 1;
 12483  15C0  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12484  15C1  0ABD               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12485                           
 12486                           ;BVH2_Appl_Layer.c: 1760: Cb34_oPWM_Alarm = 0;
 12487  15C2  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12488                           
 12489                           ;BVH2_Appl_Layer.c: 1761: }
 12490  15C3  0008               	return
 12491  15C4                     l8589:	
 12492                           
 12493                           ;BVH2_Appl_Layer.c: 1762: else {;BVH2_Appl_Layer.c: 1763: if (Cb34_idPWM < 9) {
 12494  15C4  3009               	movlw	9
 12495  15C5  0020               	movlb	0	; select bank0
 12496  15C6  0256               	subwf	_Cb34_idPWM,w
 12497  15C7  1803               	skipnc
 12498  15C8  2DD7               	goto	l8603
 12499                           
 12500                           ;BVH2_Appl_Layer.c: 1766: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1767: (UInt8)8;
 12501  15C9  0021               	movlb	1	; select bank1
 12502  15CA  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12503  15CB  39F0               	andlw	-16
 12504  15CC  3808               	iorlw	8
 12505  15CD  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12506                           
 12507                           ;BVH2_Appl_Layer.c: 1768: Cb34_odPumpOff = 1;
 12508  15CE  0022               	movlb	2	; select bank2
 12509  15CF  01BA               	clrf	_Cb34_odPumpOff^(0+256)
 12510  15D0  0ABA               	incf	_Cb34_odPumpOff^(0+256),f
 12511                           
 12512                           ;BVH2_Appl_Layer.c: 1769: Cb34_odFixedValueSel = 0;
 12513  15D1  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
 12514                           
 12515                           ;BVH2_Appl_Layer.c: 1770: Cb34_odFixedLowValueSel = 0;
 12516  15D2  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12517                           
 12518                           ;BVH2_Appl_Layer.c: 1771: Cb34_oPWM_SC_Alarm = 1;
 12519  15D3  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12520  15D4  0ABD               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12521                           
 12522                           ;BVH2_Appl_Layer.c: 1772: Cb34_oPWM_Alarm = 0;
 12523  15D5  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12524                           
 12525                           ;BVH2_Appl_Layer.c: 1773: }
 12526  15D6  0008               	return
 12527  15D7                     l8603:	
 12528                           
 12529                           ;BVH2_Appl_Layer.c: 1774: else {;BVH2_Appl_Layer.c: 1775: if (Cb34_idPWM > 191) {
 12530  15D7  30C0               	movlw	192
 12531  15D8  0020               	movlb	0	; select bank0
 12532  15D9  0256               	subwf	_Cb34_idPWM,w
 12533  15DA  1C03               	skipc
 12534  15DB  2DEA               	goto	l8617
 12535                           
 12536                           ;BVH2_Appl_Layer.c: 1778: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1779: (UInt8)4;
 12537  15DC  0021               	movlb	1	; select bank1
 12538  15DD  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12539  15DE  39F0               	andlw	-16
 12540  15DF  3804               	iorlw	4
 12541  15E0  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12542                           
 12543                           ;BVH2_Appl_Layer.c: 1780: Cb34_odPumpOff = 0;
 12544  15E1  0022               	movlb	2	; select bank2
 12545  15E2  01BA               	clrf	_Cb34_odPumpOff^(0+256)
 12546                           
 12547                           ;BVH2_Appl_Layer.c: 1781: Cb34_odFixedValueSel = 1;
 12548  15E3  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
 12549  15E4  0ABB               	incf	_Cb34_odFixedValueSel^(0+256),f
 12550                           
 12551                           ;BVH2_Appl_Layer.c: 1782: Cb34_odFixedLowValueSel = 0;
 12552  15E5  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12553                           
 12554                           ;BVH2_Appl_Layer.c: 1783: Cb34_oPWM_SC_Alarm = 1;
 12555  15E6  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12556  15E7  0ABD               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12557                           
 12558                           ;BVH2_Appl_Layer.c: 1784: Cb34_oPWM_Alarm = 0;
 12559  15E8  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12560                           
 12561                           ;BVH2_Appl_Layer.c: 1785: }
 12562  15E9  0008               	return
 12563  15EA                     l8617:	
 12564                           
 12565                           ;BVH2_Appl_Layer.c: 1786: else {;BVH2_Appl_Layer.c: 1787: if (Cb34_idPWM >= 23) {
 12566  15EA  3017               	movlw	23
 12567  15EB  0020               	movlb	0	; select bank0
 12568  15EC  0256               	subwf	_Cb34_idPWM,w
 12569  15ED  1C03               	skipc
 12570  15EE  2DFB               	goto	l8631
 12571                           
 12572                           ;BVH2_Appl_Layer.c: 1790: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1791: (UInt8)2;
 12573  15EF  0021               	movlb	1	; select bank1
 12574  15F0  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12575  15F1  39F0               	andlw	-16
 12576  15F2  3802               	iorlw	2
 12577  15F3  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12578                           
 12579                           ;BVH2_Appl_Layer.c: 1792: Cb34_odPumpOff = 0;
 12580  15F4  0022               	movlb	2	; select bank2
 12581  15F5  01BA               	clrf	_Cb34_odPumpOff^(0+256)
 12582                           
 12583                           ;BVH2_Appl_Layer.c: 1793: Cb34_odFixedLowValueSel = 0;
 12584  15F6  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12585                           
 12586                           ;BVH2_Appl_Layer.c: 1794: Cb34_odFixedValueSel = 0;
 12587  15F7  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
 12588                           
 12589                           ;BVH2_Appl_Layer.c: 1795: Cb34_oPWM_SC_Alarm = 0;
 12590  15F8  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12591                           
 12592                           ;BVH2_Appl_Layer.c: 1796: Cb34_oPWM_Alarm = 0;
 12593  15F9  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12594                           
 12595                           ;BVH2_Appl_Layer.c: 1797: }
 12596  15FA  0008               	return
 12597  15FB                     l8631:	
 12598                           
 12599                           ;BVH2_Appl_Layer.c: 1798: else {;BVH2_Appl_Layer.c: 1799: if (Cb34_idPWM > 19) {
 12600  15FB  3014               	movlw	20
 12601  15FC  0020               	movlb	0	; select bank0
 12602  15FD  0256               	subwf	_Cb34_idPWM,w
 12603  15FE  1C03               	skipc
 12604  15FF  2E0D               	goto	l8645
 12605                           
 12606                           ;BVH2_Appl_Layer.c: 1802: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1803: (UInt8)5;
 12607  1600  0021               	movlb	1	; select bank1
 12608  1601  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12609  1602  39F0               	andlw	-16
 12610  1603  3805               	iorlw	5
 12611  1604  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12612                           
 12613                           ;BVH2_Appl_Layer.c: 1804: Cb34_odPumpOff = 0;
 12614  1605  0022               	movlb	2	; select bank2
 12615  1606  01BA               	clrf	_Cb34_odPumpOff^(0+256)
 12616                           
 12617                           ;BVH2_Appl_Layer.c: 1805: Cb34_odFixedValueSel = 0;
 12618  1607  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
 12619                           
 12620                           ;BVH2_Appl_Layer.c: 1806: Cb34_odFixedLowValueSel = 1;
 12621  1608  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12622  1609  0ABC               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 12623                           
 12624                           ;BVH2_Appl_Layer.c: 1807: Cb34_oPWM_SC_Alarm = 0;
 12625  160A  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12626                           
 12627                           ;BVH2_Appl_Layer.c: 1808: Cb34_oPWM_Alarm = 0;
 12628  160B  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12629                           
 12630                           ;BVH2_Appl_Layer.c: 1809: }
 12631  160C  0008               	return
 12632  160D                     l8645:	
 12633                           
 12634                           ;BVH2_Appl_Layer.c: 1810: else {;BVH2_Appl_Layer.c: 1811: if (Cb34_idPWM <= 19) {
 12635  160D  3014               	movlw	20
 12636  160E  0020               	movlb	0	; select bank0
 12637  160F  0256               	subwf	_Cb34_idPWM,w
 12638  1610  1803               	skipnc
 12639  1611  0008               	return
 12640                           
 12641                           ;BVH2_Appl_Layer.c: 1814: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1815: (UInt8)1;
 12642  1612  0021               	movlb	1	; select bank1
 12643  1613  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12644  1614  39F0               	andlw	-16
 12645  1615  3801               	iorlw	1
 12646  1616  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12647                           
 12648                           ;BVH2_Appl_Layer.c: 1816: Cb34_odPumpOff = 1;
 12649  1617  0022               	movlb	2	; select bank2
 12650  1618  01BA               	clrf	_Cb34_odPumpOff^(0+256)
 12651  1619  0ABA               	incf	_Cb34_odPumpOff^(0+256),f
 12652                           
 12653                           ;BVH2_Appl_Layer.c: 1817: Cb34_odFixedValueSel = 0;
 12654  161A  01BB               	clrf	_Cb34_odFixedValueSel^(0+256)
 12655                           
 12656                           ;BVH2_Appl_Layer.c: 1818: Cb34_odFixedLowValueSel = 0;
 12657  161B  01BC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12658                           
 12659                           ;BVH2_Appl_Layer.c: 1819: Cb34_oPWM_SC_Alarm = 0;
 12660  161C  01BD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12661                           
 12662                           ;BVH2_Appl_Layer.c: 1820: Cb34_oPWM_Alarm = 0;
 12663  161D  01BE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12664  161E  0008               	return
 12665  161F                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 12666                           
 12667                           	psect	text36
 12668  1F71                     __ptext36:	
 12669 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 12670 ;; Defined at:
 12671 ;;		line 1683 in file "../T_Link/BVH2_Appl_Layer.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;		None
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;		None
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  1    wreg      void 
 12678 ;; Registers used:
 12679 ;;		wreg, status,2, status,0
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12685 ;;      Params:         0       0       0       0       0       0       0       0
 12686 ;;      Locals:         0       0       0       0       0       0       0       0
 12687 ;;      Temps:          0       0       0       0       0       0       0       0
 12688 ;;      Totals:         0       0       0       0       0       0       0       0
 12689 ;;Total ram usage:        0 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    3
 12692 ;; This function calls:
 12693 ;;		Nothing
 12694 ;; This function is called by:
 12695 ;;		_BVH2_Appl_Layer
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699                           
 12700                           ;psect for function _Cb1_Current_An___High_node_fcn1
 12701  1F71                     _Cb1_Current_An___High_node_fcn1:	
 12702                           
 12703                           ;BVH2_Appl_Layer.c: 1687: if (bool_mat_currAlarm_bldc) {
 12704                           
 12705                           ;incstack = 0
 12706                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 12707  1F71  0021               	movlb	1	; select bank1
 12708  1F72  0850               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 12709  1F73  1903               	btfsc	3,2
 12710  1F74  2F80               	goto	l8689
 12711                           
 12712                           ;BVH2_Appl_Layer.c: 1689: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1690: (UInt8)2;
 12713  1F75  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12714  1F76  39F0               	andlw	-16
 12715  1F77  3802               	iorlw	2
 12716  1F78  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12717                           
 12718                           ;BVH2_Appl_Layer.c: 1691: Cb1_StateCnt = 0 ;
 12719  1F79  0020               	movlb	0	; select bank0
 12720  1F7A  01CD               	clrf	_Cb1_StateCnt
 12721  1F7B  01CE               	clrf	_Cb1_StateCnt+1
 12722                           
 12723                           ;BVH2_Appl_Layer.c: 1692: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 12724  1F7C  3030               	movlw	48
 12725  1F7D  0021               	movlb	1	; select bank1
 12726  1F7E  04C9               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 12727                           
 12728                           ;BVH2_Appl_Layer.c: 1693: }
 12729  1F7F  0008               	return
 12730  1F80                     l8689:	
 12731                           
 12732                           ;BVH2_Appl_Layer.c: 1694: else {;BVH2_Appl_Layer.c: 1695: if (Cb1_StateCnt > 100) {
 12733  1F80  3000               	movlw	0
 12734  1F81  0020               	movlb	0	; select bank0
 12735  1F82  024E               	subwf	_Cb1_StateCnt+1,w
 12736  1F83  3065               	movlw	101
 12737  1F84  1903               	skipnz
 12738  1F85  024D               	subwf	_Cb1_StateCnt,w
 12739  1F86  1C03               	skipc
 12740  1F87  2F95               	goto	l8701
 12741                           
 12742                           ;BVH2_Appl_Layer.c: 1697: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1698: (UInt8)5;
 12743  1F88  0021               	movlb	1	; select bank1
 12744  1F89  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12745  1F8A  39F0               	andlw	-16
 12746  1F8B  3805               	iorlw	5
 12747  1F8C  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12748                           
 12749                           ;BVH2_Appl_Layer.c: 1699: Cb1_oShutoff = 0;
 12750  1F8D  0022               	movlb	2	; select bank2
 12751  1F8E  01BF               	clrf	_Cb1_oShutoff^(0+256)
 12752                           
 12753                           ;BVH2_Appl_Layer.c: 1700: Cb1_oCurrentAlarm = 0;
 12754  1F8F  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 12755                           
 12756                           ;BVH2_Appl_Layer.c: 1701: Cb1_RestartCounter = 0 ;
 12757  1F90  0021               	movlb	1	; select bank1
 12758  1F91  01CA               	clrf	_Cb1_RestartCounter^(0+128)
 12759                           
 12760                           ;BVH2_Appl_Layer.c: 1702: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 12761  1F92  3030               	movlw	48
 12762  1F93  04C9               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 12763                           
 12764                           ;BVH2_Appl_Layer.c: 1703: }
 12765  1F94  0008               	return
 12766  1F95                     l8701:	
 12767                           
 12768                           ;BVH2_Appl_Layer.c: 1704: else {;BVH2_Appl_Layer.c: 1705: SIBFS_Current_Analysis_High_b.
      +                          Cb1_glflag = 1 ;
 12769  1F95  0021               	movlb	1	; select bank1
 12770  1F96  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12771  1F97  39CF               	andlw	-49
 12772  1F98  3810               	iorlw	16
 12773  1F99  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12774  1F9A  0008               	return
 12775  1F9B                     __end_of_Cb1_Current_An___High_node_fcn1:	
 12776                           
 12777                           	psect	intentry
 12778  0004                     __pintentry:	
 12779 ;; *************** function _interrupt_handler *****************
 12780 ;; Defined at:
 12781 ;;		line 78 in file "../interrupt.c"
 12782 ;; Parameters:    Size  Location     Type
 12783 ;;		None
 12784 ;; Auto vars:     Size  Location     Type
 12785 ;;		None
 12786 ;; Return value:  Size  Location     Type
 12787 ;;                  1    wreg      void 
 12788 ;; Registers used:
 12789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12790 ;; Tracked objects:
 12791 ;;		On entry : 0/0
 12792 ;;		On exit  : 0/0
 12793 ;;		Unchanged: 0/0
 12794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12795 ;;      Params:         0       0       0       0       0       0       0       0
 12796 ;;      Locals:         0       0       0       0       0       0       0       0
 12797 ;;      Temps:          0       0       0       0       0       0       0       0
 12798 ;;      Totals:         0       0       0       0       0       0       0       0
 12799 ;;Total ram usage:        0 bytes
 12800 ;; Hardware stack levels used:    1
 12801 ;; Hardware stack levels required when called:    2
 12802 ;; This function calls:
 12803 ;;		_PWM_CTRL
 12804 ;;		_Task1ms
 12805 ;;		_interrrupt_bldc
 12806 ;;		_interrupt_PWMCapture
 12807 ;; This function is called by:
 12808 ;;		Interrupt level 1
 12809 ;; This function uses a non-reentrant model
 12810 ;;
 12811                           
 12812  0004                     _interrupt_handler:	
 12813                           
 12814                           ;incstack = 0
 12815  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12816                           
 12817                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12818  0005  3180               	pagesel	$
 12819                           
 12820                           ;interrupt.c: 82: if( TMR1IF )
 12821  0006  0020               	movlb	0	; select bank0
 12822  0007  1811               	btfsc	17,0	;volatile
 12823                           
 12824                           ;interrupt.c: 84: {;interrupt.c: 86: TMR1IF = 0;
 12825  0008  1011               	bcf	17,0	;volatile
 12826                           
 12827                           ;interrupt.c: 88: };interrupt.c: 91: if( TMR4IF )
 12828  0009  1C93               	btfss	19,1	;volatile
 12829  000A  2812               	goto	i1l11597
 12830                           
 12831                           ;interrupt.c: 93: {;interrupt.c: 95: TMR4IF = 0;
 12832  000B  1093               	bcf	19,1	;volatile
 12833                           
 12834                           ;interrupt.c: 97: PWM_CTRL( );
 12835  000C  319D  25B7  3180   	fcall	_PWM_CTRL
 12836                           
 12837                           ;interrupt.c: 99: Task1ms( );
 12838  000F  319D  2543  3180   	fcall	_Task1ms
 12839  0012                     i1l11597:	
 12840                           
 12841                           ;interrupt.c: 101: };interrupt.c: 107: if( TMR2IF )
 12842  0012  0020               	movlb	0	; select bank0
 12843  0013  1C91               	btfss	17,1	;volatile
 12844  0014  2819               	goto	i1l11603
 12845                           
 12846                           ;interrupt.c: 109: {;interrupt.c: 111: TMR2IF = 0;
 12847  0015  1091               	bcf	17,1	;volatile
 12848                           
 12849                           ;interrupt.c: 113: interrrupt_bldc( );
 12850  0016  318B  2348  3180   	fcall	_interrrupt_bldc
 12851  0019                     i1l11603:	
 12852                           
 12853                           ;interrupt.c: 115: };interrupt.c: 118: if( TMR6IF )
 12854  0019  0020               	movlb	0	; select bank0
 12855  001A  1993               	btfsc	19,3	;volatile
 12856                           
 12857                           ;interrupt.c: 120: {;interrupt.c: 122: TMR6IF = 0;
 12858  001B  1193               	bcf	19,3	;volatile
 12859                           
 12860                           ;interrupt.c: 132: };interrupt.c: 135: if( CCP5IF )
 12861  001C  1F13               	btfss	19,6	;volatile
 12862  001D  2821               	goto	i1l11611
 12863                           
 12864                           ;interrupt.c: 137: {;interrupt.c: 139: CCP5IF = 0;
 12865  001E  1313               	bcf	19,6	;volatile
 12866                           
 12867                           ;interrupt.c: 141: interrupt_PWMCapture( );
 12868  001F  3193  2397         	fcall	_interrupt_PWMCapture
 12869  0021                     i1l11611:	
 12870                           
 12871                           ;interrupt.c: 144: };interrupt.c: 147: if( CCP2IF )
 12872  0021  0020               	movlb	0	; select bank0
 12873  0022  1812               	btfsc	18,0	;volatile
 12874                           
 12875                           ;interrupt.c: 149: {;interrupt.c: 151: CCP2IF = 0;
 12876  0023  1012               	bcf	18,0	;volatile
 12877  0024  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12878  0025  0009               	retfie
 12879  0026                     __end_of_interrupt_handler:	
 12880                           
 12881                           	psect	text38
 12882  1397                     __ptext38:	
 12883 ;; *************** function _interrupt_PWMCapture *****************
 12884 ;; Defined at:
 12885 ;;		line 462 in file "../pwm.c"
 12886 ;; Parameters:    Size  Location     Type
 12887 ;;		None
 12888 ;; Auto vars:     Size  Location     Type
 12889 ;;		None
 12890 ;; Return value:  Size  Location     Type
 12891 ;;                  1    wreg      void 
 12892 ;; Registers used:
 12893 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12894 ;; Tracked objects:
 12895 ;;		On entry : 0/0
 12896 ;;		On exit  : 0/0
 12897 ;;		Unchanged: 0/0
 12898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12899 ;;      Params:         0       0       0       0       0       0       0       0
 12900 ;;      Locals:         0       0       0       0       0       0       0       0
 12901 ;;      Temps:          2       0       0       0       0       0       0       0
 12902 ;;      Totals:         2       0       0       0       0       0       0       0
 12903 ;;Total ram usage:        2 bytes
 12904 ;; Hardware stack levels used:    1
 12905 ;; This function calls:
 12906 ;;		Nothing
 12907 ;; This function is called by:
 12908 ;;		_interrupt_handler
 12909 ;; This function uses a non-reentrant model
 12910 ;;
 12911                           
 12912                           
 12913                           ;psect for function _interrupt_PWMCapture
 12914  1397                     _interrupt_PWMCapture:	
 12915                           
 12916                           ;pwm.c: 474: switch( ui8_Pulse_State )
 12917                           
 12918                           ;incstack = 0
 12919                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
 12920  1397  2BFA               	goto	i1l6863
 12921  1398                     i1l1195:	
 12922                           ;pwm.c: 476: {;pwm.c: 478: case 0:
 12923                           
 12924                           
 12925                           ;pwm.c: 480: {;pwm.c: 484: ui8_Pulse_State = 1;
 12926  1398  01C2               	clrf	_ui8_Pulse_State^(0+256)
 12927  1399  0AC2               	incf	_ui8_Pulse_State^(0+256),f
 12928                           
 12929                           ;pwm.c: 485: ui16_Capt_Val0.b.lo = CCPR5L;
 12930  139A  0026               	movlb	6	; select bank6
 12931  139B  081C               	movf	28,w	;volatile
 12932  139C  00F0               	movwf	??_interrupt_PWMCapture
 12933  139D  0870               	movf	??_interrupt_PWMCapture,w
 12934  139E  0021               	movlb	1	; select bank1
 12935  139F  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 12936                           
 12937                           ;pwm.c: 486: ui16_Capt_Val0.b.hi = CCPR5H;
 12938  13A0  0026               	movlb	6	; select bank6
 12939  13A1  081D               	movf	29,w	;volatile
 12940  13A2  00F0               	movwf	??_interrupt_PWMCapture
 12941  13A3  0870               	movf	??_interrupt_PWMCapture,w
 12942  13A4  0021               	movlb	1	; select bank1
 12943  13A5  00AB               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
 12944                           
 12945                           ;pwm.c: 487: CCP5CON = 0x04;
 12946  13A6  3004               	movlw	4
 12947  13A7  0026               	movlb	6	; select bank6
 12948  13A8  009E               	movwf	30	;volatile
 12949                           
 12950                           ;pwm.c: 488: break;
 12951  13A9  0008               	return
 12952  13AA                     i1l6847:	
 12953                           ;pwm.c: 491: };pwm.c: 494: case 1:
 12954                           
 12955                           
 12956                           ;pwm.c: 496: {;pwm.c: 500: ui8_Pulse_State = 2;
 12957  13AA  3002               	movlw	2
 12958  13AB  00F0               	movwf	??_interrupt_PWMCapture
 12959  13AC  0870               	movf	??_interrupt_PWMCapture,w
 12960  13AD  0022               	movlb	2	; select bank2
 12961  13AE  00C2               	movwf	_ui8_Pulse_State^(0+256)
 12962                           
 12963                           ;pwm.c: 501: ui16_Capt_Val1.b.lo = CCPR5L;
 12964  13AF  0026               	movlb	6	; select bank6
 12965  13B0  081C               	movf	28,w	;volatile
 12966  13B1  00F0               	movwf	??_interrupt_PWMCapture
 12967  13B2  0870               	movf	??_interrupt_PWMCapture,w
 12968  13B3  0021               	movlb	1	; select bank1
 12969  13B4  00A8               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
 12970                           
 12971                           ;pwm.c: 502: ui16_Capt_Val1.b.hi = CCPR5H;
 12972  13B5  0026               	movlb	6	; select bank6
 12973  13B6  081D               	movf	29,w	;volatile
 12974  13B7  00F0               	movwf	??_interrupt_PWMCapture
 12975  13B8  0870               	movf	??_interrupt_PWMCapture,w
 12976  13B9  0021               	movlb	1	; select bank1
 12977  13BA  00A9               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
 12978                           
 12979                           ;pwm.c: 503: CCP5CON = 0x05;
 12980  13BB  3005               	movlw	5
 12981  13BC  0026               	movlb	6	; select bank6
 12982  13BD  009E               	movwf	30	;volatile
 12983                           
 12984                           ;pwm.c: 504: break;
 12985  13BE  0008               	return
 12986  13BF                     i1l1198:	
 12987                           ;pwm.c: 507: };pwm.c: 510: case 2:
 12988                           
 12989                           
 12990                           ;pwm.c: 512: {;pwm.c: 516: ui8_Pulse_State = 1;
 12991  13BF  01C2               	clrf	_ui8_Pulse_State^(0+256)
 12992  13C0  0AC2               	incf	_ui8_Pulse_State^(0+256),f
 12993                           
 12994                           ;pwm.c: 517: ui16_Capt_Val2.b.lo = CCPR5L;
 12995  13C1  0026               	movlb	6	; select bank6
 12996  13C2  081C               	movf	28,w	;volatile
 12997  13C3  00F0               	movwf	??_interrupt_PWMCapture
 12998  13C4  0870               	movf	??_interrupt_PWMCapture,w
 12999  13C5  0021               	movlb	1	; select bank1
 13000  13C6  00A6               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
 13001                           
 13002                           ;pwm.c: 518: ui16_Capt_Val2.b.hi = CCPR5H;
 13003  13C7  0026               	movlb	6	; select bank6
 13004  13C8  081D               	movf	29,w	;volatile
 13005  13C9  00F0               	movwf	??_interrupt_PWMCapture
 13006  13CA  0870               	movf	??_interrupt_PWMCapture,w
 13007  13CB  0021               	movlb	1	; select bank1
 13008  13CC  00A7               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
 13009                           
 13010                           ;pwm.c: 519: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
 13011  13CD  092A               	comf	_ui16_Capt_Val0^(0+128),w	;volatile
 13012  13CE  00F0               	movwf	??_interrupt_PWMCapture
 13013  13CF  092B               	comf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 13014  13D0  00F1               	movwf	??_interrupt_PWMCapture+1
 13015  13D1  0AF0               	incf	??_interrupt_PWMCapture,f
 13016  13D2  1903               	skipnz
 13017  13D3  0AF1               	incf	??_interrupt_PWMCapture+1,f
 13018  13D4  0826               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 13019  13D5  0770               	addwf	??_interrupt_PWMCapture,w
 13020  13D6  0023               	movlb	3	; select bank3
 13021  13D7  00B6               	movwf	_ui16_PWM_Freq_In^(0+384)
 13022  13D8  0021               	movlb	1	; select bank1
 13023  13D9  0827               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 13024  13DA  3D71               	addwfc	??_interrupt_PWMCapture+1,w
 13025  13DB  0023               	movlb	3	; select bank3
 13026  13DC  00B7               	movwf	(_ui16_PWM_Freq_In+1)^(0+384)
 13027                           
 13028                           ;pwm.c: 520: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
 13029  13DD  0021               	movlb	1	; select bank1
 13030  13DE  092A               	comf	_ui16_Capt_Val0^(0+128),w	;volatile
 13031  13DF  00F0               	movwf	??_interrupt_PWMCapture
 13032  13E0  092B               	comf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 13033  13E1  00F1               	movwf	??_interrupt_PWMCapture+1
 13034  13E2  0AF0               	incf	??_interrupt_PWMCapture,f
 13035  13E3  1903               	skipnz
 13036  13E4  0AF1               	incf	??_interrupt_PWMCapture+1,f
 13037  13E5  0828               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
 13038  13E6  0770               	addwf	??_interrupt_PWMCapture,w
 13039  13E7  0023               	movlb	3	; select bank3
 13040  13E8  00EB               	movwf	_ui16_Duty_Cycle_In^(0+384)
 13041  13E9  0021               	movlb	1	; select bank1
 13042  13EA  0829               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
 13043  13EB  3D71               	addwfc	??_interrupt_PWMCapture+1,w
 13044  13EC  0023               	movlb	3	; select bank3
 13045  13ED  00EC               	movwf	(_ui16_Duty_Cycle_In+1)^(0+384)
 13046                           
 13047                           ;pwm.c: 521: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
 13048  13EE  0021               	movlb	1	; select bank1
 13049  13EF  0827               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 13050  13F0  00AB               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
 13051  13F1  0826               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 13052  13F2  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 13053                           
 13054                           ;pwm.c: 522: CCP5CON = 0x04;
 13055  13F3  3004               	movlw	4
 13056  13F4  0026               	movlb	6	; select bank6
 13057  13F5  009E               	movwf	30	;volatile
 13058                           
 13059                           ;pwm.c: 539: };pwm.c: 542: break;
 13060                           
 13061                           ;pwm.c: 534: else;pwm.c: 535: {
 13062                           
 13063                           ;pwm.c: 527: {;pwm.c: 531: }
 13064  13F6  0008               	return
 13065  13F7                     i1l6859:	
 13066                           ;pwm.c: 545: };pwm.c: 549: default:
 13067                           
 13068                           
 13069                           ;pwm.c: 550: {;pwm.c: 554: ui8_Pulse_State = 0;
 13070  13F7  0022               	movlb	2	; select bank2
 13071  13F8  01C2               	clrf	_ui8_Pulse_State^(0+256)
 13072                           
 13073                           ;pwm.c: 558: };pwm.c: 560: }
 13074                           
 13075                           ;pwm.c: 555: break;
 13076  13F9  0008               	return
 13077  13FA                     i1l6863:	
 13078  13FA  0022               	movlb	2	; select bank2
 13079  13FB  0842               	movf	_ui8_Pulse_State^(0+256),w
 13080                           
 13081                           ; Switch size 1, requested type "space"
 13082                           ; Number of cases is 3, Range of values is 0 to 2
 13083                           ; switch strategies available:
 13084                           ; Name         Instructions Cycles
 13085                           ; simple_byte           10     6 (average)
 13086                           ; direct_byte           12     6 (fixed)
 13087                           ; jumptable            260     6 (fixed)
 13088                           ;	Chosen strategy is simple_byte
 13089  13FC  3A00               	xorlw	0	; case 0
 13090  13FD  1903               	skipnz
 13091  13FE  2B98               	goto	i1l1195
 13092  13FF  3A01               	xorlw	1	; case 1
 13093  1400  1903               	skipnz
 13094  1401  2BAA               	goto	i1l6847
 13095  1402  3A03               	xorlw	3	; case 2
 13096  1403  1903               	skipnz
 13097  1404  2BBF               	goto	i1l1198
 13098  1405  2BF7               	goto	i1l6859
 13099  1406  0008               	return
 13100  1407                     __end_of_interrupt_PWMCapture:	
 13101                           
 13102                           	psect	text39
 13103  0B48                     __ptext39:	
 13104 ;; *************** function _interrrupt_bldc *****************
 13105 ;; Defined at:
 13106 ;;		line 281 in file "../bldc.c"
 13107 ;; Parameters:    Size  Location     Type
 13108 ;;		None
 13109 ;; Auto vars:     Size  Location     Type
 13110 ;;  ui32_tmp        4    4[BANK0 ] unsigned long 
 13111 ;; Return value:  Size  Location     Type
 13112 ;;                  1    wreg      void 
 13113 ;; Registers used:
 13114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13115 ;; Tracked objects:
 13116 ;;		On entry : 0/0
 13117 ;;		On exit  : 0/0
 13118 ;;		Unchanged: 0/0
 13119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13120 ;;      Params:         0       0       0       0       0       0       0       0
 13121 ;;      Locals:         0       4       0       0       0       0       0       0
 13122 ;;      Temps:          0       4       0       0       0       0       0       0
 13123 ;;      Totals:         0       8       0       0       0       0       0       0
 13124 ;;Total ram usage:        8 bytes
 13125 ;; Hardware stack levels used:    1
 13126 ;; Hardware stack levels required when called:    1
 13127 ;; This function calls:
 13128 ;;		_BLDCWait
 13129 ;;		___lwdiv
 13130 ;;		i1_ADC_Read
 13131 ;;		i1_ADC_Wait
 13132 ;;		i1___wmul
 13133 ;;		i1_commutate
 13134 ;; This function is called by:
 13135 ;;		_interrupt_handler
 13136 ;; This function uses a non-reentrant model
 13137 ;;
 13138                           
 13139                           
 13140                           ;psect for function _interrrupt_bldc
 13141  0B48                     _interrrupt_bldc:	
 13142                           
 13143                           ;bldc.c: 286: unsigned long ui32_tmp ;;bldc.c: 288: ++comm_time ;
 13144                           
 13145                           ;incstack = 0
 13146                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13147  0B48  3001               	movlw	1
 13148  0B49  0020               	movlb	0	; select bank0
 13149  0B4A  07D3               	addwf	_comm_time,f
 13150  0B4B  3000               	movlw	0
 13151  0B4C  3DD4               	addwfc	_comm_time+1,f
 13152                           
 13153                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
 13154  0B4D  0854               	movf	_comm_time+1,w
 13155  0B4E  0022               	movlb	2	; select bank2
 13156  0B4F  0228               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 13157  0B50  1D03               	skipz
 13158  0B51  2B56               	goto	u939_25
 13159  0B52  0020               	movlb	0	; select bank0
 13160  0B53  0853               	movf	_comm_time,w
 13161  0B54  0022               	movlb	2	; select bank2
 13162  0B55  0227               	subwf	_ui16_comm_time_max^(0+256),w
 13163  0B56                     u939_25:	
 13164  0B56  1803               	skipnc
 13165  0B57  2B5B               	goto	i1l10737
 13166                           
 13167                           ;bldc.c: 294: {;bldc.c: 296: commutate( );
 13168  0B58  3189  2126  318B   	fcall	i1_commutate
 13169  0B5B                     i1l10737:	
 13170                           
 13171                           ;bldc.c: 298: };bldc.c: 302: if( ui16_step_cnt < 10 )
 13172  0B5B  3000               	movlw	0
 13173  0B5C  0021               	movlb	1	; select bank1
 13174  0B5D  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 13175  0B5E  300A               	movlw	10
 13176  0B5F  1903               	skipnz
 13177  0B60  023A               	subwf	_ui16_step_cnt^(0+128),w
 13178  0B61  1C03               	btfss	3,0
 13179  0B62  2B65               	goto	i1l10741
 13180                           
 13181                           ;bldc.c: 311: else;bldc.c: 312: {;bldc.c: 322: MotorFlags.bits.B3 = 0;
 13182                           
 13183                           ;bldc.c: 304: {;bldc.c: 308: }
 13184  0B63  0020               	movlb	0	; select bank0
 13185  0B64  11DA               	bcf	_MotorFlags,3
 13186  0B65                     i1l10741:	
 13187                           
 13188                           ;bldc.c: 328: };bldc.c: 331: if (ui16_step_cnt >= 3 )
 13189  0B65  3000               	movlw	0
 13190  0B66  0021               	movlb	1	; select bank1
 13191  0B67  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 13192  0B68  3003               	movlw	3
 13193  0B69  1903               	skipnz
 13194  0B6A  023A               	subwf	_ui16_step_cnt^(0+128),w
 13195  0B6B  1C03               	skipc
 13196  0B6C  2B6F               	goto	i1l10745
 13197                           
 13198                           ;bldc.c: 333: {;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
 13199  0B6D  0020               	movlb	0	; select bank0
 13200  0B6E  125A               	bcf	_MotorFlags,4
 13201  0B6F                     i1l10745:	
 13202                           
 13203                           ;bldc.c: 337: };bldc.c: 340: BLDCWait( );
 13204  0B6F  319E  2650  318B   	fcall	_BLDCWait
 13205                           
 13206                           ;bldc.c: 346: if( C1OUT )
 13207  0B72  0022               	movlb	2	; select bank2
 13208  0B73  1F11               	btfss	17,6	;volatile
 13209  0B74  2B78               	goto	i1l263
 13210                           
 13211                           ;bldc.c: 349: {;bldc.c: 351: ui8_CompFlag = 0x00;
 13212  0B75  0021               	movlb	1	; select bank1
 13213  0B76  01DA               	clrf	_ui8_CompFlag^(0+128)
 13214                           
 13215                           ;bldc.c: 353: }
 13216  0B77  2D1A               	goto	i1l10929
 13217  0B78                     i1l263:	
 13218                           
 13219                           ;bldc.c: 356: else;bldc.c: 357: {;bldc.c: 362: ui8_CompFlag = 0x01;
 13220  0B78  0021               	movlb	1	; select bank1
 13221  0B79  01DA               	clrf	_ui8_CompFlag^(0+128)
 13222  0B7A  0ADA               	incf	_ui8_CompFlag^(0+128),f
 13223                           
 13224                           ;bldc.c: 366: };bldc.c: 372: switch( ui8_sampleState )
 13225  0B7B  2D1A               	goto	i1l10929
 13226  0B7C                     i1l10751:	
 13227                           ;bldc.c: 374: {;bldc.c: 376: case 1:
 13228                           
 13229                           
 13230                           ;bldc.c: 378: {;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
 13231  0B7C  302D               	movlw	45
 13232  0B7D  0021               	movlb	1	; select bank1
 13233  0B7E  009D               	movwf	29	;volatile
 13234                           
 13235                           ;bldc.c: 387: ADC_Wait( );
 13236  0B7F  319D  25CD  318B   	fcall	i1_ADC_Wait
 13237                           
 13238                           ;bldc.c: 391: ( GO_nDONE = 1 );
 13239  0B82  0021               	movlb	1	; select bank1
 13240  0B83  149D               	bsf	29,1	;volatile
 13241                           
 13242                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
 13243  0B84  319D  25FF  318B   	fcall	i1_ADC_Read
 13244  0B87  0871               	movf	?i1_ADC_Read+1,w
 13245  0B88  0023               	movlb	3	; select bank3
 13246  0B89  00D3               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
 13247  0B8A  0870               	movf	?i1_ADC_Read,w
 13248  0B8B  00D2               	movwf	_ui16_NTC_Temp_bldc^(0+384)
 13249                           
 13250                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
 13251  0B8C  3031               	movlw	49
 13252  0B8D  0021               	movlb	1	; select bank1
 13253  0B8E  2C22               	goto	L60
 13254  0B8F                     i1l10763:	
 13255                           ;bldc.c: 416: };bldc.c: 419: case 2:
 13256                           
 13257                           ;bldc.c: 413: break;
 13258                           
 13259                           ;bldc.c: 410: ui8_sampleState++;
 13260                           
 13261                           ;bldc.c: 407: ( GO_nDONE = 1 );
 13262                           
 13263                           ;bldc.c: 403: ADC_Wait( );
 13264                           
 13265                           
 13266                           ;bldc.c: 421: {;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
 13267  0B8F  0863               	movf	_ui8_Ubemf_sel^(0+256),w
 13268  0B90  0021               	movlb	1	; select bank1
 13269  0B91  009D               	movwf	29	;volatile
 13270                           
 13271                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
 13272  0B92  081B               	movf	27,w	;volatile
 13273  0B93  0020               	movlb	0	; select bank0
 13274  0B94  00A0               	movwf	??_interrrupt_bldc
 13275  0B95  0820               	movf	??_interrrupt_bldc,w
 13276  0B96  00DB               	movwf	_ui16_Ubat_bldc	;volatile
 13277                           
 13278                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
 13279  0B97  0021               	movlb	1	; select bank1
 13280  0B98  081C               	movf	28,w	;volatile
 13281  0B99  0020               	movlb	0	; select bank0
 13282  0B9A  00A0               	movwf	??_interrrupt_bldc
 13283  0B9B  0820               	movf	??_interrrupt_bldc,w
 13284  0B9C  00DC               	movwf	_ui16_Ubat_bldc+1	;volatile
 13285                           
 13286                           ;bldc.c: 454: __nop();
 13287  0B9D  0000               	nop
 13288                           
 13289                           ;bldc.c: 455: __nop();
 13290  0B9E  0000               	nop
 13291                           
 13292                           ;bldc.c: 456: __nop();
 13293  0B9F  0000               	nop
 13294                           
 13295                           ;bldc.c: 457: __nop();
 13296  0BA0  0000               	nop
 13297                           
 13298                           ;bldc.c: 458: __nop();
 13299  0BA1  0000               	nop
 13300                           
 13301                           ;bldc.c: 459: __nop();
 13302  0BA2  0000               	nop
 13303                           
 13304                           ;bldc.c: 460: __nop();
 13305  0BA3  0000               	nop
 13306                           
 13307                           ;bldc.c: 461: __nop();
 13308  0BA4  0000               	nop
 13309                           
 13310                           ;bldc.c: 463: __nop();
 13311  0BA5  0000               	nop
 13312                           
 13313                           ;bldc.c: 464: __nop();
 13314  0BA6  0000               	nop
 13315                           
 13316                           ;bldc.c: 465: __nop();
 13317  0BA7  0000               	nop
 13318                           
 13319                           ;bldc.c: 466: __nop();
 13320  0BA8  0000               	nop
 13321                           
 13322                           ;bldc.c: 467: __nop();
 13323  0BA9  0000               	nop
 13324                           
 13325                           ;bldc.c: 468: __nop();
 13326  0BAA  0000               	nop
 13327                           
 13328                           ;bldc.c: 469: __nop();
 13329  0BAB  0000               	nop
 13330                           
 13331                           ;bldc.c: 470: __nop();
 13332  0BAC  0000               	nop
 13333  0BAD  2C23               	goto	L59
 13334  0BAE                     i1l10803:	
 13335                           ;bldc.c: 486: };bldc.c: 489: case 3:
 13336                           
 13337                           ;bldc.c: 483: break;
 13338                           
 13339                           ;bldc.c: 480: ui8_sampleState++;
 13340                           
 13341                           ;bldc.c: 477: ( GO_nDONE = 1 );
 13342                           
 13343                           ;bldc.c: 474: ADC_Wait();
 13344                           
 13345                           
 13346                           ;bldc.c: 491: {;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
 13347  0BAE  0021               	movlb	1	; select bank1
 13348  0BAF  081B               	movf	27,w	;volatile
 13349  0BB0  0020               	movlb	0	; select bank0
 13350  0BB1  00A0               	movwf	??_interrrupt_bldc
 13351  0BB2  0820               	movf	??_interrrupt_bldc,w
 13352  0BB3  0021               	movlb	1	; select bank1
 13353  0BB4  00B4               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
 13354                           
 13355                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
 13356  0BB5  081C               	movf	28,w	;volatile
 13357  0BB6  0020               	movlb	0	; select bank0
 13358  0BB7  00A0               	movwf	??_interrrupt_bldc
 13359  0BB8  0820               	movf	??_interrrupt_bldc,w
 13360  0BB9  0021               	movlb	1	; select bank1
 13361  0BBA  00B5               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
 13362                           
 13363                           ;bldc.c: 511: ( GO_nDONE = 1 );
 13364  0BBB  149D               	bsf	29,1	;volatile
 13365                           
 13366                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui16_duty_cycle_BLDC != 0 ) )
 13367  0BBC  0020               	movlb	0	; select bank0
 13368  0BBD  1F5A               	btfss	_MotorFlags,6
 13369  0BBE  2BE3               	goto	i1l10833
 13370  0BBF  0021               	movlb	1	; select bank1
 13371  0BC0  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 13372  0BC1  0431               	iorwf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
 13373  0BC2  1903               	btfsc	3,2
 13374  0BC3  2BE3               	goto	i1l10833
 13375                           
 13376                           ;bldc.c: 521: {;bldc.c: 523: if( rising_bemf_flag )
 13377  0BC4  0020               	movlb	0	; select bank0
 13378  0BC5  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 13379  0BC6  2BDB               	goto	i1l10823
 13380                           
 13381                           ;bldc.c: 525: {;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
 13382  0BC7  0021               	movlb	1	; select bank1
 13383  0BC8  0834               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 13384  0BC9  3E64               	addlw	100
 13385  0BCA  0020               	movlb	0	; select bank0
 13386  0BCB  00A0               	movwf	??_interrrupt_bldc
 13387  0BCC  3000               	movlw	0
 13388  0BCD  0021               	movlb	1	; select bank1
 13389  0BCE  3D35               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 13390  0BCF  0020               	movlb	0	; select bank0
 13391  0BD0  00A1               	movwf	??_interrrupt_bldc+1
 13392  0BD1  085C               	movf	_ui16_Ubat_bldc+1,w	;volatile
 13393  0BD2  0221               	subwf	??_interrrupt_bldc+1,w
 13394  0BD3  1D03               	skipz
 13395  0BD4  2BD7               	goto	u946_25
 13396  0BD5  085B               	movf	_ui16_Ubat_bldc,w	;volatile
 13397  0BD6  0220               	subwf	??_interrrupt_bldc,w
 13398  0BD7                     u946_25:	
 13399  0BD7  1803               	skipnc
 13400  0BD8  2D28               	goto	i1l267
 13401                           
 13402                           ;bldc.c: 530: {;bldc.c: 534: ui8_sampleState++;
 13403  0BD9  3001               	movlw	1
 13404  0BDA  2BE5               	goto	L56
 13405  0BDB                     i1l10823:	
 13406                           ;bldc.c: 556: };bldc.c: 559: }
 13407                           
 13408                           ;bldc.c: 550: else;bldc.c: 551: {
 13409                           
 13410                           ;bldc.c: 547: }
 13411                           
 13412                           ;bldc.c: 544: ( GO_nDONE = 1 );
 13413                           
 13414                           ;bldc.c: 540: ADC_Wait( );
 13415                           
 13416                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
 13417                           
 13418                           
 13419                           ;bldc.c: 562: else;bldc.c: 563: {;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
 13420  0BDB  3000               	movlw	0
 13421  0BDC  0021               	movlb	1	; select bank1
 13422  0BDD  0235               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 13423  0BDE  301F               	movlw	31
 13424  0BDF  1903               	skipnz
 13425  0BE0  0234               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 13426  0BE1  1C03               	skipc
 13427  0BE2  2D28               	goto	i1l267
 13428  0BE3                     i1l10833:	
 13429                           ;bldc.c: 593: };bldc.c: 596: };bldc.c: 601: }
 13430                           
 13431                           ;bldc.c: 588: else;bldc.c: 589: {
 13432                           
 13433                           ;bldc.c: 585: }
 13434                           
 13435                           ;bldc.c: 582: ( GO_nDONE = 1 );
 13436                           
 13437                           ;bldc.c: 578: ADC_Wait( );
 13438                           
 13439                           ;bldc.c: 575: ( ADCON0 = ui8_UPhase_sel );
 13440                           
 13441                           ;bldc.c: 567: {;bldc.c: 571: ui8_sampleState++;
 13442                           
 13443                           
 13444                           ;bldc.c: 604: else;bldc.c: 605: {;bldc.c: 607: ui8_sampleState++;
 13445  0BE3  3001               	movlw	1
 13446  0BE4  0020               	movlb	0	; select bank0
 13447  0BE5                     L56:	
 13448  0BE5  00A0               	movwf	??_interrrupt_bldc
 13449  0BE6  0820               	movf	??_interrrupt_bldc,w
 13450  0BE7  0022               	movlb	2	; select bank2
 13451  0BE8  07E2               	addwf	_ui8_sampleState^(0+256),f
 13452                           
 13453                           ;bldc.c: 611: ( ADCON0 = ui8_UPhase_sel );
 13454  0BE9  0021               	movlb	1	; select bank1
 13455  0BEA  085B               	movf	_ui8_UPhase_sel^(0+128),w
 13456  0BEB  009D               	movwf	29	;volatile
 13457                           
 13458                           ;bldc.c: 615: ADC_Wait( );
 13459  0BEC  319D  25CD  318B   	fcall	i1_ADC_Wait
 13460                           
 13461                           ;bldc.c: 619: ( GO_nDONE = 1 );
 13462  0BEF  0021               	movlb	1	; select bank1
 13463  0BF0  149D               	bsf	29,1	;volatile
 13464                           
 13465                           ;bldc.c: 624: };bldc.c: 650: break;
 13466  0BF1  2D28               	goto	i1l267
 13467  0BF2                     i1l10841:	
 13468                           ;bldc.c: 653: };bldc.c: 656: case 4:
 13469                           
 13470                           
 13471                           ;bldc.c: 658: {;bldc.c: 664: BlankingCountdbg = ui8_BlankingCount;
 13472  0BF2  0021               	movlb	1	; select bank1
 13473  0BF3  085D               	movf	_ui8_BlankingCount^(0+128),w
 13474  0BF4  0020               	movlb	0	; select bank0
 13475  0BF5  00A0               	movwf	??_interrrupt_bldc
 13476  0BF6  0820               	movf	??_interrrupt_bldc,w
 13477  0BF7  0022               	movlb	2	; select bank2
 13478  0BF8  00E4               	movwf	_BlankingCountdbg^(0+256)
 13479                           
 13480                           ;bldc.c: 665: ui8_BlankingCount = 0;
 13481  0BF9  0021               	movlb	1	; select bank1
 13482  0BFA  01DD               	clrf	_ui8_BlankingCount^(0+128)
 13483                           
 13484                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
 13485  0BFB  319D  25FF  318B   	fcall	i1_ADC_Read
 13486  0BFE  0871               	movf	?i1_ADC_Read+1,w
 13487  0BFF  0023               	movlb	3	; select bank3
 13488  0C00  00D7               	movwf	(_ui16_UPhase_bldc+1)^(0+384)
 13489  0C01  0870               	movf	?i1_ADC_Read,w
 13490  0C02  00D6               	movwf	_ui16_UPhase_bldc^(0+384)
 13491                           
 13492                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
 13493  0C03  0021               	movlb	1	; select bank1
 13494  0C04  1CE0               	btfss	_ui8_error_Flags^(0+128),1
 13495  0C05  2C0F               	goto	i1l10857
 13496                           
 13497                           ;bldc.c: 677: {;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
 13498  0C06  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13499  0C07  009D               	movwf	29	;volatile
 13500                           
 13501                           ;bldc.c: 682: ADC_Wait( );
 13502  0C08  319D  25CD  318B   	fcall	i1_ADC_Wait
 13503                           
 13504                           ;bldc.c: 683: ( GO_nDONE = 1 );
 13505  0C0B  0021               	movlb	1	; select bank1
 13506  0C0C  149D               	bsf	29,1	;volatile
 13507                           
 13508                           ;bldc.c: 686: ui8_sampleState = 9;
 13509  0C0D  3009               	movlw	9
 13510  0C0E  2D0D               	goto	L52
 13511  0C0F                     i1l10857:	
 13512                           ;bldc.c: 688: }
 13513                           
 13514                           
 13515                           ;bldc.c: 691: else;bldc.c: 692: {;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 13516  0C0F  3075               	movlw	117
 13517  0C10  0021               	movlb	1	; select bank1
 13518  0C11  009D               	movwf	29	;volatile
 13519                           
 13520                           ;bldc.c: 697: ADC_Wait( );
 13521  0C12  319D  25CD  318B   	fcall	i1_ADC_Wait
 13522  0C15                     i1l10863:	
 13523                           ;bldc.c: 709: };bldc.c: 712: case 5:
 13524                           
 13525                           ;bldc.c: 703: };bldc.c: 706: break;
 13526                           
 13527                           ;bldc.c: 700: ui8_sampleState++;
 13528                           
 13529  0C15                     i1l10865:	
 13530                           ;bldc.c: 724: };bldc.c: 727: case 6:
 13531                           
 13532                           ;bldc.c: 721: break;
 13533                           
 13534                           ;bldc.c: 714: {;bldc.c: 718: ui8_sampleState++;
 13535                           
 13536  0C15                     i1l10867:	
 13537                           ;bldc.c: 739: };bldc.c: 742: case 7:
 13538                           
 13539                           ;bldc.c: 736: break;
 13540                           
 13541                           ;bldc.c: 729: {;bldc.c: 733: ui8_sampleState++;
 13542                           
 13543  0C15  2D13               	goto	i1l10925
 13544  0C16                     i1l284:	
 13545                           ;bldc.c: 754: };bldc.c: 757: case 8:
 13546                           
 13547                           ;bldc.c: 751: break;
 13548                           
 13549                           ;bldc.c: 744: {;bldc.c: 748: ui8_sampleState++;
 13550                           
 13551                           
 13552                           ;bldc.c: 759: {;bldc.c: 764: ( GO_nDONE = 1 );
 13553  0C16  0021               	movlb	1	; select bank1
 13554  0C17  149D               	bsf	29,1	;volatile
 13555                           
 13556                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
 13557  0C18  319D  25FF  318B   	fcall	i1_ADC_Read
 13558  0C1B  0871               	movf	?i1_ADC_Read+1,w
 13559  0C1C  0024               	movlb	4	; select bank4
 13560  0C1D  00DD               	movwf	(_ui16_CPU_Temp_bldc+1)^(0+512)
 13561  0C1E  0870               	movf	?i1_ADC_Read,w
 13562  0C1F  00DC               	movwf	_ui16_CPU_Temp_bldc^(0+512)
 13563                           
 13564                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
 13565  0C20  0021               	movlb	1	; select bank1
 13566  0C21  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13567  0C22                     L60:	
 13568  0C22  009D               	movwf	29	;volatile
 13569  0C23                     L59:	
 13570                           
 13571                           ;bldc.c: 776: ADC_Wait( );
 13572  0C23  319D  25CD  318B   	fcall	i1_ADC_Wait
 13573                           
 13574                           ;bldc.c: 780: ( GO_nDONE = 1 );
 13575  0C26  0021               	movlb	1	; select bank1
 13576  0C27  149D               	bsf	29,1	;volatile
 13577  0C28  2D13               	goto	i1l10925
 13578  0C29                     i1l10877:	
 13579                           ;bldc.c: 790: };bldc.c: 793: case 9:
 13580                           
 13581                           ;bldc.c: 787: break;
 13582                           
 13583                           ;bldc.c: 784: ui8_sampleState++;
 13584                           
 13585                           
 13586                           ;bldc.c: 795: {;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
 13587  0C29  319D  25FF  318B   	fcall	i1_ADC_Read
 13588  0C2C  0871               	movf	?i1_ADC_Read+1,w
 13589  0C2D  0020               	movlb	0	; select bank0
 13590  0C2E  00D2               	movwf	_ui16_IPhase_bldc+1	;volatile
 13591  0C2F  0870               	movf	?i1_ADC_Read,w
 13592  0C30  00D1               	movwf	_ui16_IPhase_bldc	;volatile
 13593                           
 13594                           ;bldc.c: 806: if (MotorFlags.bits.B6)
 13595  0C31  1B5A               	btfsc	_MotorFlags,6
 13596  0C32  2CDE               	goto	i1l10903
 13597  0C33  2CEB               	goto	i1l10905
 13598  0C34                     i1l10883:	
 13599                           ;bldc.c: 812: {;bldc.c: 814: case ( 0x02 << 2 ) | 0x01:
 13600                           
 13601                           ;bldc.c: 808: {;bldc.c: 810: switch( ui8_IPhase_sel )
 13602                           
 13603                           
 13604                           ;bldc.c: 816: {;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0
      +                          ]) )
 13605  0C34  0022               	movlb	2	; select bank2
 13606  0C35  0820               	movf	_ui8_current_cal^(0+256),w
 13607  0C36  0020               	movlb	0	; select bank0
 13608  0C37  00A0               	movwf	??_interrrupt_bldc
 13609  0C38  01A1               	clrf	??_interrrupt_bldc+1
 13610  0C39  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13611  0C3A  0221               	subwf	??_interrrupt_bldc+1,w
 13612  0C3B  1D03               	skipz
 13613  0C3C  2C3F               	goto	u950_25
 13614  0C3D  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13615  0C3E  0220               	subwf	??_interrrupt_bldc,w
 13616  0C3F                     u950_25:	
 13617  0C3F  1803               	skipnc
 13618  0C40  2C69               	goto	i1l10887
 13619                           
 13620                           ;bldc.c: 820: {;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[0])*ui16_I_cal_Ph1)>>8);
 13621  0C41  0022               	movlb	2	; select bank2
 13622  0C42  0820               	movf	_ui8_current_cal^(0+256),w
 13623  0C43  0020               	movlb	0	; select bank0
 13624  0C44  00A0               	movwf	??_interrrupt_bldc
 13625  0C45  01A1               	clrf	??_interrrupt_bldc+1
 13626  0C46  09A0               	comf	??_interrrupt_bldc,f
 13627  0C47  09A1               	comf	??_interrrupt_bldc+1,f
 13628  0C48  0AA0               	incf	??_interrrupt_bldc,f
 13629  0C49  1903               	skipnz
 13630  0C4A  0AA1               	incf	??_interrrupt_bldc+1,f
 13631  0C4B  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13632  0C4C  0720               	addwf	??_interrrupt_bldc,w
 13633  0C4D  00F0               	movwf	i1___wmul@multiplier
 13634  0C4E  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13635  0C4F  3D21               	addwfc	??_interrrupt_bldc+1,w
 13636  0C50  00F1               	movwf	i1___wmul@multiplier+1
 13637  0C51  0021               	movlb	1	; select bank1
 13638  0C52  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 13639  0C53  00F3               	movwf	i1___wmul@multiplicand+1
 13640  0C54  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 13641  0C55  00F2               	movwf	i1___wmul@multiplicand
 13642  0C56  319E  2619  318B   	fcall	i1___wmul
 13643  0C59  0870               	movf	?i1___wmul,w
 13644  0C5A  0020               	movlb	0	; select bank0
 13645  0C5B  00A2               	movwf	??_interrrupt_bldc+2
 13646  0C5C  0871               	movf	?i1___wmul+1,w
 13647  0C5D  00A3               	movwf	??_interrrupt_bldc+3
 13648  0C5E  0823               	movf	??_interrrupt_bldc+3,w
 13649  0C5F  00A2               	movwf	??_interrrupt_bldc+2
 13650  0C60  01A3               	clrf	??_interrrupt_bldc+3
 13651  0C61  0822               	movf	??_interrrupt_bldc+2,w
 13652  0C62  0023               	movlb	3	; select bank3
 13653  0C63  00D4               	movwf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13654  0C64  0020               	movlb	0	; select bank0
 13655  0C65  0823               	movf	??_interrrupt_bldc+3,w
 13656  0C66  0023               	movlb	3	; select bank3
 13657  0C67  00D5               	movwf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13658                           
 13659                           ;bldc.c: 824: }
 13660  0C68  2CF3               	goto	i1l10907
 13661  0C69                     i1l10887:	
 13662                           
 13663                           ;bldc.c: 827: else;bldc.c: 828: {;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
 13664  0C69  0023               	movlb	3	; select bank3
 13665  0C6A  01D4               	clrf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13666  0C6B  01D5               	clrf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13667                           
 13668                           ;bldc.c: 832: };bldc.c: 835: break;
 13669  0C6C  2CF3               	goto	i1l10907
 13670  0C6D                     i1l10889:	
 13671                           ;bldc.c: 837: };bldc.c: 840: case ( 0x0D << 2 ) | 0x01:
 13672                           
 13673                           
 13674                           ;bldc.c: 842: {;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1
      +                          ] ) )
 13675  0C6D  0022               	movlb	2	; select bank2
 13676  0C6E  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 13677  0C6F  0020               	movlb	0	; select bank0
 13678  0C70  00A0               	movwf	??_interrrupt_bldc
 13679  0C71  01A1               	clrf	??_interrrupt_bldc+1
 13680  0C72  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13681  0C73  0221               	subwf	??_interrrupt_bldc+1,w
 13682  0C74  1D03               	skipz
 13683  0C75  2C78               	goto	u951_25
 13684  0C76  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13685  0C77  0220               	subwf	??_interrrupt_bldc,w
 13686  0C78                     u951_25:	
 13687  0C78  1803               	skipnc
 13688  0C79  2CA2               	goto	i1l10893
 13689                           
 13690                           ;bldc.c: 846: {;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[1])*ui16_I_cal_Ph2)>>8);
 13691  0C7A  0022               	movlb	2	; select bank2
 13692  0C7B  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 13693  0C7C  0020               	movlb	0	; select bank0
 13694  0C7D  00A0               	movwf	??_interrrupt_bldc
 13695  0C7E  01A1               	clrf	??_interrrupt_bldc+1
 13696  0C7F  09A0               	comf	??_interrrupt_bldc,f
 13697  0C80  09A1               	comf	??_interrrupt_bldc+1,f
 13698  0C81  0AA0               	incf	??_interrrupt_bldc,f
 13699  0C82  1903               	skipnz
 13700  0C83  0AA1               	incf	??_interrrupt_bldc+1,f
 13701  0C84  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13702  0C85  0720               	addwf	??_interrrupt_bldc,w
 13703  0C86  00F0               	movwf	i1___wmul@multiplier
 13704  0C87  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13705  0C88  3D21               	addwfc	??_interrrupt_bldc+1,w
 13706  0C89  00F1               	movwf	i1___wmul@multiplier+1
 13707  0C8A  0021               	movlb	1	; select bank1
 13708  0C8B  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 13709  0C8C  00F3               	movwf	i1___wmul@multiplicand+1
 13710  0C8D  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 13711  0C8E  00F2               	movwf	i1___wmul@multiplicand
 13712  0C8F  319E  2619  318B   	fcall	i1___wmul
 13713  0C92  0870               	movf	?i1___wmul,w
 13714  0C93  0020               	movlb	0	; select bank0
 13715  0C94  00A2               	movwf	??_interrrupt_bldc+2
 13716  0C95  0871               	movf	?i1___wmul+1,w
 13717  0C96  00A3               	movwf	??_interrrupt_bldc+3
 13718  0C97  0823               	movf	??_interrrupt_bldc+3,w
 13719  0C98  00A2               	movwf	??_interrrupt_bldc+2
 13720  0C99  01A3               	clrf	??_interrrupt_bldc+3
 13721  0C9A  0822               	movf	??_interrrupt_bldc+2,w
 13722  0C9B  0024               	movlb	4	; select bank4
 13723  0C9C  00E0               	movwf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13724  0C9D  0020               	movlb	0	; select bank0
 13725  0C9E  0823               	movf	??_interrrupt_bldc+3,w
 13726  0C9F  0024               	movlb	4	; select bank4
 13727  0CA0  00E1               	movwf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13728                           
 13729                           ;bldc.c: 851: }
 13730  0CA1  2CF3               	goto	i1l10907
 13731  0CA2                     i1l10893:	
 13732                           
 13733                           ;bldc.c: 854: else;bldc.c: 855: {;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
 13734  0CA2  0024               	movlb	4	; select bank4
 13735  0CA3  01E0               	clrf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13736  0CA4  01E1               	clrf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13737                           
 13738                           ;bldc.c: 859: };bldc.c: 862: break;
 13739  0CA5  2CF3               	goto	i1l10907
 13740  0CA6                     i1l10895:	
 13741                           ;bldc.c: 864: };bldc.c: 867: case ( 0x04 << 2 ) | 0x01:
 13742                           
 13743                           
 13744                           ;bldc.c: 869: {;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]
      +                          ) )
 13745  0CA6  0022               	movlb	2	; select bank2
 13746  0CA7  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 13747  0CA8  0020               	movlb	0	; select bank0
 13748  0CA9  00A0               	movwf	??_interrrupt_bldc
 13749  0CAA  01A1               	clrf	??_interrrupt_bldc+1
 13750  0CAB  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13751  0CAC  0221               	subwf	??_interrrupt_bldc+1,w
 13752  0CAD  1D03               	skipz
 13753  0CAE  2CB1               	goto	u952_25
 13754  0CAF  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13755  0CB0  0220               	subwf	??_interrrupt_bldc,w
 13756  0CB1                     u952_25:	
 13757  0CB1  1803               	skipnc
 13758  0CB2  2CDB               	goto	i1l10899
 13759                           
 13760                           ;bldc.c: 873: {;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[2])*ui16_I_cal_Ph3)>>8);
 13761  0CB3  0022               	movlb	2	; select bank2
 13762  0CB4  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 13763  0CB5  0020               	movlb	0	; select bank0
 13764  0CB6  00A0               	movwf	??_interrrupt_bldc
 13765  0CB7  01A1               	clrf	??_interrrupt_bldc+1
 13766  0CB8  09A0               	comf	??_interrrupt_bldc,f
 13767  0CB9  09A1               	comf	??_interrrupt_bldc+1,f
 13768  0CBA  0AA0               	incf	??_interrrupt_bldc,f
 13769  0CBB  1903               	skipnz
 13770  0CBC  0AA1               	incf	??_interrrupt_bldc+1,f
 13771  0CBD  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13772  0CBE  0720               	addwf	??_interrrupt_bldc,w
 13773  0CBF  00F0               	movwf	i1___wmul@multiplier
 13774  0CC0  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13775  0CC1  3D21               	addwfc	??_interrrupt_bldc+1,w
 13776  0CC2  00F1               	movwf	i1___wmul@multiplier+1
 13777  0CC3  0021               	movlb	1	; select bank1
 13778  0CC4  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 13779  0CC5  00F3               	movwf	i1___wmul@multiplicand+1
 13780  0CC6  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 13781  0CC7  00F2               	movwf	i1___wmul@multiplicand
 13782  0CC8  319E  2619  318B   	fcall	i1___wmul
 13783  0CCB  0870               	movf	?i1___wmul,w
 13784  0CCC  0020               	movlb	0	; select bank0
 13785  0CCD  00A2               	movwf	??_interrrupt_bldc+2
 13786  0CCE  0871               	movf	?i1___wmul+1,w
 13787  0CCF  00A3               	movwf	??_interrrupt_bldc+3
 13788  0CD0  0823               	movf	??_interrrupt_bldc+3,w
 13789  0CD1  00A2               	movwf	??_interrrupt_bldc+2
 13790  0CD2  01A3               	clrf	??_interrrupt_bldc+3
 13791  0CD3  0822               	movf	??_interrrupt_bldc+2,w
 13792  0CD4  0024               	movlb	4	; select bank4
 13793  0CD5  00DE               	movwf	_ui16_IPhase3_bldc^(0+512)	;volatile
 13794  0CD6  0020               	movlb	0	; select bank0
 13795  0CD7  0823               	movf	??_interrrupt_bldc+3,w
 13796  0CD8  0024               	movlb	4	; select bank4
 13797  0CD9  00DF               	movwf	(_ui16_IPhase3_bldc+1)^(0+512)	;volatile
 13798                           
 13799                           ;bldc.c: 877: }
 13800  0CDA  2CF3               	goto	i1l10907
 13801  0CDB                     i1l10899:	
 13802                           
 13803                           ;bldc.c: 880: else;bldc.c: 881: {;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
 13804  0CDB  0024               	movlb	4	; select bank4
 13805  0CDC  2CF1               	goto	L54
 13806  0CDD                     i1l10901:	
 13807                           ;bldc.c: 890: };bldc.c: 894: default:
 13808                           
 13809                           ;bldc.c: 885: };bldc.c: 888: break;
 13810                           
 13811  0CDD  2CEB               	goto	i1l10905
 13812  0CDE                     i1l10903:	
 13813                           ;bldc.c: 902: };bldc.c: 904: }
 13814                           
 13815                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
 13816                           
 13817                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
 13818                           
 13819                           ;bldc.c: 895: {;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
 13820                           
 13821  0CDE  0021               	movlb	1	; select bank1
 13822  0CDF  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13823                           
 13824                           ; Switch size 1, requested type "space"
 13825                           ; Number of cases is 3, Range of values is 9 to 53
 13826                           ; switch strategies available:
 13827                           ; Name         Instructions Cycles
 13828                           ; simple_byte           10     6 (average)
 13829                           ; direct_byte           99     9 (fixed)
 13830                           ; jumptable            263     9 (fixed)
 13831                           ;	Chosen strategy is simple_byte
 13832  0CE0  3A09               	xorlw	9	; case 9
 13833  0CE1  1903               	skipnz
 13834  0CE2  2C34               	goto	i1l10883
 13835  0CE3  3A18               	xorlw	24	; case 17
 13836  0CE4  1903               	skipnz
 13837  0CE5  2CA6               	goto	i1l10895
 13838  0CE6  3A24               	xorlw	36	; case 53
 13839  0CE7  1903               	skipnz
 13840  0CE8  2C6D               	goto	i1l10889
 13841  0CE9  2CDD               	goto	i1l10901
 13842                           
 13843                           ;bldc.c: 907: }
 13844  0CEA  2CF3               	goto	i1l10907
 13845  0CEB                     i1l10905:	
 13846                           
 13847                           ;bldc.c: 910: else;bldc.c: 911: {;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
 13848  0CEB  0023               	movlb	3	; select bank3
 13849  0CEC  01D4               	clrf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13850  0CED  01D5               	clrf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13851                           
 13852                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
 13853  0CEE  0024               	movlb	4	; select bank4
 13854  0CEF  01E0               	clrf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13855  0CF0  01E1               	clrf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13856  0CF1                     L54:	
 13857                           
 13858                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
 13859  0CF1  01DE               	clrf	_ui16_IPhase3_bldc^(0+512)	;volatile
 13860  0CF2  01DF               	clrf	(_ui16_IPhase3_bldc+1)^(0+512)	;volatile
 13861  0CF3                     i1l10907:	
 13862                           
 13863                           ;bldc.c: 918: };bldc.c: 956: if( (ui16_IPhase_bldc.w > 500+40) )
 13864  0CF3  3002               	movlw	2
 13865  0CF4  0020               	movlb	0	; select bank0
 13866  0CF5  0252               	subwf	_ui16_IPhase_bldc+1,w	;volatile
 13867  0CF6  301D               	movlw	29
 13868  0CF7  1903               	skipnz
 13869  0CF8  0251               	subwf	_ui16_IPhase_bldc,w	;volatile
 13870  0CF9  1C03               	skipc
 13871  0CFA  2D00               	goto	i1l10913
 13872                           
 13873                           ;bldc.c: 958: {;bldc.c: 960: MotorFlags.bits.B0 = 1;
 13874  0CFB  145A               	bsf	_MotorFlags,0
 13875                           
 13876                           ;bldc.c: 964: LATC = LATC & 0b11100101;
 13877  0CFC  0022               	movlb	2	; select bank2
 13878  0CFD  080E               	movf	14,w	;volatile
 13879  0CFE  39E5               	andlw	229
 13880  0CFF  008E               	movwf	14	;volatile
 13881  0D00                     i1l10913:	
 13882                           ;bldc.c: 973: else;bldc.c: 974: {
 13883                           
 13884                           ;bldc.c: 970: }
 13885                           
 13886                           
 13887                           ;bldc.c: 978: };bldc.c: 984: ADC_Wait( );
 13888  0D00  319D  25CD  318B   	fcall	i1_ADC_Wait
 13889                           
 13890                           ;bldc.c: 988: ( GO_nDONE = 1 );
 13891  0D03  0021               	movlb	1	; select bank1
 13892  0D04  149D               	bsf	29,1	;volatile
 13893                           
 13894                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
 13895  0D05  1CE0               	btfss	_ui8_error_Flags^(0+128),1
 13896  0D06  2D13               	goto	i1l10925
 13897                           
 13898                           ;bldc.c: 993: {;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 13899  0D07  3075               	movlw	117
 13900  0D08  009D               	movwf	29	;volatile
 13901                           
 13902                           ;bldc.c: 998: ADC_Wait( );
 13903  0D09  319D  25CD  318B   	fcall	i1_ADC_Wait
 13904                           
 13905                           ;bldc.c: 1001: ui8_sampleState = 5;
 13906  0D0C  3005               	movlw	5
 13907  0D0D                     L52:	
 13908  0D0D  0020               	movlb	0	; select bank0
 13909  0D0E  00A0               	movwf	??_interrrupt_bldc
 13910  0D0F  0820               	movf	??_interrrupt_bldc,w
 13911  0D10  0022               	movlb	2	; select bank2
 13912  0D11  00E2               	movwf	_ui8_sampleState^(0+256)
 13913                           
 13914                           ;bldc.c: 1003: }
 13915  0D12  2D28               	goto	i1l267
 13916  0D13                     i1l10925:	
 13917                           
 13918                           ;bldc.c: 1006: else;bldc.c: 1007: {;bldc.c: 1009: ui8_sampleState++;
 13919  0D13  3001               	movlw	1
 13920  0D14  0020               	movlb	0	; select bank0
 13921  0D15  00A0               	movwf	??_interrrupt_bldc
 13922  0D16  0820               	movf	??_interrrupt_bldc,w
 13923  0D17  0022               	movlb	2	; select bank2
 13924  0D18  07E2               	addwf	_ui8_sampleState^(0+256),f
 13925                           
 13926                           ;bldc.c: 1027: };bldc.c: 1030: }
 13927                           
 13928                           ;bldc.c: 1023: {;bldc.c: 1025: break;
 13929                           
 13930                           ;bldc.c: 1018: };bldc.c: 1021: case 10:
 13931                           
 13932                           ;bldc.c: 1012: };bldc.c: 1015: break;
 13933  0D19  2D28               	goto	i1l267
 13934  0D1A                     i1l10929:	
 13935  0D1A  0022               	movlb	2	; select bank2
 13936  0D1B  0862               	movf	_ui8_sampleState^(0+256),w
 13937                           
 13938                           ; Switch size 1, requested type "space"
 13939                           ; Number of cases is 10, Range of values is 1 to 10
 13940                           ; switch strategies available:
 13941                           ; Name         Instructions Cycles
 13942                           ; direct_byte           29     9 (fixed)
 13943                           ; simple_byte           31    16 (average)
 13944                           ; jumptable            263     9 (fixed)
 13945                           ;	Chosen strategy is direct_byte
 13946  0D1C  3EFF               	addlw	-1
 13947  0D1D  1C03               	skipc
 13948  0D1E  2D28               	goto	i1l267
 13949  0D1F  0084               	movwf	4
 13950  0D20  300A               	movlw	10
 13951  0D21  0204               	subwf	4,w
 13952  0D22  1803               	skipnc
 13953  0D23  2D28               	goto	i1l267
 13954  0D24  3198               	movlp	high i1S11839
 13955  0D25  3504               	lslf	4,w
 13956  0D26  3E40               	addlw	low i1S11839
 13957  0D27  0082               	movwf	2
 13958  0D28                     i1l267:	
 13959                           
 13960                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
 13961  0D28  0020               	movlb	0	; select bank0
 13962  0D29  1F5A               	btfss	_MotorFlags,6
 13963  0D2A  2D6D               	goto	i1l10959
 13964                           
 13965                           ;bldc.c: 1071: {;bldc.c: 1073: if( MotorFlags.bits.B3)
 13966  0D2B  1DDA               	btfss	_MotorFlags,3
 13967  0D2C  2D6F               	goto	i1l10961
 13968                           
 13969                           ;bldc.c: 1075: {;bldc.c: 1077: bool_start_demand_mat = 1 ;
 13970  0D2D  0022               	movlb	2	; select bank2
 13971  0D2E  01E6               	clrf	_bool_start_demand_mat^(0+256)
 13972  0D2F  0AE6               	incf	_bool_start_demand_mat^(0+256),f
 13973                           
 13974                           ;bldc.c: 1078: ui8_fixed_start_speed_mat = 65 ;
 13975  0D30  3041               	movlw	65
 13976  0D31  0023               	movlb	3	; select bank3
 13977  0D32  00BE               	movwf	_ui8_fixed_start_speed_mat^(0+384)
 13978  0D33  3000               	movlw	0
 13979  0D34  00BF               	movwf	(_ui8_fixed_start_speed_mat^(0+384)+1)
 13980                           
 13981                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
 13982  0D35  0024               	movlb	4	; select bank4
 13983  0D36  01E8               	clrf	_ui16_Task_Cont500ms^(0+512)
 13984  0D37  01E9               	clrf	(_ui16_Task_Cont500ms+1)^(0+512)
 13985                           
 13986                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
 13987  0D38  3003               	movlw	3
 13988  0D39  0020               	movlb	0	; select bank0
 13989  0D3A  0553               	andwf	_comm_time,w
 13990  0D3B  00A0               	movwf	??_interrrupt_bldc
 13991  0D3C  3000               	movlw	0
 13992  0D3D  0554               	andwf	_comm_time+1,w
 13993  0D3E  00A1               	movwf	??_interrrupt_bldc+1
 13994  0D3F  0820               	movf	??_interrrupt_bldc,w
 13995  0D40  0421               	iorwf	??_interrrupt_bldc+1,w
 13996  0D41  1D03               	btfss	3,2
 13997  0D42  2D6F               	goto	i1l10961
 13998                           
 13999                           ;bldc.c: 1111: else;bldc.c: 1112: {;bldc.c: 1114: if (ui16_Ubat_bldc.w)
 14000                           
 14001                           ;bldc.c: 1105: };bldc.c: 1108: }
 14002                           
 14003                           ;bldc.c: 1100: {;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 14004                           
 14005                           ;bldc.c: 1096: {;bldc.c: 1098: if (ui16_Ubat_bldc.w)
 14006                           
 14007                           ;bldc.c: 1092: {;bldc.c: 1094: if (MotorFlags.bits.B4)
 14008  0D43  085B               	movf	_ui16_Ubat_bldc,w	;volatile
 14009  0D44  045C               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
 14010  0D45  1903               	btfsc	3,2
 14011  0D46  2D59               	goto	i1l10951
 14012                           
 14013                           ;bldc.c: 1116: {;bldc.c: 1119: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 14014  0D47  085C               	movf	_ui16_Ubat_bldc+1,w	;volatile
 14015  0D48  00F1               	movwf	___lwdiv@divisor+1
 14016  0D49  085B               	movf	_ui16_Ubat_bldc,w	;volatile
 14017  0D4A  00F0               	movwf	___lwdiv@divisor
 14018  0D4B  3080               	movlw	128
 14019  0D4C  00F2               	movwf	___lwdiv@dividend
 14020  0D4D  303E               	movlw	62
 14021  0D4E  00F3               	movwf	___lwdiv@dividend+1
 14022  0D4F  3191  21A8  318B   	fcall	___lwdiv
 14023  0D52  0870               	movf	?___lwdiv,w
 14024  0D53  0020               	movlb	0	; select bank0
 14025  0D54  00A4               	movwf	interrrupt_bldc@ui32_tmp
 14026  0D55  0871               	movf	?___lwdiv+1,w
 14027  0D56  00A5               	movwf	interrrupt_bldc@ui32_tmp+1
 14028  0D57  01A6               	clrf	interrrupt_bldc@ui32_tmp+2
 14029  0D58  01A7               	clrf	interrrupt_bldc@ui32_tmp+3
 14030  0D59                     i1l10951:	
 14031                           
 14032                           ;bldc.c: 1121: };bldc.c: 1124: };bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui
      +                          32_tmp) )
 14033  0D59  0021               	movlb	1	; select bank1
 14034  0D5A  085F               	movf	_ui8_StartupPWM^(0+128),w
 14035  0D5B  0020               	movlb	0	; select bank0
 14036  0D5C  0224               	subwf	interrrupt_bldc@ui32_tmp,w
 14037  0D5D  1803               	skipnc
 14038  0D5E  2D63               	goto	i1l10955
 14039                           
 14040                           ;bldc.c: 1129: {;bldc.c: 1131: ui8_StartupPWM--;
 14041  0D5F  3001               	movlw	1
 14042  0D60  0021               	movlb	1	; select bank1
 14043  0D61  02DF               	subwf	_ui8_StartupPWM^(0+128),f
 14044                           
 14045                           ;bldc.c: 1133: }
 14046  0D62  2D69               	goto	i1l10957
 14047  0D63                     i1l10955:	
 14048                           
 14049                           ;bldc.c: 1136: else;bldc.c: 1137: {;bldc.c: 1139: ui8_StartupPWM++;
 14050  0D63  3001               	movlw	1
 14051  0D64  0020               	movlb	0	; select bank0
 14052  0D65  00A0               	movwf	??_interrrupt_bldc
 14053  0D66  0820               	movf	??_interrrupt_bldc,w
 14054  0D67  0021               	movlb	1	; select bank1
 14055  0D68  07DF               	addwf	_ui8_StartupPWM^(0+128),f
 14056  0D69                     i1l10957:	
 14057                           
 14058                           ;bldc.c: 1141: };bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
 14059  0D69  085F               	movf	_ui8_StartupPWM^(0+128),w
 14060  0D6A  0025               	movlb	5	; select bank5
 14061  0D6B  0091               	movwf	17	;volatile
 14062                           
 14063                           ;bldc.c: 1146: };bldc.c: 1149: };bldc.c: 1152: }
 14064  0D6C  2D6F               	goto	i1l10961
 14065  0D6D                     i1l10959:	
 14066                           
 14067                           ;bldc.c: 1155: else;bldc.c: 1156: {;bldc.c: 1159: CCPR1L = 0;
 14068  0D6D  0025               	movlb	5	; select bank5
 14069  0D6E  0191               	clrf	17	;volatile
 14070  0D6F                     i1l10961:	
 14071                           
 14072                           ;bldc.c: 1161: };bldc.c: 1165: if( 0 == ui8_BlankingCount )
 14073  0D6F  0021               	movlb	1	; select bank1
 14074  0D70  085D               	movf	_ui8_BlankingCount^(0+128),w
 14075  0D71  1D03               	btfss	3,2
 14076  0D72  2D9B               	goto	i1l10981
 14077                           
 14078                           ;bldc.c: 1168: {;bldc.c: 1177: if( ui8_CompFlag )
 14079  0D73  085A               	movf	_ui8_CompFlag^(0+128),w
 14080  0D74  1903               	btfsc	3,2
 14081  0D75  2D80               	goto	i1l316
 14082                           
 14083                           ;bldc.c: 1180: {;bldc.c: 1185: if( MotorFlags.bits.B5 == 0 )
 14084  0D76  0020               	movlb	0	; select bank0
 14085  0D77  1ADA               	btfsc	_MotorFlags,5
 14086  0D78  2D80               	goto	i1l316
 14087                           
 14088                           ;bldc.c: 1187: {;bldc.c: 1191: ui8_zero_cros_cnt++;
 14089  0D79  3001               	movlw	1
 14090  0D7A  0024               	movlb	4	; select bank4
 14091  0D7B  07E6               	addwf	_ui8_zero_cros_cnt^(0+512),f
 14092  0D7C  3000               	movlw	0
 14093  0D7D  3DE7               	addwfc	(_ui8_zero_cros_cnt+1)^(0+512),f
 14094                           
 14095                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
 14096  0D7E  0020               	movlb	0	; select bank0
 14097  0D7F  16DA               	bsf	_MotorFlags,5
 14098  0D80                     i1l316:	
 14099                           
 14100                           ;bldc.c: 1196: };bldc.c: 1199: };bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
 14101  0D80  0021               	movlb	1	; select bank1
 14102  0D81  085A               	movf	_ui8_CompFlag^(0+128),w
 14103  0D82  0020               	movlb	0	; select bank0
 14104  0D83  00A0               	movwf	??_interrrupt_bldc
 14105  0D84  0820               	movf	??_interrrupt_bldc,w
 14106  0D85  0022               	movlb	2	; select bank2
 14107  0D86  00E1               	movwf	_CompFlag_prev^(0+256)
 14108                           
 14109                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
 14110  0D87  0020               	movlb	0	; select bank0
 14111  0D88  1EDA               	btfss	_MotorFlags,5
 14112  0D89  0008               	return
 14113                           
 14114                           ;bldc.c: 1353: {;bldc.c: 1357: if( 0 == phase_delay_counter )
 14115  0D8A  0021               	movlb	1	; select bank1
 14116  0D8B  0838               	movf	_phase_delay_counter^(0+128),w
 14117  0D8C  0439               	iorwf	(_phase_delay_counter+1)^(0+128),w
 14118  0D8D  1D03               	btfss	3,2
 14119  0D8E  2D95               	goto	i1l10979
 14120                           
 14121                           ;bldc.c: 1360: {;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
 14122  0D8F  0020               	movlb	0	; select bank0
 14123  0D90  19DA               	btfsc	_MotorFlags,3
 14124  0D91  0008               	return
 14125                           
 14126                           ;bldc.c: 1364: {;bldc.c: 1378: commutate( );
 14127  0D92  3189  2126         	fcall	i1_commutate
 14128                           
 14129                           ;bldc.c: 1383: };bldc.c: 1386: }
 14130  0D94  0008               	return
 14131  0D95                     i1l10979:	
 14132                           
 14133                           ;bldc.c: 1389: else;bldc.c: 1390: {;bldc.c: 1392: phase_delay_counter--;
 14134  0D95  30FF               	movlw	255
 14135  0D96  0021               	movlb	1	; select bank1
 14136  0D97  07B8               	addwf	_phase_delay_counter^(0+128),f
 14137  0D98  30FF               	movlw	255
 14138  0D99  3DB9               	addwfc	(_phase_delay_counter+1)^(0+128),f
 14139                           
 14140                           ;bldc.c: 1394: };bldc.c: 1398: };bldc.c: 1401: }
 14141  0D9A  0008               	return
 14142  0D9B                     i1l10981:	
 14143                           
 14144                           ;bldc.c: 1404: else;bldc.c: 1405: {;bldc.c: 1407: ui8_BlankingCount--;
 14145  0D9B  3001               	movlw	1
 14146  0D9C  02DD               	subwf	_ui8_BlankingCount^(0+128),f
 14147                           
 14148                           ;bldc.c: 1408: bemf_filter = 62;
 14149  0D9D  303E               	movlw	62
 14150  0D9E  0020               	movlb	0	; select bank0
 14151  0D9F  00A0               	movwf	??_interrrupt_bldc
 14152  0DA0  0820               	movf	??_interrrupt_bldc,w
 14153  0DA1  0022               	movlb	2	; select bank2
 14154  0DA2  00E5               	movwf	_bemf_filter^(0+256)
 14155  0DA3  0008               	return
 14156  0DA4                     __end_of_interrrupt_bldc:	
 14157                           
 14158                           	psect	swtext3
 14159  1840                     __pswtext3:	
 14160  1840                     i1S11839:	
 14161  1840  318B  2B7C         	ljmp	i1l10751
 14162  1842  318B  2B8F         	ljmp	i1l10763
 14163  1844  318B  2BAE         	ljmp	i1l10803
 14164  1846  318B  2BF2         	ljmp	i1l10841
 14165  1848  318C  2C15         	ljmp	i1l10863
 14166  184A  318C  2C15         	ljmp	i1l10865
 14167  184C  318C  2C15         	ljmp	i1l10867
 14168  184E  318C  2C16         	ljmp	i1l284
 14169  1850  318C  2C29         	ljmp	i1l10877
 14170  1852  318D  2D28         	ljmp	i1l267
 14171                           
 14172                           	psect	text40
 14173  0926                     __ptext40:	
 14174 ;; *************** function i1_commutate *****************
 14175 ;; Defined at:
 14176 ;;		line 1426 in file "../bldc.c"
 14177 ;; Parameters:    Size  Location     Type
 14178 ;;		None
 14179 ;; Auto vars:     Size  Location     Type
 14180 ;;		None
 14181 ;; Return value:  Size  Location     Type
 14182 ;;                  1    wreg      void 
 14183 ;; Registers used:
 14184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 14185 ;; Tracked objects:
 14186 ;;		On entry : 0/0
 14187 ;;		On exit  : 0/0
 14188 ;;		Unchanged: 0/0
 14189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14190 ;;      Params:         0       0       0       0       0       0       0       0
 14191 ;;      Locals:         0       0       0       0       0       0       0       0
 14192 ;;      Temps:         12       0       0       0       0       0       0       0
 14193 ;;      Totals:        12       0       0       0       0       0       0       0
 14194 ;;Total ram usage:       12 bytes
 14195 ;; Hardware stack levels used:    1
 14196 ;; This function calls:
 14197 ;;		Nothing
 14198 ;; This function is called by:
 14199 ;;		_interrrupt_bldc
 14200 ;; This function uses a non-reentrant model
 14201 ;;
 14202                           
 14203                           
 14204                           ;psect for function i1_commutate
 14205  0926                     i1_commutate:	
 14206                           
 14207                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 14208                           
 14209                           ;incstack = 0
 14210                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0]
 14211  0926  3000               	movlw	0
 14212  0927  0021               	movlb	1	; select bank1
 14213  0928  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 14214  0929  300A               	movlw	10
 14215  092A  1903               	skipnz
 14216  092B  023A               	subwf	_ui16_step_cnt^(0+128),w
 14217  092C  1803               	skipnc
 14218  092D  2932               	goto	i1l6251
 14219                           
 14220                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
 14221  092E  3001               	movlw	1
 14222  092F  07BA               	addwf	_ui16_step_cnt^(0+128),f
 14223  0930  3000               	movlw	0
 14224  0931  3DBB               	addwfc	(_ui16_step_cnt+1)^(0+128),f
 14225  0932                     i1l6251:	
 14226                           
 14227                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 14228  0932  3559               	lslf	_Bcnt^(0+128),w
 14229  0933  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 14230  0934  0086               	movwf	6
 14231  0935  3002               	movlw	2	; select bank4/5
 14232  0936  0087               	movwf	7
 14233  0937  0020               	movlb	0	; select bank0
 14234  0938  0853               	movf	_comm_time,w
 14235  0939  3FC0               	movwi [0]fsr1
 14236  093A  0854               	movf	_comm_time+1,w
 14237  093B  3FC1               	movwi [1]fsr1
 14238  093C  3001               	movlw	1
 14239  093D  00F0               	movwf	??i1_commutate
 14240  093E  0870               	movf	??i1_commutate,w
 14241  093F  0021               	movlb	1	; select bank1
 14242  0940  07D9               	addwf	_Bcnt^(0+128),f
 14243                           
 14244                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 14245  0941  3007               	movlw	7
 14246  0942  00F0               	movwf	??i1_commutate
 14247  0943  0870               	movf	??i1_commutate,w
 14248  0944  05D9               	andwf	_Bcnt^(0+128),f
 14249                           
 14250                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 14251  0945  300E               	movlw	14
 14252  0946  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 14253  0947  0086               	movwf	6
 14254  0948  3002               	movlw	2	; select bank4/5
 14255  0949  0087               	movwf	7
 14256  094A  300C               	movlw	12
 14257  094B  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 14258  094C  0084               	movwf	4
 14259  094D  3002               	movlw	2	; select bank4/5
 14260  094E  0085               	movwf	5
 14261  094F  0024               	movlb	4	; select bank4
 14262  0950  0824               	movf	(_B^(0+512)+4),w
 14263  0951  0722               	addwf	(_B^(0+512)+2),w
 14264  0952  00F0               	movwf	??i1_commutate
 14265  0953  0825               	movf	((_B+1)^(0+512)+4),w
 14266  0954  3D23               	addwfc	((_B+1)^(0+512)+2),w
 14267  0955  00F1               	movwf	??i1_commutate+1
 14268  0956  0826               	movf	(_B^(0+512)+6),w
 14269  0957  0770               	addwf	??i1_commutate,w
 14270  0958  00F2               	movwf	??i1_commutate+2
 14271  0959  0827               	movf	((_B+1)^(0+512)+6),w
 14272  095A  3D71               	addwfc	??i1_commutate+1,w
 14273  095B  00F3               	movwf	??i1_commutate+3
 14274  095C  0828               	movf	(_B^(0+512)+8),w
 14275  095D  0772               	addwf	??i1_commutate+2,w
 14276  095E  00F4               	movwf	??i1_commutate+4
 14277  095F  0829               	movf	((_B+1)^(0+512)+8),w
 14278  0960  3D73               	addwfc	??i1_commutate+3,w
 14279  0961  00F5               	movwf	??i1_commutate+5
 14280  0962  082A               	movf	(_B^(0+512)+10),w
 14281  0963  0774               	addwf	??i1_commutate+4,w
 14282  0964  00F6               	movwf	??i1_commutate+6
 14283  0965  082B               	movf	((_B+1)^(0+512)+10),w
 14284  0966  3D75               	addwfc	??i1_commutate+5,w
 14285  0967  00F7               	movwf	??i1_commutate+7
 14286  0968  3F00               	moviw [0]fsr0
 14287  0969  0776               	addwf	??i1_commutate+6,w
 14288  096A  00F8               	movwf	??i1_commutate+8
 14289  096B  3F01               	moviw [1]fsr0
 14290  096C  3D77               	addwfc	??i1_commutate+7,w
 14291  096D  00F9               	movwf	??i1_commutate+9
 14292  096E  3F40               	moviw [0]fsr1
 14293  096F  0778               	addwf	??i1_commutate+8,w
 14294  0970  00FA               	movwf	??i1_commutate+10
 14295  0971  3F41               	moviw [1]fsr1
 14296  0972  3D79               	addwfc	??i1_commutate+9,w
 14297  0973  00FB               	movwf	??i1_commutate+11
 14298  0974  0820               	movf	_B^(0+512),w
 14299  0975  077A               	addwf	??i1_commutate+10,w
 14300  0976  0021               	movlb	1	; select bank1
 14301  0977  00B2               	movwf	_ui16_speed_fil^(0+128)
 14302  0978  0024               	movlb	4	; select bank4
 14303  0979  0821               	movf	(_B+1)^(0+512),w
 14304  097A  3D7B               	addwfc	??i1_commutate+11,w
 14305  097B  0021               	movlb	1	; select bank1
 14306  097C  00B3               	movwf	(_ui16_speed_fil+1)^(0+128)
 14307                           
 14308                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 14309  097D  0020               	movlb	0	; select bank0
 14310  097E  0854               	movf	_comm_time+1,w
 14311  097F  0023               	movlb	3	; select bank3
 14312  0980  00BD               	movwf	(_ui16_speed_rar+1)^(0+384)
 14313  0981  0020               	movlb	0	; select bank0
 14314  0982  0853               	movf	_comm_time,w
 14315  0983  0023               	movlb	3	; select bank3
 14316  0984  00BC               	movwf	_ui16_speed_rar^(0+384)
 14317                           
 14318                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 14319  0985  0020               	movlb	0	; select bank0
 14320  0986  12DA               	bcf	_MotorFlags,5
 14321                           
 14322                           ;bldc.c: 1451: ui8_sampleState = 1;
 14323  0987  0022               	movlb	2	; select bank2
 14324  0988  01E2               	clrf	_ui8_sampleState^(0+256)
 14325  0989  0AE2               	incf	_ui8_sampleState^(0+256),f
 14326                           
 14327                           ;bldc.c: 1455: bemf_filter = 62;
 14328  098A  303E               	movlw	62
 14329  098B  00F0               	movwf	??i1_commutate
 14330  098C  0870               	movf	??i1_commutate,w
 14331  098D  00E5               	movwf	_bemf_filter^(0+256)
 14332                           
 14333                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 14334  098E  0020               	movlb	0	; select bank0
 14335  098F  17DA               	bsf	_MotorFlags,7
 14336                           
 14337                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 14338  0990  1DDA               	btfss	_MotorFlags,3
 14339  0991  2A04               	goto	i1l327
 14340                           
 14341                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
 14342  0992  0023               	movlb	3	; select bank3
 14343  0993  083D               	movf	(_ui16_speed_rar+1)^(0+384),w
 14344  0994  00F1               	movwf	??i1_commutate+1
 14345  0995  083C               	movf	_ui16_speed_rar^(0+384),w
 14346  0996  00F0               	movwf	??i1_commutate
 14347  0997  36F1               	lsrf	??i1_commutate+1,f
 14348  0998  0CF0               	rrf	??i1_commutate,f
 14349  0999  36F1               	lsrf	??i1_commutate+1,f
 14350  099A  0CF0               	rrf	??i1_commutate,f
 14351  099B  36F1               	lsrf	??i1_commutate+1,f
 14352  099C  0CF0               	rrf	??i1_commutate,f
 14353  099D  30FF               	movlw	255
 14354  099E  0570               	andwf	??i1_commutate,w
 14355  099F  0021               	movlb	1	; select bank1
 14356  09A0  00B6               	movwf	_ui16_phase_advancement^(0+128)
 14357  09A1  3001               	movlw	1
 14358  09A2  0571               	andwf	??i1_commutate+1,w
 14359  09A3  00B7               	movwf	(_ui16_phase_advancement+1)^(0+128)
 14360                           
 14361                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 14362  09A4  0020               	movlb	0	; select bank0
 14363  09A5  0854               	movf	_comm_time+1,w
 14364  09A6  0021               	movlb	1	; select bank1
 14365  09A7  0237               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 14366  09A8  1D03               	skipz
 14367  09A9  29AE               	goto	u362_25
 14368  09AA  0020               	movlb	0	; select bank0
 14369  09AB  0853               	movf	_comm_time,w
 14370  09AC  0021               	movlb	1	; select bank1
 14371  09AD  0236               	subwf	_ui16_phase_advancement^(0+128),w
 14372  09AE                     u362_25:	
 14373  09AE  1803               	skipnc
 14374  09AF  29C2               	goto	i1l6277
 14375                           
 14376                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
 14377  09B0  0936               	comf	_ui16_phase_advancement^(0+128),w
 14378  09B1  00F0               	movwf	??i1_commutate
 14379  09B2  0937               	comf	(_ui16_phase_advancement+1)^(0+128),w
 14380  09B3  00F1               	movwf	??i1_commutate+1
 14381  09B4  0AF0               	incf	??i1_commutate,f
 14382  09B5  1903               	skipnz
 14383  09B6  0AF1               	incf	??i1_commutate+1,f
 14384  09B7  0020               	movlb	0	; select bank0
 14385  09B8  0853               	movf	_comm_time,w
 14386  09B9  0770               	addwf	??i1_commutate,w
 14387  09BA  0021               	movlb	1	; select bank1
 14388  09BB  00B8               	movwf	_phase_delay_counter^(0+128)
 14389  09BC  0020               	movlb	0	; select bank0
 14390  09BD  0854               	movf	_comm_time+1,w
 14391  09BE  3D71               	addwfc	??i1_commutate+1,w
 14392  09BF  0021               	movlb	1	; select bank1
 14393  09C0  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
 14394                           
 14395                           ;bldc.c: 1478: }
 14396  09C1  29C4               	goto	i1l6279
 14397  09C2                     i1l6277:	
 14398                           
 14399                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
 14400  09C2  01B8               	clrf	_phase_delay_counter^(0+128)
 14401  09C3  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14402  09C4                     i1l6279:	
 14403                           
 14404                           ;bldc.c: 1486: };bldc.c: 1489: phase_delay_counter_debug = phase_delay_counter;
 14405  09C4  0839               	movf	(_phase_delay_counter+1)^(0+128),w
 14406  09C5  0024               	movlb	4	; select bank4
 14407  09C6  00E5               	movwf	(_phase_delay_counter_debug+1)^(0+512)
 14408  09C7  0021               	movlb	1	; select bank1
 14409  09C8  0838               	movf	_phase_delay_counter^(0+128),w
 14410  09C9  0024               	movlb	4	; select bank4
 14411  09CA  00E4               	movwf	_phase_delay_counter_debug^(0+512)
 14412                           
 14413                           ;bldc.c: 1508: switch (ui16_step_cnt)
 14414  09CB  29DF               	goto	i1l6303
 14415  09CC                     i1l6281:	
 14416                           ;bldc.c: 1510: {;bldc.c: 1512: case 0 :
 14417                           
 14418                           
 14419                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
 14420  09CC  30A6               	movlw	166
 14421  09CD  29DA               	goto	L76
 14422  09CE                     i1l6283:	
 14423                           ;bldc.c: 1519: };bldc.c: 1522: case 1:
 14424                           
 14425                           ;bldc.c: 1517: break;
 14426                           
 14427                           
 14428                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
 14429  09CE  30F4               	movlw	244
 14430  09CF  0022               	movlb	2	; select bank2
 14431  09D0  00A7               	movwf	_ui16_comm_time_max^(0+256)
 14432  09D1  3001               	movlw	1
 14433  09D2  29DD               	goto	L70
 14434  09D3                     i1l6285:	
 14435                           ;bldc.c: 1529: };bldc.c: 1532: case 2:
 14436                           
 14437                           ;bldc.c: 1527: break;
 14438                           
 14439                           
 14440                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
 14441  09D3  307D               	movlw	125
 14442  09D4  29DA               	goto	L76
 14443  09D5                     i1l6287:	
 14444                           ;bldc.c: 1539: };bldc.c: 1542: case 3:
 14445                           
 14446                           ;bldc.c: 1537: break;
 14447                           
 14448                           
 14449                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
 14450  09D5  3053               	movlw	83
 14451  09D6  29DA               	goto	L76
 14452  09D7                     i1l6289:	
 14453                           ;bldc.c: 1549: };bldc.c: 1552: case 4:
 14454                           
 14455                           ;bldc.c: 1547: break;
 14456                           
 14457                           
 14458                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
 14459  09D7  303E               	movlw	62
 14460  09D8  29DA               	goto	L76
 14461  09D9                     i1l6291:	
 14462                           ;bldc.c: 1559: };bldc.c: 1562: case 5:
 14463                           
 14464                           ;bldc.c: 1557: break;
 14465                           
 14466  09D9                     i1l6293:	
 14467                           ;bldc.c: 1569: };bldc.c: 1572: case 6:
 14468                           
 14469                           ;bldc.c: 1567: break;
 14470                           
 14471                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14472                           
 14473  09D9                     i1l6295:	
 14474                           ;bldc.c: 1579: };bldc.c: 1582: case 7:
 14475                           
 14476                           ;bldc.c: 1577: break;
 14477                           
 14478                           ;bldc.c: 1574: {;bldc.c: 1576: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14479                           
 14480  09D9                     i1l6297:	
 14481                           ;bldc.c: 1589: };bldc.c: 1592: case 8:
 14482                           
 14483                           ;bldc.c: 1587: break;
 14484                           
 14485                           ;bldc.c: 1584: {;bldc.c: 1586: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14486                           
 14487  09D9                     i1l6299:	
 14488                           ;bldc.c: 1599: };bldc.c: 1602: case 9:
 14489                           
 14490                           ;bldc.c: 1597: break;
 14491                           
 14492                           ;bldc.c: 1594: {;bldc.c: 1596: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14493                           
 14494  09D9                     i1l6301:	
 14495                           ;bldc.c: 1609: };bldc.c: 1613: default:
 14496                           
 14497                           ;bldc.c: 1607: break;
 14498                           
 14499                           ;bldc.c: 1604: {;bldc.c: 1606: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14500                           
 14501                           
 14502                           ;bldc.c: 1614: {;bldc.c: 1616: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
 14503  09D9  3032               	movlw	50
 14504  09DA                     L76:	
 14505  09DA  0022               	movlb	2	; select bank2
 14506  09DB  00A7               	movwf	_ui16_comm_time_max^(0+256)
 14507  09DC  3000               	movlw	0
 14508  09DD                     L70:	
 14509  09DD  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14510                           
 14511                           ;bldc.c: 1618: };bldc.c: 1620: }
 14512  09DE  29EF               	goto	i1l6305
 14513  09DF                     i1l6303:	
 14514                           
 14515                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14516                           ; Switch size 1, requested type "space"
 14517                           ; Number of cases is 1, Range of values is 0 to 0
 14518                           ; switch strategies available:
 14519                           ; Name         Instructions Cycles
 14520                           ; simple_byte            4     3 (average)
 14521                           ; direct_byte            8     6 (fixed)
 14522                           ; jumptable            260     6 (fixed)
 14523                           ;	Chosen strategy is simple_byte
 14524  09DF  0021               	movlb	1	; select bank1
 14525  09E0  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
 14526  09E1  3A00               	xorlw	0	; case 0
 14527  09E2  1903               	skipnz
 14528  09E3  29E5               	goto	i1l11841
 14529  09E4  29D9               	goto	i1l6301
 14530  09E5                     i1l11841:	
 14531                           
 14532                           ; Switch size 1, requested type "space"
 14533                           ; Number of cases is 10, Range of values is 0 to 9
 14534                           ; switch strategies available:
 14535                           ; Name         Instructions Cycles
 14536                           ; direct_byte           26     6 (fixed)
 14537                           ; simple_byte           31    16 (average)
 14538                           ; jumptable            260     6 (fixed)
 14539                           ;	Chosen strategy is direct_byte
 14540  09E5  083A               	movf	_ui16_step_cnt^(0+128),w
 14541  09E6  0084               	movwf	4
 14542  09E7  300A               	movlw	10
 14543  09E8  0204               	subwf	4,w
 14544  09E9  1803               	skipnc
 14545  09EA  29D9               	goto	i1l6301
 14546  09EB  3198               	movlp	high i1S11843
 14547  09EC  3504               	lslf	4,w
 14548  09ED  3E54               	addlw	low i1S11843
 14549  09EE  0082               	movwf	2
 14550  09EF                     i1l6305:	
 14551                           
 14552                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
 14553  09EF  3000               	movlw	0
 14554  09F0  0022               	movlb	2	; select bank2
 14555  09F1  0228               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 14556  09F2  3032               	movlw	50
 14557  09F3  1903               	skipnz
 14558  09F4  0227               	subwf	_ui16_comm_time_max^(0+256),w
 14559  09F5  1803               	skipnc
 14560  09F6  29FB               	goto	i1l6309
 14561                           
 14562                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
 14563  09F7  3032               	movlw	50
 14564  09F8  00A7               	movwf	_ui16_comm_time_max^(0+256)
 14565  09F9  3000               	movlw	0
 14566  09FA  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14567  09FB                     i1l6309:	
 14568                           
 14569                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
 14570  09FB  0020               	movlb	0	; select bank0
 14571  09FC  1E5A               	btfss	_MotorFlags,4
 14572  09FD  2A43               	goto	i1l345
 14573                           
 14574                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
 14575  09FE  300A               	movlw	10
 14576  09FF  00F0               	movwf	??i1_commutate
 14577  0A00  0870               	movf	??i1_commutate,w
 14578  0A01  0021               	movlb	1	; select bank1
 14579  0A02  00DF               	movwf	_ui8_StartupPWM^(0+128)
 14580                           
 14581                           ;bldc.c: 1641: };bldc.c: 1644: }
 14582  0A03  2A43               	goto	i1l345
 14583  0A04                     i1l327:	
 14584                           
 14585                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
 14586  0A04  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14587  0A05  2A0A               	goto	i1l6315
 14588                           
 14589                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
 14590  0A06  0021               	movlb	1	; select bank1
 14591  0A07  01B8               	clrf	_phase_delay_counter^(0+128)
 14592  0A08  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14593                           
 14594                           ;bldc.c: 1659: }
 14595  0A09  2A16               	goto	i1l6317
 14596  0A0A                     i1l6315:	
 14597                           
 14598                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 14599  0A0A  0020               	movlb	0	; select bank0
 14600  0A0B  0854               	movf	_comm_time+1,w
 14601  0A0C  00F1               	movwf	??i1_commutate+1
 14602  0A0D  0853               	movf	_comm_time,w
 14603  0A0E  00F0               	movwf	??i1_commutate
 14604  0A0F  36F1               	lsrf	??i1_commutate+1,f
 14605  0A10  0CF0               	rrf	??i1_commutate,f
 14606  0A11  0870               	movf	??i1_commutate,w
 14607  0A12  0021               	movlb	1	; select bank1
 14608  0A13  00B8               	movwf	_phase_delay_counter^(0+128)
 14609  0A14  0871               	movf	??i1_commutate+1,w
 14610  0A15  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
 14611  0A16                     i1l6317:	
 14612                           
 14613                           ;bldc.c: 1670: };bldc.c: 1675: phase_delay_counter = 0;
 14614  0A16  01B8               	clrf	_phase_delay_counter^(0+128)
 14615  0A17  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14616                           
 14617                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 14618  0A18  0839               	movf	(_phase_delay_counter+1)^(0+128),w
 14619  0A19  0024               	movlb	4	; select bank4
 14620  0A1A  00E5               	movwf	(_phase_delay_counter_debug+1)^(0+512)
 14621  0A1B  0021               	movlb	1	; select bank1
 14622  0A1C  0838               	movf	_phase_delay_counter^(0+128),w
 14623  0A1D  0024               	movlb	4	; select bank4
 14624  0A1E  00E4               	movwf	_phase_delay_counter_debug^(0+512)
 14625                           
 14626                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
 14627  0A1F  3032               	movlw	50
 14628  0A20  0022               	movlb	2	; select bank2
 14629  0A21  00A7               	movwf	_ui16_comm_time_max^(0+256)
 14630  0A22  3000               	movlw	0
 14631  0A23  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14632                           
 14633                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 14634  0A24  0020               	movlb	0	; select bank0
 14635  0A25  1F5A               	btfss	_MotorFlags,6
 14636  0A26  2A41               	goto	i1l6327
 14637                           
 14638                           ;bldc.c: 1693: {;bldc.c: 1751: CCPR1L = ui16_duty_cycle_BLDC >> 2;
 14639  0A27  0021               	movlb	1	; select bank1
 14640  0A28  0831               	movf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
 14641  0A29  00F1               	movwf	??i1_commutate+1
 14642  0A2A  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 14643  0A2B  00F0               	movwf	??i1_commutate
 14644  0A2C  36F1               	lsrf	??i1_commutate+1,f
 14645  0A2D  0CF0               	rrf	??i1_commutate,f
 14646  0A2E  36F1               	lsrf	??i1_commutate+1,f
 14647  0A2F  0CF0               	rrf	??i1_commutate,f
 14648  0A30  0870               	movf	??i1_commutate,w
 14649  0A31  0025               	movlb	5	; select bank5
 14650  0A32  0091               	movwf	17	;volatile
 14651                           
 14652                           ;bldc.c: 1752: CCP1CON = ((ui16_duty_cycle_BLDC & 0b11) << 4) | 0x0C;
 14653  0A33  0021               	movlb	1	; select bank1
 14654  0A34  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 14655  0A35  3903               	andlw	3
 14656  0A36  00F0               	movwf	??i1_commutate
 14657  0A37  3003               	movlw	3
 14658  0A38                     u367_25:	
 14659  0A38  35F0               	lslf	??i1_commutate,f
 14660  0A39  3EFF               	addlw	-1
 14661  0A3A  1D03               	skipz
 14662  0A3B  2A38               	goto	u367_25
 14663  0A3C  3570               	lslf	??i1_commutate,w
 14664  0A3D  380C               	iorlw	12
 14665  0A3E  0025               	movlb	5	; select bank5
 14666  0A3F  0093               	movwf	19	;volatile
 14667                           
 14668                           ;bldc.c: 1766: }
 14669  0A40  2A43               	goto	i1l345
 14670  0A41                     i1l6327:	
 14671                           
 14672                           ;bldc.c: 1769: else;bldc.c: 1770: {;bldc.c: 1772: CCPR1L = 0;
 14673  0A41  0025               	movlb	5	; select bank5
 14674  0A42  0191               	clrf	17	;volatile
 14675  0A43                     i1l345:	
 14676                           
 14677                           ;bldc.c: 1774: };bldc.c: 1778: };bldc.c: 1781: comm_time = 0;
 14678  0A43  0020               	movlb	0	; select bank0
 14679  0A44  01D3               	clrf	_comm_time
 14680  0A45  01D4               	clrf	_comm_time+1
 14681                           
 14682                           ;bldc.c: 1785: if( comm_state == 0xff )
 14683  0A46  0021               	movlb	1	; select bank1
 14684  0A47  0A5E               	incf	_comm_state^(0+128),w
 14685  0A48  1D03               	btfss	3,2
 14686  0A49  2B28               	goto	i1l6477
 14687                           
 14688                           ;bldc.c: 1787: {;bldc.c: 1789: comm_state = 6;
 14689  0A4A  3006               	movlw	6
 14690  0A4B  00F0               	movwf	??i1_commutate
 14691  0A4C  0870               	movf	??i1_commutate,w
 14692  0A4D  00DE               	movwf	_comm_state^(0+128)
 14693                           
 14694                           ;bldc.c: 1791: };bldc.c: 1794: switch( comm_state )
 14695  0A4E  2B28               	goto	i1l6477
 14696  0A4F                     i1l6333:	
 14697                           ;bldc.c: 1796: {;bldc.c: 1798: case 1:
 14698                           
 14699                           
 14700                           ;bldc.c: 1801: {;bldc.c: 1807: PSTR1CON = 0b00000001;
 14701  0A4F  3001               	movlw	1
 14702  0A50  0025               	movlb	5	; select bank5
 14703  0A51  0096               	movwf	22	;volatile
 14704                           
 14705                           ;bldc.c: 1810: if( MotorFlags.bits.B6 )
 14706  0A52  0020               	movlb	0	; select bank0
 14707  0A53  1F5A               	btfss	_MotorFlags,6
 14708  0A54  2A5A               	goto	i1l6339
 14709                           
 14710                           ;bldc.c: 1812: {;bldc.c: 1814: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 14711  0A55  0022               	movlb	2	; select bank2
 14712  0A56  080E               	movf	14,w	;volatile
 14713  0A57  39E5               	andlw	229
 14714  0A58  380A               	iorlw	10
 14715  0A59  008E               	movwf	14	;volatile
 14716  0A5A                     i1l6339:	
 14717                           
 14718                           ;bldc.c: 1816: };bldc.c: 1820: LATB2 = 0;
 14719  0A5A  0022               	movlb	2	; select bank2
 14720  0A5B  110D               	bcf	13,2	;volatile
 14721                           
 14722                           ;bldc.c: 1821: LATB1 = 0;
 14723  0A5C  108D               	bcf	13,1	;volatile
 14724                           
 14725                           ;bldc.c: 1822: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 14726  0A5D  3009               	movlw	9
 14727  0A5E  00F0               	movwf	??i1_commutate
 14728  0A5F  0870               	movf	??i1_commutate,w
 14729  0A60  0021               	movlb	1	; select bank1
 14730  0A61  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14731                           
 14732                           ;bldc.c: 1823: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 14733  0A62  01DB               	clrf	_ui8_UPhase_sel^(0+128)
 14734  0A63  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
 14735                           
 14736                           ;bldc.c: 1824: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 14737  0A64  3025               	movlw	37
 14738  0A65  00F0               	movwf	??i1_commutate
 14739  0A66  0870               	movf	??i1_commutate,w
 14740  0A67  0022               	movlb	2	; select bank2
 14741  0A68  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
 14742                           
 14743                           ;bldc.c: 1825: CM1CON1 = 0x02;
 14744  0A69  3002               	movlw	2
 14745  0A6A  0092               	movwf	18	;volatile
 14746                           
 14747                           ;bldc.c: 1838: CM1CON0 = 0x84;
 14748  0A6B  3084               	movlw	132
 14749  0A6C  0091               	movwf	17	;volatile
 14750                           
 14751                           ;bldc.c: 1839: rising_bemf_flag = 1;
 14752  0A6D  0020               	movlb	0	; select bank0
 14753  0A6E  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14754                           
 14755                           ;bldc.c: 1840: comm_state = 6;
 14756  0A6F  3006               	movlw	6
 14757  0A70  2B19               	goto	L74
 14758  0A71                     i1l6357:	
 14759                           ;bldc.c: 1850: };bldc.c: 1853: case 2:
 14760                           
 14761                           ;bldc.c: 1846: break;
 14762                           
 14763                           
 14764                           ;bldc.c: 1856: {;bldc.c: 1861: PSTR1CON = 0b00000001;
 14765  0A71  3001               	movlw	1
 14766  0A72  0025               	movlb	5	; select bank5
 14767  0A73  0096               	movwf	22	;volatile
 14768                           
 14769                           ;bldc.c: 1864: if( MotorFlags.bits.B6 )
 14770  0A74  0020               	movlb	0	; select bank0
 14771  0A75  1F5A               	btfss	_MotorFlags,6
 14772  0A76  2A7C               	goto	i1l6363
 14773                           
 14774                           ;bldc.c: 1866: {;bldc.c: 1868: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 14775  0A77  0022               	movlb	2	; select bank2
 14776  0A78  080E               	movf	14,w	;volatile
 14777  0A79  39E5               	andlw	229
 14778  0A7A  3812               	iorlw	18
 14779  0A7B  008E               	movwf	14	;volatile
 14780  0A7C                     i1l6363:	
 14781                           
 14782                           ;bldc.c: 1870: };bldc.c: 1874: LATB2 = 1;
 14783  0A7C  0022               	movlb	2	; select bank2
 14784  0A7D  150D               	bsf	13,2	;volatile
 14785                           
 14786                           ;bldc.c: 1875: LATB1 = 0;
 14787  0A7E  108D               	bcf	13,1	;volatile
 14788                           
 14789                           ;bldc.c: 1876: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 14790  0A7F  3009               	movlw	9
 14791  0A80  00F0               	movwf	??i1_commutate
 14792  0A81  0870               	movf	??i1_commutate,w
 14793  0A82  0021               	movlb	1	; select bank1
 14794  0A83  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14795                           
 14796                           ;bldc.c: 1877: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 14797  0A84  01DB               	clrf	_ui8_UPhase_sel^(0+128)
 14798  0A85  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
 14799                           
 14800                           ;bldc.c: 1878: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 14801  0A86  3005               	movlw	5
 14802  0A87  00F0               	movwf	??i1_commutate
 14803  0A88  0870               	movf	??i1_commutate,w
 14804  0A89  0022               	movlb	2	; select bank2
 14805  0A8A  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
 14806                           
 14807                           ;bldc.c: 1879: CM1CON1 = 0x01;
 14808  0A8B  3001               	movlw	1
 14809  0A8C  0092               	movwf	18	;volatile
 14810                           
 14811                           ;bldc.c: 1893: CM1CON0 = 0x94;
 14812  0A8D  3094               	movlw	148
 14813  0A8E  0091               	movwf	17	;volatile
 14814  0A8F  2B22               	goto	L75
 14815  0A90                     i1l6381:	
 14816                           ;bldc.c: 1907: };bldc.c: 1910: case 3:
 14817                           
 14818                           ;bldc.c: 1903: break;
 14819                           
 14820                           ;bldc.c: 1895: comm_state = 1;
 14821                           
 14822                           ;bldc.c: 1894: rising_bemf_flag = 0;
 14823                           
 14824                           
 14825                           ;bldc.c: 1913: {;bldc.c: 1918: PSTR1CON = 0b00000010;
 14826  0A90  3002               	movlw	2
 14827  0A91  0025               	movlb	5	; select bank5
 14828  0A92  0096               	movwf	22	;volatile
 14829                           
 14830                           ;bldc.c: 1921: if( MotorFlags.bits.B6 )
 14831  0A93  0020               	movlb	0	; select bank0
 14832  0A94  1F5A               	btfss	_MotorFlags,6
 14833  0A95  2A9B               	goto	i1l6387
 14834                           
 14835                           ;bldc.c: 1923: {;bldc.c: 1925: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 14836  0A96  0022               	movlb	2	; select bank2
 14837  0A97  080E               	movf	14,w	;volatile
 14838  0A98  39E5               	andlw	229
 14839  0A99  3818               	iorlw	24
 14840  0A9A  008E               	movwf	14	;volatile
 14841  0A9B                     i1l6387:	
 14842                           
 14843                           ;bldc.c: 1927: };bldc.c: 1930: LATC2 = 0;
 14844  0A9B  0022               	movlb	2	; select bank2
 14845  0A9C  110E               	bcf	14,2	;volatile
 14846                           
 14847                           ;bldc.c: 1932: LATB1 = 0;
 14848  0A9D  108D               	bcf	13,1	;volatile
 14849                           
 14850                           ;bldc.c: 1933: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 14851  0A9E  3035               	movlw	53
 14852  0A9F  00F0               	movwf	??i1_commutate
 14853  0AA0  0870               	movf	??i1_commutate,w
 14854  0AA1  0021               	movlb	1	; select bank1
 14855  0AA2  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14856                           
 14857                           ;bldc.c: 1934: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 14858  0AA3  3005               	movlw	5
 14859  0AA4  00F0               	movwf	??i1_commutate
 14860  0AA5  0870               	movf	??i1_commutate,w
 14861  0AA6  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14862                           
 14863                           ;bldc.c: 1935: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 14864  0AA7  0022               	movlb	2	; select bank2
 14865  0AA8  01E3               	clrf	_ui8_Ubemf_sel^(0+256)
 14866  0AA9  0AE3               	incf	_ui8_Ubemf_sel^(0+256),f
 14867                           
 14868                           ;bldc.c: 1936: CM1CON1 = 0x00;
 14869  0AAA  0192               	clrf	18	;volatile
 14870                           
 14871                           ;bldc.c: 1950: CM1CON0 = 0x84;
 14872  0AAB  3084               	movlw	132
 14873  0AAC  0091               	movwf	17	;volatile
 14874                           
 14875                           ;bldc.c: 1951: rising_bemf_flag = 1;
 14876  0AAD  0020               	movlb	0	; select bank0
 14877  0AAE  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14878                           
 14879                           ;bldc.c: 1952: comm_state = 2;
 14880  0AAF  3002               	movlw	2
 14881  0AB0  2B19               	goto	L74
 14882  0AB1                     i1l6401:	
 14883                           ;bldc.c: 1961: };bldc.c: 1964: case 4:
 14884                           
 14885                           ;bldc.c: 1957: break;
 14886                           
 14887                           
 14888                           ;bldc.c: 1967: {;bldc.c: 1973: PSTR1CON = 0b00000010;
 14889  0AB1  3002               	movlw	2
 14890  0AB2  0025               	movlb	5	; select bank5
 14891  0AB3  0096               	movwf	22	;volatile
 14892                           
 14893                           ;bldc.c: 1976: if( MotorFlags.bits.B6 )
 14894  0AB4  0020               	movlb	0	; select bank0
 14895  0AB5  1F5A               	btfss	_MotorFlags,6
 14896  0AB6  2ABC               	goto	i1l6407
 14897                           
 14898                           ;bldc.c: 1978: {;bldc.c: 1980: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 14899  0AB7  0022               	movlb	2	; select bank2
 14900  0AB8  080E               	movf	14,w	;volatile
 14901  0AB9  39E5               	andlw	229
 14902  0ABA  380A               	iorlw	10
 14903  0ABB  008E               	movwf	14	;volatile
 14904  0ABC                     i1l6407:	
 14905                           
 14906                           ;bldc.c: 1982: };bldc.c: 1985: LATC2 = 0;
 14907  0ABC  0022               	movlb	2	; select bank2
 14908  0ABD  110E               	bcf	14,2	;volatile
 14909                           
 14910                           ;bldc.c: 1987: LATB1 = 1;
 14911  0ABE  148D               	bsf	13,1	;volatile
 14912                           
 14913                           ;bldc.c: 1988: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 14914  0ABF  3035               	movlw	53
 14915  0AC0  00F0               	movwf	??i1_commutate
 14916  0AC1  0870               	movf	??i1_commutate,w
 14917  0AC2  0021               	movlb	1	; select bank1
 14918  0AC3  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14919                           
 14920                           ;bldc.c: 1989: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 14921  0AC4  3005               	movlw	5
 14922  0AC5  00F0               	movwf	??i1_commutate
 14923  0AC6  0870               	movf	??i1_commutate,w
 14924  0AC7  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14925                           
 14926                           ;bldc.c: 1990: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 14927  0AC8  3025               	movlw	37
 14928  0AC9  00F0               	movwf	??i1_commutate
 14929  0ACA  0870               	movf	??i1_commutate,w
 14930  0ACB  0022               	movlb	2	; select bank2
 14931  0ACC  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
 14932                           
 14933                           ;bldc.c: 1991: CM1CON1 = 0x02;
 14934  0ACD  3002               	movlw	2
 14935  0ACE  0092               	movwf	18	;volatile
 14936                           
 14937                           ;bldc.c: 2005: CM1CON0 = 0x94;
 14938  0ACF  3094               	movlw	148
 14939  0AD0  0091               	movwf	17	;volatile
 14940                           
 14941                           ;bldc.c: 2006: rising_bemf_flag = 0;
 14942  0AD1  0020               	movlb	0	; select bank0
 14943  0AD2  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14944                           
 14945                           ;bldc.c: 2007: comm_state = 3;
 14946  0AD3  3003               	movlw	3
 14947  0AD4  2B19               	goto	L74
 14948  0AD5                     i1l6425:	
 14949                           ;bldc.c: 2015: };bldc.c: 2018: case 5:
 14950                           
 14951                           ;bldc.c: 2012: break;
 14952                           
 14953                           
 14954                           ;bldc.c: 2021: {;bldc.c: 2027: PSTR1CON = 0b00000100;
 14955  0AD5  3004               	movlw	4
 14956  0AD6  0025               	movlb	5	; select bank5
 14957  0AD7  0096               	movwf	22	;volatile
 14958                           
 14959                           ;bldc.c: 2030: if( MotorFlags.bits.B6 )
 14960  0AD8  0020               	movlb	0	; select bank0
 14961  0AD9  1F5A               	btfss	_MotorFlags,6
 14962  0ADA  2AE0               	goto	i1l6431
 14963                           
 14964                           ;bldc.c: 2032: {;bldc.c: 2034: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 14965  0ADB  0022               	movlb	2	; select bank2
 14966  0ADC  080E               	movf	14,w	;volatile
 14967  0ADD  39E5               	andlw	229
 14968  0ADE  3812               	iorlw	18
 14969  0ADF  008E               	movwf	14	;volatile
 14970  0AE0                     i1l6431:	
 14971                           
 14972                           ;bldc.c: 2036: };bldc.c: 2039: LATC2 = 0;
 14973  0AE0  0022               	movlb	2	; select bank2
 14974  0AE1  110E               	bcf	14,2	;volatile
 14975                           
 14976                           ;bldc.c: 2040: LATB2 = 0;
 14977  0AE2  110D               	bcf	13,2	;volatile
 14978                           
 14979                           ;bldc.c: 2042: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 14980  0AE3  3011               	movlw	17
 14981  0AE4  00F0               	movwf	??i1_commutate
 14982  0AE5  0870               	movf	??i1_commutate,w
 14983  0AE6  0021               	movlb	1	; select bank1
 14984  0AE7  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14985                           
 14986                           ;bldc.c: 2043: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 14987  0AE8  3025               	movlw	37
 14988  0AE9  00F0               	movwf	??i1_commutate
 14989  0AEA  0870               	movf	??i1_commutate,w
 14990  0AEB  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14991                           
 14992                           ;bldc.c: 2044: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 14993  0AEC  3005               	movlw	5
 14994  0AED  00F0               	movwf	??i1_commutate
 14995  0AEE  0870               	movf	??i1_commutate,w
 14996  0AEF  0022               	movlb	2	; select bank2
 14997  0AF0  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
 14998                           
 14999                           ;bldc.c: 2045: CM1CON1 = 0x01;
 15000  0AF1  3001               	movlw	1
 15001  0AF2  0092               	movwf	18	;volatile
 15002                           
 15003                           ;bldc.c: 2060: CM1CON0 = 0x84;
 15004  0AF3  3084               	movlw	132
 15005  0AF4  0091               	movwf	17	;volatile
 15006                           
 15007                           ;bldc.c: 2061: rising_bemf_flag = 1;
 15008  0AF5  0020               	movlb	0	; select bank0
 15009  0AF6  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15010                           
 15011                           ;bldc.c: 2062: comm_state = 4;
 15012  0AF7  3004               	movlw	4
 15013  0AF8  2B19               	goto	L74
 15014  0AF9                     i1l6449:	
 15015                           ;bldc.c: 2071: };bldc.c: 2074: case 6:
 15016                           
 15017                           ;bldc.c: 2067: break;
 15018                           
 15019                           
 15020                           ;bldc.c: 2077: {;bldc.c: 2082: PSTR1CON = 0b00000100;
 15021  0AF9  3004               	movlw	4
 15022  0AFA  0025               	movlb	5	; select bank5
 15023  0AFB  0096               	movwf	22	;volatile
 15024                           
 15025                           ;bldc.c: 2085: if( MotorFlags.bits.B6 )
 15026  0AFC  0020               	movlb	0	; select bank0
 15027  0AFD  1F5A               	btfss	_MotorFlags,6
 15028  0AFE  2B04               	goto	i1l6455
 15029                           
 15030                           ;bldc.c: 2087: {;bldc.c: 2089: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 15031  0AFF  0022               	movlb	2	; select bank2
 15032  0B00  080E               	movf	14,w	;volatile
 15033  0B01  39E5               	andlw	229
 15034  0B02  3818               	iorlw	24
 15035  0B03  008E               	movwf	14	;volatile
 15036  0B04                     i1l6455:	
 15037                           
 15038                           ;bldc.c: 2091: };bldc.c: 2094: LATC2 = 1;
 15039  0B04  0022               	movlb	2	; select bank2
 15040  0B05  150E               	bsf	14,2	;volatile
 15041                           
 15042                           ;bldc.c: 2095: LATB2 = 0;
 15043  0B06  110D               	bcf	13,2	;volatile
 15044                           
 15045                           ;bldc.c: 2097: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 15046  0B07  3011               	movlw	17
 15047  0B08  00F0               	movwf	??i1_commutate
 15048  0B09  0870               	movf	??i1_commutate,w
 15049  0B0A  0021               	movlb	1	; select bank1
 15050  0B0B  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15051                           
 15052                           ;bldc.c: 2098: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 15053  0B0C  3025               	movlw	37
 15054  0B0D  00F0               	movwf	??i1_commutate
 15055  0B0E  0870               	movf	??i1_commutate,w
 15056  0B0F  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 15057                           
 15058                           ;bldc.c: 2099: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 15059  0B10  0022               	movlb	2	; select bank2
 15060  0B11  01E3               	clrf	_ui8_Ubemf_sel^(0+256)
 15061  0B12  0AE3               	incf	_ui8_Ubemf_sel^(0+256),f
 15062                           
 15063                           ;bldc.c: 2100: CM1CON1 = 0x00;
 15064  0B13  0192               	clrf	18	;volatile
 15065                           
 15066                           ;bldc.c: 2114: CM1CON0 = 0x94;
 15067  0B14  3094               	movlw	148
 15068  0B15  0091               	movwf	17	;volatile
 15069                           
 15070                           ;bldc.c: 2115: rising_bemf_flag = 0;
 15071  0B16  0020               	movlb	0	; select bank0
 15072  0B17  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15073                           
 15074                           ;bldc.c: 2116: comm_state = 5;
 15075  0B18  3005               	movlw	5
 15076  0B19                     L74:	
 15077  0B19  00F0               	movwf	??i1_commutate
 15078  0B1A  0870               	movf	??i1_commutate,w
 15079  0B1B  0021               	movlb	1	; select bank1
 15080  0B1C  00DE               	movwf	_comm_state^(0+128)
 15081                           
 15082                           ;bldc.c: 2121: break;
 15083  0B1D  2B3C               	goto	i1l354
 15084  0B1E                     i1l6469:	
 15085                           ;bldc.c: 2125: };bldc.c: 2129: default:
 15086                           
 15087                           
 15088                           ;bldc.c: 2130: {;bldc.c: 2132: PSTR1CON = 0x00;
 15089  0B1E  0025               	movlb	5	; select bank5
 15090  0B1F  0196               	clrf	22	;volatile
 15091                           
 15092                           ;bldc.c: 2133: CM1CON0 = 0x00;
 15093  0B20  0022               	movlb	2	; select bank2
 15094  0B21  0191               	clrf	17	;volatile
 15095  0B22                     L75:	
 15096                           
 15097                           ;bldc.c: 2134: rising_bemf_flag = 0;
 15098  0B22  0020               	movlb	0	; select bank0
 15099  0B23  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15100                           
 15101                           ;bldc.c: 2135: comm_state = 1;
 15102  0B24  0021               	movlb	1	; select bank1
 15103  0B25  01DE               	clrf	_comm_state^(0+128)
 15104  0B26  0ADE               	incf	_comm_state^(0+128),f
 15105                           
 15106                           ;bldc.c: 2139: };bldc.c: 2141: }
 15107                           
 15108                           ;bldc.c: 2136: break;
 15109  0B27  2B3C               	goto	i1l354
 15110  0B28                     i1l6477:	
 15111  0B28  085E               	movf	_comm_state^(0+128),w
 15112                           
 15113                           ; Switch size 1, requested type "space"
 15114                           ; Number of cases is 6, Range of values is 1 to 6
 15115                           ; switch strategies available:
 15116                           ; Name         Instructions Cycles
 15117                           ; simple_byte           19    10 (average)
 15118                           ; direct_byte           21     9 (fixed)
 15119                           ; jumptable            263     9 (fixed)
 15120                           ;	Chosen strategy is simple_byte
 15121  0B29  3A01               	xorlw	1	; case 1
 15122  0B2A  1903               	skipnz
 15123  0B2B  2A4F               	goto	i1l6333
 15124  0B2C  3A03               	xorlw	3	; case 2
 15125  0B2D  1903               	skipnz
 15126  0B2E  2A71               	goto	i1l6357
 15127  0B2F  3A01               	xorlw	1	; case 3
 15128  0B30  1903               	skipnz
 15129  0B31  2A90               	goto	i1l6381
 15130  0B32  3A07               	xorlw	7	; case 4
 15131  0B33  1903               	skipnz
 15132  0B34  2AB1               	goto	i1l6401
 15133  0B35  3A01               	xorlw	1	; case 5
 15134  0B36  1903               	skipnz
 15135  0B37  2AD5               	goto	i1l6425
 15136  0B38  3A03               	xorlw	3	; case 6
 15137  0B39  1903               	skipnz
 15138  0B3A  2AF9               	goto	i1l6449
 15139  0B3B  2B1E               	goto	i1l6469
 15140  0B3C                     i1l354:	
 15141                           
 15142                           ;bldc.c: 2145: if( rising_bemf_flag )
 15143  0B3C  0020               	movlb	0	; select bank0
 15144  0B3D  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15145  0B3E  2B3F               	goto	i1l6481
 15146  0B3F                     i1l6481:	
 15147                           ;bldc.c: 2151: }
 15148                           
 15149                           ;bldc.c: 2147: {;bldc.c: 2149: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
 15150                           
 15151                           
 15152                           ;bldc.c: 2154: else;bldc.c: 2155: {;bldc.c: 2157: ui8_BlankingCount = ( unsigned char ) 
      +                          ( 0.002 * 20000UL );
 15153  0B3F  3028               	movlw	40
 15154  0B40  00F0               	movwf	??i1_commutate
 15155  0B41  0870               	movf	??i1_commutate,w
 15156  0B42  0021               	movlb	1	; select bank1
 15157  0B43  00DD               	movwf	_ui8_BlankingCount^(0+128)
 15158                           
 15159                           ;bldc.c: 2159: };bldc.c: 2162: comm_time = 0;
 15160  0B44  0020               	movlb	0	; select bank0
 15161  0B45  01D3               	clrf	_comm_time
 15162  0B46  01D4               	clrf	_comm_time+1
 15163  0B47  0008               	return
 15164  0B48                     __end_ofi1_commutate:	
 15165                           
 15166                           	psect	swtext4
 15167  1854                     __pswtext4:	
 15168  1854                     i1S11843:	
 15169  1854  3189  29CC         	ljmp	i1l6281
 15170  1856  3189  29CE         	ljmp	i1l6283
 15171  1858  3189  29D3         	ljmp	i1l6285
 15172  185A  3189  29D5         	ljmp	i1l6287
 15173  185C  3189  29D7         	ljmp	i1l6289
 15174  185E  3189  29D9         	ljmp	i1l6291
 15175  1860  3189  29D9         	ljmp	i1l6293
 15176  1862  3189  29D9         	ljmp	i1l6295
 15177  1864  3189  29D9         	ljmp	i1l6297
 15178  1866  3189  29D9         	ljmp	i1l6299
 15179                           
 15180                           	psect	text41
 15181  1E19                     __ptext41:	
 15182 ;; *************** function i1___wmul *****************
 15183 ;; Defined at:
 15184 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 15185 ;; Parameters:    Size  Location     Type
 15186 ;;  multiplier      2    0[COMMON] unsigned int 
 15187 ;;  multiplicand    2    2[COMMON] unsigned int 
 15188 ;; Auto vars:     Size  Location     Type
 15189 ;;  __wmul          2    4[COMMON] unsigned int 
 15190 ;; Return value:  Size  Location     Type
 15191 ;;                  2    0[COMMON] unsigned int 
 15192 ;; Registers used:
 15193 ;;		wreg, status,2, status,0
 15194 ;; Tracked objects:
 15195 ;;		On entry : 0/0
 15196 ;;		On exit  : 0/0
 15197 ;;		Unchanged: 0/0
 15198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15199 ;;      Params:         4       0       0       0       0       0       0       0
 15200 ;;      Locals:         2       0       0       0       0       0       0       0
 15201 ;;      Temps:          0       0       0       0       0       0       0       0
 15202 ;;      Totals:         6       0       0       0       0       0       0       0
 15203 ;;Total ram usage:        6 bytes
 15204 ;; Hardware stack levels used:    1
 15205 ;; This function calls:
 15206 ;;		Nothing
 15207 ;; This function is called by:
 15208 ;;		_interrrupt_bldc
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           
 15213                           ;psect for function i1___wmul
 15214  1E19                     i1___wmul:	
 15215                           
 15216                           ;incstack = 0
 15217                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 15218  1E19  01F4               	clrf	i1___wmul@product
 15219  1E1A  01F5               	clrf	i1___wmul@product+1
 15220  1E1B                     i1l10721:	
 15221  1E1B  1C70               	btfss	i1___wmul@multiplier,0
 15222  1E1C  2E21               	goto	i1l1861
 15223  1E1D  0872               	movf	i1___wmul@multiplicand,w
 15224  1E1E  07F4               	addwf	i1___wmul@product,f
 15225  1E1F  0873               	movf	i1___wmul@multiplicand+1,w
 15226  1E20  3DF5               	addwfc	i1___wmul@product+1,f
 15227  1E21                     i1l1861:	
 15228  1E21  3001               	movlw	1
 15229  1E22                     u936_25:	
 15230  1E22  35F2               	lslf	i1___wmul@multiplicand,f
 15231  1E23  0DF3               	rlf	i1___wmul@multiplicand+1,f
 15232  1E24  0B89               	decfsz	9,f
 15233  1E25  2E22               	goto	u936_25
 15234  1E26  3001               	movlw	1
 15235  1E27                     u937_25:	
 15236  1E27  36F1               	lsrf	i1___wmul@multiplier+1,f
 15237  1E28  0CF0               	rrf	i1___wmul@multiplier,f
 15238  1E29  0B89               	decfsz	9,f
 15239  1E2A  2E27               	goto	u937_25
 15240  1E2B  0870               	movf	i1___wmul@multiplier,w
 15241  1E2C  0471               	iorwf	i1___wmul@multiplier+1,w
 15242  1E2D  1D03               	btfss	3,2
 15243  1E2E  2E1B               	goto	i1l10721
 15244  1E2F  0875               	movf	i1___wmul@product+1,w
 15245  1E30  00F1               	movwf	?i1___wmul+1
 15246  1E31  0874               	movf	i1___wmul@product,w
 15247  1E32  00F0               	movwf	?i1___wmul
 15248  1E33  0008               	return
 15249  1E34                     __end_ofi1___wmul:	
 15250                           
 15251                           	psect	text42
 15252  1DCD                     __ptext42:	
 15253 ;; *************** function i1_ADC_Wait *****************
 15254 ;; Defined at:
 15255 ;;		line 128 in file "../adc.c"
 15256 ;; Parameters:    Size  Location     Type
 15257 ;;		None
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;		None
 15260 ;; Return value:  Size  Location     Type
 15261 ;;                  1    wreg      void 
 15262 ;; Registers used:
 15263 ;;		None
 15264 ;; Tracked objects:
 15265 ;;		On entry : 0/0
 15266 ;;		On exit  : 0/0
 15267 ;;		Unchanged: 0/0
 15268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15269 ;;      Params:         0       0       0       0       0       0       0       0
 15270 ;;      Locals:         0       0       0       0       0       0       0       0
 15271 ;;      Temps:          0       0       0       0       0       0       0       0
 15272 ;;      Totals:         0       0       0       0       0       0       0       0
 15273 ;;Total ram usage:        0 bytes
 15274 ;; Hardware stack levels used:    1
 15275 ;; This function calls:
 15276 ;;		Nothing
 15277 ;; This function is called by:
 15278 ;;		_interrrupt_bldc
 15279 ;; This function uses a non-reentrant model
 15280 ;;
 15281                           
 15282                           
 15283                           ;psect for function i1_ADC_Wait
 15284  1DCD                     i1_ADC_Wait:	
 15285                           
 15286                           ;adc.c: 133: __nop();
 15287                           
 15288                           ;incstack = 0
 15289                           ; Regs used in i1_ADC_Wait: []
 15290  1DCD  0000               	nop
 15291                           
 15292                           ;adc.c: 134: __nop();
 15293  1DCE  0000               	nop
 15294                           
 15295                           ;adc.c: 135: __nop();
 15296  1DCF  0000               	nop
 15297                           
 15298                           ;adc.c: 136: __nop();
 15299  1DD0  0000               	nop
 15300                           
 15301                           ;adc.c: 137: __nop();
 15302  1DD1  0000               	nop
 15303                           
 15304                           ;adc.c: 138: __nop();
 15305  1DD2  0000               	nop
 15306                           
 15307                           ;adc.c: 139: __nop();
 15308  1DD3  0000               	nop
 15309                           
 15310                           ;adc.c: 140: __nop();
 15311  1DD4  0000               	nop
 15312                           
 15313                           ;adc.c: 142: __nop();
 15314  1DD5  0000               	nop
 15315                           
 15316                           ;adc.c: 143: __nop();
 15317  1DD6  0000               	nop
 15318                           
 15319                           ;adc.c: 144: __nop();
 15320  1DD7  0000               	nop
 15321                           
 15322                           ;adc.c: 145: __nop();
 15323  1DD8  0000               	nop
 15324                           
 15325                           ;adc.c: 146: __nop();
 15326  1DD9  0000               	nop
 15327                           
 15328                           ;adc.c: 147: __nop();
 15329  1DDA  0000               	nop
 15330                           
 15331                           ;adc.c: 148: __nop();
 15332  1DDB  0000               	nop
 15333                           
 15334                           ;adc.c: 149: __nop();
 15335  1DDC  0000               	nop
 15336                           
 15337                           ;adc.c: 151: __nop();
 15338  1DDD  0000               	nop
 15339                           
 15340                           ;adc.c: 152: __nop();
 15341  1DDE  0000               	nop
 15342                           
 15343                           ;adc.c: 153: __nop();
 15344  1DDF  0000               	nop
 15345                           
 15346                           ;adc.c: 154: __nop();
 15347  1DE0  0000               	nop
 15348                           
 15349                           ;adc.c: 155: __nop();
 15350  1DE1  0000               	nop
 15351                           
 15352                           ;adc.c: 156: __nop();
 15353  1DE2  0000               	nop
 15354                           
 15355                           ;adc.c: 157: __nop();
 15356  1DE3  0000               	nop
 15357                           
 15358                           ;adc.c: 158: __nop();
 15359  1DE4  0000               	nop
 15360  1DE5  0008               	return
 15361  1DE6                     __end_ofi1_ADC_Wait:	
 15362                           
 15363                           	psect	text43
 15364  1DFF                     __ptext43:	
 15365 ;; *************** function i1_ADC_Read *****************
 15366 ;; Defined at:
 15367 ;;		line 175 in file "../adc.c"
 15368 ;; Parameters:    Size  Location     Type
 15369 ;;		None
 15370 ;; Auto vars:     Size  Location     Type
 15371 ;;  ADC_Read        1    3[COMMON] unsigned char 
 15372 ;; Return value:  Size  Location     Type
 15373 ;;                  2    0[COMMON] unsigned int 
 15374 ;; Registers used:
 15375 ;;		wreg, status,2, status,0
 15376 ;; Tracked objects:
 15377 ;;		On entry : 0/0
 15378 ;;		On exit  : 0/0
 15379 ;;		Unchanged: 0/0
 15380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15381 ;;      Params:         2       0       0       0       0       0       0       0
 15382 ;;      Locals:         1       0       0       0       0       0       0       0
 15383 ;;      Temps:          1       0       0       0       0       0       0       0
 15384 ;;      Totals:         4       0       0       0       0       0       0       0
 15385 ;;Total ram usage:        4 bytes
 15386 ;; Hardware stack levels used:    1
 15387 ;; This function calls:
 15388 ;;		Nothing
 15389 ;; This function is called by:
 15390 ;;		_interrrupt_bldc
 15391 ;; This function uses a non-reentrant model
 15392 ;;
 15393                           
 15394                           
 15395                           ;psect for function i1_ADC_Read
 15396  1DFF                     i1_ADC_Read:	
 15397                           
 15398                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
 15399                           
 15400                           ;incstack = 0
 15401                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
 15402  1DFF  01F3               	clrf	i1ADC_Read@i
 15403  1E00                     i1l69:	
 15404                           ;adc.c: 182: while( GO_nDONE )
 15405                           
 15406  1E00  0021               	movlb	1	; select bank1
 15407  1E01  1C9D               	btfss	29,1	;volatile
 15408  1E02  2E0B               	goto	i1l6243
 15409                           
 15410                           ;adc.c: 184: {;adc.c: 186: i++;
 15411  1E03  3001               	movlw	1
 15412  1E04  00F2               	movwf	??i1_ADC_Read
 15413  1E05  0872               	movf	??i1_ADC_Read,w
 15414  1E06  07F3               	addwf	i1ADC_Read@i,f
 15415                           
 15416                           ;adc.c: 189: if( i > 64 )
 15417  1E07  3041               	movlw	65
 15418  1E08  0273               	subwf	i1ADC_Read@i,w
 15419  1E09  1C03               	skipc
 15420  1E0A  2E00               	goto	i1l69
 15421  1E0B                     i1l6243:	
 15422                           ;adc.c: 191: {;adc.c: 193: break;
 15423                           
 15424                           
 15425                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
 15426  1E0B  0021               	movlb	1	; select bank1
 15427  1E0C  081C               	movf	28,w	;volatile
 15428  1E0D  00F2               	movwf	??i1_ADC_Read
 15429  1E0E  0872               	movf	??i1_ADC_Read,w
 15430  1E0F  00BD               	movwf	(_analog_value^(0+128)+1)	;volatile
 15431                           
 15432                           ;adc.c: 202: analog_value.b.lo = ADRESL;
 15433  1E10  081B               	movf	27,w	;volatile
 15434  1E11  00F2               	movwf	??i1_ADC_Read
 15435  1E12  0872               	movf	??i1_ADC_Read,w
 15436  1E13  00BC               	movwf	_analog_value^(0+128)	;volatile
 15437                           
 15438                           ;adc.c: 204: return analog_value.w;
 15439  1E14  083D               	movf	(_analog_value+1)^(0+128),w	;volatile
 15440  1E15  00F1               	movwf	?i1_ADC_Read+1
 15441  1E16  083C               	movf	_analog_value^(0+128),w	;volatile
 15442  1E17  00F0               	movwf	?i1_ADC_Read
 15443  1E18  0008               	return
 15444  1E19                     __end_ofi1_ADC_Read:	
 15445                           
 15446                           	psect	text44
 15447  11A8                     __ptext44:	
 15448 ;; *************** function ___lwdiv *****************
 15449 ;; Defined at:
 15450 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
 15451 ;; Parameters:    Size  Location     Type
 15452 ;;  divisor         2    0[COMMON] unsigned int 
 15453 ;;  dividend        2    2[COMMON] unsigned int 
 15454 ;; Auto vars:     Size  Location     Type
 15455 ;;  quotient        2    5[COMMON] unsigned int 
 15456 ;;  counter         1    7[COMMON] unsigned char 
 15457 ;; Return value:  Size  Location     Type
 15458 ;;                  2    0[COMMON] unsigned int 
 15459 ;; Registers used:
 15460 ;;		wreg, status,2, status,0
 15461 ;; Tracked objects:
 15462 ;;		On entry : 0/0
 15463 ;;		On exit  : 0/0
 15464 ;;		Unchanged: 0/0
 15465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15466 ;;      Params:         4       0       0       0       0       0       0       0
 15467 ;;      Locals:         3       0       0       0       0       0       0       0
 15468 ;;      Temps:          1       0       0       0       0       0       0       0
 15469 ;;      Totals:         8       0       0       0       0       0       0       0
 15470 ;;Total ram usage:        8 bytes
 15471 ;; Hardware stack levels used:    1
 15472 ;; This function calls:
 15473 ;;		Nothing
 15474 ;; This function is called by:
 15475 ;;		_EOL
 15476 ;;		_interrrupt_bldc
 15477 ;; This function uses a non-reentrant model
 15478 ;;
 15479                           
 15480                           
 15481                           ;psect for function ___lwdiv
 15482  11A8                     ___lwdiv:	
 15483                           
 15484                           ;incstack = 0
 15485                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 15486  11A8  01F5               	clrf	___lwdiv@quotient
 15487  11A9  01F6               	clrf	___lwdiv@quotient+1
 15488  11AA  0870               	movf	___lwdiv@divisor,w
 15489  11AB  0471               	iorwf	___lwdiv@divisor+1,w
 15490  11AC  1903               	btfsc	3,2
 15491  11AD  29D7               	goto	i1l8817
 15492  11AE  01F7               	clrf	___lwdiv@counter
 15493  11AF  0AF7               	incf	___lwdiv@counter,f
 15494  11B0                     i1l8805:	
 15495  11B0  1BF1               	btfsc	___lwdiv@divisor+1,7
 15496  11B1  29BC               	goto	i1l8807
 15497  11B2  3001               	movlw	1
 15498  11B3                     u675_25:	
 15499  11B3  35F0               	lslf	___lwdiv@divisor,f
 15500  11B4  0DF1               	rlf	___lwdiv@divisor+1,f
 15501  11B5  0B89               	decfsz	9,f
 15502  11B6  29B3               	goto	u675_25
 15503  11B7  3001               	movlw	1
 15504  11B8  00F4               	movwf	??___lwdiv
 15505  11B9  0874               	movf	??___lwdiv,w
 15506  11BA  07F7               	addwf	___lwdiv@counter,f
 15507  11BB  29B0               	goto	i1l8805
 15508  11BC                     i1l8807:	
 15509  11BC  3001               	movlw	1
 15510  11BD                     u677_25:	
 15511  11BD  35F5               	lslf	___lwdiv@quotient,f
 15512  11BE  0DF6               	rlf	___lwdiv@quotient+1,f
 15513  11BF  0B89               	decfsz	9,f
 15514  11C0  29BD               	goto	u677_25
 15515  11C1  0871               	movf	___lwdiv@divisor+1,w
 15516  11C2  0273               	subwf	___lwdiv@dividend+1,w
 15517  11C3  1D03               	skipz
 15518  11C4  29C7               	goto	u678_25
 15519  11C5  0870               	movf	___lwdiv@divisor,w
 15520  11C6  0272               	subwf	___lwdiv@dividend,w
 15521  11C7                     u678_25:	
 15522  11C7  1C03               	skipc
 15523  11C8  29CE               	goto	i1l8813
 15524  11C9  0870               	movf	___lwdiv@divisor,w
 15525  11CA  02F2               	subwf	___lwdiv@dividend,f
 15526  11CB  0871               	movf	___lwdiv@divisor+1,w
 15527  11CC  3BF3               	subwfb	___lwdiv@dividend+1,f
 15528  11CD  1475               	bsf	___lwdiv@quotient,0
 15529  11CE                     i1l8813:	
 15530  11CE  3001               	movlw	1
 15531  11CF                     u679_25:	
 15532  11CF  36F1               	lsrf	___lwdiv@divisor+1,f
 15533  11D0  0CF0               	rrf	___lwdiv@divisor,f
 15534  11D1  0B89               	decfsz	9,f
 15535  11D2  29CF               	goto	u679_25
 15536  11D3  3001               	movlw	1
 15537  11D4  02F7               	subwf	___lwdiv@counter,f
 15538  11D5  1D03               	btfss	3,2
 15539  11D6  29BC               	goto	i1l8807
 15540  11D7                     i1l8817:	
 15541  11D7  0876               	movf	___lwdiv@quotient+1,w
 15542  11D8  00F1               	movwf	?___lwdiv+1
 15543  11D9  0875               	movf	___lwdiv@quotient,w
 15544  11DA  00F0               	movwf	?___lwdiv
 15545  11DB  0008               	return
 15546  11DC                     __end_of___lwdiv:	
 15547                           
 15548                           	psect	text45
 15549  1E50                     __ptext45:	
 15550 ;; *************** function _BLDCWait *****************
 15551 ;; Defined at:
 15552 ;;		line 156 in file "../bldc.c"
 15553 ;; Parameters:    Size  Location     Type
 15554 ;;		None
 15555 ;; Auto vars:     Size  Location     Type
 15556 ;;		None
 15557 ;; Return value:  Size  Location     Type
 15558 ;;                  1    wreg      void 
 15559 ;; Registers used:
 15560 ;;		None
 15561 ;; Tracked objects:
 15562 ;;		On entry : 0/0
 15563 ;;		On exit  : 0/0
 15564 ;;		Unchanged: 0/0
 15565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15566 ;;      Params:         0       0       0       0       0       0       0       0
 15567 ;;      Locals:         0       0       0       0       0       0       0       0
 15568 ;;      Temps:          0       0       0       0       0       0       0       0
 15569 ;;      Totals:         0       0       0       0       0       0       0       0
 15570 ;;Total ram usage:        0 bytes
 15571 ;; Hardware stack levels used:    1
 15572 ;; This function calls:
 15573 ;;		Nothing
 15574 ;; This function is called by:
 15575 ;;		_interrrupt_bldc
 15576 ;; This function uses a non-reentrant model
 15577 ;;
 15578                           
 15579                           
 15580                           ;psect for function _BLDCWait
 15581  1E50                     _BLDCWait:	
 15582                           
 15583                           ;bldc.c: 161: __nop();
 15584                           
 15585                           ;incstack = 0
 15586                           ; Regs used in _BLDCWait: []
 15587  1E50  0000               	nop
 15588                           
 15589                           ;bldc.c: 162: __nop();
 15590  1E51  0000               	nop
 15591                           
 15592                           ;bldc.c: 163: __nop();
 15593  1E52  0000               	nop
 15594                           
 15595                           ;bldc.c: 164: __nop();
 15596  1E53  0000               	nop
 15597                           
 15598                           ;bldc.c: 165: __nop();
 15599  1E54  0000               	nop
 15600                           
 15601                           ;bldc.c: 166: __nop();
 15602  1E55  0000               	nop
 15603                           
 15604                           ;bldc.c: 167: __nop();
 15605  1E56  0000               	nop
 15606                           
 15607                           ;bldc.c: 168: __nop();
 15608  1E57  0000               	nop
 15609                           
 15610                           ;bldc.c: 170: __nop();
 15611  1E58  0000               	nop
 15612                           
 15613                           ;bldc.c: 171: __nop();
 15614  1E59  0000               	nop
 15615                           
 15616                           ;bldc.c: 172: __nop();
 15617  1E5A  0000               	nop
 15618                           
 15619                           ;bldc.c: 173: __nop();
 15620  1E5B  0000               	nop
 15621                           
 15622                           ;bldc.c: 174: __nop();
 15623  1E5C  0000               	nop
 15624                           
 15625                           ;bldc.c: 175: __nop();
 15626  1E5D  0000               	nop
 15627                           
 15628                           ;bldc.c: 176: __nop();
 15629  1E5E  0000               	nop
 15630                           
 15631                           ;bldc.c: 177: __nop();
 15632  1E5F  0000               	nop
 15633                           
 15634                           ;bldc.c: 179: __nop();
 15635  1E60  0000               	nop
 15636                           
 15637                           ;bldc.c: 180: __nop();
 15638  1E61  0000               	nop
 15639                           
 15640                           ;bldc.c: 181: __nop();
 15641  1E62  0000               	nop
 15642                           
 15643                           ;bldc.c: 182: __nop();
 15644  1E63  0000               	nop
 15645                           
 15646                           ;bldc.c: 183: __nop();
 15647  1E64  0000               	nop
 15648                           
 15649                           ;bldc.c: 184: __nop();
 15650  1E65  0000               	nop
 15651                           
 15652                           ;bldc.c: 185: __nop();
 15653  1E66  0000               	nop
 15654                           
 15655                           ;bldc.c: 186: __nop();
 15656  1E67  0000               	nop
 15657                           
 15658                           ;bldc.c: 188: __nop();
 15659  1E68  0000               	nop
 15660                           
 15661                           ;bldc.c: 189: __nop();
 15662  1E69  0000               	nop
 15663                           
 15664                           ;bldc.c: 190: __nop();
 15665  1E6A  0000               	nop
 15666                           
 15667                           ;bldc.c: 191: __nop();
 15668  1E6B  0000               	nop
 15669                           
 15670                           ;bldc.c: 192: __nop();
 15671  1E6C  0000               	nop
 15672                           
 15673                           ;bldc.c: 193: __nop();
 15674  1E6D  0000               	nop
 15675                           
 15676                           ;bldc.c: 194: __nop();
 15677  1E6E  0000               	nop
 15678                           
 15679                           ;bldc.c: 195: __nop();
 15680  1E6F  0000               	nop
 15681  1E70  0008               	return
 15682  1E71                     __end_of_BLDCWait:	
 15683                           
 15684                           	psect	text46
 15685  1D43                     __ptext46:	
 15686 ;; *************** function _Task1ms *****************
 15687 ;; Defined at:
 15688 ;;		line 53 in file "../interrupt.c"
 15689 ;; Parameters:    Size  Location     Type
 15690 ;;		None
 15691 ;; Auto vars:     Size  Location     Type
 15692 ;;		None
 15693 ;; Return value:  Size  Location     Type
 15694 ;;                  1    wreg      void 
 15695 ;; Registers used:
 15696 ;;		wreg, status,2, status,0
 15697 ;; Tracked objects:
 15698 ;;		On entry : 0/0
 15699 ;;		On exit  : 0/0
 15700 ;;		Unchanged: 0/0
 15701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15702 ;;      Params:         0       0       0       0       0       0       0       0
 15703 ;;      Locals:         0       0       0       0       0       0       0       0
 15704 ;;      Temps:          1       0       0       0       0       0       0       0
 15705 ;;      Totals:         1       0       0       0       0       0       0       0
 15706 ;;Total ram usage:        1 bytes
 15707 ;; Hardware stack levels used:    1
 15708 ;; This function calls:
 15709 ;;		Nothing
 15710 ;; This function is called by:
 15711 ;;		_interrupt_handler
 15712 ;; This function uses a non-reentrant model
 15713 ;;
 15714                           
 15715                           
 15716                           ;psect for function _Task1ms
 15717  1D43                     _Task1ms:	
 15718                           
 15719                           ;interrupt.c: 57: ui8_Task_Cont1ms++;
 15720                           
 15721                           ;incstack = 0
 15722                           ; Regs used in _Task1ms: [wreg+status,2+status,0]
 15723  1D43  3001               	movlw	1
 15724  1D44  00F0               	movwf	??_Task1ms
 15725  1D45  0870               	movf	??_Task1ms,w
 15726  1D46  0021               	movlb	1	; select bank1
 15727  1D47  07D2               	addwf	_ui8_Task_Cont1ms^(0+128),f
 15728  1D48  0008               	return
 15729  1D49                     __end_of_Task1ms:	
 15730                           
 15731                           	psect	text47
 15732  1DB7                     __ptext47:	
 15733 ;; *************** function _PWM_CTRL *****************
 15734 ;; Defined at:
 15735 ;;		line 207 in file "../pwm.c"
 15736 ;; Parameters:    Size  Location     Type
 15737 ;;		None
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;		None
 15740 ;; Return value:  Size  Location     Type
 15741 ;;                  1    wreg      void 
 15742 ;; Registers used:
 15743 ;;		wreg, status,2, status,0
 15744 ;; Tracked objects:
 15745 ;;		On entry : 0/0
 15746 ;;		On exit  : 0/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15749 ;;      Params:         0       0       0       0       0       0       0       0
 15750 ;;      Locals:         0       0       0       0       0       0       0       0
 15751 ;;      Temps:          1       0       0       0       0       0       0       0
 15752 ;;      Totals:         1       0       0       0       0       0       0       0
 15753 ;;Total ram usage:        1 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; This function calls:
 15756 ;;		Nothing
 15757 ;; This function is called by:
 15758 ;;		_interrupt_handler
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           
 15763                           ;psect for function _PWM_CTRL
 15764  1DB7                     _PWM_CTRL:	
 15765                           
 15766                           ;pwm.c: 297: ui8_PWM_FreqCnt++;
 15767                           
 15768                           ;incstack = 0
 15769                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 15770  1DB7  3001               	movlw	1
 15771  1DB8  00F0               	movwf	??_PWM_CTRL
 15772  1DB9  0870               	movf	??_PWM_CTRL,w
 15773  1DBA  0021               	movlb	1	; select bank1
 15774  1DBB  07CD               	addwf	_ui8_PWM_FreqCnt^(0+128),f
 15775                           
 15776                           ;pwm.c: 299: if( ui8_PWM_FreqCnt >= 100 )
 15777  1DBC  3064               	movlw	100
 15778  1DBD  024D               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 15779  1DBE  1C03               	skipc
 15780  1DBF  2DC4               	goto	i1l6839
 15781                           
 15782                           ;pwm.c: 301: {;pwm.c: 303: ui8_PWM_FreqCnt = 0;
 15783  1DC0  01CD               	clrf	_ui8_PWM_FreqCnt^(0+128)
 15784                           
 15785                           ;pwm.c: 304: LATC0 = 0;
 15786  1DC1  0022               	movlb	2	; select bank2
 15787  1DC2  100E               	bcf	14,0	;volatile
 15788                           
 15789                           ;pwm.c: 307: }
 15790  1DC3  0008               	return
 15791  1DC4                     i1l6839:	
 15792                           
 15793                           ;pwm.c: 310: else;pwm.c: 311: {;pwm.c: 313: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 15794  1DC4  0022               	movlb	2	; select bank2
 15795  1DC5  0843               	movf	_ui8_PWMoutvalue^(0+256),w
 15796  1DC6  0021               	movlb	1	; select bank1
 15797  1DC7  024D               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 15798  1DC8  1C03               	skipc
 15799  1DC9  0008               	return
 15800                           
 15801                           ;pwm.c: 315: {;pwm.c: 317: LATC0 = 1;
 15802  1DCA  0022               	movlb	2	; select bank2
 15803  1DCB  140E               	bsf	14,0	;volatile
 15804  1DCC  0008               	return
 15805  1DCD                     __end_of_PWM_CTRL:	
 15806  007E                     btemp	set	126	;btemp
 15807  007E                     int$flags	set	126
 15808  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    470
    Data        16
    BSS         326
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     43      63
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      79
    BANK4            80      0      78
    BANK5            80     32      43
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrrupt_bldc->i1_commutate

Critical Paths under _main in BANK0

    _main->_BVH2_Appl_Layer
    _system_init->_init_bldc
    _timer_init->_clear_timer
    _InitMotorRun->_commutate
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    _rate_limit->___wmul
    _SetDiagAlarm->_PWM_Write_Out
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _Get_Analog_Value->_FILTER_Ubat
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6774
                                             39 BANK0      4     4      0
                    _BVH2_Appl_Layer
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                          _PWMReadDC
                       _SetDiagAlarm
                             ___wmul
                        _clear_timer
                         _rate_limit
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0     181
                           _ADC_Init
                           _DiagInit
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                              9 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            1     1      0       0
                                             20 BANK0      1     1      0
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0       0
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0       0
                                              8 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    5     5      0      69
                                             12 BANK0      5     5      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     3     3      0      45
                                              8 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          1     1      0      24
                                             12 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             4     2      2      24
                                              8 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rate_limit                                          14    12      2    1791
                                             14 BANK0     14    12      2
                             ___wmul
                               _sign
 ---------------------------------------------------------------------------------
 (2) _sign                                                 5     3      2     120
                                              8 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        2     2      0      22
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PWMReadDC                                            4     4      0     296
                                             28 BANK0      4     4      0
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              8 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ltdiv                                             11     5      6      52
                                             17 BANK0     11     5      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                              8 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     48    48      0    3336
                                             23 BANK0     16    16      0
                                              0 BANK5     32    32      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1126
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                              8 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              8 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupt_handler                                    0     0      0     822
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (6) _interrupt_PWMCapture                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _interrrupt_bldc                                      8     8      0     822
                                              0 BANK0      8     8      0
                           _BLDCWait
                            ___lwdiv
                         i1_ADC_Read
                         i1_ADC_Wait
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (7) i1_commutate                                         12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4      44
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Read                                           4     2      2      24
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              8     4      4     700
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (7) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Task1ms                                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _PWM_CTRL                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
   _InitMotorStop
   _PWMReadDC
     ___ltdiv
       ___tmul (ARG)
     ___tmul
   _SetDiagAlarm
     _PWM_Write_Out
   ___wmul
   _clear_timer
   _rate_limit
     ___wmul
     _sign
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     _init_bldc
       _InitMotorRun
         _commutate
     _init_ports
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     ___lwdiv
     i1_ADC_Read
     i1_ADC_Wait
     i1___wmul
     i1_commutate
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1B3       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4F      12       98.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4E      14       97.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50     20      2B      16       53.8%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     1B3      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Apr 21 13:14:11 2023

                          ?_PWM_Capture_init 0070                                            _B 0220  
                                          pc 0002                                           l69 1E96  
                                         _RD 0CA8                                           _WR 0CA9  
                         ??_PWM_Capture_init 0028                          ___wmul@multiplicand 002A  
                           i1___wmul@product 0074                     _SIBFS_Pic_etat_monitor_b 00C7  
           BVH2_Appl_Layer@X_Sb4_Intergrator 0168                          __end_of_system_init 1397  
BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00C2                                  ?i1_ADC_Read 0070  
                                        l327 0E9F                                          l345 0EE4  
                                        l514 1237                                          l354 0FF1  
                                        l516 123D                                  ?i1_ADC_Wait 0070  
                                        _GIE 005F                                          _RA4 0064  
                                        _RC5 0075                                          _PR2 001B  
                                        _PR4 0416                                          _PR6 041D  
                                        _sum 0125                             _ui16_IPhase_bldc 0051  
                               __CFG_BORV$LO 0000                                          wreg 0009  
                          _ui16_IPhase1_bldc 01D4                           __ELINMIntTFrameMax 0254  
                          _ui16_IPhase2_bldc 0260                           __ELINMIntTFrameMin 0256  
                          _ui16_IPhase3_bldc 025E                    BVH2_Appl_Layer@Cb24_Reset 02B4  
                               __CFG_LVP$OFF 0000                          __ELINMIntTHeaderMax 0250  
                        __ELINMIntTHeaderMin 0252                      __end_of_interrrupt_bldc 0DA4  
                                       _C1IE 0495                                         l1411 0183  
                                       l1403 0176                                         l1404 015D  
                                       l1172 085B                                         l1421 01C1  
                                       l1415 01A8                                         l1407 016C  
                                       l1600 072A                                         l1504 03F4  
                                       l1424 01D4                                         l1521 04AA  
                                       l1433 027C                                         l1419 01AD  
                                       l1604 073D                                         l1540 04C8  
                                       l1452 0253                                         l1541 04CB  
                                       l1606 0752                                         l1526 0486  
                                       l1390 0135                                         l1535 04BD  
                                       l1463 02CE                                         l1544 04E3  
                                       l1457 03E0                                         l1554 0539  
                                       l1538 0500                                         l1730 12BF  
                                       l1563 0588                                         l1539 04CD  
                                       l1387 00D2                                         l1660 130F  
                                       l1557 055B                                         l1663 1325  
                                       l1665 1327                                         l1657 130B  
                                       l1593 06CB                                         l1569 05A3  
                                       l1753 1ED9                                         l1666 1329  
                                       l1658 131B                                         l1498 0399  
                                       l1667 1345                                         l1659 130D  
                                       l1861 1E3D                                         l1926 1509  
                                       l6141 1F29                                         l5501 0F21  
                                       l5421 0E69                                         l5431 0E74  
                                       l5423 0E6E                                         l5415 0E5D  
                                       l6145 1F31                                         l5433 0E74  
                                       l5425 0E70                                         l5441 0E7A  
                                       l5417 0E5F                                         l5435 0E74  
                                       l5427 0E72                                         l5443 0E8A  
                                       l5419 0E67                                         l5525 0F42  
                                       l5453 0EA5                                         l5437 0E74  
                                       l5429 0E74                                         l5607 0FD3  
                                       l5519 0F37                                         l5471 0EF2  
                                       l5615 0FDD                                         l5455 0EB3  
                                       l5447 0E96                                         l5439 0E74  
                                       l5703 1EC7                                         l5641 1EA2  
                                       l5801 08B8                                         l5545 0F66  
                                       l5465 0EE2                                         l5619 0FF6  
                                       l5563 0F83                                         l5539 0F5B  
                                       l5477 0EFD                                         l5389 0DB0  
                                       l5807 08E1                                         l5495 0F16  
                                       l9201 00A7                                         l5809 08E6  
                                       l5921 0831                                         l5913 0825  
                                       l5905 0819                                         l5593 0FB6  
                                       l5569 0F8E                                         l5587 0FAB  
                                       l5691 1EBA                                         l9221 00CB  
                                       l9141 14B0                                         l5693 1EBC  
                                       l9311 0190                                         l5791 0885  
                                       l5695 1EBF                                         l5863 1284  
                                       l9401 0229                                         l9321 01A0  
                                       l9233 00DC                                         l9209 00B2  
                                       l9153 14E8                                         l5793 088A  
                                       l5929 083D                                         l5697 1EC1  
                                       l5873 1292                                         l8603 15D7  
                                       l8531 1EE7                                         l9251 0115  
                                       l9243 0105                                         l9219 00C3  
                                       l9171 0082                                         l9235 00DF  
                                       l5939 0849                                         l5699 1EC4  
                                       l5867 1289                                         l8701 1F95  
                                       l9413 023F                                         l9253 0119  
                                       l9245 0109                                         l9261 0125  
                                       l9181 009C                                         l9237 00F5  
                                       l6781 122F                                         l6773 121F  
                                       l5885 12A4                                         l5893 12AD  
                                       l8631 15FB                                         l9343 01DB  
                                       l9431 0263                                         l9255 011D  
                                       l9247 010D                                         l9159 0079  
                                       l5799 08B3                                         l5879 129B  
                                       l8617 15EA                                         l8545 1582  
                                       l8705 1E37                                         l9417 0247  
                                       l9345 01DD                                         l9257 0121  
                                       l9249 0111                                         l9177 0090  
                                       l6777 1227                                         l6769 1217  
                                       l5897 080D                                         l8563 15A3  
                                       l8539 1EF9                                         l8723 1FAE  
                                       l9523 0330                                         l9507 030A  
                                       l9419 024B                                         l9363 01F8  
                                       l9179 0094                                         _ADON 04E8  
                                       l8645 160D                                         l8741 151A  
                                       l9541 0357                                         l9525 0338  
                                       l9517 0321                                         l9461 02B5  
                                       l9445 0291                                         l9429 0260  
                                       l9373 01FE                                         l9357 01EE  
                                       l9277 0144                                         l9189 00A5  
                                       l6789 1243                                         l8575 15B1  
                                       l8559 1594                                         l8671 1335  
                                       l8663 1311                                         l8751 1538  
                                       l8719 1FA4                                         l9527 033E  
                                       l9463 02B5                                         l9455 02AF  
                                       l9471 02B8                                         l9391 021C  
                                       l9375 0202                                         l9633 043F  
                                       l9625 0429                                         l9545 0366  
                                       l9609 0403                                         l9465 02B5  
                                       l8763 1563                                         l9619 0417  
                                       l9555 0375                                         l9483 02D8  
                                       l9475 02D0                                         l9467 02B5  
                                       l9459 02B5                                         l9379 0217  
                                       l8589 15C4                                         l8669 132B  
                                       l8749 152A                                         l9717 04F8  
                                       l9629 0434                                         l9573 03A3  
                                       l8767 1571                                         l8759 1558  
                                       l9831 0623                                         l9743 0554  
                                       l9727 050F                                         l9583 03C1  
                                       l9567 0390                                         l9495 02F0  
                                       l8689 1F80                                         l9809 05F3  
                                       l9761 057F                                         l9665 0494  
                                       l9657 0488                                         l9569 0396  
                                       _CFGS 0CAE                                         l9851 06D2  
                                       l9827 061C                                         l9819 0605  
                                       l9675 04B0                                         l9499 02FF  
                                       l9587 03C9                                         l9861 0739  
                                       l9837 0634                                         l9773 05A9  
                                       l9757 0574                                         l9669 04A2  
                                       l9863 0742                                         l9847 06C6  
                                       l9767 05A1                                         l9679 04B2  
                                       l9881 07ED                                         l9849 06CF  
                                       l9865 0746                                         l9793 05CF  
                                       l9777 05AC                                         l9875 07BA  
                                       l9877 07C6                                         l9869 074D  
                                       l9879 07D5                                         u3100 1E8B  
                                       u3005 11EF                                         _LATA 010C  
                                       u3110 1E8C                                         _LATB 010D  
                                       u3015 1259                                         _LATC 010E  
                                       u3105 1E87                                         u3080 1E76  
                                       u3090 1E77                                         _PIE1 0091  
                                       _PIE2 0092                                         u3345 1F32  
                                       _PIE3 0093                                         u3355 1F38  
                                       u2805 0E47                                         _PEIE 005E  
                                       u2855 0ED9                                         u7215 14DF  
                                       u6505 1E3E                                         u6515 1E43  
                                       i1l69 1E00                                         u6605 152D  
                                       u8205 0533                                         u6625 1539  
                                       u6545 1FAF                                         u8225 054F  
                                       u6635 154D                                         u6555 1FB6  
                                       u6645 1559                                         u8255 0570  
                                       u9315 12DC                                         u7660 029E  
                                       u8445 0656                                         u8285 059D  
                                       u9325 12EB                                         u7670 029F  
                                       u8455 0689                                         u9335 12F5  
                                       u8465 06A9                                         u8475 06B7  
                                       u8485 0720                                         u9295 12D1  
                                       u9705 166F                                         u7995 0476  
                                       _TMR0 0015                                         _TMR2 001A  
                                       _TMR4 0415                                         _TMR6 041C  
                                       _WREN 0CAA                                         _Bcnt 00D9  
                           _ui8_Task_Cont1ms 00D2                             _ui8_Task_Cont3ms 0147  
                           _ui8_Task_Cont5ms 0146                             _ui16_PWM_Freq_In 01B6  
                 BVH2_Appl_Layer@Cb24_BadCnt 01A0                                         _main 16CD  
                                       _sign 1E71                                         fsr0h 0005  
                                       fsr1h 0007                                         indf0 0000  
                                       fsr0l 0004                                         fsr1l 0006  
                                       btemp 007E                            _ui8_b_DResLocID_c 0059  
                        timer_init@ui8_TmrNb 0029                             __end_of_ADC_Init 1D7D  
                           __end_of_ADC_Read 1EB7                             __end_of_ADC_Wait 1DFF  
                                       start 0026                              _ui8_sampleState 0162  
                           __end_of_BLDCWait 1E71                       __size_of_PWM_Write_Out 0008  
                         _ui16_comm_time_max 0127                                        S11835 1194  
                                      S11837 1868                                  i1_commutate 0926  
                              ?_InitMotorRun 0070                              __end_of_Task1ms 1D49  
                        _ui16_duty_cycle_mat 01BA                         _Error_PICetatMonitor 0158  
                              __CFG_PLLEN$ON 0000                                        l11001 1676  
                                      l11013 16B5                                        l11023 16C8  
                                      l11009 16AE                                        l11017 16BB  
                                      l10701 12CE                                        l10711 12F4  
                                      l10703 12DB                                        l10715 12FE  
                                      l11621 16D6                                        l11709 17F8  
                                      l11833 0E80                                        l11681 17BE  
                                      l11679 17BB                                        l11699 17F0  
                                      _C1OUT 088E                              __end_of___aldiv 157A  
                                      ?_main 0070                                        ?_sign 0028  
                                      _EEPGD 0CAF                                        _T1CON 0018  
                                      _T2CON 001C                                        _LATB1 0869  
                                      _LATB2 086A                                        _LATC0 0870  
                                      _LATC1 0871                                        _LATC2 0872  
                                      _LATC3 0873                                _InitMotorStop 1D8A  
                                      _LATC4 0874                                        _T4CON 0417  
                            __end_of___ltdiv 1305                                        _T6CON 041E  
                            __end_of___lwdiv 11DC                                        i1l316 0D80  
                                      i1l327 0A04                                        i1l263 0B78  
                                      i1l345 0A43                                        i1l354 0B3C  
                                      i1l267 0D28                                        i1l284 0C16  
                                      _TMR1H 0017                                        _TMR1L 0016  
                          _ui8_BlankingCount 00DD                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
                        ___lmul@multiplicand 002C                            _ui16_PWM_Freq_mat 01B8  
   BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00C0                             __end_of_PWM_CTRL 1DCD  
               ?_Cb56_UbatHandling_node_fcn2 0070                             __end_ofi1___wmul 1E34  
                                      sign@x 0028            BVH2_Appl_Layer@Cb24_oMotorStalled 00BE  
                                      status 0003                             __end_of_DiagInit 1D8A  
                        i1___wmul@multiplier 0070                                        wtemp0 007E  
                         __size_of_PWMReadDC 00AE               ??_Cb34_PWM_Detection_node_fcn1 0028  
                        _ui16_Task_Cont500ms 0268                          __size_ofi1_ADC_Read 001A  
                        __size_ofi1_ADC_Wait 0019                               __CFG_MCLRE$OFF 0000  
                         _ui8_b_DResServID_c 0160                              __initialization 0028  
                           _ui8_selected_lid 005E                  BVH2_Appl_Layer@Cb51_Counter 00C4  
                BVH2_Appl_Layer@Cb19_Counter 00A2                                  _system_init 134E  
                               _cBEMF_FILTER 1800                                 __end_of_main 1800  
                             ??_InitMotorRun 0034                                 __end_of_sign 1E94  
                            _PWM_trans_table 1000                         __size_of_clear_timer 0023  
                       _ui16_duty_cycle_BLDC 00B0                          __ELINMIntMessageTag 0154  
                             ?_InitMotorStop 0070                                       ??_main 0047  
                                     ??_sign 002A                         __size_of_FILTER_Init 0024  
                       __size_of_FILTER_Ubat 0078                         __size_of_FILTER_Temp 003A  
                          ?_read_eeprom_data 0070                         _ui8_temp_calibration 0167  
                       _BVH2_Appl_Layer$1060 02AE                         _BVH2_Appl_Layer$1061 02AF  
                       _BVH2_Appl_Layer$1056 02AA                         _BVH2_Appl_Layer$1064 02A4  
                       _BVH2_Appl_Layer$1057 02AB                         _BVH2_Appl_Layer$1058 02AC  
                       _BVH2_Appl_Layer$1066 02A6                         _BVH2_Appl_Layer$1059 02AD  
                       _BVH2_Appl_Layer$1067 02A0                         _interrupt_PWMCapture 1397  
                          ?_Get_Analog_Value 0070                  _ui16_NTC_Temp_bldc_mean_cal 01C0  
                         ??_read_eeprom_data 0028                                _PWM_Write_Out 1D62  
                                     _ADCON0 009D                           ??_Get_Analog_Value 0034  
                                     _ADCON1 009E                                       _CCP1AS 0295  
                                     _CCP1IE 048A                                       _CCP1IF 008A  
                                     _CCP2IE 0490                                       _CCP2IF 0090  
                                     _CCP3IE 049C                                       _CCP3IF 009C  
                                     _CCP4IE 049D                                       _CCP4IF 009D  
                                     _CCP5IE 049E                                       _CCP5IF 009E  
                                     _ADRESH 009C                                       _ADRESL 009B  
                                     _EEADRL 0191                                       _CCPR1H 0292  
                                     _CCPR2H 0299                                       _CCPR3H 0312  
                                     _CCPR1L 0291                                       _CCPR4H 0319  
                                     _CCPR2L 0298                                       _EEDATL 0193  
                                     _CCPR3L 0311                                       _CCPR5H 031D  
                                     _CCPR4L 0318                                       _CCPR5L 031C  
                                     _EECON2 0196                                    ADC_Read@i 002B  
                                     _ANSELA 018C                                       _ANSELB 018D  
                           ?_interrrupt_bldc 0070                                ?_SetDiagAlarm 0070  
                                     i1l1195 1398                                       i1l1198 13BF  
                                     i1l1861 1E21                                       i1l6301 09D9  
                           _bl_Pumpoff_Alarm 01DB                                       i1l6303 09DF  
                                     i1l6401 0AB1                                       i1l6305 09EF  
                                     i1l6243 1E0B                                       i1l6315 0A0A  
                                     i1l6251 0932                                       i1l6333 0A4F  
                                     i1l6317 0A16                                       i1l6309 09FB  
                                     i1l6431 0AE0                                       i1l6407 0ABC  
                                     i1l6327 0A41                                       i1l6425 0AD5  
                                     i1l6281 09CC                                       i1l6363 0A7C  
                                     i1l6339 0A5A                                       i1l6291 09D9  
                                     i1l6283 09CE                                       i1l6381 0A90  
                                     i1l6357 0A71                                       i1l6293 09D9  
                                     i1l6285 09D3                                       i1l6277 09C2  
                                     i1l6455 0B04                                       i1l6295 09D9  
                                     i1l6287 09D5                                       i1l6279 09C4  
                                     i1l6481 0B3F                                       i1l6449 0AF9  
                                     i1l6297 09D9                                       i1l6289 09D7  
                                     i1l6387 0A9B                                       i1l6299 09D9  
                                     i1l6469 0B1E                                       i1l6477 0B28  
                            _ui8_PWM_FreqCnt 00CD                                       i1l6839 1DC4  
                                     i1l6847 13AA                                       i1l6863 13FA  
                                     i1l6859 13F7                                       i1l8813 11CE  
                                     i1l8805 11B0                                       i1l8807 11BC  
                                     _INTCON 000B                                       i1l8817 11D7  
                                     _FVRCON 0117                           _ui8_Task_Cont100ms 00CE  
                                     u362_25 09AE                                       u367_25 0A38  
                                     _OSCCON 0099                ??_Cb56_UbatHandling_node_fcn2 0028  
                                     u675_25 11B3                      _ui16_CPU_Temp_bldc_mean 01C6  
                                     _TMR0IE 005D                                       _TMR1IE 0488  
                                     _TMR1IF 0088                                       u677_25 11BD  
                                     _TMR2IE 0489                                       _TMR2IF 0089  
                                     u678_25 11C7                                       u950_25 0C3F  
                                     _TMR4IE 0499                                       _TMR4IF 0099  
                                     u679_25 11CF                                       u951_25 0C78  
                                     _TMR6IE 049B                                       _TMR6IF 009B  
                                     _TMR2ON 00E2                                       u936_25 1E22  
                                     u952_25 0CB1                                       _TMR4ON 20BA  
                                     u937_25 1E27                                       _TMR6ON 20F2  
                                     u946_25 0BD7                                       u939_25 0B56  
                                     _WDTCON 0097         BVH2_Appl_Layer@Sb1_Logical_Operator1 02BC  
       BVH2_Appl_Layer@Sb1_Logical_Operator2 02B5         BVH2_Appl_Layer@Sb1_Logical_Operator3 02BD  
       BVH2_Appl_Layer@Sb1_Logical_Operator5 02B6                                    ??_Task1ms 0070  
                        _DC_pic_etat_monitor 0157                                   _MotorFlags 005A  
 BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C                       __ELINMIntMessageBuffer 02C0  
                                     ___lmul 1F9B                                    ??___aldiv 0030  
                                     ___tmul 1F22                                       ___wmul 1E34  
                  BVH2_Appl_Layer@Sb4_PI_sum 02BE                                    ??___ltdiv 0037  
                                  ??___lwdiv 0074                              _ui8_PWMinDC_sav 00CC  
                               _Debounce_Tmr 01A6            BVH2_Appl_Layer@Cb24_oStalledAlarm 0133  
                          __end_of_PWMReadDC 16CD                        ?_interrupt_PWMCapture 0070  
                                  ?_ADC_Init 0070                                    ?_ADC_Read 0028  
                                  ?_ADC_Wait 0070                             _ui16_UPhase_bldc 01D6  
                             ?_PWM_Write_Out 0070                                    ?_BLDCWait 0070  
                   __size_of_BVH2_Appl_Layer 077F                               ??_SetDiagAlarm 002A  
           BVH2_Appl_Layer@Cb9_oCurrentAlarm 012F                      __end_of__initialization 0074  
                         _ui16_CPU_Temp_bldc 025C                        __end_of_FILTER_IPhase 1210  
                    __end_of_PWM_trans_table 1194                               __pcstackCOMMON 0070  
                            _ui8_PWMoutvalue 0143                                 __pidataBANK0 0003  
                               __pidataBANK1 1D5B                                 __pidataBANK2 1D6A  
                         _ui16_dryRun_Thresh 026C                              ??_InitMotorStop 0028  
       __size_of_Cb56_UbatHandling_node_fcn2 0049                                    ?_PWM_CTRL 0070  
                               ??i1_ADC_Read 0072                                    ?i1___wmul 0070  
                               ??i1_ADC_Wait 0070                     _ui8_lin_sim_Failures_ena 0159  
                                  ?_DiagInit 0070                            _Cb1_oCurrentAlarm 0140  
                                 ??_ADC_Init 0028                                   ??_ADC_Read 002A  
                                 ??_ADC_Wait 0028                        _ui16_Speed_demand_mat 01B0  
                                 ??_BLDCWait 0070                  __end_of_Oscill_Source_Block 1D4F  
                  __size_of_PWM_Capture_init 0057                         __ELINMIntMessageSize 0151  
                         _ui16_Duty_Cycle_In 01EB                                 _analog_value 00BC  
                       __end_of_InitMotorRun 1FFE                           __size_of_commutate 025C  
                                 __pbssBANK0 004B                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01A0  
                                 __pbssBANK4 0220                                   __pbssBANK5 02C0  
                    _ui8_Duty_Cycle_In_Ratio 0141                           __size_of_init_bldc 0028  
                       _bool_ControlLoopMode 00CF                           __end_ofi1_ADC_Read 1E19  
                         __end_ofi1_ADC_Wait 1DE6                                   __pmaintext 16CD  
                                    ?___lmul 0028                              _Cb34_oPWM_Alarm 013E  
                                    ?___tmul 0028                                      ?___wmul 0028  
                               ?i1_commutate 0070                                   __pintentry 0004  
                                    _CM1CON0 0111                                      _CM1CON1 0112  
                                    _CCP1ASE 14AF                                      _CCP1CON 0293  
                                    _CCP2CON 029A                                      _CCP3CON 0313  
                                    i1S11843 1854                                      i1S11839 1840  
                                    _CCP4CON 031A      __end_of_Cb1_Current_An___High_node_fcn1 1F9B  
   __size_of_Cb1_Current_An___High_node_fcn1 002A            ??_Cb1_Current_An___High_node_fcn1 0028  
           ?_Cb1_Current_An___High_node_fcn1 0070              _Cb1_Current_An___High_node_fcn1 1F71  
                                    _CCP5CON 031E                        _bool_CPU_TempRedAlarm 014A  
                             ___lmul@product 0030                                   ??_PWM_CTRL 0070  
                              rate_limit@pwm 002E                                   ??i1___wmul 0074  
                     ??_interrupt_PWMCapture 0070                                 _ui8_CMD_Mode 01DC  
                                 _ui8_Ki_mat 01B2                              ??_PWM_Write_Out 0028  
                                 _ui8_Kp_mat 014C                                      i1l10721 1E1B  
                                    i1l10803 0BAE                                      i1l11611 0021  
                                    i1l11603 0019                                      i1l10901 0CDD  
                                    i1l10741 0B65                                      i1l10903 0CDE  
                                    i1l10823 0BDB                                      i1l10751 0B7C  
                                    i1l10913 0D00                                      i1l10905 0CEB  
                                    i1l10841 0BF2                                      i1l10833 0BE3  
                                    i1l10745 0B6F                                      i1l10737 0B5B  
                                    i1l10907 0CF3                                      i1l10763 0B8F  
                                    i1l10925 0D13                                      i1l10951 0D59  
                                    i1l10863 0C15                                      i1l11841 09E5  
                                    i1l10961 0D6F                                      i1l10865 0C15  
                                    i1l10857 0C0F                                      i1l10929 0D1A  
                                    i1l10955 0D63                                      i1l10883 0C34  
                                    i1l10867 0C15                                      i1l10981 0D9B  
                                    i1l10957 0D69                                      i1l10893 0CA2  
                                    i1l10877 0C29                                      i1l11597 0012  
                                    i1l10959 0D6D                                      i1l10895 0CA6  
                                    i1l10887 0C69                                      i1l10889 0C6D  
                                    i1l10979 0D95                                      i1l10899 0CDB  
                                 ??_DiagInit 002A                                      _PWM1CON 0294  
                        rate_limit@delta_pwm 003A                                   _comm_state 00DE  
                BVH2_Appl_Layer@Cb9_StateCnt 00C3                            ??_BVH2_Appl_Layer 0037  
                  _ui16_Speed_demand_mat_Max 01AE                    _ui16_Speed_demand_mat_min 01AC  
                                    _Task1ms 1D43                                 ?_system_init 0070  
                                    ___aldiv 14F8                                 _ui8_DebugCnt 01DF  
                         _ui16_PWMin_failCnt 01AA                      BVH2_Appl_Layer@Sb3_Sum1 02BA  
                            __size_of___lmul 0030                              __size_of___tmul 0027  
                            __size_of___wmul 001C                                      ___ltdiv 12C0  
                                    ___lwdiv 11A8                         __end_of_SetDiagAlarm 1247  
                          __end_of_commutate 1000                                 _ui8_CompFlag 00DA  
                                 _init_ports 1DA7                                      __ptext1 134E  
                                    __ptext2 1281                                      __ptext3 1EB7  
                                    __ptext4 1DA7                                      __ptext5 1F49  
                                    __ptext6 1FCB                                      __ptext7 0DA4  
                                    __ptext8 0805                                      __ptext9 1D49  
                          _ui16_CMD_Mode_Tmr 024A                          _phase_delay_counter 00B8  
                                    _filter1 01C4                                      _filter3 012D  
                          __end_of_init_bldc 1F71                            _bool_mat_pic_etat 00CB  
                              _ui16_Temp_cal 01D0                             ___aldiv@dividend 002C  
                 BVH2_Appl_Layer@Sb2_Switch2 02A8                   BVH2_Appl_Layer@Sb2_Switch5 02B8  
                             __ELINMIntRXCRC 0258                                      _pwm_cmd 0144  
                                    clrloop0 1D50                                      _wkpoint 00EE  
                                 _rate_limit 147F                         end_of_initialization 0074  
                             __ELINMIntSpace 014D           BVH2_Appl_Layer@SIBFS_Dry_Running_b 00C1  
       BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0                       __ELINMIntRXMessageSize 0150  
                                    init_ram 1D55                                      initloop 1D56  
                       _ui16_fir_IPhase_mean 01CC                    __size_of_read_eeprom_data 000F  
                  __size_of_Get_Analog_Value 0009                             ___ltdiv@dividend 0034  
                           __CFG_CLKOUTEN$ON 0000                                ??_clear_timer 0028  
                           ___aldiv@quotient 0033              read_eeprom_data@ui8_adress_data 002A  
                          _prev_Debounce_Tmr 01A4                        i1___wmul@multiplicand 0072  
                              ??_FILTER_Init 002C                                ??_FILTER_Ubat 0028  
                              ??_FILTER_Temp 0028                         _Cb56_odFixedValueSel 00C6  
                          _FCT_STAMP_ABSENCE 01E9                                   _timer_init 1281  
             PWM_Write_Out@ui8_DutyCycle_Out 0029                        _ui16_IPhase1_bldc_cal 00E6  
                     rate_limit@sign_pwm_inc 0038                  _ui16_CPU_Temp_bldc_mean_cal 026A  
                      _ui16_IPhase2_bldc_cal 00E4                             __CFG_FOSC$INTOSC 0000  
                      __size_of_InitMotorRun 0033                          _ui16_Current_Thresh 01ED  
                           _LIN_DEACTIVATION 01E2                             _PWM_Capture_init 0805  
                           ___ltdiv@quotient 0038                                    _PWMReadDC 161F  
                      _ui16_IPhase3_bldc_cal 00E2                            __size_of_ADC_Init 000B  
                          __size_of_ADC_Read 0023                                _ui16_step_cnt 00BA  
                          __size_of_ADC_Wait 0019                            __size_of_BLDCWait 0021  
                         _ICT_STAMP_PRESENCE 01EA                                   _windowPtr1 00E1  
                           _ui8_BattVolt_mat 00AE                            _FCT_STAMP_WRITING 01E3  
                  _phase_delay_counter_debug 0264         BVH2_Appl_Layer@Sb2_Logical_Operator2 02B7  
                   __size_of_interrrupt_bldc 025C                            __ELINMIntReadBack 014F  
                        _ui8_lin_calibration 01E1                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 1FCB                               __end_of___lmul 1FCB  
                     _ui16_phase_advancement 00B6                               __end_of___tmul 1F49  
                             __end_of___wmul 1E50                                  ?_init_ports 0070  
                       __size_ofi1_commutate 0222                          __end_of_clear_timer 1EDA  
                              __pbitbssBANK0 02E8                            __size_of_PWM_CTRL 0016  
                                i1ADC_Read@i 0073                          start_initialization 0028  
                          __size_ofi1___wmul 001B                          __end_of_FILTER_Init 1F22  
                             _bool_PIC_Alarm 01DA                          __end_of_FILTER_Ubat 147F  
                        __end_of_FILTER_Temp 1281                            __size_of_DiagInit 000D  
                                 ?_PWMReadDC 0070          __end_of_Cb56_UbatHandling_node_fcn2 134E  
                _Cb56_UbatHandling_node_fcn2 1305                                  ?_rate_limit 002E  
                             _ui8_IPhase_sel 00DC                                 _Cb1_StateCnt 004D  
                    rate_limit@abs_delta_pwm 0034                          _CURRENT_CALIBRATION 01E5  
                              _SPEED_READING 01E4                        __size_of_SetDiagAlarm 0037  
                    _ui16_NTC_Temp_bldc_mean 01C8                               _ui8_PWM_dc_mat 00D1  
                                   ??___lmul 0030                                     ??___tmul 002E  
                                   ??___wmul 002C                                  __pdataBANK0 005E  
                                __pdataBANK1 00E8                                  __pdataBANK2 0168  
                 read_eeprom_data@ui8_adress 0029                         __size_of_system_init 0049  
                          rate_limit@pwm_inc 0036                                 _Cb1_oShutoff 013F  
                                _bemf_filter 0165                                  ?_timer_init 0070  
                             ___tmul@product 002E                        __end_of_InitMotorStop 1D98  
                     __size_of_FILTER_IPhase 0034                              _ui8_Pulse_State 0142  
                                  ___latbits 0002                              _BVH2_Appl_Layer 0078  
                              __pcstackBANK0 0020                                __pcstackBANK5 02A0  
                     _ui16_fir_UPhase_mittel 01CA                            _bool_MotorStalled 00D6  
                       _ui8_lin_sim_Failures 015A                                 _SetDiagAlarm 1210  
                           _BlankingCountdbg 0164                     _VER_SUPPLY_VOLTAGE_VALUE 01E6  
               __size_of_Oscill_Source_Block 0006                          __size_of_init_ports 0010  
                                  _ui16_wait 024C                             _read_eeprom_data 1D98  
                                  __pnvBANK1 00EF                                    __pnvBANK3 01ED  
                                  __pnvBANK4 026C               BVH2_Appl_Layer@Cb51_oTempAlarm 0132  
                           _Get_Analog_Value 07F7                                     ?_Task1ms 0070  
                           ___lwdiv@dividend 0072                                  _clear_timer 1EB7  
                                   ?___aldiv 0028                                     ?___ltdiv 0031  
                                   ?___lwdiv 0070                        _bool_HighCurrentAlarm 00D5  
                       clear_timer@ui8_TmrNb 0028                          __size_of_rate_limit 0079  
                          ??_interrrupt_bldc 0020                _SIBFS_Current_Analysis_High_b 00C9  
                             _ui8_UPhase_sel 00DB                               _bool_UbatAlarm 0149  
                                _FILTER_Init 1EFE                                  _FILTER_Ubat 1407  
                                _FILTER_Temp 1247                            _ui8_Sync_Cont10ms 01E0  
                                  _comm_time 0053                                    __pswtext1 1194  
                                  __pswtext2 1868                                    __pswtext3 1840  
                                  __pswtext4 1854                                    _ui8_i_wob 01DE  
                         _Cb34_oPWM_SC_Alarm 013D                                _CompFlag_prev 0161  
                          _interrupt_handler 0004                                    _ict_stamp 016F  
                            _ui16_Ubemf_bldc 00B4                                    _commutate 0DA4  
                      _SIBFS_PWM_Detection_b 00C8                                     _ADC_Init 1D72  
                                   _ADC_Read 1E94                __size_of_interrupt_PWMCapture 0070  
                       _bool_DryRunningAlarm 00D7                                     _ADC_Wait 1DE6  
                         ?_interrupt_handler 0070                        __end_of_PWM_Write_Out 1D6A  
                                   _BLDCWait 1E50                                  ??_PWMReadDC 003C  
                           __CFG_WDTE$SWDTEN 0000                            _I_calibrationInit 085C  
                           ___lwdiv@quotient 0075                                    _init_bldc 1F49  
    BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 0055                           ?_I_calibrationInit 0070  
                        ??_interrupt_handler 007C                        _Cb56_oUbat_Alarm_High 0137  
                                _Cb44_oAlarm 0139                              ___aldiv@divisor 0028  
                            ___aldiv@counter 0031                               ___wmul@product 002C  
                            _ui16_Timer_VaL1 024E                          __size_of_timer_init 003F  
                                  clear_ram0 1D4F                                _FILTER_IPhase 11DC  
                        ??_I_calibrationInit 002C                              ___ltdiv@divisor 0031  
                             _Cb34_odPumpOff 013A                              ___ltdiv@counter 003B  
                                   _GO_nDONE 04E9                     __end_of_PWM_Capture_init 085C  
                                _ui8_failure 016E                                  _ui8_cnt_PWM 0155  
                                   _PSTR1CON 0296                    __end_of_interrupt_handler 0026  
                    __end_of_BVH2_Appl_Layer 07F7                                     _PWM_CTRL 1DB7  
                             _ui8_b_DResB0_c 0058                               _ui8_b_DResB1_c 015F  
                             _ui8_b_DResB2_c 015E                               _ui8_b_DResB3_c 015D  
                             _ui8_b_DResB4_c 015C                               _ui8_b_DResB5_c 015B  
                          ___wmul@multiplier 0028                                     i1___wmul 1E19  
                                 ?_commutate 0070                      interrrupt_bldc@ui32_tmp 0024  
                                   _DiagInit 1D7D                    __end_of_I_calibrationInit 0926  
                        ___tmul@multiplicand 002B                          _ui16_fir_Bat_mittel 01CE  
                  _ui8_fixed_start_speed_mat 01BE                        __ELINMIntSleepTimeout 0246  
                   _ui16_ambiant_temperature 025A                                   ?_init_bldc 0070  
                          ___lmul@multiplier 0028                               _ui16_Capt_Val0 00AA  
                             _ui16_Capt_Val1 00A8                               _ui16_Capt_Val2 00A6  
                             _ui16_I_cal_Ph1 00EC                               _ui16_I_cal_Ph2 00EA  
                             _ui16_I_cal_Ph3 00E8                             __ELINMIntStatus1 0152  
                             ?_FILTER_IPhase 0070                           _bool_CPU_TempAlarm 00D8  
                           _ui16_mat_Current 00AC                             __size_of_Task1ms 0006  
                       _SIBFS_UbatHandling_b 0057                      _Cb34_odFixedLowValueSel 013C  
                   BVH2_Appl_Layer@Sb2_Error 02B0                             __size_of___aldiv 0082  
              BVH2_Appl_Layer@Cb19_oDryRun55 0135                BVH2_Appl_Layer@Cb19_oDryRun66 0134  
                           __size_of___ltdiv 0045                              _Sb2_Fixed_Power 1878  
                           __size_of___lwdiv 0034                                 ??_init_ports 0028  
                          _ui8_lastTaskvalue 0145                             _ui16_mat_inpTemp 01B4  
                             _ui8_StartupPWM 00DF                         _bool_PWMin_err_Alarm 014B  
              __ELINMIntMessageBufferPointer 014E                                     _checksum 0240  
                         _Cb1_RestartCounter 00CA             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00BF  
                         _ui16_NTC_Temp_bldc 01D2                              ___lwdiv@divisor 0070  
                             _Cb56_odPumpOff 0136                              ___lwdiv@counter 0077  
                                   __ptext10 085C                                     __ptext11 1D98  
                                   __ptext20 1D62                                     __ptext12 1EFE  
                                   __ptext21 161F                                     __ptext13 1DE6  
                                   __ptext30 1E34                                     __ptext22 1F22  
                                   __ptext14 1E94                                     __ptext31 1F9B  
                                   __ptext23 12C0                                     __ptext15 1D7D  
                                   __ptext40 0926                                     __ptext32 14F8  
                                   __ptext24 1D8A                                     __ptext16 1D72  
                                   __ptext41 1E19                                     __ptext33 1305  
                                   __ptext25 07F7                                     __ptext17 147F  
                                   __ptext42 1DCD                                     __ptext34 1EDA  
                                   __ptext26 1407                                     __ptext18 1E71  
                                   __ptext43 1DFF                                     __ptext35 157A  
                                   __ptext27 1247                                     __ptext19 1210  
                                   __ptext44 11A8                                     __ptext36 1F71  
                                   __ptext28 11DC                                     __ptext45 1E50  
                                   __ptext29 0078                                     __ptext46 1D43  
                                   __ptext38 1397                                     __ptext47 1DB7  
                                   __ptext39 0B48                                 ??_rate_limit 0030  
                                   _ui8_cnt1 0156                               _ui16_Ubat_bldc 005B  
                                   _filterPh 012B                      _bool_mat_currAlarm_bldc 00D0  
               BVH2_Appl_Layer@Cb14_StateCnt 01A2                                _Cb44_StateCnt 00A4  
              BVH2_Appl_Layer@Cb51_odPumpOff 0130                                     _last_pwm 0123  
                              __size_of_main 0133                                __size_of_sign 0023  
                                 _Cb34_idPWM 0056                                     _phaseCal 00D4  
                         __end_of_init_ports 1DB7                                  _inputArray1 0230  
                             _ui16_Speed_mat 004F                 BVH2_Appl_Layer@Cb24_StateCnt 004B  
                                   _prev_RA4 01A8                  BVH2_Appl_Layer@Sb3_Product1 02B2  
                              ??i1_commutate 0070                                     int$flags 007E  
                   rate_limit@sign_delta_pwm 0032            BVH2_Appl_Layer@Cb51_oTempRedAlarm 0131  
                              _ui8_Ubemf_sel 0163                                _Cb44_oShutoff 0138  
                             _ui8_calib_flag 01DD                   __size_of_interrupt_handler 0022  
                           ?_BVH2_Appl_Layer 0070                           __end_of_rate_limit 14F8  
                               ??_timer_init 0029                             _ui16_phase_angle 0262  
                        _Oscill_Source_Block 1D49                                   i1_ADC_Read 1DFF  
                                 i1_ADC_Wait 1DCD                                  ??_commutate 0028  
                            __ELINMIntStatus 0153                     __end_of_read_eeprom_data 1DA7  
                   __end_of_Get_Analog_Value 0800                   __size_of_I_calibrationInit 00CA  
                           _ui8_given_supply 00D3      __end_of_Cb44_Pic_etat_monitor_node_fcn1 1EFE  
   __size_of_Cb44_Pic_etat_monitor_node_fcn1 0024            ??_Cb44_Pic_etat_monitor_node_fcn1 0028  
           ?_Cb44_Pic_etat_monitor_node_fcn1 0070              _Cb44_Pic_etat_monitor_node_fcn1 1EDA  
                          _ui8_zero_cros_cnt 0266                               _ui8_debug_out0 01D8  
       __end_of_Cb34_PWM_Detection_node_fcn1 161F        __size_of_Cb34_PWM_Detection_node_fcn1 00A5  
               _Cb34_PWM_Detection_node_fcn1 157A                         __end_of_cBEMF_FILTER 1840  
                                ??_init_bldc 0034                                     intlevel1 0000  
                           _rising_bemf_flag 02E8                              ??_FILTER_IPhase 0028  
                  _bool_PWMin_Freq_err_Alarm 0148                        _VER_SW_VERSION_NUMBER 01E7  
                       ?_Oscill_Source_Block 0070                              _interrrupt_bldc 0B48  
                         __end_of_timer_init 12C0                      __end_of_Sb2_Fixed_Power 187A  
                               ?_clear_timer 0070                        _bool_start_demand_mat 0166  
                              ??_system_init 0035                   PWM_Capture_init@ui8_CCP_Nb 0028  
                          ___tmul@multiplier 0028                      _TEMPERATURE_CALIBRATION 01E8  
                               ?_FILTER_Init 0070                                 ?_FILTER_Ubat 0070  
                               ?_FILTER_Temp 0070                        _bool_StalledMotorStop 01D9  
                              __pstringtext1 1000                                __pstringtext2 1800  
                              __pstringtext3 1878                                   _OPTION_REG 0095  
                        __end_ofi1_commutate 0B48                                 ___aldiv@sign 0032  
BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016D                ?_Cb34_PWM_Detection_node_fcn1 0070  
         BVH2_Appl_Layer@Cb24_RestartCounter 00C5                        ??_Oscill_Source_Block 0028  
                       _Cb34_odFixedValueSel 013B                              _ui8_error_Flags 00E0  
                            _ui8_current_cal 0120                       __size_of_InitMotorStop 000E  
               __end_of_interrupt_PWMCapture 1407                               _ui16_speed_fil 00B2  
                             _ui16_speed_rar 01BC                                _filterTempCPU 01C2  
                              _filterTempNTC 0129  
