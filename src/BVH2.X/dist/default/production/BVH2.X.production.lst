

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Apr 17 17:24:29 2023

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext1,local,class=CONST,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	swtext2,local,class=CONST,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	intentry,global,class=CODE,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	swtext3,local,class=CONST,delta=2
    70                           	psect	text38,local,class=CODE,merge=1,delta=2
    71                           	psect	swtext4,local,class=CONST,delta=2
    72                           	psect	text39,local,class=CODE,merge=1,delta=2
    73                           	psect	text40,local,class=CODE,merge=1,delta=2
    74                           	psect	text41,local,class=CODE,merge=1,delta=2
    75                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text43,local,class=CODE,merge=1,delta=2
    77                           	psect	text44,local,class=CODE,merge=1,delta=2
    78                           	psect	text45,local,class=CODE,merge=1,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 2.00
    82                           ; Generated 27/05/2018 GMT
    83                           ; 
    84                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F1936 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0095                     	;# 
   153  0096                     	;# 
   154  0097                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009A                     	;# 
   158  009B                     	;# 
   159  009B                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  0110                     	;# 
   167  0111                     	;# 
   168  0112                     	;# 
   169  0113                     	;# 
   170  0114                     	;# 
   171  0115                     	;# 
   172  0116                     	;# 
   173  0117                     	;# 
   174  0118                     	;# 
   175  0119                     	;# 
   176  011A                     	;# 
   177  011B                     	;# 
   178  011D                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  0191                     	;# 
   182  0191                     	;# 
   183  0192                     	;# 
   184  0193                     	;# 
   185  0193                     	;# 
   186  0193                     	;# 
   187  0194                     	;# 
   188  0195                     	;# 
   189  0196                     	;# 
   190  0199                     	;# 
   191  019A                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019C                     	;# 
   197  019C                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019F                     	;# 
   201  020D                     	;# 
   202  0210                     	;# 
   203  0211                     	;# 
   204  0212                     	;# 
   205  0213                     	;# 
   206  0214                     	;# 
   207  0215                     	;# 
   208  0215                     	;# 
   209  0216                     	;# 
   210  0217                     	;# 
   211  0291                     	;# 
   212  0291                     	;# 
   213  0292                     	;# 
   214  0293                     	;# 
   215  0294                     	;# 
   216  0295                     	;# 
   217  0295                     	;# 
   218  0296                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029B                     	;# 
   224  029C                     	;# 
   225  029C                     	;# 
   226  029D                     	;# 
   227  029E                     	;# 
   228  029F                     	;# 
   229  0311                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0314                     	;# 
   234  0315                     	;# 
   235  0315                     	;# 
   236  0316                     	;# 
   237  0318                     	;# 
   238  0318                     	;# 
   239  0319                     	;# 
   240  031A                     	;# 
   241  031C                     	;# 
   242  031C                     	;# 
   243  031D                     	;# 
   244  031E                     	;# 
   245  0394                     	;# 
   246  0395                     	;# 
   247  0396                     	;# 
   248  0415                     	;# 
   249  0416                     	;# 
   250  0417                     	;# 
   251  041C                     	;# 
   252  041D                     	;# 
   253  041E                     	;# 
   254  0791                     	;# 
   255  0792                     	;# 
   256  0793                     	;# 
   257  0794                     	;# 
   258  0795                     	;# 
   259  0798                     	;# 
   260  0799                     	;# 
   261  07A0                     	;# 
   262  07A1                     	;# 
   263  07A3                     	;# 
   264  07A4                     	;# 
   265  07A6                     	;# 
   266  07A7                     	;# 
   267  07A9                     	;# 
   268  07AA                     	;# 
   269  0FE4                     	;# 
   270  0FE5                     	;# 
   271  0FE6                     	;# 
   272  0FE7                     	;# 
   273  0FE8                     	;# 
   274  0FE9                     	;# 
   275  0FEA                     	;# 
   276  0FEB                     	;# 
   277  0FED                     	;# 
   278  0FEE                     	;# 
   279  0FEF                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000D                     	;# 
   294  000E                     	;# 
   295  0010                     	;# 
   296  0011                     	;# 
   297  0012                     	;# 
   298  0013                     	;# 
   299  0015                     	;# 
   300  0016                     	;# 
   301  0016                     	;# 
   302  0017                     	;# 
   303  0018                     	;# 
   304  0019                     	;# 
   305  001A                     	;# 
   306  001B                     	;# 
   307  001C                     	;# 
   308  001E                     	;# 
   309  001F                     	;# 
   310  008C                     	;# 
   311  008D                     	;# 
   312  008E                     	;# 
   313  0090                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0098                     	;# 
   321  0099                     	;# 
   322  009A                     	;# 
   323  009B                     	;# 
   324  009B                     	;# 
   325  009C                     	;# 
   326  009D                     	;# 
   327  009E                     	;# 
   328  010C                     	;# 
   329  010D                     	;# 
   330  010E                     	;# 
   331  0110                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  011A                     	;# 
   342  011B                     	;# 
   343  011D                     	;# 
   344  018C                     	;# 
   345  018D                     	;# 
   346  0191                     	;# 
   347  0191                     	;# 
   348  0192                     	;# 
   349  0193                     	;# 
   350  0193                     	;# 
   351  0193                     	;# 
   352  0194                     	;# 
   353  0195                     	;# 
   354  0196                     	;# 
   355  0199                     	;# 
   356  019A                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019C                     	;# 
   363  019D                     	;# 
   364  019E                     	;# 
   365  019F                     	;# 
   366  020D                     	;# 
   367  0210                     	;# 
   368  0211                     	;# 
   369  0212                     	;# 
   370  0213                     	;# 
   371  0214                     	;# 
   372  0215                     	;# 
   373  0215                     	;# 
   374  0216                     	;# 
   375  0217                     	;# 
   376  0291                     	;# 
   377  0291                     	;# 
   378  0292                     	;# 
   379  0293                     	;# 
   380  0294                     	;# 
   381  0295                     	;# 
   382  0295                     	;# 
   383  0296                     	;# 
   384  0298                     	;# 
   385  0298                     	;# 
   386  0299                     	;# 
   387  029A                     	;# 
   388  029B                     	;# 
   389  029C                     	;# 
   390  029C                     	;# 
   391  029D                     	;# 
   392  029E                     	;# 
   393  029F                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0314                     	;# 
   399  0315                     	;# 
   400  0315                     	;# 
   401  0316                     	;# 
   402  0318                     	;# 
   403  0318                     	;# 
   404  0319                     	;# 
   405  031A                     	;# 
   406  031C                     	;# 
   407  031C                     	;# 
   408  031D                     	;# 
   409  031E                     	;# 
   410  0394                     	;# 
   411  0395                     	;# 
   412  0396                     	;# 
   413  0415                     	;# 
   414  0416                     	;# 
   415  0417                     	;# 
   416  041C                     	;# 
   417  041D                     	;# 
   418  041E                     	;# 
   419  0791                     	;# 
   420  0792                     	;# 
   421  0793                     	;# 
   422  0794                     	;# 
   423  0795                     	;# 
   424  0798                     	;# 
   425  0799                     	;# 
   426  07A0                     	;# 
   427  07A1                     	;# 
   428  07A3                     	;# 
   429  07A4                     	;# 
   430  07A6                     	;# 
   431  07A7                     	;# 
   432  07A9                     	;# 
   433  07AA                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000D                     	;# 
   459  000E                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  0090                     	;# 
   479  0091                     	;# 
   480  0092                     	;# 
   481  0093                     	;# 
   482  0095                     	;# 
   483  0096                     	;# 
   484  0097                     	;# 
   485  0098                     	;# 
   486  0099                     	;# 
   487  009A                     	;# 
   488  009B                     	;# 
   489  009B                     	;# 
   490  009C                     	;# 
   491  009D                     	;# 
   492  009E                     	;# 
   493  010C                     	;# 
   494  010D                     	;# 
   495  010E                     	;# 
   496  0110                     	;# 
   497  0111                     	;# 
   498  0112                     	;# 
   499  0113                     	;# 
   500  0114                     	;# 
   501  0115                     	;# 
   502  0116                     	;# 
   503  0117                     	;# 
   504  0118                     	;# 
   505  0119                     	;# 
   506  011A                     	;# 
   507  011B                     	;# 
   508  011D                     	;# 
   509  018C                     	;# 
   510  018D                     	;# 
   511  0191                     	;# 
   512  0191                     	;# 
   513  0192                     	;# 
   514  0193                     	;# 
   515  0193                     	;# 
   516  0193                     	;# 
   517  0194                     	;# 
   518  0195                     	;# 
   519  0196                     	;# 
   520  0199                     	;# 
   521  019A                     	;# 
   522  019B                     	;# 
   523  019B                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019C                     	;# 
   527  019C                     	;# 
   528  019D                     	;# 
   529  019E                     	;# 
   530  019F                     	;# 
   531  020D                     	;# 
   532  0210                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0213                     	;# 
   536  0214                     	;# 
   537  0215                     	;# 
   538  0215                     	;# 
   539  0216                     	;# 
   540  0217                     	;# 
   541  0291                     	;# 
   542  0291                     	;# 
   543  0292                     	;# 
   544  0293                     	;# 
   545  0294                     	;# 
   546  0295                     	;# 
   547  0295                     	;# 
   548  0296                     	;# 
   549  0298                     	;# 
   550  0298                     	;# 
   551  0299                     	;# 
   552  029A                     	;# 
   553  029B                     	;# 
   554  029C                     	;# 
   555  029C                     	;# 
   556  029D                     	;# 
   557  029E                     	;# 
   558  029F                     	;# 
   559  0311                     	;# 
   560  0311                     	;# 
   561  0312                     	;# 
   562  0313                     	;# 
   563  0314                     	;# 
   564  0315                     	;# 
   565  0315                     	;# 
   566  0316                     	;# 
   567  0318                     	;# 
   568  0318                     	;# 
   569  0319                     	;# 
   570  031A                     	;# 
   571  031C                     	;# 
   572  031C                     	;# 
   573  031D                     	;# 
   574  031E                     	;# 
   575  0394                     	;# 
   576  0395                     	;# 
   577  0396                     	;# 
   578  0415                     	;# 
   579  0416                     	;# 
   580  0417                     	;# 
   581  041C                     	;# 
   582  041D                     	;# 
   583  041E                     	;# 
   584  0791                     	;# 
   585  0792                     	;# 
   586  0793                     	;# 
   587  0794                     	;# 
   588  0795                     	;# 
   589  0798                     	;# 
   590  0799                     	;# 
   591  07A0                     	;# 
   592  07A1                     	;# 
   593  07A3                     	;# 
   594  07A4                     	;# 
   595  07A6                     	;# 
   596  07A7                     	;# 
   597  07A9                     	;# 
   598  07AA                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0013                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  001E                     	;# 
   639  001F                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  0090                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0093                     	;# 
   647  0095                     	;# 
   648  0096                     	;# 
   649  0097                     	;# 
   650  0098                     	;# 
   651  0099                     	;# 
   652  009A                     	;# 
   653  009B                     	;# 
   654  009B                     	;# 
   655  009C                     	;# 
   656  009D                     	;# 
   657  009E                     	;# 
   658  010C                     	;# 
   659  010D                     	;# 
   660  010E                     	;# 
   661  0110                     	;# 
   662  0111                     	;# 
   663  0112                     	;# 
   664  0113                     	;# 
   665  0114                     	;# 
   666  0115                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  0118                     	;# 
   670  0119                     	;# 
   671  011A                     	;# 
   672  011B                     	;# 
   673  011D                     	;# 
   674  018C                     	;# 
   675  018D                     	;# 
   676  0191                     	;# 
   677  0191                     	;# 
   678  0192                     	;# 
   679  0193                     	;# 
   680  0193                     	;# 
   681  0193                     	;# 
   682  0194                     	;# 
   683  0195                     	;# 
   684  0196                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019C                     	;# 
   692  019C                     	;# 
   693  019D                     	;# 
   694  019E                     	;# 
   695  019F                     	;# 
   696  020D                     	;# 
   697  0210                     	;# 
   698  0211                     	;# 
   699  0212                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0216                     	;# 
   705  0217                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0294                     	;# 
   711  0295                     	;# 
   712  0295                     	;# 
   713  0296                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  029B                     	;# 
   719  029C                     	;# 
   720  029C                     	;# 
   721  029D                     	;# 
   722  029E                     	;# 
   723  029F                     	;# 
   724  0311                     	;# 
   725  0311                     	;# 
   726  0312                     	;# 
   727  0313                     	;# 
   728  0314                     	;# 
   729  0315                     	;# 
   730  0315                     	;# 
   731  0316                     	;# 
   732  0318                     	;# 
   733  0318                     	;# 
   734  0319                     	;# 
   735  031A                     	;# 
   736  031C                     	;# 
   737  031C                     	;# 
   738  031D                     	;# 
   739  031E                     	;# 
   740  0394                     	;# 
   741  0395                     	;# 
   742  0396                     	;# 
   743  0415                     	;# 
   744  0416                     	;# 
   745  0417                     	;# 
   746  041C                     	;# 
   747  041D                     	;# 
   748  041E                     	;# 
   749  0791                     	;# 
   750  0792                     	;# 
   751  0793                     	;# 
   752  0794                     	;# 
   753  0795                     	;# 
   754  0798                     	;# 
   755  0799                     	;# 
   756  07A0                     	;# 
   757  07A1                     	;# 
   758  07A3                     	;# 
   759  07A4                     	;# 
   760  07A6                     	;# 
   761  07A7                     	;# 
   762  07A9                     	;# 
   763  07AA                     	;# 
   764  0FE4                     	;# 
   765  0FE5                     	;# 
   766  0FE6                     	;# 
   767  0FE7                     	;# 
   768  0FE8                     	;# 
   769  0FE9                     	;# 
   770  0FEA                     	;# 
   771  0FEB                     	;# 
   772  0FED                     	;# 
   773  0FEE                     	;# 
   774  0FEF                     	;# 
   775  0000                     	;# 
   776  0001                     	;# 
   777  0002                     	;# 
   778  0003                     	;# 
   779  0004                     	;# 
   780  0005                     	;# 
   781  0006                     	;# 
   782  0007                     	;# 
   783  0008                     	;# 
   784  0009                     	;# 
   785  000A                     	;# 
   786  000B                     	;# 
   787  000C                     	;# 
   788  000D                     	;# 
   789  000E                     	;# 
   790  0010                     	;# 
   791  0011                     	;# 
   792  0012                     	;# 
   793  0013                     	;# 
   794  0015                     	;# 
   795  0016                     	;# 
   796  0016                     	;# 
   797  0017                     	;# 
   798  0018                     	;# 
   799  0019                     	;# 
   800  001A                     	;# 
   801  001B                     	;# 
   802  001C                     	;# 
   803  001E                     	;# 
   804  001F                     	;# 
   805  008C                     	;# 
   806  008D                     	;# 
   807  008E                     	;# 
   808  0090                     	;# 
   809  0091                     	;# 
   810  0092                     	;# 
   811  0093                     	;# 
   812  0095                     	;# 
   813  0096                     	;# 
   814  0097                     	;# 
   815  0098                     	;# 
   816  0099                     	;# 
   817  009A                     	;# 
   818  009B                     	;# 
   819  009B                     	;# 
   820  009C                     	;# 
   821  009D                     	;# 
   822  009E                     	;# 
   823  010C                     	;# 
   824  010D                     	;# 
   825  010E                     	;# 
   826  0110                     	;# 
   827  0111                     	;# 
   828  0112                     	;# 
   829  0113                     	;# 
   830  0114                     	;# 
   831  0115                     	;# 
   832  0116                     	;# 
   833  0117                     	;# 
   834  0118                     	;# 
   835  0119                     	;# 
   836  011A                     	;# 
   837  011B                     	;# 
   838  011D                     	;# 
   839  018C                     	;# 
   840  018D                     	;# 
   841  0191                     	;# 
   842  0191                     	;# 
   843  0192                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0193                     	;# 
   847  0194                     	;# 
   848  0195                     	;# 
   849  0196                     	;# 
   850  0199                     	;# 
   851  019A                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019C                     	;# 
   857  019C                     	;# 
   858  019D                     	;# 
   859  019E                     	;# 
   860  019F                     	;# 
   861  020D                     	;# 
   862  0210                     	;# 
   863  0211                     	;# 
   864  0212                     	;# 
   865  0213                     	;# 
   866  0214                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0216                     	;# 
   870  0217                     	;# 
   871  0291                     	;# 
   872  0291                     	;# 
   873  0292                     	;# 
   874  0293                     	;# 
   875  0294                     	;# 
   876  0295                     	;# 
   877  0295                     	;# 
   878  0296                     	;# 
   879  0298                     	;# 
   880  0298                     	;# 
   881  0299                     	;# 
   882  029A                     	;# 
   883  029B                     	;# 
   884  029C                     	;# 
   885  029C                     	;# 
   886  029D                     	;# 
   887  029E                     	;# 
   888  029F                     	;# 
   889  0311                     	;# 
   890  0311                     	;# 
   891  0312                     	;# 
   892  0313                     	;# 
   893  0314                     	;# 
   894  0315                     	;# 
   895  0315                     	;# 
   896  0316                     	;# 
   897  0318                     	;# 
   898  0318                     	;# 
   899  0319                     	;# 
   900  031A                     	;# 
   901  031C                     	;# 
   902  031C                     	;# 
   903  031D                     	;# 
   904  031E                     	;# 
   905  0394                     	;# 
   906  0395                     	;# 
   907  0396                     	;# 
   908  0415                     	;# 
   909  0416                     	;# 
   910  0417                     	;# 
   911  041C                     	;# 
   912  041D                     	;# 
   913  041E                     	;# 
   914  0791                     	;# 
   915  0792                     	;# 
   916  0793                     	;# 
   917  0794                     	;# 
   918  0795                     	;# 
   919  0798                     	;# 
   920  0799                     	;# 
   921  07A0                     	;# 
   922  07A1                     	;# 
   923  07A3                     	;# 
   924  07A4                     	;# 
   925  07A6                     	;# 
   926  07A7                     	;# 
   927  07A9                     	;# 
   928  07AA                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0010                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0013                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  001E                     	;# 
   969  001F                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0093                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0098                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0110                     	;# 
   992  0111                     	;# 
   993  0112                     	;# 
   994  0113                     	;# 
   995  0114                     	;# 
   996  0115                     	;# 
   997  0116                     	;# 
   998  0117                     	;# 
   999  0118                     	;# 
  1000  0119                     	;# 
  1001  011A                     	;# 
  1002  011B                     	;# 
  1003  011D                     	;# 
  1004  018C                     	;# 
  1005  018D                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0193                     	;# 
  1012  0194                     	;# 
  1013  0195                     	;# 
  1014  0196                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019B                     	;# 
  1020  019B                     	;# 
  1021  019C                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020D                     	;# 
  1027  0210                     	;# 
  1028  0211                     	;# 
  1029  0212                     	;# 
  1030  0213                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0216                     	;# 
  1035  0217                     	;# 
  1036  0291                     	;# 
  1037  0291                     	;# 
  1038  0292                     	;# 
  1039  0293                     	;# 
  1040  0294                     	;# 
  1041  0295                     	;# 
  1042  0295                     	;# 
  1043  0296                     	;# 
  1044  0298                     	;# 
  1045  0298                     	;# 
  1046  0299                     	;# 
  1047  029A                     	;# 
  1048  029B                     	;# 
  1049  029C                     	;# 
  1050  029C                     	;# 
  1051  029D                     	;# 
  1052  029E                     	;# 
  1053  029F                     	;# 
  1054  0311                     	;# 
  1055  0311                     	;# 
  1056  0312                     	;# 
  1057  0313                     	;# 
  1058  0314                     	;# 
  1059  0315                     	;# 
  1060  0315                     	;# 
  1061  0316                     	;# 
  1062  0318                     	;# 
  1063  0318                     	;# 
  1064  0319                     	;# 
  1065  031A                     	;# 
  1066  031C                     	;# 
  1067  031C                     	;# 
  1068  031D                     	;# 
  1069  031E                     	;# 
  1070  0394                     	;# 
  1071  0395                     	;# 
  1072  0396                     	;# 
  1073  0415                     	;# 
  1074  0416                     	;# 
  1075  0417                     	;# 
  1076  041C                     	;# 
  1077  041D                     	;# 
  1078  041E                     	;# 
  1079  0791                     	;# 
  1080  0792                     	;# 
  1081  0793                     	;# 
  1082  0794                     	;# 
  1083  0795                     	;# 
  1084  0798                     	;# 
  1085  0799                     	;# 
  1086  07A0                     	;# 
  1087  07A1                     	;# 
  1088  07A3                     	;# 
  1089  07A4                     	;# 
  1090  07A6                     	;# 
  1091  07A7                     	;# 
  1092  07A9                     	;# 
  1093  07AA                     	;# 
  1094  0FE4                     	;# 
  1095  0FE5                     	;# 
  1096  0FE6                     	;# 
  1097  0FE7                     	;# 
  1098  0FE8                     	;# 
  1099  0FE9                     	;# 
  1100  0FEA                     	;# 
  1101  0FEB                     	;# 
  1102  0FED                     	;# 
  1103  0FEE                     	;# 
  1104  0FEF                     	;# 
  1105  0000                     	;# 
  1106  0001                     	;# 
  1107  0002                     	;# 
  1108  0003                     	;# 
  1109  0004                     	;# 
  1110  0005                     	;# 
  1111  0006                     	;# 
  1112  0007                     	;# 
  1113  0008                     	;# 
  1114  0009                     	;# 
  1115  000A                     	;# 
  1116  000B                     	;# 
  1117  000C                     	;# 
  1118  000D                     	;# 
  1119  000E                     	;# 
  1120  0010                     	;# 
  1121  0011                     	;# 
  1122  0012                     	;# 
  1123  0013                     	;# 
  1124  0015                     	;# 
  1125  0016                     	;# 
  1126  0016                     	;# 
  1127  0017                     	;# 
  1128  0018                     	;# 
  1129  0019                     	;# 
  1130  001A                     	;# 
  1131  001B                     	;# 
  1132  001C                     	;# 
  1133  001E                     	;# 
  1134  001F                     	;# 
  1135  008C                     	;# 
  1136  008D                     	;# 
  1137  008E                     	;# 
  1138  0090                     	;# 
  1139  0091                     	;# 
  1140  0092                     	;# 
  1141  0093                     	;# 
  1142  0095                     	;# 
  1143  0096                     	;# 
  1144  0097                     	;# 
  1145  0098                     	;# 
  1146  0099                     	;# 
  1147  009A                     	;# 
  1148  009B                     	;# 
  1149  009B                     	;# 
  1150  009C                     	;# 
  1151  009D                     	;# 
  1152  009E                     	;# 
  1153  010C                     	;# 
  1154  010D                     	;# 
  1155  010E                     	;# 
  1156  0110                     	;# 
  1157  0111                     	;# 
  1158  0112                     	;# 
  1159  0113                     	;# 
  1160  0114                     	;# 
  1161  0115                     	;# 
  1162  0116                     	;# 
  1163  0117                     	;# 
  1164  0118                     	;# 
  1165  0119                     	;# 
  1166  011A                     	;# 
  1167  011B                     	;# 
  1168  011D                     	;# 
  1169  018C                     	;# 
  1170  018D                     	;# 
  1171  0191                     	;# 
  1172  0191                     	;# 
  1173  0192                     	;# 
  1174  0193                     	;# 
  1175  0193                     	;# 
  1176  0193                     	;# 
  1177  0194                     	;# 
  1178  0195                     	;# 
  1179  0196                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019C                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019F                     	;# 
  1191  020D                     	;# 
  1192  0210                     	;# 
  1193  0211                     	;# 
  1194  0212                     	;# 
  1195  0213                     	;# 
  1196  0214                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0216                     	;# 
  1200  0217                     	;# 
  1201  0291                     	;# 
  1202  0291                     	;# 
  1203  0292                     	;# 
  1204  0293                     	;# 
  1205  0294                     	;# 
  1206  0295                     	;# 
  1207  0295                     	;# 
  1208  0296                     	;# 
  1209  0298                     	;# 
  1210  0298                     	;# 
  1211  0299                     	;# 
  1212  029A                     	;# 
  1213  029B                     	;# 
  1214  029C                     	;# 
  1215  029C                     	;# 
  1216  029D                     	;# 
  1217  029E                     	;# 
  1218  029F                     	;# 
  1219  0311                     	;# 
  1220  0311                     	;# 
  1221  0312                     	;# 
  1222  0313                     	;# 
  1223  0314                     	;# 
  1224  0315                     	;# 
  1225  0315                     	;# 
  1226  0316                     	;# 
  1227  0318                     	;# 
  1228  0318                     	;# 
  1229  0319                     	;# 
  1230  031A                     	;# 
  1231  031C                     	;# 
  1232  031C                     	;# 
  1233  031D                     	;# 
  1234  031E                     	;# 
  1235  0394                     	;# 
  1236  0395                     	;# 
  1237  0396                     	;# 
  1238  0415                     	;# 
  1239  0416                     	;# 
  1240  0417                     	;# 
  1241  041C                     	;# 
  1242  041D                     	;# 
  1243  041E                     	;# 
  1244  0791                     	;# 
  1245  0792                     	;# 
  1246  0793                     	;# 
  1247  0794                     	;# 
  1248  0795                     	;# 
  1249  0798                     	;# 
  1250  0799                     	;# 
  1251  07A0                     	;# 
  1252  07A1                     	;# 
  1253  07A3                     	;# 
  1254  07A4                     	;# 
  1255  07A6                     	;# 
  1256  07A7                     	;# 
  1257  07A9                     	;# 
  1258  07AA                     	;# 
  1259  0FE4                     	;# 
  1260  0FE5                     	;# 
  1261  0FE6                     	;# 
  1262  0FE7                     	;# 
  1263  0FE8                     	;# 
  1264  0FE9                     	;# 
  1265  0FEA                     	;# 
  1266  0FEB                     	;# 
  1267  0FED                     	;# 
  1268  0FEE                     	;# 
  1269  0FEF                     	;# 
  1270  0000                     	;# 
  1271  0001                     	;# 
  1272  0002                     	;# 
  1273  0003                     	;# 
  1274  0004                     	;# 
  1275  0005                     	;# 
  1276  0006                     	;# 
  1277  0007                     	;# 
  1278  0008                     	;# 
  1279  0009                     	;# 
  1280  000A                     	;# 
  1281  000B                     	;# 
  1282  000C                     	;# 
  1283  000D                     	;# 
  1284  000E                     	;# 
  1285  0010                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0013                     	;# 
  1289  0015                     	;# 
  1290  0016                     	;# 
  1291  0016                     	;# 
  1292  0017                     	;# 
  1293  0018                     	;# 
  1294  0019                     	;# 
  1295  001A                     	;# 
  1296  001B                     	;# 
  1297  001C                     	;# 
  1298  001E                     	;# 
  1299  001F                     	;# 
  1300  008C                     	;# 
  1301  008D                     	;# 
  1302  008E                     	;# 
  1303  0090                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0093                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0098                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0110                     	;# 
  1322  0111                     	;# 
  1323  0112                     	;# 
  1324  0113                     	;# 
  1325  0114                     	;# 
  1326  0115                     	;# 
  1327  0116                     	;# 
  1328  0117                     	;# 
  1329  0118                     	;# 
  1330  0119                     	;# 
  1331  011A                     	;# 
  1332  011B                     	;# 
  1333  011D                     	;# 
  1334  018C                     	;# 
  1335  018D                     	;# 
  1336  0191                     	;# 
  1337  0191                     	;# 
  1338  0192                     	;# 
  1339  0193                     	;# 
  1340  0193                     	;# 
  1341  0193                     	;# 
  1342  0194                     	;# 
  1343  0195                     	;# 
  1344  0196                     	;# 
  1345  0199                     	;# 
  1346  019A                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019C                     	;# 
  1352  019C                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019F                     	;# 
  1356  020D                     	;# 
  1357  0210                     	;# 
  1358  0211                     	;# 
  1359  0212                     	;# 
  1360  0213                     	;# 
  1361  0214                     	;# 
  1362  0215                     	;# 
  1363  0215                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0294                     	;# 
  1371  0295                     	;# 
  1372  0295                     	;# 
  1373  0296                     	;# 
  1374  0298                     	;# 
  1375  0298                     	;# 
  1376  0299                     	;# 
  1377  029A                     	;# 
  1378  029B                     	;# 
  1379  029C                     	;# 
  1380  029C                     	;# 
  1381  029D                     	;# 
  1382  029E                     	;# 
  1383  029F                     	;# 
  1384  0311                     	;# 
  1385  0311                     	;# 
  1386  0312                     	;# 
  1387  0313                     	;# 
  1388  0314                     	;# 
  1389  0315                     	;# 
  1390  0315                     	;# 
  1391  0316                     	;# 
  1392  0318                     	;# 
  1393  0318                     	;# 
  1394  0319                     	;# 
  1395  031A                     	;# 
  1396  031C                     	;# 
  1397  031C                     	;# 
  1398  031D                     	;# 
  1399  031E                     	;# 
  1400  0394                     	;# 
  1401  0395                     	;# 
  1402  0396                     	;# 
  1403  0415                     	;# 
  1404  0416                     	;# 
  1405  0417                     	;# 
  1406  041C                     	;# 
  1407  041D                     	;# 
  1408  041E                     	;# 
  1409  0791                     	;# 
  1410  0792                     	;# 
  1411  0793                     	;# 
  1412  0794                     	;# 
  1413  0795                     	;# 
  1414  0798                     	;# 
  1415  0799                     	;# 
  1416  07A0                     	;# 
  1417  07A1                     	;# 
  1418  07A3                     	;# 
  1419  07A4                     	;# 
  1420  07A6                     	;# 
  1421  07A7                     	;# 
  1422  07A9                     	;# 
  1423  07AA                     	;# 
  1424  0FE4                     	;# 
  1425  0FE5                     	;# 
  1426  0FE6                     	;# 
  1427  0FE7                     	;# 
  1428  0FE8                     	;# 
  1429  0FE9                     	;# 
  1430  0FEA                     	;# 
  1431  0FEB                     	;# 
  1432  0FED                     	;# 
  1433  0FEE                     	;# 
  1434  0FEF                     	;# 
  1435  0000                     	;# 
  1436  0001                     	;# 
  1437  0002                     	;# 
  1438  0003                     	;# 
  1439  0004                     	;# 
  1440  0005                     	;# 
  1441  0006                     	;# 
  1442  0007                     	;# 
  1443  0008                     	;# 
  1444  0009                     	;# 
  1445  000A                     	;# 
  1446  000B                     	;# 
  1447  000C                     	;# 
  1448  000D                     	;# 
  1449  000E                     	;# 
  1450  0010                     	;# 
  1451  0011                     	;# 
  1452  0012                     	;# 
  1453  0013                     	;# 
  1454  0015                     	;# 
  1455  0016                     	;# 
  1456  0016                     	;# 
  1457  0017                     	;# 
  1458  0018                     	;# 
  1459  0019                     	;# 
  1460  001A                     	;# 
  1461  001B                     	;# 
  1462  001C                     	;# 
  1463  001E                     	;# 
  1464  001F                     	;# 
  1465  008C                     	;# 
  1466  008D                     	;# 
  1467  008E                     	;# 
  1468  0090                     	;# 
  1469  0091                     	;# 
  1470  0092                     	;# 
  1471  0093                     	;# 
  1472  0095                     	;# 
  1473  0096                     	;# 
  1474  0097                     	;# 
  1475  0098                     	;# 
  1476  0099                     	;# 
  1477  009A                     	;# 
  1478  009B                     	;# 
  1479  009B                     	;# 
  1480  009C                     	;# 
  1481  009D                     	;# 
  1482  009E                     	;# 
  1483  010C                     	;# 
  1484  010D                     	;# 
  1485  010E                     	;# 
  1486  0110                     	;# 
  1487  0111                     	;# 
  1488  0112                     	;# 
  1489  0113                     	;# 
  1490  0114                     	;# 
  1491  0115                     	;# 
  1492  0116                     	;# 
  1493  0117                     	;# 
  1494  0118                     	;# 
  1495  0119                     	;# 
  1496  011A                     	;# 
  1497  011B                     	;# 
  1498  011D                     	;# 
  1499  018C                     	;# 
  1500  018D                     	;# 
  1501  0191                     	;# 
  1502  0191                     	;# 
  1503  0192                     	;# 
  1504  0193                     	;# 
  1505  0193                     	;# 
  1506  0193                     	;# 
  1507  0194                     	;# 
  1508  0195                     	;# 
  1509  0196                     	;# 
  1510  0199                     	;# 
  1511  019A                     	;# 
  1512  019B                     	;# 
  1513  019B                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019C                     	;# 
  1517  019C                     	;# 
  1518  019D                     	;# 
  1519  019E                     	;# 
  1520  019F                     	;# 
  1521  020D                     	;# 
  1522  0210                     	;# 
  1523  0211                     	;# 
  1524  0212                     	;# 
  1525  0213                     	;# 
  1526  0214                     	;# 
  1527  0215                     	;# 
  1528  0215                     	;# 
  1529  0216                     	;# 
  1530  0217                     	;# 
  1531  0291                     	;# 
  1532  0291                     	;# 
  1533  0292                     	;# 
  1534  0293                     	;# 
  1535  0294                     	;# 
  1536  0295                     	;# 
  1537  0295                     	;# 
  1538  0296                     	;# 
  1539  0298                     	;# 
  1540  0298                     	;# 
  1541  0299                     	;# 
  1542  029A                     	;# 
  1543  029B                     	;# 
  1544  029C                     	;# 
  1545  029C                     	;# 
  1546  029D                     	;# 
  1547  029E                     	;# 
  1548  029F                     	;# 
  1549  0311                     	;# 
  1550  0311                     	;# 
  1551  0312                     	;# 
  1552  0313                     	;# 
  1553  0314                     	;# 
  1554  0315                     	;# 
  1555  0315                     	;# 
  1556  0316                     	;# 
  1557  0318                     	;# 
  1558  0318                     	;# 
  1559  0319                     	;# 
  1560  031A                     	;# 
  1561  031C                     	;# 
  1562  031C                     	;# 
  1563  031D                     	;# 
  1564  031E                     	;# 
  1565  0394                     	;# 
  1566  0395                     	;# 
  1567  0396                     	;# 
  1568  0415                     	;# 
  1569  0416                     	;# 
  1570  0417                     	;# 
  1571  041C                     	;# 
  1572  041D                     	;# 
  1573  041E                     	;# 
  1574  0791                     	;# 
  1575  0792                     	;# 
  1576  0793                     	;# 
  1577  0794                     	;# 
  1578  0795                     	;# 
  1579  0798                     	;# 
  1580  0799                     	;# 
  1581  07A0                     	;# 
  1582  07A1                     	;# 
  1583  07A3                     	;# 
  1584  07A4                     	;# 
  1585  07A6                     	;# 
  1586  07A7                     	;# 
  1587  07A9                     	;# 
  1588  07AA                     	;# 
  1589  0FE4                     	;# 
  1590  0FE5                     	;# 
  1591  0FE6                     	;# 
  1592  0FE7                     	;# 
  1593  0FE8                     	;# 
  1594  0FE9                     	;# 
  1595  0FEA                     	;# 
  1596  0FEB                     	;# 
  1597  0FED                     	;# 
  1598  0FEE                     	;# 
  1599  0FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0010                     	;# 
  1616  0011                     	;# 
  1617  0012                     	;# 
  1618  0013                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  001E                     	;# 
  1629  001F                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  0090                     	;# 
  1634  0091                     	;# 
  1635  0092                     	;# 
  1636  0093                     	;# 
  1637  0095                     	;# 
  1638  0096                     	;# 
  1639  0097                     	;# 
  1640  0098                     	;# 
  1641  0099                     	;# 
  1642  009A                     	;# 
  1643  009B                     	;# 
  1644  009B                     	;# 
  1645  009C                     	;# 
  1646  009D                     	;# 
  1647  009E                     	;# 
  1648  010C                     	;# 
  1649  010D                     	;# 
  1650  010E                     	;# 
  1651  0110                     	;# 
  1652  0111                     	;# 
  1653  0112                     	;# 
  1654  0113                     	;# 
  1655  0114                     	;# 
  1656  0115                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  0118                     	;# 
  1660  0119                     	;# 
  1661  011A                     	;# 
  1662  011B                     	;# 
  1663  011D                     	;# 
  1664  018C                     	;# 
  1665  018D                     	;# 
  1666  0191                     	;# 
  1667  0191                     	;# 
  1668  0192                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0193                     	;# 
  1672  0194                     	;# 
  1673  0195                     	;# 
  1674  0196                     	;# 
  1675  0199                     	;# 
  1676  019A                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019C                     	;# 
  1682  019C                     	;# 
  1683  019D                     	;# 
  1684  019E                     	;# 
  1685  019F                     	;# 
  1686  020D                     	;# 
  1687  0210                     	;# 
  1688  0211                     	;# 
  1689  0212                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0294                     	;# 
  1701  0295                     	;# 
  1702  0295                     	;# 
  1703  0296                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  029B                     	;# 
  1709  029C                     	;# 
  1710  029C                     	;# 
  1711  029D                     	;# 
  1712  029E                     	;# 
  1713  029F                     	;# 
  1714  0311                     	;# 
  1715  0311                     	;# 
  1716  0312                     	;# 
  1717  0313                     	;# 
  1718  0314                     	;# 
  1719  0315                     	;# 
  1720  0315                     	;# 
  1721  0316                     	;# 
  1722  0318                     	;# 
  1723  0318                     	;# 
  1724  0319                     	;# 
  1725  031A                     	;# 
  1726  031C                     	;# 
  1727  031C                     	;# 
  1728  031D                     	;# 
  1729  031E                     	;# 
  1730  0394                     	;# 
  1731  0395                     	;# 
  1732  0396                     	;# 
  1733  0415                     	;# 
  1734  0416                     	;# 
  1735  0417                     	;# 
  1736  041C                     	;# 
  1737  041D                     	;# 
  1738  041E                     	;# 
  1739  0791                     	;# 
  1740  0792                     	;# 
  1741  0793                     	;# 
  1742  0794                     	;# 
  1743  0795                     	;# 
  1744  0798                     	;# 
  1745  0799                     	;# 
  1746  07A0                     	;# 
  1747  07A1                     	;# 
  1748  07A3                     	;# 
  1749  07A4                     	;# 
  1750  07A6                     	;# 
  1751  07A7                     	;# 
  1752  07A9                     	;# 
  1753  07AA                     	;# 
  1754  0FE4                     	;# 
  1755  0FE5                     	;# 
  1756  0FE6                     	;# 
  1757  0FE7                     	;# 
  1758  0FE8                     	;# 
  1759  0FE9                     	;# 
  1760  0FEA                     	;# 
  1761  0FEB                     	;# 
  1762  0FED                     	;# 
  1763  0FEE                     	;# 
  1764  0FEF                     	;# 
  1765  0000                     	;# 
  1766  0001                     	;# 
  1767  0002                     	;# 
  1768  0003                     	;# 
  1769  0004                     	;# 
  1770  0005                     	;# 
  1771  0006                     	;# 
  1772  0007                     	;# 
  1773  0008                     	;# 
  1774  0009                     	;# 
  1775  000A                     	;# 
  1776  000B                     	;# 
  1777  000C                     	;# 
  1778  000D                     	;# 
  1779  000E                     	;# 
  1780  0010                     	;# 
  1781  0011                     	;# 
  1782  0012                     	;# 
  1783  0013                     	;# 
  1784  0015                     	;# 
  1785  0016                     	;# 
  1786  0016                     	;# 
  1787  0017                     	;# 
  1788  0018                     	;# 
  1789  0019                     	;# 
  1790  001A                     	;# 
  1791  001B                     	;# 
  1792  001C                     	;# 
  1793  001E                     	;# 
  1794  001F                     	;# 
  1795  008C                     	;# 
  1796  008D                     	;# 
  1797  008E                     	;# 
  1798  0090                     	;# 
  1799  0091                     	;# 
  1800  0092                     	;# 
  1801  0093                     	;# 
  1802  0095                     	;# 
  1803  0096                     	;# 
  1804  0097                     	;# 
  1805  0098                     	;# 
  1806  0099                     	;# 
  1807  009A                     	;# 
  1808  009B                     	;# 
  1809  009B                     	;# 
  1810  009C                     	;# 
  1811  009D                     	;# 
  1812  009E                     	;# 
  1813  010C                     	;# 
  1814  010D                     	;# 
  1815  010E                     	;# 
  1816  0110                     	;# 
  1817  0111                     	;# 
  1818  0112                     	;# 
  1819  0113                     	;# 
  1820  0114                     	;# 
  1821  0115                     	;# 
  1822  0116                     	;# 
  1823  0117                     	;# 
  1824  0118                     	;# 
  1825  0119                     	;# 
  1826  011A                     	;# 
  1827  011B                     	;# 
  1828  011D                     	;# 
  1829  018C                     	;# 
  1830  018D                     	;# 
  1831  0191                     	;# 
  1832  0191                     	;# 
  1833  0192                     	;# 
  1834  0193                     	;# 
  1835  0193                     	;# 
  1836  0193                     	;# 
  1837  0194                     	;# 
  1838  0195                     	;# 
  1839  0196                     	;# 
  1840  0199                     	;# 
  1841  019A                     	;# 
  1842  019B                     	;# 
  1843  019B                     	;# 
  1844  019B                     	;# 
  1845  019B                     	;# 
  1846  019C                     	;# 
  1847  019C                     	;# 
  1848  019D                     	;# 
  1849  019E                     	;# 
  1850  019F                     	;# 
  1851  020D                     	;# 
  1852  0210                     	;# 
  1853  0211                     	;# 
  1854  0212                     	;# 
  1855  0213                     	;# 
  1856  0214                     	;# 
  1857  0215                     	;# 
  1858  0215                     	;# 
  1859  0216                     	;# 
  1860  0217                     	;# 
  1861  0291                     	;# 
  1862  0291                     	;# 
  1863  0292                     	;# 
  1864  0293                     	;# 
  1865  0294                     	;# 
  1866  0295                     	;# 
  1867  0295                     	;# 
  1868  0296                     	;# 
  1869  0298                     	;# 
  1870  0298                     	;# 
  1871  0299                     	;# 
  1872  029A                     	;# 
  1873  029B                     	;# 
  1874  029C                     	;# 
  1875  029C                     	;# 
  1876  029D                     	;# 
  1877  029E                     	;# 
  1878  029F                     	;# 
  1879  0311                     	;# 
  1880  0311                     	;# 
  1881  0312                     	;# 
  1882  0313                     	;# 
  1883  0314                     	;# 
  1884  0315                     	;# 
  1885  0315                     	;# 
  1886  0316                     	;# 
  1887  0318                     	;# 
  1888  0318                     	;# 
  1889  0319                     	;# 
  1890  031A                     	;# 
  1891  031C                     	;# 
  1892  031C                     	;# 
  1893  031D                     	;# 
  1894  031E                     	;# 
  1895  0394                     	;# 
  1896  0395                     	;# 
  1897  0396                     	;# 
  1898  0415                     	;# 
  1899  0416                     	;# 
  1900  0417                     	;# 
  1901  041C                     	;# 
  1902  041D                     	;# 
  1903  041E                     	;# 
  1904  0791                     	;# 
  1905  0792                     	;# 
  1906  0793                     	;# 
  1907  0794                     	;# 
  1908  0795                     	;# 
  1909  0798                     	;# 
  1910  0799                     	;# 
  1911  07A0                     	;# 
  1912  07A1                     	;# 
  1913  07A3                     	;# 
  1914  07A4                     	;# 
  1915  07A6                     	;# 
  1916  07A7                     	;# 
  1917  07A9                     	;# 
  1918  07AA                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930                           
  1931                           	psect	idataBANK0
  1932  0003                     __pidataBANK0:	
  1933                           
  1934                           ;initializer for _ui8_selected_lid
  1935  0003  3480               	retlw	128
  1936                           
  1937                           	psect	idataBANK1
  1938  1E0B                     __pidataBANK1:	
  1939                           
  1940                           ;initializer for _ui16_I_cal_Ph3
  1941  1E0B  3401               	retlw	1
  1942  1E0C  3400               	retlw	0
  1943                           
  1944                           ;initializer for _ui16_I_cal_Ph2
  1945  1E0D  3401               	retlw	1
  1946  1E0E  3400               	retlw	0
  1947                           
  1948                           ;initializer for _ui16_I_cal_Ph1
  1949  1E0F  3401               	retlw	1
  1950  1E10  3400               	retlw	0
  1951                           
  1952                           ;initializer for _wkpoint
  1953  1E11  3401               	retlw	1
  1954                           
  1955                           	psect	idataBANK2
  1956  1E1A                     __pidataBANK2:	
  1957                           
  1958                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  1959  1E1A  3480               	retlw	128
  1960  1E1B  3438               	retlw	56
  1961  1E1C  3401               	retlw	1
  1962  1E1D  3400               	retlw	0
  1963                           
  1964                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  1965  1E1E  3401               	retlw	1
  1966                           
  1967                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  1968  1E1F  3401               	retlw	1
  1969                           
  1970                           ;initializer for _ui8_failure
  1971  1E20  3407               	retlw	7
  1972                           
  1973                           ;initializer for _ict_stamp
  1974  1E21  3401               	retlw	1
  1975                           
  1976                           	psect	stringtext1
  1977  1000                     __pstringtext1:	
  1978  1000                     _PWM_trans_table:	
  1979  1000  3400               	retlw	0
  1980  1001  3400               	retlw	0
  1981  1002  3400               	retlw	0
  1982  1003  3400               	retlw	0
  1983  1004  3400               	retlw	0
  1984  1005  3400               	retlw	0
  1985  1006  3400               	retlw	0
  1986  1007  3400               	retlw	0
  1987  1008  3400               	retlw	0
  1988  1009  3400               	retlw	0
  1989  100A  3400               	retlw	0
  1990  100B  3400               	retlw	0
  1991  100C  3400               	retlw	0
  1992  100D  3400               	retlw	0
  1993  100E  3400               	retlw	0
  1994  100F  3400               	retlw	0
  1995  1010  3400               	retlw	0
  1996  1011  3400               	retlw	0
  1997  1012  3400               	retlw	0
  1998  1013  3400               	retlw	0
  1999  1014  34B5               	retlw	181
  2000  1015  3400               	retlw	0
  2001  1016  34B5               	retlw	181
  2002  1017  3400               	retlw	0
  2003  1018  34B5               	retlw	181
  2004  1019  3400               	retlw	0
  2005  101A  34B5               	retlw	181
  2006  101B  3400               	retlw	0
  2007  101C  34B5               	retlw	181
  2008  101D  3400               	retlw	0
  2009  101E  34B5               	retlw	181
  2010  101F  3400               	retlw	0
  2011  1020  34B5               	retlw	181
  2012  1021  3400               	retlw	0
  2013  1022  34B5               	retlw	181
  2014  1023  3400               	retlw	0
  2015  1024  34B5               	retlw	181
  2016  1025  3400               	retlw	0
  2017  1026  34B5               	retlw	181
  2018  1027  3400               	retlw	0
  2019  1028  34B5               	retlw	181
  2020  1029  3400               	retlw	0
  2021  102A  34B6               	retlw	182
  2022  102B  3400               	retlw	0
  2023  102C  34B8               	retlw	184
  2024  102D  3400               	retlw	0
  2025  102E  34B9               	retlw	185
  2026  102F  3400               	retlw	0
  2027  1030  34BA               	retlw	186
  2028  1031  3400               	retlw	0
  2029  1032  34BB               	retlw	187
  2030  1033  3400               	retlw	0
  2031  1034  34BD               	retlw	189
  2032  1035  3400               	retlw	0
  2033  1036  34BE               	retlw	190
  2034  1037  3400               	retlw	0
  2035  1038  34BF               	retlw	191
  2036  1039  3400               	retlw	0
  2037  103A  34C1               	retlw	193
  2038  103B  3400               	retlw	0
  2039  103C  34C2               	retlw	194
  2040  103D  3400               	retlw	0
  2041  103E  34C3               	retlw	195
  2042  103F  3400               	retlw	0
  2043  1040  34C4               	retlw	196
  2044  1041  3400               	retlw	0
  2045  1042  34C6               	retlw	198
  2046  1043  3400               	retlw	0
  2047  1044  34C7               	retlw	199
  2048  1045  3400               	retlw	0
  2049  1046  34C8               	retlw	200
  2050  1047  3400               	retlw	0
  2051  1048  34CA               	retlw	202
  2052  1049  3400               	retlw	0
  2053  104A  34CB               	retlw	203
  2054  104B  3400               	retlw	0
  2055  104C  34CC               	retlw	204
  2056  104D  3400               	retlw	0
  2057  104E  34CD               	retlw	205
  2058  104F  3400               	retlw	0
  2059  1050  34CF               	retlw	207
  2060  1051  3400               	retlw	0
  2061  1052  34D0               	retlw	208
  2062  1053  3400               	retlw	0
  2063  1054  34D1               	retlw	209
  2064  1055  3400               	retlw	0
  2065  1056  34D3               	retlw	211
  2066  1057  3400               	retlw	0
  2067  1058  34D4               	retlw	212
  2068  1059  3400               	retlw	0
  2069  105A  34D5               	retlw	213
  2070  105B  3400               	retlw	0
  2071  105C  34D6               	retlw	214
  2072  105D  3400               	retlw	0
  2073  105E  34D8               	retlw	216
  2074  105F  3400               	retlw	0
  2075  1060  34D9               	retlw	217
  2076  1061  3400               	retlw	0
  2077  1062  34DA               	retlw	218
  2078  1063  3400               	retlw	0
  2079  1064  34DC               	retlw	220
  2080  1065  3400               	retlw	0
  2081  1066  34DD               	retlw	221
  2082  1067  3400               	retlw	0
  2083  1068  34DE               	retlw	222
  2084  1069  3400               	retlw	0
  2085  106A  34E0               	retlw	224
  2086  106B  3400               	retlw	0
  2087  106C  34E1               	retlw	225
  2088  106D  3400               	retlw	0
  2089  106E  34E2               	retlw	226
  2090  106F  3400               	retlw	0
  2091  1070  34E3               	retlw	227
  2092  1071  3400               	retlw	0
  2093  1072  34E5               	retlw	229
  2094  1073  3400               	retlw	0
  2095  1074  34E6               	retlw	230
  2096  1075  3400               	retlw	0
  2097  1076  34E7               	retlw	231
  2098  1077  3400               	retlw	0
  2099  1078  34E9               	retlw	233
  2100  1079  3400               	retlw	0
  2101  107A  34EA               	retlw	234
  2102  107B  3400               	retlw	0
  2103  107C  34EB               	retlw	235
  2104  107D  3400               	retlw	0
  2105  107E  34EC               	retlw	236
  2106  107F  3400               	retlw	0
  2107  1080  34EE               	retlw	238
  2108  1081  3400               	retlw	0
  2109  1082  34EF               	retlw	239
  2110  1083  3400               	retlw	0
  2111  1084  34F0               	retlw	240
  2112  1085  3400               	retlw	0
  2113  1086  34F2               	retlw	242
  2114  1087  3400               	retlw	0
  2115  1088  34F3               	retlw	243
  2116  1089  3400               	retlw	0
  2117  108A  34F4               	retlw	244
  2118  108B  3400               	retlw	0
  2119  108C  34F5               	retlw	245
  2120  108D  3400               	retlw	0
  2121  108E  34F7               	retlw	247
  2122  108F  3400               	retlw	0
  2123  1090  34F8               	retlw	248
  2124  1091  3400               	retlw	0
  2125  1092  34F9               	retlw	249
  2126  1093  3400               	retlw	0
  2127  1094  34FB               	retlw	251
  2128  1095  3400               	retlw	0
  2129  1096  34FC               	retlw	252
  2130  1097  3400               	retlw	0
  2131  1098  34FD               	retlw	253
  2132  1099  3400               	retlw	0
  2133  109A  34FE               	retlw	254
  2134  109B  3400               	retlw	0
  2135  109C  3400               	retlw	0
  2136  109D  3401               	retlw	1
  2137  109E  3401               	retlw	1
  2138  109F  3401               	retlw	1
  2139  10A0  3402               	retlw	2
  2140  10A1  3401               	retlw	1
  2141  10A2  3404               	retlw	4
  2142  10A3  3401               	retlw	1
  2143  10A4  3405               	retlw	5
  2144  10A5  3401               	retlw	1
  2145  10A6  3406               	retlw	6
  2146  10A7  3401               	retlw	1
  2147  10A8  3407               	retlw	7
  2148  10A9  3401               	retlw	1
  2149  10AA  3409               	retlw	9
  2150  10AB  3401               	retlw	1
  2151  10AC  340A               	retlw	10
  2152  10AD  3401               	retlw	1
  2153  10AE  340B               	retlw	11
  2154  10AF  3401               	retlw	1
  2155  10B0  340D               	retlw	13
  2156  10B1  3401               	retlw	1
  2157  10B2  340E               	retlw	14
  2158  10B3  3401               	retlw	1
  2159  10B4  340F               	retlw	15
  2160  10B5  3401               	retlw	1
  2161  10B6  3410               	retlw	16
  2162  10B7  3401               	retlw	1
  2163  10B8  3412               	retlw	18
  2164  10B9  3401               	retlw	1
  2165  10BA  3413               	retlw	19
  2166  10BB  3401               	retlw	1
  2167  10BC  3414               	retlw	20
  2168  10BD  3401               	retlw	1
  2169  10BE  3416               	retlw	22
  2170  10BF  3401               	retlw	1
  2171  10C0  3417               	retlw	23
  2172  10C1  3401               	retlw	1
  2173  10C2  3418               	retlw	24
  2174  10C3  3401               	retlw	1
  2175  10C4  3419               	retlw	25
  2176  10C5  3401               	retlw	1
  2177  10C6  341B               	retlw	27
  2178  10C7  3401               	retlw	1
  2179  10C8  341C               	retlw	28
  2180  10C9  3401               	retlw	1
  2181  10CA  341D               	retlw	29
  2182  10CB  3401               	retlw	1
  2183  10CC  341F               	retlw	31
  2184  10CD  3401               	retlw	1
  2185  10CE  3420               	retlw	32
  2186  10CF  3401               	retlw	1
  2187  10D0  3421               	retlw	33
  2188  10D1  3401               	retlw	1
  2189  10D2  3422               	retlw	34
  2190  10D3  3401               	retlw	1
  2191  10D4  3424               	retlw	36
  2192  10D5  3401               	retlw	1
  2193  10D6  3425               	retlw	37
  2194  10D7  3401               	retlw	1
  2195  10D8  3426               	retlw	38
  2196  10D9  3401               	retlw	1
  2197  10DA  3428               	retlw	40
  2198  10DB  3401               	retlw	1
  2199  10DC  3429               	retlw	41
  2200  10DD  3401               	retlw	1
  2201  10DE  342A               	retlw	42
  2202  10DF  3401               	retlw	1
  2203  10E0  342C               	retlw	44
  2204  10E1  3401               	retlw	1
  2205  10E2  342D               	retlw	45
  2206  10E3  3401               	retlw	1
  2207  10E4  342E               	retlw	46
  2208  10E5  3401               	retlw	1
  2209  10E6  342F               	retlw	47
  2210  10E7  3401               	retlw	1
  2211  10E8  3431               	retlw	49
  2212  10E9  3401               	retlw	1
  2213  10EA  3432               	retlw	50
  2214  10EB  3401               	retlw	1
  2215  10EC  3433               	retlw	51
  2216  10ED  3401               	retlw	1
  2217  10EE  3435               	retlw	53
  2218  10EF  3401               	retlw	1
  2219  10F0  3436               	retlw	54
  2220  10F1  3401               	retlw	1
  2221  10F2  3437               	retlw	55
  2222  10F3  3401               	retlw	1
  2223  10F4  3438               	retlw	56
  2224  10F5  3401               	retlw	1
  2225  10F6  343A               	retlw	58
  2226  10F7  3401               	retlw	1
  2227  10F8  343B               	retlw	59
  2228  10F9  3401               	retlw	1
  2229  10FA  343C               	retlw	60
  2230  10FB  3401               	retlw	1
  2231  10FC  343E               	retlw	62
  2232  10FD  3401               	retlw	1
  2233  10FE  343F               	retlw	63
  2234  10FF  3401               	retlw	1
  2235  1100  3440               	retlw	64
  2236  1101  3401               	retlw	1
  2237  1102  3441               	retlw	65
  2238  1103  3401               	retlw	1
  2239  1104  3443               	retlw	67
  2240  1105  3401               	retlw	1
  2241  1106  3444               	retlw	68
  2242  1107  3401               	retlw	1
  2243  1108  3445               	retlw	69
  2244  1109  3401               	retlw	1
  2245  110A  3447               	retlw	71
  2246  110B  3401               	retlw	1
  2247  110C  3448               	retlw	72
  2248  110D  3401               	retlw	1
  2249  110E  3449               	retlw	73
  2250  110F  3401               	retlw	1
  2251  1110  344A               	retlw	74
  2252  1111  3401               	retlw	1
  2253  1112  344C               	retlw	76
  2254  1113  3401               	retlw	1
  2255  1114  344D               	retlw	77
  2256  1115  3401               	retlw	1
  2257  1116  344E               	retlw	78
  2258  1117  3401               	retlw	1
  2259  1118  3450               	retlw	80
  2260  1119  3401               	retlw	1
  2261  111A  3451               	retlw	81
  2262  111B  3401               	retlw	1
  2263  111C  3452               	retlw	82
  2264  111D  3401               	retlw	1
  2265  111E  3453               	retlw	83
  2266  111F  3401               	retlw	1
  2267  1120  3455               	retlw	85
  2268  1121  3401               	retlw	1
  2269  1122  3456               	retlw	86
  2270  1123  3401               	retlw	1
  2271  1124  3457               	retlw	87
  2272  1125  3401               	retlw	1
  2273  1126  3459               	retlw	89
  2274  1127  3401               	retlw	1
  2275  1128  345A               	retlw	90
  2276  1129  3401               	retlw	1
  2277  112A  345B               	retlw	91
  2278  112B  3401               	retlw	1
  2279  112C  345C               	retlw	92
  2280  112D  3401               	retlw	1
  2281  112E  345E               	retlw	94
  2282  112F  3401               	retlw	1
  2283  1130  345F               	retlw	95
  2284  1131  3401               	retlw	1
  2285  1132  3460               	retlw	96
  2286  1133  3401               	retlw	1
  2287  1134  3462               	retlw	98
  2288  1135  3401               	retlw	1
  2289  1136  3463               	retlw	99
  2290  1137  3401               	retlw	1
  2291  1138  3464               	retlw	100
  2292  1139  3401               	retlw	1
  2293  113A  3465               	retlw	101
  2294  113B  3401               	retlw	1
  2295  113C  3467               	retlw	103
  2296  113D  3401               	retlw	1
  2297  113E  3468               	retlw	104
  2298  113F  3401               	retlw	1
  2299  1140  3469               	retlw	105
  2300  1141  3401               	retlw	1
  2301  1142  346B               	retlw	107
  2302  1143  3401               	retlw	1
  2303  1144  346C               	retlw	108
  2304  1145  3401               	retlw	1
  2305  1146  346D               	retlw	109
  2306  1147  3401               	retlw	1
  2307  1148  346F               	retlw	111
  2308  1149  3401               	retlw	1
  2309  114A  3470               	retlw	112
  2310  114B  3401               	retlw	1
  2311  114C  3471               	retlw	113
  2312  114D  3401               	retlw	1
  2313  114E  3472               	retlw	114
  2314  114F  3401               	retlw	1
  2315  1150  3474               	retlw	116
  2316  1151  3401               	retlw	1
  2317  1152  3475               	retlw	117
  2318  1153  3401               	retlw	1
  2319  1154  3476               	retlw	118
  2320  1155  3401               	retlw	1
  2321  1156  3478               	retlw	120
  2322  1157  3401               	retlw	1
  2323  1158  3479               	retlw	121
  2324  1159  3401               	retlw	1
  2325  115A  347A               	retlw	122
  2326  115B  3401               	retlw	1
  2327  115C  347B               	retlw	123
  2328  115D  3401               	retlw	1
  2329  115E  347D               	retlw	125
  2330  115F  3401               	retlw	1
  2331  1160  347E               	retlw	126
  2332  1161  3401               	retlw	1
  2333  1162  347F               	retlw	127
  2334  1163  3401               	retlw	1
  2335  1164  3481               	retlw	129
  2336  1165  3401               	retlw	1
  2337  1166  3482               	retlw	130
  2338  1167  3401               	retlw	1
  2339  1168  3483               	retlw	131
  2340  1169  3401               	retlw	1
  2341  116A  3484               	retlw	132
  2342  116B  3401               	retlw	1
  2343  116C  3486               	retlw	134
  2344  116D  3401               	retlw	1
  2345  116E  3487               	retlw	135
  2346  116F  3401               	retlw	1
  2347  1170  3488               	retlw	136
  2348  1171  3401               	retlw	1
  2349  1172  348A               	retlw	138
  2350  1173  3401               	retlw	1
  2351  1174  348B               	retlw	139
  2352  1175  3401               	retlw	1
  2353  1176  348C               	retlw	140
  2354  1177  3401               	retlw	1
  2355  1178  348D               	retlw	141
  2356  1179  3401               	retlw	1
  2357  117A  348F               	retlw	143
  2358  117B  3401               	retlw	1
  2359  117C  3490               	retlw	144
  2360  117D  3401               	retlw	1
  2361  117E  3490               	retlw	144
  2362  117F  3401               	retlw	1
  2363  1180  3490               	retlw	144
  2364  1181  3401               	retlw	1
  2365  1182  3490               	retlw	144
  2366  1183  3401               	retlw	1
  2367  1184  3490               	retlw	144
  2368  1185  3401               	retlw	1
  2369  1186  3490               	retlw	144
  2370  1187  3401               	retlw	1
  2371  1188  3490               	retlw	144
  2372  1189  3401               	retlw	1
  2373  118A  3490               	retlw	144
  2374  118B  3401               	retlw	1
  2375  118C  3490               	retlw	144
  2376  118D  3401               	retlw	1
  2377  118E  3490               	retlw	144
  2378  118F  3401               	retlw	1
  2379  1190  3490               	retlw	144
  2380  1191  3401               	retlw	1
  2381  1192  3490               	retlw	144
  2382  1193  3401               	retlw	1
  2383  1194                     __end_of_PWM_trans_table:	
  2384                           
  2385                           	psect	stringtext2
  2386  1800                     __pstringtext2:	
  2387  1800                     _cBEMF_FILTER:	
  2388  1800  3400               	retlw	0
  2389  1801  3402               	retlw	2
  2390  1802  3404               	retlw	4
  2391  1803  3406               	retlw	6
  2392  1804  3408               	retlw	8
  2393  1805  340A               	retlw	10
  2394  1806  340C               	retlw	12
  2395  1807  340E               	retlw	14
  2396  1808  3410               	retlw	16
  2397  1809  3412               	retlw	18
  2398  180A  3414               	retlw	20
  2399  180B  3416               	retlw	22
  2400  180C  3418               	retlw	24
  2401  180D  341A               	retlw	26
  2402  180E  341C               	retlw	28
  2403  180F  341E               	retlw	30
  2404  1810  3420               	retlw	32
  2405  1811  3422               	retlw	34
  2406  1812  3424               	retlw	36
  2407  1813  3426               	retlw	38
  2408  1814  3428               	retlw	40
  2409  1815  342A               	retlw	42
  2410  1816  342C               	retlw	44
  2411  1817  342E               	retlw	46
  2412  1818  3401               	retlw	1
  2413  1819  3401               	retlw	1
  2414  181A  3401               	retlw	1
  2415  181B  3436               	retlw	54
  2416  181C  3401               	retlw	1
  2417  181D  343A               	retlw	58
  2418  181E  343C               	retlw	60
  2419  181F  343E               	retlw	62
  2420  1820  3400               	retlw	0
  2421  1821  3402               	retlw	2
  2422  1822  3404               	retlw	4
  2423  1823  3406               	retlw	6
  2424  1824  3408               	retlw	8
  2425  1825  340A               	retlw	10
  2426  1826  340C               	retlw	12
  2427  1827  340E               	retlw	14
  2428  1828  3401               	retlw	1
  2429  1829  3401               	retlw	1
  2430  182A  3401               	retlw	1
  2431  182B  3416               	retlw	22
  2432  182C  3401               	retlw	1
  2433  182D  341A               	retlw	26
  2434  182E  341C               	retlw	28
  2435  182F  341E               	retlw	30
  2436  1830  3401               	retlw	1
  2437  1831  3401               	retlw	1
  2438  1832  3401               	retlw	1
  2439  1833  3426               	retlw	38
  2440  1834  3401               	retlw	1
  2441  1835  342A               	retlw	42
  2442  1836  342C               	retlw	44
  2443  1837  342E               	retlw	46
  2444  1838  3401               	retlw	1
  2445  1839  3401               	retlw	1
  2446  183A  3401               	retlw	1
  2447  183B  3436               	retlw	54
  2448  183C  3401               	retlw	1
  2449  183D  343A               	retlw	58
  2450  183E  343C               	retlw	60
  2451  183F  343E               	retlw	62
  2452  1840                     __end_of_cBEMF_FILTER:	
  2453                           
  2454                           	psect	stringtext3
  2455  1878                     __pstringtext3:	
  2456  1878                     _Sb2_Fixed_Power:	
  2457  1878  34CA               	retlw	202
  2458  1879  3400               	retlw	0
  2459  187A                     __end_of_Sb2_Fixed_Power:	
  2460                           
  2461                           	psect	nvBANK1
  2462  00EF                     __pnvBANK1:	
  2463  00EF                     _ui8_ResetMatlab:	
  2464  00EF                     	ds	1
  2465                           
  2466                           	psect	nvBANK3
  2467  01EE                     __pnvBANK3:	
  2468  01EE                     _ui16_Current_Thresh:	
  2469  01EE                     	ds	2
  2470                           
  2471                           	psect	nvBANK4
  2472  0268                     __pnvBANK4:	
  2473  0268                     _ui16_dryRun_Thresh:	
  2474  0268                     	ds	2
  2475  0017                     _TMR1H	set	23
  2476  0016                     _TMR1L	set	22
  2477  001A                     _TMR2	set	26
  2478  0015                     _TMR0	set	21
  2479  0018                     _T1CON	set	24
  2480  000B                     _INTCON	set	11
  2481  001C                     _T2CON	set	28
  2482  001B                     _PR2	set	27
  2483  00E2                     _TMR2ON	set	226
  2484  005D                     _TMR0IE	set	93
  2485  0064                     _RA4	set	100
  2486  009D                     _CCP4IF	set	157
  2487  009C                     _CCP3IF	set	156
  2488  008A                     _CCP1IF	set	138
  2489  0090                     _CCP2IF	set	144
  2490  009E                     _CCP5IF	set	158
  2491  009B                     _TMR6IF	set	155
  2492  0089                     _TMR2IF	set	137
  2493  0099                     _TMR4IF	set	153
  2494  0088                     _TMR1IF	set	136
  2495  0075                     _RC5	set	117
  2496  005F                     _GIE	set	95
  2497  005E                     _PEIE	set	94
  2498  0097                     _WDTCON	set	151
  2499  0099                     _OSCCON	set	153
  2500  0093                     _PIE3	set	147
  2501  0092                     _PIE2	set	146
  2502  0091                     _PIE1	set	145
  2503  0095                     _OPTION_REG	set	149
  2504  008E                     _TRISC	set	142
  2505  008D                     _TRISB	set	141
  2506  008C                     _TRISA	set	140
  2507  009B                     _ADRESL	set	155
  2508  009C                     _ADRESH	set	156
  2509  009D                     _ADCON0	set	157
  2510  009E                     _ADCON1	set	158
  2511  049B                     _TMR6IE	set	1179
  2512  0499                     _TMR4IE	set	1177
  2513  0488                     _TMR1IE	set	1160
  2514  049E                     _CCP5IE	set	1182
  2515  049D                     _CCP4IE	set	1181
  2516  049C                     _CCP3IE	set	1180
  2517  048A                     _CCP1IE	set	1162
  2518  0489                     _TMR2IE	set	1161
  2519  0490                     _CCP2IE	set	1168
  2520  0495                     _C1IE	set	1173
  2521  04E9                     _GO_nDONE	set	1257
  2522  04E8                     _ADON	set	1256
  2523  010D                     _LATB	set	269
  2524  010C                     _LATA	set	268
  2525  010E                     _LATC	set	270
  2526  0112                     _CM1CON1	set	274
  2527  0111                     _CM1CON0	set	273
  2528  0117                     _FVRCON	set	279
  2529  0870                     _LATC0	set	2160
  2530  0874                     _LATC4	set	2164
  2531  0873                     _LATC3	set	2163
  2532  0871                     _LATC1	set	2161
  2533  0872                     _LATC2	set	2162
  2534  0869                     _LATB1	set	2153
  2535  086A                     _LATB2	set	2154
  2536  088E                     _C1OUT	set	2190
  2537  018D                     _ANSELB	set	397
  2538  018C                     _ANSELA	set	396
  2539  0196                     _EECON2	set	406
  2540  0193                     _EEDATL	set	403
  2541  0191                     _EEADRL	set	401
  2542  0CA9                     _WR	set	3241
  2543  0CAA                     _WREN	set	3242
  2544  0CA8                     _RD	set	3240
  2545  0CAE                     _CFGS	set	3246
  2546  0CAF                     _EEPGD	set	3247
  2547  0292                     _CCPR1H	set	658
  2548  0299                     _CCPR2H	set	665
  2549  0298                     _CCPR2L	set	664
  2550  029A                     _CCP2CON	set	666
  2551  0291                     _CCPR1L	set	657
  2552  0293                     _CCP1CON	set	659
  2553  0295                     _CCP1AS	set	661
  2554  0294                     _PWM1CON	set	660
  2555  0296                     _PSTR1CON	set	662
  2556  14AF                     _CCP1ASE	set	5295
  2557  031D                     _CCPR5H	set	797
  2558  031C                     _CCPR5L	set	796
  2559  031E                     _CCP5CON	set	798
  2560  0319                     _CCPR4H	set	793
  2561  0318                     _CCPR4L	set	792
  2562  031A                     _CCP4CON	set	794
  2563  0312                     _CCPR3H	set	786
  2564  0311                     _CCPR3L	set	785
  2565  0313                     _CCP3CON	set	787
  2566  041D                     _PR6	set	1053
  2567  0416                     _PR4	set	1046
  2568  041C                     _TMR6	set	1052
  2569  0415                     _TMR4	set	1045
  2570  041E                     _T6CON	set	1054
  2571  0417                     _T4CON	set	1047
  2572  20F2                     _TMR6ON	set	8434
  2573  20BA                     _TMR4ON	set	8378
  2574                           
  2575                           ; #config settings
  2576  0000                     
  2577                           	psect	cinit
  2578  0028                     start_initialization:	
  2579  0028                     __initialization:	
  2580                           
  2581                           ; Initialize objects allocated to BANK0
  2582  0028  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  2583  002B  00DE               	movwf	__pdataBANK0& (0+127)
  2584                           
  2585                           ; Initialize objects allocated to BANK1
  2586  002C  300B               	movlw	low __pidataBANK1
  2587  002D  0084               	movwf	4
  2588  002E  309E               	movlw	(high __pidataBANK1)| (0+128)
  2589  002F  0085               	movwf	5
  2590  0030  30E8               	movlw	low __pdataBANK1
  2591  0031  0086               	movwf	6
  2592  0032  3000               	movlw	high __pdataBANK1
  2593  0033  0087               	movwf	7
  2594  0034  3007               	movlw	7
  2595  0035  319E  2605  3180   	fcall	init_ram
  2596                           
  2597                           ; Initialize objects allocated to BANK2
  2598  0038  301A               	movlw	low __pidataBANK2
  2599  0039  0084               	movwf	4
  2600  003A  309E               	movlw	(high __pidataBANK2)| (0+128)
  2601  003B  0085               	movwf	5
  2602  003C  3068               	movlw	low __pdataBANK2
  2603  003D  0086               	movwf	6
  2604  003E  3001               	movlw	high __pdataBANK2
  2605  003F  0087               	movwf	7
  2606  0040  3008               	movlw	8
  2607  0041  319E  2605  3180   	fcall	init_ram
  2608                           
  2609                           ; Clear objects allocated to BITBANK0
  2610  0044  01DD               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2611                           
  2612                           ; Clear objects allocated to BANK0
  2613  0045  304B               	movlw	low __pbssBANK0
  2614  0046  0084               	movwf	4
  2615  0047  3000               	movlw	high __pbssBANK0
  2616  0048  0085               	movwf	5
  2617  0049  3012               	movlw	18
  2618  004A  319D  25FF  3180   	fcall	clear_ram0
  2619                           
  2620                           ; Clear objects allocated to BANK1
  2621  004D  30A0               	movlw	low __pbssBANK1
  2622  004E  0084               	movwf	4
  2623  004F  3000               	movlw	high __pbssBANK1
  2624  0050  0085               	movwf	5
  2625  0051  3048               	movlw	72
  2626  0052  319D  25FF  3180   	fcall	clear_ram0
  2627                           
  2628                           ; Clear objects allocated to BANK2
  2629  0055  3020               	movlw	low __pbssBANK2
  2630  0056  0084               	movwf	4
  2631  0057  3001               	movlw	high __pbssBANK2
  2632  0058  0085               	movwf	5
  2633  0059  3048               	movlw	72
  2634  005A  319D  25FF  3180   	fcall	clear_ram0
  2635                           
  2636                           ; Clear objects allocated to BANK3
  2637  005D  30A0               	movlw	low __pbssBANK3
  2638  005E  0084               	movwf	4
  2639  005F  3001               	movlw	high __pbssBANK3
  2640  0060  0085               	movwf	5
  2641  0061  304E               	movlw	78
  2642  0062  319D  25FF  3180   	fcall	clear_ram0
  2643                           
  2644                           ; Clear objects allocated to BANK4
  2645  0065  3020               	movlw	low __pbssBANK4
  2646  0066  0084               	movwf	4
  2647  0067  3002               	movlw	high __pbssBANK4
  2648  0068  0085               	movwf	5
  2649  0069  3048               	movlw	72
  2650  006A  319D  25FF  3180   	fcall	clear_ram0
  2651                           
  2652                           ; Clear objects allocated to BANK5
  2653  006D  30C0               	movlw	low __pbssBANK5
  2654  006E  0084               	movwf	4
  2655  006F  3002               	movlw	high __pbssBANK5
  2656  0070  0085               	movwf	5
  2657  0071  300B               	movlw	11
  2658  0072  319D  25FF         	fcall	clear_ram0
  2659  0074                     end_of_initialization:	
  2660                           ;End of C runtime variable initialization code
  2661                           
  2662  0074                     __end_of__initialization:	
  2663  0074  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2664  0075  0020               	movlb	0
  2665  0076  3188  2804         	ljmp	_main	;jump to C main() function
  2666                           
  2667                           	psect	bitbssBANK0
  2668  02E8                     __pbitbssBANK0:	
  2669  02E8                     _rising_bemf_flag:	
  2670  02E8                     	ds	1
  2671                           
  2672                           	psect	bssBANK0
  2673  004B                     __pbssBANK0:	
  2674  004B                     BVH2_Appl_Layer@Cb24_StateCnt:	
  2675  004B                     	ds	2
  2676  004D                     _Cb1_StateCnt:	
  2677  004D                     	ds	2
  2678  004F                     _ui16_Speed_mat:	
  2679  004F                     	ds	2
  2680  0051                     _ui16_IPhase_bldc:	
  2681  0051                     	ds	2
  2682  0053                     _comm_time:	
  2683  0053                     	ds	2
  2684  0055                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  2685  0055                     	ds	1
  2686  0056                     _Cb34_idPWM:	
  2687  0056                     	ds	1
  2688  0057                     _SIBFS_UbatHandling_b:	
  2689  0057                     	ds	1
  2690  0058                     _ui8_b_DResB0_c:	
  2691  0058                     	ds	1
  2692  0059                     _ui8_b_DResLocID_c:	
  2693  0059                     	ds	1
  2694  005A                     _MotorFlags:	
  2695  005A                     	ds	1
  2696  005B                     _ui16_Ubat_bldc:	
  2697  005B                     	ds	2
  2698                           
  2699                           	psect	dataBANK0
  2700  005E                     __pdataBANK0:	
  2701  005E                     _ui8_selected_lid:	
  2702  005E                     	ds	1
  2703                           
  2704                           	psect	bssBANK1
  2705  00A0                     __pbssBANK1:	
  2706  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  2707  00A0                     	ds	2
  2708  00A2                     BVH2_Appl_Layer@Cb19_Counter:	
  2709  00A2                     	ds	2
  2710  00A4                     _Cb44_StateCnt:	
  2711  00A4                     	ds	2
  2712  00A6                     _ui16_Capt_Val2:	
  2713  00A6                     	ds	2
  2714  00A8                     _ui16_Capt_Val1:	
  2715  00A8                     	ds	2
  2716  00AA                     _ui16_Capt_Val0:	
  2717  00AA                     	ds	2
  2718  00AC                     _ui16_mat_Current:	
  2719  00AC                     	ds	2
  2720  00AE                     _ui8_BattVolt_mat:	
  2721  00AE                     	ds	2
  2722  00B0                     _ui16_duty_cycle_BLDC:	
  2723  00B0                     	ds	2
  2724  00B2                     _ui16_speed_fil:	
  2725  00B2                     	ds	2
  2726  00B4                     _ui16_Ubemf_bldc:	
  2727  00B4                     	ds	2
  2728  00B6                     _ui16_phase_advancement:	
  2729  00B6                     	ds	2
  2730  00B8                     _phase_delay_counter:	
  2731  00B8                     	ds	2
  2732  00BA                     _ui16_step_cnt:	
  2733  00BA                     	ds	2
  2734  00BC                     _analog_value:	
  2735  00BC                     	ds	2
  2736  00BE                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  2737  00BE                     	ds	1
  2738  00BF                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  2739  00BF                     	ds	1
  2740  00C0                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  2741  00C0                     	ds	1
  2742  00C1                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  2743  00C1                     	ds	1
  2744  00C2                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  2745  00C2                     	ds	1
  2746  00C3                     BVH2_Appl_Layer@Cb9_StateCnt:	
  2747  00C3                     	ds	1
  2748  00C4                     BVH2_Appl_Layer@Cb51_Counter:	
  2749  00C4                     	ds	1
  2750  00C5                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  2751  00C5                     	ds	1
  2752  00C6                     _Cb56_odFixedValueSel:	
  2753  00C6                     	ds	1
  2754  00C7                     _SIBFS_Pic_etat_monitor_b:	
  2755  00C7                     	ds	1
  2756  00C8                     _SIBFS_PWM_Detection_b:	
  2757  00C8                     	ds	1
  2758  00C9                     _SIBFS_Current_Analysis_High_b:	
  2759  00C9                     	ds	1
  2760  00CA                     _Cb1_RestartCounter:	
  2761  00CA                     	ds	1
  2762  00CB                     _bool_mat_pic_etat:	
  2763  00CB                     	ds	1
  2764  00CC                     _ui8_PWMinDC_sav:	
  2765  00CC                     	ds	1
  2766  00CD                     _ui8_PWM_FreqCnt:	
  2767  00CD                     	ds	1
  2768  00CE                     _ui8_Task_Cont100ms:	
  2769  00CE                     	ds	1
  2770  00CF                     _bool_ControlLoopMode:	
  2771  00CF                     	ds	1
  2772  00D0                     _bool_mat_currAlarm_bldc:	
  2773  00D0                     	ds	1
  2774  00D1                     _ui8_PWM_dc_mat:	
  2775  00D1                     	ds	1
  2776  00D2                     _ui8_Task_Cont1ms:	
  2777  00D2                     	ds	1
  2778  00D3                     _ui8_given_supply:	
  2779  00D3                     	ds	1
  2780  00D4                     _phaseCal:	
  2781  00D4                     	ds	1
  2782  00D5                     _bool_HighCurrentAlarm:	
  2783  00D5                     	ds	1
  2784  00D6                     _bool_MotorStalled:	
  2785  00D6                     	ds	1
  2786  00D7                     _bool_DryRunningAlarm:	
  2787  00D7                     	ds	1
  2788  00D8                     _bool_CPU_TempAlarm:	
  2789  00D8                     	ds	1
  2790  00D9                     _Bcnt:	
  2791  00D9                     	ds	1
  2792  00DA                     _ui8_CompFlag:	
  2793  00DA                     	ds	1
  2794  00DB                     _ui8_UPhase_sel:	
  2795  00DB                     	ds	1
  2796  00DC                     _ui8_IPhase_sel:	
  2797  00DC                     	ds	1
  2798  00DD                     _ui8_BlankingCount:	
  2799  00DD                     	ds	1
  2800  00DE                     _comm_state:	
  2801  00DE                     	ds	1
  2802  00DF                     _ui8_StartupPWM:	
  2803  00DF                     	ds	1
  2804  00E0                     _ui8_error_Flags:	
  2805  00E0                     	ds	1
  2806  00E1                     _windowPtr1:	
  2807  00E1                     	ds	1
  2808  00E2                     _ui16_IPhase3_bldc_cal:	
  2809  00E2                     	ds	2
  2810  00E4                     _ui16_IPhase2_bldc_cal:	
  2811  00E4                     	ds	2
  2812  00E6                     _ui16_IPhase1_bldc_cal:	
  2813  00E6                     	ds	2
  2814                           
  2815                           	psect	dataBANK1
  2816  00E8                     __pdataBANK1:	
  2817  00E8                     _ui16_I_cal_Ph3:	
  2818  00E8                     	ds	2
  2819  00EA                     _ui16_I_cal_Ph2:	
  2820  00EA                     	ds	2
  2821  00EC                     _ui16_I_cal_Ph1:	
  2822  00EC                     	ds	2
  2823  00EE                     _wkpoint:	
  2824  00EE                     	ds	1
  2825                           
  2826                           	psect	bssBANK2
  2827  0120                     __pbssBANK2:	
  2828  0120                     _ui8_current_cal:	
  2829  0120                     	ds	3
  2830  0123                     _sum:	
  2831  0123                     	ds	2
  2832  0125                     _ui16_comm_time_max:	
  2833  0125                     	ds	2
  2834  0127                     _filterTempNTC:	
  2835  0127                     	ds	2
  2836  0129                     _filterPh:	
  2837  0129                     	ds	2
  2838  012B                     _filter3:	
  2839  012B                     	ds	2
  2840  012D                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  2841  012D                     	ds	1
  2842  012E                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  2843  012E                     	ds	1
  2844  012F                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  2845  012F                     	ds	1
  2846  0130                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  2847  0130                     	ds	1
  2848  0131                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  2849  0131                     	ds	1
  2850  0132                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  2851  0132                     	ds	1
  2852  0133                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  2853  0133                     	ds	1
  2854  0134                     _Cb56_odPumpOff:	
  2855  0134                     	ds	1
  2856  0135                     _Cb56_oUbat_Alarm_High:	
  2857  0135                     	ds	1
  2858  0136                     _Cb44_oShutoff:	
  2859  0136                     	ds	1
  2860  0137                     _Cb44_oAlarm:	
  2861  0137                     	ds	1
  2862  0138                     _Cb34_odPumpOff:	
  2863  0138                     	ds	1
  2864  0139                     _Cb34_odFixedValueSel:	
  2865  0139                     	ds	1
  2866  013A                     _Cb34_odFixedLowValueSel:	
  2867  013A                     	ds	1
  2868  013B                     _Cb34_oPWM_SC_Alarm:	
  2869  013B                     	ds	1
  2870  013C                     _Cb34_oPWM_Alarm:	
  2871  013C                     	ds	1
  2872  013D                     _Cb1_oShutoff:	
  2873  013D                     	ds	1
  2874  013E                     _Cb1_oCurrentAlarm:	
  2875  013E                     	ds	1
  2876  013F                     _ui8_Duty_Cycle_In_Ratio:	
  2877  013F                     	ds	1
  2878  0140                     _ui8_Pulse_State:	
  2879  0140                     	ds	1
  2880  0141                     _ui8_PWMoutvalue:	
  2881  0141                     	ds	1
  2882  0142                     _ui8_lastTaskvalue:	
  2883  0142                     	ds	1
  2884  0143                     _ui8_Task_Cont5ms:	
  2885  0143                     	ds	1
  2886  0144                     _ui8_Task_Cont3ms:	
  2887  0144                     	ds	1
  2888  0145                     _bool_PWMin_Freq_err_Alarm:	
  2889  0145                     	ds	1
  2890  0146                     _bool_UbatAlarm:	
  2891  0146                     	ds	1
  2892  0147                     _bool_CPU_TempRedAlarm:	
  2893  0147                     	ds	1
  2894  0148                     _bool_PWMin_err_Alarm:	
  2895  0148                     	ds	1
  2896  0149                     _ui8_Kp_mat:	
  2897  0149                     	ds	1
  2898  014A                     _TEMPERATURE_CALIBRATION:	
  2899  014A                     	ds	1
  2900  014B                     _FCT_STAMP_ABSENCE:	
  2901  014B                     	ds	1
  2902  014C                     _ICT_STAMP_PRESENCE:	
  2903  014C                     	ds	1
  2904  014D                     __ELINMIntSpace:	
  2905  014D                     	ds	1
  2906  014E                     __ELINMIntMessageBufferPointer:	
  2907  014E                     	ds	1
  2908  014F                     __ELINMIntReadBack:	
  2909  014F                     	ds	1
  2910  0150                     __ELINMIntRXMessageSize:	
  2911  0150                     	ds	1
  2912  0151                     __ELINMIntMessageSize:	
  2913  0151                     	ds	1
  2914  0152                     __ELINMIntStatus1:	
  2915  0152                     	ds	1
  2916  0153                     __ELINMIntStatus:	
  2917  0153                     	ds	1
  2918  0154                     __ELINMIntMessageTag:	
  2919  0154                     	ds	1
  2920  0155                     _ui8_cnt_PWM:	
  2921  0155                     	ds	1
  2922  0156                     _ui8_cnt1:	
  2923  0156                     	ds	1
  2924  0157                     _DC_pic_etat_monitor:	
  2925  0157                     	ds	1
  2926  0158                     _Error_PICetatMonitor:	
  2927  0158                     	ds	1
  2928  0159                     _ui8_lin_sim_Failures_ena:	
  2929  0159                     	ds	1
  2930  015A                     _ui8_lin_sim_Failures:	
  2931  015A                     	ds	1
  2932  015B                     _ui8_b_DResB5_c:	
  2933  015B                     	ds	1
  2934  015C                     _ui8_b_DResB4_c:	
  2935  015C                     	ds	1
  2936  015D                     _ui8_b_DResB3_c:	
  2937  015D                     	ds	1
  2938  015E                     _ui8_b_DResB2_c:	
  2939  015E                     	ds	1
  2940  015F                     _ui8_b_DResB1_c:	
  2941  015F                     	ds	1
  2942  0160                     _ui8_b_DResServID_c:	
  2943  0160                     	ds	1
  2944  0161                     _CompFlag_prev:	
  2945  0161                     	ds	1
  2946  0162                     _ui8_sampleState:	
  2947  0162                     	ds	1
  2948  0163                     _ui8_Ubemf_sel:	
  2949  0163                     	ds	1
  2950  0164                     _BlankingCountdbg:	
  2951  0164                     	ds	1
  2952  0165                     _bemf_filter:	
  2953  0165                     	ds	1
  2954  0166                     _bool_start_demand_mat:	
  2955  0166                     	ds	1
  2956  0167                     _ui8_temp_calibration:	
  2957  0167                     	ds	1
  2958                           
  2959                           	psect	dataBANK2
  2960  0168                     __pdataBANK2:	
  2961  0168                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  2962  0168                     	ds	4
  2963  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  2964  016C                     	ds	1
  2965  016D                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  2966  016D                     	ds	1
  2967  016E                     _ui8_failure:	
  2968  016E                     	ds	1
  2969  016F                     _ict_stamp:	
  2970  016F                     	ds	1
  2971                           
  2972                           	psect	bssBANK3
  2973  01A0                     __pbssBANK3:	
  2974  01A0                     _checksum:	
  2975  01A0                     	ds	6
  2976  01A6                     BVH2_Appl_Layer@Cb24_BadCnt:	
  2977  01A6                     	ds	2
  2978  01A8                     BVH2_Appl_Layer@Cb14_StateCnt:	
  2979  01A8                     	ds	2
  2980  01AA                     _prev_Debounce_Tmr:	
  2981  01AA                     	ds	2
  2982  01AC                     _Debounce_Tmr:	
  2983  01AC                     	ds	2
  2984  01AE                     _prev_RA4:	
  2985  01AE                     	ds	2
  2986  01B0                     _ui16_PWMin_failCnt:	
  2987  01B0                     	ds	2
  2988  01B2                     _ui16_Speed_demand_mat_min:	
  2989  01B2                     	ds	2
  2990  01B4                     _ui16_Speed_demand_mat_Max:	
  2991  01B4                     	ds	2
  2992  01B6                     _ui16_Speed_demand_mat:	
  2993  01B6                     	ds	2
  2994  01B8                     _ui8_Ki_mat:	
  2995  01B8                     	ds	2
  2996  01BA                     _ui16_mat_inpTemp:	
  2997  01BA                     	ds	2
  2998  01BC                     _ui16_PWM_Freq_In:	
  2999  01BC                     	ds	2
  3000  01BE                     _ui16_PWM_Freq_mat:	
  3001  01BE                     	ds	2
  3002  01C0                     _ui16_duty_cycle_mat:	
  3003  01C0                     	ds	2
  3004  01C2                     _ui16_speed_rar:	
  3005  01C2                     	ds	2
  3006  01C4                     _ui8_fixed_start_speed_mat:	
  3007  01C4                     	ds	2
  3008  01C6                     _ui16_NTC_Temp_bldc_mean_cal:	
  3009  01C6                     	ds	2
  3010  01C8                     _filter1:	
  3011  01C8                     	ds	2
  3012  01CA                     _ui16_CPU_Temp_bldc_mean:	
  3013  01CA                     	ds	2
  3014  01CC                     _ui16_NTC_Temp_bldc_mean:	
  3015  01CC                     	ds	2
  3016  01CE                     _ui16_fir_UPhase_mittel:	
  3017  01CE                     	ds	2
  3018  01D0                     _ui16_fir_IPhase_mean:	
  3019  01D0                     	ds	2
  3020  01D2                     _ui16_fir_Bat_mittel:	
  3021  01D2                     	ds	2
  3022  01D4                     _ui16_Temp_cal:	
  3023  01D4                     	ds	2
  3024  01D6                     _ui16_NTC_Temp_bldc:	
  3025  01D6                     	ds	2
  3026  01D8                     _ui16_IPhase1_bldc:	
  3027  01D8                     	ds	2
  3028  01DA                     _ui16_UPhase_bldc:	
  3029  01DA                     	ds	2
  3030  01DC                     _ui8_debug_out0:	
  3031  01DC                     	ds	1
  3032  01DD                     _bool_StalledMotorStop:	
  3033  01DD                     	ds	1
  3034  01DE                     _bool_PIC_Alarm:	
  3035  01DE                     	ds	1
  3036  01DF                     _bl_Pumpoff_Alarm:	
  3037  01DF                     	ds	1
  3038  01E0                     _ui8_CMD_Mode:	
  3039  01E0                     	ds	1
  3040  01E1                     _ui8_calib_flag:	
  3041  01E1                     	ds	1
  3042  01E2                     _ui8_i_wob:	
  3043  01E2                     	ds	1
  3044  01E3                     _ui8_DebugCnt:	
  3045  01E3                     	ds	1
  3046  01E4                     _ui8_Sync_Cont10ms:	
  3047  01E4                     	ds	1
  3048  01E5                     _ui8_lin_calibration:	
  3049  01E5                     	ds	1
  3050  01E6                     _LIN_DEACTIVATION:	
  3051  01E6                     	ds	1
  3052  01E7                     _FCT_STAMP_WRITING:	
  3053  01E7                     	ds	1
  3054  01E8                     _SPEED_READING:	
  3055  01E8                     	ds	1
  3056  01E9                     _CURRENT_CALIBRATION:	
  3057  01E9                     	ds	1
  3058  01EA                     _VER_SUPPLY_VOLTAGE_VALUE:	
  3059  01EA                     	ds	1
  3060  01EB                     _VER_SW_VERSION_NUMBER:	
  3061  01EB                     	ds	1
  3062  01EC                     _ui16_Duty_Cycle_In:	
  3063  01EC                     	ds	2
  3064                           
  3065                           	psect	bssBANK4
  3066  0220                     __pbssBANK4:	
  3067  0220                     _B:	
  3068  0220                     	ds	16
  3069  0230                     _inputArray1:	
  3070  0230                     	ds	16
  3071  0240                     __ELINMIntSleepTimeout:	
  3072  0240                     	ds	4
  3073  0244                     _ui16_CMD_Mode_Tmr:	
  3074  0244                     	ds	2
  3075  0246                     _ui16_wait:	
  3076  0246                     	ds	2
  3077  0248                     _ui16_Timer_VaL1:	
  3078  0248                     	ds	2
  3079  024A                     __ELINMIntTHeaderMax:	
  3080  024A                     	ds	2
  3081  024C                     __ELINMIntTHeaderMin:	
  3082  024C                     	ds	2
  3083  024E                     __ELINMIntTFrameMax:	
  3084  024E                     	ds	2
  3085  0250                     __ELINMIntTFrameMin:	
  3086  0250                     	ds	2
  3087  0252                     __ELINMIntRXCRC:	
  3088  0252                     	ds	2
  3089  0254                     _ui16_ambiant_temperature:	
  3090  0254                     	ds	2
  3091  0256                     _ui16_CPU_Temp_bldc:	
  3092  0256                     	ds	2
  3093  0258                     _ui16_IPhase3_bldc:	
  3094  0258                     	ds	2
  3095  025A                     _ui16_IPhase2_bldc:	
  3096  025A                     	ds	2
  3097  025C                     _ui16_phase_angle:	
  3098  025C                     	ds	2
  3099  025E                     _phase_delay_counter_debug:	
  3100  025E                     	ds	2
  3101  0260                     _ui8_zero_cros_cnt:	
  3102  0260                     	ds	2
  3103  0262                     _ui16_Task_Cont500ms:	
  3104  0262                     	ds	2
  3105  0264                     _ui16_CPU_Temp_bldc_mean_cal:	
  3106  0264                     	ds	2
  3107  0266                     _filterTempCPU:	
  3108  0266                     	ds	2
  3109                           
  3110                           	psect	bssBANK5
  3111  02C0                     __pbssBANK5:	
  3112  02C0                     __ELINMIntMessageBuffer:	
  3113  02C0                     	ds	11
  3114                           
  3115                           	psect	inittext
  3116  1E05                     init_ram:	
  3117  1E05  00FE               	movwf	126
  3118  1E06                     initloop:	
  3119  1E06  0012               	moviw fsr0++
  3120  1E07  001E               	movwi fsr1++
  3121  1E08  0BFE               	decfsz	126,f
  3122  1E09  2E06               	goto	initloop
  3123  1E0A  3400               	retlw	0
  3124                           
  3125                           	psect	clrtext
  3126  1DFF                     clear_ram0:	
  3127                           ;	Called with FSR0 containing the base address, and
  3128                           ;	WREG with the size to clear
  3129                           
  3130  1DFF  0064               	clrwdt	;clear the watchdog before getting into this loop
  3131  1E00                     clrloop0:	
  3132  1E00  0180               	clrf	0	;clear RAM location pointed to by FSR
  3133  1E01  3101               	addfsr 0,1
  3134  1E02  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3135  1E03  2E00               	goto	clrloop0	;have we reached the end yet?
  3136  1E04  3400               	retlw	0	;all done for this memory range, return
  3137                           
  3138                           	psect	cstackBANK5
  3139  02A0                     __pcstackBANK5:	
  3140  02A0                     _BVH2_Appl_Layer$1050:	
  3141                           
  3142                           ; 4 bytes @ 0x0
  3143  02A0                     	ds	4
  3144  02A4                     _BVH2_Appl_Layer$1047:	
  3145                           
  3146                           ; 2 bytes @ 0x4
  3147  02A4                     	ds	2
  3148  02A6                     _BVH2_Appl_Layer$1049:	
  3149                           
  3150                           ; 2 bytes @ 0x6
  3151  02A6                     	ds	2
  3152  02A8                     BVH2_Appl_Layer@Sb2_Switch2:	
  3153                           
  3154                           ; 2 bytes @ 0x8
  3155  02A8                     	ds	2
  3156  02AA                     _BVH2_Appl_Layer$1039:	
  3157                           
  3158                           ; 1 bytes @ 0xA
  3159  02AA                     	ds	1
  3160  02AB                     _BVH2_Appl_Layer$1040:	
  3161                           
  3162                           ; 1 bytes @ 0xB
  3163  02AB                     	ds	1
  3164  02AC                     _BVH2_Appl_Layer$1041:	
  3165                           
  3166                           ; 1 bytes @ 0xC
  3167  02AC                     	ds	1
  3168  02AD                     _BVH2_Appl_Layer$1042:	
  3169                           
  3170                           ; 1 bytes @ 0xD
  3171  02AD                     	ds	1
  3172  02AE                     _BVH2_Appl_Layer$1043:	
  3173                           
  3174                           ; 1 bytes @ 0xE
  3175  02AE                     	ds	1
  3176  02AF                     _BVH2_Appl_Layer$1044:	
  3177                           
  3178                           ; 1 bytes @ 0xF
  3179  02AF                     	ds	1
  3180  02B0                     BVH2_Appl_Layer@Sb2_Error:	
  3181                           
  3182                           ; 2 bytes @ 0x10
  3183  02B0                     	ds	2
  3184  02B2                     BVH2_Appl_Layer@Sb3_Product1:	
  3185                           
  3186                           ; 2 bytes @ 0x12
  3187  02B2                     	ds	2
  3188  02B4                     BVH2_Appl_Layer@Cb24_Reset:	
  3189                           
  3190                           ; 1 bytes @ 0x14
  3191  02B4                     	ds	1
  3192  02B5                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  3193                           
  3194                           ; 1 bytes @ 0x15
  3195  02B5                     	ds	1
  3196  02B6                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  3197                           
  3198                           ; 1 bytes @ 0x16
  3199  02B6                     	ds	1
  3200  02B7                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  3201                           
  3202                           ; 1 bytes @ 0x17
  3203  02B7                     	ds	1
  3204  02B8                     BVH2_Appl_Layer@Sb2_Switch5:	
  3205                           
  3206                           ; 2 bytes @ 0x18
  3207  02B8                     	ds	2
  3208  02BA                     BVH2_Appl_Layer@Sb3_Sum1:	
  3209                           
  3210                           ; 2 bytes @ 0x1A
  3211  02BA                     	ds	2
  3212  02BC                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  3213                           
  3214                           ; 1 bytes @ 0x1C
  3215  02BC                     	ds	1
  3216  02BD                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  3217                           
  3218                           ; 1 bytes @ 0x1D
  3219  02BD                     	ds	1
  3220  02BE                     BVH2_Appl_Layer@Sb4_PI_sum:	
  3221                           
  3222                           ; 2 bytes @ 0x1E
  3223  02BE                     	ds	2
  3224                           
  3225                           	psect	cstackCOMMON
  3226  0070                     __pcstackCOMMON:	
  3227  0070                     ?_InitMotorRun:	
  3228  0070                     ?_commutate:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0070                     ?_PWM_Write_Out:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0070                     ?_read_eeprom_data:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0070                     ?_PWMReadDC:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0070                     ?_PWM_CTRL:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0070                     ??_PWM_CTRL:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0070                     ?_interrupt_PWMCapture:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0070                     ??_interrupt_PWMCapture:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0070                     ?_Oscill_Source_Block:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0070                     ?_timer_init:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0070                     ?_PWM_Capture_init:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0070                     ?_clear_timer:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0070                     ?_BVH2_Appl_Layer:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0070                     ?_ADC_Init:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0070                     ?_ADC_Wait:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0070                     ?_FILTER_Init:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0070                     ?_FILTER_Ubat:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291  0070                     ?_FILTER_IPhase:	
  3292                           ; 1 bytes @ 0x0
  3293                           
  3294  0070                     ?_FILTER_Temp:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297  0070                     ?_Get_Analog_Value:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0070                     ?_BLDCWait:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0070                     ??_BLDCWait:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0070                     ?_init_bldc:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0070                     ?_interrrupt_bldc:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0070                     ?_InitMotorStop:	
  3313                           ; 1 bytes @ 0x0
  3314                           
  3315  0070                     ?_DiagInit:	
  3316                           ; 1 bytes @ 0x0
  3317                           
  3318  0070                     ?_SetDiagAlarm:	
  3319                           ; 1 bytes @ 0x0
  3320                           
  3321  0070                     ?_Task1ms:	
  3322                           ; 1 bytes @ 0x0
  3323                           
  3324  0070                     ??_Task1ms:	
  3325                           ; 1 bytes @ 0x0
  3326                           
  3327  0070                     ?_interrupt_handler:	
  3328                           ; 1 bytes @ 0x0
  3329                           
  3330  0070                     ?_I_calibrationInit:	
  3331                           ; 1 bytes @ 0x0
  3332                           
  3333  0070                     ?_init_ports:	
  3334                           ; 1 bytes @ 0x0
  3335                           
  3336  0070                     ?_system_init:	
  3337                           ; 1 bytes @ 0x0
  3338                           
  3339  0070                     ?_main:	
  3340                           ; 1 bytes @ 0x0
  3341                           
  3342  0070                     ?i1_ADC_Wait:	
  3343                           ; 1 bytes @ 0x0
  3344                           
  3345  0070                     ??i1_ADC_Wait:	
  3346                           ; 1 bytes @ 0x0
  3347                           
  3348  0070                     ?i1_commutate:	
  3349                           ; 1 bytes @ 0x0
  3350                           
  3351  0070                     ??i1_commutate:	
  3352                           ; 1 bytes @ 0x0
  3353                           
  3354  0070                     ?___lwdiv:	
  3355                           ; 1 bytes @ 0x0
  3356                           
  3357  0070                     ?i1_ADC_Read:	
  3358                           ; 2 bytes @ 0x0
  3359                           
  3360  0070                     ?i1___wmul:	
  3361                           ; 2 bytes @ 0x0
  3362                           
  3363  0070                     ___lwdiv@divisor:	
  3364                           ; 2 bytes @ 0x0
  3365                           
  3366  0070                     i1___wmul@multiplier:	
  3367                           ; 2 bytes @ 0x0
  3368                           
  3369                           
  3370                           ; 2 bytes @ 0x0
  3371  0070                     	ds	2
  3372  0072                     ??i1_ADC_Read:	
  3373  0072                     ___lwdiv@dividend:	
  3374                           ; 1 bytes @ 0x2
  3375                           
  3376  0072                     i1___wmul@multiplicand:	
  3377                           ; 2 bytes @ 0x2
  3378                           
  3379                           
  3380                           ; 2 bytes @ 0x2
  3381  0072                     	ds	1
  3382  0073                     i1ADC_Read@i:	
  3383                           
  3384                           ; 1 bytes @ 0x3
  3385  0073                     	ds	1
  3386  0074                     ??___lwdiv:	
  3387  0074                     ??i1___wmul:	
  3388                           ; 1 bytes @ 0x4
  3389                           
  3390  0074                     i1___wmul@product:	
  3391                           ; 1 bytes @ 0x4
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x4
  3395  0074                     	ds	1
  3396  0075                     ___lwdiv@quotient:	
  3397                           
  3398                           ; 2 bytes @ 0x5
  3399  0075                     	ds	2
  3400  0077                     ___lwdiv@counter:	
  3401                           
  3402                           ; 1 bytes @ 0x7
  3403  0077                     	ds	5
  3404  007C                     ??_interrupt_handler:	
  3405                           
  3406                           	psect	cstackBANK0
  3407  0020                     __pcstackBANK0:	
  3408                           ; 1 bytes @ 0xC
  3409                           
  3410  0020                     ??_interrrupt_bldc:	
  3411                           
  3412                           ; 1 bytes @ 0x0
  3413  0020                     	ds	4
  3414  0024                     interrrupt_bldc@ui32_tmp:	
  3415                           
  3416                           ; 4 bytes @ 0x4
  3417  0024                     	ds	4
  3418  0028                     ??_commutate:	
  3419  0028                     ??_PWM_Write_Out:	
  3420                           ; 1 bytes @ 0x8
  3421                           
  3422  0028                     ??_read_eeprom_data:	
  3423                           ; 1 bytes @ 0x8
  3424                           
  3425  0028                     ??_Oscill_Source_Block:	
  3426                           ; 1 bytes @ 0x8
  3427                           
  3428  0028                     ??_PWM_Capture_init:	
  3429                           ; 1 bytes @ 0x8
  3430                           
  3431  0028                     ??_clear_timer:	
  3432                           ; 1 bytes @ 0x8
  3433                           
  3434  0028                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  3435                           ; 1 bytes @ 0x8
  3436                           
  3437  0028                     ??_Cb34_PWM_Detection_node_fcn1:	
  3438                           ; 1 bytes @ 0x8
  3439                           
  3440  0028                     ??_Cb56_UbatHandling_node_fcn2:	
  3441                           ; 1 bytes @ 0x8
  3442                           
  3443  0028                     ??_Cb1_Current_An___High_node_fcn1:	
  3444                           ; 1 bytes @ 0x8
  3445                           
  3446  0028                     ??_ADC_Init:	
  3447                           ; 1 bytes @ 0x8
  3448                           
  3449  0028                     ??_ADC_Wait:	
  3450                           ; 1 bytes @ 0x8
  3451                           
  3452  0028                     ??_FILTER_Ubat:	
  3453                           ; 1 bytes @ 0x8
  3454                           
  3455  0028                     ??_FILTER_IPhase:	
  3456                           ; 1 bytes @ 0x8
  3457                           
  3458  0028                     ??_FILTER_Temp:	
  3459                           ; 1 bytes @ 0x8
  3460                           
  3461  0028                     ??_InitMotorStop:	
  3462                           ; 1 bytes @ 0x8
  3463                           
  3464  0028                     ??_init_ports:	
  3465                           ; 1 bytes @ 0x8
  3466                           
  3467  0028                     ?_ADC_Read:	
  3468                           ; 1 bytes @ 0x8
  3469                           
  3470  0028                     ?___wmul:	
  3471                           ; 2 bytes @ 0x8
  3472                           
  3473  0028                     ?___tmul:	
  3474                           ; 2 bytes @ 0x8
  3475                           
  3476  0028                     ?___lmul:	
  3477                           ; 3 bytes @ 0x8
  3478                           
  3479  0028                     ?___aldiv:	
  3480                           ; 4 bytes @ 0x8
  3481                           
  3482  0028                     PWM_Capture_init@ui8_CCP_Nb:	
  3483                           ; 4 bytes @ 0x8
  3484                           
  3485  0028                     clear_timer@ui8_TmrNb:	
  3486                           ; 1 bytes @ 0x8
  3487                           
  3488  0028                     ___wmul@multiplier:	
  3489                           ; 1 bytes @ 0x8
  3490                           
  3491  0028                     ___tmul@multiplier:	
  3492                           ; 2 bytes @ 0x8
  3493                           
  3494  0028                     ___lmul@multiplier:	
  3495                           ; 3 bytes @ 0x8
  3496                           
  3497  0028                     ___aldiv@divisor:	
  3498                           ; 4 bytes @ 0x8
  3499                           
  3500                           
  3501                           ; 4 bytes @ 0x8
  3502  0028                     	ds	1
  3503  0029                     ??_timer_init:	
  3504  0029                     read_eeprom_data@ui8_adress:	
  3505                           ; 1 bytes @ 0x9
  3506                           
  3507  0029                     PWM_Write_Out@ui8_DutyCycle_Out:	
  3508                           ; 1 bytes @ 0x9
  3509                           
  3510  0029                     timer_init@ui8_TmrNb:	
  3511                           ; 1 bytes @ 0x9
  3512                           
  3513                           
  3514                           ; 1 bytes @ 0x9
  3515  0029                     	ds	1
  3516  002A                     ??_ADC_Read:	
  3517  002A                     ??_DiagInit:	
  3518                           ; 1 bytes @ 0xA
  3519                           
  3520  002A                     ??_SetDiagAlarm:	
  3521                           ; 1 bytes @ 0xA
  3522                           
  3523  002A                     read_eeprom_data@ui8_adress_data:	
  3524                           ; 1 bytes @ 0xA
  3525                           
  3526  002A                     ___wmul@multiplicand:	
  3527                           ; 1 bytes @ 0xA
  3528                           
  3529                           
  3530                           ; 2 bytes @ 0xA
  3531  002A                     	ds	1
  3532  002B                     ADC_Read@i:	
  3533  002B                     ___tmul@multiplicand:	
  3534                           ; 1 bytes @ 0xB
  3535                           
  3536                           
  3537                           ; 3 bytes @ 0xB
  3538  002B                     	ds	1
  3539  002C                     ??_FILTER_Init:	
  3540  002C                     ??_I_calibrationInit:	
  3541                           ; 1 bytes @ 0xC
  3542                           
  3543  002C                     ??___wmul:	
  3544                           ; 1 bytes @ 0xC
  3545                           
  3546  002C                     ___wmul@product:	
  3547                           ; 1 bytes @ 0xC
  3548                           
  3549  002C                     ___lmul@multiplicand:	
  3550                           ; 2 bytes @ 0xC
  3551                           
  3552  002C                     ___aldiv@dividend:	
  3553                           ; 4 bytes @ 0xC
  3554                           
  3555                           
  3556                           ; 4 bytes @ 0xC
  3557  002C                     	ds	2
  3558  002E                     ??___tmul:	
  3559  002E                     ___tmul@product:	
  3560                           ; 1 bytes @ 0xE
  3561                           
  3562                           
  3563                           ; 3 bytes @ 0xE
  3564  002E                     	ds	2
  3565  0030                     ??___lmul:	
  3566  0030                     ??___aldiv:	
  3567                           ; 1 bytes @ 0x10
  3568                           
  3569  0030                     ___lmul@product:	
  3570                           ; 1 bytes @ 0x10
  3571                           
  3572                           
  3573                           ; 4 bytes @ 0x10
  3574  0030                     	ds	1
  3575  0031                     ?___ltdiv:	
  3576  0031                     ___aldiv@counter:	
  3577                           ; 3 bytes @ 0x11
  3578                           
  3579  0031                     ___ltdiv@divisor:	
  3580                           ; 1 bytes @ 0x11
  3581                           
  3582                           
  3583                           ; 3 bytes @ 0x11
  3584  0031                     	ds	1
  3585  0032                     ___aldiv@sign:	
  3586                           
  3587                           ; 1 bytes @ 0x12
  3588  0032                     	ds	1
  3589  0033                     ___aldiv@quotient:	
  3590                           
  3591                           ; 4 bytes @ 0x13
  3592  0033                     	ds	1
  3593  0034                     ??_InitMotorRun:	
  3594  0034                     ??_Get_Analog_Value:	
  3595                           ; 1 bytes @ 0x14
  3596                           
  3597  0034                     ??_init_bldc:	
  3598                           ; 1 bytes @ 0x14
  3599                           
  3600  0034                     ___ltdiv@dividend:	
  3601                           ; 1 bytes @ 0x14
  3602                           
  3603                           
  3604                           ; 3 bytes @ 0x14
  3605  0034                     	ds	1
  3606  0035                     ??_system_init:	
  3607                           
  3608                           ; 1 bytes @ 0x15
  3609  0035                     	ds	2
  3610  0037                     ??_BVH2_Appl_Layer:	
  3611  0037                     ??___ltdiv:	
  3612                           ; 1 bytes @ 0x17
  3613                           
  3614                           
  3615                           ; 1 bytes @ 0x17
  3616  0037                     	ds	1
  3617  0038                     ___ltdiv@quotient:	
  3618                           
  3619                           ; 3 bytes @ 0x18
  3620  0038                     	ds	3
  3621  003B                     ___ltdiv@counter:	
  3622                           
  3623                           ; 1 bytes @ 0x1B
  3624  003B                     	ds	1
  3625  003C                     ??_PWMReadDC:	
  3626                           
  3627                           ; 1 bytes @ 0x1C
  3628  003C                     	ds	11
  3629  0047                     ??_main:	
  3630                           
  3631                           ; 1 bytes @ 0x27
  3632  0047                     	ds	4
  3633                           
  3634                           	psect	maintext
  3635  0804                     __pmaintext:	
  3636 ;;
  3637 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3638 ;;
  3639 ;; *************** function _main *****************
  3640 ;; Defined at:
  3641 ;;		line 630 in file "../main.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : B1F/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3655 ;;      Params:         0       0       0       0       0       0       0       0
  3656 ;;      Locals:         0       0       0       0       0       0       0       0
  3657 ;;      Temps:          0       4       0       0       0       0       0       0
  3658 ;;      Totals:         0       4       0       0       0       0       0       0
  3659 ;;Total ram usage:        4 bytes
  3660 ;; Hardware stack levels required when called:    7
  3661 ;; This function calls:
  3662 ;;		_BVH2_Appl_Layer
  3663 ;;		_Get_Analog_Value
  3664 ;;		_InitMotorRun
  3665 ;;		_InitMotorStop
  3666 ;;		_PWMReadDC
  3667 ;;		_SetDiagAlarm
  3668 ;;		___wmul
  3669 ;;		_clear_timer
  3670 ;;		_system_init
  3671 ;; This function is called by:
  3672 ;;		Startup code after reset
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           
  3677                           ;psect for function _main
  3678  0804                     _main:	
  3679                           
  3680                           ;main.c: 642: system_init( );
  3681                           
  3682                           ;incstack = 0
  3683                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3684  0804  3193  23DB  3188   	fcall	_system_init
  3685                           
  3686                           ;main.c: 643: clear_timer( 4 );
  3687  0807  3004               	movlw	4
  3688  0808  319F  2744  3188   	fcall	_clear_timer
  3689                           
  3690                           ;main.c: 644: ui8_lastTaskvalue = 0;
  3691  080B  0022               	movlb	2	; select bank2
  3692  080C  01C2               	clrf	_ui8_lastTaskvalue^(0+256)
  3693  080D                     l11496:	
  3694                           ;main.c: 695: while( 1 )
  3695                           
  3696                           
  3697                           ;main.c: 697: {;main.c: 699: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  3698  080D  0022               	movlb	2	; select bank2
  3699  080E  0842               	movf	_ui8_lastTaskvalue^(0+256),w
  3700  080F  0020               	movlb	0	; select bank0
  3701  0810  00C7               	movwf	??_main
  3702  0811  01C8               	clrf	??_main+1
  3703  0812  09C7               	comf	??_main,f
  3704  0813  09C8               	comf	??_main+1,f
  3705  0814  0AC7               	incf	??_main,f
  3706  0815  1903               	skipnz
  3707  0816  0AC8               	incf	??_main+1,f
  3708  0817  0021               	movlb	1	; select bank1
  3709  0818  0852               	movf	_ui8_Task_Cont1ms^(0+128),w
  3710  0819  0020               	movlb	0	; select bank0
  3711  081A  0747               	addwf	??_main,w
  3712  081B  00C9               	movwf	??_main+2
  3713  081C  0848               	movf	??_main+1,w
  3714  081D  1803               	skipnc
  3715  081E  0A48               	incf	??_main+1,w
  3716  081F  00CA               	movwf	??_main+3
  3717  0820  0849               	movf	??_main+2,w
  3718  0821  044A               	iorwf	??_main+3,w
  3719  0822  1903               	btfsc	3,2
  3720  0823  280D               	goto	l11496
  3721                           
  3722                           ;main.c: 701: {;main.c: 707: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  3723  0824  0021               	movlb	1	; select bank1
  3724  0825  0852               	movf	_ui8_Task_Cont1ms^(0+128),w
  3725  0826  0020               	movlb	0	; select bank0
  3726  0827  00C7               	movwf	??_main
  3727  0828  0847               	movf	??_main,w
  3728  0829  0022               	movlb	2	; select bank2
  3729  082A  00C2               	movwf	_ui8_lastTaskvalue^(0+256)
  3730                           
  3731                           ;main.c: 710: ui8_Task_Cont3ms++;
  3732  082B  3001               	movlw	1
  3733  082C  0020               	movlb	0	; select bank0
  3734  082D  00C7               	movwf	??_main
  3735  082E  0847               	movf	??_main,w
  3736  082F  0022               	movlb	2	; select bank2
  3737  0830  07C4               	addwf	_ui8_Task_Cont3ms^(0+256),f
  3738                           
  3739                           ;main.c: 711: ui8_Task_Cont5ms++;
  3740  0831  3001               	movlw	1
  3741  0832  0020               	movlb	0	; select bank0
  3742  0833  00C7               	movwf	??_main
  3743  0834  0847               	movf	??_main,w
  3744  0835  0022               	movlb	2	; select bank2
  3745  0836  07C3               	addwf	_ui8_Task_Cont5ms^(0+256),f
  3746                           
  3747                           ;main.c: 712: ui8_Task_Cont100ms++;
  3748  0837  3001               	movlw	1
  3749  0838  0020               	movlb	0	; select bank0
  3750  0839  00C7               	movwf	??_main
  3751  083A  0847               	movf	??_main,w
  3752  083B  0021               	movlb	1	; select bank1
  3753  083C  07CE               	addwf	_ui8_Task_Cont100ms^(0+128),f
  3754                           
  3755                           ;main.c: 931: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  3756  083D  307D               	movlw	125
  3757  083E  0020               	movlb	0	; select bank0
  3758  083F  009B               	movwf	27	;volatile
  3759                           
  3760                           ;main.c: 932: ui16_duty_cycle_BLDC = ui16_duty_cycle_mat*5/4;
  3761  0840  0023               	movlb	3	; select bank3
  3762  0841  0841               	movf	(_ui16_duty_cycle_mat+1)^(0+384),w
  3763  0842  0020               	movlb	0	; select bank0
  3764  0843  00A9               	movwf	___wmul@multiplier+1
  3765  0844  0023               	movlb	3	; select bank3
  3766  0845  0840               	movf	_ui16_duty_cycle_mat^(0+384),w
  3767  0846  0020               	movlb	0	; select bank0
  3768  0847  00A8               	movwf	___wmul@multiplier
  3769  0848  3005               	movlw	5
  3770  0849  00AA               	movwf	___wmul@multiplicand
  3771  084A  3000               	movlw	0
  3772  084B  00AB               	movwf	___wmul@multiplicand+1
  3773  084C  319E  26E4  3188   	fcall	___wmul
  3774  084F  0020               	movlb	0	; select bank0
  3775  0850  0828               	movf	?___wmul,w
  3776  0851  00C7               	movwf	??_main
  3777  0852  0829               	movf	?___wmul+1,w
  3778  0853  00C8               	movwf	??_main+1
  3779  0854  36C8               	lsrf	??_main+1,f
  3780  0855  0CC7               	rrf	??_main,f
  3781  0856  36C8               	lsrf	??_main+1,f
  3782  0857  0CC7               	rrf	??_main,f
  3783  0858  0847               	movf	??_main,w
  3784  0859  0021               	movlb	1	; select bank1
  3785  085A  00B0               	movwf	_ui16_duty_cycle_BLDC^(0+128)
  3786  085B  0020               	movlb	0	; select bank0
  3787  085C  0848               	movf	??_main+1,w
  3788  085D  0021               	movlb	1	; select bank1
  3789  085E  00B1               	movwf	(_ui16_duty_cycle_BLDC+1)^(0+128)
  3790                           
  3791                           ;main.c: 949: Get_Analog_Value( );
  3792  085F  3187  27F7  3188   	fcall	_Get_Analog_Value
  3793                           
  3794                           ;main.c: 995: if( ui8_Task_Cont3ms > 2 )
  3795  0862  3003               	movlw	3
  3796  0863  0022               	movlb	2	; select bank2
  3797  0864  0244               	subwf	_ui8_Task_Cont3ms^(0+256),w
  3798  0865  1803               	btfsc	3,0
  3799                           
  3800                           ;main.c: 997: {;main.c: 999: ui8_Task_Cont3ms = 0;
  3801  0866  01C4               	clrf	_ui8_Task_Cont3ms^(0+256)
  3802                           
  3803                           ;main.c: 1034: };main.c: 1040: if( ui8_Task_Cont5ms > 4 )
  3804  0867  3005               	movlw	5
  3805  0868  0243               	subwf	_ui8_Task_Cont5ms^(0+256),w
  3806  0869  1C03               	skipc
  3807  086A  2916               	goto	l11574
  3808                           
  3809                           ;main.c: 1042: {;main.c: 1046: ui8_Task_Cont5ms = 0;
  3810  086B  01C3               	clrf	_ui8_Task_Cont5ms^(0+256)
  3811  086C  0064               	clrwdt	;# 
  3812                           
  3813                           ;main.c: 1054: ui8_PWM_dc_mat = PWMReadDC( );
  3814  086D  3196  268A  3188   	fcall	_PWMReadDC
  3815  0870  0020               	movlb	0	; select bank0
  3816  0871  00C7               	movwf	??_main
  3817  0872  0847               	movf	??_main,w
  3818  0873  0021               	movlb	1	; select bank1
  3819  0874  00D1               	movwf	_ui8_PWM_dc_mat^(0+128)
  3820                           
  3821                           ;main.c: 1057: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  3822  0875  0023               	movlb	3	; select bank3
  3823  0876  083D               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  3824  0877  00BF               	movwf	(_ui16_PWM_Freq_mat+1)^(0+384)
  3825  0878  083C               	movf	_ui16_PWM_Freq_In^(0+384),w
  3826  0879  00BE               	movwf	_ui16_PWM_Freq_mat^(0+384)
  3827                           
  3828                           ;main.c: 1058: ui16_Speed_mat = ui16_speed_fil;
  3829  087A  0021               	movlb	1	; select bank1
  3830  087B  0833               	movf	(_ui16_speed_fil+1)^(0+128),w
  3831  087C  0020               	movlb	0	; select bank0
  3832  087D  00D0               	movwf	_ui16_Speed_mat+1
  3833  087E  0021               	movlb	1	; select bank1
  3834  087F  0832               	movf	_ui16_speed_fil^(0+128),w
  3835  0880  0020               	movlb	0	; select bank0
  3836  0881  00CF               	movwf	_ui16_Speed_mat
  3837                           
  3838                           ;main.c: 1059: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  3839  0882  0023               	movlb	3	; select bank3
  3840  0883  0847               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  3841  0884  00BB               	movwf	(_ui16_mat_inpTemp+1)^(0+384)
  3842  0885  0846               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  3843  0886  00BA               	movwf	_ui16_mat_inpTemp^(0+384)
  3844                           
  3845                           ;main.c: 1060: ui8_Ki_mat = 5;
  3846  0887  3005               	movlw	5
  3847  0888  00B8               	movwf	_ui8_Ki_mat^(0+384)
  3848  0889  3000               	movlw	0
  3849  088A  00B9               	movwf	(_ui8_Ki_mat^(0+384)+1)
  3850                           
  3851                           ;main.c: 1061: ui8_Kp_mat = 0;
  3852  088B  0022               	movlb	2	; select bank2
  3853  088C  01C9               	clrf	_ui8_Kp_mat^(0+256)
  3854                           
  3855                           ;main.c: 1109: ui16_Speed_demand_mat = PWM_trans_table[ ui8_PWM_dc_mat ];
  3856  088D  0021               	movlb	1	; select bank1
  3857  088E  0851               	movf	_ui8_PWM_dc_mat^(0+128),w
  3858  088F  0020               	movlb	0	; select bank0
  3859  0890  00C7               	movwf	??_main
  3860  0891  01C8               	clrf	??_main+1
  3861  0892  35C7               	lslf	??_main,f
  3862  0893  0DC8               	rlf	??_main+1,f
  3863  0894  3000               	movlw	low (_PWM_trans_table| (0+32768))
  3864  0895  0747               	addwf	??_main,w
  3865  0896  0084               	movwf	4
  3866  0897  3090               	movlw	high (_PWM_trans_table| (0+32768))
  3867  0898  3D48               	addwfc	??_main+1,w
  3868  0899  0085               	movwf	5
  3869  089A  3F00               	moviw [0]fsr0
  3870  089B  0023               	movlb	3	; select bank3
  3871  089C  00B6               	movwf	_ui16_Speed_demand_mat^(0+384)
  3872  089D  3F01               	moviw [1]fsr0
  3873  089E  00B7               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  3874                           
  3875                           ;main.c: 1112: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 200 ] );
  3876  089F  3090               	movlw	low ((_PWM_trans_table+400)| (0+32768))
  3877  08A0  0084               	movwf	4
  3878  08A1  3091               	movlw	high ((_PWM_trans_table+400)| (0+32768))
  3879  08A2  0085               	movwf	5
  3880  08A3  3F00               	moviw [0]fsr0
  3881  08A4  00B4               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  3882  08A5  3F01               	moviw [1]fsr0
  3883  08A6  00B5               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  3884                           
  3885                           ;main.c: 1115: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 20 ] );
  3886  08A7  3028               	movlw	low ((_PWM_trans_table+40)| (0+32768))
  3887  08A8  0084               	movwf	4
  3888  08A9  3090               	movlw	high ((_PWM_trans_table+40)| (0+32768))
  3889  08AA  0085               	movwf	5
  3890  08AB  3F00               	moviw [0]fsr0
  3891  08AC  00B2               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  3892  08AD  3F01               	moviw [1]fsr0
  3893  08AE  00B3               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  3894                           
  3895                           ;main.c: 1134: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  3896  08AF  0853               	movf	(_ui16_fir_Bat_mittel+1)^(0+384),w
  3897  08B0  0020               	movlb	0	; select bank0
  3898  08B1  00C8               	movwf	??_main+1
  3899  08B2  0023               	movlb	3	; select bank3
  3900  08B3  0852               	movf	_ui16_fir_Bat_mittel^(0+384),w
  3901  08B4  0020               	movlb	0	; select bank0
  3902  08B5  00C7               	movwf	??_main
  3903  08B6  36C8               	lsrf	??_main+1,f
  3904  08B7  0CC7               	rrf	??_main,f
  3905  08B8  36C8               	lsrf	??_main+1,f
  3906  08B9  0CC7               	rrf	??_main,f
  3907  08BA  0847               	movf	??_main,w
  3908  08BB  00C9               	movwf	??_main+2
  3909  08BC  01CA               	clrf	??_main+3
  3910  08BD  0849               	movf	??_main+2,w
  3911  08BE  0021               	movlb	1	; select bank1
  3912  08BF  00AE               	movwf	_ui8_BattVolt_mat^(0+128)
  3913  08C0  0020               	movlb	0	; select bank0
  3914  08C1  084A               	movf	??_main+3,w
  3915  08C2  0021               	movlb	1	; select bank1
  3916  08C3  00AF               	movwf	(_ui8_BattVolt_mat+1)^(0+128)
  3917                           
  3918                           ;main.c: 1135: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  3919  08C4  0023               	movlb	3	; select bank3
  3920  08C5  0851               	movf	(_ui16_fir_IPhase_mean+1)^(0+384),w
  3921  08C6  0021               	movlb	1	; select bank1
  3922  08C7  00AD               	movwf	(_ui16_mat_Current+1)^(0+128)
  3923  08C8  0023               	movlb	3	; select bank3
  3924  08C9  0850               	movf	_ui16_fir_IPhase_mean^(0+384),w
  3925  08CA  0021               	movlb	1	; select bank1
  3926  08CB  00AC               	movwf	_ui16_mat_Current^(0+128)
  3927                           
  3928                           ;main.c: 1136: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  3929  08CC  3000               	movlw	0
  3930  08CD  0020               	movlb	0	; select bank0
  3931  08CE  185A               	btfsc	_MotorFlags,0
  3932  08CF  3001               	movlw	1
  3933  08D0  0021               	movlb	1	; select bank1
  3934  08D1  00D0               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  3935                           
  3936                           ;main.c: 1147: bool_ControlLoopMode = 0;
  3937  08D2  01CF               	clrf	_bool_ControlLoopMode^(0+128)
  3938                           
  3939                           ;main.c: 1155: BVH2_Appl_Layer( );
  3940  08D3  3180  2078  3188   	fcall	_BVH2_Appl_Layer
  3941                           
  3942                           ;main.c: 1158: ui8_ResetMatlab = 0;
  3943  08D6  0021               	movlb	1	; select bank1
  3944  08D7  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  3945                           
  3946                           ;main.c: 1164: if( ui16_duty_cycle_mat == 0 )
  3947  08D8  0023               	movlb	3	; select bank3
  3948  08D9  0840               	movf	_ui16_duty_cycle_mat^(0+384),w
  3949  08DA  0441               	iorwf	(_ui16_duty_cycle_mat+1)^(0+384),w
  3950  08DB  1D03               	btfss	3,2
  3951  08DC  28E1               	goto	l11554
  3952                           
  3953                           ;main.c: 1166: {;main.c: 1168: InitMotorStop( );
  3954  08DD  319E  263A  3188   	fcall	_InitMotorStop
  3955                           
  3956                           ;main.c: 1171: }
  3957  08E0  28E4               	goto	l11556
  3958  08E1                     l11554:	
  3959                           
  3960                           ;main.c: 1174: else;main.c: 1175: {;main.c: 1177: InitMotorRun( );
  3961  08E1  3192  2202  3188   	fcall	_InitMotorRun
  3962  08E4                     l11556:	
  3963                           
  3964                           ;main.c: 1180: };main.c: 1187: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  3965  08E4  0022               	movlb	2	; select bank2
  3966  08E5  0848               	movf	_bool_PWMin_err_Alarm^(0+256),w
  3967  08E6  3901               	andlw	1
  3968  08E7  0021               	movlb	1	; select bank1
  3969  08E8  1060               	bcf	_ui8_error_Flags^(0+128),0
  3970  08E9  1D03               	skipz
  3971  08EA  1460               	bsf	_ui8_error_Flags^(0+128),0
  3972                           
  3973                           ;main.c: 1188: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  3974  08EB  0858               	movf	_bool_CPU_TempAlarm^(0+128),w
  3975  08EC  3901               	andlw	1
  3976  08ED  10E0               	bcf	_ui8_error_Flags^(0+128),1
  3977  08EE  1D03               	skipz
  3978  08EF  14E0               	bsf	_ui8_error_Flags^(0+128),1
  3979                           
  3980                           ;main.c: 1189: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  3981  08F0  0022               	movlb	2	; select bank2
  3982  08F1  0847               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  3983  08F2  3901               	andlw	1
  3984  08F3  0021               	movlb	1	; select bank1
  3985  08F4  13E0               	bcf	_ui8_error_Flags^(0+128),7
  3986  08F5  1D03               	skipz
  3987  08F6  17E0               	bsf	_ui8_error_Flags^(0+128),7
  3988                           
  3989                           ;main.c: 1190: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  3990  08F7  0855               	movf	_bool_HighCurrentAlarm^(0+128),w
  3991  08F8  3901               	andlw	1
  3992  08F9  1160               	bcf	_ui8_error_Flags^(0+128),2
  3993  08FA  1D03               	skipz
  3994  08FB  1560               	bsf	_ui8_error_Flags^(0+128),2
  3995                           
  3996                           ;main.c: 1191: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  3997  08FC  0856               	movf	_bool_MotorStalled^(0+128),w
  3998  08FD  3901               	andlw	1
  3999  08FE  11E0               	bcf	_ui8_error_Flags^(0+128),3
  4000  08FF  1D03               	skipz
  4001  0900  15E0               	bsf	_ui8_error_Flags^(0+128),3
  4002                           
  4003                           ;main.c: 1192: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  4004  0901  0857               	movf	_bool_DryRunningAlarm^(0+128),w
  4005  0902  3901               	andlw	1
  4006  0903  1260               	bcf	_ui8_error_Flags^(0+128),4
  4007  0904  1D03               	skipz
  4008  0905  1660               	bsf	_ui8_error_Flags^(0+128),4
  4009                           
  4010                           ;main.c: 1193: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  4011  0906  0022               	movlb	2	; select bank2
  4012  0907  0846               	movf	_bool_UbatAlarm^(0+256),w
  4013  0908  3901               	andlw	1
  4014  0909  0021               	movlb	1	; select bank1
  4015  090A  1360               	bcf	_ui8_error_Flags^(0+128),6
  4016  090B  1D03               	skipz
  4017  090C  1760               	bsf	_ui8_error_Flags^(0+128),6
  4018                           
  4019                           ;main.c: 1194: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  4020  090D  0022               	movlb	2	; select bank2
  4021  090E  0845               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  4022  090F  3901               	andlw	1
  4023  0910  0021               	movlb	1	; select bank1
  4024  0911  12E0               	bcf	_ui8_error_Flags^(0+128),5
  4025  0912  1D03               	skipz
  4026  0913  16E0               	bsf	_ui8_error_Flags^(0+128),5
  4027                           
  4028                           ;main.c: 1199: MotorFlags.bits.B0 = 0;
  4029  0914  0020               	movlb	0	; select bank0
  4030  0915  105A               	bcf	_MotorFlags,0
  4031  0916                     l11574:	
  4032                           
  4033                           ;main.c: 1255: };main.c: 1261: if( ui8_Task_Cont100ms == 25 )
  4034  0916  3019               	movlw	25
  4035  0917  0021               	movlb	1	; select bank1
  4036  0918  064E               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  4037  0919  1D03               	btfss	3,2
  4038  091A  291E               	goto	l11584
  4039                           
  4040                           ;main.c: 1263: {;main.c: 1274: SetDiagAlarm( );
  4041  091B  3192  229D  3188   	fcall	_SetDiagAlarm
  4042  091E                     l11584:	
  4043                           ;main.c: 1434: {
  4044                           
  4045                           ;main.c: 1384: {
  4046                           
  4047                           ;main.c: 1346: {
  4048                           
  4049                           
  4050                           ;main.c: 1476: };main.c: 1482: if( ui8_Task_Cont100ms > 100 )
  4051  091E  3065               	movlw	101
  4052  091F  0021               	movlb	1	; select bank1
  4053  0920  024E               	subwf	_ui8_Task_Cont100ms^(0+128),w
  4054  0921  1803               	btfsc	3,0
  4055                           
  4056                           ;main.c: 1484: {;main.c: 1488: ui8_Task_Cont100ms = 0;
  4057  0922  01CE               	clrf	_ui8_Task_Cont100ms^(0+128)
  4058                           
  4059                           ;main.c: 1528: };main.c: 1556: bool_start_demand_mat = 0;
  4060  0923  0022               	movlb	2	; select bank2
  4061  0924  01E6               	clrf	_bool_start_demand_mat^(0+256)
  4062                           
  4063                           ;main.c: 1565: else;main.c: 1566: {
  4064                           
  4065                           ;main.c: 1562: }
  4066  0925  280D               	goto	l11496
  4067  0926                     __end_of_main:	
  4068                           
  4069                           	psect	text1
  4070  13DB                     __ptext1:	
  4071 ;; *************** function _system_init *****************
  4072 ;; Defined at:
  4073 ;;		line 545 in file "../main.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4087 ;;      Params:         0       0       0       0       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0       0
  4090 ;;      Totals:         0       0       0       0       0       0       0       0
  4091 ;;Total ram usage:        0 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    6
  4094 ;; This function calls:
  4095 ;;		_ADC_Init
  4096 ;;		_DiagInit
  4097 ;;		_FILTER_Init
  4098 ;;		_I_calibrationInit
  4099 ;;		_Oscill_Source_Block
  4100 ;;		_PWM_Capture_init
  4101 ;;		_init_bldc
  4102 ;;		_init_ports
  4103 ;;		_timer_init
  4104 ;; This function is called by:
  4105 ;;		_main
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           
  4110                           ;psect for function _system_init
  4111  13DB                     _system_init:	
  4112                           
  4113                           ;main.c: 549: OPTION_REG = 0b10000001;
  4114                           
  4115                           ;incstack = 0
  4116                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4117  13DB  3081               	movlw	129
  4118  13DC  0021               	movlb	1	; select bank1
  4119  13DD  0095               	movwf	21	;volatile
  4120                           
  4121                           ;main.c: 558: ui8_ResetMatlab = 1;
  4122  13DE  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4123  13DF  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  4124                           
  4125                           ;main.c: 559: GIE = 0;
  4126  13E0  138B               	bcf	11,7	;volatile
  4127                           
  4128                           ;main.c: 560: INTCON = 0;
  4129  13E1  018B               	clrf	11	;volatile
  4130                           
  4131                           ;main.c: 561: PIE1 = 0;
  4132  13E2  0191               	clrf	17	;volatile
  4133                           
  4134                           ;main.c: 562: PIE2 = 0;
  4135  13E3  0192               	clrf	18	;volatile
  4136                           
  4137                           ;main.c: 563: PIE3 = 0;
  4138  13E4  0193               	clrf	19	;volatile
  4139                           
  4140                           ;main.c: 565: ui16_Timer_VaL1 = 0;
  4141  13E5  0024               	movlb	4	; select bank4
  4142  13E6  01C8               	clrf	_ui16_Timer_VaL1^(0+512)
  4143  13E7  01C9               	clrf	(_ui16_Timer_VaL1+1)^(0+512)
  4144                           
  4145                           ;main.c: 566: ui8_Task_Cont3ms = 0;
  4146  13E8  0022               	movlb	2	; select bank2
  4147  13E9  01C4               	clrf	_ui8_Task_Cont3ms^(0+256)
  4148                           
  4149                           ;main.c: 567: ui8_Task_Cont5ms = 0;
  4150  13EA  01C3               	clrf	_ui8_Task_Cont5ms^(0+256)
  4151                           
  4152                           ;main.c: 568: ui8_Task_Cont100ms = 0;
  4153  13EB  0021               	movlb	1	; select bank1
  4154  13EC  01CE               	clrf	_ui8_Task_Cont100ms^(0+128)
  4155                           
  4156                           ;main.c: 569: ui8_DebugCnt = 0;
  4157  13ED  0023               	movlb	3	; select bank3
  4158  13EE  01E3               	clrf	_ui8_DebugCnt^(0+384)
  4159                           
  4160                           ;main.c: 571: ui8_Sync_Cont10ms = 0;
  4161  13EF  01E4               	clrf	_ui8_Sync_Cont10ms^(0+384)
  4162                           
  4163                           ;main.c: 573: ui16_dryRun_Thresh = 73;
  4164  13F0  3049               	movlw	73
  4165  13F1  0024               	movlb	4	; select bank4
  4166  13F2  00E8               	movwf	_ui16_dryRun_Thresh^(0+512)
  4167  13F3  3000               	movlw	0
  4168  13F4  00E9               	movwf	(_ui16_dryRun_Thresh^(0+512)+1)
  4169                           
  4170                           ;main.c: 575: ui16_Current_Thresh = 360;
  4171  13F5  3068               	movlw	104
  4172  13F6  0023               	movlb	3	; select bank3
  4173  13F7  00EE               	movwf	_ui16_Current_Thresh^(0+384)
  4174  13F8  3001               	movlw	1
  4175  13F9  00EF               	movwf	(_ui16_Current_Thresh^(0+384)+1)
  4176                           
  4177                           ;main.c: 577: init_ports( );
  4178  13FA  319E  2657  3193   	fcall	_init_ports
  4179                           
  4180                           ;main.c: 588: Oscill_Source_Block( );
  4181  13FD  319D  25F9  3193   	fcall	_Oscill_Source_Block
  4182                           
  4183                           ;main.c: 589: timer_init( 1 );
  4184  1400  3001               	movlw	1
  4185  1401  3193  230E  3193   	fcall	_timer_init
  4186                           
  4187                           ;main.c: 590: timer_init( 4 );
  4188  1404  3004               	movlw	4
  4189  1405  3193  230E  3193   	fcall	_timer_init
  4190                           
  4191                           ;main.c: 591: timer_init( 6 );
  4192  1408  3006               	movlw	6
  4193  1409  3193  230E  3193   	fcall	_timer_init
  4194                           
  4195                           ;main.c: 594: PWM_Capture_init( 5 );
  4196  140C  3005               	movlw	5
  4197  140D  3194  2424  3193   	fcall	_PWM_Capture_init
  4198                           
  4199                           ;main.c: 595: ADC_Init( );
  4200  1410  319E  2622  3193   	fcall	_ADC_Init
  4201                           
  4202                           ;main.c: 596: DiagInit( );
  4203  1413  319E  262D  3193   	fcall	_DiagInit
  4204                           
  4205                           ;main.c: 597: FILTER_Init( );
  4206  1416  319F  278B  3193   	fcall	_FILTER_Init
  4207                           
  4208                           ;main.c: 600: ui16_Temp_cal = 0;
  4209  1419  0023               	movlb	3	; select bank3
  4210  141A  01D4               	clrf	_ui16_Temp_cal^(0+384)
  4211  141B  01D5               	clrf	(_ui16_Temp_cal+1)^(0+384)
  4212                           
  4213                           ;main.c: 610: I_calibrationInit();
  4214  141C  3197  2736  3193   	fcall	_I_calibrationInit
  4215                           
  4216                           ;main.c: 612: init_bldc( );
  4217  141F  319F  27D6         	fcall	_init_bldc
  4218                           
  4219                           ;main.c: 614: PEIE = 1;
  4220  1421  170B               	bsf	11,6	;volatile
  4221                           
  4222                           ;main.c: 615: GIE = 1;
  4223  1422  178B               	bsf	11,7	;volatile
  4224  1423  0008               	return
  4225  1424                     __end_of_system_init:	
  4226                           
  4227                           	psect	text2
  4228  130E                     __ptext2:	
  4229 ;; *************** function _timer_init *****************
  4230 ;; Defined at:
  4231 ;;		line 73 in file "../timer.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  ui8_TmrNb       1    9[BANK0 ] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4245 ;;      Params:         0       0       0       0       0       0       0       0
  4246 ;;      Locals:         0       1       0       0       0       0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0       0       0
  4248 ;;      Totals:         0       1       0       0       0       0       0       0
  4249 ;;Total ram usage:        1 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    4
  4252 ;; This function calls:
  4253 ;;		_clear_timer
  4254 ;; This function is called by:
  4255 ;;		_system_init
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function _timer_init
  4261  130E                     _timer_init:	
  4262                           
  4263                           ;incstack = 0
  4264                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4265                           ;timer_init@ui8_TmrNb stored from wreg
  4266  130E  0020               	movlb	0	; select bank0
  4267  130F  00A9               	movwf	timer_init@ui8_TmrNb
  4268                           
  4269                           ;timer.c: 77: switch( ui8_TmrNb )
  4270  1310  2B3A               	goto	l5836
  4271  1311                     l5806:	
  4272                           ;timer.c: 79: {;timer.c: 81: case 0:
  4273                           
  4274                           
  4275                           ;timer.c: 83: {;timer.c: 86: clear_timer( 0 );
  4276  1311  3000               	movlw	0
  4277  1312  319F  2744         	fcall	_clear_timer
  4278                           
  4279                           ;timer.c: 87: TMR0IE = 0;
  4280  1314  128B               	bcf	11,5	;volatile
  4281                           
  4282                           ;timer.c: 88: break;
  4283  1315  0008               	return
  4284  1316                     l5810:	
  4285                           ;timer.c: 90: };timer.c: 93: case 1:
  4286                           
  4287                           
  4288                           ;timer.c: 95: {;timer.c: 98: clear_timer( 1 );
  4289  1316  3001               	movlw	1
  4290  1317  319F  2744         	fcall	_clear_timer
  4291                           
  4292                           ;timer.c: 99: T1CON = 0b01110101;
  4293  1319  3075               	movlw	117
  4294  131A  0020               	movlb	0	; select bank0
  4295  131B  0098               	movwf	24	;volatile
  4296                           
  4297                           ;timer.c: 100: TMR1IE = 0;
  4298  131C  0021               	movlb	1	; select bank1
  4299  131D  1011               	bcf	17,0	;volatile
  4300                           
  4301                           ;timer.c: 101: break;
  4302  131E  0008               	return
  4303  131F                     l5816:	
  4304                           ;timer.c: 103: };timer.c: 106: case 2:
  4305                           
  4306                           
  4307                           ;timer.c: 108: {;timer.c: 111: clear_timer( 2 );
  4308  131F  3002               	movlw	2
  4309  1320  319F  2744         	fcall	_clear_timer
  4310                           
  4311                           ;timer.c: 112: T2CON = 0b00000111;
  4312  1322  3007               	movlw	7
  4313  1323  0020               	movlb	0	; select bank0
  4314  1324  009C               	movwf	28	;volatile
  4315                           
  4316                           ;timer.c: 113: TMR2IE = 0;
  4317  1325  0021               	movlb	1	; select bank1
  4318  1326  1091               	bcf	17,1	;volatile
  4319                           
  4320                           ;timer.c: 114: break;
  4321  1327  0008               	return
  4322  1328                     l5822:	
  4323                           ;timer.c: 116: };timer.c: 119: case 4:
  4324                           
  4325                           
  4326                           ;timer.c: 121: {;timer.c: 124: clear_timer( 4 );
  4327  1328  3004               	movlw	4
  4328  1329  319F  2744         	fcall	_clear_timer
  4329                           
  4330                           ;timer.c: 125: T4CON = 0b00001110;
  4331  132B  300E               	movlw	14
  4332  132C  0028               	movlb	8	; select bank8
  4333  132D  0097               	movwf	23	;volatile
  4334                           
  4335                           ;timer.c: 129: TMR4IE = 1;
  4336  132E  0021               	movlb	1	; select bank1
  4337  132F  1493               	bsf	19,1	;volatile
  4338                           
  4339                           ;timer.c: 131: break;
  4340  1330  0008               	return
  4341  1331                     l5828:	
  4342                           ;timer.c: 133: };timer.c: 136: case 6:
  4343                           
  4344                           
  4345                           ;timer.c: 138: {;timer.c: 141: clear_timer( 6 );
  4346  1331  3006               	movlw	6
  4347  1332  319F  2744         	fcall	_clear_timer
  4348                           
  4349                           ;timer.c: 142: T6CON = 0b00000101;
  4350  1334  3005               	movlw	5
  4351  1335  0028               	movlb	8	; select bank8
  4352  1336  009E               	movwf	30	;volatile
  4353                           
  4354                           ;timer.c: 161: TMR6IE = 0;
  4355  1337  0021               	movlb	1	; select bank1
  4356  1338  1193               	bcf	19,3	;volatile
  4357                           
  4358                           ;timer.c: 181: };timer.c: 183: }
  4359                           
  4360                           ;timer.c: 176: {;timer.c: 178: break;
  4361                           
  4362                           ;timer.c: 171: };timer.c: 175: default:
  4363                           
  4364                           ;timer.c: 169: break;
  4365  1339  0008               	return
  4366  133A                     l5836:	
  4367  133A  0020               	movlb	0	; select bank0
  4368  133B  0829               	movf	timer_init@ui8_TmrNb,w
  4369                           
  4370                           ; Switch size 1, requested type "space"
  4371                           ; Number of cases is 5, Range of values is 0 to 6
  4372                           ; switch strategies available:
  4373                           ; Name         Instructions Cycles
  4374                           ; simple_byte           16     9 (average)
  4375                           ; direct_byte           20     6 (fixed)
  4376                           ; jumptable            260     6 (fixed)
  4377                           ;	Chosen strategy is simple_byte
  4378  133C  3A00               	xorlw	0	; case 0
  4379  133D  1903               	skipnz
  4380  133E  2B11               	goto	l5806
  4381  133F  3A01               	xorlw	1	; case 1
  4382  1340  1903               	skipnz
  4383  1341  2B16               	goto	l5810
  4384  1342  3A03               	xorlw	3	; case 2
  4385  1343  1903               	skipnz
  4386  1344  2B1F               	goto	l5816
  4387  1345  3A06               	xorlw	6	; case 4
  4388  1346  1903               	skipnz
  4389  1347  2B28               	goto	l5822
  4390  1348  3A02               	xorlw	2	; case 6
  4391  1349  1903               	skipnz
  4392  134A  2B31               	goto	l5828
  4393  134B  2B4C               	goto	l1713
  4394  134C                     l1713:	
  4395  134C  0008               	return
  4396  134D                     __end_of_timer_init:	
  4397                           
  4398                           	psect	text3
  4399  1F44                     __ptext3:	
  4400 ;; *************** function _clear_timer *****************
  4401 ;; Defined at:
  4402 ;;		line 302 in file "../timer.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  ui8_TmrNb       1    8[BANK0 ] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4416 ;;      Params:         0       0       0       0       0       0       0       0
  4417 ;;      Locals:         0       1       0       0       0       0       0       0
  4418 ;;      Temps:          0       0       0       0       0       0       0       0
  4419 ;;      Totals:         0       1       0       0       0       0       0       0
  4420 ;;Total ram usage:        1 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    3
  4423 ;; This function calls:
  4424 ;;		Nothing
  4425 ;; This function is called by:
  4426 ;;		_main
  4427 ;;		_timer_init
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           
  4432                           ;psect for function _clear_timer
  4433  1F44                     _clear_timer:	
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  4437                           ;clear_timer@ui8_TmrNb stored from wreg
  4438  1F44  0020               	movlb	0	; select bank0
  4439  1F45  00A8               	movwf	clear_timer@ui8_TmrNb
  4440                           
  4441                           ;timer.c: 306: switch( ui8_TmrNb )
  4442  1F46  2F54               	goto	l5646
  4443  1F47                     l5634:	
  4444                           ;timer.c: 308: {;timer.c: 310: case 0:
  4445                           
  4446                           
  4447                           ;timer.c: 312: {;timer.c: 314: TMR0 = 0;
  4448  1F47  0195               	clrf	21	;volatile
  4449                           
  4450                           ;timer.c: 315: break;
  4451  1F48  0008               	return
  4452  1F49                     l5636:	
  4453                           ;timer.c: 317: };timer.c: 320: case 1:
  4454                           
  4455                           
  4456                           ;timer.c: 322: {;timer.c: 324: TMR1L = 0x00;
  4457  1F49  0196               	clrf	22	;volatile
  4458                           
  4459                           ;timer.c: 325: TMR1H = 0x00;
  4460  1F4A  0197               	clrf	23	;volatile
  4461                           
  4462                           ;timer.c: 326: break;
  4463  1F4B  0008               	return
  4464  1F4C                     l5638:	
  4465                           ;timer.c: 328: };timer.c: 331: case 2:
  4466                           
  4467                           
  4468                           ;timer.c: 333: {;timer.c: 335: TMR2 = 0;
  4469  1F4C  019A               	clrf	26	;volatile
  4470                           
  4471                           ;timer.c: 336: break;
  4472  1F4D  0008               	return
  4473  1F4E                     l5640:	
  4474                           ;timer.c: 338: };timer.c: 341: case 4:
  4475                           
  4476                           
  4477                           ;timer.c: 343: {;timer.c: 345: TMR4 = 0;
  4478  1F4E  0028               	movlb	8	; select bank8
  4479  1F4F  0195               	clrf	21	;volatile
  4480                           
  4481                           ;timer.c: 346: break;
  4482  1F50  0008               	return
  4483  1F51                     l5642:	
  4484                           ;timer.c: 348: };timer.c: 351: case 6:
  4485                           
  4486                           
  4487                           ;timer.c: 353: {;timer.c: 355: TMR6 = 0;
  4488  1F51  0028               	movlb	8	; select bank8
  4489  1F52  019C               	clrf	28	;volatile
  4490                           
  4491                           ;timer.c: 368: };timer.c: 370: }
  4492                           
  4493                           ;timer.c: 363: {;timer.c: 365: break;
  4494                           
  4495                           ;timer.c: 358: };timer.c: 362: default:
  4496                           
  4497                           ;timer.c: 356: break;
  4498  1F53  0008               	return
  4499  1F54                     l5646:	
  4500  1F54  0020               	movlb	0	; select bank0
  4501  1F55  0828               	movf	clear_timer@ui8_TmrNb,w
  4502                           
  4503                           ; Switch size 1, requested type "space"
  4504                           ; Number of cases is 5, Range of values is 0 to 6
  4505                           ; switch strategies available:
  4506                           ; Name         Instructions Cycles
  4507                           ; simple_byte           16     9 (average)
  4508                           ; direct_byte           20     6 (fixed)
  4509                           ; jumptable            260     6 (fixed)
  4510                           ;	Chosen strategy is simple_byte
  4511  1F56  3A00               	xorlw	0	; case 0
  4512  1F57  1903               	skipnz
  4513  1F58  2F47               	goto	l5634
  4514  1F59  3A01               	xorlw	1	; case 1
  4515  1F5A  1903               	skipnz
  4516  1F5B  2F49               	goto	l5636
  4517  1F5C  3A03               	xorlw	3	; case 2
  4518  1F5D  1903               	skipnz
  4519  1F5E  2F4C               	goto	l5638
  4520  1F5F  3A06               	xorlw	6	; case 4
  4521  1F60  1903               	skipnz
  4522  1F61  2F4E               	goto	l5640
  4523  1F62  3A02               	xorlw	2	; case 6
  4524  1F63  1903               	skipnz
  4525  1F64  2F51               	goto	l5642
  4526  1F65  2F66               	goto	l1736
  4527  1F66                     l1736:	
  4528  1F66  0008               	return
  4529  1F67                     __end_of_clear_timer:	
  4530                           
  4531                           	psect	text4
  4532  1E57                     __ptext4:	
  4533 ;; *************** function _init_ports *****************
  4534 ;; Defined at:
  4535 ;;		line 404 in file "../main.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;		None
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4549 ;;      Params:         0       0       0       0       0       0       0       0
  4550 ;;      Locals:         0       0       0       0       0       0       0       0
  4551 ;;      Temps:          0       0       0       0       0       0       0       0
  4552 ;;      Totals:         0       0       0       0       0       0       0       0
  4553 ;;Total ram usage:        0 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    3
  4556 ;; This function calls:
  4557 ;;		Nothing
  4558 ;; This function is called by:
  4559 ;;		_system_init
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _init_ports
  4565  1E57                     _init_ports:	
  4566                           
  4567                           ;main.c: 411: ANSELA = 0b00100111;
  4568                           
  4569                           ;incstack = 0
  4570                           ; Regs used in _init_ports: [wreg+status,2]
  4571  1E57  3027               	movlw	39
  4572  1E58  0023               	movlb	3	; select bank3
  4573  1E59  008C               	movwf	12	;volatile
  4574                           
  4575                           ;main.c: 412: ANSELB = 0b00101001;
  4576  1E5A  3029               	movlw	41
  4577  1E5B  008D               	movwf	13	;volatile
  4578                           
  4579                           ;main.c: 415: LATA = 0;
  4580  1E5C  0022               	movlb	2	; select bank2
  4581  1E5D  018C               	clrf	12	;volatile
  4582                           
  4583                           ;main.c: 416: LATB = 0;
  4584  1E5E  018D               	clrf	13	;volatile
  4585                           
  4586                           ;main.c: 417: LATC = 0;
  4587  1E5F  018E               	clrf	14	;volatile
  4588                           
  4589                           ;main.c: 498: TRISA = 0b01111111;
  4590  1E60  307F               	movlw	127
  4591  1E61  0021               	movlb	1	; select bank1
  4592  1E62  008C               	movwf	12	;volatile
  4593                           
  4594                           ;main.c: 507: TRISB = 0b00111001;
  4595  1E63  3039               	movlw	57
  4596  1E64  008D               	movwf	13	;volatile
  4597                           
  4598                           ;main.c: 516: TRISC = 0b00000000;
  4599  1E65  018E               	clrf	14	;volatile
  4600  1E66  0008               	return
  4601  1E67                     __end_of_init_ports:	
  4602                           
  4603                           	psect	text5
  4604  1FD6                     __ptext5:	
  4605 ;; *************** function _init_bldc *****************
  4606 ;; Defined at:
  4607 ;;		line 207 in file "../bldc.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;		None
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;		None
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      void 
  4614 ;; Registers used:
  4615 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4621 ;;      Params:         0       0       0       0       0       0       0       0
  4622 ;;      Locals:         0       0       0       0       0       0       0       0
  4623 ;;      Temps:          0       1       0       0       0       0       0       0
  4624 ;;      Totals:         0       1       0       0       0       0       0       0
  4625 ;;Total ram usage:        1 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    5
  4628 ;; This function calls:
  4629 ;;		_InitMotorRun
  4630 ;; This function is called by:
  4631 ;;		_system_init
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           
  4636                           ;psect for function _init_bldc
  4637  1FD6                     _init_bldc:	
  4638                           
  4639                           ;bldc.c: 218: PSTR1CON = 0;
  4640                           
  4641                           ;incstack = 0
  4642                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4643  1FD6  0025               	movlb	5	; select bank5
  4644  1FD7  0196               	clrf	22	;volatile
  4645                           
  4646                           ;bldc.c: 222: CM1CON0 = 0x80;
  4647  1FD8  3080               	movlw	128
  4648  1FD9  0022               	movlb	2	; select bank2
  4649  1FDA  0091               	movwf	17	;volatile
  4650                           
  4651                           ;bldc.c: 228: CM1CON1 = 0x00;
  4652  1FDB  0192               	clrf	18	;volatile
  4653                           
  4654                           ;bldc.c: 230: C1IE = 0;
  4655  1FDC  0021               	movlb	1	; select bank1
  4656  1FDD  1292               	bcf	18,5	;volatile
  4657                           
  4658                           ;bldc.c: 235: PWM1CON = 0x87;
  4659  1FDE  3087               	movlw	135
  4660  1FDF  0025               	movlb	5	; select bank5
  4661  1FE0  0094               	movwf	20	;volatile
  4662                           
  4663                           ;bldc.c: 239: CCP1AS = 0x800;
  4664  1FE1  0195               	clrf	21	;volatile
  4665                           
  4666                           ;bldc.c: 240: CCP1CON = 0x0C;
  4667  1FE2  300C               	movlw	12
  4668  1FE3  0093               	movwf	19	;volatile
  4669                           
  4670                           ;bldc.c: 246: CCPR1L = 0;
  4671  1FE4  0191               	clrf	17	;volatile
  4672                           
  4673                           ;bldc.c: 248: CCP2IE = 0;
  4674  1FE5  0021               	movlb	1	; select bank1
  4675  1FE6  1012               	bcf	18,0	;volatile
  4676                           
  4677                           ;bldc.c: 249: CCP2CON = 0x04;
  4678  1FE7  3004               	movlw	4
  4679  1FE8  0025               	movlb	5	; select bank5
  4680  1FE9  009A               	movwf	26	;volatile
  4681                           
  4682                           ;bldc.c: 250: CCPR2L = 0xff;
  4683  1FEA  30FF               	movlw	255
  4684  1FEB  0098               	movwf	24	;volatile
  4685                           
  4686                           ;bldc.c: 251: CCPR2H = 0xff;
  4687  1FEC  30FF               	movlw	255
  4688  1FED  0099               	movwf	25	;volatile
  4689                           
  4690                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  4691  1FEE  3064               	movlw	100
  4692  1FEF  0020               	movlb	0	; select bank0
  4693  1FF0  009B               	movwf	27	;volatile
  4694                           
  4695                           ;bldc.c: 255: T2CON = 0x05;
  4696  1FF1  3005               	movlw	5
  4697  1FF2  009C               	movwf	28	;volatile
  4698                           
  4699                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  4700  1FF3  3028               	movlw	40
  4701  1FF4  00B4               	movwf	??_init_bldc
  4702  1FF5  0834               	movf	??_init_bldc,w
  4703  1FF6  0021               	movlb	1	; select bank1
  4704  1FF7  00DD               	movwf	_ui8_BlankingCount^(0+128)
  4705                           
  4706                           ;bldc.c: 264: TMR2IE = 1;
  4707  1FF8  1491               	bsf	17,1	;volatile
  4708                           
  4709                           ;bldc.c: 267: MotorFlags.b = 0;
  4710  1FF9  0020               	movlb	0	; select bank0
  4711  1FFA  01DA               	clrf	_MotorFlags
  4712                           
  4713                           ;bldc.c: 270: InitMotorRun( );
  4714  1FFB  3192  2202         	fcall	_InitMotorRun
  4715  1FFD  0008               	return
  4716  1FFE                     __end_of_init_bldc:	
  4717                           
  4718                           	psect	text6
  4719  1202                     __ptext6:	
  4720 ;; *************** function _InitMotorRun *****************
  4721 ;; Defined at:
  4722 ;;		line 2171 in file "../bldc.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;		None
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4736 ;;      Params:         0       0       0       0       0       0       0       0
  4737 ;;      Locals:         0       0       0       0       0       0       0       0
  4738 ;;      Temps:          0       0       0       0       0       0       0       0
  4739 ;;      Totals:         0       0       0       0       0       0       0       0
  4740 ;;Total ram usage:        0 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    4
  4743 ;; This function calls:
  4744 ;;		_commutate
  4745 ;; This function is called by:
  4746 ;;		_init_bldc
  4747 ;;		_main
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _InitMotorRun
  4753  1202                     _InitMotorRun:	
  4754                           
  4755                           ;bldc.c: 2176: if( 0 == MotorFlags.bits.B6 )
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4759  1202  0020               	movlb	0	; select bank0
  4760  1203  1B5A               	btfsc	_MotorFlags,6
  4761  1204  0008               	return
  4762                           
  4763                           ;bldc.c: 2179: {;bldc.c: 2181: MotorFlags.bits.B5 = 0;
  4764  1205  12DA               	bcf	_MotorFlags,5
  4765                           
  4766                           ;bldc.c: 2182: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  4767  1206  30A6               	movlw	166
  4768  1207  0022               	movlb	2	; select bank2
  4769  1208  00A5               	movwf	_ui16_comm_time_max^(0+256)
  4770  1209  3000               	movlw	0
  4771  120A  00A6               	movwf	(_ui16_comm_time_max^(0+256)+1)
  4772                           
  4773                           ;bldc.c: 2183: comm_state = 1;
  4774  120B  0021               	movlb	1	; select bank1
  4775  120C  01DE               	clrf	_comm_state^(0+128)
  4776  120D  0ADE               	incf	_comm_state^(0+128),f
  4777                           
  4778                           ;bldc.c: 2184: ui16_step_cnt = 0;
  4779  120E  01BA               	clrf	_ui16_step_cnt^(0+128)
  4780  120F  01BB               	clrf	(_ui16_step_cnt+1)^(0+128)
  4781                           
  4782                           ;bldc.c: 2185: ui16_duty_cycle_BLDC = 0;
  4783  1210  01B0               	clrf	_ui16_duty_cycle_BLDC^(0+128)
  4784  1211  01B1               	clrf	(_ui16_duty_cycle_BLDC+1)^(0+128)
  4785                           
  4786                           ;bldc.c: 2186: comm_time = 0;
  4787  1212  0020               	movlb	0	; select bank0
  4788  1213  01D3               	clrf	_comm_time
  4789  1214  01D4               	clrf	_comm_time+1
  4790                           
  4791                           ;bldc.c: 2187: bemf_filter = 0;
  4792  1215  0022               	movlb	2	; select bank2
  4793  1216  01E5               	clrf	_bemf_filter^(0+256)
  4794                           
  4795                           ;bldc.c: 2188: phase_delay_counter = 0;
  4796  1217  0021               	movlb	1	; select bank1
  4797  1218  01B8               	clrf	_phase_delay_counter^(0+128)
  4798  1219  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  4799                           
  4800                           ;bldc.c: 2189: phase_delay_counter_debug = 0;
  4801  121A  0024               	movlb	4	; select bank4
  4802  121B  01DE               	clrf	_phase_delay_counter_debug^(0+512)
  4803  121C  01DF               	clrf	(_phase_delay_counter_debug+1)^(0+512)
  4804                           
  4805                           ;bldc.c: 2190: PSTR1CON = 0;
  4806  121D  0025               	movlb	5	; select bank5
  4807  121E  0196               	clrf	22	;volatile
  4808                           
  4809                           ;bldc.c: 2193: MotorFlags.bits.B3 = 1 ;
  4810  121F  0020               	movlb	0	; select bank0
  4811  1220  15DA               	bsf	_MotorFlags,3
  4812                           
  4813                           ;bldc.c: 2194: MotorFlags.bits.B6 = 1 ;
  4814  1221  175A               	bsf	_MotorFlags,6
  4815                           
  4816                           ;bldc.c: 2195: ui16_phase_angle = 128;
  4817  1222  3080               	movlw	128
  4818  1223  0024               	movlb	4	; select bank4
  4819  1224  00DC               	movwf	_ui16_phase_angle^(0+512)
  4820  1225  3000               	movlw	0
  4821  1226  00DD               	movwf	(_ui16_phase_angle^(0+512)+1)
  4822                           
  4823                           ;bldc.c: 2196: ui8_StartupPWM = 0 ;
  4824  1227  0021               	movlb	1	; select bank1
  4825  1228  01DF               	clrf	_ui8_StartupPWM^(0+128)
  4826                           
  4827                           ;bldc.c: 2197: CCPR1L = 0 ;
  4828  1229  0025               	movlb	5	; select bank5
  4829  122A  0191               	clrf	17	;volatile
  4830                           
  4831                           ;bldc.c: 2198: ui8_sampleState = 0 ;
  4832  122B  0022               	movlb	2	; select bank2
  4833  122C  01E2               	clrf	_ui8_sampleState^(0+256)
  4834                           
  4835                           ;bldc.c: 2199: ui8_zero_cros_cnt = 0 ;
  4836  122D  0024               	movlb	4	; select bank4
  4837  122E  01E0               	clrf	_ui8_zero_cros_cnt^(0+512)
  4838  122F  01E1               	clrf	(_ui8_zero_cros_cnt+1)^(0+512)
  4839                           
  4840                           ;bldc.c: 2200: MotorFlags.bits.B4 = 1 ;
  4841  1230  0020               	movlb	0	; select bank0
  4842  1231  165A               	bsf	_MotorFlags,4
  4843                           
  4844                           ;bldc.c: 2208: commutate( );
  4845  1232  318D  25A4         	fcall	_commutate
  4846  1234  0008               	return
  4847  1235                     __end_of_InitMotorRun:	
  4848                           
  4849                           	psect	text7
  4850  0DA4                     __ptext7:	
  4851 ;; *************** function _commutate *****************
  4852 ;; Defined at:
  4853 ;;		line 1426 in file "../bldc.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4867 ;;      Params:         0       0       0       0       0       0       0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0       0
  4869 ;;      Temps:          0      12       0       0       0       0       0       0
  4870 ;;      Totals:         0      12       0       0       0       0       0       0
  4871 ;;Total ram usage:       12 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    3
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		_InitMotorRun
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           
  4882                           ;psect for function _commutate
  4883  0DA4                     _commutate:	
  4884                           
  4885                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  4886                           
  4887                           ;incstack = 0
  4888                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0]
  4889  0DA4  3000               	movlw	0
  4890  0DA5  0021               	movlb	1	; select bank1
  4891  0DA6  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  4892  0DA7  300A               	movlw	10
  4893  0DA8  1903               	skipnz
  4894  0DA9  023A               	subwf	_ui16_step_cnt^(0+128),w
  4895  0DAA  1803               	skipnc
  4896  0DAB  2DB0               	goto	l5332
  4897                           
  4898                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
  4899  0DAC  3001               	movlw	1
  4900  0DAD  07BA               	addwf	_ui16_step_cnt^(0+128),f
  4901  0DAE  3000               	movlw	0
  4902  0DAF  3DBB               	addwfc	(_ui16_step_cnt+1)^(0+128),f
  4903  0DB0                     l5332:	
  4904                           
  4905                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  4906  0DB0  3559               	lslf	_Bcnt^(0+128),w
  4907  0DB1  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4908  0DB2  0086               	movwf	6
  4909  0DB3  3002               	movlw	2	; select bank4/5
  4910  0DB4  0087               	movwf	7
  4911  0DB5  0020               	movlb	0	; select bank0
  4912  0DB6  0853               	movf	_comm_time,w
  4913  0DB7  3FC0               	movwi [0]fsr1
  4914  0DB8  0854               	movf	_comm_time+1,w
  4915  0DB9  3FC1               	movwi [1]fsr1
  4916  0DBA  3001               	movlw	1
  4917  0DBB  00A8               	movwf	??_commutate
  4918  0DBC  0828               	movf	??_commutate,w
  4919  0DBD  0021               	movlb	1	; select bank1
  4920  0DBE  07D9               	addwf	_Bcnt^(0+128),f
  4921                           
  4922                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  4923  0DBF  3007               	movlw	7
  4924  0DC0  0020               	movlb	0	; select bank0
  4925  0DC1  00A8               	movwf	??_commutate
  4926  0DC2  0828               	movf	??_commutate,w
  4927  0DC3  0021               	movlb	1	; select bank1
  4928  0DC4  05D9               	andwf	_Bcnt^(0+128),f
  4929                           
  4930                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  4931  0DC5  300E               	movlw	14
  4932  0DC6  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4933  0DC7  0086               	movwf	6
  4934  0DC8  3002               	movlw	2	; select bank4/5
  4935  0DC9  0087               	movwf	7
  4936  0DCA  300C               	movlw	12
  4937  0DCB  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4938  0DCC  0084               	movwf	4
  4939  0DCD  3002               	movlw	2	; select bank4/5
  4940  0DCE  0085               	movwf	5
  4941  0DCF  0024               	movlb	4	; select bank4
  4942  0DD0  0824               	movf	(_B^(0+512)+4),w
  4943  0DD1  0722               	addwf	(_B^(0+512)+2),w
  4944  0DD2  0020               	movlb	0	; select bank0
  4945  0DD3  00A8               	movwf	??_commutate
  4946  0DD4  0024               	movlb	4	; select bank4
  4947  0DD5  0825               	movf	((_B+1)^(0+512)+4),w
  4948  0DD6  3D23               	addwfc	((_B+1)^(0+512)+2),w
  4949  0DD7  0020               	movlb	0	; select bank0
  4950  0DD8  00A9               	movwf	??_commutate+1
  4951  0DD9  0024               	movlb	4	; select bank4
  4952  0DDA  0826               	movf	(_B^(0+512)+6),w
  4953  0DDB  0020               	movlb	0	; select bank0
  4954  0DDC  0728               	addwf	??_commutate,w
  4955  0DDD  00AA               	movwf	??_commutate+2
  4956  0DDE  0024               	movlb	4	; select bank4
  4957  0DDF  0827               	movf	((_B+1)^(0+512)+6),w
  4958  0DE0  0020               	movlb	0	; select bank0
  4959  0DE1  3D29               	addwfc	??_commutate+1,w
  4960  0DE2  00AB               	movwf	??_commutate+3
  4961  0DE3  0024               	movlb	4	; select bank4
  4962  0DE4  0828               	movf	(_B^(0+512)+8),w
  4963  0DE5  0020               	movlb	0	; select bank0
  4964  0DE6  072A               	addwf	??_commutate+2,w
  4965  0DE7  00AC               	movwf	??_commutate+4
  4966  0DE8  0024               	movlb	4	; select bank4
  4967  0DE9  0829               	movf	((_B+1)^(0+512)+8),w
  4968  0DEA  0020               	movlb	0	; select bank0
  4969  0DEB  3D2B               	addwfc	??_commutate+3,w
  4970  0DEC  00AD               	movwf	??_commutate+5
  4971  0DED  0024               	movlb	4	; select bank4
  4972  0DEE  082A               	movf	(_B^(0+512)+10),w
  4973  0DEF  0020               	movlb	0	; select bank0
  4974  0DF0  072C               	addwf	??_commutate+4,w
  4975  0DF1  00AE               	movwf	??_commutate+6
  4976  0DF2  0024               	movlb	4	; select bank4
  4977  0DF3  082B               	movf	((_B+1)^(0+512)+10),w
  4978  0DF4  0020               	movlb	0	; select bank0
  4979  0DF5  3D2D               	addwfc	??_commutate+5,w
  4980  0DF6  00AF               	movwf	??_commutate+7
  4981  0DF7  3F00               	moviw [0]fsr0
  4982  0DF8  072E               	addwf	??_commutate+6,w
  4983  0DF9  00B0               	movwf	??_commutate+8
  4984  0DFA  3F01               	moviw [1]fsr0
  4985  0DFB  3D2F               	addwfc	??_commutate+7,w
  4986  0DFC  00B1               	movwf	??_commutate+9
  4987  0DFD  3F40               	moviw [0]fsr1
  4988  0DFE  0730               	addwf	??_commutate+8,w
  4989  0DFF  00B2               	movwf	??_commutate+10
  4990  0E00  3F41               	moviw [1]fsr1
  4991  0E01  3D31               	addwfc	??_commutate+9,w
  4992  0E02  00B3               	movwf	??_commutate+11
  4993  0E03  0024               	movlb	4	; select bank4
  4994  0E04  0820               	movf	_B^(0+512),w
  4995  0E05  0020               	movlb	0	; select bank0
  4996  0E06  0732               	addwf	??_commutate+10,w
  4997  0E07  0021               	movlb	1	; select bank1
  4998  0E08  00B2               	movwf	_ui16_speed_fil^(0+128)
  4999  0E09  0024               	movlb	4	; select bank4
  5000  0E0A  0821               	movf	(_B+1)^(0+512),w
  5001  0E0B  0020               	movlb	0	; select bank0
  5002  0E0C  3D33               	addwfc	??_commutate+11,w
  5003  0E0D  0021               	movlb	1	; select bank1
  5004  0E0E  00B3               	movwf	(_ui16_speed_fil+1)^(0+128)
  5005                           
  5006                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  5007  0E0F  0020               	movlb	0	; select bank0
  5008  0E10  0854               	movf	_comm_time+1,w
  5009  0E11  0023               	movlb	3	; select bank3
  5010  0E12  00C3               	movwf	(_ui16_speed_rar+1)^(0+384)
  5011  0E13  0020               	movlb	0	; select bank0
  5012  0E14  0853               	movf	_comm_time,w
  5013  0E15  0023               	movlb	3	; select bank3
  5014  0E16  00C2               	movwf	_ui16_speed_rar^(0+384)
  5015                           
  5016                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  5017  0E17  0020               	movlb	0	; select bank0
  5018  0E18  12DA               	bcf	_MotorFlags,5
  5019                           
  5020                           ;bldc.c: 1451: ui8_sampleState = 1;
  5021  0E19  0022               	movlb	2	; select bank2
  5022  0E1A  01E2               	clrf	_ui8_sampleState^(0+256)
  5023  0E1B  0AE2               	incf	_ui8_sampleState^(0+256),f
  5024                           
  5025                           ;bldc.c: 1455: bemf_filter = 62;
  5026  0E1C  303E               	movlw	62
  5027  0E1D  0020               	movlb	0	; select bank0
  5028  0E1E  00A8               	movwf	??_commutate
  5029  0E1F  0828               	movf	??_commutate,w
  5030  0E20  0022               	movlb	2	; select bank2
  5031  0E21  00E5               	movwf	_bemf_filter^(0+256)
  5032                           
  5033                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  5034  0E22  0020               	movlb	0	; select bank0
  5035  0E23  17DA               	bsf	_MotorFlags,7
  5036                           
  5037                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  5038  0E24  1DDA               	btfss	_MotorFlags,3
  5039  0E25  2E9F               	goto	l327
  5040                           
  5041                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
  5042  0E26  0023               	movlb	3	; select bank3
  5043  0E27  0843               	movf	(_ui16_speed_rar+1)^(0+384),w
  5044  0E28  0020               	movlb	0	; select bank0
  5045  0E29  00A9               	movwf	??_commutate+1
  5046  0E2A  0023               	movlb	3	; select bank3
  5047  0E2B  0842               	movf	_ui16_speed_rar^(0+384),w
  5048  0E2C  0020               	movlb	0	; select bank0
  5049  0E2D  00A8               	movwf	??_commutate
  5050  0E2E  36A9               	lsrf	??_commutate+1,f
  5051  0E2F  0CA8               	rrf	??_commutate,f
  5052  0E30  36A9               	lsrf	??_commutate+1,f
  5053  0E31  0CA8               	rrf	??_commutate,f
  5054  0E32  36A9               	lsrf	??_commutate+1,f
  5055  0E33  0CA8               	rrf	??_commutate,f
  5056  0E34  30FF               	movlw	255
  5057  0E35  0528               	andwf	??_commutate,w
  5058  0E36  0021               	movlb	1	; select bank1
  5059  0E37  00B6               	movwf	_ui16_phase_advancement^(0+128)
  5060  0E38  3001               	movlw	1
  5061  0E39  0020               	movlb	0	; select bank0
  5062  0E3A  0529               	andwf	??_commutate+1,w
  5063  0E3B  0021               	movlb	1	; select bank1
  5064  0E3C  00B7               	movwf	(_ui16_phase_advancement+1)^(0+128)
  5065                           
  5066                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  5067  0E3D  0020               	movlb	0	; select bank0
  5068  0E3E  0854               	movf	_comm_time+1,w
  5069  0E3F  0021               	movlb	1	; select bank1
  5070  0E40  0237               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  5071  0E41  1D03               	skipz
  5072  0E42  2E47               	goto	u2695
  5073  0E43  0020               	movlb	0	; select bank0
  5074  0E44  0853               	movf	_comm_time,w
  5075  0E45  0021               	movlb	1	; select bank1
  5076  0E46  0236               	subwf	_ui16_phase_advancement^(0+128),w
  5077  0E47                     u2695:	
  5078  0E47  1803               	skipnc
  5079  0E48  2E5D               	goto	l5358
  5080                           
  5081                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
  5082  0E49  0936               	comf	_ui16_phase_advancement^(0+128),w
  5083  0E4A  0020               	movlb	0	; select bank0
  5084  0E4B  00A8               	movwf	??_commutate
  5085  0E4C  0021               	movlb	1	; select bank1
  5086  0E4D  0937               	comf	(_ui16_phase_advancement+1)^(0+128),w
  5087  0E4E  0020               	movlb	0	; select bank0
  5088  0E4F  00A9               	movwf	??_commutate+1
  5089  0E50  0AA8               	incf	??_commutate,f
  5090  0E51  1903               	skipnz
  5091  0E52  0AA9               	incf	??_commutate+1,f
  5092  0E53  0853               	movf	_comm_time,w
  5093  0E54  0728               	addwf	??_commutate,w
  5094  0E55  0021               	movlb	1	; select bank1
  5095  0E56  00B8               	movwf	_phase_delay_counter^(0+128)
  5096  0E57  0020               	movlb	0	; select bank0
  5097  0E58  0854               	movf	_comm_time+1,w
  5098  0E59  3D29               	addwfc	??_commutate+1,w
  5099  0E5A  0021               	movlb	1	; select bank1
  5100  0E5B  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
  5101                           
  5102                           ;bldc.c: 1478: }
  5103  0E5C  2E5F               	goto	l5360
  5104  0E5D                     l5358:	
  5105                           
  5106                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
  5107  0E5D  01B8               	clrf	_phase_delay_counter^(0+128)
  5108  0E5E  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5109  0E5F                     l5360:	
  5110                           
  5111                           ;bldc.c: 1486: };bldc.c: 1489: phase_delay_counter_debug = phase_delay_counter;
  5112  0E5F  0839               	movf	(_phase_delay_counter+1)^(0+128),w
  5113  0E60  0024               	movlb	4	; select bank4
  5114  0E61  00DF               	movwf	(_phase_delay_counter_debug+1)^(0+512)
  5115  0E62  0021               	movlb	1	; select bank1
  5116  0E63  0838               	movf	_phase_delay_counter^(0+128),w
  5117  0E64  0024               	movlb	4	; select bank4
  5118  0E65  00DE               	movwf	_phase_delay_counter_debug^(0+512)
  5119                           
  5120                           ;bldc.c: 1508: switch (ui16_step_cnt)
  5121  0E66  2E7A               	goto	l5384
  5122  0E67                     l5362:	
  5123                           ;bldc.c: 1510: {;bldc.c: 1512: case 0 :
  5124                           
  5125                           
  5126                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
  5127  0E67  30A6               	movlw	166
  5128  0E68  2E75               	goto	L17
  5129  0E69                     l5364:	
  5130                           ;bldc.c: 1519: };bldc.c: 1522: case 1:
  5131                           
  5132                           ;bldc.c: 1517: break;
  5133                           
  5134                           
  5135                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
  5136  0E69  30F4               	movlw	244
  5137  0E6A  0022               	movlb	2	; select bank2
  5138  0E6B  00A5               	movwf	_ui16_comm_time_max^(0+256)
  5139  0E6C  3001               	movlw	1
  5140  0E6D  2E78               	goto	L10
  5141  0E6E                     l5366:	
  5142                           ;bldc.c: 1529: };bldc.c: 1532: case 2:
  5143                           
  5144                           ;bldc.c: 1527: break;
  5145                           
  5146                           
  5147                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
  5148  0E6E  307D               	movlw	125
  5149  0E6F  2E75               	goto	L17
  5150  0E70                     l5368:	
  5151                           ;bldc.c: 1539: };bldc.c: 1542: case 3:
  5152                           
  5153                           ;bldc.c: 1537: break;
  5154                           
  5155                           
  5156                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
  5157  0E70  3053               	movlw	83
  5158  0E71  2E75               	goto	L17
  5159  0E72                     l5370:	
  5160                           ;bldc.c: 1549: };bldc.c: 1552: case 4:
  5161                           
  5162                           ;bldc.c: 1547: break;
  5163                           
  5164                           
  5165                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
  5166  0E72  303E               	movlw	62
  5167  0E73  2E75               	goto	L17
  5168  0E74                     l5372:	
  5169                           ;bldc.c: 1559: };bldc.c: 1562: case 5:
  5170                           
  5171                           ;bldc.c: 1557: break;
  5172                           
  5173  0E74                     l5374:	
  5174                           ;bldc.c: 1569: };bldc.c: 1572: case 6:
  5175                           
  5176                           ;bldc.c: 1567: break;
  5177                           
  5178                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5179                           
  5180  0E74                     l5376:	
  5181                           ;bldc.c: 1579: };bldc.c: 1582: case 7:
  5182                           
  5183                           ;bldc.c: 1577: break;
  5184                           
  5185                           ;bldc.c: 1574: {;bldc.c: 1576: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5186                           
  5187  0E74                     l5378:	
  5188                           ;bldc.c: 1589: };bldc.c: 1592: case 8:
  5189                           
  5190                           ;bldc.c: 1587: break;
  5191                           
  5192                           ;bldc.c: 1584: {;bldc.c: 1586: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5193                           
  5194  0E74                     l5380:	
  5195                           ;bldc.c: 1599: };bldc.c: 1602: case 9:
  5196                           
  5197                           ;bldc.c: 1597: break;
  5198                           
  5199                           ;bldc.c: 1594: {;bldc.c: 1596: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5200                           
  5201  0E74                     l5382:	
  5202                           ;bldc.c: 1609: };bldc.c: 1613: default:
  5203                           
  5204                           ;bldc.c: 1607: break;
  5205                           
  5206                           ;bldc.c: 1604: {;bldc.c: 1606: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5207                           
  5208                           
  5209                           ;bldc.c: 1614: {;bldc.c: 1616: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
  5210  0E74  3032               	movlw	50
  5211  0E75                     L17:	
  5212  0E75  0022               	movlb	2	; select bank2
  5213  0E76  00A5               	movwf	_ui16_comm_time_max^(0+256)
  5214  0E77  3000               	movlw	0
  5215  0E78                     L10:	
  5216  0E78  00A6               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5217                           
  5218                           ;bldc.c: 1618: };bldc.c: 1620: }
  5219  0E79  2E8A               	goto	l5386
  5220  0E7A                     l5384:	
  5221                           
  5222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5223                           ; Switch size 1, requested type "space"
  5224                           ; Number of cases is 1, Range of values is 0 to 0
  5225                           ; switch strategies available:
  5226                           ; Name         Instructions Cycles
  5227                           ; simple_byte            4     3 (average)
  5228                           ; direct_byte            8     6 (fixed)
  5229                           ; jumptable            260     6 (fixed)
  5230                           ;	Chosen strategy is simple_byte
  5231  0E7A  0021               	movlb	1	; select bank1
  5232  0E7B  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
  5233  0E7C  3A00               	xorlw	0	; case 0
  5234  0E7D  1903               	skipnz
  5235  0E7E  2E80               	goto	l11708
  5236  0E7F  2E74               	goto	l5382
  5237  0E80                     l11708:	
  5238                           
  5239                           ; Switch size 1, requested type "space"
  5240                           ; Number of cases is 10, Range of values is 0 to 9
  5241                           ; switch strategies available:
  5242                           ; Name         Instructions Cycles
  5243                           ; direct_byte           26     6 (fixed)
  5244                           ; simple_byte           31    16 (average)
  5245                           ; jumptable            260     6 (fixed)
  5246                           ;	Chosen strategy is direct_byte
  5247  0E80  083A               	movf	_ui16_step_cnt^(0+128),w
  5248  0E81  0084               	movwf	4
  5249  0E82  300A               	movlw	10
  5250  0E83  0204               	subwf	4,w
  5251  0E84  1803               	skipnc
  5252  0E85  2E74               	goto	l5382
  5253  0E86  3191               	movlp	high S11710
  5254  0E87  3504               	lslf	4,w
  5255  0E88  3E94               	addlw	low S11710
  5256  0E89  0082               	movwf	2
  5257  0E8A                     l5386:	
  5258                           
  5259                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
  5260  0E8A  3000               	movlw	0
  5261  0E8B  0022               	movlb	2	; select bank2
  5262  0E8C  0226               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  5263  0E8D  3032               	movlw	50
  5264  0E8E  1903               	skipnz
  5265  0E8F  0225               	subwf	_ui16_comm_time_max^(0+256),w
  5266  0E90  1803               	skipnc
  5267  0E91  2E96               	goto	l5390
  5268                           
  5269                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
  5270  0E92  3032               	movlw	50
  5271  0E93  00A5               	movwf	_ui16_comm_time_max^(0+256)
  5272  0E94  3000               	movlw	0
  5273  0E95  00A6               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5274  0E96                     l5390:	
  5275                           
  5276                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
  5277  0E96  0020               	movlb	0	; select bank0
  5278  0E97  1E5A               	btfss	_MotorFlags,4
  5279  0E98  2EE4               	goto	l345
  5280                           
  5281                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
  5282  0E99  300A               	movlw	10
  5283  0E9A  00A8               	movwf	??_commutate
  5284  0E9B  0828               	movf	??_commutate,w
  5285  0E9C  0021               	movlb	1	; select bank1
  5286  0E9D  00DF               	movwf	_ui8_StartupPWM^(0+128)
  5287                           
  5288                           ;bldc.c: 1641: };bldc.c: 1644: }
  5289  0E9E  2EE4               	goto	l345
  5290  0E9F                     l327:	
  5291                           
  5292                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
  5293  0E9F  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5294  0EA0  2EA5               	goto	l5396
  5295                           
  5296                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
  5297  0EA1  0021               	movlb	1	; select bank1
  5298  0EA2  01B8               	clrf	_phase_delay_counter^(0+128)
  5299  0EA3  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5300                           
  5301                           ;bldc.c: 1659: }
  5302  0EA4  2EB3               	goto	l5398
  5303  0EA5                     l5396:	
  5304                           
  5305                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  5306  0EA5  0020               	movlb	0	; select bank0
  5307  0EA6  0854               	movf	_comm_time+1,w
  5308  0EA7  00A9               	movwf	??_commutate+1
  5309  0EA8  0853               	movf	_comm_time,w
  5310  0EA9  00A8               	movwf	??_commutate
  5311  0EAA  36A9               	lsrf	??_commutate+1,f
  5312  0EAB  0CA8               	rrf	??_commutate,f
  5313  0EAC  0828               	movf	??_commutate,w
  5314  0EAD  0021               	movlb	1	; select bank1
  5315  0EAE  00B8               	movwf	_phase_delay_counter^(0+128)
  5316  0EAF  0020               	movlb	0	; select bank0
  5317  0EB0  0829               	movf	??_commutate+1,w
  5318  0EB1  0021               	movlb	1	; select bank1
  5319  0EB2  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
  5320  0EB3                     l5398:	
  5321                           
  5322                           ;bldc.c: 1670: };bldc.c: 1675: phase_delay_counter = 0;
  5323  0EB3  01B8               	clrf	_phase_delay_counter^(0+128)
  5324  0EB4  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5325                           
  5326                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  5327  0EB5  0839               	movf	(_phase_delay_counter+1)^(0+128),w
  5328  0EB6  0024               	movlb	4	; select bank4
  5329  0EB7  00DF               	movwf	(_phase_delay_counter_debug+1)^(0+512)
  5330  0EB8  0021               	movlb	1	; select bank1
  5331  0EB9  0838               	movf	_phase_delay_counter^(0+128),w
  5332  0EBA  0024               	movlb	4	; select bank4
  5333  0EBB  00DE               	movwf	_phase_delay_counter_debug^(0+512)
  5334                           
  5335                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
  5336  0EBC  3032               	movlw	50
  5337  0EBD  0022               	movlb	2	; select bank2
  5338  0EBE  00A5               	movwf	_ui16_comm_time_max^(0+256)
  5339  0EBF  3000               	movlw	0
  5340  0EC0  00A6               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5341                           
  5342                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  5343  0EC1  0020               	movlb	0	; select bank0
  5344  0EC2  1F5A               	btfss	_MotorFlags,6
  5345  0EC3  2EE2               	goto	l5408
  5346                           
  5347                           ;bldc.c: 1693: {;bldc.c: 1751: CCPR1L = ui16_duty_cycle_BLDC >> 2;
  5348  0EC4  0021               	movlb	1	; select bank1
  5349  0EC5  0831               	movf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
  5350  0EC6  0020               	movlb	0	; select bank0
  5351  0EC7  00A9               	movwf	??_commutate+1
  5352  0EC8  0021               	movlb	1	; select bank1
  5353  0EC9  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
  5354  0ECA  0020               	movlb	0	; select bank0
  5355  0ECB  00A8               	movwf	??_commutate
  5356  0ECC  36A9               	lsrf	??_commutate+1,f
  5357  0ECD  0CA8               	rrf	??_commutate,f
  5358  0ECE  36A9               	lsrf	??_commutate+1,f
  5359  0ECF  0CA8               	rrf	??_commutate,f
  5360  0ED0  0828               	movf	??_commutate,w
  5361  0ED1  0025               	movlb	5	; select bank5
  5362  0ED2  0091               	movwf	17	;volatile
  5363                           
  5364                           ;bldc.c: 1752: CCP1CON = ((ui16_duty_cycle_BLDC & 0b11) << 4) | 0x0C;
  5365  0ED3  0021               	movlb	1	; select bank1
  5366  0ED4  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
  5367  0ED5  3903               	andlw	3
  5368  0ED6  0020               	movlb	0	; select bank0
  5369  0ED7  00A8               	movwf	??_commutate
  5370  0ED8  3003               	movlw	3
  5371  0ED9                     u2745:	
  5372  0ED9  35A8               	lslf	??_commutate,f
  5373  0EDA  3EFF               	addlw	-1
  5374  0EDB  1D03               	skipz
  5375  0EDC  2ED9               	goto	u2745
  5376  0EDD  3528               	lslf	??_commutate,w
  5377  0EDE  380C               	iorlw	12
  5378  0EDF  0025               	movlb	5	; select bank5
  5379  0EE0  0093               	movwf	19	;volatile
  5380                           
  5381                           ;bldc.c: 1766: }
  5382  0EE1  2EE4               	goto	l345
  5383  0EE2                     l5408:	
  5384                           
  5385                           ;bldc.c: 1769: else;bldc.c: 1770: {;bldc.c: 1772: CCPR1L = 0;
  5386  0EE2  0025               	movlb	5	; select bank5
  5387  0EE3  0191               	clrf	17	;volatile
  5388  0EE4                     l345:	
  5389                           
  5390                           ;bldc.c: 1774: };bldc.c: 1778: };bldc.c: 1781: comm_time = 0;
  5391  0EE4  0020               	movlb	0	; select bank0
  5392  0EE5  01D3               	clrf	_comm_time
  5393  0EE6  01D4               	clrf	_comm_time+1
  5394                           
  5395                           ;bldc.c: 1785: if( comm_state == 0xff )
  5396  0EE7  0021               	movlb	1	; select bank1
  5397  0EE8  0A5E               	incf	_comm_state^(0+128),w
  5398  0EE9  1D03               	btfss	3,2
  5399  0EEA  2FDD               	goto	l5558
  5400                           
  5401                           ;bldc.c: 1787: {;bldc.c: 1789: comm_state = 6;
  5402  0EEB  3006               	movlw	6
  5403  0EEC  0020               	movlb	0	; select bank0
  5404  0EED  00A8               	movwf	??_commutate
  5405  0EEE  0828               	movf	??_commutate,w
  5406  0EEF  0021               	movlb	1	; select bank1
  5407  0EF0  00DE               	movwf	_comm_state^(0+128)
  5408                           
  5409                           ;bldc.c: 1791: };bldc.c: 1794: switch( comm_state )
  5410  0EF1  2FDD               	goto	l5558
  5411  0EF2                     l5414:	
  5412                           ;bldc.c: 1796: {;bldc.c: 1798: case 1:
  5413                           
  5414                           
  5415                           ;bldc.c: 1801: {;bldc.c: 1807: PSTR1CON = 0b00000001;
  5416  0EF2  3001               	movlw	1
  5417  0EF3  0025               	movlb	5	; select bank5
  5418  0EF4  0096               	movwf	22	;volatile
  5419                           
  5420                           ;bldc.c: 1810: if( MotorFlags.bits.B6 )
  5421  0EF5  0020               	movlb	0	; select bank0
  5422  0EF6  1F5A               	btfss	_MotorFlags,6
  5423  0EF7  2EFD               	goto	l5420
  5424                           
  5425                           ;bldc.c: 1812: {;bldc.c: 1814: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  5426  0EF8  0022               	movlb	2	; select bank2
  5427  0EF9  080E               	movf	14,w	;volatile
  5428  0EFA  39E5               	andlw	229
  5429  0EFB  380A               	iorlw	10
  5430  0EFC  008E               	movwf	14	;volatile
  5431  0EFD                     l5420:	
  5432                           
  5433                           ;bldc.c: 1816: };bldc.c: 1820: LATB2 = 0;
  5434  0EFD  0022               	movlb	2	; select bank2
  5435  0EFE  110D               	bcf	13,2	;volatile
  5436                           
  5437                           ;bldc.c: 1821: LATB1 = 0;
  5438  0EFF  108D               	bcf	13,1	;volatile
  5439                           
  5440                           ;bldc.c: 1822: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  5441  0F00  3009               	movlw	9
  5442  0F01  0020               	movlb	0	; select bank0
  5443  0F02  00A8               	movwf	??_commutate
  5444  0F03  0828               	movf	??_commutate,w
  5445  0F04  0021               	movlb	1	; select bank1
  5446  0F05  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5447                           
  5448                           ;bldc.c: 1823: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  5449  0F06  01DB               	clrf	_ui8_UPhase_sel^(0+128)
  5450  0F07  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
  5451                           
  5452                           ;bldc.c: 1824: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  5453  0F08  3025               	movlw	37
  5454  0F09  0020               	movlb	0	; select bank0
  5455  0F0A  00A8               	movwf	??_commutate
  5456  0F0B  0828               	movf	??_commutate,w
  5457  0F0C  0022               	movlb	2	; select bank2
  5458  0F0D  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
  5459                           
  5460                           ;bldc.c: 1825: CM1CON1 = 0x02;
  5461  0F0E  3002               	movlw	2
  5462  0F0F  0092               	movwf	18	;volatile
  5463                           
  5464                           ;bldc.c: 1838: CM1CON0 = 0x84;
  5465  0F10  3084               	movlw	132
  5466  0F11  0091               	movwf	17	;volatile
  5467                           
  5468                           ;bldc.c: 1839: rising_bemf_flag = 1;
  5469  0F12  0020               	movlb	0	; select bank0
  5470  0F13  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5471                           
  5472                           ;bldc.c: 1840: comm_state = 6;
  5473  0F14  3006               	movlw	6
  5474  0F15  2FCE               	goto	L14
  5475  0F16                     l5438:	
  5476                           ;bldc.c: 1850: };bldc.c: 1853: case 2:
  5477                           
  5478                           ;bldc.c: 1846: break;
  5479                           
  5480                           
  5481                           ;bldc.c: 1856: {;bldc.c: 1861: PSTR1CON = 0b00000001;
  5482  0F16  3001               	movlw	1
  5483  0F17  0025               	movlb	5	; select bank5
  5484  0F18  0096               	movwf	22	;volatile
  5485                           
  5486                           ;bldc.c: 1864: if( MotorFlags.bits.B6 )
  5487  0F19  0020               	movlb	0	; select bank0
  5488  0F1A  1F5A               	btfss	_MotorFlags,6
  5489  0F1B  2F21               	goto	l5444
  5490                           
  5491                           ;bldc.c: 1866: {;bldc.c: 1868: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  5492  0F1C  0022               	movlb	2	; select bank2
  5493  0F1D  080E               	movf	14,w	;volatile
  5494  0F1E  39E5               	andlw	229
  5495  0F1F  3812               	iorlw	18
  5496  0F20  008E               	movwf	14	;volatile
  5497  0F21                     l5444:	
  5498                           
  5499                           ;bldc.c: 1870: };bldc.c: 1874: LATB2 = 1;
  5500  0F21  0022               	movlb	2	; select bank2
  5501  0F22  150D               	bsf	13,2	;volatile
  5502                           
  5503                           ;bldc.c: 1875: LATB1 = 0;
  5504  0F23  108D               	bcf	13,1	;volatile
  5505                           
  5506                           ;bldc.c: 1876: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  5507  0F24  3009               	movlw	9
  5508  0F25  0020               	movlb	0	; select bank0
  5509  0F26  00A8               	movwf	??_commutate
  5510  0F27  0828               	movf	??_commutate,w
  5511  0F28  0021               	movlb	1	; select bank1
  5512  0F29  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5513                           
  5514                           ;bldc.c: 1877: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  5515  0F2A  01DB               	clrf	_ui8_UPhase_sel^(0+128)
  5516  0F2B  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
  5517                           
  5518                           ;bldc.c: 1878: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  5519  0F2C  3005               	movlw	5
  5520  0F2D  0020               	movlb	0	; select bank0
  5521  0F2E  00A8               	movwf	??_commutate
  5522  0F2F  0828               	movf	??_commutate,w
  5523  0F30  0022               	movlb	2	; select bank2
  5524  0F31  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
  5525                           
  5526                           ;bldc.c: 1879: CM1CON1 = 0x01;
  5527  0F32  3001               	movlw	1
  5528  0F33  0092               	movwf	18	;volatile
  5529                           
  5530                           ;bldc.c: 1893: CM1CON0 = 0x94;
  5531  0F34  3094               	movlw	148
  5532  0F35  0091               	movwf	17	;volatile
  5533  0F36  2FD7               	goto	L16
  5534  0F37                     l5462:	
  5535                           ;bldc.c: 1907: };bldc.c: 1910: case 3:
  5536                           
  5537                           ;bldc.c: 1903: break;
  5538                           
  5539                           ;bldc.c: 1895: comm_state = 1;
  5540                           
  5541                           ;bldc.c: 1894: rising_bemf_flag = 0;
  5542                           
  5543                           
  5544                           ;bldc.c: 1913: {;bldc.c: 1918: PSTR1CON = 0b00000010;
  5545  0F37  3002               	movlw	2
  5546  0F38  0025               	movlb	5	; select bank5
  5547  0F39  0096               	movwf	22	;volatile
  5548                           
  5549                           ;bldc.c: 1921: if( MotorFlags.bits.B6 )
  5550  0F3A  0020               	movlb	0	; select bank0
  5551  0F3B  1F5A               	btfss	_MotorFlags,6
  5552  0F3C  2F42               	goto	l5468
  5553                           
  5554                           ;bldc.c: 1923: {;bldc.c: 1925: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  5555  0F3D  0022               	movlb	2	; select bank2
  5556  0F3E  080E               	movf	14,w	;volatile
  5557  0F3F  39E5               	andlw	229
  5558  0F40  3818               	iorlw	24
  5559  0F41  008E               	movwf	14	;volatile
  5560  0F42                     l5468:	
  5561                           
  5562                           ;bldc.c: 1927: };bldc.c: 1930: LATC2 = 0;
  5563  0F42  0022               	movlb	2	; select bank2
  5564  0F43  110E               	bcf	14,2	;volatile
  5565                           
  5566                           ;bldc.c: 1932: LATB1 = 0;
  5567  0F44  108D               	bcf	13,1	;volatile
  5568                           
  5569                           ;bldc.c: 1933: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  5570  0F45  3035               	movlw	53
  5571  0F46  0020               	movlb	0	; select bank0
  5572  0F47  00A8               	movwf	??_commutate
  5573  0F48  0828               	movf	??_commutate,w
  5574  0F49  0021               	movlb	1	; select bank1
  5575  0F4A  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5576                           
  5577                           ;bldc.c: 1934: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  5578  0F4B  3005               	movlw	5
  5579  0F4C  0020               	movlb	0	; select bank0
  5580  0F4D  00A8               	movwf	??_commutate
  5581  0F4E  0828               	movf	??_commutate,w
  5582  0F4F  0021               	movlb	1	; select bank1
  5583  0F50  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5584                           
  5585                           ;bldc.c: 1935: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  5586  0F51  0022               	movlb	2	; select bank2
  5587  0F52  01E3               	clrf	_ui8_Ubemf_sel^(0+256)
  5588  0F53  0AE3               	incf	_ui8_Ubemf_sel^(0+256),f
  5589                           
  5590                           ;bldc.c: 1936: CM1CON1 = 0x00;
  5591  0F54  0192               	clrf	18	;volatile
  5592                           
  5593                           ;bldc.c: 1950: CM1CON0 = 0x84;
  5594  0F55  3084               	movlw	132
  5595  0F56  0091               	movwf	17	;volatile
  5596                           
  5597                           ;bldc.c: 1951: rising_bemf_flag = 1;
  5598  0F57  0020               	movlb	0	; select bank0
  5599  0F58  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5600                           
  5601                           ;bldc.c: 1952: comm_state = 2;
  5602  0F59  3002               	movlw	2
  5603  0F5A  2FCE               	goto	L14
  5604  0F5B                     l5482:	
  5605                           ;bldc.c: 1961: };bldc.c: 1964: case 4:
  5606                           
  5607                           ;bldc.c: 1957: break;
  5608                           
  5609                           
  5610                           ;bldc.c: 1967: {;bldc.c: 1973: PSTR1CON = 0b00000010;
  5611  0F5B  3002               	movlw	2
  5612  0F5C  0025               	movlb	5	; select bank5
  5613  0F5D  0096               	movwf	22	;volatile
  5614                           
  5615                           ;bldc.c: 1976: if( MotorFlags.bits.B6 )
  5616  0F5E  0020               	movlb	0	; select bank0
  5617  0F5F  1F5A               	btfss	_MotorFlags,6
  5618  0F60  2F66               	goto	l5488
  5619                           
  5620                           ;bldc.c: 1978: {;bldc.c: 1980: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  5621  0F61  0022               	movlb	2	; select bank2
  5622  0F62  080E               	movf	14,w	;volatile
  5623  0F63  39E5               	andlw	229
  5624  0F64  380A               	iorlw	10
  5625  0F65  008E               	movwf	14	;volatile
  5626  0F66                     l5488:	
  5627                           
  5628                           ;bldc.c: 1982: };bldc.c: 1985: LATC2 = 0;
  5629  0F66  0022               	movlb	2	; select bank2
  5630  0F67  110E               	bcf	14,2	;volatile
  5631                           
  5632                           ;bldc.c: 1987: LATB1 = 1;
  5633  0F68  148D               	bsf	13,1	;volatile
  5634                           
  5635                           ;bldc.c: 1988: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  5636  0F69  3035               	movlw	53
  5637  0F6A  0020               	movlb	0	; select bank0
  5638  0F6B  00A8               	movwf	??_commutate
  5639  0F6C  0828               	movf	??_commutate,w
  5640  0F6D  0021               	movlb	1	; select bank1
  5641  0F6E  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5642                           
  5643                           ;bldc.c: 1989: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  5644  0F6F  3005               	movlw	5
  5645  0F70  0020               	movlb	0	; select bank0
  5646  0F71  00A8               	movwf	??_commutate
  5647  0F72  0828               	movf	??_commutate,w
  5648  0F73  0021               	movlb	1	; select bank1
  5649  0F74  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5650                           
  5651                           ;bldc.c: 1990: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  5652  0F75  3025               	movlw	37
  5653  0F76  0020               	movlb	0	; select bank0
  5654  0F77  00A8               	movwf	??_commutate
  5655  0F78  0828               	movf	??_commutate,w
  5656  0F79  0022               	movlb	2	; select bank2
  5657  0F7A  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
  5658                           
  5659                           ;bldc.c: 1991: CM1CON1 = 0x02;
  5660  0F7B  3002               	movlw	2
  5661  0F7C  0092               	movwf	18	;volatile
  5662                           
  5663                           ;bldc.c: 2005: CM1CON0 = 0x94;
  5664  0F7D  3094               	movlw	148
  5665  0F7E  0091               	movwf	17	;volatile
  5666                           
  5667                           ;bldc.c: 2006: rising_bemf_flag = 0;
  5668  0F7F  0020               	movlb	0	; select bank0
  5669  0F80  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5670                           
  5671                           ;bldc.c: 2007: comm_state = 3;
  5672  0F81  3003               	movlw	3
  5673  0F82  2FCE               	goto	L14
  5674  0F83                     l5506:	
  5675                           ;bldc.c: 2015: };bldc.c: 2018: case 5:
  5676                           
  5677                           ;bldc.c: 2012: break;
  5678                           
  5679                           
  5680                           ;bldc.c: 2021: {;bldc.c: 2027: PSTR1CON = 0b00000100;
  5681  0F83  3004               	movlw	4
  5682  0F84  0025               	movlb	5	; select bank5
  5683  0F85  0096               	movwf	22	;volatile
  5684                           
  5685                           ;bldc.c: 2030: if( MotorFlags.bits.B6 )
  5686  0F86  0020               	movlb	0	; select bank0
  5687  0F87  1F5A               	btfss	_MotorFlags,6
  5688  0F88  2F8E               	goto	l5512
  5689                           
  5690                           ;bldc.c: 2032: {;bldc.c: 2034: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  5691  0F89  0022               	movlb	2	; select bank2
  5692  0F8A  080E               	movf	14,w	;volatile
  5693  0F8B  39E5               	andlw	229
  5694  0F8C  3812               	iorlw	18
  5695  0F8D  008E               	movwf	14	;volatile
  5696  0F8E                     l5512:	
  5697                           
  5698                           ;bldc.c: 2036: };bldc.c: 2039: LATC2 = 0;
  5699  0F8E  0022               	movlb	2	; select bank2
  5700  0F8F  110E               	bcf	14,2	;volatile
  5701                           
  5702                           ;bldc.c: 2040: LATB2 = 0;
  5703  0F90  110D               	bcf	13,2	;volatile
  5704                           
  5705                           ;bldc.c: 2042: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  5706  0F91  3011               	movlw	17
  5707  0F92  0020               	movlb	0	; select bank0
  5708  0F93  00A8               	movwf	??_commutate
  5709  0F94  0828               	movf	??_commutate,w
  5710  0F95  0021               	movlb	1	; select bank1
  5711  0F96  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5712                           
  5713                           ;bldc.c: 2043: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  5714  0F97  3025               	movlw	37
  5715  0F98  0020               	movlb	0	; select bank0
  5716  0F99  00A8               	movwf	??_commutate
  5717  0F9A  0828               	movf	??_commutate,w
  5718  0F9B  0021               	movlb	1	; select bank1
  5719  0F9C  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5720                           
  5721                           ;bldc.c: 2044: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  5722  0F9D  3005               	movlw	5
  5723  0F9E  0020               	movlb	0	; select bank0
  5724  0F9F  00A8               	movwf	??_commutate
  5725  0FA0  0828               	movf	??_commutate,w
  5726  0FA1  0022               	movlb	2	; select bank2
  5727  0FA2  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
  5728                           
  5729                           ;bldc.c: 2045: CM1CON1 = 0x01;
  5730  0FA3  3001               	movlw	1
  5731  0FA4  0092               	movwf	18	;volatile
  5732                           
  5733                           ;bldc.c: 2060: CM1CON0 = 0x84;
  5734  0FA5  3084               	movlw	132
  5735  0FA6  0091               	movwf	17	;volatile
  5736                           
  5737                           ;bldc.c: 2061: rising_bemf_flag = 1;
  5738  0FA7  0020               	movlb	0	; select bank0
  5739  0FA8  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5740                           
  5741                           ;bldc.c: 2062: comm_state = 4;
  5742  0FA9  3004               	movlw	4
  5743  0FAA  2FCE               	goto	L14
  5744  0FAB                     l5530:	
  5745                           ;bldc.c: 2071: };bldc.c: 2074: case 6:
  5746                           
  5747                           ;bldc.c: 2067: break;
  5748                           
  5749                           
  5750                           ;bldc.c: 2077: {;bldc.c: 2082: PSTR1CON = 0b00000100;
  5751  0FAB  3004               	movlw	4
  5752  0FAC  0025               	movlb	5	; select bank5
  5753  0FAD  0096               	movwf	22	;volatile
  5754                           
  5755                           ;bldc.c: 2085: if( MotorFlags.bits.B6 )
  5756  0FAE  0020               	movlb	0	; select bank0
  5757  0FAF  1F5A               	btfss	_MotorFlags,6
  5758  0FB0  2FB6               	goto	l5536
  5759                           
  5760                           ;bldc.c: 2087: {;bldc.c: 2089: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  5761  0FB1  0022               	movlb	2	; select bank2
  5762  0FB2  080E               	movf	14,w	;volatile
  5763  0FB3  39E5               	andlw	229
  5764  0FB4  3818               	iorlw	24
  5765  0FB5  008E               	movwf	14	;volatile
  5766  0FB6                     l5536:	
  5767                           
  5768                           ;bldc.c: 2091: };bldc.c: 2094: LATC2 = 1;
  5769  0FB6  0022               	movlb	2	; select bank2
  5770  0FB7  150E               	bsf	14,2	;volatile
  5771                           
  5772                           ;bldc.c: 2095: LATB2 = 0;
  5773  0FB8  110D               	bcf	13,2	;volatile
  5774                           
  5775                           ;bldc.c: 2097: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  5776  0FB9  3011               	movlw	17
  5777  0FBA  0020               	movlb	0	; select bank0
  5778  0FBB  00A8               	movwf	??_commutate
  5779  0FBC  0828               	movf	??_commutate,w
  5780  0FBD  0021               	movlb	1	; select bank1
  5781  0FBE  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5782                           
  5783                           ;bldc.c: 2098: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  5784  0FBF  3025               	movlw	37
  5785  0FC0  0020               	movlb	0	; select bank0
  5786  0FC1  00A8               	movwf	??_commutate
  5787  0FC2  0828               	movf	??_commutate,w
  5788  0FC3  0021               	movlb	1	; select bank1
  5789  0FC4  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5790                           
  5791                           ;bldc.c: 2099: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  5792  0FC5  0022               	movlb	2	; select bank2
  5793  0FC6  01E3               	clrf	_ui8_Ubemf_sel^(0+256)
  5794  0FC7  0AE3               	incf	_ui8_Ubemf_sel^(0+256),f
  5795                           
  5796                           ;bldc.c: 2100: CM1CON1 = 0x00;
  5797  0FC8  0192               	clrf	18	;volatile
  5798                           
  5799                           ;bldc.c: 2114: CM1CON0 = 0x94;
  5800  0FC9  3094               	movlw	148
  5801  0FCA  0091               	movwf	17	;volatile
  5802                           
  5803                           ;bldc.c: 2115: rising_bemf_flag = 0;
  5804  0FCB  0020               	movlb	0	; select bank0
  5805  0FCC  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5806                           
  5807                           ;bldc.c: 2116: comm_state = 5;
  5808  0FCD  3005               	movlw	5
  5809  0FCE                     L14:	
  5810  0FCE  00A8               	movwf	??_commutate
  5811  0FCF  0828               	movf	??_commutate,w
  5812  0FD0  0021               	movlb	1	; select bank1
  5813  0FD1  00DE               	movwf	_comm_state^(0+128)
  5814                           
  5815                           ;bldc.c: 2121: break;
  5816  0FD2  2FF1               	goto	l354
  5817  0FD3                     l5550:	
  5818                           ;bldc.c: 2125: };bldc.c: 2129: default:
  5819                           
  5820                           
  5821                           ;bldc.c: 2130: {;bldc.c: 2132: PSTR1CON = 0x00;
  5822  0FD3  0025               	movlb	5	; select bank5
  5823  0FD4  0196               	clrf	22	;volatile
  5824                           
  5825                           ;bldc.c: 2133: CM1CON0 = 0x00;
  5826  0FD5  0022               	movlb	2	; select bank2
  5827  0FD6  0191               	clrf	17	;volatile
  5828  0FD7                     L16:	
  5829                           
  5830                           ;bldc.c: 2134: rising_bemf_flag = 0;
  5831  0FD7  0020               	movlb	0	; select bank0
  5832  0FD8  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5833                           
  5834                           ;bldc.c: 2135: comm_state = 1;
  5835  0FD9  0021               	movlb	1	; select bank1
  5836  0FDA  01DE               	clrf	_comm_state^(0+128)
  5837  0FDB  0ADE               	incf	_comm_state^(0+128),f
  5838                           
  5839                           ;bldc.c: 2139: };bldc.c: 2141: }
  5840                           
  5841                           ;bldc.c: 2136: break;
  5842  0FDC  2FF1               	goto	l354
  5843  0FDD                     l5558:	
  5844  0FDD  085E               	movf	_comm_state^(0+128),w
  5845                           
  5846                           ; Switch size 1, requested type "space"
  5847                           ; Number of cases is 6, Range of values is 1 to 6
  5848                           ; switch strategies available:
  5849                           ; Name         Instructions Cycles
  5850                           ; simple_byte           19    10 (average)
  5851                           ; direct_byte           21     9 (fixed)
  5852                           ; jumptable            263     9 (fixed)
  5853                           ;	Chosen strategy is simple_byte
  5854  0FDE  3A01               	xorlw	1	; case 1
  5855  0FDF  1903               	skipnz
  5856  0FE0  2EF2               	goto	l5414
  5857  0FE1  3A03               	xorlw	3	; case 2
  5858  0FE2  1903               	skipnz
  5859  0FE3  2F16               	goto	l5438
  5860  0FE4  3A01               	xorlw	1	; case 3
  5861  0FE5  1903               	skipnz
  5862  0FE6  2F37               	goto	l5462
  5863  0FE7  3A07               	xorlw	7	; case 4
  5864  0FE8  1903               	skipnz
  5865  0FE9  2F5B               	goto	l5482
  5866  0FEA  3A01               	xorlw	1	; case 5
  5867  0FEB  1903               	skipnz
  5868  0FEC  2F83               	goto	l5506
  5869  0FED  3A03               	xorlw	3	; case 6
  5870  0FEE  1903               	skipnz
  5871  0FEF  2FAB               	goto	l5530
  5872  0FF0  2FD3               	goto	l5550
  5873  0FF1                     l354:	
  5874                           
  5875                           ;bldc.c: 2145: if( rising_bemf_flag )
  5876  0FF1  0020               	movlb	0	; select bank0
  5877  0FF2  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5878  0FF3  2FF6               	goto	l5562
  5879                           
  5880                           ;bldc.c: 2147: {;bldc.c: 2149: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
  5881  0FF4  3028               	movlw	40
  5882  0FF5  2FF8               	goto	L15
  5883  0FF6                     l5562:	
  5884                           ;bldc.c: 2151: }
  5885                           
  5886                           
  5887                           ;bldc.c: 2154: else;bldc.c: 2155: {;bldc.c: 2157: ui8_BlankingCount = ( unsigned char ) 
      +                          ( 0.002 * 20000UL );
  5888  0FF6  3028               	movlw	40
  5889  0FF7  0020               	movlb	0	; select bank0
  5890  0FF8                     L15:	
  5891  0FF8  00A8               	movwf	??_commutate
  5892  0FF9  0828               	movf	??_commutate,w
  5893  0FFA  0021               	movlb	1	; select bank1
  5894  0FFB  00DD               	movwf	_ui8_BlankingCount^(0+128)
  5895                           
  5896                           ;bldc.c: 2159: };bldc.c: 2162: comm_time = 0;
  5897  0FFC  0020               	movlb	0	; select bank0
  5898  0FFD  01D3               	clrf	_comm_time
  5899  0FFE  01D4               	clrf	_comm_time+1
  5900  0FFF  0008               	return
  5901  1000                     __end_of_commutate:	
  5902                           
  5903                           	psect	swtext1
  5904  1194                     __pswtext1:	
  5905  1194                     S11710:	
  5906  1194  318E  2E67         	ljmp	l5362
  5907  1196  318E  2E69         	ljmp	l5364
  5908  1198  318E  2E6E         	ljmp	l5366
  5909  119A  318E  2E70         	ljmp	l5368
  5910  119C  318E  2E72         	ljmp	l5370
  5911  119E  318E  2E74         	ljmp	l5372
  5912  11A0  318E  2E74         	ljmp	l5374
  5913  11A2  318E  2E74         	ljmp	l5376
  5914  11A4  318E  2E74         	ljmp	l5378
  5915  11A6  318E  2E74         	ljmp	l5380
  5916                           
  5917                           	psect	text8
  5918  1424                     __ptext8:	
  5919 ;; *************** function _PWM_Capture_init *****************
  5920 ;; Defined at:
  5921 ;;		line 85 in file "../pwm.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;  ui8_CCP_Nb      1    8[BANK0 ] unsigned char 
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  1    wreg      void 
  5928 ;; Registers used:
  5929 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5935 ;;      Params:         0       0       0       0       0       0       0       0
  5936 ;;      Locals:         0       1       0       0       0       0       0       0
  5937 ;;      Temps:          0       0       0       0       0       0       0       0
  5938 ;;      Totals:         0       1       0       0       0       0       0       0
  5939 ;;Total ram usage:        1 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    3
  5942 ;; This function calls:
  5943 ;;		Nothing
  5944 ;; This function is called by:
  5945 ;;		_system_init
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           
  5950                           ;psect for function _PWM_Capture_init
  5951  1424                     _PWM_Capture_init:	
  5952                           
  5953                           ;incstack = 0
  5954                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  5955                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  5956  1424  0020               	movlb	0	; select bank0
  5957  1425  00A8               	movwf	PWM_Capture_init@ui8_CCP_Nb
  5958                           
  5959                           ;pwm.c: 90: ui8_PWMinDC_sav = 0;
  5960  1426  0021               	movlb	1	; select bank1
  5961  1427  01CC               	clrf	_ui8_PWMinDC_sav^(0+128)
  5962                           
  5963                           ;pwm.c: 91: ui16_PWMin_failCnt = 0;
  5964  1428  0023               	movlb	3	; select bank3
  5965  1429  01B0               	clrf	_ui16_PWMin_failCnt^(0+384)
  5966  142A  01B1               	clrf	(_ui16_PWMin_failCnt+1)^(0+384)
  5967                           
  5968                           ;pwm.c: 100: switch( ui8_CCP_Nb )
  5969  142B  2C68               	goto	l5882
  5970  142C                     l5840:	
  5971                           ;pwm.c: 102: {;pwm.c: 104: case 1:
  5972                           
  5973                           
  5974                           ;pwm.c: 106: {;pwm.c: 108: CCP1CON = 0x00;
  5975  142C  0025               	movlb	5	; select bank5
  5976  142D  0193               	clrf	19	;volatile
  5977                           
  5978                           ;pwm.c: 109: CCPR1L = 0x00;
  5979  142E  0191               	clrf	17	;volatile
  5980                           
  5981                           ;pwm.c: 110: CCPR1H = 0x00;
  5982  142F  0192               	clrf	18	;volatile
  5983                           
  5984                           ;pwm.c: 111: CCP1IE = 1;
  5985  1430  0021               	movlb	1	; select bank1
  5986  1431  1511               	bsf	17,2	;volatile
  5987                           
  5988                           ;pwm.c: 112: CCP1IF = 0;
  5989  1432  0020               	movlb	0	; select bank0
  5990  1433  1111               	bcf	17,2	;volatile
  5991                           
  5992                           ;pwm.c: 113: CCP1CON = 0x05;
  5993  1434  3005               	movlw	5
  5994  1435  0025               	movlb	5	; select bank5
  5995  1436  0093               	movwf	19	;volatile
  5996                           
  5997                           ;pwm.c: 114: break;
  5998  1437  0008               	return
  5999  1438                     l5848:	
  6000                           ;pwm.c: 116: };pwm.c: 119: case 2:
  6001                           
  6002                           
  6003                           ;pwm.c: 121: {;pwm.c: 123: CCP2CON = 0x00;
  6004  1438  0025               	movlb	5	; select bank5
  6005  1439  019A               	clrf	26	;volatile
  6006                           
  6007                           ;pwm.c: 124: CCPR2L = 0x00;
  6008  143A  0198               	clrf	24	;volatile
  6009                           
  6010                           ;pwm.c: 125: CCPR2H = 0x00;
  6011  143B  0199               	clrf	25	;volatile
  6012                           
  6013                           ;pwm.c: 126: CCP2IE = 1;
  6014  143C  0021               	movlb	1	; select bank1
  6015  143D  1412               	bsf	18,0	;volatile
  6016                           
  6017                           ;pwm.c: 127: CCP2IF = 0;
  6018  143E  0020               	movlb	0	; select bank0
  6019  143F  1012               	bcf	18,0	;volatile
  6020                           
  6021                           ;pwm.c: 128: CCP2CON = 0x05;
  6022  1440  3005               	movlw	5
  6023  1441  0025               	movlb	5	; select bank5
  6024  1442  009A               	movwf	26	;volatile
  6025                           
  6026                           ;pwm.c: 129: break;
  6027  1443  0008               	return
  6028  1444                     l5856:	
  6029                           ;pwm.c: 131: };pwm.c: 134: case 3:
  6030                           
  6031                           
  6032                           ;pwm.c: 136: {;pwm.c: 138: CCP3CON = 0x00;
  6033  1444  0026               	movlb	6	; select bank6
  6034  1445  0193               	clrf	19	;volatile
  6035                           
  6036                           ;pwm.c: 139: CCPR3L = 0x00;
  6037  1446  0191               	clrf	17	;volatile
  6038                           
  6039                           ;pwm.c: 140: CCPR3H = 0x00;
  6040  1447  0192               	clrf	18	;volatile
  6041                           
  6042                           ;pwm.c: 141: CCP3IE = 1;
  6043  1448  0021               	movlb	1	; select bank1
  6044  1449  1613               	bsf	19,4	;volatile
  6045                           
  6046                           ;pwm.c: 142: CCP3IF = 0;
  6047  144A  0020               	movlb	0	; select bank0
  6048  144B  1213               	bcf	19,4	;volatile
  6049                           
  6050                           ;pwm.c: 143: CCP3CON = 0x05;
  6051  144C  3005               	movlw	5
  6052  144D  0026               	movlb	6	; select bank6
  6053  144E  0093               	movwf	19	;volatile
  6054                           
  6055                           ;pwm.c: 144: break;
  6056  144F  0008               	return
  6057  1450                     l5864:	
  6058                           ;pwm.c: 146: };pwm.c: 149: case 4:
  6059                           
  6060                           
  6061                           ;pwm.c: 151: {;pwm.c: 153: CCP4CON = 0x00;
  6062  1450  0026               	movlb	6	; select bank6
  6063  1451  019A               	clrf	26	;volatile
  6064                           
  6065                           ;pwm.c: 154: CCPR4L = 0x00;
  6066  1452  0198               	clrf	24	;volatile
  6067                           
  6068                           ;pwm.c: 155: CCPR4H = 0x00;
  6069  1453  0199               	clrf	25	;volatile
  6070                           
  6071                           ;pwm.c: 156: CCP4IE = 1;
  6072  1454  0021               	movlb	1	; select bank1
  6073  1455  1693               	bsf	19,5	;volatile
  6074                           
  6075                           ;pwm.c: 157: CCP4IF = 0;
  6076  1456  0020               	movlb	0	; select bank0
  6077  1457  1293               	bcf	19,5	;volatile
  6078                           
  6079                           ;pwm.c: 158: CCP4CON = 0x05;
  6080  1458  3005               	movlw	5
  6081  1459  0026               	movlb	6	; select bank6
  6082  145A  009A               	movwf	26	;volatile
  6083                           
  6084                           ;pwm.c: 159: break;
  6085  145B  0008               	return
  6086  145C                     l5872:	
  6087                           ;pwm.c: 161: };pwm.c: 164: case 5:
  6088                           
  6089                           
  6090                           ;pwm.c: 166: {;pwm.c: 168: CCP5CON = 0x00;
  6091  145C  0026               	movlb	6	; select bank6
  6092  145D  019E               	clrf	30	;volatile
  6093                           
  6094                           ;pwm.c: 169: CCPR5L = 0x00;
  6095  145E  019C               	clrf	28	;volatile
  6096                           
  6097                           ;pwm.c: 170: CCPR5H = 0x00;
  6098  145F  019D               	clrf	29	;volatile
  6099                           
  6100                           ;pwm.c: 171: CCP5IE = 1;
  6101  1460  0021               	movlb	1	; select bank1
  6102  1461  1713               	bsf	19,6	;volatile
  6103                           
  6104                           ;pwm.c: 172: CCP5IF = 0;
  6105  1462  0020               	movlb	0	; select bank0
  6106  1463  1313               	bcf	19,6	;volatile
  6107                           
  6108                           ;pwm.c: 173: CCP5CON = 0x05;
  6109  1464  3005               	movlw	5
  6110  1465  0026               	movlb	6	; select bank6
  6111  1466  009E               	movwf	30	;volatile
  6112                           
  6113                           ;pwm.c: 185: };pwm.c: 187: }
  6114                           
  6115                           ;pwm.c: 181: {;pwm.c: 183: break;
  6116                           
  6117                           ;pwm.c: 176: };pwm.c: 180: default:
  6118                           
  6119                           ;pwm.c: 174: break;
  6120  1467  0008               	return
  6121  1468                     l5882:	
  6122  1468  0020               	movlb	0	; select bank0
  6123  1469  0828               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  6124                           
  6125                           ; Switch size 1, requested type "space"
  6126                           ; Number of cases is 5, Range of values is 1 to 5
  6127                           ; switch strategies available:
  6128                           ; Name         Instructions Cycles
  6129                           ; simple_byte           16     9 (average)
  6130                           ; direct_byte           19     9 (fixed)
  6131                           ; jumptable            263     9 (fixed)
  6132                           ;	Chosen strategy is simple_byte
  6133  146A  3A01               	xorlw	1	; case 1
  6134  146B  1903               	skipnz
  6135  146C  2C2C               	goto	l5840
  6136  146D  3A03               	xorlw	3	; case 2
  6137  146E  1903               	skipnz
  6138  146F  2C38               	goto	l5848
  6139  1470  3A01               	xorlw	1	; case 3
  6140  1471  1903               	skipnz
  6141  1472  2C44               	goto	l5856
  6142  1473  3A07               	xorlw	7	; case 4
  6143  1474  1903               	skipnz
  6144  1475  2C50               	goto	l5864
  6145  1476  3A01               	xorlw	1	; case 5
  6146  1477  1903               	skipnz
  6147  1478  2C5C               	goto	l5872
  6148  1479  2C7A               	goto	l1155
  6149  147A                     l1155:	
  6150  147A  0008               	return
  6151  147B                     __end_of_PWM_Capture_init:	
  6152                           
  6153                           	psect	text9
  6154  1DF9                     __ptext9:	
  6155 ;; *************** function _Oscill_Source_Block *****************
  6156 ;; Defined at:
  6157 ;;		line 478 in file "../timer.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;		None
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      void 
  6164 ;; Registers used:
  6165 ;;		wreg
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6171 ;;      Params:         0       0       0       0       0       0       0       0
  6172 ;;      Locals:         0       0       0       0       0       0       0       0
  6173 ;;      Temps:          0       0       0       0       0       0       0       0
  6174 ;;      Totals:         0       0       0       0       0       0       0       0
  6175 ;;Total ram usage:        0 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    3
  6178 ;; This function calls:
  6179 ;;		Nothing
  6180 ;; This function is called by:
  6181 ;;		_system_init
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           
  6186                           ;psect for function _Oscill_Source_Block
  6187  1DF9                     _Oscill_Source_Block:	
  6188                           
  6189                           ;timer.c: 482: OSCCON = 0xF0;
  6190                           
  6191                           ;incstack = 0
  6192                           ; Regs used in _Oscill_Source_Block: [wreg]
  6193  1DF9  30F0               	movlw	240
  6194  1DFA  0021               	movlb	1	; select bank1
  6195  1DFB  0099               	movwf	25	;volatile
  6196                           
  6197                           ;timer.c: 483: WDTCON = 0b00010001;
  6198  1DFC  3011               	movlw	17
  6199  1DFD  0097               	movwf	23	;volatile
  6200  1DFE  0008               	return
  6201  1DFF                     __end_of_Oscill_Source_Block:	
  6202                           
  6203                           	psect	text10
  6204  1736                     __ptext10:	
  6205 ;; *************** function _I_calibrationInit *****************
  6206 ;; Defined at:
  6207 ;;		line 174 in file "../main.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;		None
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;		None
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		wreg, status,2, status,0, pclath, cstack
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6221 ;;      Params:         0       0       0       0       0       0       0       0
  6222 ;;      Locals:         0       0       0       0       0       0       0       0
  6223 ;;      Temps:          0       5       0       0       0       0       0       0
  6224 ;;      Totals:         0       5       0       0       0       0       0       0
  6225 ;;Total ram usage:        5 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    4
  6228 ;; This function calls:
  6229 ;;		_ADC_Read
  6230 ;;		_ADC_Wait
  6231 ;;		_read_eeprom_data
  6232 ;; This function is called by:
  6233 ;;		_system_init
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _I_calibrationInit
  6239  1736                     _I_calibrationInit:	
  6240                           
  6241                           ;main.c: 178: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  6242                           
  6243                           ;incstack = 0
  6244                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  6245  1736  3003               	movlw	3
  6246  1737  319E  2648  3197   	fcall	_read_eeprom_data
  6247  173A  3A00               	xorlw	0
  6248  173B  1903               	skipnz
  6249  173C  2F5F               	goto	l5734
  6250  173D  3003               	movlw	3
  6251  173E  319E  2648  3197   	fcall	_read_eeprom_data
  6252  1741  3AFF               	xorlw	255
  6253  1742  1903               	skipnz
  6254  1743  2F5F               	goto	l5734
  6255                           
  6256                           ;main.c: 180: {;main.c: 182: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eep
      +                          rom_data( 0x03 );
  6257  1744  3003               	movlw	3
  6258  1745  319E  2648  3197   	fcall	_read_eeprom_data
  6259  1748  0020               	movlb	0	; select bank0
  6260  1749  00AC               	movwf	??_I_calibrationInit
  6261  174A  01AD               	clrf	??_I_calibrationInit+1
  6262  174B  3002               	movlw	2
  6263  174C  319E  2648  3197   	fcall	_read_eeprom_data
  6264  174F  0020               	movlb	0	; select bank0
  6265  1750  00AE               	movwf	??_I_calibrationInit+2
  6266  1751  01AF               	clrf	??_I_calibrationInit+3
  6267  1752  082E               	movf	??_I_calibrationInit+2,w
  6268  1753  00AF               	movwf	??_I_calibrationInit+3
  6269  1754  01AE               	clrf	??_I_calibrationInit+2
  6270  1755  082C               	movf	??_I_calibrationInit,w
  6271  1756  042E               	iorwf	??_I_calibrationInit+2,w
  6272  1757  0021               	movlb	1	; select bank1
  6273  1758  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
  6274  1759  0020               	movlb	0	; select bank0
  6275  175A  082D               	movf	??_I_calibrationInit+1,w
  6276  175B  042F               	iorwf	??_I_calibrationInit+3,w
  6277  175C  0021               	movlb	1	; select bank1
  6278  175D  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  6279                           
  6280                           ;main.c: 185: }
  6281  175E  2F64               	goto	l5736
  6282  175F                     l5734:	
  6283                           
  6284                           ;main.c: 188: else;main.c: 189: {;main.c: 191: ui16_I_cal_Ph1 = 0x0100;
  6285  175F  3000               	movlw	0
  6286  1760  0021               	movlb	1	; select bank1
  6287  1761  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
  6288  1762  3001               	movlw	1
  6289  1763  00ED               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
  6290  1764                     l5736:	
  6291                           
  6292                           ;main.c: 194: };main.c: 197: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 
      +                          0x05 ) != 0xFF)
  6293  1764  3005               	movlw	5
  6294  1765  319E  2648  3197   	fcall	_read_eeprom_data
  6295  1768  3A00               	xorlw	0
  6296  1769  1903               	skipnz
  6297  176A  2F8D               	goto	l5742
  6298  176B  3005               	movlw	5
  6299  176C  319E  2648  3197   	fcall	_read_eeprom_data
  6300  176F  3AFF               	xorlw	255
  6301  1770  1903               	skipnz
  6302  1771  2F8D               	goto	l5742
  6303                           
  6304                           ;main.c: 199: {;main.c: 201: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eep
      +                          rom_data( 0x05 );
  6305  1772  3005               	movlw	5
  6306  1773  319E  2648  3197   	fcall	_read_eeprom_data
  6307  1776  0020               	movlb	0	; select bank0
  6308  1777  00AC               	movwf	??_I_calibrationInit
  6309  1778  01AD               	clrf	??_I_calibrationInit+1
  6310  1779  3004               	movlw	4
  6311  177A  319E  2648  3197   	fcall	_read_eeprom_data
  6312  177D  0020               	movlb	0	; select bank0
  6313  177E  00AE               	movwf	??_I_calibrationInit+2
  6314  177F  01AF               	clrf	??_I_calibrationInit+3
  6315  1780  082E               	movf	??_I_calibrationInit+2,w
  6316  1781  00AF               	movwf	??_I_calibrationInit+3
  6317  1782  01AE               	clrf	??_I_calibrationInit+2
  6318  1783  082C               	movf	??_I_calibrationInit,w
  6319  1784  042E               	iorwf	??_I_calibrationInit+2,w
  6320  1785  0021               	movlb	1	; select bank1
  6321  1786  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  6322  1787  0020               	movlb	0	; select bank0
  6323  1788  082D               	movf	??_I_calibrationInit+1,w
  6324  1789  042F               	iorwf	??_I_calibrationInit+3,w
  6325  178A  0021               	movlb	1	; select bank1
  6326  178B  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  6327                           
  6328                           ;main.c: 204: }
  6329  178C  2F92               	goto	l5744
  6330  178D                     l5742:	
  6331                           
  6332                           ;main.c: 207: else;main.c: 208: {;main.c: 210: ui16_I_cal_Ph2 = 0x0100;
  6333  178D  3000               	movlw	0
  6334  178E  0021               	movlb	1	; select bank1
  6335  178F  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  6336  1790  3001               	movlw	1
  6337  1791  00EB               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
  6338  1792                     l5744:	
  6339                           
  6340                           ;main.c: 213: };main.c: 216: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 
      +                          0x07 ) != 0xFF)
  6341  1792  3007               	movlw	7
  6342  1793  319E  2648  3197   	fcall	_read_eeprom_data
  6343  1796  3A00               	xorlw	0
  6344  1797  1903               	skipnz
  6345  1798  2FBB               	goto	l5750
  6346  1799  3007               	movlw	7
  6347  179A  319E  2648  3197   	fcall	_read_eeprom_data
  6348  179D  3AFF               	xorlw	255
  6349  179E  1903               	skipnz
  6350  179F  2FBB               	goto	l5750
  6351                           
  6352                           ;main.c: 218: {;main.c: 220: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eep
      +                          rom_data( 0x07 );
  6353  17A0  3007               	movlw	7
  6354  17A1  319E  2648  3197   	fcall	_read_eeprom_data
  6355  17A4  0020               	movlb	0	; select bank0
  6356  17A5  00AC               	movwf	??_I_calibrationInit
  6357  17A6  01AD               	clrf	??_I_calibrationInit+1
  6358  17A7  3006               	movlw	6
  6359  17A8  319E  2648  3197   	fcall	_read_eeprom_data
  6360  17AB  0020               	movlb	0	; select bank0
  6361  17AC  00AE               	movwf	??_I_calibrationInit+2
  6362  17AD  01AF               	clrf	??_I_calibrationInit+3
  6363  17AE  082E               	movf	??_I_calibrationInit+2,w
  6364  17AF  00AF               	movwf	??_I_calibrationInit+3
  6365  17B0  01AE               	clrf	??_I_calibrationInit+2
  6366  17B1  082C               	movf	??_I_calibrationInit,w
  6367  17B2  042E               	iorwf	??_I_calibrationInit+2,w
  6368  17B3  0021               	movlb	1	; select bank1
  6369  17B4  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
  6370  17B5  0020               	movlb	0	; select bank0
  6371  17B6  082D               	movf	??_I_calibrationInit+1,w
  6372  17B7  042F               	iorwf	??_I_calibrationInit+3,w
  6373  17B8  0021               	movlb	1	; select bank1
  6374  17B9  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  6375                           
  6376                           ;main.c: 222: }
  6377  17BA  2FC0               	goto	l5752
  6378  17BB                     l5750:	
  6379                           
  6380                           ;main.c: 225: else;main.c: 226: {;main.c: 228: ui16_I_cal_Ph3 = 0x0100;
  6381  17BB  3000               	movlw	0
  6382  17BC  0021               	movlb	1	; select bank1
  6383  17BD  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
  6384  17BE  3001               	movlw	1
  6385  17BF  00E9               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
  6386  17C0                     l5752:	
  6387                           
  6388                           ;main.c: 231: };main.c: 324: LATC2 = 0;
  6389  17C0  0022               	movlb	2	; select bank2
  6390  17C1  110E               	bcf	14,2	;volatile
  6391                           
  6392                           ;main.c: 325: LATB2 = 0;
  6393  17C2  110D               	bcf	13,2	;volatile
  6394                           
  6395                           ;main.c: 326: LATB1 = 0;
  6396  17C3  108D               	bcf	13,1	;volatile
  6397                           
  6398                           ;main.c: 327: LATC = LATC | 0b00011010;
  6399  17C4  080E               	movf	14,w	;volatile
  6400  17C5  381A               	iorlw	26
  6401  17C6  008E               	movwf	14	;volatile
  6402                           
  6403                           ;main.c: 329: ADC_Wait();
  6404  17C7  319E  2696  3197   	fcall	_ADC_Wait
  6405                           
  6406                           ;main.c: 330: ADC_Wait();
  6407  17CA  319E  2696  3197   	fcall	_ADC_Wait
  6408                           
  6409                           ;main.c: 332: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  6410  17CD  3011               	movlw	17
  6411  17CE  0021               	movlb	1	; select bank1
  6412  17CF  009D               	movwf	29	;volatile
  6413                           
  6414                           ;main.c: 333: ADC_Wait();
  6415  17D0  319E  2696  3197   	fcall	_ADC_Wait
  6416                           
  6417                           ;main.c: 334: ( GO_nDONE = 1 );
  6418  17D3  0021               	movlb	1	; select bank1
  6419  17D4  149D               	bsf	29,1	;volatile
  6420                           
  6421                           ;main.c: 337: ui8_current_cal[2] = ADC_Read();
  6422  17D5  319F  2721  3197   	fcall	_ADC_Read
  6423  17D8  0020               	movlb	0	; select bank0
  6424  17D9  0828               	movf	?_ADC_Read,w
  6425  17DA  00AC               	movwf	??_I_calibrationInit
  6426  17DB  082C               	movf	??_I_calibrationInit,w
  6427  17DC  0022               	movlb	2	; select bank2
  6428  17DD  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  6429                           
  6430                           ;main.c: 339: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  6431  17DE  3035               	movlw	53
  6432  17DF  0021               	movlb	1	; select bank1
  6433  17E0  009D               	movwf	29	;volatile
  6434                           
  6435                           ;main.c: 340: ADC_Wait();
  6436  17E1  319E  2696  3197   	fcall	_ADC_Wait
  6437                           
  6438                           ;main.c: 341: ( GO_nDONE = 1 );
  6439  17E4  0021               	movlb	1	; select bank1
  6440  17E5  149D               	bsf	29,1	;volatile
  6441                           
  6442                           ;main.c: 344: ui8_current_cal[1] = ADC_Read();
  6443  17E6  319F  2721  3197   	fcall	_ADC_Read
  6444  17E9  0020               	movlb	0	; select bank0
  6445  17EA  0828               	movf	?_ADC_Read,w
  6446  17EB  00AC               	movwf	??_I_calibrationInit
  6447  17EC  082C               	movf	??_I_calibrationInit,w
  6448  17ED  0022               	movlb	2	; select bank2
  6449  17EE  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  6450                           
  6451                           ;main.c: 346: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  6452  17EF  3009               	movlw	9
  6453  17F0  0021               	movlb	1	; select bank1
  6454  17F1  009D               	movwf	29	;volatile
  6455                           
  6456                           ;main.c: 347: ADC_Wait();
  6457  17F2  319E  2696  3197   	fcall	_ADC_Wait
  6458                           
  6459                           ;main.c: 348: ( GO_nDONE = 1 );
  6460  17F5  0021               	movlb	1	; select bank1
  6461  17F6  149D               	bsf	29,1	;volatile
  6462                           
  6463                           ;main.c: 351: ui8_current_cal[0] = ADC_Read();
  6464  17F7  319F  2721         	fcall	_ADC_Read
  6465  17F9  0020               	movlb	0	; select bank0
  6466  17FA  0828               	movf	?_ADC_Read,w
  6467  17FB  00AC               	movwf	??_I_calibrationInit
  6468  17FC  082C               	movf	??_I_calibrationInit,w
  6469  17FD  0022               	movlb	2	; select bank2
  6470  17FE  00A0               	movwf	_ui8_current_cal^(0+256)
  6471  17FF  0008               	return
  6472  1800                     __end_of_I_calibrationInit:	
  6473                           
  6474                           	psect	text11
  6475  1E48                     __ptext11:	
  6476 ;; *************** function _read_eeprom_data *****************
  6477 ;; Defined at:
  6478 ;;		line 52 in file "../eeprom.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;  ui8_adress      1    wreg     unsigned char 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  ui8_adress      1    9[BANK0 ] unsigned char 
  6483 ;;  ui8_adress_d    1   10[BANK0 ] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      unsigned char 
  6486 ;; Registers used:
  6487 ;;		wreg
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6493 ;;      Params:         0       0       0       0       0       0       0       0
  6494 ;;      Locals:         0       2       0       0       0       0       0       0
  6495 ;;      Temps:          0       1       0       0       0       0       0       0
  6496 ;;      Totals:         0       3       0       0       0       0       0       0
  6497 ;;Total ram usage:        3 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    3
  6500 ;; This function calls:
  6501 ;;		Nothing
  6502 ;; This function is called by:
  6503 ;;		_I_calibrationInit
  6504 ;;		_EOL
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           
  6509                           ;psect for function _read_eeprom_data
  6510  1E48                     _read_eeprom_data:	
  6511                           
  6512                           ;incstack = 0
  6513                           ; Regs used in _read_eeprom_data: [wreg]
  6514                           ;read_eeprom_data@ui8_adress stored from wreg
  6515  1E48  0020               	movlb	0	; select bank0
  6516  1E49  00A9               	movwf	read_eeprom_data@ui8_adress
  6517                           
  6518                           ;eeprom.c: 56: unsigned char ui8_adress_data;;eeprom.c: 58: EEADRL = ui8_adress;
  6519  1E4A  0829               	movf	read_eeprom_data@ui8_adress,w
  6520  1E4B  0023               	movlb	3	; select bank3
  6521  1E4C  0091               	movwf	17	;volatile
  6522                           
  6523                           ;eeprom.c: 59: EEPGD = 0;
  6524  1E4D  1395               	bcf	21,7	;volsfr
  6525                           
  6526                           ;eeprom.c: 60: CFGS = 0;
  6527  1E4E  1315               	bcf	21,6	;volsfr
  6528                           
  6529                           ;eeprom.c: 61: RD = 1;
  6530  1E4F  1415               	bsf	21,0	;volsfr
  6531                           
  6532                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  6533  1E50  0813               	movf	19,w	;volatile
  6534  1E51  0020               	movlb	0	; select bank0
  6535  1E52  00A8               	movwf	??_read_eeprom_data
  6536  1E53  0828               	movf	??_read_eeprom_data,w
  6537  1E54  00AA               	movwf	read_eeprom_data@ui8_adress_data
  6538                           
  6539                           ;eeprom.c: 64: return ui8_adress_data;
  6540  1E55  082A               	movf	read_eeprom_data@ui8_adress_data,w
  6541  1E56  0008               	return
  6542  1E57                     __end_of_read_eeprom_data:	
  6543                           
  6544                           	psect	text12
  6545  1F8B                     __ptext12:	
  6546 ;; *************** function _FILTER_Init *****************
  6547 ;; Defined at:
  6548 ;;		line 226 in file "../adc.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;		None
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;		None
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  1    wreg      void 
  6555 ;; Registers used:
  6556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6562 ;;      Params:         0       0       0       0       0       0       0       0
  6563 ;;      Locals:         0       0       0       0       0       0       0       0
  6564 ;;      Temps:          0       1       0       0       0       0       0       0
  6565 ;;      Totals:         0       1       0       0       0       0       0       0
  6566 ;;Total ram usage:        1 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    4
  6569 ;; This function calls:
  6570 ;;		_ADC_Read
  6571 ;;		_ADC_Wait
  6572 ;; This function is called by:
  6573 ;;		_system_init
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _FILTER_Init
  6579  1F8B                     _FILTER_Init:	
  6580                           
  6581                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6585  1F8B  0021               	movlb	1	; select bank1
  6586  1F8C  01E1               	clrf	_windowPtr1^(0+128)
  6587  1F8D                     L18:	
  6588  1F8D  3008               	movlw	8
  6589  1F8E  0261               	subwf	_windowPtr1^(0+128),w
  6590  1F8F  1803               	btfsc	3,0
  6591  1F90  0008               	return
  6592                           
  6593                           ;adc.c: 232: {;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  6594  1F91  3031               	movlw	49
  6595  1F92  009D               	movwf	29	;volatile
  6596                           
  6597                           ;adc.c: 235: ADC_Wait( );
  6598  1F93  319E  2696  319F   	fcall	_ADC_Wait
  6599                           
  6600                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  6601  1F96  319F  2721  319F   	fcall	_ADC_Read
  6602  1F99  0020               	movlb	0	; select bank0
  6603  1F9A  0829               	movf	?_ADC_Read+1,w
  6604  1F9B  00DC               	movwf	_ui16_Ubat_bldc+1	;volatile
  6605  1F9C  0828               	movf	?_ADC_Read,w
  6606  1F9D  00DB               	movwf	_ui16_Ubat_bldc	;volatile
  6607                           
  6608                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  6609  1F9E  0021               	movlb	1	; select bank1
  6610  1F9F  3561               	lslf	_windowPtr1^(0+128),w
  6611  1FA0  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  6612  1FA1  0086               	movwf	6
  6613  1FA2  3002               	movlw	2	; select bank4/5
  6614  1FA3  0087               	movwf	7
  6615  1FA4  305E               	movlw	94
  6616  1FA5  3FC0               	movwi [0]fsr1
  6617  1FA6  3001               	movlw	1
  6618  1FA7  3FC1               	movwi [1]fsr1
  6619  1FA8  3001               	movlw	1
  6620  1FA9  0020               	movlb	0	; select bank0
  6621  1FAA  00AC               	movwf	??_FILTER_Init
  6622  1FAB  082C               	movf	??_FILTER_Init,w
  6623  1FAC  0021               	movlb	1	; select bank1
  6624  1FAD  07E1               	addwf	_windowPtr1^(0+128),f
  6625  1FAE  2F8D               	goto	L18
  6626  1FAF                     __end_of_FILTER_Init:	
  6627                           
  6628                           	psect	text13
  6629  1E96                     __ptext13:	
  6630 ;; *************** function _ADC_Wait *****************
  6631 ;; Defined at:
  6632 ;;		line 128 in file "../adc.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		None
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6646 ;;      Params:         0       0       0       0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0
  6649 ;;      Totals:         0       0       0       0       0       0       0       0
  6650 ;;Total ram usage:        0 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    3
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_FILTER_Init
  6657 ;;		_I_calibrationInit
  6658 ;;		_EOL
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           
  6663                           ;psect for function _ADC_Wait
  6664  1E96                     _ADC_Wait:	
  6665                           
  6666                           ;adc.c: 133: __nop();
  6667                           
  6668                           ;incstack = 0
  6669                           ; Regs used in _ADC_Wait: []
  6670  1E96  0000               	nop
  6671                           
  6672                           ;adc.c: 134: __nop();
  6673  1E97  0000               	nop
  6674                           
  6675                           ;adc.c: 135: __nop();
  6676  1E98  0000               	nop
  6677                           
  6678                           ;adc.c: 136: __nop();
  6679  1E99  0000               	nop
  6680                           
  6681                           ;adc.c: 137: __nop();
  6682  1E9A  0000               	nop
  6683                           
  6684                           ;adc.c: 138: __nop();
  6685  1E9B  0000               	nop
  6686                           
  6687                           ;adc.c: 139: __nop();
  6688  1E9C  0000               	nop
  6689                           
  6690                           ;adc.c: 140: __nop();
  6691  1E9D  0000               	nop
  6692                           
  6693                           ;adc.c: 142: __nop();
  6694  1E9E  0000               	nop
  6695                           
  6696                           ;adc.c: 143: __nop();
  6697  1E9F  0000               	nop
  6698                           
  6699                           ;adc.c: 144: __nop();
  6700  1EA0  0000               	nop
  6701                           
  6702                           ;adc.c: 145: __nop();
  6703  1EA1  0000               	nop
  6704                           
  6705                           ;adc.c: 146: __nop();
  6706  1EA2  0000               	nop
  6707                           
  6708                           ;adc.c: 147: __nop();
  6709  1EA3  0000               	nop
  6710                           
  6711                           ;adc.c: 148: __nop();
  6712  1EA4  0000               	nop
  6713                           
  6714                           ;adc.c: 149: __nop();
  6715  1EA5  0000               	nop
  6716                           
  6717                           ;adc.c: 151: __nop();
  6718  1EA6  0000               	nop
  6719                           
  6720                           ;adc.c: 152: __nop();
  6721  1EA7  0000               	nop
  6722                           
  6723                           ;adc.c: 153: __nop();
  6724  1EA8  0000               	nop
  6725                           
  6726                           ;adc.c: 154: __nop();
  6727  1EA9  0000               	nop
  6728                           
  6729                           ;adc.c: 155: __nop();
  6730  1EAA  0000               	nop
  6731                           
  6732                           ;adc.c: 156: __nop();
  6733  1EAB  0000               	nop
  6734                           
  6735                           ;adc.c: 157: __nop();
  6736  1EAC  0000               	nop
  6737                           
  6738                           ;adc.c: 158: __nop();
  6739  1EAD  0000               	nop
  6740  1EAE  0008               	return
  6741  1EAF                     __end_of_ADC_Wait:	
  6742                           
  6743                           	psect	text14
  6744  1F21                     __ptext14:	
  6745 ;; *************** function _ADC_Read *****************
  6746 ;; Defined at:
  6747 ;;		line 175 in file "../adc.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;		None
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  i               1   11[BANK0 ] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  2    8[BANK0 ] unsigned int 
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6761 ;;      Params:         0       2       0       0       0       0       0       0
  6762 ;;      Locals:         0       1       0       0       0       0       0       0
  6763 ;;      Temps:          0       1       0       0       0       0       0       0
  6764 ;;      Totals:         0       4       0       0       0       0       0       0
  6765 ;;Total ram usage:        4 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    3
  6768 ;; This function calls:
  6769 ;;		Nothing
  6770 ;; This function is called by:
  6771 ;;		_FILTER_Init
  6772 ;;		_I_calibrationInit
  6773 ;;		_EOL
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _ADC_Read
  6779  1F21                     _ADC_Read:	
  6780                           
  6781                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
  6782                           
  6783                           ;incstack = 0
  6784                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  6785  1F21  0020               	movlb	0	; select bank0
  6786  1F22  01AB               	clrf	ADC_Read@i
  6787  1F23                     l69:	
  6788                           ;adc.c: 182: while( GO_nDONE )
  6789                           
  6790  1F23  0021               	movlb	1	; select bank1
  6791  1F24  1C9D               	btfss	29,1	;volatile
  6792  1F25  2F2F               	goto	l5584
  6793                           
  6794                           ;adc.c: 184: {;adc.c: 186: i++;
  6795  1F26  3001               	movlw	1
  6796  1F27  0020               	movlb	0	; select bank0
  6797  1F28  00AA               	movwf	??_ADC_Read
  6798  1F29  082A               	movf	??_ADC_Read,w
  6799  1F2A  07AB               	addwf	ADC_Read@i,f
  6800                           
  6801                           ;adc.c: 189: if( i > 64 )
  6802  1F2B  3041               	movlw	65
  6803  1F2C  022B               	subwf	ADC_Read@i,w
  6804  1F2D  1C03               	skipc
  6805  1F2E  2F23               	goto	l69
  6806  1F2F                     l5584:	
  6807                           ;adc.c: 191: {;adc.c: 193: break;
  6808                           
  6809                           
  6810                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
  6811  1F2F  0021               	movlb	1	; select bank1
  6812  1F30  081C               	movf	28,w	;volatile
  6813  1F31  0020               	movlb	0	; select bank0
  6814  1F32  00AA               	movwf	??_ADC_Read
  6815  1F33  082A               	movf	??_ADC_Read,w
  6816  1F34  0021               	movlb	1	; select bank1
  6817  1F35  00BD               	movwf	(_analog_value^(0+128)+1)	;volatile
  6818                           
  6819                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  6820  1F36  081B               	movf	27,w	;volatile
  6821  1F37  0020               	movlb	0	; select bank0
  6822  1F38  00AA               	movwf	??_ADC_Read
  6823  1F39  082A               	movf	??_ADC_Read,w
  6824  1F3A  0021               	movlb	1	; select bank1
  6825  1F3B  00BC               	movwf	_analog_value^(0+128)	;volatile
  6826                           
  6827                           ;adc.c: 204: return analog_value.w;
  6828  1F3C  083D               	movf	(_analog_value+1)^(0+128),w	;volatile
  6829  1F3D  0020               	movlb	0	; select bank0
  6830  1F3E  00A9               	movwf	?_ADC_Read+1
  6831  1F3F  0021               	movlb	1	; select bank1
  6832  1F40  083C               	movf	_analog_value^(0+128),w	;volatile
  6833  1F41  0020               	movlb	0	; select bank0
  6834  1F42  00A8               	movwf	?_ADC_Read
  6835  1F43  0008               	return
  6836  1F44                     __end_of_ADC_Read:	
  6837                           
  6838                           	psect	text15
  6839  1E2D                     __ptext15:	
  6840 ;; *************** function _DiagInit *****************
  6841 ;; Defined at:
  6842 ;;		line 148 in file "../diag.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;		None
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;		None
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, status,2, status,0, pclath, cstack
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6856 ;;      Params:         0       0       0       0       0       0       0       0
  6857 ;;      Locals:         0       0       0       0       0       0       0       0
  6858 ;;      Temps:          0       0       0       0       0       0       0       0
  6859 ;;      Totals:         0       0       0       0       0       0       0       0
  6860 ;;Total ram usage:        0 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    4
  6863 ;; This function calls:
  6864 ;;		_PWM_Write_Out
  6865 ;; This function is called by:
  6866 ;;		_system_init
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function _DiagInit
  6872  1E2D                     _DiagInit:	
  6873                           
  6874                           ;diag.c: 162: ui8_error_Flags.b = 0;
  6875                           
  6876                           ;incstack = 0
  6877                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  6878  1E2D  0021               	movlb	1	; select bank1
  6879  1E2E  01E0               	clrf	_ui8_error_Flags^(0+128)
  6880                           
  6881                           ;diag.c: 163: PWM_Write_Out( 11 );
  6882  1E2F  300B               	movlw	11
  6883  1E30  319E  2612         	fcall	_PWM_Write_Out
  6884                           
  6885                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  6886  1E32  0021               	movlb	1	; select bank1
  6887  1E33  01E6               	clrf	_ui16_IPhase1_bldc_cal^(0+128)
  6888  1E34  01E7               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+128)
  6889                           
  6890                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  6891  1E35  01E4               	clrf	_ui16_IPhase2_bldc_cal^(0+128)
  6892  1E36  01E5               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+128)
  6893                           
  6894                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  6895  1E37  01E2               	clrf	_ui16_IPhase3_bldc_cal^(0+128)
  6896  1E38  01E3               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+128)
  6897  1E39  0008               	return
  6898  1E3A                     __end_of_DiagInit:	
  6899                           
  6900                           	psect	text16
  6901  1E22                     __ptext16:	
  6902 ;; *************** function _ADC_Init *****************
  6903 ;; Defined at:
  6904 ;;		line 102 in file "../adc.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;		None
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;		None
  6909 ;; Return value:  Size  Location     Type
  6910 ;;                  1    wreg      void 
  6911 ;; Registers used:
  6912 ;;		wreg, status,2
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6918 ;;      Params:         0       0       0       0       0       0       0       0
  6919 ;;      Locals:         0       0       0       0       0       0       0       0
  6920 ;;      Temps:          0       0       0       0       0       0       0       0
  6921 ;;      Totals:         0       0       0       0       0       0       0       0
  6922 ;;Total ram usage:        0 bytes
  6923 ;; Hardware stack levels used:    1
  6924 ;; Hardware stack levels required when called:    3
  6925 ;; This function calls:
  6926 ;;		Nothing
  6927 ;; This function is called by:
  6928 ;;		_system_init
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           
  6933                           ;psect for function _ADC_Init
  6934  1E22                     _ADC_Init:	
  6935                           
  6936                           ;adc.c: 106: ADCON1 = 0b10100000;
  6937                           
  6938                           ;incstack = 0
  6939                           ; Regs used in _ADC_Init: [wreg+status,2]
  6940  1E22  30A0               	movlw	160
  6941  1E23  0021               	movlb	1	; select bank1
  6942  1E24  009E               	movwf	30	;volatile
  6943                           
  6944                           ;adc.c: 108: ADCON0 = 0b00000000;
  6945  1E25  019D               	clrf	29	;volatile
  6946                           
  6947                           ;adc.c: 109: ADON = 1;
  6948  1E26  141D               	bsf	29,0	;volatile
  6949                           
  6950                           ;adc.c: 110: FVRCON = FVRCON | 0b00110000;
  6951  1E27  0022               	movlb	2	; select bank2
  6952  1E28  0817               	movf	23,w	;volatile
  6953  1E29  3830               	iorlw	48
  6954  1E2A  0097               	movwf	23	;volatile
  6955                           
  6956                           ;adc.c: 111: ui8_temp_calibration = 0;
  6957  1E2B  01E7               	clrf	_ui8_temp_calibration^(0+256)
  6958  1E2C  0008               	return
  6959  1E2D                     __end_of_ADC_Init:	
  6960                           
  6961                           	psect	text17
  6962  129D                     __ptext17:	
  6963 ;; *************** function _SetDiagAlarm *****************
  6964 ;; Defined at:
  6965 ;;		line 210 in file "../diag.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;		None
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;		None
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      void 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0, pclath, cstack
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6979 ;;      Params:         0       0       0       0       0       0       0       0
  6980 ;;      Locals:         0       0       0       0       0       0       0       0
  6981 ;;      Temps:          0       0       0       0       0       0       0       0
  6982 ;;      Totals:         0       0       0       0       0       0       0       0
  6983 ;;Total ram usage:        0 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    4
  6986 ;; This function calls:
  6987 ;;		_PWM_Write_Out
  6988 ;; This function is called by:
  6989 ;;		_main
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _SetDiagAlarm
  6995  129D                     _SetDiagAlarm:	
  6996                           
  6997                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  6998                           
  6999                           ;incstack = 0
  7000                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  7001  129D  0021               	movlb	1	; select bank1
  7002  129E  1F60               	btfss	_ui8_error_Flags^(0+128),6
  7003  129F  2AA4               	goto	l6708
  7004                           
  7005                           ;diag.c: 221: {;diag.c: 223: PWM_Write_Out( 88 );
  7006  12A0  3058               	movlw	88
  7007  12A1  319E  2612         	fcall	_PWM_Write_Out
  7008                           
  7009                           ;diag.c: 226: }
  7010  12A3  0008               	return
  7011  12A4                     l6708:	
  7012                           
  7013                           ;diag.c: 229: else;diag.c: 230: {;diag.c: 232: if( bool_CPU_TempAlarm )
  7014  12A4  0021               	movlb	1	; select bank1
  7015  12A5  0858               	movf	_bool_CPU_TempAlarm^(0+128),w
  7016  12A6  1903               	btfsc	3,2
  7017  12A7  2AAC               	goto	l6712
  7018                           
  7019                           ;diag.c: 235: {;diag.c: 237: PWM_Write_Out( 33 );
  7020  12A8  3021               	movlw	33
  7021  12A9  319E  2612         	fcall	_PWM_Write_Out
  7022                           
  7023                           ;diag.c: 240: }
  7024  12AB  0008               	return
  7025  12AC                     l6712:	
  7026                           
  7027                           ;diag.c: 243: else;diag.c: 244: {;diag.c: 246: if( bool_DryRunningAlarm )
  7028  12AC  0021               	movlb	1	; select bank1
  7029  12AD  0857               	movf	_bool_DryRunningAlarm^(0+128),w
  7030  12AE  1903               	btfsc	3,2
  7031  12AF  2AB4               	goto	l6716
  7032                           
  7033                           ;diag.c: 248: {;diag.c: 250: PWM_Write_Out( 66 );
  7034  12B0  3042               	movlw	66
  7035  12B1  319E  2612         	fcall	_PWM_Write_Out
  7036                           
  7037                           ;diag.c: 253: }
  7038  12B3  0008               	return
  7039  12B4                     l6716:	
  7040                           
  7041                           ;diag.c: 256: else;diag.c: 257: {;diag.c: 259: if( bool_MotorStalled )
  7042  12B4  0021               	movlb	1	; select bank1
  7043  12B5  0856               	movf	_bool_MotorStalled^(0+128),w
  7044  12B6  1903               	btfsc	3,2
  7045  12B7  2ABC               	goto	l6720
  7046                           
  7047                           ;diag.c: 261: {;diag.c: 263: PWM_Write_Out( 55 );
  7048  12B8  3037               	movlw	55
  7049  12B9  319E  2612         	fcall	_PWM_Write_Out
  7050                           
  7051                           ;diag.c: 266: }
  7052  12BB  0008               	return
  7053  12BC                     l6720:	
  7054                           
  7055                           ;diag.c: 269: else;diag.c: 270: {;diag.c: 272: if( bool_HighCurrentAlarm )
  7056  12BC  0021               	movlb	1	; select bank1
  7057  12BD  0855               	movf	_bool_HighCurrentAlarm^(0+128),w
  7058  12BE  1903               	btfsc	3,2
  7059  12BF  2AC4               	goto	l514
  7060                           
  7061                           ;diag.c: 274: {;diag.c: 276: PWM_Write_Out( 44 );
  7062  12C0  302C               	movlw	44
  7063  12C1  319E  2612         	fcall	_PWM_Write_Out
  7064                           
  7065                           ;diag.c: 278: }
  7066  12C3  0008               	return
  7067  12C4                     l514:	
  7068                           
  7069                           ;diag.c: 281: else;diag.c: 282: {;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  7070  12C4  1EE0               	btfss	_ui8_error_Flags^(0+128),5
  7071  12C5  2ACA               	goto	l516
  7072                           
  7073                           ;diag.c: 287: {;diag.c: 289: PWM_Write_Out( 77 );
  7074  12C6  304D               	movlw	77
  7075  12C7  319E  2612         	fcall	_PWM_Write_Out
  7076                           
  7077                           ;diag.c: 292: }
  7078  12C9  0008               	return
  7079  12CA                     l516:	
  7080                           
  7081                           ;diag.c: 295: else;diag.c: 296: {;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  7082  12CA  1C60               	btfss	_ui8_error_Flags^(0+128),0
  7083  12CB  2AD0               	goto	l6728
  7084                           
  7085                           ;diag.c: 300: {;diag.c: 302: PWM_Write_Out( 22 );
  7086  12CC  3016               	movlw	22
  7087  12CD  319E  2612         	fcall	_PWM_Write_Out
  7088                           
  7089                           ;diag.c: 305: }
  7090  12CF  0008               	return
  7091  12D0                     l6728:	
  7092                           
  7093                           ;diag.c: 308: else;diag.c: 309: {;diag.c: 311: PWM_Write_Out( 11 );
  7094  12D0  300B               	movlw	11
  7095  12D1  319E  2612         	fcall	_PWM_Write_Out
  7096  12D3  0008               	return
  7097  12D4                     __end_of_SetDiagAlarm:	
  7098                           
  7099                           	psect	text18
  7100  1E12                     __ptext18:	
  7101 ;; *************** function _PWM_Write_Out *****************
  7102 ;; Defined at:
  7103 ;;		line 347 in file "../pwm.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  ui8_DutyCycl    1    wreg     unsigned char 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  ui8_DutyCycl    1    9[BANK0 ] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      void 
  7110 ;; Registers used:
  7111 ;;		wreg
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7117 ;;      Params:         0       0       0       0       0       0       0       0
  7118 ;;      Locals:         0       1       0       0       0       0       0       0
  7119 ;;      Temps:          0       1       0       0       0       0       0       0
  7120 ;;      Totals:         0       2       0       0       0       0       0       0
  7121 ;;Total ram usage:        2 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    3
  7124 ;; This function calls:
  7125 ;;		Nothing
  7126 ;; This function is called by:
  7127 ;;		_DiagInit
  7128 ;;		_SetDiagAlarm
  7129 ;;		_EOL
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           
  7134                           ;psect for function _PWM_Write_Out
  7135  1E12                     _PWM_Write_Out:	
  7136                           
  7137                           ;incstack = 0
  7138                           ; Regs used in _PWM_Write_Out: [wreg]
  7139                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
  7140  1E12  0020               	movlb	0	; select bank0
  7141  1E13  00A9               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
  7142                           
  7143                           ;pwm.c: 351: ui8_PWMoutvalue = ui8_DutyCycle_Out;
  7144  1E14  0829               	movf	PWM_Write_Out@ui8_DutyCycle_Out,w
  7145  1E15  00A8               	movwf	??_PWM_Write_Out
  7146  1E16  0828               	movf	??_PWM_Write_Out,w
  7147  1E17  0022               	movlb	2	; select bank2
  7148  1E18  00C1               	movwf	_ui8_PWMoutvalue^(0+256)
  7149  1E19  0008               	return
  7150  1E1A                     __end_of_PWM_Write_Out:	
  7151                           
  7152                           	psect	text19
  7153  168A                     __ptext19:	
  7154 ;; *************** function _PWMReadDC *****************
  7155 ;; Defined at:
  7156 ;;		line 368 in file "../pwm.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;		None
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;		None
  7161 ;; Return value:  Size  Location     Type
  7162 ;;                  1    wreg      unsigned char 
  7163 ;; Registers used:
  7164 ;;		wreg, status,2, status,0, pclath, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7170 ;;      Params:         0       0       0       0       0       0       0       0
  7171 ;;      Locals:         0       0       0       0       0       0       0       0
  7172 ;;      Temps:          0       4       0       0       0       0       0       0
  7173 ;;      Totals:         0       4       0       0       0       0       0       0
  7174 ;;Total ram usage:        4 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    4
  7177 ;; This function calls:
  7178 ;;		___ltdiv
  7179 ;;		___tmul
  7180 ;; This function is called by:
  7181 ;;		_main
  7182 ;;		_EOL
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           
  7187                           ;psect for function _PWMReadDC
  7188  168A                     _PWMReadDC:	
  7189                           
  7190                           ;pwm.c: 373: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
  7191                           
  7192                           ;incstack = 0
  7193                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
  7194  168A  0023               	movlb	3	; select bank3
  7195  168B  083C               	movf	_ui16_PWM_Freq_In^(0+384),w
  7196  168C  0020               	movlb	0	; select bank0
  7197  168D  00B1               	movwf	___ltdiv@divisor
  7198  168E  0023               	movlb	3	; select bank3
  7199  168F  083D               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  7200  1690  0020               	movlb	0	; select bank0
  7201  1691  00B2               	movwf	___ltdiv@divisor+1
  7202  1692  01B3               	clrf	___ltdiv@divisor+2
  7203  1693  0023               	movlb	3	; select bank3
  7204  1694  086C               	movf	_ui16_Duty_Cycle_In^(0+384),w
  7205  1695  0020               	movlb	0	; select bank0
  7206  1696  00A8               	movwf	___tmul@multiplier
  7207  1697  0023               	movlb	3	; select bank3
  7208  1698  086D               	movf	(_ui16_Duty_Cycle_In+1)^(0+384),w
  7209  1699  0020               	movlb	0	; select bank0
  7210  169A  00A9               	movwf	___tmul@multiplier+1
  7211  169B  01AA               	clrf	___tmul@multiplier+2
  7212  169C  30C8               	movlw	200
  7213  169D  00AB               	movwf	___tmul@multiplicand
  7214  169E  3000               	movlw	0
  7215  169F  00AC               	movwf	___tmul@multiplicand+1
  7216  16A0  3000               	movlw	0
  7217  16A1  00AD               	movwf	___tmul@multiplicand+2
  7218  16A2  319F  27AF  3196   	fcall	___tmul
  7219  16A5  0020               	movlb	0	; select bank0
  7220  16A6  0828               	movf	?___tmul,w
  7221  16A7  00B4               	movwf	___ltdiv@dividend
  7222  16A8  0829               	movf	?___tmul+1,w
  7223  16A9  00B5               	movwf	___ltdiv@dividend+1
  7224  16AA  082A               	movf	?___tmul+2,w
  7225  16AB  00B6               	movwf	___ltdiv@dividend+2
  7226  16AC  3193  234D  3196   	fcall	___ltdiv
  7227  16AF  0020               	movlb	0	; select bank0
  7228  16B0  0831               	movf	?___ltdiv,w
  7229  16B1  00BC               	movwf	??_PWMReadDC
  7230  16B2  083C               	movf	??_PWMReadDC,w
  7231  16B3  0021               	movlb	1	; select bank1
  7232  16B4  00CC               	movwf	_ui8_PWMinDC_sav^(0+128)
  7233                           
  7234                           ;pwm.c: 375: if( ui8_PWMinDC_sav == 0 )
  7235  16B5  084C               	movf	_ui8_PWMinDC_sav^(0+128),w
  7236  16B6  1D03               	btfss	3,2
  7237  16B7  2F24               	goto	l10892
  7238                           
  7239                           ;pwm.c: 377: {;pwm.c: 381: ui16_PWMin_failCnt++;
  7240  16B8  3001               	movlw	1
  7241  16B9  0023               	movlb	3	; select bank3
  7242  16BA  07B0               	addwf	_ui16_PWMin_failCnt^(0+384),f
  7243  16BB  3000               	movlw	0
  7244  16BC  3DB1               	addwfc	(_ui16_PWMin_failCnt+1)^(0+384),f
  7245                           
  7246                           ;pwm.c: 383: if( ui16_PWMin_failCnt >= 5 )
  7247  16BD  3000               	movlw	0
  7248  16BE  0231               	subwf	(_ui16_PWMin_failCnt+1)^(0+384),w
  7249  16BF  3005               	movlw	5
  7250  16C0  1903               	skipnz
  7251  16C1  0230               	subwf	_ui16_PWMin_failCnt^(0+384),w
  7252  16C2  1C03               	skipc
  7253  16C3  2F31               	goto	l10898
  7254                           
  7255                           ;pwm.c: 384: {;pwm.c: 390: Debounce_Tmr++;
  7256  16C4  3001               	movlw	1
  7257  16C5  07AC               	addwf	_Debounce_Tmr^(0+384),f
  7258  16C6  3000               	movlw	0
  7259  16C7  3DAD               	addwfc	(_Debounce_Tmr+1)^(0+384),f
  7260                           
  7261                           ;pwm.c: 392: if(RA4 != prev_RA4) {
  7262  16C8  1003               	clrc
  7263  16C9  0020               	movlb	0	; select bank0
  7264  16CA  1A0C               	btfsc	12,4	;volatile
  7265  16CB  1403               	setc
  7266  16CC  3000               	movlw	0
  7267  16CD  3D09               	addwfc	9,w
  7268  16CE  00BC               	movwf	??_PWMReadDC
  7269  16CF  01BD               	clrf	??_PWMReadDC+1
  7270  16D0  0023               	movlb	3	; select bank3
  7271  16D1  082F               	movf	(_prev_RA4+1)^(0+384),w
  7272  16D2  0020               	movlb	0	; select bank0
  7273  16D3  063D               	xorwf	??_PWMReadDC+1,w
  7274  16D4  1D03               	skipz
  7275  16D5  2EDA               	goto	u9495
  7276  16D6  0023               	movlb	3	; select bank3
  7277  16D7  082E               	movf	_prev_RA4^(0+384),w
  7278  16D8  0020               	movlb	0	; select bank0
  7279  16D9  063C               	xorwf	??_PWMReadDC,w
  7280  16DA                     u9495:	
  7281  16DA  1903               	skipnz
  7282  16DB  2EE1               	goto	l10878
  7283                           
  7284                           ;pwm.c: 393: prev_Debounce_Tmr = Debounce_Tmr;
  7285  16DC  0023               	movlb	3	; select bank3
  7286  16DD  082D               	movf	(_Debounce_Tmr+1)^(0+384),w
  7287  16DE  00AB               	movwf	(_prev_Debounce_Tmr+1)^(0+384)
  7288  16DF  082C               	movf	_Debounce_Tmr^(0+384),w
  7289  16E0  00AA               	movwf	_prev_Debounce_Tmr^(0+384)
  7290  16E1                     l10878:	
  7291                           
  7292                           ;pwm.c: 394: };pwm.c: 395: prev_RA4 = RA4;
  7293  16E1  1003               	clrc
  7294  16E2  0020               	movlb	0	; select bank0
  7295  16E3  1A0C               	btfsc	12,4	;volatile
  7296  16E4  1403               	setc
  7297  16E5  3000               	movlw	0
  7298  16E6  3D09               	addwfc	9,w
  7299  16E7  00BC               	movwf	??_PWMReadDC
  7300  16E8  01BD               	clrf	??_PWMReadDC+1
  7301  16E9  083C               	movf	??_PWMReadDC,w
  7302  16EA  0023               	movlb	3	; select bank3
  7303  16EB  00AE               	movwf	_prev_RA4^(0+384)
  7304  16EC  0020               	movlb	0	; select bank0
  7305  16ED  083D               	movf	??_PWMReadDC+1,w
  7306  16EE  0023               	movlb	3	; select bank3
  7307  16EF  00AF               	movwf	(_prev_RA4+1)^(0+384)
  7308                           
  7309                           ;pwm.c: 397: if((Debounce_Tmr - prev_Debounce_Tmr) > 10) {
  7310  16F0  092A               	comf	_prev_Debounce_Tmr^(0+384),w
  7311  16F1  0020               	movlb	0	; select bank0
  7312  16F2  00BC               	movwf	??_PWMReadDC
  7313  16F3  0023               	movlb	3	; select bank3
  7314  16F4  092B               	comf	(_prev_Debounce_Tmr+1)^(0+384),w
  7315  16F5  0020               	movlb	0	; select bank0
  7316  16F6  00BD               	movwf	??_PWMReadDC+1
  7317  16F7  0ABC               	incf	??_PWMReadDC,f
  7318  16F8  1903               	skipnz
  7319  16F9  0ABD               	incf	??_PWMReadDC+1,f
  7320  16FA  0023               	movlb	3	; select bank3
  7321  16FB  082C               	movf	_Debounce_Tmr^(0+384),w
  7322  16FC  0020               	movlb	0	; select bank0
  7323  16FD  073C               	addwf	??_PWMReadDC,w
  7324  16FE  00BE               	movwf	??_PWMReadDC+2
  7325  16FF  0023               	movlb	3	; select bank3
  7326  1700  082D               	movf	(_Debounce_Tmr+1)^(0+384),w
  7327  1701  0020               	movlb	0	; select bank0
  7328  1702  3D3D               	addwfc	??_PWMReadDC+1,w
  7329  1703  00BF               	movwf	??_PWMReadDC+3
  7330  1704  3000               	movlw	0
  7331  1705  023F               	subwf	??_PWMReadDC+3,w
  7332  1706  300B               	movlw	11
  7333  1707  1903               	skipnz
  7334  1708  023E               	subwf	??_PWMReadDC+2,w
  7335  1709  1C03               	skipc
  7336  170A  2F31               	goto	l10898
  7337                           
  7338                           ;pwm.c: 398: if(RA4 == 1)
  7339  170B  1E0C               	btfss	12,4	;volatile
  7340  170C  2F19               	goto	l10886
  7341                           
  7342                           ;pwm.c: 399: {;pwm.c: 400: ui16_PWM_Freq_In = 40000;
  7343  170D  3040               	movlw	64
  7344  170E  0023               	movlb	3	; select bank3
  7345  170F  00BC               	movwf	_ui16_PWM_Freq_In^(0+384)
  7346  1710  309C               	movlw	156
  7347  1711  00BD               	movwf	(_ui16_PWM_Freq_In^(0+384)+1)
  7348                           
  7349                           ;pwm.c: 401: ui8_Duty_Cycle_In_Ratio = 180;
  7350  1712  30B4               	movlw	180
  7351  1713  0020               	movlb	0	; select bank0
  7352  1714  00BC               	movwf	??_PWMReadDC
  7353  1715  083C               	movf	??_PWMReadDC,w
  7354  1716  0022               	movlb	2	; select bank2
  7355  1717  00BF               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7356                           
  7357                           ;pwm.c: 402: }
  7358  1718  2F20               	goto	l10890
  7359  1719                     l10886:	
  7360                           
  7361                           ;pwm.c: 403: else;pwm.c: 404: {;pwm.c: 405: ui16_PWM_Freq_In = 40000;
  7362  1719  3040               	movlw	64
  7363  171A  0023               	movlb	3	; select bank3
  7364  171B  00BC               	movwf	_ui16_PWM_Freq_In^(0+384)
  7365  171C  309C               	movlw	156
  7366  171D  00BD               	movwf	(_ui16_PWM_Freq_In^(0+384)+1)
  7367                           
  7368                           ;pwm.c: 406: ui8_Duty_Cycle_In_Ratio = 0;
  7369  171E  0022               	movlb	2	; select bank2
  7370  171F  01BF               	clrf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7371  1720                     l10890:	
  7372                           
  7373                           ;pwm.c: 407: };pwm.c: 408: Debounce_Tmr = 0;
  7374  1720  0023               	movlb	3	; select bank3
  7375  1721  01AC               	clrf	_Debounce_Tmr^(0+384)
  7376  1722  01AD               	clrf	(_Debounce_Tmr+1)^(0+384)
  7377                           
  7378                           ;pwm.c: 409: };pwm.c: 411: };pwm.c: 415: }
  7379  1723  2F31               	goto	l10898
  7380  1724                     l10892:	
  7381                           
  7382                           ;pwm.c: 418: else;pwm.c: 419: {;pwm.c: 423: ui16_PWMin_failCnt = 0;
  7383  1724  0023               	movlb	3	; select bank3
  7384  1725  01B0               	clrf	_ui16_PWMin_failCnt^(0+384)
  7385  1726  01B1               	clrf	(_ui16_PWMin_failCnt+1)^(0+384)
  7386                           
  7387                           ;pwm.c: 426: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  7388  1727  0021               	movlb	1	; select bank1
  7389  1728  084C               	movf	_ui8_PWMinDC_sav^(0+128),w
  7390  1729  0020               	movlb	0	; select bank0
  7391  172A  00BC               	movwf	??_PWMReadDC
  7392  172B  083C               	movf	??_PWMReadDC,w
  7393  172C  0022               	movlb	2	; select bank2
  7394  172D  00BF               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7395                           
  7396                           ;pwm.c: 428: ui16_Duty_Cycle_In = 0;
  7397  172E  0023               	movlb	3	; select bank3
  7398  172F  01EC               	clrf	_ui16_Duty_Cycle_In^(0+384)
  7399  1730  01ED               	clrf	(_ui16_Duty_Cycle_In+1)^(0+384)
  7400  1731                     l10898:	
  7401                           
  7402                           ;pwm.c: 430: };pwm.c: 433: return ( 200 - ui8_Duty_Cycle_In_Ratio );
  7403  1731  0022               	movlb	2	; select bank2
  7404  1732  033F               	decf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
  7405  1733  3AFF               	xorlw	255
  7406  1734  3EC8               	addlw	200
  7407  1735  0008               	return
  7408  1736                     __end_of_PWMReadDC:	
  7409                           
  7410                           	psect	text20
  7411  1FAF                     __ptext20:	
  7412 ;; *************** function ___tmul *****************
  7413 ;; Defined at:
  7414 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul24.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  multiplier      3    8[BANK0 ] unsigned um
  7417 ;;  multiplicand    3   11[BANK0 ] unsigned um
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  product         3   14[BANK0 ] unsigned um
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  3    8[BANK0 ] unsigned um
  7422 ;; Registers used:
  7423 ;;		wreg, status,2, status,0
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7429 ;;      Params:         0       6       0       0       0       0       0       0
  7430 ;;      Locals:         0       3       0       0       0       0       0       0
  7431 ;;      Temps:          0       0       0       0       0       0       0       0
  7432 ;;      Totals:         0       9       0       0       0       0       0       0
  7433 ;;Total ram usage:        9 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    3
  7436 ;; This function calls:
  7437 ;;		Nothing
  7438 ;; This function is called by:
  7439 ;;		_PWMReadDC
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           
  7444                           ;psect for function ___tmul
  7445  1FAF                     ___tmul:	
  7446                           
  7447                           ;incstack = 0
  7448                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  7449  1FAF  3000               	movlw	0
  7450  1FB0  0020               	movlb	0	; select bank0
  7451  1FB1  00AE               	movwf	___tmul@product
  7452  1FB2  3000               	movlw	0
  7453  1FB3  00AF               	movwf	___tmul@product+1
  7454  1FB4  3000               	movlw	0
  7455  1FB5  00B0               	movwf	___tmul@product+2
  7456  1FB6                     l6080:	
  7457  1FB6  1C28               	btfss	___tmul@multiplier,0
  7458  1FB7  2FBE               	goto	l6084
  7459  1FB8  082B               	movf	___tmul@multiplicand,w
  7460  1FB9  07AE               	addwf	___tmul@product,f
  7461  1FBA  082C               	movf	___tmul@multiplicand+1,w
  7462  1FBB  3DAF               	addwfc	___tmul@product+1,f
  7463  1FBC  082D               	movf	___tmul@multiplicand+2,w
  7464  1FBD  3DB0               	addwfc	___tmul@product+2,f
  7465  1FBE                     l6084:	
  7466  1FBE  3001               	movlw	1
  7467  1FBF                     u3195:	
  7468  1FBF  35AB               	lslf	___tmul@multiplicand,f
  7469  1FC0  0DAC               	rlf	___tmul@multiplicand+1,f
  7470  1FC1  0DAD               	rlf	___tmul@multiplicand+2,f
  7471  1FC2  0B89               	decfsz	9,f
  7472  1FC3  2FBF               	goto	u3195
  7473  1FC4  3001               	movlw	1
  7474  1FC5                     u3205:	
  7475  1FC5  36AA               	lsrf	___tmul@multiplier+2,f
  7476  1FC6  0CA9               	rrf	___tmul@multiplier+1,f
  7477  1FC7  0CA8               	rrf	___tmul@multiplier,f
  7478  1FC8  0B89               	decfsz	9,f
  7479  1FC9  2FC5               	goto	u3205
  7480  1FCA  082A               	movf	___tmul@multiplier+2,w
  7481  1FCB  0429               	iorwf	___tmul@multiplier+1,w
  7482  1FCC  0428               	iorwf	___tmul@multiplier,w
  7483  1FCD  1D03               	skipz
  7484  1FCE  2FB6               	goto	l6080
  7485  1FCF  082E               	movf	___tmul@product,w
  7486  1FD0  00A8               	movwf	?___tmul
  7487  1FD1  082F               	movf	___tmul@product+1,w
  7488  1FD2  00A9               	movwf	?___tmul+1
  7489  1FD3  0830               	movf	___tmul@product+2,w
  7490  1FD4  00AA               	movwf	?___tmul+2
  7491  1FD5  0008               	return
  7492  1FD6                     __end_of___tmul:	
  7493                           
  7494                           	psect	text21
  7495  134D                     __ptext21:	
  7496 ;; *************** function ___ltdiv *****************
  7497 ;; Defined at:
  7498 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltdiv.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  divisor         3   17[BANK0 ] unsigned um
  7501 ;;  dividend        3   20[BANK0 ] unsigned um
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  quotient        3   24[BANK0 ] unsigned um
  7504 ;;  counter         1   27[BANK0 ] unsigned char 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  3   17[BANK0 ] unsigned um
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7514 ;;      Params:         0       6       0       0       0       0       0       0
  7515 ;;      Locals:         0       4       0       0       0       0       0       0
  7516 ;;      Temps:          0       1       0       0       0       0       0       0
  7517 ;;      Totals:         0      11       0       0       0       0       0       0
  7518 ;;Total ram usage:       11 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    3
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		_PWMReadDC
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           
  7529                           ;psect for function ___ltdiv
  7530  134D                     ___ltdiv:	
  7531                           
  7532                           ;incstack = 0
  7533                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  7534  134D  3000               	movlw	0
  7535  134E  0020               	movlb	0	; select bank0
  7536  134F  00B8               	movwf	___ltdiv@quotient
  7537  1350  3000               	movlw	0
  7538  1351  00B9               	movwf	___ltdiv@quotient+1
  7539  1352  3000               	movlw	0
  7540  1353  00BA               	movwf	___ltdiv@quotient+2
  7541  1354  0833               	movf	___ltdiv@divisor+2,w
  7542  1355  0432               	iorwf	___ltdiv@divisor+1,w
  7543  1356  0431               	iorwf	___ltdiv@divisor,w
  7544  1357  1903               	skipnz
  7545  1358  2B8B               	goto	l10592
  7546  1359  01BB               	clrf	___ltdiv@counter
  7547  135A  0ABB               	incf	___ltdiv@counter,f
  7548  135B                     l10578:	
  7549  135B  1BB3               	btfsc	___ltdiv@divisor+2,7
  7550  135C  2B68               	goto	l10580
  7551  135D  3001               	movlw	1
  7552  135E                     u9085:	
  7553  135E  35B1               	lslf	___ltdiv@divisor,f
  7554  135F  0DB2               	rlf	___ltdiv@divisor+1,f
  7555  1360  0DB3               	rlf	___ltdiv@divisor+2,f
  7556  1361  0B89               	decfsz	9,f
  7557  1362  2B5E               	goto	u9085
  7558  1363  3001               	movlw	1
  7559  1364  00B7               	movwf	??___ltdiv
  7560  1365  0837               	movf	??___ltdiv,w
  7561  1366  07BB               	addwf	___ltdiv@counter,f
  7562  1367  2B5B               	goto	l10578
  7563  1368                     l10580:	
  7564  1368  3001               	movlw	1
  7565  1369                     u9105:	
  7566  1369  35B8               	lslf	___ltdiv@quotient,f
  7567  136A  0DB9               	rlf	___ltdiv@quotient+1,f
  7568  136B  0DBA               	rlf	___ltdiv@quotient+2,f
  7569  136C  0B89               	decfsz	9,f
  7570  136D  2B69               	goto	u9105
  7571  136E  0833               	movf	___ltdiv@divisor+2,w
  7572  136F  0236               	subwf	___ltdiv@dividend+2,w
  7573  1370  1D03               	skipz
  7574  1371  2B78               	goto	u9115
  7575  1372  0832               	movf	___ltdiv@divisor+1,w
  7576  1373  0235               	subwf	___ltdiv@dividend+1,w
  7577  1374  1D03               	skipz
  7578  1375  2B78               	goto	u9115
  7579  1376  0831               	movf	___ltdiv@divisor,w
  7580  1377  0234               	subwf	___ltdiv@dividend,w
  7581  1378                     u9115:	
  7582  1378  1C03               	skipc
  7583  1379  2B81               	goto	l10588
  7584  137A  0831               	movf	___ltdiv@divisor,w
  7585  137B  02B4               	subwf	___ltdiv@dividend,f
  7586  137C  0832               	movf	___ltdiv@divisor+1,w
  7587  137D  3BB5               	subwfb	___ltdiv@dividend+1,f
  7588  137E  0833               	movf	___ltdiv@divisor+2,w
  7589  137F  3BB6               	subwfb	___ltdiv@dividend+2,f
  7590  1380  1438               	bsf	___ltdiv@quotient,0
  7591  1381                     l10588:	
  7592  1381  3001               	movlw	1
  7593  1382                     u9125:	
  7594  1382  36B3               	lsrf	___ltdiv@divisor+2,f
  7595  1383  0CB2               	rrf	___ltdiv@divisor+1,f
  7596  1384  0CB1               	rrf	___ltdiv@divisor,f
  7597  1385  0B89               	decfsz	9,f
  7598  1386  2B82               	goto	u9125
  7599  1387  3001               	movlw	1
  7600  1388  02BB               	subwf	___ltdiv@counter,f
  7601  1389  1D03               	btfss	3,2
  7602  138A  2B68               	goto	l10580
  7603  138B                     l10592:	
  7604  138B  0838               	movf	___ltdiv@quotient,w
  7605  138C  00B1               	movwf	?___ltdiv
  7606  138D  0839               	movf	___ltdiv@quotient+1,w
  7607  138E  00B2               	movwf	?___ltdiv+1
  7608  138F  083A               	movf	___ltdiv@quotient+2,w
  7609  1390  00B3               	movwf	?___ltdiv+2
  7610  1391  0008               	return
  7611  1392                     __end_of___ltdiv:	
  7612                           
  7613                           	psect	text22
  7614  1E3A                     __ptext22:	
  7615 ;; *************** function _InitMotorStop *****************
  7616 ;; Defined at:
  7617 ;;		line 2222 in file "../bldc.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;		None
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;		None
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  1    wreg      void 
  7624 ;; Registers used:
  7625 ;;		status,2
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7631 ;;      Params:         0       0       0       0       0       0       0       0
  7632 ;;      Locals:         0       0       0       0       0       0       0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0       0
  7634 ;;      Totals:         0       0       0       0       0       0       0       0
  7635 ;;Total ram usage:        0 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    3
  7638 ;; This function calls:
  7639 ;;		Nothing
  7640 ;; This function is called by:
  7641 ;;		_main
  7642 ;;		_EOL
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           
  7647                           ;psect for function _InitMotorStop
  7648  1E3A                     _InitMotorStop:	
  7649                           
  7650                           ;bldc.c: 2227: if( 1 == MotorFlags.bits.B6 )
  7651                           
  7652                           ;incstack = 0
  7653                           ; Regs used in _InitMotorStop: [status,2]
  7654  1E3A  0020               	movlb	0	; select bank0
  7655  1E3B  1F5A               	btfss	_MotorFlags,6
  7656  1E3C  0008               	return
  7657                           
  7658                           ;bldc.c: 2230: {;bldc.c: 2232: LATC1 = 0;
  7659  1E3D  0022               	movlb	2	; select bank2
  7660  1E3E  108E               	bcf	14,1	;volatile
  7661                           
  7662                           ;bldc.c: 2233: LATC3 = 0;
  7663  1E3F  118E               	bcf	14,3	;volatile
  7664                           
  7665                           ;bldc.c: 2234: LATC4 = 0;
  7666  1E40  120E               	bcf	14,4	;volatile
  7667                           
  7668                           ;bldc.c: 2236: CCP1ASE = 0;
  7669  1E41  0025               	movlb	5	; select bank5
  7670  1E42  1395               	bcf	21,7	;volatile
  7671                           
  7672                           ;bldc.c: 2237: CCPR1L = 0;
  7673  1E43  0191               	clrf	17	;volatile
  7674                           
  7675                           ;bldc.c: 2238: MotorFlags.bits.B6 = 0;
  7676  1E44  0020               	movlb	0	; select bank0
  7677  1E45  135A               	bcf	_MotorFlags,6
  7678                           
  7679                           ;bldc.c: 2239: MotorFlags.bits.B7 = 0;
  7680  1E46  13DA               	bcf	_MotorFlags,7
  7681  1E47  0008               	return
  7682  1E48                     __end_of_InitMotorStop:	
  7683                           
  7684                           	psect	text23
  7685  07F7                     __ptext23:	
  7686 ;; *************** function _Get_Analog_Value *****************
  7687 ;; Defined at:
  7688 ;;		line 442 in file "../adc.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  1    wreg      void 
  7695 ;; Registers used:
  7696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7702 ;;      Params:         0       0       0       0       0       0       0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    4
  7709 ;; This function calls:
  7710 ;;		_FILTER_IPhase
  7711 ;;		_FILTER_Temp
  7712 ;;		_FILTER_Ubat
  7713 ;; This function is called by:
  7714 ;;		_main
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           
  7719                           ;psect for function _Get_Analog_Value
  7720  07F7                     _Get_Analog_Value:	
  7721                           
  7722                           ;adc.c: 446: FILTER_Ubat( );
  7723                           
  7724                           ;incstack = 0
  7725                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7726  07F7  3194  24EB  3187   	fcall	_FILTER_Ubat
  7727                           
  7728                           ;adc.c: 447: FILTER_IPhase( );
  7729  07FA  3192  2269  3187   	fcall	_FILTER_IPhase
  7730                           
  7731                           ;adc.c: 448: FILTER_Temp( );
  7732  07FD  3192  22D4         	fcall	_FILTER_Temp
  7733  07FF  0008               	return
  7734  0800                     __end_of_Get_Analog_Value:	
  7735                           
  7736                           	psect	text24
  7737  14EB                     __ptext24:	
  7738 ;; *************** function _FILTER_Ubat *****************
  7739 ;; Defined at:
  7740 ;;		line 264 in file "../adc.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;		None
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;		None
  7745 ;; Return value:  Size  Location     Type
  7746 ;;                  1    wreg      void 
  7747 ;; Registers used:
  7748 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7754 ;;      Params:         0       0       0       0       0       0       0       0
  7755 ;;      Locals:         0       0       0       0       0       0       0       0
  7756 ;;      Temps:          0      12       0       0       0       0       0       0
  7757 ;;      Totals:         0      12       0       0       0       0       0       0
  7758 ;;Total ram usage:       12 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; Hardware stack levels required when called:    3
  7761 ;; This function calls:
  7762 ;;		Nothing
  7763 ;; This function is called by:
  7764 ;;		_Get_Analog_Value
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           
  7769                           ;psect for function _FILTER_Ubat
  7770  14EB                     _FILTER_Ubat:	
  7771                           
  7772                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  7773                           
  7774                           ;incstack = 0
  7775                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  7776  14EB  0021               	movlb	1	; select bank1
  7777  14EC  3561               	lslf	_windowPtr1^(0+128),w
  7778  14ED  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  7779  14EE  0086               	movwf	6
  7780  14EF  3002               	movlw	2	; select bank4/5
  7781  14F0  0087               	movwf	7
  7782  14F1  0020               	movlb	0	; select bank0
  7783  14F2  085B               	movf	_ui16_Ubat_bldc,w	;volatile
  7784  14F3  3FC0               	movwi [0]fsr1
  7785  14F4  085C               	movf	_ui16_Ubat_bldc+1,w	;volatile
  7786  14F5  3FC1               	movwi [1]fsr1
  7787                           
  7788                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  7789  14F6  300E               	movlw	14
  7790  14F7  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  7791  14F8  0086               	movwf	6
  7792  14F9  3002               	movlw	2	; select bank4/5
  7793  14FA  0087               	movwf	7
  7794  14FB  300C               	movlw	12
  7795  14FC  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  7796  14FD  0084               	movwf	4
  7797  14FE  3002               	movlw	2	; select bank4/5
  7798  14FF  0085               	movwf	5
  7799  1500  0024               	movlb	4	; select bank4
  7800  1501  0834               	movf	(_inputArray1^(0+512)+4),w
  7801  1502  0732               	addwf	(_inputArray1^(0+512)+2),w
  7802  1503  0020               	movlb	0	; select bank0
  7803  1504  00A8               	movwf	??_FILTER_Ubat
  7804  1505  0024               	movlb	4	; select bank4
  7805  1506  0835               	movf	((_inputArray1+1)^(0+512)+4),w
  7806  1507  3D33               	addwfc	((_inputArray1+1)^(0+512)+2),w
  7807  1508  0020               	movlb	0	; select bank0
  7808  1509  00A9               	movwf	??_FILTER_Ubat+1
  7809  150A  0024               	movlb	4	; select bank4
  7810  150B  0836               	movf	(_inputArray1^(0+512)+6),w
  7811  150C  0020               	movlb	0	; select bank0
  7812  150D  0728               	addwf	??_FILTER_Ubat,w
  7813  150E  00AA               	movwf	??_FILTER_Ubat+2
  7814  150F  0024               	movlb	4	; select bank4
  7815  1510  0837               	movf	((_inputArray1+1)^(0+512)+6),w
  7816  1511  0020               	movlb	0	; select bank0
  7817  1512  3D29               	addwfc	??_FILTER_Ubat+1,w
  7818  1513  00AB               	movwf	??_FILTER_Ubat+3
  7819  1514  0024               	movlb	4	; select bank4
  7820  1515  0838               	movf	(_inputArray1^(0+512)+8),w
  7821  1516  0020               	movlb	0	; select bank0
  7822  1517  072A               	addwf	??_FILTER_Ubat+2,w
  7823  1518  00AC               	movwf	??_FILTER_Ubat+4
  7824  1519  0024               	movlb	4	; select bank4
  7825  151A  0839               	movf	((_inputArray1+1)^(0+512)+8),w
  7826  151B  0020               	movlb	0	; select bank0
  7827  151C  3D2B               	addwfc	??_FILTER_Ubat+3,w
  7828  151D  00AD               	movwf	??_FILTER_Ubat+5
  7829  151E  0024               	movlb	4	; select bank4
  7830  151F  083A               	movf	(_inputArray1^(0+512)+10),w
  7831  1520  0020               	movlb	0	; select bank0
  7832  1521  072C               	addwf	??_FILTER_Ubat+4,w
  7833  1522  00AE               	movwf	??_FILTER_Ubat+6
  7834  1523  0024               	movlb	4	; select bank4
  7835  1524  083B               	movf	((_inputArray1+1)^(0+512)+10),w
  7836  1525  0020               	movlb	0	; select bank0
  7837  1526  3D2D               	addwfc	??_FILTER_Ubat+5,w
  7838  1527  00AF               	movwf	??_FILTER_Ubat+7
  7839  1528  3F00               	moviw [0]fsr0
  7840  1529  072E               	addwf	??_FILTER_Ubat+6,w
  7841  152A  00B0               	movwf	??_FILTER_Ubat+8
  7842  152B  3F01               	moviw [1]fsr0
  7843  152C  3D2F               	addwfc	??_FILTER_Ubat+7,w
  7844  152D  00B1               	movwf	??_FILTER_Ubat+9
  7845  152E  3F40               	moviw [0]fsr1
  7846  152F  0730               	addwf	??_FILTER_Ubat+8,w
  7847  1530  00B2               	movwf	??_FILTER_Ubat+10
  7848  1531  3F41               	moviw [1]fsr1
  7849  1532  3D31               	addwfc	??_FILTER_Ubat+9,w
  7850  1533  00B3               	movwf	??_FILTER_Ubat+11
  7851  1534  0024               	movlb	4	; select bank4
  7852  1535  0830               	movf	_inputArray1^(0+512),w
  7853  1536  0020               	movlb	0	; select bank0
  7854  1537  0732               	addwf	??_FILTER_Ubat+10,w
  7855  1538  0023               	movlb	3	; select bank3
  7856  1539  00C8               	movwf	_filter1^(0+384)
  7857  153A  0024               	movlb	4	; select bank4
  7858  153B  0831               	movf	(_inputArray1+1)^(0+512),w
  7859  153C  0020               	movlb	0	; select bank0
  7860  153D  3D33               	addwfc	??_FILTER_Ubat+11,w
  7861  153E  0023               	movlb	3	; select bank3
  7862  153F  00C9               	movwf	(_filter1+1)^(0+384)
  7863                           
  7864                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  7865  1540  0849               	movf	(_filter1+1)^(0+384),w
  7866  1541  0020               	movlb	0	; select bank0
  7867  1542  00A9               	movwf	??_FILTER_Ubat+1
  7868  1543  0023               	movlb	3	; select bank3
  7869  1544  0848               	movf	_filter1^(0+384),w
  7870  1545  0020               	movlb	0	; select bank0
  7871  1546  00A8               	movwf	??_FILTER_Ubat
  7872  1547  36A9               	lsrf	??_FILTER_Ubat+1,f
  7873  1548  0CA8               	rrf	??_FILTER_Ubat,f
  7874  1549  36A9               	lsrf	??_FILTER_Ubat+1,f
  7875  154A  0CA8               	rrf	??_FILTER_Ubat,f
  7876  154B  36A9               	lsrf	??_FILTER_Ubat+1,f
  7877  154C  0CA8               	rrf	??_FILTER_Ubat,f
  7878  154D  0828               	movf	??_FILTER_Ubat,w
  7879  154E  0023               	movlb	3	; select bank3
  7880  154F  00D2               	movwf	_ui16_fir_Bat_mittel^(0+384)
  7881  1550  0020               	movlb	0	; select bank0
  7882  1551  0829               	movf	??_FILTER_Ubat+1,w
  7883  1552  0023               	movlb	3	; select bank3
  7884  1553  00D3               	movwf	(_ui16_fir_Bat_mittel+1)^(0+384)
  7885                           
  7886                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  7887  1554  3001               	movlw	1
  7888  1555  0020               	movlb	0	; select bank0
  7889  1556  00A8               	movwf	??_FILTER_Ubat
  7890  1557  0828               	movf	??_FILTER_Ubat,w
  7891  1558  0021               	movlb	1	; select bank1
  7892  1559  07E1               	addwf	_windowPtr1^(0+128),f
  7893  155A  3008               	movlw	8
  7894  155B  0261               	subwf	_windowPtr1^(0+128),w
  7895  155C  1C03               	skipc
  7896  155D  0008               	return
  7897                           
  7898                           ;adc.c: 277: {;adc.c: 279: windowPtr1 = 0;
  7899  155E  01E1               	clrf	_windowPtr1^(0+128)
  7900                           
  7901                           ;adc.c: 280: filter1 = 0;
  7902  155F  0023               	movlb	3	; select bank3
  7903  1560  01C8               	clrf	_filter1^(0+384)
  7904  1561  01C9               	clrf	(_filter1+1)^(0+384)
  7905  1562  0008               	return
  7906  1563                     __end_of_FILTER_Ubat:	
  7907                           
  7908                           	psect	text25
  7909  12D4                     __ptext25:	
  7910 ;; *************** function _FILTER_Temp *****************
  7911 ;; Defined at:
  7912 ;;		line 400 in file "../adc.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;		None
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;		None
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      void 
  7919 ;; Registers used:
  7920 ;;		wreg, status,2, status,0
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7926 ;;      Params:         0       0       0       0       0       0       0       0
  7927 ;;      Locals:         0       0       0       0       0       0       0       0
  7928 ;;      Temps:          0       2       0       0       0       0       0       0
  7929 ;;      Totals:         0       2       0       0       0       0       0       0
  7930 ;;Total ram usage:        2 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    3
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_Get_Analog_Value
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _FILTER_Temp
  7942  12D4                     _FILTER_Temp:	
  7943                           
  7944                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
  7945                           
  7946                           ;incstack = 0
  7947                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
  7948  12D4  0023               	movlb	3	; select bank3
  7949  12D5  0856               	movf	_ui16_NTC_Temp_bldc^(0+384),w
  7950  12D6  0022               	movlb	2	; select bank2
  7951  12D7  0727               	addwf	_filterTempNTC^(0+256),w
  7952  12D8  00A7               	movwf	_filterTempNTC^(0+256)
  7953  12D9  0023               	movlb	3	; select bank3
  7954  12DA  0857               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
  7955  12DB  0022               	movlb	2	; select bank2
  7956  12DC  3D28               	addwfc	(_filterTempNTC+1)^(0+256),w
  7957  12DD  00A8               	movwf	(_filterTempNTC+1)^(0+256)
  7958                           
  7959                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
  7960  12DE  0828               	movf	(_filterTempNTC+1)^(0+256),w
  7961  12DF  0020               	movlb	0	; select bank0
  7962  12E0  00A9               	movwf	??_FILTER_Temp+1
  7963  12E1  0022               	movlb	2	; select bank2
  7964  12E2  0827               	movf	_filterTempNTC^(0+256),w
  7965  12E3  0020               	movlb	0	; select bank0
  7966  12E4  00A8               	movwf	??_FILTER_Temp
  7967  12E5  3006               	movlw	6
  7968  12E6                     u2905:	
  7969  12E6  36A9               	lsrf	??_FILTER_Temp+1,f
  7970  12E7  0CA8               	rrf	??_FILTER_Temp,f
  7971  12E8  0B89               	decfsz	9,f
  7972  12E9  2AE6               	goto	u2905
  7973  12EA  0828               	movf	??_FILTER_Temp,w
  7974  12EB  0023               	movlb	3	; select bank3
  7975  12EC  00CC               	movwf	_ui16_NTC_Temp_bldc_mean^(0+384)
  7976  12ED  0020               	movlb	0	; select bank0
  7977  12EE  0829               	movf	??_FILTER_Temp+1,w
  7978  12EF  0023               	movlb	3	; select bank3
  7979  12F0  00CD               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+384)
  7980                           
  7981                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
  7982  12F1  094C               	comf	_ui16_NTC_Temp_bldc_mean^(0+384),w
  7983  12F2  0020               	movlb	0	; select bank0
  7984  12F3  00A8               	movwf	??_FILTER_Temp
  7985  12F4  0023               	movlb	3	; select bank3
  7986  12F5  094D               	comf	(_ui16_NTC_Temp_bldc_mean+1)^(0+384),w
  7987  12F6  0020               	movlb	0	; select bank0
  7988  12F7  00A9               	movwf	??_FILTER_Temp+1
  7989  12F8  0AA8               	incf	??_FILTER_Temp,f
  7990  12F9  1903               	skipnz
  7991  12FA  0AA9               	incf	??_FILTER_Temp+1,f
  7992  12FB  0022               	movlb	2	; select bank2
  7993  12FC  0827               	movf	_filterTempNTC^(0+256),w
  7994  12FD  0020               	movlb	0	; select bank0
  7995  12FE  0728               	addwf	??_FILTER_Temp,w
  7996  12FF  0022               	movlb	2	; select bank2
  7997  1300  00A7               	movwf	_filterTempNTC^(0+256)
  7998  1301  0828               	movf	(_filterTempNTC+1)^(0+256),w
  7999  1302  0020               	movlb	0	; select bank0
  8000  1303  3D29               	addwfc	??_FILTER_Temp+1,w
  8001  1304  0022               	movlb	2	; select bank2
  8002  1305  00A8               	movwf	(_filterTempNTC+1)^(0+256)
  8003                           
  8004                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
  8005  1306  0023               	movlb	3	; select bank3
  8006  1307  0854               	movf	_ui16_Temp_cal^(0+384),w
  8007  1308  074C               	addwf	_ui16_NTC_Temp_bldc_mean^(0+384),w
  8008  1309  00C6               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
  8009  130A  0855               	movf	(_ui16_Temp_cal+1)^(0+384),w
  8010  130B  3D4D               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+384),w
  8011  130C  00C7               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
  8012  130D  0008               	return
  8013  130E                     __end_of_FILTER_Temp:	
  8014                           
  8015                           	psect	text26
  8016  1269                     __ptext26:	
  8017 ;; *************** function _FILTER_IPhase *****************
  8018 ;; Defined at:
  8019 ;;		line 357 in file "../adc.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, status,2, status,0
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8033 ;;      Params:         0       0       0       0       0       0       0       0
  8034 ;;      Locals:         0       0       0       0       0       0       0       0
  8035 ;;      Temps:          0       2       0       0       0       0       0       0
  8036 ;;      Totals:         0       2       0       0       0       0       0       0
  8037 ;;Total ram usage:        2 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    3
  8040 ;; This function calls:
  8041 ;;		Nothing
  8042 ;; This function is called by:
  8043 ;;		_Get_Analog_Value
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           
  8048                           ;psect for function _FILTER_IPhase
  8049  1269                     _FILTER_IPhase:	
  8050                           
  8051                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
  8052                           
  8053                           ;incstack = 0
  8054                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
  8055  1269  0022               	movlb	2	; select bank2
  8056  126A  082B               	movf	_filter3^(0+256),w
  8057  126B  0023               	movlb	3	; select bank3
  8058  126C  0758               	addwf	_ui16_IPhase1_bldc^(0+384),w	;volatile
  8059  126D  0022               	movlb	2	; select bank2
  8060  126E  00AB               	movwf	_filter3^(0+256)
  8061  126F  082C               	movf	(_filter3+1)^(0+256),w
  8062  1270  0023               	movlb	3	; select bank3
  8063  1271  3D59               	addwfc	(_ui16_IPhase1_bldc+1)^(0+384),w	;volatile
  8064  1272  0022               	movlb	2	; select bank2
  8065  1273  00AC               	movwf	(_filter3+1)^(0+256)
  8066                           
  8067                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
  8068  1274  082C               	movf	(_filter3+1)^(0+256),w
  8069  1275  0020               	movlb	0	; select bank0
  8070  1276  00A9               	movwf	??_FILTER_IPhase+1
  8071  1277  0022               	movlb	2	; select bank2
  8072  1278  082B               	movf	_filter3^(0+256),w
  8073  1279  0020               	movlb	0	; select bank0
  8074  127A  00A8               	movwf	??_FILTER_IPhase
  8075  127B  3006               	movlw	6
  8076  127C                     u2895:	
  8077  127C  36A9               	lsrf	??_FILTER_IPhase+1,f
  8078  127D  0CA8               	rrf	??_FILTER_IPhase,f
  8079  127E  0B89               	decfsz	9,f
  8080  127F  2A7C               	goto	u2895
  8081  1280  0828               	movf	??_FILTER_IPhase,w
  8082  1281  0023               	movlb	3	; select bank3
  8083  1282  00D0               	movwf	_ui16_fir_IPhase_mean^(0+384)
  8084  1283  0020               	movlb	0	; select bank0
  8085  1284  0829               	movf	??_FILTER_IPhase+1,w
  8086  1285  0023               	movlb	3	; select bank3
  8087  1286  00D1               	movwf	(_ui16_fir_IPhase_mean+1)^(0+384)
  8088                           
  8089                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
  8090  1287  0950               	comf	_ui16_fir_IPhase_mean^(0+384),w
  8091  1288  0020               	movlb	0	; select bank0
  8092  1289  00A8               	movwf	??_FILTER_IPhase
  8093  128A  0023               	movlb	3	; select bank3
  8094  128B  0951               	comf	(_ui16_fir_IPhase_mean+1)^(0+384),w
  8095  128C  0020               	movlb	0	; select bank0
  8096  128D  00A9               	movwf	??_FILTER_IPhase+1
  8097  128E  0AA8               	incf	??_FILTER_IPhase,f
  8098  128F  1903               	skipnz
  8099  1290  0AA9               	incf	??_FILTER_IPhase+1,f
  8100  1291  0022               	movlb	2	; select bank2
  8101  1292  082B               	movf	_filter3^(0+256),w
  8102  1293  0020               	movlb	0	; select bank0
  8103  1294  0728               	addwf	??_FILTER_IPhase,w
  8104  1295  0022               	movlb	2	; select bank2
  8105  1296  00AB               	movwf	_filter3^(0+256)
  8106  1297  082C               	movf	(_filter3+1)^(0+256),w
  8107  1298  0020               	movlb	0	; select bank0
  8108  1299  3D29               	addwfc	??_FILTER_IPhase+1,w
  8109  129A  0022               	movlb	2	; select bank2
  8110  129B  00AC               	movwf	(_filter3+1)^(0+256)
  8111  129C  0008               	return
  8112  129D                     __end_of_FILTER_IPhase:	
  8113                           
  8114                           	psect	text27
  8115  0078                     __ptext27:	
  8116 ;; *************** function _BVH2_Appl_Layer *****************
  8117 ;; Defined at:
  8118 ;;		line 331 in file "../T_Link/BVH2_Appl_Layer.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;		None
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  Sb3_Sum1        2   26[BANK5 ] short 
  8123 ;;  Sb3_Product1    2   18[BANK5 ] unsigned short 
  8124 ;;  Sb4_PI_sum      2   30[BANK5 ] short 
  8125 ;;  Sb2_Switch5     2   24[BANK5 ] unsigned short 
  8126 ;;  Sb2_Error       2   16[BANK5 ] short 
  8127 ;;  Sb2_Switch2     2    8[BANK5 ] unsigned short 
  8128 ;;  Sb1_Logical_    1   29[BANK5 ] unsigned char 
  8129 ;;  Sb1_Logical_    1   28[BANK5 ] unsigned char 
  8130 ;;  Sb2_Logical_    1   23[BANK5 ] unsigned char 
  8131 ;;  Sb1_Logical_    1   22[BANK5 ] unsigned char 
  8132 ;;  Sb1_Logical_    1   21[BANK5 ] unsigned char 
  8133 ;;  Cb24_Reset      1   20[BANK5 ] unsigned char 
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      void 
  8136 ;; Registers used:
  8137 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8143 ;;      Params:         0       0       0       0       0       0       0       0
  8144 ;;      Locals:         0       0       0       0       0       0      32       0
  8145 ;;      Temps:          0      16       0       0       0       0       0       0
  8146 ;;      Totals:         0      16       0       0       0       0      32       0
  8147 ;;Total ram usage:       48 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; Hardware stack levels required when called:    4
  8150 ;; This function calls:
  8151 ;;		_Cb1_Current_An___High_node_fcn1
  8152 ;;		_Cb34_PWM_Detection_node_fcn1
  8153 ;;		_Cb44_Pic_etat_monitor_node_fcn1
  8154 ;;		_Cb56_UbatHandling_node_fcn2
  8155 ;;		___aldiv
  8156 ;;		___lmul
  8157 ;;		___wmul
  8158 ;; This function is called by:
  8159 ;;		_main
  8160 ;; This function uses a non-reentrant model
  8161 ;;
  8162                           
  8163                           
  8164                           ;psect for function _BVH2_Appl_Layer
  8165  0078                     _BVH2_Appl_Layer:	
  8166                           
  8167                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;;BVH2_Appl_Layer.c: 335: static
      +                           UInt16 Cb19_Counter = 0;;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;;BVH2_Ap
      +                          pl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;;BVH2_Appl_Layer.c: 338: static UInt8 C
      +                          b24_RestartCounter = 0;;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;;BVH2_Appl
      +                          _Layer.c: 340: static UInt8 Cb9_StateCnt = 0;;BVH2_Appl_Layer.c: 342: static struct tag_
      +                          SIBFS_Current_Analysis_low_b_tp SIBFS_Current_Analysis_low_b = {;BVH2_Appl_Layer.c: 343:
      +                           0 ,
  8168                           
  8169                           ;incstack = 0
  8170                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8171  0078  28DF               	goto	l9112
  8172  0079                     l9036:	
  8173                           ;BVH2_Appl_Layer.c: 413: case (UInt8)4: {
  8174                           
  8175                           
  8176                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
  8177  0079  3000               	movlw	0
  8178  007A  0021               	movlb	1	; select bank1
  8179  007B  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  8180  007C  3033               	movlw	51
  8181  007D  1903               	skipnz
  8182  007E  0224               	subwf	_Cb44_StateCnt^(0+128),w
  8183  007F  1C03               	skipc
  8184  0080  28C4               	goto	L21
  8185  0081  289C               	goto	l9058
  8186  0082                     l9048:	
  8187                           ;BVH2_Appl_Layer.c: 429: };BVH2_Appl_Layer.c: 430: case (UInt8)5: {
  8188                           
  8189                           ;BVH2_Appl_Layer.c: 425: };BVH2_Appl_Layer.c: 428: break;
  8190                           
  8191                           ;BVH2_Appl_Layer.c: 423: else {;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1 ;
  8192                           
  8193                           ;BVH2_Appl_Layer.c: 422: }
  8194                           
  8195                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
  8196                           
  8197                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
  8198                           
  8199                           ;BVH2_Appl_Layer.c: 419: Cb44_oShutoff = 0;
  8200                           
  8201                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  8202                           
  8203                           
  8204                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
  8205  0082  319F  2767  3180   	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  8206                           
  8207                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
  8208  0085  0021               	movlb	1	; select bank1
  8209  0086  0C47               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8210  0087  0020               	movlb	0	; select bank0
  8211  0088  00B7               	movwf	??_BVH2_Appl_Layer
  8212  0089  0CB7               	rrf	??_BVH2_Appl_Layer,f
  8213  008A  0C37               	rrf	??_BVH2_Appl_Layer,w
  8214  008B  3903               	andlw	3
  8215  008C  3A03               	xorlw	3
  8216  008D  1903               	skipnz
  8217  008E  28F5               	goto	l9114
  8218  008F  28C3               	goto	l9096
  8219  0090                     l9054:	
  8220                           ;BVH2_Appl_Layer.c: 439: };BVH2_Appl_Layer.c: 440: case (UInt8)3: {
  8221                           
  8222                           ;BVH2_Appl_Layer.c: 435: };BVH2_Appl_Layer.c: 438: break;
  8223                           
  8224                           ;BVH2_Appl_Layer.c: 434: Cb44_StateCnt = Cb44_StateCnt + 1 ;
  8225                           
  8226                           
  8227                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
  8228  0090  319F  2767  3180   	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  8229                           
  8230                           ;BVH2_Appl_Layer.c: 445: break;
  8231  0093  28F5               	goto	l9114
  8232  0094                     l9056:	
  8233                           ;BVH2_Appl_Layer.c: 446: };BVH2_Appl_Layer.c: 447: case (UInt8)6: {
  8234                           
  8235                           
  8236                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
  8237  0094  3000               	movlw	0
  8238  0095  0021               	movlb	1	; select bank1
  8239  0096  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  8240  0097  3010               	movlw	16
  8241  0098  1903               	skipnz
  8242  0099  0224               	subwf	_Cb44_StateCnt^(0+128),w
  8243  009A  1C03               	skipc
  8244  009B  28A5               	goto	l9066
  8245  009C                     l9058:	
  8246                           
  8247                           ;BVH2_Appl_Layer.c: 451: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  8248  009C  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8249  009D  39F8               	andlw	-8
  8250  009E  3805               	iorlw	5
  8251  009F  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8252                           
  8253                           ;BVH2_Appl_Layer.c: 452: Cb44_oShutoff = 0;
  8254  00A0  0022               	movlb	2	; select bank2
  8255  00A1  01B6               	clrf	_Cb44_oShutoff^(0+256)
  8256                           
  8257                           ;BVH2_Appl_Layer.c: 453: Cb44_oAlarm = 0;
  8258  00A2  01B7               	clrf	_Cb44_oAlarm^(0+256)
  8259                           
  8260                           ;BVH2_Appl_Layer.c: 454: Cb44_StateCnt = 0 ;
  8261  00A3  0021               	movlb	1	; select bank1
  8262  00A4  28DC               	goto	l9110
  8263  00A5                     l9066:	
  8264                           ;BVH2_Appl_Layer.c: 455: }
  8265                           
  8266                           
  8267                           ;BVH2_Appl_Layer.c: 456: else {;BVH2_Appl_Layer.c: 459: if (bool_mat_pic_etat) {
  8268  00A5  084B               	movf	_bool_mat_pic_etat^(0+128),w
  8269  00A6  28B5               	goto	L48
  8270  00A7                     l9078:	
  8271                           ;BVH2_Appl_Layer.c: 473: };BVH2_Appl_Layer.c: 474: case (UInt8)2: {
  8272                           
  8273                           ;BVH2_Appl_Layer.c: 468: };BVH2_Appl_Layer.c: 469: };BVH2_Appl_Layer.c: 472: break;
  8274                           
  8275                           ;BVH2_Appl_Layer.c: 466: else {;BVH2_Appl_Layer.c: 467: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1 ;
  8276                           
  8277                           ;BVH2_Appl_Layer.c: 465: }
  8278                           
  8279                           ;BVH2_Appl_Layer.c: 464: Cb44_oAlarm = 1;
  8280                           
  8281                           ;BVH2_Appl_Layer.c: 463: Cb44_oShutoff = 1;
  8282                           
  8283                           ;BVH2_Appl_Layer.c: 462: Cb44_StateCnt = 0 ;
  8284                           
  8285                           ;BVH2_Appl_Layer.c: 461: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)1;
  8286                           
  8287                           
  8288                           ;BVH2_Appl_Layer.c: 479: if (!(bool_mat_pic_etat)) {
  8289  00A7  084B               	movf	_bool_mat_pic_etat^(0+128),w
  8290  00A8  1D03               	btfss	3,2
  8291  00A9  28B2               	goto	l9086
  8292                           
  8293                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
  8294  00AA  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8295  00AB  39F8               	andlw	-8
  8296  00AC  3803               	iorlw	3
  8297  00AD  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8298                           
  8299                           ;BVH2_Appl_Layer.c: 482: Cb44_oShutoff = 0;
  8300  00AE  0022               	movlb	2	; select bank2
  8301  00AF  01B6               	clrf	_Cb44_oShutoff^(0+256)
  8302                           
  8303                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
  8304  00B0  01B7               	clrf	_Cb44_oAlarm^(0+256)
  8305                           
  8306                           ;BVH2_Appl_Layer.c: 484: }
  8307  00B1  28F5               	goto	l9114
  8308  00B2                     l9086:	
  8309                           
  8310                           ;BVH2_Appl_Layer.c: 485: else {;BVH2_Appl_Layer.c: 486: if (Cb44_StateCnt) {
  8311  00B2  0021               	movlb	1	; select bank1
  8312  00B3  0824               	movf	_Cb44_StateCnt^(0+128),w
  8313  00B4  0425               	iorwf	(_Cb44_StateCnt+1)^(0+128),w
  8314  00B5                     L48:	
  8315  00B5  1903               	btfsc	3,2
  8316  00B6  28C3               	goto	l9096
  8317                           
  8318                           ;BVH2_Appl_Layer.c: 488: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)1;
  8319  00B7  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8320  00B8  39F8               	andlw	-8
  8321  00B9  3801               	iorlw	1
  8322  00BA  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8323                           
  8324                           ;BVH2_Appl_Layer.c: 489: Cb44_StateCnt = 0 ;
  8325  00BB  01A4               	clrf	_Cb44_StateCnt^(0+128)
  8326  00BC  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
  8327                           
  8328                           ;BVH2_Appl_Layer.c: 490: Cb44_oShutoff = 1;
  8329  00BD  0022               	movlb	2	; select bank2
  8330  00BE  01B6               	clrf	_Cb44_oShutoff^(0+256)
  8331  00BF  0AB6               	incf	_Cb44_oShutoff^(0+256),f
  8332                           
  8333                           ;BVH2_Appl_Layer.c: 491: Cb44_oAlarm = 1;
  8334  00C0  01B7               	clrf	_Cb44_oAlarm^(0+256)
  8335  00C1  0AB7               	incf	_Cb44_oAlarm^(0+256),f
  8336                           
  8337                           ;BVH2_Appl_Layer.c: 492: }
  8338  00C2  28F5               	goto	l9114
  8339  00C3                     l9096:	
  8340                           
  8341                           ;BVH2_Appl_Layer.c: 493: else {;BVH2_Appl_Layer.c: 494: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1 ;
  8342  00C3  0021               	movlb	1	; select bank1
  8343  00C4                     L21:	
  8344  00C4  0824               	movf	_Cb44_StateCnt^(0+128),w
  8345  00C5  3E01               	addlw	1
  8346  00C6  00A4               	movwf	_Cb44_StateCnt^(0+128)
  8347  00C7  3000               	movlw	0
  8348  00C8  3D25               	addwfc	(_Cb44_StateCnt+1)^(0+128),w
  8349  00C9  00A5               	movwf	(_Cb44_StateCnt+1)^(0+128)
  8350                           
  8351                           ;BVH2_Appl_Layer.c: 495: };BVH2_Appl_Layer.c: 496: };BVH2_Appl_Layer.c: 499: break;
  8352  00CA  28F5               	goto	l9114
  8353  00CB                     l9098:	
  8354                           ;BVH2_Appl_Layer.c: 500: };BVH2_Appl_Layer.c: 501: case (UInt8)1: {
  8355                           
  8356                           
  8357                           ;BVH2_Appl_Layer.c: 506: if (!(bool_mat_pic_etat)) {
  8358  00CB  084B               	movf	_bool_mat_pic_etat^(0+128),w
  8359  00CC  1D03               	btfss	3,2
  8360  00CD  28F5               	goto	l9114
  8361                           
  8362                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
  8363  00CE  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8364  00CF  39F8               	andlw	-8
  8365  00D0  3806               	iorlw	6
  8366  00D1  28DB               	goto	L39
  8367  00D2                     l1370:	
  8368                           ;BVH2_Appl_Layer.c: 515: };BVH2_Appl_Layer.c: 516: default: {
  8369                           
  8370                           ;BVH2_Appl_Layer.c: 511: };BVH2_Appl_Layer.c: 514: break;
  8371                           
  8372                           ;BVH2_Appl_Layer.c: 510: Cb44_StateCnt = 0 ;
  8373                           
  8374                           
  8375                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
  8376  00D2  1AC7               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
  8377  00D3  28F5               	goto	l9114
  8378                           
  8379                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
  8380  00D4  16C7               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
  8381                           
  8382                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
  8383  00D5  086F               	movf	_ui8_ResetMatlab^(0+128),w
  8384  00D6  1903               	btfsc	3,2
  8385  00D7  28F5               	goto	l9114
  8386                           
  8387                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
  8388  00D8  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8389  00D9  39F8               	andlw	-8
  8390  00DA  3804               	iorlw	4
  8391  00DB                     L39:	
  8392  00DB  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8393  00DC                     l9110:	
  8394                           
  8395                           ;BVH2_Appl_Layer.c: 526: Cb44_StateCnt = 0 ;
  8396  00DC  01A4               	clrf	_Cb44_StateCnt^(0+128)
  8397  00DD  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
  8398                           
  8399                           ;BVH2_Appl_Layer.c: 527: };BVH2_Appl_Layer.c: 528: };BVH2_Appl_Layer.c: 529: };BVH2_Appl
      +                          _Layer.c: 530: }
  8400  00DE  28F5               	goto	l9114
  8401  00DF                     l9112:	
  8402  00DF  0021               	movlb	1	; select bank1
  8403  00E0  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8404  00E1  3907               	andlw	7
  8405                           
  8406                           ; Switch size 1, requested type "space"
  8407                           ; Number of cases is 6, Range of values is 1 to 6
  8408                           ; switch strategies available:
  8409                           ; Name         Instructions Cycles
  8410                           ; simple_byte           19    10 (average)
  8411                           ; direct_byte           21     9 (fixed)
  8412                           ; jumptable            263     9 (fixed)
  8413                           ;	Chosen strategy is simple_byte
  8414  00E2  3A01               	xorlw	1	; case 1
  8415  00E3  1903               	skipnz
  8416  00E4  28CB               	goto	l9098
  8417  00E5  3A03               	xorlw	3	; case 2
  8418  00E6  1903               	skipnz
  8419  00E7  28A7               	goto	l9078
  8420  00E8  3A01               	xorlw	1	; case 3
  8421  00E9  1903               	skipnz
  8422  00EA  2890               	goto	l9054
  8423  00EB  3A07               	xorlw	7	; case 4
  8424  00EC  1903               	skipnz
  8425  00ED  2879               	goto	l9036
  8426  00EE  3A01               	xorlw	1	; case 5
  8427  00EF  1903               	skipnz
  8428  00F0  2882               	goto	l9048
  8429  00F1  3A03               	xorlw	3	; case 6
  8430  00F2  1903               	skipnz
  8431  00F3  2894               	goto	l9056
  8432  00F4  28D2               	goto	l1370
  8433  00F5                     l9114:	
  8434                           
  8435                           ;BVH2_Appl_Layer.c: 535: bool_PIC_Alarm = Cb44_oAlarm;
  8436  00F5  0022               	movlb	2	; select bank2
  8437  00F6  0837               	movf	_Cb44_oAlarm^(0+256),w
  8438  00F7  0020               	movlb	0	; select bank0
  8439  00F8  00B7               	movwf	??_BVH2_Appl_Layer
  8440  00F9  0837               	movf	??_BVH2_Appl_Layer,w
  8441  00FA  0023               	movlb	3	; select bank3
  8442  00FB  00DE               	movwf	_bool_PIC_Alarm^(0+384)
  8443                           
  8444                           ;BVH2_Appl_Layer.c: 539: Cb34_idPWM = 50;
  8445  00FC  3032               	movlw	50
  8446  00FD  0020               	movlb	0	; select bank0
  8447  00FE  00B7               	movwf	??_BVH2_Appl_Layer
  8448  00FF  0837               	movf	??_BVH2_Appl_Layer,w
  8449  0100  00D6               	movwf	_Cb34_idPWM
  8450                           
  8451                           ;BVH2_Appl_Layer.c: 544: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
  8452  0101  0021               	movlb	1	; select bank1
  8453  0102  1A48               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
  8454  0103  2925               	goto	l9138
  8455  0104  2935               	goto	l1373
  8456  0105                     l9120:	
  8457                           ;BVH2_Appl_Layer.c: 547: case (UInt8)3: {
  8458                           
  8459                           ;BVH2_Appl_Layer.c: 546: switch (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns) {
  8460                           
  8461                           
  8462                           ;BVH2_Appl_Layer.c: 550: Cb34_PWM_Detection_node_fcn1();
  8463  0105  3195  25E5  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8464                           
  8465                           ;BVH2_Appl_Layer.c: 553: break;
  8466  0108  2944               	goto	l9154
  8467  0109                     l9122:	
  8468                           ;BVH2_Appl_Layer.c: 554: };BVH2_Appl_Layer.c: 555: case (UInt8)8: {
  8469                           
  8470                           
  8471                           ;BVH2_Appl_Layer.c: 558: Cb34_PWM_Detection_node_fcn1();
  8472  0109  3195  25E5  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8473                           
  8474                           ;BVH2_Appl_Layer.c: 562: break;
  8475  010C  2944               	goto	l9154
  8476  010D                     l9124:	
  8477                           ;BVH2_Appl_Layer.c: 563: };BVH2_Appl_Layer.c: 564: case (UInt8)4: {
  8478                           
  8479                           
  8480                           ;BVH2_Appl_Layer.c: 567: Cb34_PWM_Detection_node_fcn1();
  8481  010D  3195  25E5  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8482                           
  8483                           ;BVH2_Appl_Layer.c: 571: break;
  8484  0110  2944               	goto	l9154
  8485  0111                     l9126:	
  8486                           ;BVH2_Appl_Layer.c: 572: };BVH2_Appl_Layer.c: 573: case (UInt8)6: {
  8487                           
  8488                           
  8489                           ;BVH2_Appl_Layer.c: 575: Cb34_PWM_Detection_node_fcn1();
  8490  0111  3195  25E5  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8491                           
  8492                           ;BVH2_Appl_Layer.c: 578: break;
  8493  0114  2944               	goto	l9154
  8494  0115                     l9128:	
  8495                           ;BVH2_Appl_Layer.c: 579: };BVH2_Appl_Layer.c: 580: case (UInt8)7: {
  8496                           
  8497                           
  8498                           ;BVH2_Appl_Layer.c: 583: Cb34_PWM_Detection_node_fcn1();
  8499  0115  3195  25E5  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8500                           
  8501                           ;BVH2_Appl_Layer.c: 587: break;
  8502  0118  2944               	goto	l9154
  8503  0119                     l9130:	
  8504                           ;BVH2_Appl_Layer.c: 588: };BVH2_Appl_Layer.c: 589: case (UInt8)2: {
  8505                           
  8506                           
  8507                           ;BVH2_Appl_Layer.c: 591: Cb34_PWM_Detection_node_fcn1();
  8508  0119  3195  25E5  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8509                           
  8510                           ;BVH2_Appl_Layer.c: 594: break;
  8511  011C  2944               	goto	l9154
  8512  011D                     l9132:	
  8513                           ;BVH2_Appl_Layer.c: 595: };BVH2_Appl_Layer.c: 596: case (UInt8)5: {
  8514                           
  8515                           
  8516                           ;BVH2_Appl_Layer.c: 599: Cb34_PWM_Detection_node_fcn1();
  8517  011D  3195  25E5  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8518                           
  8519                           ;BVH2_Appl_Layer.c: 603: break;
  8520  0120  2944               	goto	l9154
  8521  0121                     l9134:	
  8522                           ;BVH2_Appl_Layer.c: 604: };BVH2_Appl_Layer.c: 605: case (UInt8)1: {
  8523                           
  8524                           
  8525                           ;BVH2_Appl_Layer.c: 607: Cb34_PWM_Detection_node_fcn1();
  8526  0121  3195  25E5  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8527                           
  8528                           ;BVH2_Appl_Layer.c: 611: };BVH2_Appl_Layer.c: 612: }
  8529                           
  8530                           ;BVH2_Appl_Layer.c: 610: break;
  8531  0124  2944               	goto	l9154
  8532  0125                     l9138:	
  8533  0125  0021               	movlb	1	; select bank1
  8534  0126  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  8535  0127  390F               	andlw	15
  8536                           
  8537                           ; Switch size 1, requested type "space"
  8538                           ; Number of cases is 8, Range of values is 1 to 8
  8539                           ; switch strategies available:
  8540                           ; Name         Instructions Cycles
  8541                           ; direct_byte           25     9 (fixed)
  8542                           ; simple_byte           25    13 (average)
  8543                           ; jumptable            263     9 (fixed)
  8544                           ;	Chosen strategy is direct_byte
  8545  0128  3EFF               	addlw	-1
  8546  0129  1C03               	skipc
  8547  012A  2944               	goto	l9154
  8548  012B  0084               	movwf	4
  8549  012C  3008               	movlw	8
  8550  012D  0204               	subwf	4,w
  8551  012E  1803               	skipnc
  8552  012F  2944               	goto	l9154
  8553  0130  3198               	movlp	high S11712
  8554  0131  3504               	lslf	4,w
  8555  0132  3E68               	addlw	low S11712
  8556  0133  0082               	movwf	2
  8557                           
  8558                           ;BVH2_Appl_Layer.c: 615: }
  8559  0134  2944               	goto	l9154
  8560  0135                     l1373:	
  8561                           
  8562                           ;BVH2_Appl_Layer.c: 616: else {;BVH2_Appl_Layer.c: 617: SIBFS_PWM_Detection_b.Cb35_PWMin
      +                          put_handling = 1;
  8563  0135  1648               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
  8564                           
  8565                           ;BVH2_Appl_Layer.c: 620: if (ui8_ResetMatlab == 1) {
  8566  0136  036F               	decf	_ui8_ResetMatlab^(0+128),w
  8567  0137  1D03               	btfss	3,2
  8568  0138  2944               	goto	l9154
  8569                           
  8570                           ;BVH2_Appl_Layer.c: 622: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
  8571  0139  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  8572  013A  39F0               	andlw	-16
  8573  013B  3801               	iorlw	1
  8574  013C  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
  8575                           
  8576                           ;BVH2_Appl_Layer.c: 623: Cb34_odPumpOff = 1;
  8577  013D  0022               	movlb	2	; select bank2
  8578  013E  01B8               	clrf	_Cb34_odPumpOff^(0+256)
  8579  013F  0AB8               	incf	_Cb34_odPumpOff^(0+256),f
  8580                           
  8581                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedValueSel = 0;
  8582  0140  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
  8583                           
  8584                           ;BVH2_Appl_Layer.c: 625: Cb34_odFixedLowValueSel = 0;
  8585  0141  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
  8586                           
  8587                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_SC_Alarm = 0;
  8588  0142  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
  8589                           
  8590                           ;BVH2_Appl_Layer.c: 627: Cb34_oPWM_Alarm = 0;
  8591  0143  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
  8592  0144                     l9154:	
  8593                           
  8594                           ;BVH2_Appl_Layer.c: 628: };BVH2_Appl_Layer.c: 629: };BVH2_Appl_Layer.c: 634: bool_PWMin_
      +                          Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
  8595  0144  0022               	movlb	2	; select bank2
  8596  0145  083B               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
  8597  0146  0020               	movlb	0	; select bank0
  8598  0147  00B7               	movwf	??_BVH2_Appl_Layer
  8599  0148  0837               	movf	??_BVH2_Appl_Layer,w
  8600  0149  0022               	movlb	2	; select bank2
  8601  014A  00C5               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
  8602                           
  8603                           ;BVH2_Appl_Layer.c: 639: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
  8604  014B  0020               	movlb	0	; select bank0
  8605  014C  1DD7               	btfss	_SIBFS_UbatHandling_b,3
  8606  014D  2976               	goto	l1386
  8607                           
  8608                           ;BVH2_Appl_Layer.c: 643: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
  8609  014E  1E57               	btfss	_SIBFS_UbatHandling_b,4
  8610  014F  295D               	goto	l1387
  8611                           
  8612                           ;BVH2_Appl_Layer.c: 645: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
  8613  0150  0857               	movf	_SIBFS_UbatHandling_b,w
  8614  0151  39F8               	andlw	-8
  8615  0152  3802               	iorlw	2
  8616  0153  00D7               	movwf	_SIBFS_UbatHandling_b
  8617                           
  8618                           ;BVH2_Appl_Layer.c: 648: if (((UInt8)ui8_BattVolt_mat) < 139) {
  8619  0154  308B               	movlw	139
  8620  0155  0021               	movlb	1	; select bank1
  8621  0156  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
  8622  0157  1803               	skipnc
  8623  0158  2983               	goto	l1394
  8624                           
  8625                           ;BVH2_Appl_Layer.c: 649: Cb56_UbatHandling_node_fcn2();
  8626  0159  3193  2392  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  8627                           
  8628                           ;BVH2_Appl_Layer.c: 650: };BVH2_Appl_Layer.c: 653: }
  8629  015C  2983               	goto	l1394
  8630  015D                     l1387:	
  8631                           
  8632                           ;BVH2_Appl_Layer.c: 654: else {;BVH2_Appl_Layer.c: 656: if (SIBFS_UbatHandling_b.Cb59_Sa
      +                          turationLow) {
  8633  015D  1ED7               	btfss	_SIBFS_UbatHandling_b,5
  8634  015E  296C               	goto	l1390
  8635                           
  8636                           ;BVH2_Appl_Layer.c: 658: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
  8637  015F  0857               	movf	_SIBFS_UbatHandling_b,w
  8638  0160  39F8               	andlw	-8
  8639  0161  3803               	iorlw	3
  8640  0162  00D7               	movwf	_SIBFS_UbatHandling_b
  8641                           
  8642                           ;BVH2_Appl_Layer.c: 661: if (((UInt8)ui8_BattVolt_mat) > 49) {
  8643  0163  3032               	movlw	50
  8644  0164  0021               	movlb	1	; select bank1
  8645  0165  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
  8646  0166  1C03               	skipc
  8647  0167  2983               	goto	l1394
  8648                           
  8649                           ;BVH2_Appl_Layer.c: 662: Cb56_UbatHandling_node_fcn2();
  8650  0168  3193  2392  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  8651                           
  8652                           ;BVH2_Appl_Layer.c: 663: };BVH2_Appl_Layer.c: 666: }
  8653  016B  2983               	goto	l1394
  8654  016C                     l1390:	
  8655                           
  8656                           ;BVH2_Appl_Layer.c: 667: else {;BVH2_Appl_Layer.c: 669: if (SIBFS_UbatHandling_b.Cb60_No
      +                          rmalUbat) {
  8657  016C  1F57               	btfss	_SIBFS_UbatHandling_b,6
  8658  016D  2983               	goto	l1394
  8659                           
  8660                           ;BVH2_Appl_Layer.c: 671: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
  8661  016E  0857               	movf	_SIBFS_UbatHandling_b,w
  8662  016F  39F8               	andlw	-8
  8663  0170  3801               	iorlw	1
  8664  0171  00D7               	movwf	_SIBFS_UbatHandling_b
  8665                           
  8666                           ;BVH2_Appl_Layer.c: 672: Cb56_UbatHandling_node_fcn2();
  8667  0172  3193  2392  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  8668                           
  8669                           ;BVH2_Appl_Layer.c: 675: };BVH2_Appl_Layer.c: 676: };BVH2_Appl_Layer.c: 677: };BVH2_Appl
      +                          _Layer.c: 680: }
  8670  0175  2983               	goto	l1394
  8671  0176                     l1386:	
  8672                           
  8673                           ;BVH2_Appl_Layer.c: 681: else {;BVH2_Appl_Layer.c: 682: SIBFS_UbatHandling_b.Cb57_Ubat_H
      +                          andling = 1;
  8674  0176  15D7               	bsf	_SIBFS_UbatHandling_b,3
  8675                           
  8676                           ;BVH2_Appl_Layer.c: 685: if (ui8_ResetMatlab == 1) {
  8677  0177  0021               	movlb	1	; select bank1
  8678  0178  036F               	decf	_ui8_ResetMatlab^(0+128),w
  8679  0179  1D03               	btfss	3,2
  8680  017A  2983               	goto	l1394
  8681                           
  8682                           ;BVH2_Appl_Layer.c: 687: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
  8683  017B  0020               	movlb	0	; select bank0
  8684  017C  1757               	bsf	_SIBFS_UbatHandling_b,6
  8685                           
  8686                           ;BVH2_Appl_Layer.c: 688: Cb56_odPumpOff = 0;
  8687  017D  0022               	movlb	2	; select bank2
  8688  017E  01B4               	clrf	_Cb56_odPumpOff^(0+256)
  8689                           
  8690                           ;BVH2_Appl_Layer.c: 689: Cb56_odFixedValueSel = 0;
  8691  017F  0021               	movlb	1	; select bank1
  8692  0180  01C6               	clrf	_Cb56_odFixedValueSel^(0+128)
  8693                           
  8694                           ;BVH2_Appl_Layer.c: 690: Cb56_oUbat_Alarm_High = 0;
  8695  0181  0022               	movlb	2	; select bank2
  8696  0182  01B5               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
  8697  0183                     l1394:	
  8698                           
  8699                           ;BVH2_Appl_Layer.c: 691: };BVH2_Appl_Layer.c: 692: };BVH2_Appl_Layer.c: 695: Sb1_Logical
      +                          _Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueSel));
  8700  0183  0025               	movlb	5	; select bank5
  8701  0184  01AA               	clrf	_BVH2_Appl_Layer$1039^(0+640)
  8702  0185  0022               	movlb	2	; select bank2
  8703  0186  0838               	movf	_Cb34_odPumpOff^(0+256),w
  8704  0187  1903               	btfsc	3,2
  8705  0188  2990               	goto	l9188
  8706  0189  0021               	movlb	1	; select bank1
  8707  018A  0846               	movf	_Cb56_odFixedValueSel^(0+128),w
  8708  018B  1D03               	btfss	3,2
  8709  018C  2990               	goto	l9188
  8710  018D  0025               	movlb	5	; select bank5
  8711  018E  01AA               	clrf	_BVH2_Appl_Layer$1039^(0+640)
  8712  018F  0AAA               	incf	_BVH2_Appl_Layer$1039^(0+640),f
  8713  0190                     l9188:	
  8714  0190  0025               	movlb	5	; select bank5
  8715  0191  082A               	movf	_BVH2_Appl_Layer$1039^(0+640),w
  8716  0192  0020               	movlb	0	; select bank0
  8717  0193  00B7               	movwf	??_BVH2_Appl_Layer
  8718  0194  0837               	movf	??_BVH2_Appl_Layer,w
  8719  0195  0025               	movlb	5	; select bank5
  8720  0196  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640)
  8721                           
  8722                           ;BVH2_Appl_Layer.c: 700: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
  8723  0197  0021               	movlb	1	; select bank1
  8724  0198  1CC0               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  8725  0199  29A8               	goto	l1398
  8726                           
  8727                           ;BVH2_Appl_Layer.c: 702: if (Cb51_Counter > 80) {
  8728  019A  3051               	movlw	81
  8729  019B  0244               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+128),w
  8730  019C  1C03               	skipc
  8731  019D  29A0               	goto	l9198
  8732                           
  8733                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
  8734  019E  10C0               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  8735  019F  29CD               	goto	L40
  8736  01A0                     l9198:	
  8737                           ;BVH2_Appl_Layer.c: 711: }
  8738                           
  8739                           ;BVH2_Appl_Layer.c: 710: Cb51_Counter = 0 ;
  8740                           
  8741                           ;BVH2_Appl_Layer.c: 709: Cb51_odPumpOff = 0;
  8742                           
  8743                           ;BVH2_Appl_Layer.c: 708: Cb51_oTempAlarm = 0;
  8744                           
  8745                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempRedAlarm = 0;
  8746                           
  8747                           ;BVH2_Appl_Layer.c: 706: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  8748                           
  8749                           
  8750                           ;BVH2_Appl_Layer.c: 712: else {;BVH2_Appl_Layer.c: 713: Cb51_Counter = Cb51_Counter + 1 
      +                          ;
  8751  01A0  0844               	movf	BVH2_Appl_Layer@Cb51_Counter^(0+128),w
  8752  01A1  3E01               	addlw	1
  8753  01A2  0020               	movlb	0	; select bank0
  8754  01A3  00B7               	movwf	??_BVH2_Appl_Layer
  8755  01A4  0837               	movf	??_BVH2_Appl_Layer,w
  8756  01A5  0021               	movlb	1	; select bank1
  8757  01A6  00C4               	movwf	BVH2_Appl_Layer@Cb51_Counter^(0+128)
  8758                           
  8759                           ;BVH2_Appl_Layer.c: 714: };BVH2_Appl_Layer.c: 717: }
  8760  01A7  2A63               	goto	l9308
  8761  01A8                     l1398:	
  8762                           
  8763                           ;BVH2_Appl_Layer.c: 718: else {;BVH2_Appl_Layer.c: 720: if (SIBFS_Temperature_Alarm_b.Cb
      +                          53_reset) {
  8764  01A8  1D40               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  8765  01A9  29AD               	goto	l1402
  8766                           
  8767                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
  8768  01AA  1140               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  8769                           
  8770                           ;BVH2_Appl_Layer.c: 726: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
  8771  01AB  14C0               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  8772                           
  8773                           ;BVH2_Appl_Layer.c: 729: }
  8774  01AC  2A63               	goto	l9308
  8775  01AD                     l1402:	
  8776                           
  8777                           ;BVH2_Appl_Layer.c: 730: else {;BVH2_Appl_Layer.c: 732: if (SIBFS_Temperature_Alarm_b.Cb
      +                          54_greenTemp) {
  8778  01AD  1DC0               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  8779  01AE  29C1               	goto	l1404
  8780                           
  8781                           ;BVH2_Appl_Layer.c: 736: if (ui16_mat_inpTemp < 72) {
  8782  01AF  3000               	movlw	0
  8783  01B0  0023               	movlb	3	; select bank3
  8784  01B1  023B               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  8785  01B2  3048               	movlw	72
  8786  01B3  1903               	skipnz
  8787  01B4  023A               	subwf	_ui16_mat_inpTemp^(0+384),w
  8788  01B5  1803               	skipnc
  8789  01B6  2A63               	goto	l9308
  8790                           
  8791                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
  8792  01B7  0021               	movlb	1	; select bank1
  8793  01B8  11C0               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  8794                           
  8795                           ;BVH2_Appl_Layer.c: 740: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
  8796  01B9  1640               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  8797                           
  8798                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempRedAlarm = 1;
  8799  01BA  0022               	movlb	2	; select bank2
  8800  01BB  01AF               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  8801  01BC  0AAF               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
  8802                           
  8803                           ;BVH2_Appl_Layer.c: 742: Cb51_oTempAlarm = 1;
  8804  01BD  01B0               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  8805  01BE  0AB0               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
  8806                           
  8807                           ;BVH2_Appl_Layer.c: 745: Cb51_odPumpOff = 0;
  8808  01BF  01AE               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  8809                           
  8810                           ;BVH2_Appl_Layer.c: 746: };BVH2_Appl_Layer.c: 749: }
  8811  01C0  2A63               	goto	l9308
  8812  01C1                     l1404:	
  8813                           
  8814                           ;BVH2_Appl_Layer.c: 750: else {;BVH2_Appl_Layer.c: 752: if (SIBFS_Temperature_Alarm_b.Cb
      +                          55_redTemp) {
  8815  01C1  1E40               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  8816  01C2  29D4               	goto	l1407
  8817                           
  8818                           ;BVH2_Appl_Layer.c: 756: if (ui16_mat_inpTemp > 185) {
  8819  01C3  3000               	movlw	0
  8820  01C4  0023               	movlb	3	; select bank3
  8821  01C5  023B               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  8822  01C6  30BA               	movlw	186
  8823  01C7  1903               	skipnz
  8824  01C8  023A               	subwf	_ui16_mat_inpTemp^(0+384),w
  8825  01C9  1C03               	skipc
  8826  01CA  2A63               	goto	l9308
  8827                           
  8828                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
  8829  01CB  0021               	movlb	1	; select bank1
  8830  01CC  1240               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  8831  01CD                     L40:	
  8832                           
  8833                           ;BVH2_Appl_Layer.c: 760: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  8834  01CD  15C0               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  8835                           
  8836                           ;BVH2_Appl_Layer.c: 761: Cb51_oTempRedAlarm = 0;
  8837  01CE  0022               	movlb	2	; select bank2
  8838  01CF  01AF               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  8839                           
  8840                           ;BVH2_Appl_Layer.c: 762: Cb51_oTempAlarm = 0;
  8841  01D0  01B0               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  8842                           
  8843                           ;BVH2_Appl_Layer.c: 763: Cb51_odPumpOff = 0;
  8844  01D1  01AE               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  8845                           
  8846                           ;BVH2_Appl_Layer.c: 764: Cb51_Counter = 0 ;
  8847  01D2  0021               	movlb	1	; select bank1
  8848  01D3  29DB               	goto	l9220
  8849  01D4                     l1407:	
  8850                           ;BVH2_Appl_Layer.c: 765: };BVH2_Appl_Layer.c: 768: }
  8851                           
  8852                           
  8853                           ;BVH2_Appl_Layer.c: 769: else {;BVH2_Appl_Layer.c: 771: if (!(SIBFS_Temperature_Alarm_b.
      +                          Cb51_Temperature_Alarm)) {
  8854  01D4  1840               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  8855  01D5  2A63               	goto	l9308
  8856                           
  8857                           ;BVH2_Appl_Layer.c: 772: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
  8858  01D6  1440               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  8859                           
  8860                           ;BVH2_Appl_Layer.c: 776: if (ui8_ResetMatlab != 0) {
  8861  01D7  086F               	movf	_ui8_ResetMatlab^(0+128),w
  8862  01D8  1903               	btfsc	3,2
  8863  01D9  2A63               	goto	l9308
  8864                           
  8865                           ;BVH2_Appl_Layer.c: 778: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
  8866  01DA  1540               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  8867  01DB                     l9220:	
  8868                           
  8869                           ;BVH2_Appl_Layer.c: 779: Cb51_Counter = 0 ;
  8870  01DB  01C4               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+128)
  8871                           
  8872                           ;BVH2_Appl_Layer.c: 780: };BVH2_Appl_Layer.c: 781: };BVH2_Appl_Layer.c: 782: };BVH2_Appl
      +                          _Layer.c: 783: };BVH2_Appl_Layer.c: 784: };BVH2_Appl_Layer.c: 785: };BVH2_Appl_Layer.c: 
      +                          790: switch (SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns) {
  8873  01DC  2A63               	goto	l9308
  8874  01DD                     l9222:	
  8875                           ;BVH2_Appl_Layer.c: 791: case (UInt8)6: {
  8876                           
  8877                           
  8878                           ;BVH2_Appl_Layer.c: 793: if (Cb1_StateCnt > 50) {
  8879  01DD  3000               	movlw	0
  8880  01DE  0020               	movlb	0	; select bank0
  8881  01DF  024E               	subwf	_Cb1_StateCnt+1,w
  8882  01E0  3033               	movlw	51
  8883  01E1  1903               	skipnz
  8884  01E2  024D               	subwf	_Cb1_StateCnt,w
  8885  01E3  1C03               	skipc
  8886  01E4  2A4B               	goto	l9296
  8887                           
  8888                           ;BVH2_Appl_Layer.c: 796: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 797: (UInt8)5;
  8889  01E5  0021               	movlb	1	; select bank1
  8890  01E6  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  8891  01E7  39F0               	andlw	-16
  8892  01E8  3805               	iorlw	5
  8893  01E9  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  8894                           
  8895                           ;BVH2_Appl_Layer.c: 798: Cb1_oShutoff = 0;
  8896  01EA  0022               	movlb	2	; select bank2
  8897  01EB  01BD               	clrf	_Cb1_oShutoff^(0+256)
  8898                           
  8899                           ;BVH2_Appl_Layer.c: 799: Cb1_oCurrentAlarm = 0;
  8900  01EC  01BE               	clrf	_Cb1_oCurrentAlarm^(0+256)
  8901  01ED  2A60               	goto	l9306
  8902  01EE                     l9234:	
  8903                           ;BVH2_Appl_Layer.c: 808: };BVH2_Appl_Layer.c: 809: case (UInt8)3: {
  8904                           
  8905                           ;BVH2_Appl_Layer.c: 804: };BVH2_Appl_Layer.c: 807: break;
  8906                           
  8907                           ;BVH2_Appl_Layer.c: 802: else {;BVH2_Appl_Layer.c: 803: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  8908                           
  8909                           ;BVH2_Appl_Layer.c: 801: }
  8910                           
  8911                           ;BVH2_Appl_Layer.c: 800: Cb1_RestartCounter = 0 ;
  8912                           
  8913                           
  8914                           ;BVH2_Appl_Layer.c: 811: Cb1_Current_An___High_node_fcn1();
  8915  01EE  3191  21A8  3180   	fcall	_Cb1_Current_An___High_node_fcn1
  8916                           
  8917                           ;BVH2_Appl_Layer.c: 812: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
  8918  01F1  0021               	movlb	1	; select bank1
  8919  01F2  0E49               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
  8920  01F3  3903               	andlw	3
  8921  01F4  3A03               	xorlw	3
  8922  01F5  1903               	skipnz
  8923  01F6  2A7C               	goto	l1416
  8924  01F7  2A4B               	goto	l9296
  8925  01F8                     l9240:	
  8926                           ;BVH2_Appl_Layer.c: 818: };BVH2_Appl_Layer.c: 819: case (UInt8)7: {
  8927                           
  8928                           ;BVH2_Appl_Layer.c: 814: };BVH2_Appl_Layer.c: 817: break;
  8929                           
  8930                           ;BVH2_Appl_Layer.c: 813: Cb1_StateCnt = Cb1_StateCnt + 1 ;
  8931                           
  8932                           
  8933                           ;BVH2_Appl_Layer.c: 821: if (Cb1_RestartCounter < 10) {
  8934  01F8  300A               	movlw	10
  8935  01F9  0021               	movlb	1	; select bank1
  8936  01FA  024A               	subwf	_Cb1_RestartCounter^(0+128),w
  8937  01FB  1803               	skipnc
  8938  01FC  2A7C               	goto	l1416
  8939  01FD  2A20               	goto	L47
  8940  01FE                     l9250:	
  8941                           ;BVH2_Appl_Layer.c: 833: };BVH2_Appl_Layer.c: 834: case (UInt8)5: {
  8942                           
  8943                           ;BVH2_Appl_Layer.c: 829: };BVH2_Appl_Layer.c: 832: break;
  8944                           
  8945                           ;BVH2_Appl_Layer.c: 828: Cb1_StateCnt = 0 ;
  8946                           
  8947                           ;BVH2_Appl_Layer.c: 827: Cb1_oCurrentAlarm = 1;
  8948                           
  8949                           ;BVH2_Appl_Layer.c: 826: Cb1_oShutoff = 0;
  8950                           
  8951                           ;BVH2_Appl_Layer.c: 824: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 825: (UInt8)3;
  8952                           
  8953                           
  8954                           ;BVH2_Appl_Layer.c: 836: Cb1_Current_An___High_node_fcn1();
  8955  01FE  3191  21A8  3180   	fcall	_Cb1_Current_An___High_node_fcn1
  8956                           
  8957                           ;BVH2_Appl_Layer.c: 839: break;
  8958  0201  2A7C               	goto	l1416
  8959  0202                     l9252:	
  8960                           ;BVH2_Appl_Layer.c: 840: };BVH2_Appl_Layer.c: 841: case (UInt8)4: {
  8961                           
  8962                           
  8963                           ;BVH2_Appl_Layer.c: 843: if (Cb1_StateCnt > 200) {
  8964  0202  3000               	movlw	0
  8965  0203  0020               	movlb	0	; select bank0
  8966  0204  024E               	subwf	_Cb1_StateCnt+1,w
  8967  0205  30C9               	movlw	201
  8968  0206  1903               	skipnz
  8969  0207  024D               	subwf	_Cb1_StateCnt,w
  8970  0208  1C03               	skipc
  8971  0209  2A17               	goto	l9256
  8972                           
  8973                           ;BVH2_Appl_Layer.c: 845: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 846: (UInt8)7;
  8974  020A  0021               	movlb	1	; select bank1
  8975  020B  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  8976  020C  39F0               	andlw	-16
  8977  020D  3807               	iorlw	7
  8978  020E  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  8979                           
  8980                           ;BVH2_Appl_Layer.c: 847: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
  8981  020F  084A               	movf	_Cb1_RestartCounter^(0+128),w
  8982  0210  3E01               	addlw	1
  8983  0211  0020               	movlb	0	; select bank0
  8984  0212  00B7               	movwf	??_BVH2_Appl_Layer
  8985  0213  0837               	movf	??_BVH2_Appl_Layer,w
  8986  0214  0021               	movlb	1	; select bank1
  8987  0215  00CA               	movwf	_Cb1_RestartCounter^(0+128)
  8988                           
  8989                           ;BVH2_Appl_Layer.c: 848: }
  8990  0216  2A7C               	goto	l1416
  8991  0217                     l9256:	
  8992                           
  8993                           ;BVH2_Appl_Layer.c: 849: else {;BVH2_Appl_Layer.c: 852: if (bool_mat_currAlarm_bldc) {
  8994  0217  0021               	movlb	1	; select bank1
  8995  0218  0850               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  8996  0219  1903               	btfsc	3,2
  8997  021A  2A4B               	goto	l9296
  8998  021B  2A32               	goto	L41
  8999  021C                     l9268:	
  9000                           ;BVH2_Appl_Layer.c: 867: };BVH2_Appl_Layer.c: 868: case (UInt8)2: {
  9001                           
  9002                           ;BVH2_Appl_Layer.c: 862: };BVH2_Appl_Layer.c: 863: };BVH2_Appl_Layer.c: 866: break;
  9003                           
  9004                           ;BVH2_Appl_Layer.c: 860: else {;BVH2_Appl_Layer.c: 861: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9005                           
  9006                           ;BVH2_Appl_Layer.c: 859: }
  9007                           
  9008                           ;BVH2_Appl_Layer.c: 858: Cb1_oCurrentAlarm = 1;
  9009                           
  9010                           ;BVH2_Appl_Layer.c: 857: Cb1_oShutoff = 1;
  9011                           
  9012                           ;BVH2_Appl_Layer.c: 856: Cb1_StateCnt = 0 ;
  9013                           
  9014                           ;BVH2_Appl_Layer.c: 854: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 855: (UInt8)1;
  9015                           
  9016                           
  9017                           ;BVH2_Appl_Layer.c: 873: if (!(bool_mat_currAlarm_bldc)) {
  9018  021C  0021               	movlb	1	; select bank1
  9019  021D  0850               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9020  021E  1D03               	btfss	3,2
  9021  021F  2A29               	goto	l9278
  9022  0220                     L47:	
  9023                           
  9024                           ;BVH2_Appl_Layer.c: 875: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 876: (UInt8)3;
  9025  0220  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9026  0221  39F0               	andlw	-16
  9027  0222  3803               	iorlw	3
  9028  0223  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9029                           
  9030                           ;BVH2_Appl_Layer.c: 877: Cb1_oShutoff = 0;
  9031  0224  0022               	movlb	2	; select bank2
  9032  0225  01BD               	clrf	_Cb1_oShutoff^(0+256)
  9033                           
  9034                           ;BVH2_Appl_Layer.c: 878: Cb1_oCurrentAlarm = 1;
  9035  0226  01BE               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9036  0227  0ABE               	incf	_Cb1_oCurrentAlarm^(0+256),f
  9037  0228  2A47               	goto	l9294
  9038  0229                     l9278:	
  9039                           ;BVH2_Appl_Layer.c: 880: }
  9040                           
  9041                           ;BVH2_Appl_Layer.c: 879: Cb1_StateCnt = 0 ;
  9042                           
  9043                           
  9044                           ;BVH2_Appl_Layer.c: 881: else {;BVH2_Appl_Layer.c: 882: if (Cb1_StateCnt > 1) {
  9045  0229  3000               	movlw	0
  9046  022A  0020               	movlb	0	; select bank0
  9047  022B  024E               	subwf	_Cb1_StateCnt+1,w
  9048  022C  3002               	movlw	2
  9049  022D  1903               	skipnz
  9050  022E  024D               	subwf	_Cb1_StateCnt,w
  9051  022F  1C03               	skipc
  9052  0230  2A4B               	goto	l9296
  9053                           
  9054                           ;BVH2_Appl_Layer.c: 884: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 885: (UInt8)1;
  9055  0231  0021               	movlb	1	; select bank1
  9056  0232                     L41:	
  9057  0232  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9058  0233  39F0               	andlw	-16
  9059  0234  3801               	iorlw	1
  9060  0235  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9061                           
  9062                           ;BVH2_Appl_Layer.c: 886: Cb1_StateCnt = 0 ;
  9063  0236  0020               	movlb	0	; select bank0
  9064  0237  01CD               	clrf	_Cb1_StateCnt
  9065  0238  01CE               	clrf	_Cb1_StateCnt+1
  9066                           
  9067                           ;BVH2_Appl_Layer.c: 887: Cb1_oShutoff = 1;
  9068  0239  0022               	movlb	2	; select bank2
  9069  023A  01BD               	clrf	_Cb1_oShutoff^(0+256)
  9070  023B  0ABD               	incf	_Cb1_oShutoff^(0+256),f
  9071                           
  9072                           ;BVH2_Appl_Layer.c: 888: Cb1_oCurrentAlarm = 1;
  9073  023C  01BE               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9074  023D  0ABE               	incf	_Cb1_oCurrentAlarm^(0+256),f
  9075  023E  2A7C               	goto	l1416
  9076  023F                     l9290:	
  9077                           ;BVH2_Appl_Layer.c: 897: };BVH2_Appl_Layer.c: 898: case (UInt8)1: {
  9078                           
  9079                           ;BVH2_Appl_Layer.c: 892: };BVH2_Appl_Layer.c: 893: };BVH2_Appl_Layer.c: 896: break;
  9080                           
  9081                           ;BVH2_Appl_Layer.c: 890: else {;BVH2_Appl_Layer.c: 891: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9082                           
  9083                           ;BVH2_Appl_Layer.c: 889: }
  9084                           
  9085                           
  9086                           ;BVH2_Appl_Layer.c: 903: if (!(bool_mat_currAlarm_bldc)) {
  9087  023F  0021               	movlb	1	; select bank1
  9088  0240  0850               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9089  0241  1D03               	btfss	3,2
  9090  0242  2A4B               	goto	l9296
  9091                           
  9092                           ;BVH2_Appl_Layer.c: 906: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
  9093  0243  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9094  0244  39F0               	andlw	-16
  9095  0245  3804               	iorlw	4
  9096  0246  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9097  0247                     l9294:	
  9098                           
  9099                           ;BVH2_Appl_Layer.c: 907: Cb1_StateCnt = 0 ;
  9100  0247  0020               	movlb	0	; select bank0
  9101  0248  01CD               	clrf	_Cb1_StateCnt
  9102  0249  01CE               	clrf	_Cb1_StateCnt+1
  9103                           
  9104                           ;BVH2_Appl_Layer.c: 908: }
  9105  024A  2A7C               	goto	l1416
  9106  024B                     l9296:	
  9107                           
  9108                           ;BVH2_Appl_Layer.c: 909: else {;BVH2_Appl_Layer.c: 910: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9109  024B  0020               	movlb	0	; select bank0
  9110  024C  084D               	movf	_Cb1_StateCnt,w
  9111  024D  3E01               	addlw	1
  9112  024E  00CD               	movwf	_Cb1_StateCnt
  9113  024F  3000               	movlw	0
  9114  0250  3D4E               	addwfc	_Cb1_StateCnt+1,w
  9115  0251  00CE               	movwf	_Cb1_StateCnt+1
  9116                           
  9117                           ;BVH2_Appl_Layer.c: 911: };BVH2_Appl_Layer.c: 914: break;
  9118  0252  2A7C               	goto	l1416
  9119  0253                     l1435:	
  9120                           ;BVH2_Appl_Layer.c: 915: };BVH2_Appl_Layer.c: 916: default: {
  9121                           
  9122                           
  9123                           ;BVH2_Appl_Layer.c: 918: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
  9124  0253  1B49               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
  9125  0254  2A7C               	goto	l1416
  9126                           
  9127                           ;BVH2_Appl_Layer.c: 919: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
  9128  0255  1749               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
  9129                           
  9130                           ;BVH2_Appl_Layer.c: 923: if (ui8_ResetMatlab != 0) {
  9131  0256  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9132  0257  1903               	btfsc	3,2
  9133  0258  2A7C               	goto	l1416
  9134                           
  9135                           ;BVH2_Appl_Layer.c: 925: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 926: (UInt8)6;
  9136  0259  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9137  025A  39F0               	andlw	-16
  9138  025B  3806               	iorlw	6
  9139  025C  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9140                           
  9141                           ;BVH2_Appl_Layer.c: 927: Cb1_StateCnt = 0 ;
  9142  025D  0020               	movlb	0	; select bank0
  9143  025E  01CD               	clrf	_Cb1_StateCnt
  9144  025F  01CE               	clrf	_Cb1_StateCnt+1
  9145  0260                     l9306:	
  9146                           
  9147                           ;BVH2_Appl_Layer.c: 928: Cb1_RestartCounter = 0 ;
  9148  0260  0021               	movlb	1	; select bank1
  9149  0261  01CA               	clrf	_Cb1_RestartCounter^(0+128)
  9150                           
  9151                           ;BVH2_Appl_Layer.c: 929: };BVH2_Appl_Layer.c: 930: };BVH2_Appl_Layer.c: 931: };BVH2_Appl
      +                          _Layer.c: 932: }
  9152  0262  2A7C               	goto	l1416
  9153  0263                     l9308:	
  9154  0263  0021               	movlb	1	; select bank1
  9155  0264  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9156  0265  390F               	andlw	15
  9157                           
  9158                           ; Switch size 1, requested type "space"
  9159                           ; Number of cases is 7, Range of values is 1 to 7
  9160                           ; switch strategies available:
  9161                           ; Name         Instructions Cycles
  9162                           ; simple_byte           22    12 (average)
  9163                           ; direct_byte           23     9 (fixed)
  9164                           ; jumptable            263     9 (fixed)
  9165                           ;	Chosen strategy is simple_byte
  9166  0266  3A01               	xorlw	1	; case 1
  9167  0267  1903               	skipnz
  9168  0268  2A3F               	goto	l9290
  9169  0269  3A03               	xorlw	3	; case 2
  9170  026A  1903               	skipnz
  9171  026B  2A1C               	goto	l9268
  9172  026C  3A01               	xorlw	1	; case 3
  9173  026D  1903               	skipnz
  9174  026E  29EE               	goto	l9234
  9175  026F  3A07               	xorlw	7	; case 4
  9176  0270  1903               	skipnz
  9177  0271  2A02               	goto	l9252
  9178  0272  3A01               	xorlw	1	; case 5
  9179  0273  1903               	skipnz
  9180  0274  29FE               	goto	l9250
  9181  0275  3A03               	xorlw	3	; case 6
  9182  0276  1903               	skipnz
  9183  0277  29DD               	goto	l9222
  9184  0278  3A01               	xorlw	1	; case 7
  9185  0279  1903               	skipnz
  9186  027A  29F8               	goto	l9240
  9187  027B  2A53               	goto	l1435
  9188  027C                     l1416:	
  9189                           
  9190                           ;BVH2_Appl_Layer.c: 935: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||;BVH2_Appl_Layer.c: 936: Cb1_oShutoff || Cb44_oShutoff;
  9191  027C  0025               	movlb	5	; select bank5
  9192  027D  01AB               	clrf	_BVH2_Appl_Layer$1040^(0+640)
  9193  027E  0AAB               	incf	_BVH2_Appl_Layer$1040^(0+640),f
  9194  027F  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640),w
  9195  0280  1D03               	btfss	3,2
  9196  0281  2A91               	goto	l9322
  9197  0282  0022               	movlb	2	; select bank2
  9198  0283  0834               	movf	_Cb56_odPumpOff^(0+256),w
  9199  0284  1D03               	btfss	3,2
  9200  0285  2A91               	goto	l9322
  9201  0286  082E               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
  9202  0287  1D03               	btfss	3,2
  9203  0288  2A91               	goto	l9322
  9204  0289  083D               	movf	_Cb1_oShutoff^(0+256),w
  9205  028A  1D03               	btfss	3,2
  9206  028B  2A91               	goto	l9322
  9207  028C  0836               	movf	_Cb44_oShutoff^(0+256),w
  9208  028D  1D03               	btfss	3,2
  9209  028E  2A91               	goto	l9322
  9210  028F  0025               	movlb	5	; select bank5
  9211  0290  01AB               	clrf	_BVH2_Appl_Layer$1040^(0+640)
  9212  0291                     l9322:	
  9213  0291  0025               	movlb	5	; select bank5
  9214  0292  082B               	movf	_BVH2_Appl_Layer$1040^(0+640),w
  9215  0293  0020               	movlb	0	; select bank0
  9216  0294  00B7               	movwf	??_BVH2_Appl_Layer
  9217  0295  0837               	movf	??_BVH2_Appl_Layer,w
  9218  0296  0025               	movlb	5	; select bank5
  9219  0297  00BC               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640)
  9220                           
  9221                           ;BVH2_Appl_Layer.c: 939: Cb24_Reset = ui8_ResetMatlab != 0 ;
  9222  0298  0021               	movlb	1	; select bank1
  9223  0299  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9224  029A  1903               	btfsc	3,2
  9225  029B  2A9E               	goto	u7450
  9226  029C  3001               	movlw	1
  9227  029D  2A9F               	goto	u7460
  9228  029E                     u7450:	
  9229  029E  3000               	movlw	0
  9230  029F                     u7460:	
  9231  029F  0020               	movlb	0	; select bank0
  9232  02A0  00B7               	movwf	??_BVH2_Appl_Layer
  9233  02A1  0837               	movf	??_BVH2_Appl_Layer,w
  9234  02A2  0025               	movlb	5	; select bank5
  9235  02A3  00B4               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+640)
  9236                           
  9237                           ;BVH2_Appl_Layer.c: 944: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
  9238  02A4  0021               	movlb	1	; select bank1
  9239  02A5  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9240  02A6  2BE0               	goto	l1440
  9241                           
  9242                           ;BVH2_Appl_Layer.c: 950: if (Sb1_Logical_Operator1 || Cb24_Reset) {
  9243  02A7  0025               	movlb	5	; select bank5
  9244  02A8  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
  9245  02A9  1D03               	btfss	3,2
  9246  02AA  2AB8               	goto	l9348
  9247  02AB  0834               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+640),w
  9248  02AC  1D03               	btfss	3,2
  9249  02AD  2AB8               	goto	l9348
  9250  02AE  2BC9               	goto	l9464
  9251  02AF                     l9332:	
  9252                           ;BVH2_Appl_Layer.c: 954: case (UInt8)3: {
  9253                           
  9254                           ;BVH2_Appl_Layer.c: 953: switch (SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns) 
      +                          {
  9255                           
  9256                           
  9257                           ;BVH2_Appl_Layer.c: 955: Cb24_StateCnt = 0 ;
  9258  02AF  0020               	movlb	0	; select bank0
  9259  02B0  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9260  02B1  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9261                           
  9262                           ;BVH2_Appl_Layer.c: 956: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9263  02B2  30F8               	movlw	-8
  9264  02B3  0021               	movlb	1	; select bank1
  9265  02B4  2AB6               	goto	L26
  9266  02B5                     l9336:	
  9267                           ;BVH2_Appl_Layer.c: 958: };BVH2_Appl_Layer.c: 959: case (UInt8)2: {
  9268                           
  9269                           ;BVH2_Appl_Layer.c: 957: break;
  9270                           
  9271  02B5                     l9338:	
  9272                           ;BVH2_Appl_Layer.c: 962: };BVH2_Appl_Layer.c: 963: case (UInt8)1: {
  9273                           
  9274                           ;BVH2_Appl_Layer.c: 961: break;
  9275                           
  9276                           ;BVH2_Appl_Layer.c: 960: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9277                           
  9278  02B5                     l9340:	
  9279                           ;BVH2_Appl_Layer.c: 966: };BVH2_Appl_Layer.c: 967: case (UInt8)5: {
  9280                           
  9281                           ;BVH2_Appl_Layer.c: 965: break;
  9282                           
  9283                           ;BVH2_Appl_Layer.c: 964: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9284                           
  9285  02B5                     l9342:	
  9286                           ;BVH2_Appl_Layer.c: 970: };BVH2_Appl_Layer.c: 971: case (UInt8)6: {
  9287                           
  9288                           ;BVH2_Appl_Layer.c: 969: break;
  9289                           
  9290                           ;BVH2_Appl_Layer.c: 968: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9291                           
  9292  02B5                     l9344:	
  9293                           ;BVH2_Appl_Layer.c: 974: };BVH2_Appl_Layer.c: 975: case (UInt8)4: {
  9294                           
  9295                           ;BVH2_Appl_Layer.c: 973: break;
  9296                           
  9297                           ;BVH2_Appl_Layer.c: 972: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9298                           
  9299                           
  9300                           ;BVH2_Appl_Layer.c: 976: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9301  02B5  30F8               	movlw	-8
  9302  02B6                     L26:	
  9303  02B6  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9304                           
  9305                           ;BVH2_Appl_Layer.c: 978: };BVH2_Appl_Layer.c: 979: }
  9306                           
  9307                           ;BVH2_Appl_Layer.c: 977: break;
  9308  02B7  2ACE               	goto	l1446
  9309  02B8                     l9348:	
  9310  02B8  0021               	movlb	1	; select bank1
  9311  02B9  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9312  02BA  3907               	andlw	7
  9313                           
  9314                           ; Switch size 1, requested type "space"
  9315                           ; Number of cases is 6, Range of values is 1 to 6
  9316                           ; switch strategies available:
  9317                           ; Name         Instructions Cycles
  9318                           ; simple_byte           19    10 (average)
  9319                           ; direct_byte           21     9 (fixed)
  9320                           ; jumptable            263     9 (fixed)
  9321                           ;	Chosen strategy is simple_byte
  9322  02BB  3A01               	xorlw	1	; case 1
  9323  02BC  1903               	skipnz
  9324  02BD  2AB5               	goto	l9338
  9325  02BE  3A03               	xorlw	3	; case 2
  9326  02BF  1903               	skipnz
  9327  02C0  2AB5               	goto	l9336
  9328  02C1  3A01               	xorlw	1	; case 3
  9329  02C2  1903               	skipnz
  9330  02C3  2AAF               	goto	l9332
  9331  02C4  3A07               	xorlw	7	; case 4
  9332  02C5  1903               	skipnz
  9333  02C6  2AB5               	goto	l9344
  9334  02C7  3A01               	xorlw	1	; case 5
  9335  02C8  1903               	skipnz
  9336  02C9  2AB5               	goto	l9340
  9337  02CA  3A03               	xorlw	3	; case 6
  9338  02CB  1903               	skipnz
  9339  02CC  2AB5               	goto	l9342
  9340  02CD  2ACE               	goto	l1446
  9341  02CE                     l1446:	
  9342                           
  9343                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  9344  02CE  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9345  02CF  2BFD               	goto	L42
  9346  02D0                     l9352:	
  9347                           ;BVH2_Appl_Layer.c: 988: case (UInt8)3: {
  9348                           
  9349                           ;BVH2_Appl_Layer.c: 986: else {;BVH2_Appl_Layer.c: 987: switch (SIBFS_Motor_Stalled_b.Cb
      +                          25_Motor_sta__Statemachine_ns) {
  9350                           
  9351                           ;BVH2_Appl_Layer.c: 985: }
  9352                           
  9353                           ;BVH2_Appl_Layer.c: 984: Cb24_RestartCounter = 0 ;
  9354                           
  9355                           ;BVH2_Appl_Layer.c: 983: Cb24_oStalledAlarm = 0;
  9356                           
  9357                           ;BVH2_Appl_Layer.c: 982: Cb24_oMotorStalled = 0;
  9358                           
  9359                           ;BVH2_Appl_Layer.c: 981: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  9360                           
  9361                           
  9362                           ;BVH2_Appl_Layer.c: 991: if (Cb24_StateCnt) {
  9363  02D0  0020               	movlb	0	; select bank0
  9364  02D1  084B               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9365  02D2  044C               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9366  02D3  1903               	btfsc	3,2
  9367  02D4  2BC1               	goto	l9460
  9368                           
  9369                           ;BVH2_Appl_Layer.c: 995: Cb24_StateCnt = 0 ;
  9370  02D5  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9371  02D6  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9372  02D7  2B38               	goto	l9402
  9373  02D8                     l9360:	
  9374                           ;BVH2_Appl_Layer.c: 1006: };BVH2_Appl_Layer.c: 1007: case (UInt8)2: {
  9375                           
  9376                           ;BVH2_Appl_Layer.c: 1001: };BVH2_Appl_Layer.c: 1005: break;
  9377                           
  9378                           ;BVH2_Appl_Layer.c: 999: else {;BVH2_Appl_Layer.c: 1000: Cb24_StateCnt = Cb24_StateCnt +
      +                           1 ;
  9379                           
  9380                           ;BVH2_Appl_Layer.c: 998: }
  9381                           
  9382                           ;BVH2_Appl_Layer.c: 996: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int);BVH2_Appl_Layer.c: 997: (UInt8)2;
  9383                           
  9384                           
  9385                           ;BVH2_Appl_Layer.c: 1010: if (Cb24_StateCnt > 1000) {
  9386  02D8  3003               	movlw	3
  9387  02D9  0020               	movlb	0	; select bank0
  9388  02DA  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9389  02DB  30E9               	movlw	233
  9390  02DC  1903               	skipnz
  9391  02DD  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9392  02DE  1C03               	skipc
  9393  02DF  2AF0               	goto	l9372
  9394                           
  9395                           ;BVH2_Appl_Layer.c: 1013: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1014: (UInt8)5;
  9396  02E0  0021               	movlb	1	; select bank1
  9397  02E1  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9398  02E2  39F8               	andlw	-8
  9399  02E3  3805               	iorlw	5
  9400  02E4  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9401                           
  9402                           ;BVH2_Appl_Layer.c: 1015: Cb24_StateCnt = 0 ;
  9403  02E5  0020               	movlb	0	; select bank0
  9404  02E6  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9405  02E7  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9406                           
  9407                           ;BVH2_Appl_Layer.c: 1016: Cb24_BadCnt = 0 ;
  9408  02E8  0023               	movlb	3	; select bank3
  9409  02E9  01A6               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9410  02EA  01A7               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9411                           
  9412                           ;BVH2_Appl_Layer.c: 1017: Cb24_oMotorStalled = 0;
  9413  02EB  0021               	movlb	1	; select bank1
  9414  02EC  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9415                           
  9416                           ;BVH2_Appl_Layer.c: 1020: Cb24_oStalledAlarm = 0;
  9417  02ED  0022               	movlb	2	; select bank2
  9418  02EE  01B1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9419                           
  9420                           ;BVH2_Appl_Layer.c: 1021: }
  9421  02EF  2C03               	goto	l9486
  9422  02F0                     l9372:	
  9423                           
  9424                           ;BVH2_Appl_Layer.c: 1022: else {;BVH2_Appl_Layer.c: 1025: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  9425  02F0  3000               	movlw	0
  9426  02F1  0020               	movlb	0	; select bank0
  9427  02F2  0250               	subwf	_ui16_Speed_mat+1,w
  9428  02F3  3005               	movlw	5
  9429  02F4  1903               	skipnz
  9430  02F5  024F               	subwf	_ui16_Speed_mat,w
  9431  02F6  1C03               	skipc
  9432  02F7  2AFF               	goto	l9376
  9433  02F8  3001               	movlw	1
  9434  02F9  0250               	subwf	_ui16_Speed_mat+1,w
  9435  02FA  302D               	movlw	45
  9436  02FB  1903               	skipnz
  9437  02FC  024F               	subwf	_ui16_Speed_mat,w
  9438  02FD  1C03               	skipc
  9439  02FE  2BC2               	goto	L30
  9440  02FF                     l9376:	
  9441                           
  9442                           ;BVH2_Appl_Layer.c: 1028: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1029: (UInt8)1;
  9443  02FF  0021               	movlb	1	; select bank1
  9444  0300  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9445  0301  39F8               	andlw	-8
  9446  0302  3801               	iorlw	1
  9447  0303  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9448                           
  9449                           ;BVH2_Appl_Layer.c: 1030: Cb24_oStalledAlarm = 0;
  9450  0304  0022               	movlb	2	; select bank2
  9451  0305  01B1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9452                           
  9453                           ;BVH2_Appl_Layer.c: 1031: Cb24_StateCnt = 0 ;
  9454  0306  0020               	movlb	0	; select bank0
  9455  0307  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9456  0308  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9457                           
  9458                           ;BVH2_Appl_Layer.c: 1032: }
  9459  0309  2C03               	goto	l9486
  9460  030A                     l9384:	
  9461                           ;BVH2_Appl_Layer.c: 1041: };BVH2_Appl_Layer.c: 1042: case (UInt8)1: {
  9462                           
  9463                           ;BVH2_Appl_Layer.c: 1035: };BVH2_Appl_Layer.c: 1036: };BVH2_Appl_Layer.c: 1040: break;
  9464                           
  9465                           ;BVH2_Appl_Layer.c: 1033: else {;BVH2_Appl_Layer.c: 1034: Cb24_StateCnt = Cb24_StateCnt 
      +                          + 1 ;
  9466                           
  9467                           
  9468                           ;BVH2_Appl_Layer.c: 1045: if (Cb24_BadCnt > 100) {
  9469  030A  3000               	movlw	0
  9470  030B  0023               	movlb	3	; select bank3
  9471  030C  0227               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
  9472  030D  3065               	movlw	101
  9473  030E  1903               	skipnz
  9474  030F  0226               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
  9475  0310  1C03               	skipc
  9476  0311  2B21               	goto	l9394
  9477                           
  9478                           ;BVH2_Appl_Layer.c: 1048: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1049: (UInt8)4;
  9479  0312  0021               	movlb	1	; select bank1
  9480  0313  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9481  0314  39F8               	andlw	-8
  9482  0315  3804               	iorlw	4
  9483  0316  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9484                           
  9485                           ;BVH2_Appl_Layer.c: 1050: Cb24_StateCnt = 0 ;
  9486  0317  0020               	movlb	0	; select bank0
  9487  0318  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9488  0319  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9489                           
  9490                           ;BVH2_Appl_Layer.c: 1051: Cb24_oMotorStalled = 1;
  9491  031A  0021               	movlb	1	; select bank1
  9492  031B  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9493  031C  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9494                           
  9495                           ;BVH2_Appl_Layer.c: 1052: Cb24_oStalledAlarm = 1;
  9496  031D  0022               	movlb	2	; select bank2
  9497  031E  01B1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9498  031F  0AB1               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9499                           
  9500                           ;BVH2_Appl_Layer.c: 1053: }
  9501  0320  2C03               	goto	l9486
  9502  0321                     l9394:	
  9503                           
  9504                           ;BVH2_Appl_Layer.c: 1054: else {;BVH2_Appl_Layer.c: 1057: if ((ui16_Speed_mat >= 5) && (
      +                          ui16_Speed_mat <= 300)) {
  9505  0321  3000               	movlw	0
  9506  0322  0020               	movlb	0	; select bank0
  9507  0323  0250               	subwf	_ui16_Speed_mat+1,w
  9508  0324  3005               	movlw	5
  9509  0325  1903               	skipnz
  9510  0326  024F               	subwf	_ui16_Speed_mat,w
  9511  0327  1C03               	skipc
  9512  0328  2B30               	goto	l9400
  9513  0329  3001               	movlw	1
  9514  032A  0250               	subwf	_ui16_Speed_mat+1,w
  9515  032B  302D               	movlw	45
  9516  032C  1903               	skipnz
  9517  032D  024F               	subwf	_ui16_Speed_mat,w
  9518  032E  1C03               	btfss	3,0
  9519  032F  2B38               	goto	l9402
  9520  0330                     l9400:	
  9521                           ;BVH2_Appl_Layer.c: 1062: }
  9522                           
  9523                           ;BVH2_Appl_Layer.c: 1060: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1061: (UInt8)2;
  9524                           
  9525                           
  9526                           ;BVH2_Appl_Layer.c: 1063: else {;BVH2_Appl_Layer.c: 1064: Cb24_BadCnt = Cb24_BadCnt + 1 
      +                          ;
  9527  0330  0023               	movlb	3	; select bank3
  9528  0331  0826               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
  9529  0332  3E01               	addlw	1
  9530  0333  00A6               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9531  0334  3000               	movlw	0
  9532  0335  3D27               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
  9533  0336  00A7               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9534  0337  2BC1               	goto	l9460
  9535  0338                     l9402:	
  9536                           ;BVH2_Appl_Layer.c: 1072: };BVH2_Appl_Layer.c: 1073: case (UInt8)5: {
  9537                           
  9538                           ;BVH2_Appl_Layer.c: 1066: };BVH2_Appl_Layer.c: 1067: };BVH2_Appl_Layer.c: 1071: break;
  9539                           
  9540                           ;BVH2_Appl_Layer.c: 1065: Cb24_StateCnt = Cb24_StateCnt + 1 ;
  9541                           
  9542                           
  9543                           ;BVH2_Appl_Layer.c: 1080: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1081: (UInt8)2;
  9544  0338  0021               	movlb	1	; select bank1
  9545  0339  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9546  033A  39F8               	andlw	-8
  9547  033B  3802               	iorlw	2
  9548  033C  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9549                           
  9550                           ;BVH2_Appl_Layer.c: 1085: break;
  9551  033D  2C03               	goto	l9486
  9552  033E                     l9404:	
  9553                           ;BVH2_Appl_Layer.c: 1086: };BVH2_Appl_Layer.c: 1087: case (UInt8)6: {
  9554                           
  9555                           
  9556                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_StateCnt > 10) {
  9557  033E  3000               	movlw	0
  9558  033F  0020               	movlb	0	; select bank0
  9559  0340  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9560  0341  300B               	movlw	11
  9561  0342  1903               	skipnz
  9562  0343  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9563  0344  1C03               	skipc
  9564  0345  2B96               	goto	l9446
  9565                           
  9566                           ;BVH2_Appl_Layer.c: 1091: if (Cb24_RestartCounter == 10) {
  9567  0346  300A               	movlw	10
  9568  0347  0021               	movlb	1	; select bank1
  9569  0348  0645               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),w
  9570  0349  1D03               	btfss	3,2
  9571  034A  2B57               	goto	l9418
  9572                           
  9573                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9574  034B  30F8               	movlw	-8
  9575  034C  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9576                           
  9577                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  9578  034D  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9579                           
  9580                           ;BVH2_Appl_Layer.c: 1095: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
  9581  034E  1421               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  9582                           
  9583                           ;BVH2_Appl_Layer.c: 1096: Cb24_oStalledAlarm = 1;
  9584  034F  0022               	movlb	2	; select bank2
  9585  0350  01B1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9586  0351  0AB1               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9587                           
  9588                           ;BVH2_Appl_Layer.c: 1097: Cb24_oMotorStalled = 1;
  9589  0352  0021               	movlb	1	; select bank1
  9590  0353  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9591  0354  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9592                           
  9593                           ;BVH2_Appl_Layer.c: 1098: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9594  0355  3018               	movlw	24
  9595  0356  2B8E               	goto	L29
  9596  0357                     l9418:	
  9597                           ;BVH2_Appl_Layer.c: 1099: }
  9598                           
  9599                           
  9600                           ;BVH2_Appl_Layer.c: 1100: else {;BVH2_Appl_Layer.c: 1103: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  9601  0357  3000               	movlw	0
  9602  0358  0020               	movlb	0	; select bank0
  9603  0359  0250               	subwf	_ui16_Speed_mat+1,w
  9604  035A  3005               	movlw	5
  9605  035B  1903               	skipnz
  9606  035C  024F               	subwf	_ui16_Speed_mat,w
  9607  035D  1C03               	skipc
  9608  035E  2B66               	goto	l9422
  9609  035F  3001               	movlw	1
  9610  0360  0250               	subwf	_ui16_Speed_mat+1,w
  9611  0361  302D               	movlw	45
  9612  0362  1903               	skipnz
  9613  0363  024F               	subwf	_ui16_Speed_mat,w
  9614  0364  1C03               	skipc
  9615  0365  2B75               	goto	l9432
  9616  0366                     l9422:	
  9617                           
  9618                           ;BVH2_Appl_Layer.c: 1106: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1107: (UInt8)4;
  9619  0366  0021               	movlb	1	; select bank1
  9620  0367  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9621  0368  39F8               	andlw	-8
  9622  0369  3804               	iorlw	4
  9623  036A  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9624                           
  9625                           ;BVH2_Appl_Layer.c: 1108: Cb24_StateCnt = 0 ;
  9626  036B  0020               	movlb	0	; select bank0
  9627  036C  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9628  036D  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9629                           
  9630                           ;BVH2_Appl_Layer.c: 1109: Cb24_oMotorStalled = 1;
  9631  036E  0021               	movlb	1	; select bank1
  9632  036F  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9633  0370  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9634                           
  9635                           ;BVH2_Appl_Layer.c: 1110: Cb24_oStalledAlarm = 1;
  9636  0371  0022               	movlb	2	; select bank2
  9637  0372  01B1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9638  0373  0AB1               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9639  0374  2B8C               	goto	L43
  9640  0375                     l9432:	
  9641                           ;BVH2_Appl_Layer.c: 1112: }
  9642                           
  9643                           ;BVH2_Appl_Layer.c: 1111: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9644                           
  9645                           
  9646                           ;BVH2_Appl_Layer.c: 1113: else {;BVH2_Appl_Layer.c: 1114: if (Cb24_StateCnt > 200) {
  9647  0375  3000               	movlw	0
  9648  0376  0020               	movlb	0	; select bank0
  9649  0377  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9650  0378  30C9               	movlw	201
  9651  0379  1903               	skipnz
  9652  037A  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9653  037B  1C03               	skipc
  9654  037C  2B90               	goto	l9444
  9655                           
  9656                           ;BVH2_Appl_Layer.c: 1117: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1118: (UInt8)5;
  9657  037D  0021               	movlb	1	; select bank1
  9658  037E  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9659  037F  39F8               	andlw	-8
  9660  0380  3805               	iorlw	5
  9661  0381  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9662                           
  9663                           ;BVH2_Appl_Layer.c: 1119: Cb24_StateCnt = 0 ;
  9664  0382  0020               	movlb	0	; select bank0
  9665  0383  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9666  0384  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9667                           
  9668                           ;BVH2_Appl_Layer.c: 1120: Cb24_BadCnt = 0 ;
  9669  0385  0023               	movlb	3	; select bank3
  9670  0386  01A6               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9671  0387  01A7               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9672                           
  9673                           ;BVH2_Appl_Layer.c: 1121: Cb24_oMotorStalled = 0;
  9674  0388  0021               	movlb	1	; select bank1
  9675  0389  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9676                           
  9677                           ;BVH2_Appl_Layer.c: 1124: Cb24_oStalledAlarm = 0;
  9678  038A  0022               	movlb	2	; select bank2
  9679  038B  01B1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9680  038C                     L43:	
  9681                           
  9682                           ;BVH2_Appl_Layer.c: 1125: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9683  038C  3018               	movlw	24
  9684  038D  0021               	movlb	1	; select bank1
  9685  038E                     L29:	
  9686  038E  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9687                           
  9688                           ;BVH2_Appl_Layer.c: 1126: }
  9689  038F  2B99               	goto	l1481
  9690  0390                     l9444:	
  9691                           
  9692                           ;BVH2_Appl_Layer.c: 1127: else {;BVH2_Appl_Layer.c: 1128: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 1 ;
  9693  0390  0021               	movlb	1	; select bank1
  9694  0391  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9695  0392  39E7               	andlw	-25
  9696  0393  3808               	iorlw	8
  9697  0394  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9698                           
  9699                           ;BVH2_Appl_Layer.c: 1129: };BVH2_Appl_Layer.c: 1130: };BVH2_Appl_Layer.c: 1131: };BVH2_A
      +                          ppl_Layer.c: 1132: }
  9700  0395  2B99               	goto	l1481
  9701  0396                     l9446:	
  9702                           
  9703                           ;BVH2_Appl_Layer.c: 1133: else {;BVH2_Appl_Layer.c: 1134: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 0 ;
  9704  0396  30E7               	movlw	-25
  9705  0397  0021               	movlb	1	; select bank1
  9706  0398  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9707  0399                     l1481:	
  9708                           
  9709                           ;BVH2_Appl_Layer.c: 1135: };BVH2_Appl_Layer.c: 1136: if (SIBFS_Motor_Stalled_b.Cb24_glfl
      +                          ag <= 2) {
  9710  0399  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9711  039A  0020               	movlb	0	; select bank0
  9712  039B  00B7               	movwf	??_BVH2_Appl_Layer
  9713  039C  0CB7               	rrf	??_BVH2_Appl_Layer,f
  9714  039D  0C37               	rrf	??_BVH2_Appl_Layer,w
  9715  039E  3903               	andlw	3
  9716  039F  3A03               	xorlw	3
  9717  03A0  1903               	skipnz
  9718  03A1  2C03               	goto	l9486
  9719  03A2  2BC2               	goto	L30
  9720  03A3                     l9450:	
  9721                           ;BVH2_Appl_Layer.c: 1143: };BVH2_Appl_Layer.c: 1144: case (UInt8)4: {
  9722                           
  9723                           ;BVH2_Appl_Layer.c: 1138: };BVH2_Appl_Layer.c: 1142: break;
  9724                           
  9725                           ;BVH2_Appl_Layer.c: 1137: Cb24_StateCnt = Cb24_StateCnt + 1 ;
  9726                           
  9727                           
  9728                           ;BVH2_Appl_Layer.c: 1147: if (Cb24_StateCnt > 200) {
  9729  03A3  3000               	movlw	0
  9730  03A4  0020               	movlb	0	; select bank0
  9731  03A5  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9732  03A6  30C9               	movlw	201
  9733  03A7  1903               	skipnz
  9734  03A8  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9735  03A9  1C03               	skipc
  9736  03AA  2BC1               	goto	l9460
  9737                           
  9738                           ;BVH2_Appl_Layer.c: 1151: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1152: (UInt8)6;
  9739  03AB  0021               	movlb	1	; select bank1
  9740  03AC  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9741  03AD  39F8               	andlw	-8
  9742  03AE  3806               	iorlw	6
  9743  03AF  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9744                           
  9745                           ;BVH2_Appl_Layer.c: 1153: Cb24_StateCnt = 0 ;
  9746  03B0  0020               	movlb	0	; select bank0
  9747  03B1  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9748  03B2  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9749                           
  9750                           ;BVH2_Appl_Layer.c: 1154: Cb24_oMotorStalled = 0;
  9751  03B3  0021               	movlb	1	; select bank1
  9752  03B4  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9753                           
  9754                           ;BVH2_Appl_Layer.c: 1155: Cb24_oStalledAlarm = 1;
  9755  03B5  0022               	movlb	2	; select bank2
  9756  03B6  01B1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9757  03B7  0AB1               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9758                           
  9759                           ;BVH2_Appl_Layer.c: 1156: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
  9760  03B8  0021               	movlb	1	; select bank1
  9761  03B9  0845               	movf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),w
  9762  03BA  3E01               	addlw	1
  9763  03BB  0020               	movlb	0	; select bank0
  9764  03BC  00B7               	movwf	??_BVH2_Appl_Layer
  9765  03BD  0837               	movf	??_BVH2_Appl_Layer,w
  9766  03BE  0021               	movlb	1	; select bank1
  9767  03BF  00C5               	movwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128)
  9768                           
  9769                           ;BVH2_Appl_Layer.c: 1157: }
  9770  03C0  2C03               	goto	l9486
  9771  03C1                     l9460:	
  9772                           
  9773                           ;BVH2_Appl_Layer.c: 1158: else {;BVH2_Appl_Layer.c: 1159: Cb24_StateCnt = Cb24_StateCnt 
      +                          + 1 ;
  9774  03C1  0020               	movlb	0	; select bank0
  9775  03C2                     L30:	
  9776  03C2  084B               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9777  03C3  3E01               	addlw	1
  9778  03C4  00CB               	movwf	BVH2_Appl_Layer@Cb24_StateCnt
  9779  03C5  3000               	movlw	0
  9780  03C6  3D4C               	addwfc	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9781  03C7  00CC               	movwf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9782                           
  9783                           ;BVH2_Appl_Layer.c: 1165: };BVH2_Appl_Layer.c: 1166: }
  9784                           
  9785                           ;BVH2_Appl_Layer.c: 1160: };BVH2_Appl_Layer.c: 1164: break;
  9786  03C8  2C03               	goto	l9486
  9787  03C9                     l9464:	
  9788  03C9  0021               	movlb	1	; select bank1
  9789  03CA  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9790  03CB  3907               	andlw	7
  9791                           
  9792                           ; Switch size 1, requested type "space"
  9793                           ; Number of cases is 6, Range of values is 1 to 6
  9794                           ; switch strategies available:
  9795                           ; Name         Instructions Cycles
  9796                           ; simple_byte           19    10 (average)
  9797                           ; direct_byte           21     9 (fixed)
  9798                           ; jumptable            263     9 (fixed)
  9799                           ;	Chosen strategy is simple_byte
  9800  03CC  3A01               	xorlw	1	; case 1
  9801  03CD  1903               	skipnz
  9802  03CE  2B0A               	goto	l9384
  9803  03CF  3A03               	xorlw	3	; case 2
  9804  03D0  1903               	skipnz
  9805  03D1  2AD8               	goto	l9360
  9806  03D2  3A01               	xorlw	1	; case 3
  9807  03D3  1903               	skipnz
  9808  03D4  2AD0               	goto	l9352
  9809  03D5  3A07               	xorlw	7	; case 4
  9810  03D6  1903               	skipnz
  9811  03D7  2BA3               	goto	l9450
  9812  03D8  3A01               	xorlw	1	; case 5
  9813  03D9  1903               	skipnz
  9814  03DA  2B38               	goto	l9402
  9815  03DB  3A03               	xorlw	3	; case 6
  9816  03DC  1903               	skipnz
  9817  03DD  2B3E               	goto	l9404
  9818  03DE  2C03               	goto	l9486
  9819                           
  9820                           ;BVH2_Appl_Layer.c: 1167: };BVH2_Appl_Layer.c: 1170: }
  9821  03DF  2C03               	goto	l9486
  9822  03E0                     l1440:	
  9823                           
  9824                           ;BVH2_Appl_Layer.c: 1171: else {;BVH2_Appl_Layer.c: 1173: if (SIBFS_Motor_Stalled_b.Cb32
      +                          _default) {
  9825  03E0  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  9826  03E1  2BF4               	goto	l1487
  9827                           
  9828                           ;BVH2_Appl_Layer.c: 1178: if (!(Sb1_Logical_Operator1)) {
  9829  03E2  0025               	movlb	5	; select bank5
  9830  03E3  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
  9831  03E4  1D03               	btfss	3,2
  9832  03E5  2C03               	goto	l9486
  9833                           
  9834                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb32_default = 0;
  9835  03E6  0021               	movlb	1	; select bank1
  9836  03E7  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  9837                           
  9838                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
  9839  03E8  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9840                           
  9841                           ;BVH2_Appl_Layer.c: 1183: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
  9842  03E9  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9843  03EA  39F8               	andlw	-8
  9844  03EB  3803               	iorlw	3
  9845  03EC  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9846                           
  9847                           ;BVH2_Appl_Layer.c: 1184: Cb24_StateCnt = 0 ;
  9848  03ED  0020               	movlb	0	; select bank0
  9849  03EE  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9850  03EF  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9851                           
  9852                           ;BVH2_Appl_Layer.c: 1185: Cb24_BadCnt = 0 ;
  9853  03F0  0023               	movlb	3	; select bank3
  9854  03F1  01A6               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9855  03F2  01A7               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9856                           
  9857                           ;BVH2_Appl_Layer.c: 1186: };BVH2_Appl_Layer.c: 1189: }
  9858  03F3  2C03               	goto	l9486
  9859  03F4                     l1487:	
  9860                           
  9861                           ;BVH2_Appl_Layer.c: 1190: else {;BVH2_Appl_Layer.c: 1192: if (!(SIBFS_Motor_Stalled_b.Cb
      +                          33_Stop)) {
  9862  03F4  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  9863                           
  9864                           ;BVH2_Appl_Layer.c: 1194: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
  9865  03F5  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
  9866  03F6  2C03               	goto	l9486
  9867                           
  9868                           ;BVH2_Appl_Layer.c: 1195: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
  9869  03F7  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
  9870                           
  9871                           ;BVH2_Appl_Layer.c: 1198: if (Cb24_Reset) {
  9872  03F8  0025               	movlb	5	; select bank5
  9873  03F9  0834               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+640),w
  9874  03FA  1903               	btfsc	3,2
  9875  03FB  2C03               	goto	l9486
  9876                           
  9877                           ;BVH2_Appl_Layer.c: 1200: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  9878  03FC  0021               	movlb	1	; select bank1
  9879  03FD                     L42:	
  9880  03FD  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  9881                           
  9882                           ;BVH2_Appl_Layer.c: 1201: Cb24_oMotorStalled = 0;
  9883  03FE  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9884                           
  9885                           ;BVH2_Appl_Layer.c: 1202: Cb24_oStalledAlarm = 0;
  9886  03FF  0022               	movlb	2	; select bank2
  9887  0400  01B1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9888                           
  9889                           ;BVH2_Appl_Layer.c: 1203: Cb24_RestartCounter = 0 ;
  9890  0401  0021               	movlb	1	; select bank1
  9891  0402  01C5               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128)
  9892  0403                     l9486:	
  9893                           
  9894                           ;BVH2_Appl_Layer.c: 1204: };BVH2_Appl_Layer.c: 1205: };BVH2_Appl_Layer.c: 1206: };BVH2_A
      +                          ppl_Layer.c: 1207: };BVH2_Appl_Layer.c: 1208: };BVH2_Appl_Layer.c: 1213: bool_StalledMot
      +                          orStop = Cb24_oMotorStalled;
  9895  0403  0021               	movlb	1	; select bank1
  9896  0404  083E               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),w
  9897  0405  0020               	movlb	0	; select bank0
  9898  0406  00B7               	movwf	??_BVH2_Appl_Layer
  9899  0407  0837               	movf	??_BVH2_Appl_Layer,w
  9900  0408  0023               	movlb	3	; select bank3
  9901  0409  00DD               	movwf	_bool_StalledMotorStop^(0+384)
  9902                           
  9903                           ;BVH2_Appl_Layer.c: 1214: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
  9904  040A  0025               	movlb	5	; select bank5
  9905  040B  01AC               	clrf	_BVH2_Appl_Layer$1041^(0+640)
  9906  040C  0AAC               	incf	_BVH2_Appl_Layer$1041^(0+640),f
  9907  040D  0022               	movlb	2	; select bank2
  9908  040E  0839               	movf	_Cb34_odFixedValueSel^(0+256),w
  9909  040F  1D03               	btfss	3,2
  9910  0410  2C17               	goto	l9496
  9911  0411  0021               	movlb	1	; select bank1
  9912  0412  0846               	movf	_Cb56_odFixedValueSel^(0+128),w
  9913  0413  1D03               	btfss	3,2
  9914  0414  2C17               	goto	l9496
  9915  0415  0025               	movlb	5	; select bank5
  9916  0416  01AC               	clrf	_BVH2_Appl_Layer$1041^(0+640)
  9917  0417                     l9496:	
  9918  0417  0025               	movlb	5	; select bank5
  9919  0418  082C               	movf	_BVH2_Appl_Layer$1041^(0+640),w
  9920  0419  0020               	movlb	0	; select bank0
  9921  041A  00B7               	movwf	??_BVH2_Appl_Layer
  9922  041B  0837               	movf	??_BVH2_Appl_Layer,w
  9923  041C  0025               	movlb	5	; select bank5
  9924  041D  00B6               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640)
  9925                           
  9926                           ;BVH2_Appl_Layer.c: 1218: if (bool_start_demand_mat) {
  9927  041E  0022               	movlb	2	; select bank2
  9928  041F  0866               	movf	_bool_start_demand_mat^(0+256),w
  9929  0420  1903               	btfsc	3,2
  9930  0421  2C29               	goto	l9502
  9931                           
  9932                           ;BVH2_Appl_Layer.c: 1219: Sb2_Switch5 = ui8_fixed_start_speed_mat;
  9933  0422  0023               	movlb	3	; select bank3
  9934  0423  0845               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
  9935  0424  0025               	movlb	5	; select bank5
  9936  0425  00B9               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
  9937  0426  0023               	movlb	3	; select bank3
  9938  0427  0844               	movf	_ui8_fixed_start_speed_mat^(0+384),w
  9939  0428  2C45               	goto	L33
  9940  0429                     l9502:	
  9941                           ;BVH2_Appl_Layer.c: 1220: }
  9942                           
  9943                           
  9944                           ;BVH2_Appl_Layer.c: 1221: else {;BVH2_Appl_Layer.c: 1224: if (Cb34_odFixedLowValueSel) {
  9945  0429  0022               	movlb	2	; select bank2
  9946  042A  083A               	movf	_Cb34_odFixedLowValueSel^(0+256),w
  9947  042B  1903               	btfsc	3,2
  9948  042C  2C34               	goto	l9506
  9949                           
  9950                           ;BVH2_Appl_Layer.c: 1225: Sb2_Switch5 = ui16_Speed_demand_mat_min;
  9951  042D  0023               	movlb	3	; select bank3
  9952  042E  0833               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
  9953  042F  0025               	movlb	5	; select bank5
  9954  0430  00B9               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
  9955  0431  0023               	movlb	3	; select bank3
  9956  0432  0832               	movf	_ui16_Speed_demand_mat_min^(0+384),w
  9957  0433  2C45               	goto	L33
  9958  0434                     l9506:	
  9959                           ;BVH2_Appl_Layer.c: 1226: }
  9960                           
  9961                           
  9962                           ;BVH2_Appl_Layer.c: 1227: else {;BVH2_Appl_Layer.c: 1230: if (Sb1_Logical_Operator5) {
  9963  0434  0025               	movlb	5	; select bank5
  9964  0435  0836               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640),w
  9965  0436  1903               	btfsc	3,2
  9966  0437  2C3F               	goto	l9510
  9967                           
  9968                           ;BVH2_Appl_Layer.c: 1231: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
  9969  0438  0023               	movlb	3	; select bank3
  9970  0439  0835               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
  9971  043A  0025               	movlb	5	; select bank5
  9972  043B  00B9               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
  9973  043C  0023               	movlb	3	; select bank3
  9974  043D  0834               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
  9975  043E  2C45               	goto	L33
  9976  043F                     l9510:	
  9977                           ;BVH2_Appl_Layer.c: 1232: }
  9978                           
  9979                           
  9980                           ;BVH2_Appl_Layer.c: 1233: else {;BVH2_Appl_Layer.c: 1234: Sb2_Switch5 = ui16_Speed_deman
      +                          d_mat;
  9981  043F  0023               	movlb	3	; select bank3
  9982  0440  0837               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
  9983  0441  0025               	movlb	5	; select bank5
  9984  0442  00B9               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
  9985  0443  0023               	movlb	3	; select bank3
  9986  0444  0836               	movf	_ui16_Speed_demand_mat^(0+384),w
  9987  0445                     L33:	
  9988  0445  0025               	movlb	5	; select bank5
  9989  0446  00B8               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+640)
  9990                           
  9991                           ;BVH2_Appl_Layer.c: 1235: };BVH2_Appl_Layer.c: 1236: };BVH2_Appl_Layer.c: 1237: };BVH2_A
      +                          ppl_Layer.c: 1240: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
  9992  0447  0938               	comf	BVH2_Appl_Layer@Sb2_Switch5^(0+640),w
  9993  0448  0020               	movlb	0	; select bank0
  9994  0449  00B7               	movwf	??_BVH2_Appl_Layer
  9995  044A  0025               	movlb	5	; select bank5
  9996  044B  0939               	comf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640),w
  9997  044C  0020               	movlb	0	; select bank0
  9998  044D  00B8               	movwf	??_BVH2_Appl_Layer+1
  9999  044E  0AB7               	incf	??_BVH2_Appl_Layer,f
 10000  044F  1903               	skipnz
 10001  0450  0AB8               	incf	??_BVH2_Appl_Layer+1,f
 10002  0451  084F               	movf	_ui16_Speed_mat,w
 10003  0452  0737               	addwf	??_BVH2_Appl_Layer,w
 10004  0453  0025               	movlb	5	; select bank5
 10005  0454  00B0               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+640)
 10006  0455  0020               	movlb	0	; select bank0
 10007  0456  0850               	movf	_ui16_Speed_mat+1,w
 10008  0457  3D38               	addwfc	??_BVH2_Appl_Layer+1,w
 10009  0458  0025               	movlb	5	; select bank5
 10010  0459  00B1               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640)
 10011                           
 10012                           ;BVH2_Appl_Layer.c: 1245: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 10013  045A  0021               	movlb	1	; select bank1
 10014  045B  18C1               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10015  045C  2CB2               	goto	l9556
 10016                           
 10017                           ;BVH2_Appl_Layer.c: 1265: else {;BVH2_Appl_Layer.c: 1267: if (SIBFS_Dry_Running_b.Cb16_D
      +                          ryRunning) {
 10018                           
 10019                           ;BVH2_Appl_Layer.c: 1261: };BVH2_Appl_Layer.c: 1264: }
 10020  045D  1D41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10021  045E  2CAA               	goto	l1504
 10022                           
 10023                           ;BVH2_Appl_Layer.c: 1271: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 10024  045F  1DC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10025                           
 10026                           ;BVH2_Appl_Layer.c: 1273: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 10027  0460  1E41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10028  0461  2CB2               	goto	l9556
 10029                           
 10030                           ;BVH2_Appl_Layer.c: 1280: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >;BVH2_Appl_Layer.c: 1281: 400) || (ui16_Speed_mat < 80)) {
 10031  0462  0024               	movlb	4	; select bank4
 10032  0463  0868               	movf	_ui16_dryRun_Thresh^(0+512),w
 10033  0464  3E05               	addlw	5
 10034  0465  0020               	movlb	0	; select bank0
 10035  0466  00B7               	movwf	??_BVH2_Appl_Layer
 10036  0467  3000               	movlw	0
 10037  0468  0024               	movlb	4	; select bank4
 10038  0469  3D69               	addwfc	(_ui16_dryRun_Thresh+1)^(0+512),w
 10039  046A  0020               	movlb	0	; select bank0
 10040  046B  00B8               	movwf	??_BVH2_Appl_Layer+1
 10041  046C  0021               	movlb	1	; select bank1
 10042  046D  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10043  046E  0020               	movlb	0	; select bank0
 10044  046F  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10045  0470  1D03               	skipz
 10046  0471  2C76               	goto	u7785
 10047  0472  0021               	movlb	1	; select bank1
 10048  0473  082C               	movf	_ui16_mat_Current^(0+128),w
 10049  0474  0020               	movlb	0	; select bank0
 10050  0475  0237               	subwf	??_BVH2_Appl_Layer,w
 10051  0476                     u7785:	
 10052  0476  1C03               	skipc
 10053  0477  2C86               	goto	l1509
 10054  0478  3001               	movlw	1
 10055  0479  0250               	subwf	_ui16_Speed_mat+1,w
 10056  047A  3091               	movlw	145
 10057  047B  1903               	skipnz
 10058  047C  024F               	subwf	_ui16_Speed_mat,w
 10059  047D  1803               	skipnc
 10060  047E  2C86               	goto	l1509
 10061  047F  3000               	movlw	0
 10062  0480  0250               	subwf	_ui16_Speed_mat+1,w
 10063  0481  3050               	movlw	80
 10064  0482  1903               	skipnz
 10065  0483  024F               	subwf	_ui16_Speed_mat,w
 10066  0484  1803               	skipnc
 10067  0485  2C88               	goto	l9534
 10068  0486                     l1509:	
 10069                           
 10070                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10071  0486  0021               	movlb	1	; select bank1
 10072  0487  2C91               	goto	L50
 10073  0488                     l9534:	
 10074                           ;BVH2_Appl_Layer.c: 1287: }
 10075                           
 10076                           ;BVH2_Appl_Layer.c: 1286: Cb14_oDryRunAlarm = 0;
 10077                           
 10078                           ;BVH2_Appl_Layer.c: 1285: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10079                           
 10080                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 10081                           
 10082                           
 10083                           ;BVH2_Appl_Layer.c: 1288: else {;BVH2_Appl_Layer.c: 1289: if ((ui8_PWM_dc_mat < 20) && (
      +                          ui8_PWM_dc_mat > 4)) {
 10084  0488  3014               	movlw	20
 10085  0489  0021               	movlb	1	; select bank1
 10086  048A  0251               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10087  048B  1803               	skipnc
 10088  048C  2C94               	goto	l9542
 10089  048D  3005               	movlw	5
 10090  048E  0251               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10091  048F  1C03               	skipc
 10092  0490  2C94               	goto	l9542
 10093  0491                     L50:	
 10094                           
 10095                           ;BVH2_Appl_Layer.c: 1291: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10096  0491  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10097                           
 10098                           ;BVH2_Appl_Layer.c: 1292: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 10099  0492  1141               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10100  0493  2CB0               	goto	l9552
 10101  0494                     l9542:	
 10102                           ;BVH2_Appl_Layer.c: 1295: }
 10103                           
 10104                           ;BVH2_Appl_Layer.c: 1294: Cb14_oDryRunAlarm = 0;
 10105                           
 10106                           ;BVH2_Appl_Layer.c: 1293: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10107                           
 10108                           
 10109                           ;BVH2_Appl_Layer.c: 1296: else {;BVH2_Appl_Layer.c: 1297: if (Cb14_StateCnt > 2000) {
 10110  0494  3007               	movlw	7
 10111  0495  0023               	movlb	3	; select bank3
 10112  0496  0229               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 10113  0497  30D1               	movlw	209
 10114  0498  1903               	skipnz
 10115  0499  0228               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 10116  049A  1C03               	skipc
 10117  049B  2CA2               	goto	l9546
 10118                           
 10119                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10120  049C  0021               	movlb	1	; select bank1
 10121  049D  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10122                           
 10123                           ;BVH2_Appl_Layer.c: 1300: SIBFS_Dry_Running_b.Cb17_redState = 1;
 10124  049E  15C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10125                           
 10126                           ;BVH2_Appl_Layer.c: 1301: Cb14_oDryRunAlarm = 1;
 10127  049F  01BF               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 10128  04A0  0ABF               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 10129                           
 10130                           ;BVH2_Appl_Layer.c: 1302: }
 10131  04A1  2CB2               	goto	l9556
 10132  04A2                     l9546:	
 10133                           
 10134                           ;BVH2_Appl_Layer.c: 1303: else {;BVH2_Appl_Layer.c: 1304: Cb14_StateCnt = Cb14_StateCnt 
      +                          + 1 ;
 10135  04A2  0023               	movlb	3	; select bank3
 10136  04A3  0828               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 10137  04A4  3E01               	addlw	1
 10138  04A5  00A8               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384)
 10139  04A6  3000               	movlw	0
 10140  04A7  3D29               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 10141  04A8  00A9               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384)
 10142                           
 10143                           ;BVH2_Appl_Layer.c: 1305: };BVH2_Appl_Layer.c: 1306: };BVH2_Appl_Layer.c: 1307: };BVH2_A
      +                          ppl_Layer.c: 1310: };BVH2_Appl_Layer.c: 1311: };BVH2_Appl_Layer.c: 1314: }
 10144  04A9  2CB2               	goto	l9556
 10145  04AA                     l1504:	
 10146                           
 10147                           ;BVH2_Appl_Layer.c: 1315: else {;BVH2_Appl_Layer.c: 1317: if (!(SIBFS_Dry_Running_b.Cb14
      +                          _Dry_Running)) {
 10148  04AA  1841               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 10149  04AB  2CB2               	goto	l9556
 10150                           
 10151                           ;BVH2_Appl_Layer.c: 1318: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
 10152  04AC  1441               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 10153                           
 10154                           ;BVH2_Appl_Layer.c: 1321: if (ui8_ResetMatlab == 1) {
 10155  04AD  036F               	decf	_ui8_ResetMatlab^(0+128),w
 10156  04AE  1D03               	btfss	3,2
 10157  04AF  2CB2               	goto	l9556
 10158  04B0                     l9552:	
 10159                           
 10160                           ;BVH2_Appl_Layer.c: 1323: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10161  04B0  14C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10162                           
 10163                           ;BVH2_Appl_Layer.c: 1324: Cb14_oDryRunAlarm = 0;
 10164  04B1  01BF               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 10165  04B2                     l9556:	
 10166                           
 10167                           ;BVH2_Appl_Layer.c: 1325: };BVH2_Appl_Layer.c: 1326: };BVH2_Appl_Layer.c: 1327: };BVH2_A
      +                          ppl_Layer.c: 1328: };BVH2_Appl_Layer.c: 1335: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenSta
      +                          te) {
 10168  04B2  0020               	movlb	0	; select bank0
 10169  04B3  1CD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10170  04B4  2CBD               	goto	l1518
 10171                           
 10172                           ;BVH2_Appl_Layer.c: 1340: if (Cb14_oDryRunAlarm) {
 10173  04B5  0021               	movlb	1	; select bank1
 10174  04B6  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10175  04B7  1903               	btfsc	3,2
 10176  04B8  2D0F               	goto	l9604
 10177                           
 10178                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 10179  04B9  0020               	movlb	0	; select bank0
 10180  04BA  10D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10181                           
 10182                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
 10183  04BB  1555               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10184  04BC  2CEF               	goto	L44
 10185  04BD                     l1518:	
 10186                           ;BVH2_Appl_Layer.c: 1349: };BVH2_Appl_Layer.c: 1352: }
 10187                           
 10188                           ;BVH2_Appl_Layer.c: 1348: Cb19_oDryRun55 = 0;
 10189                           
 10190                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun66 = 1;
 10191                           
 10192                           ;BVH2_Appl_Layer.c: 1346: Cb19_Counter = 0 ;
 10193                           
 10194                           ;BVH2_Appl_Layer.c: 1345: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 10195                           
 10196                           
 10197                           ;BVH2_Appl_Layer.c: 1353: else {;BVH2_Appl_Layer.c: 1355: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b21_DryRunningAlarm) {
 10198  04BD  1D55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10199  04BE  2D00               	goto	l1521
 10200                           
 10201                           ;BVH2_Appl_Layer.c: 1360: if (!(Cb14_oDryRunAlarm)) {
 10202  04BF  0021               	movlb	1	; select bank1
 10203  04C0  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10204  04C1  1D03               	btfss	3,2
 10205  04C2  2CCD               	goto	l1522
 10206                           
 10207                           ;BVH2_Appl_Layer.c: 1365: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 10208  04C3  0020               	movlb	0	; select bank0
 10209  04C4  1DD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10210  04C5  2CC8               	goto	l1523
 10211                           
 10212                           ;BVH2_Appl_Layer.c: 1366: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 10213  04C6  11D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10214                           
 10215                           ;BVH2_Appl_Layer.c: 1367: }
 10216  04C7  2CCB               	goto	l1524
 10217  04C8                     l1523:	
 10218                           
 10219                           ;BVH2_Appl_Layer.c: 1368: else {;BVH2_Appl_Layer.c: 1370: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
 10220  04C8  1E55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10221  04C9  2CCB               	goto	l1524
 10222                           
 10223                           ;BVH2_Appl_Layer.c: 1371: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 10224  04CA  1255               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10225  04CB                     l1524:	
 10226                           
 10227                           ;BVH2_Appl_Layer.c: 1372: };BVH2_Appl_Layer.c: 1373: };BVH2_Appl_Layer.c: 1374: SIBFS_Dr
      +                          y_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 10228  04CB  1155               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10229  04CC  2D08               	goto	L45
 10230  04CD                     l1522:	
 10231                           ;BVH2_Appl_Layer.c: 1379: }
 10232                           
 10233                           ;BVH2_Appl_Layer.c: 1378: Cb19_Counter = 0 ;
 10234                           
 10235                           ;BVH2_Appl_Layer.c: 1377: Cb19_oDryRun66 = 0;
 10236                           
 10237                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun55 = 0;
 10238                           
 10239                           ;BVH2_Appl_Layer.c: 1375: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 10240                           
 10241                           
 10242                           ;BVH2_Appl_Layer.c: 1380: else {;BVH2_Appl_Layer.c: 1382: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b22_DryRun66) {
 10243  04CD  0020               	movlb	0	; select bank0
 10244  04CE  1DD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10245  04CF  2CE3               	goto	l1527
 10246                           
 10247                           ;BVH2_Appl_Layer.c: 1385: if (Cb19_Counter > 400) {
 10248  04D0  3001               	movlw	1
 10249  04D1  0021               	movlb	1	; select bank1
 10250  04D2  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10251  04D3  3091               	movlw	145
 10252  04D4  1903               	skipnz
 10253  04D5  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10254  04D6  1C03               	skipc
 10255  04D7  2CF8               	goto	l9594
 10256                           
 10257                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 10258  04D8  0020               	movlb	0	; select bank0
 10259  04D9  11D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10260                           
 10261                           ;BVH2_Appl_Layer.c: 1389: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
 10262  04DA  1655               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10263                           
 10264                           ;BVH2_Appl_Layer.c: 1390: Cb19_Counter = 0 ;
 10265  04DB  0021               	movlb	1	; select bank1
 10266  04DC  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10267  04DD  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10268                           
 10269                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun66 = 0;
 10270  04DE  0022               	movlb	2	; select bank2
 10271  04DF  01B2               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10272                           
 10273                           ;BVH2_Appl_Layer.c: 1392: Cb19_oDryRun55 = 1;
 10274  04E0  01B3               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10275  04E1  0AB3               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 10276  04E2  2D0F               	goto	l9604
 10277  04E3                     l1527:	
 10278                           ;BVH2_Appl_Layer.c: 1396: };BVH2_Appl_Layer.c: 1400: }
 10279                           
 10280                           ;BVH2_Appl_Layer.c: 1394: else {;BVH2_Appl_Layer.c: 1395: Cb19_Counter = Cb19_Counter + 
      +                          1 ;
 10281                           
 10282                           ;BVH2_Appl_Layer.c: 1393: }
 10283                           
 10284                           
 10285                           ;BVH2_Appl_Layer.c: 1401: else {;BVH2_Appl_Layer.c: 1403: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
 10286  04E3  1E55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10287  04E4  2D0F               	goto	l9604
 10288                           
 10289                           ;BVH2_Appl_Layer.c: 1406: if (Cb19_Counter > 400) {
 10290  04E5  3001               	movlw	1
 10291  04E6  0021               	movlb	1	; select bank1
 10292  04E7  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10293  04E8  3091               	movlw	145
 10294  04E9  1903               	skipnz
 10295  04EA  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10296  04EB  1C03               	skipc
 10297  04EC  2CF8               	goto	l9594
 10298                           
 10299                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 10300  04ED  0020               	movlb	0	; select bank0
 10301  04EE  1255               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10302  04EF                     L44:	
 10303                           
 10304                           ;BVH2_Appl_Layer.c: 1410: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 10305  04EF  15D5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10306                           
 10307                           ;BVH2_Appl_Layer.c: 1411: Cb19_Counter = 0 ;
 10308  04F0  0021               	movlb	1	; select bank1
 10309  04F1  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10310  04F2  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10311                           
 10312                           ;BVH2_Appl_Layer.c: 1412: Cb19_oDryRun66 = 1;
 10313  04F3  0022               	movlb	2	; select bank2
 10314  04F4  01B2               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10315  04F5  0AB2               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),f
 10316                           
 10317                           ;BVH2_Appl_Layer.c: 1413: Cb19_oDryRun55 = 0;
 10318  04F6  01B3               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10319                           
 10320                           ;BVH2_Appl_Layer.c: 1414: }
 10321  04F7  2D0F               	goto	l9604
 10322  04F8                     l9594:	
 10323                           
 10324                           ;BVH2_Appl_Layer.c: 1415: else {;BVH2_Appl_Layer.c: 1416: Cb19_Counter = Cb19_Counter + 
      +                          1 ;
 10325  04F8  0021               	movlb	1	; select bank1
 10326  04F9  0822               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10327  04FA  3E01               	addlw	1
 10328  04FB  00A2               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10329  04FC  3000               	movlw	0
 10330  04FD  3D23               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10331  04FE  00A3               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10332                           
 10333                           ;BVH2_Appl_Layer.c: 1417: };BVH2_Appl_Layer.c: 1421: };BVH2_Appl_Layer.c: 1422: };BVH2_A
      +                          ppl_Layer.c: 1423: };BVH2_Appl_Layer.c: 1426: }
 10334  04FF  2D0F               	goto	l9604
 10335  0500                     l1521:	
 10336                           
 10337                           ;BVH2_Appl_Layer.c: 1427: else {;BVH2_Appl_Layer.c: 1429: if (!(SIBFS_Dry_RunningAlarm_b
      +                          .Cb19_Dry_RunningAlarm)) {
 10338  0500  1855               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 10339  0501  2D0F               	goto	l9604
 10340                           
 10341                           ;BVH2_Appl_Layer.c: 1430: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 10342  0502  1455               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 10343                           
 10344                           ;BVH2_Appl_Layer.c: 1434: if (!(Cb14_oDryRunAlarm)) {
 10345  0503  0021               	movlb	1	; select bank1
 10346  0504  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10347  0505  1D03               	btfss	3,2
 10348  0506  2D0F               	goto	l9604
 10349                           
 10350                           ;BVH2_Appl_Layer.c: 1436: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 10351  0507  0020               	movlb	0	; select bank0
 10352  0508                     L45:	
 10353  0508  14D5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10354                           
 10355                           ;BVH2_Appl_Layer.c: 1437: Cb19_oDryRun55 = 0;
 10356  0509  0022               	movlb	2	; select bank2
 10357  050A  01B3               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10358                           
 10359                           ;BVH2_Appl_Layer.c: 1438: Cb19_oDryRun66 = 0;
 10360  050B  01B2               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10361                           
 10362                           ;BVH2_Appl_Layer.c: 1439: Cb19_Counter = 0 ;
 10363  050C  0021               	movlb	1	; select bank1
 10364  050D  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10365  050E  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10366  050F                     l9604:	
 10367                           
 10368                           ;BVH2_Appl_Layer.c: 1440: };BVH2_Appl_Layer.c: 1441: };BVH2_Appl_Layer.c: 1442: };BVH2_A
      +                          ppl_Layer.c: 1443: };BVH2_Appl_Layer.c: 1448: bool_DryRunningAlarm = Cb19_oDryRun66;
 10369  050F  0022               	movlb	2	; select bank2
 10370  0510  0832               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 10371  0511  0020               	movlb	0	; select bank0
 10372  0512  00B7               	movwf	??_BVH2_Appl_Layer
 10373  0513  0837               	movf	??_BVH2_Appl_Layer,w
 10374  0514  0021               	movlb	1	; select bank1
 10375  0515  00D7               	movwf	_bool_DryRunningAlarm^(0+128)
 10376                           
 10377                           ;BVH2_Appl_Layer.c: 1451: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 10378  0516  0022               	movlb	2	; select bank2
 10379  0517  0830               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 10380  0518  0020               	movlb	0	; select bank0
 10381  0519  00B7               	movwf	??_BVH2_Appl_Layer
 10382  051A  0837               	movf	??_BVH2_Appl_Layer,w
 10383  051B  0021               	movlb	1	; select bank1
 10384  051C  00D8               	movwf	_bool_CPU_TempAlarm^(0+128)
 10385                           
 10386                           ;BVH2_Appl_Layer.c: 1456: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 10387  051D  1C42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10388  051E  2D39               	goto	l1537
 10389                           
 10390                           ;BVH2_Appl_Layer.c: 1461: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 10391  051F  0023               	movlb	3	; select bank3
 10392  0520  086E               	movf	_ui16_Current_Thresh^(0+384),w
 10393  0521  3EFE               	addlw	254
 10394  0522  0020               	movlb	0	; select bank0
 10395  0523  00B7               	movwf	??_BVH2_Appl_Layer
 10396  0524  30FF               	movlw	255
 10397  0525  0023               	movlb	3	; select bank3
 10398  0526  3D6F               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10399  0527  0020               	movlb	0	; select bank0
 10400  0528  00B8               	movwf	??_BVH2_Appl_Layer+1
 10401  0529  0021               	movlb	1	; select bank1
 10402  052A  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10403  052B  0020               	movlb	0	; select bank0
 10404  052C  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10405  052D  1D03               	skipz
 10406  052E  2D33               	goto	u7995
 10407  052F  0021               	movlb	1	; select bank1
 10408  0530  082C               	movf	_ui16_mat_Current^(0+128),w
 10409  0531  0020               	movlb	0	; select bank0
 10410  0532  0237               	subwf	??_BVH2_Appl_Layer,w
 10411  0533                     u7995:	
 10412  0533  1803               	skipnc
 10413  0534  2DAC               	goto	l9654
 10414                           
 10415                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 10416  0535  0021               	movlb	1	; select bank1
 10417  0536  1042               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10418                           
 10419                           ;BVH2_Appl_Layer.c: 1465: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
 10420  0537  1542               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10421  0538  2DA1               	goto	l9644
 10422  0539                     l1537:	
 10423                           ;BVH2_Appl_Layer.c: 1467: };BVH2_Appl_Layer.c: 1470: }
 10424                           
 10425                           ;BVH2_Appl_Layer.c: 1466: Cb9_StateCnt = 0 ;
 10426                           
 10427                           
 10428                           ;BVH2_Appl_Layer.c: 1471: else {;BVH2_Appl_Layer.c: 1473: if (SIBFS_Current_Analysis_low
      +                          _b.Cb11_Wait) {
 10429  0539  1CC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10430  053A  2D5B               	goto	l1540
 10431                           
 10432                           ;BVH2_Appl_Layer.c: 1478: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 10433  053B  0023               	movlb	3	; select bank3
 10434  053C  086E               	movf	_ui16_Current_Thresh^(0+384),w
 10435  053D  3EFE               	addlw	254
 10436  053E  0020               	movlb	0	; select bank0
 10437  053F  00B7               	movwf	??_BVH2_Appl_Layer
 10438  0540  30FF               	movlw	255
 10439  0541  0023               	movlb	3	; select bank3
 10440  0542  3D6F               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10441  0543  0020               	movlb	0	; select bank0
 10442  0544  00B8               	movwf	??_BVH2_Appl_Layer+1
 10443  0545  0021               	movlb	1	; select bank1
 10444  0546  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10445  0547  0020               	movlb	0	; select bank0
 10446  0548  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10447  0549  1D03               	skipz
 10448  054A  2D4F               	goto	u8015
 10449  054B  0021               	movlb	1	; select bank1
 10450  054C  082C               	movf	_ui16_mat_Current^(0+128),w
 10451  054D  0020               	movlb	0	; select bank0
 10452  054E  0237               	subwf	??_BVH2_Appl_Layer,w
 10453  054F                     u8015:	
 10454  054F  1803               	skipnc
 10455  0550  2D54               	goto	l9620
 10456                           
 10457                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 10458  0551  0021               	movlb	1	; select bank1
 10459  0552  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10460  0553  2D7A               	goto	L34
 10461  0554                     l9620:	
 10462                           ;BVH2_Appl_Layer.c: 1483: }
 10463                           
 10464                           ;BVH2_Appl_Layer.c: 1482: Cb9_oCurrentAlarm = 1;
 10465                           
 10466                           ;BVH2_Appl_Layer.c: 1481: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 10467                           
 10468                           
 10469                           ;BVH2_Appl_Layer.c: 1484: else {;BVH2_Appl_Layer.c: 1485: if (Cb9_StateCnt > 100) {
 10470  0554  3065               	movlw	101
 10471  0555  0021               	movlb	1	; select bank1
 10472  0556  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10473  0557  1C03               	skipc
 10474  0558  2D7F               	goto	l9638
 10475                           
 10476                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 10477  0559  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10478  055A  2DA9               	goto	l9650
 10479  055B                     l1540:	
 10480                           ;BVH2_Appl_Layer.c: 1493: };BVH2_Appl_Layer.c: 1494: };BVH2_Appl_Layer.c: 1497: }
 10481                           
 10482                           ;BVH2_Appl_Layer.c: 1491: else {;BVH2_Appl_Layer.c: 1492: Cb9_StateCnt = Cb9_StateCnt + 
      +                          1 ;
 10483                           
 10484                           ;BVH2_Appl_Layer.c: 1490: }
 10485                           
 10486                           ;BVH2_Appl_Layer.c: 1489: Cb9_oCurrentAlarm = 0;
 10487                           
 10488                           ;BVH2_Appl_Layer.c: 1488: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10489                           
 10490                           
 10491                           ;BVH2_Appl_Layer.c: 1498: else {;BVH2_Appl_Layer.c: 1500: if (SIBFS_Current_Analysis_low
      +                          _b.Cb12_CntOverCurrent) {
 10492  055B  1D42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10493  055C  2D88               	goto	l1546
 10494                           
 10495                           ;BVH2_Appl_Layer.c: 1505: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 10496  055D  0023               	movlb	3	; select bank3
 10497  055E  086E               	movf	_ui16_Current_Thresh^(0+384),w
 10498  055F  3E02               	addlw	2
 10499  0560  0020               	movlb	0	; select bank0
 10500  0561  00B7               	movwf	??_BVH2_Appl_Layer
 10501  0562  3000               	movlw	0
 10502  0563  0023               	movlb	3	; select bank3
 10503  0564  3D6F               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10504  0565  0020               	movlb	0	; select bank0
 10505  0566  00B8               	movwf	??_BVH2_Appl_Layer+1
 10506  0567  0838               	movf	??_BVH2_Appl_Layer+1,w
 10507  0568  0021               	movlb	1	; select bank1
 10508  0569  022D               	subwf	(_ui16_mat_Current+1)^(0+128),w
 10509  056A  1D03               	skipz
 10510  056B  2D70               	goto	u8045
 10511  056C  0020               	movlb	0	; select bank0
 10512  056D  0837               	movf	??_BVH2_Appl_Layer,w
 10513  056E  0021               	movlb	1	; select bank1
 10514  056F  022C               	subwf	_ui16_mat_Current^(0+128),w
 10515  0570                     u8045:	
 10516  0570  1803               	skipnc
 10517  0571  2D74               	goto	l9634
 10518                           
 10519                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 10520  0572  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10521  0573  2DA9               	goto	l9650
 10522  0574                     l9634:	
 10523                           ;BVH2_Appl_Layer.c: 1510: }
 10524                           
 10525                           ;BVH2_Appl_Layer.c: 1509: Cb9_oCurrentAlarm = 0;
 10526                           
 10527                           ;BVH2_Appl_Layer.c: 1508: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10528                           
 10529                           
 10530                           ;BVH2_Appl_Layer.c: 1511: else {;BVH2_Appl_Layer.c: 1512: if (Cb9_StateCnt > 50) {
 10531  0574  3033               	movlw	51
 10532  0575  0021               	movlb	1	; select bank1
 10533  0576  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10534  0577  1C03               	skipc
 10535  0578  2D7F               	goto	l9638
 10536                           
 10537                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 10538  0579  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10539  057A                     L34:	
 10540                           
 10541                           ;BVH2_Appl_Layer.c: 1515: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 10542  057A  15C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10543                           
 10544                           ;BVH2_Appl_Layer.c: 1516: Cb9_oCurrentAlarm = 1;
 10545  057B  0022               	movlb	2	; select bank2
 10546  057C  01AD               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 10547  057D  0AAD               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 10548                           
 10549                           ;BVH2_Appl_Layer.c: 1517: }
 10550  057E  2DAC               	goto	l9654
 10551  057F                     l9638:	
 10552                           
 10553                           ;BVH2_Appl_Layer.c: 1518: else {;BVH2_Appl_Layer.c: 1519: Cb9_StateCnt = Cb9_StateCnt + 
      +                          1 ;
 10554  057F  0021               	movlb	1	; select bank1
 10555  0580  0843               	movf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10556  0581  3E01               	addlw	1
 10557  0582  0020               	movlb	0	; select bank0
 10558  0583  00B7               	movwf	??_BVH2_Appl_Layer
 10559  0584  0837               	movf	??_BVH2_Appl_Layer,w
 10560  0585  0021               	movlb	1	; select bank1
 10561  0586  00C3               	movwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 10562                           
 10563                           ;BVH2_Appl_Layer.c: 1520: };BVH2_Appl_Layer.c: 1521: };BVH2_Appl_Layer.c: 1524: }
 10564  0587  2DAC               	goto	l9654
 10565  0588                     l1546:	
 10566                           
 10567                           ;BVH2_Appl_Layer.c: 1525: else {;BVH2_Appl_Layer.c: 1527: if (SIBFS_Current_Analysis_low
      +                          _b.Cb13_redState) {
 10568  0588  1DC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10569  0589  2DA3               	goto	l1552
 10570                           
 10571                           ;BVH2_Appl_Layer.c: 1532: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 10572  058A  0023               	movlb	3	; select bank3
 10573  058B  086E               	movf	_ui16_Current_Thresh^(0+384),w
 10574  058C  3E02               	addlw	2
 10575  058D  0020               	movlb	0	; select bank0
 10576  058E  00B7               	movwf	??_BVH2_Appl_Layer
 10577  058F  3000               	movlw	0
 10578  0590  0023               	movlb	3	; select bank3
 10579  0591  3D6F               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10580  0592  0020               	movlb	0	; select bank0
 10581  0593  00B8               	movwf	??_BVH2_Appl_Layer+1
 10582  0594  0838               	movf	??_BVH2_Appl_Layer+1,w
 10583  0595  0021               	movlb	1	; select bank1
 10584  0596  022D               	subwf	(_ui16_mat_Current+1)^(0+128),w
 10585  0597  1D03               	skipz
 10586  0598  2D9D               	goto	u8075
 10587  0599  0020               	movlb	0	; select bank0
 10588  059A  0837               	movf	??_BVH2_Appl_Layer,w
 10589  059B  0021               	movlb	1	; select bank1
 10590  059C  022C               	subwf	_ui16_mat_Current^(0+128),w
 10591  059D                     u8075:	
 10592  059D  1803               	skipnc
 10593  059E  2DAC               	goto	l9654
 10594                           
 10595                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 10596  059F  11C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10597                           
 10598                           ;BVH2_Appl_Layer.c: 1536: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
 10599  05A0  14C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10600  05A1                     l9644:	
 10601                           
 10602                           ;BVH2_Appl_Layer.c: 1537: Cb9_StateCnt = 0 ;
 10603  05A1  01C3               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 10604                           
 10605                           ;BVH2_Appl_Layer.c: 1538: };BVH2_Appl_Layer.c: 1541: }
 10606  05A2  2DAC               	goto	l9654
 10607  05A3                     l1552:	
 10608                           
 10609                           ;BVH2_Appl_Layer.c: 1542: else {;BVH2_Appl_Layer.c: 1544: if (!(SIBFS_Current_Analysis_l
      +                          ow_b.Cb9_Current_Analysis_low)) {
 10610  05A3  1A42               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 10611  05A4  2DAC               	goto	l9654
 10612                           
 10613                           ;BVH2_Appl_Layer.c: 1545: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
 10614  05A5  1642               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 10615                           
 10616                           ;BVH2_Appl_Layer.c: 1548: if (ui8_ResetMatlab == 1) {
 10617  05A6  036F               	decf	_ui8_ResetMatlab^(0+128),w
 10618  05A7  1D03               	btfss	3,2
 10619  05A8  2DAC               	goto	l9654
 10620  05A9                     l9650:	
 10621                           
 10622                           ;BVH2_Appl_Layer.c: 1550: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10623  05A9  1442               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10624                           
 10625                           ;BVH2_Appl_Layer.c: 1551: Cb9_oCurrentAlarm = 0;
 10626  05AA  0022               	movlb	2	; select bank2
 10627  05AB  01AD               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 10628  05AC                     l9654:	
 10629                           
 10630                           ;BVH2_Appl_Layer.c: 1552: };BVH2_Appl_Layer.c: 1553: };BVH2_Appl_Layer.c: 1554: };BVH2_A
      +                          ppl_Layer.c: 1555: };BVH2_Appl_Layer.c: 1556: };BVH2_Appl_Layer.c: 1557: };BVH2_Appl_Lay
      +                          er.c: 1562: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 10631  05AC  0022               	movlb	2	; select bank2
 10632  05AD  082D               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 10633  05AE  0020               	movlb	0	; select bank0
 10634  05AF  00B7               	movwf	??_BVH2_Appl_Layer
 10635  05B0  0837               	movf	??_BVH2_Appl_Layer,w
 10636  05B1  0021               	movlb	1	; select bank1
 10637  05B2  00D5               	movwf	_bool_HighCurrentAlarm^(0+128)
 10638                           
 10639                           ;BVH2_Appl_Layer.c: 1565: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 10640  05B3  0022               	movlb	2	; select bank2
 10641  05B4  083C               	movf	_Cb34_oPWM_Alarm^(0+256),w
 10642  05B5  0020               	movlb	0	; select bank0
 10643  05B6  00B7               	movwf	??_BVH2_Appl_Layer
 10644  05B7  0837               	movf	??_BVH2_Appl_Layer,w
 10645  05B8  0022               	movlb	2	; select bank2
 10646  05B9  00C8               	movwf	_bool_PWMin_err_Alarm^(0+256)
 10647                           
 10648                           ;BVH2_Appl_Layer.c: 1568: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 10649  05BA  0835               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 10650  05BB  0020               	movlb	0	; select bank0
 10651  05BC  00B7               	movwf	??_BVH2_Appl_Layer
 10652  05BD  0837               	movf	??_BVH2_Appl_Layer,w
 10653  05BE  0022               	movlb	2	; select bank2
 10654  05BF  00C6               	movwf	_bool_UbatAlarm^(0+256)
 10655                           
 10656                           ;BVH2_Appl_Layer.c: 1569: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 10657  05C0  0025               	movlb	5	; select bank5
 10658  05C1  01AD               	clrf	_BVH2_Appl_Layer$1042^(0+640)
 10659  05C2  0AAD               	incf	_BVH2_Appl_Layer$1042^(0+640),f
 10660  05C3  0022               	movlb	2	; select bank2
 10661  05C4  0831               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
 10662  05C5  1D03               	btfss	3,2
 10663  05C6  2DCF               	goto	l9670
 10664  05C7  083E               	movf	_Cb1_oCurrentAlarm^(0+256),w
 10665  05C8  1D03               	btfss	3,2
 10666  05C9  2DCF               	goto	l9670
 10667  05CA  0833               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),w
 10668  05CB  1D03               	btfss	3,2
 10669  05CC  2DCF               	goto	l9670
 10670  05CD  0025               	movlb	5	; select bank5
 10671  05CE  01AD               	clrf	_BVH2_Appl_Layer$1042^(0+640)
 10672  05CF                     l9670:	
 10673  05CF  0025               	movlb	5	; select bank5
 10674  05D0  082D               	movf	_BVH2_Appl_Layer$1042^(0+640),w
 10675  05D1  0020               	movlb	0	; select bank0
 10676  05D2  00B7               	movwf	??_BVH2_Appl_Layer
 10677  05D3  0837               	movf	??_BVH2_Appl_Layer,w
 10678  05D4  0021               	movlb	1	; select bank1
 10679  05D5  00D6               	movwf	_bool_MotorStalled^(0+128)
 10680                           
 10681                           ;BVH2_Appl_Layer.c: 1572: bool_CPU_TempRedAlarm = Cb51_oTempRedAlarm;
 10682  05D6  0022               	movlb	2	; select bank2
 10683  05D7  082F               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 10684  05D8  0020               	movlb	0	; select bank0
 10685  05D9  00B7               	movwf	??_BVH2_Appl_Layer
 10686  05DA  0837               	movf	??_BVH2_Appl_Layer,w
 10687  05DB  0022               	movlb	2	; select bank2
 10688  05DC  00C7               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 10689                           
 10690                           ;BVH2_Appl_Layer.c: 1575: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 10691  05DD  0025               	movlb	5	; select bank5
 10692  05DE  0838               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+640),w
 10693  05DF  0020               	movlb	0	; select bank0
 10694  05E0  00B7               	movwf	??_BVH2_Appl_Layer
 10695  05E1  0837               	movf	??_BVH2_Appl_Layer,w
 10696  05E2  0023               	movlb	3	; select bank3
 10697  05E3  00DC               	movwf	_ui8_debug_out0^(0+384)
 10698                           
 10699                           ;BVH2_Appl_Layer.c: 1576: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 10700  05E4  0025               	movlb	5	; select bank5
 10701  05E5  01AE               	clrf	_BVH2_Appl_Layer$1043^(0+640)
 10702  05E6  0AAE               	incf	_BVH2_Appl_Layer$1043^(0+640),f
 10703  05E7  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
 10704  05E8  1D03               	btfss	3,2
 10705  05E9  2DF3               	goto	l9686
 10706  05EA  0021               	movlb	1	; select bank1
 10707  05EB  083E               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),w
 10708  05EC  1D03               	btfss	3,2
 10709  05ED  2DF3               	goto	l9686
 10710  05EE  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10711  05EF  1D03               	btfss	3,2
 10712  05F0  2DF3               	goto	l9686
 10713  05F1  0025               	movlb	5	; select bank5
 10714  05F2  01AE               	clrf	_BVH2_Appl_Layer$1043^(0+640)
 10715  05F3                     l9686:	
 10716  05F3  0025               	movlb	5	; select bank5
 10717  05F4  082E               	movf	_BVH2_Appl_Layer$1043^(0+640),w
 10718  05F5  0020               	movlb	0	; select bank0
 10719  05F6  00B7               	movwf	??_BVH2_Appl_Layer
 10720  05F7  0837               	movf	??_BVH2_Appl_Layer,w
 10721  05F8  0025               	movlb	5	; select bank5
 10722  05F9  00BD               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640)
 10723                           
 10724                           ;BVH2_Appl_Layer.c: 1577: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 10725  05FA  01AF               	clrf	_BVH2_Appl_Layer$1044^(0+640)
 10726  05FB  0AAF               	incf	_BVH2_Appl_Layer$1044^(0+640),f
 10727  05FC  083D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 10728  05FD  1D03               	btfss	3,2
 10729  05FE  2E05               	goto	l9696
 10730  05FF  0021               	movlb	1	; select bank1
 10731  0600  084F               	movf	_bool_ControlLoopMode^(0+128),w
 10732  0601  1D03               	btfss	3,2
 10733  0602  2E05               	goto	l9696
 10734  0603  0025               	movlb	5	; select bank5
 10735  0604  01AF               	clrf	_BVH2_Appl_Layer$1044^(0+640)
 10736  0605                     l9696:	
 10737  0605  0025               	movlb	5	; select bank5
 10738  0606  082F               	movf	_BVH2_Appl_Layer$1044^(0+640),w
 10739  0607  0020               	movlb	0	; select bank0
 10740  0608  00B7               	movwf	??_BVH2_Appl_Layer
 10741  0609  0837               	movf	??_BVH2_Appl_Layer,w
 10742  060A  0025               	movlb	5	; select bank5
 10743  060B  00B7               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640)
 10744                           
 10745                           ;BVH2_Appl_Layer.c: 1578: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 10746  060C  0837               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640),w
 10747  060D  0022               	movlb	2	; select bank2
 10748  060E  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 10749  060F  1903               	btfsc	3,2
 10750  0610  2E1C               	goto	l9704
 10751  0611  086D               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
 10752  0612  1D03               	btfss	3,2
 10753  0613  2E1C               	goto	l9704
 10754                           
 10755                           ;BVH2_Appl_Layer.c: 1579: {;BVH2_Appl_Layer.c: 1580: X_Sb4_Intergrator = 80000 ;
 10756  0614  3000               	movlw	0
 10757  0615  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 10758  0616  3001               	movlw	1
 10759  0617  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 10760  0618  3038               	movlw	56
 10761  0619  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 10762  061A  3080               	movlw	128
 10763  061B  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 10764  061C                     l9704:	
 10765                           
 10766                           ;BVH2_Appl_Layer.c: 1581: };BVH2_Appl_Layer.c: 1585: if (Sb1_Logical_Operator3) {
 10767  061C  0025               	movlb	5	; select bank5
 10768  061D  083D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 10769  061E  1903               	btfsc	3,2
 10770  061F  2E23               	goto	l9708
 10771                           
 10772                           ;BVH2_Appl_Layer.c: 1586: Sb2_Switch2 = 0 ;
 10773  0620  01A8               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 10774  0621  01A9               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 10775                           
 10776                           ;BVH2_Appl_Layer.c: 1587: }
 10777  0622  2F46               	goto	l9742
 10778  0623                     l9708:	
 10779                           
 10780                           ;BVH2_Appl_Layer.c: 1588: else {;BVH2_Appl_Layer.c: 1591: if (bool_ControlLoopMode) {
 10781  0623  0021               	movlb	1	; select bank1
 10782  0624  084F               	movf	_bool_ControlLoopMode^(0+128),w
 10783  0625  1903               	btfsc	3,2
 10784  0626  2ED2               	goto	l9728
 10785                           
 10786                           ;BVH2_Appl_Layer.c: 1594: if (Sb1_Logical_Operator5) {
 10787  0627  0025               	movlb	5	; select bank5
 10788  0628  0836               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640),w
 10789  0629  1903               	btfsc	3,2
 10790  062A  2E34               	goto	l9714
 10791                           
 10792                           ;BVH2_Appl_Layer.c: 1595: Sb2_Switch2 = Sb2_Fixed_Power;
 10793  062B  3078               	movlw	low (_Sb2_Fixed_Power| (0+32768))
 10794  062C  0084               	movwf	4
 10795  062D  3098               	movlw	high (_Sb2_Fixed_Power| (0+32768))
 10796  062E  0085               	movwf	5
 10797  062F  3F00               	moviw [0]fsr0
 10798  0630  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 10799  0631  3F01               	moviw [1]fsr0
 10800  0632  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 10801                           
 10802                           ;BVH2_Appl_Layer.c: 1596: }
 10803  0633  2F46               	goto	l9742
 10804  0634                     l9714:	
 10805                           
 10806                           ;BVH2_Appl_Layer.c: 1597: else {;BVH2_Appl_Layer.c: 1599: UInt16 Sb3_Product1 ;;BVH2_App
      +                          l_Layer.c: 1600: Int16 Sb3_Sum1;;BVH2_Appl_Layer.c: 1608: Sb3_Product1 = (UInt16) (((UIn
      +                          t16) (140 << 8)) / 160 );
 10807  0634  30E0               	movlw	224
 10808  0635  00B2               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+640)
 10809  0636  3000               	movlw	0
 10810  0637  00B3               	movwf	(BVH2_Appl_Layer@Sb3_Product1^(0+640)+1)
 10811                           
 10812                           ;BVH2_Appl_Layer.c: 1614: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>;BVH2_Appl_Layer.c: 1615: 8)) + ((Int16) (((Int16) (-((Int16) (
      +                          UInt16) ((((UInt32) Sb3_Product1) * 95) >> 7)))) + 200)));
 10813  0638  0832               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+640),w
 10814  0639  0020               	movlb	0	; select bank0
 10815  063A  00A8               	movwf	___lmul@multiplier
 10816  063B  0025               	movlb	5	; select bank5
 10817  063C  0833               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+640),w
 10818  063D  0020               	movlb	0	; select bank0
 10819  063E  00A9               	movwf	___lmul@multiplier+1
 10820  063F  01AA               	clrf	___lmul@multiplier+2
 10821  0640  01AB               	clrf	___lmul@multiplier+3
 10822  0641  3000               	movlw	0
 10823  0642  00AF               	movwf	___lmul@multiplicand+3
 10824  0643  3000               	movlw	0
 10825  0644  00AE               	movwf	___lmul@multiplicand+2
 10826  0645  3000               	movlw	0
 10827  0646  00AD               	movwf	___lmul@multiplicand+1
 10828  0647  305F               	movlw	95
 10829  0648  00AC               	movwf	___lmul@multiplicand
 10830  0649  3191  21D2  3180   	fcall	___lmul
 10831  064C  0020               	movlb	0	; select bank0
 10832  064D  0828               	movf	?___lmul,w
 10833  064E  00B7               	movwf	??_BVH2_Appl_Layer
 10834  064F  0829               	movf	?___lmul+1,w
 10835  0650  00B8               	movwf	??_BVH2_Appl_Layer+1
 10836  0651  082A               	movf	?___lmul+2,w
 10837  0652  00B9               	movwf	??_BVH2_Appl_Layer+2
 10838  0653  082B               	movf	?___lmul+3,w
 10839  0654  00BA               	movwf	??_BVH2_Appl_Layer+3
 10840  0655  3007               	movlw	7
 10841  0656                     u8235:	
 10842  0656  36BA               	lsrf	??_BVH2_Appl_Layer+3,f
 10843  0657  0CB9               	rrf	??_BVH2_Appl_Layer+2,f
 10844  0658  0CB8               	rrf	??_BVH2_Appl_Layer+1,f
 10845  0659  0CB7               	rrf	??_BVH2_Appl_Layer,f
 10846  065A  0B89               	decfsz	9,f
 10847  065B  2E56               	goto	u8235
 10848  065C  0937               	comf	??_BVH2_Appl_Layer,w
 10849  065D  00BB               	movwf	??_BVH2_Appl_Layer+4
 10850  065E  0938               	comf	??_BVH2_Appl_Layer+1,w
 10851  065F  00BC               	movwf	??_BVH2_Appl_Layer+5
 10852  0660  0ABB               	incf	??_BVH2_Appl_Layer+4,f
 10853  0661  1903               	skipnz
 10854  0662  0ABC               	incf	??_BVH2_Appl_Layer+5,f
 10855  0663  0021               	movlb	1	; select bank1
 10856  0664  0851               	movf	_ui8_PWM_dc_mat^(0+128),w
 10857  0665  0020               	movlb	0	; select bank0
 10858  0666  00BD               	movwf	??_BVH2_Appl_Layer+6
 10859  0667  01BE               	clrf	??_BVH2_Appl_Layer+7
 10860  0668  01BF               	clrf	??_BVH2_Appl_Layer+8
 10861  0669  01C0               	clrf	??_BVH2_Appl_Layer+9
 10862  066A  0840               	movf	??_BVH2_Appl_Layer+9,w
 10863  066B  00AB               	movwf	___lmul@multiplier+3
 10864  066C  083F               	movf	??_BVH2_Appl_Layer+8,w
 10865  066D  00AA               	movwf	___lmul@multiplier+2
 10866  066E  083E               	movf	??_BVH2_Appl_Layer+7,w
 10867  066F  00A9               	movwf	___lmul@multiplier+1
 10868  0670  083D               	movf	??_BVH2_Appl_Layer+6,w
 10869  0671  00A8               	movwf	___lmul@multiplier
 10870  0672  0025               	movlb	5	; select bank5
 10871  0673  0832               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+640),w
 10872  0674  0020               	movlb	0	; select bank0
 10873  0675  00AC               	movwf	___lmul@multiplicand
 10874  0676  0025               	movlb	5	; select bank5
 10875  0677  0833               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+640),w
 10876  0678  0020               	movlb	0	; select bank0
 10877  0679  00AD               	movwf	___lmul@multiplicand+1
 10878  067A  01AE               	clrf	___lmul@multiplicand+2
 10879  067B  01AF               	clrf	___lmul@multiplicand+3
 10880  067C  3191  21D2  3180   	fcall	___lmul
 10881  067F  0020               	movlb	0	; select bank0
 10882  0680  0828               	movf	?___lmul,w
 10883  0681  00C1               	movwf	??_BVH2_Appl_Layer+10
 10884  0682  0829               	movf	?___lmul+1,w
 10885  0683  00C2               	movwf	??_BVH2_Appl_Layer+11
 10886  0684  082A               	movf	?___lmul+2,w
 10887  0685  00C3               	movwf	??_BVH2_Appl_Layer+12
 10888  0686  082B               	movf	?___lmul+3,w
 10889  0687  00C4               	movwf	??_BVH2_Appl_Layer+13
 10890  0688  3008               	movlw	8
 10891  0689                     u8245:	
 10892  0689  36C4               	lsrf	??_BVH2_Appl_Layer+13,f
 10893  068A  0CC3               	rrf	??_BVH2_Appl_Layer+12,f
 10894  068B  0CC2               	rrf	??_BVH2_Appl_Layer+11,f
 10895  068C  0CC1               	rrf	??_BVH2_Appl_Layer+10,f
 10896  068D  0B89               	decfsz	9,f
 10897  068E  2E89               	goto	u8245
 10898  068F  083B               	movf	??_BVH2_Appl_Layer+4,w
 10899  0690  0741               	addwf	??_BVH2_Appl_Layer+10,w
 10900  0691  00C5               	movwf	??_BVH2_Appl_Layer+14
 10901  0692  083C               	movf	??_BVH2_Appl_Layer+5,w
 10902  0693  3D42               	addwfc	??_BVH2_Appl_Layer+11,w
 10903  0694  00C6               	movwf	??_BVH2_Appl_Layer+15
 10904  0695  0845               	movf	??_BVH2_Appl_Layer+14,w
 10905  0696  3EC8               	addlw	200
 10906  0697  0025               	movlb	5	; select bank5
 10907  0698  00BA               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640)
 10908  0699  3000               	movlw	0
 10909  069A  0020               	movlb	0	; select bank0
 10910  069B  3D46               	addwfc	??_BVH2_Appl_Layer+15,w
 10911  069C  0025               	movlb	5	; select bank5
 10912  069D  00BB               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640)
 10913                           
 10914                           ;BVH2_Appl_Layer.c: 1618: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 10915  069E  083B               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640),w
 10916  069F  3A80               	xorlw	128
 10917  06A0  0020               	movlb	0	; select bank0
 10918  06A1  00B7               	movwf	??_BVH2_Appl_Layer
 10919  06A2  3080               	movlw	128
 10920  06A3  0237               	subwf	??_BVH2_Appl_Layer,w
 10921  06A4  1D03               	skipz
 10922  06A5  2EA9               	goto	u8255
 10923  06A6  30C9               	movlw	201
 10924  06A7  0025               	movlb	5	; select bank5
 10925  06A8  023A               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 10926  06A9                     u8255:	
 10927  06A9  1803               	skipnc
 10928  06AA  2ECF               	goto	l9726
 10929  06AB  0025               	movlb	5	; select bank5
 10930  06AC  083B               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640),w
 10931  06AD  3A80               	xorlw	128
 10932  06AE  0020               	movlb	0	; select bank0
 10933  06AF  00B7               	movwf	??_BVH2_Appl_Layer
 10934  06B0  3080               	movlw	128
 10935  06B1  0237               	subwf	??_BVH2_Appl_Layer,w
 10936  06B2  1D03               	skipz
 10937  06B3  2EB7               	goto	u8265
 10938  06B4  303C               	movlw	60
 10939  06B5  0025               	movlb	5	; select bank5
 10940  06B6  023A               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 10941  06B7                     u8265:	
 10942  06B7  1C03               	skipc
 10943  06B8  2EC6               	goto	l9724
 10944  06B9  0025               	movlb	5	; select bank5
 10945  06BA  083A               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 10946  06BB  0020               	movlb	0	; select bank0
 10947  06BC  00B7               	movwf	??_BVH2_Appl_Layer
 10948  06BD  01B8               	clrf	??_BVH2_Appl_Layer+1
 10949  06BE  0837               	movf	??_BVH2_Appl_Layer,w
 10950  06BF  0025               	movlb	5	; select bank5
 10951  06C0  00A4               	movwf	_BVH2_Appl_Layer$1047^(0+640)
 10952  06C1  0020               	movlb	0	; select bank0
 10953  06C2  0838               	movf	??_BVH2_Appl_Layer+1,w
 10954  06C3  0025               	movlb	5	; select bank5
 10955  06C4  00A5               	movwf	(_BVH2_Appl_Layer$1047+1)^(0+640)
 10956  06C5  2ECB               	goto	l1576
 10957  06C6                     l9724:	
 10958  06C6  303C               	movlw	60
 10959  06C7  0025               	movlb	5	; select bank5
 10960  06C8  00A4               	movwf	_BVH2_Appl_Layer$1047^(0+640)
 10961  06C9  3000               	movlw	0
 10962  06CA  00A5               	movwf	(_BVH2_Appl_Layer$1047^(0+640)+1)
 10963  06CB                     l1576:	
 10964  06CB  0825               	movf	(_BVH2_Appl_Layer$1047+1)^(0+640),w
 10965  06CC  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 10966  06CD  0824               	movf	_BVH2_Appl_Layer$1047^(0+640),w
 10967  06CE  2F40               	goto	L35
 10968  06CF                     l9726:	
 10969  06CF  30C8               	movlw	200
 10970  06D0  0025               	movlb	5	; select bank5
 10971  06D1  2F43               	goto	L36
 10972  06D2                     l9728:	
 10973                           ;BVH2_Appl_Layer.c: 1619: };BVH2_Appl_Layer.c: 1620: }
 10974                           
 10975                           
 10976                           ;BVH2_Appl_Layer.c: 1621: else {;BVH2_Appl_Layer.c: 1623: Int16 Sb4_PI_sum;;BVH2_Appl_La
      +                          yer.c: 1628: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / ((Int32) 800))
      +                          ) + ((UInt16);BVH2_Appl_Layer.c: 1629: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 10977  06D2  3000               	movlw	0
 10978  06D3  0020               	movlb	0	; select bank0
 10979  06D4  00AB               	movwf	___aldiv@divisor+3
 10980  06D5  3000               	movlw	0
 10981  06D6  00AA               	movwf	___aldiv@divisor+2
 10982  06D7  3003               	movlw	3
 10983  06D8  00A9               	movwf	___aldiv@divisor+1
 10984  06D9  3020               	movlw	32
 10985  06DA  00A8               	movwf	___aldiv@divisor
 10986  06DB  0022               	movlb	2	; select bank2
 10987  06DC  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 10988  06DD  0020               	movlb	0	; select bank0
 10989  06DE  00AF               	movwf	___aldiv@dividend+3
 10990  06DF  0022               	movlb	2	; select bank2
 10991  06E0  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 10992  06E1  0020               	movlb	0	; select bank0
 10993  06E2  00AE               	movwf	___aldiv@dividend+2
 10994  06E3  0022               	movlb	2	; select bank2
 10995  06E4  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 10996  06E5  0020               	movlb	0	; select bank0
 10997  06E6  00AD               	movwf	___aldiv@dividend+1
 10998  06E7  0022               	movlb	2	; select bank2
 10999  06E8  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11000  06E9  0020               	movlb	0	; select bank0
 11001  06EA  00AC               	movwf	___aldiv@dividend
 11002  06EB  3195  2563  3180   	fcall	___aldiv
 11003  06EE  0020               	movlb	0	; select bank0
 11004  06EF  0828               	movf	?___aldiv,w
 11005  06F0  00B7               	movwf	??_BVH2_Appl_Layer
 11006  06F1  0829               	movf	?___aldiv+1,w
 11007  06F2  00B8               	movwf	??_BVH2_Appl_Layer+1
 11008  06F3  082A               	movf	?___aldiv+2,w
 11009  06F4  00B9               	movwf	??_BVH2_Appl_Layer+2
 11010  06F5  082B               	movf	?___aldiv+3,w
 11011  06F6  00BA               	movwf	??_BVH2_Appl_Layer+3
 11012  06F7  0022               	movlb	2	; select bank2
 11013  06F8  0849               	movf	_ui8_Kp_mat^(0+256),w
 11014  06F9  0020               	movlb	0	; select bank0
 11015  06FA  00BB               	movwf	??_BVH2_Appl_Layer+4
 11016  06FB  01BC               	clrf	??_BVH2_Appl_Layer+5
 11017  06FC  083B               	movf	??_BVH2_Appl_Layer+4,w
 11018  06FD  00A8               	movwf	___wmul@multiplier
 11019  06FE  083C               	movf	??_BVH2_Appl_Layer+5,w
 11020  06FF  00A9               	movwf	___wmul@multiplier+1
 11021  0700  0025               	movlb	5	; select bank5
 11022  0701  0831               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640),w
 11023  0702  0020               	movlb	0	; select bank0
 11024  0703  00AB               	movwf	___wmul@multiplicand+1
 11025  0704  0025               	movlb	5	; select bank5
 11026  0705  0830               	movf	BVH2_Appl_Layer@Sb2_Error^(0+640),w
 11027  0706  0020               	movlb	0	; select bank0
 11028  0707  00AA               	movwf	___wmul@multiplicand
 11029  0708  319E  26E4  3180   	fcall	___wmul
 11030  070B  0020               	movlb	0	; select bank0
 11031  070C  0828               	movf	?___wmul,w
 11032  070D  0737               	addwf	??_BVH2_Appl_Layer,w
 11033  070E  0025               	movlb	5	; select bank5
 11034  070F  00BE               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640)
 11035  0710  0020               	movlb	0	; select bank0
 11036  0711  0829               	movf	?___wmul+1,w
 11037  0712  3D38               	addwfc	??_BVH2_Appl_Layer+1,w
 11038  0713  0025               	movlb	5	; select bank5
 11039  0714  00BF               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640)
 11040                           
 11041                           ;BVH2_Appl_Layer.c: 1632: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 11042  0715  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11043  0716  3A80               	xorlw	128
 11044  0717  0020               	movlb	0	; select bank0
 11045  0718  00B7               	movwf	??_BVH2_Appl_Layer
 11046  0719  3080               	movlw	128
 11047  071A  0237               	subwf	??_BVH2_Appl_Layer,w
 11048  071B  1D03               	skipz
 11049  071C  2F20               	goto	u8275
 11050  071D  3001               	movlw	1
 11051  071E  0025               	movlb	5	; select bank5
 11052  071F  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11053  0720                     u8275:	
 11054  0720  1C03               	skipc
 11055  0721  2F2A               	goto	l1583
 11056  0722  3000               	movlw	0
 11057  0723  0025               	movlb	5	; select bank5
 11058  0724  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11059  0725  30CB               	movlw	203
 11060  0726  1903               	skipnz
 11061  0727  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11062  0728  1803               	skipnc
 11063  0729  2F42               	goto	l9740
 11064  072A                     l1583:	
 11065  072A  0025               	movlb	5	; select bank5
 11066  072B  1BBF               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),7
 11067  072C  2F39               	goto	l9738
 11068  072D  3000               	movlw	0
 11069  072E  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11070  072F  3028               	movlw	40
 11071  0730  1903               	skipnz
 11072  0731  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11073  0732  1C03               	skipc
 11074  0733  2F39               	goto	l9738
 11075  0734  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11076  0735  00A7               	movwf	(_BVH2_Appl_Layer$1049+1)^(0+640)
 11077  0736  083E               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11078  0737  00A6               	movwf	_BVH2_Appl_Layer$1049^(0+640)
 11079  0738  2F3D               	goto	l1587
 11080  0739                     l9738:	
 11081  0739  3028               	movlw	40
 11082  073A  00A6               	movwf	_BVH2_Appl_Layer$1049^(0+640)
 11083  073B  3000               	movlw	0
 11084  073C  00A7               	movwf	(_BVH2_Appl_Layer$1049^(0+640)+1)
 11085  073D                     l1587:	
 11086  073D  0827               	movf	(_BVH2_Appl_Layer$1049+1)^(0+640),w
 11087  073E  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11088  073F  0826               	movf	_BVH2_Appl_Layer$1049^(0+640),w
 11089  0740                     L35:	
 11090  0740  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11091  0741  2F46               	goto	l9742
 11092  0742                     l9740:	
 11093  0742  30CA               	movlw	202
 11094  0743                     L36:	
 11095  0743  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11096  0744  3000               	movlw	0
 11097  0745  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2^(0+640)+1)
 11098  0746                     l9742:	
 11099                           
 11100                           ;BVH2_Appl_Layer.c: 1633: };BVH2_Appl_Layer.c: 1634: };BVH2_Appl_Layer.c: 1639: if (Sb1_
      +                          Logical_Operator3){
 11101  0746  083D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 11102  0747  1903               	btfsc	3,2
 11103  0748  2F4D               	goto	l9746
 11104                           
 11105                           ;BVH2_Appl_Layer.c: 1640: ui16_duty_cycle_mat = 0;
 11106  0749  0023               	movlb	3	; select bank3
 11107  074A  01C0               	clrf	_ui16_duty_cycle_mat^(0+384)
 11108  074B  01C1               	clrf	(_ui16_duty_cycle_mat+1)^(0+384)
 11109                           
 11110                           ;BVH2_Appl_Layer.c: 1641: }
 11111  074C  2F52               	goto	l1589
 11112  074D                     l9746:	
 11113                           
 11114                           ;BVH2_Appl_Layer.c: 1642: else {;BVH2_Appl_Layer.c: 1643: ui16_duty_cycle_mat = ui16_Spe
      +                          ed_demand_mat;
 11115  074D  0023               	movlb	3	; select bank3
 11116  074E  0837               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 11117  074F  00C1               	movwf	(_ui16_duty_cycle_mat+1)^(0+384)
 11118  0750  0836               	movf	_ui16_Speed_demand_mat^(0+384),w
 11119  0751  00C0               	movwf	_ui16_duty_cycle_mat^(0+384)
 11120  0752                     l1589:	
 11121                           
 11122                           ;BVH2_Appl_Layer.c: 1644: };BVH2_Appl_Layer.c: 1647: bl_Pumpoff_Alarm = Sb1_Logical_Oper
      +                          ator2;
 11123  0752  0025               	movlb	5	; select bank5
 11124  0753  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640),w
 11125  0754  0020               	movlb	0	; select bank0
 11126  0755  00B7               	movwf	??_BVH2_Appl_Layer
 11127  0756  0837               	movf	??_BVH2_Appl_Layer,w
 11128  0757  0023               	movlb	3	; select bank3
 11129  0758  00DF               	movwf	_bl_Pumpoff_Alarm^(0+384)
 11130                           
 11131                           ;BVH2_Appl_Layer.c: 1648: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 11132  0759  0025               	movlb	5	; select bank5
 11133  075A  0837               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640),w
 11134  075B  0020               	movlb	0	; select bank0
 11135  075C  00B7               	movwf	??_BVH2_Appl_Layer
 11136  075D  0837               	movf	??_BVH2_Appl_Layer,w
 11137  075E  0022               	movlb	2	; select bank2
 11138  075F  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 11139                           
 11140                           ;BVH2_Appl_Layer.c: 1652: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<;BVH2_Appl_Layer.c: 1653: 3));
 11141  0760  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11142  0761  0020               	movlb	0	; select bank0
 11143  0762  00B7               	movwf	??_BVH2_Appl_Layer
 11144  0763  0022               	movlb	2	; select bank2
 11145  0764  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11146  0765  0020               	movlb	0	; select bank0
 11147  0766  00B8               	movwf	??_BVH2_Appl_Layer+1
 11148  0767  0022               	movlb	2	; select bank2
 11149  0768  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11150  0769  0020               	movlb	0	; select bank0
 11151  076A  00B9               	movwf	??_BVH2_Appl_Layer+2
 11152  076B  0022               	movlb	2	; select bank2
 11153  076C  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11154  076D  0020               	movlb	0	; select bank0
 11155  076E  00BA               	movwf	??_BVH2_Appl_Layer+3
 11156  076F  0023               	movlb	3	; select bank3
 11157  0770  0839               	movf	(_ui8_Ki_mat+1)^(0+384),w
 11158  0771  0020               	movlb	0	; select bank0
 11159  0772  00A9               	movwf	___wmul@multiplier+1
 11160  0773  0023               	movlb	3	; select bank3
 11161  0774  0838               	movf	_ui8_Ki_mat^(0+384),w
 11162  0775  0020               	movlb	0	; select bank0
 11163  0776  00A8               	movwf	___wmul@multiplier
 11164  0777  0025               	movlb	5	; select bank5
 11165  0778  0831               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640),w
 11166  0779  0020               	movlb	0	; select bank0
 11167  077A  00AB               	movwf	___wmul@multiplicand+1
 11168  077B  0025               	movlb	5	; select bank5
 11169  077C  0830               	movf	BVH2_Appl_Layer@Sb2_Error^(0+640),w
 11170  077D  0020               	movlb	0	; select bank0
 11171  077E  00AA               	movwf	___wmul@multiplicand
 11172  077F  319E  26E4  3180   	fcall	___wmul
 11173  0782  0020               	movlb	0	; select bank0
 11174  0783  0828               	movf	?___wmul,w
 11175  0784  00BB               	movwf	??_BVH2_Appl_Layer+4
 11176  0785  0829               	movf	?___wmul+1,w
 11177  0786  00BC               	movwf	??_BVH2_Appl_Layer+5
 11178  0787  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11179  0788  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11180  0789  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11181  078A  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11182  078B  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11183  078C  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11184  078D  083B               	movf	??_BVH2_Appl_Layer+4,w
 11185  078E  00BD               	movwf	??_BVH2_Appl_Layer+6
 11186  078F  083C               	movf	??_BVH2_Appl_Layer+5,w
 11187  0790  00BE               	movwf	??_BVH2_Appl_Layer+7
 11188  0791  3000               	movlw	0
 11189  0792  1BBE               	btfsc	??_BVH2_Appl_Layer+7,7
 11190  0793  30FF               	movlw	255
 11191  0794  00BF               	movwf	??_BVH2_Appl_Layer+8
 11192  0795  00C0               	movwf	??_BVH2_Appl_Layer+9
 11193  0796  083D               	movf	??_BVH2_Appl_Layer+6,w
 11194  0797  07B7               	addwf	??_BVH2_Appl_Layer,f
 11195  0798  083E               	movf	??_BVH2_Appl_Layer+7,w
 11196  0799  3DB8               	addwfc	??_BVH2_Appl_Layer+1,f
 11197  079A  083F               	movf	??_BVH2_Appl_Layer+8,w
 11198  079B  3DB9               	addwfc	??_BVH2_Appl_Layer+2,f
 11199  079C  0840               	movf	??_BVH2_Appl_Layer+9,w
 11200  079D  3DBA               	addwfc	??_BVH2_Appl_Layer+3,f
 11201  079E  083A               	movf	??_BVH2_Appl_Layer+3,w
 11202  079F  0022               	movlb	2	; select bank2
 11203  07A0  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11204  07A1  0020               	movlb	0	; select bank0
 11205  07A2  0839               	movf	??_BVH2_Appl_Layer+2,w
 11206  07A3  0022               	movlb	2	; select bank2
 11207  07A4  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11208  07A5  0020               	movlb	0	; select bank0
 11209  07A6  0838               	movf	??_BVH2_Appl_Layer+1,w
 11210  07A7  0022               	movlb	2	; select bank2
 11211  07A8  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11212  07A9  0020               	movlb	0	; select bank0
 11213  07AA  0837               	movf	??_BVH2_Appl_Layer,w
 11214  07AB  0022               	movlb	2	; select bank2
 11215  07AC  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11216                           
 11217                           ;BVH2_Appl_Layer.c: 1656: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 11218  07AD  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 11219  07AE  2FBA               	goto	l9752
 11220  07AF  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11221  07B0  1D03               	btfss	3,2
 11222  07B1  2FED               	goto	l9758
 11223  07B2  3041               	movlw	65
 11224  07B3  0268               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11225  07B4  3077               	movlw	119
 11226  07B5  3B69               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11227  07B6  3002               	movlw	2
 11228  07B7  3B6A               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11229  07B8  1803               	btfsc	3,0
 11230  07B9  2FED               	goto	l9758
 11231  07BA                     l9752:	
 11232  07BA  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 11233  07BB  2FD5               	goto	l9756
 11234  07BC  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11235  07BD  1D03               	btfss	3,2
 11236  07BE  2FC6               	goto	l9754
 11237  07BF  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11238  07C0  1D03               	btfss	3,2
 11239  07C1  2FC6               	goto	l9754
 11240  07C2  307D               	movlw	125
 11241  07C3  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11242  07C4  1C03               	btfss	3,0
 11243  07C5  2FD5               	goto	l9756
 11244  07C6                     l9754:	
 11245  07C6  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11246  07C7  0025               	movlb	5	; select bank5
 11247  07C8  00A3               	movwf	(_BVH2_Appl_Layer$1050+3)^(0+640)
 11248  07C9  0022               	movlb	2	; select bank2
 11249  07CA  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11250  07CB  0025               	movlb	5	; select bank5
 11251  07CC  00A2               	movwf	(_BVH2_Appl_Layer$1050+2)^(0+640)
 11252  07CD  0022               	movlb	2	; select bank2
 11253  07CE  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11254  07CF  0025               	movlb	5	; select bank5
 11255  07D0  00A1               	movwf	(_BVH2_Appl_Layer$1050+1)^(0+640)
 11256  07D1  0022               	movlb	2	; select bank2
 11257  07D2  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11258  07D3  0025               	movlb	5	; select bank5
 11259  07D4  2FDD               	goto	L37
 11260  07D5                     l9756:	
 11261  07D5  3000               	movlw	0
 11262  07D6  0025               	movlb	5	; select bank5
 11263  07D7  00A3               	movwf	(_BVH2_Appl_Layer$1050+3)^(0+640)
 11264  07D8  3000               	movlw	0
 11265  07D9  00A2               	movwf	(_BVH2_Appl_Layer$1050+2)^(0+640)
 11266  07DA  307D               	movlw	125
 11267  07DB  00A1               	movwf	(_BVH2_Appl_Layer$1050+1)^(0+640)
 11268  07DC  3000               	movlw	0
 11269  07DD                     L37:	
 11270  07DD  00A0               	movwf	_BVH2_Appl_Layer$1050^(0+640)
 11271  07DE  0823               	movf	(_BVH2_Appl_Layer$1050+3)^(0+640),w
 11272  07DF  0022               	movlb	2	; select bank2
 11273  07E0  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11274  07E1  0025               	movlb	5	; select bank5
 11275  07E2  0822               	movf	(_BVH2_Appl_Layer$1050+2)^(0+640),w
 11276  07E3  0022               	movlb	2	; select bank2
 11277  07E4  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11278  07E5  0025               	movlb	5	; select bank5
 11279  07E6  0821               	movf	(_BVH2_Appl_Layer$1050+1)^(0+640),w
 11280  07E7  0022               	movlb	2	; select bank2
 11281  07E8  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11282  07E9  0025               	movlb	5	; select bank5
 11283  07EA  0820               	movf	_BVH2_Appl_Layer$1050^(0+640),w
 11284  07EB  0022               	movlb	2	; select bank2
 11285  07EC  2FF4               	goto	L38
 11286  07ED                     l9758:	
 11287  07ED  3000               	movlw	0
 11288  07EE  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11289  07EF  3002               	movlw	2
 11290  07F0  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11291  07F1  3077               	movlw	119
 11292  07F2  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11293  07F3  3040               	movlw	64
 11294  07F4                     L38:	
 11295  07F4  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11296                           
 11297                           ;BVH2_Appl_Layer.c: 1659: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 11298  07F5  01ED               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 11299  07F6  0008               	return
 11300  07F7                     __end_of_BVH2_Appl_Layer:	
 11301                           
 11302                           	psect	swtext2
 11303  1868                     __pswtext2:	
 11304  1868                     S11712:	
 11305  1868  3181  2921         	ljmp	l9134
 11306  186A  3181  2919         	ljmp	l9130
 11307  186C  3181  2905         	ljmp	l9120
 11308  186E  3181  290D         	ljmp	l9124
 11309  1870  3181  291D         	ljmp	l9132
 11310  1872  3181  2911         	ljmp	l9126
 11311  1874  3181  2915         	ljmp	l9128
 11312  1876  3181  2909         	ljmp	l9122
 11313                           
 11314                           	psect	text28
 11315  1EE4                     __ptext28:	
 11316 ;; *************** function ___wmul *****************
 11317 ;; Defined at:
 11318 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;  multiplier      2    8[BANK0 ] unsigned int 
 11321 ;;  multiplicand    2   10[BANK0 ] unsigned int 
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;  product         2   12[BANK0 ] unsigned int 
 11324 ;; Return value:  Size  Location     Type
 11325 ;;                  2    8[BANK0 ] unsigned int 
 11326 ;; Registers used:
 11327 ;;		wreg, status,2, status,0
 11328 ;; Tracked objects:
 11329 ;;		On entry : 0/0
 11330 ;;		On exit  : 0/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11333 ;;      Params:         0       4       0       0       0       0       0       0
 11334 ;;      Locals:         0       2       0       0       0       0       0       0
 11335 ;;      Temps:          0       0       0       0       0       0       0       0
 11336 ;;      Totals:         0       6       0       0       0       0       0       0
 11337 ;;Total ram usage:        6 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:    3
 11340 ;; This function calls:
 11341 ;;		Nothing
 11342 ;; This function is called by:
 11343 ;;		_EOL
 11344 ;;		_interrrupt_bldc
 11345 ;;		_main
 11346 ;;		_BVH2_Appl_Layer
 11347 ;; This function uses a non-reentrant model
 11348 ;;
 11349                           
 11350                           
 11351                           ;psect for function ___wmul
 11352  1EE4                     ___wmul:	
 11353                           
 11354                           ;incstack = 0
 11355                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11356  1EE4  0020               	movlb	0	; select bank0
 11357  1EE5  01AC               	clrf	___wmul@product
 11358  1EE6  01AD               	clrf	___wmul@product+1
 11359  1EE7                     l8612:	
 11360  1EE7  1C28               	btfss	___wmul@multiplier,0
 11361  1EE8  2EED               	goto	l1844
 11362  1EE9  082A               	movf	___wmul@multiplicand,w
 11363  1EEA  07AC               	addwf	___wmul@product,f
 11364  1EEB  082B               	movf	___wmul@multiplicand+1,w
 11365  1EEC  3DAD               	addwfc	___wmul@product+1,f
 11366  1EED                     l1844:	
 11367  1EED  3001               	movlw	1
 11368  1EEE                     u6325:	
 11369  1EEE  35AA               	lslf	___wmul@multiplicand,f
 11370  1EEF  0DAB               	rlf	___wmul@multiplicand+1,f
 11371  1EF0  0B89               	decfsz	9,f
 11372  1EF1  2EEE               	goto	u6325
 11373  1EF2  3001               	movlw	1
 11374  1EF3                     u6335:	
 11375  1EF3  36A9               	lsrf	___wmul@multiplier+1,f
 11376  1EF4  0CA8               	rrf	___wmul@multiplier,f
 11377  1EF5  0B89               	decfsz	9,f
 11378  1EF6  2EF3               	goto	u6335
 11379  1EF7  0828               	movf	___wmul@multiplier,w
 11380  1EF8  0429               	iorwf	___wmul@multiplier+1,w
 11381  1EF9  1D03               	btfss	3,2
 11382  1EFA  2EE7               	goto	l8612
 11383  1EFB  082D               	movf	___wmul@product+1,w
 11384  1EFC  00A9               	movwf	?___wmul+1
 11385  1EFD  082C               	movf	___wmul@product,w
 11386  1EFE  00A8               	movwf	?___wmul
 11387  1EFF  0008               	return
 11388  1F00                     __end_of___wmul:	
 11389                           
 11390                           	psect	text29
 11391  11D2                     __ptext29:	
 11392 ;; *************** function ___lmul *****************
 11393 ;; Defined at:
 11394 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;  multiplier      4    8[BANK0 ] unsigned long 
 11397 ;;  multiplicand    4   12[BANK0 ] unsigned long 
 11398 ;; Auto vars:     Size  Location     Type
 11399 ;;  product         4   16[BANK0 ] unsigned long 
 11400 ;; Return value:  Size  Location     Type
 11401 ;;                  4    8[BANK0 ] unsigned long 
 11402 ;; Registers used:
 11403 ;;		wreg, status,2, status,0
 11404 ;; Tracked objects:
 11405 ;;		On entry : 0/0
 11406 ;;		On exit  : 0/0
 11407 ;;		Unchanged: 0/0
 11408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11409 ;;      Params:         0       8       0       0       0       0       0       0
 11410 ;;      Locals:         0       4       0       0       0       0       0       0
 11411 ;;      Temps:          0       0       0       0       0       0       0       0
 11412 ;;      Totals:         0      12       0       0       0       0       0       0
 11413 ;;Total ram usage:       12 bytes
 11414 ;; Hardware stack levels used:    1
 11415 ;; Hardware stack levels required when called:    3
 11416 ;; This function calls:
 11417 ;;		Nothing
 11418 ;; This function is called by:
 11419 ;;		_BVH2_Appl_Layer
 11420 ;; This function uses a non-reentrant model
 11421 ;;
 11422                           
 11423                           
 11424                           ;psect for function ___lmul
 11425  11D2                     ___lmul:	
 11426                           
 11427                           ;incstack = 0
 11428                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11429  11D2  3000               	movlw	0
 11430  11D3  0020               	movlb	0	; select bank0
 11431  11D4  00B3               	movwf	___lmul@product+3
 11432  11D5  3000               	movlw	0
 11433  11D6  00B2               	movwf	___lmul@product+2
 11434  11D7  3000               	movlw	0
 11435  11D8  00B1               	movwf	___lmul@product+1
 11436  11D9  3000               	movlw	0
 11437  11DA  00B0               	movwf	___lmul@product
 11438  11DB                     l8626:	
 11439  11DB  1C28               	btfss	___lmul@multiplier,0
 11440  11DC  29E5               	goto	l8630
 11441  11DD  082C               	movf	___lmul@multiplicand,w
 11442  11DE  07B0               	addwf	___lmul@product,f
 11443  11DF  082D               	movf	___lmul@multiplicand+1,w
 11444  11E0  3DB1               	addwfc	___lmul@product+1,f
 11445  11E1  082E               	movf	___lmul@multiplicand+2,w
 11446  11E2  3DB2               	addwfc	___lmul@product+2,f
 11447  11E3  082F               	movf	___lmul@multiplicand+3,w
 11448  11E4  3DB3               	addwfc	___lmul@product+3,f
 11449  11E5                     l8630:	
 11450  11E5  3001               	movlw	1
 11451  11E6                     u6365:	
 11452  11E6  35AC               	lslf	___lmul@multiplicand,f
 11453  11E7  0DAD               	rlf	___lmul@multiplicand+1,f
 11454  11E8  0DAE               	rlf	___lmul@multiplicand+2,f
 11455  11E9  0DAF               	rlf	___lmul@multiplicand+3,f
 11456  11EA  0B89               	decfsz	9,f
 11457  11EB  29E6               	goto	u6365
 11458  11EC  3001               	movlw	1
 11459  11ED                     u6375:	
 11460  11ED  36AB               	lsrf	___lmul@multiplier+3,f
 11461  11EE  0CAA               	rrf	___lmul@multiplier+2,f
 11462  11EF  0CA9               	rrf	___lmul@multiplier+1,f
 11463  11F0  0CA8               	rrf	___lmul@multiplier,f
 11464  11F1  0B89               	decfsz	9,f
 11465  11F2  29ED               	goto	u6375
 11466  11F3  082B               	movf	___lmul@multiplier+3,w
 11467  11F4  042A               	iorwf	___lmul@multiplier+2,w
 11468  11F5  0429               	iorwf	___lmul@multiplier+1,w
 11469  11F6  0428               	iorwf	___lmul@multiplier,w
 11470  11F7  1D03               	skipz
 11471  11F8  29DB               	goto	l8626
 11472  11F9  0833               	movf	___lmul@product+3,w
 11473  11FA  00AB               	movwf	?___lmul+3
 11474  11FB  0832               	movf	___lmul@product+2,w
 11475  11FC  00AA               	movwf	?___lmul+2
 11476  11FD  0831               	movf	___lmul@product+1,w
 11477  11FE  00A9               	movwf	?___lmul+1
 11478  11FF  0830               	movf	___lmul@product,w
 11479  1200  00A8               	movwf	?___lmul
 11480  1201  0008               	return
 11481  1202                     __end_of___lmul:	
 11482                           
 11483                           	psect	text30
 11484  1563                     __ptext30:	
 11485 ;; *************** function ___aldiv *****************
 11486 ;; Defined at:
 11487 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;  divisor         4    8[BANK0 ] long 
 11490 ;;  dividend        4   12[BANK0 ] long 
 11491 ;; Auto vars:     Size  Location     Type
 11492 ;;  quotient        4   19[BANK0 ] long 
 11493 ;;  sign            1   18[BANK0 ] unsigned char 
 11494 ;;  counter         1   17[BANK0 ] unsigned char 
 11495 ;; Return value:  Size  Location     Type
 11496 ;;                  4    8[BANK0 ] long 
 11497 ;; Registers used:
 11498 ;;		wreg, status,2, status,0
 11499 ;; Tracked objects:
 11500 ;;		On entry : 0/0
 11501 ;;		On exit  : 0/0
 11502 ;;		Unchanged: 0/0
 11503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11504 ;;      Params:         0       8       0       0       0       0       0       0
 11505 ;;      Locals:         0       6       0       0       0       0       0       0
 11506 ;;      Temps:          0       1       0       0       0       0       0       0
 11507 ;;      Totals:         0      15       0       0       0       0       0       0
 11508 ;;Total ram usage:       15 bytes
 11509 ;; Hardware stack levels used:    1
 11510 ;; Hardware stack levels required when called:    3
 11511 ;; This function calls:
 11512 ;;		Nothing
 11513 ;; This function is called by:
 11514 ;;		_BVH2_Appl_Layer
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           
 11519                           ;psect for function ___aldiv
 11520  1563                     ___aldiv:	
 11521                           
 11522                           ;incstack = 0
 11523                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11524  1563  0020               	movlb	0	; select bank0
 11525  1564  01B2               	clrf	___aldiv@sign
 11526  1565  1FAB               	btfss	___aldiv@divisor+3,7
 11527  1566  2D74               	goto	l1909
 11528  1567  09A8               	comf	___aldiv@divisor,f
 11529  1568  09A9               	comf	___aldiv@divisor+1,f
 11530  1569  09AA               	comf	___aldiv@divisor+2,f
 11531  156A  09AB               	comf	___aldiv@divisor+3,f
 11532  156B  0AA8               	incf	___aldiv@divisor,f
 11533  156C  1903               	skipnz
 11534  156D  0AA9               	incf	___aldiv@divisor+1,f
 11535  156E  1903               	skipnz
 11536  156F  0AAA               	incf	___aldiv@divisor+2,f
 11537  1570  1903               	skipnz
 11538  1571  0AAB               	incf	___aldiv@divisor+3,f
 11539  1572  01B2               	clrf	___aldiv@sign
 11540  1573  0AB2               	incf	___aldiv@sign,f
 11541  1574                     l1909:	
 11542  1574  1FAF               	btfss	___aldiv@dividend+3,7
 11543  1575  2D85               	goto	l8648
 11544  1576  09AC               	comf	___aldiv@dividend,f
 11545  1577  09AD               	comf	___aldiv@dividend+1,f
 11546  1578  09AE               	comf	___aldiv@dividend+2,f
 11547  1579  09AF               	comf	___aldiv@dividend+3,f
 11548  157A  0AAC               	incf	___aldiv@dividend,f
 11549  157B  1903               	skipnz
 11550  157C  0AAD               	incf	___aldiv@dividend+1,f
 11551  157D  1903               	skipnz
 11552  157E  0AAE               	incf	___aldiv@dividend+2,f
 11553  157F  1903               	skipnz
 11554  1580  0AAF               	incf	___aldiv@dividend+3,f
 11555  1581  3001               	movlw	1
 11556  1582  00B0               	movwf	??___aldiv
 11557  1583  0830               	movf	??___aldiv,w
 11558  1584  06B2               	xorwf	___aldiv@sign,f
 11559  1585                     l8648:	
 11560  1585  3000               	movlw	0
 11561  1586  00B6               	movwf	___aldiv@quotient+3
 11562  1587  3000               	movlw	0
 11563  1588  00B5               	movwf	___aldiv@quotient+2
 11564  1589  3000               	movlw	0
 11565  158A  00B4               	movwf	___aldiv@quotient+1
 11566  158B  3000               	movlw	0
 11567  158C  00B3               	movwf	___aldiv@quotient
 11568  158D  082B               	movf	___aldiv@divisor+3,w
 11569  158E  042A               	iorwf	___aldiv@divisor+2,w
 11570  158F  0429               	iorwf	___aldiv@divisor+1,w
 11571  1590  0428               	iorwf	___aldiv@divisor,w
 11572  1591  1903               	skipnz
 11573  1592  2DCE               	goto	l8670
 11574  1593  01B1               	clrf	___aldiv@counter
 11575  1594  0AB1               	incf	___aldiv@counter,f
 11576  1595                     l8656:	
 11577  1595  1BAB               	btfsc	___aldiv@divisor+3,7
 11578  1596  2DA3               	goto	l8658
 11579  1597  3001               	movlw	1
 11580  1598                     u6425:	
 11581  1598  35A8               	lslf	___aldiv@divisor,f
 11582  1599  0DA9               	rlf	___aldiv@divisor+1,f
 11583  159A  0DAA               	rlf	___aldiv@divisor+2,f
 11584  159B  0DAB               	rlf	___aldiv@divisor+3,f
 11585  159C  0B89               	decfsz	9,f
 11586  159D  2D98               	goto	u6425
 11587  159E  3001               	movlw	1
 11588  159F  00B0               	movwf	??___aldiv
 11589  15A0  0830               	movf	??___aldiv,w
 11590  15A1  07B1               	addwf	___aldiv@counter,f
 11591  15A2  2D95               	goto	l8656
 11592  15A3                     l8658:	
 11593  15A3  3001               	movlw	1
 11594  15A4                     u6445:	
 11595  15A4  35B3               	lslf	___aldiv@quotient,f
 11596  15A5  0DB4               	rlf	___aldiv@quotient+1,f
 11597  15A6  0DB5               	rlf	___aldiv@quotient+2,f
 11598  15A7  0DB6               	rlf	___aldiv@quotient+3,f
 11599  15A8  0B89               	decfsz	9,f
 11600  15A9  2DA4               	goto	u6445
 11601  15AA  082B               	movf	___aldiv@divisor+3,w
 11602  15AB  022F               	subwf	___aldiv@dividend+3,w
 11603  15AC  1D03               	skipz
 11604  15AD  2DB8               	goto	u6455
 11605  15AE  082A               	movf	___aldiv@divisor+2,w
 11606  15AF  022E               	subwf	___aldiv@dividend+2,w
 11607  15B0  1D03               	skipz
 11608  15B1  2DB8               	goto	u6455
 11609  15B2  0829               	movf	___aldiv@divisor+1,w
 11610  15B3  022D               	subwf	___aldiv@dividend+1,w
 11611  15B4  1D03               	skipz
 11612  15B5  2DB8               	goto	u6455
 11613  15B6  0828               	movf	___aldiv@divisor,w
 11614  15B7  022C               	subwf	___aldiv@dividend,w
 11615  15B8                     u6455:	
 11616  15B8  1C03               	skipc
 11617  15B9  2DC3               	goto	l8666
 11618  15BA  0828               	movf	___aldiv@divisor,w
 11619  15BB  02AC               	subwf	___aldiv@dividend,f
 11620  15BC  0829               	movf	___aldiv@divisor+1,w
 11621  15BD  3BAD               	subwfb	___aldiv@dividend+1,f
 11622  15BE  082A               	movf	___aldiv@divisor+2,w
 11623  15BF  3BAE               	subwfb	___aldiv@dividend+2,f
 11624  15C0  082B               	movf	___aldiv@divisor+3,w
 11625  15C1  3BAF               	subwfb	___aldiv@dividend+3,f
 11626  15C2  1433               	bsf	___aldiv@quotient,0
 11627  15C3                     l8666:	
 11628  15C3  3001               	movlw	1
 11629  15C4                     u6465:	
 11630  15C4  36AB               	lsrf	___aldiv@divisor+3,f
 11631  15C5  0CAA               	rrf	___aldiv@divisor+2,f
 11632  15C6  0CA9               	rrf	___aldiv@divisor+1,f
 11633  15C7  0CA8               	rrf	___aldiv@divisor,f
 11634  15C8  0B89               	decfsz	9,f
 11635  15C9  2DC4               	goto	u6465
 11636  15CA  3001               	movlw	1
 11637  15CB  02B1               	subwf	___aldiv@counter,f
 11638  15CC  1D03               	btfss	3,2
 11639  15CD  2DA3               	goto	l8658
 11640  15CE                     l8670:	
 11641  15CE  0832               	movf	___aldiv@sign,w
 11642  15CF  1903               	btfsc	3,2
 11643  15D0  2DDC               	goto	l8674
 11644  15D1  09B3               	comf	___aldiv@quotient,f
 11645  15D2  09B4               	comf	___aldiv@quotient+1,f
 11646  15D3  09B5               	comf	___aldiv@quotient+2,f
 11647  15D4  09B6               	comf	___aldiv@quotient+3,f
 11648  15D5  0AB3               	incf	___aldiv@quotient,f
 11649  15D6  1903               	skipnz
 11650  15D7  0AB4               	incf	___aldiv@quotient+1,f
 11651  15D8  1903               	skipnz
 11652  15D9  0AB5               	incf	___aldiv@quotient+2,f
 11653  15DA  1903               	skipnz
 11654  15DB  0AB6               	incf	___aldiv@quotient+3,f
 11655  15DC                     l8674:	
 11656  15DC  0836               	movf	___aldiv@quotient+3,w
 11657  15DD  00AB               	movwf	?___aldiv+3
 11658  15DE  0835               	movf	___aldiv@quotient+2,w
 11659  15DF  00AA               	movwf	?___aldiv+2
 11660  15E0  0834               	movf	___aldiv@quotient+1,w
 11661  15E1  00A9               	movwf	?___aldiv+1
 11662  15E2  0833               	movf	___aldiv@quotient,w
 11663  15E3  00A8               	movwf	?___aldiv
 11664  15E4  0008               	return
 11665  15E5                     __end_of___aldiv:	
 11666                           
 11667                           	psect	text31
 11668  1392                     __ptext31:	
 11669 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 11670 ;; Defined at:
 11671 ;;		line 1889 in file "../T_Link/BVH2_Appl_Layer.c"
 11672 ;; Parameters:    Size  Location     Type
 11673 ;;		None
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;		None
 11676 ;; Return value:  Size  Location     Type
 11677 ;;                  1    wreg      void 
 11678 ;; Registers used:
 11679 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11680 ;; Tracked objects:
 11681 ;;		On entry : 0/0
 11682 ;;		On exit  : 0/0
 11683 ;;		Unchanged: 0/0
 11684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11685 ;;      Params:         0       0       0       0       0       0       0       0
 11686 ;;      Locals:         0       0       0       0       0       0       0       0
 11687 ;;      Temps:          0       0       0       0       0       0       0       0
 11688 ;;      Totals:         0       0       0       0       0       0       0       0
 11689 ;;Total ram usage:        0 bytes
 11690 ;; Hardware stack levels used:    1
 11691 ;; Hardware stack levels required when called:    3
 11692 ;; This function calls:
 11693 ;;		Nothing
 11694 ;; This function is called by:
 11695 ;;		_BVH2_Appl_Layer
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           
 11700                           ;psect for function _Cb56_UbatHandling_node_fcn2
 11701  1392                     _Cb56_UbatHandling_node_fcn2:	
 11702                           
 11703                           ;BVH2_Appl_Layer.c: 1892: if (((UInt8)ui8_BattVolt_mat) > 147) {
 11704                           
 11705                           ;incstack = 0
 11706                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 11707  1392  3094               	movlw	148
 11708  1393  0021               	movlb	1	; select bank1
 11709  1394  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
 11710  1395  1803               	btfsc	3,0
 11711  1396  2B9E               	goto	l8570
 11712  1397  2BB8               	goto	l8576
 11713  1398                     l1640:	
 11714                           ;BVH2_Appl_Layer.c: 1895: case 2: {
 11715                           
 11716                           ;BVH2_Appl_Layer.c: 1894: switch (SIBFS_UbatHandling_b.Aux_sflag3) {
 11717                           
 11718                           
 11719                           ;BVH2_Appl_Layer.c: 1896: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 11720  1398  1257               	bcf	_SIBFS_UbatHandling_b,4
 11721                           
 11722                           ;BVH2_Appl_Layer.c: 1897: break;
 11723  1399  2BA8               	goto	l1641
 11724  139A                     l1642:	
 11725                           ;BVH2_Appl_Layer.c: 1898: };BVH2_Appl_Layer.c: 1899: case 3: {
 11726                           
 11727                           
 11728                           ;BVH2_Appl_Layer.c: 1900: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 11729  139A  12D7               	bcf	_SIBFS_UbatHandling_b,5
 11730                           
 11731                           ;BVH2_Appl_Layer.c: 1901: break;
 11732  139B  2BA8               	goto	l1641
 11733  139C                     l1643:	
 11734                           ;BVH2_Appl_Layer.c: 1902: };BVH2_Appl_Layer.c: 1903: default: {
 11735                           
 11736                           
 11737                           ;BVH2_Appl_Layer.c: 1904: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 11738  139C  1357               	bcf	_SIBFS_UbatHandling_b,6
 11739                           
 11740                           ;BVH2_Appl_Layer.c: 1905: };BVH2_Appl_Layer.c: 1906: }
 11741  139D  2BA8               	goto	l1641
 11742  139E                     l8570:	
 11743  139E  0020               	movlb	0	; select bank0
 11744  139F  0857               	movf	_SIBFS_UbatHandling_b,w
 11745  13A0  3907               	andlw	7
 11746                           
 11747                           ; Switch size 1, requested type "space"
 11748                           ; Number of cases is 2, Range of values is 2 to 3
 11749                           ; switch strategies available:
 11750                           ; Name         Instructions Cycles
 11751                           ; simple_byte            7     4 (average)
 11752                           ; direct_byte           13     9 (fixed)
 11753                           ; jumptable            263     9 (fixed)
 11754                           ;	Chosen strategy is simple_byte
 11755  13A1  3A02               	xorlw	2	; case 2
 11756  13A2  1903               	skipnz
 11757  13A3  2B98               	goto	l1640
 11758  13A4  3A01               	xorlw	1	; case 3
 11759  13A5  1903               	skipnz
 11760  13A6  2B9A               	goto	l1642
 11761  13A7  2B9C               	goto	l1643
 11762  13A8                     l1641:	
 11763                           
 11764                           ;BVH2_Appl_Layer.c: 1907: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 11765  13A8  1657               	bsf	_SIBFS_UbatHandling_b,4
 11766                           
 11767                           ;BVH2_Appl_Layer.c: 1908: Cb56_odPumpOff = 1;
 11768  13A9  0022               	movlb	2	; select bank2
 11769  13AA  01B4               	clrf	_Cb56_odPumpOff^(0+256)
 11770  13AB  0AB4               	incf	_Cb56_odPumpOff^(0+256),f
 11771                           
 11772                           ;BVH2_Appl_Layer.c: 1909: Cb56_odFixedValueSel = 0;
 11773  13AC  0021               	movlb	1	; select bank1
 11774  13AD  01C6               	clrf	_Cb56_odFixedValueSel^(0+128)
 11775                           
 11776                           ;BVH2_Appl_Layer.c: 1910: Cb56_oUbat_Alarm_High = 1;
 11777  13AE  0022               	movlb	2	; select bank2
 11778  13AF  01B5               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 11779  13B0  0AB5               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 11780                           
 11781                           ;BVH2_Appl_Layer.c: 1911: }
 11782  13B1  0008               	return
 11783  13B2                     l1646:	
 11784                           ;BVH2_Appl_Layer.c: 1914: case 2: {
 11785                           
 11786                           ;BVH2_Appl_Layer.c: 1912: else {;BVH2_Appl_Layer.c: 1913: switch (SIBFS_UbatHandling_b.A
      +                          ux_sflag3) {
 11787                           
 11788                           
 11789                           ;BVH2_Appl_Layer.c: 1915: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 11790  13B2  1257               	bcf	_SIBFS_UbatHandling_b,4
 11791                           
 11792                           ;BVH2_Appl_Layer.c: 1916: break;
 11793  13B3  2BC2               	goto	l8578
 11794  13B4                     l1648:	
 11795                           ;BVH2_Appl_Layer.c: 1917: };BVH2_Appl_Layer.c: 1918: case 3: {
 11796                           
 11797                           
 11798                           ;BVH2_Appl_Layer.c: 1919: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 11799  13B4  12D7               	bcf	_SIBFS_UbatHandling_b,5
 11800                           
 11801                           ;BVH2_Appl_Layer.c: 1920: break;
 11802  13B5  2BC2               	goto	l8578
 11803  13B6                     l1649:	
 11804                           ;BVH2_Appl_Layer.c: 1921: };BVH2_Appl_Layer.c: 1922: default: {
 11805                           
 11806                           
 11807                           ;BVH2_Appl_Layer.c: 1923: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 11808  13B6  1357               	bcf	_SIBFS_UbatHandling_b,6
 11809                           
 11810                           ;BVH2_Appl_Layer.c: 1924: };BVH2_Appl_Layer.c: 1925: }
 11811  13B7  2BC2               	goto	l8578
 11812  13B8                     l8576:	
 11813  13B8  0020               	movlb	0	; select bank0
 11814  13B9  0857               	movf	_SIBFS_UbatHandling_b,w
 11815  13BA  3907               	andlw	7
 11816                           
 11817                           ; Switch size 1, requested type "space"
 11818                           ; Number of cases is 2, Range of values is 2 to 3
 11819                           ; switch strategies available:
 11820                           ; Name         Instructions Cycles
 11821                           ; simple_byte            7     4 (average)
 11822                           ; direct_byte           13     9 (fixed)
 11823                           ; jumptable            263     9 (fixed)
 11824                           ;	Chosen strategy is simple_byte
 11825  13BB  3A02               	xorlw	2	; case 2
 11826  13BC  1903               	skipnz
 11827  13BD  2BB2               	goto	l1646
 11828  13BE  3A01               	xorlw	1	; case 3
 11829  13BF  1903               	skipnz
 11830  13C0  2BB4               	goto	l1648
 11831  13C1  2BB6               	goto	l1649
 11832  13C2                     l8578:	
 11833                           
 11834                           ;BVH2_Appl_Layer.c: 1928: if (((UInt8)ui8_BattVolt_mat) < 45) {
 11835  13C2  302D               	movlw	45
 11836  13C3  0021               	movlb	1	; select bank1
 11837  13C4  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
 11838  13C5  1803               	skipnc
 11839  13C6  2BD2               	goto	l1650
 11840                           
 11841                           ;BVH2_Appl_Layer.c: 1930: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 11842  13C7  0020               	movlb	0	; select bank0
 11843  13C8  16D7               	bsf	_SIBFS_UbatHandling_b,5
 11844                           
 11845                           ;BVH2_Appl_Layer.c: 1931: Cb56_odPumpOff = 1;
 11846  13C9  0022               	movlb	2	; select bank2
 11847  13CA  01B4               	clrf	_Cb56_odPumpOff^(0+256)
 11848  13CB  0AB4               	incf	_Cb56_odPumpOff^(0+256),f
 11849                           
 11850                           ;BVH2_Appl_Layer.c: 1932: Cb56_odFixedValueSel = 0;
 11851  13CC  0021               	movlb	1	; select bank1
 11852  13CD  01C6               	clrf	_Cb56_odFixedValueSel^(0+128)
 11853                           
 11854                           ;BVH2_Appl_Layer.c: 1933: Cb56_oUbat_Alarm_High = 1;
 11855  13CE  0022               	movlb	2	; select bank2
 11856  13CF  01B5               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 11857  13D0  0AB5               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 11858                           
 11859                           ;BVH2_Appl_Layer.c: 1934: }
 11860  13D1  0008               	return
 11861  13D2                     l1650:	
 11862                           
 11863                           ;BVH2_Appl_Layer.c: 1935: else {;BVH2_Appl_Layer.c: 1937: SIBFS_UbatHandling_b.Cb60_Norm
      +                          alUbat = 1;
 11864  13D2  0020               	movlb	0	; select bank0
 11865  13D3  1757               	bsf	_SIBFS_UbatHandling_b,6
 11866                           
 11867                           ;BVH2_Appl_Layer.c: 1938: Cb56_odPumpOff = 0;
 11868  13D4  0022               	movlb	2	; select bank2
 11869  13D5  01B4               	clrf	_Cb56_odPumpOff^(0+256)
 11870                           
 11871                           ;BVH2_Appl_Layer.c: 1939: Cb56_odFixedValueSel = 0;
 11872  13D6  0021               	movlb	1	; select bank1
 11873  13D7  01C6               	clrf	_Cb56_odFixedValueSel^(0+128)
 11874                           
 11875                           ;BVH2_Appl_Layer.c: 1940: Cb56_oUbat_Alarm_High = 0;
 11876  13D8  0022               	movlb	2	; select bank2
 11877  13D9  01B5               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 11878  13DA  0008               	return
 11879  13DB                     __end_of_Cb56_UbatHandling_node_fcn2:	
 11880                           
 11881                           	psect	text32
 11882  1F67                     __ptext32:	
 11883 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 11884 ;; Defined at:
 11885 ;;		line 1848 in file "../T_Link/BVH2_Appl_Layer.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;		None
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;		None
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      void 
 11892 ;; Registers used:
 11893 ;;		wreg, status,2, status,0
 11894 ;; Tracked objects:
 11895 ;;		On entry : 0/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11899 ;;      Params:         0       0       0       0       0       0       0       0
 11900 ;;      Locals:         0       0       0       0       0       0       0       0
 11901 ;;      Temps:          0       0       0       0       0       0       0       0
 11902 ;;      Totals:         0       0       0       0       0       0       0       0
 11903 ;;Total ram usage:        0 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    3
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_BVH2_Appl_Layer
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           
 11914                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
 11915  1F67                     _Cb44_Pic_etat_monitor_node_fcn1:	
 11916                           
 11917                           ;BVH2_Appl_Layer.c: 1852: if (bool_mat_pic_etat) {
 11918                           
 11919                           ;incstack = 0
 11920                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 11921  1F67  0021               	movlb	1	; select bank1
 11922  1F68  084B               	movf	_bool_mat_pic_etat^(0+128),w
 11923  1F69  1903               	btfsc	3,2
 11924  1F6A  2F74               	goto	l8438
 11925                           
 11926                           ;BVH2_Appl_Layer.c: 1854: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)2;
 11927  1F6B  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 11928  1F6C  39F8               	andlw	-8
 11929  1F6D  3802               	iorlw	2
 11930  1F6E  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 11931                           
 11932                           ;BVH2_Appl_Layer.c: 1855: Cb44_StateCnt = 0 ;
 11933  1F6F  01A4               	clrf	_Cb44_StateCnt^(0+128)
 11934  1F70  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
 11935                           
 11936                           ;BVH2_Appl_Layer.c: 1856: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 11937  1F71  3018               	movlw	24
 11938  1F72  04C7               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 11939                           
 11940                           ;BVH2_Appl_Layer.c: 1857: }
 11941  1F73  0008               	return
 11942  1F74                     l8438:	
 11943                           
 11944                           ;BVH2_Appl_Layer.c: 1858: else {;BVH2_Appl_Layer.c: 1859: if (Cb44_StateCnt > 5) {
 11945  1F74  3000               	movlw	0
 11946  1F75  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 11947  1F76  3006               	movlw	6
 11948  1F77  1903               	skipnz
 11949  1F78  0224               	subwf	_Cb44_StateCnt^(0+128),w
 11950  1F79  1C03               	skipc
 11951  1F7A  2F86               	goto	l8446
 11952                           
 11953                           ;BVH2_Appl_Layer.c: 1861: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 11954  1F7B  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 11955  1F7C  39F8               	andlw	-8
 11956  1F7D  3803               	iorlw	3
 11957  1F7E  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 11958                           
 11959                           ;BVH2_Appl_Layer.c: 1862: Cb44_oShutoff = 0;
 11960  1F7F  0022               	movlb	2	; select bank2
 11961  1F80  01B6               	clrf	_Cb44_oShutoff^(0+256)
 11962                           
 11963                           ;BVH2_Appl_Layer.c: 1863: Cb44_oAlarm = 0;
 11964  1F81  01B7               	clrf	_Cb44_oAlarm^(0+256)
 11965                           
 11966                           ;BVH2_Appl_Layer.c: 1864: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 11967  1F82  3018               	movlw	24
 11968  1F83  0021               	movlb	1	; select bank1
 11969  1F84  04C7               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 11970                           
 11971                           ;BVH2_Appl_Layer.c: 1865: }
 11972  1F85  0008               	return
 11973  1F86                     l8446:	
 11974                           
 11975                           ;BVH2_Appl_Layer.c: 1866: else {;BVH2_Appl_Layer.c: 1867: SIBFS_Pic_etat_monitor_b.Cb44_
      +                          glflag = 1 ;
 11976  1F86  0847               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 11977  1F87  39E7               	andlw	-25
 11978  1F88  3808               	iorlw	8
 11979  1F89  00C7               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 11980  1F8A  0008               	return
 11981  1F8B                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 11982                           
 11983                           	psect	text33
 11984  15E5                     __ptext33:	
 11985 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 11986 ;; Defined at:
 11987 ;;		line 1727 in file "../T_Link/BVH2_Appl_Layer.c"
 11988 ;; Parameters:    Size  Location     Type
 11989 ;;		None
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;		None
 11992 ;; Return value:  Size  Location     Type
 11993 ;;                  1    wreg      void 
 11994 ;; Registers used:
 11995 ;;		wreg, status,2, status,0
 11996 ;; Tracked objects:
 11997 ;;		On entry : 0/0
 11998 ;;		On exit  : 0/0
 11999 ;;		Unchanged: 0/0
 12000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12001 ;;      Params:         0       0       0       0       0       0       0       0
 12002 ;;      Locals:         0       0       0       0       0       0       0       0
 12003 ;;      Temps:          0       0       0       0       0       0       0       0
 12004 ;;      Totals:         0       0       0       0       0       0       0       0
 12005 ;;Total ram usage:        0 bytes
 12006 ;; Hardware stack levels used:    1
 12007 ;; Hardware stack levels required when called:    3
 12008 ;; This function calls:
 12009 ;;		Nothing
 12010 ;; This function is called by:
 12011 ;;		_BVH2_Appl_Layer
 12012 ;; This function uses a non-reentrant model
 12013 ;;
 12014                           
 12015                           
 12016                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 12017  15E5                     _Cb34_PWM_Detection_node_fcn1:	
 12018                           
 12019                           ;BVH2_Appl_Layer.c: 1729: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 12020                           
 12021                           ;incstack = 0
 12022                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 12023  15E5  0020               	movlb	0	; select bank0
 12024  15E6  0856               	movf	_Cb34_idPWM,w
 12025  15E7  1903               	btfsc	3,2
 12026  15E8  2DED               	goto	l8452
 12027  15E9  30C8               	movlw	200
 12028  15EA  0256               	subwf	_Cb34_idPWM,w
 12029  15EB  1C03               	skipc
 12030  15EC  2DFF               	goto	l8466
 12031  15ED                     l8452:	
 12032                           
 12033                           ;BVH2_Appl_Layer.c: 1730: if (Cb34_idPWM > 199) {
 12034  15ED  30C8               	movlw	200
 12035  15EE  0256               	subwf	_Cb34_idPWM,w
 12036  15EF  1C03               	skipc
 12037  15F0  0008               	return
 12038                           
 12039                           ;BVH2_Appl_Layer.c: 1732: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 12040  15F1  0021               	movlb	1	; select bank1
 12041  15F2  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12042  15F3  39F0               	andlw	-16
 12043  15F4  3807               	iorlw	7
 12044  15F5  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12045                           
 12046                           ;BVH2_Appl_Layer.c: 1733: Cb34_odPumpOff = 0;
 12047  15F6  0022               	movlb	2	; select bank2
 12048  15F7  01B8               	clrf	_Cb34_odPumpOff^(0+256)
 12049                           
 12050                           ;BVH2_Appl_Layer.c: 1734: Cb34_odFixedValueSel = 1;
 12051  15F8  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
 12052  15F9  0AB9               	incf	_Cb34_odFixedValueSel^(0+256),f
 12053                           
 12054                           ;BVH2_Appl_Layer.c: 1735: Cb34_odFixedLowValueSel = 0;
 12055  15FA  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12056                           
 12057                           ;BVH2_Appl_Layer.c: 1736: Cb34_oPWM_SC_Alarm = 0;
 12058  15FB  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12059                           
 12060                           ;BVH2_Appl_Layer.c: 1737: Cb34_oPWM_Alarm = 1;
 12061  15FC  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12062  15FD  0ABC               	incf	_Cb34_oPWM_Alarm^(0+256),f
 12063                           
 12064                           ;BVH2_Appl_Layer.c: 1738: };BVH2_Appl_Layer.c: 1739: }
 12065  15FE  0008               	return
 12066  15FF                     l8466:	
 12067                           
 12068                           ;BVH2_Appl_Layer.c: 1740: else {;BVH2_Appl_Layer.c: 1743: if ((ui16_PWM_Freq_mat < 36000
      +                          ) || (ui16_PWM_Freq_mat > 44000)) {
 12069  15FF  308C               	movlw	140
 12070  1600  0023               	movlb	3	; select bank3
 12071  1601  023F               	subwf	(_ui16_PWM_Freq_mat+1)^(0+384),w
 12072  1602  30A0               	movlw	160
 12073  1603  1903               	skipnz
 12074  1604  023E               	subwf	_ui16_PWM_Freq_mat^(0+384),w
 12075  1605  1C03               	skipc
 12076  1606  2E0E               	goto	l8470
 12077  1607  30AB               	movlw	171
 12078  1608  023F               	subwf	(_ui16_PWM_Freq_mat+1)^(0+384),w
 12079  1609  30E1               	movlw	225
 12080  160A  1903               	skipnz
 12081  160B  023E               	subwf	_ui16_PWM_Freq_mat^(0+384),w
 12082  160C  1C03               	skipc
 12083  160D  2E1C               	goto	l8482
 12084  160E                     l8470:	
 12085                           
 12086                           ;BVH2_Appl_Layer.c: 1745: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 12087  160E  0021               	movlb	1	; select bank1
 12088  160F  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12089  1610  39F0               	andlw	-16
 12090  1611  3806               	iorlw	6
 12091  1612  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12092                           
 12093                           ;BVH2_Appl_Layer.c: 1746: Cb34_odPumpOff = 0;
 12094  1613  0022               	movlb	2	; select bank2
 12095  1614  01B8               	clrf	_Cb34_odPumpOff^(0+256)
 12096                           
 12097                           ;BVH2_Appl_Layer.c: 1747: Cb34_odFixedValueSel = 1;
 12098  1615  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
 12099  1616  0AB9               	incf	_Cb34_odFixedValueSel^(0+256),f
 12100                           
 12101                           ;BVH2_Appl_Layer.c: 1748: Cb34_odFixedLowValueSel = 0;
 12102  1617  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12103                           
 12104                           ;BVH2_Appl_Layer.c: 1749: Cb34_oPWM_SC_Alarm = 1;
 12105  1618  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12106  1619  0ABB               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12107                           
 12108                           ;BVH2_Appl_Layer.c: 1750: Cb34_oPWM_Alarm = 0;
 12109  161A  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12110                           
 12111                           ;BVH2_Appl_Layer.c: 1751: }
 12112  161B  0008               	return
 12113  161C                     l8482:	
 12114                           
 12115                           ;BVH2_Appl_Layer.c: 1752: else {;BVH2_Appl_Layer.c: 1753: if (Cb34_idPWM <= 5) {
 12116  161C  3006               	movlw	6
 12117  161D  0020               	movlb	0	; select bank0
 12118  161E  0256               	subwf	_Cb34_idPWM,w
 12119  161F  1803               	skipnc
 12120  1620  2E2F               	goto	l8496
 12121                           
 12122                           ;BVH2_Appl_Layer.c: 1755: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 12123  1621  0021               	movlb	1	; select bank1
 12124  1622  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12125  1623  39F0               	andlw	-16
 12126  1624  3803               	iorlw	3
 12127  1625  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12128                           
 12129                           ;BVH2_Appl_Layer.c: 1756: Cb34_odPumpOff = 0;
 12130  1626  0022               	movlb	2	; select bank2
 12131  1627  01B8               	clrf	_Cb34_odPumpOff^(0+256)
 12132                           
 12133                           ;BVH2_Appl_Layer.c: 1757: Cb34_odFixedValueSel = 1;
 12134  1628  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
 12135  1629  0AB9               	incf	_Cb34_odFixedValueSel^(0+256),f
 12136                           
 12137                           ;BVH2_Appl_Layer.c: 1758: Cb34_odFixedLowValueSel = 0;
 12138  162A  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12139                           
 12140                           ;BVH2_Appl_Layer.c: 1759: Cb34_oPWM_SC_Alarm = 1;
 12141  162B  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12142  162C  0ABB               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12143                           
 12144                           ;BVH2_Appl_Layer.c: 1760: Cb34_oPWM_Alarm = 0;
 12145  162D  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12146                           
 12147                           ;BVH2_Appl_Layer.c: 1761: }
 12148  162E  0008               	return
 12149  162F                     l8496:	
 12150                           
 12151                           ;BVH2_Appl_Layer.c: 1762: else {;BVH2_Appl_Layer.c: 1763: if (Cb34_idPWM < 9) {
 12152  162F  3009               	movlw	9
 12153  1630  0020               	movlb	0	; select bank0
 12154  1631  0256               	subwf	_Cb34_idPWM,w
 12155  1632  1803               	skipnc
 12156  1633  2E42               	goto	l8510
 12157                           
 12158                           ;BVH2_Appl_Layer.c: 1766: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1767: (UInt8)8;
 12159  1634  0021               	movlb	1	; select bank1
 12160  1635  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12161  1636  39F0               	andlw	-16
 12162  1637  3808               	iorlw	8
 12163  1638  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12164                           
 12165                           ;BVH2_Appl_Layer.c: 1768: Cb34_odPumpOff = 1;
 12166  1639  0022               	movlb	2	; select bank2
 12167  163A  01B8               	clrf	_Cb34_odPumpOff^(0+256)
 12168  163B  0AB8               	incf	_Cb34_odPumpOff^(0+256),f
 12169                           
 12170                           ;BVH2_Appl_Layer.c: 1769: Cb34_odFixedValueSel = 0;
 12171  163C  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
 12172                           
 12173                           ;BVH2_Appl_Layer.c: 1770: Cb34_odFixedLowValueSel = 0;
 12174  163D  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12175                           
 12176                           ;BVH2_Appl_Layer.c: 1771: Cb34_oPWM_SC_Alarm = 1;
 12177  163E  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12178  163F  0ABB               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12179                           
 12180                           ;BVH2_Appl_Layer.c: 1772: Cb34_oPWM_Alarm = 0;
 12181  1640  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12182                           
 12183                           ;BVH2_Appl_Layer.c: 1773: }
 12184  1641  0008               	return
 12185  1642                     l8510:	
 12186                           
 12187                           ;BVH2_Appl_Layer.c: 1774: else {;BVH2_Appl_Layer.c: 1775: if (Cb34_idPWM > 191) {
 12188  1642  30C0               	movlw	192
 12189  1643  0020               	movlb	0	; select bank0
 12190  1644  0256               	subwf	_Cb34_idPWM,w
 12191  1645  1C03               	skipc
 12192  1646  2E55               	goto	l8524
 12193                           
 12194                           ;BVH2_Appl_Layer.c: 1778: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1779: (UInt8)4;
 12195  1647  0021               	movlb	1	; select bank1
 12196  1648  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12197  1649  39F0               	andlw	-16
 12198  164A  3804               	iorlw	4
 12199  164B  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12200                           
 12201                           ;BVH2_Appl_Layer.c: 1780: Cb34_odPumpOff = 0;
 12202  164C  0022               	movlb	2	; select bank2
 12203  164D  01B8               	clrf	_Cb34_odPumpOff^(0+256)
 12204                           
 12205                           ;BVH2_Appl_Layer.c: 1781: Cb34_odFixedValueSel = 1;
 12206  164E  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
 12207  164F  0AB9               	incf	_Cb34_odFixedValueSel^(0+256),f
 12208                           
 12209                           ;BVH2_Appl_Layer.c: 1782: Cb34_odFixedLowValueSel = 0;
 12210  1650  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12211                           
 12212                           ;BVH2_Appl_Layer.c: 1783: Cb34_oPWM_SC_Alarm = 1;
 12213  1651  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12214  1652  0ABB               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12215                           
 12216                           ;BVH2_Appl_Layer.c: 1784: Cb34_oPWM_Alarm = 0;
 12217  1653  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12218                           
 12219                           ;BVH2_Appl_Layer.c: 1785: }
 12220  1654  0008               	return
 12221  1655                     l8524:	
 12222                           
 12223                           ;BVH2_Appl_Layer.c: 1786: else {;BVH2_Appl_Layer.c: 1787: if (Cb34_idPWM >= 23) {
 12224  1655  3017               	movlw	23
 12225  1656  0020               	movlb	0	; select bank0
 12226  1657  0256               	subwf	_Cb34_idPWM,w
 12227  1658  1C03               	skipc
 12228  1659  2E66               	goto	l8538
 12229                           
 12230                           ;BVH2_Appl_Layer.c: 1790: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1791: (UInt8)2;
 12231  165A  0021               	movlb	1	; select bank1
 12232  165B  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12233  165C  39F0               	andlw	-16
 12234  165D  3802               	iorlw	2
 12235  165E  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12236                           
 12237                           ;BVH2_Appl_Layer.c: 1792: Cb34_odPumpOff = 0;
 12238  165F  0022               	movlb	2	; select bank2
 12239  1660  01B8               	clrf	_Cb34_odPumpOff^(0+256)
 12240                           
 12241                           ;BVH2_Appl_Layer.c: 1793: Cb34_odFixedLowValueSel = 0;
 12242  1661  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12243                           
 12244                           ;BVH2_Appl_Layer.c: 1794: Cb34_odFixedValueSel = 0;
 12245  1662  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
 12246                           
 12247                           ;BVH2_Appl_Layer.c: 1795: Cb34_oPWM_SC_Alarm = 0;
 12248  1663  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12249                           
 12250                           ;BVH2_Appl_Layer.c: 1796: Cb34_oPWM_Alarm = 0;
 12251  1664  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12252                           
 12253                           ;BVH2_Appl_Layer.c: 1797: }
 12254  1665  0008               	return
 12255  1666                     l8538:	
 12256                           
 12257                           ;BVH2_Appl_Layer.c: 1798: else {;BVH2_Appl_Layer.c: 1799: if (Cb34_idPWM > 19) {
 12258  1666  3014               	movlw	20
 12259  1667  0020               	movlb	0	; select bank0
 12260  1668  0256               	subwf	_Cb34_idPWM,w
 12261  1669  1C03               	skipc
 12262  166A  2E78               	goto	l8552
 12263                           
 12264                           ;BVH2_Appl_Layer.c: 1802: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1803: (UInt8)5;
 12265  166B  0021               	movlb	1	; select bank1
 12266  166C  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12267  166D  39F0               	andlw	-16
 12268  166E  3805               	iorlw	5
 12269  166F  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12270                           
 12271                           ;BVH2_Appl_Layer.c: 1804: Cb34_odPumpOff = 0;
 12272  1670  0022               	movlb	2	; select bank2
 12273  1671  01B8               	clrf	_Cb34_odPumpOff^(0+256)
 12274                           
 12275                           ;BVH2_Appl_Layer.c: 1805: Cb34_odFixedValueSel = 0;
 12276  1672  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
 12277                           
 12278                           ;BVH2_Appl_Layer.c: 1806: Cb34_odFixedLowValueSel = 1;
 12279  1673  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12280  1674  0ABA               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 12281                           
 12282                           ;BVH2_Appl_Layer.c: 1807: Cb34_oPWM_SC_Alarm = 0;
 12283  1675  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12284                           
 12285                           ;BVH2_Appl_Layer.c: 1808: Cb34_oPWM_Alarm = 0;
 12286  1676  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12287                           
 12288                           ;BVH2_Appl_Layer.c: 1809: }
 12289  1677  0008               	return
 12290  1678                     l8552:	
 12291                           
 12292                           ;BVH2_Appl_Layer.c: 1810: else {;BVH2_Appl_Layer.c: 1811: if (Cb34_idPWM <= 19) {
 12293  1678  3014               	movlw	20
 12294  1679  0020               	movlb	0	; select bank0
 12295  167A  0256               	subwf	_Cb34_idPWM,w
 12296  167B  1803               	skipnc
 12297  167C  0008               	return
 12298                           
 12299                           ;BVH2_Appl_Layer.c: 1814: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1815: (UInt8)1;
 12300  167D  0021               	movlb	1	; select bank1
 12301  167E  0848               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12302  167F  39F0               	andlw	-16
 12303  1680  3801               	iorlw	1
 12304  1681  00C8               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12305                           
 12306                           ;BVH2_Appl_Layer.c: 1816: Cb34_odPumpOff = 1;
 12307  1682  0022               	movlb	2	; select bank2
 12308  1683  01B8               	clrf	_Cb34_odPumpOff^(0+256)
 12309  1684  0AB8               	incf	_Cb34_odPumpOff^(0+256),f
 12310                           
 12311                           ;BVH2_Appl_Layer.c: 1817: Cb34_odFixedValueSel = 0;
 12312  1685  01B9               	clrf	_Cb34_odFixedValueSel^(0+256)
 12313                           
 12314                           ;BVH2_Appl_Layer.c: 1818: Cb34_odFixedLowValueSel = 0;
 12315  1686  01BA               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12316                           
 12317                           ;BVH2_Appl_Layer.c: 1819: Cb34_oPWM_SC_Alarm = 0;
 12318  1687  01BB               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12319                           
 12320                           ;BVH2_Appl_Layer.c: 1820: Cb34_oPWM_Alarm = 0;
 12321  1688  01BC               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12322  1689  0008               	return
 12323  168A                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 12324                           
 12325                           	psect	text34
 12326  11A8                     __ptext34:	
 12327 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 12328 ;; Defined at:
 12329 ;;		line 1683 in file "../T_Link/BVH2_Appl_Layer.c"
 12330 ;; Parameters:    Size  Location     Type
 12331 ;;		None
 12332 ;; Auto vars:     Size  Location     Type
 12333 ;;		None
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      void 
 12336 ;; Registers used:
 12337 ;;		wreg, status,2, status,0
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12343 ;;      Params:         0       0       0       0       0       0       0       0
 12344 ;;      Locals:         0       0       0       0       0       0       0       0
 12345 ;;      Temps:          0       0       0       0       0       0       0       0
 12346 ;;      Totals:         0       0       0       0       0       0       0       0
 12347 ;;Total ram usage:        0 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; Hardware stack levels required when called:    3
 12350 ;; This function calls:
 12351 ;;		Nothing
 12352 ;; This function is called by:
 12353 ;;		_BVH2_Appl_Layer
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           
 12358                           ;psect for function _Cb1_Current_An___High_node_fcn1
 12359  11A8                     _Cb1_Current_An___High_node_fcn1:	
 12360                           
 12361                           ;BVH2_Appl_Layer.c: 1687: if (bool_mat_currAlarm_bldc) {
 12362                           
 12363                           ;incstack = 0
 12364                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 12365  11A8  0021               	movlb	1	; select bank1
 12366  11A9  0850               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 12367  11AA  1903               	btfsc	3,2
 12368  11AB  29B7               	goto	l8596
 12369                           
 12370                           ;BVH2_Appl_Layer.c: 1689: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1690: (UInt8)2;
 12371  11AC  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12372  11AD  39F0               	andlw	-16
 12373  11AE  3802               	iorlw	2
 12374  11AF  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12375                           
 12376                           ;BVH2_Appl_Layer.c: 1691: Cb1_StateCnt = 0 ;
 12377  11B0  0020               	movlb	0	; select bank0
 12378  11B1  01CD               	clrf	_Cb1_StateCnt
 12379  11B2  01CE               	clrf	_Cb1_StateCnt+1
 12380                           
 12381                           ;BVH2_Appl_Layer.c: 1692: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 12382  11B3  3030               	movlw	48
 12383  11B4  0021               	movlb	1	; select bank1
 12384  11B5  04C9               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 12385                           
 12386                           ;BVH2_Appl_Layer.c: 1693: }
 12387  11B6  0008               	return
 12388  11B7                     l8596:	
 12389                           
 12390                           ;BVH2_Appl_Layer.c: 1694: else {;BVH2_Appl_Layer.c: 1695: if (Cb1_StateCnt > 100) {
 12391  11B7  3000               	movlw	0
 12392  11B8  0020               	movlb	0	; select bank0
 12393  11B9  024E               	subwf	_Cb1_StateCnt+1,w
 12394  11BA  3065               	movlw	101
 12395  11BB  1903               	skipnz
 12396  11BC  024D               	subwf	_Cb1_StateCnt,w
 12397  11BD  1C03               	skipc
 12398  11BE  29CC               	goto	l8608
 12399                           
 12400                           ;BVH2_Appl_Layer.c: 1697: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1698: (UInt8)5;
 12401  11BF  0021               	movlb	1	; select bank1
 12402  11C0  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12403  11C1  39F0               	andlw	-16
 12404  11C2  3805               	iorlw	5
 12405  11C3  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12406                           
 12407                           ;BVH2_Appl_Layer.c: 1699: Cb1_oShutoff = 0;
 12408  11C4  0022               	movlb	2	; select bank2
 12409  11C5  01BD               	clrf	_Cb1_oShutoff^(0+256)
 12410                           
 12411                           ;BVH2_Appl_Layer.c: 1700: Cb1_oCurrentAlarm = 0;
 12412  11C6  01BE               	clrf	_Cb1_oCurrentAlarm^(0+256)
 12413                           
 12414                           ;BVH2_Appl_Layer.c: 1701: Cb1_RestartCounter = 0 ;
 12415  11C7  0021               	movlb	1	; select bank1
 12416  11C8  01CA               	clrf	_Cb1_RestartCounter^(0+128)
 12417                           
 12418                           ;BVH2_Appl_Layer.c: 1702: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 12419  11C9  3030               	movlw	48
 12420  11CA  04C9               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 12421                           
 12422                           ;BVH2_Appl_Layer.c: 1703: }
 12423  11CB  0008               	return
 12424  11CC                     l8608:	
 12425                           
 12426                           ;BVH2_Appl_Layer.c: 1704: else {;BVH2_Appl_Layer.c: 1705: SIBFS_Current_Analysis_High_b.
      +                          Cb1_glflag = 1 ;
 12427  11CC  0021               	movlb	1	; select bank1
 12428  11CD  0849               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12429  11CE  39CF               	andlw	-49
 12430  11CF  3810               	iorlw	16
 12431  11D0  00C9               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12432  11D1  0008               	return
 12433  11D2                     __end_of_Cb1_Current_An___High_node_fcn1:	
 12434                           
 12435                           	psect	intentry
 12436  0004                     __pintentry:	
 12437 ;; *************** function _interrupt_handler *****************
 12438 ;; Defined at:
 12439 ;;		line 78 in file "../interrupt.c"
 12440 ;; Parameters:    Size  Location     Type
 12441 ;;		None
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;		None
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12453 ;;      Params:         0       0       0       0       0       0       0       0
 12454 ;;      Locals:         0       0       0       0       0       0       0       0
 12455 ;;      Temps:          0       0       0       0       0       0       0       0
 12456 ;;      Totals:         0       0       0       0       0       0       0       0
 12457 ;;Total ram usage:        0 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; Hardware stack levels required when called:    2
 12460 ;; This function calls:
 12461 ;;		_PWM_CTRL
 12462 ;;		_Task1ms
 12463 ;;		_interrrupt_bldc
 12464 ;;		_interrupt_PWMCapture
 12465 ;; This function is called by:
 12466 ;;		Interrupt level 1
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470  0004                     _interrupt_handler:	
 12471                           
 12472                           ;incstack = 0
 12473  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12474                           
 12475                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12476  0005  3180               	pagesel	$
 12477                           
 12478                           ;interrupt.c: 82: if( TMR1IF )
 12479  0006  0020               	movlb	0	; select bank0
 12480  0007  1811               	btfsc	17,0	;volatile
 12481                           
 12482                           ;interrupt.c: 84: {;interrupt.c: 86: TMR1IF = 0;
 12483  0008  1011               	bcf	17,0	;volatile
 12484                           
 12485                           ;interrupt.c: 88: };interrupt.c: 91: if( TMR4IF )
 12486  0009  1C93               	btfss	19,1	;volatile
 12487  000A  2812               	goto	i1l11472
 12488                           
 12489                           ;interrupt.c: 93: {;interrupt.c: 95: TMR4IF = 0;
 12490  000B  1093               	bcf	19,1	;volatile
 12491                           
 12492                           ;interrupt.c: 97: PWM_CTRL( );
 12493  000C  319E  2667  3180   	fcall	_PWM_CTRL
 12494                           
 12495                           ;interrupt.c: 99: Task1ms( );
 12496  000F  319D  25F3  3180   	fcall	_Task1ms
 12497  0012                     i1l11472:	
 12498                           
 12499                           ;interrupt.c: 101: };interrupt.c: 107: if( TMR2IF )
 12500  0012  0020               	movlb	0	; select bank0
 12501  0013  1C91               	btfss	17,1	;volatile
 12502  0014  2819               	goto	i1l11478
 12503                           
 12504                           ;interrupt.c: 109: {;interrupt.c: 111: TMR2IF = 0;
 12505  0015  1091               	bcf	17,1	;volatile
 12506                           
 12507                           ;interrupt.c: 113: interrrupt_bldc( );
 12508  0016  318B  2348  3180   	fcall	_interrrupt_bldc
 12509  0019                     i1l11478:	
 12510                           
 12511                           ;interrupt.c: 115: };interrupt.c: 118: if( TMR6IF )
 12512  0019  0020               	movlb	0	; select bank0
 12513  001A  1993               	btfsc	19,3	;volatile
 12514                           
 12515                           ;interrupt.c: 120: {;interrupt.c: 122: TMR6IF = 0;
 12516  001B  1193               	bcf	19,3	;volatile
 12517                           
 12518                           ;interrupt.c: 132: };interrupt.c: 135: if( CCP5IF )
 12519  001C  1F13               	btfss	19,6	;volatile
 12520  001D  2821               	goto	i1l11486
 12521                           
 12522                           ;interrupt.c: 137: {;interrupt.c: 139: CCP5IF = 0;
 12523  001E  1313               	bcf	19,6	;volatile
 12524                           
 12525                           ;interrupt.c: 141: interrupt_PWMCapture( );
 12526  001F  3194  247B         	fcall	_interrupt_PWMCapture
 12527  0021                     i1l11486:	
 12528                           
 12529                           ;interrupt.c: 144: };interrupt.c: 147: if( CCP2IF )
 12530  0021  0020               	movlb	0	; select bank0
 12531  0022  1812               	btfsc	18,0	;volatile
 12532                           
 12533                           ;interrupt.c: 149: {;interrupt.c: 151: CCP2IF = 0;
 12534  0023  1012               	bcf	18,0	;volatile
 12535  0024  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12536  0025  0009               	retfie
 12537  0026                     __end_of_interrupt_handler:	
 12538                           
 12539                           	psect	text36
 12540  147B                     __ptext36:	
 12541 ;; *************** function _interrupt_PWMCapture *****************
 12542 ;; Defined at:
 12543 ;;		line 457 in file "../pwm.c"
 12544 ;; Parameters:    Size  Location     Type
 12545 ;;		None
 12546 ;; Auto vars:     Size  Location     Type
 12547 ;;		None
 12548 ;; Return value:  Size  Location     Type
 12549 ;;                  1    wreg      void 
 12550 ;; Registers used:
 12551 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12552 ;; Tracked objects:
 12553 ;;		On entry : 0/0
 12554 ;;		On exit  : 0/0
 12555 ;;		Unchanged: 0/0
 12556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12557 ;;      Params:         0       0       0       0       0       0       0       0
 12558 ;;      Locals:         0       0       0       0       0       0       0       0
 12559 ;;      Temps:          2       0       0       0       0       0       0       0
 12560 ;;      Totals:         2       0       0       0       0       0       0       0
 12561 ;;Total ram usage:        2 bytes
 12562 ;; Hardware stack levels used:    1
 12563 ;; This function calls:
 12564 ;;		Nothing
 12565 ;; This function is called by:
 12566 ;;		_interrupt_handler
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           
 12571                           ;psect for function _interrupt_PWMCapture
 12572  147B                     _interrupt_PWMCapture:	
 12573                           
 12574                           ;pwm.c: 469: switch( ui8_Pulse_State )
 12575                           
 12576                           ;incstack = 0
 12577                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
 12578  147B  2CDE               	goto	i1l6800
 12579  147C                     i1l1178:	
 12580                           ;pwm.c: 471: {;pwm.c: 473: case 0:
 12581                           
 12582                           
 12583                           ;pwm.c: 475: {;pwm.c: 479: ui8_Pulse_State = 1;
 12584  147C  01C0               	clrf	_ui8_Pulse_State^(0+256)
 12585  147D  0AC0               	incf	_ui8_Pulse_State^(0+256),f
 12586                           
 12587                           ;pwm.c: 480: ui16_Capt_Val0.b.lo = CCPR5L;
 12588  147E  0026               	movlb	6	; select bank6
 12589  147F  081C               	movf	28,w	;volatile
 12590  1480  00F0               	movwf	??_interrupt_PWMCapture
 12591  1481  0870               	movf	??_interrupt_PWMCapture,w
 12592  1482  0021               	movlb	1	; select bank1
 12593  1483  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 12594                           
 12595                           ;pwm.c: 481: ui16_Capt_Val0.b.hi = CCPR5H;
 12596  1484  0026               	movlb	6	; select bank6
 12597  1485  081D               	movf	29,w	;volatile
 12598  1486  00F0               	movwf	??_interrupt_PWMCapture
 12599  1487  0870               	movf	??_interrupt_PWMCapture,w
 12600  1488  0021               	movlb	1	; select bank1
 12601  1489  00AB               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
 12602                           
 12603                           ;pwm.c: 482: CCP5CON = 0x04;
 12604  148A  3004               	movlw	4
 12605  148B  0026               	movlb	6	; select bank6
 12606  148C  009E               	movwf	30	;volatile
 12607                           
 12608                           ;pwm.c: 483: break;
 12609  148D  0008               	return
 12610  148E                     i1l6784:	
 12611                           ;pwm.c: 486: };pwm.c: 489: case 1:
 12612                           
 12613                           
 12614                           ;pwm.c: 491: {;pwm.c: 495: ui8_Pulse_State = 2;
 12615  148E  3002               	movlw	2
 12616  148F  00F0               	movwf	??_interrupt_PWMCapture
 12617  1490  0870               	movf	??_interrupt_PWMCapture,w
 12618  1491  0022               	movlb	2	; select bank2
 12619  1492  00C0               	movwf	_ui8_Pulse_State^(0+256)
 12620                           
 12621                           ;pwm.c: 496: ui16_Capt_Val1.b.lo = CCPR5L;
 12622  1493  0026               	movlb	6	; select bank6
 12623  1494  081C               	movf	28,w	;volatile
 12624  1495  00F0               	movwf	??_interrupt_PWMCapture
 12625  1496  0870               	movf	??_interrupt_PWMCapture,w
 12626  1497  0021               	movlb	1	; select bank1
 12627  1498  00A8               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
 12628                           
 12629                           ;pwm.c: 497: ui16_Capt_Val1.b.hi = CCPR5H;
 12630  1499  0026               	movlb	6	; select bank6
 12631  149A  081D               	movf	29,w	;volatile
 12632  149B  00F0               	movwf	??_interrupt_PWMCapture
 12633  149C  0870               	movf	??_interrupt_PWMCapture,w
 12634  149D  0021               	movlb	1	; select bank1
 12635  149E  00A9               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
 12636                           
 12637                           ;pwm.c: 498: CCP5CON = 0x05;
 12638  149F  3005               	movlw	5
 12639  14A0  0026               	movlb	6	; select bank6
 12640  14A1  009E               	movwf	30	;volatile
 12641                           
 12642                           ;pwm.c: 499: break;
 12643  14A2  0008               	return
 12644  14A3                     i1l1181:	
 12645                           ;pwm.c: 502: };pwm.c: 505: case 2:
 12646                           
 12647                           
 12648                           ;pwm.c: 507: {;pwm.c: 511: ui8_Pulse_State = 1;
 12649  14A3  01C0               	clrf	_ui8_Pulse_State^(0+256)
 12650  14A4  0AC0               	incf	_ui8_Pulse_State^(0+256),f
 12651                           
 12652                           ;pwm.c: 512: ui16_Capt_Val2.b.lo = CCPR5L;
 12653  14A5  0026               	movlb	6	; select bank6
 12654  14A6  081C               	movf	28,w	;volatile
 12655  14A7  00F0               	movwf	??_interrupt_PWMCapture
 12656  14A8  0870               	movf	??_interrupt_PWMCapture,w
 12657  14A9  0021               	movlb	1	; select bank1
 12658  14AA  00A6               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
 12659                           
 12660                           ;pwm.c: 513: ui16_Capt_Val2.b.hi = CCPR5H;
 12661  14AB  0026               	movlb	6	; select bank6
 12662  14AC  081D               	movf	29,w	;volatile
 12663  14AD  00F0               	movwf	??_interrupt_PWMCapture
 12664  14AE  0870               	movf	??_interrupt_PWMCapture,w
 12665  14AF  0021               	movlb	1	; select bank1
 12666  14B0  00A7               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
 12667                           
 12668                           ;pwm.c: 514: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
 12669  14B1  092A               	comf	_ui16_Capt_Val0^(0+128),w	;volatile
 12670  14B2  00F0               	movwf	??_interrupt_PWMCapture
 12671  14B3  092B               	comf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 12672  14B4  00F1               	movwf	??_interrupt_PWMCapture+1
 12673  14B5  0AF0               	incf	??_interrupt_PWMCapture,f
 12674  14B6  1903               	skipnz
 12675  14B7  0AF1               	incf	??_interrupt_PWMCapture+1,f
 12676  14B8  0826               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 12677  14B9  0770               	addwf	??_interrupt_PWMCapture,w
 12678  14BA  0023               	movlb	3	; select bank3
 12679  14BB  00BC               	movwf	_ui16_PWM_Freq_In^(0+384)
 12680  14BC  0021               	movlb	1	; select bank1
 12681  14BD  0827               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 12682  14BE  3D71               	addwfc	??_interrupt_PWMCapture+1,w
 12683  14BF  0023               	movlb	3	; select bank3
 12684  14C0  00BD               	movwf	(_ui16_PWM_Freq_In+1)^(0+384)
 12685                           
 12686                           ;pwm.c: 515: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
 12687  14C1  0021               	movlb	1	; select bank1
 12688  14C2  092A               	comf	_ui16_Capt_Val0^(0+128),w	;volatile
 12689  14C3  00F0               	movwf	??_interrupt_PWMCapture
 12690  14C4  092B               	comf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 12691  14C5  00F1               	movwf	??_interrupt_PWMCapture+1
 12692  14C6  0AF0               	incf	??_interrupt_PWMCapture,f
 12693  14C7  1903               	skipnz
 12694  14C8  0AF1               	incf	??_interrupt_PWMCapture+1,f
 12695  14C9  0828               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
 12696  14CA  0770               	addwf	??_interrupt_PWMCapture,w
 12697  14CB  0023               	movlb	3	; select bank3
 12698  14CC  00EC               	movwf	_ui16_Duty_Cycle_In^(0+384)
 12699  14CD  0021               	movlb	1	; select bank1
 12700  14CE  0829               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
 12701  14CF  3D71               	addwfc	??_interrupt_PWMCapture+1,w
 12702  14D0  0023               	movlb	3	; select bank3
 12703  14D1  00ED               	movwf	(_ui16_Duty_Cycle_In+1)^(0+384)
 12704                           
 12705                           ;pwm.c: 516: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
 12706  14D2  0021               	movlb	1	; select bank1
 12707  14D3  0827               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 12708  14D4  00AB               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
 12709  14D5  0826               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 12710  14D6  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 12711                           
 12712                           ;pwm.c: 517: CCP5CON = 0x04;
 12713  14D7  3004               	movlw	4
 12714  14D8  0026               	movlb	6	; select bank6
 12715  14D9  009E               	movwf	30	;volatile
 12716                           
 12717                           ;pwm.c: 534: };pwm.c: 537: break;
 12718                           
 12719                           ;pwm.c: 529: else;pwm.c: 530: {
 12720                           
 12721                           ;pwm.c: 522: {;pwm.c: 526: }
 12722  14DA  0008               	return
 12723  14DB                     i1l6796:	
 12724                           ;pwm.c: 540: };pwm.c: 544: default:
 12725                           
 12726                           
 12727                           ;pwm.c: 545: {;pwm.c: 549: ui8_Pulse_State = 0;
 12728  14DB  0022               	movlb	2	; select bank2
 12729  14DC  01C0               	clrf	_ui8_Pulse_State^(0+256)
 12730                           
 12731                           ;pwm.c: 553: };pwm.c: 555: }
 12732                           
 12733                           ;pwm.c: 550: break;
 12734  14DD  0008               	return
 12735  14DE                     i1l6800:	
 12736  14DE  0022               	movlb	2	; select bank2
 12737  14DF  0840               	movf	_ui8_Pulse_State^(0+256),w
 12738                           
 12739                           ; Switch size 1, requested type "space"
 12740                           ; Number of cases is 3, Range of values is 0 to 2
 12741                           ; switch strategies available:
 12742                           ; Name         Instructions Cycles
 12743                           ; simple_byte           10     6 (average)
 12744                           ; direct_byte           12     6 (fixed)
 12745                           ; jumptable            260     6 (fixed)
 12746                           ;	Chosen strategy is simple_byte
 12747  14E0  3A00               	xorlw	0	; case 0
 12748  14E1  1903               	skipnz
 12749  14E2  2C7C               	goto	i1l1178
 12750  14E3  3A01               	xorlw	1	; case 1
 12751  14E4  1903               	skipnz
 12752  14E5  2C8E               	goto	i1l6784
 12753  14E6  3A03               	xorlw	3	; case 2
 12754  14E7  1903               	skipnz
 12755  14E8  2CA3               	goto	i1l1181
 12756  14E9  2CDB               	goto	i1l6796
 12757  14EA  0008               	return
 12758  14EB                     __end_of_interrupt_PWMCapture:	
 12759                           
 12760                           	psect	text37
 12761  0B48                     __ptext37:	
 12762 ;; *************** function _interrrupt_bldc *****************
 12763 ;; Defined at:
 12764 ;;		line 281 in file "../bldc.c"
 12765 ;; Parameters:    Size  Location     Type
 12766 ;;		None
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  ui32_tmp        4    4[BANK0 ] unsigned long 
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  1    wreg      void 
 12771 ;; Registers used:
 12772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12778 ;;      Params:         0       0       0       0       0       0       0       0
 12779 ;;      Locals:         0       4       0       0       0       0       0       0
 12780 ;;      Temps:          0       4       0       0       0       0       0       0
 12781 ;;      Totals:         0       8       0       0       0       0       0       0
 12782 ;;Total ram usage:        8 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:    1
 12785 ;; This function calls:
 12786 ;;		_BLDCWait
 12787 ;;		___lwdiv
 12788 ;;		i1_ADC_Read
 12789 ;;		i1_ADC_Wait
 12790 ;;		i1___wmul
 12791 ;;		i1_commutate
 12792 ;; This function is called by:
 12793 ;;		_interrupt_handler
 12794 ;; This function uses a non-reentrant model
 12795 ;;
 12796                           
 12797                           
 12798                           ;psect for function _interrrupt_bldc
 12799  0B48                     _interrrupt_bldc:	
 12800                           
 12801                           ;bldc.c: 286: unsigned long ui32_tmp ;;bldc.c: 288: ++comm_time ;
 12802                           
 12803                           ;incstack = 0
 12804                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12805  0B48  3001               	movlw	1
 12806  0B49  0020               	movlb	0	; select bank0
 12807  0B4A  07D3               	addwf	_comm_time,f
 12808  0B4B  3000               	movlw	0
 12809  0B4C  3DD4               	addwfc	_comm_time+1,f
 12810                           
 12811                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
 12812  0B4D  0854               	movf	_comm_time+1,w
 12813  0B4E  0022               	movlb	2	; select bank2
 12814  0B4F  0226               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 12815  0B50  1D03               	skipz
 12816  0B51  2B56               	goto	u918_25
 12817  0B52  0020               	movlb	0	; select bank0
 12818  0B53  0853               	movf	_comm_time,w
 12819  0B54  0022               	movlb	2	; select bank2
 12820  0B55  0225               	subwf	_ui16_comm_time_max^(0+256),w
 12821  0B56                     u918_25:	
 12822  0B56  1803               	skipnc
 12823  0B57  2B5B               	goto	i1l10614
 12824                           
 12825                           ;bldc.c: 294: {;bldc.c: 296: commutate( );
 12826  0B58  3189  2126  318B   	fcall	i1_commutate
 12827  0B5B                     i1l10614:	
 12828                           
 12829                           ;bldc.c: 298: };bldc.c: 302: if( ui16_step_cnt < 10 )
 12830  0B5B  3000               	movlw	0
 12831  0B5C  0021               	movlb	1	; select bank1
 12832  0B5D  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 12833  0B5E  300A               	movlw	10
 12834  0B5F  1903               	skipnz
 12835  0B60  023A               	subwf	_ui16_step_cnt^(0+128),w
 12836  0B61  1C03               	btfss	3,0
 12837  0B62  2B65               	goto	i1l10618
 12838                           
 12839                           ;bldc.c: 311: else;bldc.c: 312: {;bldc.c: 322: MotorFlags.bits.B3 = 0;
 12840                           
 12841                           ;bldc.c: 304: {;bldc.c: 308: }
 12842  0B63  0020               	movlb	0	; select bank0
 12843  0B64  11DA               	bcf	_MotorFlags,3
 12844  0B65                     i1l10618:	
 12845                           
 12846                           ;bldc.c: 328: };bldc.c: 331: if (ui16_step_cnt >= 3 )
 12847  0B65  3000               	movlw	0
 12848  0B66  0021               	movlb	1	; select bank1
 12849  0B67  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 12850  0B68  3003               	movlw	3
 12851  0B69  1903               	skipnz
 12852  0B6A  023A               	subwf	_ui16_step_cnt^(0+128),w
 12853  0B6B  1C03               	skipc
 12854  0B6C  2B6F               	goto	i1l10622
 12855                           
 12856                           ;bldc.c: 333: {;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
 12857  0B6D  0020               	movlb	0	; select bank0
 12858  0B6E  125A               	bcf	_MotorFlags,4
 12859  0B6F                     i1l10622:	
 12860                           
 12861                           ;bldc.c: 337: };bldc.c: 340: BLDCWait( );
 12862  0B6F  319F  2700  318B   	fcall	_BLDCWait
 12863                           
 12864                           ;bldc.c: 346: if( C1OUT )
 12865  0B72  0022               	movlb	2	; select bank2
 12866  0B73  1F11               	btfss	17,6	;volatile
 12867  0B74  2B78               	goto	i1l263
 12868                           
 12869                           ;bldc.c: 349: {;bldc.c: 351: ui8_CompFlag = 0x00;
 12870  0B75  0021               	movlb	1	; select bank1
 12871  0B76  01DA               	clrf	_ui8_CompFlag^(0+128)
 12872                           
 12873                           ;bldc.c: 353: }
 12874  0B77  2D1A               	goto	i1l10806
 12875  0B78                     i1l263:	
 12876                           
 12877                           ;bldc.c: 356: else;bldc.c: 357: {;bldc.c: 362: ui8_CompFlag = 0x01;
 12878  0B78  0021               	movlb	1	; select bank1
 12879  0B79  01DA               	clrf	_ui8_CompFlag^(0+128)
 12880  0B7A  0ADA               	incf	_ui8_CompFlag^(0+128),f
 12881                           
 12882                           ;bldc.c: 366: };bldc.c: 372: switch( ui8_sampleState )
 12883  0B7B  2D1A               	goto	i1l10806
 12884  0B7C                     i1l10628:	
 12885                           ;bldc.c: 374: {;bldc.c: 376: case 1:
 12886                           
 12887                           
 12888                           ;bldc.c: 378: {;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
 12889  0B7C  302D               	movlw	45
 12890  0B7D  0021               	movlb	1	; select bank1
 12891  0B7E  009D               	movwf	29	;volatile
 12892                           
 12893                           ;bldc.c: 387: ADC_Wait( );
 12894  0B7F  319E  267D  318B   	fcall	i1_ADC_Wait
 12895                           
 12896                           ;bldc.c: 391: ( GO_nDONE = 1 );
 12897  0B82  0021               	movlb	1	; select bank1
 12898  0B83  149D               	bsf	29,1	;volatile
 12899                           
 12900                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
 12901  0B84  319E  26AF  318B   	fcall	i1_ADC_Read
 12902  0B87  0871               	movf	?i1_ADC_Read+1,w
 12903  0B88  0023               	movlb	3	; select bank3
 12904  0B89  00D7               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
 12905  0B8A  0870               	movf	?i1_ADC_Read,w
 12906  0B8B  00D6               	movwf	_ui16_NTC_Temp_bldc^(0+384)
 12907                           
 12908                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
 12909  0B8C  3031               	movlw	49
 12910  0B8D  0021               	movlb	1	; select bank1
 12911  0B8E  2C22               	goto	L59
 12912  0B8F                     i1l10640:	
 12913                           ;bldc.c: 416: };bldc.c: 419: case 2:
 12914                           
 12915                           ;bldc.c: 413: break;
 12916                           
 12917                           ;bldc.c: 410: ui8_sampleState++;
 12918                           
 12919                           ;bldc.c: 407: ( GO_nDONE = 1 );
 12920                           
 12921                           ;bldc.c: 403: ADC_Wait( );
 12922                           
 12923                           
 12924                           ;bldc.c: 421: {;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
 12925  0B8F  0863               	movf	_ui8_Ubemf_sel^(0+256),w
 12926  0B90  0021               	movlb	1	; select bank1
 12927  0B91  009D               	movwf	29	;volatile
 12928                           
 12929                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
 12930  0B92  081B               	movf	27,w	;volatile
 12931  0B93  0020               	movlb	0	; select bank0
 12932  0B94  00A0               	movwf	??_interrrupt_bldc
 12933  0B95  0820               	movf	??_interrrupt_bldc,w
 12934  0B96  00DB               	movwf	_ui16_Ubat_bldc	;volatile
 12935                           
 12936                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
 12937  0B97  0021               	movlb	1	; select bank1
 12938  0B98  081C               	movf	28,w	;volatile
 12939  0B99  0020               	movlb	0	; select bank0
 12940  0B9A  00A0               	movwf	??_interrrupt_bldc
 12941  0B9B  0820               	movf	??_interrrupt_bldc,w
 12942  0B9C  00DC               	movwf	_ui16_Ubat_bldc+1	;volatile
 12943                           
 12944                           ;bldc.c: 454: __nop();
 12945  0B9D  0000               	nop
 12946                           
 12947                           ;bldc.c: 455: __nop();
 12948  0B9E  0000               	nop
 12949                           
 12950                           ;bldc.c: 456: __nop();
 12951  0B9F  0000               	nop
 12952                           
 12953                           ;bldc.c: 457: __nop();
 12954  0BA0  0000               	nop
 12955                           
 12956                           ;bldc.c: 458: __nop();
 12957  0BA1  0000               	nop
 12958                           
 12959                           ;bldc.c: 459: __nop();
 12960  0BA2  0000               	nop
 12961                           
 12962                           ;bldc.c: 460: __nop();
 12963  0BA3  0000               	nop
 12964                           
 12965                           ;bldc.c: 461: __nop();
 12966  0BA4  0000               	nop
 12967                           
 12968                           ;bldc.c: 463: __nop();
 12969  0BA5  0000               	nop
 12970                           
 12971                           ;bldc.c: 464: __nop();
 12972  0BA6  0000               	nop
 12973                           
 12974                           ;bldc.c: 465: __nop();
 12975  0BA7  0000               	nop
 12976                           
 12977                           ;bldc.c: 466: __nop();
 12978  0BA8  0000               	nop
 12979                           
 12980                           ;bldc.c: 467: __nop();
 12981  0BA9  0000               	nop
 12982                           
 12983                           ;bldc.c: 468: __nop();
 12984  0BAA  0000               	nop
 12985                           
 12986                           ;bldc.c: 469: __nop();
 12987  0BAB  0000               	nop
 12988                           
 12989                           ;bldc.c: 470: __nop();
 12990  0BAC  0000               	nop
 12991  0BAD  2C23               	goto	L58
 12992  0BAE                     i1l10680:	
 12993                           ;bldc.c: 486: };bldc.c: 489: case 3:
 12994                           
 12995                           ;bldc.c: 483: break;
 12996                           
 12997                           ;bldc.c: 480: ui8_sampleState++;
 12998                           
 12999                           ;bldc.c: 477: ( GO_nDONE = 1 );
 13000                           
 13001                           ;bldc.c: 474: ADC_Wait();
 13002                           
 13003                           
 13004                           ;bldc.c: 491: {;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
 13005  0BAE  0021               	movlb	1	; select bank1
 13006  0BAF  081B               	movf	27,w	;volatile
 13007  0BB0  0020               	movlb	0	; select bank0
 13008  0BB1  00A0               	movwf	??_interrrupt_bldc
 13009  0BB2  0820               	movf	??_interrrupt_bldc,w
 13010  0BB3  0021               	movlb	1	; select bank1
 13011  0BB4  00B4               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
 13012                           
 13013                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
 13014  0BB5  081C               	movf	28,w	;volatile
 13015  0BB6  0020               	movlb	0	; select bank0
 13016  0BB7  00A0               	movwf	??_interrrupt_bldc
 13017  0BB8  0820               	movf	??_interrrupt_bldc,w
 13018  0BB9  0021               	movlb	1	; select bank1
 13019  0BBA  00B5               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
 13020                           
 13021                           ;bldc.c: 511: ( GO_nDONE = 1 );
 13022  0BBB  149D               	bsf	29,1	;volatile
 13023                           
 13024                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui16_duty_cycle_BLDC != 0 ) )
 13025  0BBC  0020               	movlb	0	; select bank0
 13026  0BBD  1F5A               	btfss	_MotorFlags,6
 13027  0BBE  2BE3               	goto	i1l10710
 13028  0BBF  0021               	movlb	1	; select bank1
 13029  0BC0  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 13030  0BC1  0431               	iorwf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
 13031  0BC2  1903               	btfsc	3,2
 13032  0BC3  2BE3               	goto	i1l10710
 13033                           
 13034                           ;bldc.c: 521: {;bldc.c: 523: if( rising_bemf_flag )
 13035  0BC4  0020               	movlb	0	; select bank0
 13036  0BC5  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 13037  0BC6  2BDB               	goto	i1l10700
 13038                           
 13039                           ;bldc.c: 525: {;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
 13040  0BC7  0021               	movlb	1	; select bank1
 13041  0BC8  0834               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 13042  0BC9  3E64               	addlw	100
 13043  0BCA  0020               	movlb	0	; select bank0
 13044  0BCB  00A0               	movwf	??_interrrupt_bldc
 13045  0BCC  3000               	movlw	0
 13046  0BCD  0021               	movlb	1	; select bank1
 13047  0BCE  3D35               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 13048  0BCF  0020               	movlb	0	; select bank0
 13049  0BD0  00A1               	movwf	??_interrrupt_bldc+1
 13050  0BD1  085C               	movf	_ui16_Ubat_bldc+1,w	;volatile
 13051  0BD2  0221               	subwf	??_interrrupt_bldc+1,w
 13052  0BD3  1D03               	skipz
 13053  0BD4  2BD7               	goto	u925_25
 13054  0BD5  085B               	movf	_ui16_Ubat_bldc,w	;volatile
 13055  0BD6  0220               	subwf	??_interrrupt_bldc,w
 13056  0BD7                     u925_25:	
 13057  0BD7  1803               	skipnc
 13058  0BD8  2D28               	goto	i1l267
 13059                           
 13060                           ;bldc.c: 530: {;bldc.c: 534: ui8_sampleState++;
 13061  0BD9  3001               	movlw	1
 13062  0BDA  2BE5               	goto	L55
 13063  0BDB                     i1l10700:	
 13064                           ;bldc.c: 556: };bldc.c: 559: }
 13065                           
 13066                           ;bldc.c: 550: else;bldc.c: 551: {
 13067                           
 13068                           ;bldc.c: 547: }
 13069                           
 13070                           ;bldc.c: 544: ( GO_nDONE = 1 );
 13071                           
 13072                           ;bldc.c: 540: ADC_Wait( );
 13073                           
 13074                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
 13075                           
 13076                           
 13077                           ;bldc.c: 562: else;bldc.c: 563: {;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
 13078  0BDB  3000               	movlw	0
 13079  0BDC  0021               	movlb	1	; select bank1
 13080  0BDD  0235               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 13081  0BDE  301F               	movlw	31
 13082  0BDF  1903               	skipnz
 13083  0BE0  0234               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 13084  0BE1  1C03               	skipc
 13085  0BE2  2D28               	goto	i1l267
 13086  0BE3                     i1l10710:	
 13087                           ;bldc.c: 593: };bldc.c: 596: };bldc.c: 601: }
 13088                           
 13089                           ;bldc.c: 588: else;bldc.c: 589: {
 13090                           
 13091                           ;bldc.c: 585: }
 13092                           
 13093                           ;bldc.c: 582: ( GO_nDONE = 1 );
 13094                           
 13095                           ;bldc.c: 578: ADC_Wait( );
 13096                           
 13097                           ;bldc.c: 575: ( ADCON0 = ui8_UPhase_sel );
 13098                           
 13099                           ;bldc.c: 567: {;bldc.c: 571: ui8_sampleState++;
 13100                           
 13101                           
 13102                           ;bldc.c: 604: else;bldc.c: 605: {;bldc.c: 607: ui8_sampleState++;
 13103  0BE3  3001               	movlw	1
 13104  0BE4  0020               	movlb	0	; select bank0
 13105  0BE5                     L55:	
 13106  0BE5  00A0               	movwf	??_interrrupt_bldc
 13107  0BE6  0820               	movf	??_interrrupt_bldc,w
 13108  0BE7  0022               	movlb	2	; select bank2
 13109  0BE8  07E2               	addwf	_ui8_sampleState^(0+256),f
 13110                           
 13111                           ;bldc.c: 611: ( ADCON0 = ui8_UPhase_sel );
 13112  0BE9  0021               	movlb	1	; select bank1
 13113  0BEA  085B               	movf	_ui8_UPhase_sel^(0+128),w
 13114  0BEB  009D               	movwf	29	;volatile
 13115                           
 13116                           ;bldc.c: 615: ADC_Wait( );
 13117  0BEC  319E  267D  318B   	fcall	i1_ADC_Wait
 13118                           
 13119                           ;bldc.c: 619: ( GO_nDONE = 1 );
 13120  0BEF  0021               	movlb	1	; select bank1
 13121  0BF0  149D               	bsf	29,1	;volatile
 13122                           
 13123                           ;bldc.c: 624: };bldc.c: 650: break;
 13124  0BF1  2D28               	goto	i1l267
 13125  0BF2                     i1l10718:	
 13126                           ;bldc.c: 653: };bldc.c: 656: case 4:
 13127                           
 13128                           
 13129                           ;bldc.c: 658: {;bldc.c: 664: BlankingCountdbg = ui8_BlankingCount;
 13130  0BF2  0021               	movlb	1	; select bank1
 13131  0BF3  085D               	movf	_ui8_BlankingCount^(0+128),w
 13132  0BF4  0020               	movlb	0	; select bank0
 13133  0BF5  00A0               	movwf	??_interrrupt_bldc
 13134  0BF6  0820               	movf	??_interrrupt_bldc,w
 13135  0BF7  0022               	movlb	2	; select bank2
 13136  0BF8  00E4               	movwf	_BlankingCountdbg^(0+256)
 13137                           
 13138                           ;bldc.c: 665: ui8_BlankingCount = 0;
 13139  0BF9  0021               	movlb	1	; select bank1
 13140  0BFA  01DD               	clrf	_ui8_BlankingCount^(0+128)
 13141                           
 13142                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
 13143  0BFB  319E  26AF  318B   	fcall	i1_ADC_Read
 13144  0BFE  0871               	movf	?i1_ADC_Read+1,w
 13145  0BFF  0023               	movlb	3	; select bank3
 13146  0C00  00DB               	movwf	(_ui16_UPhase_bldc+1)^(0+384)
 13147  0C01  0870               	movf	?i1_ADC_Read,w
 13148  0C02  00DA               	movwf	_ui16_UPhase_bldc^(0+384)
 13149                           
 13150                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
 13151  0C03  0021               	movlb	1	; select bank1
 13152  0C04  1CE0               	btfss	_ui8_error_Flags^(0+128),1
 13153  0C05  2C0F               	goto	i1l10734
 13154                           
 13155                           ;bldc.c: 677: {;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
 13156  0C06  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13157  0C07  009D               	movwf	29	;volatile
 13158                           
 13159                           ;bldc.c: 682: ADC_Wait( );
 13160  0C08  319E  267D  318B   	fcall	i1_ADC_Wait
 13161                           
 13162                           ;bldc.c: 683: ( GO_nDONE = 1 );
 13163  0C0B  0021               	movlb	1	; select bank1
 13164  0C0C  149D               	bsf	29,1	;volatile
 13165                           
 13166                           ;bldc.c: 686: ui8_sampleState = 9;
 13167  0C0D  3009               	movlw	9
 13168  0C0E  2D0D               	goto	L51
 13169  0C0F                     i1l10734:	
 13170                           ;bldc.c: 688: }
 13171                           
 13172                           
 13173                           ;bldc.c: 691: else;bldc.c: 692: {;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 13174  0C0F  3075               	movlw	117
 13175  0C10  0021               	movlb	1	; select bank1
 13176  0C11  009D               	movwf	29	;volatile
 13177                           
 13178                           ;bldc.c: 697: ADC_Wait( );
 13179  0C12  319E  267D  318B   	fcall	i1_ADC_Wait
 13180  0C15                     i1l10740:	
 13181                           ;bldc.c: 709: };bldc.c: 712: case 5:
 13182                           
 13183                           ;bldc.c: 703: };bldc.c: 706: break;
 13184                           
 13185                           ;bldc.c: 700: ui8_sampleState++;
 13186                           
 13187  0C15                     i1l10742:	
 13188                           ;bldc.c: 724: };bldc.c: 727: case 6:
 13189                           
 13190                           ;bldc.c: 721: break;
 13191                           
 13192                           ;bldc.c: 714: {;bldc.c: 718: ui8_sampleState++;
 13193                           
 13194  0C15                     i1l10744:	
 13195                           ;bldc.c: 739: };bldc.c: 742: case 7:
 13196                           
 13197                           ;bldc.c: 736: break;
 13198                           
 13199                           ;bldc.c: 729: {;bldc.c: 733: ui8_sampleState++;
 13200                           
 13201  0C15  2D13               	goto	i1l10802
 13202  0C16                     i1l284:	
 13203                           ;bldc.c: 754: };bldc.c: 757: case 8:
 13204                           
 13205                           ;bldc.c: 751: break;
 13206                           
 13207                           ;bldc.c: 744: {;bldc.c: 748: ui8_sampleState++;
 13208                           
 13209                           
 13210                           ;bldc.c: 759: {;bldc.c: 764: ( GO_nDONE = 1 );
 13211  0C16  0021               	movlb	1	; select bank1
 13212  0C17  149D               	bsf	29,1	;volatile
 13213                           
 13214                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
 13215  0C18  319E  26AF  318B   	fcall	i1_ADC_Read
 13216  0C1B  0871               	movf	?i1_ADC_Read+1,w
 13217  0C1C  0024               	movlb	4	; select bank4
 13218  0C1D  00D7               	movwf	(_ui16_CPU_Temp_bldc+1)^(0+512)
 13219  0C1E  0870               	movf	?i1_ADC_Read,w
 13220  0C1F  00D6               	movwf	_ui16_CPU_Temp_bldc^(0+512)
 13221                           
 13222                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
 13223  0C20  0021               	movlb	1	; select bank1
 13224  0C21  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13225  0C22                     L59:	
 13226  0C22  009D               	movwf	29	;volatile
 13227  0C23                     L58:	
 13228                           
 13229                           ;bldc.c: 776: ADC_Wait( );
 13230  0C23  319E  267D  318B   	fcall	i1_ADC_Wait
 13231                           
 13232                           ;bldc.c: 780: ( GO_nDONE = 1 );
 13233  0C26  0021               	movlb	1	; select bank1
 13234  0C27  149D               	bsf	29,1	;volatile
 13235  0C28  2D13               	goto	i1l10802
 13236  0C29                     i1l10754:	
 13237                           ;bldc.c: 790: };bldc.c: 793: case 9:
 13238                           
 13239                           ;bldc.c: 787: break;
 13240                           
 13241                           ;bldc.c: 784: ui8_sampleState++;
 13242                           
 13243                           
 13244                           ;bldc.c: 795: {;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
 13245  0C29  319E  26AF  318B   	fcall	i1_ADC_Read
 13246  0C2C  0871               	movf	?i1_ADC_Read+1,w
 13247  0C2D  0020               	movlb	0	; select bank0
 13248  0C2E  00D2               	movwf	_ui16_IPhase_bldc+1	;volatile
 13249  0C2F  0870               	movf	?i1_ADC_Read,w
 13250  0C30  00D1               	movwf	_ui16_IPhase_bldc	;volatile
 13251                           
 13252                           ;bldc.c: 806: if (MotorFlags.bits.B6)
 13253  0C31  1B5A               	btfsc	_MotorFlags,6
 13254  0C32  2CDE               	goto	i1l10780
 13255  0C33  2CEB               	goto	i1l10782
 13256  0C34                     i1l10760:	
 13257                           ;bldc.c: 812: {;bldc.c: 814: case ( 0x02 << 2 ) | 0x01:
 13258                           
 13259                           ;bldc.c: 808: {;bldc.c: 810: switch( ui8_IPhase_sel )
 13260                           
 13261                           
 13262                           ;bldc.c: 816: {;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0
      +                          ]) )
 13263  0C34  0022               	movlb	2	; select bank2
 13264  0C35  0820               	movf	_ui8_current_cal^(0+256),w
 13265  0C36  0020               	movlb	0	; select bank0
 13266  0C37  00A0               	movwf	??_interrrupt_bldc
 13267  0C38  01A1               	clrf	??_interrrupt_bldc+1
 13268  0C39  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13269  0C3A  0221               	subwf	??_interrrupt_bldc+1,w
 13270  0C3B  1D03               	skipz
 13271  0C3C  2C3F               	goto	u929_25
 13272  0C3D  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13273  0C3E  0220               	subwf	??_interrrupt_bldc,w
 13274  0C3F                     u929_25:	
 13275  0C3F  1803               	skipnc
 13276  0C40  2C69               	goto	i1l10764
 13277                           
 13278                           ;bldc.c: 820: {;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[0])*ui16_I_cal_Ph1)>>8);
 13279  0C41  0022               	movlb	2	; select bank2
 13280  0C42  0820               	movf	_ui8_current_cal^(0+256),w
 13281  0C43  0020               	movlb	0	; select bank0
 13282  0C44  00A0               	movwf	??_interrrupt_bldc
 13283  0C45  01A1               	clrf	??_interrrupt_bldc+1
 13284  0C46  09A0               	comf	??_interrrupt_bldc,f
 13285  0C47  09A1               	comf	??_interrrupt_bldc+1,f
 13286  0C48  0AA0               	incf	??_interrrupt_bldc,f
 13287  0C49  1903               	skipnz
 13288  0C4A  0AA1               	incf	??_interrrupt_bldc+1,f
 13289  0C4B  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13290  0C4C  0720               	addwf	??_interrrupt_bldc,w
 13291  0C4D  00F0               	movwf	i1___wmul@multiplier
 13292  0C4E  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13293  0C4F  3D21               	addwfc	??_interrrupt_bldc+1,w
 13294  0C50  00F1               	movwf	i1___wmul@multiplier+1
 13295  0C51  0021               	movlb	1	; select bank1
 13296  0C52  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 13297  0C53  00F3               	movwf	i1___wmul@multiplicand+1
 13298  0C54  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 13299  0C55  00F2               	movwf	i1___wmul@multiplicand
 13300  0C56  319E  26C9  318B   	fcall	i1___wmul
 13301  0C59  0870               	movf	?i1___wmul,w
 13302  0C5A  0020               	movlb	0	; select bank0
 13303  0C5B  00A2               	movwf	??_interrrupt_bldc+2
 13304  0C5C  0871               	movf	?i1___wmul+1,w
 13305  0C5D  00A3               	movwf	??_interrrupt_bldc+3
 13306  0C5E  0823               	movf	??_interrrupt_bldc+3,w
 13307  0C5F  00A2               	movwf	??_interrrupt_bldc+2
 13308  0C60  01A3               	clrf	??_interrrupt_bldc+3
 13309  0C61  0822               	movf	??_interrrupt_bldc+2,w
 13310  0C62  0023               	movlb	3	; select bank3
 13311  0C63  00D8               	movwf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13312  0C64  0020               	movlb	0	; select bank0
 13313  0C65  0823               	movf	??_interrrupt_bldc+3,w
 13314  0C66  0023               	movlb	3	; select bank3
 13315  0C67  00D9               	movwf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13316                           
 13317                           ;bldc.c: 824: }
 13318  0C68  2CF3               	goto	i1l10784
 13319  0C69                     i1l10764:	
 13320                           
 13321                           ;bldc.c: 827: else;bldc.c: 828: {;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
 13322  0C69  0023               	movlb	3	; select bank3
 13323  0C6A  01D8               	clrf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13324  0C6B  01D9               	clrf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13325                           
 13326                           ;bldc.c: 832: };bldc.c: 835: break;
 13327  0C6C  2CF3               	goto	i1l10784
 13328  0C6D                     i1l10766:	
 13329                           ;bldc.c: 837: };bldc.c: 840: case ( 0x0D << 2 ) | 0x01:
 13330                           
 13331                           
 13332                           ;bldc.c: 842: {;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1
      +                          ] ) )
 13333  0C6D  0022               	movlb	2	; select bank2
 13334  0C6E  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 13335  0C6F  0020               	movlb	0	; select bank0
 13336  0C70  00A0               	movwf	??_interrrupt_bldc
 13337  0C71  01A1               	clrf	??_interrrupt_bldc+1
 13338  0C72  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13339  0C73  0221               	subwf	??_interrrupt_bldc+1,w
 13340  0C74  1D03               	skipz
 13341  0C75  2C78               	goto	u930_25
 13342  0C76  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13343  0C77  0220               	subwf	??_interrrupt_bldc,w
 13344  0C78                     u930_25:	
 13345  0C78  1803               	skipnc
 13346  0C79  2CA2               	goto	i1l10770
 13347                           
 13348                           ;bldc.c: 846: {;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[1])*ui16_I_cal_Ph2)>>8);
 13349  0C7A  0022               	movlb	2	; select bank2
 13350  0C7B  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 13351  0C7C  0020               	movlb	0	; select bank0
 13352  0C7D  00A0               	movwf	??_interrrupt_bldc
 13353  0C7E  01A1               	clrf	??_interrrupt_bldc+1
 13354  0C7F  09A0               	comf	??_interrrupt_bldc,f
 13355  0C80  09A1               	comf	??_interrrupt_bldc+1,f
 13356  0C81  0AA0               	incf	??_interrrupt_bldc,f
 13357  0C82  1903               	skipnz
 13358  0C83  0AA1               	incf	??_interrrupt_bldc+1,f
 13359  0C84  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13360  0C85  0720               	addwf	??_interrrupt_bldc,w
 13361  0C86  00F0               	movwf	i1___wmul@multiplier
 13362  0C87  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13363  0C88  3D21               	addwfc	??_interrrupt_bldc+1,w
 13364  0C89  00F1               	movwf	i1___wmul@multiplier+1
 13365  0C8A  0021               	movlb	1	; select bank1
 13366  0C8B  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 13367  0C8C  00F3               	movwf	i1___wmul@multiplicand+1
 13368  0C8D  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 13369  0C8E  00F2               	movwf	i1___wmul@multiplicand
 13370  0C8F  319E  26C9  318B   	fcall	i1___wmul
 13371  0C92  0870               	movf	?i1___wmul,w
 13372  0C93  0020               	movlb	0	; select bank0
 13373  0C94  00A2               	movwf	??_interrrupt_bldc+2
 13374  0C95  0871               	movf	?i1___wmul+1,w
 13375  0C96  00A3               	movwf	??_interrrupt_bldc+3
 13376  0C97  0823               	movf	??_interrrupt_bldc+3,w
 13377  0C98  00A2               	movwf	??_interrrupt_bldc+2
 13378  0C99  01A3               	clrf	??_interrrupt_bldc+3
 13379  0C9A  0822               	movf	??_interrrupt_bldc+2,w
 13380  0C9B  0024               	movlb	4	; select bank4
 13381  0C9C  00DA               	movwf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13382  0C9D  0020               	movlb	0	; select bank0
 13383  0C9E  0823               	movf	??_interrrupt_bldc+3,w
 13384  0C9F  0024               	movlb	4	; select bank4
 13385  0CA0  00DB               	movwf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13386                           
 13387                           ;bldc.c: 851: }
 13388  0CA1  2CF3               	goto	i1l10784
 13389  0CA2                     i1l10770:	
 13390                           
 13391                           ;bldc.c: 854: else;bldc.c: 855: {;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
 13392  0CA2  0024               	movlb	4	; select bank4
 13393  0CA3  01DA               	clrf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13394  0CA4  01DB               	clrf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13395                           
 13396                           ;bldc.c: 859: };bldc.c: 862: break;
 13397  0CA5  2CF3               	goto	i1l10784
 13398  0CA6                     i1l10772:	
 13399                           ;bldc.c: 864: };bldc.c: 867: case ( 0x04 << 2 ) | 0x01:
 13400                           
 13401                           
 13402                           ;bldc.c: 869: {;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]
      +                          ) )
 13403  0CA6  0022               	movlb	2	; select bank2
 13404  0CA7  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 13405  0CA8  0020               	movlb	0	; select bank0
 13406  0CA9  00A0               	movwf	??_interrrupt_bldc
 13407  0CAA  01A1               	clrf	??_interrrupt_bldc+1
 13408  0CAB  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13409  0CAC  0221               	subwf	??_interrrupt_bldc+1,w
 13410  0CAD  1D03               	skipz
 13411  0CAE  2CB1               	goto	u931_25
 13412  0CAF  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13413  0CB0  0220               	subwf	??_interrrupt_bldc,w
 13414  0CB1                     u931_25:	
 13415  0CB1  1803               	skipnc
 13416  0CB2  2CDB               	goto	i1l10776
 13417                           
 13418                           ;bldc.c: 873: {;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[2])*ui16_I_cal_Ph3)>>8);
 13419  0CB3  0022               	movlb	2	; select bank2
 13420  0CB4  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 13421  0CB5  0020               	movlb	0	; select bank0
 13422  0CB6  00A0               	movwf	??_interrrupt_bldc
 13423  0CB7  01A1               	clrf	??_interrrupt_bldc+1
 13424  0CB8  09A0               	comf	??_interrrupt_bldc,f
 13425  0CB9  09A1               	comf	??_interrrupt_bldc+1,f
 13426  0CBA  0AA0               	incf	??_interrrupt_bldc,f
 13427  0CBB  1903               	skipnz
 13428  0CBC  0AA1               	incf	??_interrrupt_bldc+1,f
 13429  0CBD  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13430  0CBE  0720               	addwf	??_interrrupt_bldc,w
 13431  0CBF  00F0               	movwf	i1___wmul@multiplier
 13432  0CC0  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13433  0CC1  3D21               	addwfc	??_interrrupt_bldc+1,w
 13434  0CC2  00F1               	movwf	i1___wmul@multiplier+1
 13435  0CC3  0021               	movlb	1	; select bank1
 13436  0CC4  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 13437  0CC5  00F3               	movwf	i1___wmul@multiplicand+1
 13438  0CC6  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 13439  0CC7  00F2               	movwf	i1___wmul@multiplicand
 13440  0CC8  319E  26C9  318B   	fcall	i1___wmul
 13441  0CCB  0870               	movf	?i1___wmul,w
 13442  0CCC  0020               	movlb	0	; select bank0
 13443  0CCD  00A2               	movwf	??_interrrupt_bldc+2
 13444  0CCE  0871               	movf	?i1___wmul+1,w
 13445  0CCF  00A3               	movwf	??_interrrupt_bldc+3
 13446  0CD0  0823               	movf	??_interrrupt_bldc+3,w
 13447  0CD1  00A2               	movwf	??_interrrupt_bldc+2
 13448  0CD2  01A3               	clrf	??_interrrupt_bldc+3
 13449  0CD3  0822               	movf	??_interrrupt_bldc+2,w
 13450  0CD4  0024               	movlb	4	; select bank4
 13451  0CD5  00D8               	movwf	_ui16_IPhase3_bldc^(0+512)	;volatile
 13452  0CD6  0020               	movlb	0	; select bank0
 13453  0CD7  0823               	movf	??_interrrupt_bldc+3,w
 13454  0CD8  0024               	movlb	4	; select bank4
 13455  0CD9  00D9               	movwf	(_ui16_IPhase3_bldc+1)^(0+512)	;volatile
 13456                           
 13457                           ;bldc.c: 877: }
 13458  0CDA  2CF3               	goto	i1l10784
 13459  0CDB                     i1l10776:	
 13460                           
 13461                           ;bldc.c: 880: else;bldc.c: 881: {;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
 13462  0CDB  0024               	movlb	4	; select bank4
 13463  0CDC  2CF1               	goto	L53
 13464  0CDD                     i1l10778:	
 13465                           ;bldc.c: 890: };bldc.c: 894: default:
 13466                           
 13467                           ;bldc.c: 885: };bldc.c: 888: break;
 13468                           
 13469  0CDD  2CEB               	goto	i1l10782
 13470  0CDE                     i1l10780:	
 13471                           ;bldc.c: 902: };bldc.c: 904: }
 13472                           
 13473                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
 13474                           
 13475                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
 13476                           
 13477                           ;bldc.c: 895: {;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
 13478                           
 13479  0CDE  0021               	movlb	1	; select bank1
 13480  0CDF  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13481                           
 13482                           ; Switch size 1, requested type "space"
 13483                           ; Number of cases is 3, Range of values is 9 to 53
 13484                           ; switch strategies available:
 13485                           ; Name         Instructions Cycles
 13486                           ; simple_byte           10     6 (average)
 13487                           ; direct_byte           99     9 (fixed)
 13488                           ; jumptable            263     9 (fixed)
 13489                           ;	Chosen strategy is simple_byte
 13490  0CE0  3A09               	xorlw	9	; case 9
 13491  0CE1  1903               	skipnz
 13492  0CE2  2C34               	goto	i1l10760
 13493  0CE3  3A18               	xorlw	24	; case 17
 13494  0CE4  1903               	skipnz
 13495  0CE5  2CA6               	goto	i1l10772
 13496  0CE6  3A24               	xorlw	36	; case 53
 13497  0CE7  1903               	skipnz
 13498  0CE8  2C6D               	goto	i1l10766
 13499  0CE9  2CDD               	goto	i1l10778
 13500                           
 13501                           ;bldc.c: 907: }
 13502  0CEA  2CF3               	goto	i1l10784
 13503  0CEB                     i1l10782:	
 13504                           
 13505                           ;bldc.c: 910: else;bldc.c: 911: {;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
 13506  0CEB  0023               	movlb	3	; select bank3
 13507  0CEC  01D8               	clrf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13508  0CED  01D9               	clrf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13509                           
 13510                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
 13511  0CEE  0024               	movlb	4	; select bank4
 13512  0CEF  01DA               	clrf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13513  0CF0  01DB               	clrf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13514  0CF1                     L53:	
 13515                           
 13516                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
 13517  0CF1  01D8               	clrf	_ui16_IPhase3_bldc^(0+512)	;volatile
 13518  0CF2  01D9               	clrf	(_ui16_IPhase3_bldc+1)^(0+512)	;volatile
 13519  0CF3                     i1l10784:	
 13520                           
 13521                           ;bldc.c: 918: };bldc.c: 956: if( (ui16_IPhase_bldc.w > 500+40) )
 13522  0CF3  3002               	movlw	2
 13523  0CF4  0020               	movlb	0	; select bank0
 13524  0CF5  0252               	subwf	_ui16_IPhase_bldc+1,w	;volatile
 13525  0CF6  301D               	movlw	29
 13526  0CF7  1903               	skipnz
 13527  0CF8  0251               	subwf	_ui16_IPhase_bldc,w	;volatile
 13528  0CF9  1C03               	skipc
 13529  0CFA  2D00               	goto	i1l10790
 13530                           
 13531                           ;bldc.c: 958: {;bldc.c: 960: MotorFlags.bits.B0 = 1;
 13532  0CFB  145A               	bsf	_MotorFlags,0
 13533                           
 13534                           ;bldc.c: 964: LATC = LATC & 0b11100101;
 13535  0CFC  0022               	movlb	2	; select bank2
 13536  0CFD  080E               	movf	14,w	;volatile
 13537  0CFE  39E5               	andlw	229
 13538  0CFF  008E               	movwf	14	;volatile
 13539  0D00                     i1l10790:	
 13540                           ;bldc.c: 973: else;bldc.c: 974: {
 13541                           
 13542                           ;bldc.c: 970: }
 13543                           
 13544                           
 13545                           ;bldc.c: 978: };bldc.c: 984: ADC_Wait( );
 13546  0D00  319E  267D  318B   	fcall	i1_ADC_Wait
 13547                           
 13548                           ;bldc.c: 988: ( GO_nDONE = 1 );
 13549  0D03  0021               	movlb	1	; select bank1
 13550  0D04  149D               	bsf	29,1	;volatile
 13551                           
 13552                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
 13553  0D05  1CE0               	btfss	_ui8_error_Flags^(0+128),1
 13554  0D06  2D13               	goto	i1l10802
 13555                           
 13556                           ;bldc.c: 993: {;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 13557  0D07  3075               	movlw	117
 13558  0D08  009D               	movwf	29	;volatile
 13559                           
 13560                           ;bldc.c: 998: ADC_Wait( );
 13561  0D09  319E  267D  318B   	fcall	i1_ADC_Wait
 13562                           
 13563                           ;bldc.c: 1001: ui8_sampleState = 5;
 13564  0D0C  3005               	movlw	5
 13565  0D0D                     L51:	
 13566  0D0D  0020               	movlb	0	; select bank0
 13567  0D0E  00A0               	movwf	??_interrrupt_bldc
 13568  0D0F  0820               	movf	??_interrrupt_bldc,w
 13569  0D10  0022               	movlb	2	; select bank2
 13570  0D11  00E2               	movwf	_ui8_sampleState^(0+256)
 13571                           
 13572                           ;bldc.c: 1003: }
 13573  0D12  2D28               	goto	i1l267
 13574  0D13                     i1l10802:	
 13575                           
 13576                           ;bldc.c: 1006: else;bldc.c: 1007: {;bldc.c: 1009: ui8_sampleState++;
 13577  0D13  3001               	movlw	1
 13578  0D14  0020               	movlb	0	; select bank0
 13579  0D15  00A0               	movwf	??_interrrupt_bldc
 13580  0D16  0820               	movf	??_interrrupt_bldc,w
 13581  0D17  0022               	movlb	2	; select bank2
 13582  0D18  07E2               	addwf	_ui8_sampleState^(0+256),f
 13583                           
 13584                           ;bldc.c: 1027: };bldc.c: 1030: }
 13585                           
 13586                           ;bldc.c: 1023: {;bldc.c: 1025: break;
 13587                           
 13588                           ;bldc.c: 1018: };bldc.c: 1021: case 10:
 13589                           
 13590                           ;bldc.c: 1012: };bldc.c: 1015: break;
 13591  0D19  2D28               	goto	i1l267
 13592  0D1A                     i1l10806:	
 13593  0D1A  0022               	movlb	2	; select bank2
 13594  0D1B  0862               	movf	_ui8_sampleState^(0+256),w
 13595                           
 13596                           ; Switch size 1, requested type "space"
 13597                           ; Number of cases is 10, Range of values is 1 to 10
 13598                           ; switch strategies available:
 13599                           ; Name         Instructions Cycles
 13600                           ; direct_byte           29     9 (fixed)
 13601                           ; simple_byte           31    16 (average)
 13602                           ; jumptable            263     9 (fixed)
 13603                           ;	Chosen strategy is direct_byte
 13604  0D1C  3EFF               	addlw	-1
 13605  0D1D  1C03               	skipc
 13606  0D1E  2D28               	goto	i1l267
 13607  0D1F  0084               	movwf	4
 13608  0D20  300A               	movlw	10
 13609  0D21  0204               	subwf	4,w
 13610  0D22  1803               	skipnc
 13611  0D23  2D28               	goto	i1l267
 13612  0D24  3198               	movlp	high i1S11714
 13613  0D25  3504               	lslf	4,w
 13614  0D26  3E40               	addlw	low i1S11714
 13615  0D27  0082               	movwf	2
 13616  0D28                     i1l267:	
 13617                           
 13618                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
 13619  0D28  0020               	movlb	0	; select bank0
 13620  0D29  1F5A               	btfss	_MotorFlags,6
 13621  0D2A  2D6D               	goto	i1l10836
 13622                           
 13623                           ;bldc.c: 1071: {;bldc.c: 1073: if( MotorFlags.bits.B3)
 13624  0D2B  1DDA               	btfss	_MotorFlags,3
 13625  0D2C  2D6F               	goto	i1l10838
 13626                           
 13627                           ;bldc.c: 1075: {;bldc.c: 1077: bool_start_demand_mat = 1 ;
 13628  0D2D  0022               	movlb	2	; select bank2
 13629  0D2E  01E6               	clrf	_bool_start_demand_mat^(0+256)
 13630  0D2F  0AE6               	incf	_bool_start_demand_mat^(0+256),f
 13631                           
 13632                           ;bldc.c: 1078: ui8_fixed_start_speed_mat = 65 ;
 13633  0D30  3041               	movlw	65
 13634  0D31  0023               	movlb	3	; select bank3
 13635  0D32  00C4               	movwf	_ui8_fixed_start_speed_mat^(0+384)
 13636  0D33  3000               	movlw	0
 13637  0D34  00C5               	movwf	(_ui8_fixed_start_speed_mat^(0+384)+1)
 13638                           
 13639                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
 13640  0D35  0024               	movlb	4	; select bank4
 13641  0D36  01E2               	clrf	_ui16_Task_Cont500ms^(0+512)
 13642  0D37  01E3               	clrf	(_ui16_Task_Cont500ms+1)^(0+512)
 13643                           
 13644                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
 13645  0D38  3003               	movlw	3
 13646  0D39  0020               	movlb	0	; select bank0
 13647  0D3A  0553               	andwf	_comm_time,w
 13648  0D3B  00A0               	movwf	??_interrrupt_bldc
 13649  0D3C  3000               	movlw	0
 13650  0D3D  0554               	andwf	_comm_time+1,w
 13651  0D3E  00A1               	movwf	??_interrrupt_bldc+1
 13652  0D3F  0820               	movf	??_interrrupt_bldc,w
 13653  0D40  0421               	iorwf	??_interrrupt_bldc+1,w
 13654  0D41  1D03               	btfss	3,2
 13655  0D42  2D6F               	goto	i1l10838
 13656                           
 13657                           ;bldc.c: 1111: else;bldc.c: 1112: {;bldc.c: 1114: if (ui16_Ubat_bldc.w)
 13658                           
 13659                           ;bldc.c: 1105: };bldc.c: 1108: }
 13660                           
 13661                           ;bldc.c: 1100: {;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 13662                           
 13663                           ;bldc.c: 1096: {;bldc.c: 1098: if (ui16_Ubat_bldc.w)
 13664                           
 13665                           ;bldc.c: 1092: {;bldc.c: 1094: if (MotorFlags.bits.B4)
 13666  0D43  085B               	movf	_ui16_Ubat_bldc,w	;volatile
 13667  0D44  045C               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
 13668  0D45  1903               	btfsc	3,2
 13669  0D46  2D59               	goto	i1l10828
 13670                           
 13671                           ;bldc.c: 1116: {;bldc.c: 1119: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 13672  0D47  085C               	movf	_ui16_Ubat_bldc+1,w	;volatile
 13673  0D48  00F1               	movwf	___lwdiv@divisor+1
 13674  0D49  085B               	movf	_ui16_Ubat_bldc,w	;volatile
 13675  0D4A  00F0               	movwf	___lwdiv@divisor
 13676  0D4B  3080               	movlw	128
 13677  0D4C  00F2               	movwf	___lwdiv@dividend
 13678  0D4D  303E               	movlw	62
 13679  0D4E  00F3               	movwf	___lwdiv@dividend+1
 13680  0D4F  3192  2235  318B   	fcall	___lwdiv
 13681  0D52  0870               	movf	?___lwdiv,w
 13682  0D53  0020               	movlb	0	; select bank0
 13683  0D54  00A4               	movwf	interrrupt_bldc@ui32_tmp
 13684  0D55  0871               	movf	?___lwdiv+1,w
 13685  0D56  00A5               	movwf	interrrupt_bldc@ui32_tmp+1
 13686  0D57  01A6               	clrf	interrrupt_bldc@ui32_tmp+2
 13687  0D58  01A7               	clrf	interrrupt_bldc@ui32_tmp+3
 13688  0D59                     i1l10828:	
 13689                           
 13690                           ;bldc.c: 1121: };bldc.c: 1124: };bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui
      +                          32_tmp) )
 13691  0D59  0021               	movlb	1	; select bank1
 13692  0D5A  085F               	movf	_ui8_StartupPWM^(0+128),w
 13693  0D5B  0020               	movlb	0	; select bank0
 13694  0D5C  0224               	subwf	interrrupt_bldc@ui32_tmp,w
 13695  0D5D  1803               	skipnc
 13696  0D5E  2D63               	goto	i1l10832
 13697                           
 13698                           ;bldc.c: 1129: {;bldc.c: 1131: ui8_StartupPWM--;
 13699  0D5F  3001               	movlw	1
 13700  0D60  0021               	movlb	1	; select bank1
 13701  0D61  02DF               	subwf	_ui8_StartupPWM^(0+128),f
 13702                           
 13703                           ;bldc.c: 1133: }
 13704  0D62  2D69               	goto	i1l10834
 13705  0D63                     i1l10832:	
 13706                           
 13707                           ;bldc.c: 1136: else;bldc.c: 1137: {;bldc.c: 1139: ui8_StartupPWM++;
 13708  0D63  3001               	movlw	1
 13709  0D64  0020               	movlb	0	; select bank0
 13710  0D65  00A0               	movwf	??_interrrupt_bldc
 13711  0D66  0820               	movf	??_interrrupt_bldc,w
 13712  0D67  0021               	movlb	1	; select bank1
 13713  0D68  07DF               	addwf	_ui8_StartupPWM^(0+128),f
 13714  0D69                     i1l10834:	
 13715                           
 13716                           ;bldc.c: 1141: };bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
 13717  0D69  085F               	movf	_ui8_StartupPWM^(0+128),w
 13718  0D6A  0025               	movlb	5	; select bank5
 13719  0D6B  0091               	movwf	17	;volatile
 13720                           
 13721                           ;bldc.c: 1146: };bldc.c: 1149: };bldc.c: 1152: }
 13722  0D6C  2D6F               	goto	i1l10838
 13723  0D6D                     i1l10836:	
 13724                           
 13725                           ;bldc.c: 1155: else;bldc.c: 1156: {;bldc.c: 1159: CCPR1L = 0;
 13726  0D6D  0025               	movlb	5	; select bank5
 13727  0D6E  0191               	clrf	17	;volatile
 13728  0D6F                     i1l10838:	
 13729                           
 13730                           ;bldc.c: 1161: };bldc.c: 1165: if( 0 == ui8_BlankingCount )
 13731  0D6F  0021               	movlb	1	; select bank1
 13732  0D70  085D               	movf	_ui8_BlankingCount^(0+128),w
 13733  0D71  1D03               	btfss	3,2
 13734  0D72  2D9B               	goto	i1l10858
 13735                           
 13736                           ;bldc.c: 1168: {;bldc.c: 1177: if( ui8_CompFlag )
 13737  0D73  085A               	movf	_ui8_CompFlag^(0+128),w
 13738  0D74  1903               	btfsc	3,2
 13739  0D75  2D80               	goto	i1l316
 13740                           
 13741                           ;bldc.c: 1180: {;bldc.c: 1185: if( MotorFlags.bits.B5 == 0 )
 13742  0D76  0020               	movlb	0	; select bank0
 13743  0D77  1ADA               	btfsc	_MotorFlags,5
 13744  0D78  2D80               	goto	i1l316
 13745                           
 13746                           ;bldc.c: 1187: {;bldc.c: 1191: ui8_zero_cros_cnt++;
 13747  0D79  3001               	movlw	1
 13748  0D7A  0024               	movlb	4	; select bank4
 13749  0D7B  07E0               	addwf	_ui8_zero_cros_cnt^(0+512),f
 13750  0D7C  3000               	movlw	0
 13751  0D7D  3DE1               	addwfc	(_ui8_zero_cros_cnt+1)^(0+512),f
 13752                           
 13753                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
 13754  0D7E  0020               	movlb	0	; select bank0
 13755  0D7F  16DA               	bsf	_MotorFlags,5
 13756  0D80                     i1l316:	
 13757                           
 13758                           ;bldc.c: 1196: };bldc.c: 1199: };bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
 13759  0D80  0021               	movlb	1	; select bank1
 13760  0D81  085A               	movf	_ui8_CompFlag^(0+128),w
 13761  0D82  0020               	movlb	0	; select bank0
 13762  0D83  00A0               	movwf	??_interrrupt_bldc
 13763  0D84  0820               	movf	??_interrrupt_bldc,w
 13764  0D85  0022               	movlb	2	; select bank2
 13765  0D86  00E1               	movwf	_CompFlag_prev^(0+256)
 13766                           
 13767                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
 13768  0D87  0020               	movlb	0	; select bank0
 13769  0D88  1EDA               	btfss	_MotorFlags,5
 13770  0D89  0008               	return
 13771                           
 13772                           ;bldc.c: 1353: {;bldc.c: 1357: if( 0 == phase_delay_counter )
 13773  0D8A  0021               	movlb	1	; select bank1
 13774  0D8B  0838               	movf	_phase_delay_counter^(0+128),w
 13775  0D8C  0439               	iorwf	(_phase_delay_counter+1)^(0+128),w
 13776  0D8D  1D03               	btfss	3,2
 13777  0D8E  2D95               	goto	i1l10856
 13778                           
 13779                           ;bldc.c: 1360: {;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
 13780  0D8F  0020               	movlb	0	; select bank0
 13781  0D90  19DA               	btfsc	_MotorFlags,3
 13782  0D91  0008               	return
 13783                           
 13784                           ;bldc.c: 1364: {;bldc.c: 1378: commutate( );
 13785  0D92  3189  2126         	fcall	i1_commutate
 13786                           
 13787                           ;bldc.c: 1383: };bldc.c: 1386: }
 13788  0D94  0008               	return
 13789  0D95                     i1l10856:	
 13790                           
 13791                           ;bldc.c: 1389: else;bldc.c: 1390: {;bldc.c: 1392: phase_delay_counter--;
 13792  0D95  30FF               	movlw	255
 13793  0D96  0021               	movlb	1	; select bank1
 13794  0D97  07B8               	addwf	_phase_delay_counter^(0+128),f
 13795  0D98  30FF               	movlw	255
 13796  0D99  3DB9               	addwfc	(_phase_delay_counter+1)^(0+128),f
 13797                           
 13798                           ;bldc.c: 1394: };bldc.c: 1398: };bldc.c: 1401: }
 13799  0D9A  0008               	return
 13800  0D9B                     i1l10858:	
 13801                           
 13802                           ;bldc.c: 1404: else;bldc.c: 1405: {;bldc.c: 1407: ui8_BlankingCount--;
 13803  0D9B  3001               	movlw	1
 13804  0D9C  02DD               	subwf	_ui8_BlankingCount^(0+128),f
 13805                           
 13806                           ;bldc.c: 1408: bemf_filter = 62;
 13807  0D9D  303E               	movlw	62
 13808  0D9E  0020               	movlb	0	; select bank0
 13809  0D9F  00A0               	movwf	??_interrrupt_bldc
 13810  0DA0  0820               	movf	??_interrrupt_bldc,w
 13811  0DA1  0022               	movlb	2	; select bank2
 13812  0DA2  00E5               	movwf	_bemf_filter^(0+256)
 13813  0DA3  0008               	return
 13814  0DA4                     __end_of_interrrupt_bldc:	
 13815                           
 13816                           	psect	swtext3
 13817  1840                     __pswtext3:	
 13818  1840                     i1S11714:	
 13819  1840  318B  2B7C         	ljmp	i1l10628
 13820  1842  318B  2B8F         	ljmp	i1l10640
 13821  1844  318B  2BAE         	ljmp	i1l10680
 13822  1846  318B  2BF2         	ljmp	i1l10718
 13823  1848  318C  2C15         	ljmp	i1l10740
 13824  184A  318C  2C15         	ljmp	i1l10742
 13825  184C  318C  2C15         	ljmp	i1l10744
 13826  184E  318C  2C16         	ljmp	i1l284
 13827  1850  318C  2C29         	ljmp	i1l10754
 13828  1852  318D  2D28         	ljmp	i1l267
 13829                           
 13830                           	psect	text38
 13831  0926                     __ptext38:	
 13832 ;; *************** function i1_commutate *****************
 13833 ;; Defined at:
 13834 ;;		line 1426 in file "../bldc.c"
 13835 ;; Parameters:    Size  Location     Type
 13836 ;;		None
 13837 ;; Auto vars:     Size  Location     Type
 13838 ;;		None
 13839 ;; Return value:  Size  Location     Type
 13840 ;;                  1    wreg      void 
 13841 ;; Registers used:
 13842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 13843 ;; Tracked objects:
 13844 ;;		On entry : 0/0
 13845 ;;		On exit  : 0/0
 13846 ;;		Unchanged: 0/0
 13847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13848 ;;      Params:         0       0       0       0       0       0       0       0
 13849 ;;      Locals:         0       0       0       0       0       0       0       0
 13850 ;;      Temps:         12       0       0       0       0       0       0       0
 13851 ;;      Totals:        12       0       0       0       0       0       0       0
 13852 ;;Total ram usage:       12 bytes
 13853 ;; Hardware stack levels used:    1
 13854 ;; This function calls:
 13855 ;;		Nothing
 13856 ;; This function is called by:
 13857 ;;		_interrrupt_bldc
 13858 ;; This function uses a non-reentrant model
 13859 ;;
 13860                           
 13861                           
 13862                           ;psect for function i1_commutate
 13863  0926                     i1_commutate:	
 13864                           
 13865                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 13866                           
 13867                           ;incstack = 0
 13868                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0]
 13869  0926  3000               	movlw	0
 13870  0927  0021               	movlb	1	; select bank1
 13871  0928  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 13872  0929  300A               	movlw	10
 13873  092A  1903               	skipnz
 13874  092B  023A               	subwf	_ui16_step_cnt^(0+128),w
 13875  092C  1803               	skipnc
 13876  092D  2932               	goto	i1l6190
 13877                           
 13878                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
 13879  092E  3001               	movlw	1
 13880  092F  07BA               	addwf	_ui16_step_cnt^(0+128),f
 13881  0930  3000               	movlw	0
 13882  0931  3DBB               	addwfc	(_ui16_step_cnt+1)^(0+128),f
 13883  0932                     i1l6190:	
 13884                           
 13885                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 13886  0932  3559               	lslf	_Bcnt^(0+128),w
 13887  0933  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 13888  0934  0086               	movwf	6
 13889  0935  3002               	movlw	2	; select bank4/5
 13890  0936  0087               	movwf	7
 13891  0937  0020               	movlb	0	; select bank0
 13892  0938  0853               	movf	_comm_time,w
 13893  0939  3FC0               	movwi [0]fsr1
 13894  093A  0854               	movf	_comm_time+1,w
 13895  093B  3FC1               	movwi [1]fsr1
 13896  093C  3001               	movlw	1
 13897  093D  00F0               	movwf	??i1_commutate
 13898  093E  0870               	movf	??i1_commutate,w
 13899  093F  0021               	movlb	1	; select bank1
 13900  0940  07D9               	addwf	_Bcnt^(0+128),f
 13901                           
 13902                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 13903  0941  3007               	movlw	7
 13904  0942  00F0               	movwf	??i1_commutate
 13905  0943  0870               	movf	??i1_commutate,w
 13906  0944  05D9               	andwf	_Bcnt^(0+128),f
 13907                           
 13908                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 13909  0945  300E               	movlw	14
 13910  0946  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 13911  0947  0086               	movwf	6
 13912  0948  3002               	movlw	2	; select bank4/5
 13913  0949  0087               	movwf	7
 13914  094A  300C               	movlw	12
 13915  094B  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 13916  094C  0084               	movwf	4
 13917  094D  3002               	movlw	2	; select bank4/5
 13918  094E  0085               	movwf	5
 13919  094F  0024               	movlb	4	; select bank4
 13920  0950  0824               	movf	(_B^(0+512)+4),w
 13921  0951  0722               	addwf	(_B^(0+512)+2),w
 13922  0952  00F0               	movwf	??i1_commutate
 13923  0953  0825               	movf	((_B+1)^(0+512)+4),w
 13924  0954  3D23               	addwfc	((_B+1)^(0+512)+2),w
 13925  0955  00F1               	movwf	??i1_commutate+1
 13926  0956  0826               	movf	(_B^(0+512)+6),w
 13927  0957  0770               	addwf	??i1_commutate,w
 13928  0958  00F2               	movwf	??i1_commutate+2
 13929  0959  0827               	movf	((_B+1)^(0+512)+6),w
 13930  095A  3D71               	addwfc	??i1_commutate+1,w
 13931  095B  00F3               	movwf	??i1_commutate+3
 13932  095C  0828               	movf	(_B^(0+512)+8),w
 13933  095D  0772               	addwf	??i1_commutate+2,w
 13934  095E  00F4               	movwf	??i1_commutate+4
 13935  095F  0829               	movf	((_B+1)^(0+512)+8),w
 13936  0960  3D73               	addwfc	??i1_commutate+3,w
 13937  0961  00F5               	movwf	??i1_commutate+5
 13938  0962  082A               	movf	(_B^(0+512)+10),w
 13939  0963  0774               	addwf	??i1_commutate+4,w
 13940  0964  00F6               	movwf	??i1_commutate+6
 13941  0965  082B               	movf	((_B+1)^(0+512)+10),w
 13942  0966  3D75               	addwfc	??i1_commutate+5,w
 13943  0967  00F7               	movwf	??i1_commutate+7
 13944  0968  3F00               	moviw [0]fsr0
 13945  0969  0776               	addwf	??i1_commutate+6,w
 13946  096A  00F8               	movwf	??i1_commutate+8
 13947  096B  3F01               	moviw [1]fsr0
 13948  096C  3D77               	addwfc	??i1_commutate+7,w
 13949  096D  00F9               	movwf	??i1_commutate+9
 13950  096E  3F40               	moviw [0]fsr1
 13951  096F  0778               	addwf	??i1_commutate+8,w
 13952  0970  00FA               	movwf	??i1_commutate+10
 13953  0971  3F41               	moviw [1]fsr1
 13954  0972  3D79               	addwfc	??i1_commutate+9,w
 13955  0973  00FB               	movwf	??i1_commutate+11
 13956  0974  0820               	movf	_B^(0+512),w
 13957  0975  077A               	addwf	??i1_commutate+10,w
 13958  0976  0021               	movlb	1	; select bank1
 13959  0977  00B2               	movwf	_ui16_speed_fil^(0+128)
 13960  0978  0024               	movlb	4	; select bank4
 13961  0979  0821               	movf	(_B+1)^(0+512),w
 13962  097A  3D7B               	addwfc	??i1_commutate+11,w
 13963  097B  0021               	movlb	1	; select bank1
 13964  097C  00B3               	movwf	(_ui16_speed_fil+1)^(0+128)
 13965                           
 13966                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 13967  097D  0020               	movlb	0	; select bank0
 13968  097E  0854               	movf	_comm_time+1,w
 13969  097F  0023               	movlb	3	; select bank3
 13970  0980  00C3               	movwf	(_ui16_speed_rar+1)^(0+384)
 13971  0981  0020               	movlb	0	; select bank0
 13972  0982  0853               	movf	_comm_time,w
 13973  0983  0023               	movlb	3	; select bank3
 13974  0984  00C2               	movwf	_ui16_speed_rar^(0+384)
 13975                           
 13976                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 13977  0985  0020               	movlb	0	; select bank0
 13978  0986  12DA               	bcf	_MotorFlags,5
 13979                           
 13980                           ;bldc.c: 1451: ui8_sampleState = 1;
 13981  0987  0022               	movlb	2	; select bank2
 13982  0988  01E2               	clrf	_ui8_sampleState^(0+256)
 13983  0989  0AE2               	incf	_ui8_sampleState^(0+256),f
 13984                           
 13985                           ;bldc.c: 1455: bemf_filter = 62;
 13986  098A  303E               	movlw	62
 13987  098B  00F0               	movwf	??i1_commutate
 13988  098C  0870               	movf	??i1_commutate,w
 13989  098D  00E5               	movwf	_bemf_filter^(0+256)
 13990                           
 13991                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 13992  098E  0020               	movlb	0	; select bank0
 13993  098F  17DA               	bsf	_MotorFlags,7
 13994                           
 13995                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 13996  0990  1DDA               	btfss	_MotorFlags,3
 13997  0991  2A04               	goto	i1l327
 13998                           
 13999                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
 14000  0992  0023               	movlb	3	; select bank3
 14001  0993  0843               	movf	(_ui16_speed_rar+1)^(0+384),w
 14002  0994  00F1               	movwf	??i1_commutate+1
 14003  0995  0842               	movf	_ui16_speed_rar^(0+384),w
 14004  0996  00F0               	movwf	??i1_commutate
 14005  0997  36F1               	lsrf	??i1_commutate+1,f
 14006  0998  0CF0               	rrf	??i1_commutate,f
 14007  0999  36F1               	lsrf	??i1_commutate+1,f
 14008  099A  0CF0               	rrf	??i1_commutate,f
 14009  099B  36F1               	lsrf	??i1_commutate+1,f
 14010  099C  0CF0               	rrf	??i1_commutate,f
 14011  099D  30FF               	movlw	255
 14012  099E  0570               	andwf	??i1_commutate,w
 14013  099F  0021               	movlb	1	; select bank1
 14014  09A0  00B6               	movwf	_ui16_phase_advancement^(0+128)
 14015  09A1  3001               	movlw	1
 14016  09A2  0571               	andwf	??i1_commutate+1,w
 14017  09A3  00B7               	movwf	(_ui16_phase_advancement+1)^(0+128)
 14018                           
 14019                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 14020  09A4  0020               	movlb	0	; select bank0
 14021  09A5  0854               	movf	_comm_time+1,w
 14022  09A6  0021               	movlb	1	; select bank1
 14023  09A7  0237               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 14024  09A8  1D03               	skipz
 14025  09A9  29AE               	goto	u347_25
 14026  09AA  0020               	movlb	0	; select bank0
 14027  09AB  0853               	movf	_comm_time,w
 14028  09AC  0021               	movlb	1	; select bank1
 14029  09AD  0236               	subwf	_ui16_phase_advancement^(0+128),w
 14030  09AE                     u347_25:	
 14031  09AE  1803               	skipnc
 14032  09AF  29C2               	goto	i1l6216
 14033                           
 14034                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
 14035  09B0  0936               	comf	_ui16_phase_advancement^(0+128),w
 14036  09B1  00F0               	movwf	??i1_commutate
 14037  09B2  0937               	comf	(_ui16_phase_advancement+1)^(0+128),w
 14038  09B3  00F1               	movwf	??i1_commutate+1
 14039  09B4  0AF0               	incf	??i1_commutate,f
 14040  09B5  1903               	skipnz
 14041  09B6  0AF1               	incf	??i1_commutate+1,f
 14042  09B7  0020               	movlb	0	; select bank0
 14043  09B8  0853               	movf	_comm_time,w
 14044  09B9  0770               	addwf	??i1_commutate,w
 14045  09BA  0021               	movlb	1	; select bank1
 14046  09BB  00B8               	movwf	_phase_delay_counter^(0+128)
 14047  09BC  0020               	movlb	0	; select bank0
 14048  09BD  0854               	movf	_comm_time+1,w
 14049  09BE  3D71               	addwfc	??i1_commutate+1,w
 14050  09BF  0021               	movlb	1	; select bank1
 14051  09C0  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
 14052                           
 14053                           ;bldc.c: 1478: }
 14054  09C1  29C4               	goto	i1l6218
 14055  09C2                     i1l6216:	
 14056                           
 14057                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
 14058  09C2  01B8               	clrf	_phase_delay_counter^(0+128)
 14059  09C3  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14060  09C4                     i1l6218:	
 14061                           
 14062                           ;bldc.c: 1486: };bldc.c: 1489: phase_delay_counter_debug = phase_delay_counter;
 14063  09C4  0839               	movf	(_phase_delay_counter+1)^(0+128),w
 14064  09C5  0024               	movlb	4	; select bank4
 14065  09C6  00DF               	movwf	(_phase_delay_counter_debug+1)^(0+512)
 14066  09C7  0021               	movlb	1	; select bank1
 14067  09C8  0838               	movf	_phase_delay_counter^(0+128),w
 14068  09C9  0024               	movlb	4	; select bank4
 14069  09CA  00DE               	movwf	_phase_delay_counter_debug^(0+512)
 14070                           
 14071                           ;bldc.c: 1508: switch (ui16_step_cnt)
 14072  09CB  29DF               	goto	i1l6242
 14073  09CC                     i1l6220:	
 14074                           ;bldc.c: 1510: {;bldc.c: 1512: case 0 :
 14075                           
 14076                           
 14077                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
 14078  09CC  30A6               	movlw	166
 14079  09CD  29DA               	goto	L75
 14080  09CE                     i1l6222:	
 14081                           ;bldc.c: 1519: };bldc.c: 1522: case 1:
 14082                           
 14083                           ;bldc.c: 1517: break;
 14084                           
 14085                           
 14086                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
 14087  09CE  30F4               	movlw	244
 14088  09CF  0022               	movlb	2	; select bank2
 14089  09D0  00A5               	movwf	_ui16_comm_time_max^(0+256)
 14090  09D1  3001               	movlw	1
 14091  09D2  29DD               	goto	L69
 14092  09D3                     i1l6224:	
 14093                           ;bldc.c: 1529: };bldc.c: 1532: case 2:
 14094                           
 14095                           ;bldc.c: 1527: break;
 14096                           
 14097                           
 14098                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
 14099  09D3  307D               	movlw	125
 14100  09D4  29DA               	goto	L75
 14101  09D5                     i1l6226:	
 14102                           ;bldc.c: 1539: };bldc.c: 1542: case 3:
 14103                           
 14104                           ;bldc.c: 1537: break;
 14105                           
 14106                           
 14107                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
 14108  09D5  3053               	movlw	83
 14109  09D6  29DA               	goto	L75
 14110  09D7                     i1l6228:	
 14111                           ;bldc.c: 1549: };bldc.c: 1552: case 4:
 14112                           
 14113                           ;bldc.c: 1547: break;
 14114                           
 14115                           
 14116                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
 14117  09D7  303E               	movlw	62
 14118  09D8  29DA               	goto	L75
 14119  09D9                     i1l6230:	
 14120                           ;bldc.c: 1559: };bldc.c: 1562: case 5:
 14121                           
 14122                           ;bldc.c: 1557: break;
 14123                           
 14124  09D9                     i1l6232:	
 14125                           ;bldc.c: 1569: };bldc.c: 1572: case 6:
 14126                           
 14127                           ;bldc.c: 1567: break;
 14128                           
 14129                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14130                           
 14131  09D9                     i1l6234:	
 14132                           ;bldc.c: 1579: };bldc.c: 1582: case 7:
 14133                           
 14134                           ;bldc.c: 1577: break;
 14135                           
 14136                           ;bldc.c: 1574: {;bldc.c: 1576: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14137                           
 14138  09D9                     i1l6236:	
 14139                           ;bldc.c: 1589: };bldc.c: 1592: case 8:
 14140                           
 14141                           ;bldc.c: 1587: break;
 14142                           
 14143                           ;bldc.c: 1584: {;bldc.c: 1586: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14144                           
 14145  09D9                     i1l6238:	
 14146                           ;bldc.c: 1599: };bldc.c: 1602: case 9:
 14147                           
 14148                           ;bldc.c: 1597: break;
 14149                           
 14150                           ;bldc.c: 1594: {;bldc.c: 1596: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14151                           
 14152  09D9                     i1l6240:	
 14153                           ;bldc.c: 1609: };bldc.c: 1613: default:
 14154                           
 14155                           ;bldc.c: 1607: break;
 14156                           
 14157                           ;bldc.c: 1604: {;bldc.c: 1606: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14158                           
 14159                           
 14160                           ;bldc.c: 1614: {;bldc.c: 1616: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
 14161  09D9  3032               	movlw	50
 14162  09DA                     L75:	
 14163  09DA  0022               	movlb	2	; select bank2
 14164  09DB  00A5               	movwf	_ui16_comm_time_max^(0+256)
 14165  09DC  3000               	movlw	0
 14166  09DD                     L69:	
 14167  09DD  00A6               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14168                           
 14169                           ;bldc.c: 1618: };bldc.c: 1620: }
 14170  09DE  29EF               	goto	i1l6244
 14171  09DF                     i1l6242:	
 14172                           
 14173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14174                           ; Switch size 1, requested type "space"
 14175                           ; Number of cases is 1, Range of values is 0 to 0
 14176                           ; switch strategies available:
 14177                           ; Name         Instructions Cycles
 14178                           ; simple_byte            4     3 (average)
 14179                           ; direct_byte            8     6 (fixed)
 14180                           ; jumptable            260     6 (fixed)
 14181                           ;	Chosen strategy is simple_byte
 14182  09DF  0021               	movlb	1	; select bank1
 14183  09E0  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
 14184  09E1  3A00               	xorlw	0	; case 0
 14185  09E2  1903               	skipnz
 14186  09E3  29E5               	goto	i1l11716
 14187  09E4  29D9               	goto	i1l6240
 14188  09E5                     i1l11716:	
 14189                           
 14190                           ; Switch size 1, requested type "space"
 14191                           ; Number of cases is 10, Range of values is 0 to 9
 14192                           ; switch strategies available:
 14193                           ; Name         Instructions Cycles
 14194                           ; direct_byte           26     6 (fixed)
 14195                           ; simple_byte           31    16 (average)
 14196                           ; jumptable            260     6 (fixed)
 14197                           ;	Chosen strategy is direct_byte
 14198  09E5  083A               	movf	_ui16_step_cnt^(0+128),w
 14199  09E6  0084               	movwf	4
 14200  09E7  300A               	movlw	10
 14201  09E8  0204               	subwf	4,w
 14202  09E9  1803               	skipnc
 14203  09EA  29D9               	goto	i1l6240
 14204  09EB  3198               	movlp	high i1S11718
 14205  09EC  3504               	lslf	4,w
 14206  09ED  3E54               	addlw	low i1S11718
 14207  09EE  0082               	movwf	2
 14208  09EF                     i1l6244:	
 14209                           
 14210                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
 14211  09EF  3000               	movlw	0
 14212  09F0  0022               	movlb	2	; select bank2
 14213  09F1  0226               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 14214  09F2  3032               	movlw	50
 14215  09F3  1903               	skipnz
 14216  09F4  0225               	subwf	_ui16_comm_time_max^(0+256),w
 14217  09F5  1803               	skipnc
 14218  09F6  29FB               	goto	i1l6248
 14219                           
 14220                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
 14221  09F7  3032               	movlw	50
 14222  09F8  00A5               	movwf	_ui16_comm_time_max^(0+256)
 14223  09F9  3000               	movlw	0
 14224  09FA  00A6               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14225  09FB                     i1l6248:	
 14226                           
 14227                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
 14228  09FB  0020               	movlb	0	; select bank0
 14229  09FC  1E5A               	btfss	_MotorFlags,4
 14230  09FD  2A43               	goto	i1l345
 14231                           
 14232                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
 14233  09FE  300A               	movlw	10
 14234  09FF  00F0               	movwf	??i1_commutate
 14235  0A00  0870               	movf	??i1_commutate,w
 14236  0A01  0021               	movlb	1	; select bank1
 14237  0A02  00DF               	movwf	_ui8_StartupPWM^(0+128)
 14238                           
 14239                           ;bldc.c: 1641: };bldc.c: 1644: }
 14240  0A03  2A43               	goto	i1l345
 14241  0A04                     i1l327:	
 14242                           
 14243                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
 14244  0A04  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14245  0A05  2A0A               	goto	i1l6254
 14246                           
 14247                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
 14248  0A06  0021               	movlb	1	; select bank1
 14249  0A07  01B8               	clrf	_phase_delay_counter^(0+128)
 14250  0A08  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14251                           
 14252                           ;bldc.c: 1659: }
 14253  0A09  2A16               	goto	i1l6256
 14254  0A0A                     i1l6254:	
 14255                           
 14256                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 14257  0A0A  0020               	movlb	0	; select bank0
 14258  0A0B  0854               	movf	_comm_time+1,w
 14259  0A0C  00F1               	movwf	??i1_commutate+1
 14260  0A0D  0853               	movf	_comm_time,w
 14261  0A0E  00F0               	movwf	??i1_commutate
 14262  0A0F  36F1               	lsrf	??i1_commutate+1,f
 14263  0A10  0CF0               	rrf	??i1_commutate,f
 14264  0A11  0870               	movf	??i1_commutate,w
 14265  0A12  0021               	movlb	1	; select bank1
 14266  0A13  00B8               	movwf	_phase_delay_counter^(0+128)
 14267  0A14  0871               	movf	??i1_commutate+1,w
 14268  0A15  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
 14269  0A16                     i1l6256:	
 14270                           
 14271                           ;bldc.c: 1670: };bldc.c: 1675: phase_delay_counter = 0;
 14272  0A16  01B8               	clrf	_phase_delay_counter^(0+128)
 14273  0A17  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14274                           
 14275                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 14276  0A18  0839               	movf	(_phase_delay_counter+1)^(0+128),w
 14277  0A19  0024               	movlb	4	; select bank4
 14278  0A1A  00DF               	movwf	(_phase_delay_counter_debug+1)^(0+512)
 14279  0A1B  0021               	movlb	1	; select bank1
 14280  0A1C  0838               	movf	_phase_delay_counter^(0+128),w
 14281  0A1D  0024               	movlb	4	; select bank4
 14282  0A1E  00DE               	movwf	_phase_delay_counter_debug^(0+512)
 14283                           
 14284                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
 14285  0A1F  3032               	movlw	50
 14286  0A20  0022               	movlb	2	; select bank2
 14287  0A21  00A5               	movwf	_ui16_comm_time_max^(0+256)
 14288  0A22  3000               	movlw	0
 14289  0A23  00A6               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14290                           
 14291                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 14292  0A24  0020               	movlb	0	; select bank0
 14293  0A25  1F5A               	btfss	_MotorFlags,6
 14294  0A26  2A41               	goto	i1l6266
 14295                           
 14296                           ;bldc.c: 1693: {;bldc.c: 1751: CCPR1L = ui16_duty_cycle_BLDC >> 2;
 14297  0A27  0021               	movlb	1	; select bank1
 14298  0A28  0831               	movf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
 14299  0A29  00F1               	movwf	??i1_commutate+1
 14300  0A2A  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 14301  0A2B  00F0               	movwf	??i1_commutate
 14302  0A2C  36F1               	lsrf	??i1_commutate+1,f
 14303  0A2D  0CF0               	rrf	??i1_commutate,f
 14304  0A2E  36F1               	lsrf	??i1_commutate+1,f
 14305  0A2F  0CF0               	rrf	??i1_commutate,f
 14306  0A30  0870               	movf	??i1_commutate,w
 14307  0A31  0025               	movlb	5	; select bank5
 14308  0A32  0091               	movwf	17	;volatile
 14309                           
 14310                           ;bldc.c: 1752: CCP1CON = ((ui16_duty_cycle_BLDC & 0b11) << 4) | 0x0C;
 14311  0A33  0021               	movlb	1	; select bank1
 14312  0A34  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 14313  0A35  3903               	andlw	3
 14314  0A36  00F0               	movwf	??i1_commutate
 14315  0A37  3003               	movlw	3
 14316  0A38                     u352_25:	
 14317  0A38  35F0               	lslf	??i1_commutate,f
 14318  0A39  3EFF               	addlw	-1
 14319  0A3A  1D03               	skipz
 14320  0A3B  2A38               	goto	u352_25
 14321  0A3C  3570               	lslf	??i1_commutate,w
 14322  0A3D  380C               	iorlw	12
 14323  0A3E  0025               	movlb	5	; select bank5
 14324  0A3F  0093               	movwf	19	;volatile
 14325                           
 14326                           ;bldc.c: 1766: }
 14327  0A40  2A43               	goto	i1l345
 14328  0A41                     i1l6266:	
 14329                           
 14330                           ;bldc.c: 1769: else;bldc.c: 1770: {;bldc.c: 1772: CCPR1L = 0;
 14331  0A41  0025               	movlb	5	; select bank5
 14332  0A42  0191               	clrf	17	;volatile
 14333  0A43                     i1l345:	
 14334                           
 14335                           ;bldc.c: 1774: };bldc.c: 1778: };bldc.c: 1781: comm_time = 0;
 14336  0A43  0020               	movlb	0	; select bank0
 14337  0A44  01D3               	clrf	_comm_time
 14338  0A45  01D4               	clrf	_comm_time+1
 14339                           
 14340                           ;bldc.c: 1785: if( comm_state == 0xff )
 14341  0A46  0021               	movlb	1	; select bank1
 14342  0A47  0A5E               	incf	_comm_state^(0+128),w
 14343  0A48  1D03               	btfss	3,2
 14344  0A49  2B28               	goto	i1l6416
 14345                           
 14346                           ;bldc.c: 1787: {;bldc.c: 1789: comm_state = 6;
 14347  0A4A  3006               	movlw	6
 14348  0A4B  00F0               	movwf	??i1_commutate
 14349  0A4C  0870               	movf	??i1_commutate,w
 14350  0A4D  00DE               	movwf	_comm_state^(0+128)
 14351                           
 14352                           ;bldc.c: 1791: };bldc.c: 1794: switch( comm_state )
 14353  0A4E  2B28               	goto	i1l6416
 14354  0A4F                     i1l6272:	
 14355                           ;bldc.c: 1796: {;bldc.c: 1798: case 1:
 14356                           
 14357                           
 14358                           ;bldc.c: 1801: {;bldc.c: 1807: PSTR1CON = 0b00000001;
 14359  0A4F  3001               	movlw	1
 14360  0A50  0025               	movlb	5	; select bank5
 14361  0A51  0096               	movwf	22	;volatile
 14362                           
 14363                           ;bldc.c: 1810: if( MotorFlags.bits.B6 )
 14364  0A52  0020               	movlb	0	; select bank0
 14365  0A53  1F5A               	btfss	_MotorFlags,6
 14366  0A54  2A5A               	goto	i1l6278
 14367                           
 14368                           ;bldc.c: 1812: {;bldc.c: 1814: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 14369  0A55  0022               	movlb	2	; select bank2
 14370  0A56  080E               	movf	14,w	;volatile
 14371  0A57  39E5               	andlw	229
 14372  0A58  380A               	iorlw	10
 14373  0A59  008E               	movwf	14	;volatile
 14374  0A5A                     i1l6278:	
 14375                           
 14376                           ;bldc.c: 1816: };bldc.c: 1820: LATB2 = 0;
 14377  0A5A  0022               	movlb	2	; select bank2
 14378  0A5B  110D               	bcf	13,2	;volatile
 14379                           
 14380                           ;bldc.c: 1821: LATB1 = 0;
 14381  0A5C  108D               	bcf	13,1	;volatile
 14382                           
 14383                           ;bldc.c: 1822: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 14384  0A5D  3009               	movlw	9
 14385  0A5E  00F0               	movwf	??i1_commutate
 14386  0A5F  0870               	movf	??i1_commutate,w
 14387  0A60  0021               	movlb	1	; select bank1
 14388  0A61  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14389                           
 14390                           ;bldc.c: 1823: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 14391  0A62  01DB               	clrf	_ui8_UPhase_sel^(0+128)
 14392  0A63  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
 14393                           
 14394                           ;bldc.c: 1824: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 14395  0A64  3025               	movlw	37
 14396  0A65  00F0               	movwf	??i1_commutate
 14397  0A66  0870               	movf	??i1_commutate,w
 14398  0A67  0022               	movlb	2	; select bank2
 14399  0A68  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
 14400                           
 14401                           ;bldc.c: 1825: CM1CON1 = 0x02;
 14402  0A69  3002               	movlw	2
 14403  0A6A  0092               	movwf	18	;volatile
 14404                           
 14405                           ;bldc.c: 1838: CM1CON0 = 0x84;
 14406  0A6B  3084               	movlw	132
 14407  0A6C  0091               	movwf	17	;volatile
 14408                           
 14409                           ;bldc.c: 1839: rising_bemf_flag = 1;
 14410  0A6D  0020               	movlb	0	; select bank0
 14411  0A6E  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14412                           
 14413                           ;bldc.c: 1840: comm_state = 6;
 14414  0A6F  3006               	movlw	6
 14415  0A70  2B19               	goto	L73
 14416  0A71                     i1l6296:	
 14417                           ;bldc.c: 1850: };bldc.c: 1853: case 2:
 14418                           
 14419                           ;bldc.c: 1846: break;
 14420                           
 14421                           
 14422                           ;bldc.c: 1856: {;bldc.c: 1861: PSTR1CON = 0b00000001;
 14423  0A71  3001               	movlw	1
 14424  0A72  0025               	movlb	5	; select bank5
 14425  0A73  0096               	movwf	22	;volatile
 14426                           
 14427                           ;bldc.c: 1864: if( MotorFlags.bits.B6 )
 14428  0A74  0020               	movlb	0	; select bank0
 14429  0A75  1F5A               	btfss	_MotorFlags,6
 14430  0A76  2A7C               	goto	i1l6302
 14431                           
 14432                           ;bldc.c: 1866: {;bldc.c: 1868: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 14433  0A77  0022               	movlb	2	; select bank2
 14434  0A78  080E               	movf	14,w	;volatile
 14435  0A79  39E5               	andlw	229
 14436  0A7A  3812               	iorlw	18
 14437  0A7B  008E               	movwf	14	;volatile
 14438  0A7C                     i1l6302:	
 14439                           
 14440                           ;bldc.c: 1870: };bldc.c: 1874: LATB2 = 1;
 14441  0A7C  0022               	movlb	2	; select bank2
 14442  0A7D  150D               	bsf	13,2	;volatile
 14443                           
 14444                           ;bldc.c: 1875: LATB1 = 0;
 14445  0A7E  108D               	bcf	13,1	;volatile
 14446                           
 14447                           ;bldc.c: 1876: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 14448  0A7F  3009               	movlw	9
 14449  0A80  00F0               	movwf	??i1_commutate
 14450  0A81  0870               	movf	??i1_commutate,w
 14451  0A82  0021               	movlb	1	; select bank1
 14452  0A83  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14453                           
 14454                           ;bldc.c: 1877: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 14455  0A84  01DB               	clrf	_ui8_UPhase_sel^(0+128)
 14456  0A85  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
 14457                           
 14458                           ;bldc.c: 1878: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 14459  0A86  3005               	movlw	5
 14460  0A87  00F0               	movwf	??i1_commutate
 14461  0A88  0870               	movf	??i1_commutate,w
 14462  0A89  0022               	movlb	2	; select bank2
 14463  0A8A  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
 14464                           
 14465                           ;bldc.c: 1879: CM1CON1 = 0x01;
 14466  0A8B  3001               	movlw	1
 14467  0A8C  0092               	movwf	18	;volatile
 14468                           
 14469                           ;bldc.c: 1893: CM1CON0 = 0x94;
 14470  0A8D  3094               	movlw	148
 14471  0A8E  0091               	movwf	17	;volatile
 14472  0A8F  2B22               	goto	L74
 14473  0A90                     i1l6320:	
 14474                           ;bldc.c: 1907: };bldc.c: 1910: case 3:
 14475                           
 14476                           ;bldc.c: 1903: break;
 14477                           
 14478                           ;bldc.c: 1895: comm_state = 1;
 14479                           
 14480                           ;bldc.c: 1894: rising_bemf_flag = 0;
 14481                           
 14482                           
 14483                           ;bldc.c: 1913: {;bldc.c: 1918: PSTR1CON = 0b00000010;
 14484  0A90  3002               	movlw	2
 14485  0A91  0025               	movlb	5	; select bank5
 14486  0A92  0096               	movwf	22	;volatile
 14487                           
 14488                           ;bldc.c: 1921: if( MotorFlags.bits.B6 )
 14489  0A93  0020               	movlb	0	; select bank0
 14490  0A94  1F5A               	btfss	_MotorFlags,6
 14491  0A95  2A9B               	goto	i1l6326
 14492                           
 14493                           ;bldc.c: 1923: {;bldc.c: 1925: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 14494  0A96  0022               	movlb	2	; select bank2
 14495  0A97  080E               	movf	14,w	;volatile
 14496  0A98  39E5               	andlw	229
 14497  0A99  3818               	iorlw	24
 14498  0A9A  008E               	movwf	14	;volatile
 14499  0A9B                     i1l6326:	
 14500                           
 14501                           ;bldc.c: 1927: };bldc.c: 1930: LATC2 = 0;
 14502  0A9B  0022               	movlb	2	; select bank2
 14503  0A9C  110E               	bcf	14,2	;volatile
 14504                           
 14505                           ;bldc.c: 1932: LATB1 = 0;
 14506  0A9D  108D               	bcf	13,1	;volatile
 14507                           
 14508                           ;bldc.c: 1933: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 14509  0A9E  3035               	movlw	53
 14510  0A9F  00F0               	movwf	??i1_commutate
 14511  0AA0  0870               	movf	??i1_commutate,w
 14512  0AA1  0021               	movlb	1	; select bank1
 14513  0AA2  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14514                           
 14515                           ;bldc.c: 1934: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 14516  0AA3  3005               	movlw	5
 14517  0AA4  00F0               	movwf	??i1_commutate
 14518  0AA5  0870               	movf	??i1_commutate,w
 14519  0AA6  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14520                           
 14521                           ;bldc.c: 1935: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 14522  0AA7  0022               	movlb	2	; select bank2
 14523  0AA8  01E3               	clrf	_ui8_Ubemf_sel^(0+256)
 14524  0AA9  0AE3               	incf	_ui8_Ubemf_sel^(0+256),f
 14525                           
 14526                           ;bldc.c: 1936: CM1CON1 = 0x00;
 14527  0AAA  0192               	clrf	18	;volatile
 14528                           
 14529                           ;bldc.c: 1950: CM1CON0 = 0x84;
 14530  0AAB  3084               	movlw	132
 14531  0AAC  0091               	movwf	17	;volatile
 14532                           
 14533                           ;bldc.c: 1951: rising_bemf_flag = 1;
 14534  0AAD  0020               	movlb	0	; select bank0
 14535  0AAE  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14536                           
 14537                           ;bldc.c: 1952: comm_state = 2;
 14538  0AAF  3002               	movlw	2
 14539  0AB0  2B19               	goto	L73
 14540  0AB1                     i1l6340:	
 14541                           ;bldc.c: 1961: };bldc.c: 1964: case 4:
 14542                           
 14543                           ;bldc.c: 1957: break;
 14544                           
 14545                           
 14546                           ;bldc.c: 1967: {;bldc.c: 1973: PSTR1CON = 0b00000010;
 14547  0AB1  3002               	movlw	2
 14548  0AB2  0025               	movlb	5	; select bank5
 14549  0AB3  0096               	movwf	22	;volatile
 14550                           
 14551                           ;bldc.c: 1976: if( MotorFlags.bits.B6 )
 14552  0AB4  0020               	movlb	0	; select bank0
 14553  0AB5  1F5A               	btfss	_MotorFlags,6
 14554  0AB6  2ABC               	goto	i1l6346
 14555                           
 14556                           ;bldc.c: 1978: {;bldc.c: 1980: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 14557  0AB7  0022               	movlb	2	; select bank2
 14558  0AB8  080E               	movf	14,w	;volatile
 14559  0AB9  39E5               	andlw	229
 14560  0ABA  380A               	iorlw	10
 14561  0ABB  008E               	movwf	14	;volatile
 14562  0ABC                     i1l6346:	
 14563                           
 14564                           ;bldc.c: 1982: };bldc.c: 1985: LATC2 = 0;
 14565  0ABC  0022               	movlb	2	; select bank2
 14566  0ABD  110E               	bcf	14,2	;volatile
 14567                           
 14568                           ;bldc.c: 1987: LATB1 = 1;
 14569  0ABE  148D               	bsf	13,1	;volatile
 14570                           
 14571                           ;bldc.c: 1988: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 14572  0ABF  3035               	movlw	53
 14573  0AC0  00F0               	movwf	??i1_commutate
 14574  0AC1  0870               	movf	??i1_commutate,w
 14575  0AC2  0021               	movlb	1	; select bank1
 14576  0AC3  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14577                           
 14578                           ;bldc.c: 1989: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 14579  0AC4  3005               	movlw	5
 14580  0AC5  00F0               	movwf	??i1_commutate
 14581  0AC6  0870               	movf	??i1_commutate,w
 14582  0AC7  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14583                           
 14584                           ;bldc.c: 1990: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 14585  0AC8  3025               	movlw	37
 14586  0AC9  00F0               	movwf	??i1_commutate
 14587  0ACA  0870               	movf	??i1_commutate,w
 14588  0ACB  0022               	movlb	2	; select bank2
 14589  0ACC  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
 14590                           
 14591                           ;bldc.c: 1991: CM1CON1 = 0x02;
 14592  0ACD  3002               	movlw	2
 14593  0ACE  0092               	movwf	18	;volatile
 14594                           
 14595                           ;bldc.c: 2005: CM1CON0 = 0x94;
 14596  0ACF  3094               	movlw	148
 14597  0AD0  0091               	movwf	17	;volatile
 14598                           
 14599                           ;bldc.c: 2006: rising_bemf_flag = 0;
 14600  0AD1  0020               	movlb	0	; select bank0
 14601  0AD2  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14602                           
 14603                           ;bldc.c: 2007: comm_state = 3;
 14604  0AD3  3003               	movlw	3
 14605  0AD4  2B19               	goto	L73
 14606  0AD5                     i1l6364:	
 14607                           ;bldc.c: 2015: };bldc.c: 2018: case 5:
 14608                           
 14609                           ;bldc.c: 2012: break;
 14610                           
 14611                           
 14612                           ;bldc.c: 2021: {;bldc.c: 2027: PSTR1CON = 0b00000100;
 14613  0AD5  3004               	movlw	4
 14614  0AD6  0025               	movlb	5	; select bank5
 14615  0AD7  0096               	movwf	22	;volatile
 14616                           
 14617                           ;bldc.c: 2030: if( MotorFlags.bits.B6 )
 14618  0AD8  0020               	movlb	0	; select bank0
 14619  0AD9  1F5A               	btfss	_MotorFlags,6
 14620  0ADA  2AE0               	goto	i1l6370
 14621                           
 14622                           ;bldc.c: 2032: {;bldc.c: 2034: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 14623  0ADB  0022               	movlb	2	; select bank2
 14624  0ADC  080E               	movf	14,w	;volatile
 14625  0ADD  39E5               	andlw	229
 14626  0ADE  3812               	iorlw	18
 14627  0ADF  008E               	movwf	14	;volatile
 14628  0AE0                     i1l6370:	
 14629                           
 14630                           ;bldc.c: 2036: };bldc.c: 2039: LATC2 = 0;
 14631  0AE0  0022               	movlb	2	; select bank2
 14632  0AE1  110E               	bcf	14,2	;volatile
 14633                           
 14634                           ;bldc.c: 2040: LATB2 = 0;
 14635  0AE2  110D               	bcf	13,2	;volatile
 14636                           
 14637                           ;bldc.c: 2042: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 14638  0AE3  3011               	movlw	17
 14639  0AE4  00F0               	movwf	??i1_commutate
 14640  0AE5  0870               	movf	??i1_commutate,w
 14641  0AE6  0021               	movlb	1	; select bank1
 14642  0AE7  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14643                           
 14644                           ;bldc.c: 2043: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 14645  0AE8  3025               	movlw	37
 14646  0AE9  00F0               	movwf	??i1_commutate
 14647  0AEA  0870               	movf	??i1_commutate,w
 14648  0AEB  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14649                           
 14650                           ;bldc.c: 2044: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 14651  0AEC  3005               	movlw	5
 14652  0AED  00F0               	movwf	??i1_commutate
 14653  0AEE  0870               	movf	??i1_commutate,w
 14654  0AEF  0022               	movlb	2	; select bank2
 14655  0AF0  00E3               	movwf	_ui8_Ubemf_sel^(0+256)
 14656                           
 14657                           ;bldc.c: 2045: CM1CON1 = 0x01;
 14658  0AF1  3001               	movlw	1
 14659  0AF2  0092               	movwf	18	;volatile
 14660                           
 14661                           ;bldc.c: 2060: CM1CON0 = 0x84;
 14662  0AF3  3084               	movlw	132
 14663  0AF4  0091               	movwf	17	;volatile
 14664                           
 14665                           ;bldc.c: 2061: rising_bemf_flag = 1;
 14666  0AF5  0020               	movlb	0	; select bank0
 14667  0AF6  145D               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14668                           
 14669                           ;bldc.c: 2062: comm_state = 4;
 14670  0AF7  3004               	movlw	4
 14671  0AF8  2B19               	goto	L73
 14672  0AF9                     i1l6388:	
 14673                           ;bldc.c: 2071: };bldc.c: 2074: case 6:
 14674                           
 14675                           ;bldc.c: 2067: break;
 14676                           
 14677                           
 14678                           ;bldc.c: 2077: {;bldc.c: 2082: PSTR1CON = 0b00000100;
 14679  0AF9  3004               	movlw	4
 14680  0AFA  0025               	movlb	5	; select bank5
 14681  0AFB  0096               	movwf	22	;volatile
 14682                           
 14683                           ;bldc.c: 2085: if( MotorFlags.bits.B6 )
 14684  0AFC  0020               	movlb	0	; select bank0
 14685  0AFD  1F5A               	btfss	_MotorFlags,6
 14686  0AFE  2B04               	goto	i1l6394
 14687                           
 14688                           ;bldc.c: 2087: {;bldc.c: 2089: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 14689  0AFF  0022               	movlb	2	; select bank2
 14690  0B00  080E               	movf	14,w	;volatile
 14691  0B01  39E5               	andlw	229
 14692  0B02  3818               	iorlw	24
 14693  0B03  008E               	movwf	14	;volatile
 14694  0B04                     i1l6394:	
 14695                           
 14696                           ;bldc.c: 2091: };bldc.c: 2094: LATC2 = 1;
 14697  0B04  0022               	movlb	2	; select bank2
 14698  0B05  150E               	bsf	14,2	;volatile
 14699                           
 14700                           ;bldc.c: 2095: LATB2 = 0;
 14701  0B06  110D               	bcf	13,2	;volatile
 14702                           
 14703                           ;bldc.c: 2097: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 14704  0B07  3011               	movlw	17
 14705  0B08  00F0               	movwf	??i1_commutate
 14706  0B09  0870               	movf	??i1_commutate,w
 14707  0B0A  0021               	movlb	1	; select bank1
 14708  0B0B  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14709                           
 14710                           ;bldc.c: 2098: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 14711  0B0C  3025               	movlw	37
 14712  0B0D  00F0               	movwf	??i1_commutate
 14713  0B0E  0870               	movf	??i1_commutate,w
 14714  0B0F  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14715                           
 14716                           ;bldc.c: 2099: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 14717  0B10  0022               	movlb	2	; select bank2
 14718  0B11  01E3               	clrf	_ui8_Ubemf_sel^(0+256)
 14719  0B12  0AE3               	incf	_ui8_Ubemf_sel^(0+256),f
 14720                           
 14721                           ;bldc.c: 2100: CM1CON1 = 0x00;
 14722  0B13  0192               	clrf	18	;volatile
 14723                           
 14724                           ;bldc.c: 2114: CM1CON0 = 0x94;
 14725  0B14  3094               	movlw	148
 14726  0B15  0091               	movwf	17	;volatile
 14727                           
 14728                           ;bldc.c: 2115: rising_bemf_flag = 0;
 14729  0B16  0020               	movlb	0	; select bank0
 14730  0B17  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14731                           
 14732                           ;bldc.c: 2116: comm_state = 5;
 14733  0B18  3005               	movlw	5
 14734  0B19                     L73:	
 14735  0B19  00F0               	movwf	??i1_commutate
 14736  0B1A  0870               	movf	??i1_commutate,w
 14737  0B1B  0021               	movlb	1	; select bank1
 14738  0B1C  00DE               	movwf	_comm_state^(0+128)
 14739                           
 14740                           ;bldc.c: 2121: break;
 14741  0B1D  2B3C               	goto	i1l354
 14742  0B1E                     i1l6408:	
 14743                           ;bldc.c: 2125: };bldc.c: 2129: default:
 14744                           
 14745                           
 14746                           ;bldc.c: 2130: {;bldc.c: 2132: PSTR1CON = 0x00;
 14747  0B1E  0025               	movlb	5	; select bank5
 14748  0B1F  0196               	clrf	22	;volatile
 14749                           
 14750                           ;bldc.c: 2133: CM1CON0 = 0x00;
 14751  0B20  0022               	movlb	2	; select bank2
 14752  0B21  0191               	clrf	17	;volatile
 14753  0B22                     L74:	
 14754                           
 14755                           ;bldc.c: 2134: rising_bemf_flag = 0;
 14756  0B22  0020               	movlb	0	; select bank0
 14757  0B23  105D               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14758                           
 14759                           ;bldc.c: 2135: comm_state = 1;
 14760  0B24  0021               	movlb	1	; select bank1
 14761  0B25  01DE               	clrf	_comm_state^(0+128)
 14762  0B26  0ADE               	incf	_comm_state^(0+128),f
 14763                           
 14764                           ;bldc.c: 2139: };bldc.c: 2141: }
 14765                           
 14766                           ;bldc.c: 2136: break;
 14767  0B27  2B3C               	goto	i1l354
 14768  0B28                     i1l6416:	
 14769  0B28  085E               	movf	_comm_state^(0+128),w
 14770                           
 14771                           ; Switch size 1, requested type "space"
 14772                           ; Number of cases is 6, Range of values is 1 to 6
 14773                           ; switch strategies available:
 14774                           ; Name         Instructions Cycles
 14775                           ; simple_byte           19    10 (average)
 14776                           ; direct_byte           21     9 (fixed)
 14777                           ; jumptable            263     9 (fixed)
 14778                           ;	Chosen strategy is simple_byte
 14779  0B29  3A01               	xorlw	1	; case 1
 14780  0B2A  1903               	skipnz
 14781  0B2B  2A4F               	goto	i1l6272
 14782  0B2C  3A03               	xorlw	3	; case 2
 14783  0B2D  1903               	skipnz
 14784  0B2E  2A71               	goto	i1l6296
 14785  0B2F  3A01               	xorlw	1	; case 3
 14786  0B30  1903               	skipnz
 14787  0B31  2A90               	goto	i1l6320
 14788  0B32  3A07               	xorlw	7	; case 4
 14789  0B33  1903               	skipnz
 14790  0B34  2AB1               	goto	i1l6340
 14791  0B35  3A01               	xorlw	1	; case 5
 14792  0B36  1903               	skipnz
 14793  0B37  2AD5               	goto	i1l6364
 14794  0B38  3A03               	xorlw	3	; case 6
 14795  0B39  1903               	skipnz
 14796  0B3A  2AF9               	goto	i1l6388
 14797  0B3B  2B1E               	goto	i1l6408
 14798  0B3C                     i1l354:	
 14799                           
 14800                           ;bldc.c: 2145: if( rising_bemf_flag )
 14801  0B3C  0020               	movlb	0	; select bank0
 14802  0B3D  1C5D               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14803  0B3E  2B3F               	goto	i1l6420
 14804  0B3F                     i1l6420:	
 14805                           ;bldc.c: 2151: }
 14806                           
 14807                           ;bldc.c: 2147: {;bldc.c: 2149: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
 14808                           
 14809                           
 14810                           ;bldc.c: 2154: else;bldc.c: 2155: {;bldc.c: 2157: ui8_BlankingCount = ( unsigned char ) 
      +                          ( 0.002 * 20000UL );
 14811  0B3F  3028               	movlw	40
 14812  0B40  00F0               	movwf	??i1_commutate
 14813  0B41  0870               	movf	??i1_commutate,w
 14814  0B42  0021               	movlb	1	; select bank1
 14815  0B43  00DD               	movwf	_ui8_BlankingCount^(0+128)
 14816                           
 14817                           ;bldc.c: 2159: };bldc.c: 2162: comm_time = 0;
 14818  0B44  0020               	movlb	0	; select bank0
 14819  0B45  01D3               	clrf	_comm_time
 14820  0B46  01D4               	clrf	_comm_time+1
 14821  0B47  0008               	return
 14822  0B48                     __end_ofi1_commutate:	
 14823                           
 14824                           	psect	swtext4
 14825  1854                     __pswtext4:	
 14826  1854                     i1S11718:	
 14827  1854  3189  29CC         	ljmp	i1l6220
 14828  1856  3189  29CE         	ljmp	i1l6222
 14829  1858  3189  29D3         	ljmp	i1l6224
 14830  185A  3189  29D5         	ljmp	i1l6226
 14831  185C  3189  29D7         	ljmp	i1l6228
 14832  185E  3189  29D9         	ljmp	i1l6230
 14833  1860  3189  29D9         	ljmp	i1l6232
 14834  1862  3189  29D9         	ljmp	i1l6234
 14835  1864  3189  29D9         	ljmp	i1l6236
 14836  1866  3189  29D9         	ljmp	i1l6238
 14837                           
 14838                           	psect	text39
 14839  1EC9                     __ptext39:	
 14840 ;; *************** function i1___wmul *****************
 14841 ;; Defined at:
 14842 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 14843 ;; Parameters:    Size  Location     Type
 14844 ;;  multiplier      2    0[COMMON] unsigned int 
 14845 ;;  multiplicand    2    2[COMMON] unsigned int 
 14846 ;; Auto vars:     Size  Location     Type
 14847 ;;  __wmul          2    4[COMMON] unsigned int 
 14848 ;; Return value:  Size  Location     Type
 14849 ;;                  2    0[COMMON] unsigned int 
 14850 ;; Registers used:
 14851 ;;		wreg, status,2, status,0
 14852 ;; Tracked objects:
 14853 ;;		On entry : 0/0
 14854 ;;		On exit  : 0/0
 14855 ;;		Unchanged: 0/0
 14856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14857 ;;      Params:         4       0       0       0       0       0       0       0
 14858 ;;      Locals:         2       0       0       0       0       0       0       0
 14859 ;;      Temps:          0       0       0       0       0       0       0       0
 14860 ;;      Totals:         6       0       0       0       0       0       0       0
 14861 ;;Total ram usage:        6 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; This function calls:
 14864 ;;		Nothing
 14865 ;; This function is called by:
 14866 ;;		_interrrupt_bldc
 14867 ;; This function uses a non-reentrant model
 14868 ;;
 14869                           
 14870                           
 14871                           ;psect for function i1___wmul
 14872  1EC9                     i1___wmul:	
 14873                           
 14874                           ;incstack = 0
 14875                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 14876  1EC9  01F4               	clrf	i1___wmul@product
 14877  1ECA  01F5               	clrf	i1___wmul@product+1
 14878  1ECB                     i1l10598:	
 14879  1ECB  1C70               	btfss	i1___wmul@multiplier,0
 14880  1ECC  2ED1               	goto	i1l1844
 14881  1ECD  0872               	movf	i1___wmul@multiplicand,w
 14882  1ECE  07F4               	addwf	i1___wmul@product,f
 14883  1ECF  0873               	movf	i1___wmul@multiplicand+1,w
 14884  1ED0  3DF5               	addwfc	i1___wmul@product+1,f
 14885  1ED1                     i1l1844:	
 14886  1ED1  3001               	movlw	1
 14887  1ED2                     u915_25:	
 14888  1ED2  35F2               	lslf	i1___wmul@multiplicand,f
 14889  1ED3  0DF3               	rlf	i1___wmul@multiplicand+1,f
 14890  1ED4  0B89               	decfsz	9,f
 14891  1ED5  2ED2               	goto	u915_25
 14892  1ED6  3001               	movlw	1
 14893  1ED7                     u916_25:	
 14894  1ED7  36F1               	lsrf	i1___wmul@multiplier+1,f
 14895  1ED8  0CF0               	rrf	i1___wmul@multiplier,f
 14896  1ED9  0B89               	decfsz	9,f
 14897  1EDA  2ED7               	goto	u916_25
 14898  1EDB  0870               	movf	i1___wmul@multiplier,w
 14899  1EDC  0471               	iorwf	i1___wmul@multiplier+1,w
 14900  1EDD  1D03               	btfss	3,2
 14901  1EDE  2ECB               	goto	i1l10598
 14902  1EDF  0875               	movf	i1___wmul@product+1,w
 14903  1EE0  00F1               	movwf	?i1___wmul+1
 14904  1EE1  0874               	movf	i1___wmul@product,w
 14905  1EE2  00F0               	movwf	?i1___wmul
 14906  1EE3  0008               	return
 14907  1EE4                     __end_ofi1___wmul:	
 14908                           
 14909                           	psect	text40
 14910  1E7D                     __ptext40:	
 14911 ;; *************** function i1_ADC_Wait *****************
 14912 ;; Defined at:
 14913 ;;		line 128 in file "../adc.c"
 14914 ;; Parameters:    Size  Location     Type
 14915 ;;		None
 14916 ;; Auto vars:     Size  Location     Type
 14917 ;;		None
 14918 ;; Return value:  Size  Location     Type
 14919 ;;                  1    wreg      void 
 14920 ;; Registers used:
 14921 ;;		None
 14922 ;; Tracked objects:
 14923 ;;		On entry : 0/0
 14924 ;;		On exit  : 0/0
 14925 ;;		Unchanged: 0/0
 14926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14927 ;;      Params:         0       0       0       0       0       0       0       0
 14928 ;;      Locals:         0       0       0       0       0       0       0       0
 14929 ;;      Temps:          0       0       0       0       0       0       0       0
 14930 ;;      Totals:         0       0       0       0       0       0       0       0
 14931 ;;Total ram usage:        0 bytes
 14932 ;; Hardware stack levels used:    1
 14933 ;; This function calls:
 14934 ;;		Nothing
 14935 ;; This function is called by:
 14936 ;;		_interrrupt_bldc
 14937 ;; This function uses a non-reentrant model
 14938 ;;
 14939                           
 14940                           
 14941                           ;psect for function i1_ADC_Wait
 14942  1E7D                     i1_ADC_Wait:	
 14943                           
 14944                           ;adc.c: 133: __nop();
 14945                           
 14946                           ;incstack = 0
 14947                           ; Regs used in i1_ADC_Wait: []
 14948  1E7D  0000               	nop
 14949                           
 14950                           ;adc.c: 134: __nop();
 14951  1E7E  0000               	nop
 14952                           
 14953                           ;adc.c: 135: __nop();
 14954  1E7F  0000               	nop
 14955                           
 14956                           ;adc.c: 136: __nop();
 14957  1E80  0000               	nop
 14958                           
 14959                           ;adc.c: 137: __nop();
 14960  1E81  0000               	nop
 14961                           
 14962                           ;adc.c: 138: __nop();
 14963  1E82  0000               	nop
 14964                           
 14965                           ;adc.c: 139: __nop();
 14966  1E83  0000               	nop
 14967                           
 14968                           ;adc.c: 140: __nop();
 14969  1E84  0000               	nop
 14970                           
 14971                           ;adc.c: 142: __nop();
 14972  1E85  0000               	nop
 14973                           
 14974                           ;adc.c: 143: __nop();
 14975  1E86  0000               	nop
 14976                           
 14977                           ;adc.c: 144: __nop();
 14978  1E87  0000               	nop
 14979                           
 14980                           ;adc.c: 145: __nop();
 14981  1E88  0000               	nop
 14982                           
 14983                           ;adc.c: 146: __nop();
 14984  1E89  0000               	nop
 14985                           
 14986                           ;adc.c: 147: __nop();
 14987  1E8A  0000               	nop
 14988                           
 14989                           ;adc.c: 148: __nop();
 14990  1E8B  0000               	nop
 14991                           
 14992                           ;adc.c: 149: __nop();
 14993  1E8C  0000               	nop
 14994                           
 14995                           ;adc.c: 151: __nop();
 14996  1E8D  0000               	nop
 14997                           
 14998                           ;adc.c: 152: __nop();
 14999  1E8E  0000               	nop
 15000                           
 15001                           ;adc.c: 153: __nop();
 15002  1E8F  0000               	nop
 15003                           
 15004                           ;adc.c: 154: __nop();
 15005  1E90  0000               	nop
 15006                           
 15007                           ;adc.c: 155: __nop();
 15008  1E91  0000               	nop
 15009                           
 15010                           ;adc.c: 156: __nop();
 15011  1E92  0000               	nop
 15012                           
 15013                           ;adc.c: 157: __nop();
 15014  1E93  0000               	nop
 15015                           
 15016                           ;adc.c: 158: __nop();
 15017  1E94  0000               	nop
 15018  1E95  0008               	return
 15019  1E96                     __end_ofi1_ADC_Wait:	
 15020                           
 15021                           	psect	text41
 15022  1EAF                     __ptext41:	
 15023 ;; *************** function i1_ADC_Read *****************
 15024 ;; Defined at:
 15025 ;;		line 175 in file "../adc.c"
 15026 ;; Parameters:    Size  Location     Type
 15027 ;;		None
 15028 ;; Auto vars:     Size  Location     Type
 15029 ;;  ADC_Read        1    3[COMMON] unsigned char 
 15030 ;; Return value:  Size  Location     Type
 15031 ;;                  2    0[COMMON] unsigned int 
 15032 ;; Registers used:
 15033 ;;		wreg, status,2, status,0
 15034 ;; Tracked objects:
 15035 ;;		On entry : 0/0
 15036 ;;		On exit  : 0/0
 15037 ;;		Unchanged: 0/0
 15038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15039 ;;      Params:         2       0       0       0       0       0       0       0
 15040 ;;      Locals:         1       0       0       0       0       0       0       0
 15041 ;;      Temps:          1       0       0       0       0       0       0       0
 15042 ;;      Totals:         4       0       0       0       0       0       0       0
 15043 ;;Total ram usage:        4 bytes
 15044 ;; Hardware stack levels used:    1
 15045 ;; This function calls:
 15046 ;;		Nothing
 15047 ;; This function is called by:
 15048 ;;		_interrrupt_bldc
 15049 ;; This function uses a non-reentrant model
 15050 ;;
 15051                           
 15052                           
 15053                           ;psect for function i1_ADC_Read
 15054  1EAF                     i1_ADC_Read:	
 15055                           
 15056                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
 15057                           
 15058                           ;incstack = 0
 15059                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
 15060  1EAF  01F3               	clrf	i1ADC_Read@i
 15061  1EB0                     i1l69:	
 15062                           ;adc.c: 182: while( GO_nDONE )
 15063                           
 15064  1EB0  0021               	movlb	1	; select bank1
 15065  1EB1  1C9D               	btfss	29,1	;volatile
 15066  1EB2  2EBB               	goto	i1l6182
 15067                           
 15068                           ;adc.c: 184: {;adc.c: 186: i++;
 15069  1EB3  3001               	movlw	1
 15070  1EB4  00F2               	movwf	??i1_ADC_Read
 15071  1EB5  0872               	movf	??i1_ADC_Read,w
 15072  1EB6  07F3               	addwf	i1ADC_Read@i,f
 15073                           
 15074                           ;adc.c: 189: if( i > 64 )
 15075  1EB7  3041               	movlw	65
 15076  1EB8  0273               	subwf	i1ADC_Read@i,w
 15077  1EB9  1C03               	skipc
 15078  1EBA  2EB0               	goto	i1l69
 15079  1EBB                     i1l6182:	
 15080                           ;adc.c: 191: {;adc.c: 193: break;
 15081                           
 15082                           
 15083                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
 15084  1EBB  0021               	movlb	1	; select bank1
 15085  1EBC  081C               	movf	28,w	;volatile
 15086  1EBD  00F2               	movwf	??i1_ADC_Read
 15087  1EBE  0872               	movf	??i1_ADC_Read,w
 15088  1EBF  00BD               	movwf	(_analog_value^(0+128)+1)	;volatile
 15089                           
 15090                           ;adc.c: 202: analog_value.b.lo = ADRESL;
 15091  1EC0  081B               	movf	27,w	;volatile
 15092  1EC1  00F2               	movwf	??i1_ADC_Read
 15093  1EC2  0872               	movf	??i1_ADC_Read,w
 15094  1EC3  00BC               	movwf	_analog_value^(0+128)	;volatile
 15095                           
 15096                           ;adc.c: 204: return analog_value.w;
 15097  1EC4  083D               	movf	(_analog_value+1)^(0+128),w	;volatile
 15098  1EC5  00F1               	movwf	?i1_ADC_Read+1
 15099  1EC6  083C               	movf	_analog_value^(0+128),w	;volatile
 15100  1EC7  00F0               	movwf	?i1_ADC_Read
 15101  1EC8  0008               	return
 15102  1EC9                     __end_ofi1_ADC_Read:	
 15103                           
 15104                           	psect	text42
 15105  1235                     __ptext42:	
 15106 ;; *************** function ___lwdiv *****************
 15107 ;; Defined at:
 15108 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
 15109 ;; Parameters:    Size  Location     Type
 15110 ;;  divisor         2    0[COMMON] unsigned int 
 15111 ;;  dividend        2    2[COMMON] unsigned int 
 15112 ;; Auto vars:     Size  Location     Type
 15113 ;;  quotient        2    5[COMMON] unsigned int 
 15114 ;;  counter         1    7[COMMON] unsigned char 
 15115 ;; Return value:  Size  Location     Type
 15116 ;;                  2    0[COMMON] unsigned int 
 15117 ;; Registers used:
 15118 ;;		wreg, status,2, status,0
 15119 ;; Tracked objects:
 15120 ;;		On entry : 0/0
 15121 ;;		On exit  : 0/0
 15122 ;;		Unchanged: 0/0
 15123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15124 ;;      Params:         4       0       0       0       0       0       0       0
 15125 ;;      Locals:         3       0       0       0       0       0       0       0
 15126 ;;      Temps:          1       0       0       0       0       0       0       0
 15127 ;;      Totals:         8       0       0       0       0       0       0       0
 15128 ;;Total ram usage:        8 bytes
 15129 ;; Hardware stack levels used:    1
 15130 ;; This function calls:
 15131 ;;		Nothing
 15132 ;; This function is called by:
 15133 ;;		_EOL
 15134 ;;		_interrrupt_bldc
 15135 ;; This function uses a non-reentrant model
 15136 ;;
 15137                           
 15138                           
 15139                           ;psect for function ___lwdiv
 15140  1235                     ___lwdiv:	
 15141                           
 15142                           ;incstack = 0
 15143                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 15144  1235  01F5               	clrf	___lwdiv@quotient
 15145  1236  01F6               	clrf	___lwdiv@quotient+1
 15146  1237  0870               	movf	___lwdiv@divisor,w
 15147  1238  0471               	iorwf	___lwdiv@divisor+1,w
 15148  1239  1903               	btfsc	3,2
 15149  123A  2A64               	goto	i1l8724
 15150  123B  01F7               	clrf	___lwdiv@counter
 15151  123C  0AF7               	incf	___lwdiv@counter,f
 15152  123D                     i1l8712:	
 15153  123D  1BF1               	btfsc	___lwdiv@divisor+1,7
 15154  123E  2A49               	goto	i1l8714
 15155  123F  3001               	movlw	1
 15156  1240                     u657_25:	
 15157  1240  35F0               	lslf	___lwdiv@divisor,f
 15158  1241  0DF1               	rlf	___lwdiv@divisor+1,f
 15159  1242  0B89               	decfsz	9,f
 15160  1243  2A40               	goto	u657_25
 15161  1244  3001               	movlw	1
 15162  1245  00F4               	movwf	??___lwdiv
 15163  1246  0874               	movf	??___lwdiv,w
 15164  1247  07F7               	addwf	___lwdiv@counter,f
 15165  1248  2A3D               	goto	i1l8712
 15166  1249                     i1l8714:	
 15167  1249  3001               	movlw	1
 15168  124A                     u659_25:	
 15169  124A  35F5               	lslf	___lwdiv@quotient,f
 15170  124B  0DF6               	rlf	___lwdiv@quotient+1,f
 15171  124C  0B89               	decfsz	9,f
 15172  124D  2A4A               	goto	u659_25
 15173  124E  0871               	movf	___lwdiv@divisor+1,w
 15174  124F  0273               	subwf	___lwdiv@dividend+1,w
 15175  1250  1D03               	skipz
 15176  1251  2A54               	goto	u660_25
 15177  1252  0870               	movf	___lwdiv@divisor,w
 15178  1253  0272               	subwf	___lwdiv@dividend,w
 15179  1254                     u660_25:	
 15180  1254  1C03               	skipc
 15181  1255  2A5B               	goto	i1l8720
 15182  1256  0870               	movf	___lwdiv@divisor,w
 15183  1257  02F2               	subwf	___lwdiv@dividend,f
 15184  1258  0871               	movf	___lwdiv@divisor+1,w
 15185  1259  3BF3               	subwfb	___lwdiv@dividend+1,f
 15186  125A  1475               	bsf	___lwdiv@quotient,0
 15187  125B                     i1l8720:	
 15188  125B  3001               	movlw	1
 15189  125C                     u661_25:	
 15190  125C  36F1               	lsrf	___lwdiv@divisor+1,f
 15191  125D  0CF0               	rrf	___lwdiv@divisor,f
 15192  125E  0B89               	decfsz	9,f
 15193  125F  2A5C               	goto	u661_25
 15194  1260  3001               	movlw	1
 15195  1261  02F7               	subwf	___lwdiv@counter,f
 15196  1262  1D03               	btfss	3,2
 15197  1263  2A49               	goto	i1l8714
 15198  1264                     i1l8724:	
 15199  1264  0876               	movf	___lwdiv@quotient+1,w
 15200  1265  00F1               	movwf	?___lwdiv+1
 15201  1266  0875               	movf	___lwdiv@quotient,w
 15202  1267  00F0               	movwf	?___lwdiv
 15203  1268  0008               	return
 15204  1269                     __end_of___lwdiv:	
 15205                           
 15206                           	psect	text43
 15207  1F00                     __ptext43:	
 15208 ;; *************** function _BLDCWait *****************
 15209 ;; Defined at:
 15210 ;;		line 156 in file "../bldc.c"
 15211 ;; Parameters:    Size  Location     Type
 15212 ;;		None
 15213 ;; Auto vars:     Size  Location     Type
 15214 ;;		None
 15215 ;; Return value:  Size  Location     Type
 15216 ;;                  1    wreg      void 
 15217 ;; Registers used:
 15218 ;;		None
 15219 ;; Tracked objects:
 15220 ;;		On entry : 0/0
 15221 ;;		On exit  : 0/0
 15222 ;;		Unchanged: 0/0
 15223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15224 ;;      Params:         0       0       0       0       0       0       0       0
 15225 ;;      Locals:         0       0       0       0       0       0       0       0
 15226 ;;      Temps:          0       0       0       0       0       0       0       0
 15227 ;;      Totals:         0       0       0       0       0       0       0       0
 15228 ;;Total ram usage:        0 bytes
 15229 ;; Hardware stack levels used:    1
 15230 ;; This function calls:
 15231 ;;		Nothing
 15232 ;; This function is called by:
 15233 ;;		_interrrupt_bldc
 15234 ;; This function uses a non-reentrant model
 15235 ;;
 15236                           
 15237                           
 15238                           ;psect for function _BLDCWait
 15239  1F00                     _BLDCWait:	
 15240                           
 15241                           ;bldc.c: 161: __nop();
 15242                           
 15243                           ;incstack = 0
 15244                           ; Regs used in _BLDCWait: []
 15245  1F00  0000               	nop
 15246                           
 15247                           ;bldc.c: 162: __nop();
 15248  1F01  0000               	nop
 15249                           
 15250                           ;bldc.c: 163: __nop();
 15251  1F02  0000               	nop
 15252                           
 15253                           ;bldc.c: 164: __nop();
 15254  1F03  0000               	nop
 15255                           
 15256                           ;bldc.c: 165: __nop();
 15257  1F04  0000               	nop
 15258                           
 15259                           ;bldc.c: 166: __nop();
 15260  1F05  0000               	nop
 15261                           
 15262                           ;bldc.c: 167: __nop();
 15263  1F06  0000               	nop
 15264                           
 15265                           ;bldc.c: 168: __nop();
 15266  1F07  0000               	nop
 15267                           
 15268                           ;bldc.c: 170: __nop();
 15269  1F08  0000               	nop
 15270                           
 15271                           ;bldc.c: 171: __nop();
 15272  1F09  0000               	nop
 15273                           
 15274                           ;bldc.c: 172: __nop();
 15275  1F0A  0000               	nop
 15276                           
 15277                           ;bldc.c: 173: __nop();
 15278  1F0B  0000               	nop
 15279                           
 15280                           ;bldc.c: 174: __nop();
 15281  1F0C  0000               	nop
 15282                           
 15283                           ;bldc.c: 175: __nop();
 15284  1F0D  0000               	nop
 15285                           
 15286                           ;bldc.c: 176: __nop();
 15287  1F0E  0000               	nop
 15288                           
 15289                           ;bldc.c: 177: __nop();
 15290  1F0F  0000               	nop
 15291                           
 15292                           ;bldc.c: 179: __nop();
 15293  1F10  0000               	nop
 15294                           
 15295                           ;bldc.c: 180: __nop();
 15296  1F11  0000               	nop
 15297                           
 15298                           ;bldc.c: 181: __nop();
 15299  1F12  0000               	nop
 15300                           
 15301                           ;bldc.c: 182: __nop();
 15302  1F13  0000               	nop
 15303                           
 15304                           ;bldc.c: 183: __nop();
 15305  1F14  0000               	nop
 15306                           
 15307                           ;bldc.c: 184: __nop();
 15308  1F15  0000               	nop
 15309                           
 15310                           ;bldc.c: 185: __nop();
 15311  1F16  0000               	nop
 15312                           
 15313                           ;bldc.c: 186: __nop();
 15314  1F17  0000               	nop
 15315                           
 15316                           ;bldc.c: 188: __nop();
 15317  1F18  0000               	nop
 15318                           
 15319                           ;bldc.c: 189: __nop();
 15320  1F19  0000               	nop
 15321                           
 15322                           ;bldc.c: 190: __nop();
 15323  1F1A  0000               	nop
 15324                           
 15325                           ;bldc.c: 191: __nop();
 15326  1F1B  0000               	nop
 15327                           
 15328                           ;bldc.c: 192: __nop();
 15329  1F1C  0000               	nop
 15330                           
 15331                           ;bldc.c: 193: __nop();
 15332  1F1D  0000               	nop
 15333                           
 15334                           ;bldc.c: 194: __nop();
 15335  1F1E  0000               	nop
 15336                           
 15337                           ;bldc.c: 195: __nop();
 15338  1F1F  0000               	nop
 15339  1F20  0008               	return
 15340  1F21                     __end_of_BLDCWait:	
 15341                           
 15342                           	psect	text44
 15343  1DF3                     __ptext44:	
 15344 ;; *************** function _Task1ms *****************
 15345 ;; Defined at:
 15346 ;;		line 53 in file "../interrupt.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;		None
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;		None
 15351 ;; Return value:  Size  Location     Type
 15352 ;;                  1    wreg      void 
 15353 ;; Registers used:
 15354 ;;		wreg, status,2, status,0
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15360 ;;      Params:         0       0       0       0       0       0       0       0
 15361 ;;      Locals:         0       0       0       0       0       0       0       0
 15362 ;;      Temps:          1       0       0       0       0       0       0       0
 15363 ;;      Totals:         1       0       0       0       0       0       0       0
 15364 ;;Total ram usage:        1 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; This function calls:
 15367 ;;		Nothing
 15368 ;; This function is called by:
 15369 ;;		_interrupt_handler
 15370 ;; This function uses a non-reentrant model
 15371 ;;
 15372                           
 15373                           
 15374                           ;psect for function _Task1ms
 15375  1DF3                     _Task1ms:	
 15376                           
 15377                           ;interrupt.c: 57: ui8_Task_Cont1ms++;
 15378                           
 15379                           ;incstack = 0
 15380                           ; Regs used in _Task1ms: [wreg+status,2+status,0]
 15381  1DF3  3001               	movlw	1
 15382  1DF4  00F0               	movwf	??_Task1ms
 15383  1DF5  0870               	movf	??_Task1ms,w
 15384  1DF6  0021               	movlb	1	; select bank1
 15385  1DF7  07D2               	addwf	_ui8_Task_Cont1ms^(0+128),f
 15386  1DF8  0008               	return
 15387  1DF9                     __end_of_Task1ms:	
 15388                           
 15389                           	psect	text45
 15390  1E67                     __ptext45:	
 15391 ;; *************** function _PWM_CTRL *****************
 15392 ;; Defined at:
 15393 ;;		line 205 in file "../pwm.c"
 15394 ;; Parameters:    Size  Location     Type
 15395 ;;		None
 15396 ;; Auto vars:     Size  Location     Type
 15397 ;;		None
 15398 ;; Return value:  Size  Location     Type
 15399 ;;                  1    wreg      void 
 15400 ;; Registers used:
 15401 ;;		wreg, status,2, status,0
 15402 ;; Tracked objects:
 15403 ;;		On entry : 0/0
 15404 ;;		On exit  : 0/0
 15405 ;;		Unchanged: 0/0
 15406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15407 ;;      Params:         0       0       0       0       0       0       0       0
 15408 ;;      Locals:         0       0       0       0       0       0       0       0
 15409 ;;      Temps:          1       0       0       0       0       0       0       0
 15410 ;;      Totals:         1       0       0       0       0       0       0       0
 15411 ;;Total ram usage:        1 bytes
 15412 ;; Hardware stack levels used:    1
 15413 ;; This function calls:
 15414 ;;		Nothing
 15415 ;; This function is called by:
 15416 ;;		_interrupt_handler
 15417 ;; This function uses a non-reentrant model
 15418 ;;
 15419                           
 15420                           
 15421                           ;psect for function _PWM_CTRL
 15422  1E67                     _PWM_CTRL:	
 15423                           
 15424                           ;pwm.c: 295: ui8_PWM_FreqCnt++;
 15425                           
 15426                           ;incstack = 0
 15427                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 15428  1E67  3001               	movlw	1
 15429  1E68  00F0               	movwf	??_PWM_CTRL
 15430  1E69  0870               	movf	??_PWM_CTRL,w
 15431  1E6A  0021               	movlb	1	; select bank1
 15432  1E6B  07CD               	addwf	_ui8_PWM_FreqCnt^(0+128),f
 15433                           
 15434                           ;pwm.c: 297: if( ui8_PWM_FreqCnt >= 100 )
 15435  1E6C  3064               	movlw	100
 15436  1E6D  024D               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 15437  1E6E  1C03               	skipc
 15438  1E6F  2E74               	goto	i1l6776
 15439                           
 15440                           ;pwm.c: 299: {;pwm.c: 301: ui8_PWM_FreqCnt = 0;
 15441  1E70  01CD               	clrf	_ui8_PWM_FreqCnt^(0+128)
 15442                           
 15443                           ;pwm.c: 302: LATC0 = 0;
 15444  1E71  0022               	movlb	2	; select bank2
 15445  1E72  100E               	bcf	14,0	;volatile
 15446                           
 15447                           ;pwm.c: 305: }
 15448  1E73  0008               	return
 15449  1E74                     i1l6776:	
 15450                           
 15451                           ;pwm.c: 308: else;pwm.c: 309: {;pwm.c: 311: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 15452  1E74  0022               	movlb	2	; select bank2
 15453  1E75  0841               	movf	_ui8_PWMoutvalue^(0+256),w
 15454  1E76  0021               	movlb	1	; select bank1
 15455  1E77  024D               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 15456  1E78  1C03               	skipc
 15457  1E79  0008               	return
 15458                           
 15459                           ;pwm.c: 313: {;pwm.c: 315: LATC0 = 1;
 15460  1E7A  0022               	movlb	2	; select bank2
 15461  1E7B  140E               	bsf	14,0	;volatile
 15462  1E7C  0008               	return
 15463  1E7D                     __end_of_PWM_CTRL:	
 15464  007E                     btemp	set	126	;btemp
 15465  007E                     int$flags	set	126
 15466  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    470
    Data        16
    BSS         323
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     43      63
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      80
    BANK4            80      0      74
    BANK5            80     32      43
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrrupt_bldc->i1_commutate

Critical Paths under _main in BANK0

    _main->_BVH2_Appl_Layer
    _system_init->_init_bldc
    _timer_init->_clear_timer
    _InitMotorRun->_commutate
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    _SetDiagAlarm->_PWM_Write_Out
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _Get_Analog_Value->_FILTER_Ubat
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3815
                                             39 BANK0      4     4      0
                    _BVH2_Appl_Layer
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                          _PWMReadDC
                       _SetDiagAlarm
                             ___wmul
                        _clear_timer
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0     181
                           _ADC_Init
                           _DiagInit
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                              9 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            1     1      0       0
                                             20 BANK0      1     1      0
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0       0
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0       0
                                              8 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    5     5      0      69
                                             12 BANK0      5     5      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     3     3      0      45
                                              8 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          1     1      0      24
                                             12 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             4     2      2      24
                                              8 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        2     2      0      22
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PWMReadDC                                            4     4      0     296
                                             28 BANK0      4     4      0
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              8 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ltdiv                                             11     5      6      52
                                             17 BANK0     11     5      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                              8 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     48    48      0    2752
                                             23 BANK0     16    16      0
                                              0 BANK5     32    32      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     542
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                              8 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              8 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupt_handler                                    0     0      0     822
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (6) _interrupt_PWMCapture                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _interrrupt_bldc                                      8     8      0     822
                                              0 BANK0      8     8      0
                           _BLDCWait
                            ___lwdiv
                         i1_ADC_Read
                         i1_ADC_Wait
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (7) i1_commutate                                         12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4      44
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Read                                           4     2      2      24
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              8     4      4     700
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (7) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Task1ms                                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _PWM_CTRL                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
   _InitMotorStop
   _PWMReadDC
     ___ltdiv
       ___tmul (ARG)
     ___tmul
   _SetDiagAlarm
     _PWM_Write_Out
   ___wmul
   _clear_timer
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     _init_bldc
       _InitMotorRun
         _commutate
     _init_ports
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     ___lwdiv
     i1_ADC_Read
     i1_ADC_Wait
     i1___wmul
     i1_commutate
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1B0       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4A      14       92.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50     20      2B      16       53.8%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     1B0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Apr 17 17:24:29 2023

                          ?_PWM_Capture_init 0070                                            _B 0220  
                                          pc 0002                                           l69 1F23  
                                         _RD 0CA8                                           _WR 0CA9  
                         ??_PWM_Capture_init 0028                          ___wmul@multiplicand 002A  
                           i1___wmul@product 0074                     _SIBFS_Pic_etat_monitor_b 00C7  
           BVH2_Appl_Layer@X_Sb4_Intergrator 0168                          __end_of_system_init 1424  
BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00C2                                  ?i1_ADC_Read 0070  
                                        l327 0E9F                                          l345 0EE4  
                                        l514 12C4                                          l354 0FF1  
                                        l516 12CA                                  ?i1_ADC_Wait 0070  
                                        _GIE 005F                                          _RA4 0064  
                                        _RC5 0075                                          _PR2 001B  
                                        _PR4 0416                                          _PR6 041D  
                                        _sum 0123                             _ui16_IPhase_bldc 0051  
                               __CFG_BORV$LO 0000                                          wreg 0009  
                          _ui16_IPhase1_bldc 01D8                           __ELINMIntTFrameMax 024E  
                          _ui16_IPhase2_bldc 025A                           __ELINMIntTFrameMin 0250  
                          _ui16_IPhase3_bldc 0258                    BVH2_Appl_Layer@Cb24_Reset 02B4  
                               __CFG_LVP$OFF 0000                          __ELINMIntTHeaderMax 024A  
                        __ELINMIntTHeaderMin 024C                      __end_of_interrrupt_bldc 0DA4  
                                       _C1IE 0495                                         l1402 01AD  
                                       l1155 147A                                         l1404 01C1  
                                       l1407 01D4                                         l1504 04AA  
                                       l1440 03E0                                         l1416 027C  
                                       l1521 0500                                         l1522 04CD  
                                       l1370 00D2                                         l1523 04C8  
                                       l1435 0253                                         l1540 055B  
                                       l1524 04CB                                         l1509 0486  
                                       l1373 0135                                         l1518 04BD  
                                       l1446 02CE                                         l1390 016C  
                                       l1527 04E3                                         l1640 1398  
                                       l1552 05A3                                         l1641 13A8  
                                       l1537 0539                                         l1481 0399  
                                       l1713 134C                                         l1650 13D2  
                                       l1642 139A                                         l1546 0588  
                                       l1394 0183                                         l1386 0176  
                                       l1643 139C                                         l1387 015D  
                                       l1646 13B2                                         l1398 01A8  
                                       l1583 072A                                         l1487 03F4  
                                       l1648 13B4                                         l1576 06CB  
                                       l1736 1F66                                         l1649 13B6  
                                       l1587 073D                                         l1844 1EED  
                                       l1909 1574                                         l1589 0752  
                                       l5420 0EFD                                         l5332 0DB0  
                                       l5414 0EF2                                         l6080 1FB6  
                                       l5512 0F8E                                         l5408 0EE2  
                                       l5360 0E5F                                         l5530 0FAB  
                                       l5506 0F83                                         l5370 0E72  
                                       l5362 0E67                                         l6084 1FBE  
                                       l5444 0F21                                         l5380 0E74  
                                       l5372 0E74                                         l5364 0E69  
                                       l5550 0FD3                                         l5462 0F37  
                                       l5438 0F16                                         l5390 0E96  
                                       l5382 0E74                                         l5374 0E74  
                                       l5366 0E6E                                         l5358 0E5D  
                                       l5536 0FB6                                         l5376 0E74  
                                       l5368 0E70                                         l5384 0E7A  
                                       l5640 1F4E                                         l5562 0FF6  
                                       l5482 0F5B                                         l5378 0E74  
                                       l5386 0E8A                                         l5642 1F51  
                                       l5634 1F47                                         l5810 1316  
                                       l5468 0F42                                         l5396 0EA5  
                                       l5636 1F49                                         l9110 00DC  
                                       l5750 17BB                                         l5742 178D  
                                       l5734 175F                                         l5558 0FDD  
                                       l5398 0EB3                                         l5638 1F4C  
                                       l5646 1F54                                         l5822 1328  
                                       l5806 1311                                         l9120 0105  
                                       l9112 00DF                                         l6720 12BC  
                                       l6712 12AC                                         l5584 1F2F  
                                       l5752 17C0                                         l5744 1792  
                                       l5736 1764                                         l5840 142C  
                                       l5488 0F66                                         l5816 131F  
                                       l9130 0119                                         l9122 0109  
                                       l9114 00F5                                         l9220 01DB  
                                       l9132 011D                                         l9124 010D  
                                       l9036 0079                                         l6716 12B4  
                                       l6708 12A4                                         l5828 1331  
                                       l5836 133A                                         l8510 1642  
                                       l9222 01DD                                         l9134 0121  
                                       l9126 0111                                         l9054 0090  
                                       l9400 0330                                         l9240 01F8  
                                       l9128 0115                                         l9056 0094  
                                       l9048 0082                                         l6728 12D0  
                                       l5872 145C                                         l5864 1450  
                                       l5856 1444                                         l5848 1438  
                                       l9402 0338                                         l9322 0291  
                                       l9306 0260                                         l9250 01FE  
                                       l9234 01EE                                         l9154 0144  
                                       l9138 0125                                         l9058 009C  
                                       l9066 00A5                                         l5882 1468  
                                       l8524 1655                                         l8452 15ED  
                                       l8612 1EE7                                         l9404 033E  
                                       l9340 02B5                                         l9332 02AF  
                                       l9252 0202                                         l9308 0263  
                                       l8470 160E                                         l8446 1F86  
                                       l8438 1F74                                         l8630 11E5  
                                       l9510 043F                                         l9502 0429  
                                       l9422 0366                                         l9342 02B5  
                                       l9086 00B2                                         l9078 00A7  
                                       l8608 11CC                                         l8552 1678  
                                       l9432 0375                                         l9360 02D8  
                                       l9352 02D0                                         l9344 02B5  
                                       l9336 02B5                                         l9256 0217  
                                       l9096 00C3                                         l8538 1666  
                                       l8482 161C                                         l8466 15FF  
                                       l8570 139E                                         l8626 11DB  
                                       l9506 0434                                         l9450 03A3  
                                       l9418 0357                                         l9338 02B5  
                                       l9290 023F                                         l9098 00CB  
                                       l9620 0554                                         l9604 050F  
                                       l9460 03C1                                         l9444 0390  
                                       l9372 02F0                                         l9348 02B8  
                                       l9268 021C                                         l9188 0190  
                                       _ADON 04E8                                         l8670 15CE  
                                       l9542 0494                                         l9534 0488  
                                       l9446 0396                                         l9294 0247  
                                       l9278 0229                                         l9198 01A0  
                                       l8496 162F                                         l8576 13B8  
                                       l8656 1595                                         l8648 1585  
                                       l9704 061C                                         l9552 04B0  
                                       l9384 030A                                         l9376 02FF  
                                       l9464 03C9                                         l9296 024B  
                                       l8578 13C2                                         l8674 15DC  
                                       l8666 15C3                                         l8658 15A3  
                                       l9714 0634                                         l9650 05A9  
                                       l9634 0574                                         l9546 04A2  
                                       l9394 0321                                         l8596 11B7  
                                       l9740 0742                                         l9724 06C6  
                                       l9708 0623                                         l9644 05A1  
                                       l9556 04B2                                         l9726 06CF  
                                       l9742 0746                                         l9670 05CF  
                                       l9638 057F                                         l9654 05AC  
                                       l9486 0403                                         l9752 07BA  
                                       l9728 06D2                                         l9496 0417  
                                       _CFGS 0CAE                                         l9754 07C6  
                                       l9746 074D                                         l9738 0739  
                                       l9594 04F8                                         l9756 07D5  
                                       l9758 07ED                                         l9686 05F3  
                                       l9696 0605                                         _LATA 010C  
                                       _LATB 010D                                         _LATC 010E  
                                       u3205 1FC5                                         _PIE1 0091  
                                       _PIE2 0092                                         _PIE3 0093  
                                       u3195 1FBF                                         u2905 12E6  
                                       u2745 0ED9                                         _PEIE 005E  
                                       u2695 0E47                                         u6325 1EEE  
                                       u6335 1EF3                                         u8015 054F  
                                       u2895 127C                                         u6425 1598  
                                       i1l69 1EB0                                         u6445 15A4  
                                       u6365 11E6                                         u8045 0570  
                                       u6455 15B8                                         u6375 11ED  
                                       u6465 15C4                                         u9105 1369  
                                       u7450 029E                                         u8235 0656  
                                       u8075 059D                                         u9115 1378  
                                       u7460 029F                                         u8245 0689  
                                       u9125 1382                                         u8255 06A9  
                                       u8265 06B7                                         u8275 0720  
                                       u9085 135E                                         u7785 0476  
                                       u9495 16DA                                         u7995 0533  
                                       _TMR0 0015                                         _TMR2 001A  
                                       _TMR4 0415                                         _TMR6 041C  
                                       _WREN 0CAA                                         _Bcnt 00D9  
                           _ui8_Task_Cont1ms 00D2                             _ui8_Task_Cont3ms 0144  
                           _ui8_Task_Cont5ms 0143                             _ui16_PWM_Freq_In 01BC  
                 BVH2_Appl_Layer@Cb24_BadCnt 01A6                                         _main 0804  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       fsr1l 0006                                         btemp 007E  
                          _ui8_b_DResLocID_c 0059                          timer_init@ui8_TmrNb 0029  
                           __end_of_ADC_Init 1E2D                             __end_of_ADC_Read 1F44  
                           __end_of_ADC_Wait 1EAF                                         start 0026  
                            _ui8_sampleState 0162                             __end_of_BLDCWait 1F21  
                     __size_of_PWM_Write_Out 0008                           _ui16_comm_time_max 0125  
                                      S11710 1194                                        S11712 1868  
                                i1_commutate 0926                                ?_InitMotorRun 0070  
                            __end_of_Task1ms 1DF9                          _ui16_duty_cycle_mat 01C0  
                       _Error_PICetatMonitor 0158                                __CFG_PLLEN$ON 0000  
                                      l10580 1368                                        l10592 138B  
                                      l10578 135B                                        l11554 08E1  
                                      l10588 1381                                        l11708 0E80  
                                      l11556 08E4                                        l11574 0916  
                                      l11584 091E                                        l11496 080D  
                                      l10890 1720                                        l10892 1724  
                                      l10886 1719                                        l10878 16E1  
                                      l10898 1731                                        _C1OUT 088E  
                            __end_of___aldiv 15E5                                        ?_main 0070  
                                      _EEPGD 0CAF                                        _T1CON 0018  
                                      _T2CON 001C                                        _LATB1 0869  
                                      _LATB2 086A                                        _LATC0 0870  
                                      _LATC1 0871                                        _LATC2 0872  
                                      _LATC3 0873                                _InitMotorStop 1E3A  
                                      _LATC4 0874                                        _T4CON 0417  
                            __end_of___ltdiv 1392                                        _T6CON 041E  
                            __end_of___lwdiv 1269                                        i1l316 0D80  
                                      i1l327 0A04                                        i1l263 0B78  
                                      i1l345 0A43                                        i1l354 0B3C  
                                      i1l267 0D28                                        i1l284 0C16  
                                      _TMR1H 0017                                        _TMR1L 0016  
                          _ui8_BlankingCount 00DD                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
                        ___lmul@multiplicand 002C                            _ui16_PWM_Freq_mat 01BE  
   BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00C0                             __end_of_PWM_CTRL 1E7D  
               ?_Cb56_UbatHandling_node_fcn2 0070                             __end_ofi1___wmul 1EE4  
          BVH2_Appl_Layer@Cb24_oMotorStalled 00BE                                        status 0003  
                           __end_of_DiagInit 1E3A                          i1___wmul@multiplier 0070  
                                      wtemp0 007E                           __size_of_PWMReadDC 00AC  
             ??_Cb34_PWM_Detection_node_fcn1 0028                          _ui16_Task_Cont500ms 0262  
                        __size_ofi1_ADC_Read 001A                          __size_ofi1_ADC_Wait 0019  
                             __CFG_MCLRE$OFF 0000                           _ui8_b_DResServID_c 0160  
                            __initialization 0028                             _ui8_selected_lid 005E  
                BVH2_Appl_Layer@Cb51_Counter 00C4                  BVH2_Appl_Layer@Cb19_Counter 00A2  
                                _system_init 13DB                                 _cBEMF_FILTER 1800  
                               __end_of_main 0926                               ??_InitMotorRun 0034  
                            _PWM_trans_table 1000                         __size_of_clear_timer 0023  
                       _ui16_duty_cycle_BLDC 00B0                          __ELINMIntMessageTag 0154  
                             ?_InitMotorStop 0070                                       ??_main 0047  
                       __size_of_FILTER_Init 0024                         __size_of_FILTER_Ubat 0078  
                       __size_of_FILTER_Temp 003A                            ?_read_eeprom_data 0070  
                       _ui8_temp_calibration 0167                         _BVH2_Appl_Layer$1040 02AB  
                       _BVH2_Appl_Layer$1041 02AC                         _BVH2_Appl_Layer$1042 02AD  
                       _BVH2_Appl_Layer$1050 02A0                         _BVH2_Appl_Layer$1043 02AE  
                       _BVH2_Appl_Layer$1044 02AF                         _BVH2_Appl_Layer$1039 02AA  
                       _BVH2_Appl_Layer$1047 02A4                         _BVH2_Appl_Layer$1049 02A6  
                       _interrupt_PWMCapture 147B                            ?_Get_Analog_Value 0070  
                _ui16_NTC_Temp_bldc_mean_cal 01C6                           ??_read_eeprom_data 0028  
                              _PWM_Write_Out 1E12                                       _ADCON0 009D  
                         ??_Get_Analog_Value 0034                                       _ADCON1 009E  
                                     _CCP1AS 0295                                       _CCP1IE 048A  
                                     _CCP1IF 008A                                       _CCP2IE 0490  
                                     _CCP2IF 0090                                       _CCP3IE 049C  
                                     _CCP3IF 009C                                       _CCP4IE 049D  
                                     _CCP4IF 009D                                       _CCP5IE 049E  
                                     _CCP5IF 009E                                       _ADRESH 009C  
                                     _ADRESL 009B                                       _EEADRL 0191  
                                     _CCPR1H 0292                                       _CCPR2H 0299  
                                     _CCPR3H 0312                                       _CCPR1L 0291  
                                     _CCPR4H 0319                                       _CCPR2L 0298  
                                     _EEDATL 0193                                       _CCPR3L 0311  
                                     _CCPR5H 031D                                       _CCPR4L 0318  
                                     _CCPR5L 031C                                       _EECON2 0196  
                                  ADC_Read@i 002B                                       _ANSELA 018C  
                                     _ANSELB 018D                             ?_interrrupt_bldc 0070  
                              ?_SetDiagAlarm 0070                                       i1l1181 14A3  
                                     i1l1178 147C                                       i1l1844 1ED1  
                                     i1l6220 09CC                                       i1l6302 0A7C  
                                     i1l6230 09D9                                       i1l6222 09CE  
                           _bl_Pumpoff_Alarm 01DF                                       i1l6320 0A90  
                                     i1l6240 09D9                                       i1l6232 09D9  
                                     i1l6224 09D3                                       i1l6216 09C2  
                                     i1l6234 09D9                                       i1l6226 09D5  
                                     i1l6242 09DF                                       i1l6218 09C4  
                                     i1l6420 0B3F                                       i1l6340 0AB1  
                                     i1l6236 09D9                                       i1l6228 09D7  
                                     i1l6244 09EF                                       i1l6182 1EBB  
                                     i1l6326 0A9B                                       i1l6254 0A0A  
                                     i1l6238 09D9                                       i1l6190 0932  
                                     i1l6408 0B1E                                       i1l6272 0A4F  
                                     i1l6416 0B28                                       i1l6256 0A16  
                                     i1l6248 09FB                                       i1l6370 0AE0  
                                     i1l6346 0ABC                                       i1l6266 0A41  
                                     i1l6364 0AD5                                       i1l6278 0A5A  
                                     i1l6296 0A71                                       i1l6800 14DE  
                                     i1l6394 0B04                                       i1l6388 0AF9  
                            _ui8_PWM_FreqCnt 00CD                                       i1l6776 1E74  
                                     i1l8720 125B                                       i1l8712 123D  
                                     i1l6784 148E                                       i1l8714 1249  
                                     i1l8724 1264                                       i1l6796 14DB  
                                     _INTCON 000B                                       _FVRCON 0117  
                         _ui8_Task_Cont100ms 00CE                                       u352_25 0A38  
                                     u347_25 09AE                                       _OSCCON 0099  
                                     u660_25 1254                                       u661_25 125C  
                                     u657_25 1240                ??_Cb56_UbatHandling_node_fcn2 0028  
                                     u930_25 0C78                                       u659_25 124A  
                                     u915_25 1ED2                                       u931_25 0CB1  
                    _ui16_CPU_Temp_bldc_mean 01CA                                       u916_25 1ED7  
                                     _TMR0IE 005D                                       _TMR1IE 0488  
                                     _TMR1IF 0088                                       u925_25 0BD7  
                                     _TMR2IE 0489                                       _TMR2IF 0089  
                                     u918_25 0B56                                       _TMR4IE 0499  
                                     _TMR4IF 0099                                       _TMR6IE 049B  
                                     _TMR6IF 009B                                       _TMR2ON 00E2  
                                     _TMR4ON 20BA                                       u929_25 0C3F  
                                     _TMR6ON 20F2                                       _WDTCON 0097  
       BVH2_Appl_Layer@Sb1_Logical_Operator1 02BC         BVH2_Appl_Layer@Sb1_Logical_Operator2 02B5  
       BVH2_Appl_Layer@Sb1_Logical_Operator3 02BD         BVH2_Appl_Layer@Sb1_Logical_Operator5 02B6  
                                  ??_Task1ms 0070                          _DC_pic_etat_monitor 0157  
                                 _MotorFlags 005A   BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C  
                     __ELINMIntMessageBuffer 02C0                                       ___lmul 11D2  
                                  ??___aldiv 0030                                       ___tmul 1FAF  
                                     ___wmul 1EE4                    BVH2_Appl_Layer@Sb4_PI_sum 02BE  
                                  ??___ltdiv 0037                                    ??___lwdiv 0074  
                            _ui8_PWMinDC_sav 00CC                                 _Debounce_Tmr 01AC  
          BVH2_Appl_Layer@Cb24_oStalledAlarm 0131                            __end_of_PWMReadDC 1736  
                      ?_interrupt_PWMCapture 0070                                    ?_ADC_Init 0070  
                                  ?_ADC_Read 0028                                    ?_ADC_Wait 0070  
                           _ui16_UPhase_bldc 01DA                               ?_PWM_Write_Out 0070  
                                  ?_BLDCWait 0070                     __size_of_BVH2_Appl_Layer 077F  
                             ??_SetDiagAlarm 002A             BVH2_Appl_Layer@Cb9_oCurrentAlarm 012D  
                    __end_of__initialization 0074                           _ui16_CPU_Temp_bldc 0256  
                      __end_of_FILTER_IPhase 129D                      __end_of_PWM_trans_table 1194  
                             __pcstackCOMMON 0070                              _ui8_PWMoutvalue 0141  
                               __pidataBANK0 0003                                 __pidataBANK1 1E0B  
                               __pidataBANK2 1E1A                           _ui16_dryRun_Thresh 0268  
                            ??_InitMotorStop 0028         __size_of_Cb56_UbatHandling_node_fcn2 0049  
                                  ?_PWM_CTRL 0070                                 ??i1_ADC_Read 0072  
                                  ?i1___wmul 0070                                 ??i1_ADC_Wait 0070  
                   _ui8_lin_sim_Failures_ena 0159                                    ?_DiagInit 0070  
                          _Cb1_oCurrentAlarm 013E                                   ??_ADC_Init 0028  
                                 ??_ADC_Read 002A                                   ??_ADC_Wait 0028  
                      _ui16_Speed_demand_mat 01B6                                   ??_BLDCWait 0070  
                __end_of_Oscill_Source_Block 1DFF                    __size_of_PWM_Capture_init 0057  
                       __ELINMIntMessageSize 0151                           _ui16_Duty_Cycle_In 01EC  
                               _analog_value 00BC                         __end_of_InitMotorRun 1235  
                         __size_of_commutate 025C                                   __pbssBANK0 004B  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK4 0220  
                                 __pbssBANK5 02C0                      _ui8_Duty_Cycle_In_Ratio 013F  
                         __size_of_init_bldc 0028                         _bool_ControlLoopMode 00CF  
                         __end_ofi1_ADC_Read 1EC9                           __end_ofi1_ADC_Wait 1E96  
                                 __pmaintext 0804                                      ?___lmul 0028  
                            _Cb34_oPWM_Alarm 013C                                      ?___tmul 0028  
                                    ?___wmul 0028                                 ?i1_commutate 0070  
                                 __pintentry 0004                                      _CM1CON0 0111  
                                    _CM1CON1 0112                                      _CCP1ASE 14AF  
                                    _CCP1CON 0293                                      _CCP2CON 029A  
                                    i1S11714 1840                                      i1S11718 1854  
                                    _CCP3CON 0313                                      _CCP4CON 031A  
    __end_of_Cb1_Current_An___High_node_fcn1 11D2     __size_of_Cb1_Current_An___High_node_fcn1 002A  
          ??_Cb1_Current_An___High_node_fcn1 0028             ?_Cb1_Current_An___High_node_fcn1 0070  
            _Cb1_Current_An___High_node_fcn1 11A8                                      _CCP5CON 031E  
                      _bool_CPU_TempRedAlarm 0147                               ___lmul@product 0030  
                                 ??_PWM_CTRL 0070                                   ??i1___wmul 0074  
                     ??_interrupt_PWMCapture 0070                                 _ui8_CMD_Mode 01E0  
                                 _ui8_Ki_mat 01B8                              ??_PWM_Write_Out 0028  
                                 _ui8_Kp_mat 0149                                      i1l10700 0BDB  
                                    i1l10710 0BE3                                      i1l10622 0B6F  
                                    i1l10614 0B5B                                      i1l10640 0B8F  
                                    i1l10802 0D13                                      i1l10618 0B65  
                                    i1l10740 0C15                                      i1l10628 0B7C  
                                    i1l10742 0C15                                      i1l10734 0C0F  
                                    i1l10718 0BF2                                      i1l10806 0D1A  
                                    i1l10832 0D63                                      i1l10760 0C34  
                                    i1l10744 0C15                                      i1l10680 0BAE  
                                    i1l11472 0012                                      i1l10834 0D69  
                                    i1l10770 0CA2                                      i1l10754 0C29  
                                    i1l11716 09E5                                      i1l10828 0D59  
                                    i1l10836 0D6D                                      i1l10772 0CA6  
                                    i1l10764 0C69                                      i1l10780 0CDE  
                                    i1l10598 1ECB                                      i1l10838 0D6F  
                                    i1l10790 0D00                                      i1l10766 0C6D  
                                    i1l10782 0CEB                                      i1l11486 0021  
                                    i1l11478 0019                                      i1l10856 0D95  
                                    i1l10776 0CDB                                      i1l10784 0CF3  
                                    i1l10858 0D9B                                      i1l10778 0CDD  
                                 ??_DiagInit 002A                                      _PWM1CON 0294  
                                 _comm_state 00DE                  BVH2_Appl_Layer@Cb9_StateCnt 00C3  
                          ??_BVH2_Appl_Layer 0037                    _ui16_Speed_demand_mat_Max 01B4  
                  _ui16_Speed_demand_mat_min 01B2                                      _Task1ms 1DF3  
                               ?_system_init 0070                                      ___aldiv 1563  
                               _ui8_DebugCnt 01E3                           _ui16_PWMin_failCnt 01B0  
                    BVH2_Appl_Layer@Sb3_Sum1 02BA                              __size_of___lmul 0030  
                            __size_of___tmul 0027                              __size_of___wmul 001C  
                                    ___ltdiv 134D                                      ___lwdiv 1235  
                       __end_of_SetDiagAlarm 12D4                            __end_of_commutate 1000  
                               _ui8_CompFlag 00DA                                   _init_ports 1E57  
                                    __ptext1 13DB                                      __ptext2 130E  
                                    __ptext3 1F44                                      __ptext4 1E57  
                                    __ptext5 1FD6                                      __ptext6 1202  
                                    __ptext7 0DA4                                      __ptext8 1424  
                                    __ptext9 1DF9                            _ui16_CMD_Mode_Tmr 0244  
                        _phase_delay_counter 00B8                                      _filter1 01C8  
                                    _filter3 012B                            __end_of_init_bldc 1FFE  
                          _bool_mat_pic_etat 00CB                                _ui16_Temp_cal 01D4  
                           ___aldiv@dividend 002C                   BVH2_Appl_Layer@Sb2_Switch2 02A8  
                 BVH2_Appl_Layer@Sb2_Switch5 02B8                               __ELINMIntRXCRC 0252  
                                    clrloop0 1E00                                      _wkpoint 00EE  
                       end_of_initialization 0074                               __ELINMIntSpace 014D  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00C1         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0  
                     __ELINMIntRXMessageSize 0150                                      init_ram 1E05  
                                    initloop 1E06                         _ui16_fir_IPhase_mean 01D0  
                  __size_of_read_eeprom_data 000F                    __size_of_Get_Analog_Value 0009  
                           ___ltdiv@dividend 0034                             __CFG_CLKOUTEN$ON 0000  
                              ??_clear_timer 0028                             ___aldiv@quotient 0033  
            read_eeprom_data@ui8_adress_data 002A                            _prev_Debounce_Tmr 01AA  
                      i1___wmul@multiplicand 0072                                ??_FILTER_Init 002C  
                              ??_FILTER_Ubat 0028                                ??_FILTER_Temp 0028  
                       _Cb56_odFixedValueSel 00C6                            _FCT_STAMP_ABSENCE 014B  
                                 _timer_init 130E               PWM_Write_Out@ui8_DutyCycle_Out 0029  
                      _ui16_IPhase1_bldc_cal 00E6                  _ui16_CPU_Temp_bldc_mean_cal 0264  
                      _ui16_IPhase2_bldc_cal 00E4                             __CFG_FOSC$INTOSC 0000  
                      __size_of_InitMotorRun 0033                          _ui16_Current_Thresh 01EE  
                           _LIN_DEACTIVATION 01E6                             _PWM_Capture_init 1424  
                           ___ltdiv@quotient 0038                                    _PWMReadDC 168A  
                      _ui16_IPhase3_bldc_cal 00E2                            __size_of_ADC_Init 000B  
                          __size_of_ADC_Read 0023                                _ui16_step_cnt 00BA  
                          __size_of_ADC_Wait 0019                            __size_of_BLDCWait 0021  
                         _ICT_STAMP_PRESENCE 014C                                   _windowPtr1 00E1  
                           _ui8_BattVolt_mat 00AE                            _FCT_STAMP_WRITING 01E7  
                  _phase_delay_counter_debug 025E         BVH2_Appl_Layer@Sb2_Logical_Operator2 02B7  
                   __size_of_interrrupt_bldc 025C                            __ELINMIntReadBack 014F  
                        _ui8_lin_calibration 01E5                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 1202                               __end_of___lmul 1202  
                     _ui16_phase_advancement 00B6                               __end_of___tmul 1FD6  
                             __end_of___wmul 1F00                                  ?_init_ports 0070  
                       __size_ofi1_commutate 0222                          __end_of_clear_timer 1F67  
                              __pbitbssBANK0 02E8                            __size_of_PWM_CTRL 0016  
                                i1ADC_Read@i 0073                          start_initialization 0028  
                          __size_ofi1___wmul 001B                          __end_of_FILTER_Init 1FAF  
                             _bool_PIC_Alarm 01DE                          __end_of_FILTER_Ubat 1563  
                        __end_of_FILTER_Temp 130E                            __size_of_DiagInit 000D  
                                 ?_PWMReadDC 0070          __end_of_Cb56_UbatHandling_node_fcn2 13DB  
                _Cb56_UbatHandling_node_fcn2 1392                               _ui8_IPhase_sel 00DC  
                               _Cb1_StateCnt 004D                          _CURRENT_CALIBRATION 01E9  
                              _SPEED_READING 01E8                        __size_of_SetDiagAlarm 0037  
                    _ui16_NTC_Temp_bldc_mean 01CC                               _ui8_PWM_dc_mat 00D1  
                                   ??___lmul 0030                                     ??___tmul 002E  
                                   ??___wmul 002C                                  __pdataBANK0 005E  
                                __pdataBANK1 00E8                                  __pdataBANK2 0168  
                 read_eeprom_data@ui8_adress 0029                         __size_of_system_init 0049  
                               _Cb1_oShutoff 013D                                  _bemf_filter 0165  
                                ?_timer_init 0070                               ___tmul@product 002E  
                      __end_of_InitMotorStop 1E48                       __size_of_FILTER_IPhase 0034  
                            _ui8_Pulse_State 0140                                    ___latbits 0002  
                            _BVH2_Appl_Layer 0078                                __pcstackBANK0 0020  
                              __pcstackBANK5 02A0                       _ui16_fir_UPhase_mittel 01CE  
                          _bool_MotorStalled 00D6                         _ui8_lin_sim_Failures 015A  
                               _SetDiagAlarm 129D                             _BlankingCountdbg 0164  
                   _VER_SUPPLY_VOLTAGE_VALUE 01EA                 __size_of_Oscill_Source_Block 0006  
                        __size_of_init_ports 0010                                    _ui16_wait 0246  
                           _read_eeprom_data 1E48                                    __pnvBANK1 00EF  
                                  __pnvBANK3 01EE                                    __pnvBANK4 0268  
             BVH2_Appl_Layer@Cb51_oTempAlarm 0130                             _Get_Analog_Value 07F7  
                                   ?_Task1ms 0070                             ___lwdiv@dividend 0072  
                                _clear_timer 1F44                                     ?___aldiv 0028  
                                   ?___ltdiv 0031                                     ?___lwdiv 0070  
                      _bool_HighCurrentAlarm 00D5                         clear_timer@ui8_TmrNb 0028  
                          ??_interrrupt_bldc 0020                _SIBFS_Current_Analysis_High_b 00C9  
                             _ui8_UPhase_sel 00DB                               _bool_UbatAlarm 0146  
                                _FILTER_Init 1F8B                                  _FILTER_Ubat 14EB  
                                _FILTER_Temp 12D4                            _ui8_Sync_Cont10ms 01E4  
                                  _comm_time 0053                                    __pswtext1 1194  
                                  __pswtext2 1868                                    __pswtext3 1840  
                                  __pswtext4 1854                                    _ui8_i_wob 01E2  
                         _Cb34_oPWM_SC_Alarm 013B                                _CompFlag_prev 0161  
                          _interrupt_handler 0004                                    _ict_stamp 016F  
                            _ui16_Ubemf_bldc 00B4                                    _commutate 0DA4  
                      _SIBFS_PWM_Detection_b 00C8                                     _ADC_Init 1E22  
                                   _ADC_Read 1F21                __size_of_interrupt_PWMCapture 0070  
                       _bool_DryRunningAlarm 00D7                                     _ADC_Wait 1E96  
                         ?_interrupt_handler 0070                        __end_of_PWM_Write_Out 1E1A  
                                   _BLDCWait 1F00                                  ??_PWMReadDC 003C  
                           __CFG_WDTE$SWDTEN 0000                            _I_calibrationInit 1736  
                           ___lwdiv@quotient 0075                                    _init_bldc 1FD6  
    BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 0055                           ?_I_calibrationInit 0070  
                        ??_interrupt_handler 007C                        _Cb56_oUbat_Alarm_High 0135  
                                _Cb44_oAlarm 0137                              ___aldiv@divisor 0028  
                            ___aldiv@counter 0031                               ___wmul@product 002C  
                            _ui16_Timer_VaL1 0248                          __size_of_timer_init 003F  
                                  clear_ram0 1DFF                                _FILTER_IPhase 1269  
                        ??_I_calibrationInit 002C                              ___ltdiv@divisor 0031  
                             _Cb34_odPumpOff 0138                              ___ltdiv@counter 003B  
                                   _GO_nDONE 04E9                     __end_of_PWM_Capture_init 147B  
                                _ui8_failure 016E                                  _ui8_cnt_PWM 0155  
                                   _PSTR1CON 0296                    __end_of_interrupt_handler 0026  
                    __end_of_BVH2_Appl_Layer 07F7                                     _PWM_CTRL 1E67  
                             _ui8_b_DResB0_c 0058                               _ui8_b_DResB1_c 015F  
                             _ui8_b_DResB2_c 015E                               _ui8_b_DResB3_c 015D  
                             _ui8_b_DResB4_c 015C                               _ui8_b_DResB5_c 015B  
                          ___wmul@multiplier 0028                                     i1___wmul 1EC9  
                                 ?_commutate 0070                      interrrupt_bldc@ui32_tmp 0024  
                                   _DiagInit 1E2D                    __end_of_I_calibrationInit 1800  
                        ___tmul@multiplicand 002B                          _ui16_fir_Bat_mittel 01D2  
                  _ui8_fixed_start_speed_mat 01C4                        __ELINMIntSleepTimeout 0240  
                   _ui16_ambiant_temperature 0254                                   ?_init_bldc 0070  
                          ___lmul@multiplier 0028                               _ui16_Capt_Val0 00AA  
                             _ui16_Capt_Val1 00A8                               _ui16_Capt_Val2 00A6  
                             _ui16_I_cal_Ph1 00EC                               _ui16_I_cal_Ph2 00EA  
                             _ui16_I_cal_Ph3 00E8                             __ELINMIntStatus1 0152  
                             ?_FILTER_IPhase 0070                           _bool_CPU_TempAlarm 00D8  
                           _ui16_mat_Current 00AC                             __size_of_Task1ms 0006  
                       _SIBFS_UbatHandling_b 0057                      _Cb34_odFixedLowValueSel 013A  
                   BVH2_Appl_Layer@Sb2_Error 02B0                             __size_of___aldiv 0082  
              BVH2_Appl_Layer@Cb19_oDryRun55 0133                BVH2_Appl_Layer@Cb19_oDryRun66 0132  
                           __size_of___ltdiv 0045                              _Sb2_Fixed_Power 1878  
                           __size_of___lwdiv 0034                                 ??_init_ports 0028  
                          _ui8_lastTaskvalue 0142                             _ui16_mat_inpTemp 01BA  
                             _ui8_StartupPWM 00DF                         _bool_PWMin_err_Alarm 0148  
              __ELINMIntMessageBufferPointer 014E                                     _checksum 01A0  
                         _Cb1_RestartCounter 00CA             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00BF  
                         _ui16_NTC_Temp_bldc 01D6                              ___lwdiv@divisor 0070  
                             _Cb56_odPumpOff 0134                              ___lwdiv@counter 0077  
                                   __ptext10 1736                                     __ptext11 1E48  
                                   __ptext20 1FAF                                     __ptext12 1F8B  
                                   __ptext21 134D                                     __ptext13 1E96  
                                   __ptext30 1563                                     __ptext22 1E3A  
                                   __ptext14 1F21                                     __ptext31 1392  
                                   __ptext23 07F7                                     __ptext15 1E2D  
                                   __ptext40 1E7D                                     __ptext32 1F67  
                                   __ptext24 14EB                                     __ptext16 1E22  
                                   __ptext41 1EAF                                     __ptext33 15E5  
                                   __ptext25 12D4                                     __ptext17 129D  
                                   __ptext42 1235                                     __ptext34 11A8  
                                   __ptext26 1269                                     __ptext18 1E12  
                                   __ptext43 1F00                                     __ptext27 0078  
                                   __ptext19 168A                                     __ptext44 1DF3  
                                   __ptext36 147B                                     __ptext28 1EE4  
                                   __ptext45 1E67                                     __ptext37 0B48  
                                   __ptext29 11D2                                     __ptext38 0926  
                                   __ptext39 1EC9                                     _ui8_cnt1 0156  
                             _ui16_Ubat_bldc 005B                                     _filterPh 0129  
                    _bool_mat_currAlarm_bldc 00D0                 BVH2_Appl_Layer@Cb14_StateCnt 01A8  
                              _Cb44_StateCnt 00A4                BVH2_Appl_Layer@Cb51_odPumpOff 012E  
                              __size_of_main 0122                                   _Cb34_idPWM 0056  
                                   _phaseCal 00D4                           __end_of_init_ports 1E67  
                                _inputArray1 0230                               _ui16_Speed_mat 004F  
               BVH2_Appl_Layer@Cb24_StateCnt 004B                                     _prev_RA4 01AE  
                BVH2_Appl_Layer@Sb3_Product1 02B2                                ??i1_commutate 0070  
                                   int$flags 007E            BVH2_Appl_Layer@Cb51_oTempRedAlarm 012F  
                              _ui8_Ubemf_sel 0163                                _Cb44_oShutoff 0136  
                             _ui8_calib_flag 01E1                   __size_of_interrupt_handler 0022  
                           ?_BVH2_Appl_Layer 0070                                 ??_timer_init 0029  
                           _ui16_phase_angle 025C                          _Oscill_Source_Block 1DF9  
                                 i1_ADC_Read 1EAF                                   i1_ADC_Wait 1E7D  
                                ??_commutate 0028                              __ELINMIntStatus 0153  
                   __end_of_read_eeprom_data 1E57                     __end_of_Get_Analog_Value 0800  
                 __size_of_I_calibrationInit 00CA                             _ui8_given_supply 00D3  
    __end_of_Cb44_Pic_etat_monitor_node_fcn1 1F8B     __size_of_Cb44_Pic_etat_monitor_node_fcn1 0024  
          ??_Cb44_Pic_etat_monitor_node_fcn1 0028             ?_Cb44_Pic_etat_monitor_node_fcn1 0070  
            _Cb44_Pic_etat_monitor_node_fcn1 1F67                            _ui8_zero_cros_cnt 0260  
                             _ui8_debug_out0 01DC         __end_of_Cb34_PWM_Detection_node_fcn1 168A  
      __size_of_Cb34_PWM_Detection_node_fcn1 00A5                 _Cb34_PWM_Detection_node_fcn1 15E5  
                       __end_of_cBEMF_FILTER 1840                                  ??_init_bldc 0034  
                                   intlevel1 0000                             _rising_bemf_flag 02E8  
                            ??_FILTER_IPhase 0028                    _bool_PWMin_Freq_err_Alarm 0145  
                      _VER_SW_VERSION_NUMBER 01EB                         ?_Oscill_Source_Block 0070  
                            _interrrupt_bldc 0B48                           __end_of_timer_init 134D  
                    __end_of_Sb2_Fixed_Power 187A                                 ?_clear_timer 0070  
                      _bool_start_demand_mat 0166                                ??_system_init 0035  
                 PWM_Capture_init@ui8_CCP_Nb 0028                            ___tmul@multiplier 0028  
                    _TEMPERATURE_CALIBRATION 014A                                 ?_FILTER_Init 0070  
                               ?_FILTER_Ubat 0070                                 ?_FILTER_Temp 0070  
                      _bool_StalledMotorStop 01DD                                __pstringtext1 1000  
                              __pstringtext2 1800                                __pstringtext3 1878  
                                 _OPTION_REG 0095                          __end_ofi1_commutate 0B48  
                               ___aldiv@sign 0032  BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016D  
              ?_Cb34_PWM_Detection_node_fcn1 0070           BVH2_Appl_Layer@Cb24_RestartCounter 00C5  
                      ??_Oscill_Source_Block 0028                         _Cb34_odFixedValueSel 0139  
                            _ui8_error_Flags 00E0                              _ui8_current_cal 0120  
                     __size_of_InitMotorStop 000E                 __end_of_interrupt_PWMCapture 14EB  
                             _ui16_speed_fil 00B2                               _ui16_speed_rar 01C2  
                              _filterTempCPU 0266                                _filterTempNTC 0127  
