

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Aug 27 10:25:07 2020

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     8                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text19,local,class=CODE,merge=1,delta=2
    24                           	psect	text25,local,class=CODE,merge=1,delta=2
    25                           	psect	text26,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext2,local,class=CONST,delta=2
    27                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text33,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	swtext3,local,class=CONST,delta=2
    31                           	psect	swtext4,local,class=CONST,delta=2
    32                           	psect	text44,local,class=CODE,merge=1,delta=2
    33                           	psect	text45,local,class=CODE,merge=1,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.00
    38                           ; Generated 27/05/2018 GMT
    39                           ; 
    40                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F1936 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  0110                     	;# 
   123  0111                     	;# 
   124  0112                     	;# 
   125  0113                     	;# 
   126  0114                     	;# 
   127  0115                     	;# 
   128  0116                     	;# 
   129  0117                     	;# 
   130  0118                     	;# 
   131  0119                     	;# 
   132  011A                     	;# 
   133  011B                     	;# 
   134  011D                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  0191                     	;# 
   138  0191                     	;# 
   139  0192                     	;# 
   140  0193                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0199                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019C                     	;# 
   153  019C                     	;# 
   154  019D                     	;# 
   155  019E                     	;# 
   156  019F                     	;# 
   157  020D                     	;# 
   158  0210                     	;# 
   159  0211                     	;# 
   160  0212                     	;# 
   161  0213                     	;# 
   162  0214                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0217                     	;# 
   167  0291                     	;# 
   168  0291                     	;# 
   169  0292                     	;# 
   170  0293                     	;# 
   171  0294                     	;# 
   172  0295                     	;# 
   173  0295                     	;# 
   174  0296                     	;# 
   175  0298                     	;# 
   176  0298                     	;# 
   177  0299                     	;# 
   178  029A                     	;# 
   179  029B                     	;# 
   180  029C                     	;# 
   181  029C                     	;# 
   182  029D                     	;# 
   183  029E                     	;# 
   184  029F                     	;# 
   185  0311                     	;# 
   186  0311                     	;# 
   187  0312                     	;# 
   188  0313                     	;# 
   189  0314                     	;# 
   190  0315                     	;# 
   191  0315                     	;# 
   192  0316                     	;# 
   193  0318                     	;# 
   194  0318                     	;# 
   195  0319                     	;# 
   196  031A                     	;# 
   197  031C                     	;# 
   198  031C                     	;# 
   199  031D                     	;# 
   200  031E                     	;# 
   201  0394                     	;# 
   202  0395                     	;# 
   203  0396                     	;# 
   204  0415                     	;# 
   205  0416                     	;# 
   206  0417                     	;# 
   207  041C                     	;# 
   208  041D                     	;# 
   209  041E                     	;# 
   210  0791                     	;# 
   211  0792                     	;# 
   212  0793                     	;# 
   213  0794                     	;# 
   214  0795                     	;# 
   215  0798                     	;# 
   216  0799                     	;# 
   217  07A0                     	;# 
   218  07A1                     	;# 
   219  07A3                     	;# 
   220  07A4                     	;# 
   221  07A6                     	;# 
   222  07A7                     	;# 
   223  07A9                     	;# 
   224  07AA                     	;# 
   225  0FE4                     	;# 
   226  0FE5                     	;# 
   227  0FE6                     	;# 
   228  0FE7                     	;# 
   229  0FE8                     	;# 
   230  0FE9                     	;# 
   231  0FEA                     	;# 
   232  0FEB                     	;# 
   233  0FED                     	;# 
   234  0FEE                     	;# 
   235  0FEF                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000D                     	;# 
   250  000E                     	;# 
   251  0010                     	;# 
   252  0011                     	;# 
   253  0012                     	;# 
   254  0013                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  001E                     	;# 
   265  001F                     	;# 
   266  008C                     	;# 
   267  008D                     	;# 
   268  008E                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009B                     	;# 
   281  009C                     	;# 
   282  009D                     	;# 
   283  009E                     	;# 
   284  010C                     	;# 
   285  010D                     	;# 
   286  010E                     	;# 
   287  0110                     	;# 
   288  0111                     	;# 
   289  0112                     	;# 
   290  0113                     	;# 
   291  0114                     	;# 
   292  0115                     	;# 
   293  0116                     	;# 
   294  0117                     	;# 
   295  0118                     	;# 
   296  0119                     	;# 
   297  011A                     	;# 
   298  011B                     	;# 
   299  011D                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0191                     	;# 
   303  0191                     	;# 
   304  0192                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0194                     	;# 
   309  0195                     	;# 
   310  0196                     	;# 
   311  0199                     	;# 
   312  019A                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019C                     	;# 
   318  019C                     	;# 
   319  019D                     	;# 
   320  019E                     	;# 
   321  019F                     	;# 
   322  020D                     	;# 
   323  0210                     	;# 
   324  0211                     	;# 
   325  0212                     	;# 
   326  0213                     	;# 
   327  0214                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0216                     	;# 
   331  0217                     	;# 
   332  0291                     	;# 
   333  0291                     	;# 
   334  0292                     	;# 
   335  0293                     	;# 
   336  0294                     	;# 
   337  0295                     	;# 
   338  0295                     	;# 
   339  0296                     	;# 
   340  0298                     	;# 
   341  0298                     	;# 
   342  0299                     	;# 
   343  029A                     	;# 
   344  029B                     	;# 
   345  029C                     	;# 
   346  029C                     	;# 
   347  029D                     	;# 
   348  029E                     	;# 
   349  029F                     	;# 
   350  0311                     	;# 
   351  0311                     	;# 
   352  0312                     	;# 
   353  0313                     	;# 
   354  0314                     	;# 
   355  0315                     	;# 
   356  0315                     	;# 
   357  0316                     	;# 
   358  0318                     	;# 
   359  0318                     	;# 
   360  0319                     	;# 
   361  031A                     	;# 
   362  031C                     	;# 
   363  031C                     	;# 
   364  031D                     	;# 
   365  031E                     	;# 
   366  0394                     	;# 
   367  0395                     	;# 
   368  0396                     	;# 
   369  0415                     	;# 
   370  0416                     	;# 
   371  0417                     	;# 
   372  041C                     	;# 
   373  041D                     	;# 
   374  041E                     	;# 
   375  0791                     	;# 
   376  0792                     	;# 
   377  0793                     	;# 
   378  0794                     	;# 
   379  0795                     	;# 
   380  0798                     	;# 
   381  0799                     	;# 
   382  07A0                     	;# 
   383  07A1                     	;# 
   384  07A3                     	;# 
   385  07A4                     	;# 
   386  07A6                     	;# 
   387  07A7                     	;# 
   388  07A9                     	;# 
   389  07AA                     	;# 
   390  0FE4                     	;# 
   391  0FE5                     	;# 
   392  0FE6                     	;# 
   393  0FE7                     	;# 
   394  0FE8                     	;# 
   395  0FE9                     	;# 
   396  0FEA                     	;# 
   397  0FEB                     	;# 
   398  0FED                     	;# 
   399  0FEE                     	;# 
   400  0FEF                     	;# 
   401  0000                     	;# 
   402  0001                     	;# 
   403  0002                     	;# 
   404  0003                     	;# 
   405  0004                     	;# 
   406  0005                     	;# 
   407  0006                     	;# 
   408  0007                     	;# 
   409  0008                     	;# 
   410  0009                     	;# 
   411  000A                     	;# 
   412  000B                     	;# 
   413  000C                     	;# 
   414  000D                     	;# 
   415  000E                     	;# 
   416  0010                     	;# 
   417  0011                     	;# 
   418  0012                     	;# 
   419  0013                     	;# 
   420  0015                     	;# 
   421  0016                     	;# 
   422  0016                     	;# 
   423  0017                     	;# 
   424  0018                     	;# 
   425  0019                     	;# 
   426  001A                     	;# 
   427  001B                     	;# 
   428  001C                     	;# 
   429  001E                     	;# 
   430  001F                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  0090                     	;# 
   435  0091                     	;# 
   436  0092                     	;# 
   437  0093                     	;# 
   438  0095                     	;# 
   439  0096                     	;# 
   440  0097                     	;# 
   441  0098                     	;# 
   442  0099                     	;# 
   443  009A                     	;# 
   444  009B                     	;# 
   445  009B                     	;# 
   446  009C                     	;# 
   447  009D                     	;# 
   448  009E                     	;# 
   449  010C                     	;# 
   450  010D                     	;# 
   451  010E                     	;# 
   452  0110                     	;# 
   453  0111                     	;# 
   454  0112                     	;# 
   455  0113                     	;# 
   456  0114                     	;# 
   457  0115                     	;# 
   458  0116                     	;# 
   459  0117                     	;# 
   460  0118                     	;# 
   461  0119                     	;# 
   462  011A                     	;# 
   463  011B                     	;# 
   464  011D                     	;# 
   465  018C                     	;# 
   466  018D                     	;# 
   467  0191                     	;# 
   468  0191                     	;# 
   469  0192                     	;# 
   470  0193                     	;# 
   471  0193                     	;# 
   472  0193                     	;# 
   473  0194                     	;# 
   474  0195                     	;# 
   475  0196                     	;# 
   476  0199                     	;# 
   477  019A                     	;# 
   478  019B                     	;# 
   479  019B                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019C                     	;# 
   483  019C                     	;# 
   484  019D                     	;# 
   485  019E                     	;# 
   486  019F                     	;# 
   487  020D                     	;# 
   488  0210                     	;# 
   489  0211                     	;# 
   490  0212                     	;# 
   491  0213                     	;# 
   492  0214                     	;# 
   493  0215                     	;# 
   494  0215                     	;# 
   495  0216                     	;# 
   496  0217                     	;# 
   497  0291                     	;# 
   498  0291                     	;# 
   499  0292                     	;# 
   500  0293                     	;# 
   501  0294                     	;# 
   502  0295                     	;# 
   503  0295                     	;# 
   504  0296                     	;# 
   505  0298                     	;# 
   506  0298                     	;# 
   507  0299                     	;# 
   508  029A                     	;# 
   509  029B                     	;# 
   510  029C                     	;# 
   511  029C                     	;# 
   512  029D                     	;# 
   513  029E                     	;# 
   514  029F                     	;# 
   515  0311                     	;# 
   516  0311                     	;# 
   517  0312                     	;# 
   518  0313                     	;# 
   519  0314                     	;# 
   520  0315                     	;# 
   521  0315                     	;# 
   522  0316                     	;# 
   523  0318                     	;# 
   524  0318                     	;# 
   525  0319                     	;# 
   526  031A                     	;# 
   527  031C                     	;# 
   528  031C                     	;# 
   529  031D                     	;# 
   530  031E                     	;# 
   531  0394                     	;# 
   532  0395                     	;# 
   533  0396                     	;# 
   534  0415                     	;# 
   535  0416                     	;# 
   536  0417                     	;# 
   537  041C                     	;# 
   538  041D                     	;# 
   539  041E                     	;# 
   540  0791                     	;# 
   541  0792                     	;# 
   542  0793                     	;# 
   543  0794                     	;# 
   544  0795                     	;# 
   545  0798                     	;# 
   546  0799                     	;# 
   547  07A0                     	;# 
   548  07A1                     	;# 
   549  07A3                     	;# 
   550  07A4                     	;# 
   551  07A6                     	;# 
   552  07A7                     	;# 
   553  07A9                     	;# 
   554  07AA                     	;# 
   555  0FE4                     	;# 
   556  0FE5                     	;# 
   557  0FE6                     	;# 
   558  0FE7                     	;# 
   559  0FE8                     	;# 
   560  0FE9                     	;# 
   561  0FEA                     	;# 
   562  0FEB                     	;# 
   563  0FED                     	;# 
   564  0FEE                     	;# 
   565  0FEF                     	;# 
   566  0000                     	;# 
   567  0001                     	;# 
   568  0002                     	;# 
   569  0003                     	;# 
   570  0004                     	;# 
   571  0005                     	;# 
   572  0006                     	;# 
   573  0007                     	;# 
   574  0008                     	;# 
   575  0009                     	;# 
   576  000A                     	;# 
   577  000B                     	;# 
   578  000C                     	;# 
   579  000D                     	;# 
   580  000E                     	;# 
   581  0010                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  001E                     	;# 
   595  001F                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  0090                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  010E                     	;# 
   617  0110                     	;# 
   618  0111                     	;# 
   619  0112                     	;# 
   620  0113                     	;# 
   621  0114                     	;# 
   622  0115                     	;# 
   623  0116                     	;# 
   624  0117                     	;# 
   625  0118                     	;# 
   626  0119                     	;# 
   627  011A                     	;# 
   628  011B                     	;# 
   629  011D                     	;# 
   630  018C                     	;# 
   631  018D                     	;# 
   632  0191                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0193                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0194                     	;# 
   639  0195                     	;# 
   640  0196                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020D                     	;# 
   653  0210                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0213                     	;# 
   657  0214                     	;# 
   658  0215                     	;# 
   659  0215                     	;# 
   660  0216                     	;# 
   661  0217                     	;# 
   662  0291                     	;# 
   663  0291                     	;# 
   664  0292                     	;# 
   665  0293                     	;# 
   666  0294                     	;# 
   667  0295                     	;# 
   668  0295                     	;# 
   669  0296                     	;# 
   670  0298                     	;# 
   671  0298                     	;# 
   672  0299                     	;# 
   673  029A                     	;# 
   674  029B                     	;# 
   675  029C                     	;# 
   676  029C                     	;# 
   677  029D                     	;# 
   678  029E                     	;# 
   679  029F                     	;# 
   680  0311                     	;# 
   681  0311                     	;# 
   682  0312                     	;# 
   683  0313                     	;# 
   684  0314                     	;# 
   685  0315                     	;# 
   686  0315                     	;# 
   687  0316                     	;# 
   688  0318                     	;# 
   689  0318                     	;# 
   690  0319                     	;# 
   691  031A                     	;# 
   692  031C                     	;# 
   693  031C                     	;# 
   694  031D                     	;# 
   695  031E                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0415                     	;# 
   700  0416                     	;# 
   701  0417                     	;# 
   702  041C                     	;# 
   703  041D                     	;# 
   704  041E                     	;# 
   705  0791                     	;# 
   706  0792                     	;# 
   707  0793                     	;# 
   708  0794                     	;# 
   709  0795                     	;# 
   710  0798                     	;# 
   711  0799                     	;# 
   712  07A0                     	;# 
   713  07A1                     	;# 
   714  07A3                     	;# 
   715  07A4                     	;# 
   716  07A6                     	;# 
   717  07A7                     	;# 
   718  07A9                     	;# 
   719  07AA                     	;# 
   720  0FE4                     	;# 
   721  0FE5                     	;# 
   722  0FE6                     	;# 
   723  0FE7                     	;# 
   724  0FE8                     	;# 
   725  0FE9                     	;# 
   726  0FEA                     	;# 
   727  0FEB                     	;# 
   728  0FED                     	;# 
   729  0FEE                     	;# 
   730  0FEF                     	;# 
   731  0000                     	;# 
   732  0001                     	;# 
   733  0002                     	;# 
   734  0003                     	;# 
   735  0004                     	;# 
   736  0005                     	;# 
   737  0006                     	;# 
   738  0007                     	;# 
   739  0008                     	;# 
   740  0009                     	;# 
   741  000A                     	;# 
   742  000B                     	;# 
   743  000C                     	;# 
   744  000D                     	;# 
   745  000E                     	;# 
   746  0010                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  001E                     	;# 
   760  001F                     	;# 
   761  008C                     	;# 
   762  008D                     	;# 
   763  008E                     	;# 
   764  0090                     	;# 
   765  0091                     	;# 
   766  0092                     	;# 
   767  0093                     	;# 
   768  0095                     	;# 
   769  0096                     	;# 
   770  0097                     	;# 
   771  0098                     	;# 
   772  0099                     	;# 
   773  009A                     	;# 
   774  009B                     	;# 
   775  009B                     	;# 
   776  009C                     	;# 
   777  009D                     	;# 
   778  009E                     	;# 
   779  010C                     	;# 
   780  010D                     	;# 
   781  010E                     	;# 
   782  0110                     	;# 
   783  0111                     	;# 
   784  0112                     	;# 
   785  0113                     	;# 
   786  0114                     	;# 
   787  0115                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  0118                     	;# 
   791  0119                     	;# 
   792  011A                     	;# 
   793  011B                     	;# 
   794  011D                     	;# 
   795  018C                     	;# 
   796  018D                     	;# 
   797  0191                     	;# 
   798  0191                     	;# 
   799  0192                     	;# 
   800  0193                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0194                     	;# 
   804  0195                     	;# 
   805  0196                     	;# 
   806  0199                     	;# 
   807  019A                     	;# 
   808  019B                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019C                     	;# 
   813  019C                     	;# 
   814  019D                     	;# 
   815  019E                     	;# 
   816  019F                     	;# 
   817  020D                     	;# 
   818  0210                     	;# 
   819  0211                     	;# 
   820  0212                     	;# 
   821  0213                     	;# 
   822  0214                     	;# 
   823  0215                     	;# 
   824  0215                     	;# 
   825  0216                     	;# 
   826  0217                     	;# 
   827  0291                     	;# 
   828  0291                     	;# 
   829  0292                     	;# 
   830  0293                     	;# 
   831  0294                     	;# 
   832  0295                     	;# 
   833  0295                     	;# 
   834  0296                     	;# 
   835  0298                     	;# 
   836  0298                     	;# 
   837  0299                     	;# 
   838  029A                     	;# 
   839  029B                     	;# 
   840  029C                     	;# 
   841  029C                     	;# 
   842  029D                     	;# 
   843  029E                     	;# 
   844  029F                     	;# 
   845  0311                     	;# 
   846  0311                     	;# 
   847  0312                     	;# 
   848  0313                     	;# 
   849  0314                     	;# 
   850  0315                     	;# 
   851  0315                     	;# 
   852  0316                     	;# 
   853  0318                     	;# 
   854  0318                     	;# 
   855  0319                     	;# 
   856  031A                     	;# 
   857  031C                     	;# 
   858  031C                     	;# 
   859  031D                     	;# 
   860  031E                     	;# 
   861  0394                     	;# 
   862  0395                     	;# 
   863  0396                     	;# 
   864  0415                     	;# 
   865  0416                     	;# 
   866  0417                     	;# 
   867  041C                     	;# 
   868  041D                     	;# 
   869  041E                     	;# 
   870  0791                     	;# 
   871  0792                     	;# 
   872  0793                     	;# 
   873  0794                     	;# 
   874  0795                     	;# 
   875  0798                     	;# 
   876  0799                     	;# 
   877  07A0                     	;# 
   878  07A1                     	;# 
   879  07A3                     	;# 
   880  07A4                     	;# 
   881  07A6                     	;# 
   882  07A7                     	;# 
   883  07A9                     	;# 
   884  07AA                     	;# 
   885  0FE4                     	;# 
   886  0FE5                     	;# 
   887  0FE6                     	;# 
   888  0FE7                     	;# 
   889  0FE8                     	;# 
   890  0FE9                     	;# 
   891  0FEA                     	;# 
   892  0FEB                     	;# 
   893  0FED                     	;# 
   894  0FEE                     	;# 
   895  0FEF                     	;# 
   896  0000                     	;# 
   897  0001                     	;# 
   898  0002                     	;# 
   899  0003                     	;# 
   900  0004                     	;# 
   901  0005                     	;# 
   902  0006                     	;# 
   903  0007                     	;# 
   904  0008                     	;# 
   905  0009                     	;# 
   906  000A                     	;# 
   907  000B                     	;# 
   908  000C                     	;# 
   909  000D                     	;# 
   910  000E                     	;# 
   911  0010                     	;# 
   912  0011                     	;# 
   913  0012                     	;# 
   914  0013                     	;# 
   915  0015                     	;# 
   916  0016                     	;# 
   917  0016                     	;# 
   918  0017                     	;# 
   919  0018                     	;# 
   920  0019                     	;# 
   921  001A                     	;# 
   922  001B                     	;# 
   923  001C                     	;# 
   924  001E                     	;# 
   925  001F                     	;# 
   926  008C                     	;# 
   927  008D                     	;# 
   928  008E                     	;# 
   929  0090                     	;# 
   930  0091                     	;# 
   931  0092                     	;# 
   932  0093                     	;# 
   933  0095                     	;# 
   934  0096                     	;# 
   935  0097                     	;# 
   936  0098                     	;# 
   937  0099                     	;# 
   938  009A                     	;# 
   939  009B                     	;# 
   940  009B                     	;# 
   941  009C                     	;# 
   942  009D                     	;# 
   943  009E                     	;# 
   944  010C                     	;# 
   945  010D                     	;# 
   946  010E                     	;# 
   947  0110                     	;# 
   948  0111                     	;# 
   949  0112                     	;# 
   950  0113                     	;# 
   951  0114                     	;# 
   952  0115                     	;# 
   953  0116                     	;# 
   954  0117                     	;# 
   955  0118                     	;# 
   956  0119                     	;# 
   957  011A                     	;# 
   958  011B                     	;# 
   959  011D                     	;# 
   960  018C                     	;# 
   961  018D                     	;# 
   962  0191                     	;# 
   963  0191                     	;# 
   964  0192                     	;# 
   965  0193                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0194                     	;# 
   969  0195                     	;# 
   970  0196                     	;# 
   971  0199                     	;# 
   972  019A                     	;# 
   973  019B                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019C                     	;# 
   978  019C                     	;# 
   979  019D                     	;# 
   980  019E                     	;# 
   981  019F                     	;# 
   982  020D                     	;# 
   983  0210                     	;# 
   984  0211                     	;# 
   985  0212                     	;# 
   986  0213                     	;# 
   987  0214                     	;# 
   988  0215                     	;# 
   989  0215                     	;# 
   990  0216                     	;# 
   991  0217                     	;# 
   992  0291                     	;# 
   993  0291                     	;# 
   994  0292                     	;# 
   995  0293                     	;# 
   996  0294                     	;# 
   997  0295                     	;# 
   998  0295                     	;# 
   999  0296                     	;# 
  1000  0298                     	;# 
  1001  0298                     	;# 
  1002  0299                     	;# 
  1003  029A                     	;# 
  1004  029B                     	;# 
  1005  029C                     	;# 
  1006  029C                     	;# 
  1007  029D                     	;# 
  1008  029E                     	;# 
  1009  029F                     	;# 
  1010  0311                     	;# 
  1011  0311                     	;# 
  1012  0312                     	;# 
  1013  0313                     	;# 
  1014  0314                     	;# 
  1015  0315                     	;# 
  1016  0315                     	;# 
  1017  0316                     	;# 
  1018  0318                     	;# 
  1019  0318                     	;# 
  1020  0319                     	;# 
  1021  031A                     	;# 
  1022  031C                     	;# 
  1023  031C                     	;# 
  1024  031D                     	;# 
  1025  031E                     	;# 
  1026  0394                     	;# 
  1027  0395                     	;# 
  1028  0396                     	;# 
  1029  0415                     	;# 
  1030  0416                     	;# 
  1031  0417                     	;# 
  1032  041C                     	;# 
  1033  041D                     	;# 
  1034  041E                     	;# 
  1035  0791                     	;# 
  1036  0792                     	;# 
  1037  0793                     	;# 
  1038  0794                     	;# 
  1039  0795                     	;# 
  1040  0798                     	;# 
  1041  0799                     	;# 
  1042  07A0                     	;# 
  1043  07A1                     	;# 
  1044  07A3                     	;# 
  1045  07A4                     	;# 
  1046  07A6                     	;# 
  1047  07A7                     	;# 
  1048  07A9                     	;# 
  1049  07AA                     	;# 
  1050  0FE4                     	;# 
  1051  0FE5                     	;# 
  1052  0FE6                     	;# 
  1053  0FE7                     	;# 
  1054  0FE8                     	;# 
  1055  0FE9                     	;# 
  1056  0FEA                     	;# 
  1057  0FEB                     	;# 
  1058  0FED                     	;# 
  1059  0FEE                     	;# 
  1060  0FEF                     	;# 
  1061  0000                     	;# 
  1062  0001                     	;# 
  1063  0002                     	;# 
  1064  0003                     	;# 
  1065  0004                     	;# 
  1066  0005                     	;# 
  1067  0006                     	;# 
  1068  0007                     	;# 
  1069  0008                     	;# 
  1070  0009                     	;# 
  1071  000A                     	;# 
  1072  000B                     	;# 
  1073  000C                     	;# 
  1074  000D                     	;# 
  1075  000E                     	;# 
  1076  0010                     	;# 
  1077  0011                     	;# 
  1078  0012                     	;# 
  1079  0013                     	;# 
  1080  0015                     	;# 
  1081  0016                     	;# 
  1082  0016                     	;# 
  1083  0017                     	;# 
  1084  0018                     	;# 
  1085  0019                     	;# 
  1086  001A                     	;# 
  1087  001B                     	;# 
  1088  001C                     	;# 
  1089  001E                     	;# 
  1090  001F                     	;# 
  1091  008C                     	;# 
  1092  008D                     	;# 
  1093  008E                     	;# 
  1094  0090                     	;# 
  1095  0091                     	;# 
  1096  0092                     	;# 
  1097  0093                     	;# 
  1098  0095                     	;# 
  1099  0096                     	;# 
  1100  0097                     	;# 
  1101  0098                     	;# 
  1102  0099                     	;# 
  1103  009A                     	;# 
  1104  009B                     	;# 
  1105  009B                     	;# 
  1106  009C                     	;# 
  1107  009D                     	;# 
  1108  009E                     	;# 
  1109  010C                     	;# 
  1110  010D                     	;# 
  1111  010E                     	;# 
  1112  0110                     	;# 
  1113  0111                     	;# 
  1114  0112                     	;# 
  1115  0113                     	;# 
  1116  0114                     	;# 
  1117  0115                     	;# 
  1118  0116                     	;# 
  1119  0117                     	;# 
  1120  0118                     	;# 
  1121  0119                     	;# 
  1122  011A                     	;# 
  1123  011B                     	;# 
  1124  011D                     	;# 
  1125  018C                     	;# 
  1126  018D                     	;# 
  1127  0191                     	;# 
  1128  0191                     	;# 
  1129  0192                     	;# 
  1130  0193                     	;# 
  1131  0193                     	;# 
  1132  0193                     	;# 
  1133  0194                     	;# 
  1134  0195                     	;# 
  1135  0196                     	;# 
  1136  0199                     	;# 
  1137  019A                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019C                     	;# 
  1143  019C                     	;# 
  1144  019D                     	;# 
  1145  019E                     	;# 
  1146  019F                     	;# 
  1147  020D                     	;# 
  1148  0210                     	;# 
  1149  0211                     	;# 
  1150  0212                     	;# 
  1151  0213                     	;# 
  1152  0214                     	;# 
  1153  0215                     	;# 
  1154  0215                     	;# 
  1155  0216                     	;# 
  1156  0217                     	;# 
  1157  0291                     	;# 
  1158  0291                     	;# 
  1159  0292                     	;# 
  1160  0293                     	;# 
  1161  0294                     	;# 
  1162  0295                     	;# 
  1163  0295                     	;# 
  1164  0296                     	;# 
  1165  0298                     	;# 
  1166  0298                     	;# 
  1167  0299                     	;# 
  1168  029A                     	;# 
  1169  029B                     	;# 
  1170  029C                     	;# 
  1171  029C                     	;# 
  1172  029D                     	;# 
  1173  029E                     	;# 
  1174  029F                     	;# 
  1175  0311                     	;# 
  1176  0311                     	;# 
  1177  0312                     	;# 
  1178  0313                     	;# 
  1179  0314                     	;# 
  1180  0315                     	;# 
  1181  0315                     	;# 
  1182  0316                     	;# 
  1183  0318                     	;# 
  1184  0318                     	;# 
  1185  0319                     	;# 
  1186  031A                     	;# 
  1187  031C                     	;# 
  1188  031C                     	;# 
  1189  031D                     	;# 
  1190  031E                     	;# 
  1191  0394                     	;# 
  1192  0395                     	;# 
  1193  0396                     	;# 
  1194  0415                     	;# 
  1195  0416                     	;# 
  1196  0417                     	;# 
  1197  041C                     	;# 
  1198  041D                     	;# 
  1199  041E                     	;# 
  1200  0791                     	;# 
  1201  0792                     	;# 
  1202  0793                     	;# 
  1203  0794                     	;# 
  1204  0795                     	;# 
  1205  0798                     	;# 
  1206  0799                     	;# 
  1207  07A0                     	;# 
  1208  07A1                     	;# 
  1209  07A3                     	;# 
  1210  07A4                     	;# 
  1211  07A6                     	;# 
  1212  07A7                     	;# 
  1213  07A9                     	;# 
  1214  07AA                     	;# 
  1215  0FE4                     	;# 
  1216  0FE5                     	;# 
  1217  0FE6                     	;# 
  1218  0FE7                     	;# 
  1219  0FE8                     	;# 
  1220  0FE9                     	;# 
  1221  0FEA                     	;# 
  1222  0FEB                     	;# 
  1223  0FED                     	;# 
  1224  0FEE                     	;# 
  1225  0FEF                     	;# 
  1226  0000                     	;# 
  1227  0001                     	;# 
  1228  0002                     	;# 
  1229  0003                     	;# 
  1230  0004                     	;# 
  1231  0005                     	;# 
  1232  0006                     	;# 
  1233  0007                     	;# 
  1234  0008                     	;# 
  1235  0009                     	;# 
  1236  000A                     	;# 
  1237  000B                     	;# 
  1238  000C                     	;# 
  1239  000D                     	;# 
  1240  000E                     	;# 
  1241  0010                     	;# 
  1242  0011                     	;# 
  1243  0012                     	;# 
  1244  0013                     	;# 
  1245  0015                     	;# 
  1246  0016                     	;# 
  1247  0016                     	;# 
  1248  0017                     	;# 
  1249  0018                     	;# 
  1250  0019                     	;# 
  1251  001A                     	;# 
  1252  001B                     	;# 
  1253  001C                     	;# 
  1254  001E                     	;# 
  1255  001F                     	;# 
  1256  008C                     	;# 
  1257  008D                     	;# 
  1258  008E                     	;# 
  1259  0090                     	;# 
  1260  0091                     	;# 
  1261  0092                     	;# 
  1262  0093                     	;# 
  1263  0095                     	;# 
  1264  0096                     	;# 
  1265  0097                     	;# 
  1266  0098                     	;# 
  1267  0099                     	;# 
  1268  009A                     	;# 
  1269  009B                     	;# 
  1270  009B                     	;# 
  1271  009C                     	;# 
  1272  009D                     	;# 
  1273  009E                     	;# 
  1274  010C                     	;# 
  1275  010D                     	;# 
  1276  010E                     	;# 
  1277  0110                     	;# 
  1278  0111                     	;# 
  1279  0112                     	;# 
  1280  0113                     	;# 
  1281  0114                     	;# 
  1282  0115                     	;# 
  1283  0116                     	;# 
  1284  0117                     	;# 
  1285  0118                     	;# 
  1286  0119                     	;# 
  1287  011A                     	;# 
  1288  011B                     	;# 
  1289  011D                     	;# 
  1290  018C                     	;# 
  1291  018D                     	;# 
  1292  0191                     	;# 
  1293  0191                     	;# 
  1294  0192                     	;# 
  1295  0193                     	;# 
  1296  0193                     	;# 
  1297  0193                     	;# 
  1298  0194                     	;# 
  1299  0195                     	;# 
  1300  0196                     	;# 
  1301  0199                     	;# 
  1302  019A                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019C                     	;# 
  1308  019C                     	;# 
  1309  019D                     	;# 
  1310  019E                     	;# 
  1311  019F                     	;# 
  1312  020D                     	;# 
  1313  0210                     	;# 
  1314  0211                     	;# 
  1315  0212                     	;# 
  1316  0213                     	;# 
  1317  0214                     	;# 
  1318  0215                     	;# 
  1319  0215                     	;# 
  1320  0216                     	;# 
  1321  0217                     	;# 
  1322  0291                     	;# 
  1323  0291                     	;# 
  1324  0292                     	;# 
  1325  0293                     	;# 
  1326  0294                     	;# 
  1327  0295                     	;# 
  1328  0295                     	;# 
  1329  0296                     	;# 
  1330  0298                     	;# 
  1331  0298                     	;# 
  1332  0299                     	;# 
  1333  029A                     	;# 
  1334  029B                     	;# 
  1335  029C                     	;# 
  1336  029C                     	;# 
  1337  029D                     	;# 
  1338  029E                     	;# 
  1339  029F                     	;# 
  1340  0311                     	;# 
  1341  0311                     	;# 
  1342  0312                     	;# 
  1343  0313                     	;# 
  1344  0314                     	;# 
  1345  0315                     	;# 
  1346  0315                     	;# 
  1347  0316                     	;# 
  1348  0318                     	;# 
  1349  0318                     	;# 
  1350  0319                     	;# 
  1351  031A                     	;# 
  1352  031C                     	;# 
  1353  031C                     	;# 
  1354  031D                     	;# 
  1355  031E                     	;# 
  1356  0394                     	;# 
  1357  0395                     	;# 
  1358  0396                     	;# 
  1359  0415                     	;# 
  1360  0416                     	;# 
  1361  0417                     	;# 
  1362  041C                     	;# 
  1363  041D                     	;# 
  1364  041E                     	;# 
  1365  0791                     	;# 
  1366  0792                     	;# 
  1367  0793                     	;# 
  1368  0794                     	;# 
  1369  0795                     	;# 
  1370  0798                     	;# 
  1371  0799                     	;# 
  1372  07A0                     	;# 
  1373  07A1                     	;# 
  1374  07A3                     	;# 
  1375  07A4                     	;# 
  1376  07A6                     	;# 
  1377  07A7                     	;# 
  1378  07A9                     	;# 
  1379  07AA                     	;# 
  1380  0FE4                     	;# 
  1381  0FE5                     	;# 
  1382  0FE6                     	;# 
  1383  0FE7                     	;# 
  1384  0FE8                     	;# 
  1385  0FE9                     	;# 
  1386  0FEA                     	;# 
  1387  0FEB                     	;# 
  1388  0FED                     	;# 
  1389  0FEE                     	;# 
  1390  0FEF                     	;# 
  1391  0000                     	;# 
  1392  0001                     	;# 
  1393  0002                     	;# 
  1394  0003                     	;# 
  1395  0004                     	;# 
  1396  0005                     	;# 
  1397  0006                     	;# 
  1398  0007                     	;# 
  1399  0008                     	;# 
  1400  0009                     	;# 
  1401  000A                     	;# 
  1402  000B                     	;# 
  1403  000C                     	;# 
  1404  000D                     	;# 
  1405  000E                     	;# 
  1406  0010                     	;# 
  1407  0011                     	;# 
  1408  0012                     	;# 
  1409  0013                     	;# 
  1410  0015                     	;# 
  1411  0016                     	;# 
  1412  0016                     	;# 
  1413  0017                     	;# 
  1414  0018                     	;# 
  1415  0019                     	;# 
  1416  001A                     	;# 
  1417  001B                     	;# 
  1418  001C                     	;# 
  1419  001E                     	;# 
  1420  001F                     	;# 
  1421  008C                     	;# 
  1422  008D                     	;# 
  1423  008E                     	;# 
  1424  0090                     	;# 
  1425  0091                     	;# 
  1426  0092                     	;# 
  1427  0093                     	;# 
  1428  0095                     	;# 
  1429  0096                     	;# 
  1430  0097                     	;# 
  1431  0098                     	;# 
  1432  0099                     	;# 
  1433  009A                     	;# 
  1434  009B                     	;# 
  1435  009B                     	;# 
  1436  009C                     	;# 
  1437  009D                     	;# 
  1438  009E                     	;# 
  1439  010C                     	;# 
  1440  010D                     	;# 
  1441  010E                     	;# 
  1442  0110                     	;# 
  1443  0111                     	;# 
  1444  0112                     	;# 
  1445  0113                     	;# 
  1446  0114                     	;# 
  1447  0115                     	;# 
  1448  0116                     	;# 
  1449  0117                     	;# 
  1450  0118                     	;# 
  1451  0119                     	;# 
  1452  011A                     	;# 
  1453  011B                     	;# 
  1454  011D                     	;# 
  1455  018C                     	;# 
  1456  018D                     	;# 
  1457  0191                     	;# 
  1458  0191                     	;# 
  1459  0192                     	;# 
  1460  0193                     	;# 
  1461  0193                     	;# 
  1462  0193                     	;# 
  1463  0194                     	;# 
  1464  0195                     	;# 
  1465  0196                     	;# 
  1466  0199                     	;# 
  1467  019A                     	;# 
  1468  019B                     	;# 
  1469  019B                     	;# 
  1470  019B                     	;# 
  1471  019B                     	;# 
  1472  019C                     	;# 
  1473  019C                     	;# 
  1474  019D                     	;# 
  1475  019E                     	;# 
  1476  019F                     	;# 
  1477  020D                     	;# 
  1478  0210                     	;# 
  1479  0211                     	;# 
  1480  0212                     	;# 
  1481  0213                     	;# 
  1482  0214                     	;# 
  1483  0215                     	;# 
  1484  0215                     	;# 
  1485  0216                     	;# 
  1486  0217                     	;# 
  1487  0291                     	;# 
  1488  0291                     	;# 
  1489  0292                     	;# 
  1490  0293                     	;# 
  1491  0294                     	;# 
  1492  0295                     	;# 
  1493  0295                     	;# 
  1494  0296                     	;# 
  1495  0298                     	;# 
  1496  0298                     	;# 
  1497  0299                     	;# 
  1498  029A                     	;# 
  1499  029B                     	;# 
  1500  029C                     	;# 
  1501  029C                     	;# 
  1502  029D                     	;# 
  1503  029E                     	;# 
  1504  029F                     	;# 
  1505  0311                     	;# 
  1506  0311                     	;# 
  1507  0312                     	;# 
  1508  0313                     	;# 
  1509  0314                     	;# 
  1510  0315                     	;# 
  1511  0315                     	;# 
  1512  0316                     	;# 
  1513  0318                     	;# 
  1514  0318                     	;# 
  1515  0319                     	;# 
  1516  031A                     	;# 
  1517  031C                     	;# 
  1518  031C                     	;# 
  1519  031D                     	;# 
  1520  031E                     	;# 
  1521  0394                     	;# 
  1522  0395                     	;# 
  1523  0396                     	;# 
  1524  0415                     	;# 
  1525  0416                     	;# 
  1526  0417                     	;# 
  1527  041C                     	;# 
  1528  041D                     	;# 
  1529  041E                     	;# 
  1530  0791                     	;# 
  1531  0792                     	;# 
  1532  0793                     	;# 
  1533  0794                     	;# 
  1534  0795                     	;# 
  1535  0798                     	;# 
  1536  0799                     	;# 
  1537  07A0                     	;# 
  1538  07A1                     	;# 
  1539  07A3                     	;# 
  1540  07A4                     	;# 
  1541  07A6                     	;# 
  1542  07A7                     	;# 
  1543  07A9                     	;# 
  1544  07AA                     	;# 
  1545  0FE4                     	;# 
  1546  0FE5                     	;# 
  1547  0FE6                     	;# 
  1548  0FE7                     	;# 
  1549  0FE8                     	;# 
  1550  0FE9                     	;# 
  1551  0FEA                     	;# 
  1552  0FEB                     	;# 
  1553  0FED                     	;# 
  1554  0FEE                     	;# 
  1555  0FEF                     	;# 
  1556  0000                     	;# 
  1557  0001                     	;# 
  1558  0002                     	;# 
  1559  0003                     	;# 
  1560  0004                     	;# 
  1561  0005                     	;# 
  1562  0006                     	;# 
  1563  0007                     	;# 
  1564  0008                     	;# 
  1565  0009                     	;# 
  1566  000A                     	;# 
  1567  000B                     	;# 
  1568  000C                     	;# 
  1569  000D                     	;# 
  1570  000E                     	;# 
  1571  0010                     	;# 
  1572  0011                     	;# 
  1573  0012                     	;# 
  1574  0013                     	;# 
  1575  0015                     	;# 
  1576  0016                     	;# 
  1577  0016                     	;# 
  1578  0017                     	;# 
  1579  0018                     	;# 
  1580  0019                     	;# 
  1581  001A                     	;# 
  1582  001B                     	;# 
  1583  001C                     	;# 
  1584  001E                     	;# 
  1585  001F                     	;# 
  1586  008C                     	;# 
  1587  008D                     	;# 
  1588  008E                     	;# 
  1589  0090                     	;# 
  1590  0091                     	;# 
  1591  0092                     	;# 
  1592  0093                     	;# 
  1593  0095                     	;# 
  1594  0096                     	;# 
  1595  0097                     	;# 
  1596  0098                     	;# 
  1597  0099                     	;# 
  1598  009A                     	;# 
  1599  009B                     	;# 
  1600  009B                     	;# 
  1601  009C                     	;# 
  1602  009D                     	;# 
  1603  009E                     	;# 
  1604  010C                     	;# 
  1605  010D                     	;# 
  1606  010E                     	;# 
  1607  0110                     	;# 
  1608  0111                     	;# 
  1609  0112                     	;# 
  1610  0113                     	;# 
  1611  0114                     	;# 
  1612  0115                     	;# 
  1613  0116                     	;# 
  1614  0117                     	;# 
  1615  0118                     	;# 
  1616  0119                     	;# 
  1617  011A                     	;# 
  1618  011B                     	;# 
  1619  011D                     	;# 
  1620  018C                     	;# 
  1621  018D                     	;# 
  1622  0191                     	;# 
  1623  0191                     	;# 
  1624  0192                     	;# 
  1625  0193                     	;# 
  1626  0193                     	;# 
  1627  0193                     	;# 
  1628  0194                     	;# 
  1629  0195                     	;# 
  1630  0196                     	;# 
  1631  0199                     	;# 
  1632  019A                     	;# 
  1633  019B                     	;# 
  1634  019B                     	;# 
  1635  019B                     	;# 
  1636  019B                     	;# 
  1637  019C                     	;# 
  1638  019C                     	;# 
  1639  019D                     	;# 
  1640  019E                     	;# 
  1641  019F                     	;# 
  1642  020D                     	;# 
  1643  0210                     	;# 
  1644  0211                     	;# 
  1645  0212                     	;# 
  1646  0213                     	;# 
  1647  0214                     	;# 
  1648  0215                     	;# 
  1649  0215                     	;# 
  1650  0216                     	;# 
  1651  0217                     	;# 
  1652  0291                     	;# 
  1653  0291                     	;# 
  1654  0292                     	;# 
  1655  0293                     	;# 
  1656  0294                     	;# 
  1657  0295                     	;# 
  1658  0295                     	;# 
  1659  0296                     	;# 
  1660  0298                     	;# 
  1661  0298                     	;# 
  1662  0299                     	;# 
  1663  029A                     	;# 
  1664  029B                     	;# 
  1665  029C                     	;# 
  1666  029C                     	;# 
  1667  029D                     	;# 
  1668  029E                     	;# 
  1669  029F                     	;# 
  1670  0311                     	;# 
  1671  0311                     	;# 
  1672  0312                     	;# 
  1673  0313                     	;# 
  1674  0314                     	;# 
  1675  0315                     	;# 
  1676  0315                     	;# 
  1677  0316                     	;# 
  1678  0318                     	;# 
  1679  0318                     	;# 
  1680  0319                     	;# 
  1681  031A                     	;# 
  1682  031C                     	;# 
  1683  031C                     	;# 
  1684  031D                     	;# 
  1685  031E                     	;# 
  1686  0394                     	;# 
  1687  0395                     	;# 
  1688  0396                     	;# 
  1689  0415                     	;# 
  1690  0416                     	;# 
  1691  0417                     	;# 
  1692  041C                     	;# 
  1693  041D                     	;# 
  1694  041E                     	;# 
  1695  0791                     	;# 
  1696  0792                     	;# 
  1697  0793                     	;# 
  1698  0794                     	;# 
  1699  0795                     	;# 
  1700  0798                     	;# 
  1701  0799                     	;# 
  1702  07A0                     	;# 
  1703  07A1                     	;# 
  1704  07A3                     	;# 
  1705  07A4                     	;# 
  1706  07A6                     	;# 
  1707  07A7                     	;# 
  1708  07A9                     	;# 
  1709  07AA                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0013                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  001E                     	;# 
  1750  001F                     	;# 
  1751  008C                     	;# 
  1752  008D                     	;# 
  1753  008E                     	;# 
  1754  0090                     	;# 
  1755  0091                     	;# 
  1756  0092                     	;# 
  1757  0093                     	;# 
  1758  0095                     	;# 
  1759  0096                     	;# 
  1760  0097                     	;# 
  1761  0098                     	;# 
  1762  0099                     	;# 
  1763  009A                     	;# 
  1764  009B                     	;# 
  1765  009B                     	;# 
  1766  009C                     	;# 
  1767  009D                     	;# 
  1768  009E                     	;# 
  1769  010C                     	;# 
  1770  010D                     	;# 
  1771  010E                     	;# 
  1772  0110                     	;# 
  1773  0111                     	;# 
  1774  0112                     	;# 
  1775  0113                     	;# 
  1776  0114                     	;# 
  1777  0115                     	;# 
  1778  0116                     	;# 
  1779  0117                     	;# 
  1780  0118                     	;# 
  1781  0119                     	;# 
  1782  011A                     	;# 
  1783  011B                     	;# 
  1784  011D                     	;# 
  1785  018C                     	;# 
  1786  018D                     	;# 
  1787  0191                     	;# 
  1788  0191                     	;# 
  1789  0192                     	;# 
  1790  0193                     	;# 
  1791  0193                     	;# 
  1792  0193                     	;# 
  1793  0194                     	;# 
  1794  0195                     	;# 
  1795  0196                     	;# 
  1796  0199                     	;# 
  1797  019A                     	;# 
  1798  019B                     	;# 
  1799  019B                     	;# 
  1800  019B                     	;# 
  1801  019B                     	;# 
  1802  019C                     	;# 
  1803  019C                     	;# 
  1804  019D                     	;# 
  1805  019E                     	;# 
  1806  019F                     	;# 
  1807  020D                     	;# 
  1808  0210                     	;# 
  1809  0211                     	;# 
  1810  0212                     	;# 
  1811  0213                     	;# 
  1812  0214                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0216                     	;# 
  1816  0217                     	;# 
  1817  0291                     	;# 
  1818  0291                     	;# 
  1819  0292                     	;# 
  1820  0293                     	;# 
  1821  0294                     	;# 
  1822  0295                     	;# 
  1823  0295                     	;# 
  1824  0296                     	;# 
  1825  0298                     	;# 
  1826  0298                     	;# 
  1827  0299                     	;# 
  1828  029A                     	;# 
  1829  029B                     	;# 
  1830  029C                     	;# 
  1831  029C                     	;# 
  1832  029D                     	;# 
  1833  029E                     	;# 
  1834  029F                     	;# 
  1835  0311                     	;# 
  1836  0311                     	;# 
  1837  0312                     	;# 
  1838  0313                     	;# 
  1839  0314                     	;# 
  1840  0315                     	;# 
  1841  0315                     	;# 
  1842  0316                     	;# 
  1843  0318                     	;# 
  1844  0318                     	;# 
  1845  0319                     	;# 
  1846  031A                     	;# 
  1847  031C                     	;# 
  1848  031C                     	;# 
  1849  031D                     	;# 
  1850  031E                     	;# 
  1851  0394                     	;# 
  1852  0395                     	;# 
  1853  0396                     	;# 
  1854  0415                     	;# 
  1855  0416                     	;# 
  1856  0417                     	;# 
  1857  041C                     	;# 
  1858  041D                     	;# 
  1859  041E                     	;# 
  1860  0791                     	;# 
  1861  0792                     	;# 
  1862  0793                     	;# 
  1863  0794                     	;# 
  1864  0795                     	;# 
  1865  0798                     	;# 
  1866  0799                     	;# 
  1867  07A0                     	;# 
  1868  07A1                     	;# 
  1869  07A3                     	;# 
  1870  07A4                     	;# 
  1871  07A6                     	;# 
  1872  07A7                     	;# 
  1873  07A9                     	;# 
  1874  07AA                     	;# 
  1875  0FE4                     	;# 
  1876  0FE5                     	;# 
  1877  0FE6                     	;# 
  1878  0FE7                     	;# 
  1879  0FE8                     	;# 
  1880  0FE9                     	;# 
  1881  0FEA                     	;# 
  1882  0FEB                     	;# 
  1883  0FED                     	;# 
  1884  0FEE                     	;# 
  1885  0FEF                     	;# 
  1886                           
  1887                           	psect	idataBANK2
  1888  0000                     __pidataBANK2:	
  1889                           
  1890                           	psect	stringtext1
  1891  1800                     __pstringtext1:	
  1892  1800                     _PWM_trans_table:	
  1893  1800  3400               	retlw	0
  1894  1801  3400               	retlw	0
  1895  1802  3400               	retlw	0
  1896  1803  3400               	retlw	0
  1897  1804  3400               	retlw	0
  1898  1805  3400               	retlw	0
  1899  1806  3400               	retlw	0
  1900  1807  3400               	retlw	0
  1901  1808  3400               	retlw	0
  1902  1809  3400               	retlw	0
  1903  180A  3400               	retlw	0
  1904  180B  3400               	retlw	0
  1905  180C  3400               	retlw	0
  1906  180D  3400               	retlw	0
  1907  180E  3400               	retlw	0
  1908  180F  3400               	retlw	0
  1909  1810  3400               	retlw	0
  1910  1811  3400               	retlw	0
  1911  1812  3400               	retlw	0
  1912  1813  3400               	retlw	0
  1913  1814  34B5               	retlw	181
  1914  1815  3400               	retlw	0
  1915  1816  34B5               	retlw	181
  1916  1817  3400               	retlw	0
  1917  1818  34B5               	retlw	181
  1918  1819  3400               	retlw	0
  1919  181A  34B5               	retlw	181
  1920  181B  3400               	retlw	0
  1921  181C  34B5               	retlw	181
  1922  181D  3400               	retlw	0
  1923  181E  34B5               	retlw	181
  1924  181F  3400               	retlw	0
  1925  1820  34B5               	retlw	181
  1926  1821  3400               	retlw	0
  1927  1822  34B5               	retlw	181
  1928  1823  3400               	retlw	0
  1929  1824  34B5               	retlw	181
  1930  1825  3400               	retlw	0
  1931  1826  34B5               	retlw	181
  1932  1827  3400               	retlw	0
  1933  1828  34B5               	retlw	181
  1934  1829  3400               	retlw	0
  1935  182A  34B6               	retlw	182
  1936  182B  3400               	retlw	0
  1937  182C  34B8               	retlw	184
  1938  182D  3400               	retlw	0
  1939  182E  34B9               	retlw	185
  1940  182F  3400               	retlw	0
  1941  1830  34BA               	retlw	186
  1942  1831  3400               	retlw	0
  1943  1832  34BB               	retlw	187
  1944  1833  3400               	retlw	0
  1945  1834  34BD               	retlw	189
  1946  1835  3400               	retlw	0
  1947  1836  34BE               	retlw	190
  1948  1837  3400               	retlw	0
  1949  1838  34BF               	retlw	191
  1950  1839  3400               	retlw	0
  1951  183A  34C1               	retlw	193
  1952  183B  3400               	retlw	0
  1953  183C  34C2               	retlw	194
  1954  183D  3400               	retlw	0
  1955  183E  34C3               	retlw	195
  1956  183F  3400               	retlw	0
  1957  1840  34C4               	retlw	196
  1958  1841  3400               	retlw	0
  1959  1842  34C6               	retlw	198
  1960  1843  3400               	retlw	0
  1961  1844  34C7               	retlw	199
  1962  1845  3400               	retlw	0
  1963  1846  34C8               	retlw	200
  1964  1847  3400               	retlw	0
  1965  1848  34CA               	retlw	202
  1966  1849  3400               	retlw	0
  1967  184A  34CB               	retlw	203
  1968  184B  3400               	retlw	0
  1969  184C  34CC               	retlw	204
  1970  184D  3400               	retlw	0
  1971  184E  34CD               	retlw	205
  1972  184F  3400               	retlw	0
  1973  1850  34CF               	retlw	207
  1974  1851  3400               	retlw	0
  1975  1852  34D0               	retlw	208
  1976  1853  3400               	retlw	0
  1977  1854  34D1               	retlw	209
  1978  1855  3400               	retlw	0
  1979  1856  34D3               	retlw	211
  1980  1857  3400               	retlw	0
  1981  1858  34D4               	retlw	212
  1982  1859  3400               	retlw	0
  1983  185A  34D5               	retlw	213
  1984  185B  3400               	retlw	0
  1985  185C  34D6               	retlw	214
  1986  185D  3400               	retlw	0
  1987  185E  34D8               	retlw	216
  1988  185F  3400               	retlw	0
  1989  1860  34D9               	retlw	217
  1990  1861  3400               	retlw	0
  1991  1862  34DA               	retlw	218
  1992  1863  3400               	retlw	0
  1993  1864  34DC               	retlw	220
  1994  1865  3400               	retlw	0
  1995  1866  34DD               	retlw	221
  1996  1867  3400               	retlw	0
  1997  1868  34DE               	retlw	222
  1998  1869  3400               	retlw	0
  1999  186A  34E0               	retlw	224
  2000  186B  3400               	retlw	0
  2001  186C  34E1               	retlw	225
  2002  186D  3400               	retlw	0
  2003  186E  34E2               	retlw	226
  2004  186F  3400               	retlw	0
  2005  1870  34E3               	retlw	227
  2006  1871  3400               	retlw	0
  2007  1872  34E5               	retlw	229
  2008  1873  3400               	retlw	0
  2009  1874  34E6               	retlw	230
  2010  1875  3400               	retlw	0
  2011  1876  34E7               	retlw	231
  2012  1877  3400               	retlw	0
  2013  1878  34E9               	retlw	233
  2014  1879  3400               	retlw	0
  2015  187A  34EA               	retlw	234
  2016  187B  3400               	retlw	0
  2017  187C  34EB               	retlw	235
  2018  187D  3400               	retlw	0
  2019  187E  34EC               	retlw	236
  2020  187F  3400               	retlw	0
  2021  1880  34EE               	retlw	238
  2022  1881  3400               	retlw	0
  2023  1882  34EF               	retlw	239
  2024  1883  3400               	retlw	0
  2025  1884  34F0               	retlw	240
  2026  1885  3400               	retlw	0
  2027  1886  34F2               	retlw	242
  2028  1887  3400               	retlw	0
  2029  1888  34F3               	retlw	243
  2030  1889  3400               	retlw	0
  2031  188A  34F4               	retlw	244
  2032  188B  3400               	retlw	0
  2033  188C  34F5               	retlw	245
  2034  188D  3400               	retlw	0
  2035  188E  34F7               	retlw	247
  2036  188F  3400               	retlw	0
  2037  1890  34F8               	retlw	248
  2038  1891  3400               	retlw	0
  2039  1892  34F9               	retlw	249
  2040  1893  3400               	retlw	0
  2041  1894  34FB               	retlw	251
  2042  1895  3400               	retlw	0
  2043  1896  34FC               	retlw	252
  2044  1897  3400               	retlw	0
  2045  1898  34FD               	retlw	253
  2046  1899  3400               	retlw	0
  2047  189A  34FE               	retlw	254
  2048  189B  3400               	retlw	0
  2049  189C  3400               	retlw	0
  2050  189D  3401               	retlw	1
  2051  189E  3401               	retlw	1
  2052  189F  3401               	retlw	1
  2053  18A0  3402               	retlw	2
  2054  18A1  3401               	retlw	1
  2055  18A2  3404               	retlw	4
  2056  18A3  3401               	retlw	1
  2057  18A4  3405               	retlw	5
  2058  18A5  3401               	retlw	1
  2059  18A6  3406               	retlw	6
  2060  18A7  3401               	retlw	1
  2061  18A8  3407               	retlw	7
  2062  18A9  3401               	retlw	1
  2063  18AA  3409               	retlw	9
  2064  18AB  3401               	retlw	1
  2065  18AC  340A               	retlw	10
  2066  18AD  3401               	retlw	1
  2067  18AE  340B               	retlw	11
  2068  18AF  3401               	retlw	1
  2069  18B0  340D               	retlw	13
  2070  18B1  3401               	retlw	1
  2071  18B2  340E               	retlw	14
  2072  18B3  3401               	retlw	1
  2073  18B4  340F               	retlw	15
  2074  18B5  3401               	retlw	1
  2075  18B6  3410               	retlw	16
  2076  18B7  3401               	retlw	1
  2077  18B8  3412               	retlw	18
  2078  18B9  3401               	retlw	1
  2079  18BA  3413               	retlw	19
  2080  18BB  3401               	retlw	1
  2081  18BC  3414               	retlw	20
  2082  18BD  3401               	retlw	1
  2083  18BE  3416               	retlw	22
  2084  18BF  3401               	retlw	1
  2085  18C0  3417               	retlw	23
  2086  18C1  3401               	retlw	1
  2087  18C2  3418               	retlw	24
  2088  18C3  3401               	retlw	1
  2089  18C4  3419               	retlw	25
  2090  18C5  3401               	retlw	1
  2091  18C6  341B               	retlw	27
  2092  18C7  3401               	retlw	1
  2093  18C8  341C               	retlw	28
  2094  18C9  3401               	retlw	1
  2095  18CA  341D               	retlw	29
  2096  18CB  3401               	retlw	1
  2097  18CC  341F               	retlw	31
  2098  18CD  3401               	retlw	1
  2099  18CE  3420               	retlw	32
  2100  18CF  3401               	retlw	1
  2101  18D0  3421               	retlw	33
  2102  18D1  3401               	retlw	1
  2103  18D2  3422               	retlw	34
  2104  18D3  3401               	retlw	1
  2105  18D4  3424               	retlw	36
  2106  18D5  3401               	retlw	1
  2107  18D6  3425               	retlw	37
  2108  18D7  3401               	retlw	1
  2109  18D8  3426               	retlw	38
  2110  18D9  3401               	retlw	1
  2111  18DA  3428               	retlw	40
  2112  18DB  3401               	retlw	1
  2113  18DC  3429               	retlw	41
  2114  18DD  3401               	retlw	1
  2115  18DE  342A               	retlw	42
  2116  18DF  3401               	retlw	1
  2117  18E0  342C               	retlw	44
  2118  18E1  3401               	retlw	1
  2119  18E2  342D               	retlw	45
  2120  18E3  3401               	retlw	1
  2121  18E4  342E               	retlw	46
  2122  18E5  3401               	retlw	1
  2123  18E6  342F               	retlw	47
  2124  18E7  3401               	retlw	1
  2125  18E8  3431               	retlw	49
  2126  18E9  3401               	retlw	1
  2127  18EA  3432               	retlw	50
  2128  18EB  3401               	retlw	1
  2129  18EC  3433               	retlw	51
  2130  18ED  3401               	retlw	1
  2131  18EE  3435               	retlw	53
  2132  18EF  3401               	retlw	1
  2133  18F0  3436               	retlw	54
  2134  18F1  3401               	retlw	1
  2135  18F2  3437               	retlw	55
  2136  18F3  3401               	retlw	1
  2137  18F4  3438               	retlw	56
  2138  18F5  3401               	retlw	1
  2139  18F6  343A               	retlw	58
  2140  18F7  3401               	retlw	1
  2141  18F8  343B               	retlw	59
  2142  18F9  3401               	retlw	1
  2143  18FA  343C               	retlw	60
  2144  18FB  3401               	retlw	1
  2145  18FC  343E               	retlw	62
  2146  18FD  3401               	retlw	1
  2147  18FE  343F               	retlw	63
  2148  18FF  3401               	retlw	1
  2149  1900  3440               	retlw	64
  2150  1901  3401               	retlw	1
  2151  1902  3441               	retlw	65
  2152  1903  3401               	retlw	1
  2153  1904  3443               	retlw	67
  2154  1905  3401               	retlw	1
  2155  1906  3444               	retlw	68
  2156  1907  3401               	retlw	1
  2157  1908  3445               	retlw	69
  2158  1909  3401               	retlw	1
  2159  190A  3447               	retlw	71
  2160  190B  3401               	retlw	1
  2161  190C  3448               	retlw	72
  2162  190D  3401               	retlw	1
  2163  190E  3449               	retlw	73
  2164  190F  3401               	retlw	1
  2165  1910  344A               	retlw	74
  2166  1911  3401               	retlw	1
  2167  1912  344C               	retlw	76
  2168  1913  3401               	retlw	1
  2169  1914  344D               	retlw	77
  2170  1915  3401               	retlw	1
  2171  1916  344E               	retlw	78
  2172  1917  3401               	retlw	1
  2173  1918  3450               	retlw	80
  2174  1919  3401               	retlw	1
  2175  191A  3451               	retlw	81
  2176  191B  3401               	retlw	1
  2177  191C  3452               	retlw	82
  2178  191D  3401               	retlw	1
  2179  191E  3453               	retlw	83
  2180  191F  3401               	retlw	1
  2181  1920  3455               	retlw	85
  2182  1921  3401               	retlw	1
  2183  1922  3456               	retlw	86
  2184  1923  3401               	retlw	1
  2185  1924  3457               	retlw	87
  2186  1925  3401               	retlw	1
  2187  1926  3459               	retlw	89
  2188  1927  3401               	retlw	1
  2189  1928  345A               	retlw	90
  2190  1929  3401               	retlw	1
  2191  192A  345B               	retlw	91
  2192  192B  3401               	retlw	1
  2193  192C  345C               	retlw	92
  2194  192D  3401               	retlw	1
  2195  192E  345E               	retlw	94
  2196  192F  3401               	retlw	1
  2197  1930  345F               	retlw	95
  2198  1931  3401               	retlw	1
  2199  1932  3460               	retlw	96
  2200  1933  3401               	retlw	1
  2201  1934  3462               	retlw	98
  2202  1935  3401               	retlw	1
  2203  1936  3463               	retlw	99
  2204  1937  3401               	retlw	1
  2205  1938  3464               	retlw	100
  2206  1939  3401               	retlw	1
  2207  193A  3465               	retlw	101
  2208  193B  3401               	retlw	1
  2209  193C  3467               	retlw	103
  2210  193D  3401               	retlw	1
  2211  193E  3468               	retlw	104
  2212  193F  3401               	retlw	1
  2213  1940  3469               	retlw	105
  2214  1941  3401               	retlw	1
  2215  1942  346B               	retlw	107
  2216  1943  3401               	retlw	1
  2217  1944  346C               	retlw	108
  2218  1945  3401               	retlw	1
  2219  1946  346D               	retlw	109
  2220  1947  3401               	retlw	1
  2221  1948  346F               	retlw	111
  2222  1949  3401               	retlw	1
  2223  194A  3470               	retlw	112
  2224  194B  3401               	retlw	1
  2225  194C  3471               	retlw	113
  2226  194D  3401               	retlw	1
  2227  194E  3472               	retlw	114
  2228  194F  3401               	retlw	1
  2229  1950  3474               	retlw	116
  2230  1951  3401               	retlw	1
  2231  1952  3475               	retlw	117
  2232  1953  3401               	retlw	1
  2233  1954  3476               	retlw	118
  2234  1955  3401               	retlw	1
  2235  1956  3478               	retlw	120
  2236  1957  3401               	retlw	1
  2237  1958  3479               	retlw	121
  2238  1959  3401               	retlw	1
  2239  195A  347A               	retlw	122
  2240  195B  3401               	retlw	1
  2241  195C  347B               	retlw	123
  2242  195D  3401               	retlw	1
  2243  195E  347D               	retlw	125
  2244  195F  3401               	retlw	1
  2245  1960  347E               	retlw	126
  2246  1961  3401               	retlw	1
  2247  1962  347F               	retlw	127
  2248  1963  3401               	retlw	1
  2249  1964  3481               	retlw	129
  2250  1965  3401               	retlw	1
  2251  1966  3482               	retlw	130
  2252  1967  3401               	retlw	1
  2253  1968  3483               	retlw	131
  2254  1969  3401               	retlw	1
  2255  196A  3484               	retlw	132
  2256  196B  3401               	retlw	1
  2257  196C  3486               	retlw	134
  2258  196D  3401               	retlw	1
  2259  196E  3487               	retlw	135
  2260  196F  3401               	retlw	1
  2261  1970  3488               	retlw	136
  2262  1971  3401               	retlw	1
  2263  1972  348A               	retlw	138
  2264  1973  3401               	retlw	1
  2265  1974  348B               	retlw	139
  2266  1975  3401               	retlw	1
  2267  1976  348C               	retlw	140
  2268  1977  3401               	retlw	1
  2269  1978  348D               	retlw	141
  2270  1979  3401               	retlw	1
  2271  197A  348F               	retlw	143
  2272  197B  3401               	retlw	1
  2273  197C  3490               	retlw	144
  2274  197D  3401               	retlw	1
  2275  197E  3490               	retlw	144
  2276  197F  3401               	retlw	1
  2277  1980  3490               	retlw	144
  2278  1981  3401               	retlw	1
  2279  1982  3490               	retlw	144
  2280  1983  3401               	retlw	1
  2281  1984  3490               	retlw	144
  2282  1985  3401               	retlw	1
  2283  1986  3490               	retlw	144
  2284  1987  3401               	retlw	1
  2285  1988  3490               	retlw	144
  2286  1989  3401               	retlw	1
  2287  198A  3490               	retlw	144
  2288  198B  3401               	retlw	1
  2289  198C  3490               	retlw	144
  2290  198D  3401               	retlw	1
  2291  198E  3490               	retlw	144
  2292  198F  3401               	retlw	1
  2293  1990  3490               	retlw	144
  2294  1991  3401               	retlw	1
  2295  1992  3490               	retlw	144
  2296  1993  3401               	retlw	1
  2297  1994                     __end_of_PWM_trans_table:	
  2298                           
  2299                           	psect	nvBANK1
  2300  00EF                     __pnvBANK1:	
  2301  00EF                     _ui8_ResetMatlab:	
  2302  00EF                     	ds	1
  2303                           
  2304                           	psect	nvBANK2
  2305  016E                     __pnvBANK2:	
  2306  016E                     _ui16_Current_Thresh:	
  2307  016E                     	ds	2
  2308                           
  2309                           	psect	nvBANK3
  2310  01E2                     __pnvBANK3:	
  2311  01E2                     _ui16_dryRun_Thresh:	
  2312  01E2                     	ds	2
  2313  0017                     _TMR1H	set	23
  2314  0016                     _TMR1L	set	22
  2315  001A                     _TMR2	set	26
  2316  0015                     _TMR0	set	21
  2317  0018                     _T1CON	set	24
  2318  000B                     _INTCON	set	11
  2319  001C                     _T2CON	set	28
  2320  001B                     _PR2	set	27
  2321  005D                     _TMR0IE	set	93
  2322  0064                     _RA4	set	100
  2323  009D                     _CCP4IF	set	157
  2324  009C                     _CCP3IF	set	156
  2325  008A                     _CCP1IF	set	138
  2326  0090                     _CCP2IF	set	144
  2327  009E                     _CCP5IF	set	158
  2328  009B                     _TMR6IF	set	155
  2329  0089                     _TMR2IF	set	137
  2330  0099                     _TMR4IF	set	153
  2331  0088                     _TMR1IF	set	136
  2332  005F                     _GIE	set	95
  2333  005E                     _PEIE	set	94
  2334  0097                     _WDTCON	set	151
  2335  0099                     _OSCCON	set	153
  2336  0093                     _PIE3	set	147
  2337  0092                     _PIE2	set	146
  2338  0091                     _PIE1	set	145
  2339  0095                     _OPTION_REG	set	149
  2340  008E                     _TRISC	set	142
  2341  008D                     _TRISB	set	141
  2342  008C                     _TRISA	set	140
  2343  009B                     _ADRESL	set	155
  2344  009C                     _ADRESH	set	156
  2345  009D                     _ADCON0	set	157
  2346  009E                     _ADCON1	set	158
  2347  049B                     _TMR6IE	set	1179
  2348  0499                     _TMR4IE	set	1177
  2349  0488                     _TMR1IE	set	1160
  2350  049E                     _CCP5IE	set	1182
  2351  049D                     _CCP4IE	set	1181
  2352  049C                     _CCP3IE	set	1180
  2353  048A                     _CCP1IE	set	1162
  2354  0489                     _TMR2IE	set	1161
  2355  0490                     _CCP2IE	set	1168
  2356  0495                     _C1IE	set	1173
  2357  04E9                     _GO_nDONE	set	1257
  2358  04E8                     _ADON	set	1256
  2359  010D                     _LATB	set	269
  2360  010C                     _LATA	set	268
  2361  010E                     _LATC	set	270
  2362  0112                     _CM1CON1	set	274
  2363  0111                     _CM1CON0	set	273
  2364  0117                     _FVRCON	set	279
  2365  0870                     _LATC0	set	2160
  2366  0874                     _LATC4	set	2164
  2367  0873                     _LATC3	set	2163
  2368  0871                     _LATC1	set	2161
  2369  0872                     _LATC2	set	2162
  2370  0869                     _LATB1	set	2153
  2371  086A                     _LATB2	set	2154
  2372  088E                     _C1OUT	set	2190
  2373  018D                     _ANSELB	set	397
  2374  018C                     _ANSELA	set	396
  2375  0193                     _EEDATL	set	403
  2376  0191                     _EEADRL	set	401
  2377  0CA8                     _RD	set	3240
  2378  0CAE                     _CFGS	set	3246
  2379  0CAF                     _EEPGD	set	3247
  2380  0292                     _CCPR1H	set	658
  2381  0299                     _CCPR2H	set	665
  2382  0298                     _CCPR2L	set	664
  2383  029A                     _CCP2CON	set	666
  2384  0291                     _CCPR1L	set	657
  2385  0293                     _CCP1CON	set	659
  2386  0295                     _CCP1AS	set	661
  2387  0294                     _PWM1CON	set	660
  2388  0296                     _PSTR1CON	set	662
  2389  14AF                     _CCP1ASE	set	5295
  2390  031D                     _CCPR5H	set	797
  2391  031C                     _CCPR5L	set	796
  2392  031E                     _CCP5CON	set	798
  2393  0319                     _CCPR4H	set	793
  2394  0318                     _CCPR4L	set	792
  2395  031A                     _CCP4CON	set	794
  2396  0312                     _CCPR3H	set	786
  2397  0311                     _CCPR3L	set	785
  2398  0313                     _CCP3CON	set	787
  2399  041C                     _TMR6	set	1052
  2400  0415                     _TMR4	set	1045
  2401  041E                     _T6CON	set	1054
  2402  0417                     _T4CON	set	1047
  2403                           
  2404                           ; #config settings
  2405  0000                     
  2406                           	psect	cinit
  2407  081A                     start_initialization:	
  2408  081A                     __initialization:	
  2409                           
  2410                           ; Initialize objects allocated to BANK2
  2411  081A  0022               	movlb	2	; select bank2
  2412                           
  2413                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  2414  081B  3080               	movlw	128
  2415  081C  00E2               	movwf	__pdataBANK2& (0+127)
  2416  081D  3038               	movlw	56
  2417  081E  00E3               	movwf	(__pdataBANK2+1)& (0+127)
  2418  081F  3001               	movlw	1
  2419  0820  00E4               	movwf	(__pdataBANK2+2)& (0+127)
  2420  0821  01E5               	clrf	(__pdataBANK2+3)& (0+127)
  2421                           
  2422                           ;initializer for _ui16_I_cal_Ph3
  2423  0822  00E6               	movwf	(__pdataBANK2+4)& (0+127)
  2424  0823  01E7               	clrf	(__pdataBANK2+5)& (0+127)
  2425                           
  2426                           ;initializer for _ui16_I_cal_Ph2
  2427  0824  00E8               	movwf	(__pdataBANK2+6)& (0+127)
  2428  0825  01E9               	clrf	(__pdataBANK2+7)& (0+127)
  2429                           
  2430                           ;initializer for _ui16_I_cal_Ph1
  2431  0826  00EA               	movwf	(__pdataBANK2+8)& (0+127)
  2432  0827  01EB               	clrf	(__pdataBANK2+9)& (0+127)
  2433                           
  2434                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  2435  0828  00EC               	movwf	(__pdataBANK2+10)& (0+127)
  2436                           
  2437                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  2438  0829  00ED               	movwf	(__pdataBANK2+11)& (0+127)
  2439                           
  2440                           ; Clear objects allocated to BITBANK0
  2441  082A  0020               	movlb	0	; select bank0
  2442  082B  303C               	movlw	low __pbssBANK0
  2443  082C  01D3               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2444                           
  2445                           ; Clear objects allocated to BANK0
  2446  082D  0084               	movwf	4
  2447  082E  3000               	movlw	high __pbssBANK0
  2448  082F  0085               	movwf	5
  2449  0830  3017               	movlw	23
  2450  0831  3187  2786  3188   	fcall	clear_ram0
  2451                           
  2452                           ; Clear objects allocated to BANK1
  2453  0834  30A0               	movlw	low __pbssBANK1
  2454  0835  0084               	movwf	4
  2455  0836  3000               	movlw	high __pbssBANK1
  2456  0837  0085               	movwf	5
  2457  0838  304F               	movlw	79
  2458  0839  3187  2786  3188   	fcall	clear_ram0
  2459                           
  2460                           ; Clear objects allocated to BANK2
  2461  083C  3020               	movlw	low __pbssBANK2
  2462  083D  0084               	movwf	4
  2463  083E  3001               	movlw	high __pbssBANK2
  2464  083F  0085               	movwf	5
  2465  0840  3042               	movlw	66
  2466  0841  3187  2786  3188   	fcall	clear_ram0
  2467                           
  2468                           ; Clear objects allocated to BANK3
  2469  0844  30A0               	movlw	low __pbssBANK3
  2470  0845  0084               	movwf	4
  2471  0846  3001               	movlw	high __pbssBANK3
  2472  0847  0085               	movwf	5
  2473  0848  3024               	movlw	36
  2474  0849  3187  2786  3188   	fcall	clear_ram0
  2475  084C                     end_of_initialization:	
  2476                           ;End of C runtime variable initialization code
  2477                           
  2478  084C                     __end_of__initialization:	
  2479  084C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2480  084D  0020               	movlb	0
  2481  084E  284F               	ljmp	_main	;jump to C main() function
  2482  084F                     __pmaintext:	
  2483 ;;
  2484 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2485 ;;
  2486 ;; *************** function _main *****************
  2487 ;; Defined at:
  2488 ;;		line 630 in file "../main.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  1    wreg      void 
  2495 ;; Registers used:
  2496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : B1F/0
  2499 ;;		On exit  : 1F/1
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2502 ;;      Params:         0       0       0       0       0       0       0       0
  2503 ;;      Locals:         0       0       0       0       0       0       0       0
  2504 ;;      Temps:          0       4       0       0       0       0       0       0
  2505 ;;      Totals:         0       4       0       0       0       0       0       0
  2506 ;;Total ram usage:        4 bytes
  2507 ;; Hardware stack levels required when called:    7
  2508 ;; This function calls:
  2509 ;;		_BVH2_Appl_Layer
  2510 ;;		_Get_Analog_Value
  2511 ;;		_InitMotorRun
  2512 ;;		_InitMotorStop
  2513 ;;		_PWMReadDC
  2514 ;;		_SetDiagAlarm
  2515 ;;		___wmul
  2516 ;;		_clear_timer
  2517 ;;		_system_init
  2518 ;; This function is called by:
  2519 ;;		Startup code after reset
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function _main
  2525  084F                     _main:	
  2526                           
  2527                           ;main.c: 642: system_init( );
  2528                           
  2529                           ;incstack = 0
  2530                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2531  084F  3194  24DE  3188   	fcall	_system_init
  2532                           
  2533                           ;main.c: 643: clear_timer( 4 );
  2534  0852  3004               	movlw	4
  2535  0853  3195  254D  3188   	fcall	_clear_timer
  2536                           
  2537                           ;main.c: 644: ui8_lastTaskvalue = 0;
  2538  0856  0021               	movlb	1	; select bank1
  2539  0857  01D5               	clrf	_ui8_lastTaskvalue^(0+128)
  2540  0858                     l9859:	
  2541                           
  2542                           ;main.c: 697: {;main.c: 699: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  2543  0858  0021               	movlb	1	; select bank1
  2544  0859  0860               	movf	_ui8_Task_Cont1ms^(0+128),w
  2545  085A  0020               	movlb	0	; select bank0
  2546  085B  00B8               	movwf	??_main
  2547  085C  01B9               	clrf	??_main+1
  2548  085D  0839               	movf	??_main+1,w
  2549  085E  00BB               	movwf	??_main+3
  2550  085F  0021               	movlb	1	; select bank1
  2551  0860  0855               	movf	_ui8_lastTaskvalue^(0+128),w
  2552  0861  0020               	movlb	0	; select bank0
  2553  0862  0238               	subwf	??_main,w
  2554  0863  00BA               	movwf	??_main+2
  2555  0864  1C03               	skipc
  2556  0865  03BB               	decf	??_main+3,f
  2557  0866  043B               	iorwf	??_main+3,w
  2558  0867  1903               	btfsc	3,2
  2559  0868  2858               	goto	l9859
  2560                           
  2561                           ;main.c: 701: {;main.c: 707: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  2562  0869  0021               	movlb	1	; select bank1
  2563  086A  0860               	movf	_ui8_Task_Cont1ms^(0+128),w
  2564  086B  00D5               	movwf	_ui8_lastTaskvalue^(0+128)
  2565                           
  2566                           ;main.c: 710: ui8_Task_Cont3ms++;
  2567  086C  0AD7               	incf	_ui8_Task_Cont3ms^(0+128),f
  2568                           
  2569                           ;main.c: 711: ui8_Task_Cont5ms++;
  2570  086D  0AD6               	incf	_ui8_Task_Cont5ms^(0+128),f
  2571                           
  2572                           ;main.c: 712: ui8_Task_Cont100ms++;
  2573  086E  0020               	movlb	0	; select bank0
  2574  086F  307D               	movlw	125
  2575  0870  0ACD               	incf	_ui8_Task_Cont100ms,f
  2576                           
  2577                           ;main.c: 931: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  2578  0871  009B               	movwf	27	;volatile
  2579                           
  2580                           ;main.c: 932: ui16_duty_cycle_BLDC = ui16_duty_cycle_mat*5/4;
  2581  0872  0022               	movlb	2	; select bank2
  2582  0873  0836               	movf	(_ui16_duty_cycle_mat+1)^(0+256),w
  2583  0874  0020               	movlb	0	; select bank0
  2584  0875  00A5               	movwf	___wmul@multiplier+1
  2585  0876  0022               	movlb	2	; select bank2
  2586  0877  0835               	movf	_ui16_duty_cycle_mat^(0+256),w
  2587  0878  0020               	movlb	0	; select bank0
  2588  0879  00A4               	movwf	___wmul@multiplier
  2589  087A  3005               	movlw	5
  2590  087B  00A6               	movwf	___wmul@multiplicand
  2591  087C  01A7               	clrf	___wmul@multiplicand+1
  2592  087D  2149  3188         	fcall	___wmul
  2593  087F  0825               	movf	?___wmul+1,w
  2594  0880  0021               	movlb	1	; select bank1
  2595  0881  00AF               	movwf	(_ui16_duty_cycle_BLDC+1)^(0+128)
  2596  0882  0020               	movlb	0	; select bank0
  2597  0883  0824               	movf	?___wmul,w
  2598  0884  0021               	movlb	1	; select bank1
  2599  0885  00AE               	movwf	_ui16_duty_cycle_BLDC^(0+128)
  2600  0886  36AF               	lsrf	(_ui16_duty_cycle_BLDC+1)^(0+128),f
  2601  0887  0CAE               	rrf	_ui16_duty_cycle_BLDC^(0+128),f
  2602  0888  36AF               	lsrf	(_ui16_duty_cycle_BLDC+1)^(0+128),f
  2603  0889  0CAE               	rrf	_ui16_duty_cycle_BLDC^(0+128),f
  2604                           
  2605                           ;main.c: 949: Get_Analog_Value( );
  2606  088A  273C  3188         	fcall	_Get_Analog_Value
  2607                           
  2608                           ;main.c: 995: if( ui8_Task_Cont3ms > 2 )
  2609  088C  3003               	movlw	3
  2610  088D  0021               	movlb	1	; select bank1
  2611  088E  0257               	subwf	_ui8_Task_Cont3ms^(0+128),w
  2612  088F  1803               	btfsc	3,0
  2613                           
  2614                           ;main.c: 997: {;main.c: 999: ui8_Task_Cont3ms = 0;
  2615  0890  01D7               	clrf	_ui8_Task_Cont3ms^(0+128)
  2616                           
  2617                           ;main.c: 1034: };main.c: 1040: if( ui8_Task_Cont5ms > 4 )
  2618  0891  3005               	movlw	5
  2619  0892  0256               	subwf	_ui8_Task_Cont5ms^(0+128),w
  2620  0893  1C03               	skipc
  2621  0894  2939               	goto	l9939
  2622                           
  2623                           ;main.c: 1042: {;main.c: 1046: ui8_Task_Cont5ms = 0;
  2624  0895  01D6               	clrf	_ui8_Task_Cont5ms^(0+128)
  2625  0896  0064               	clrwdt	;# 
  2626                           
  2627                           ;main.c: 1054: ui8_PWM_dc_mat = PWMReadDC( );
  2628  0897  3185  2565  3188   	fcall	_PWMReadDC
  2629  089A  0021               	movlb	1	; select bank1
  2630  089B  00DF               	movwf	_ui8_PWM_dc_mat^(0+128)
  2631                           
  2632                           ;main.c: 1057: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  2633  089C  0022               	movlb	2	; select bank2
  2634  089D  0832               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
  2635  089E  00B4               	movwf	(_ui16_PWM_Freq_mat+1)^(0+256)
  2636  089F  0831               	movf	_ui16_PWM_Freq_In^(0+256),w
  2637  08A0  00B3               	movwf	_ui16_PWM_Freq_mat^(0+256)
  2638                           
  2639                           ;main.c: 1058: ui16_Speed_mat = ui16_speed_fil;
  2640  08A1  0838               	movf	(_ui16_speed_fil+1)^(0+256),w
  2641  08A2  0020               	movlb	0	; select bank0
  2642  08A3  00C3               	movwf	_ui16_Speed_mat+1
  2643  08A4  0022               	movlb	2	; select bank2
  2644  08A5  0837               	movf	_ui16_speed_fil^(0+256),w
  2645  08A6  0020               	movlb	0	; select bank0
  2646  08A7  00C2               	movwf	_ui16_Speed_mat
  2647                           
  2648                           ;main.c: 1059: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  2649  08A8  0022               	movlb	2	; select bank2
  2650  08A9  0846               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+256),w
  2651  08AA  00B0               	movwf	(_ui16_mat_inpTemp+1)^(0+256)
  2652  08AB  0845               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+256),w
  2653  08AC  00AF               	movwf	_ui16_mat_inpTemp^(0+256)
  2654                           
  2655                           ;main.c: 1060: ui8_Ki_mat = 5;
  2656  08AD  3005               	movlw	5
  2657  08AE  00AD               	movwf	_ui8_Ki_mat^(0+256)
  2658  08AF  01AE               	clrf	(_ui8_Ki_mat+1)^(0+256)
  2659                           
  2660                           ;main.c: 1061: ui8_Kp_mat = 0;
  2661  08B0  0021               	movlb	1	; select bank1
  2662  08B1  01DE               	clrf	_ui8_Kp_mat^(0+128)
  2663                           
  2664                           ;main.c: 1109: ui16_Speed_demand_mat = PWM_trans_table[ ui8_PWM_dc_mat ];
  2665  08B2  085F               	movf	_ui8_PWM_dc_mat^(0+128),w
  2666  08B3  0020               	movlb	0	; select bank0
  2667  08B4  00B8               	movwf	??_main
  2668  08B5  3000               	movlw	low (_PWM_trans_table| (0+32768))
  2669  08B6  01B9               	clrf	??_main+1
  2670  08B7  35B8               	lslf	??_main,f
  2671  08B8  0DB9               	rlf	??_main+1,f
  2672  08B9  0738               	addwf	??_main,w
  2673  08BA  0084               	movwf	4
  2674  08BB  3098               	movlw	high (_PWM_trans_table| (0+32768))
  2675  08BC  3D39               	addwfc	??_main+1,w
  2676  08BD  0085               	movwf	5
  2677  08BE  3F00               	moviw [0]fsr0
  2678  08BF  0022               	movlb	2	; select bank2
  2679  08C0  00AB               	movwf	_ui16_Speed_demand_mat^(0+256)
  2680  08C1  3F01               	moviw [1]fsr0
  2681  08C2  00AC               	movwf	(_ui16_Speed_demand_mat+1)^(0+256)
  2682                           
  2683                           ;main.c: 1112: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 200 ] );
  2684  08C3  3090               	movlw	low ((_PWM_trans_table+400)| (0+32768))
  2685  08C4  0084               	movwf	4
  2686  08C5  3099               	movlw	high ((_PWM_trans_table+400)| (0+32768))
  2687  08C6  0085               	movwf	5
  2688  08C7  3F00               	moviw [0]fsr0
  2689  08C8  00A9               	movwf	_ui16_Speed_demand_mat_Max^(0+256)
  2690  08C9  3F01               	moviw [1]fsr0
  2691  08CA  00AA               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+256)
  2692                           
  2693                           ;main.c: 1115: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 20 ] );
  2694  08CB  3028               	movlw	low ((_PWM_trans_table+40)| (0+32768))
  2695  08CC  0084               	movwf	4
  2696  08CD  3098               	movlw	high ((_PWM_trans_table+40)| (0+32768))
  2697  08CE  0085               	movwf	5
  2698  08CF  3F00               	moviw [0]fsr0
  2699  08D0  00A7               	movwf	_ui16_Speed_demand_mat_min^(0+256)
  2700  08D1  3F01               	moviw [1]fsr0
  2701  08D2  00A8               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+256)
  2702                           
  2703                           ;main.c: 1134: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  2704  08D3  0852               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  2705  08D4  0020               	movlb	0	; select bank0
  2706  08D5  00B9               	movwf	??_main+1
  2707  08D6  0022               	movlb	2	; select bank2
  2708  08D7  0851               	movf	_ui16_fir_Bat_mittel^(0+256),w
  2709  08D8  0020               	movlb	0	; select bank0
  2710  08D9  00B8               	movwf	??_main
  2711  08DA  36B9               	lsrf	??_main+1,f
  2712  08DB  0CB8               	rrf	??_main,f
  2713  08DC  36B9               	lsrf	??_main+1,f
  2714  08DD  0CB8               	rrf	??_main,f
  2715  08DE  0838               	movf	??_main,w
  2716  08DF  0021               	movlb	1	; select bank1
  2717  08E0  00AC               	movwf	_ui8_BattVolt_mat^(0+128)
  2718  08E1  01AD               	clrf	(_ui8_BattVolt_mat+1)^(0+128)
  2719                           
  2720                           ;main.c: 1135: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  2721  08E2  0022               	movlb	2	; select bank2
  2722  08E3  0850               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  2723  08E4  0021               	movlb	1	; select bank1
  2724  08E5  00AB               	movwf	(_ui16_mat_Current+1)^(0+128)
  2725  08E6  0022               	movlb	2	; select bank2
  2726  08E7  084F               	movf	_ui16_fir_IPhase_mean^(0+256),w
  2727  08E8  0021               	movlb	1	; select bank1
  2728  08E9  00AA               	movwf	_ui16_mat_Current^(0+128)
  2729                           
  2730                           ;main.c: 1136: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  2731  08EA  3000               	movlw	0
  2732  08EB  0020               	movlb	0	; select bank0
  2733  08EC  184E               	btfsc	_MotorFlags,0
  2734  08ED  3001               	movlw	1
  2735  08EE  0021               	movlb	1	; select bank1
  2736  08EF  00DD               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  2737                           
  2738                           ;main.c: 1147: bool_ControlLoopMode = 0;
  2739  08F0  01DC               	clrf	_bool_ControlLoopMode^(0+128)
  2740                           
  2741                           ;main.c: 1155: BVH2_Appl_Layer( );
  2742  08F1  215E  3188         	fcall	_BVH2_Appl_Layer
  2743                           
  2744                           ;main.c: 1158: ui8_ResetMatlab = 0;
  2745  08F3  0021               	movlb	1	; select bank1
  2746  08F4  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  2747                           
  2748                           ;main.c: 1164: if( ui16_duty_cycle_mat == 0 )
  2749  08F5  0022               	movlb	2	; select bank2
  2750  08F6  0835               	movf	_ui16_duty_cycle_mat^(0+256),w
  2751  08F7  0436               	iorwf	(_ui16_duty_cycle_mat+1)^(0+256),w
  2752  08F8  1D03               	btfss	3,2
  2753  08F9  28FD               	goto	l9919
  2754                           
  2755                           ;main.c: 1166: {;main.c: 1168: InitMotorStop( );
  2756  08FA  2743  3188         	fcall	_InitMotorStop
  2757                           
  2758                           ;main.c: 1171: }
  2759  08FC  2900               	goto	l9921
  2760  08FD                     l9919:	
  2761                           
  2762                           ;main.c: 1174: else;main.c: 1175: {;main.c: 1177: InitMotorRun( );
  2763  08FD  3197  270E  3188   	fcall	_InitMotorRun
  2764  0900                     l9921:	
  2765                           
  2766                           ;main.c: 1180: };main.c: 1187: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  2767  0900  0021               	movlb	1	; select bank1
  2768  0901  085B               	movf	_bool_PWMin_err_Alarm^(0+128),w
  2769  0902  3901               	andlw	1
  2770  0903  0020               	movlb	0	; select bank0
  2771  0904  104F               	bcf	_ui8_error_Flags,0
  2772  0905  1D03               	skipz
  2773  0906  144F               	bsf	_ui8_error_Flags,0
  2774                           
  2775                           ;main.c: 1188: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  2776  0907  0021               	movlb	1	; select bank1
  2777  0908  0864               	movf	_bool_CPU_TempAlarm^(0+128),w
  2778  0909  3901               	andlw	1
  2779  090A  0020               	movlb	0	; select bank0
  2780  090B  10CF               	bcf	_ui8_error_Flags,1
  2781  090C  1D03               	skipz
  2782  090D  14CF               	bsf	_ui8_error_Flags,1
  2783                           
  2784                           ;main.c: 1189: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  2785  090E  0021               	movlb	1	; select bank1
  2786  090F  085A               	movf	_bool_CPU_TempRedAlarm^(0+128),w
  2787  0910  3901               	andlw	1
  2788  0911  0020               	movlb	0	; select bank0
  2789  0912  13CF               	bcf	_ui8_error_Flags,7
  2790  0913  1D03               	skipz
  2791  0914  17CF               	bsf	_ui8_error_Flags,7
  2792                           
  2793                           ;main.c: 1190: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  2794  0915  0021               	movlb	1	; select bank1
  2795  0916  0861               	movf	_bool_HighCurrentAlarm^(0+128),w
  2796  0917  3901               	andlw	1
  2797  0918  0020               	movlb	0	; select bank0
  2798  0919  114F               	bcf	_ui8_error_Flags,2
  2799  091A  1D03               	skipz
  2800  091B  154F               	bsf	_ui8_error_Flags,2
  2801                           
  2802                           ;main.c: 1191: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  2803  091C  0021               	movlb	1	; select bank1
  2804  091D  0862               	movf	_bool_MotorStalled^(0+128),w
  2805  091E  3901               	andlw	1
  2806  091F  0020               	movlb	0	; select bank0
  2807  0920  11CF               	bcf	_ui8_error_Flags,3
  2808  0921  1D03               	skipz
  2809  0922  15CF               	bsf	_ui8_error_Flags,3
  2810                           
  2811                           ;main.c: 1192: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  2812  0923  0021               	movlb	1	; select bank1
  2813  0924  0863               	movf	_bool_DryRunningAlarm^(0+128),w
  2814  0925  3901               	andlw	1
  2815  0926  0020               	movlb	0	; select bank0
  2816  0927  124F               	bcf	_ui8_error_Flags,4
  2817  0928  1D03               	skipz
  2818  0929  164F               	bsf	_ui8_error_Flags,4
  2819                           
  2820                           ;main.c: 1193: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  2821  092A  0021               	movlb	1	; select bank1
  2822  092B  0859               	movf	_bool_UbatAlarm^(0+128),w
  2823  092C  3901               	andlw	1
  2824  092D  0020               	movlb	0	; select bank0
  2825  092E  134F               	bcf	_ui8_error_Flags,6
  2826  092F  1D03               	skipz
  2827  0930  174F               	bsf	_ui8_error_Flags,6
  2828                           
  2829                           ;main.c: 1194: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  2830  0931  0021               	movlb	1	; select bank1
  2831  0932  0858               	movf	_bool_PWMin_Freq_err_Alarm^(0+128),w
  2832  0933  3901               	andlw	1
  2833  0934  0020               	movlb	0	; select bank0
  2834  0935  12CF               	bcf	_ui8_error_Flags,5
  2835  0936  1D03               	skipz
  2836  0937  16CF               	bsf	_ui8_error_Flags,5
  2837                           
  2838                           ;main.c: 1199: MotorFlags.bits.B0 = 0;
  2839  0938  104E               	bcf	_MotorFlags,0
  2840  0939                     l9939:	
  2841                           
  2842                           ;main.c: 1255: };main.c: 1261: if( ui8_Task_Cont100ms == 25 )
  2843  0939  3019               	movlw	25
  2844  093A  0020               	movlb	0	; select bank0
  2845  093B  064D               	xorwf	_ui8_Task_Cont100ms,w
  2846  093C  1D03               	btfss	3,2
  2847  093D  2941               	goto	l9949
  2848                           
  2849                           ;main.c: 1263: {;main.c: 1274: SetDiagAlarm( );
  2850  093E  3196  26C2  3188   	fcall	_SetDiagAlarm
  2851  0941                     l9949:	
  2852                           
  2853                           ;main.c: 1476: };main.c: 1482: if( ui8_Task_Cont100ms > 100 )
  2854  0941  3065               	movlw	101
  2855  0942  0020               	movlb	0	; select bank0
  2856  0943  024D               	subwf	_ui8_Task_Cont100ms,w
  2857  0944  1803               	btfsc	3,0
  2858                           
  2859                           ;main.c: 1484: {;main.c: 1488: ui8_Task_Cont100ms = 0;
  2860  0945  01CD               	clrf	_ui8_Task_Cont100ms
  2861                           
  2862                           ;main.c: 1528: };main.c: 1556: bool_start_demand_mat = 0;
  2863  0946  0021               	movlb	1	; select bank1
  2864  0947  01EE               	clrf	_bool_start_demand_mat^(0+128)
  2865                           
  2866                           ;main.c: 1562: }
  2867  0948  2858               	goto	l9859
  2868  0949                     __end_of_main:	
  2869  0949                     __ptext28:	
  2870 ;; *************** function ___wmul *****************
  2871 ;; Defined at:
  2872 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  multiplier      2    4[BANK0 ] unsigned int 
  2875 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  product         2    8[BANK0 ] unsigned int 
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  2    4[BANK0 ] unsigned int 
  2880 ;; Registers used:
  2881 ;;		wreg, status,2, status,0
  2882 ;; Tracked objects:
  2883 ;;		On entry : 1F/0
  2884 ;;		On exit  : 1F/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2887 ;;      Params:         0       4       0       0       0       0       0       0
  2888 ;;      Locals:         0       2       0       0       0       0       0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0       0
  2890 ;;      Totals:         0       6       0       0       0       0       0       0
  2891 ;;Total ram usage:        6 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    3
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_interrrupt_bldc
  2898 ;;		_main
  2899 ;;		_BVH2_Appl_Layer
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function ___wmul
  2905  0949                     ___wmul:	
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2909  0949  01A8               	clrf	___wmul@product
  2910  094A  01A9               	clrf	___wmul@product+1
  2911  094B                     l8775:	
  2912  094B  1C24               	btfss	___wmul@multiplier,0
  2913  094C  2951               	goto	l8779
  2914  094D  0826               	movf	___wmul@multiplicand,w
  2915  094E  07A8               	addwf	___wmul@product,f
  2916  094F  0827               	movf	___wmul@multiplicand+1,w
  2917  0950  3DA9               	addwfc	___wmul@product+1,f
  2918  0951                     l8779:	
  2919  0951  35A6               	lslf	___wmul@multiplicand,f
  2920  0952  0DA7               	rlf	___wmul@multiplicand+1,f
  2921  0953  36A5               	lsrf	___wmul@multiplier+1,f
  2922  0954  0CA4               	rrf	___wmul@multiplier,f
  2923  0955  0824               	movf	___wmul@multiplier,w
  2924  0956  0425               	iorwf	___wmul@multiplier+1,w
  2925  0957  1D03               	btfss	3,2
  2926  0958  294B               	goto	l8775
  2927  0959  0829               	movf	___wmul@product+1,w
  2928  095A  00A5               	movwf	?___wmul+1
  2929  095B  0828               	movf	___wmul@product,w
  2930  095C  00A4               	movwf	?___wmul
  2931  095D  0008               	return
  2932  095E                     __end_of___wmul:	
  2933  095E                     __ptext27:	
  2934 ;; *************** function _BVH2_Appl_Layer *****************
  2935 ;; Defined at:
  2936 ;;		line 331 in file "../T_Link/BVH2_Appl_Layer.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  Sb3_Sum1        2   26[BANK3 ] short 
  2941 ;;  Sb3_Product1    2   15[BANK3 ] unsigned short 
  2942 ;;  Sb4_PI_sum      2   28[BANK3 ] short 
  2943 ;;  Sb2_Error       2   22[BANK3 ] short 
  2944 ;;  Sb2_Switch5     2   17[BANK3 ] unsigned short 
  2945 ;;  Sb2_Switch2     2    0        unsigned short 
  2946 ;;  Sb1_Logical_    1   25[BANK3 ] unsigned char 
  2947 ;;  Sb1_Logical_    1   24[BANK3 ] unsigned char 
  2948 ;;  Sb2_Logical_    1   21[BANK3 ] unsigned char 
  2949 ;;  Sb1_Logical_    1   20[BANK3 ] unsigned char 
  2950 ;;  Cb24_Reset      1   19[BANK3 ] unsigned char 
  2951 ;;  Sb1_Logical_    1    8[BANK3 ] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 1F/1
  2958 ;;		On exit  : 1F/2
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2961 ;;      Params:         0       0       0       0       0       0       0       0
  2962 ;;      Locals:         0       0       0       0      30       0       0       0
  2963 ;;      Temps:          0       6       0       0       0       0       0       0
  2964 ;;      Totals:         0       6       0       0      30       0       0       0
  2965 ;;Total ram usage:       36 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    4
  2968 ;; This function calls:
  2969 ;;		_Cb1_Current_An___High_node_fcn1
  2970 ;;		_Cb34_PWM_Detection_node_fcn1
  2971 ;;		_Cb44_Pic_etat_monitor_node_fcn1
  2972 ;;		_Cb56_UbatHandling_node_fcn2
  2973 ;;		___aldiv
  2974 ;;		___lmul
  2975 ;;		___wmul
  2976 ;; This function is called by:
  2977 ;;		_main
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           
  2982                           ;psect for function _BVH2_Appl_Layer
  2983  095E                     _BVH2_Appl_Layer:	
  2984                           
  2985                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;;BVH2_Appl_Layer.c: 335: static
      +                           UInt16 Cb19_Counter = 0;;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;;BVH2_Ap
      +                          pl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;;BVH2_Appl_Layer.c: 338: static UInt8 C
      +                          b24_RestartCounter = 0;;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;;BVH2_Appl
      +                          _Layer.c: 340: static UInt8 Cb9_StateCnt = 0;;BVH2_Appl_Layer.c: 342: static struct tag_
      +                          SIBFS_Current_Analysis_low_ SIBFS_Current_Analysis_low_b = {;BVH2_Appl_Layer.c: 343: 0 ,
  2986                           
  2987                           ;incstack = 0
  2988                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2989  095E  299D               	goto	l9175
  2990  095F                     l9115:	
  2991                           
  2992                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
  2993  095F  3000               	movlw	0
  2994  0960  0020               	movlb	0	; select bank0
  2995  0961  023F               	subwf	_Cb44_StateCnt+1,w
  2996  0962  3033               	movlw	51
  2997  0963                     L14:	
  2998  0963  1903               	skipnz
  2999  0964  023E               	subwf	_Cb44_StateCnt,w
  3000  0965  1C03               	skipc
  3001  0966  2971               	goto	l9123
  3002                           
  3003                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  3004  0967  0021               	movlb	1	; select bank1
  3005  0968  084B               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  3006  0969  39F8               	andlw	-8
  3007  096A  3805               	iorlw	5
  3008  096B  00CB               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  3009                           
  3010                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
  3011  096C  01C3               	clrf	_Cb44_oShutoff^(0+128)
  3012  096D                     l9121:	
  3013                           
  3014                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
  3015  096D  0020               	movlb	0	; select bank0
  3016  096E  01BE               	clrf	_Cb44_StateCnt
  3017  096F  01BF               	clrf	_Cb44_StateCnt+1
  3018                           
  3019                           ;BVH2_Appl_Layer.c: 422: }
  3020  0970  29B2               	goto	l9177
  3021  0971                     l9123:	
  3022                           
  3023                           ;BVH2_Appl_Layer.c: 423: else {;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1 ;
  3024  0971  083E               	movf	_Cb44_StateCnt,w
  3025  0972  3E01               	addlw	1
  3026  0973  00BE               	movwf	_Cb44_StateCnt
  3027  0974  3000               	movlw	0
  3028  0975  3D3F               	addwfc	_Cb44_StateCnt+1,w
  3029  0976  00BF               	movwf	_Cb44_StateCnt+1
  3030  0977  29B2               	goto	l9177
  3031  0978                     l9125:	
  3032                           
  3033                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
  3034  0978  2700  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  3035                           
  3036                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
  3037  097A  0C4B               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  3038  097B  27AD  3188         	fcall	PL60	;call to abstracted procedure
  3039  097D  1D03               	btfss	3,2
  3040  097E  2971               	goto	l9123
  3041  097F  29B2               	goto	l9177
  3042  0980                     l9131:	
  3043                           
  3044                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
  3045  0980  2700  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  3046                           
  3047                           ;BVH2_Appl_Layer.c: 445: break;
  3048  0982  29B2               	goto	l9177
  3049  0983                     l9133:	
  3050                           
  3051                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
  3052  0983  3000               	movlw	0
  3053  0984  0020               	movlb	0	; select bank0
  3054  0985  023F               	subwf	_Cb44_StateCnt+1,w
  3055  0986  3010               	movlw	16
  3056  0987  2963               	goto	L14
  3057  0988                     l9149:	
  3058                           
  3059                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
  3060  0988  084B               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  3061  0989  39F8               	andlw	-8
  3062  098A  3803               	iorlw	3
  3063  098B  00CB               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  3064                           
  3065                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
  3066  098C  01C3               	clrf	_Cb44_oShutoff^(0+128)
  3067                           
  3068                           ;BVH2_Appl_Layer.c: 484: }
  3069  098D  29B2               	goto	l9177
  3070  098E                     l9163:	
  3071                           
  3072                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
  3073  098E  084B               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  3074  098F  39F8               	andlw	-8
  3075  0990  3806               	iorlw	6
  3076  0991  299B               	goto	L15
  3077  0992                     l1360:	
  3078                           ;BVH2_Appl_Layer.c: 515: };BVH2_Appl_Layer.c: 516: default: {
  3079                           
  3080                           
  3081                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
  3082  0992  1ACB               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
  3083  0993  29B2               	goto	l9177
  3084                           
  3085                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
  3086  0994  16CB               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
  3087                           
  3088                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
  3089  0995  086F               	movf	_ui8_ResetMatlab^(0+128),w
  3090  0996  1903               	btfsc	3,2
  3091  0997  29B2               	goto	l9177
  3092                           
  3093                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
  3094  0998  084B               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  3095  0999  39F8               	andlw	-8
  3096  099A  3804               	iorlw	4
  3097  099B                     L15:	
  3098  099B  00CB               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  3099  099C  296D               	goto	l9121
  3100  099D                     l9175:	
  3101  099D  084B               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  3102  099E  3907               	andlw	7
  3103                           
  3104                           ; Switch size 1, requested type "space"
  3105                           ; Number of cases is 6, Range of values is 1 to 6
  3106                           ; switch strategies available:
  3107                           ; Name         Instructions Cycles
  3108                           ; simple_byte           19    10 (average)
  3109                           ; direct_byte           21     9 (fixed)
  3110                           ; jumptable            263     9 (fixed)
  3111                           ;	Chosen strategy is simple_byte
  3112  099F  3A01               	xorlw	1	; case 1
  3113  09A0  1903               	skipnz
  3114  09A1  298E               	goto	l9163
  3115  09A2  3A03               	xorlw	3	; case 2
  3116  09A3  1903               	skipnz
  3117  09A4  2988               	goto	l9149
  3118  09A5  3A01               	xorlw	1	; case 3
  3119  09A6  1903               	skipnz
  3120  09A7  2980               	goto	l9131
  3121  09A8  3A07               	xorlw	7	; case 4
  3122  09A9  1903               	skipnz
  3123  09AA  295F               	goto	l9115
  3124  09AB  3A01               	xorlw	1	; case 5
  3125  09AC  1903               	skipnz
  3126  09AD  2978               	goto	l9125
  3127  09AE  3A03               	xorlw	3	; case 6
  3128  09AF  1903               	skipnz
  3129  09B0  2983               	goto	l9133
  3130  09B1  2992               	goto	l1360
  3131  09B2                     l9177:	
  3132                           
  3133                           ;BVH2_Appl_Layer.c: 539: Cb34_idPWM = 50;
  3134  09B2  3032               	movlw	50
  3135  09B3  0020               	movlb	0	; select bank0
  3136  09B4  00CB               	movwf	_Cb34_idPWM
  3137                           
  3138                           ;BVH2_Appl_Layer.c: 544: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
  3139  09B5  0021               	movlb	1	; select bank1
  3140  09B6  1A4C               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
  3141  09B7  29BD               	goto	l9201
  3142  09B8  29CB               	goto	l1363
  3143  09B9                     l9183:	
  3144                           
  3145                           ;BVH2_Appl_Layer.c: 550: Cb34_PWM_Detection_node_fcn1();
  3146  09B9  3185  25FC  3188   	fcall	_Cb34_PWM_Detection_node_fcn1
  3147                           
  3148                           ;BVH2_Appl_Layer.c: 553: break;
  3149  09BC  29D5               	goto	l9217
  3150  09BD                     l9201:	
  3151  09BD  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  3152  09BE  390F               	andlw	15
  3153                           
  3154                           ; Switch size 1, requested type "space"
  3155                           ; Number of cases is 8, Range of values is 1 to 8
  3156                           ; switch strategies available:
  3157                           ; Name         Instructions Cycles
  3158                           ; direct_byte           25     9 (fixed)
  3159                           ; simple_byte           25    13 (average)
  3160                           ; jumptable            263     9 (fixed)
  3161                           ;	Chosen strategy is direct_byte
  3162  09BF  3EFF               	addlw	-1
  3163  09C0  1C03               	skipc
  3164  09C1  29D5               	goto	l9217
  3165  09C2  0084               	movwf	4
  3166  09C3  3008               	movlw	8
  3167  09C4  0204               	subwf	4,w
  3168  09C5  1803               	skipnc
  3169  09C6  29D5               	goto	l9217
  3170  09C7  3187               	movlp	high S10087
  3171  09C8  3504               	lslf	4,w
  3172  09C9  3E76               	addlw	low S10087
  3173  09CA  0082               	movwf	2
  3174  09CB                     l1363:	
  3175                           
  3176                           ;BVH2_Appl_Layer.c: 616: else {;BVH2_Appl_Layer.c: 617: SIBFS_PWM_Detection_b.Cb35_PWMin
      +                          put_handling = 1;
  3177  09CB  164C               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
  3178                           
  3179                           ;BVH2_Appl_Layer.c: 620: if (ui8_ResetMatlab == 1) {
  3180  09CC  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  3181  09CD  29CF               	goto	u7111
  3182  09CE  29D0               	goto	l9205
  3183  09CF                     u7111:	
  3184  09CF  29D5               	goto	l9217
  3185  09D0                     l9205:	
  3186                           
  3187                           ;BVH2_Appl_Layer.c: 622: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
  3188                           
  3189                           ;BVH2_Appl_Layer.c: 623: Cb34_odPumpOff = 1;
  3190                           
  3191                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedValueSel = 0;
  3192                           
  3193                           ;BVH2_Appl_Layer.c: 625: Cb34_odFixedLowValueSel = 0;
  3194  09D0  3186  2675  3188   	fcall	PL44	;call to abstracted procedure
  3195                           
  3196                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_SC_Alarm = 0;
  3197  09D3  01C7               	clrf	_Cb34_oPWM_SC_Alarm^(0+128)
  3198                           
  3199                           ;BVH2_Appl_Layer.c: 627: Cb34_oPWM_Alarm = 0;
  3200  09D4  01C8               	clrf	_Cb34_oPWM_Alarm^(0+128)
  3201  09D5                     l9217:	
  3202                           
  3203                           ;BVH2_Appl_Layer.c: 628: };BVH2_Appl_Layer.c: 629: };BVH2_Appl_Layer.c: 634: bool_PWMin_
      +                          Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
  3204  09D5  0021               	movlb	1	; select bank1
  3205  09D6  0847               	movf	_Cb34_oPWM_SC_Alarm^(0+128),w
  3206  09D7  00D8               	movwf	_bool_PWMin_Freq_err_Alarm^(0+128)
  3207                           
  3208                           ;BVH2_Appl_Layer.c: 639: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
  3209  09D8  0020               	movlb	0	; select bank0
  3210  09D9  1DCC               	btfss	_SIBFS_UbatHandling_b,3
  3211  09DA  29FC               	goto	l1376
  3212                           
  3213                           ;BVH2_Appl_Layer.c: 643: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
  3214  09DB  1E4C               	btfss	_SIBFS_UbatHandling_b,4
  3215  09DC  29E9               	goto	l1377
  3216                           
  3217                           ;BVH2_Appl_Layer.c: 645: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
  3218  09DD  084C               	movf	_SIBFS_UbatHandling_b,w
  3219  09DE  39F8               	andlw	-8
  3220  09DF  3802               	iorlw	2
  3221  09E0  00CC               	movwf	_SIBFS_UbatHandling_b
  3222                           
  3223                           ;BVH2_Appl_Layer.c: 648: if (((UInt8)ui8_BattVolt_mat) < 139) {
  3224  09E1  308B               	movlw	139
  3225  09E2  0021               	movlb	1	; select bank1
  3226  09E3  022C               	subwf	_ui8_BattVolt_mat^(0+128),w
  3227  09E4  1803               	skipnc
  3228  09E5  2A02               	goto	l1384
  3229  09E6                     l9227:	
  3230                           
  3231                           ;BVH2_Appl_Layer.c: 649: Cb56_UbatHandling_node_fcn2();
  3232  09E6  27C1  3188         	fcall	_Cb56_UbatHandling_node_fcn2
  3233  09E8  2A02               	goto	l1384
  3234  09E9                     l1377:	
  3235                           
  3236                           ;BVH2_Appl_Layer.c: 654: else {;BVH2_Appl_Layer.c: 656: if (SIBFS_UbatHandling_b.Cb59_Sa
      +                          turationLow) {
  3237  09E9  1ECC               	btfss	_SIBFS_UbatHandling_b,5
  3238  09EA  29F5               	goto	l1380
  3239                           
  3240                           ;BVH2_Appl_Layer.c: 658: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
  3241  09EB  084C               	movf	_SIBFS_UbatHandling_b,w
  3242  09EC  39F8               	andlw	-8
  3243  09ED  3803               	iorlw	3
  3244  09EE  00CC               	movwf	_SIBFS_UbatHandling_b
  3245                           
  3246                           ;BVH2_Appl_Layer.c: 661: if (((UInt8)ui8_BattVolt_mat) > 49) {
  3247  09EF  3032               	movlw	50
  3248  09F0  0021               	movlb	1	; select bank1
  3249  09F1  022C               	subwf	_ui8_BattVolt_mat^(0+128),w
  3250  09F2  1803               	btfsc	3,0
  3251  09F3  29E6               	goto	l9227
  3252  09F4  2A02               	goto	l1384
  3253  09F5                     l1380:	
  3254                           
  3255                           ;BVH2_Appl_Layer.c: 667: else {;BVH2_Appl_Layer.c: 669: if (SIBFS_UbatHandling_b.Cb60_No
      +                          rmalUbat) {
  3256  09F5  1F4C               	btfss	_SIBFS_UbatHandling_b,6
  3257  09F6  2A02               	goto	l1384
  3258                           
  3259                           ;BVH2_Appl_Layer.c: 671: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
  3260  09F7  084C               	movf	_SIBFS_UbatHandling_b,w
  3261  09F8  39F8               	andlw	-8
  3262  09F9  3801               	iorlw	1
  3263  09FA  00CC               	movwf	_SIBFS_UbatHandling_b
  3264  09FB  29E6               	goto	l9227
  3265  09FC                     l1376:	
  3266                           
  3267                           ;BVH2_Appl_Layer.c: 681: else {;BVH2_Appl_Layer.c: 682: SIBFS_UbatHandling_b.Cb57_Ubat_H
      +                          andling = 1;
  3268  09FC  15CC               	bsf	_SIBFS_UbatHandling_b,3
  3269                           
  3270                           ;BVH2_Appl_Layer.c: 685: if (ui8_ResetMatlab == 1) {
  3271  09FD  0021               	movlb	1	; select bank1
  3272  09FE  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  3273  09FF  2A02               	goto	l1384
  3274                           
  3275                           ;BVH2_Appl_Layer.c: 687: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
  3276                           
  3277                           ;BVH2_Appl_Layer.c: 688: Cb56_odPumpOff = 0;
  3278                           
  3279                           ;BVH2_Appl_Layer.c: 689: Cb56_odFixedValueSel = 0;
  3280                           
  3281                           ;BVH2_Appl_Layer.c: 690: Cb56_oUbat_Alarm_High = 0;
  3282  0A00  27F9  3188         	fcall	PL56	;call to abstracted procedure
  3283  0A02                     l1384:	
  3284                           
  3285                           ;BVH2_Appl_Layer.c: 691: };BVH2_Appl_Layer.c: 692: };BVH2_Appl_Layer.c: 695: Sb1_Logical
      +                          _Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueSel));
  3286  0A02  0023               	movlb	3	; select bank3
  3287  0A03  01CD               	clrf	_BVH2_Appl_Layer$1034^(0+384)
  3288  0A04  0021               	movlb	1	; select bank1
  3289  0A05  0844               	movf	_Cb34_odPumpOff^(0+128),w
  3290  0A06  1903               	btfsc	3,2
  3291  0A07  2A0E               	goto	l9251
  3292  0A08  0841               	movf	_Cb56_odFixedValueSel^(0+128),w
  3293  0A09  1D03               	btfss	3,2
  3294  0A0A  2A0E               	goto	l9251
  3295  0A0B  0023               	movlb	3	; select bank3
  3296  0A0C  01CD               	clrf	_BVH2_Appl_Layer$1034^(0+384)
  3297  0A0D  0ACD               	incf	_BVH2_Appl_Layer$1034^(0+384),f
  3298  0A0E                     l9251:	
  3299  0A0E  0023               	movlb	3	; select bank3
  3300  0A0F  084D               	movf	_BVH2_Appl_Layer$1034^(0+384),w
  3301  0A10  00CC               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+384)
  3302                           
  3303                           ;BVH2_Appl_Layer.c: 700: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
  3304  0A11  0021               	movlb	1	; select bank1
  3305  0A12  1CBA               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  3306  0A13  2A22               	goto	l1388
  3307                           
  3308                           ;BVH2_Appl_Layer.c: 702: if (Cb51_Counter > 80) {
  3309  0A14  3051               	movlw	81
  3310  0A15  023E               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+128),w
  3311  0A16  1C03               	skipc
  3312  0A17  2A20               	goto	l9261
  3313                           
  3314                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
  3315  0A18  10BA               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  3316  0A19                     L16:	
  3317                           
  3318                           ;BVH2_Appl_Layer.c: 706: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  3319  0A19  15BA               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  3320                           
  3321                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempRedAlarm = 0;
  3322  0A1A  0022               	movlb	2	; select bank2
  3323  0A1B  01DB               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  3324                           
  3325                           ;BVH2_Appl_Layer.c: 708: Cb51_oTempAlarm = 0;
  3326  0A1C  01DC               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  3327                           
  3328                           ;BVH2_Appl_Layer.c: 709: Cb51_odPumpOff = 0;
  3329  0A1D  01DA               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  3330                           
  3331                           ;BVH2_Appl_Layer.c: 710: Cb51_Counter = 0 ;
  3332  0A1E  0021               	movlb	1	; select bank1
  3333  0A1F  2A4F               	goto	l9283
  3334  0A20                     l9261:	
  3335                           ;BVH2_Appl_Layer.c: 711: }
  3336                           
  3337                           
  3338                           ;BVH2_Appl_Layer.c: 712: else {;BVH2_Appl_Layer.c: 713: Cb51_Counter = Cb51_Counter + 1 
      +                          ;
  3339  0A20  0ABE               	incf	BVH2_Appl_Layer@Cb51_Counter^(0+128),f
  3340                           
  3341                           ;BVH2_Appl_Layer.c: 714: };BVH2_Appl_Layer.c: 717: }
  3342  0A21  2AC1               	goto	l9373
  3343  0A22                     l1388:	
  3344                           
  3345                           ;BVH2_Appl_Layer.c: 718: else {;BVH2_Appl_Layer.c: 720: if (SIBFS_Temperature_Alarm_b.Cb
      +                          53_reset) {
  3346  0A22  1D3A               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  3347  0A23  2A27               	goto	l1392
  3348                           
  3349                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
  3350  0A24  113A               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  3351                           
  3352                           ;BVH2_Appl_Layer.c: 726: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
  3353  0A25  14BA               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  3354                           
  3355                           ;BVH2_Appl_Layer.c: 729: }
  3356  0A26  2AC1               	goto	l9373
  3357  0A27                     l1392:	
  3358                           
  3359                           ;BVH2_Appl_Layer.c: 730: else {;BVH2_Appl_Layer.c: 732: if (SIBFS_Temperature_Alarm_b.Cb
      +                          54_greenTemp) {
  3360  0A27  1DBA               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  3361  0A28  2A3B               	goto	l1394
  3362                           
  3363                           ;BVH2_Appl_Layer.c: 736: if (ui16_mat_inpTemp < 72) {
  3364  0A29  3000               	movlw	0
  3365  0A2A  0022               	movlb	2	; select bank2
  3366  0A2B  0230               	subwf	(_ui16_mat_inpTemp+1)^(0+256),w
  3367  0A2C  3048               	movlw	72
  3368  0A2D  1903               	skipnz
  3369  0A2E  022F               	subwf	_ui16_mat_inpTemp^(0+256),w
  3370  0A2F  1803               	skipnc
  3371  0A30  2AC1               	goto	l9373
  3372                           
  3373                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
  3374  0A31  0021               	movlb	1	; select bank1
  3375  0A32  11BA               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  3376                           
  3377                           ;BVH2_Appl_Layer.c: 740: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
  3378  0A33  163A               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  3379                           
  3380                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempRedAlarm = 1;
  3381  0A34  0022               	movlb	2	; select bank2
  3382  0A35  01DB               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  3383  0A36  0ADB               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
  3384                           
  3385                           ;BVH2_Appl_Layer.c: 742: Cb51_oTempAlarm = 1;
  3386  0A37  01DC               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  3387  0A38  0ADC               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
  3388                           
  3389                           ;BVH2_Appl_Layer.c: 745: Cb51_odPumpOff = 0;
  3390  0A39  01DA               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  3391  0A3A  2AC1               	goto	l9373
  3392  0A3B                     l1394:	
  3393                           
  3394                           ;BVH2_Appl_Layer.c: 750: else {;BVH2_Appl_Layer.c: 752: if (SIBFS_Temperature_Alarm_b.Cb
      +                          55_redTemp) {
  3395  0A3B  1E3A               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  3396  0A3C  2A48               	goto	l1397
  3397                           
  3398                           ;BVH2_Appl_Layer.c: 756: if (ui16_mat_inpTemp > 185) {
  3399  0A3D  3000               	movlw	0
  3400  0A3E  0022               	movlb	2	; select bank2
  3401  0A3F  0230               	subwf	(_ui16_mat_inpTemp+1)^(0+256),w
  3402  0A40  30BA               	movlw	186
  3403  0A41  1903               	skipnz
  3404  0A42  022F               	subwf	_ui16_mat_inpTemp^(0+256),w
  3405  0A43  1C03               	skipc
  3406  0A44  2AC1               	goto	l9373
  3407                           
  3408                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
  3409  0A45  0021               	movlb	1	; select bank1
  3410  0A46  123A               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  3411  0A47  2A19               	goto	L16
  3412  0A48                     l1397:	
  3413                           ;BVH2_Appl_Layer.c: 760: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  3414                           
  3415                           
  3416                           ;BVH2_Appl_Layer.c: 769: else {;BVH2_Appl_Layer.c: 771: if (!(SIBFS_Temperature_Alarm_b.
      +                          Cb51_Temperature_Alarm)) {
  3417  0A48  183A               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  3418  0A49  2AC1               	goto	l9373
  3419                           
  3420                           ;BVH2_Appl_Layer.c: 772: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
  3421  0A4A  143A               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  3422                           
  3423                           ;BVH2_Appl_Layer.c: 776: if (ui8_ResetMatlab != 0) {
  3424  0A4B  086F               	movf	_ui8_ResetMatlab^(0+128),w
  3425  0A4C  1903               	btfsc	3,2
  3426  0A4D  2AC1               	goto	l9373
  3427                           
  3428                           ;BVH2_Appl_Layer.c: 778: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
  3429  0A4E  153A               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  3430  0A4F                     l9283:	
  3431                           
  3432                           ;BVH2_Appl_Layer.c: 779: Cb51_Counter = 0 ;
  3433  0A4F  01BE               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+128)
  3434  0A50  2AC1               	goto	l9373
  3435  0A51                     l9285:	
  3436                           
  3437                           ;BVH2_Appl_Layer.c: 793: if (Cb1_StateCnt > 50) {
  3438  0A51  3000               	movlw	0
  3439  0A52  0020               	movlb	0	; select bank0
  3440  0A53  0241               	subwf	_Cb1_StateCnt+1,w
  3441  0A54  3033               	movlw	51
  3442  0A55  1903               	skipnz
  3443  0A56  0240               	subwf	_Cb1_StateCnt,w
  3444  0A57  1C03               	skipc
  3445  0A58  2A5E               	goto	l9295
  3446                           
  3447                           ;BVH2_Appl_Layer.c: 796: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 797: (UInt8)5;
  3448                           
  3449                           ;BVH2_Appl_Layer.c: 798: Cb1_oShutoff = 0;
  3450                           
  3451                           ;BVH2_Appl_Layer.c: 799: Cb1_oCurrentAlarm = 0;
  3452  0A59  279F  3188         	fcall	PL48	;call to abstracted procedure
  3453  0A5B                     l9293:	
  3454                           
  3455                           ;BVH2_Appl_Layer.c: 800: Cb1_RestartCounter = 0 ;
  3456  0A5B  0021               	movlb	1	; select bank1
  3457  0A5C  01CE               	clrf	_Cb1_RestartCounter^(0+128)
  3458                           
  3459                           ;BVH2_Appl_Layer.c: 801: }
  3460  0A5D  2ADA               	goto	l1406
  3461  0A5E                     l9295:	
  3462                           
  3463                           ;BVH2_Appl_Layer.c: 802: else {;BVH2_Appl_Layer.c: 803: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  3464  0A5E  0020               	movlb	0	; select bank0
  3465  0A5F  0840               	movf	_Cb1_StateCnt,w
  3466  0A60  3E01               	addlw	1
  3467  0A61  00C0               	movwf	_Cb1_StateCnt
  3468  0A62  3000               	movlw	0
  3469  0A63  3D41               	addwfc	_Cb1_StateCnt+1,w
  3470  0A64  00C1               	movwf	_Cb1_StateCnt+1
  3471  0A65  2ADA               	goto	l1406
  3472  0A66                     l9297:	
  3473                           
  3474                           ;BVH2_Appl_Layer.c: 811: Cb1_Current_An___High_node_fcn1();
  3475  0A66  26E3  3188         	fcall	_Cb1_Current_An___High_node_fcn1
  3476                           
  3477                           ;BVH2_Appl_Layer.c: 812: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
  3478  0A68  0E4D               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3479  0A69  3903               	andlw	3
  3480  0A6A  3A03               	xorlw	3
  3481  0A6B  1D03               	btfss	3,2
  3482  0A6C  2A5E               	goto	l9295
  3483  0A6D  2ADA               	goto	l1406
  3484  0A6E                     l9303:	
  3485                           
  3486                           ;BVH2_Appl_Layer.c: 821: if (Cb1_RestartCounter < 10) {
  3487  0A6E  300A               	movlw	10
  3488  0A6F  024E               	subwf	_Cb1_RestartCounter^(0+128),w
  3489  0A70  1803               	skipnc
  3490  0A71  2ADA               	goto	l1406
  3491  0A72                     l9305:	
  3492                           
  3493                           ;BVH2_Appl_Layer.c: 824: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 825: (UInt8)3;
  3494  0A72  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3495  0A73  39F0               	andlw	-16
  3496  0A74  3803               	iorlw	3
  3497  0A75  00CD               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  3498                           
  3499                           ;BVH2_Appl_Layer.c: 826: Cb1_oShutoff = 0;
  3500  0A76  01C9               	clrf	_Cb1_oShutoff^(0+128)
  3501                           
  3502                           ;BVH2_Appl_Layer.c: 827: Cb1_oCurrentAlarm = 1;
  3503  0A77  01CA               	clrf	_Cb1_oCurrentAlarm^(0+128)
  3504  0A78  0ACA               	incf	_Cb1_oCurrentAlarm^(0+128),f
  3505  0A79                     l9311:	
  3506                           
  3507                           ;BVH2_Appl_Layer.c: 828: Cb1_StateCnt = 0 ;
  3508  0A79  0020               	movlb	0	; select bank0
  3509  0A7A  01C0               	clrf	_Cb1_StateCnt
  3510  0A7B  01C1               	clrf	_Cb1_StateCnt+1
  3511  0A7C  2ADA               	goto	l1406
  3512  0A7D                     l9313:	
  3513                           
  3514                           ;BVH2_Appl_Layer.c: 836: Cb1_Current_An___High_node_fcn1();
  3515  0A7D  26E3  3188         	fcall	_Cb1_Current_An___High_node_fcn1
  3516                           
  3517                           ;BVH2_Appl_Layer.c: 839: break;
  3518  0A7F  2ADA               	goto	l1406
  3519  0A80                     l9315:	
  3520                           
  3521                           ;BVH2_Appl_Layer.c: 843: if (Cb1_StateCnt > 200) {
  3522  0A80  3000               	movlw	0
  3523  0A81  0020               	movlb	0	; select bank0
  3524  0A82  0241               	subwf	_Cb1_StateCnt+1,w
  3525  0A83  30C9               	movlw	201
  3526  0A84  1903               	skipnz
  3527  0A85  0240               	subwf	_Cb1_StateCnt,w
  3528  0A86  1C03               	skipc
  3529  0A87  2A8F               	goto	l9321
  3530                           
  3531                           ;BVH2_Appl_Layer.c: 845: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 846: (UInt8)7;
  3532  0A88  0021               	movlb	1	; select bank1
  3533  0A89  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3534  0A8A  39F0               	andlw	-16
  3535  0A8B  3807               	iorlw	7
  3536  0A8C  00CD               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  3537                           
  3538                           ;BVH2_Appl_Layer.c: 847: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
  3539  0A8D  0ACE               	incf	_Cb1_RestartCounter^(0+128),f
  3540                           
  3541                           ;BVH2_Appl_Layer.c: 848: }
  3542  0A8E  2ADA               	goto	l1406
  3543  0A8F                     l9321:	
  3544                           
  3545                           ;BVH2_Appl_Layer.c: 849: else {;BVH2_Appl_Layer.c: 852: if (bool_mat_currAlarm_bldc) {
  3546  0A8F  0021               	movlb	1	; select bank1
  3547  0A90  085D               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  3548  0A91  1903               	btfsc	3,2
  3549  0A92  2A5E               	goto	l9295
  3550  0A93                     l9323:	
  3551                           
  3552                           ;BVH2_Appl_Layer.c: 854: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 855: (UInt8)1;
  3553  0A93  0021               	movlb	1	; select bank1
  3554  0A94  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3555  0A95  39F0               	andlw	-16
  3556  0A96  3801               	iorlw	1
  3557  0A97  00CD               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  3558                           
  3559                           ;BVH2_Appl_Layer.c: 856: Cb1_StateCnt = 0 ;
  3560  0A98  0020               	movlb	0	; select bank0
  3561  0A99  01C0               	clrf	_Cb1_StateCnt
  3562  0A9A  01C1               	clrf	_Cb1_StateCnt+1
  3563                           
  3564                           ;BVH2_Appl_Layer.c: 857: Cb1_oShutoff = 1;
  3565  0A9B  0021               	movlb	1	; select bank1
  3566  0A9C  01C9               	clrf	_Cb1_oShutoff^(0+128)
  3567  0A9D  0AC9               	incf	_Cb1_oShutoff^(0+128),f
  3568                           
  3569                           ;BVH2_Appl_Layer.c: 858: Cb1_oCurrentAlarm = 1;
  3570  0A9E  01CA               	clrf	_Cb1_oCurrentAlarm^(0+128)
  3571  0A9F  0ACA               	incf	_Cb1_oCurrentAlarm^(0+128),f
  3572                           
  3573                           ;BVH2_Appl_Layer.c: 859: }
  3574  0AA0  2ADA               	goto	l1406
  3575  0AA1                     l9333:	
  3576                           
  3577                           ;BVH2_Appl_Layer.c: 873: if (!(bool_mat_currAlarm_bldc)) {
  3578  0AA1  085D               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  3579  0AA2  1903               	btfsc	3,2
  3580  0AA3  2A72               	goto	l9305
  3581                           
  3582                           ;BVH2_Appl_Layer.c: 881: else {;BVH2_Appl_Layer.c: 882: if (Cb1_StateCnt > 1) {
  3583  0AA4  3000               	movlw	0
  3584  0AA5  0020               	movlb	0	; select bank0
  3585  0AA6  0241               	subwf	_Cb1_StateCnt+1,w
  3586  0AA7  3002               	movlw	2
  3587  0AA8  1903               	skipnz
  3588  0AA9  0240               	subwf	_Cb1_StateCnt,w
  3589  0AAA  1803               	btfsc	3,0
  3590  0AAB  2A93               	goto	l9323
  3591  0AAC  2A5E               	goto	l9295
  3592  0AAD                     l9355:	
  3593                           
  3594                           ;BVH2_Appl_Layer.c: 903: if (!(bool_mat_currAlarm_bldc)) {
  3595  0AAD  085D               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  3596  0AAE  1D03               	btfss	3,2
  3597  0AAF  2A5E               	goto	l9295
  3598                           
  3599                           ;BVH2_Appl_Layer.c: 906: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
  3600  0AB0  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3601  0AB1  39F0               	andlw	-16
  3602  0AB2  3804               	iorlw	4
  3603  0AB3  00CD               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  3604  0AB4  2A79               	goto	l9311
  3605  0AB5                     l1425:	
  3606                           ;BVH2_Appl_Layer.c: 915: };BVH2_Appl_Layer.c: 916: default: {
  3607                           
  3608                           
  3609                           ;BVH2_Appl_Layer.c: 918: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
  3610  0AB5  1B4D               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
  3611  0AB6  2ADA               	goto	l1406
  3612                           
  3613                           ;BVH2_Appl_Layer.c: 919: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
  3614  0AB7  174D               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
  3615                           
  3616                           ;BVH2_Appl_Layer.c: 923: if (ui8_ResetMatlab != 0) {
  3617  0AB8  086F               	movf	_ui8_ResetMatlab^(0+128),w
  3618  0AB9  1903               	btfsc	3,2
  3619  0ABA  2ADA               	goto	l1406
  3620                           
  3621                           ;BVH2_Appl_Layer.c: 925: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 926: (UInt8)6;
  3622  0ABB  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3623  0ABC  39F0               	andlw	-16
  3624  0ABD  3806               	iorlw	6
  3625                           
  3626                           ;BVH2_Appl_Layer.c: 927: Cb1_StateCnt = 0 ;
  3627  0ABE  27BC  3188         	fcall	PL82	;call to abstracted procedure
  3628  0AC0  2A5B               	goto	l9293
  3629  0AC1                     l9373:	
  3630  0AC1  0021               	movlb	1	; select bank1
  3631  0AC2  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3632  0AC3  390F               	andlw	15
  3633                           
  3634                           ; Switch size 1, requested type "space"
  3635                           ; Number of cases is 7, Range of values is 1 to 7
  3636                           ; switch strategies available:
  3637                           ; Name         Instructions Cycles
  3638                           ; simple_byte           22    12 (average)
  3639                           ; direct_byte           23     9 (fixed)
  3640                           ; jumptable            263     9 (fixed)
  3641                           ;	Chosen strategy is simple_byte
  3642  0AC4  3A01               	xorlw	1	; case 1
  3643  0AC5  1903               	skipnz
  3644  0AC6  2AAD               	goto	l9355
  3645  0AC7  3A03               	xorlw	3	; case 2
  3646  0AC8  1903               	skipnz
  3647  0AC9  2AA1               	goto	l9333
  3648  0ACA  3A01               	xorlw	1	; case 3
  3649  0ACB  1903               	skipnz
  3650  0ACC  2A66               	goto	l9297
  3651  0ACD  3A07               	xorlw	7	; case 4
  3652  0ACE  1903               	skipnz
  3653  0ACF  2A80               	goto	l9315
  3654  0AD0  3A01               	xorlw	1	; case 5
  3655  0AD1  1903               	skipnz
  3656  0AD2  2A7D               	goto	l9313
  3657  0AD3  3A03               	xorlw	3	; case 6
  3658  0AD4  1903               	skipnz
  3659  0AD5  2A51               	goto	l9285
  3660  0AD6  3A01               	xorlw	1	; case 7
  3661  0AD7  1903               	skipnz
  3662  0AD8  2A6E               	goto	l9303
  3663  0AD9  2AB5               	goto	l1425
  3664  0ADA                     l1406:	
  3665                           
  3666                           ;BVH2_Appl_Layer.c: 935: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||;BVH2_Appl_Layer.c: 936: Cb1_oShutoff || Cb44_oShutoff;
  3667  0ADA  0023               	movlb	3	; select bank3
  3668  0ADB  01CE               	clrf	_BVH2_Appl_Layer$1035^(0+384)
  3669  0ADC  0ACE               	incf	_BVH2_Appl_Layer$1035^(0+384),f
  3670  0ADD  084C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+384),w
  3671  0ADE  1D03               	btfss	3,2
  3672  0ADF  2AF1               	goto	l9387
  3673  0AE0  0021               	movlb	1	; select bank1
  3674  0AE1  0840               	movf	_Cb56_odPumpOff^(0+128),w
  3675  0AE2  1D03               	btfss	3,2
  3676  0AE3  2AF1               	goto	l9387
  3677  0AE4  0022               	movlb	2	; select bank2
  3678  0AE5  085A               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
  3679  0AE6  1D03               	btfss	3,2
  3680  0AE7  2AF1               	goto	l9387
  3681  0AE8  0021               	movlb	1	; select bank1
  3682  0AE9  0849               	movf	_Cb1_oShutoff^(0+128),w
  3683  0AEA  1D03               	btfss	3,2
  3684  0AEB  2AF1               	goto	l9387
  3685  0AEC  0843               	movf	_Cb44_oShutoff^(0+128),w
  3686  0AED  1D03               	btfss	3,2
  3687  0AEE  2AF1               	goto	l9387
  3688  0AEF  0023               	movlb	3	; select bank3
  3689  0AF0  01CE               	clrf	_BVH2_Appl_Layer$1035^(0+384)
  3690  0AF1                     l9387:	
  3691  0AF1  0023               	movlb	3	; select bank3
  3692  0AF2  084E               	movf	_BVH2_Appl_Layer$1035^(0+384),w
  3693  0AF3  00DC               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+384)
  3694                           
  3695                           ;BVH2_Appl_Layer.c: 939: Cb24_Reset = ui8_ResetMatlab != 0 ;
  3696  0AF4  0021               	movlb	1	; select bank1
  3697  0AF5  086F               	movf	_ui8_ResetMatlab^(0+128),w
  3698  0AF6  1903               	btfsc	3,2
  3699  0AF7  2AFA               	goto	u7450
  3700  0AF8  3001               	movlw	1
  3701  0AF9  2AFB               	goto	u7460
  3702  0AFA                     u7450:	
  3703  0AFA  3000               	movlw	0
  3704  0AFB                     u7460:	
  3705  0AFB  0023               	movlb	3	; select bank3
  3706  0AFC  00D7               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+384)
  3707                           
  3708                           ;BVH2_Appl_Layer.c: 944: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
  3709  0AFD  0021               	movlb	1	; select bank1
  3710  0AFE  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  3711  0AFF  2BFA               	goto	l1430
  3712                           
  3713                           ;BVH2_Appl_Layer.c: 950: if (Sb1_Logical_Operator1 || Cb24_Reset) {
  3714  0B00  0023               	movlb	3	; select bank3
  3715  0B01  085C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+384),w
  3716  0B02  1D03               	btfss	3,2
  3717  0B03  2B0F               	goto	l9413
  3718  0B04  0857               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+384),w
  3719  0B05  1D03               	btfss	3,2
  3720  0B06  2B0F               	goto	l9413
  3721  0B07  2BE3               	goto	l9531
  3722  0B08                     l9397:	
  3723                           
  3724                           ;BVH2_Appl_Layer.c: 955: Cb24_StateCnt = 0 ;
  3725  0B08  0020               	movlb	0	; select bank0
  3726  0B09  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  3727  0B0A  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3728  0B0B                     l9399:	
  3729                           
  3730                           ;BVH2_Appl_Layer.c: 956: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  3731  0B0B  30F8               	movlw	-8
  3732  0B0C  0021               	movlb	1	; select bank1
  3733  0B0D  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  3734                           
  3735                           ;BVH2_Appl_Layer.c: 957: break;
  3736  0B0E  2B25               	goto	l1436
  3737  0B0F                     l9413:	
  3738  0B0F  0021               	movlb	1	; select bank1
  3739  0B10  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3740  0B11  3907               	andlw	7
  3741                           
  3742                           ; Switch size 1, requested type "space"
  3743                           ; Number of cases is 6, Range of values is 1 to 6
  3744                           ; switch strategies available:
  3745                           ; Name         Instructions Cycles
  3746                           ; simple_byte           19    10 (average)
  3747                           ; direct_byte           21     9 (fixed)
  3748                           ; jumptable            263     9 (fixed)
  3749                           ;	Chosen strategy is simple_byte
  3750  0B12  3A01               	xorlw	1	; case 1
  3751  0B13  1903               	skipnz
  3752  0B14  2B0B               	goto	l9399
  3753  0B15  3A03               	xorlw	3	; case 2
  3754  0B16  1903               	skipnz
  3755  0B17  2B0B               	goto	l9399
  3756  0B18  3A01               	xorlw	1	; case 3
  3757  0B19  1903               	skipnz
  3758  0B1A  2B08               	goto	l9397
  3759  0B1B  3A07               	xorlw	7	; case 4
  3760  0B1C  1903               	skipnz
  3761  0B1D  2B0B               	goto	l9399
  3762  0B1E  3A01               	xorlw	1	; case 5
  3763  0B1F  1903               	skipnz
  3764  0B20  2B0B               	goto	l9399
  3765  0B21  3A03               	xorlw	3	; case 6
  3766  0B22  1903               	skipnz
  3767  0B23  2B0B               	goto	l9399
  3768  0B24  2B25               	goto	l1436
  3769  0B25                     l1436:	
  3770                           
  3771                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  3772  0B25  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  3773  0B26  2C17               	goto	L27
  3774  0B27                     l9417:	
  3775                           ;BVH2_Appl_Layer.c: 985: }
  3776                           
  3777                           ;BVH2_Appl_Layer.c: 981: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  3778                           
  3779                           
  3780                           ;BVH2_Appl_Layer.c: 991: if (Cb24_StateCnt) {
  3781  0B27  0020               	movlb	0	; select bank0
  3782  0B28  083C               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3783  0B29  043D               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3784  0B2A  1903               	btfsc	3,2
  3785  0B2B  2B7B               	goto	L18
  3786                           
  3787                           ;BVH2_Appl_Layer.c: 995: Cb24_StateCnt = 0 ;
  3788  0B2C  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  3789  0B2D  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3790  0B2E                     l9421:	
  3791                           
  3792                           ;BVH2_Appl_Layer.c: 996: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int);BVH2_Appl_Layer.c: 997: (UInt8)2;
  3793  0B2E  0021               	movlb	1	; select bank1
  3794  0B2F  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3795  0B30  39F8               	andlw	-8
  3796  0B31  3802               	iorlw	2
  3797  0B32  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  3798                           
  3799                           ;BVH2_Appl_Layer.c: 998: }
  3800  0B33  2C1D               	goto	l9553
  3801  0B34                     l9425:	
  3802                           ;BVH2_Appl_Layer.c: 999: else {;BVH2_Appl_Layer.c: 1000: Cb24_StateCnt = Cb24_StateCnt +
      +                           1 ;
  3803                           
  3804                           
  3805                           ;BVH2_Appl_Layer.c: 1010: if (Cb24_StateCnt > 1000) {
  3806  0B34  3003               	movlw	3
  3807  0B35  0020               	movlb	0	; select bank0
  3808  0B36  023D               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3809  0B37  30E9               	movlw	233
  3810  0B38  1903               	skipnz
  3811  0B39  023C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3812  0B3A  1C03               	skipc
  3813  0B3B  2B40               	goto	l9437
  3814                           
  3815                           ;BVH2_Appl_Layer.c: 1013: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1014: (UInt8)5;
  3816                           
  3817                           ;BVH2_Appl_Layer.c: 1015: Cb24_StateCnt = 0 ;
  3818                           
  3819                           ;BVH2_Appl_Layer.c: 1016: Cb24_BadCnt = 0 ;
  3820                           
  3821                           ;BVH2_Appl_Layer.c: 1017: Cb24_oMotorStalled = 0;
  3822                           
  3823                           ;BVH2_Appl_Layer.c: 1020: Cb24_oStalledAlarm = 0;
  3824  0B3C  277A  3188         	fcall	PL30	;call to abstracted procedure
  3825  0B3E  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3826                           
  3827                           ;BVH2_Appl_Layer.c: 1021: }
  3828  0B3F  2C1D               	goto	l9553
  3829  0B40                     l9437:	
  3830                           
  3831                           ;BVH2_Appl_Layer.c: 1022: else {;BVH2_Appl_Layer.c: 1025: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  3832  0B40  3000               	movlw	0
  3833  0B41  0243               	subwf	_ui16_Speed_mat+1,w
  3834  0B42  3005               	movlw	5
  3835  0B43  1903               	skipnz
  3836  0B44  0242               	subwf	_ui16_Speed_mat,w
  3837  0B45  1C03               	skipc
  3838  0B46  2B4E               	goto	l9441
  3839  0B47  3001               	movlw	1
  3840  0B48  0243               	subwf	_ui16_Speed_mat+1,w
  3841  0B49  302D               	movlw	45
  3842  0B4A  1903               	skipnz
  3843  0B4B  0242               	subwf	_ui16_Speed_mat,w
  3844  0B4C  1C03               	skipc
  3845  0B4D  2B7B               	goto	L18
  3846  0B4E                     l9441:	
  3847                           
  3848                           ;BVH2_Appl_Layer.c: 1028: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1029: (UInt8)1;
  3849  0B4E  0021               	movlb	1	; select bank1
  3850  0B4F  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3851  0B50  39F8               	andlw	-8
  3852  0B51  3801               	iorlw	1
  3853  0B52  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  3854                           
  3855                           ;BVH2_Appl_Layer.c: 1030: Cb24_oStalledAlarm = 0;
  3856  0B53  0022               	movlb	2	; select bank2
  3857  0B54  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3858                           
  3859                           ;BVH2_Appl_Layer.c: 1031: Cb24_StateCnt = 0 ;
  3860  0B55  0020               	movlb	0	; select bank0
  3861  0B56  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  3862  0B57  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3863                           
  3864                           ;BVH2_Appl_Layer.c: 1032: }
  3865  0B58  2C1D               	goto	l9553
  3866  0B59                     l9449:	
  3867                           
  3868                           ;BVH2_Appl_Layer.c: 1045: if (Cb24_BadCnt > 100) {
  3869  0B59  3000               	movlw	0
  3870  0B5A  0022               	movlb	2	; select bank2
  3871  0B5B  0224               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256),w
  3872  0B5C  3065               	movlw	101
  3873  0B5D  1903               	skipnz
  3874  0B5E  0223               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256),w
  3875  0B5F  1C03               	skipc
  3876  0B60  2B66               	goto	l9459
  3877                           
  3878                           ;BVH2_Appl_Layer.c: 1048: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1049: (UInt8)4;
  3879                           
  3880                           ;BVH2_Appl_Layer.c: 1050: Cb24_StateCnt = 0 ;
  3881                           
  3882                           ;BVH2_Appl_Layer.c: 1051: Cb24_oMotorStalled = 1;
  3883                           
  3884                           ;BVH2_Appl_Layer.c: 1052: Cb24_oStalledAlarm = 1;
  3885  0B61  2789  3188         	fcall	PL32	;call to abstracted procedure
  3886  0B63  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3887  0B64  0ADD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  3888                           
  3889                           ;BVH2_Appl_Layer.c: 1053: }
  3890  0B65  2C1D               	goto	l9553
  3891  0B66                     l9459:	
  3892                           
  3893                           ;BVH2_Appl_Layer.c: 1054: else {;BVH2_Appl_Layer.c: 1057: if ((ui16_Speed_mat >= 5) && (
      +                          ui16_Speed_mat <= 300)) {
  3894  0B66  27B8  3188         	fcall	PL78	;call to abstracted procedure
  3895  0B68  1903               	skipnz
  3896  0B69  0242               	subwf	_ui16_Speed_mat,w
  3897  0B6A  1C03               	skipc
  3898  0B6B  2B73               	goto	l9465
  3899  0B6C  3001               	movlw	1
  3900  0B6D  0243               	subwf	_ui16_Speed_mat+1,w
  3901  0B6E  302D               	movlw	45
  3902  0B6F  1903               	skipnz
  3903  0B70  0242               	subwf	_ui16_Speed_mat,w
  3904  0B71  1C03               	btfss	3,0
  3905  0B72  2B2E               	goto	l9421
  3906  0B73                     l9465:	
  3907                           
  3908                           ;BVH2_Appl_Layer.c: 1063: else {;BVH2_Appl_Layer.c: 1064: Cb24_BadCnt = Cb24_BadCnt + 1 
      +                          ;
  3909  0B73  0022               	movlb	2	; select bank2
  3910  0B74  0823               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256),w
  3911  0B75  3E01               	addlw	1
  3912  0B76  00A3               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256)
  3913  0B77  3000               	movlw	0
  3914  0B78  3D24               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256),w
  3915  0B79  00A4               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256)
  3916                           
  3917                           ;BVH2_Appl_Layer.c: 1065: Cb24_StateCnt = Cb24_StateCnt + 1 ;
  3918  0B7A  0020               	movlb	0	; select bank0
  3919  0B7B                     L18:	
  3920  0B7B  083C               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3921  0B7C  3E01               	addlw	1
  3922  0B7D  00BC               	movwf	BVH2_Appl_Layer@Cb24_StateCnt
  3923  0B7E  3000               	movlw	0
  3924  0B7F  3D3D               	addwfc	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3925  0B80  00BD               	movwf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3926  0B81  2C1D               	goto	l9553
  3927  0B82                     l9469:	
  3928                           
  3929                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_StateCnt > 10) {
  3930  0B82  3000               	movlw	0
  3931  0B83  0020               	movlb	0	; select bank0
  3932  0B84  023D               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3933  0B85  300B               	movlw	11
  3934  0B86  1903               	skipnz
  3935  0B87  023C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3936  0B88  1C03               	skipc
  3937  0B89  2BC2               	goto	l9511
  3938                           
  3939                           ;BVH2_Appl_Layer.c: 1091: if (Cb24_RestartCounter == 10) {
  3940  0B8A  300A               	movlw	10
  3941  0B8B  0021               	movlb	1	; select bank1
  3942  0B8C  063F               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),w
  3943  0B8D  1D03               	btfss	3,2
  3944  0B8E  2B9B               	goto	l9483
  3945                           
  3946                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  3947  0B8F  30F8               	movlw	-8
  3948  0B90  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  3949                           
  3950                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  3951  0B91  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  3952                           
  3953                           ;BVH2_Appl_Layer.c: 1095: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
  3954  0B92  1421               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  3955                           
  3956                           ;BVH2_Appl_Layer.c: 1096: Cb24_oStalledAlarm = 1;
  3957  0B93  0022               	movlb	2	; select bank2
  3958  0B94  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3959  0B95  0ADD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  3960                           
  3961                           ;BVH2_Appl_Layer.c: 1097: Cb24_oMotorStalled = 1;
  3962  0B96  0021               	movlb	1	; select bank1
  3963  0B97  3018               	movlw	24
  3964  0B98  01B6               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  3965  0B99  0AB6               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  3966  0B9A  2BBA               	goto	L20
  3967  0B9B                     l9483:	
  3968                           ;BVH2_Appl_Layer.c: 1099: }
  3969                           
  3970                           ;BVH2_Appl_Layer.c: 1098: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  3971                           
  3972                           
  3973                           ;BVH2_Appl_Layer.c: 1100: else {;BVH2_Appl_Layer.c: 1103: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  3974  0B9B  27B8  3188         	fcall	PL78	;call to abstracted procedure
  3975  0B9D  1903               	skipnz
  3976  0B9E  0242               	subwf	_ui16_Speed_mat,w
  3977  0B9F  1C03               	skipc
  3978  0BA0  2BA8               	goto	l9487
  3979  0BA1  3001               	movlw	1
  3980  0BA2  0243               	subwf	_ui16_Speed_mat+1,w
  3981  0BA3  302D               	movlw	45
  3982  0BA4  1903               	skipnz
  3983  0BA5  0242               	subwf	_ui16_Speed_mat,w
  3984  0BA6  1C03               	skipc
  3985  0BA7  2BAE               	goto	l9497
  3986  0BA8                     l9487:	
  3987                           
  3988                           ;BVH2_Appl_Layer.c: 1106: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1107: (UInt8)4;
  3989                           
  3990                           ;BVH2_Appl_Layer.c: 1108: Cb24_StateCnt = 0 ;
  3991                           
  3992                           ;BVH2_Appl_Layer.c: 1109: Cb24_oMotorStalled = 1;
  3993                           
  3994                           ;BVH2_Appl_Layer.c: 1110: Cb24_oStalledAlarm = 1;
  3995  0BA8  2789  3188         	fcall	PL32	;call to abstracted procedure
  3996  0BAA  3018               	movlw	24
  3997  0BAB  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3998  0BAC  0ADD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  3999                           
  4000                           ;BVH2_Appl_Layer.c: 1111: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  4001  0BAD  2BB9               	goto	L28
  4002  0BAE                     l9497:	
  4003                           ;BVH2_Appl_Layer.c: 1112: }
  4004                           
  4005                           
  4006                           ;BVH2_Appl_Layer.c: 1113: else {;BVH2_Appl_Layer.c: 1114: if (Cb24_StateCnt > 200) {
  4007  0BAE  3000               	movlw	0
  4008  0BAF  023D               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  4009  0BB0  30C9               	movlw	201
  4010  0BB1  1903               	skipnz
  4011  0BB2  023C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  4012  0BB3  1C03               	skipc
  4013  0BB4  2BBC               	goto	l9509
  4014                           
  4015                           ;BVH2_Appl_Layer.c: 1117: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1118: (UInt8)5;
  4016                           
  4017                           ;BVH2_Appl_Layer.c: 1119: Cb24_StateCnt = 0 ;
  4018                           
  4019                           ;BVH2_Appl_Layer.c: 1120: Cb24_BadCnt = 0 ;
  4020                           
  4021                           ;BVH2_Appl_Layer.c: 1121: Cb24_oMotorStalled = 0;
  4022                           
  4023                           ;BVH2_Appl_Layer.c: 1124: Cb24_oStalledAlarm = 0;
  4024  0BB5  277A  3188         	fcall	PL30	;call to abstracted procedure
  4025  0BB7  3018               	movlw	24
  4026  0BB8  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  4027  0BB9                     L28:	
  4028                           
  4029                           ;BVH2_Appl_Layer.c: 1125: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  4030  0BB9  0021               	movlb	1	; select bank1
  4031  0BBA                     L20:	
  4032  0BBA  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  4033                           
  4034                           ;BVH2_Appl_Layer.c: 1126: }
  4035  0BBB  2BC5               	goto	l1471
  4036  0BBC                     l9509:	
  4037                           
  4038                           ;BVH2_Appl_Layer.c: 1127: else {;BVH2_Appl_Layer.c: 1128: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 1 ;
  4039  0BBC  0021               	movlb	1	; select bank1
  4040  0BBD  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  4041  0BBE  39E7               	andlw	-25
  4042  0BBF  3808               	iorlw	8
  4043  0BC0  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  4044  0BC1  2BC5               	goto	l1471
  4045  0BC2                     l9511:	
  4046                           
  4047                           ;BVH2_Appl_Layer.c: 1133: else {;BVH2_Appl_Layer.c: 1134: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 0 ;
  4048  0BC2  30E7               	movlw	-25
  4049  0BC3  0021               	movlb	1	; select bank1
  4050  0BC4  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  4051  0BC5                     l1471:	
  4052                           
  4053                           ;BVH2_Appl_Layer.c: 1135: };BVH2_Appl_Layer.c: 1136: if (SIBFS_Motor_Stalled_b.Cb24_glfl
      +                          ag <= 2) {
  4054  0BC5  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  4055  0BC6  27AD  3188         	fcall	PL60	;call to abstracted procedure
  4056  0BC8  1D03               	btfss	3,2
  4057  0BC9  2B7B               	goto	L18
  4058  0BCA  2C1D               	goto	l9553
  4059  0BCB                     l9515:	
  4060                           
  4061                           ;BVH2_Appl_Layer.c: 1147: if (Cb24_StateCnt > 200) {
  4062  0BCB  3000               	movlw	0
  4063  0BCC  0020               	movlb	0	; select bank0
  4064  0BCD  023D               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  4065  0BCE  30C9               	movlw	201
  4066  0BCF  1903               	skipnz
  4067  0BD0  023C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  4068  0BD1  1C03               	skipc
  4069  0BD2  2B7B               	goto	L18
  4070                           
  4071                           ;BVH2_Appl_Layer.c: 1151: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1152: (UInt8)6;
  4072  0BD3  0021               	movlb	1	; select bank1
  4073  0BD4  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  4074  0BD5  39F8               	andlw	-8
  4075  0BD6  3806               	iorlw	6
  4076  0BD7  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  4077                           
  4078                           ;BVH2_Appl_Layer.c: 1153: Cb24_StateCnt = 0 ;
  4079  0BD8  0020               	movlb	0	; select bank0
  4080  0BD9  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  4081  0BDA  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  4082                           
  4083                           ;BVH2_Appl_Layer.c: 1154: Cb24_oMotorStalled = 0;
  4084  0BDB  0021               	movlb	1	; select bank1
  4085  0BDC  01B6               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  4086                           
  4087                           ;BVH2_Appl_Layer.c: 1155: Cb24_oStalledAlarm = 1;
  4088  0BDD  0022               	movlb	2	; select bank2
  4089  0BDE  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  4090  0BDF  0ADD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  4091                           
  4092                           ;BVH2_Appl_Layer.c: 1156: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
  4093  0BE0  0021               	movlb	1	; select bank1
  4094  0BE1  0ABF               	incf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),f
  4095                           
  4096                           ;BVH2_Appl_Layer.c: 1157: }
  4097  0BE2  2C1D               	goto	l9553
  4098  0BE3                     l9531:	
  4099  0BE3  0021               	movlb	1	; select bank1
  4100  0BE4  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  4101  0BE5  3907               	andlw	7
  4102                           
  4103                           ; Switch size 1, requested type "space"
  4104                           ; Number of cases is 6, Range of values is 1 to 6
  4105                           ; switch strategies available:
  4106                           ; Name         Instructions Cycles
  4107                           ; simple_byte           19    10 (average)
  4108                           ; direct_byte           21     9 (fixed)
  4109                           ; jumptable            263     9 (fixed)
  4110                           ;	Chosen strategy is simple_byte
  4111  0BE6  3A01               	xorlw	1	; case 1
  4112  0BE7  1903               	skipnz
  4113  0BE8  2B59               	goto	l9449
  4114  0BE9  3A03               	xorlw	3	; case 2
  4115  0BEA  1903               	skipnz
  4116  0BEB  2B34               	goto	l9425
  4117  0BEC  3A01               	xorlw	1	; case 3
  4118  0BED  1903               	skipnz
  4119  0BEE  2B27               	goto	l9417
  4120  0BEF  3A07               	xorlw	7	; case 4
  4121  0BF0  1903               	skipnz
  4122  0BF1  2BCB               	goto	l9515
  4123  0BF2  3A01               	xorlw	1	; case 5
  4124  0BF3  1903               	skipnz
  4125  0BF4  2B2E               	goto	l9421
  4126  0BF5  3A03               	xorlw	3	; case 6
  4127  0BF6  1903               	skipnz
  4128  0BF7  2B82               	goto	l9469
  4129  0BF8  2C1D               	goto	l9553
  4130                           
  4131                           ;BVH2_Appl_Layer.c: 1167: };BVH2_Appl_Layer.c: 1170: }
  4132  0BF9  2C1D               	goto	l9553
  4133  0BFA                     l1430:	
  4134                           
  4135                           ;BVH2_Appl_Layer.c: 1171: else {;BVH2_Appl_Layer.c: 1173: if (SIBFS_Motor_Stalled_b.Cb32
      +                          _default) {
  4136  0BFA  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  4137  0BFB  2C0E               	goto	l1477
  4138                           
  4139                           ;BVH2_Appl_Layer.c: 1178: if (!(Sb1_Logical_Operator1)) {
  4140  0BFC  0023               	movlb	3	; select bank3
  4141  0BFD  085C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+384),w
  4142  0BFE  1D03               	btfss	3,2
  4143  0BFF  2C1D               	goto	l9553
  4144                           
  4145                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb32_default = 0;
  4146  0C00  0021               	movlb	1	; select bank1
  4147  0C01  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  4148                           
  4149                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
  4150  0C02  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  4151                           
  4152                           ;BVH2_Appl_Layer.c: 1183: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
  4153  0C03  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  4154  0C04  39F8               	andlw	-8
  4155  0C05  3803               	iorlw	3
  4156  0C06  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  4157                           
  4158                           ;BVH2_Appl_Layer.c: 1184: Cb24_StateCnt = 0 ;
  4159  0C07  0020               	movlb	0	; select bank0
  4160  0C08  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  4161  0C09  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  4162                           
  4163                           ;BVH2_Appl_Layer.c: 1185: Cb24_BadCnt = 0 ;
  4164  0C0A  0022               	movlb	2	; select bank2
  4165  0C0B  01A3               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256)
  4166  0C0C  01A4               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256)
  4167  0C0D  2C1D               	goto	l9553
  4168  0C0E                     l1477:	
  4169                           
  4170                           ;BVH2_Appl_Layer.c: 1190: else {;BVH2_Appl_Layer.c: 1192: if (!(SIBFS_Motor_Stalled_b.Cb
      +                          33_Stop)) {
  4171  0C0E  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  4172                           
  4173                           ;BVH2_Appl_Layer.c: 1194: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
  4174  0C0F  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
  4175  0C10  2C1D               	goto	l9553
  4176                           
  4177                           ;BVH2_Appl_Layer.c: 1195: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
  4178  0C11  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
  4179                           
  4180                           ;BVH2_Appl_Layer.c: 1198: if (Cb24_Reset) {
  4181  0C12  0023               	movlb	3	; select bank3
  4182  0C13  0857               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+384),w
  4183  0C14  1903               	btfsc	3,2
  4184  0C15  2C1D               	goto	l9553
  4185                           
  4186                           ;BVH2_Appl_Layer.c: 1200: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  4187  0C16  0021               	movlb	1	; select bank1
  4188  0C17                     L27:	
  4189  0C17  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  4190                           
  4191                           ;BVH2_Appl_Layer.c: 982: Cb24_oMotorStalled = 0;
  4192  0C18  01B6               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  4193                           
  4194                           ;BVH2_Appl_Layer.c: 983: Cb24_oStalledAlarm = 0;
  4195  0C19  0022               	movlb	2	; select bank2
  4196  0C1A  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  4197                           
  4198                           ;BVH2_Appl_Layer.c: 984: Cb24_RestartCounter = 0 ;
  4199  0C1B  0021               	movlb	1	; select bank1
  4200  0C1C  01BF               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128)
  4201  0C1D                     l9553:	
  4202                           
  4203                           ;BVH2_Appl_Layer.c: 1214: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
  4204  0C1D  0023               	movlb	3	; select bank3
  4205  0C1E  01CF               	clrf	_BVH2_Appl_Layer$1036^(0+384)
  4206  0C1F  0ACF               	incf	_BVH2_Appl_Layer$1036^(0+384),f
  4207  0C20  0021               	movlb	1	; select bank1
  4208  0C21  0845               	movf	_Cb34_odFixedValueSel^(0+128),w
  4209  0C22  1D03               	btfss	3,2
  4210  0C23  2C29               	goto	l9561
  4211  0C24  0841               	movf	_Cb56_odFixedValueSel^(0+128),w
  4212  0C25  1D03               	btfss	3,2
  4213  0C26  2C29               	goto	l9561
  4214  0C27  0023               	movlb	3	; select bank3
  4215  0C28  01CF               	clrf	_BVH2_Appl_Layer$1036^(0+384)
  4216  0C29                     l9561:	
  4217  0C29  0023               	movlb	3	; select bank3
  4218  0C2A  084F               	movf	_BVH2_Appl_Layer$1036^(0+384),w
  4219  0C2B  00D8               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+384)
  4220                           
  4221                           ;BVH2_Appl_Layer.c: 1218: if (bool_start_demand_mat) {
  4222  0C2C  0021               	movlb	1	; select bank1
  4223  0C2D  086E               	movf	_bool_start_demand_mat^(0+128),w
  4224  0C2E  1903               	btfsc	3,2
  4225  0C2F  2C37               	goto	l9567
  4226                           
  4227                           ;BVH2_Appl_Layer.c: 1219: Sb2_Switch5 = ui8_fixed_start_speed_mat;
  4228  0C30  0022               	movlb	2	; select bank2
  4229  0C31  0844               	movf	(_ui8_fixed_start_speed_mat+1)^(0+256),w
  4230  0C32  0023               	movlb	3	; select bank3
  4231  0C33  00D6               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384)
  4232  0C34  0022               	movlb	2	; select bank2
  4233  0C35  0843               	movf	_ui8_fixed_start_speed_mat^(0+256),w
  4234  0C36  2C52               	goto	L21
  4235  0C37                     l9567:	
  4236                           ;BVH2_Appl_Layer.c: 1220: }
  4237                           
  4238                           
  4239                           ;BVH2_Appl_Layer.c: 1221: else {;BVH2_Appl_Layer.c: 1224: if (Cb34_odFixedLowValueSel) {
  4240  0C37  0846               	movf	_Cb34_odFixedLowValueSel^(0+128),w
  4241  0C38  1903               	btfsc	3,2
  4242  0C39  2C41               	goto	l9571
  4243                           
  4244                           ;BVH2_Appl_Layer.c: 1225: Sb2_Switch5 = ui16_Speed_demand_mat_min;
  4245  0C3A  0022               	movlb	2	; select bank2
  4246  0C3B  0828               	movf	(_ui16_Speed_demand_mat_min+1)^(0+256),w
  4247  0C3C  0023               	movlb	3	; select bank3
  4248  0C3D  00D6               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384)
  4249  0C3E  0022               	movlb	2	; select bank2
  4250  0C3F  0827               	movf	_ui16_Speed_demand_mat_min^(0+256),w
  4251  0C40  2C52               	goto	L21
  4252  0C41                     l9571:	
  4253                           ;BVH2_Appl_Layer.c: 1226: }
  4254                           
  4255                           
  4256                           ;BVH2_Appl_Layer.c: 1227: else {;BVH2_Appl_Layer.c: 1230: if (Sb1_Logical_Operator5) {
  4257  0C41  0023               	movlb	3	; select bank3
  4258  0C42  0858               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+384),w
  4259  0C43  1903               	btfsc	3,2
  4260  0C44  2C4C               	goto	l9575
  4261                           
  4262                           ;BVH2_Appl_Layer.c: 1231: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
  4263  0C45  0022               	movlb	2	; select bank2
  4264  0C46  082A               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+256),w
  4265  0C47  0023               	movlb	3	; select bank3
  4266  0C48  00D6               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384)
  4267  0C49  0022               	movlb	2	; select bank2
  4268  0C4A  0829               	movf	_ui16_Speed_demand_mat_Max^(0+256),w
  4269  0C4B  2C52               	goto	L21
  4270  0C4C                     l9575:	
  4271                           ;BVH2_Appl_Layer.c: 1232: }
  4272                           
  4273                           
  4274                           ;BVH2_Appl_Layer.c: 1233: else {;BVH2_Appl_Layer.c: 1234: Sb2_Switch5 = ui16_Speed_deman
      +                          d_mat;
  4275  0C4C  0022               	movlb	2	; select bank2
  4276  0C4D  082C               	movf	(_ui16_Speed_demand_mat+1)^(0+256),w
  4277  0C4E  0023               	movlb	3	; select bank3
  4278  0C4F  00D6               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384)
  4279  0C50  0022               	movlb	2	; select bank2
  4280  0C51  082B               	movf	_ui16_Speed_demand_mat^(0+256),w
  4281  0C52                     L21:	
  4282  0C52  0023               	movlb	3	; select bank3
  4283  0C53  00D5               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+384)
  4284                           
  4285                           ;BVH2_Appl_Layer.c: 1235: };BVH2_Appl_Layer.c: 1236: };BVH2_Appl_Layer.c: 1237: };BVH2_A
      +                          ppl_Layer.c: 1240: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
  4286  0C54  0020               	movlb	0	; select bank0
  4287  0C55  0843               	movf	_ui16_Speed_mat+1,w
  4288  0C56  0023               	movlb	3	; select bank3
  4289  0C57  00DB               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+384)
  4290  0C58  0020               	movlb	0	; select bank0
  4291  0C59  0842               	movf	_ui16_Speed_mat,w
  4292  0C5A  0023               	movlb	3	; select bank3
  4293  0C5B  00DA               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+384)
  4294  0C5C  0855               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+384),w
  4295  0C5D  02DA               	subwf	BVH2_Appl_Layer@Sb2_Error^(0+384),f
  4296  0C5E  0856               	movf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384),w
  4297  0C5F  3BDB               	subwfb	(BVH2_Appl_Layer@Sb2_Error+1)^(0+384),f
  4298                           
  4299                           ;BVH2_Appl_Layer.c: 1245: if (SIBFS_Dry_Running_b.Cb15_greenState) {
  4300  0C60  0021               	movlb	1	; select bank1
  4301  0C61  18BB               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
  4302  0C62  2CAB               	goto	l9619
  4303                           
  4304                           ;BVH2_Appl_Layer.c: 1265: else {;BVH2_Appl_Layer.c: 1267: if (SIBFS_Dry_Running_b.Cb16_D
      +                          ryRunning) {
  4305  0C63  1D3B               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
  4306  0C64  2CA4               	goto	l1494
  4307                           
  4308                           ;BVH2_Appl_Layer.c: 1271: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
  4309  0C65  1DBB               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
  4310                           
  4311                           ;BVH2_Appl_Layer.c: 1273: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
  4312  0C66  1E3B               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
  4313  0C67  2CAB               	goto	l9619
  4314                           
  4315                           ;BVH2_Appl_Layer.c: 1280: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >;BVH2_Appl_Layer.c: 1281: 400) || (ui16_Speed_mat < 80)) {
  4316  0C68  0023               	movlb	3	; select bank3
  4317  0C69  0862               	movf	_ui16_dryRun_Thresh^(0+384),w
  4318  0C6A  3E05               	addlw	5
  4319  0C6B  0020               	movlb	0	; select bank0
  4320  0C6C  00B2               	movwf	??_BVH2_Appl_Layer
  4321  0C6D  3000               	movlw	0
  4322  0C6E  0023               	movlb	3	; select bank3
  4323  0C6F  3D63               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
  4324  0C70  2751  3188         	fcall	PL6	;call to abstracted procedure
  4325  0C72  1C03               	skipc
  4326  0C73  2C82               	goto	l1499
  4327  0C74  3001               	movlw	1
  4328  0C75  0243               	subwf	_ui16_Speed_mat+1,w
  4329  0C76  3091               	movlw	145
  4330  0C77  1903               	skipnz
  4331  0C78  0242               	subwf	_ui16_Speed_mat,w
  4332  0C79  1803               	skipnc
  4333  0C7A  2C82               	goto	l1499
  4334  0C7B  3000               	movlw	0
  4335  0C7C  0243               	subwf	_ui16_Speed_mat+1,w
  4336  0C7D  3050               	movlw	80
  4337  0C7E  1903               	skipnz
  4338  0C7F  0242               	subwf	_ui16_Speed_mat,w
  4339  0C80  1803               	skipnc
  4340  0C81  2C86               	goto	l9597
  4341  0C82                     l1499:	
  4342                           
  4343                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
  4344  0C82  0021               	movlb	1	; select bank1
  4345  0C83  123B               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
  4346                           
  4347                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
  4348  0C84  113B               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
  4349  0C85  2CA9               	goto	l9615
  4350  0C86                     l9597:	
  4351                           ;BVH2_Appl_Layer.c: 1287: }
  4352                           
  4353                           ;BVH2_Appl_Layer.c: 1285: SIBFS_Dry_Running_b.Cb15_greenState = 1;
  4354                           
  4355                           
  4356                           ;BVH2_Appl_Layer.c: 1288: else {;BVH2_Appl_Layer.c: 1289: if ((ui8_PWM_dc_mat < 20) && (
      +                          ui8_PWM_dc_mat > 4)) {
  4357  0C86  3014               	movlw	20
  4358  0C87  0021               	movlb	1	; select bank1
  4359  0C88  025F               	subwf	_ui8_PWM_dc_mat^(0+128),w
  4360  0C89  1803               	skipnc
  4361  0C8A  2C8F               	goto	l9605
  4362  0C8B  3005               	movlw	5
  4363  0C8C  025F               	subwf	_ui8_PWM_dc_mat^(0+128),w
  4364  0C8D  1803               	btfsc	3,0
  4365  0C8E  2C82               	goto	l1499
  4366  0C8F                     l9605:	
  4367                           
  4368                           ;BVH2_Appl_Layer.c: 1296: else {;BVH2_Appl_Layer.c: 1297: if (Cb14_StateCnt > 2000) {
  4369  0C8F  3007               	movlw	7
  4370  0C90  0022               	movlb	2	; select bank2
  4371  0C91  0226               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256),w
  4372  0C92  30D1               	movlw	209
  4373  0C93  1903               	skipnz
  4374  0C94  0225               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256),w
  4375  0C95  1C03               	skipc
  4376  0C96  2C9D               	goto	l9609
  4377                           
  4378                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
  4379  0C97  0021               	movlb	1	; select bank1
  4380  0C98  123B               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
  4381                           
  4382                           ;BVH2_Appl_Layer.c: 1300: SIBFS_Dry_Running_b.Cb17_redState = 1;
  4383  0C99  15BB               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
  4384                           
  4385                           ;BVH2_Appl_Layer.c: 1301: Cb14_oDryRunAlarm = 1;
  4386  0C9A  01B9               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
  4387  0C9B  0AB9               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
  4388                           
  4389                           ;BVH2_Appl_Layer.c: 1302: }
  4390  0C9C  2CAB               	goto	l9619
  4391  0C9D                     l9609:	
  4392                           
  4393                           ;BVH2_Appl_Layer.c: 1303: else {;BVH2_Appl_Layer.c: 1304: Cb14_StateCnt = Cb14_StateCnt 
      +                          + 1 ;
  4394  0C9D  0825               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256),w
  4395  0C9E  3E01               	addlw	1
  4396  0C9F  00A5               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256)
  4397  0CA0  3000               	movlw	0
  4398  0CA1  3D26               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256),w
  4399  0CA2  00A6               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256)
  4400  0CA3  2CAB               	goto	l9619
  4401  0CA4                     l1494:	
  4402                           
  4403                           ;BVH2_Appl_Layer.c: 1315: else {;BVH2_Appl_Layer.c: 1317: if (!(SIBFS_Dry_Running_b.Cb14
      +                          _Dry_Running)) {
  4404  0CA4  183B               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
  4405  0CA5  2CAB               	goto	l9619
  4406                           
  4407                           ;BVH2_Appl_Layer.c: 1318: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
  4408  0CA6  143B               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
  4409                           
  4410                           ;BVH2_Appl_Layer.c: 1321: if (ui8_ResetMatlab == 1) {
  4411  0CA7  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  4412  0CA8  2CAB               	goto	l9619
  4413  0CA9                     l9615:	
  4414                           
  4415                           ;BVH2_Appl_Layer.c: 1323: SIBFS_Dry_Running_b.Cb15_greenState = 1;
  4416  0CA9  14BB               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
  4417                           
  4418                           ;BVH2_Appl_Layer.c: 1286: Cb14_oDryRunAlarm = 0;
  4419  0CAA  01B9               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
  4420  0CAB                     l9619:	
  4421                           
  4422                           ;BVH2_Appl_Layer.c: 1325: };BVH2_Appl_Layer.c: 1326: };BVH2_Appl_Layer.c: 1327: };BVH2_A
      +                          ppl_Layer.c: 1328: };BVH2_Appl_Layer.c: 1335: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenSta
      +                          te) {
  4423  0CAB  0020               	movlb	0	; select bank0
  4424  0CAC  1CCA               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
  4425  0CAD  2CBD               	goto	l1508
  4426                           
  4427                           ;BVH2_Appl_Layer.c: 1340: if (Cb14_oDryRunAlarm) {
  4428  0CAE  0021               	movlb	1	; select bank1
  4429  0CAF  0839               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
  4430  0CB0  1903               	btfsc	3,2
  4431  0CB1  2D00               	goto	l9667
  4432                           
  4433                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
  4434  0CB2  0020               	movlb	0	; select bank0
  4435  0CB3  10CA               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
  4436                           
  4437                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
  4438  0CB4  154A               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
  4439  0CB5                     L22:	
  4440                           
  4441                           ;BVH2_Appl_Layer.c: 1345: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
  4442  0CB5  15CA               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4443                           
  4444                           ;BVH2_Appl_Layer.c: 1346: Cb19_Counter = 0 ;
  4445  0CB6  0021               	movlb	1	; select bank1
  4446  0CB7  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
  4447  0CB8  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
  4448                           
  4449                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun66 = 1;
  4450  0CB9  01B7               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128)
  4451  0CBA  0AB7               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128),f
  4452                           
  4453                           ;BVH2_Appl_Layer.c: 1348: Cb19_oDryRun55 = 0;
  4454  0CBB  01B8               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128)
  4455                           
  4456                           ;BVH2_Appl_Layer.c: 1349: };BVH2_Appl_Layer.c: 1352: }
  4457  0CBC  2D00               	goto	l9667
  4458  0CBD                     l1508:	
  4459                           
  4460                           ;BVH2_Appl_Layer.c: 1353: else {;BVH2_Appl_Layer.c: 1355: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b21_DryRunningAlarm) {
  4461  0CBD  1D4A               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
  4462  0CBE  2CF2               	goto	l1511
  4463                           
  4464                           ;BVH2_Appl_Layer.c: 1360: if (!(Cb14_oDryRunAlarm)) {
  4465  0CBF  0021               	movlb	1	; select bank1
  4466  0CC0  0839               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
  4467  0CC1  1D03               	btfss	3,2
  4468  0CC2  2CCD               	goto	l1512
  4469                           
  4470                           ;BVH2_Appl_Layer.c: 1365: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
  4471  0CC3  0020               	movlb	0	; select bank0
  4472  0CC4  1DCA               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4473  0CC5  2CC8               	goto	l1513
  4474                           
  4475                           ;BVH2_Appl_Layer.c: 1366: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
  4476  0CC6  11CA               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4477                           
  4478                           ;BVH2_Appl_Layer.c: 1367: }
  4479  0CC7  2CCB               	goto	l1514
  4480  0CC8                     l1513:	
  4481                           
  4482                           ;BVH2_Appl_Layer.c: 1368: else {;BVH2_Appl_Layer.c: 1370: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
  4483  0CC8  1E4A               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4484  0CC9  2CCB               	goto	l1514
  4485                           
  4486                           ;BVH2_Appl_Layer.c: 1371: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
  4487  0CCA  124A               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4488  0CCB                     l1514:	
  4489                           
  4490                           ;BVH2_Appl_Layer.c: 1372: };BVH2_Appl_Layer.c: 1373: };BVH2_Appl_Layer.c: 1374: SIBFS_Dr
      +                          y_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
  4491  0CCB  114A               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
  4492  0CCC  2CFA               	goto	L29
  4493  0CCD                     l1512:	
  4494                           ;BVH2_Appl_Layer.c: 1379: }
  4495                           
  4496                           ;BVH2_Appl_Layer.c: 1375: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
  4497                           
  4498                           
  4499                           ;BVH2_Appl_Layer.c: 1380: else {;BVH2_Appl_Layer.c: 1382: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b22_DryRun66) {
  4500  0CCD  0020               	movlb	0	; select bank0
  4501  0CCE  1DCA               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4502  0CCF  2CE7               	goto	l1517
  4503                           
  4504                           ;BVH2_Appl_Layer.c: 1385: if (Cb19_Counter > 400) {
  4505  0CD0  27B4  3188         	fcall	PL72	;call to abstracted procedure
  4506  0CD2  1903               	skipnz
  4507  0CD3  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
  4508  0CD4  1C03               	skipc
  4509  0CD5  2CE0               	goto	l9647
  4510                           
  4511                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
  4512  0CD6  0020               	movlb	0	; select bank0
  4513  0CD7  11CA               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4514                           
  4515                           ;BVH2_Appl_Layer.c: 1389: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
  4516  0CD8  164A               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4517                           
  4518                           ;BVH2_Appl_Layer.c: 1390: Cb19_Counter = 0 ;
  4519  0CD9  0021               	movlb	1	; select bank1
  4520  0CDA  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
  4521  0CDB  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
  4522                           
  4523                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun66 = 0;
  4524  0CDC  01B7               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128)
  4525                           
  4526                           ;BVH2_Appl_Layer.c: 1392: Cb19_oDryRun55 = 1;
  4527  0CDD  01B8               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128)
  4528  0CDE  0AB8               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128),f
  4529                           
  4530                           ;BVH2_Appl_Layer.c: 1393: }
  4531  0CDF  2D00               	goto	l9667
  4532  0CE0                     l9647:	
  4533                           
  4534                           ;BVH2_Appl_Layer.c: 1394: else {;BVH2_Appl_Layer.c: 1395: Cb19_Counter = Cb19_Counter + 
      +                          1 ;
  4535  0CE0  0822               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
  4536  0CE1  3E01               	addlw	1
  4537  0CE2  00A2               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
  4538  0CE3  3000               	movlw	0
  4539  0CE4  3D23               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
  4540  0CE5  00A3               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
  4541  0CE6  2D00               	goto	l9667
  4542  0CE7                     l1517:	
  4543                           
  4544                           ;BVH2_Appl_Layer.c: 1401: else {;BVH2_Appl_Layer.c: 1403: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
  4545  0CE7  1E4A               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4546  0CE8  2D00               	goto	l9667
  4547                           
  4548                           ;BVH2_Appl_Layer.c: 1406: if (Cb19_Counter > 400) {
  4549  0CE9  27B4  3188         	fcall	PL72	;call to abstracted procedure
  4550  0CEB  1903               	skipnz
  4551  0CEC  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
  4552  0CED  1C03               	skipc
  4553  0CEE  2CE0               	goto	l9647
  4554                           
  4555                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
  4556  0CEF  0020               	movlb	0	; select bank0
  4557  0CF0  124A               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4558  0CF1  2CB5               	goto	L22
  4559  0CF2                     l1511:	
  4560                           ;BVH2_Appl_Layer.c: 1410: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
  4561                           
  4562                           
  4563                           ;BVH2_Appl_Layer.c: 1427: else {;BVH2_Appl_Layer.c: 1429: if (!(SIBFS_Dry_RunningAlarm_b
      +                          .Cb19_Dry_RunningAlarm)) {
  4564  0CF2  184A               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
  4565  0CF3  2D00               	goto	l9667
  4566                           
  4567                           ;BVH2_Appl_Layer.c: 1430: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
  4568  0CF4  144A               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
  4569                           
  4570                           ;BVH2_Appl_Layer.c: 1434: if (!(Cb14_oDryRunAlarm)) {
  4571  0CF5  0021               	movlb	1	; select bank1
  4572  0CF6  0839               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
  4573  0CF7  1D03               	btfss	3,2
  4574  0CF8  2D00               	goto	l9667
  4575                           
  4576                           ;BVH2_Appl_Layer.c: 1436: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
  4577  0CF9  0020               	movlb	0	; select bank0
  4578  0CFA                     L29:	
  4579  0CFA  14CA               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
  4580                           
  4581                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun55 = 0;
  4582  0CFB  0021               	movlb	1	; select bank1
  4583  0CFC  01B8               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128)
  4584                           
  4585                           ;BVH2_Appl_Layer.c: 1377: Cb19_oDryRun66 = 0;
  4586  0CFD  01B7               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128)
  4587                           
  4588                           ;BVH2_Appl_Layer.c: 1378: Cb19_Counter = 0 ;
  4589  0CFE  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
  4590  0CFF  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
  4591  0D00                     l9667:	
  4592                           
  4593                           ;BVH2_Appl_Layer.c: 1440: };BVH2_Appl_Layer.c: 1441: };BVH2_Appl_Layer.c: 1442: };BVH2_A
      +                          ppl_Layer.c: 1443: };BVH2_Appl_Layer.c: 1448: bool_DryRunningAlarm = Cb19_oDryRun66;
  4594  0D00  0021               	movlb	1	; select bank1
  4595  0D01  0837               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128),w
  4596  0D02  00E3               	movwf	_bool_DryRunningAlarm^(0+128)
  4597                           
  4598                           ;BVH2_Appl_Layer.c: 1451: bool_CPU_TempAlarm = Cb51_oTempAlarm;
  4599  0D03  0022               	movlb	2	; select bank2
  4600  0D04  085C               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
  4601  0D05  0021               	movlb	1	; select bank1
  4602  0D06  00E4               	movwf	_bool_CPU_TempAlarm^(0+128)
  4603                           
  4604                           ;BVH2_Appl_Layer.c: 1456: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
  4605  0D07  1C3C               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
  4606  0D08  2D14               	goto	l1527
  4607                           
  4608                           ;BVH2_Appl_Layer.c: 1461: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
  4609  0D09  275E  3188         	fcall	PL8	;call to abstracted procedure
  4610  0D0B  2751  3188         	fcall	PL6	;call to abstracted procedure
  4611  0D0D  1803               	skipnc
  4612  0D0E  2D4B               	goto	l9717
  4613                           
  4614                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
  4615  0D0F  0021               	movlb	1	; select bank1
  4616  0D10  103C               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
  4617                           
  4618                           ;BVH2_Appl_Layer.c: 1465: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
  4619  0D11  153C               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
  4620  0D12                     l9677:	
  4621                           
  4622                           ;BVH2_Appl_Layer.c: 1466: Cb9_StateCnt = 0 ;
  4623  0D12  01BD               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
  4624  0D13  2D4B               	goto	l9717
  4625  0D14                     l1527:	
  4626                           
  4627                           ;BVH2_Appl_Layer.c: 1471: else {;BVH2_Appl_Layer.c: 1473: if (SIBFS_Current_Analysis_low
      +                          _b.Cb11_Wait) {
  4628  0D14  1CBC               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
  4629  0D15  2D28               	goto	l1530
  4630                           
  4631                           ;BVH2_Appl_Layer.c: 1478: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
  4632  0D16  275E  3188         	fcall	PL8	;call to abstracted procedure
  4633  0D18  2751  3188         	fcall	PL6	;call to abstracted procedure
  4634  0D1A  1803               	skipnc
  4635  0D1B  2D1F               	goto	l9683
  4636                           
  4637                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
  4638  0D1C  0021               	movlb	1	; select bank1
  4639  0D1D  10BC               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
  4640  0D1E  2D35               	goto	L23
  4641  0D1F                     l9683:	
  4642                           ;BVH2_Appl_Layer.c: 1483: }
  4643                           
  4644                           ;BVH2_Appl_Layer.c: 1482: Cb9_oCurrentAlarm = 1;
  4645                           
  4646                           ;BVH2_Appl_Layer.c: 1481: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
  4647                           
  4648                           
  4649                           ;BVH2_Appl_Layer.c: 1484: else {;BVH2_Appl_Layer.c: 1485: if (Cb9_StateCnt > 100) {
  4650  0D1F  3065               	movlw	101
  4651  0D20  0021               	movlb	1	; select bank1
  4652  0D21  023D               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
  4653  0D22  1C03               	skipc
  4654  0D23  2D26               	goto	l9689
  4655                           
  4656                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
  4657  0D24  10BC               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
  4658  0D25  2D48               	goto	l9713
  4659  0D26                     l9689:	
  4660                           ;BVH2_Appl_Layer.c: 1490: }
  4661                           
  4662                           ;BVH2_Appl_Layer.c: 1488: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
  4663                           
  4664                           
  4665                           ;BVH2_Appl_Layer.c: 1491: else {;BVH2_Appl_Layer.c: 1492: Cb9_StateCnt = Cb9_StateCnt + 
      +                          1 ;
  4666  0D26  0ABD               	incf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),f
  4667  0D27  2D4B               	goto	l9717
  4668  0D28                     l1530:	
  4669                           
  4670                           ;BVH2_Appl_Layer.c: 1498: else {;BVH2_Appl_Layer.c: 1500: if (SIBFS_Current_Analysis_low
      +                          _b.Cb12_CntOverCurrent) {
  4671  0D28  1D3C               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
  4672  0D29  2D3A               	goto	l1536
  4673                           
  4674                           ;BVH2_Appl_Layer.c: 1505: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
  4675  0D2A  2767  3188         	fcall	PL10	;call to abstracted procedure
  4676  0D2C  1803               	skipnc
  4677  0D2D  2D30               	goto	l9697
  4678                           
  4679                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
  4680  0D2E  113C               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
  4681  0D2F  2D48               	goto	l9713
  4682  0D30                     l9697:	
  4683                           ;BVH2_Appl_Layer.c: 1508: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
  4684                           
  4685                           
  4686                           ;BVH2_Appl_Layer.c: 1511: else {;BVH2_Appl_Layer.c: 1512: if (Cb9_StateCnt > 50) {
  4687  0D30  3033               	movlw	51
  4688  0D31  023D               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
  4689  0D32  1C03               	skipc
  4690  0D33  2D26               	goto	l9689
  4691                           
  4692                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
  4693  0D34  113C               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
  4694  0D35                     L23:	
  4695                           
  4696                           ;BVH2_Appl_Layer.c: 1515: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
  4697  0D35  15BC               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
  4698                           
  4699                           ;BVH2_Appl_Layer.c: 1516: Cb9_oCurrentAlarm = 1;
  4700  0D36  0022               	movlb	2	; select bank2
  4701  0D37  01D9               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
  4702  0D38  0AD9               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
  4703                           
  4704                           ;BVH2_Appl_Layer.c: 1517: }
  4705  0D39  2D4B               	goto	l9717
  4706  0D3A                     l1536:	
  4707                           
  4708                           ;BVH2_Appl_Layer.c: 1525: else {;BVH2_Appl_Layer.c: 1527: if (SIBFS_Current_Analysis_low
      +                          _b.Cb13_redState) {
  4709  0D3A  1DBC               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
  4710  0D3B  2D43               	goto	l1542
  4711                           
  4712                           ;BVH2_Appl_Layer.c: 1532: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
  4713  0D3C  2767  3188         	fcall	PL10	;call to abstracted procedure
  4714  0D3E  1803               	skipnc
  4715  0D3F  2D4B               	goto	l9717
  4716                           
  4717                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
  4718  0D40  11BC               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
  4719                           
  4720                           ;BVH2_Appl_Layer.c: 1536: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
  4721  0D41  14BC               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
  4722  0D42  2D12               	goto	l9677
  4723  0D43                     l1542:	
  4724                           
  4725                           ;BVH2_Appl_Layer.c: 1542: else {;BVH2_Appl_Layer.c: 1544: if (!(SIBFS_Current_Analysis_l
      +                          ow_b.Cb9_Current_Analysis_low)) {
  4726  0D43  1A3C               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
  4727  0D44  2D4B               	goto	l9717
  4728                           
  4729                           ;BVH2_Appl_Layer.c: 1545: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
  4730  0D45  163C               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
  4731                           
  4732                           ;BVH2_Appl_Layer.c: 1548: if (ui8_ResetMatlab == 1) {
  4733  0D46  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  4734  0D47  2D4B               	goto	l9717
  4735  0D48                     l9713:	
  4736                           
  4737                           ;BVH2_Appl_Layer.c: 1550: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
  4738  0D48  143C               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
  4739                           
  4740                           ;BVH2_Appl_Layer.c: 1489: Cb9_oCurrentAlarm = 0;
  4741  0D49  0022               	movlb	2	; select bank2
  4742  0D4A  01D9               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
  4743  0D4B                     l9717:	
  4744                           
  4745                           ;BVH2_Appl_Layer.c: 1552: };BVH2_Appl_Layer.c: 1553: };BVH2_Appl_Layer.c: 1554: };BVH2_A
      +                          ppl_Layer.c: 1555: };BVH2_Appl_Layer.c: 1556: };BVH2_Appl_Layer.c: 1557: };BVH2_Appl_Lay
      +                          er.c: 1562: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
  4746  0D4B  0022               	movlb	2	; select bank2
  4747  0D4C  0859               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
  4748  0D4D  0021               	movlb	1	; select bank1
  4749  0D4E  00E1               	movwf	_bool_HighCurrentAlarm^(0+128)
  4750                           
  4751                           ;BVH2_Appl_Layer.c: 1565: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
  4752  0D4F  0848               	movf	_Cb34_oPWM_Alarm^(0+128),w
  4753  0D50  00DB               	movwf	_bool_PWMin_err_Alarm^(0+128)
  4754                           
  4755                           ;BVH2_Appl_Layer.c: 1568: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
  4756  0D51  0842               	movf	_Cb56_oUbat_Alarm_High^(0+128),w
  4757  0D52  00D9               	movwf	_bool_UbatAlarm^(0+128)
  4758                           
  4759                           ;BVH2_Appl_Layer.c: 1569: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
  4760  0D53  0023               	movlb	3	; select bank3
  4761  0D54  01D0               	clrf	_BVH2_Appl_Layer$1037^(0+384)
  4762  0D55  0AD0               	incf	_BVH2_Appl_Layer$1037^(0+384),f
  4763  0D56  0022               	movlb	2	; select bank2
  4764  0D57  085D               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
  4765  0D58  1D03               	btfss	3,2
  4766  0D59  2D63               	goto	l9733
  4767  0D5A  0021               	movlb	1	; select bank1
  4768  0D5B  084A               	movf	_Cb1_oCurrentAlarm^(0+128),w
  4769  0D5C  1D03               	btfss	3,2
  4770  0D5D  2D63               	goto	l9733
  4771  0D5E  0838               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128),w
  4772  0D5F  1D03               	btfss	3,2
  4773  0D60  2D63               	goto	l9733
  4774  0D61  0023               	movlb	3	; select bank3
  4775  0D62  01D0               	clrf	_BVH2_Appl_Layer$1037^(0+384)
  4776  0D63                     l9733:	
  4777  0D63  0023               	movlb	3	; select bank3
  4778  0D64  0850               	movf	_BVH2_Appl_Layer$1037^(0+384),w
  4779  0D65  0021               	movlb	1	; select bank1
  4780  0D66  00E2               	movwf	_bool_MotorStalled^(0+128)
  4781                           
  4782                           ;BVH2_Appl_Layer.c: 1575: ui8_debug_out0 = (UInt8) Sb2_Switch5;
  4783  0D67  0022               	movlb	2	; select bank2
  4784  0D68  085B               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
  4785  0D69  0021               	movlb	1	; select bank1
  4786  0D6A  00DA               	movwf	_bool_CPU_TempRedAlarm^(0+128)
  4787                           
  4788                           ;BVH2_Appl_Layer.c: 1576: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
  4789  0D6B  0023               	movlb	3	; select bank3
  4790  0D6C  01D1               	clrf	_BVH2_Appl_Layer$1038^(0+384)
  4791  0D6D  0AD1               	incf	_BVH2_Appl_Layer$1038^(0+384),f
  4792  0D6E  085C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+384),w
  4793  0D6F  1D03               	btfss	3,2
  4794  0D70  2D7A               	goto	l9747
  4795  0D71  0021               	movlb	1	; select bank1
  4796  0D72  0836               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),w
  4797  0D73  1D03               	btfss	3,2
  4798  0D74  2D7A               	goto	l9747
  4799  0D75  0839               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
  4800  0D76  1D03               	btfss	3,2
  4801  0D77  2D7A               	goto	l9747
  4802  0D78  0023               	movlb	3	; select bank3
  4803  0D79  01D1               	clrf	_BVH2_Appl_Layer$1038^(0+384)
  4804  0D7A                     l9747:	
  4805  0D7A  0023               	movlb	3	; select bank3
  4806  0D7B  0851               	movf	_BVH2_Appl_Layer$1038^(0+384),w
  4807  0D7C  00DD               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+384)
  4808                           
  4809                           ;BVH2_Appl_Layer.c: 1577: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
  4810  0D7D  01D2               	clrf	_BVH2_Appl_Layer$1039^(0+384)
  4811  0D7E  0AD2               	incf	_BVH2_Appl_Layer$1039^(0+384),f
  4812  0D7F  085D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+384),w
  4813  0D80  1D03               	btfss	3,2
  4814  0D81  2D88               	goto	l9757
  4815  0D82  0021               	movlb	1	; select bank1
  4816  0D83  085C               	movf	_bool_ControlLoopMode^(0+128),w
  4817  0D84  1D03               	btfss	3,2
  4818  0D85  2D88               	goto	l9757
  4819  0D86  0023               	movlb	3	; select bank3
  4820  0D87  01D2               	clrf	_BVH2_Appl_Layer$1039^(0+384)
  4821  0D88                     l9757:	
  4822  0D88  0023               	movlb	3	; select bank3
  4823  0D89  0852               	movf	_BVH2_Appl_Layer$1039^(0+384),w
  4824  0D8A  00D9               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+384)
  4825                           
  4826                           ;BVH2_Appl_Layer.c: 1578: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
  4827  0D8B  0022               	movlb	2	; select bank2
  4828  0D8C  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
  4829  0D8D  1903               	btfsc	3,2
  4830  0D8E  2D99               	goto	l9765
  4831  0D8F  086D               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
  4832  0D90  1D03               	btfss	3,2
  4833  0D91  2D99               	goto	l9765
  4834                           
  4835                           ;BVH2_Appl_Layer.c: 1579: {;BVH2_Appl_Layer.c: 1580: X_Sb4_Intergrator = 80000 ;
  4836  0D92  3001               	movlw	1
  4837  0D93  01E5               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
  4838  0D94  00E4               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
  4839  0D95  3038               	movlw	56
  4840  0D96  00E3               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
  4841  0D97  3080               	movlw	128
  4842  0D98  00E2               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
  4843  0D99                     l9765:	
  4844                           
  4845                           ;BVH2_Appl_Layer.c: 1586: Sb2_Switch2 = 0 ;
  4846  0D99  0023               	movlb	3	; select bank3
  4847  0D9A  085D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+384),w
  4848  0D9B  1D03               	btfss	3,2
  4849  0D9C  2E5E               	goto	l9799
  4850                           
  4851                           ;BVH2_Appl_Layer.c: 1588: else {;BVH2_Appl_Layer.c: 1591: if (bool_ControlLoopMode) {
  4852                           
  4853                           ;BVH2_Appl_Layer.c: 1587: }
  4854  0D9D  0021               	movlb	1	; select bank1
  4855  0D9E  085C               	movf	_bool_ControlLoopMode^(0+128),w
  4856  0D9F  1903               	btfsc	3,2
  4857  0DA0  2E09               	goto	l9787
  4858                           
  4859                           ;BVH2_Appl_Layer.c: 1595: Sb2_Switch2 = Sb2_Fixed_Power;
  4860  0DA1  0023               	movlb	3	; select bank3
  4861  0DA2  0858               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+384),w
  4862  0DA3  1D03               	btfss	3,2
  4863  0DA4  2E5E               	goto	l9799
  4864                           
  4865                           ;BVH2_Appl_Layer.c: 1597: else {;BVH2_Appl_Layer.c: 1599: UInt16 Sb3_Product1 ;;BVH2_App
      +                          l_Layer.c: 1600: Int16 Sb3_Sum1;;BVH2_Appl_Layer.c: 1608: Sb3_Product1 = (UInt16) (((UIn
      +                          t16) (140 << 8)) / 160 );
  4866  0DA5  30E0               	movlw	224
  4867  0DA6  00D3               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+384)
  4868  0DA7  01D4               	clrf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+384)
  4869                           
  4870                           ;BVH2_Appl_Layer.c: 1614: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>;BVH2_Appl_Layer.c: 1615: 8)) + ((Int16) (((Int16) (-((Int16) (
      +                          UInt16) ((((UInt32) Sb3_Product1) * 95) >> 7)))) + 200)));
  4871  0DA8  0021               	movlb	1	; select bank1
  4872  0DA9  085F               	movf	_ui8_PWM_dc_mat^(0+128),w
  4873  0DAA  0020               	movlb	0	; select bank0
  4874  0DAB  00A4               	movwf	___lmul@multiplier
  4875  0DAC  01A5               	clrf	___lmul@multiplier+1
  4876  0DAD  01A6               	clrf	___lmul@multiplier+2
  4877  0DAE  01A7               	clrf	___lmul@multiplier+3
  4878  0DAF  0023               	movlb	3	; select bank3
  4879  0DB0  0853               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+384),w
  4880  0DB1  0020               	movlb	0	; select bank0
  4881  0DB2  00A8               	movwf	___lmul@multiplicand
  4882  0DB3  0023               	movlb	3	; select bank3
  4883  0DB4  0854               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+384),w
  4884  0DB5  0020               	movlb	0	; select bank0
  4885  0DB6  00A9               	movwf	___lmul@multiplicand+1
  4886  0DB7  01AA               	clrf	___lmul@multiplicand+2
  4887  0DB8  01AB               	clrf	___lmul@multiplicand+3
  4888  0DB9  2717  3188         	fcall	___lmul
  4889  0DBB  0826               	movf	?___lmul+2,w
  4890  0DBC  0023               	movlb	3	; select bank3
  4891  0DBD  00DF               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384)
  4892  0DBE  0020               	movlb	0	; select bank0
  4893  0DBF  0825               	movf	?___lmul+1,w
  4894  0DC0  0023               	movlb	3	; select bank3
  4895  0DC1  00DE               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384)
  4896  0DC2  0853               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+384),w
  4897  0DC3  0020               	movlb	0	; select bank0
  4898  0DC4  00A4               	movwf	___lmul@multiplier
  4899  0DC5  0023               	movlb	3	; select bank3
  4900  0DC6  0854               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+384),w
  4901  0DC7  0020               	movlb	0	; select bank0
  4902  0DC8  00A5               	movwf	___lmul@multiplier+1
  4903  0DC9  305F               	movlw	95
  4904  0DCA  01A6               	clrf	___lmul@multiplier+2
  4905  0DCB  01A7               	clrf	___lmul@multiplier+3
  4906  0DCC  00A8               	movwf	___lmul@multiplicand
  4907  0DCD  01A9               	clrf	___lmul@multiplicand+1
  4908  0DCE  01AA               	clrf	___lmul@multiplicand+2
  4909  0DCF  01AB               	clrf	___lmul@multiplicand+3
  4910  0DD0  2717  3188         	fcall	___lmul
  4911  0DD2  0824               	movf	?___lmul,w
  4912  0DD3  00B2               	movwf	??_BVH2_Appl_Layer
  4913  0DD4  0825               	movf	?___lmul+1,w
  4914  0DD5  00B3               	movwf	??_BVH2_Appl_Layer+1
  4915  0DD6  0826               	movf	?___lmul+2,w
  4916  0DD7  00B4               	movwf	??_BVH2_Appl_Layer+2
  4917  0DD8  0827               	movf	?___lmul+3,w
  4918  0DD9  00B5               	movwf	??_BVH2_Appl_Layer+3
  4919  0DDA  3007               	movlw	7
  4920  0DDB                     u8235:	
  4921  0DDB  36B5               	lsrf	??_BVH2_Appl_Layer+3,f
  4922  0DDC  0CB4               	rrf	??_BVH2_Appl_Layer+2,f
  4923  0DDD  0CB3               	rrf	??_BVH2_Appl_Layer+1,f
  4924  0DDE  0CB2               	rrf	??_BVH2_Appl_Layer,f
  4925  0DDF  0B89               	decfsz	9,f
  4926  0DE0  2DDB               	goto	u8235
  4927  0DE1  0832               	movf	??_BVH2_Appl_Layer,w
  4928  0DE2  0023               	movlb	3	; select bank3
  4929  0DE3  02DE               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),f
  4930  0DE4  0020               	movlb	0	; select bank0
  4931  0DE5  0833               	movf	??_BVH2_Appl_Layer+1,w
  4932  0DE6  0023               	movlb	3	; select bank3
  4933  0DE7  3BDF               	subwfb	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384),f
  4934  0DE8  30C8               	movlw	200
  4935  0DE9  07DE               	addwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),f
  4936  0DEA  1803               	skipnc
  4937  0DEB  0ADF               	incf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384),f
  4938                           
  4939                           ;BVH2_Appl_Layer.c: 1618: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
  4940  0DEC  085F               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384),w
  4941  0DED  27A7  3188         	fcall	PL52	;call to abstracted procedure
  4942  0DEF  1D03               	skipz
  4943  0DF0  2DF4               	goto	u8245
  4944  0DF1  30C9               	movlw	201
  4945  0DF2  0023               	movlb	3	; select bank3
  4946  0DF3  025E               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),w
  4947  0DF4                     u8245:	
  4948  0DF4  1803               	skipnc
  4949  0DF5  2E5E               	goto	l9799
  4950  0DF6  0023               	movlb	3	; select bank3
  4951  0DF7  085F               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384),w
  4952  0DF8  27A7  3188         	fcall	PL52	;call to abstracted procedure
  4953  0DFA  1D03               	skipz
  4954  0DFB  2DFF               	goto	u8255
  4955  0DFC  303C               	movlw	60
  4956  0DFD  0023               	movlb	3	; select bank3
  4957  0DFE  025E               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),w
  4958  0DFF                     u8255:	
  4959  0DFF  1C03               	skipc
  4960  0E00  2E04               	goto	l9785
  4961  0E01  0023               	movlb	3	; select bank3
  4962  0E02  085E               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),w
  4963  0E03  2E06               	goto	L25
  4964  0E04                     l9785:	
  4965  0E04  303C               	movlw	60
  4966  0E05  0023               	movlb	3	; select bank3
  4967  0E06                     L25:	
  4968  0E06  00C4               	movwf	_BVH2_Appl_Layer$1042^(0+384)
  4969  0E07  01C5               	clrf	(_BVH2_Appl_Layer$1042+1)^(0+384)
  4970  0E08  2E5E               	goto	l9799
  4971  0E09                     l9787:	
  4972                           
  4973                           ;BVH2_Appl_Layer.c: 1621: else {;BVH2_Appl_Layer.c: 1623: Int16 Sb4_PI_sum;;BVH2_Appl_La
      +                          yer.c: 1628: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / ((Int32) 800))
      +                          ) + ((UInt16);BVH2_Appl_Layer.c: 1629: (Sb2_Error * ((Int16) ui8_Kp_mat))));
  4974  0E09  0020               	movlb	0	; select bank0
  4975  0E0A  3003               	movlw	3
  4976  0E0B  01A7               	clrf	___aldiv@divisor+3
  4977  0E0C  01A6               	clrf	___aldiv@divisor+2
  4978  0E0D  00A5               	movwf	___aldiv@divisor+1
  4979  0E0E  3020               	movlw	32
  4980  0E0F  00A4               	movwf	___aldiv@divisor
  4981  0E10  0022               	movlb	2	; select bank2
  4982  0E11  0865               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
  4983  0E12  0020               	movlb	0	; select bank0
  4984  0E13  00AB               	movwf	___aldiv@dividend+3
  4985  0E14  0022               	movlb	2	; select bank2
  4986  0E15  0864               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
  4987  0E16  0020               	movlb	0	; select bank0
  4988  0E17  00AA               	movwf	___aldiv@dividend+2
  4989  0E18  0022               	movlb	2	; select bank2
  4990  0E19  0863               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
  4991  0E1A  0020               	movlb	0	; select bank0
  4992  0E1B  00A9               	movwf	___aldiv@dividend+1
  4993  0E1C  0022               	movlb	2	; select bank2
  4994  0E1D  0862               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
  4995  0E1E  0020               	movlb	0	; select bank0
  4996  0E1F  00A8               	movwf	___aldiv@dividend
  4997  0E20  3186  267E  3188   	fcall	___aldiv
  4998  0E23  0825               	movf	?___aldiv+1,w
  4999  0E24  0023               	movlb	3	; select bank3
  5000  0E25  00E1               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384)
  5001  0E26  0020               	movlb	0	; select bank0
  5002  0E27  0824               	movf	?___aldiv,w
  5003  0E28  0023               	movlb	3	; select bank3
  5004  0E29  00E0               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384)
  5005  0E2A  0021               	movlb	1	; select bank1
  5006  0E2B  085E               	movf	_ui8_Kp_mat^(0+128),w
  5007  0E2C  0020               	movlb	0	; select bank0
  5008  0E2D  00A4               	movwf	___wmul@multiplier
  5009  0E2E  01A5               	clrf	___wmul@multiplier+1
  5010  0E2F  2796  3188         	fcall	PL36	;call to abstracted procedure
  5011  0E31  2149  3188         	fcall	___wmul
  5012  0E33  0824               	movf	?___wmul,w
  5013  0E34  0023               	movlb	3	; select bank3
  5014  0E35  07E0               	addwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),f
  5015  0E36  0020               	movlb	0	; select bank0
  5016  0E37  0825               	movf	?___wmul+1,w
  5017  0E38  0023               	movlb	3	; select bank3
  5018  0E39  3DE1               	addwfc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),f
  5019                           
  5020                           ;BVH2_Appl_Layer.c: 1632: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
  5021  0E3A  0861               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),w
  5022  0E3B  27A7  3188         	fcall	PL52	;call to abstracted procedure
  5023  0E3D  1D03               	skipz
  5024  0E3E  2E42               	goto	u8265
  5025  0E3F  3001               	movlw	1
  5026  0E40  0023               	movlb	3	; select bank3
  5027  0E41  0260               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),w
  5028  0E42                     u8265:	
  5029  0E42  1C03               	skipc
  5030  0E43  2E4C               	goto	l1573
  5031  0E44  3000               	movlw	0
  5032  0E45  0023               	movlb	3	; select bank3
  5033  0E46  0261               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),w
  5034  0E47  30CB               	movlw	203
  5035  0E48  1903               	skipnz
  5036  0E49  0260               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),w
  5037  0E4A  1803               	skipnc
  5038  0E4B  2E5E               	goto	l9799
  5039  0E4C                     l1573:	
  5040  0E4C  0023               	movlb	3	; select bank3
  5041  0E4D  1BE1               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),7
  5042  0E4E  2E5B               	goto	l9797
  5043  0E4F  3000               	movlw	0
  5044  0E50  0261               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),w
  5045  0E51  3028               	movlw	40
  5046  0E52  1903               	skipnz
  5047  0E53  0260               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),w
  5048  0E54  1C03               	skipc
  5049  0E55  2E5B               	goto	l9797
  5050  0E56  0861               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),w
  5051  0E57  00C7               	movwf	(_BVH2_Appl_Layer$1044+1)^(0+384)
  5052  0E58  0860               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),w
  5053  0E59  00C6               	movwf	_BVH2_Appl_Layer$1044^(0+384)
  5054  0E5A  2E5E               	goto	l9799
  5055  0E5B                     l9797:	
  5056  0E5B  3028               	movlw	40
  5057  0E5C  00C6               	movwf	_BVH2_Appl_Layer$1044^(0+384)
  5058  0E5D  01C7               	clrf	(_BVH2_Appl_Layer$1044+1)^(0+384)
  5059  0E5E                     l9799:	
  5060                           
  5061                           ;BVH2_Appl_Layer.c: 1633: };BVH2_Appl_Layer.c: 1634: };BVH2_Appl_Layer.c: 1639: if (Sb1_
      +                          Logical_Operator3){
  5062  0E5E  0023               	movlb	3	; select bank3
  5063  0E5F  085D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+384),w
  5064  0E60  1903               	btfsc	3,2
  5065  0E61  2E66               	goto	l9803
  5066                           
  5067                           ;BVH2_Appl_Layer.c: 1640: ui16_duty_cycle_mat = 0;
  5068  0E62  0022               	movlb	2	; select bank2
  5069  0E63  01B5               	clrf	_ui16_duty_cycle_mat^(0+256)
  5070  0E64  01B6               	clrf	(_ui16_duty_cycle_mat+1)^(0+256)
  5071                           
  5072                           ;BVH2_Appl_Layer.c: 1641: }
  5073  0E65  2E6B               	goto	l1579
  5074  0E66                     l9803:	
  5075                           
  5076                           ;BVH2_Appl_Layer.c: 1642: else {;BVH2_Appl_Layer.c: 1643: ui16_duty_cycle_mat = ui16_Spe
      +                          ed_demand_mat;
  5077  0E66  0022               	movlb	2	; select bank2
  5078  0E67  082C               	movf	(_ui16_Speed_demand_mat+1)^(0+256),w
  5079  0E68  00B6               	movwf	(_ui16_duty_cycle_mat+1)^(0+256)
  5080  0E69  082B               	movf	_ui16_Speed_demand_mat^(0+256),w
  5081  0E6A  00B5               	movwf	_ui16_duty_cycle_mat^(0+256)
  5082  0E6B                     l1579:	
  5083                           ;BVH2_Appl_Layer.c: 1644: };BVH2_Appl_Layer.c: 1647: bl_Pumpoff_Alarm = Sb1_Logical_Oper
      +                          ator2;
  5084                           
  5085                           
  5086                           ;BVH2_Appl_Layer.c: 1648: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
  5087  0E6B  0023               	movlb	3	; select bank3
  5088  0E6C  0859               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+384),w
  5089  0E6D  0022               	movlb	2	; select bank2
  5090  0E6E  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
  5091                           
  5092                           ;BVH2_Appl_Layer.c: 1652: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<;BVH2_Appl_Layer.c: 1653: 3));
  5093  0E6F  082E               	movf	(_ui8_Ki_mat+1)^(0+256),w
  5094  0E70  0020               	movlb	0	; select bank0
  5095  0E71  00A5               	movwf	___wmul@multiplier+1
  5096  0E72  0022               	movlb	2	; select bank2
  5097  0E73  082D               	movf	_ui8_Ki_mat^(0+256),w
  5098  0E74  0020               	movlb	0	; select bank0
  5099  0E75  00A4               	movwf	___wmul@multiplier
  5100  0E76  2796  3188         	fcall	PL36	;call to abstracted procedure
  5101  0E78  2149  3188         	fcall	___wmul
  5102  0E7A  0824               	movf	?___wmul,w
  5103  0E7B  00B2               	movwf	??_BVH2_Appl_Layer
  5104  0E7C  0825               	movf	?___wmul+1,w
  5105  0E7D  00B3               	movwf	??_BVH2_Appl_Layer+1
  5106  0E7E  35B2               	lslf	??_BVH2_Appl_Layer,f
  5107  0E7F  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
  5108  0E80  35B2               	lslf	??_BVH2_Appl_Layer,f
  5109  0E81  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
  5110  0E82  35B2               	lslf	??_BVH2_Appl_Layer,f
  5111  0E83  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
  5112  0E84  0832               	movf	??_BVH2_Appl_Layer,w
  5113  0E85  00B4               	movwf	??_BVH2_Appl_Layer+2
  5114  0E86  0833               	movf	??_BVH2_Appl_Layer+1,w
  5115  0E87  00B5               	movwf	??_BVH2_Appl_Layer+3
  5116  0E88  3000               	movlw	0
  5117  0E89  1BB5               	btfsc	??_BVH2_Appl_Layer+3,7
  5118  0E8A  30FF               	movlw	255
  5119  0E8B  00B6               	movwf	??_BVH2_Appl_Layer+4
  5120  0E8C  00B7               	movwf	??_BVH2_Appl_Layer+5
  5121  0E8D  0834               	movf	??_BVH2_Appl_Layer+2,w
  5122  0E8E  0022               	movlb	2	; select bank2
  5123  0E8F  07E2               	addwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),f
  5124  0E90  0020               	movlb	0	; select bank0
  5125  0E91  0835               	movf	??_BVH2_Appl_Layer+3,w
  5126  0E92  0022               	movlb	2	; select bank2
  5127  0E93  3DE3               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),f
  5128  0E94  0020               	movlb	0	; select bank0
  5129  0E95  0836               	movf	??_BVH2_Appl_Layer+4,w
  5130  0E96  0022               	movlb	2	; select bank2
  5131  0E97  3DE4               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),f
  5132  0E98  0020               	movlb	0	; select bank0
  5133  0E99  0837               	movf	??_BVH2_Appl_Layer+5,w
  5134  0E9A  0022               	movlb	2	; select bank2
  5135  0E9B  3DE5               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),f
  5136                           
  5137                           ;BVH2_Appl_Layer.c: 1656: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
  5138  0E9C  1BE5               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
  5139  0E9D  2EA9               	goto	l9809
  5140  0E9E  0865               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
  5141  0E9F  1D03               	btfss	3,2
  5142  0EA0  2EDA               	goto	l9815
  5143  0EA1  3041               	movlw	65
  5144  0EA2  0262               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
  5145  0EA3  3077               	movlw	119
  5146  0EA4  3B63               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
  5147  0EA5  3002               	movlw	2
  5148  0EA6  3B64               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
  5149  0EA7  1803               	btfsc	3,0
  5150  0EA8  2EDA               	goto	l9815
  5151  0EA9                     l9809:	
  5152  0EA9  1BE5               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
  5153  0EAA  2EC5               	goto	l9813
  5154  0EAB  0865               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
  5155  0EAC  1D03               	btfss	3,2
  5156  0EAD  2EB5               	goto	l9811
  5157  0EAE  0864               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
  5158  0EAF  1D03               	btfss	3,2
  5159  0EB0  2EB5               	goto	l9811
  5160  0EB1  307D               	movlw	125
  5161  0EB2  0263               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
  5162  0EB3  1C03               	btfss	3,0
  5163  0EB4  2EC5               	goto	l9813
  5164  0EB5                     l9811:	
  5165  0EB5  0865               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
  5166  0EB6  0023               	movlb	3	; select bank3
  5167  0EB7  00CB               	movwf	(_BVH2_Appl_Layer$1045+3)^(0+384)
  5168  0EB8  0022               	movlb	2	; select bank2
  5169  0EB9  0864               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
  5170  0EBA  0023               	movlb	3	; select bank3
  5171  0EBB  00CA               	movwf	(_BVH2_Appl_Layer$1045+2)^(0+384)
  5172  0EBC  0022               	movlb	2	; select bank2
  5173  0EBD  0863               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
  5174  0EBE  0023               	movlb	3	; select bank3
  5175  0EBF  00C9               	movwf	(_BVH2_Appl_Layer$1045+1)^(0+384)
  5176  0EC0  0022               	movlb	2	; select bank2
  5177  0EC1  0862               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
  5178  0EC2  0023               	movlb	3	; select bank3
  5179  0EC3  00C8               	movwf	_BVH2_Appl_Layer$1045^(0+384)
  5180  0EC4  2ECB               	goto	l1587
  5181  0EC5                     l9813:	
  5182  0EC5  0023               	movlb	3	; select bank3
  5183  0EC6  307D               	movlw	125
  5184  0EC7  01CB               	clrf	(_BVH2_Appl_Layer$1045+3)^(0+384)
  5185  0EC8  01CA               	clrf	(_BVH2_Appl_Layer$1045+2)^(0+384)
  5186  0EC9  00C9               	movwf	(_BVH2_Appl_Layer$1045+1)^(0+384)
  5187  0ECA  01C8               	clrf	_BVH2_Appl_Layer$1045^(0+384)
  5188  0ECB                     l1587:	
  5189  0ECB  084B               	movf	(_BVH2_Appl_Layer$1045+3)^(0+384),w
  5190  0ECC  0022               	movlb	2	; select bank2
  5191  0ECD  00E5               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
  5192  0ECE  0023               	movlb	3	; select bank3
  5193  0ECF  084A               	movf	(_BVH2_Appl_Layer$1045+2)^(0+384),w
  5194  0ED0  0022               	movlb	2	; select bank2
  5195  0ED1  00E4               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
  5196  0ED2  0023               	movlb	3	; select bank3
  5197  0ED3  0849               	movf	(_BVH2_Appl_Layer$1045+1)^(0+384),w
  5198  0ED4  0022               	movlb	2	; select bank2
  5199  0ED5  00E3               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
  5200  0ED6  0023               	movlb	3	; select bank3
  5201  0ED7  0848               	movf	_BVH2_Appl_Layer$1045^(0+384),w
  5202  0ED8  0022               	movlb	2	; select bank2
  5203  0ED9  2EE0               	goto	L26
  5204  0EDA                     l9815:	
  5205  0EDA  3002               	movlw	2
  5206  0EDB  01E5               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
  5207  0EDC  00E4               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
  5208  0EDD  3077               	movlw	119
  5209  0EDE  00E3               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
  5210  0EDF  3040               	movlw	64
  5211  0EE0                     L26:	
  5212  0EE0  00E2               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
  5213                           
  5214                           ;BVH2_Appl_Layer.c: 1659: Sb1_BVH2_Appl_Layer_FirstRun = 0;
  5215  0EE1  01ED               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
  5216  0EE2  0008               	return
  5217  0EE3                     __end_of_BVH2_Appl_Layer:	
  5218  0EE3                     __ptext34:	
  5219 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
  5220 ;; Defined at:
  5221 ;;		line 1683 in file "../T_Link/BVH2_Appl_Layer.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;		None
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;		None
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  1    wreg      void 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0
  5230 ;; Tracked objects:
  5231 ;;		On entry : 1F/1
  5232 ;;		On exit  : 1F/1
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5235 ;;      Params:         0       0       0       0       0       0       0       0
  5236 ;;      Locals:         0       0       0       0       0       0       0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0       0
  5238 ;;      Totals:         0       0       0       0       0       0       0       0
  5239 ;;Total ram usage:        0 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    3
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_BVH2_Appl_Layer
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           
  5250                           ;psect for function _Cb1_Current_An___High_node_fcn1
  5251  0EE3                     _Cb1_Current_An___High_node_fcn1:	
  5252                           
  5253                           ;BVH2_Appl_Layer.c: 1687: if (bool_mat_currAlarm_bldc) {
  5254                           
  5255                           ;incstack = 0
  5256                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
  5257  0EE3  085D               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  5258  0EE4  1903               	btfsc	3,2
  5259  0EE5  2EF2               	goto	l7371
  5260                           
  5261                           ;BVH2_Appl_Layer.c: 1689: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1690: (UInt8)2;
  5262  0EE6  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  5263  0EE7  39F0               	andlw	-16
  5264  0EE8  3802               	iorlw	2
  5265                           
  5266                           ;BVH2_Appl_Layer.c: 1691: Cb1_StateCnt = 0 ;
  5267  0EE9  27BC  3188         	fcall	PL82	;call to abstracted procedure
  5268  0EEB  2EEE               	goto	l7369
  5269  0EEC                     l7373:	
  5270                           
  5271                           ;BVH2_Appl_Layer.c: 1697: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1698: (UInt8)5;
  5272                           
  5273                           ;BVH2_Appl_Layer.c: 1699: Cb1_oShutoff = 0;
  5274                           
  5275                           ;BVH2_Appl_Layer.c: 1700: Cb1_oCurrentAlarm = 0;
  5276  0EEC  279F               	fcall	PL48	;call to abstracted procedure
  5277                           
  5278                           ;BVH2_Appl_Layer.c: 1701: Cb1_RestartCounter = 0 ;
  5279  0EED  01CE               	clrf	_Cb1_RestartCounter^(0+128)
  5280  0EEE                     l7369:	
  5281                           
  5282                           ;BVH2_Appl_Layer.c: 1692: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
  5283  0EEE  3030               	movlw	48
  5284  0EEF  0021               	movlb	1	; select bank1
  5285  0EF0  04CD               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
  5286                           
  5287                           ;BVH2_Appl_Layer.c: 1693: }
  5288  0EF1  0008               	return
  5289  0EF2                     l7371:	
  5290                           
  5291                           ;BVH2_Appl_Layer.c: 1694: else {;BVH2_Appl_Layer.c: 1695: if (Cb1_StateCnt > 100) {
  5292  0EF2  3000               	movlw	0
  5293  0EF3  0020               	movlb	0	; select bank0
  5294  0EF4  0241               	subwf	_Cb1_StateCnt+1,w
  5295  0EF5  3065               	movlw	101
  5296  0EF6  1903               	skipnz
  5297  0EF7  0240               	subwf	_Cb1_StateCnt,w
  5298  0EF8  1803               	btfsc	3,0
  5299  0EF9  2EEC               	goto	l7373
  5300                           
  5301                           ;BVH2_Appl_Layer.c: 1704: else {;BVH2_Appl_Layer.c: 1705: SIBFS_Current_Analysis_High_b.
      +                          Cb1_glflag = 1 ;
  5302  0EFA  0021               	movlb	1	; select bank1
  5303  0EFB  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  5304  0EFC  39CF               	andlw	-49
  5305  0EFD  3810               	iorlw	16
  5306  0EFE  00CD               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  5307  0EFF  0008               	return
  5308  0F00                     __end_of_Cb1_Current_An___High_node_fcn1:	
  5309  0F00                     __ptext32:	
  5310 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
  5311 ;; Defined at:
  5312 ;;		line 1848 in file "../T_Link/BVH2_Appl_Layer.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  1    wreg      void 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 1F/1
  5323 ;;		On exit  : 1F/1
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5326 ;;      Params:         0       0       0       0       0       0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    3
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_BVH2_Appl_Layer
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
  5342  0F00                     _Cb44_Pic_etat_monitor_node_fcn1:	
  5343                           
  5344                           ;BVH2_Appl_Layer.c: 1858: else {;BVH2_Appl_Layer.c: 1859: if (Cb44_StateCnt > 5) {
  5345                           
  5346                           ;BVH2_Appl_Layer.c: 1852: if (bool_mat_pic_etat) {
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
  5350  0F00  3000               	movlw	0
  5351  0F01  0020               	movlb	0	; select bank0
  5352  0F02  023F               	subwf	_Cb44_StateCnt+1,w
  5353  0F03  3006               	movlw	6
  5354  0F04  1903               	skipnz
  5355  0F05  023E               	subwf	_Cb44_StateCnt,w
  5356  0F06  1C03               	skipc
  5357  0F07  2F11               	goto	l7221
  5358                           
  5359                           ;BVH2_Appl_Layer.c: 1861: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
  5360  0F08  0021               	movlb	1	; select bank1
  5361  0F09  084B               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  5362  0F0A  39F8               	andlw	-8
  5363  0F0B  3803               	iorlw	3
  5364  0F0C  00CB               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  5365  0F0D  3018               	movlw	24
  5366                           
  5367                           ;BVH2_Appl_Layer.c: 1863: Cb44_oAlarm = 0;
  5368  0F0E  01C3               	clrf	_Cb44_oShutoff^(0+128)
  5369                           
  5370                           ;BVH2_Appl_Layer.c: 1864: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
  5371  0F0F  04CB               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
  5372                           
  5373                           ;BVH2_Appl_Layer.c: 1865: }
  5374  0F10  0008               	return
  5375  0F11                     l7221:	
  5376                           
  5377                           ;BVH2_Appl_Layer.c: 1866: else {;BVH2_Appl_Layer.c: 1867: SIBFS_Pic_etat_monitor_b.Cb44_
      +                          glflag = 1 ;
  5378  0F11  0021               	movlb	1	; select bank1
  5379  0F12  084B               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  5380  0F13  39E7               	andlw	-25
  5381  0F14  3808               	iorlw	8
  5382  0F15  00CB               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  5383  0F16  0008               	return
  5384  0F17                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
  5385  0F17                     __ptext29:	
  5386 ;; *************** function ___lmul *****************
  5387 ;; Defined at:
  5388 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5391 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  product         4   12[BANK0 ] unsigned long 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  4    4[BANK0 ] unsigned long 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0
  5398 ;; Tracked objects:
  5399 ;;		On entry : 1F/0
  5400 ;;		On exit  : 1F/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5403 ;;      Params:         0       8       0       0       0       0       0       0
  5404 ;;      Locals:         0       4       0       0       0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0
  5406 ;;      Totals:         0      12       0       0       0       0       0       0
  5407 ;;Total ram usage:       12 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    3
  5410 ;; This function calls:
  5411 ;;		Nothing
  5412 ;; This function is called by:
  5413 ;;		_BVH2_Appl_Layer
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           
  5418                           ;psect for function ___lmul
  5419  0F17                     ___lmul:	
  5420                           
  5421                           ;incstack = 0
  5422                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5423  0F17  01AC               	clrf	___lmul@product
  5424  0F18  01AD               	clrf	___lmul@product+1
  5425  0F19  01AE               	clrf	___lmul@product+2
  5426  0F1A  01AF               	clrf	___lmul@product+3
  5427  0F1B                     l1845:	
  5428  0F1B  1C24               	btfss	___lmul@multiplier,0
  5429  0F1C  2F25               	goto	l7405
  5430  0F1D  0828               	movf	___lmul@multiplicand,w
  5431  0F1E  07AC               	addwf	___lmul@product,f
  5432  0F1F  0829               	movf	___lmul@multiplicand+1,w
  5433  0F20  3DAD               	addwfc	___lmul@product+1,f
  5434  0F21  082A               	movf	___lmul@multiplicand+2,w
  5435  0F22  3DAE               	addwfc	___lmul@product+2,f
  5436  0F23  082B               	movf	___lmul@multiplicand+3,w
  5437  0F24  3DAF               	addwfc	___lmul@product+3,f
  5438  0F25                     l7405:	
  5439  0F25  35A8               	lslf	___lmul@multiplicand,f
  5440  0F26  0DA9               	rlf	___lmul@multiplicand+1,f
  5441  0F27  0DAA               	rlf	___lmul@multiplicand+2,f
  5442  0F28  0DAB               	rlf	___lmul@multiplicand+3,f
  5443  0F29  36A7               	lsrf	___lmul@multiplier+3,f
  5444  0F2A  0CA6               	rrf	___lmul@multiplier+2,f
  5445  0F2B  0CA5               	rrf	___lmul@multiplier+1,f
  5446  0F2C  0CA4               	rrf	___lmul@multiplier,f
  5447  0F2D  0827               	movf	___lmul@multiplier+3,w
  5448  0F2E  0426               	iorwf	___lmul@multiplier+2,w
  5449  0F2F  0425               	iorwf	___lmul@multiplier+1,w
  5450  0F30  0424               	iorwf	___lmul@multiplier,w
  5451  0F31  1D03               	skipz
  5452  0F32  2F1B               	goto	l1845
  5453  0F33  082F               	movf	___lmul@product+3,w
  5454  0F34  00A7               	movwf	?___lmul+3
  5455  0F35  082E               	movf	___lmul@product+2,w
  5456  0F36  00A6               	movwf	?___lmul+2
  5457  0F37  082D               	movf	___lmul@product+1,w
  5458  0F38  00A5               	movwf	?___lmul+1
  5459  0F39  082C               	movf	___lmul@product,w
  5460  0F3A  00A4               	movwf	?___lmul
  5461  0F3B  0008               	return
  5462  0F3C                     __end_of___lmul:	
  5463  0F3C                     __ptext23:	
  5464 ;; *************** function _Get_Analog_Value *****************
  5465 ;; Defined at:
  5466 ;;		line 442 in file "../adc.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 1F/1
  5477 ;;		On exit  : 1F/2
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5480 ;;      Params:         0       0       0       0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0
  5483 ;;      Totals:         0       0       0       0       0       0       0       0
  5484 ;;Total ram usage:        0 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    4
  5487 ;; This function calls:
  5488 ;;		_FILTER_IPhase
  5489 ;;		_FILTER_Temp
  5490 ;;		_FILTER_Ubat
  5491 ;; This function is called by:
  5492 ;;		_main
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function _Get_Analog_Value
  5498  0F3C                     _Get_Analog_Value:	
  5499                           
  5500                           ;adc.c: 446: FILTER_Ubat( );
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5504  0F3C  3197  2732  3188   	fcall	_FILTER_Ubat
  5505                           
  5506                           ;adc.c: 447: FILTER_IPhase( );
  5507  0F3F  3187  270C         	fcall	_FILTER_IPhase
  5508                           
  5509                           ;adc.c: 448: FILTER_Temp( );
  5510  0F41  3186  2EEA         	ljmp	l5119
  5511  0F43                     __end_of_Get_Analog_Value:	
  5512  0F43                     __ptext22:	
  5513 ;; *************** function _InitMotorStop *****************
  5514 ;; Defined at:
  5515 ;;		line 2222 in file "../bldc.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;		None
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		status,2
  5524 ;; Tracked objects:
  5525 ;;		On entry : 1F/2
  5526 ;;		On exit  : 1F/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5529 ;;      Params:         0       0       0       0       0       0       0       0
  5530 ;;      Locals:         0       0       0       0       0       0       0       0
  5531 ;;      Temps:          0       0       0       0       0       0       0       0
  5532 ;;      Totals:         0       0       0       0       0       0       0       0
  5533 ;;Total ram usage:        0 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    3
  5536 ;; This function calls:
  5537 ;;		Nothing
  5538 ;; This function is called by:
  5539 ;;		_main
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _InitMotorStop
  5545  0F43                     _InitMotorStop:	
  5546                           
  5547                           ;bldc.c: 2227: if( 1 == MotorFlags.bits.B6 )
  5548                           
  5549                           ;incstack = 0
  5550                           ; Regs used in _InitMotorStop: [status,2]
  5551  0F43  0020               	movlb	0	; select bank0
  5552  0F44  1F4E               	btfss	_MotorFlags,6
  5553  0F45  0008               	return
  5554                           
  5555                           ;bldc.c: 2230: {;bldc.c: 2232: LATC1 = 0;
  5556  0F46  0022               	movlb	2	; select bank2
  5557  0F47  108E               	bcf	14,1	;volatile
  5558                           
  5559                           ;bldc.c: 2233: LATC3 = 0;
  5560  0F48  118E               	bcf	14,3	;volatile
  5561                           
  5562                           ;bldc.c: 2234: LATC4 = 0;
  5563  0F49  120E               	bcf	14,4	;volatile
  5564                           
  5565                           ;bldc.c: 2236: CCP1ASE = 0;
  5566  0F4A  0025               	movlb	5	; select bank5
  5567  0F4B  1395               	bcf	21,7	;volatile
  5568                           
  5569                           ;bldc.c: 2237: CCPR1L = 0;
  5570  0F4C  0191               	clrf	17	;volatile
  5571                           
  5572                           ;bldc.c: 2238: MotorFlags.bits.B6 = 0;
  5573  0F4D  0020               	movlb	0	; select bank0
  5574  0F4E  134E               	bcf	_MotorFlags,6
  5575                           
  5576                           ;bldc.c: 2239: MotorFlags.bits.B7 = 0;
  5577  0F4F  13CE               	bcf	_MotorFlags,7
  5578  0F50  0008               	return
  5579  0F51                     __end_of_InitMotorStop:	
  5580  0F51                     PL6:	
  5581  0F51  0020               	movlb	0	; select bank0
  5582  0F52  00B3               	movwf	??_BVH2_Appl_Layer+1
  5583  0F53  0021               	movlb	1	; select bank1
  5584  0F54  082B               	movf	(_ui16_mat_Current+1)^(0+128),w
  5585  0F55  0020               	movlb	0	; select bank0
  5586  0F56  0233               	subwf	??_BVH2_Appl_Layer+1,w
  5587  0F57  1D03               	skipz
  5588  0F58  0008               	return
  5589  0F59  0021               	movlb	1	; select bank1
  5590  0F5A  082A               	movf	_ui16_mat_Current^(0+128),w
  5591  0F5B  0020               	movlb	0	; select bank0
  5592  0F5C  0232               	subwf	??_BVH2_Appl_Layer,w
  5593  0F5D  0008               	return
  5594  0F5E                     __end_ofPL6:	
  5595  0F5E                     PL8:	
  5596  0F5E  0022               	movlb	2	; select bank2
  5597  0F5F  086E               	movf	_ui16_Current_Thresh^(0+256),w
  5598  0F60  3EFE               	addlw	254
  5599  0F61  0020               	movlb	0	; select bank0
  5600  0F62  00B2               	movwf	??_BVH2_Appl_Layer
  5601  0F63  30FF               	movlw	255
  5602  0F64  0022               	movlb	2	; select bank2
  5603  0F65  3D6F               	addwfc	(_ui16_Current_Thresh+1)^(0+256),w
  5604  0F66  0008               	return
  5605  0F67                     __end_ofPL8:	
  5606  0F67                     PL10:	
  5607  0F67  0022               	movlb	2	; select bank2
  5608  0F68  086E               	movf	_ui16_Current_Thresh^(0+256),w
  5609  0F69  3E02               	addlw	2
  5610  0F6A  0020               	movlb	0	; select bank0
  5611  0F6B  00B2               	movwf	??_BVH2_Appl_Layer
  5612  0F6C  3000               	movlw	0
  5613  0F6D  0022               	movlb	2	; select bank2
  5614  0F6E  3D6F               	addwfc	(_ui16_Current_Thresh+1)^(0+256),w
  5615  0F6F  0020               	movlb	0	; select bank0
  5616  0F70  00B3               	movwf	??_BVH2_Appl_Layer+1
  5617  0F71  0021               	movlb	1	; select bank1
  5618  0F72  022B               	subwf	(_ui16_mat_Current+1)^(0+128),w
  5619  0F73  1D03               	skipz
  5620  0F74  0008               	return
  5621  0F75  0020               	movlb	0	; select bank0
  5622  0F76  0832               	movf	??_BVH2_Appl_Layer,w
  5623  0F77  0021               	movlb	1	; select bank1
  5624  0F78  022A               	subwf	_ui16_mat_Current^(0+128),w
  5625  0F79  0008               	return
  5626  0F7A                     __end_ofPL10:	
  5627  0F7A                     PL30:	
  5628  0F7A  0021               	movlb	1	; select bank1
  5629  0F7B  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  5630  0F7C  39F8               	andlw	-8
  5631  0F7D  3805               	iorlw	5
  5632  0F7E  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  5633  0F7F  0020               	movlb	0	; select bank0
  5634  0F80  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  5635  0F81  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  5636  0F82  0022               	movlb	2	; select bank2
  5637  0F83  01A3               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256)
  5638  0F84  01A4               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256)
  5639  0F85  0021               	movlb	1	; select bank1
  5640  0F86  01B6               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  5641  0F87  0022               	movlb	2	; select bank2
  5642  0F88  0008               	return
  5643  0F89                     __end_ofPL30:	
  5644  0F89                     PL32:	
  5645  0F89  0021               	movlb	1	; select bank1
  5646  0F8A  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  5647  0F8B  39F8               	andlw	-8
  5648  0F8C  3804               	iorlw	4
  5649  0F8D  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  5650  0F8E  0020               	movlb	0	; select bank0
  5651  0F8F  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  5652  0F90  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  5653  0F91  0021               	movlb	1	; select bank1
  5654  0F92  01B6               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  5655  0F93  0AB6               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  5656  0F94  0022               	movlb	2	; select bank2
  5657  0F95  0008               	return
  5658  0F96                     __end_ofPL32:	
  5659  0F96                     PL36:	
  5660  0F96  0023               	movlb	3	; select bank3
  5661  0F97  085B               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+384),w
  5662  0F98  0020               	movlb	0	; select bank0
  5663  0F99  00A7               	movwf	___wmul@multiplicand+1
  5664  0F9A  0023               	movlb	3	; select bank3
  5665  0F9B  085A               	movf	BVH2_Appl_Layer@Sb2_Error^(0+384),w
  5666  0F9C  0020               	movlb	0	; select bank0
  5667  0F9D  00A6               	movwf	___wmul@multiplicand
  5668  0F9E  0008               	return
  5669  0F9F                     __end_ofPL36:	
  5670  0F9F                     PL48:	
  5671  0F9F  0021               	movlb	1	; select bank1
  5672  0FA0  084D               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  5673  0FA1  39F0               	andlw	-16
  5674  0FA2  3805               	iorlw	5
  5675  0FA3  00CD               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  5676  0FA4  01C9               	clrf	_Cb1_oShutoff^(0+128)
  5677  0FA5  01CA               	clrf	_Cb1_oCurrentAlarm^(0+128)
  5678  0FA6  0008               	return
  5679  0FA7                     __end_ofPL48:	
  5680  0FA7                     PL52:	
  5681  0FA7  3A80               	xorlw	128
  5682  0FA8  0020               	movlb	0	; select bank0
  5683  0FA9  00B2               	movwf	??_BVH2_Appl_Layer
  5684  0FAA  3080               	movlw	128
  5685  0FAB  0232               	subwf	??_BVH2_Appl_Layer,w
  5686  0FAC  0008               	return
  5687  0FAD                     __end_ofPL52:	
  5688  0FAD                     PL60:	
  5689  0FAD  0020               	movlb	0	; select bank0
  5690  0FAE  00B2               	movwf	??_BVH2_Appl_Layer
  5691  0FAF  0CB2               	rrf	??_BVH2_Appl_Layer,f
  5692  0FB0  0C32               	rrf	??_BVH2_Appl_Layer,w
  5693  0FB1  3903               	andlw	3
  5694  0FB2  3A03               	xorlw	3
  5695  0FB3  0008               	return
  5696  0FB4                     __end_ofPL60:	
  5697  0FB4                     PL72:	
  5698  0FB4  3001               	movlw	1
  5699  0FB5  0021               	movlb	1	; select bank1
  5700  0FB6  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
  5701  0FB7  3491               	retlw	145
  5702  0FB8                     __end_ofPL72:	
  5703  0FB8                     PL78:	
  5704  0FB8  3000               	movlw	0
  5705  0FB9  0020               	movlb	0	; select bank0
  5706  0FBA  0243               	subwf	_ui16_Speed_mat+1,w
  5707  0FBB  3405               	retlw	5
  5708  0FBC                     __end_ofPL78:	
  5709  0FBC                     PL82:	
  5710  0FBC  00CD               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  5711  0FBD  0020               	movlb	0	; select bank0
  5712  0FBE  01C0               	clrf	_Cb1_StateCnt
  5713  0FBF  01C1               	clrf	_Cb1_StateCnt+1
  5714  0FC0  0008               	return
  5715  0FC1                     __end_ofPL82:	
  5716  0FC1                     __ptext31:	
  5717 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
  5718 ;; Defined at:
  5719 ;;		line 1889 in file "../T_Link/BVH2_Appl_Layer.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;		None
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5728 ;; Tracked objects:
  5729 ;;		On entry : 1E/1
  5730 ;;		On exit  : 1F/1
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5733 ;;      Params:         0       0       0       0       0       0       0       0
  5734 ;;      Locals:         0       0       0       0       0       0       0       0
  5735 ;;      Temps:          0       0       0       0       0       0       0       0
  5736 ;;      Totals:         0       0       0       0       0       0       0       0
  5737 ;;Total ram usage:        0 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    3
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_BVH2_Appl_Layer
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           
  5748                           ;psect for function _Cb56_UbatHandling_node_fcn2
  5749  0FC1                     _Cb56_UbatHandling_node_fcn2:	
  5750                           
  5751                           ;BVH2_Appl_Layer.c: 1892: if (((UInt8)ui8_BattVolt_mat) > 147) {
  5752                           
  5753                           ;incstack = 0
  5754                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
  5755  0FC1  3094               	movlw	148
  5756  0FC2  0021               	movlb	1	; select bank1
  5757  0FC3  022C               	subwf	_ui8_BattVolt_mat^(0+128),w
  5758  0FC4  1803               	btfsc	3,0
  5759  0FC5  2FCD               	goto	l7345
  5760  0FC6  2FE5               	goto	l7351
  5761  0FC7                     l1630:	
  5762                           ;BVH2_Appl_Layer.c: 1895: case 2: {
  5763                           
  5764                           
  5765                           ;BVH2_Appl_Layer.c: 1896: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
  5766  0FC7  124C               	bcf	_SIBFS_UbatHandling_b,4
  5767                           
  5768                           ;BVH2_Appl_Layer.c: 1897: break;
  5769  0FC8  2FD7               	goto	l1631
  5770  0FC9                     l1632:	
  5771                           ;BVH2_Appl_Layer.c: 1898: };BVH2_Appl_Layer.c: 1899: case 3: {
  5772                           
  5773                           
  5774                           ;BVH2_Appl_Layer.c: 1900: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
  5775  0FC9  12CC               	bcf	_SIBFS_UbatHandling_b,5
  5776                           
  5777                           ;BVH2_Appl_Layer.c: 1901: break;
  5778  0FCA  2FD7               	goto	l1631
  5779  0FCB                     l1633:	
  5780                           ;BVH2_Appl_Layer.c: 1902: };BVH2_Appl_Layer.c: 1903: default: {
  5781                           
  5782                           
  5783                           ;BVH2_Appl_Layer.c: 1904: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
  5784  0FCB  134C               	bcf	_SIBFS_UbatHandling_b,6
  5785                           
  5786                           ;BVH2_Appl_Layer.c: 1905: };BVH2_Appl_Layer.c: 1906: }
  5787  0FCC  2FD7               	goto	l1631
  5788  0FCD                     l7345:	
  5789  0FCD  0020               	movlb	0	; select bank0
  5790  0FCE  084C               	movf	_SIBFS_UbatHandling_b,w
  5791  0FCF  3907               	andlw	7
  5792                           
  5793                           ; Switch size 1, requested type "space"
  5794                           ; Number of cases is 2, Range of values is 2 to 3
  5795                           ; switch strategies available:
  5796                           ; Name         Instructions Cycles
  5797                           ; simple_byte            7     4 (average)
  5798                           ; direct_byte           13     9 (fixed)
  5799                           ; jumptable            263     9 (fixed)
  5800                           ;	Chosen strategy is simple_byte
  5801  0FD0  3A02               	xorlw	2	; case 2
  5802  0FD1  1903               	skipnz
  5803  0FD2  2FC7               	goto	l1630
  5804  0FD3  3A01               	xorlw	1	; case 3
  5805  0FD4  1903               	skipnz
  5806  0FD5  2FC9               	goto	l1632
  5807  0FD6  2FCB               	goto	l1633
  5808  0FD7                     l1631:	
  5809                           
  5810                           ;BVH2_Appl_Layer.c: 1907: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
  5811  0FD7  164C               	bsf	_SIBFS_UbatHandling_b,4
  5812  0FD8                     L31:	
  5813                           
  5814                           ;BVH2_Appl_Layer.c: 1908: Cb56_odPumpOff = 1;
  5815  0FD8  0021               	movlb	1	; select bank1
  5816  0FD9  01C0               	clrf	_Cb56_odPumpOff^(0+128)
  5817  0FDA  0AC0               	incf	_Cb56_odPumpOff^(0+128),f
  5818                           
  5819                           ;BVH2_Appl_Layer.c: 1909: Cb56_odFixedValueSel = 0;
  5820  0FDB  01C1               	clrf	_Cb56_odFixedValueSel^(0+128)
  5821                           
  5822                           ;BVH2_Appl_Layer.c: 1910: Cb56_oUbat_Alarm_High = 1;
  5823  0FDC  01C2               	clrf	_Cb56_oUbat_Alarm_High^(0+128)
  5824  0FDD  0AC2               	incf	_Cb56_oUbat_Alarm_High^(0+128),f
  5825                           
  5826                           ;BVH2_Appl_Layer.c: 1911: }
  5827  0FDE  0008               	return
  5828  0FDF                     l1636:	
  5829                           ;BVH2_Appl_Layer.c: 1914: case 2: {
  5830                           
  5831                           
  5832                           ;BVH2_Appl_Layer.c: 1915: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
  5833  0FDF  124C               	bcf	_SIBFS_UbatHandling_b,4
  5834                           
  5835                           ;BVH2_Appl_Layer.c: 1916: break;
  5836  0FE0  2FEF               	goto	l7353
  5837  0FE1                     l1638:	
  5838                           ;BVH2_Appl_Layer.c: 1917: };BVH2_Appl_Layer.c: 1918: case 3: {
  5839                           
  5840                           
  5841                           ;BVH2_Appl_Layer.c: 1919: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
  5842  0FE1  12CC               	bcf	_SIBFS_UbatHandling_b,5
  5843                           
  5844                           ;BVH2_Appl_Layer.c: 1920: break;
  5845  0FE2  2FEF               	goto	l7353
  5846  0FE3                     l1639:	
  5847                           ;BVH2_Appl_Layer.c: 1921: };BVH2_Appl_Layer.c: 1922: default: {
  5848                           
  5849                           
  5850                           ;BVH2_Appl_Layer.c: 1923: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
  5851  0FE3  134C               	bcf	_SIBFS_UbatHandling_b,6
  5852                           
  5853                           ;BVH2_Appl_Layer.c: 1924: };BVH2_Appl_Layer.c: 1925: }
  5854  0FE4  2FEF               	goto	l7353
  5855  0FE5                     l7351:	
  5856  0FE5  0020               	movlb	0	; select bank0
  5857  0FE6  084C               	movf	_SIBFS_UbatHandling_b,w
  5858  0FE7  3907               	andlw	7
  5859                           
  5860                           ; Switch size 1, requested type "space"
  5861                           ; Number of cases is 2, Range of values is 2 to 3
  5862                           ; switch strategies available:
  5863                           ; Name         Instructions Cycles
  5864                           ; simple_byte            7     4 (average)
  5865                           ; direct_byte           13     9 (fixed)
  5866                           ; jumptable            263     9 (fixed)
  5867                           ;	Chosen strategy is simple_byte
  5868  0FE8  3A02               	xorlw	2	; case 2
  5869  0FE9  1903               	skipnz
  5870  0FEA  2FDF               	goto	l1636
  5871  0FEB  3A01               	xorlw	1	; case 3
  5872  0FEC  1903               	skipnz
  5873  0FED  2FE1               	goto	l1638
  5874  0FEE  2FE3               	goto	l1639
  5875  0FEF                     l7353:	
  5876                           
  5877                           ;BVH2_Appl_Layer.c: 1928: if (((UInt8)ui8_BattVolt_mat) < 45) {
  5878  0FEF  302D               	movlw	45
  5879  0FF0  0021               	movlb	1	; select bank1
  5880  0FF1  022C               	subwf	_ui8_BattVolt_mat^(0+128),w
  5881  0FF2  1803               	skipnc
  5882  0FF3  2FF7               	goto	l1640
  5883                           
  5884                           ;BVH2_Appl_Layer.c: 1930: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
  5885  0FF4  0020               	movlb	0	; select bank0
  5886  0FF5  16CC               	bsf	_SIBFS_UbatHandling_b,5
  5887  0FF6  2FD8               	goto	L31
  5888  0FF7                     l1640:	
  5889                           ;BVH2_Appl_Layer.c: 1931: Cb56_odPumpOff = 1;
  5890                           
  5891                           
  5892                           ;BVH2_Appl_Layer.c: 1935: else {;BVH2_Appl_Layer.c: 1937: SIBFS_UbatHandling_b.Cb60_Norm
      +                          alUbat = 1;
  5893                           
  5894                           ;BVH2_Appl_Layer.c: 1938: Cb56_odPumpOff = 0;
  5895                           
  5896                           ;BVH2_Appl_Layer.c: 1939: Cb56_odFixedValueSel = 0;
  5897                           
  5898                           ;BVH2_Appl_Layer.c: 1940: Cb56_oUbat_Alarm_High = 0;
  5899  0FF7  27F9               	fcall	PL56	;call to abstracted procedure
  5900  0FF8  0008               	return
  5901  0FF9                     __end_of_Cb56_UbatHandling_node_fcn2:	
  5902  0FF9                     PL56:	
  5903  0FF9  0020               	movlb	0	; select bank0
  5904  0FFA  174C               	bsf	_SIBFS_UbatHandling_b,6
  5905  0FFB  0021               	movlb	1	; select bank1
  5906  0FFC  01C0               	clrf	_Cb56_odPumpOff^(0+128)
  5907  0FFD  01C1               	clrf	_Cb56_odFixedValueSel^(0+128)
  5908  0FFE  01C2               	clrf	_Cb56_oUbat_Alarm_High^(0+128)
  5909  0FFF  0008               	return
  5910  1000                     __end_ofPL56:	
  5911                           
  5912                           	psect	bitbssBANK0
  5913  0298                     __pbitbssBANK0:	
  5914  0298                     _rising_bemf_flag:	
  5915  0298                     	ds	1
  5916                           
  5917                           	psect	bssBANK0
  5918  003C                     __pbssBANK0:	
  5919  003C                     BVH2_Appl_Layer@Cb24_StateCnt:	
  5920  003C                     	ds	2
  5921  003E                     _Cb44_StateCnt:	
  5922  003E                     	ds	2
  5923  0040                     _Cb1_StateCnt:	
  5924  0040                     	ds	2
  5925  0042                     _ui16_Speed_mat:	
  5926  0042                     	ds	2
  5927  0044                     _ui16_IPhase_bldc:	
  5928  0044                     	ds	2
  5929  0046                     _comm_time:	
  5930  0046                     	ds	2
  5931  0048                     _analog_value:	
  5932  0048                     	ds	2
  5933  004A                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  5934  004A                     	ds	1
  5935  004B                     _Cb34_idPWM:	
  5936  004B                     	ds	1
  5937  004C                     _SIBFS_UbatHandling_b:	
  5938  004C                     	ds	1
  5939  004D                     _ui8_Task_Cont100ms:	
  5940  004D                     	ds	1
  5941  004E                     _MotorFlags:	
  5942  004E                     	ds	1
  5943  004F                     _ui8_error_Flags:	
  5944  004F                     	ds	1
  5945  0050                     _windowPtr1:	
  5946  0050                     	ds	1
  5947  0051                     _ui16_Ubat_bldc:	
  5948  0051                     	ds	2
  5949                           
  5950                           	psect	bssBANK1
  5951  00A0                     __pbssBANK1:	
  5952  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  5953  00A0                     	ds	2
  5954  00A2                     BVH2_Appl_Layer@Cb19_Counter:	
  5955  00A2                     	ds	2
  5956  00A4                     _ui16_Capt_Val2:	
  5957  00A4                     	ds	2
  5958  00A6                     _ui16_Capt_Val1:	
  5959  00A6                     	ds	2
  5960  00A8                     _ui16_Capt_Val0:	
  5961  00A8                     	ds	2
  5962  00AA                     _ui16_mat_Current:	
  5963  00AA                     	ds	2
  5964  00AC                     _ui8_BattVolt_mat:	
  5965  00AC                     	ds	2
  5966  00AE                     _ui16_duty_cycle_BLDC:	
  5967  00AE                     	ds	2
  5968  00B0                     _ui16_Ubemf_bldc:	
  5969  00B0                     	ds	2
  5970  00B2                     _ui16_phase_advancement:	
  5971  00B2                     	ds	2
  5972  00B4                     _ui16_step_cnt:	
  5973  00B4                     	ds	2
  5974  00B6                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  5975  00B6                     	ds	1
  5976  00B7                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  5977  00B7                     	ds	1
  5978  00B8                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  5979  00B8                     	ds	1
  5980  00B9                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  5981  00B9                     	ds	1
  5982  00BA                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  5983  00BA                     	ds	1
  5984  00BB                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  5985  00BB                     	ds	1
  5986  00BC                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  5987  00BC                     	ds	1
  5988  00BD                     BVH2_Appl_Layer@Cb9_StateCnt:	
  5989  00BD                     	ds	1
  5990  00BE                     BVH2_Appl_Layer@Cb51_Counter:	
  5991  00BE                     	ds	1
  5992  00BF                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  5993  00BF                     	ds	1
  5994  00C0                     _Cb56_odPumpOff:	
  5995  00C0                     	ds	1
  5996  00C1                     _Cb56_odFixedValueSel:	
  5997  00C1                     	ds	1
  5998  00C2                     _Cb56_oUbat_Alarm_High:	
  5999  00C2                     	ds	1
  6000  00C3                     _Cb44_oShutoff:	
  6001  00C3                     	ds	1
  6002  00C4                     _Cb34_odPumpOff:	
  6003  00C4                     	ds	1
  6004  00C5                     _Cb34_odFixedValueSel:	
  6005  00C5                     	ds	1
  6006  00C6                     _Cb34_odFixedLowValueSel:	
  6007  00C6                     	ds	1
  6008  00C7                     _Cb34_oPWM_SC_Alarm:	
  6009  00C7                     	ds	1
  6010  00C8                     _Cb34_oPWM_Alarm:	
  6011  00C8                     	ds	1
  6012  00C9                     _Cb1_oShutoff:	
  6013  00C9                     	ds	1
  6014  00CA                     _Cb1_oCurrentAlarm:	
  6015  00CA                     	ds	1
  6016  00CB                     _SIBFS_Pic_etat_monitor_b:	
  6017  00CB                     	ds	1
  6018  00CC                     _SIBFS_PWM_Detection_b:	
  6019  00CC                     	ds	1
  6020  00CD                     _SIBFS_Current_Analysis_High_b:	
  6021  00CD                     	ds	1
  6022  00CE                     _Cb1_RestartCounter:	
  6023  00CE                     	ds	1
  6024  00CF                     _ui8_PWMin_failCnt:	
  6025  00CF                     	ds	1
  6026  00D0                     _ui8_PWMinDC_sav:	
  6027  00D0                     	ds	1
  6028  00D1                     _ui8_Duty_Cycle_In_Ratio:	
  6029  00D1                     	ds	1
  6030  00D2                     _ui8_Pulse_State:	
  6031  00D2                     	ds	1
  6032  00D3                     _ui8_PWMoutvalue:	
  6033  00D3                     	ds	1
  6034  00D4                     _ui8_PWM_FreqCnt:	
  6035  00D4                     	ds	1
  6036  00D5                     _ui8_lastTaskvalue:	
  6037  00D5                     	ds	1
  6038  00D6                     _ui8_Task_Cont5ms:	
  6039  00D6                     	ds	1
  6040  00D7                     _ui8_Task_Cont3ms:	
  6041  00D7                     	ds	1
  6042  00D8                     _bool_PWMin_Freq_err_Alarm:	
  6043  00D8                     	ds	1
  6044  00D9                     _bool_UbatAlarm:	
  6045  00D9                     	ds	1
  6046  00DA                     _bool_CPU_TempRedAlarm:	
  6047  00DA                     	ds	1
  6048  00DB                     _bool_PWMin_err_Alarm:	
  6049  00DB                     	ds	1
  6050  00DC                     _bool_ControlLoopMode:	
  6051  00DC                     	ds	1
  6052  00DD                     _bool_mat_currAlarm_bldc:	
  6053  00DD                     	ds	1
  6054  00DE                     _ui8_Kp_mat:	
  6055  00DE                     	ds	1
  6056  00DF                     _ui8_PWM_dc_mat:	
  6057  00DF                     	ds	1
  6058  00E0                     _ui8_Task_Cont1ms:	
  6059  00E0                     	ds	1
  6060  00E1                     _bool_HighCurrentAlarm:	
  6061  00E1                     	ds	1
  6062  00E2                     _bool_MotorStalled:	
  6063  00E2                     	ds	1
  6064  00E3                     _bool_DryRunningAlarm:	
  6065  00E3                     	ds	1
  6066  00E4                     _bool_CPU_TempAlarm:	
  6067  00E4                     	ds	1
  6068  00E5                     _Bcnt:	
  6069  00E5                     	ds	1
  6070  00E6                     _ui8_CompFlag:	
  6071  00E6                     	ds	1
  6072  00E7                     _ui8_sampleState:	
  6073  00E7                     	ds	1
  6074  00E8                     _ui8_Ubemf_sel:	
  6075  00E8                     	ds	1
  6076  00E9                     _ui8_UPhase_sel:	
  6077  00E9                     	ds	1
  6078  00EA                     _ui8_IPhase_sel:	
  6079  00EA                     	ds	1
  6080  00EB                     _ui8_BlankingCount:	
  6081  00EB                     	ds	1
  6082  00EC                     _comm_state:	
  6083  00EC                     	ds	1
  6084  00ED                     _ui8_StartupPWM:	
  6085  00ED                     	ds	1
  6086  00EE                     _bool_start_demand_mat:	
  6087  00EE                     	ds	1
  6088                           
  6089                           	psect	bssBANK2
  6090  0120                     __pbssBANK2:	
  6091  0120                     _ui8_current_cal:	
  6092  0120                     	ds	3
  6093  0123                     BVH2_Appl_Layer@Cb24_BadCnt:	
  6094  0123                     	ds	2
  6095  0125                     BVH2_Appl_Layer@Cb14_StateCnt:	
  6096  0125                     	ds	2
  6097  0127                     _ui16_Speed_demand_mat_min:	
  6098  0127                     	ds	2
  6099  0129                     _ui16_Speed_demand_mat_Max:	
  6100  0129                     	ds	2
  6101  012B                     _ui16_Speed_demand_mat:	
  6102  012B                     	ds	2
  6103  012D                     _ui8_Ki_mat:	
  6104  012D                     	ds	2
  6105  012F                     _ui16_mat_inpTemp:	
  6106  012F                     	ds	2
  6107  0131                     _ui16_PWM_Freq_In:	
  6108  0131                     	ds	2
  6109  0133                     _ui16_PWM_Freq_mat:	
  6110  0133                     	ds	2
  6111  0135                     _ui16_duty_cycle_mat:	
  6112  0135                     	ds	2
  6113  0137                     _ui16_speed_fil:	
  6114  0137                     	ds	2
  6115  0139                     _ui16_IPhase3_bldc:	
  6116  0139                     	ds	2
  6117  013B                     _ui16_IPhase2_bldc:	
  6118  013B                     	ds	2
  6119  013D                     _phase_delay_counter:	
  6120  013D                     	ds	2
  6121  013F                     _ui16_comm_time_max:	
  6122  013F                     	ds	2
  6123  0141                     _ui16_speed_rar:	
  6124  0141                     	ds	2
  6125  0143                     _ui8_fixed_start_speed_mat:	
  6126  0143                     	ds	2
  6127  0145                     _ui16_NTC_Temp_bldc_mean_cal:	
  6128  0145                     	ds	2
  6129  0147                     _filterTempNTC:	
  6130  0147                     	ds	2
  6131  0149                     _filter3:	
  6132  0149                     	ds	2
  6133  014B                     _filter1:	
  6134  014B                     	ds	2
  6135  014D                     _ui16_NTC_Temp_bldc_mean:	
  6136  014D                     	ds	2
  6137  014F                     _ui16_fir_IPhase_mean:	
  6138  014F                     	ds	2
  6139  0151                     _ui16_fir_Bat_mittel:	
  6140  0151                     	ds	2
  6141  0153                     _ui16_Temp_cal:	
  6142  0153                     	ds	2
  6143  0155                     _ui16_NTC_Temp_bldc:	
  6144  0155                     	ds	2
  6145  0157                     _ui16_IPhase1_bldc:	
  6146  0157                     	ds	2
  6147  0159                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  6148  0159                     	ds	1
  6149  015A                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  6150  015A                     	ds	1
  6151  015B                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  6152  015B                     	ds	1
  6153  015C                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  6154  015C                     	ds	1
  6155  015D                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  6156  015D                     	ds	1
  6157  015E                     _ui16_Duty_Cycle_In:	
  6158  015E                     	ds	2
  6159  0160                     _ui16_IPhase1_bldc_cal:	
  6160  0160                     	ds	2
  6161                           
  6162                           	psect	dataBANK2
  6163  0162                     __pdataBANK2:	
  6164  0162                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  6165  0162                     	ds	4
  6166  0166                     _ui16_I_cal_Ph3:	
  6167  0166                     	ds	2
  6168  0168                     _ui16_I_cal_Ph2:	
  6169  0168                     	ds	2
  6170  016A                     _ui16_I_cal_Ph1:	
  6171  016A                     	ds	2
  6172  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  6173  016C                     	ds	1
  6174  016D                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  6175  016D                     	ds	1
  6176                           
  6177                           	psect	bssBANK3
  6178  01A0                     __pbssBANK3:	
  6179  01A0                     _B:	
  6180  01A0                     	ds	16
  6181  01B0                     _inputArray1:	
  6182  01B0                     	ds	16
  6183  01C0                     _ui16_IPhase3_bldc_cal:	
  6184  01C0                     	ds	2
  6185  01C2                     _ui16_IPhase2_bldc_cal:	
  6186  01C2                     	ds	2
  6187                           
  6188                           	psect	clrtext
  6189  0786                     clear_ram0:	
  6190                           ;	Called with FSR0 containing the base address, and
  6191                           ;	WREG with the size to clear
  6192                           
  6193  0786  0064               	clrwdt	;clear the watchdog before getting into this loop
  6194  0787                     clrloop0:	
  6195  0787  0180               	clrf	0	;clear RAM location pointed to by FSR
  6196  0788  3101               	addfsr 0,1
  6197  0789  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6198  078A  2F87               	goto	clrloop0	;have we reached the end yet?
  6199  078B  3400               	retlw	0	;all done for this memory range, return
  6200                           
  6201                           	psect	cstackBANK3
  6202  01C4                     __pcstackBANK3:	
  6203  01C4                     _BVH2_Appl_Layer$1042:	
  6204                           
  6205                           ; 2 bytes @ 0x0
  6206  01C4                     	ds	2
  6207  01C6                     _BVH2_Appl_Layer$1044:	
  6208                           
  6209                           ; 2 bytes @ 0x2
  6210  01C6                     	ds	2
  6211  01C8                     _BVH2_Appl_Layer$1045:	
  6212                           
  6213                           ; 4 bytes @ 0x4
  6214  01C8                     	ds	4
  6215  01CC                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  6216                           
  6217                           ; 1 bytes @ 0x8
  6218  01CC                     	ds	1
  6219  01CD                     _BVH2_Appl_Layer$1034:	
  6220                           
  6221                           ; 1 bytes @ 0x9
  6222  01CD                     	ds	1
  6223  01CE                     _BVH2_Appl_Layer$1035:	
  6224                           
  6225                           ; 1 bytes @ 0xA
  6226  01CE                     	ds	1
  6227  01CF                     _BVH2_Appl_Layer$1036:	
  6228                           
  6229                           ; 1 bytes @ 0xB
  6230  01CF                     	ds	1
  6231  01D0                     _BVH2_Appl_Layer$1037:	
  6232                           
  6233                           ; 1 bytes @ 0xC
  6234  01D0                     	ds	1
  6235  01D1                     _BVH2_Appl_Layer$1038:	
  6236                           
  6237                           ; 1 bytes @ 0xD
  6238  01D1                     	ds	1
  6239  01D2                     _BVH2_Appl_Layer$1039:	
  6240                           
  6241                           ; 1 bytes @ 0xE
  6242  01D2                     	ds	1
  6243  01D3                     BVH2_Appl_Layer@Sb3_Product1:	
  6244                           
  6245                           ; 2 bytes @ 0xF
  6246  01D3                     	ds	2
  6247  01D5                     BVH2_Appl_Layer@Sb2_Switch5:	
  6248                           
  6249                           ; 2 bytes @ 0x11
  6250  01D5                     	ds	2
  6251  01D7                     BVH2_Appl_Layer@Cb24_Reset:	
  6252                           
  6253                           ; 1 bytes @ 0x13
  6254  01D7                     	ds	1
  6255  01D8                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  6256                           
  6257                           ; 1 bytes @ 0x14
  6258  01D8                     	ds	1
  6259  01D9                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  6260                           
  6261                           ; 1 bytes @ 0x15
  6262  01D9                     	ds	1
  6263  01DA                     BVH2_Appl_Layer@Sb2_Error:	
  6264                           
  6265                           ; 2 bytes @ 0x16
  6266  01DA                     	ds	2
  6267  01DC                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  6268                           
  6269                           ; 1 bytes @ 0x18
  6270  01DC                     	ds	1
  6271  01DD                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  6272                           
  6273                           ; 1 bytes @ 0x19
  6274  01DD                     	ds	1
  6275  01DE                     BVH2_Appl_Layer@Sb3_Sum1:	
  6276                           
  6277                           ; 2 bytes @ 0x1A
  6278  01DE                     	ds	2
  6279  01E0                     BVH2_Appl_Layer@Sb4_PI_sum:	
  6280                           
  6281                           ; 2 bytes @ 0x1C
  6282  01E0                     	ds	2
  6283                           
  6284                           	psect	cstackCOMMON
  6285  0070                     __pcstackCOMMON:	
  6286  0070                     ?_InitMotorRun:	
  6287  0070                     ?_commutate:	
  6288                           ; 1 bytes @ 0x0
  6289                           
  6290  0070                     ?_PWM_Write_Out:	
  6291                           ; 1 bytes @ 0x0
  6292                           
  6293  0070                     ?_read_eeprom_data:	
  6294                           ; 1 bytes @ 0x0
  6295                           
  6296  0070                     ?_PWMReadDC:	
  6297                           ; 1 bytes @ 0x0
  6298                           
  6299  0070                     ?_PWM_CTRL:	
  6300                           ; 1 bytes @ 0x0
  6301                           
  6302  0070                     ??_PWM_CTRL:	
  6303                           ; 1 bytes @ 0x0
  6304                           
  6305  0070                     ?_interrupt_PWMCapture:	
  6306                           ; 1 bytes @ 0x0
  6307                           
  6308  0070                     ??_interrupt_PWMCapture:	
  6309                           ; 1 bytes @ 0x0
  6310                           
  6311  0070                     ?_Oscill_Source_Block:	
  6312                           ; 1 bytes @ 0x0
  6313                           
  6314  0070                     ?_timer_init:	
  6315                           ; 1 bytes @ 0x0
  6316                           
  6317  0070                     ?_PWM_Capture_init:	
  6318                           ; 1 bytes @ 0x0
  6319                           
  6320  0070                     ?_clear_timer:	
  6321                           ; 1 bytes @ 0x0
  6322                           
  6323  0070                     ?_BVH2_Appl_Layer:	
  6324                           ; 1 bytes @ 0x0
  6325                           
  6326  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  6327                           ; 1 bytes @ 0x0
  6328                           
  6329  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  6330                           ; 1 bytes @ 0x0
  6331                           
  6332  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  6333                           ; 1 bytes @ 0x0
  6334                           
  6335  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  6336                           ; 1 bytes @ 0x0
  6337                           
  6338  0070                     ?_ADC_Init:	
  6339                           ; 1 bytes @ 0x0
  6340                           
  6341  0070                     ?_ADC_Wait:	
  6342                           ; 1 bytes @ 0x0
  6343                           
  6344  0070                     ?_FILTER_Init:	
  6345                           ; 1 bytes @ 0x0
  6346                           
  6347  0070                     ?_FILTER_Ubat:	
  6348                           ; 1 bytes @ 0x0
  6349                           
  6350  0070                     ?_FILTER_IPhase:	
  6351                           ; 1 bytes @ 0x0
  6352                           
  6353  0070                     ?_FILTER_Temp:	
  6354                           ; 1 bytes @ 0x0
  6355                           
  6356  0070                     ?_Get_Analog_Value:	
  6357                           ; 1 bytes @ 0x0
  6358                           
  6359  0070                     ?_BLDCWait:	
  6360                           ; 1 bytes @ 0x0
  6361                           
  6362  0070                     ??_BLDCWait:	
  6363                           ; 1 bytes @ 0x0
  6364                           
  6365  0070                     ?_init_bldc:	
  6366                           ; 1 bytes @ 0x0
  6367                           
  6368  0070                     ?_interrrupt_bldc:	
  6369                           ; 1 bytes @ 0x0
  6370                           
  6371  0070                     ?_InitMotorStop:	
  6372                           ; 1 bytes @ 0x0
  6373                           
  6374  0070                     ?_DiagInit:	
  6375                           ; 1 bytes @ 0x0
  6376                           
  6377  0070                     ?_SetDiagAlarm:	
  6378                           ; 1 bytes @ 0x0
  6379                           
  6380  0070                     ?_Task1ms:	
  6381                           ; 1 bytes @ 0x0
  6382                           
  6383  0070                     ??_Task1ms:	
  6384                           ; 1 bytes @ 0x0
  6385                           
  6386  0070                     ?_interrupt_handler:	
  6387                           ; 1 bytes @ 0x0
  6388                           
  6389  0070                     ?_I_calibrationInit:	
  6390                           ; 1 bytes @ 0x0
  6391                           
  6392  0070                     ?_init_ports:	
  6393                           ; 1 bytes @ 0x0
  6394                           
  6395  0070                     ?_system_init:	
  6396                           ; 1 bytes @ 0x0
  6397                           
  6398  0070                     ?_main:	
  6399                           ; 1 bytes @ 0x0
  6400                           
  6401  0070                     ?i1_ADC_Wait:	
  6402                           ; 1 bytes @ 0x0
  6403                           
  6404  0070                     ??i1_ADC_Wait:	
  6405                           ; 1 bytes @ 0x0
  6406                           
  6407  0070                     ?i1_commutate:	
  6408                           ; 1 bytes @ 0x0
  6409                           
  6410  0070                     ??i1_commutate:	
  6411                           ; 1 bytes @ 0x0
  6412                           
  6413  0070                     ?___lwdiv:	
  6414                           ; 1 bytes @ 0x0
  6415                           
  6416  0070                     ?i1_ADC_Read:	
  6417                           ; 2 bytes @ 0x0
  6418                           
  6419  0070                     ?i1___wmul:	
  6420                           ; 2 bytes @ 0x0
  6421                           
  6422  0070                     ___lwdiv@divisor:	
  6423                           ; 2 bytes @ 0x0
  6424                           
  6425  0070                     i1___wmul@multiplier:	
  6426                           ; 2 bytes @ 0x0
  6427                           
  6428                           
  6429                           ; 2 bytes @ 0x0
  6430  0070                     	ds	2
  6431  0072                     ??i1_ADC_Read:	
  6432  0072                     i1ADC_Read@i:	
  6433                           ; 1 bytes @ 0x2
  6434                           
  6435  0072                     ___lwdiv@dividend:	
  6436                           ; 1 bytes @ 0x2
  6437                           
  6438  0072                     i1___wmul@multiplicand:	
  6439                           ; 2 bytes @ 0x2
  6440                           
  6441                           
  6442                           ; 2 bytes @ 0x2
  6443  0072                     	ds	2
  6444  0074                     ??___lwdiv:	
  6445  0074                     ??i1___wmul:	
  6446                           ; 1 bytes @ 0x4
  6447                           
  6448  0074                     ___lwdiv@quotient:	
  6449                           ; 1 bytes @ 0x4
  6450                           
  6451  0074                     i1___wmul@product:	
  6452                           ; 2 bytes @ 0x4
  6453                           
  6454                           
  6455                           ; 2 bytes @ 0x4
  6456  0074                     	ds	2
  6457  0076                     ___lwdiv@counter:	
  6458                           
  6459                           ; 1 bytes @ 0x6
  6460  0076                     	ds	6
  6461  007C                     ??_interrrupt_bldc:	
  6462                           
  6463                           ; 1 bytes @ 0xC
  6464  007C                     	ds	2
  6465  007E                     ??_interrupt_handler:	
  6466                           
  6467                           	psect	cstackBANK0
  6468  0020                     __pcstackBANK0:	
  6469                           ; 1 bytes @ 0xE
  6470                           
  6471  0020                     interrrupt_bldc@ui32_tmp:	
  6472                           
  6473                           ; 4 bytes @ 0x0
  6474  0020                     	ds	4
  6475  0024                     ??_commutate:	
  6476  0024                     ??_PWM_Write_Out:	
  6477                           ; 1 bytes @ 0x4
  6478                           
  6479  0024                     ??_read_eeprom_data:	
  6480                           ; 1 bytes @ 0x4
  6481                           
  6482  0024                     ??_Oscill_Source_Block:	
  6483                           ; 1 bytes @ 0x4
  6484                           
  6485  0024                     ??_PWM_Capture_init:	
  6486                           ; 1 bytes @ 0x4
  6487                           
  6488  0024                     ??_clear_timer:	
  6489                           ; 1 bytes @ 0x4
  6490                           
  6491  0024                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  6492                           ; 1 bytes @ 0x4
  6493                           
  6494  0024                     ??_Cb34_PWM_Detection_node_fcn1:	
  6495                           ; 1 bytes @ 0x4
  6496                           
  6497  0024                     ??_Cb56_UbatHandling_node_fcn2:	
  6498                           ; 1 bytes @ 0x4
  6499                           
  6500  0024                     ??_Cb1_Current_An___High_node_fcn1:	
  6501                           ; 1 bytes @ 0x4
  6502                           
  6503  0024                     ??_ADC_Init:	
  6504                           ; 1 bytes @ 0x4
  6505                           
  6506  0024                     ??_ADC_Wait:	
  6507                           ; 1 bytes @ 0x4
  6508                           
  6509  0024                     ??_FILTER_Ubat:	
  6510                           ; 1 bytes @ 0x4
  6511                           
  6512  0024                     ??_FILTER_IPhase:	
  6513                           ; 1 bytes @ 0x4
  6514                           
  6515  0024                     ??_FILTER_Temp:	
  6516                           ; 1 bytes @ 0x4
  6517                           
  6518  0024                     ??_InitMotorStop:	
  6519                           ; 1 bytes @ 0x4
  6520                           
  6521  0024                     ??_init_ports:	
  6522                           ; 1 bytes @ 0x4
  6523                           
  6524  0024                     ?_ADC_Read:	
  6525                           ; 1 bytes @ 0x4
  6526                           
  6527  0024                     ?___wmul:	
  6528                           ; 2 bytes @ 0x4
  6529                           
  6530  0024                     ?___tmul:	
  6531                           ; 2 bytes @ 0x4
  6532                           
  6533  0024                     ?___lmul:	
  6534                           ; 3 bytes @ 0x4
  6535                           
  6536  0024                     ?___aldiv:	
  6537                           ; 4 bytes @ 0x4
  6538                           
  6539  0024                     read_eeprom_data@ui8_adress:	
  6540                           ; 4 bytes @ 0x4
  6541                           
  6542  0024                     PWM_Capture_init@ui8_CCP_Nb:	
  6543                           ; 1 bytes @ 0x4
  6544                           
  6545  0024                     PWM_Write_Out@ui8_DutyCycle_Out:	
  6546                           ; 1 bytes @ 0x4
  6547                           
  6548  0024                     clear_timer@ui8_TmrNb:	
  6549                           ; 1 bytes @ 0x4
  6550                           
  6551  0024                     ___wmul@multiplier:	
  6552                           ; 1 bytes @ 0x4
  6553                           
  6554  0024                     ___tmul@multiplier:	
  6555                           ; 2 bytes @ 0x4
  6556                           
  6557  0024                     ___lmul@multiplier:	
  6558                           ; 3 bytes @ 0x4
  6559                           
  6560  0024                     ___aldiv@divisor:	
  6561                           ; 4 bytes @ 0x4
  6562                           
  6563                           
  6564                           ; 4 bytes @ 0x4
  6565  0024                     	ds	1
  6566  0025                     ??_timer_init:	
  6567  0025                     ??_DiagInit:	
  6568                           ; 1 bytes @ 0x5
  6569                           
  6570  0025                     ??_SetDiagAlarm:	
  6571                           ; 1 bytes @ 0x5
  6572                           
  6573  0025                     read_eeprom_data@ui8_adress_data:	
  6574                           ; 1 bytes @ 0x5
  6575                           
  6576  0025                     timer_init@ui8_TmrNb:	
  6577                           ; 1 bytes @ 0x5
  6578                           
  6579                           
  6580                           ; 1 bytes @ 0x5
  6581  0025                     	ds	1
  6582  0026                     ??_ADC_Read:	
  6583  0026                     ADC_Read@i:	
  6584                           ; 1 bytes @ 0x6
  6585                           
  6586  0026                     ___wmul@multiplicand:	
  6587                           ; 1 bytes @ 0x6
  6588                           
  6589                           
  6590                           ; 2 bytes @ 0x6
  6591  0026                     	ds	1
  6592  0027                     ??_FILTER_Init:	
  6593  0027                     ??_I_calibrationInit:	
  6594                           ; 1 bytes @ 0x7
  6595                           
  6596  0027                     ___tmul@multiplicand:	
  6597                           ; 1 bytes @ 0x7
  6598                           
  6599                           
  6600                           ; 3 bytes @ 0x7
  6601  0027                     	ds	1
  6602  0028                     ??___wmul:	
  6603  0028                     ___wmul@product:	
  6604                           ; 1 bytes @ 0x8
  6605                           
  6606  0028                     ___lmul@multiplicand:	
  6607                           ; 2 bytes @ 0x8
  6608                           
  6609  0028                     ___aldiv@dividend:	
  6610                           ; 4 bytes @ 0x8
  6611                           
  6612                           
  6613                           ; 4 bytes @ 0x8
  6614  0028                     	ds	2
  6615  002A                     ??___tmul:	
  6616  002A                     ___tmul@product:	
  6617                           ; 1 bytes @ 0xA
  6618                           
  6619                           
  6620                           ; 3 bytes @ 0xA
  6621  002A                     	ds	2
  6622  002C                     ??___lmul:	
  6623  002C                     ??___aldiv:	
  6624                           ; 1 bytes @ 0xC
  6625                           
  6626  002C                     ___aldiv@counter:	
  6627                           ; 1 bytes @ 0xC
  6628                           
  6629  002C                     ___lmul@product:	
  6630                           ; 1 bytes @ 0xC
  6631                           
  6632                           
  6633                           ; 4 bytes @ 0xC
  6634  002C                     	ds	1
  6635  002D                     ?___ltdiv:	
  6636  002D                     ___aldiv@sign:	
  6637                           ; 3 bytes @ 0xD
  6638                           
  6639  002D                     ___ltdiv@divisor:	
  6640                           ; 1 bytes @ 0xD
  6641                           
  6642                           
  6643                           ; 3 bytes @ 0xD
  6644  002D                     	ds	1
  6645  002E                     ___aldiv@quotient:	
  6646                           
  6647                           ; 4 bytes @ 0xE
  6648  002E                     	ds	2
  6649  0030                     ??_InitMotorRun:	
  6650  0030                     ??_Get_Analog_Value:	
  6651                           ; 1 bytes @ 0x10
  6652                           
  6653  0030                     ??_init_bldc:	
  6654                           ; 1 bytes @ 0x10
  6655                           
  6656  0030                     ??_system_init:	
  6657                           ; 1 bytes @ 0x10
  6658                           
  6659  0030                     ___ltdiv@dividend:	
  6660                           ; 1 bytes @ 0x10
  6661                           
  6662                           
  6663                           ; 3 bytes @ 0x10
  6664  0030                     	ds	2
  6665  0032                     ??_BVH2_Appl_Layer:	
  6666                           
  6667                           ; 1 bytes @ 0x12
  6668  0032                     	ds	1
  6669  0033                     ??___ltdiv:	
  6670  0033                     ___ltdiv@quotient:	
  6671                           ; 1 bytes @ 0x13
  6672                           
  6673                           
  6674                           ; 3 bytes @ 0x13
  6675  0033                     	ds	3
  6676  0036                     ___ltdiv@counter:	
  6677                           
  6678                           ; 1 bytes @ 0x16
  6679  0036                     	ds	1
  6680  0037                     ??_PWMReadDC:	
  6681                           
  6682                           ; 1 bytes @ 0x17
  6683  0037                     	ds	1
  6684  0038                     ??_main:	
  6685                           
  6686                           ; 1 bytes @ 0x18
  6687  0038                     	ds	4
  6688                           
  6689                           	psect	text1
  6690  14DE                     __ptext1:	
  6691 ;; *************** function _system_init *****************
  6692 ;; Defined at:
  6693 ;;		line 545 in file "../main.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;		None
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;		None
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  1    wreg      void 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : B1F/0
  6704 ;;		On exit  : 1F/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6707 ;;      Params:         0       0       0       0       0       0       0       0
  6708 ;;      Locals:         0       0       0       0       0       0       0       0
  6709 ;;      Temps:          0       0       0       0       0       0       0       0
  6710 ;;      Totals:         0       0       0       0       0       0       0       0
  6711 ;;Total ram usage:        0 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    6
  6714 ;; This function calls:
  6715 ;;		_ADC_Init
  6716 ;;		_DiagInit
  6717 ;;		_FILTER_Init
  6718 ;;		_I_calibrationInit
  6719 ;;		_Oscill_Source_Block
  6720 ;;		_PWM_Capture_init
  6721 ;;		_init_bldc
  6722 ;;		_init_ports
  6723 ;;		_timer_init
  6724 ;; This function is called by:
  6725 ;;		_main
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           
  6730                           ;psect for function _system_init
  6731  14DE                     _system_init:	
  6732                           
  6733                           ;main.c: 549: OPTION_REG = 0b10000001;
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6737  14DE  3081               	movlw	129
  6738  14DF  0021               	movlb	1	; select bank1
  6739  14E0  0095               	movwf	21	;volatile
  6740                           
  6741                           ;main.c: 558: ui8_ResetMatlab = 1;
  6742  14E1  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  6743  14E2  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  6744                           
  6745                           ;main.c: 559: GIE = 0;
  6746  14E3  138B               	bcf	11,7	;volatile
  6747                           
  6748                           ;main.c: 560: INTCON = 0;
  6749  14E4  018B               	clrf	11	;volatile
  6750                           
  6751                           ;main.c: 561: PIE1 = 0;
  6752  14E5  0191               	clrf	17	;volatile
  6753                           
  6754                           ;main.c: 562: PIE2 = 0;
  6755  14E6  0192               	clrf	18	;volatile
  6756                           
  6757                           ;main.c: 565: ui16_Timer_VaL1 = 0;
  6758  14E7  0193               	clrf	19	;volatile
  6759                           
  6760                           ;main.c: 566: ui8_Task_Cont3ms = 0;
  6761  14E8  01D7               	clrf	_ui8_Task_Cont3ms^(0+128)
  6762                           
  6763                           ;main.c: 567: ui8_Task_Cont5ms = 0;
  6764  14E9  01D6               	clrf	_ui8_Task_Cont5ms^(0+128)
  6765                           
  6766                           ;main.c: 571: ui8_Sync_Cont10ms = 0;
  6767  14EA  0020               	movlb	0	; select bank0
  6768  14EB  3049               	movlw	73
  6769  14EC  01CD               	clrf	_ui8_Task_Cont100ms
  6770                           
  6771                           ;main.c: 573: ui16_dryRun_Thresh = 73;
  6772  14ED  0023               	movlb	3	; select bank3
  6773  14EE  00E2               	movwf	_ui16_dryRun_Thresh^(0+384)
  6774  14EF  3068               	movlw	104
  6775  14F0  01E3               	clrf	(_ui16_dryRun_Thresh+1)^(0+384)
  6776                           
  6777                           ;main.c: 575: ui16_Current_Thresh = 360;
  6778  14F1  0022               	movlb	2	; select bank2
  6779  14F2  00EE               	movwf	_ui16_Current_Thresh^(0+256)
  6780  14F3  3001               	movlw	1
  6781  14F4  00EF               	movwf	(_ui16_Current_Thresh^(0+256)+1)
  6782                           
  6783                           ;main.c: 577: init_ports( );
  6784  14F5  26B2  3194         	fcall	_init_ports
  6785                           
  6786                           ;main.c: 588: Oscill_Source_Block( );
  6787  14F7  265C  3194         	fcall	_Oscill_Source_Block
  6788                           
  6789                           ;main.c: 589: timer_init( 1 );
  6790  14F9  3001               	movlw	1
  6791  14FA  2514  3194         	fcall	_timer_init
  6792                           
  6793                           ;main.c: 590: timer_init( 4 );
  6794  14FC  3004               	movlw	4
  6795  14FD  2514  3194         	fcall	_timer_init
  6796                           
  6797                           ;main.c: 591: timer_init( 6 );
  6798  14FF  3006               	movlw	6
  6799  1500  2514  3194         	fcall	_timer_init
  6800                           
  6801                           ;main.c: 594: PWM_Capture_init( 5 );
  6802  1502  3005               	movlw	5
  6803  1503  2661  3194         	fcall	_PWM_Capture_init
  6804                           
  6805                           ;main.c: 595: ADC_Init( );
  6806  1505  2645  3194         	fcall	_ADC_Init
  6807                           
  6808                           ;main.c: 596: DiagInit( );
  6809  1507  264F  3194         	fcall	_DiagInit
  6810                           
  6811                           ;main.c: 597: FILTER_Init( );
  6812  1509  256E  3194         	fcall	_FILTER_Init
  6813                           
  6814                           ;main.c: 600: ui16_Temp_cal = 0;
  6815  150B  0022               	movlb	2	; select bank2
  6816  150C  01D3               	clrf	_ui16_Temp_cal^(0+256)
  6817  150D  01D4               	clrf	(_ui16_Temp_cal+1)^(0+256)
  6818                           
  6819                           ;main.c: 610: I_calibrationInit();
  6820  150E  2587  3194         	fcall	_I_calibrationInit
  6821                           
  6822                           ;main.c: 612: init_bldc( );
  6823  1510  26EB               	fcall	_init_bldc
  6824                           
  6825                           ;main.c: 614: PEIE = 1;
  6826  1511  170B               	bsf	11,6	;volatile
  6827                           
  6828                           ;main.c: 615: GIE = 1;
  6829  1512  178B               	bsf	11,7	;volatile
  6830  1513  0008               	return
  6831  1514                     __end_of_system_init:	
  6832  1514                     __ptext2:	
  6833 ;; *************** function _timer_init *****************
  6834 ;; Defined at:
  6835 ;;		line 73 in file "../timer.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;  ui8_TmrNb       1    wreg     unsigned char 
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;  ui8_TmrNb       1    5[BANK0 ] unsigned char 
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 16/1
  6846 ;;		On exit  : 16/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6849 ;;      Params:         0       0       0       0       0       0       0       0
  6850 ;;      Locals:         0       1       0       0       0       0       0       0
  6851 ;;      Temps:          0       0       0       0       0       0       0       0
  6852 ;;      Totals:         0       1       0       0       0       0       0       0
  6853 ;;Total ram usage:        1 bytes
  6854 ;; Hardware stack levels used:    1
  6855 ;; Hardware stack levels required when called:    4
  6856 ;; This function calls:
  6857 ;;		_clear_timer
  6858 ;; This function is called by:
  6859 ;;		_system_init
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function _timer_init
  6865  1514                     _timer_init:	
  6866                           
  6867                           ;incstack = 0
  6868                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6869                           ;timer_init@ui8_TmrNb stored from wreg
  6870  1514  0020               	movlb	0	; select bank0
  6871  1515  00A5               	movwf	timer_init@ui8_TmrNb
  6872                           
  6873                           ;timer.c: 77: switch( ui8_TmrNb )
  6874  1516  2D3B               	goto	l5275
  6875  1517                     l5245:	
  6876                           
  6877                           ;timer.c: 83: {;timer.c: 86: clear_timer( 0 );
  6878  1517  3000               	movlw	0
  6879  1518  254D               	fcall	_clear_timer
  6880                           
  6881                           ;timer.c: 87: TMR0IE = 0;
  6882  1519  128B               	bcf	11,5	;volatile
  6883                           
  6884                           ;timer.c: 88: break;
  6885  151A  0008               	return
  6886  151B                     l5249:	
  6887                           
  6888                           ;timer.c: 95: {;timer.c: 98: clear_timer( 1 );
  6889  151B  3001               	movlw	1
  6890  151C  254D               	fcall	_clear_timer
  6891                           
  6892                           ;timer.c: 99: T1CON = 0b01110101;
  6893  151D  3075               	movlw	117
  6894  151E  0020               	movlb	0	; select bank0
  6895  151F  0098               	movwf	24	;volatile
  6896                           
  6897                           ;timer.c: 100: TMR1IE = 0;
  6898  1520  0021               	movlb	1	; select bank1
  6899  1521  1011               	bcf	17,0	;volatile
  6900                           
  6901                           ;timer.c: 101: break;
  6902  1522  0008               	return
  6903  1523                     l5255:	
  6904                           
  6905                           ;timer.c: 108: {;timer.c: 111: clear_timer( 2 );
  6906  1523  3002               	movlw	2
  6907  1524  254D               	fcall	_clear_timer
  6908                           
  6909                           ;timer.c: 112: T2CON = 0b00000111;
  6910  1525  3007               	movlw	7
  6911  1526  0020               	movlb	0	; select bank0
  6912  1527  009C               	movwf	28	;volatile
  6913                           
  6914                           ;timer.c: 113: TMR2IE = 0;
  6915  1528  0021               	movlb	1	; select bank1
  6916  1529  1091               	bcf	17,1	;volatile
  6917                           
  6918                           ;timer.c: 114: break;
  6919  152A  0008               	return
  6920  152B                     l5261:	
  6921                           
  6922                           ;timer.c: 121: {;timer.c: 124: clear_timer( 4 );
  6923  152B  3004               	movlw	4
  6924  152C  254D               	fcall	_clear_timer
  6925                           
  6926                           ;timer.c: 125: T4CON = 0b00001110;
  6927  152D  300E               	movlw	14
  6928  152E  0028               	movlb	8	; select bank8
  6929  152F  0097               	movwf	23	;volatile
  6930                           
  6931                           ;timer.c: 129: TMR4IE = 1;
  6932  1530  0021               	movlb	1	; select bank1
  6933  1531  1493               	bsf	19,1	;volatile
  6934                           
  6935                           ;timer.c: 131: break;
  6936  1532  0008               	return
  6937  1533                     l5267:	
  6938                           
  6939                           ;timer.c: 138: {;timer.c: 141: clear_timer( 6 );
  6940  1533  3006               	movlw	6
  6941  1534  254D               	fcall	_clear_timer
  6942                           
  6943                           ;timer.c: 142: T6CON = 0b00000101;
  6944  1535  3005               	movlw	5
  6945  1536  0028               	movlb	8	; select bank8
  6946  1537  009E               	movwf	30	;volatile
  6947                           
  6948                           ;timer.c: 161: TMR6IE = 0;
  6949  1538  0021               	movlb	1	; select bank1
  6950  1539  1193               	bcf	19,3	;volatile
  6951                           
  6952                           ;timer.c: 169: break;
  6953  153A  0008               	return
  6954  153B                     l5275:	
  6955  153B  0825               	movf	timer_init@ui8_TmrNb,w
  6956                           
  6957                           ; Switch size 1, requested type "space"
  6958                           ; Number of cases is 5, Range of values is 0 to 6
  6959                           ; switch strategies available:
  6960                           ; Name         Instructions Cycles
  6961                           ; simple_byte           16     9 (average)
  6962                           ; direct_byte           20     6 (fixed)
  6963                           ; jumptable            260     6 (fixed)
  6964                           ;	Chosen strategy is simple_byte
  6965  153C  3A00               	xorlw	0	; case 0
  6966  153D  1903               	skipnz
  6967  153E  2D17               	goto	l5245
  6968  153F  3A01               	xorlw	1	; case 1
  6969  1540  1903               	skipnz
  6970  1541  2D1B               	goto	l5249
  6971  1542  3A03               	xorlw	3	; case 2
  6972  1543  1903               	skipnz
  6973  1544  2D23               	goto	l5255
  6974  1545  3A06               	xorlw	6	; case 4
  6975  1546  1903               	skipnz
  6976  1547  2D2B               	goto	l5261
  6977  1548  3A02               	xorlw	2	; case 6
  6978  1549  1903               	skipnz
  6979  154A  2D33               	goto	l5267
  6980  154B  2D4C               	goto	l1703
  6981  154C                     l1703:	
  6982  154C  0008               	return
  6983  154D                     __end_of_timer_init:	
  6984  154D                     __ptext3:	
  6985 ;; *************** function _clear_timer *****************
  6986 ;; Defined at:
  6987 ;;		line 302 in file "../timer.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  ui8_TmrNb       1    wreg     unsigned char 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  ui8_TmrNb       1    4[BANK0 ] unsigned char 
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6996 ;; Tracked objects:
  6997 ;;		On entry : 1F/0
  6998 ;;		On exit  : 17/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7001 ;;      Params:         0       0       0       0       0       0       0       0
  7002 ;;      Locals:         0       1       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0       0
  7004 ;;      Totals:         0       1       0       0       0       0       0       0
  7005 ;;Total ram usage:        1 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    3
  7008 ;; This function calls:
  7009 ;;		Nothing
  7010 ;; This function is called by:
  7011 ;;		_main
  7012 ;;		_timer_init
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           
  7017                           ;psect for function _clear_timer
  7018  154D                     _clear_timer:	
  7019                           
  7020                           ;incstack = 0
  7021                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  7022                           ;clear_timer@ui8_TmrNb stored from wreg
  7023  154D  00A4               	movwf	clear_timer@ui8_TmrNb
  7024                           
  7025                           ;timer.c: 306: switch( ui8_TmrNb )
  7026  154E  2D5C               	goto	l5079
  7027  154F                     l5067:	
  7028                           
  7029                           ;timer.c: 312: {;timer.c: 314: TMR0 = 0;
  7030  154F  0195               	clrf	21	;volatile
  7031                           
  7032                           ;timer.c: 315: break;
  7033  1550  0008               	return
  7034  1551                     l5069:	
  7035                           
  7036                           ;timer.c: 322: {;timer.c: 324: TMR1L = 0x00;
  7037  1551  0196               	clrf	22	;volatile
  7038                           
  7039                           ;timer.c: 325: TMR1H = 0x00;
  7040  1552  0197               	clrf	23	;volatile
  7041                           
  7042                           ;timer.c: 326: break;
  7043  1553  0008               	return
  7044  1554                     l5071:	
  7045                           
  7046                           ;timer.c: 333: {;timer.c: 335: TMR2 = 0;
  7047  1554  019A               	clrf	26	;volatile
  7048                           
  7049                           ;timer.c: 336: break;
  7050  1555  0008               	return
  7051  1556                     l5073:	
  7052                           
  7053                           ;timer.c: 343: {;timer.c: 345: TMR4 = 0;
  7054  1556  0028               	movlb	8	; select bank8
  7055  1557  0195               	clrf	21	;volatile
  7056                           
  7057                           ;timer.c: 346: break;
  7058  1558  0008               	return
  7059  1559                     l5075:	
  7060                           
  7061                           ;timer.c: 353: {;timer.c: 355: TMR6 = 0;
  7062  1559  0028               	movlb	8	; select bank8
  7063  155A  019C               	clrf	28	;volatile
  7064                           
  7065                           ;timer.c: 356: break;
  7066  155B  0008               	return
  7067  155C                     l5079:	
  7068  155C  0824               	movf	clear_timer@ui8_TmrNb,w
  7069                           
  7070                           ; Switch size 1, requested type "space"
  7071                           ; Number of cases is 5, Range of values is 0 to 6
  7072                           ; switch strategies available:
  7073                           ; Name         Instructions Cycles
  7074                           ; simple_byte           16     9 (average)
  7075                           ; direct_byte           20     6 (fixed)
  7076                           ; jumptable            260     6 (fixed)
  7077                           ;	Chosen strategy is simple_byte
  7078  155D  3A00               	xorlw	0	; case 0
  7079  155E  1903               	skipnz
  7080  155F  2D4F               	goto	l5067
  7081  1560  3A01               	xorlw	1	; case 1
  7082  1561  1903               	skipnz
  7083  1562  2D51               	goto	l5069
  7084  1563  3A03               	xorlw	3	; case 2
  7085  1564  1903               	skipnz
  7086  1565  2D54               	goto	l5071
  7087  1566  3A06               	xorlw	6	; case 4
  7088  1567  1903               	skipnz
  7089  1568  2D56               	goto	l5073
  7090  1569  3A02               	xorlw	2	; case 6
  7091  156A  1903               	skipnz
  7092  156B  2D59               	goto	l5075
  7093  156C  2D6D               	goto	l1726
  7094  156D                     l1726:	
  7095  156D  0008               	return
  7096  156E                     __end_of_clear_timer:	
  7097  156E                     __ptext12:	
  7098 ;; *************** function _FILTER_Init *****************
  7099 ;; Defined at:
  7100 ;;		line 226 in file "../adc.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;		None
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;		None
  7105 ;; Return value:  Size  Location     Type
  7106 ;;                  1    wreg      void 
  7107 ;; Registers used:
  7108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7109 ;; Tracked objects:
  7110 ;;		On entry : 1F/3
  7111 ;;		On exit  : 1F/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7114 ;;      Params:         0       0       0       0       0       0       0       0
  7115 ;;      Locals:         0       0       0       0       0       0       0       0
  7116 ;;      Temps:          0       0       0       0       0       0       0       0
  7117 ;;      Totals:         0       0       0       0       0       0       0       0
  7118 ;;Total ram usage:        0 bytes
  7119 ;; Hardware stack levels used:    1
  7120 ;; Hardware stack levels required when called:    4
  7121 ;; This function calls:
  7122 ;;		_ADC_Read
  7123 ;;		_ADC_Wait
  7124 ;; This function is called by:
  7125 ;;		_system_init
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           
  7130                           ;psect for function _FILTER_Init
  7131  156E                     _FILTER_Init:	
  7132                           
  7133                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  7134                           
  7135                           ;incstack = 0
  7136                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7137  156E  0020               	movlb	0	; select bank0
  7138  156F  01D0               	clrf	_windowPtr1
  7139  1570                     l5089:	
  7140  1570  3008               	movlw	8
  7141  1571  0250               	subwf	_windowPtr1,w
  7142  1572  1803               	btfsc	3,0
  7143  1573  0008               	return
  7144                           
  7145                           ;adc.c: 232: {;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  7146  1574  3031               	movlw	49
  7147  1575  0021               	movlb	1	; select bank1
  7148  1576  009D               	movwf	29	;volatile
  7149                           
  7150                           ;adc.c: 235: ADC_Wait( );
  7151  1577  261A  3194         	fcall	_ADC_Wait
  7152                           
  7153                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  7154  1579  2633  3194         	fcall	_ADC_Read
  7155  157B  0825               	movf	?_ADC_Read+1,w
  7156  157C  00D2               	movwf	_ui16_Ubat_bldc+1	;volatile
  7157  157D  0824               	movf	?_ADC_Read,w
  7158  157E  00D1               	movwf	_ui16_Ubat_bldc	;volatile
  7159                           
  7160                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  7161  157F  279D  3194         	fcall	PL70	;call to abstracted procedure
  7162  1581  305E               	movlw	94
  7163  1582  3FC0               	movwi [0]fsr1
  7164  1583  3001               	movlw	1
  7165  1584  3FC1               	movwi [1]fsr1
  7166  1585  0AD0               	incf	_windowPtr1,f
  7167  1586  2D70               	goto	l5089
  7168  1587                     __end_of_FILTER_Init:	
  7169  1587                     __ptext10:	
  7170 ;; *************** function _I_calibrationInit *****************
  7171 ;; Defined at:
  7172 ;;		line 174 in file "../main.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;		None
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;		None
  7177 ;; Return value:  Size  Location     Type
  7178 ;;                  1    wreg      void 
  7179 ;; Registers used:
  7180 ;;		wreg, status,2, status,0, pclath, cstack
  7181 ;; Tracked objects:
  7182 ;;		On entry : 1F/2
  7183 ;;		On exit  : 1F/2
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7186 ;;      Params:         0       0       0       0       0       0       0       0
  7187 ;;      Locals:         0       0       0       0       0       0       0       0
  7188 ;;      Temps:          0       1       0       0       0       0       0       0
  7189 ;;      Totals:         0       1       0       0       0       0       0       0
  7190 ;;Total ram usage:        1 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; Hardware stack levels required when called:    4
  7193 ;; This function calls:
  7194 ;;		_ADC_Read
  7195 ;;		_ADC_Wait
  7196 ;;		_read_eeprom_data
  7197 ;; This function is called by:
  7198 ;;		_system_init
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _I_calibrationInit
  7204  1587                     _I_calibrationInit:	
  7205                           
  7206                           ;main.c: 178: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  7210  1587  3003               	movlw	3
  7211  1588  260F  3194         	fcall	_read_eeprom_data
  7212  158A  3A00               	xorlw	0
  7213  158B  1903               	skipnz
  7214  158C  2DA1               	goto	l5173
  7215  158D  3003               	movlw	3
  7216  158E  260F  3194         	fcall	_read_eeprom_data
  7217  1590  3AFF               	xorlw	255
  7218  1591  1903               	skipnz
  7219  1592  2DA1               	goto	l5173
  7220                           
  7221                           ;main.c: 180: {;main.c: 182: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eep
      +                          rom_data( 0x03 );
  7222  1593  3003               	movlw	3
  7223  1594  260F  3194         	fcall	_read_eeprom_data
  7224  1596  00A7               	movwf	??_I_calibrationInit
  7225  1597  3002               	movlw	2
  7226  1598  260F  3194         	fcall	_read_eeprom_data
  7227  159A  0022               	movlb	2	; select bank2
  7228  159B  00EB               	movwf	(_ui16_I_cal_Ph1+1)^(0+256)
  7229  159C  0020               	movlb	0	; select bank0
  7230  159D  0827               	movf	??_I_calibrationInit,w
  7231  159E  0022               	movlb	2	; select bank2
  7232  159F  00EA               	movwf	_ui16_I_cal_Ph1^(0+256)
  7233                           
  7234                           ;main.c: 185: }
  7235  15A0  2DA5               	goto	l5175
  7236  15A1                     l5173:	
  7237                           
  7238                           ;main.c: 188: else;main.c: 189: {;main.c: 191: ui16_I_cal_Ph1 = 0x0100;
  7239  15A1  0022               	movlb	2	; select bank2
  7240  15A2  3001               	movlw	1
  7241  15A3  01EA               	clrf	_ui16_I_cal_Ph1^(0+256)
  7242  15A4  00EB               	movwf	(_ui16_I_cal_Ph1^(0+256)+1)
  7243  15A5                     l5175:	
  7244                           
  7245                           ;main.c: 194: };main.c: 197: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 
      +                          0x05 ) != 0xFF)
  7246  15A5  3005               	movlw	5
  7247  15A6  260F  3194         	fcall	_read_eeprom_data
  7248  15A8  3A00               	xorlw	0
  7249  15A9  1903               	skipnz
  7250  15AA  2DBF               	goto	l5181
  7251  15AB  3005               	movlw	5
  7252  15AC  260F  3194         	fcall	_read_eeprom_data
  7253  15AE  3AFF               	xorlw	255
  7254  15AF  1903               	skipnz
  7255  15B0  2DBF               	goto	l5181
  7256                           
  7257                           ;main.c: 199: {;main.c: 201: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eep
      +                          rom_data( 0x05 );
  7258  15B1  3005               	movlw	5
  7259  15B2  260F  3194         	fcall	_read_eeprom_data
  7260  15B4  00A7               	movwf	??_I_calibrationInit
  7261  15B5  3004               	movlw	4
  7262  15B6  260F  3194         	fcall	_read_eeprom_data
  7263  15B8  0022               	movlb	2	; select bank2
  7264  15B9  00E9               	movwf	(_ui16_I_cal_Ph2+1)^(0+256)
  7265  15BA  0020               	movlb	0	; select bank0
  7266  15BB  0827               	movf	??_I_calibrationInit,w
  7267  15BC  0022               	movlb	2	; select bank2
  7268  15BD  00E8               	movwf	_ui16_I_cal_Ph2^(0+256)
  7269                           
  7270                           ;main.c: 204: }
  7271  15BE  2DC3               	goto	l5183
  7272  15BF                     l5181:	
  7273                           
  7274                           ;main.c: 207: else;main.c: 208: {;main.c: 210: ui16_I_cal_Ph2 = 0x0100;
  7275  15BF  0022               	movlb	2	; select bank2
  7276  15C0  3001               	movlw	1
  7277  15C1  01E8               	clrf	_ui16_I_cal_Ph2^(0+256)
  7278  15C2  00E9               	movwf	(_ui16_I_cal_Ph2^(0+256)+1)
  7279  15C3                     l5183:	
  7280                           
  7281                           ;main.c: 213: };main.c: 216: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 
      +                          0x07 ) != 0xFF)
  7282  15C3  3007               	movlw	7
  7283  15C4  260F  3194         	fcall	_read_eeprom_data
  7284  15C6  3A00               	xorlw	0
  7285  15C7  1903               	skipnz
  7286  15C8  2DDD               	goto	l5189
  7287  15C9  3007               	movlw	7
  7288  15CA  260F  3194         	fcall	_read_eeprom_data
  7289  15CC  3AFF               	xorlw	255
  7290  15CD  1903               	skipnz
  7291  15CE  2DDD               	goto	l5189
  7292                           
  7293                           ;main.c: 218: {;main.c: 220: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eep
      +                          rom_data( 0x07 );
  7294  15CF  3007               	movlw	7
  7295  15D0  260F  3194         	fcall	_read_eeprom_data
  7296  15D2  00A7               	movwf	??_I_calibrationInit
  7297  15D3  3006               	movlw	6
  7298  15D4  260F  3194         	fcall	_read_eeprom_data
  7299  15D6  0022               	movlb	2	; select bank2
  7300  15D7  00E7               	movwf	(_ui16_I_cal_Ph3+1)^(0+256)
  7301  15D8  0020               	movlb	0	; select bank0
  7302  15D9  0827               	movf	??_I_calibrationInit,w
  7303  15DA  0022               	movlb	2	; select bank2
  7304  15DB  00E6               	movwf	_ui16_I_cal_Ph3^(0+256)
  7305                           
  7306                           ;main.c: 222: }
  7307  15DC  2DE1               	goto	l5191
  7308  15DD                     l5189:	
  7309                           
  7310                           ;main.c: 225: else;main.c: 226: {;main.c: 228: ui16_I_cal_Ph3 = 0x0100;
  7311  15DD  0022               	movlb	2	; select bank2
  7312  15DE  3001               	movlw	1
  7313  15DF  01E6               	clrf	_ui16_I_cal_Ph3^(0+256)
  7314  15E0  00E7               	movwf	(_ui16_I_cal_Ph3^(0+256)+1)
  7315  15E1                     l5191:	
  7316                           
  7317                           ;main.c: 231: };main.c: 324: LATC2 = 0;
  7318  15E1  110E               	bcf	14,2	;volatile
  7319                           
  7320                           ;main.c: 325: LATB2 = 0;
  7321  15E2  110D               	bcf	13,2	;volatile
  7322                           
  7323                           ;main.c: 326: LATB1 = 0;
  7324  15E3  108D               	bcf	13,1	;volatile
  7325                           
  7326                           ;main.c: 327: LATC = LATC | 0b00011010;
  7327  15E4  080E               	movf	14,w	;volatile
  7328  15E5  381A               	iorlw	26
  7329  15E6  008E               	movwf	14	;volatile
  7330                           
  7331                           ;main.c: 329: ADC_Wait();
  7332  15E7  261A  3194         	fcall	_ADC_Wait
  7333                           
  7334                           ;main.c: 330: ADC_Wait();
  7335  15E9  261A  3194         	fcall	_ADC_Wait
  7336                           
  7337                           ;main.c: 332: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  7338  15EB  3011               	movlw	17
  7339  15EC  0021               	movlb	1	; select bank1
  7340  15ED  009D               	movwf	29	;volatile
  7341                           
  7342                           ;main.c: 333: ADC_Wait();
  7343  15EE  261A  3194         	fcall	_ADC_Wait
  7344                           
  7345                           ;main.c: 334: ( GO_nDONE = 1 );
  7346  15F0  0021               	movlb	1	; select bank1
  7347  15F1  149D               	bsf	29,1	;volatile
  7348                           
  7349                           ;main.c: 337: ui8_current_cal[2] = ADC_Read();
  7350  15F2  2633  3194         	fcall	_ADC_Read
  7351  15F4  0824               	movf	?_ADC_Read,w
  7352  15F5  0022               	movlb	2	; select bank2
  7353  15F6  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  7354                           
  7355                           ;main.c: 339: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  7356  15F7  3035               	movlw	53
  7357  15F8  0021               	movlb	1	; select bank1
  7358  15F9  009D               	movwf	29	;volatile
  7359                           
  7360                           ;main.c: 340: ADC_Wait();
  7361  15FA  261A  3194         	fcall	_ADC_Wait
  7362                           
  7363                           ;main.c: 341: ( GO_nDONE = 1 );
  7364  15FC  0021               	movlb	1	; select bank1
  7365  15FD  149D               	bsf	29,1	;volatile
  7366                           
  7367                           ;main.c: 344: ui8_current_cal[1] = ADC_Read();
  7368  15FE  2633  3194         	fcall	_ADC_Read
  7369  1600  0824               	movf	?_ADC_Read,w
  7370  1601  0022               	movlb	2	; select bank2
  7371  1602  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  7372                           
  7373                           ;main.c: 346: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  7374  1603  3009               	movlw	9
  7375  1604  0021               	movlb	1	; select bank1
  7376  1605  009D               	movwf	29	;volatile
  7377                           
  7378                           ;main.c: 347: ADC_Wait();
  7379  1606  261A  3194         	fcall	_ADC_Wait
  7380                           
  7381                           ;main.c: 348: ( GO_nDONE = 1 );
  7382  1608  0021               	movlb	1	; select bank1
  7383  1609  149D               	bsf	29,1	;volatile
  7384                           
  7385                           ;main.c: 351: ui8_current_cal[0] = ADC_Read();
  7386  160A  2633               	fcall	_ADC_Read
  7387  160B  0824               	movf	?_ADC_Read,w
  7388  160C  0022               	movlb	2	; select bank2
  7389  160D  00A0               	movwf	_ui8_current_cal^(0+256)
  7390  160E  0008               	return
  7391  160F                     __end_of_I_calibrationInit:	
  7392  160F                     __ptext11:	
  7393 ;; *************** function _read_eeprom_data *****************
  7394 ;; Defined at:
  7395 ;;		line 52 in file "../eeprom.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;  ui8_adress      1    wreg     unsigned char 
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;  ui8_adress      1    4[BANK0 ] unsigned char 
  7400 ;;  ui8_adress_d    1    5[BANK0 ] unsigned char 
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  1    wreg      unsigned char 
  7403 ;; Registers used:
  7404 ;;		wreg
  7405 ;; Tracked objects:
  7406 ;;		On entry : 1D/2
  7407 ;;		On exit  : 1F/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7410 ;;      Params:         0       0       0       0       0       0       0       0
  7411 ;;      Locals:         0       2       0       0       0       0       0       0
  7412 ;;      Temps:          0       0       0       0       0       0       0       0
  7413 ;;      Totals:         0       2       0       0       0       0       0       0
  7414 ;;Total ram usage:        2 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    3
  7417 ;; This function calls:
  7418 ;;		Nothing
  7419 ;; This function is called by:
  7420 ;;		_I_calibrationInit
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function _read_eeprom_data
  7426  160F                     _read_eeprom_data:	
  7427                           
  7428                           ;incstack = 0
  7429                           ; Regs used in _read_eeprom_data: [wreg]
  7430                           ;read_eeprom_data@ui8_adress stored from wreg
  7431  160F  0020               	movlb	0	; select bank0
  7432  1610  00A4               	movwf	read_eeprom_data@ui8_adress
  7433                           
  7434                           ;eeprom.c: 56: unsigned char ui8_adress_data;;eeprom.c: 58: EEADRL = ui8_adress;
  7435  1611  0023               	movlb	3	; select bank3
  7436  1612  0091               	movwf	17	;volatile
  7437                           
  7438                           ;eeprom.c: 59: EEPGD = 0;
  7439  1613  1395               	bcf	21,7	;volsfr
  7440                           
  7441                           ;eeprom.c: 60: CFGS = 0;
  7442  1614  1315               	bcf	21,6	;volsfr
  7443                           
  7444                           ;eeprom.c: 61: RD = 1;
  7445  1615  1415               	bsf	21,0	;volsfr
  7446                           
  7447                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  7448  1616  0813               	movf	19,w	;volatile
  7449  1617  0020               	movlb	0	; select bank0
  7450  1618  00A5               	movwf	read_eeprom_data@ui8_adress_data
  7451                           
  7452                           ;eeprom.c: 64: return ui8_adress_data;
  7453  1619  0008               	return
  7454  161A                     __end_of_read_eeprom_data:	
  7455  161A                     __ptext13:	
  7456 ;; *************** function _ADC_Wait *****************
  7457 ;; Defined at:
  7458 ;;		line 128 in file "../adc.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;		None
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  1    wreg      void 
  7465 ;; Registers used:
  7466 ;;		None
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/2
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7472 ;;      Params:         0       0       0       0       0       0       0       0
  7473 ;;      Locals:         0       0       0       0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0
  7475 ;;      Totals:         0       0       0       0       0       0       0       0
  7476 ;;Total ram usage:        0 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    3
  7479 ;; This function calls:
  7480 ;;		Nothing
  7481 ;; This function is called by:
  7482 ;;		_FILTER_Init
  7483 ;;		_I_calibrationInit
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function _ADC_Wait
  7489  161A                     _ADC_Wait:	
  7490                           
  7491                           ;adc.c: 133: __nop();
  7492                           
  7493                           ;incstack = 0
  7494                           ; Regs used in _ADC_Wait: []
  7495  161A  0000               	nop
  7496                           
  7497                           ;adc.c: 134: __nop();
  7498  161B  0000               	nop
  7499                           
  7500                           ;adc.c: 135: __nop();
  7501  161C  0000               	nop
  7502                           
  7503                           ;adc.c: 136: __nop();
  7504  161D  0000               	nop
  7505                           
  7506                           ;adc.c: 137: __nop();
  7507  161E  0000               	nop
  7508                           
  7509                           ;adc.c: 138: __nop();
  7510  161F  0000               	nop
  7511                           
  7512                           ;adc.c: 139: __nop();
  7513  1620  0000               	nop
  7514                           
  7515                           ;adc.c: 140: __nop();
  7516  1621  0000               	nop
  7517                           
  7518                           ;adc.c: 142: __nop();
  7519  1622  0000               	nop
  7520                           
  7521                           ;adc.c: 143: __nop();
  7522  1623  0000               	nop
  7523                           
  7524                           ;adc.c: 144: __nop();
  7525  1624  0000               	nop
  7526                           
  7527                           ;adc.c: 145: __nop();
  7528  1625  0000               	nop
  7529                           
  7530                           ;adc.c: 146: __nop();
  7531  1626  0000               	nop
  7532                           
  7533                           ;adc.c: 147: __nop();
  7534  1627  0000               	nop
  7535                           
  7536                           ;adc.c: 148: __nop();
  7537  1628  0000               	nop
  7538                           
  7539                           ;adc.c: 149: __nop();
  7540  1629  0000               	nop
  7541                           
  7542                           ;adc.c: 151: __nop();
  7543  162A  0000               	nop
  7544                           
  7545                           ;adc.c: 152: __nop();
  7546  162B  0000               	nop
  7547                           
  7548                           ;adc.c: 153: __nop();
  7549  162C  0000               	nop
  7550                           
  7551                           ;adc.c: 154: __nop();
  7552  162D  0000               	nop
  7553                           
  7554                           ;adc.c: 155: __nop();
  7555  162E  0000               	nop
  7556                           
  7557                           ;adc.c: 156: __nop();
  7558  162F  0000               	nop
  7559                           
  7560                           ;adc.c: 157: __nop();
  7561  1630  0000               	nop
  7562                           
  7563                           ;adc.c: 158: __nop();
  7564  1631  0000               	nop
  7565  1632  0008               	return
  7566  1633                     __end_of_ADC_Wait:	
  7567  1633                     __ptext14:	
  7568 ;; *************** function _ADC_Read *****************
  7569 ;; Defined at:
  7570 ;;		line 175 in file "../adc.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;		None
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  i               1    6[BANK0 ] unsigned char 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  2    4[BANK0 ] unsigned int 
  7577 ;; Registers used:
  7578 ;;		wreg, status,2, status,0
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/1
  7581 ;;		On exit  : 1F/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7584 ;;      Params:         0       2       0       0       0       0       0       0
  7585 ;;      Locals:         0       1       0       0       0       0       0       0
  7586 ;;      Temps:          0       0       0       0       0       0       0       0
  7587 ;;      Totals:         0       3       0       0       0       0       0       0
  7588 ;;Total ram usage:        3 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    3
  7591 ;; This function calls:
  7592 ;;		Nothing
  7593 ;; This function is called by:
  7594 ;;		_FILTER_Init
  7595 ;;		_I_calibrationInit
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _ADC_Read
  7601  1633                     _ADC_Read:	
  7602                           
  7603                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
  7604                           
  7605                           ;incstack = 0
  7606                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  7607  1633  0020               	movlb	0	; select bank0
  7608  1634  01A6               	clrf	ADC_Read@i
  7609  1635                     l69:	
  7610                           ;adc.c: 182: while( GO_nDONE )
  7611                           
  7612  1635  0021               	movlb	1	; select bank1
  7613  1636  1C9D               	btfss	29,1	;volatile
  7614  1637  2E3E               	goto	l5017
  7615                           
  7616                           ;adc.c: 184: {;adc.c: 186: i++;
  7617  1638  0020               	movlb	0	; select bank0
  7618  1639  3041               	movlw	65
  7619  163A  0AA6               	incf	ADC_Read@i,f
  7620                           
  7621                           ;adc.c: 189: if( i > 64 )
  7622  163B  0226               	subwf	ADC_Read@i,w
  7623  163C  1C03               	skipc
  7624  163D  2E35               	goto	l69
  7625  163E                     l5017:	
  7626                           
  7627                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
  7628  163E  0021               	movlb	1	; select bank1
  7629                           
  7630                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  7631                           
  7632                           ;adc.c: 204: return analog_value.w;
  7633  163F  3184  24F7         	fcall	PL38	;call to abstracted procedure
  7634  1641  00A5               	movwf	?_ADC_Read+1
  7635  1642  0848               	movf	_analog_value,w	;volatile
  7636  1643  00A4               	movwf	?_ADC_Read
  7637  1644  0008               	return
  7638  1645                     __end_of_ADC_Read:	
  7639  1645                     __ptext16:	
  7640 ;; *************** function _ADC_Init *****************
  7641 ;; Defined at:
  7642 ;;		line 102 in file "../adc.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;		None
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, status,2
  7651 ;; Tracked objects:
  7652 ;;		On entry : 18/1
  7653 ;;		On exit  : 1F/2
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7656 ;;      Params:         0       0       0       0       0       0       0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0       0
  7658 ;;      Temps:          0       0       0       0       0       0       0       0
  7659 ;;      Totals:         0       0       0       0       0       0       0       0
  7660 ;;Total ram usage:        0 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:    3
  7663 ;; This function calls:
  7664 ;;		Nothing
  7665 ;; This function is called by:
  7666 ;;		_system_init
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           
  7671                           ;psect for function _ADC_Init
  7672  1645                     _ADC_Init:	
  7673                           
  7674                           ;adc.c: 106: ADCON1 = 0b10100000;
  7675                           
  7676                           ;incstack = 0
  7677                           ; Regs used in _ADC_Init: [wreg+status,2]
  7678  1645  30A0               	movlw	160
  7679  1646  0021               	movlb	1	; select bank1
  7680  1647  009E               	movwf	30	;volatile
  7681                           
  7682                           ;adc.c: 108: ADCON0 = 0b00000000;
  7683  1648  019D               	clrf	29	;volatile
  7684                           
  7685                           ;adc.c: 109: ADON = 1;
  7686  1649  141D               	bsf	29,0	;volatile
  7687                           
  7688                           ;adc.c: 111: ui8_temp_calibration = 0;
  7689  164A  0022               	movlb	2	; select bank2
  7690  164B  0817               	movf	23,w	;volatile
  7691  164C  3830               	iorlw	48
  7692  164D  0097               	movwf	23	;volatile
  7693  164E  0008               	return
  7694  164F                     __end_of_ADC_Init:	
  7695  164F                     __ptext15:	
  7696 ;; *************** function _DiagInit *****************
  7697 ;; Defined at:
  7698 ;;		line 148 in file "../diag.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;		None
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;		None
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1    wreg      void 
  7705 ;; Registers used:
  7706 ;;		wreg, status,2, status,0, pclath, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 1F/2
  7709 ;;		On exit  : 1F/3
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7712 ;;      Params:         0       0       0       0       0       0       0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0       0
  7715 ;;      Totals:         0       0       0       0       0       0       0       0
  7716 ;;Total ram usage:        0 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    4
  7719 ;; This function calls:
  7720 ;;		_PWM_Write_Out
  7721 ;; This function is called by:
  7722 ;;		_system_init
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           
  7727                           ;psect for function _DiagInit
  7728  164F                     _DiagInit:	
  7729                           
  7730                           ;diag.c: 162: ui8_error_Flags.b = 0;
  7731                           
  7732                           ;incstack = 0
  7733                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  7734  164F  0020               	movlb	0	; select bank0
  7735  1650  300B               	movlw	11
  7736  1651  01CF               	clrf	_ui8_error_Flags
  7737                           
  7738                           ;diag.c: 163: PWM_Write_Out( 11 );
  7739  1652  26E6               	fcall	_PWM_Write_Out
  7740                           
  7741                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  7742  1653  0022               	movlb	2	; select bank2
  7743  1654  01E0               	clrf	_ui16_IPhase1_bldc_cal^(0+256)
  7744  1655  01E1               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  7745                           
  7746                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  7747  1656  0023               	movlb	3	; select bank3
  7748  1657  01C2               	clrf	_ui16_IPhase2_bldc_cal^(0+384)
  7749  1658  01C3               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+384)
  7750                           
  7751                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  7752  1659  01C0               	clrf	_ui16_IPhase3_bldc_cal^(0+384)
  7753  165A  01C1               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+384)
  7754  165B  0008               	return
  7755  165C                     __end_of_DiagInit:	
  7756  165C                     __ptext9:	
  7757 ;; *************** function _Oscill_Source_Block *****************
  7758 ;; Defined at:
  7759 ;;		line 478 in file "../timer.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;		None
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      void 
  7766 ;; Registers used:
  7767 ;;		wreg
  7768 ;; Tracked objects:
  7769 ;;		On entry : B1F/1
  7770 ;;		On exit  : B1F/1
  7771 ;;		Unchanged: B00/0
  7772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7773 ;;      Params:         0       0       0       0       0       0       0       0
  7774 ;;      Locals:         0       0       0       0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0
  7776 ;;      Totals:         0       0       0       0       0       0       0       0
  7777 ;;Total ram usage:        0 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    3
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_system_init
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function _Oscill_Source_Block
  7789  165C                     _Oscill_Source_Block:	
  7790                           
  7791                           ;timer.c: 482: OSCCON = 0xF0;
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _Oscill_Source_Block: [wreg]
  7795  165C  30F0               	movlw	240
  7796  165D  0099               	movwf	25	;volatile
  7797                           
  7798                           ;timer.c: 483: WDTCON = 0b00010001;
  7799  165E  3011               	movlw	17
  7800  165F  0097               	movwf	23	;volatile
  7801  1660  0008               	return
  7802  1661                     __end_of_Oscill_Source_Block:	
  7803  1661                     __ptext8:	
  7804 ;; *************** function _PWM_Capture_init *****************
  7805 ;; Defined at:
  7806 ;;		line 78 in file "../pwm.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  ui8_CCP_Nb      1    4[BANK0 ] unsigned char 
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  1    wreg      void 
  7813 ;; Registers used:
  7814 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7815 ;; Tracked objects:
  7816 ;;		On entry : 16/1
  7817 ;;		On exit  : 18/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7820 ;;      Params:         0       0       0       0       0       0       0       0
  7821 ;;      Locals:         0       1       0       0       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0       0       0       0
  7823 ;;      Totals:         0       1       0       0       0       0       0       0
  7824 ;;Total ram usage:        1 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    3
  7827 ;; This function calls:
  7828 ;;		Nothing
  7829 ;; This function is called by:
  7830 ;;		_system_init
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           
  7835                           ;psect for function _PWM_Capture_init
  7836  1661                     _PWM_Capture_init:	
  7837                           
  7838                           ;incstack = 0
  7839                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  7840                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  7841  1661  0020               	movlb	0	; select bank0
  7842  1662  00A4               	movwf	PWM_Capture_init@ui8_CCP_Nb
  7843                           
  7844                           ;pwm.c: 83: ui8_PWMinDC_sav = 0;
  7845  1663  0021               	movlb	1	; select bank1
  7846  1664  01D0               	clrf	_ui8_PWMinDC_sav^(0+128)
  7847                           
  7848                           ;pwm.c: 84: ui8_PWMin_failCnt = 0;
  7849  1665  01CF               	clrf	_ui8_PWMin_failCnt^(0+128)
  7850                           
  7851                           ;pwm.c: 93: switch( ui8_CCP_Nb )
  7852  1666  0020               	movlb	0	; select bank0
  7853  1667  0824               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  7854                           
  7855                           ; Switch size 1, requested type "space"
  7856                           ; Number of cases is 5, Range of values is 1 to 5
  7857                           ; switch strategies available:
  7858                           ; Name         Instructions Cycles
  7859                           ; simple_byte           16     9 (average)
  7860                           ; direct_byte           19     9 (fixed)
  7861                           ; jumptable            263     9 (fixed)
  7862                           ;	Chosen strategy is simple_byte
  7863  1668  3A01               	xorlw	1	; case 1
  7864  1669  1903               	skipnz
  7865  166A  2E78               	goto	l5279
  7866  166B  3A03               	xorlw	3	; case 2
  7867  166C  1903               	skipnz
  7868  166D  2E84               	goto	l5287
  7869  166E  3A01               	xorlw	1	; case 3
  7870  166F  1903               	skipnz
  7871  1670  2E90               	goto	l5295
  7872  1671  3A07               	xorlw	7	; case 4
  7873  1672  1903               	skipnz
  7874  1673  2E9C               	goto	l5303
  7875  1674  3A01               	xorlw	1	; case 5
  7876  1675  1903               	skipnz
  7877  1676  2EA8               	goto	l5311
  7878  1677  2EB1               	goto	l1145
  7879  1678                     l5279:	
  7880                           
  7881                           ;pwm.c: 99: {;pwm.c: 101: CCP1CON = 0x00;
  7882  1678  0025               	movlb	5	; select bank5
  7883  1679  0193               	clrf	19	;volatile
  7884                           
  7885                           ;pwm.c: 102: CCPR1L = 0x00;
  7886  167A  0191               	clrf	17	;volatile
  7887                           
  7888                           ;pwm.c: 103: CCPR1H = 0x00;
  7889  167B  0192               	clrf	18	;volatile
  7890                           
  7891                           ;pwm.c: 104: CCP1IE = 1;
  7892  167C  0021               	movlb	1	; select bank1
  7893  167D  1511               	bsf	17,2	;volatile
  7894                           
  7895                           ;pwm.c: 105: CCP1IF = 0;
  7896  167E  0020               	movlb	0	; select bank0
  7897  167F  1111               	bcf	17,2	;volatile
  7898                           
  7899                           ;pwm.c: 106: CCP1CON = 0x05;
  7900  1680  3005               	movlw	5
  7901  1681  0025               	movlb	5	; select bank5
  7902  1682  0093               	movwf	19	;volatile
  7903                           
  7904                           ;pwm.c: 107: break;
  7905  1683  0008               	return
  7906  1684                     l5287:	
  7907                           
  7908                           ;pwm.c: 114: {;pwm.c: 116: CCP2CON = 0x00;
  7909  1684  0025               	movlb	5	; select bank5
  7910  1685  019A               	clrf	26	;volatile
  7911                           
  7912                           ;pwm.c: 117: CCPR2L = 0x00;
  7913  1686  0198               	clrf	24	;volatile
  7914                           
  7915                           ;pwm.c: 118: CCPR2H = 0x00;
  7916  1687  0199               	clrf	25	;volatile
  7917                           
  7918                           ;pwm.c: 119: CCP2IE = 1;
  7919  1688  0021               	movlb	1	; select bank1
  7920  1689  1412               	bsf	18,0	;volatile
  7921                           
  7922                           ;pwm.c: 120: CCP2IF = 0;
  7923  168A  0020               	movlb	0	; select bank0
  7924  168B  1012               	bcf	18,0	;volatile
  7925                           
  7926                           ;pwm.c: 121: CCP2CON = 0x05;
  7927  168C  3005               	movlw	5
  7928  168D  0025               	movlb	5	; select bank5
  7929  168E  009A               	movwf	26	;volatile
  7930                           
  7931                           ;pwm.c: 122: break;
  7932  168F  0008               	return
  7933  1690                     l5295:	
  7934                           
  7935                           ;pwm.c: 129: {;pwm.c: 131: CCP3CON = 0x00;
  7936  1690  0026               	movlb	6	; select bank6
  7937  1691  0193               	clrf	19	;volatile
  7938                           
  7939                           ;pwm.c: 132: CCPR3L = 0x00;
  7940  1692  0191               	clrf	17	;volatile
  7941                           
  7942                           ;pwm.c: 133: CCPR3H = 0x00;
  7943  1693  0192               	clrf	18	;volatile
  7944                           
  7945                           ;pwm.c: 134: CCP3IE = 1;
  7946  1694  0021               	movlb	1	; select bank1
  7947  1695  1613               	bsf	19,4	;volatile
  7948                           
  7949                           ;pwm.c: 135: CCP3IF = 0;
  7950  1696  0020               	movlb	0	; select bank0
  7951  1697  1213               	bcf	19,4	;volatile
  7952                           
  7953                           ;pwm.c: 136: CCP3CON = 0x05;
  7954  1698  3005               	movlw	5
  7955  1699  0026               	movlb	6	; select bank6
  7956  169A  0093               	movwf	19	;volatile
  7957                           
  7958                           ;pwm.c: 137: break;
  7959  169B  0008               	return
  7960  169C                     l5303:	
  7961                           
  7962                           ;pwm.c: 144: {;pwm.c: 146: CCP4CON = 0x00;
  7963  169C  0026               	movlb	6	; select bank6
  7964  169D  019A               	clrf	26	;volatile
  7965                           
  7966                           ;pwm.c: 147: CCPR4L = 0x00;
  7967  169E  0198               	clrf	24	;volatile
  7968                           
  7969                           ;pwm.c: 148: CCPR4H = 0x00;
  7970  169F  0199               	clrf	25	;volatile
  7971                           
  7972                           ;pwm.c: 149: CCP4IE = 1;
  7973  16A0  0021               	movlb	1	; select bank1
  7974  16A1  1693               	bsf	19,5	;volatile
  7975                           
  7976                           ;pwm.c: 150: CCP4IF = 0;
  7977  16A2  0020               	movlb	0	; select bank0
  7978  16A3  1293               	bcf	19,5	;volatile
  7979                           
  7980                           ;pwm.c: 151: CCP4CON = 0x05;
  7981  16A4  3005               	movlw	5
  7982  16A5  0026               	movlb	6	; select bank6
  7983  16A6  009A               	movwf	26	;volatile
  7984                           
  7985                           ;pwm.c: 152: break;
  7986  16A7  0008               	return
  7987  16A8                     l5311:	
  7988                           
  7989                           ;pwm.c: 159: {;pwm.c: 161: CCP5CON = 0x00;
  7990  16A8  0026               	movlb	6	; select bank6
  7991  16A9  019E               	clrf	30	;volatile
  7992                           
  7993                           ;pwm.c: 162: CCPR5L = 0x00;
  7994  16AA  019C               	clrf	28	;volatile
  7995                           
  7996                           ;pwm.c: 163: CCPR5H = 0x00;
  7997  16AB  019D               	clrf	29	;volatile
  7998                           
  7999                           ;pwm.c: 164: CCP5IE = 1;
  8000  16AC  0021               	movlb	1	; select bank1
  8001  16AD  1713               	bsf	19,6	;volatile
  8002                           
  8003                           ;pwm.c: 165: CCP5IF = 0;
  8004  16AE  0020               	movlb	0	; select bank0
  8005  16AF  1313               	bcf	19,6	;volatile
  8006                           
  8007                           ;pwm.c: 166: CCP5CON = 0x05;
  8008                           
  8009                           ;pwm.c: 167: break;
  8010  16B0  2FF8               	ljmp	PL80	;call to abstracted procedure
  8011  16B1                     l1145:	
  8012  16B1  0008               	return
  8013  16B2                     __end_of_PWM_Capture_init:	
  8014  16B2                     __ptext4:	
  8015 ;; *************** function _init_ports *****************
  8016 ;; Defined at:
  8017 ;;		line 404 in file "../main.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;		None
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;		None
  8022 ;; Return value:  Size  Location     Type
  8023 ;;                  1    wreg      void 
  8024 ;; Registers used:
  8025 ;;		wreg, status,2
  8026 ;; Tracked objects:
  8027 ;;		On entry : B1F/2
  8028 ;;		On exit  : B1F/1
  8029 ;;		Unchanged: B00/0
  8030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8031 ;;      Params:         0       0       0       0       0       0       0       0
  8032 ;;      Locals:         0       0       0       0       0       0       0       0
  8033 ;;      Temps:          0       0       0       0       0       0       0       0
  8034 ;;      Totals:         0       0       0       0       0       0       0       0
  8035 ;;Total ram usage:        0 bytes
  8036 ;; Hardware stack levels used:    1
  8037 ;; Hardware stack levels required when called:    3
  8038 ;; This function calls:
  8039 ;;		Nothing
  8040 ;; This function is called by:
  8041 ;;		_system_init
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           
  8046                           ;psect for function _init_ports
  8047  16B2                     _init_ports:	
  8048                           
  8049                           ;main.c: 411: ANSELA = 0b00100111;
  8050                           
  8051                           ;incstack = 0
  8052                           ; Regs used in _init_ports: [wreg+status,2]
  8053  16B2  3027               	movlw	39
  8054  16B3  0023               	movlb	3	; select bank3
  8055  16B4  008C               	movwf	12	;volatile
  8056                           
  8057                           ;main.c: 412: ANSELB = 0b00101001;
  8058  16B5  3029               	movlw	41
  8059  16B6  008D               	movwf	13	;volatile
  8060                           
  8061                           ;main.c: 415: LATA = 0;
  8062  16B7  0022               	movlb	2	; select bank2
  8063  16B8  018C               	clrf	12	;volatile
  8064                           
  8065                           ;main.c: 416: LATB = 0;
  8066  16B9  018D               	clrf	13	;volatile
  8067                           
  8068                           ;main.c: 417: LATC = 0;
  8069  16BA  018E               	clrf	14	;volatile
  8070                           
  8071                           ;main.c: 498: TRISA = 0b01111111;
  8072  16BB  307F               	movlw	127
  8073  16BC  0021               	movlb	1	; select bank1
  8074  16BD  008C               	movwf	12	;volatile
  8075                           
  8076                           ;main.c: 507: TRISB = 0b00111001;
  8077  16BE  3039               	movlw	57
  8078  16BF  008D               	movwf	13	;volatile
  8079                           
  8080                           ;main.c: 516: TRISC = 0b00000000;
  8081  16C0  018E               	clrf	14	;volatile
  8082  16C1  0008               	return
  8083  16C2                     __end_of_init_ports:	
  8084  16C2                     __ptext17:	
  8085 ;; *************** function _SetDiagAlarm *****************
  8086 ;; Defined at:
  8087 ;;		line 210 in file "../diag.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;		None
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;		None
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  1    wreg      void 
  8094 ;; Registers used:
  8095 ;;		wreg, status,2, status,0, pclath, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 1F/0
  8098 ;;		On exit  : 1F/1
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8101 ;;      Params:         0       0       0       0       0       0       0       0
  8102 ;;      Locals:         0       0       0       0       0       0       0       0
  8103 ;;      Temps:          0       0       0       0       0       0       0       0
  8104 ;;      Totals:         0       0       0       0       0       0       0       0
  8105 ;;Total ram usage:        0 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    4
  8108 ;; This function calls:
  8109 ;;		_PWM_Write_Out
  8110 ;; This function is called by:
  8111 ;;		_main
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _SetDiagAlarm
  8117  16C2                     _SetDiagAlarm:	
  8118                           
  8119                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  8123  16C2  1F4F               	btfss	_ui8_error_Flags,6
  8124  16C3  2EC6               	goto	l6093
  8125                           
  8126                           ;diag.c: 221: {;diag.c: 223: PWM_Write_Out( 88 );
  8127  16C4  3058               	movlw	88
  8128  16C5  2EE6               	ljmp	_PWM_Write_Out
  8129  16C6                     l6093:	
  8130                           ;diag.c: 226: }
  8131                           
  8132                           
  8133                           ;diag.c: 229: else;diag.c: 230: {;diag.c: 232: if( bool_CPU_TempAlarm )
  8134  16C6  0021               	movlb	1	; select bank1
  8135  16C7  0864               	movf	_bool_CPU_TempAlarm^(0+128),w
  8136  16C8  1903               	btfsc	3,2
  8137  16C9  2ECC               	goto	l6097
  8138                           
  8139                           ;diag.c: 235: {;diag.c: 237: PWM_Write_Out( 33 );
  8140  16CA  3021               	movlw	33
  8141  16CB  2EE6               	ljmp	_PWM_Write_Out
  8142  16CC                     l6097:	
  8143                           ;diag.c: 240: }
  8144                           
  8145                           
  8146                           ;diag.c: 243: else;diag.c: 244: {;diag.c: 246: if( bool_DryRunningAlarm )
  8147  16CC  0863               	movf	_bool_DryRunningAlarm^(0+128),w
  8148  16CD  1903               	btfsc	3,2
  8149  16CE  2ED1               	goto	l6101
  8150                           
  8151                           ;diag.c: 248: {;diag.c: 250: PWM_Write_Out( 66 );
  8152  16CF  3042               	movlw	66
  8153  16D0  2EE6               	ljmp	_PWM_Write_Out
  8154  16D1                     l6101:	
  8155                           ;diag.c: 253: }
  8156                           
  8157                           
  8158                           ;diag.c: 256: else;diag.c: 257: {;diag.c: 259: if( bool_MotorStalled )
  8159  16D1  0862               	movf	_bool_MotorStalled^(0+128),w
  8160  16D2  1903               	btfsc	3,2
  8161  16D3  2ED6               	goto	l6105
  8162                           
  8163                           ;diag.c: 261: {;diag.c: 263: PWM_Write_Out( 55 );
  8164  16D4  3037               	movlw	55
  8165  16D5  2EE6               	ljmp	_PWM_Write_Out
  8166  16D6                     l6105:	
  8167                           ;diag.c: 266: }
  8168                           
  8169                           
  8170                           ;diag.c: 269: else;diag.c: 270: {;diag.c: 272: if( bool_HighCurrentAlarm )
  8171  16D6  0861               	movf	_bool_HighCurrentAlarm^(0+128),w
  8172  16D7  1903               	btfsc	3,2
  8173  16D8  2EDB               	goto	l514
  8174                           
  8175                           ;diag.c: 274: {;diag.c: 276: PWM_Write_Out( 44 );
  8176  16D9  302C               	movlw	44
  8177  16DA  2EE6               	ljmp	_PWM_Write_Out
  8178  16DB                     l514:	
  8179                           ;diag.c: 278: }
  8180                           
  8181                           
  8182                           ;diag.c: 281: else;diag.c: 282: {;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  8183  16DB  0020               	movlb	0	; select bank0
  8184  16DC  1ECF               	btfss	_ui8_error_Flags,5
  8185  16DD  2EE0               	goto	l516
  8186                           
  8187                           ;diag.c: 287: {;diag.c: 289: PWM_Write_Out( 77 );
  8188  16DE  304D               	movlw	77
  8189  16DF  2EE6               	ljmp	_PWM_Write_Out
  8190  16E0                     l516:	
  8191                           ;diag.c: 292: }
  8192                           
  8193                           
  8194                           ;diag.c: 295: else;diag.c: 296: {;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  8195  16E0  1C4F               	btfss	_ui8_error_Flags,0
  8196  16E1  2EE4               	goto	l6113
  8197                           
  8198                           ;diag.c: 300: {;diag.c: 302: PWM_Write_Out( 22 );
  8199  16E2  3016               	movlw	22
  8200  16E3  2EE6               	ljmp	_PWM_Write_Out
  8201  16E4                     l6113:	
  8202                           ;diag.c: 305: }
  8203                           
  8204                           
  8205                           ;diag.c: 308: else;diag.c: 309: {;diag.c: 311: PWM_Write_Out( 11 );
  8206  16E4  300B               	movlw	11
  8207  16E5  2EE6               	ljmp	_PWM_Write_Out
  8208  16E6                     __end_of_SetDiagAlarm:	
  8209  16E6                     __ptext18:	
  8210 ;; *************** function _PWM_Write_Out *****************
  8211 ;; Defined at:
  8212 ;;		line 340 in file "../pwm.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;  ui8_DutyCycl    1    wreg     unsigned char 
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;  ui8_DutyCycl    1    4[BANK0 ] unsigned char 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  1    wreg      void 
  8219 ;; Registers used:
  8220 ;;		wreg
  8221 ;; Tracked objects:
  8222 ;;		On entry : 1E/0
  8223 ;;		On exit  : 1F/1
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8226 ;;      Params:         0       0       0       0       0       0       0       0
  8227 ;;      Locals:         0       1       0       0       0       0       0       0
  8228 ;;      Temps:          0       0       0       0       0       0       0       0
  8229 ;;      Totals:         0       1       0       0       0       0       0       0
  8230 ;;Total ram usage:        1 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    3
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_DiagInit
  8237 ;;		_SetDiagAlarm
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           
  8242                           ;psect for function _PWM_Write_Out
  8243  16E6                     _PWM_Write_Out:	
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _PWM_Write_Out: [wreg]
  8247                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
  8248  16E6  0020               	movlb	0	; select bank0
  8249  16E7  00A4               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
  8250                           
  8251                           ;pwm.c: 344: ui8_PWMoutvalue = ui8_DutyCycle_Out;
  8252  16E8  0021               	movlb	1	; select bank1
  8253  16E9  00D3               	movwf	_ui8_PWMoutvalue^(0+128)
  8254  16EA  0008               	return
  8255  16EB                     __end_of_PWM_Write_Out:	
  8256  16EB                     __ptext5:	
  8257 ;; *************** function _init_bldc *****************
  8258 ;; Defined at:
  8259 ;;		line 207 in file "../bldc.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;		None
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      void 
  8266 ;; Registers used:
  8267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8268 ;; Tracked objects:
  8269 ;;		On entry : 1F/2
  8270 ;;		On exit  : 1F/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8273 ;;      Params:         0       0       0       0       0       0       0       0
  8274 ;;      Locals:         0       0       0       0       0       0       0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0       0
  8276 ;;      Totals:         0       0       0       0       0       0       0       0
  8277 ;;Total ram usage:        0 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    5
  8280 ;; This function calls:
  8281 ;;		_InitMotorRun
  8282 ;; This function is called by:
  8283 ;;		_system_init
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function _init_bldc
  8289  16EB                     _init_bldc:	
  8290                           
  8291                           ;bldc.c: 218: PSTR1CON = 0;
  8292                           
  8293                           ;incstack = 0
  8294                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8295  16EB  0025               	movlb	5	; select bank5
  8296  16EC  0196               	clrf	22	;volatile
  8297                           
  8298                           ;bldc.c: 222: CM1CON0 = 0x80;
  8299  16ED  3080               	movlw	128
  8300  16EE  0022               	movlb	2	; select bank2
  8301  16EF  0091               	movwf	17	;volatile
  8302                           
  8303                           ;bldc.c: 228: CM1CON1 = 0x00;
  8304  16F0  0192               	clrf	18	;volatile
  8305                           
  8306                           ;bldc.c: 230: C1IE = 0;
  8307  16F1  0021               	movlb	1	; select bank1
  8308  16F2  1292               	bcf	18,5	;volatile
  8309                           
  8310                           ;bldc.c: 235: PWM1CON = 0x87;
  8311  16F3  3087               	movlw	135
  8312  16F4  0025               	movlb	5	; select bank5
  8313  16F5  0094               	movwf	20	;volatile
  8314                           
  8315                           ;bldc.c: 239: CCP1AS = 0x800;
  8316  16F6  0195               	clrf	21	;volatile
  8317                           
  8318                           ;bldc.c: 240: CCP1CON = 0x0C;
  8319  16F7  300C               	movlw	12
  8320  16F8  0093               	movwf	19	;volatile
  8321                           
  8322                           ;bldc.c: 246: CCPR1L = 0;
  8323  16F9  0191               	clrf	17	;volatile
  8324                           
  8325                           ;bldc.c: 248: CCP2IE = 0;
  8326  16FA  0021               	movlb	1	; select bank1
  8327  16FB  1012               	bcf	18,0	;volatile
  8328                           
  8329                           ;bldc.c: 249: CCP2CON = 0x04;
  8330  16FC  3004               	movlw	4
  8331  16FD  0025               	movlb	5	; select bank5
  8332  16FE  009A               	movwf	26	;volatile
  8333                           
  8334                           ;bldc.c: 250: CCPR2L = 0xff;
  8335  16FF  30FF               	movlw	255
  8336  1700  0098               	movwf	24	;volatile
  8337                           
  8338                           ;bldc.c: 251: CCPR2H = 0xff;
  8339  1701  0099               	movwf	25	;volatile
  8340                           
  8341                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  8342  1702  3064               	movlw	100
  8343  1703  0020               	movlb	0	; select bank0
  8344  1704  009B               	movwf	27	;volatile
  8345                           
  8346                           ;bldc.c: 255: T2CON = 0x05;
  8347  1705  3005               	movlw	5
  8348  1706  009C               	movwf	28	;volatile
  8349                           
  8350                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  8351  1707  3028               	movlw	40
  8352  1708  0021               	movlb	1	; select bank1
  8353  1709  00EB               	movwf	_ui8_BlankingCount^(0+128)
  8354                           
  8355                           ;bldc.c: 264: TMR2IE = 1;
  8356  170A  1491               	bsf	17,1	;volatile
  8357                           
  8358                           ;bldc.c: 267: MotorFlags.b = 0;
  8359  170B  0020               	movlb	0	; select bank0
  8360  170C  01CE               	clrf	_MotorFlags
  8361                           
  8362                           ;bldc.c: 270: InitMotorRun( );
  8363  170D  2F0E               	ljmp	l5021
  8364  170E                     __end_of_init_bldc:	
  8365  170E                     __ptext6:	
  8366 ;; *************** function _InitMotorRun *****************
  8367 ;; Defined at:
  8368 ;;		line 2171 in file "../bldc.c"
  8369 ;; Parameters:    Size  Location     Type
  8370 ;;		None
  8371 ;; Auto vars:     Size  Location     Type
  8372 ;;		None
  8373 ;; Return value:  Size  Location     Type
  8374 ;;                  1    wreg      void 
  8375 ;; Registers used:
  8376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8377 ;; Tracked objects:
  8378 ;;		On entry : 1D/2
  8379 ;;		On exit  : 1F/0
  8380 ;;		Unchanged: 0/0
  8381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8382 ;;      Params:         0       0       0       0       0       0       0       0
  8383 ;;      Locals:         0       0       0       0       0       0       0       0
  8384 ;;      Temps:          0       0       0       0       0       0       0       0
  8385 ;;      Totals:         0       0       0       0       0       0       0       0
  8386 ;;Total ram usage:        0 bytes
  8387 ;; Hardware stack levels used:    1
  8388 ;; Hardware stack levels required when called:    4
  8389 ;; This function calls:
  8390 ;;		_commutate
  8391 ;; This function is called by:
  8392 ;;		_init_bldc
  8393 ;;		_main
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           
  8398                           ;psect for function _InitMotorRun
  8399  170E                     _InitMotorRun:	
  8400  170E                     l5021:	
  8401                           ;incstack = 0
  8402                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8403                           
  8404                           
  8405                           ;bldc.c: 2176: if( 0 == MotorFlags.bits.B6 )
  8406  170E  0020               	movlb	0	; select bank0
  8407  170F  1B4E               	btfsc	_MotorFlags,6
  8408  1710  0008               	return
  8409  1711  30A6               	movlw	166
  8410                           
  8411                           ;bldc.c: 2179: {;bldc.c: 2181: MotorFlags.bits.B5 = 0;
  8412  1712  12CE               	bcf	_MotorFlags,5
  8413                           
  8414                           ;bldc.c: 2182: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  8415  1713  0022               	movlb	2	; select bank2
  8416  1714  00BF               	movwf	_ui16_comm_time_max^(0+256)
  8417  1715  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
  8418                           
  8419                           ;bldc.c: 2183: comm_state = 1;
  8420  1716  0021               	movlb	1	; select bank1
  8421  1717  01EC               	clrf	_comm_state^(0+128)
  8422  1718  0AEC               	incf	_comm_state^(0+128),f
  8423                           
  8424                           ;bldc.c: 2184: ui16_step_cnt = 0;
  8425  1719  01B4               	clrf	_ui16_step_cnt^(0+128)
  8426  171A  01B5               	clrf	(_ui16_step_cnt+1)^(0+128)
  8427                           
  8428                           ;bldc.c: 2185: ui16_duty_cycle_BLDC = 0;
  8429  171B  01AE               	clrf	_ui16_duty_cycle_BLDC^(0+128)
  8430  171C  01AF               	clrf	(_ui16_duty_cycle_BLDC+1)^(0+128)
  8431                           
  8432                           ;bldc.c: 2187: bemf_filter = 0;
  8433  171D  0020               	movlb	0	; select bank0
  8434  171E  01C6               	clrf	_comm_time
  8435  171F  01C7               	clrf	_comm_time+1
  8436                           
  8437                           ;bldc.c: 2189: phase_delay_counter_debug = 0;
  8438  1720  0022               	movlb	2	; select bank2
  8439  1721  01BD               	clrf	_phase_delay_counter^(0+256)
  8440  1722  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
  8441                           
  8442                           ;bldc.c: 2190: PSTR1CON = 0;
  8443  1723  0025               	movlb	5	; select bank5
  8444  1724  0196               	clrf	22	;volatile
  8445                           
  8446                           ;bldc.c: 2193: MotorFlags.bits.B3 = 1 ;
  8447  1725  0020               	movlb	0	; select bank0
  8448  1726  15CE               	bsf	_MotorFlags,3
  8449                           
  8450                           ;bldc.c: 2195: ui16_phase_angle = 128;
  8451  1727  174E               	bsf	_MotorFlags,6
  8452                           
  8453                           ;bldc.c: 2196: ui8_StartupPWM = 0 ;
  8454  1728  0021               	movlb	1	; select bank1
  8455  1729  01ED               	clrf	_ui8_StartupPWM^(0+128)
  8456                           
  8457                           ;bldc.c: 2197: CCPR1L = 0 ;
  8458  172A  0025               	movlb	5	; select bank5
  8459  172B  0191               	clrf	17	;volatile
  8460                           
  8461                           ;bldc.c: 2199: ui8_zero_cros_cnt = 0 ;
  8462  172C  0021               	movlb	1	; select bank1
  8463  172D  01E7               	clrf	_ui8_sampleState^(0+128)
  8464                           
  8465                           ;bldc.c: 2200: MotorFlags.bits.B4 = 1 ;
  8466  172E  0020               	movlb	0	; select bank0
  8467  172F  164E               	bsf	_MotorFlags,4
  8468                           
  8469                           ;bldc.c: 2208: commutate( );
  8470  1730  3180  2828         	ljmp	l4763
  8471  1732                     __end_of_InitMotorRun:	
  8472  1732                     __ptext24:	
  8473 ;; *************** function _FILTER_Ubat *****************
  8474 ;; Defined at:
  8475 ;;		line 264 in file "../adc.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;		None
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;		None
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      void 
  8482 ;; Registers used:
  8483 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8484 ;; Tracked objects:
  8485 ;;		On entry : 1F/1
  8486 ;;		On exit  : 1D/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8489 ;;      Params:         0       0       0       0       0       0       0       0
  8490 ;;      Locals:         0       0       0       0       0       0       0       0
  8491 ;;      Temps:          0      12       0       0       0       0       0       0
  8492 ;;      Totals:         0      12       0       0       0       0       0       0
  8493 ;;Total ram usage:       12 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    3
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		_Get_Analog_Value
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _FILTER_Ubat
  8505  1732                     _FILTER_Ubat:	
  8506                           
  8507                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  8508                           
  8509                           ;incstack = 0
  8510                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  8511  1732  0020               	movlb	0	; select bank0
  8512  1733  279D  3194         	fcall	PL70	;call to abstracted procedure
  8513  1735  0851               	movf	_ui16_Ubat_bldc,w	;volatile
  8514  1736  3FC0               	movwi [0]fsr1
  8515  1737  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8516  1738  3FC1               	movwi [1]fsr1
  8517                           
  8518                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  8519  1739  30BE               	movlw	((low (_inputArray1| (0+256)))& (0+255)+14)
  8520  173A  0086               	movwf	6
  8521  173B  30BC               	movlw	((low (_inputArray1| (0+256)))& (0+255)+12)
  8522  173C  0084               	movwf	4
  8523  173D  3001               	movlw	1	; select bank3/4
  8524  173E  0085               	movwf	5
  8525  173F  0023               	movlb	3	; select bank3
  8526  1740  0834               	movf	(_inputArray1^(0+384)+4),w
  8527  1741  0732               	addwf	(_inputArray1^(0+384)+2),w
  8528  1742  0020               	movlb	0	; select bank0
  8529  1743  00A4               	movwf	??_FILTER_Ubat
  8530  1744  0023               	movlb	3	; select bank3
  8531  1745  0835               	movf	((_inputArray1+1)^(0+384)+4),w
  8532  1746  3D33               	addwfc	((_inputArray1+1)^(0+384)+2),w
  8533  1747  0020               	movlb	0	; select bank0
  8534  1748  00A5               	movwf	??_FILTER_Ubat+1
  8535  1749  0023               	movlb	3	; select bank3
  8536  174A  0836               	movf	(_inputArray1^(0+384)+6),w
  8537  174B  0020               	movlb	0	; select bank0
  8538  174C  0724               	addwf	??_FILTER_Ubat,w
  8539  174D  00A6               	movwf	??_FILTER_Ubat+2
  8540  174E  0023               	movlb	3	; select bank3
  8541  174F  0837               	movf	((_inputArray1+1)^(0+384)+6),w
  8542  1750  0020               	movlb	0	; select bank0
  8543  1751  3D25               	addwfc	??_FILTER_Ubat+1,w
  8544  1752  00A7               	movwf	??_FILTER_Ubat+3
  8545  1753  0023               	movlb	3	; select bank3
  8546  1754  0838               	movf	(_inputArray1^(0+384)+8),w
  8547  1755  0020               	movlb	0	; select bank0
  8548  1756  0726               	addwf	??_FILTER_Ubat+2,w
  8549  1757  00A8               	movwf	??_FILTER_Ubat+4
  8550  1758  0023               	movlb	3	; select bank3
  8551  1759  0839               	movf	((_inputArray1+1)^(0+384)+8),w
  8552  175A  0020               	movlb	0	; select bank0
  8553  175B  3D27               	addwfc	??_FILTER_Ubat+3,w
  8554  175C  00A9               	movwf	??_FILTER_Ubat+5
  8555  175D  0023               	movlb	3	; select bank3
  8556  175E  083A               	movf	(_inputArray1^(0+384)+10),w
  8557  175F  0020               	movlb	0	; select bank0
  8558  1760  0728               	addwf	??_FILTER_Ubat+4,w
  8559  1761  00AA               	movwf	??_FILTER_Ubat+6
  8560  1762  0023               	movlb	3	; select bank3
  8561  1763  083B               	movf	((_inputArray1+1)^(0+384)+10),w
  8562  1764  0020               	movlb	0	; select bank0
  8563  1765  3D29               	addwfc	??_FILTER_Ubat+5,w
  8564  1766  00AB               	movwf	??_FILTER_Ubat+7
  8565  1767  3F00               	moviw [0]fsr0
  8566  1768  072A               	addwf	??_FILTER_Ubat+6,w
  8567  1769  00AC               	movwf	??_FILTER_Ubat+8
  8568  176A  3F01               	moviw [1]fsr0
  8569  176B  3D2B               	addwfc	??_FILTER_Ubat+7,w
  8570  176C  00AD               	movwf	??_FILTER_Ubat+9
  8571  176D  3F40               	moviw [0]fsr1
  8572  176E  072C               	addwf	??_FILTER_Ubat+8,w
  8573  176F  00AE               	movwf	??_FILTER_Ubat+10
  8574  1770  3F41               	moviw [1]fsr1
  8575  1771  3D2D               	addwfc	??_FILTER_Ubat+9,w
  8576  1772  00AF               	movwf	??_FILTER_Ubat+11
  8577  1773  0023               	movlb	3	; select bank3
  8578  1774  0830               	movf	_inputArray1^(0+384),w
  8579  1775  0020               	movlb	0	; select bank0
  8580  1776  072E               	addwf	??_FILTER_Ubat+10,w
  8581  1777  0022               	movlb	2	; select bank2
  8582  1778  00CB               	movwf	_filter1^(0+256)
  8583  1779  0023               	movlb	3	; select bank3
  8584  177A  0831               	movf	(_inputArray1+1)^(0+384),w
  8585  177B  0020               	movlb	0	; select bank0
  8586  177C  3D2F               	addwfc	??_FILTER_Ubat+11,w
  8587  177D  0022               	movlb	2	; select bank2
  8588  177E  00CC               	movwf	(_filter1+1)^(0+256)
  8589                           
  8590                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  8591  177F  0020               	movlb	0	; select bank0
  8592  1780  00A5               	movwf	??_FILTER_Ubat+1
  8593  1781  0022               	movlb	2	; select bank2
  8594  1782  084B               	movf	_filter1^(0+256),w
  8595  1783  0020               	movlb	0	; select bank0
  8596  1784  00A4               	movwf	??_FILTER_Ubat
  8597  1785  36A5               	lsrf	??_FILTER_Ubat+1,f
  8598  1786  0CA4               	rrf	??_FILTER_Ubat,f
  8599  1787  36A5               	lsrf	??_FILTER_Ubat+1,f
  8600  1788  0CA4               	rrf	??_FILTER_Ubat,f
  8601  1789  36A5               	lsrf	??_FILTER_Ubat+1,f
  8602  178A  0CA4               	rrf	??_FILTER_Ubat,f
  8603  178B  0824               	movf	??_FILTER_Ubat,w
  8604  178C  0022               	movlb	2	; select bank2
  8605  178D  00D1               	movwf	_ui16_fir_Bat_mittel^(0+256)
  8606  178E  0020               	movlb	0	; select bank0
  8607  178F  0825               	movf	??_FILTER_Ubat+1,w
  8608  1790  0022               	movlb	2	; select bank2
  8609  1791  00D2               	movwf	(_ui16_fir_Bat_mittel+1)^(0+256)
  8610                           
  8611                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  8612  1792  3008               	movlw	8
  8613  1793  0020               	movlb	0	; select bank0
  8614  1794  0AD0               	incf	_windowPtr1,f
  8615  1795  0250               	subwf	_windowPtr1,w
  8616  1796  1C03               	skipc
  8617  1797  0008               	return
  8618                           
  8619                           ;adc.c: 277: {;adc.c: 279: windowPtr1 = 0;
  8620  1798  01D0               	clrf	_windowPtr1
  8621                           
  8622                           ;adc.c: 280: filter1 = 0;
  8623  1799  0022               	movlb	2	; select bank2
  8624  179A  01CB               	clrf	_filter1^(0+256)
  8625  179B  01CC               	clrf	(_filter1+1)^(0+256)
  8626  179C  0008               	return
  8627  179D                     __end_of_FILTER_Ubat:	
  8628  179D                     PL70:	
  8629  179D  3550               	lslf	_windowPtr1,w
  8630  179E  3EB0               	addlw	(low (_inputArray1| (0+256)))& (0+255)
  8631  179F  0086               	movwf	6
  8632  17A0  3001               	movlw	1	; select bank3/4
  8633  17A1  0087               	movwf	7
  8634  17A2  0008               	return
  8635  17A3                     __end_ofPL70:	
  8636  17A3                     __ptext36:	
  8637 ;; *************** function _interrupt_PWMCapture *****************
  8638 ;; Defined at:
  8639 ;;		line 454 in file "../pwm.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;		None
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;		None
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      void 
  8646 ;; Registers used:
  8647 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8648 ;; Tracked objects:
  8649 ;;		On entry : 1F/0
  8650 ;;		On exit  : 18/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8653 ;;      Params:         0       0       0       0       0       0       0       0
  8654 ;;      Locals:         0       0       0       0       0       0       0       0
  8655 ;;      Temps:          0       0       0       0       0       0       0       0
  8656 ;;      Totals:         0       0       0       0       0       0       0       0
  8657 ;;Total ram usage:        0 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; This function calls:
  8660 ;;		Nothing
  8661 ;; This function is called by:
  8662 ;;		_interrupt_handler
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           
  8667                           ;psect for function _interrupt_PWMCapture
  8668  17A3                     _interrupt_PWMCapture:	
  8669                           
  8670                           ;pwm.c: 466: switch( ui8_Pulse_State )
  8671                           
  8672                           ;incstack = 0
  8673                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
  8674  17A3  2FE5               	goto	i1l6179
  8675  17A4                     i1l1168:	
  8676                           ;pwm.c: 468: {;pwm.c: 470: case 0:
  8677                           
  8678                           
  8679                           ;pwm.c: 472: {;pwm.c: 476: ui8_Pulse_State = 1;
  8680                           
  8681                           ;pwm.c: 477: ui16_Capt_Val0.b.lo = CCPR5L;
  8682  17A4  27F2  3194         	fcall	PL62	;call to abstracted procedure
  8683  17A6  00A8               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
  8684                           
  8685                           ;pwm.c: 478: ui16_Capt_Val0.b.hi = CCPR5H;
  8686  17A7  0026               	movlb	6	; select bank6
  8687  17A8  081D               	movf	29,w	;volatile
  8688  17A9  0021               	movlb	1	; select bank1
  8689  17AA  00A9               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
  8690                           
  8691                           ;pwm.c: 479: CCP5CON = 0x04;
  8692                           
  8693                           ;pwm.c: 480: break;
  8694  17AB  2FFC               	ljmp	PL86	;call to abstracted procedure
  8695  17AC                     i1l6167:	
  8696                           
  8697                           ;pwm.c: 488: {;pwm.c: 492: ui8_Pulse_State = 2;
  8698  17AC  3002               	movlw	2
  8699  17AD  00D2               	movwf	_ui8_Pulse_State^(0+128)
  8700                           
  8701                           ;pwm.c: 493: ui16_Capt_Val1.b.lo = CCPR5L;
  8702  17AE  0026               	movlb	6	; select bank6
  8703  17AF  081C               	movf	28,w	;volatile
  8704  17B0  0021               	movlb	1	; select bank1
  8705  17B1  00A6               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
  8706                           
  8707                           ;pwm.c: 494: ui16_Capt_Val1.b.hi = CCPR5H;
  8708  17B2  0026               	movlb	6	; select bank6
  8709  17B3  081D               	movf	29,w	;volatile
  8710  17B4  0021               	movlb	1	; select bank1
  8711  17B5  00A7               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
  8712                           
  8713                           ;pwm.c: 495: CCP5CON = 0x05;
  8714                           
  8715                           ;pwm.c: 496: break;
  8716  17B6  2FF8               	ljmp	PL80	;call to abstracted procedure
  8717  17B7                     i1l1171:	
  8718                           ;pwm.c: 499: };pwm.c: 502: case 2:
  8719                           
  8720                           
  8721                           ;pwm.c: 504: {;pwm.c: 508: ui8_Pulse_State = 1;
  8722                           
  8723                           ;pwm.c: 509: ui16_Capt_Val2.b.lo = CCPR5L;
  8724  17B7  27F2  3194         	fcall	PL62	;call to abstracted procedure
  8725  17B9  00A4               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
  8726                           
  8727                           ;pwm.c: 510: ui16_Capt_Val2.b.hi = CCPR5H;
  8728  17BA  0026               	movlb	6	; select bank6
  8729  17BB  081D               	movf	29,w	;volatile
  8730  17BC  0021               	movlb	1	; select bank1
  8731  17BD  00A5               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
  8732                           
  8733                           ;pwm.c: 511: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
  8734  17BE  0825               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
  8735  17BF  0022               	movlb	2	; select bank2
  8736  17C0  00B2               	movwf	(_ui16_PWM_Freq_In+1)^(0+256)
  8737  17C1  0021               	movlb	1	; select bank1
  8738  17C2  0824               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
  8739  17C3  0022               	movlb	2	; select bank2
  8740  17C4  00B1               	movwf	_ui16_PWM_Freq_In^(0+256)
  8741  17C5  0021               	movlb	1	; select bank1
  8742  17C6  0828               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
  8743  17C7  0022               	movlb	2	; select bank2
  8744  17C8  02B1               	subwf	_ui16_PWM_Freq_In^(0+256),f
  8745  17C9  0021               	movlb	1	; select bank1
  8746  17CA  0829               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
  8747  17CB  0022               	movlb	2	; select bank2
  8748  17CC  3BB2               	subwfb	(_ui16_PWM_Freq_In+1)^(0+256),f
  8749                           
  8750                           ;pwm.c: 512: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
  8751  17CD  0021               	movlb	1	; select bank1
  8752  17CE  0827               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
  8753  17CF  0022               	movlb	2	; select bank2
  8754  17D0  00DF               	movwf	(_ui16_Duty_Cycle_In+1)^(0+256)
  8755  17D1  0021               	movlb	1	; select bank1
  8756  17D2  0826               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
  8757  17D3  0022               	movlb	2	; select bank2
  8758  17D4  00DE               	movwf	_ui16_Duty_Cycle_In^(0+256)
  8759  17D5  0021               	movlb	1	; select bank1
  8760  17D6  0828               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
  8761  17D7  0022               	movlb	2	; select bank2
  8762  17D8  02DE               	subwf	_ui16_Duty_Cycle_In^(0+256),f
  8763  17D9  0021               	movlb	1	; select bank1
  8764  17DA  0829               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
  8765  17DB  0022               	movlb	2	; select bank2
  8766  17DC  3BDF               	subwfb	(_ui16_Duty_Cycle_In+1)^(0+256),f
  8767                           
  8768                           ;pwm.c: 513: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
  8769  17DD  0021               	movlb	1	; select bank1
  8770  17DE  0825               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
  8771  17DF  00A9               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
  8772  17E0  0824               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
  8773  17E1  00A8               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
  8774                           
  8775                           ;pwm.c: 514: CCP5CON = 0x04;
  8776  17E2  2FFC               	ljmp	PL86	;call to abstracted procedure
  8777  17E3                     i1l6175:	
  8778                           
  8779                           ;pwm.c: 542: {;pwm.c: 546: ui8_Pulse_State = 0;
  8780  17E3  01D2               	clrf	_ui8_Pulse_State^(0+128)
  8781                           
  8782                           ;pwm.c: 547: break;
  8783  17E4  0008               	return
  8784  17E5                     i1l6179:	
  8785  17E5  0021               	movlb	1	; select bank1
  8786  17E6  0852               	movf	_ui8_Pulse_State^(0+128),w
  8787                           
  8788                           ; Switch size 1, requested type "space"
  8789                           ; Number of cases is 3, Range of values is 0 to 2
  8790                           ; switch strategies available:
  8791                           ; Name         Instructions Cycles
  8792                           ; simple_byte           10     6 (average)
  8793                           ; direct_byte           12     6 (fixed)
  8794                           ; jumptable            260     6 (fixed)
  8795                           ;	Chosen strategy is simple_byte
  8796  17E7  3A00               	xorlw	0	; case 0
  8797  17E8  1903               	skipnz
  8798  17E9  2FA4               	goto	i1l1168
  8799  17EA  3A01               	xorlw	1	; case 1
  8800  17EB  1903               	skipnz
  8801  17EC  2FAC               	goto	i1l6167
  8802  17ED  3A03               	xorlw	3	; case 2
  8803  17EE  1903               	skipnz
  8804  17EF  2FB7               	goto	i1l1171
  8805  17F0  2FE3               	goto	i1l6175
  8806  17F1  0008               	return
  8807  17F2                     __end_of_interrupt_PWMCapture:	
  8808  17F2                     PL62:	
  8809  17F2  01D2               	clrf	_ui8_Pulse_State^(0+128)
  8810  17F3  0AD2               	incf	_ui8_Pulse_State^(0+128),f
  8811  17F4  0026               	movlb	6	; select bank6
  8812  17F5  081C               	movf	28,w	;volatile
  8813  17F6  0021               	movlb	1	; select bank1
  8814  17F7  0008               	return
  8815  17F8                     __end_ofPL62:	
  8816  17F8                     PL80:	
  8817  17F8  3005               	movlw	5
  8818  17F9  0026               	movlb	6	; select bank6
  8819  17FA  009E               	movwf	30	;volatile
  8820  17FB  0008               	return
  8821  17FC                     __end_ofPL80:	
  8822  17FC                     PL86:	
  8823  17FC  3004               	movlw	4
  8824  17FD  0026               	movlb	6	; select bank6
  8825  17FE  009E               	movwf	30	;volatile
  8826  17FF  0008               	return
  8827  1800                     __end_ofPL86:	
  8828                           
  8829                           	psect	text7
  8830  0028                     __ptext7:	
  8831 ;; *************** function _commutate *****************
  8832 ;; Defined at:
  8833 ;;		line 1426 in file "../bldc.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;		None
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;		None
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  1    wreg      void 
  8840 ;; Registers used:
  8841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8842 ;; Tracked objects:
  8843 ;;		On entry : 1F/0
  8844 ;;		On exit  : 1F/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8847 ;;      Params:         0       0       0       0       0       0       0       0
  8848 ;;      Locals:         0       0       0       0       0       0       0       0
  8849 ;;      Temps:          0      12       0       0       0       0       0       0
  8850 ;;      Totals:         0      12       0       0       0       0       0       0
  8851 ;;Total ram usage:       12 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    3
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_InitMotorRun
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           
  8862                           ;psect for function _commutate
  8863  0028                     _commutate:	
  8864  0028                     l4763:	
  8865                           ;incstack = 0
  8866                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0]
  8867                           
  8868                           
  8869                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  8870  0028  3000               	movlw	0
  8871  0029  0021               	movlb	1	; select bank1
  8872  002A  0235               	subwf	(_ui16_step_cnt+1)^(0+128),w
  8873  002B  300A               	movlw	10
  8874  002C  1903               	skipnz
  8875  002D  0234               	subwf	_ui16_step_cnt^(0+128),w
  8876  002E  1803               	skipnc
  8877  002F  2833               	goto	l4767
  8878                           
  8879                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
  8880  0030  0AB4               	incf	_ui16_step_cnt^(0+128),f
  8881  0031  1903               	skipnz
  8882  0032  0AB5               	incf	(_ui16_step_cnt+1)^(0+128),f
  8883  0033                     l4767:	
  8884                           
  8885                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  8886                           
  8887                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  8888                           
  8889                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  8890  0033  2446  3180         	fcall	PL4	;call to abstracted procedure
  8891  0035  0020               	movlb	0	; select bank0
  8892  0036  00A4               	movwf	??_commutate
  8893  0037  0023               	movlb	3	; select bank3
  8894  0038  0825               	movf	((_B+1)^(0+384)+4),w
  8895  0039  3D23               	addwfc	((_B+1)^(0+384)+2),w
  8896  003A  0020               	movlb	0	; select bank0
  8897  003B  00A5               	movwf	??_commutate+1
  8898  003C  0023               	movlb	3	; select bank3
  8899  003D  0826               	movf	(_B^(0+384)+6),w
  8900  003E  0020               	movlb	0	; select bank0
  8901  003F  0724               	addwf	??_commutate,w
  8902  0040  00A6               	movwf	??_commutate+2
  8903  0041  0023               	movlb	3	; select bank3
  8904  0042  0827               	movf	((_B+1)^(0+384)+6),w
  8905  0043  0020               	movlb	0	; select bank0
  8906  0044  3D25               	addwfc	??_commutate+1,w
  8907  0045  00A7               	movwf	??_commutate+3
  8908  0046  0023               	movlb	3	; select bank3
  8909  0047  0828               	movf	(_B^(0+384)+8),w
  8910  0048  0020               	movlb	0	; select bank0
  8911  0049  0726               	addwf	??_commutate+2,w
  8912  004A  00A8               	movwf	??_commutate+4
  8913  004B  0023               	movlb	3	; select bank3
  8914  004C  0829               	movf	((_B+1)^(0+384)+8),w
  8915  004D  0020               	movlb	0	; select bank0
  8916  004E  3D27               	addwfc	??_commutate+3,w
  8917  004F  00A9               	movwf	??_commutate+5
  8918  0050  0023               	movlb	3	; select bank3
  8919  0051  082A               	movf	(_B^(0+384)+10),w
  8920  0052  0020               	movlb	0	; select bank0
  8921  0053  0728               	addwf	??_commutate+4,w
  8922  0054  00AA               	movwf	??_commutate+6
  8923  0055  0023               	movlb	3	; select bank3
  8924  0056  082B               	movf	((_B+1)^(0+384)+10),w
  8925  0057  0020               	movlb	0	; select bank0
  8926  0058  3D29               	addwfc	??_commutate+5,w
  8927  0059  00AB               	movwf	??_commutate+7
  8928  005A  3F00               	moviw [0]fsr0
  8929  005B  072A               	addwf	??_commutate+6,w
  8930  005C  00AC               	movwf	??_commutate+8
  8931  005D  3F01               	moviw [1]fsr0
  8932  005E  3D2B               	addwfc	??_commutate+7,w
  8933  005F  00AD               	movwf	??_commutate+9
  8934  0060  3F40               	moviw [0]fsr1
  8935  0061  072C               	addwf	??_commutate+8,w
  8936  0062  00AE               	movwf	??_commutate+10
  8937  0063  3F41               	moviw [1]fsr1
  8938  0064  3D2D               	addwfc	??_commutate+9,w
  8939  0065  00AF               	movwf	??_commutate+11
  8940  0066  0023               	movlb	3	; select bank3
  8941  0067  0820               	movf	_B^(0+384),w
  8942  0068  0020               	movlb	0	; select bank0
  8943  0069  072E               	addwf	??_commutate+10,w
  8944  006A  0022               	movlb	2	; select bank2
  8945  006B  00B7               	movwf	_ui16_speed_fil^(0+256)
  8946  006C  0023               	movlb	3	; select bank3
  8947  006D  0821               	movf	(_B+1)^(0+384),w
  8948  006E  0020               	movlb	0	; select bank0
  8949  006F  3D2F               	addwfc	??_commutate+11,w
  8950                           
  8951                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  8952                           
  8953                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  8954                           
  8955                           ;bldc.c: 1455: bemf_filter = 62;
  8956                           
  8957                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  8958  0070  2491  3180         	fcall	PL18	;call to abstracted procedure
  8959                           
  8960                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  8961  0072  1DCE               	btfss	_MotorFlags,3
  8962  0073  28AE               	goto	l327
  8963                           
  8964                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
  8965                           
  8966                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  8967  0074  242B  3180         	fcall	PL2	;call to abstracted procedure
  8968  0076  1803               	skipnc
  8969  0077  287B               	goto	l4795
  8970                           
  8971                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
  8972  0078  24B3  3180         	fcall	PL22	;call to abstracted procedure
  8973                           
  8974                           ;bldc.c: 1478: }
  8975  007A  288F               	goto	l4819
  8976  007B                     l4795:	
  8977                           
  8978                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
  8979  007B  0022               	movlb	2	; select bank2
  8980  007C  01BD               	clrf	_phase_delay_counter^(0+256)
  8981  007D  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
  8982  007E  288F               	goto	l4819
  8983  007F                     l4797:	
  8984                           
  8985                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
  8986  007F  30A6               	movlw	166
  8987  0080  288B               	goto	L4
  8988  0081                     l4799:	
  8989                           ;bldc.c: 1517: break;
  8990                           
  8991                           
  8992                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
  8993  0081  252B  3180         	fcall	PL66	;call to abstracted procedure
  8994                           
  8995                           ;bldc.c: 1527: break;
  8996  0083  289D               	goto	l4821
  8997  0084                     l4801:	
  8998                           
  8999                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
  9000  0084  307D               	movlw	125
  9001  0085  288B               	goto	L4
  9002  0086                     l4803:	
  9003                           ;bldc.c: 1537: break;
  9004                           
  9005                           
  9006                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
  9007  0086  3053               	movlw	83
  9008  0087  288B               	goto	L4
  9009  0088                     l4805:	
  9010                           ;bldc.c: 1547: break;
  9011                           
  9012                           
  9013                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
  9014  0088  303E               	movlw	62
  9015  0089  288B               	goto	L4
  9016  008A                     l4807:	
  9017                           ;bldc.c: 1557: break;
  9018                           
  9019                           
  9020                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  9021  008A  3032               	movlw	50
  9022  008B                     L4:	
  9023  008B  0022               	movlb	2	; select bank2
  9024  008C  00BF               	movwf	_ui16_comm_time_max^(0+256)
  9025  008D  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
  9026                           
  9027                           ;bldc.c: 1567: break;
  9028  008E  289D               	goto	l4821
  9029  008F                     l4819:	
  9030                           
  9031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9032                           ; Switch size 1, requested type "space"
  9033                           ; Number of cases is 1, Range of values is 0 to 0
  9034                           ; switch strategies available:
  9035                           ; Name         Instructions Cycles
  9036                           ; simple_byte            4     3 (average)
  9037                           ; direct_byte            8     6 (fixed)
  9038                           ; jumptable            260     6 (fixed)
  9039                           ;	Chosen strategy is simple_byte
  9040  008F  0021               	movlb	1	; select bank1
  9041  0090  0835               	movf	(_ui16_step_cnt+1)^(0+128),w
  9042  0091  3A00               	xorlw	0	; case 0
  9043  0092  1903               	skipnz
  9044  0093  2895               	goto	l10083
  9045  0094  288A               	goto	l4807
  9046  0095                     l10083:	
  9047                           
  9048                           ; Switch size 1, requested type "space"
  9049                           ; Number of cases is 10, Range of values is 0 to 9
  9050                           ; switch strategies available:
  9051                           ; Name         Instructions Cycles
  9052                           ; direct_byte           26     6 (fixed)
  9053                           ; simple_byte           31    16 (average)
  9054                           ; jumptable            260     6 (fixed)
  9055                           ;	Chosen strategy is direct_byte
  9056  0095  2531  3180         	fcall	PL74	;call to abstracted procedure
  9057  0097  1803               	skipnc
  9058  0098  288A               	goto	l4807
  9059  0099  3187               	movlp	high S10085
  9060  009A  3504               	lslf	4,w
  9061  009B  3E29               	addlw	low S10085
  9062  009C  0082               	movwf	2
  9063  009D                     l4821:	
  9064                           
  9065                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
  9066  009D  3000               	movlw	0
  9067  009E  0240               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  9068  009F  3032               	movlw	50
  9069  00A0  1903               	skipnz
  9070  00A1  023F               	subwf	_ui16_comm_time_max^(0+256),w
  9071  00A2  1803               	skipnc
  9072  00A3  28A7               	goto	l4825
  9073                           
  9074                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
  9075  00A4  3032               	movlw	50
  9076  00A5  00BF               	movwf	_ui16_comm_time_max^(0+256)
  9077  00A6  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
  9078  00A7                     l4825:	
  9079                           
  9080                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
  9081  00A7  0020               	movlb	0	; select bank0
  9082  00A8  1E4E               	btfss	_MotorFlags,4
  9083  00A9  28D7               	goto	l345
  9084                           
  9085                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
  9086  00AA  300A               	movlw	10
  9087  00AB  0021               	movlb	1	; select bank1
  9088  00AC  00ED               	movwf	_ui8_StartupPWM^(0+128)
  9089  00AD  28D7               	goto	l345
  9090  00AE                     l327:	
  9091                           
  9092                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
  9093  00AE  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9094  00AF  28B4               	goto	l4831
  9095                           
  9096                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
  9097  00B0  0022               	movlb	2	; select bank2
  9098  00B1  01BD               	clrf	_phase_delay_counter^(0+256)
  9099  00B2  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
  9100                           
  9101                           ;bldc.c: 1659: }
  9102  00B3  28C1               	goto	l4833
  9103  00B4                     l4831:	
  9104                           
  9105                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  9106  00B4  0847               	movf	_comm_time+1,w
  9107  00B5  00A5               	movwf	??_commutate+1
  9108  00B6  0846               	movf	_comm_time,w
  9109  00B7  00A4               	movwf	??_commutate
  9110  00B8  36A5               	lsrf	??_commutate+1,f
  9111  00B9  0CA4               	rrf	??_commutate,f
  9112  00BA  0824               	movf	??_commutate,w
  9113  00BB  0022               	movlb	2	; select bank2
  9114  00BC  00BD               	movwf	_phase_delay_counter^(0+256)
  9115  00BD  0020               	movlb	0	; select bank0
  9116  00BE  0825               	movf	??_commutate+1,w
  9117  00BF  0022               	movlb	2	; select bank2
  9118  00C0  00BE               	movwf	(_phase_delay_counter+1)^(0+256)
  9119  00C1                     l4833:	
  9120                           
  9121                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  9122                           
  9123                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
  9124                           
  9125                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  9126  00C1  251E  3180         	fcall	PL58	;call to abstracted procedure
  9127  00C3  1F4E               	btfss	_MotorFlags,6
  9128  00C4  28D5               	goto	l4841
  9129                           
  9130                           ;bldc.c: 1693: {;bldc.c: 1751: CCPR1L = ui16_duty_cycle_BLDC >> 2;
  9131  00C5  0021               	movlb	1	; select bank1
  9132  00C6  082F               	movf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
  9133  00C7  0020               	movlb	0	; select bank0
  9134  00C8  00A5               	movwf	??_commutate+1
  9135  00C9  0021               	movlb	1	; select bank1
  9136  00CA  082E               	movf	_ui16_duty_cycle_BLDC^(0+128),w
  9137  00CB  0020               	movlb	0	; select bank0
  9138  00CC  00A4               	movwf	??_commutate
  9139  00CD  36A5               	lsrf	??_commutate+1,f
  9140  00CE  0CA4               	rrf	??_commutate,f
  9141  00CF  36A5               	lsrf	??_commutate+1,f
  9142  00D0  0CA4               	rrf	??_commutate,f
  9143  00D1  0824               	movf	??_commutate,w
  9144                           
  9145                           ;bldc.c: 1752: CCP1CON = ((ui16_duty_cycle_BLDC & 0b11) << 4) | 0x0C;
  9146  00D2  24EE  3180         	fcall	PL34	;call to abstracted procedure
  9147                           
  9148                           ;bldc.c: 1766: }
  9149  00D4  28D7               	goto	l345
  9150  00D5                     l4841:	
  9151                           
  9152                           ;bldc.c: 1769: else;bldc.c: 1770: {;bldc.c: 1772: CCPR1L = 0;
  9153  00D5  0025               	movlb	5	; select bank5
  9154  00D6  0191               	clrf	17	;volatile
  9155  00D7                     l345:	
  9156                           
  9157                           ;bldc.c: 1774: };bldc.c: 1778: };bldc.c: 1781: comm_time = 0;
  9158                           
  9159                           ;bldc.c: 1785: if( comm_state == 0xff )
  9160  00D7  253B  3180         	fcall	PL84	;call to abstracted procedure
  9161  00D9  0F6C               	incfsz	_comm_state^(0+128),w
  9162  00DA  2929               	goto	l4991
  9163                           
  9164                           ;bldc.c: 1787: {;bldc.c: 1789: comm_state = 6;
  9165  00DB  3006               	movlw	6
  9166  00DC  00EC               	movwf	_comm_state^(0+128)
  9167  00DD  2929               	goto	l4991
  9168  00DE                     l4847:	
  9169                           
  9170                           ;bldc.c: 1801: {;bldc.c: 1807: PSTR1CON = 0b00000001;
  9171  00DE  3001               	movlw	1
  9172  00DF  0025               	movlb	5	; select bank5
  9173  00E0  0096               	movwf	22	;volatile
  9174                           
  9175                           ;bldc.c: 1810: if( MotorFlags.bits.B6 )
  9176  00E1  0020               	movlb	0	; select bank0
  9177  00E2  1F4E               	btfss	_MotorFlags,6
  9178  00E3  28E6               	goto	l4853
  9179                           
  9180                           ;bldc.c: 1812: {;bldc.c: 1814: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9181  00E4  2506  3180         	fcall	PL42	;call to abstracted procedure
  9182  00E6                     l4853:	
  9183                           
  9184                           ;bldc.c: 1816: };bldc.c: 1820: LATB2 = 0;
  9185                           
  9186                           ;bldc.c: 1821: LATB1 = 0;
  9187                           
  9188                           ;bldc.c: 1822: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9189                           
  9190                           ;bldc.c: 1823: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9191                           
  9192                           ;bldc.c: 1824: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9193                           
  9194                           ;bldc.c: 1825: CM1CON1 = 0x02;
  9195                           
  9196                           ;bldc.c: 1838: CM1CON0 = 0x84;
  9197                           
  9198                           ;bldc.c: 1839: rising_bemf_flag = 1;
  9199  00E6  245E  3180         	fcall	PL12	;call to abstracted procedure
  9200  00E8  2916               	goto	L10
  9201  00E9                     l4871:	
  9202                           ;bldc.c: 1846: break;
  9203                           
  9204                           ;bldc.c: 1840: comm_state = 6;
  9205                           
  9206                           
  9207                           ;bldc.c: 1856: {;bldc.c: 1861: PSTR1CON = 0b00000001;
  9208  00E9  3001               	movlw	1
  9209  00EA  0025               	movlb	5	; select bank5
  9210  00EB  0096               	movwf	22	;volatile
  9211                           
  9212                           ;bldc.c: 1864: if( MotorFlags.bits.B6 )
  9213  00EC  0020               	movlb	0	; select bank0
  9214  00ED  1F4E               	btfss	_MotorFlags,6
  9215  00EE  28F1               	goto	l4877
  9216                           
  9217                           ;bldc.c: 1866: {;bldc.c: 1868: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9218  00EF  250C  3180         	fcall	PL46	;call to abstracted procedure
  9219  00F1                     l4877:	
  9220                           
  9221                           ;bldc.c: 1870: };bldc.c: 1874: LATB2 = 1;
  9222                           
  9223                           ;bldc.c: 1875: LATB1 = 0;
  9224                           
  9225                           ;bldc.c: 1876: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9226                           
  9227                           ;bldc.c: 1877: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9228                           
  9229                           ;bldc.c: 1878: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9230                           
  9231                           ;bldc.c: 1879: CM1CON1 = 0x01;
  9232                           
  9233                           ;bldc.c: 1893: CM1CON0 = 0x94;
  9234  00F1  24D4  3180         	fcall	PL26	;call to abstracted procedure
  9235  00F3                     l4891:	
  9236                           
  9237                           ;bldc.c: 1894: rising_bemf_flag = 0;
  9238                           
  9239                           ;bldc.c: 1895: comm_state = 1;
  9240  00F3  2525  3180         	fcall	PL64	;call to abstracted procedure
  9241                           
  9242                           ;bldc.c: 1903: break;
  9243  00F5  293D               	goto	l4993
  9244  00F6                     l4895:	
  9245                           
  9246                           ;bldc.c: 1913: {;bldc.c: 1918: PSTR1CON = 0b00000010;
  9247  00F6  3002               	movlw	2
  9248  00F7  0025               	movlb	5	; select bank5
  9249  00F8  0096               	movwf	22	;volatile
  9250                           
  9251                           ;bldc.c: 1921: if( MotorFlags.bits.B6 )
  9252  00F9  0020               	movlb	0	; select bank0
  9253  00FA  1F4E               	btfss	_MotorFlags,6
  9254  00FB  28FE               	goto	l4901
  9255                           
  9256                           ;bldc.c: 1923: {;bldc.c: 1925: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9257  00FC  2500  3180         	fcall	PL40	;call to abstracted procedure
  9258  00FE                     l4901:	
  9259                           
  9260                           ;bldc.c: 1927: };bldc.c: 1930: LATC2 = 0;
  9261                           
  9262                           ;bldc.c: 1932: LATB1 = 0;
  9263                           
  9264                           ;bldc.c: 1933: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9265                           
  9266                           ;bldc.c: 1934: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9267                           
  9268                           ;bldc.c: 1935: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9269                           
  9270                           ;bldc.c: 1936: CM1CON1 = 0x00;
  9271                           
  9272                           ;bldc.c: 1950: CM1CON0 = 0x84;
  9273                           
  9274                           ;bldc.c: 1951: rising_bemf_flag = 1;
  9275  00FE  24C4  3180         	fcall	PL24	;call to abstracted procedure
  9276  0100  2916               	goto	L10
  9277  0101                     l4915:	
  9278                           ;bldc.c: 1957: break;
  9279                           
  9280                           ;bldc.c: 1952: comm_state = 2;
  9281                           
  9282                           
  9283                           ;bldc.c: 1967: {;bldc.c: 1973: PSTR1CON = 0b00000010;
  9284  0101  3002               	movlw	2
  9285  0102  0025               	movlb	5	; select bank5
  9286  0103  0096               	movwf	22	;volatile
  9287                           
  9288                           ;bldc.c: 1976: if( MotorFlags.bits.B6 )
  9289  0104  0020               	movlb	0	; select bank0
  9290  0105  1F4E               	btfss	_MotorFlags,6
  9291  0106  2909               	goto	l4921
  9292                           
  9293                           ;bldc.c: 1978: {;bldc.c: 1980: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9294  0107  2506  3180         	fcall	PL42	;call to abstracted procedure
  9295  0109                     l4921:	
  9296                           
  9297                           ;bldc.c: 1982: };bldc.c: 1985: LATC2 = 0;
  9298                           
  9299                           ;bldc.c: 1987: LATB1 = 1;
  9300                           
  9301                           ;bldc.c: 1988: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9302                           
  9303                           ;bldc.c: 1989: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9304                           
  9305                           ;bldc.c: 1990: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9306                           
  9307                           ;bldc.c: 1991: CM1CON1 = 0x02;
  9308                           
  9309                           ;bldc.c: 2005: CM1CON0 = 0x94;
  9310                           
  9311                           ;bldc.c: 2006: rising_bemf_flag = 0;
  9312  0109  2480  3180         	fcall	PL16	;call to abstracted procedure
  9313  010B  2922               	goto	L11
  9314  010C                     l4939:	
  9315                           ;bldc.c: 2012: break;
  9316                           
  9317                           ;bldc.c: 2007: comm_state = 3;
  9318                           
  9319                           
  9320                           ;bldc.c: 2021: {;bldc.c: 2027: PSTR1CON = 0b00000100;
  9321  010C  3004               	movlw	4
  9322  010D  0025               	movlb	5	; select bank5
  9323  010E  0096               	movwf	22	;volatile
  9324                           
  9325                           ;bldc.c: 2030: if( MotorFlags.bits.B6 )
  9326  010F  0020               	movlb	0	; select bank0
  9327  0110  1F4E               	btfss	_MotorFlags,6
  9328  0111  2914               	goto	l4945
  9329                           
  9330                           ;bldc.c: 2032: {;bldc.c: 2034: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9331  0112  250C  3180         	fcall	PL46	;call to abstracted procedure
  9332  0114                     l4945:	
  9333                           
  9334                           ;bldc.c: 2036: };bldc.c: 2039: LATC2 = 0;
  9335                           
  9336                           ;bldc.c: 2040: LATB2 = 0;
  9337                           
  9338                           ;bldc.c: 2042: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9339                           
  9340                           ;bldc.c: 2043: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9341                           
  9342                           ;bldc.c: 2044: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9343                           
  9344                           ;bldc.c: 2045: CM1CON1 = 0x01;
  9345                           
  9346                           ;bldc.c: 2060: CM1CON0 = 0x84;
  9347                           
  9348                           ;bldc.c: 2061: rising_bemf_flag = 1;
  9349  0114  246F  3180         	fcall	PL14	;call to abstracted procedure
  9350  0116                     L10:	
  9351  0116  1453               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9352                           
  9353                           ;bldc.c: 2062: comm_state = 4;
  9354  0117  2923               	goto	L8
  9355  0118                     l4963:	
  9356                           ;bldc.c: 2067: break;
  9357                           
  9358                           
  9359                           ;bldc.c: 2077: {;bldc.c: 2082: PSTR1CON = 0b00000100;
  9360  0118  3004               	movlw	4
  9361  0119  0025               	movlb	5	; select bank5
  9362  011A  0096               	movwf	22	;volatile
  9363                           
  9364                           ;bldc.c: 2085: if( MotorFlags.bits.B6 )
  9365  011B  0020               	movlb	0	; select bank0
  9366  011C  1F4E               	btfss	_MotorFlags,6
  9367  011D  2920               	goto	l4969
  9368                           
  9369                           ;bldc.c: 2087: {;bldc.c: 2089: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9370  011E  2500  3180         	fcall	PL40	;call to abstracted procedure
  9371  0120                     l4969:	
  9372                           
  9373                           ;bldc.c: 2091: };bldc.c: 2094: LATC2 = 1;
  9374                           
  9375                           ;bldc.c: 2095: LATB2 = 0;
  9376                           
  9377                           ;bldc.c: 2097: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9378                           
  9379                           ;bldc.c: 2098: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9380                           
  9381                           ;bldc.c: 2099: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9382                           
  9383                           ;bldc.c: 2100: CM1CON1 = 0x00;
  9384                           
  9385                           ;bldc.c: 2114: CM1CON0 = 0x94;
  9386                           
  9387                           ;bldc.c: 2115: rising_bemf_flag = 0;
  9388  0120  24A3  3180         	fcall	PL20	;call to abstracted procedure
  9389  0122                     L11:	
  9390  0122  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9391  0123                     L8:	
  9392                           
  9393                           ;bldc.c: 2116: comm_state = 5;
  9394  0123  0021               	movlb	1	; select bank1
  9395  0124  00EC               	movwf	_comm_state^(0+128)
  9396                           
  9397                           ;bldc.c: 2121: break;
  9398  0125  293D               	goto	l4993
  9399  0126                     l4983:	
  9400                           
  9401                           ;bldc.c: 2130: {;bldc.c: 2132: PSTR1CON = 0x00;
  9402                           
  9403                           ;bldc.c: 2133: CM1CON0 = 0x00;
  9404  0126  2536  3180         	fcall	PL76	;call to abstracted procedure
  9405  0128  28F3               	goto	l4891
  9406  0129                     l4991:	
  9407  0129  086C               	movf	_comm_state^(0+128),w
  9408                           
  9409                           ; Switch size 1, requested type "space"
  9410                           ; Number of cases is 6, Range of values is 1 to 6
  9411                           ; switch strategies available:
  9412                           ; Name         Instructions Cycles
  9413                           ; simple_byte           19    10 (average)
  9414                           ; direct_byte           21     9 (fixed)
  9415                           ; jumptable            263     9 (fixed)
  9416                           ;	Chosen strategy is simple_byte
  9417  012A  3A01               	xorlw	1	; case 1
  9418  012B  1903               	skipnz
  9419  012C  28DE               	goto	l4847
  9420  012D  3A03               	xorlw	3	; case 2
  9421  012E  1903               	skipnz
  9422  012F  28E9               	goto	l4871
  9423  0130  3A01               	xorlw	1	; case 3
  9424  0131  1903               	skipnz
  9425  0132  28F6               	goto	l4895
  9426  0133  3A07               	xorlw	7	; case 4
  9427  0134  1903               	skipnz
  9428  0135  2901               	goto	l4915
  9429  0136  3A01               	xorlw	1	; case 5
  9430  0137  1903               	skipnz
  9431  0138  290C               	goto	l4939
  9432  0139  3A03               	xorlw	3	; case 6
  9433  013A  1903               	skipnz
  9434  013B  2918               	goto	l4963
  9435  013C  2926               	goto	l4983
  9436  013D                     l4993:	
  9437                           
  9438                           ;bldc.c: 2147: {;bldc.c: 2149: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
  9439                           
  9440                           ;bldc.c: 2159: };bldc.c: 2162: comm_time = 0;
  9441                           
  9442                           ;bldc.c: 2151: }
  9443  013D  2D18               	ljmp	PL54	;call to abstracted procedure
  9444  013E                     __end_of_commutate:	
  9445  013E                     __ptext37:	
  9446 ;; *************** function _interrrupt_bldc *****************
  9447 ;; Defined at:
  9448 ;;		line 281 in file "../bldc.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  ui32_tmp        4    0[BANK0 ] unsigned long 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 1F/0
  9459 ;;		On exit  : 1C/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9462 ;;      Params:         0       0       0       0       0       0       0       0
  9463 ;;      Locals:         0       4       0       0       0       0       0       0
  9464 ;;      Temps:          2       0       0       0       0       0       0       0
  9465 ;;      Totals:         2       4       0       0       0       0       0       0
  9466 ;;Total ram usage:        6 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    1
  9469 ;; This function calls:
  9470 ;;		_BLDCWait
  9471 ;;		___lwdiv
  9472 ;;		i1_ADC_Read
  9473 ;;		i1_ADC_Wait
  9474 ;;		i1___wmul
  9475 ;;		i1_commutate
  9476 ;; This function is called by:
  9477 ;;		_interrupt_handler
  9478 ;; This function uses a non-reentrant model
  9479 ;;
  9480                           
  9481                           
  9482                           ;psect for function _interrrupt_bldc
  9483  013E                     _interrrupt_bldc:	
  9484                           
  9485                           ;bldc.c: 286: unsigned long ui32_tmp ;;bldc.c: 288: ++comm_time ;
  9486                           
  9487                           ;incstack = 0
  9488                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9489  013E  0AC6               	incf	_comm_time,f
  9490  013F  1903               	skipnz
  9491  0140  0AC7               	incf	_comm_time+1,f
  9492                           
  9493                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
  9494  0141  0847               	movf	_comm_time+1,w
  9495  0142  0022               	movlb	2	; select bank2
  9496  0143  0240               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  9497  0144  1D03               	skipz
  9498  0145  294A               	goto	u672_25
  9499  0146  0020               	movlb	0	; select bank0
  9500  0147  0846               	movf	_comm_time,w
  9501  0148  0022               	movlb	2	; select bank2
  9502  0149  023F               	subwf	_ui16_comm_time_max^(0+256),w
  9503  014A                     u672_25:	
  9504  014A  1803               	skipnc
  9505  014B  294E               	goto	i1l8837
  9506                           
  9507                           ;bldc.c: 294: {;bldc.c: 296: commutate( );
  9508  014C  230B  3180         	fcall	i1_commutate
  9509  014E                     i1l8837:	
  9510                           
  9511                           ;bldc.c: 298: };bldc.c: 302: if( ui16_step_cnt < 10 )
  9512  014E  3000               	movlw	0
  9513  014F  0021               	movlb	1	; select bank1
  9514  0150  0235               	subwf	(_ui16_step_cnt+1)^(0+128),w
  9515  0151  300A               	movlw	10
  9516  0152  1903               	skipnz
  9517  0153  0234               	subwf	_ui16_step_cnt^(0+128),w
  9518  0154  1C03               	btfss	3,0
  9519  0155  2958               	goto	i1l8841
  9520                           
  9521                           ;bldc.c: 311: else;bldc.c: 312: {;bldc.c: 322: MotorFlags.bits.B3 = 0;
  9522  0156  0020               	movlb	0	; select bank0
  9523  0157  11CE               	bcf	_MotorFlags,3
  9524  0158                     i1l8841:	
  9525                           
  9526                           ;bldc.c: 328: };bldc.c: 331: if (ui16_step_cnt >= 3 )
  9527  0158  3000               	movlw	0
  9528  0159  0021               	movlb	1	; select bank1
  9529  015A  0235               	subwf	(_ui16_step_cnt+1)^(0+128),w
  9530  015B  3003               	movlw	3
  9531  015C  1903               	skipnz
  9532  015D  0234               	subwf	_ui16_step_cnt^(0+128),w
  9533  015E  1C03               	skipc
  9534  015F  2962               	goto	i1l8845
  9535                           
  9536                           ;bldc.c: 333: {;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
  9537  0160  0020               	movlb	0	; select bank0
  9538  0161  124E               	bcf	_MotorFlags,4
  9539  0162                     i1l8845:	
  9540                           
  9541                           ;bldc.c: 337: };bldc.c: 340: BLDCWait( );
  9542  0162  240A  3180         	fcall	_BLDCWait
  9543                           
  9544                           ;bldc.c: 346: if( C1OUT )
  9545  0164  0022               	movlb	2	; select bank2
  9546  0165  1F11               	btfss	17,6	;volatile
  9547  0166  296A               	goto	i1l263
  9548                           
  9549                           ;bldc.c: 349: {;bldc.c: 351: ui8_CompFlag = 0x00;
  9550  0167  0021               	movlb	1	; select bank1
  9551  0168  01E6               	clrf	_ui8_CompFlag^(0+128)
  9552                           
  9553                           ;bldc.c: 353: }
  9554  0169  2A6D               	goto	i1l9027
  9555  016A                     i1l263:	
  9556                           
  9557                           ;bldc.c: 356: else;bldc.c: 357: {;bldc.c: 362: ui8_CompFlag = 0x01;
  9558  016A  0021               	movlb	1	; select bank1
  9559  016B  01E6               	clrf	_ui8_CompFlag^(0+128)
  9560  016C  0AE6               	incf	_ui8_CompFlag^(0+128),f
  9561  016D  2A6D               	goto	i1l9027
  9562  016E                     i1l8851:	
  9563                           
  9564                           ;bldc.c: 378: {;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
  9565  016E  302D               	movlw	45
  9566  016F  009D               	movwf	29	;volatile
  9567                           
  9568                           ;bldc.c: 387: ADC_Wait( );
  9569  0170  22CF  3180         	fcall	i1_ADC_Wait
  9570                           
  9571                           ;bldc.c: 391: ( GO_nDONE = 1 );
  9572  0172  0021               	movlb	1	; select bank1
  9573  0173  149D               	bsf	29,1	;volatile
  9574                           
  9575                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
  9576  0174  22E8  3180         	fcall	i1_ADC_Read
  9577  0176  0871               	movf	?i1_ADC_Read+1,w
  9578  0177  0022               	movlb	2	; select bank2
  9579  0178  00D6               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+256)
  9580  0179  0870               	movf	?i1_ADC_Read,w
  9581  017A  00D5               	movwf	_ui16_NTC_Temp_bldc^(0+256)
  9582                           
  9583                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  9584  017B  3031               	movlw	49
  9585  017C  0021               	movlb	1	; select bank1
  9586  017D                     L39:	
  9587  017D  009D               	movwf	29	;volatile
  9588  017E                     L34:	
  9589                           
  9590                           ;bldc.c: 403: ADC_Wait( );
  9591  017E  22CF  3180         	fcall	i1_ADC_Wait
  9592                           
  9593                           ;bldc.c: 407: ( GO_nDONE = 1 );
  9594  0180  0021               	movlb	1	; select bank1
  9595  0181  149D               	bsf	29,1	;volatile
  9596  0182                     i1l8861:	
  9597                           
  9598                           ;bldc.c: 410: ui8_sampleState++;
  9599  0182  0021               	movlb	1	; select bank1
  9600  0183  0AE7               	incf	_ui8_sampleState^(0+128),f
  9601                           
  9602                           ;bldc.c: 413: break;
  9603  0184  2A7A               	goto	i1l267
  9604  0185                     i1l8863:	
  9605                           
  9606                           ;bldc.c: 421: {;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
  9607  0185  0868               	movf	_ui8_Ubemf_sel^(0+128),w
  9608  0186  009D               	movwf	29	;volatile
  9609                           
  9610                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
  9611  0187  081B               	movf	27,w	;volatile
  9612  0188  0020               	movlb	0	; select bank0
  9613  0189  00D1               	movwf	_ui16_Ubat_bldc	;volatile
  9614                           
  9615                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
  9616  018A  0021               	movlb	1	; select bank1
  9617  018B  081C               	movf	28,w	;volatile
  9618  018C  0020               	movlb	0	; select bank0
  9619  018D  00D2               	movwf	_ui16_Ubat_bldc+1	;volatile
  9620                           
  9621                           ;bldc.c: 454: __nop();
  9622  018E  0000               	nop
  9623                           
  9624                           ;bldc.c: 455: __nop();
  9625  018F  0000               	nop
  9626                           
  9627                           ;bldc.c: 456: __nop();
  9628  0190  0000               	nop
  9629                           
  9630                           ;bldc.c: 457: __nop();
  9631  0191  0000               	nop
  9632                           
  9633                           ;bldc.c: 458: __nop();
  9634  0192  0000               	nop
  9635                           
  9636                           ;bldc.c: 459: __nop();
  9637  0193  0000               	nop
  9638                           
  9639                           ;bldc.c: 460: __nop();
  9640  0194  0000               	nop
  9641                           
  9642                           ;bldc.c: 461: __nop();
  9643  0195  0000               	nop
  9644                           
  9645                           ;bldc.c: 463: __nop();
  9646  0196  0000               	nop
  9647                           
  9648                           ;bldc.c: 464: __nop();
  9649  0197  0000               	nop
  9650                           
  9651                           ;bldc.c: 465: __nop();
  9652  0198  0000               	nop
  9653                           
  9654                           ;bldc.c: 466: __nop();
  9655  0199  0000               	nop
  9656                           
  9657                           ;bldc.c: 467: __nop();
  9658  019A  0000               	nop
  9659                           
  9660                           ;bldc.c: 468: __nop();
  9661  019B  0000               	nop
  9662                           
  9663                           ;bldc.c: 469: __nop();
  9664  019C  0000               	nop
  9665                           
  9666                           ;bldc.c: 470: __nop();
  9667  019D  0000               	nop
  9668  019E  297E               	goto	L34
  9669  019F                     i1l8903:	
  9670                           ;bldc.c: 474: ADC_Wait();
  9671                           
  9672                           
  9673                           ;bldc.c: 491: {;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
  9674  019F  081B               	movf	27,w	;volatile
  9675  01A0  00B0               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
  9676                           
  9677                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
  9678  01A1  081C               	movf	28,w	;volatile
  9679  01A2  00B1               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
  9680                           
  9681                           ;bldc.c: 511: ( GO_nDONE = 1 );
  9682  01A3  149D               	bsf	29,1	;volatile
  9683                           
  9684                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui16_duty_cycle_BLDC != 0 ) )
  9685  01A4  0020               	movlb	0	; select bank0
  9686  01A5  1F4E               	btfss	_MotorFlags,6
  9687  01A6  29BF               	goto	i1l8915
  9688  01A7  0021               	movlb	1	; select bank1
  9689  01A8  082E               	movf	_ui16_duty_cycle_BLDC^(0+128),w
  9690  01A9  042F               	iorwf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
  9691  01AA  1903               	btfsc	3,2
  9692  01AB  29BF               	goto	i1l8915
  9693                           
  9694                           ;bldc.c: 521: {;bldc.c: 523: if( rising_bemf_flag )
  9695  01AC  0020               	movlb	0	; select bank0
  9696  01AD  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9697  01AE  29C8               	goto	i1l8923
  9698                           
  9699                           ;bldc.c: 525: {;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
  9700  01AF  0021               	movlb	1	; select bank1
  9701  01B0  0830               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  9702  01B1  3E64               	addlw	100
  9703  01B2  00FC               	movwf	??_interrrupt_bldc
  9704  01B3  3000               	movlw	0
  9705  01B4  3D31               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  9706  01B5  00FD               	movwf	??_interrrupt_bldc+1
  9707  01B6  0020               	movlb	0	; select bank0
  9708  01B7  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
  9709  01B8  027D               	subwf	??_interrrupt_bldc+1,w
  9710  01B9  1D03               	skipz
  9711  01BA  29BD               	goto	u679_25
  9712  01BB  0851               	movf	_ui16_Ubat_bldc,w	;volatile
  9713  01BC  027C               	subwf	??_interrrupt_bldc,w
  9714  01BD                     u679_25:	
  9715  01BD  1803               	skipnc
  9716  01BE  2A7A               	goto	i1l267
  9717  01BF                     i1l8915:	
  9718                           
  9719                           ;bldc.c: 530: {;bldc.c: 534: ui8_sampleState++;
  9720  01BF  0021               	movlb	1	; select bank1
  9721  01C0  0AE7               	incf	_ui8_sampleState^(0+128),f
  9722                           
  9723                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
  9724  01C1  0869               	movf	_ui8_UPhase_sel^(0+128),w
  9725  01C2  009D               	movwf	29	;volatile
  9726                           
  9727                           ;bldc.c: 540: ADC_Wait( );
  9728  01C3  22CF  3180         	fcall	i1_ADC_Wait
  9729                           
  9730                           ;bldc.c: 544: ( GO_nDONE = 1 );
  9731  01C5  0021               	movlb	1	; select bank1
  9732  01C6  149D               	bsf	29,1	;volatile
  9733                           
  9734                           ;bldc.c: 547: }
  9735  01C7  2A7A               	goto	i1l267
  9736  01C8                     i1l8923:	
  9737                           
  9738                           ;bldc.c: 562: else;bldc.c: 563: {;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
  9739  01C8  3000               	movlw	0
  9740  01C9  0021               	movlb	1	; select bank1
  9741  01CA  0231               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  9742  01CB  301F               	movlw	31
  9743  01CC  1903               	skipnz
  9744  01CD  0230               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  9745  01CE  1803               	btfsc	3,0
  9746  01CF  29BF               	goto	i1l8915
  9747  01D0  2A7A               	goto	i1l267
  9748  01D1                     i1l8941:	
  9749                           ;bldc.c: 593: };bldc.c: 596: };bldc.c: 601: }
  9750                           
  9751                           
  9752                           ;bldc.c: 665: ui8_BlankingCount = 0;
  9753  01D1  01EB               	clrf	_ui8_BlankingCount^(0+128)
  9754                           
  9755                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
  9756  01D2  22E8  3180         	fcall	i1_ADC_Read
  9757                           
  9758                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
  9759  01D4  1CCF               	btfss	_ui8_error_Flags,1
  9760  01D5  29DF               	goto	i1l8955
  9761                           
  9762                           ;bldc.c: 677: {;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
  9763  01D6  0021               	movlb	1	; select bank1
  9764  01D7  086A               	movf	_ui8_IPhase_sel^(0+128),w
  9765  01D8  009D               	movwf	29	;volatile
  9766                           
  9767                           ;bldc.c: 682: ADC_Wait( );
  9768  01D9  22CF  3180         	fcall	i1_ADC_Wait
  9769                           
  9770                           ;bldc.c: 683: ( GO_nDONE = 1 );
  9771  01DB  0021               	movlb	1	; select bank1
  9772  01DC  149D               	bsf	29,1	;volatile
  9773                           
  9774                           ;bldc.c: 686: ui8_sampleState = 9;
  9775  01DD  3009               	movlw	9
  9776  01DE  2A6B               	goto	L35
  9777  01DF                     i1l8955:	
  9778                           ;bldc.c: 688: }
  9779                           
  9780                           
  9781                           ;bldc.c: 691: else;bldc.c: 692: {;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  9782  01DF  3075               	movlw	117
  9783  01E0  0021               	movlb	1	; select bank1
  9784  01E1  009D               	movwf	29	;volatile
  9785                           
  9786                           ;bldc.c: 697: ADC_Wait( );
  9787  01E2  22CF  3180         	fcall	i1_ADC_Wait
  9788  01E4  2982               	goto	i1l8861
  9789  01E5                     i1l284:	
  9790                           ;bldc.c: 754: };bldc.c: 757: case 8:
  9791                           
  9792                           
  9793                           ;bldc.c: 759: {;bldc.c: 764: ( GO_nDONE = 1 );
  9794  01E5  149D               	bsf	29,1	;volatile
  9795                           
  9796                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
  9797  01E6  22E8  3180         	fcall	i1_ADC_Read
  9798                           
  9799                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
  9800  01E8  0021               	movlb	1	; select bank1
  9801  01E9  086A               	movf	_ui8_IPhase_sel^(0+128),w
  9802  01EA  297D               	goto	L39
  9803  01EB                     i1l8975:	
  9804                           ;bldc.c: 776: ADC_Wait( );
  9805                           
  9806                           
  9807                           ;bldc.c: 795: {;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
  9808  01EB  22E8  3180         	fcall	i1_ADC_Read
  9809  01ED  0871               	movf	?i1_ADC_Read+1,w
  9810  01EE  00C5               	movwf	_ui16_IPhase_bldc+1	;volatile
  9811  01EF  0870               	movf	?i1_ADC_Read,w
  9812  01F0  00C4               	movwf	_ui16_IPhase_bldc	;volatile
  9813                           
  9814                           ;bldc.c: 806: if (MotorFlags.bits.B6)
  9815  01F1  1B4E               	btfsc	_MotorFlags,6
  9816  01F2  2A3E               	goto	i1l9001
  9817  01F3  2A4A               	goto	i1l9003
  9818  01F4                     i1l8981:	
  9819                           
  9820                           ;bldc.c: 816: {;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0
      +                          ]) )
  9821  01F4  0022               	movlb	2	; select bank2
  9822  01F5  0820               	movf	_ui8_current_cal^(0+256),w
  9823  01F6  24E4  3180         	fcall	PL28	;call to abstracted procedure
  9824  01F8  1803               	skipnc
  9825  01F9  2A09               	goto	i1l8985
  9826                           
  9827                           ;bldc.c: 820: {;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[0])*ui16_I_cal_Ph1)>>8);
  9828  01FA  2512  3180         	fcall	PL50	;call to abstracted procedure
  9829  01FC  0820               	movf	_ui8_current_cal^(0+256),w
  9830  01FD  02F0               	subwf	i1___wmul@multiplier,f
  9831  01FE  1C03               	skipc
  9832  01FF  03F1               	decf	i1___wmul@multiplier+1,f
  9833  0200  086B               	movf	(_ui16_I_cal_Ph1+1)^(0+256),w
  9834  0201  00F3               	movwf	i1___wmul@multiplicand+1
  9835  0202  086A               	movf	_ui16_I_cal_Ph1^(0+256),w
  9836  0203  00F2               	movwf	i1___wmul@multiplicand
  9837  0204  22F6  3180         	fcall	i1___wmul
  9838  0206  0871               	movf	?i1___wmul+1,w
  9839  0207  00D7               	movwf	_ui16_IPhase1_bldc^(0+256)	;volatile
  9840  0208  2A0B               	goto	L36
  9841  0209                     i1l8985:	
  9842                           ;bldc.c: 824: }
  9843                           
  9844                           
  9845                           ;bldc.c: 827: else;bldc.c: 828: {;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
  9846  0209  0022               	movlb	2	; select bank2
  9847  020A  01D7               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  9848  020B                     L36:	
  9849  020B  01D8               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  9850  020C  2A51               	goto	i1l9005
  9851  020D                     i1l8987:	
  9852                           
  9853                           ;bldc.c: 842: {;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1
      +                          ] ) )
  9854  020D  0022               	movlb	2	; select bank2
  9855  020E  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  9856  020F  24E4  3180         	fcall	PL28	;call to abstracted procedure
  9857  0211  1803               	skipnc
  9858  0212  2A22               	goto	i1l8991
  9859                           
  9860                           ;bldc.c: 846: {;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[1])*ui16_I_cal_Ph2)>>8);
  9861  0213  2512  3180         	fcall	PL50	;call to abstracted procedure
  9862  0215  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  9863  0216  02F0               	subwf	i1___wmul@multiplier,f
  9864  0217  1C03               	skipc
  9865  0218  03F1               	decf	i1___wmul@multiplier+1,f
  9866  0219  0869               	movf	(_ui16_I_cal_Ph2+1)^(0+256),w
  9867  021A  00F3               	movwf	i1___wmul@multiplicand+1
  9868  021B  0868               	movf	_ui16_I_cal_Ph2^(0+256),w
  9869  021C  00F2               	movwf	i1___wmul@multiplicand
  9870  021D  22F6  3180         	fcall	i1___wmul
  9871  021F  0871               	movf	?i1___wmul+1,w
  9872  0220  00BB               	movwf	_ui16_IPhase2_bldc^(0+256)	;volatile
  9873  0221  2A24               	goto	L37
  9874  0222                     i1l8991:	
  9875                           ;bldc.c: 851: }
  9876                           
  9877                           
  9878                           ;bldc.c: 854: else;bldc.c: 855: {;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
  9879  0222  0022               	movlb	2	; select bank2
  9880  0223  01BB               	clrf	_ui16_IPhase2_bldc^(0+256)	;volatile
  9881  0224                     L37:	
  9882  0224  01BC               	clrf	(_ui16_IPhase2_bldc+1)^(0+256)	;volatile
  9883  0225  2A51               	goto	i1l9005
  9884  0226                     i1l8993:	
  9885                           
  9886                           ;bldc.c: 869: {;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]
      +                          ) )
  9887  0226  0022               	movlb	2	; select bank2
  9888  0227  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  9889  0228  24E4  3180         	fcall	PL28	;call to abstracted procedure
  9890  022A  1803               	skipnc
  9891  022B  2A3B               	goto	i1l8997
  9892                           
  9893                           ;bldc.c: 873: {;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[2])*ui16_I_cal_Ph3)>>8);
  9894  022C  2512  3180         	fcall	PL50	;call to abstracted procedure
  9895  022E  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  9896  022F  02F0               	subwf	i1___wmul@multiplier,f
  9897  0230  1C03               	skipc
  9898  0231  03F1               	decf	i1___wmul@multiplier+1,f
  9899  0232  0867               	movf	(_ui16_I_cal_Ph3+1)^(0+256),w
  9900  0233  00F3               	movwf	i1___wmul@multiplicand+1
  9901  0234  0866               	movf	_ui16_I_cal_Ph3^(0+256),w
  9902  0235  00F2               	movwf	i1___wmul@multiplicand
  9903  0236  22F6  3180         	fcall	i1___wmul
  9904  0238  0871               	movf	?i1___wmul+1,w
  9905  0239  00B9               	movwf	_ui16_IPhase3_bldc^(0+256)	;volatile
  9906  023A  2A50               	goto	L38
  9907  023B                     i1l8997:	
  9908                           ;bldc.c: 877: }
  9909                           
  9910                           
  9911                           ;bldc.c: 880: else;bldc.c: 881: {;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
  9912  023B  0022               	movlb	2	; select bank2
  9913  023C  2A4F               	goto	L40
  9914  023D                     i1l8999:	
  9915  023D  2A4A               	goto	i1l9003
  9916  023E                     i1l9001:	
  9917                           ;bldc.c: 902: };bldc.c: 904: }
  9918                           
  9919                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
  9920                           
  9921                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
  9922                           
  9923                           ;bldc.c: 895: {;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
  9924                           
  9925  023E  0021               	movlb	1	; select bank1
  9926  023F  086A               	movf	_ui8_IPhase_sel^(0+128),w
  9927                           
  9928                           ; Switch size 1, requested type "space"
  9929                           ; Number of cases is 3, Range of values is 9 to 53
  9930                           ; switch strategies available:
  9931                           ; Name         Instructions Cycles
  9932                           ; simple_byte           10     6 (average)
  9933                           ; direct_byte           99     9 (fixed)
  9934                           ; jumptable            263     9 (fixed)
  9935                           ;	Chosen strategy is simple_byte
  9936  0240  3A09               	xorlw	9	; case 9
  9937  0241  1903               	skipnz
  9938  0242  29F4               	goto	i1l8981
  9939  0243  3A18               	xorlw	24	; case 17
  9940  0244  1903               	skipnz
  9941  0245  2A26               	goto	i1l8993
  9942  0246  3A24               	xorlw	36	; case 53
  9943  0247  1903               	skipnz
  9944  0248  2A0D               	goto	i1l8987
  9945  0249  2A3D               	goto	i1l8999
  9946  024A                     i1l9003:	
  9947                           
  9948                           ;bldc.c: 910: else;bldc.c: 911: {;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
  9949  024A  0022               	movlb	2	; select bank2
  9950  024B  01D7               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  9951  024C  01D8               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  9952                           
  9953                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
  9954  024D  01BB               	clrf	_ui16_IPhase2_bldc^(0+256)	;volatile
  9955  024E  01BC               	clrf	(_ui16_IPhase2_bldc+1)^(0+256)	;volatile
  9956  024F                     L40:	
  9957                           
  9958                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
  9959  024F  01B9               	clrf	_ui16_IPhase3_bldc^(0+256)	;volatile
  9960  0250                     L38:	
  9961  0250  01BA               	clrf	(_ui16_IPhase3_bldc+1)^(0+256)	;volatile
  9962  0251                     i1l9005:	
  9963                           
  9964                           ;bldc.c: 918: };bldc.c: 956: if( (ui16_IPhase_bldc.w > 500+40) )
  9965  0251  3002               	movlw	2
  9966  0252  0020               	movlb	0	; select bank0
  9967  0253  0245               	subwf	_ui16_IPhase_bldc+1,w	;volatile
  9968  0254  301D               	movlw	29
  9969  0255  1903               	skipnz
  9970  0256  0244               	subwf	_ui16_IPhase_bldc,w	;volatile
  9971  0257  1C03               	skipc
  9972  0258  2A5D               	goto	i1l9011
  9973  0259  30E5               	movlw	229
  9974                           
  9975                           ;bldc.c: 958: {;bldc.c: 960: MotorFlags.bits.B0 = 1;
  9976  025A  144E               	bsf	_MotorFlags,0
  9977                           
  9978                           ;bldc.c: 964: LATC = LATC & 0b11100101;
  9979  025B  0022               	movlb	2	; select bank2
  9980  025C  058E               	andwf	14,f	;volatile
  9981  025D                     i1l9011:	
  9982                           ;bldc.c: 970: }
  9983                           
  9984                           
  9985                           ;bldc.c: 978: };bldc.c: 984: ADC_Wait( );
  9986  025D  22CF  3180         	fcall	i1_ADC_Wait
  9987                           
  9988                           ;bldc.c: 988: ( GO_nDONE = 1 );
  9989  025F  0021               	movlb	1	; select bank1
  9990  0260  149D               	bsf	29,1	;volatile
  9991                           
  9992                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
  9993  0261  0020               	movlb	0	; select bank0
  9994  0262  1CCF               	btfss	_ui8_error_Flags,1
  9995  0263  2982               	goto	i1l8861
  9996                           
  9997                           ;bldc.c: 993: {;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  9998  0264  3075               	movlw	117
  9999  0265  0021               	movlb	1	; select bank1
 10000  0266  009D               	movwf	29	;volatile
 10001                           
 10002                           ;bldc.c: 998: ADC_Wait( );
 10003  0267  22CF  3180         	fcall	i1_ADC_Wait
 10004                           
 10005                           ;bldc.c: 1001: ui8_sampleState = 5;
 10006  0269  3005               	movlw	5
 10007  026A  0021               	movlb	1	; select bank1
 10008  026B                     L35:	
 10009  026B  00E7               	movwf	_ui8_sampleState^(0+128)
 10010                           
 10011                           ;bldc.c: 1003: }
 10012  026C  2A7A               	goto	i1l267
 10013  026D                     i1l9027:	
 10014  026D  0867               	movf	_ui8_sampleState^(0+128),w
 10015                           
 10016                           ; Switch size 1, requested type "space"
 10017                           ; Number of cases is 10, Range of values is 1 to 10
 10018                           ; switch strategies available:
 10019                           ; Name         Instructions Cycles
 10020                           ; direct_byte           29     9 (fixed)
 10021                           ; simple_byte           31    16 (average)
 10022                           ; jumptable            263     9 (fixed)
 10023                           ;	Chosen strategy is direct_byte
 10024  026E  3EFF               	addlw	-1
 10025  026F  1C03               	skipc
 10026  0270  2A7A               	goto	i1l267
 10027  0271  0084               	movwf	4
 10028  0272  300A               	movlw	10
 10029  0273  0204               	subwf	4,w
 10030  0274  1803               	skipnc
 10031  0275  2A7A               	goto	i1l267
 10032  0276  3187               	movlp	high i1S10089
 10033  0277  3504               	lslf	4,w
 10034  0278  3E3D               	addlw	low i1S10089
 10035  0279  0082               	movwf	2
 10036  027A                     i1l267:	
 10037                           
 10038                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
 10039  027A  0020               	movlb	0	; select bank0
 10040  027B  1F4E               	btfss	_MotorFlags,6
 10041  027C  2AAE               	goto	i1l9055
 10042                           
 10043                           ;bldc.c: 1071: {;bldc.c: 1073: if( MotorFlags.bits.B3)
 10044  027D  1DCE               	btfss	_MotorFlags,3
 10045  027E  2AB0               	goto	i1l9057
 10046                           
 10047                           ;bldc.c: 1075: {;bldc.c: 1077: bool_start_demand_mat = 1 ;
 10048  027F  0021               	movlb	1	; select bank1
 10049  0280  3041               	movlw	65
 10050  0281  01EE               	clrf	_bool_start_demand_mat^(0+128)
 10051  0282  0AEE               	incf	_bool_start_demand_mat^(0+128),f
 10052                           
 10053                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
 10054  0283  0022               	movlb	2	; select bank2
 10055  0284  00C3               	movwf	_ui8_fixed_start_speed_mat^(0+256)
 10056  0285  01C4               	clrf	(_ui8_fixed_start_speed_mat+1)^(0+256)
 10057                           
 10058                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
 10059  0286  0020               	movlb	0	; select bank0
 10060  0287  0846               	movf	_comm_time,w
 10061  0288  3903               	andlw	3
 10062  0289  1D03               	btfss	3,2
 10063  028A  2AB0               	goto	i1l9057
 10064                           
 10065                           ;bldc.c: 1111: else;bldc.c: 1112: {;bldc.c: 1114: if (ui16_Ubat_bldc.w)
 10066                           
 10067                           ;bldc.c: 1100: {;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 10068                           
 10069                           ;bldc.c: 1096: {;bldc.c: 1098: if (ui16_Ubat_bldc.w)
 10070                           
 10071                           ;bldc.c: 1092: {;bldc.c: 1094: if (MotorFlags.bits.B4)
 10072  028B  0851               	movf	_ui16_Ubat_bldc,w	;volatile
 10073  028C  0452               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
 10074  028D  1903               	btfsc	3,2
 10075  028E  2A9F               	goto	i1l9047
 10076                           
 10077                           ;bldc.c: 1116: {;bldc.c: 1119: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 10078  028F  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 10079  0290  00F1               	movwf	___lwdiv@divisor+1
 10080  0291  0851               	movf	_ui16_Ubat_bldc,w	;volatile
 10081  0292  00F0               	movwf	___lwdiv@divisor
 10082  0293  3080               	movlw	128
 10083  0294  00F2               	movwf	___lwdiv@dividend
 10084  0295  303E               	movlw	62
 10085  0296  00F3               	movwf	___lwdiv@dividend+1
 10086  0297  2540  3180         	fcall	___lwdiv
 10087  0299  0870               	movf	?___lwdiv,w
 10088  029A  00A0               	movwf	interrrupt_bldc@ui32_tmp
 10089  029B  0871               	movf	?___lwdiv+1,w
 10090  029C  00A1               	movwf	interrrupt_bldc@ui32_tmp+1
 10091  029D  01A2               	clrf	interrrupt_bldc@ui32_tmp+2
 10092  029E  01A3               	clrf	interrrupt_bldc@ui32_tmp+3
 10093  029F                     i1l9047:	
 10094                           
 10095                           ;bldc.c: 1121: };bldc.c: 1124: };bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui
      +                          32_tmp) )
 10096  029F  0021               	movlb	1	; select bank1
 10097  02A0  086D               	movf	_ui8_StartupPWM^(0+128),w
 10098  02A1  0020               	movlb	0	; select bank0
 10099  02A2  0220               	subwf	interrrupt_bldc@ui32_tmp,w
 10100  02A3  1803               	skipnc
 10101  02A4  2AA8               	goto	i1l9051
 10102                           
 10103                           ;bldc.c: 1129: {;bldc.c: 1131: ui8_StartupPWM--;
 10104  02A5  0021               	movlb	1	; select bank1
 10105  02A6  03ED               	decf	_ui8_StartupPWM^(0+128),f
 10106                           
 10107                           ;bldc.c: 1133: }
 10108  02A7  2AAA               	goto	i1l9053
 10109  02A8                     i1l9051:	
 10110                           
 10111                           ;bldc.c: 1136: else;bldc.c: 1137: {;bldc.c: 1139: ui8_StartupPWM++;
 10112  02A8  0021               	movlb	1	; select bank1
 10113  02A9  0AED               	incf	_ui8_StartupPWM^(0+128),f
 10114  02AA                     i1l9053:	
 10115                           
 10116                           ;bldc.c: 1141: };bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
 10117  02AA  086D               	movf	_ui8_StartupPWM^(0+128),w
 10118  02AB  0025               	movlb	5	; select bank5
 10119  02AC  0091               	movwf	17	;volatile
 10120  02AD  2AB0               	goto	i1l9057
 10121  02AE                     i1l9055:	
 10122                           
 10123                           ;bldc.c: 1155: else;bldc.c: 1156: {;bldc.c: 1159: CCPR1L = 0;
 10124  02AE  0025               	movlb	5	; select bank5
 10125  02AF  0191               	clrf	17	;volatile
 10126  02B0                     i1l9057:	
 10127                           
 10128                           ;bldc.c: 1161: };bldc.c: 1165: if( 0 == ui8_BlankingCount )
 10129  02B0  0021               	movlb	1	; select bank1
 10130  02B1  086B               	movf	_ui8_BlankingCount^(0+128),w
 10131  02B2  1D03               	btfss	3,2
 10132  02B3  2ACD               	goto	i1l9073
 10133                           
 10134                           ;bldc.c: 1168: {;bldc.c: 1177: if( ui8_CompFlag )
 10135  02B4  0866               	movf	_ui8_CompFlag^(0+128),w
 10136  02B5  1903               	btfsc	3,2
 10137  02B6  2ABB               	goto	i1l316
 10138                           
 10139                           ;bldc.c: 1187: {;bldc.c: 1191: ui8_zero_cros_cnt++;
 10140  02B7  0020               	movlb	0	; select bank0
 10141  02B8  1ACE               	btfsc	_MotorFlags,5
 10142  02B9  2ABB               	goto	i1l316
 10143                           
 10144                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
 10145  02BA  16CE               	bsf	_MotorFlags,5
 10146  02BB                     i1l316:	
 10147                           ;bldc.c: 1196: };bldc.c: 1199: };bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
 10148                           
 10149                           
 10150                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
 10151  02BB  0020               	movlb	0	; select bank0
 10152  02BC  1ECE               	btfss	_MotorFlags,5
 10153  02BD  0008               	return
 10154                           
 10155                           ;bldc.c: 1353: {;bldc.c: 1357: if( 0 == phase_delay_counter )
 10156  02BE  0022               	movlb	2	; select bank2
 10157  02BF  083D               	movf	_phase_delay_counter^(0+256),w
 10158  02C0  043E               	iorwf	(_phase_delay_counter+1)^(0+256),w
 10159  02C1  1D03               	btfss	3,2
 10160  02C2  2AC8               	goto	i1l9071
 10161                           
 10162                           ;bldc.c: 1360: {;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
 10163  02C3  0020               	movlb	0	; select bank0
 10164  02C4  19CE               	btfsc	_MotorFlags,3
 10165  02C5  0008               	return
 10166                           
 10167                           ;bldc.c: 1364: {;bldc.c: 1378: commutate( );
 10168  02C6  230B               	fcall	i1_commutate
 10169  02C7  0008               	return
 10170  02C8                     i1l9071:	
 10171                           
 10172                           ;bldc.c: 1389: else;bldc.c: 1390: {;bldc.c: 1392: phase_delay_counter--;
 10173  02C8  30FF               	movlw	-1
 10174  02C9  07BD               	addwf	_phase_delay_counter^(0+256),f
 10175  02CA  1C03               	skipc
 10176  02CB  03BE               	decf	(_phase_delay_counter+1)^(0+256),f
 10177                           
 10178                           ;bldc.c: 1394: };bldc.c: 1398: };bldc.c: 1401: }
 10179  02CC  0008               	return
 10180  02CD                     i1l9073:	
 10181                           
 10182                           ;bldc.c: 1408: bemf_filter = 62;
 10183  02CD  03EB               	decf	_ui8_BlankingCount^(0+128),f
 10184  02CE  0008               	return
 10185  02CF                     __end_of_interrrupt_bldc:	
 10186  02CF                     __ptext40:	
 10187 ;; *************** function i1_ADC_Wait *****************
 10188 ;; Defined at:
 10189 ;;		line 128 in file "../adc.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;		None
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;		None
 10194 ;; Return value:  Size  Location     Type
 10195 ;;                  1    wreg      void 
 10196 ;; Registers used:
 10197 ;;		None
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/1
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10203 ;;      Params:         0       0       0       0       0       0       0       0
 10204 ;;      Locals:         0       0       0       0       0       0       0       0
 10205 ;;      Temps:          0       0       0       0       0       0       0       0
 10206 ;;      Totals:         0       0       0       0       0       0       0       0
 10207 ;;Total ram usage:        0 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; This function calls:
 10210 ;;		Nothing
 10211 ;; This function is called by:
 10212 ;;		_interrrupt_bldc
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           
 10217                           ;psect for function i1_ADC_Wait
 10218  02CF                     i1_ADC_Wait:	
 10219                           
 10220                           ;adc.c: 133: __nop();
 10221                           
 10222                           ;incstack = 0
 10223                           ; Regs used in i1_ADC_Wait: []
 10224  02CF  0000               	nop
 10225                           
 10226                           ;adc.c: 134: __nop();
 10227  02D0  0000               	nop
 10228                           
 10229                           ;adc.c: 135: __nop();
 10230  02D1  0000               	nop
 10231                           
 10232                           ;adc.c: 136: __nop();
 10233  02D2  0000               	nop
 10234                           
 10235                           ;adc.c: 137: __nop();
 10236  02D3  0000               	nop
 10237                           
 10238                           ;adc.c: 138: __nop();
 10239  02D4  0000               	nop
 10240                           
 10241                           ;adc.c: 139: __nop();
 10242  02D5  0000               	nop
 10243                           
 10244                           ;adc.c: 140: __nop();
 10245  02D6  0000               	nop
 10246                           
 10247                           ;adc.c: 142: __nop();
 10248  02D7  0000               	nop
 10249                           
 10250                           ;adc.c: 143: __nop();
 10251  02D8  0000               	nop
 10252                           
 10253                           ;adc.c: 144: __nop();
 10254  02D9  0000               	nop
 10255                           
 10256                           ;adc.c: 145: __nop();
 10257  02DA  0000               	nop
 10258                           
 10259                           ;adc.c: 146: __nop();
 10260  02DB  0000               	nop
 10261                           
 10262                           ;adc.c: 147: __nop();
 10263  02DC  0000               	nop
 10264                           
 10265                           ;adc.c: 148: __nop();
 10266  02DD  0000               	nop
 10267                           
 10268                           ;adc.c: 149: __nop();
 10269  02DE  0000               	nop
 10270                           
 10271                           ;adc.c: 151: __nop();
 10272  02DF  0000               	nop
 10273                           
 10274                           ;adc.c: 152: __nop();
 10275  02E0  0000               	nop
 10276                           
 10277                           ;adc.c: 153: __nop();
 10278  02E1  0000               	nop
 10279                           
 10280                           ;adc.c: 154: __nop();
 10281  02E2  0000               	nop
 10282                           
 10283                           ;adc.c: 155: __nop();
 10284  02E3  0000               	nop
 10285                           
 10286                           ;adc.c: 156: __nop();
 10287  02E4  0000               	nop
 10288                           
 10289                           ;adc.c: 157: __nop();
 10290  02E5  0000               	nop
 10291                           
 10292                           ;adc.c: 158: __nop();
 10293  02E6  0000               	nop
 10294  02E7  0008               	return
 10295  02E8                     __end_ofi1_ADC_Wait:	
 10296  02E8                     __ptext41:	
 10297 ;; *************** function i1_ADC_Read *****************
 10298 ;; Defined at:
 10299 ;;		line 175 in file "../adc.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;		None
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  ADC_Read        1    2[COMMON] unsigned char 
 10304 ;; Return value:  Size  Location     Type
 10305 ;;                  2    0[COMMON] unsigned int 
 10306 ;; Registers used:
 10307 ;;		wreg, status,2, status,0
 10308 ;; Tracked objects:
 10309 ;;		On entry : 1E/1
 10310 ;;		On exit  : 1F/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10313 ;;      Params:         2       0       0       0       0       0       0       0
 10314 ;;      Locals:         1       0       0       0       0       0       0       0
 10315 ;;      Temps:          0       0       0       0       0       0       0       0
 10316 ;;      Totals:         3       0       0       0       0       0       0       0
 10317 ;;Total ram usage:        3 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; This function calls:
 10320 ;;		Nothing
 10321 ;; This function is called by:
 10322 ;;		_interrrupt_bldc
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           
 10327                           ;psect for function i1_ADC_Read
 10328  02E8                     i1_ADC_Read:	
 10329                           
 10330                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
 10334  02E8  01F2               	clrf	i1ADC_Read@i
 10335  02E9                     i1l69:	
 10336                           ;adc.c: 182: while( GO_nDONE )
 10337                           
 10338  02E9  0021               	movlb	1	; select bank1
 10339  02EA  1C9D               	btfss	29,1	;volatile
 10340  02EB  2AF1               	goto	i1l5577
 10341  02EC  3041               	movlw	65
 10342                           
 10343                           ;adc.c: 184: {;adc.c: 186: i++;
 10344  02ED  0AF2               	incf	i1ADC_Read@i,f
 10345                           
 10346                           ;adc.c: 189: if( i > 64 )
 10347  02EE  0272               	subwf	i1ADC_Read@i,w
 10348  02EF  1C03               	skipc
 10349  02F0  2AE9               	goto	i1l69
 10350  02F1                     i1l5577:	
 10351                           
 10352                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
 10353                           
 10354                           ;adc.c: 202: analog_value.b.lo = ADRESL;
 10355                           
 10356                           ;adc.c: 204: return analog_value.w;
 10357  02F1  24F7               	fcall	PL38	;call to abstracted procedure
 10358  02F2  00F1               	movwf	?i1_ADC_Read+1
 10359  02F3  0848               	movf	_analog_value,w	;volatile
 10360  02F4  00F0               	movwf	?i1_ADC_Read
 10361  02F5  0008               	return
 10362  02F6                     __end_ofi1_ADC_Read:	
 10363  02F6                     __ptext39:	
 10364 ;; *************** function i1___wmul *****************
 10365 ;; Defined at:
 10366 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  multiplier      2    0[COMMON] unsigned int 
 10369 ;;  multiplicand    2    2[COMMON] unsigned int 
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;  __wmul          2    4[COMMON] unsigned int 
 10372 ;; Return value:  Size  Location     Type
 10373 ;;                  2    0[COMMON] unsigned int 
 10374 ;; Registers used:
 10375 ;;		wreg, status,2, status,0
 10376 ;; Tracked objects:
 10377 ;;		On entry : 1F/2
 10378 ;;		On exit  : 1F/2
 10379 ;;		Unchanged: 1F/0
 10380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10381 ;;      Params:         4       0       0       0       0       0       0       0
 10382 ;;      Locals:         2       0       0       0       0       0       0       0
 10383 ;;      Temps:          0       0       0       0       0       0       0       0
 10384 ;;      Totals:         6       0       0       0       0       0       0       0
 10385 ;;Total ram usage:        6 bytes
 10386 ;; Hardware stack levels used:    1
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_interrrupt_bldc
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394                           
 10395                           ;psect for function i1___wmul
 10396  02F6                     i1___wmul:	
 10397                           
 10398                           ;incstack = 0
 10399                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 10400  02F6  01F4               	clrf	i1___wmul@product
 10401  02F7  01F5               	clrf	i1___wmul@product+1
 10402  02F8                     i1l8817:	
 10403  02F8  1C70               	btfss	i1___wmul@multiplier,0
 10404  02F9  2AFE               	goto	i1l8821
 10405  02FA  0872               	movf	i1___wmul@multiplicand,w
 10406  02FB  07F4               	addwf	i1___wmul@product,f
 10407  02FC  0873               	movf	i1___wmul@multiplicand+1,w
 10408  02FD  3DF5               	addwfc	i1___wmul@product+1,f
 10409  02FE                     i1l8821:	
 10410  02FE  35F2               	lslf	i1___wmul@multiplicand,f
 10411  02FF  0DF3               	rlf	i1___wmul@multiplicand+1,f
 10412  0300  36F1               	lsrf	i1___wmul@multiplier+1,f
 10413  0301  0CF0               	rrf	i1___wmul@multiplier,f
 10414  0302  0870               	movf	i1___wmul@multiplier,w
 10415  0303  0471               	iorwf	i1___wmul@multiplier+1,w
 10416  0304  1D03               	btfss	3,2
 10417  0305  2AF8               	goto	i1l8817
 10418  0306  0875               	movf	i1___wmul@product+1,w
 10419  0307  00F1               	movwf	?i1___wmul+1
 10420  0308  0874               	movf	i1___wmul@product,w
 10421  0309  00F0               	movwf	?i1___wmul
 10422  030A  0008               	return
 10423  030B                     __end_ofi1___wmul:	
 10424  030B                     __ptext38:	
 10425 ;; *************** function i1_commutate *****************
 10426 ;; Defined at:
 10427 ;;		line 1426 in file "../bldc.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;		None
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;		None
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  1    wreg      void 
 10434 ;; Registers used:
 10435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10436 ;; Tracked objects:
 10437 ;;		On entry : 1D/2
 10438 ;;		On exit  : 1F/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10441 ;;      Params:         0       0       0       0       0       0       0       0
 10442 ;;      Locals:         0       0       0       0       0       0       0       0
 10443 ;;      Temps:         12       0       0       0       0       0       0       0
 10444 ;;      Totals:        12       0       0       0       0       0       0       0
 10445 ;;Total ram usage:       12 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; This function calls:
 10448 ;;		Nothing
 10449 ;; This function is called by:
 10450 ;;		_interrrupt_bldc
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           
 10455                           ;psect for function i1_commutate
 10456  030B                     i1_commutate:	
 10457                           
 10458                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 10459                           
 10460                           ;incstack = 0
 10461                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0]
 10462  030B  3000               	movlw	0
 10463  030C  0021               	movlb	1	; select bank1
 10464  030D  0235               	subwf	(_ui16_step_cnt+1)^(0+128),w
 10465  030E  300A               	movlw	10
 10466  030F  1903               	skipnz
 10467  0310  0234               	subwf	_ui16_step_cnt^(0+128),w
 10468  0311  1803               	skipnc
 10469  0312  2B16               	goto	i1l5585
 10470                           
 10471                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
 10472  0313  0AB4               	incf	_ui16_step_cnt^(0+128),f
 10473  0314  1903               	skipnz
 10474  0315  0AB5               	incf	(_ui16_step_cnt+1)^(0+128),f
 10475  0316                     i1l5585:	
 10476                           
 10477                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 10478                           
 10479                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 10480                           
 10481                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 10482  0316  2446  3180         	fcall	PL4	;call to abstracted procedure
 10483  0318  00F0               	movwf	??i1_commutate
 10484  0319  0825               	movf	((_B+1)^(0+384)+4),w
 10485  031A  3D23               	addwfc	((_B+1)^(0+384)+2),w
 10486  031B  00F1               	movwf	??i1_commutate+1
 10487  031C  0826               	movf	(_B^(0+384)+6),w
 10488  031D  0770               	addwf	??i1_commutate,w
 10489  031E  00F2               	movwf	??i1_commutate+2
 10490  031F  0827               	movf	((_B+1)^(0+384)+6),w
 10491  0320  3D71               	addwfc	??i1_commutate+1,w
 10492  0321  00F3               	movwf	??i1_commutate+3
 10493  0322  0828               	movf	(_B^(0+384)+8),w
 10494  0323  0772               	addwf	??i1_commutate+2,w
 10495  0324  00F4               	movwf	??i1_commutate+4
 10496  0325  0829               	movf	((_B+1)^(0+384)+8),w
 10497  0326  3D73               	addwfc	??i1_commutate+3,w
 10498  0327  00F5               	movwf	??i1_commutate+5
 10499  0328  082A               	movf	(_B^(0+384)+10),w
 10500  0329  0774               	addwf	??i1_commutate+4,w
 10501  032A  00F6               	movwf	??i1_commutate+6
 10502  032B  082B               	movf	((_B+1)^(0+384)+10),w
 10503  032C  3D75               	addwfc	??i1_commutate+5,w
 10504  032D  00F7               	movwf	??i1_commutate+7
 10505  032E  3F00               	moviw [0]fsr0
 10506  032F  0776               	addwf	??i1_commutate+6,w
 10507  0330  00F8               	movwf	??i1_commutate+8
 10508  0331  3F01               	moviw [1]fsr0
 10509  0332  3D77               	addwfc	??i1_commutate+7,w
 10510  0333  00F9               	movwf	??i1_commutate+9
 10511  0334  3F40               	moviw [0]fsr1
 10512  0335  0778               	addwf	??i1_commutate+8,w
 10513  0336  00FA               	movwf	??i1_commutate+10
 10514  0337  3F41               	moviw [1]fsr1
 10515  0338  3D79               	addwfc	??i1_commutate+9,w
 10516  0339  00FB               	movwf	??i1_commutate+11
 10517  033A  0820               	movf	_B^(0+384),w
 10518  033B  077A               	addwf	??i1_commutate+10,w
 10519  033C  0022               	movlb	2	; select bank2
 10520  033D  00B7               	movwf	_ui16_speed_fil^(0+256)
 10521  033E  0023               	movlb	3	; select bank3
 10522  033F  0821               	movf	(_B+1)^(0+384),w
 10523  0340  3D7B               	addwfc	??i1_commutate+11,w
 10524                           
 10525                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 10526                           
 10527                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 10528                           
 10529                           ;bldc.c: 1455: bemf_filter = 62;
 10530                           
 10531                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 10532  0341  2491  3180         	fcall	PL18	;call to abstracted procedure
 10533                           
 10534                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 10535  0343  1DCE               	btfss	_MotorFlags,3
 10536  0344  2B7F               	goto	i1l327
 10537                           
 10538                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
 10539                           
 10540                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 10541  0345  242B  3180         	fcall	PL2	;call to abstracted procedure
 10542  0347  1803               	skipnc
 10543  0348  2B4C               	goto	i1l5613
 10544                           
 10545                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
 10546  0349  24B3  3180         	fcall	PL22	;call to abstracted procedure
 10547                           
 10548                           ;bldc.c: 1478: }
 10549  034B  2B60               	goto	i1l5637
 10550  034C                     i1l5613:	
 10551                           
 10552                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
 10553  034C  0022               	movlb	2	; select bank2
 10554  034D  01BD               	clrf	_phase_delay_counter^(0+256)
 10555  034E  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
 10556  034F  2B60               	goto	i1l5637
 10557  0350                     i1l5615:	
 10558                           
 10559                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
 10560  0350  30A6               	movlw	166
 10561  0351  2B5C               	goto	L44
 10562  0352                     i1l5617:	
 10563                           ;bldc.c: 1517: break;
 10564                           
 10565                           
 10566                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
 10567  0352  252B  3180         	fcall	PL66	;call to abstracted procedure
 10568                           
 10569                           ;bldc.c: 1527: break;
 10570  0354  2B6E               	goto	i1l5639
 10571  0355                     i1l5619:	
 10572                           
 10573                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
 10574  0355  307D               	movlw	125
 10575  0356  2B5C               	goto	L44
 10576  0357                     i1l5621:	
 10577                           ;bldc.c: 1537: break;
 10578                           
 10579                           
 10580                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
 10581  0357  3053               	movlw	83
 10582  0358  2B5C               	goto	L44
 10583  0359                     i1l5623:	
 10584                           ;bldc.c: 1547: break;
 10585                           
 10586                           
 10587                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
 10588  0359  303E               	movlw	62
 10589  035A  2B5C               	goto	L44
 10590  035B                     i1l5625:	
 10591                           ;bldc.c: 1557: break;
 10592                           
 10593                           
 10594                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 10595  035B  3032               	movlw	50
 10596  035C                     L44:	
 10597  035C  0022               	movlb	2	; select bank2
 10598  035D  00BF               	movwf	_ui16_comm_time_max^(0+256)
 10599  035E  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
 10600                           
 10601                           ;bldc.c: 1567: break;
 10602  035F  2B6E               	goto	i1l5639
 10603  0360                     i1l5637:	
 10604                           
 10605                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10606                           ; Switch size 1, requested type "space"
 10607                           ; Number of cases is 1, Range of values is 0 to 0
 10608                           ; switch strategies available:
 10609                           ; Name         Instructions Cycles
 10610                           ; simple_byte            4     3 (average)
 10611                           ; direct_byte            8     6 (fixed)
 10612                           ; jumptable            260     6 (fixed)
 10613                           ;	Chosen strategy is simple_byte
 10614  0360  0021               	movlb	1	; select bank1
 10615  0361  0835               	movf	(_ui16_step_cnt+1)^(0+128),w
 10616  0362  3A00               	xorlw	0	; case 0
 10617  0363  1903               	skipnz
 10618  0364  2B66               	goto	i1l10091
 10619  0365  2B5B               	goto	i1l5625
 10620  0366                     i1l10091:	
 10621                           
 10622                           ; Switch size 1, requested type "space"
 10623                           ; Number of cases is 10, Range of values is 0 to 9
 10624                           ; switch strategies available:
 10625                           ; Name         Instructions Cycles
 10626                           ; direct_byte           26     6 (fixed)
 10627                           ; simple_byte           31    16 (average)
 10628                           ; jumptable            260     6 (fixed)
 10629                           ;	Chosen strategy is direct_byte
 10630  0366  2531  3180         	fcall	PL74	;call to abstracted procedure
 10631  0368  1803               	skipnc
 10632  0369  2B5B               	goto	i1l5625
 10633  036A  3187               	movlp	high i1S10093
 10634  036B  3504               	lslf	4,w
 10635  036C  3E51               	addlw	low i1S10093
 10636  036D  0082               	movwf	2
 10637  036E                     i1l5639:	
 10638                           
 10639                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
 10640  036E  3000               	movlw	0
 10641  036F  0240               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 10642  0370  3032               	movlw	50
 10643  0371  1903               	skipnz
 10644  0372  023F               	subwf	_ui16_comm_time_max^(0+256),w
 10645  0373  1803               	skipnc
 10646  0374  2B78               	goto	i1l5643
 10647                           
 10648                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
 10649  0375  3032               	movlw	50
 10650  0376  00BF               	movwf	_ui16_comm_time_max^(0+256)
 10651  0377  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
 10652  0378                     i1l5643:	
 10653                           
 10654                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
 10655  0378  0020               	movlb	0	; select bank0
 10656  0379  1E4E               	btfss	_MotorFlags,4
 10657  037A  2BA3               	goto	i1l345
 10658                           
 10659                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
 10660  037B  300A               	movlw	10
 10661  037C  0021               	movlb	1	; select bank1
 10662  037D  00ED               	movwf	_ui8_StartupPWM^(0+128)
 10663  037E  2BA3               	goto	i1l345
 10664  037F                     i1l327:	
 10665                           
 10666                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
 10667  037F  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10668  0380  2B85               	goto	i1l5649
 10669                           
 10670                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
 10671  0381  0022               	movlb	2	; select bank2
 10672  0382  01BD               	clrf	_phase_delay_counter^(0+256)
 10673  0383  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
 10674                           
 10675                           ;bldc.c: 1659: }
 10676  0384  2B90               	goto	i1l5651
 10677  0385                     i1l5649:	
 10678                           
 10679                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 10680  0385  0847               	movf	_comm_time+1,w
 10681  0386  00F1               	movwf	??i1_commutate+1
 10682  0387  0846               	movf	_comm_time,w
 10683  0388  00F0               	movwf	??i1_commutate
 10684  0389  36F1               	lsrf	??i1_commutate+1,f
 10685  038A  0CF0               	rrf	??i1_commutate,f
 10686  038B  0870               	movf	??i1_commutate,w
 10687  038C  0022               	movlb	2	; select bank2
 10688  038D  00BD               	movwf	_phase_delay_counter^(0+256)
 10689  038E  0871               	movf	??i1_commutate+1,w
 10690  038F  00BE               	movwf	(_phase_delay_counter+1)^(0+256)
 10691  0390                     i1l5651:	
 10692                           
 10693                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 10694                           
 10695                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
 10696                           
 10697                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 10698  0390  251E  3180         	fcall	PL58	;call to abstracted procedure
 10699  0392  1F4E               	btfss	_MotorFlags,6
 10700  0393  2BA1               	goto	i1l5659
 10701                           
 10702                           ;bldc.c: 1693: {;bldc.c: 1751: CCPR1L = ui16_duty_cycle_BLDC >> 2;
 10703  0394  0021               	movlb	1	; select bank1
 10704  0395  082F               	movf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
 10705  0396  00F1               	movwf	??i1_commutate+1
 10706  0397  082E               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 10707  0398  00F0               	movwf	??i1_commutate
 10708  0399  36F1               	lsrf	??i1_commutate+1,f
 10709  039A  0CF0               	rrf	??i1_commutate,f
 10710  039B  36F1               	lsrf	??i1_commutate+1,f
 10711  039C  0CF0               	rrf	??i1_commutate,f
 10712  039D  0870               	movf	??i1_commutate,w
 10713                           
 10714                           ;bldc.c: 1752: CCP1CON = ((ui16_duty_cycle_BLDC & 0b11) << 4) | 0x0C;
 10715  039E  24EE  3180         	fcall	PL34	;call to abstracted procedure
 10716                           
 10717                           ;bldc.c: 1766: }
 10718  03A0  2BA3               	goto	i1l345
 10719  03A1                     i1l5659:	
 10720                           
 10721                           ;bldc.c: 1769: else;bldc.c: 1770: {;bldc.c: 1772: CCPR1L = 0;
 10722  03A1  0025               	movlb	5	; select bank5
 10723  03A2  0191               	clrf	17	;volatile
 10724  03A3                     i1l345:	
 10725                           
 10726                           ;bldc.c: 1774: };bldc.c: 1778: };bldc.c: 1781: comm_time = 0;
 10727                           
 10728                           ;bldc.c: 1785: if( comm_state == 0xff )
 10729  03A3  253B  3180         	fcall	PL84	;call to abstracted procedure
 10730  03A5  0F6C               	incfsz	_comm_state^(0+128),w
 10731  03A6  2BF5               	goto	i1l5809
 10732                           
 10733                           ;bldc.c: 1787: {;bldc.c: 1789: comm_state = 6;
 10734  03A7  3006               	movlw	6
 10735  03A8  00EC               	movwf	_comm_state^(0+128)
 10736  03A9  2BF5               	goto	i1l5809
 10737  03AA                     i1l5665:	
 10738                           
 10739                           ;bldc.c: 1801: {;bldc.c: 1807: PSTR1CON = 0b00000001;
 10740  03AA  3001               	movlw	1
 10741  03AB  0025               	movlb	5	; select bank5
 10742  03AC  0096               	movwf	22	;volatile
 10743                           
 10744                           ;bldc.c: 1810: if( MotorFlags.bits.B6 )
 10745  03AD  0020               	movlb	0	; select bank0
 10746  03AE  1F4E               	btfss	_MotorFlags,6
 10747  03AF  2BB2               	goto	i1l5671
 10748                           
 10749                           ;bldc.c: 1812: {;bldc.c: 1814: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 10750  03B0  2506  3180         	fcall	PL42	;call to abstracted procedure
 10751  03B2                     i1l5671:	
 10752                           
 10753                           ;bldc.c: 1816: };bldc.c: 1820: LATB2 = 0;
 10754                           
 10755                           ;bldc.c: 1821: LATB1 = 0;
 10756                           
 10757                           ;bldc.c: 1822: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 10758                           
 10759                           ;bldc.c: 1823: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 10760                           
 10761                           ;bldc.c: 1824: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 10762                           
 10763                           ;bldc.c: 1825: CM1CON1 = 0x02;
 10764                           
 10765                           ;bldc.c: 1838: CM1CON0 = 0x84;
 10766                           
 10767                           ;bldc.c: 1839: rising_bemf_flag = 1;
 10768  03B2  245E  3180         	fcall	PL12	;call to abstracted procedure
 10769  03B4  2BE2               	goto	L50
 10770  03B5                     i1l5689:	
 10771                           ;bldc.c: 1846: break;
 10772                           
 10773                           ;bldc.c: 1840: comm_state = 6;
 10774                           
 10775                           
 10776                           ;bldc.c: 1856: {;bldc.c: 1861: PSTR1CON = 0b00000001;
 10777  03B5  3001               	movlw	1
 10778  03B6  0025               	movlb	5	; select bank5
 10779  03B7  0096               	movwf	22	;volatile
 10780                           
 10781                           ;bldc.c: 1864: if( MotorFlags.bits.B6 )
 10782  03B8  0020               	movlb	0	; select bank0
 10783  03B9  1F4E               	btfss	_MotorFlags,6
 10784  03BA  2BBD               	goto	i1l5695
 10785                           
 10786                           ;bldc.c: 1866: {;bldc.c: 1868: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 10787  03BB  250C  3180         	fcall	PL46	;call to abstracted procedure
 10788  03BD                     i1l5695:	
 10789                           
 10790                           ;bldc.c: 1870: };bldc.c: 1874: LATB2 = 1;
 10791                           
 10792                           ;bldc.c: 1875: LATB1 = 0;
 10793                           
 10794                           ;bldc.c: 1876: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 10795                           
 10796                           ;bldc.c: 1877: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 10797                           
 10798                           ;bldc.c: 1878: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 10799                           
 10800                           ;bldc.c: 1879: CM1CON1 = 0x01;
 10801                           
 10802                           ;bldc.c: 1893: CM1CON0 = 0x94;
 10803  03BD  24D4  3180         	fcall	PL26	;call to abstracted procedure
 10804  03BF                     i1l5709:	
 10805                           
 10806                           ;bldc.c: 1894: rising_bemf_flag = 0;
 10807                           
 10808                           ;bldc.c: 1895: comm_state = 1;
 10809  03BF  2525  3180         	fcall	PL64	;call to abstracted procedure
 10810                           
 10811                           ;bldc.c: 1903: break;
 10812  03C1  2C09               	goto	i1l5811
 10813  03C2                     i1l5713:	
 10814                           
 10815                           ;bldc.c: 1913: {;bldc.c: 1918: PSTR1CON = 0b00000010;
 10816  03C2  3002               	movlw	2
 10817  03C3  0025               	movlb	5	; select bank5
 10818  03C4  0096               	movwf	22	;volatile
 10819                           
 10820                           ;bldc.c: 1921: if( MotorFlags.bits.B6 )
 10821  03C5  0020               	movlb	0	; select bank0
 10822  03C6  1F4E               	btfss	_MotorFlags,6
 10823  03C7  2BCA               	goto	i1l5719
 10824                           
 10825                           ;bldc.c: 1923: {;bldc.c: 1925: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 10826  03C8  2500  3180         	fcall	PL40	;call to abstracted procedure
 10827  03CA                     i1l5719:	
 10828                           
 10829                           ;bldc.c: 1927: };bldc.c: 1930: LATC2 = 0;
 10830                           
 10831                           ;bldc.c: 1932: LATB1 = 0;
 10832                           
 10833                           ;bldc.c: 1933: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 10834                           
 10835                           ;bldc.c: 1934: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 10836                           
 10837                           ;bldc.c: 1935: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 10838                           
 10839                           ;bldc.c: 1936: CM1CON1 = 0x00;
 10840                           
 10841                           ;bldc.c: 1950: CM1CON0 = 0x84;
 10842                           
 10843                           ;bldc.c: 1951: rising_bemf_flag = 1;
 10844  03CA  24C4  3180         	fcall	PL24	;call to abstracted procedure
 10845  03CC  2BE2               	goto	L50
 10846  03CD                     i1l5733:	
 10847                           ;bldc.c: 1957: break;
 10848                           
 10849                           ;bldc.c: 1952: comm_state = 2;
 10850                           
 10851                           
 10852                           ;bldc.c: 1967: {;bldc.c: 1973: PSTR1CON = 0b00000010;
 10853  03CD  3002               	movlw	2
 10854  03CE  0025               	movlb	5	; select bank5
 10855  03CF  0096               	movwf	22	;volatile
 10856                           
 10857                           ;bldc.c: 1976: if( MotorFlags.bits.B6 )
 10858  03D0  0020               	movlb	0	; select bank0
 10859  03D1  1F4E               	btfss	_MotorFlags,6
 10860  03D2  2BD5               	goto	i1l5739
 10861                           
 10862                           ;bldc.c: 1978: {;bldc.c: 1980: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 10863  03D3  2506  3180         	fcall	PL42	;call to abstracted procedure
 10864  03D5                     i1l5739:	
 10865                           
 10866                           ;bldc.c: 1982: };bldc.c: 1985: LATC2 = 0;
 10867                           
 10868                           ;bldc.c: 1987: LATB1 = 1;
 10869                           
 10870                           ;bldc.c: 1988: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 10871                           
 10872                           ;bldc.c: 1989: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 10873                           
 10874                           ;bldc.c: 1990: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 10875                           
 10876                           ;bldc.c: 1991: CM1CON1 = 0x02;
 10877                           
 10878                           ;bldc.c: 2005: CM1CON0 = 0x94;
 10879                           
 10880                           ;bldc.c: 2006: rising_bemf_flag = 0;
 10881  03D5  2480  3180         	fcall	PL16	;call to abstracted procedure
 10882  03D7  2BEE               	goto	L51
 10883  03D8                     i1l5757:	
 10884                           ;bldc.c: 2012: break;
 10885                           
 10886                           ;bldc.c: 2007: comm_state = 3;
 10887                           
 10888                           
 10889                           ;bldc.c: 2021: {;bldc.c: 2027: PSTR1CON = 0b00000100;
 10890  03D8  3004               	movlw	4
 10891  03D9  0025               	movlb	5	; select bank5
 10892  03DA  0096               	movwf	22	;volatile
 10893                           
 10894                           ;bldc.c: 2030: if( MotorFlags.bits.B6 )
 10895  03DB  0020               	movlb	0	; select bank0
 10896  03DC  1F4E               	btfss	_MotorFlags,6
 10897  03DD  2BE0               	goto	i1l5763
 10898                           
 10899                           ;bldc.c: 2032: {;bldc.c: 2034: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 10900  03DE  250C  3180         	fcall	PL46	;call to abstracted procedure
 10901  03E0                     i1l5763:	
 10902                           
 10903                           ;bldc.c: 2036: };bldc.c: 2039: LATC2 = 0;
 10904                           
 10905                           ;bldc.c: 2040: LATB2 = 0;
 10906                           
 10907                           ;bldc.c: 2042: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 10908                           
 10909                           ;bldc.c: 2043: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 10910                           
 10911                           ;bldc.c: 2044: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 10912                           
 10913                           ;bldc.c: 2045: CM1CON1 = 0x01;
 10914                           
 10915                           ;bldc.c: 2060: CM1CON0 = 0x84;
 10916                           
 10917                           ;bldc.c: 2061: rising_bemf_flag = 1;
 10918  03E0  246F  3180         	fcall	PL14	;call to abstracted procedure
 10919  03E2                     L50:	
 10920  03E2  1453               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10921                           
 10922                           ;bldc.c: 2062: comm_state = 4;
 10923  03E3  2BEF               	goto	L48
 10924  03E4                     i1l5781:	
 10925                           ;bldc.c: 2067: break;
 10926                           
 10927                           
 10928                           ;bldc.c: 2077: {;bldc.c: 2082: PSTR1CON = 0b00000100;
 10929  03E4  3004               	movlw	4
 10930  03E5  0025               	movlb	5	; select bank5
 10931  03E6  0096               	movwf	22	;volatile
 10932                           
 10933                           ;bldc.c: 2085: if( MotorFlags.bits.B6 )
 10934  03E7  0020               	movlb	0	; select bank0
 10935  03E8  1F4E               	btfss	_MotorFlags,6
 10936  03E9  2BEC               	goto	i1l5787
 10937                           
 10938                           ;bldc.c: 2087: {;bldc.c: 2089: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 10939  03EA  2500  3180         	fcall	PL40	;call to abstracted procedure
 10940  03EC                     i1l5787:	
 10941                           
 10942                           ;bldc.c: 2091: };bldc.c: 2094: LATC2 = 1;
 10943                           
 10944                           ;bldc.c: 2095: LATB2 = 0;
 10945                           
 10946                           ;bldc.c: 2097: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 10947                           
 10948                           ;bldc.c: 2098: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 10949                           
 10950                           ;bldc.c: 2099: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 10951                           
 10952                           ;bldc.c: 2100: CM1CON1 = 0x00;
 10953                           
 10954                           ;bldc.c: 2114: CM1CON0 = 0x94;
 10955                           
 10956                           ;bldc.c: 2115: rising_bemf_flag = 0;
 10957  03EC  24A3  3180         	fcall	PL20	;call to abstracted procedure
 10958  03EE                     L51:	
 10959  03EE  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10960  03EF                     L48:	
 10961                           
 10962                           ;bldc.c: 2116: comm_state = 5;
 10963  03EF  0021               	movlb	1	; select bank1
 10964  03F0  00EC               	movwf	_comm_state^(0+128)
 10965                           
 10966                           ;bldc.c: 2121: break;
 10967  03F1  2C09               	goto	i1l5811
 10968  03F2                     i1l5801:	
 10969                           
 10970                           ;bldc.c: 2130: {;bldc.c: 2132: PSTR1CON = 0x00;
 10971                           
 10972                           ;bldc.c: 2133: CM1CON0 = 0x00;
 10973  03F2  2536  3180         	fcall	PL76	;call to abstracted procedure
 10974  03F4  2BBF               	goto	i1l5709
 10975  03F5                     i1l5809:	
 10976  03F5  086C               	movf	_comm_state^(0+128),w
 10977                           
 10978                           ; Switch size 1, requested type "space"
 10979                           ; Number of cases is 6, Range of values is 1 to 6
 10980                           ; switch strategies available:
 10981                           ; Name         Instructions Cycles
 10982                           ; simple_byte           19    10 (average)
 10983                           ; direct_byte           21     9 (fixed)
 10984                           ; jumptable            263     9 (fixed)
 10985                           ;	Chosen strategy is simple_byte
 10986  03F6  3A01               	xorlw	1	; case 1
 10987  03F7  1903               	skipnz
 10988  03F8  2BAA               	goto	i1l5665
 10989  03F9  3A03               	xorlw	3	; case 2
 10990  03FA  1903               	skipnz
 10991  03FB  2BB5               	goto	i1l5689
 10992  03FC  3A01               	xorlw	1	; case 3
 10993  03FD  1903               	skipnz
 10994  03FE  2BC2               	goto	i1l5713
 10995  03FF  3A07               	xorlw	7	; case 4
 10996  0400  1903               	skipnz
 10997  0401  2BCD               	goto	i1l5733
 10998  0402  3A01               	xorlw	1	; case 5
 10999  0403  1903               	skipnz
 11000  0404  2BD8               	goto	i1l5757
 11001  0405  3A03               	xorlw	3	; case 6
 11002  0406  1903               	skipnz
 11003  0407  2BE4               	goto	i1l5781
 11004  0408  2BF2               	goto	i1l5801
 11005  0409                     i1l5811:	
 11006                           
 11007                           ;bldc.c: 2147: {;bldc.c: 2149: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
 11008                           
 11009                           ;bldc.c: 2159: };bldc.c: 2162: comm_time = 0;
 11010                           
 11011                           ;bldc.c: 2151: }
 11012  0409  2D18               	ljmp	PL54	;call to abstracted procedure
 11013  040A                     __end_ofi1_commutate:	
 11014  040A                     __ptext43:	
 11015 ;; *************** function _BLDCWait *****************
 11016 ;; Defined at:
 11017 ;;		line 156 in file "../bldc.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;		None
 11020 ;; Auto vars:     Size  Location     Type
 11021 ;;		None
 11022 ;; Return value:  Size  Location     Type
 11023 ;;                  1    wreg      void 
 11024 ;; Registers used:
 11025 ;;		None
 11026 ;; Tracked objects:
 11027 ;;		On entry : 1E/1
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11031 ;;      Params:         0       0       0       0       0       0       0       0
 11032 ;;      Locals:         0       0       0       0       0       0       0       0
 11033 ;;      Temps:          0       0       0       0       0       0       0       0
 11034 ;;      Totals:         0       0       0       0       0       0       0       0
 11035 ;;Total ram usage:        0 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; This function calls:
 11038 ;;		Nothing
 11039 ;; This function is called by:
 11040 ;;		_interrrupt_bldc
 11041 ;; This function uses a non-reentrant model
 11042 ;;
 11043                           
 11044                           
 11045                           ;psect for function _BLDCWait
 11046  040A                     _BLDCWait:	
 11047                           
 11048                           ;bldc.c: 161: __nop();
 11049                           
 11050                           ;incstack = 0
 11051                           ; Regs used in _BLDCWait: []
 11052  040A  0000               	nop
 11053                           
 11054                           ;bldc.c: 162: __nop();
 11055  040B  0000               	nop
 11056                           
 11057                           ;bldc.c: 163: __nop();
 11058  040C  0000               	nop
 11059                           
 11060                           ;bldc.c: 164: __nop();
 11061  040D  0000               	nop
 11062                           
 11063                           ;bldc.c: 165: __nop();
 11064  040E  0000               	nop
 11065                           
 11066                           ;bldc.c: 166: __nop();
 11067  040F  0000               	nop
 11068                           
 11069                           ;bldc.c: 167: __nop();
 11070  0410  0000               	nop
 11071                           
 11072                           ;bldc.c: 168: __nop();
 11073  0411  0000               	nop
 11074                           
 11075                           ;bldc.c: 170: __nop();
 11076  0412  0000               	nop
 11077                           
 11078                           ;bldc.c: 171: __nop();
 11079  0413  0000               	nop
 11080                           
 11081                           ;bldc.c: 172: __nop();
 11082  0414  0000               	nop
 11083                           
 11084                           ;bldc.c: 173: __nop();
 11085  0415  0000               	nop
 11086                           
 11087                           ;bldc.c: 174: __nop();
 11088  0416  0000               	nop
 11089                           
 11090                           ;bldc.c: 175: __nop();
 11091  0417  0000               	nop
 11092                           
 11093                           ;bldc.c: 176: __nop();
 11094  0418  0000               	nop
 11095                           
 11096                           ;bldc.c: 177: __nop();
 11097  0419  0000               	nop
 11098                           
 11099                           ;bldc.c: 179: __nop();
 11100  041A  0000               	nop
 11101                           
 11102                           ;bldc.c: 180: __nop();
 11103  041B  0000               	nop
 11104                           
 11105                           ;bldc.c: 181: __nop();
 11106  041C  0000               	nop
 11107                           
 11108                           ;bldc.c: 182: __nop();
 11109  041D  0000               	nop
 11110                           
 11111                           ;bldc.c: 183: __nop();
 11112  041E  0000               	nop
 11113                           
 11114                           ;bldc.c: 184: __nop();
 11115  041F  0000               	nop
 11116                           
 11117                           ;bldc.c: 185: __nop();
 11118  0420  0000               	nop
 11119                           
 11120                           ;bldc.c: 186: __nop();
 11121  0421  0000               	nop
 11122                           
 11123                           ;bldc.c: 188: __nop();
 11124  0422  0000               	nop
 11125                           
 11126                           ;bldc.c: 189: __nop();
 11127  0423  0000               	nop
 11128                           
 11129                           ;bldc.c: 190: __nop();
 11130  0424  0000               	nop
 11131                           
 11132                           ;bldc.c: 191: __nop();
 11133  0425  0000               	nop
 11134                           
 11135                           ;bldc.c: 192: __nop();
 11136  0426  0000               	nop
 11137                           
 11138                           ;bldc.c: 193: __nop();
 11139  0427  0000               	nop
 11140                           
 11141                           ;bldc.c: 194: __nop();
 11142  0428  0000               	nop
 11143                           
 11144                           ;bldc.c: 195: __nop();
 11145  0429  0000               	nop
 11146  042A  0008               	return
 11147  042B                     __end_of_BLDCWait:	
 11148  042B                     PL2:	
 11149  042B  0022               	movlb	2	; select bank2
 11150  042C  0842               	movf	(_ui16_speed_rar+1)^(0+256),w
 11151  042D  0021               	movlb	1	; select bank1
 11152  042E  00B3               	movwf	(_ui16_phase_advancement+1)^(0+128)
 11153  042F  0022               	movlb	2	; select bank2
 11154  0430  0841               	movf	_ui16_speed_rar^(0+256),w
 11155  0431  0021               	movlb	1	; select bank1
 11156  0432  00B2               	movwf	_ui16_phase_advancement^(0+128)
 11157  0433  3001               	movlw	1
 11158  0434  36B3               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 11159  0435  0CB2               	rrf	_ui16_phase_advancement^(0+128),f
 11160  0436  36B3               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 11161  0437  0CB2               	rrf	_ui16_phase_advancement^(0+128),f
 11162  0438  36B3               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 11163  0439  0CB2               	rrf	_ui16_phase_advancement^(0+128),f
 11164  043A  05B3               	andwf	(_ui16_phase_advancement+1)^(0+128),f
 11165  043B  0020               	movlb	0	; select bank0
 11166  043C  0847               	movf	_comm_time+1,w
 11167  043D  0021               	movlb	1	; select bank1
 11168  043E  0233               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 11169  043F  1D03               	skipz
 11170  0440  0008               	return
 11171  0441  0020               	movlb	0	; select bank0
 11172  0442  0846               	movf	_comm_time,w
 11173  0443  0021               	movlb	1	; select bank1
 11174  0444  0232               	subwf	_ui16_phase_advancement^(0+128),w
 11175  0445  0008               	return
 11176  0446                     __end_ofPL2:	
 11177  0446                     PL4:	
 11178  0446  3565               	lslf	_Bcnt^(0+128),w
 11179  0447  3EA0               	addlw	(low (_B| (0+256)))& (0+255)
 11180  0448  0086               	movwf	6
 11181  0449  3001               	movlw	1	; select bank3/4
 11182  044A  0087               	movwf	7
 11183  044B  0020               	movlb	0	; select bank0
 11184  044C  0846               	movf	_comm_time,w
 11185  044D  3FC0               	movwi [0]fsr1
 11186  044E  0847               	movf	_comm_time+1,w
 11187  044F  3FC1               	movwi [1]fsr1
 11188  0450  0021               	movlb	1	; select bank1
 11189  0451  3007               	movlw	7
 11190  0452  0AE5               	incf	_Bcnt^(0+128),f
 11191  0453  05E5               	andwf	_Bcnt^(0+128),f
 11192  0454  30AE               	movlw	((low (_B| (0+256)))& (0+255)+14)
 11193  0455  0086               	movwf	6
 11194  0456  30AC               	movlw	((low (_B| (0+256)))& (0+255)+12)
 11195  0457  0084               	movwf	4
 11196  0458  3001               	movlw	1	; select bank3/4
 11197  0459  0085               	movwf	5
 11198  045A  0023               	movlb	3	; select bank3
 11199  045B  0824               	movf	(_B^(0+384)+4),w
 11200  045C  0722               	addwf	(_B^(0+384)+2),w
 11201  045D  0008               	return
 11202  045E                     __end_ofPL4:	
 11203  045E                     PL12:	
 11204  045E  0022               	movlb	2	; select bank2
 11205  045F  110D               	bcf	13,2	;volatile
 11206  0460  108D               	bcf	13,1	;volatile
 11207  0461  3009               	movlw	9
 11208  0462  0021               	movlb	1	; select bank1
 11209  0463  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 11210  0464  3025               	movlw	37
 11211  0465  01E9               	clrf	_ui8_UPhase_sel^(0+128)
 11212  0466  0AE9               	incf	_ui8_UPhase_sel^(0+128),f
 11213  0467  00E8               	movwf	_ui8_Ubemf_sel^(0+128)
 11214  0468  3002               	movlw	2
 11215  0469  0022               	movlb	2	; select bank2
 11216  046A  0092               	movwf	18	;volatile
 11217  046B  3084               	movlw	132
 11218  046C  0091               	movwf	17	;volatile
 11219  046D  0020               	movlb	0	; select bank0
 11220  046E  3406               	retlw	6
 11221  046F                     __end_ofPL12:	
 11222  046F                     PL14:	
 11223  046F  0022               	movlb	2	; select bank2
 11224  0470  110E               	bcf	14,2	;volatile
 11225  0471  110D               	bcf	13,2	;volatile
 11226  0472  3011               	movlw	17
 11227  0473  0021               	movlb	1	; select bank1
 11228  0474  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 11229  0475  3025               	movlw	37
 11230  0476  00E9               	movwf	_ui8_UPhase_sel^(0+128)
 11231  0477  3005               	movlw	5
 11232  0478  00E8               	movwf	_ui8_Ubemf_sel^(0+128)
 11233  0479  3001               	movlw	1
 11234  047A  0022               	movlb	2	; select bank2
 11235  047B  0092               	movwf	18	;volatile
 11236  047C  3084               	movlw	132
 11237  047D  0091               	movwf	17	;volatile
 11238  047E  0020               	movlb	0	; select bank0
 11239  047F  3404               	retlw	4
 11240  0480                     __end_ofPL14:	
 11241  0480                     PL16:	
 11242  0480  0022               	movlb	2	; select bank2
 11243  0481  110E               	bcf	14,2	;volatile
 11244  0482  148D               	bsf	13,1	;volatile
 11245  0483  3035               	movlw	53
 11246  0484  0021               	movlb	1	; select bank1
 11247  0485  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 11248  0486  3005               	movlw	5
 11249  0487  00E9               	movwf	_ui8_UPhase_sel^(0+128)
 11250  0488  3025               	movlw	37
 11251  0489  00E8               	movwf	_ui8_Ubemf_sel^(0+128)
 11252  048A  3002               	movlw	2
 11253  048B  0022               	movlb	2	; select bank2
 11254  048C  0092               	movwf	18	;volatile
 11255  048D  3094               	movlw	148
 11256  048E  0091               	movwf	17	;volatile
 11257  048F  0020               	movlb	0	; select bank0
 11258  0490  3403               	retlw	3
 11259  0491                     __end_ofPL16:	
 11260  0491                     PL18:	
 11261  0491  0022               	movlb	2	; select bank2
 11262  0492  00B8               	movwf	(_ui16_speed_fil+1)^(0+256)
 11263  0493  0020               	movlb	0	; select bank0
 11264  0494  0847               	movf	_comm_time+1,w
 11265  0495  0022               	movlb	2	; select bank2
 11266  0496  00C2               	movwf	(_ui16_speed_rar+1)^(0+256)
 11267  0497  0020               	movlb	0	; select bank0
 11268  0498  0846               	movf	_comm_time,w
 11269  0499  0022               	movlb	2	; select bank2
 11270  049A  00C1               	movwf	_ui16_speed_rar^(0+256)
 11271  049B  0020               	movlb	0	; select bank0
 11272  049C  12CE               	bcf	_MotorFlags,5
 11273  049D  0021               	movlb	1	; select bank1
 11274  049E  01E7               	clrf	_ui8_sampleState^(0+128)
 11275  049F  0AE7               	incf	_ui8_sampleState^(0+128),f
 11276  04A0  0020               	movlb	0	; select bank0
 11277  04A1  17CE               	bsf	_MotorFlags,7
 11278  04A2  0008               	return
 11279  04A3                     __end_ofPL18:	
 11280  04A3                     PL20:	
 11281  04A3  0022               	movlb	2	; select bank2
 11282  04A4  150E               	bsf	14,2	;volatile
 11283  04A5  110D               	bcf	13,2	;volatile
 11284  04A6  3011               	movlw	17
 11285  04A7  0021               	movlb	1	; select bank1
 11286  04A8  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 11287  04A9  3025               	movlw	37
 11288  04AA  00E9               	movwf	_ui8_UPhase_sel^(0+128)
 11289  04AB  01E8               	clrf	_ui8_Ubemf_sel^(0+128)
 11290  04AC  0AE8               	incf	_ui8_Ubemf_sel^(0+128),f
 11291  04AD  0022               	movlb	2	; select bank2
 11292  04AE  0192               	clrf	18	;volatile
 11293  04AF  3094               	movlw	148
 11294  04B0  0091               	movwf	17	;volatile
 11295  04B1  0020               	movlb	0	; select bank0
 11296  04B2  3405               	retlw	5
 11297  04B3                     __end_ofPL20:	
 11298  04B3                     PL22:	
 11299  04B3  0020               	movlb	0	; select bank0
 11300  04B4  0847               	movf	_comm_time+1,w
 11301  04B5  0022               	movlb	2	; select bank2
 11302  04B6  00BE               	movwf	(_phase_delay_counter+1)^(0+256)
 11303  04B7  0020               	movlb	0	; select bank0
 11304  04B8  0846               	movf	_comm_time,w
 11305  04B9  0022               	movlb	2	; select bank2
 11306  04BA  00BD               	movwf	_phase_delay_counter^(0+256)
 11307  04BB  0021               	movlb	1	; select bank1
 11308  04BC  0832               	movf	_ui16_phase_advancement^(0+128),w
 11309  04BD  0022               	movlb	2	; select bank2
 11310  04BE  02BD               	subwf	_phase_delay_counter^(0+256),f
 11311  04BF  0021               	movlb	1	; select bank1
 11312  04C0  0833               	movf	(_ui16_phase_advancement+1)^(0+128),w
 11313  04C1  0022               	movlb	2	; select bank2
 11314  04C2  3BBE               	subwfb	(_phase_delay_counter+1)^(0+256),f
 11315  04C3  0008               	return
 11316  04C4                     __end_ofPL22:	
 11317  04C4                     PL24:	
 11318  04C4  0022               	movlb	2	; select bank2
 11319  04C5  110E               	bcf	14,2	;volatile
 11320  04C6  108D               	bcf	13,1	;volatile
 11321  04C7  3035               	movlw	53
 11322  04C8  0021               	movlb	1	; select bank1
 11323  04C9  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 11324  04CA  3005               	movlw	5
 11325  04CB  00E9               	movwf	_ui8_UPhase_sel^(0+128)
 11326  04CC  01E8               	clrf	_ui8_Ubemf_sel^(0+128)
 11327  04CD  0AE8               	incf	_ui8_Ubemf_sel^(0+128),f
 11328  04CE  0022               	movlb	2	; select bank2
 11329  04CF  0192               	clrf	18	;volatile
 11330  04D0  3084               	movlw	132
 11331  04D1  0091               	movwf	17	;volatile
 11332  04D2  0020               	movlb	0	; select bank0
 11333  04D3  3402               	retlw	2
 11334  04D4                     __end_ofPL24:	
 11335  04D4                     PL26:	
 11336  04D4  0022               	movlb	2	; select bank2
 11337  04D5  150D               	bsf	13,2	;volatile
 11338  04D6  108D               	bcf	13,1	;volatile
 11339  04D7  3009               	movlw	9
 11340  04D8  0021               	movlb	1	; select bank1
 11341  04D9  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 11342  04DA  3005               	movlw	5
 11343  04DB  01E9               	clrf	_ui8_UPhase_sel^(0+128)
 11344  04DC  0AE9               	incf	_ui8_UPhase_sel^(0+128),f
 11345  04DD  00E8               	movwf	_ui8_Ubemf_sel^(0+128)
 11346  04DE  3001               	movlw	1
 11347  04DF  0022               	movlb	2	; select bank2
 11348  04E0  0092               	movwf	18	;volatile
 11349  04E1  3094               	movlw	148
 11350  04E2  0091               	movwf	17	;volatile
 11351  04E3  0008               	return
 11352  04E4                     __end_ofPL26:	
 11353  04E4                     PL28:	
 11354  04E4  00FC               	movwf	??_interrrupt_bldc
 11355  04E5  01FD               	clrf	??_interrrupt_bldc+1
 11356  04E6  0020               	movlb	0	; select bank0
 11357  04E7  0845               	movf	_ui16_IPhase_bldc+1,w	;volatile
 11358  04E8  027D               	subwf	??_interrrupt_bldc+1,w
 11359  04E9  1D03               	skipz
 11360  04EA  0008               	return
 11361  04EB  0844               	movf	_ui16_IPhase_bldc,w	;volatile
 11362  04EC  027C               	subwf	??_interrrupt_bldc,w
 11363  04ED  0008               	return
 11364  04EE                     __end_ofPL28:	
 11365  04EE                     PL34:	
 11366  04EE  0025               	movlb	5	; select bank5
 11367  04EF  0091               	movwf	17	;volatile
 11368  04F0  0021               	movlb	1	; select bank1
 11369  04F1  0E2E               	swapf	_ui16_duty_cycle_BLDC^(0+128),w
 11370  04F2  3930               	andlw	48
 11371  04F3  380C               	iorlw	12
 11372  04F4  0025               	movlb	5	; select bank5
 11373  04F5  0093               	movwf	19	;volatile
 11374  04F6  0008               	return
 11375  04F7                     __end_ofPL34:	
 11376  04F7                     PL38:	
 11377  04F7  081C               	movf	28,w	;volatile
 11378  04F8  0020               	movlb	0	; select bank0
 11379  04F9  00C9               	movwf	_analog_value+1	;volatile
 11380  04FA  0021               	movlb	1	; select bank1
 11381  04FB  081B               	movf	27,w	;volatile
 11382  04FC  0020               	movlb	0	; select bank0
 11383  04FD  00C8               	movwf	_analog_value	;volatile
 11384  04FE  0849               	movf	_analog_value+1,w	;volatile
 11385  04FF  0008               	return
 11386  0500                     __end_ofPL38:	
 11387  0500                     PL40:	
 11388  0500  0022               	movlb	2	; select bank2
 11389  0501  080E               	movf	14,w	;volatile
 11390  0502  39E5               	andlw	229
 11391  0503  3818               	iorlw	24
 11392  0504  008E               	movwf	14	;volatile
 11393  0505  0008               	return
 11394  0506                     __end_ofPL40:	
 11395  0506                     PL42:	
 11396  0506  0022               	movlb	2	; select bank2
 11397  0507  080E               	movf	14,w	;volatile
 11398  0508  39E5               	andlw	229
 11399  0509  380A               	iorlw	10
 11400  050A  008E               	movwf	14	;volatile
 11401  050B  0008               	return
 11402  050C                     __end_ofPL42:	
 11403  050C                     PL46:	
 11404  050C  0022               	movlb	2	; select bank2
 11405  050D  080E               	movf	14,w	;volatile
 11406  050E  39E5               	andlw	229
 11407  050F  3812               	iorlw	18
 11408  0510  008E               	movwf	14	;volatile
 11409  0511  0008               	return
 11410  0512                     __end_ofPL46:	
 11411  0512                     PL50:	
 11412  0512  0845               	movf	_ui16_IPhase_bldc+1,w	;volatile
 11413  0513  00F1               	movwf	i1___wmul@multiplier+1
 11414  0514  0844               	movf	_ui16_IPhase_bldc,w	;volatile
 11415  0515  00F0               	movwf	i1___wmul@multiplier
 11416  0516  0022               	movlb	2	; select bank2
 11417  0517  0008               	return
 11418  0518                     __end_ofPL50:	
 11419  0518                     PL54:	
 11420  0518  3028               	movlw	40
 11421  0519  00EB               	movwf	_ui8_BlankingCount^(0+128)
 11422  051A  0020               	movlb	0	; select bank0
 11423  051B  01C6               	clrf	_comm_time
 11424  051C  01C7               	clrf	_comm_time+1
 11425  051D  0008               	return
 11426  051E                     __end_ofPL54:	
 11427  051E                     PL58:	
 11428  051E  3032               	movlw	50
 11429  051F  01BD               	clrf	_phase_delay_counter^(0+256)
 11430  0520  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
 11431  0521  00BF               	movwf	_ui16_comm_time_max^(0+256)
 11432  0522  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
 11433  0523  0020               	movlb	0	; select bank0
 11434  0524  0008               	return
 11435  0525                     __end_ofPL58:	
 11436  0525                     PL64:	
 11437  0525  0020               	movlb	0	; select bank0
 11438  0526  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 11439  0527  0021               	movlb	1	; select bank1
 11440  0528  01EC               	clrf	_comm_state^(0+128)
 11441  0529  0AEC               	incf	_comm_state^(0+128),f
 11442  052A  0008               	return
 11443  052B                     __end_ofPL64:	
 11444  052B                     PL66:	
 11445  052B  30F4               	movlw	244
 11446  052C  0022               	movlb	2	; select bank2
 11447  052D  00BF               	movwf	_ui16_comm_time_max^(0+256)
 11448  052E  3001               	movlw	1
 11449  052F  00C0               	movwf	(_ui16_comm_time_max^(0+256)+1)
 11450  0530  0008               	return
 11451  0531                     __end_ofPL66:	
 11452  0531                     PL74:	
 11453  0531  0834               	movf	_ui16_step_cnt^(0+128),w
 11454  0532  0084               	movwf	4
 11455  0533  300A               	movlw	10
 11456  0534  0204               	subwf	4,w
 11457  0535  0008               	return
 11458  0536                     __end_ofPL74:	
 11459  0536                     PL76:	
 11460  0536  0025               	movlb	5	; select bank5
 11461  0537  0196               	clrf	22	;volatile
 11462  0538  0022               	movlb	2	; select bank2
 11463  0539  0191               	clrf	17	;volatile
 11464  053A  0008               	return
 11465  053B                     __end_ofPL76:	
 11466  053B                     PL84:	
 11467  053B  0020               	movlb	0	; select bank0
 11468  053C  01C6               	clrf	_comm_time
 11469  053D  01C7               	clrf	_comm_time+1
 11470  053E  0021               	movlb	1	; select bank1
 11471  053F  0008               	return
 11472  0540                     __end_ofPL84:	
 11473  0540                     __ptext42:	
 11474 ;; *************** function ___lwdiv *****************
 11475 ;; Defined at:
 11476 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;  divisor         2    0[COMMON] unsigned int 
 11479 ;;  dividend        2    2[COMMON] unsigned int 
 11480 ;; Auto vars:     Size  Location     Type
 11481 ;;  quotient        2    4[COMMON] unsigned int 
 11482 ;;  counter         1    6[COMMON] unsigned char 
 11483 ;; Return value:  Size  Location     Type
 11484 ;;                  2    0[COMMON] unsigned int 
 11485 ;; Registers used:
 11486 ;;		wreg, status,2, status,0
 11487 ;; Tracked objects:
 11488 ;;		On entry : 1F/0
 11489 ;;		On exit  : 1F/0
 11490 ;;		Unchanged: 1F/0
 11491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11492 ;;      Params:         4       0       0       0       0       0       0       0
 11493 ;;      Locals:         3       0       0       0       0       0       0       0
 11494 ;;      Temps:          0       0       0       0       0       0       0       0
 11495 ;;      Totals:         7       0       0       0       0       0       0       0
 11496 ;;Total ram usage:        7 bytes
 11497 ;; Hardware stack levels used:    1
 11498 ;; This function calls:
 11499 ;;		Nothing
 11500 ;; This function is called by:
 11501 ;;		_interrrupt_bldc
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function ___lwdiv
 11507  0540                     ___lwdiv:	
 11508                           
 11509                           ;incstack = 0
 11510                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11511  0540  01F4               	clrf	___lwdiv@quotient
 11512  0541  01F5               	clrf	___lwdiv@quotient+1
 11513  0542  0870               	movf	___lwdiv@divisor,w
 11514  0543  0471               	iorwf	___lwdiv@divisor+1,w
 11515  0544  1903               	btfsc	3,2
 11516  0545  2D60               	goto	i1l7501
 11517  0546  01F6               	clrf	___lwdiv@counter
 11518  0547                     L52:	
 11519  0547  0AF6               	incf	___lwdiv@counter,f
 11520  0548  1BF1               	btfsc	___lwdiv@divisor+1,7
 11521  0549  2D4D               	goto	i1l7489
 11522  054A  35F0               	lslf	___lwdiv@divisor,f
 11523  054B  0DF1               	rlf	___lwdiv@divisor+1,f
 11524  054C  2D47               	goto	L52
 11525  054D                     i1l7489:	
 11526  054D  35F4               	lslf	___lwdiv@quotient,f
 11527  054E  0DF5               	rlf	___lwdiv@quotient+1,f
 11528  054F  0871               	movf	___lwdiv@divisor+1,w
 11529  0550  0273               	subwf	___lwdiv@dividend+1,w
 11530  0551  1D03               	skipz
 11531  0552  2D55               	goto	u487_25
 11532  0553  0870               	movf	___lwdiv@divisor,w
 11533  0554  0272               	subwf	___lwdiv@dividend,w
 11534  0555                     u487_25:	
 11535  0555  1C03               	skipc
 11536  0556  2D5C               	goto	i1l7497
 11537  0557  0870               	movf	___lwdiv@divisor,w
 11538  0558  02F2               	subwf	___lwdiv@dividend,f
 11539  0559  0871               	movf	___lwdiv@divisor+1,w
 11540  055A  3BF3               	subwfb	___lwdiv@dividend+1,f
 11541  055B  1474               	bsf	___lwdiv@quotient,0
 11542  055C                     i1l7497:	
 11543  055C  36F1               	lsrf	___lwdiv@divisor+1,f
 11544  055D  0CF0               	rrf	___lwdiv@divisor,f
 11545  055E  0BF6               	decfsz	___lwdiv@counter,f
 11546  055F  2D4D               	goto	i1l7489
 11547  0560                     i1l7501:	
 11548  0560  0875               	movf	___lwdiv@quotient+1,w
 11549  0561  00F1               	movwf	?___lwdiv+1
 11550  0562  0874               	movf	___lwdiv@quotient,w
 11551  0563  00F0               	movwf	?___lwdiv
 11552  0564  0008               	return
 11553  0565                     __end_of___lwdiv:	
 11554                           
 11555                           	psect	swtext1
 11556  0729                     __pswtext1:	
 11557  0729                     S10085:	
 11558  0729  3180  287F         	ljmp	l4797
 11559  072B  3180  2881         	ljmp	l4799
 11560  072D  3180  2884         	ljmp	l4801
 11561  072F  3180  2886         	ljmp	l4803
 11562  0731  3180  2888         	ljmp	l4805
 11563  0733  3180  288A         	ljmp	l4807
 11564  0735  3180  288A         	ljmp	l4807
 11565  0737  3180  288A         	ljmp	l4807
 11566  0739  3180  288A         	ljmp	l4807
 11567  073B  3180  288A         	ljmp	l4807
 11568                           
 11569                           	psect	text19
 11570  0565                     __ptext19:	
 11571 ;; *************** function _PWMReadDC *****************
 11572 ;; Defined at:
 11573 ;;		line 361 in file "../pwm.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;		None
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;		None
 11578 ;; Return value:  Size  Location     Type
 11579 ;;                  1    wreg      unsigned char 
 11580 ;; Registers used:
 11581 ;;		wreg, status,2, status,0, pclath, cstack
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/1
 11584 ;;		On exit  : 1C/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11587 ;;      Params:         0       0       0       0       0       0       0       0
 11588 ;;      Locals:         0       0       0       0       0       0       0       0
 11589 ;;      Temps:          0       0       0       0       0       0       0       0
 11590 ;;      Totals:         0       0       0       0       0       0       0       0
 11591 ;;Total ram usage:        0 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    4
 11594 ;; This function calls:
 11595 ;;		___ltdiv
 11596 ;;		___tmul
 11597 ;; This function is called by:
 11598 ;;		_main
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           
 11603                           ;psect for function _PWMReadDC
 11604  0565                     _PWMReadDC:	
 11605                           
 11606                           ;pwm.c: 366: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
 11607                           
 11608                           ;incstack = 0
 11609                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
 11610  0565  0022               	movlb	2	; select bank2
 11611  0566  0831               	movf	_ui16_PWM_Freq_In^(0+256),w
 11612  0567  0020               	movlb	0	; select bank0
 11613  0568  00AD               	movwf	___ltdiv@divisor
 11614  0569  0022               	movlb	2	; select bank2
 11615  056A  0832               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
 11616  056B  0020               	movlb	0	; select bank0
 11617  056C  00AE               	movwf	___ltdiv@divisor+1
 11618  056D  01AF               	clrf	___ltdiv@divisor+2
 11619  056E  0022               	movlb	2	; select bank2
 11620  056F  085E               	movf	_ui16_Duty_Cycle_In^(0+256),w
 11621  0570  0020               	movlb	0	; select bank0
 11622  0571  00A4               	movwf	___tmul@multiplier
 11623  0572  0022               	movlb	2	; select bank2
 11624  0573  085F               	movf	(_ui16_Duty_Cycle_In+1)^(0+256),w
 11625  0574  0020               	movlb	0	; select bank0
 11626  0575  00A5               	movwf	___tmul@multiplier+1
 11627  0576  30C8               	movlw	200
 11628  0577  01A6               	clrf	___tmul@multiplier+2
 11629  0578  00A7               	movwf	___tmul@multiplicand
 11630  0579  01A8               	clrf	___tmul@multiplicand+1
 11631  057A  01A9               	clrf	___tmul@multiplicand+2
 11632  057B  25D9  3185         	fcall	___tmul
 11633  057D  0824               	movf	?___tmul,w
 11634  057E  00B0               	movwf	___ltdiv@dividend
 11635  057F  0825               	movf	?___tmul+1,w
 11636  0580  00B1               	movwf	___ltdiv@dividend+1
 11637  0581  0826               	movf	?___tmul+2,w
 11638  0582  00B2               	movwf	___ltdiv@dividend+2
 11639  0583  25A7  3185         	fcall	___ltdiv
 11640  0585  082D               	movf	?___ltdiv,w
 11641  0586  0021               	movlb	1	; select bank1
 11642  0587  00D0               	movwf	_ui8_PWMinDC_sav^(0+128)
 11643                           
 11644                           ;pwm.c: 368: if( ui8_PWMinDC_sav == 0 )
 11645  0588  0850               	movf	_ui8_PWMinDC_sav^(0+128),w
 11646  0589  1D03               	btfss	3,2
 11647  058A  2D93               	goto	l9089
 11648  058B  3005               	movlw	5
 11649                           
 11650                           ;pwm.c: 370: {;pwm.c: 374: ui8_PWMin_failCnt++;
 11651  058C  0ACF               	incf	_ui8_PWMin_failCnt^(0+128),f
 11652                           
 11653                           ;pwm.c: 376: if( ui8_PWMin_failCnt >= 5 )
 11654  058D  024F               	subwf	_ui8_PWMin_failCnt^(0+128),w
 11655  058E  1C03               	skipc
 11656  058F  2D99               	goto	l9095
 11657                           
 11658                           ;pwm.c: 378: {;pwm.c: 380: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
 11659  0590  0850               	movf	_ui8_PWMinDC_sav^(0+128),w
 11660  0591  00D1               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+128)
 11661  0592  2D99               	goto	l9095
 11662  0593                     l9089:	
 11663                           
 11664                           ;pwm.c: 391: else;pwm.c: 392: {;pwm.c: 396: ui8_PWMin_failCnt = 0;
 11665  0593  01CF               	clrf	_ui8_PWMin_failCnt^(0+128)
 11666                           
 11667                           ;pwm.c: 399: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
 11668  0594  0850               	movf	_ui8_PWMinDC_sav^(0+128),w
 11669  0595  00D1               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+128)
 11670                           
 11671                           ;pwm.c: 401: ui16_Duty_Cycle_In = 0;
 11672  0596  0022               	movlb	2	; select bank2
 11673  0597  01DE               	clrf	_ui16_Duty_Cycle_In^(0+256)
 11674  0598  01DF               	clrf	(_ui16_Duty_Cycle_In+1)^(0+256)
 11675  0599                     l9095:	
 11676                           
 11677                           ;pwm.c: 403: };pwm.c: 408: if(ui8_Duty_Cycle_In_Ratio == 0)
 11678  0599  0021               	movlb	1	; select bank1
 11679  059A  0851               	movf	_ui8_Duty_Cycle_In_Ratio^(0+128),w
 11680  059B  1D03               	btfss	3,2
 11681  059C  2DA4               	goto	l9109
 11682                           
 11683                           ;pwm.c: 409: {;pwm.c: 410: if(RA4 == 1)
 11684  059D  0020               	movlb	0	; select bank0
 11685  059E  1E0C               	btfss	12,4	;volatile
 11686  059F  2DA2               	goto	l9105
 11687                           
 11688                           ;pwm.c: 411: {;pwm.c: 412: ui16_PWM_Freq_In = 40000;
 11689  05A0  25F6               	fcall	PL68	;call to abstracted procedure
 11690                           
 11691                           ;pwm.c: 413: return 20;
 11692  05A1  3414               	retlw	20
 11693  05A2                     l9105:	
 11694                           
 11695                           ;pwm.c: 415: else;pwm.c: 416: {;pwm.c: 417: ui16_PWM_Freq_In = 40000;
 11696  05A2  25F6               	fcall	PL68	;call to abstracted procedure
 11697                           
 11698                           ;pwm.c: 418: return 200;
 11699  05A3  34C8               	retlw	200
 11700  05A4                     l9109:	
 11701                           
 11702                           ;pwm.c: 421: else;pwm.c: 422: {;pwm.c: 423: return ( 200 - ui8_Duty_Cycle_In_Ratio );
 11703  05A4  0851               	movf	_ui8_Duty_Cycle_In_Ratio^(0+128),w
 11704  05A5  3CC8               	sublw	200
 11705  05A6  0008               	return
 11706  05A7                     __end_of_PWMReadDC:	
 11707  05A7                     __ptext21:	
 11708 ;; *************** function ___ltdiv *****************
 11709 ;; Defined at:
 11710 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltdiv.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;  divisor         3   13[BANK0 ] unsigned um
 11713 ;;  dividend        3   16[BANK0 ] unsigned um
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;  quotient        3   19[BANK0 ] unsigned um
 11716 ;;  counter         1   22[BANK0 ] unsigned char 
 11717 ;; Return value:  Size  Location     Type
 11718 ;;                  3   13[BANK0 ] unsigned um
 11719 ;; Registers used:
 11720 ;;		wreg, status,2, status,0
 11721 ;; Tracked objects:
 11722 ;;		On entry : 1F/0
 11723 ;;		On exit  : 1F/0
 11724 ;;		Unchanged: 0/0
 11725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11726 ;;      Params:         0       6       0       0       0       0       0       0
 11727 ;;      Locals:         0       4       0       0       0       0       0       0
 11728 ;;      Temps:          0       0       0       0       0       0       0       0
 11729 ;;      Totals:         0      10       0       0       0       0       0       0
 11730 ;;Total ram usage:       10 bytes
 11731 ;; Hardware stack levels used:    1
 11732 ;; Hardware stack levels required when called:    3
 11733 ;; This function calls:
 11734 ;;		Nothing
 11735 ;; This function is called by:
 11736 ;;		_PWMReadDC
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           
 11741                           ;psect for function ___ltdiv
 11742  05A7                     ___ltdiv:	
 11743                           
 11744                           ;incstack = 0
 11745                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
 11746  05A7  01B3               	clrf	___ltdiv@quotient
 11747  05A8  01B4               	clrf	___ltdiv@quotient+1
 11748  05A9  01B5               	clrf	___ltdiv@quotient+2
 11749  05AA  082F               	movf	___ltdiv@divisor+2,w
 11750  05AB  042E               	iorwf	___ltdiv@divisor+1,w
 11751  05AC  042D               	iorwf	___ltdiv@divisor,w
 11752  05AD  1903               	skipnz
 11753  05AE  2DD2               	goto	l8811
 11754  05AF  01B6               	clrf	___ltdiv@counter
 11755  05B0                     L12:	
 11756  05B0  0AB6               	incf	___ltdiv@counter,f
 11757  05B1  1BAF               	btfsc	___ltdiv@divisor+2,7
 11758  05B2  2DB7               	goto	l8799
 11759  05B3  35AD               	lslf	___ltdiv@divisor,f
 11760  05B4  0DAE               	rlf	___ltdiv@divisor+1,f
 11761  05B5  0DAF               	rlf	___ltdiv@divisor+2,f
 11762  05B6  2DB0               	goto	L12
 11763  05B7                     l8799:	
 11764  05B7  35B3               	lslf	___ltdiv@quotient,f
 11765  05B8  0DB4               	rlf	___ltdiv@quotient+1,f
 11766  05B9  0DB5               	rlf	___ltdiv@quotient+2,f
 11767  05BA  082F               	movf	___ltdiv@divisor+2,w
 11768  05BB  0232               	subwf	___ltdiv@dividend+2,w
 11769  05BC  1D03               	skipz
 11770  05BD  2DC4               	goto	u6685
 11771  05BE  082E               	movf	___ltdiv@divisor+1,w
 11772  05BF  0231               	subwf	___ltdiv@dividend+1,w
 11773  05C0  1D03               	skipz
 11774  05C1  2DC4               	goto	u6685
 11775  05C2  082D               	movf	___ltdiv@divisor,w
 11776  05C3  0230               	subwf	___ltdiv@dividend,w
 11777  05C4                     u6685:	
 11778  05C4  1C03               	skipc
 11779  05C5  2DCD               	goto	l8807
 11780  05C6  082D               	movf	___ltdiv@divisor,w
 11781  05C7  02B0               	subwf	___ltdiv@dividend,f
 11782  05C8  082E               	movf	___ltdiv@divisor+1,w
 11783  05C9  3BB1               	subwfb	___ltdiv@dividend+1,f
 11784  05CA  082F               	movf	___ltdiv@divisor+2,w
 11785  05CB  3BB2               	subwfb	___ltdiv@dividend+2,f
 11786  05CC  1433               	bsf	___ltdiv@quotient,0
 11787  05CD                     l8807:	
 11788  05CD  36AF               	lsrf	___ltdiv@divisor+2,f
 11789  05CE  0CAE               	rrf	___ltdiv@divisor+1,f
 11790  05CF  0CAD               	rrf	___ltdiv@divisor,f
 11791  05D0  0BB6               	decfsz	___ltdiv@counter,f
 11792  05D1  2DB7               	goto	l8799
 11793  05D2                     l8811:	
 11794  05D2  0833               	movf	___ltdiv@quotient,w
 11795  05D3  00AD               	movwf	?___ltdiv
 11796  05D4  0834               	movf	___ltdiv@quotient+1,w
 11797  05D5  00AE               	movwf	?___ltdiv+1
 11798  05D6  0835               	movf	___ltdiv@quotient+2,w
 11799  05D7  00AF               	movwf	?___ltdiv+2
 11800  05D8  0008               	return
 11801  05D9                     __end_of___ltdiv:	
 11802  05D9                     __ptext20:	
 11803 ;; *************** function ___tmul *****************
 11804 ;; Defined at:
 11805 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul24.c"
 11806 ;; Parameters:    Size  Location     Type
 11807 ;;  multiplier      3    4[BANK0 ] unsigned um
 11808 ;;  multiplicand    3    7[BANK0 ] unsigned um
 11809 ;; Auto vars:     Size  Location     Type
 11810 ;;  product         3   10[BANK0 ] unsigned um
 11811 ;; Return value:  Size  Location     Type
 11812 ;;                  3    4[BANK0 ] unsigned um
 11813 ;; Registers used:
 11814 ;;		wreg, status,2, status,0
 11815 ;; Tracked objects:
 11816 ;;		On entry : 1F/0
 11817 ;;		On exit  : 1F/0
 11818 ;;		Unchanged: 0/0
 11819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11820 ;;      Params:         0       6       0       0       0       0       0       0
 11821 ;;      Locals:         0       3       0       0       0       0       0       0
 11822 ;;      Temps:          0       0       0       0       0       0       0       0
 11823 ;;      Totals:         0       9       0       0       0       0       0       0
 11824 ;;Total ram usage:        9 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    3
 11827 ;; This function calls:
 11828 ;;		Nothing
 11829 ;; This function is called by:
 11830 ;;		_PWMReadDC
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           
 11835                           ;psect for function ___tmul
 11836  05D9                     ___tmul:	
 11837                           
 11838                           ;incstack = 0
 11839                           ; Regs used in ___tmul: [wreg+status,2+status,0]
 11840  05D9  01AA               	clrf	___tmul@product
 11841  05DA  01AB               	clrf	___tmul@product+1
 11842  05DB  01AC               	clrf	___tmul@product+2
 11843  05DC                     l1839:	
 11844  05DC  1C24               	btfss	___tmul@multiplier,0
 11845  05DD  2DE4               	goto	l5507
 11846  05DE  0827               	movf	___tmul@multiplicand,w
 11847  05DF  07AA               	addwf	___tmul@product,f
 11848  05E0  0828               	movf	___tmul@multiplicand+1,w
 11849  05E1  3DAB               	addwfc	___tmul@product+1,f
 11850  05E2  0829               	movf	___tmul@multiplicand+2,w
 11851  05E3  3DAC               	addwfc	___tmul@product+2,f
 11852  05E4                     l5507:	
 11853  05E4  35A7               	lslf	___tmul@multiplicand,f
 11854  05E5  0DA8               	rlf	___tmul@multiplicand+1,f
 11855  05E6  0DA9               	rlf	___tmul@multiplicand+2,f
 11856  05E7  36A6               	lsrf	___tmul@multiplier+2,f
 11857  05E8  0CA5               	rrf	___tmul@multiplier+1,f
 11858  05E9  0CA4               	rrf	___tmul@multiplier,f
 11859  05EA  0826               	movf	___tmul@multiplier+2,w
 11860  05EB  0425               	iorwf	___tmul@multiplier+1,w
 11861  05EC  0424               	iorwf	___tmul@multiplier,w
 11862  05ED  1D03               	skipz
 11863  05EE  2DDC               	goto	l1839
 11864  05EF  082A               	movf	___tmul@product,w
 11865  05F0  00A4               	movwf	?___tmul
 11866  05F1  082B               	movf	___tmul@product+1,w
 11867  05F2  00A5               	movwf	?___tmul+1
 11868  05F3  082C               	movf	___tmul@product+2,w
 11869  05F4  00A6               	movwf	?___tmul+2
 11870  05F5  0008               	return
 11871  05F6                     __end_of___tmul:	
 11872  05F6                     PL68:	
 11873  05F6  3040               	movlw	64
 11874  05F7  0022               	movlb	2	; select bank2
 11875  05F8  00B1               	movwf	_ui16_PWM_Freq_In^(0+256)
 11876  05F9  309C               	movlw	156
 11877  05FA  00B2               	movwf	(_ui16_PWM_Freq_In^(0+256)+1)
 11878  05FB  0008               	return
 11879  05FC                     __end_ofPL68:	
 11880                           
 11881                           	psect	text25
 11882  06EA                     __ptext25:	
 11883 ;; *************** function _FILTER_Temp *****************
 11884 ;; Defined at:
 11885 ;;		line 400 in file "../adc.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;		None
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;		None
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      void 
 11892 ;; Registers used:
 11893 ;;		wreg, status,2, status,0
 11894 ;; Tracked objects:
 11895 ;;		On entry : 1F/2
 11896 ;;		On exit  : 1F/2
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11899 ;;      Params:         0       0       0       0       0       0       0       0
 11900 ;;      Locals:         0       0       0       0       0       0       0       0
 11901 ;;      Temps:          0       2       0       0       0       0       0       0
 11902 ;;      Totals:         0       2       0       0       0       0       0       0
 11903 ;;Total ram usage:        2 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    3
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_Get_Analog_Value
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           
 11914                           ;psect for function _FILTER_Temp
 11915  06EA                     _FILTER_Temp:	
 11916  06EA                     l5119:	
 11917                           ;incstack = 0
 11918                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
 11919                           
 11920                           
 11921                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
 11922  06EA  0855               	movf	_ui16_NTC_Temp_bldc^(0+256),w
 11923  06EB  07C7               	addwf	_filterTempNTC^(0+256),f
 11924  06EC  0856               	movf	(_ui16_NTC_Temp_bldc+1)^(0+256),w
 11925  06ED  3DC8               	addwfc	(_filterTempNTC+1)^(0+256),f
 11926                           
 11927                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
 11928  06EE  0848               	movf	(_filterTempNTC+1)^(0+256),w
 11929  06EF  0020               	movlb	0	; select bank0
 11930  06F0  00A5               	movwf	??_FILTER_Temp+1
 11931  06F1  0022               	movlb	2	; select bank2
 11932  06F2  0847               	movf	_filterTempNTC^(0+256),w
 11933  06F3  0020               	movlb	0	; select bank0
 11934  06F4  00A4               	movwf	??_FILTER_Temp
 11935  06F5  3006               	movlw	6
 11936  06F6                     u2215:	
 11937  06F6  36A5               	lsrf	??_FILTER_Temp+1,f
 11938  06F7  0CA4               	rrf	??_FILTER_Temp,f
 11939  06F8  0B89               	decfsz	9,f
 11940  06F9  2EF6               	goto	u2215
 11941  06FA  0824               	movf	??_FILTER_Temp,w
 11942  06FB  0022               	movlb	2	; select bank2
 11943  06FC  00CD               	movwf	_ui16_NTC_Temp_bldc_mean^(0+256)
 11944  06FD  0020               	movlb	0	; select bank0
 11945  06FE  0825               	movf	??_FILTER_Temp+1,w
 11946  06FF  0022               	movlb	2	; select bank2
 11947  0700  00CE               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256)
 11948                           
 11949                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
 11950  0701  084D               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
 11951  0702  02C7               	subwf	_filterTempNTC^(0+256),f
 11952  0703  084E               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
 11953  0704  3BC8               	subwfb	(_filterTempNTC+1)^(0+256),f
 11954                           
 11955                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
 11956  0705  0853               	movf	_ui16_Temp_cal^(0+256),w
 11957  0706  074D               	addwf	_ui16_NTC_Temp_bldc_mean^(0+256),w
 11958  0707  00C5               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+256)
 11959  0708  0854               	movf	(_ui16_Temp_cal+1)^(0+256),w
 11960  0709  3D4E               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
 11961  070A  00C6               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+256)
 11962  070B  0008               	return
 11963  070C                     __end_of_FILTER_Temp:	
 11964                           
 11965                           	psect	text26
 11966  070C                     __ptext26:	
 11967 ;; *************** function _FILTER_IPhase *****************
 11968 ;; Defined at:
 11969 ;;		line 357 in file "../adc.c"
 11970 ;; Parameters:    Size  Location     Type
 11971 ;;		None
 11972 ;; Auto vars:     Size  Location     Type
 11973 ;;		None
 11974 ;; Return value:  Size  Location     Type
 11975 ;;                  1    wreg      void 
 11976 ;; Registers used:
 11977 ;;		wreg, status,2, status,0
 11978 ;; Tracked objects:
 11979 ;;		On entry : 1D/0
 11980 ;;		On exit  : 1F/2
 11981 ;;		Unchanged: 0/0
 11982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11983 ;;      Params:         0       0       0       0       0       0       0       0
 11984 ;;      Locals:         0       0       0       0       0       0       0       0
 11985 ;;      Temps:          0       2       0       0       0       0       0       0
 11986 ;;      Totals:         0       2       0       0       0       0       0       0
 11987 ;;Total ram usage:        2 bytes
 11988 ;; Hardware stack levels used:    1
 11989 ;; Hardware stack levels required when called:    3
 11990 ;; This function calls:
 11991 ;;		Nothing
 11992 ;; This function is called by:
 11993 ;;		_Get_Analog_Value
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           
 11998                           ;psect for function _FILTER_IPhase
 11999  070C                     _FILTER_IPhase:	
 12000                           
 12001                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
 12002                           
 12003                           ;incstack = 0
 12004                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
 12005  070C  0022               	movlb	2	; select bank2
 12006  070D  0857               	movf	_ui16_IPhase1_bldc^(0+256),w	;volatile
 12007  070E  07C9               	addwf	_filter3^(0+256),f
 12008  070F  0858               	movf	(_ui16_IPhase1_bldc+1)^(0+256),w	;volatile
 12009  0710  3DCA               	addwfc	(_filter3+1)^(0+256),f
 12010                           
 12011                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
 12012  0711  084A               	movf	(_filter3+1)^(0+256),w
 12013  0712  0020               	movlb	0	; select bank0
 12014  0713  00A5               	movwf	??_FILTER_IPhase+1
 12015  0714  0022               	movlb	2	; select bank2
 12016  0715  0849               	movf	_filter3^(0+256),w
 12017  0716  0020               	movlb	0	; select bank0
 12018  0717  00A4               	movwf	??_FILTER_IPhase
 12019  0718  3006               	movlw	6
 12020  0719                     u2205:	
 12021  0719  36A5               	lsrf	??_FILTER_IPhase+1,f
 12022  071A  0CA4               	rrf	??_FILTER_IPhase,f
 12023  071B  0B89               	decfsz	9,f
 12024  071C  2F19               	goto	u2205
 12025  071D  0824               	movf	??_FILTER_IPhase,w
 12026  071E  0022               	movlb	2	; select bank2
 12027  071F  00CF               	movwf	_ui16_fir_IPhase_mean^(0+256)
 12028  0720  0020               	movlb	0	; select bank0
 12029  0721  0825               	movf	??_FILTER_IPhase+1,w
 12030  0722  0022               	movlb	2	; select bank2
 12031  0723  00D0               	movwf	(_ui16_fir_IPhase_mean+1)^(0+256)
 12032                           
 12033                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
 12034  0724  084F               	movf	_ui16_fir_IPhase_mean^(0+256),w
 12035  0725  02C9               	subwf	_filter3^(0+256),f
 12036  0726  0850               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
 12037  0727  3BCA               	subwfb	(_filter3+1)^(0+256),f
 12038  0728  0008               	return
 12039  0729                     __end_of_FILTER_IPhase:	
 12040                           
 12041                           	psect	swtext2
 12042  0776                     __pswtext2:	
 12043  0776                     S10087:	
 12044  0776  3189  29B9         	ljmp	l9183
 12045  0778  3189  29B9         	ljmp	l9183
 12046  077A  3189  29B9         	ljmp	l9183
 12047  077C  3189  29B9         	ljmp	l9183
 12048  077E  3189  29B9         	ljmp	l9183
 12049  0780  3189  29B9         	ljmp	l9183
 12050  0782  3189  29B9         	ljmp	l9183
 12051  0784  3189  29B9         	ljmp	l9183
 12052                           
 12053                           	psect	text30
 12054  067E                     __ptext30:	
 12055 ;; *************** function ___aldiv *****************
 12056 ;; Defined at:
 12057 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 12058 ;; Parameters:    Size  Location     Type
 12059 ;;  divisor         4    4[BANK0 ] long 
 12060 ;;  dividend        4    8[BANK0 ] long 
 12061 ;; Auto vars:     Size  Location     Type
 12062 ;;  quotient        4   14[BANK0 ] long 
 12063 ;;  sign            1   13[BANK0 ] unsigned char 
 12064 ;;  counter         1   12[BANK0 ] unsigned char 
 12065 ;; Return value:  Size  Location     Type
 12066 ;;                  4    4[BANK0 ] long 
 12067 ;; Registers used:
 12068 ;;		wreg, status,2, status,0
 12069 ;; Tracked objects:
 12070 ;;		On entry : 1F/0
 12071 ;;		On exit  : 1F/0
 12072 ;;		Unchanged: 0/0
 12073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12074 ;;      Params:         0       8       0       0       0       0       0       0
 12075 ;;      Locals:         0       6       0       0       0       0       0       0
 12076 ;;      Temps:          0       0       0       0       0       0       0       0
 12077 ;;      Totals:         0      14       0       0       0       0       0       0
 12078 ;;Total ram usage:       14 bytes
 12079 ;; Hardware stack levels used:    1
 12080 ;; Hardware stack levels required when called:    3
 12081 ;; This function calls:
 12082 ;;		Nothing
 12083 ;; This function is called by:
 12084 ;;		_BVH2_Appl_Layer
 12085 ;; This function uses a non-reentrant model
 12086 ;;
 12087                           
 12088                           
 12089                           ;psect for function ___aldiv
 12090  067E                     ___aldiv:	
 12091                           
 12092                           ;incstack = 0
 12093                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12094  067E  01AD               	clrf	___aldiv@sign
 12095  067F  1FA7               	btfss	___aldiv@divisor+3,7
 12096  0680  2E8E               	goto	l1905
 12097  0681  09A4               	comf	___aldiv@divisor,f
 12098  0682  09A5               	comf	___aldiv@divisor+1,f
 12099  0683  09A6               	comf	___aldiv@divisor+2,f
 12100  0684  09A7               	comf	___aldiv@divisor+3,f
 12101  0685  0AA4               	incf	___aldiv@divisor,f
 12102  0686  1903               	skipnz
 12103  0687  0AA5               	incf	___aldiv@divisor+1,f
 12104  0688  1903               	skipnz
 12105  0689  0AA6               	incf	___aldiv@divisor+2,f
 12106  068A  1903               	skipnz
 12107  068B  0AA7               	incf	___aldiv@divisor+3,f
 12108  068C  01AD               	clrf	___aldiv@sign
 12109  068D  0AAD               	incf	___aldiv@sign,f
 12110  068E                     l1905:	
 12111  068E  1FAB               	btfss	___aldiv@dividend+3,7
 12112  068F  2E9D               	goto	l7423
 12113  0690  09A8               	comf	___aldiv@dividend,f
 12114  0691  09A9               	comf	___aldiv@dividend+1,f
 12115  0692  09AA               	comf	___aldiv@dividend+2,f
 12116  0693  09AB               	comf	___aldiv@dividend+3,f
 12117  0694  0AA8               	incf	___aldiv@dividend,f
 12118  0695  1903               	skipnz
 12119  0696  0AA9               	incf	___aldiv@dividend+1,f
 12120  0697  1903               	skipnz
 12121  0698  0AAA               	incf	___aldiv@dividend+2,f
 12122  0699  1903               	skipnz
 12123  069A  0AAB               	incf	___aldiv@dividend+3,f
 12124  069B  3001               	movlw	1
 12125  069C  06AD               	xorwf	___aldiv@sign,f
 12126  069D                     l7423:	
 12127  069D  01AE               	clrf	___aldiv@quotient
 12128  069E  01AF               	clrf	___aldiv@quotient+1
 12129  069F  01B0               	clrf	___aldiv@quotient+2
 12130  06A0  01B1               	clrf	___aldiv@quotient+3
 12131  06A1  0827               	movf	___aldiv@divisor+3,w
 12132  06A2  0426               	iorwf	___aldiv@divisor+2,w
 12133  06A3  0425               	iorwf	___aldiv@divisor+1,w
 12134  06A4  0424               	iorwf	___aldiv@divisor,w
 12135  06A5  1903               	skipnz
 12136  06A6  2ED3               	goto	l7445
 12137  06A7  01AC               	clrf	___aldiv@counter
 12138  06A8                     L30:	
 12139  06A8  0AAC               	incf	___aldiv@counter,f
 12140  06A9  1BA7               	btfsc	___aldiv@divisor+3,7
 12141  06AA  2EB0               	goto	l7433
 12142  06AB  35A4               	lslf	___aldiv@divisor,f
 12143  06AC  0DA5               	rlf	___aldiv@divisor+1,f
 12144  06AD  0DA6               	rlf	___aldiv@divisor+2,f
 12145  06AE  0DA7               	rlf	___aldiv@divisor+3,f
 12146  06AF  2EA8               	goto	L30
 12147  06B0                     l7433:	
 12148  06B0  35AE               	lslf	___aldiv@quotient,f
 12149  06B1  0DAF               	rlf	___aldiv@quotient+1,f
 12150  06B2  0DB0               	rlf	___aldiv@quotient+2,f
 12151  06B3  0DB1               	rlf	___aldiv@quotient+3,f
 12152  06B4  0827               	movf	___aldiv@divisor+3,w
 12153  06B5  022B               	subwf	___aldiv@dividend+3,w
 12154  06B6  1D03               	skipz
 12155  06B7  2EC2               	goto	u4785
 12156  06B8  0826               	movf	___aldiv@divisor+2,w
 12157  06B9  022A               	subwf	___aldiv@dividend+2,w
 12158  06BA  1D03               	skipz
 12159  06BB  2EC2               	goto	u4785
 12160  06BC  0825               	movf	___aldiv@divisor+1,w
 12161  06BD  0229               	subwf	___aldiv@dividend+1,w
 12162  06BE  1D03               	skipz
 12163  06BF  2EC2               	goto	u4785
 12164  06C0  0824               	movf	___aldiv@divisor,w
 12165  06C1  0228               	subwf	___aldiv@dividend,w
 12166  06C2                     u4785:	
 12167  06C2  1C03               	skipc
 12168  06C3  2ECD               	goto	l7441
 12169  06C4  0824               	movf	___aldiv@divisor,w
 12170  06C5  02A8               	subwf	___aldiv@dividend,f
 12171  06C6  0825               	movf	___aldiv@divisor+1,w
 12172  06C7  3BA9               	subwfb	___aldiv@dividend+1,f
 12173  06C8  0826               	movf	___aldiv@divisor+2,w
 12174  06C9  3BAA               	subwfb	___aldiv@dividend+2,f
 12175  06CA  0827               	movf	___aldiv@divisor+3,w
 12176  06CB  3BAB               	subwfb	___aldiv@dividend+3,f
 12177  06CC  142E               	bsf	___aldiv@quotient,0
 12178  06CD                     l7441:	
 12179  06CD  36A7               	lsrf	___aldiv@divisor+3,f
 12180  06CE  0CA6               	rrf	___aldiv@divisor+2,f
 12181  06CF  0CA5               	rrf	___aldiv@divisor+1,f
 12182  06D0  0CA4               	rrf	___aldiv@divisor,f
 12183  06D1  0BAC               	decfsz	___aldiv@counter,f
 12184  06D2  2EB0               	goto	l7433
 12185  06D3                     l7445:	
 12186  06D3  082D               	movf	___aldiv@sign,w
 12187  06D4  1903               	btfsc	3,2
 12188  06D5  2EE1               	goto	l7449
 12189  06D6  09AE               	comf	___aldiv@quotient,f
 12190  06D7  09AF               	comf	___aldiv@quotient+1,f
 12191  06D8  09B0               	comf	___aldiv@quotient+2,f
 12192  06D9  09B1               	comf	___aldiv@quotient+3,f
 12193  06DA  0AAE               	incf	___aldiv@quotient,f
 12194  06DB  1903               	skipnz
 12195  06DC  0AAF               	incf	___aldiv@quotient+1,f
 12196  06DD  1903               	skipnz
 12197  06DE  0AB0               	incf	___aldiv@quotient+2,f
 12198  06DF  1903               	skipnz
 12199  06E0  0AB1               	incf	___aldiv@quotient+3,f
 12200  06E1                     l7449:	
 12201  06E1  0831               	movf	___aldiv@quotient+3,w
 12202  06E2  00A7               	movwf	?___aldiv+3
 12203  06E3  0830               	movf	___aldiv@quotient+2,w
 12204  06E4  00A6               	movwf	?___aldiv+2
 12205  06E5  082F               	movf	___aldiv@quotient+1,w
 12206  06E6  00A5               	movwf	?___aldiv+1
 12207  06E7  082E               	movf	___aldiv@quotient,w
 12208  06E8  00A4               	movwf	?___aldiv
 12209  06E9  0008               	return
 12210  06EA                     __end_of___aldiv:	
 12211                           
 12212                           	psect	text33
 12213  05FC                     __ptext33:	
 12214 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 12215 ;; Defined at:
 12216 ;;		line 1727 in file "../T_Link/BVH2_Appl_Layer.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;		None
 12219 ;; Auto vars:     Size  Location     Type
 12220 ;;		None
 12221 ;; Return value:  Size  Location     Type
 12222 ;;                  1    wreg      void 
 12223 ;; Registers used:
 12224 ;;		wreg, status,2, status,0
 12225 ;; Tracked objects:
 12226 ;;		On entry : 1F/1
 12227 ;;		On exit  : 1E/0
 12228 ;;		Unchanged: 0/0
 12229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12230 ;;      Params:         0       0       0       0       0       0       0       0
 12231 ;;      Locals:         0       0       0       0       0       0       0       0
 12232 ;;      Temps:          0       0       0       0       0       0       0       0
 12233 ;;      Totals:         0       0       0       0       0       0       0       0
 12234 ;;Total ram usage:        0 bytes
 12235 ;; Hardware stack levels used:    1
 12236 ;; Hardware stack levels required when called:    3
 12237 ;; This function calls:
 12238 ;;		Nothing
 12239 ;; This function is called by:
 12240 ;;		_BVH2_Appl_Layer
 12241 ;; This function uses a non-reentrant model
 12242 ;;
 12243                           
 12244                           
 12245                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 12246  05FC                     _Cb34_PWM_Detection_node_fcn1:	
 12247                           
 12248                           ;BVH2_Appl_Layer.c: 1729: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 12249                           
 12250                           ;incstack = 0
 12251                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 12252  05FC  0020               	movlb	0	; select bank0
 12253  05FD  084B               	movf	_Cb34_idPWM,w
 12254  05FE  30C8               	movlw	200
 12255  05FF  1903               	btfsc	3,2
 12256  0600  2E05               	goto	L33
 12257  0601  024B               	subwf	_Cb34_idPWM,w
 12258  0602  1C03               	skipc
 12259  0603  2E15               	goto	l7241
 12260                           
 12261                           ;BVH2_Appl_Layer.c: 1730: if (Cb34_idPWM > 199) {
 12262  0604  30C8               	movlw	200
 12263  0605                     L33:	
 12264  0605  024B               	subwf	_Cb34_idPWM,w
 12265  0606  1C03               	skipc
 12266  0607  0008               	return
 12267                           
 12268                           ;BVH2_Appl_Layer.c: 1732: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 12269  0608  0021               	movlb	1	; select bank1
 12270  0609  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12271  060A  39F0               	andlw	-16
 12272  060B  3807               	iorlw	7
 12273  060C  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12274                           
 12275                           ;BVH2_Appl_Layer.c: 1733: Cb34_odPumpOff = 0;
 12276  060D  01C4               	clrf	_Cb34_odPumpOff^(0+128)
 12277                           
 12278                           ;BVH2_Appl_Layer.c: 1734: Cb34_odFixedValueSel = 1;
 12279  060E  01C5               	clrf	_Cb34_odFixedValueSel^(0+128)
 12280  060F  0AC5               	incf	_Cb34_odFixedValueSel^(0+128),f
 12281                           
 12282                           ;BVH2_Appl_Layer.c: 1735: Cb34_odFixedLowValueSel = 0;
 12283  0610  01C6               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12284                           
 12285                           ;BVH2_Appl_Layer.c: 1736: Cb34_oPWM_SC_Alarm = 0;
 12286  0611  01C7               	clrf	_Cb34_oPWM_SC_Alarm^(0+128)
 12287                           
 12288                           ;BVH2_Appl_Layer.c: 1737: Cb34_oPWM_Alarm = 1;
 12289  0612  01C8               	clrf	_Cb34_oPWM_Alarm^(0+128)
 12290  0613  0AC8               	incf	_Cb34_oPWM_Alarm^(0+128),f
 12291                           
 12292                           ;BVH2_Appl_Layer.c: 1738: };BVH2_Appl_Layer.c: 1739: }
 12293  0614  0008               	return
 12294  0615                     l7241:	
 12295                           
 12296                           ;BVH2_Appl_Layer.c: 1740: else {;BVH2_Appl_Layer.c: 1743: if ((ui16_PWM_Freq_mat < 36000
      +                          ) || (ui16_PWM_Freq_mat > 44000)) {
 12297  0615  308C               	movlw	140
 12298  0616  0022               	movlb	2	; select bank2
 12299  0617  0234               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 12300  0618  30A0               	movlw	160
 12301  0619  1903               	skipnz
 12302  061A  0233               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 12303  061B  1C03               	skipc
 12304  061C  2E24               	goto	l7245
 12305  061D  30AB               	movlw	171
 12306  061E  0234               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 12307  061F  30E1               	movlw	225
 12308  0620  1903               	skipnz
 12309  0621  0233               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 12310  0622  1C03               	skipc
 12311  0623  2E3F               	goto	l7257
 12312  0624                     l7245:	
 12313                           
 12314                           ;BVH2_Appl_Layer.c: 1745: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 12315  0624  0021               	movlb	1	; select bank1
 12316  0625  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12317  0626  39F0               	andlw	-16
 12318  0627  3806               	iorlw	6
 12319  0628  2E2D               	goto	L32
 12320  0629                     l7259:	
 12321                           
 12322                           ;BVH2_Appl_Layer.c: 1755: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 12323  0629  0021               	movlb	1	; select bank1
 12324  062A  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12325  062B  39F0               	andlw	-16
 12326  062C  3803               	iorlw	3
 12327  062D                     L32:	
 12328  062D  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12329                           
 12330                           ;BVH2_Appl_Layer.c: 1746: Cb34_odPumpOff = 0;
 12331  062E  01C4               	clrf	_Cb34_odPumpOff^(0+128)
 12332                           
 12333                           ;BVH2_Appl_Layer.c: 1747: Cb34_odFixedValueSel = 1;
 12334  062F  01C5               	clrf	_Cb34_odFixedValueSel^(0+128)
 12335  0630  0AC5               	incf	_Cb34_odFixedValueSel^(0+128),f
 12336  0631  2E3A               	goto	l7251
 12337  0632                     l7273:	
 12338                           
 12339                           ;BVH2_Appl_Layer.c: 1766: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1767: (UInt8)8;
 12340  0632  0021               	movlb	1	; select bank1
 12341  0633  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12342  0634  39F0               	andlw	-16
 12343  0635  3808               	iorlw	8
 12344  0636  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12345                           
 12346                           ;BVH2_Appl_Layer.c: 1768: Cb34_odPumpOff = 1;
 12347  0637  01C4               	clrf	_Cb34_odPumpOff^(0+128)
 12348  0638  0AC4               	incf	_Cb34_odPumpOff^(0+128),f
 12349                           
 12350                           ;BVH2_Appl_Layer.c: 1769: Cb34_odFixedValueSel = 0;
 12351  0639  01C5               	clrf	_Cb34_odFixedValueSel^(0+128)
 12352  063A                     l7251:	
 12353                           
 12354                           ;BVH2_Appl_Layer.c: 1748: Cb34_odFixedLowValueSel = 0;
 12355  063A  01C6               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12356                           
 12357                           ;BVH2_Appl_Layer.c: 1749: Cb34_oPWM_SC_Alarm = 1;
 12358  063B  01C7               	clrf	_Cb34_oPWM_SC_Alarm^(0+128)
 12359  063C  0AC7               	incf	_Cb34_oPWM_SC_Alarm^(0+128),f
 12360  063D                     l7255:	
 12361                           
 12362                           ;BVH2_Appl_Layer.c: 1750: Cb34_oPWM_Alarm = 0;
 12363  063D  01C8               	clrf	_Cb34_oPWM_Alarm^(0+128)
 12364                           
 12365                           ;BVH2_Appl_Layer.c: 1751: }
 12366  063E  0008               	return
 12367  063F                     l7257:	
 12368                           
 12369                           ;BVH2_Appl_Layer.c: 1752: else {;BVH2_Appl_Layer.c: 1753: if (Cb34_idPWM <= 5) {
 12370  063F  3006               	movlw	6
 12371  0640  0020               	movlb	0	; select bank0
 12372  0641  024B               	subwf	_Cb34_idPWM,w
 12373  0642  1C03               	btfss	3,0
 12374  0643  2E29               	goto	l7259
 12375                           
 12376                           ;BVH2_Appl_Layer.c: 1762: else {;BVH2_Appl_Layer.c: 1763: if (Cb34_idPWM < 9) {
 12377  0644  3009               	movlw	9
 12378  0645  024B               	subwf	_Cb34_idPWM,w
 12379  0646  1C03               	btfss	3,0
 12380  0647  2E32               	goto	l7273
 12381                           
 12382                           ;BVH2_Appl_Layer.c: 1774: else {;BVH2_Appl_Layer.c: 1775: if (Cb34_idPWM > 191) {
 12383  0648  30C0               	movlw	192
 12384  0649  024B               	subwf	_Cb34_idPWM,w
 12385  064A  1C03               	skipc
 12386  064B  2E51               	goto	l7299
 12387                           
 12388                           ;BVH2_Appl_Layer.c: 1778: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1779: (UInt8)4;
 12389  064C  0021               	movlb	1	; select bank1
 12390  064D  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12391  064E  39F0               	andlw	-16
 12392  064F  3804               	iorlw	4
 12393  0650  2E2D               	goto	L32
 12394  0651                     l7299:	
 12395                           
 12396                           ;BVH2_Appl_Layer.c: 1786: else {;BVH2_Appl_Layer.c: 1787: if (Cb34_idPWM >= 23) {
 12397  0651  3017               	movlw	23
 12398  0652  024B               	subwf	_Cb34_idPWM,w
 12399  0653  1C03               	skipc
 12400  0654  2E5F               	goto	l7313
 12401                           
 12402                           ;BVH2_Appl_Layer.c: 1790: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1791: (UInt8)2;
 12403  0655  0021               	movlb	1	; select bank1
 12404  0656  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12405  0657  39F0               	andlw	-16
 12406  0658  3802               	iorlw	2
 12407  0659  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12408                           
 12409                           ;BVH2_Appl_Layer.c: 1792: Cb34_odPumpOff = 0;
 12410  065A  01C4               	clrf	_Cb34_odPumpOff^(0+128)
 12411                           
 12412                           ;BVH2_Appl_Layer.c: 1793: Cb34_odFixedLowValueSel = 0;
 12413  065B  01C6               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12414                           
 12415                           ;BVH2_Appl_Layer.c: 1794: Cb34_odFixedValueSel = 0;
 12416  065C  01C5               	clrf	_Cb34_odFixedValueSel^(0+128)
 12417  065D                     l7309:	
 12418                           
 12419                           ;BVH2_Appl_Layer.c: 1795: Cb34_oPWM_SC_Alarm = 0;
 12420  065D  01C7               	clrf	_Cb34_oPWM_SC_Alarm^(0+128)
 12421  065E  2E3D               	goto	l7255
 12422  065F                     l7313:	
 12423                           
 12424                           ;BVH2_Appl_Layer.c: 1798: else {;BVH2_Appl_Layer.c: 1799: if (Cb34_idPWM > 19) {
 12425  065F  3014               	movlw	20
 12426  0660  024B               	subwf	_Cb34_idPWM,w
 12427  0661  1C03               	skipc
 12428  0662  2E6D               	goto	l7327
 12429                           
 12430                           ;BVH2_Appl_Layer.c: 1802: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1803: (UInt8)5;
 12431  0663  0021               	movlb	1	; select bank1
 12432  0664  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12433  0665  39F0               	andlw	-16
 12434  0666  3805               	iorlw	5
 12435  0667  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12436                           
 12437                           ;BVH2_Appl_Layer.c: 1804: Cb34_odPumpOff = 0;
 12438  0668  01C4               	clrf	_Cb34_odPumpOff^(0+128)
 12439                           
 12440                           ;BVH2_Appl_Layer.c: 1805: Cb34_odFixedValueSel = 0;
 12441  0669  01C5               	clrf	_Cb34_odFixedValueSel^(0+128)
 12442                           
 12443                           ;BVH2_Appl_Layer.c: 1806: Cb34_odFixedLowValueSel = 1;
 12444  066A  01C6               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12445  066B  0AC6               	incf	_Cb34_odFixedLowValueSel^(0+128),f
 12446  066C  2E5D               	goto	l7309
 12447  066D                     l7327:	
 12448                           
 12449                           ;BVH2_Appl_Layer.c: 1810: else {;BVH2_Appl_Layer.c: 1811: if (Cb34_idPWM <= 19) {
 12450  066D  3014               	movlw	20
 12451  066E  024B               	subwf	_Cb34_idPWM,w
 12452  066F  1803               	skipnc
 12453  0670  0008               	return
 12454                           
 12455                           ;BVH2_Appl_Layer.c: 1814: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1815: (UInt8)1;
 12456  0671  0021               	movlb	1	; select bank1
 12457                           
 12458                           ;BVH2_Appl_Layer.c: 1816: Cb34_odPumpOff = 1;
 12459                           
 12460                           ;BVH2_Appl_Layer.c: 1817: Cb34_odFixedValueSel = 0;
 12461                           
 12462                           ;BVH2_Appl_Layer.c: 1818: Cb34_odFixedLowValueSel = 0;
 12463  0672  2675  3185         	fcall	PL44	;call to abstracted procedure
 12464  0674  2E5D               	goto	l7309
 12465  0675                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 12466  0675                     PL44:	
 12467  0675  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12468  0676  39F0               	andlw	-16
 12469  0677  3801               	iorlw	1
 12470  0678  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12471  0679  01C4               	clrf	_Cb34_odPumpOff^(0+128)
 12472  067A  0AC4               	incf	_Cb34_odPumpOff^(0+128),f
 12473  067B  01C5               	clrf	_Cb34_odFixedValueSel^(0+128)
 12474  067C  01C6               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12475  067D  0008               	return
 12476  067E                     __end_ofPL44:	
 12477                           
 12478                           	psect	intentry
 12479  0004                     __pintentry:	
 12480 ;; *************** function _interrupt_handler *****************
 12481 ;; Defined at:
 12482 ;;		line 77 in file "../interrupt.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;		None
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;		None
 12487 ;; Return value:  Size  Location     Type
 12488 ;;                  1    wreg      void 
 12489 ;; Registers used:
 12490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12491 ;; Tracked objects:
 12492 ;;		On entry : 0/0
 12493 ;;		On exit  : 1F/0
 12494 ;;		Unchanged: 0/0
 12495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12496 ;;      Params:         0       0       0       0       0       0       0       0
 12497 ;;      Locals:         0       0       0       0       0       0       0       0
 12498 ;;      Temps:          0       0       0       0       0       0       0       0
 12499 ;;      Totals:         0       0       0       0       0       0       0       0
 12500 ;;Total ram usage:        0 bytes
 12501 ;; Hardware stack levels used:    1
 12502 ;; Hardware stack levels required when called:    2
 12503 ;; This function calls:
 12504 ;;		_PWM_CTRL
 12505 ;;		_Task1ms
 12506 ;;		_interrrupt_bldc
 12507 ;;		_interrupt_PWMCapture
 12508 ;; This function is called by:
 12509 ;;		Interrupt level 1
 12510 ;; This function uses a non-reentrant model
 12511 ;;
 12512                           
 12513  0004                     _interrupt_handler:	
 12514                           
 12515                           ;incstack = 0
 12516  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12517                           
 12518                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12519  0005  3180               	pagesel	$
 12520                           
 12521                           ;interrupt.c: 81: if( TMR1IF )
 12522  0006  0020               	movlb	0	; select bank0
 12523  0007  1811               	btfsc	17,0	;volatile
 12524                           
 12525                           ;interrupt.c: 83: {;interrupt.c: 85: TMR1IF = 0;
 12526  0008  1011               	bcf	17,0	;volatile
 12527                           
 12528                           ;interrupt.c: 87: };interrupt.c: 90: if( TMR4IF )
 12529  0009  1C93               	btfss	19,1	;volatile
 12530  000A  2812               	goto	i1l9835
 12531                           
 12532                           ;interrupt.c: 92: {;interrupt.c: 94: TMR4IF = 0;
 12533  000B  1093               	bcf	19,1	;volatile
 12534                           
 12535                           ;interrupt.c: 96: PWM_CTRL( );
 12536  000C  3187  2765  3180   	fcall	_PWM_CTRL
 12537                           
 12538                           ;interrupt.c: 98: Task1ms( );
 12539  000F  3187  278C  3180   	fcall	_Task1ms
 12540  0012                     i1l9835:	
 12541                           
 12542                           ;interrupt.c: 100: };interrupt.c: 106: if( TMR2IF )
 12543  0012  0020               	movlb	0	; select bank0
 12544  0013  1C91               	btfss	17,1	;volatile
 12545  0014  2819               	goto	i1l9841
 12546                           
 12547                           ;interrupt.c: 108: {;interrupt.c: 110: TMR2IF = 0;
 12548  0015  1091               	bcf	17,1	;volatile
 12549                           
 12550                           ;interrupt.c: 112: interrrupt_bldc( );
 12551  0016  3181  213E  3180   	fcall	_interrrupt_bldc
 12552  0019                     i1l9841:	
 12553                           
 12554                           ;interrupt.c: 114: };interrupt.c: 117: if( TMR6IF )
 12555  0019  0020               	movlb	0	; select bank0
 12556  001A  1993               	btfsc	19,3	;volatile
 12557                           
 12558                           ;interrupt.c: 119: {;interrupt.c: 121: TMR6IF = 0;
 12559  001B  1193               	bcf	19,3	;volatile
 12560                           
 12561                           ;interrupt.c: 131: };interrupt.c: 134: if( CCP5IF )
 12562  001C  1F13               	btfss	19,6	;volatile
 12563  001D  2821               	goto	i1l9849
 12564                           
 12565                           ;interrupt.c: 136: {;interrupt.c: 138: CCP5IF = 0;
 12566  001E  1313               	bcf	19,6	;volatile
 12567                           
 12568                           ;interrupt.c: 140: interrupt_PWMCapture( );
 12569  001F  3197  27A3         	fcall	_interrupt_PWMCapture
 12570  0021                     i1l9849:	
 12571                           
 12572                           ;interrupt.c: 142: };interrupt.c: 145: if( CCP2IF )
 12573  0021  0020               	movlb	0	; select bank0
 12574  0022  1812               	btfsc	18,0	;volatile
 12575                           
 12576                           ;interrupt.c: 147: {;interrupt.c: 149: CCP2IF = 0;
 12577  0023  1012               	bcf	18,0	;volatile
 12578  0024  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12579  0025  0009               	retfie
 12580  0026                     __end_of_interrupt_handler:	
 12581                           
 12582                           	psect	swtext3
 12583  073D                     __pswtext3:	
 12584  073D                     i1S10089:	
 12585  073D  3181  296E         	ljmp	i1l8851
 12586  073F  3181  2985         	ljmp	i1l8863
 12587  0741  3181  299F         	ljmp	i1l8903
 12588  0743  3181  29D1         	ljmp	i1l8941
 12589  0745  3181  2982         	ljmp	i1l8861
 12590  0747  3181  2982         	ljmp	i1l8861
 12591  0749  3181  2982         	ljmp	i1l8861
 12592  074B  3181  29E5         	ljmp	i1l284
 12593  074D  3181  29EB         	ljmp	i1l8975
 12594  074F  3182  2A7A         	ljmp	i1l267
 12595                           
 12596                           	psect	swtext4
 12597  0751                     __pswtext4:	
 12598  0751                     i1S10093:	
 12599  0751  3183  2B50         	ljmp	i1l5615
 12600  0753  3183  2B52         	ljmp	i1l5617
 12601  0755  3183  2B55         	ljmp	i1l5619
 12602  0757  3183  2B57         	ljmp	i1l5621
 12603  0759  3183  2B59         	ljmp	i1l5623
 12604  075B  3183  2B5B         	ljmp	i1l5625
 12605  075D  3183  2B5B         	ljmp	i1l5625
 12606  075F  3183  2B5B         	ljmp	i1l5625
 12607  0761  3183  2B5B         	ljmp	i1l5625
 12608  0763  3183  2B5B         	ljmp	i1l5625
 12609                           
 12610                           	psect	text44
 12611  078C                     __ptext44:	
 12612 ;; *************** function _Task1ms *****************
 12613 ;; Defined at:
 12614 ;;		line 52 in file "../interrupt.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;		None
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;		None
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  1    wreg      void 
 12621 ;; Registers used:
 12622 ;;		status,2, status,0
 12623 ;; Tracked objects:
 12624 ;;		On entry : 1C/0
 12625 ;;		On exit  : 1F/1
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12628 ;;      Params:         0       0       0       0       0       0       0       0
 12629 ;;      Locals:         0       0       0       0       0       0       0       0
 12630 ;;      Temps:          0       0       0       0       0       0       0       0
 12631 ;;      Totals:         0       0       0       0       0       0       0       0
 12632 ;;Total ram usage:        0 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; This function calls:
 12635 ;;		Nothing
 12636 ;; This function is called by:
 12637 ;;		_interrupt_handler
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           
 12642                           ;psect for function _Task1ms
 12643  078C                     _Task1ms:	
 12644                           
 12645                           ;interrupt.c: 56: ui8_Task_Cont1ms++;
 12646                           
 12647                           ;incstack = 0
 12648                           ; Regs used in _Task1ms: [status]
 12649  078C  0021               	movlb	1	; select bank1
 12650  078D  0AE0               	incf	_ui8_Task_Cont1ms^(0+128),f
 12651  078E  0008               	return
 12652  078F                     __end_of_Task1ms:	
 12653                           
 12654                           	psect	text45
 12655  0765                     __ptext45:	
 12656 ;; *************** function _PWM_CTRL *****************
 12657 ;; Defined at:
 12658 ;;		line 198 in file "../pwm.c"
 12659 ;; Parameters:    Size  Location     Type
 12660 ;;		None
 12661 ;; Auto vars:     Size  Location     Type
 12662 ;;		None
 12663 ;; Return value:  Size  Location     Type
 12664 ;;                  1    wreg      void 
 12665 ;; Registers used:
 12666 ;;		wreg, status,2, status,0
 12667 ;; Tracked objects:
 12668 ;;		On entry : 1F/0
 12669 ;;		On exit  : 1C/0
 12670 ;;		Unchanged: 0/0
 12671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12672 ;;      Params:         0       0       0       0       0       0       0       0
 12673 ;;      Locals:         0       0       0       0       0       0       0       0
 12674 ;;      Temps:          0       0       0       0       0       0       0       0
 12675 ;;      Totals:         0       0       0       0       0       0       0       0
 12676 ;;Total ram usage:        0 bytes
 12677 ;; Hardware stack levels used:    1
 12678 ;; This function calls:
 12679 ;;		Nothing
 12680 ;; This function is called by:
 12681 ;;		_interrupt_handler
 12682 ;; This function uses a non-reentrant model
 12683 ;;
 12684                           
 12685                           
 12686                           ;psect for function _PWM_CTRL
 12687  0765                     _PWM_CTRL:	
 12688                           
 12689                           ;pwm.c: 288: ui8_PWM_FreqCnt++;
 12690                           
 12691                           ;incstack = 0
 12692                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 12693  0765  0021               	movlb	1	; select bank1
 12694  0766  3064               	movlw	100
 12695  0767  0AD4               	incf	_ui8_PWM_FreqCnt^(0+128),f
 12696                           
 12697                           ;pwm.c: 290: if( ui8_PWM_FreqCnt >= 100 )
 12698  0768  0254               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 12699  0769  1C03               	skipc
 12700  076A  2F6F               	goto	i1l6159
 12701                           
 12702                           ;pwm.c: 292: {;pwm.c: 294: ui8_PWM_FreqCnt = 0;
 12703  076B  01D4               	clrf	_ui8_PWM_FreqCnt^(0+128)
 12704                           
 12705                           ;pwm.c: 295: LATC0 = 0;
 12706  076C  0022               	movlb	2	; select bank2
 12707  076D  100E               	bcf	14,0	;volatile
 12708                           
 12709                           ;pwm.c: 298: }
 12710  076E  0008               	return
 12711  076F                     i1l6159:	
 12712                           
 12713                           ;pwm.c: 301: else;pwm.c: 302: {;pwm.c: 304: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 12714  076F  0853               	movf	_ui8_PWMoutvalue^(0+128),w
 12715  0770  0254               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 12716  0771  1C03               	skipc
 12717  0772  0008               	return
 12718                           
 12719                           ;pwm.c: 306: {;pwm.c: 308: LATC0 = 1;
 12720  0773  0022               	movlb	2	; select bank2
 12721  0774  140E               	bsf	14,0	;volatile
 12722  0775  0008               	return
 12723  0776                     __end_of_PWM_CTRL:	
 12724  007E                     btemp	set	126	;btemp
 12725  007E                     int$flags	set	126
 12726  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    404
    Data        12
    BSS         204
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      52
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80     30      68
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrupt_handler->_interrrupt_bldc
    _interrrupt_bldc->i1_commutate

Critical Paths under _main in BANK0

    _main->_BVH2_Appl_Layer
    _timer_init->_clear_timer
    _InitMotorRun->_commutate
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    _SetDiagAlarm->_PWM_Write_Out
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _Get_Analog_Value->_FILTER_Ubat
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4012
                                             24 BANK0      4     4      0
                    _BVH2_Appl_Layer
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                          _PWMReadDC
                       _SetDiagAlarm
                             ___wmul
                        _clear_timer
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0     181
                           _ADC_Init
                           _DiagInit
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                              5 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            0     0      0       0
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0       0
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0       0
                                              4 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    1     1      0      69
                                              7 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     2     2      0      45
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          0     0      0      24
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             3     1      2      24
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWMReadDC                                            0     0      0     296
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              4 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ltdiv                                             10     4      6      52
                                             13 BANK0     10     4      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                              4 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     38    38      0    3051
                                             18 BANK0      6     6      0
                                              0 BANK3     30    30      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     440
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupt_handler                                    0     0      0     573
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (6) _interrupt_PWMCapture                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _interrrupt_bldc                                      6     6      0     573
                                             12 COMMON     2     2      0
                                              0 BANK0      4     4      0
                           _BLDCWait
                            ___lwdiv
                         i1_ADC_Read
                         i1_ADC_Wait
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (7) i1_commutate                                         12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4      56
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Read                                           3     1      2      24
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     439
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (7) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Task1ms                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PWM_CTRL                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
   _InitMotorStop
   _PWMReadDC
     ___ltdiv
       ___tmul (ARG)
     ___tmul
   _SetDiagAlarm
     _PWM_Write_Out
   ___wmul
   _clear_timer
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     _init_bldc
       _InitMotorRun
         _commutate
     _init_ports
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     ___lwdiv
     i1_ADC_Read
     i1_ADC_Wait
     i1___wmul
     i1_commutate
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     126       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      34       6       65.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     1E      44      12       85.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     126      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Aug 27 10:25:07 2020

                          ?_PWM_Capture_init 0070                                            _B 01A0  
                                          pc 0002                                           PL2 042B  
                                         PL4 0446                                           PL6 0F51  
                                         PL8 0F5E                                           l69 1635  
                                         _RD 0CA8                           ??_PWM_Capture_init 0024  
                        ___wmul@multiplicand 0026                             i1___wmul@product 0074  
                   _SIBFS_Pic_etat_monitor_b 00CB             BVH2_Appl_Layer@X_Sb4_Intergrator 0162  
                        __end_of_system_init 1514                                          PL10 0F67  
                                        PL20 04A3                                          PL12 045E  
                                        PL30 0F7A                                          PL22 04B3  
                                        PL14 046F                                          PL40 0500  
                                        PL32 0F89                                          PL24 04C4  
                                        PL16 0480                                          PL50 0512  
                                        PL42 0506                                          PL34 04EE  
                                        PL26 04D4                                          PL18 0491  
                                        PL60 0FAD                                          PL52 0FA7  
                                        PL44 0675                                          PL36 0F96  
                                        PL28 04E4                                          PL70 179D  
                                        PL62 17F2                                          PL54 0518  
                                        PL46 050C                                          PL38 04F7  
                                        PL80 17F8                                          PL72 0FB4  
                                        PL64 0525                                          PL56 0FF9  
                                        PL48 0F9F                                          PL82 0FBC  
                                        PL74 0531                                          PL66 052B  
                                        PL58 051E                                          PL84 053B  
                                        PL76 0536                                          PL68 05F6  
                                        PL86 17FC                                          PL78 0FB8  
BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00BC                                  ?i1_ADC_Read 0070  
                                        l327 00AE                                          l345 00D7  
                                        l514 16DB                                          l516 16E0  
                                ?i1_ADC_Wait 0070                                          _GIE 005F  
                                        _RA4 0064                                          _PR2 001B  
                           _ui16_IPhase_bldc 0044                                 __CFG_BORV$LO 0000  
                                        wreg 0009                            _ui16_IPhase1_bldc 0157  
                          _ui16_IPhase2_bldc 013B                            _ui16_IPhase3_bldc 0139  
                  BVH2_Appl_Layer@Cb24_Reset 01D7                                 __CFG_LVP$OFF 0000  
                    __end_of_interrrupt_bldc 02CF                                         _C1IE 0495  
                                       l1145 16B1                                         l1430 0BFA  
                                       l1406 0ADA                                         l1511 0CF2  
                                       l1512 0CCD                                         l1360 0992  
                                       l1513 0CC8                                         l1425 0AB5  
                                       l1530 0D28                                         l1514 0CCB  
                                       l1363 09CB                                         l1508 0CBD  
                                       l1436 0B25                                         l1380 09F5  
                                       l1517 0CE7                                         l1630 0FC7  
                                       l1542 0D43                                         l1631 0FD7  
                                       l1527 0D14                                         l1471 0BC5  
                                       l1703 154C                                         l1640 0FF7  
                                       l1632 0FC9                                         l1536 0D3A  
                                       l1392 0A27                                         l1384 0A02  
                                       l1376 09FC                                         l1633 0FCB  
                                       l1377 09E9                                         l1394 0A3B  
                                       l1636 0FDF                                         l1388 0A22  
                                       l1573 0E4C                                         l1477 0C0E  
                                       l1397 0A48                                         l5021 170E  
                                       l1638 0FE1                                         l1494 0CA4  
                                       l1726 156D                                         l1639 0FE3  
                                       l1905 068E                                         l5017 163E  
                                       l1587 0ECB                                         l1579 0E6B  
                                       l1499 0C82                                         l1845 0F1B  
                                       l6101 16D1                                         l5119 06EA  
                                       l1839 05DC                                         l5311 16A8  
                                       l5303 169C                                         l5071 1554  
                                       l6113 16E4                                         l6105 16D6  
                                       l5073 1556                                         l5075 1559  
                                       l5067 154F                                         l5181 15BF  
                                       l5173 15A1                                         l5069 1551  
                                       l5261 152B                                         l5245 1517  
                                       l5191 15E1                                         l5183 15C3  
                                       l5175 15A5                                         l5079 155C  
                                       l5255 1523                                         l5089 1570  
                                       l4801 0084                                         l5249 151B  
                                       l5507 05E4                                         l4803 0086  
                                       l5267 1533                                         l5275 153B  
                                       l7221 0F11                                         l6093 16C6  
                                       l5189 15DD                                         l4901 00FE  
                                       l4805 0088                                         l4821 009D  
                                       l5295 1690                                         l5287 1684  
                                       l5279 1678                                         l4831 00B4  
                                       l4807 008A                                         l7313 065F  
                                       l7241 0615                                         l6097 16CC  
                                       l4921 0109                                         l4841 00D5  
                                       l4833 00C1                                         l4825 00A7  
                                       l7251 063A                                         l4915 0101  
                                       l4819 008F                                         l4763 0028  
                                       l7309 065D                                         l7245 0624  
                                       l7405 0F25                                         l4853 00E6  
                                       l7327 066D                                         l7255 063D  
                                       l7351 0FE5                                         l7423 069D  
                                       l4871 00E9                                         l4847 00DE  
                                       l4767 0033                                         l7273 0632  
                                       l7257 063F                                         l7353 0FEF  
                                       l7345 0FCD                                         l7441 06CD  
                                       l7433 06B0                                         l9201 09BD  
                                       l9121 096D                                         l9105 05A2  
                                       l4945 0114                                         l7371 0EF2  
                                       l7259 0629                                         l9131 0980  
                                       l9123 0971                                         l9115 095F  
                                       l4963 0118                                         l4939 010C  
                                       l4891 00F3                                         l4795 007B  
                                       l7373 0EEC                                         l7445 06D3  
                                       l9205 09D0                                         l9133 0983  
                                       l9125 0978                                         l9109 05A4  
                                       l4877 00F1                                         l4797 007F  
                                       l9311 0A79                                         l9303 0A6E  
                                       l4983 0126                                         l4895 00F6  
                                       l4991 0129                                         l4799 0081  
                                       l7369 0EEE                                         l7449 06E1  
                                       l9321 0A8F                                         l9313 0A7D  
                                       l9305 0A72                                         l9217 09D5  
                                       l4969 0120                                         l4993 013D  
                                       l7299 0651                                         l9323 0A93  
                                       l9315 0A80                                         l9251 0A0E  
                                       l9227 09E6                                         l9163 098E  
                                       l9421 0B2E                                         l9413 0B0F  
                                       l9333 0AA1                                         l9261 0A20  
                                       l9149 0988                                         l9511 0BC2  
                                       l9183 09B9                                         l9175 099D  
                                       l9095 0599                                         l9441 0B4E  
                                       l9425 0B34                                         l9417 0B27  
                                       l9177 09B2                                         l9089 0593  
                                       l9515 0BCB                                         l9531 0BE3  
                                       l9355 0AAD                                         l9283 0A4F  
                                       l8811 05D2                                         _ADON 04E8  
                                       l9605 0C8F                                         l9509 0BBC  
                                       l9437 0B40                                         l9293 0A5B  
                                       l9285 0A51                                         l9373 0AC1  
                                       l9615 0CA9                                         l9295 0A5E  
                                       l8807 05CD                                         l9713 0D48  
                                       l9609 0C9D                                         l9561 0C29  
                                       l9465 0B73                                         l9449 0B59  
                                       l9553 0C1D                                         l9297 0A66  
                                       l9811 0EB5                                         l9803 0E66  
                                       l9619 0CAB                                         l9571 0C41  
                                       l9483 0B9B                                         l9459 0B66  
                                       l9387 0AF1                                         l9813 0EC5  
                                       l9733 0D63                                         l9717 0D4B  
                                       l9469 0B82                                         l9397 0B08  
                                       l8775 094B                                         l9815 0EDA  
                                       l9647 0CE0                                         l9575 0C4C  
                                       l9567 0C37                                         l9487 0BA8  
                                       l9399 0B0B                                         l9809 0EA9  
                                       l9497 0BAE                                         l9921 0900  
                                       _CFGS 0CAE                                         l8779 0951  
                                       l9747 0D7A                                         l9683 0D1F  
                                       l9667 0D00                                         l9765 0D99  
                                       l9757 0D88                                         l9677 0D12  
                                       l9597 0C86                                         l8799 05B7  
                                       l9919 08FD                                         l9785 0E04  
                                       l9697 0D30                                         l9689 0D26  
                                       l9787 0E09                                         l9939 0939  
                                       l9859 0858                                         l9797 0E5B  
                                       l9949 0941                                         l9799 0E5E  
                                       u2205 0719                                         _LATA 010C  
                                       _LATB 010D                                         u2215 06F6  
                                       _LATC 010E                                         _PIE1 0091  
                                       _PIE2 0092                                         _PIE3 0093  
                                       _PEIE 005E                                         u7111 09CF  
                                       i1l69 02E9                                         u4785 06C2  
                                       u7450 0AFA                                         u8235 0DDB  
                                       u7460 0AFB                                         u8245 0DF4  
                                       u8255 0DFF                                         u8265 0E42  
                                       u6685 05C4                                         _TMR0 0015  
                                       _TMR2 001A                                         _TMR4 0415  
                                       _TMR6 041C                                         _Bcnt 00E5  
                           _ui8_Task_Cont1ms 00E0                             _ui8_Task_Cont3ms 00D7  
                           _ui8_Task_Cont5ms 00D6                             _ui16_PWM_Freq_In 0131  
                 BVH2_Appl_Layer@Cb24_BadCnt 0123                                         _main 084F  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       fsr1l 0006                                         btemp 007E  
                        timer_init@ui8_TmrNb 0025                             __end_of_ADC_Init 164F  
                           __end_of_ADC_Read 1645                             __end_of_ADC_Wait 1633  
                                       start 0026                              _ui8_sampleState 00E7  
                           __end_of_BLDCWait 042B                       __size_of_PWM_Write_Out 0005  
                         _ui16_comm_time_max 013F                                        S10085 0729  
                                      S10087 0776                                  i1_commutate 030B  
                              ?_InitMotorRun 0070                              __end_of_Task1ms 078F  
                        _ui16_duty_cycle_mat 0135                                __CFG_PLLEN$ON 0000  
                                      l10083 0095                                        _C1OUT 088E  
                            __end_of___aldiv 06EA                                        ?_main 0070  
                                      _EEPGD 0CAF                                        _T1CON 0018  
                                      _T2CON 001C                                        _LATB1 0869  
                                      _LATB2 086A                                        _LATC0 0870  
                                      _LATC1 0871                                        _LATC2 0872  
                                      _LATC3 0873                                _InitMotorStop 0F43  
                                      _LATC4 0874                                        _T4CON 0417  
                            __end_of___ltdiv 05D9                                        _T6CON 041E  
                            __end_of___lwdiv 0565                                        i1l316 02BB  
                                      i1l327 037F                                        i1l263 016A  
                                      i1l345 03A3                                        i1l267 027A  
                                      i1l284 01E5                                        _TMR1H 0017  
                                      _TMR1L 0016                            _ui8_BlankingCount 00EB  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E                          ___lmul@multiplicand 0028  
                          _ui16_PWM_Freq_mat 0133     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00BA  
                           __end_of_PWM_CTRL 0776                 ?_Cb56_UbatHandling_node_fcn2 0070  
                           __end_ofi1___wmul 030B            BVH2_Appl_Layer@Cb24_oMotorStalled 00B6  
                                      status 0003                             __end_of_DiagInit 165C  
                        i1___wmul@multiplier 0070                                        wtemp0 007E  
                         __size_of_PWMReadDC 0042               ??_Cb34_PWM_Detection_node_fcn1 0024  
                        __size_ofi1_ADC_Read 000E                          __size_ofi1_ADC_Wait 0019  
                             __CFG_MCLRE$OFF 0000                              __initialization 081A  
                BVH2_Appl_Layer@Cb51_Counter 00BE                  BVH2_Appl_Layer@Cb19_Counter 00A2  
                                _system_init 14DE                                 __end_of_main 0949  
                             ??_InitMotorRun 0030                              _PWM_trans_table 1800  
                       __size_of_clear_timer 0021                         _ui16_duty_cycle_BLDC 00AE  
                             ?_InitMotorStop 0070                                       ??_main 0038  
                       __size_of_FILTER_Init 0019                         __size_of_FILTER_Ubat 006B  
                       __size_of_FILTER_Temp 0022                            ?_read_eeprom_data 0070  
                       _BVH2_Appl_Layer$1034 01CD                         _BVH2_Appl_Layer$1042 01C4  
                       _BVH2_Appl_Layer$1035 01CE                         _BVH2_Appl_Layer$1036 01CF  
                       _BVH2_Appl_Layer$1044 01C6                         _BVH2_Appl_Layer$1037 01D0  
                       _BVH2_Appl_Layer$1045 01C8                         _BVH2_Appl_Layer$1038 01D1  
                       _BVH2_Appl_Layer$1039 01D2                         _interrupt_PWMCapture 17A3  
                          ?_Get_Analog_Value 0070                  _ui16_NTC_Temp_bldc_mean_cal 0145  
                         ??_read_eeprom_data 0024                                _PWM_Write_Out 16E6  
                                     _ADCON0 009D                           ??_Get_Analog_Value 0030  
                                     _ADCON1 009E                                       _CCP1AS 0295  
                                     _CCP1IE 048A                                       _CCP1IF 008A  
                                     _CCP2IE 0490                                       _CCP2IF 0090  
                                     _CCP3IE 049C                                       _CCP3IF 009C  
                                     _CCP4IE 049D                                       _CCP4IF 009D  
                                     _CCP5IE 049E                                       _CCP5IF 009E  
                                     _ADRESH 009C                                       _ADRESL 009B  
                                     _EEADRL 0191                                       _CCPR1H 0292  
                                     _CCPR2H 0299                                       _CCPR3H 0312  
                                     _CCPR1L 0291                                       _CCPR4H 0319  
                                     _CCPR2L 0298                                       _EEDATL 0193  
                                     _CCPR3L 0311                                       _CCPR5H 031D  
                                     _CCPR4L 0318                                       _CCPR5L 031C  
                                  ADC_Read@i 0026                                       _ANSELA 018C  
                                     _ANSELB 018D                             ?_interrrupt_bldc 0070  
                              ?_SetDiagAlarm 0070                                       i1l1171 17B7  
                                     i1l1168 17A4                                       i1l5621 0357  
                                     i1l5613 034C                                       i1l6159 076F  
                                     i1l5623 0359                                       i1l5615 0350  
                                     i1l6175 17E3                                       i1l6167 17AC  
                                     i1l5801 03F2                                       i1l5713 03C2  
                                     i1l5625 035B                                       i1l5617 0352  
                                     i1l9001 023E                                       i1l5811 0409  
                                     i1l5651 0390                                       i1l5643 0378  
                                     i1l5619 0355                                       i1l9011 025D  
                                     i1l9003 024A                                       i1l6179 17E5  
                                     i1l7501 0560                                       i1l5733 03CD  
                                     i1l5709 03BF                                       i1l5637 0360  
                                     i1l9005 0251                                       i1l5719 03CA  
                                     i1l5671 03B2                                       i1l5639 036E  
                                     i1l5577 02F1                                       i1l5665 03AA  
                                     i1l5809 03F5                                       i1l5649 0385  
                                     i1l5585 0316                                       i1l5763 03E0  
                                     i1l5739 03D5                                       i1l5659 03A1  
                                     i1l9051 02A8                                       i1l9027 026D  
                                     i1l5781 03E4                                       i1l5757 03D8  
                                     i1l9053 02AA                              _ui8_PWM_FreqCnt 00D4  
                                     i1l5695 03BD                                       i1l9071 02C8  
                                     i1l9047 029F                                       i1l9055 02AE  
                                     i1l5689 03B5                                       i1l9073 02CD  
                                     i1l9057 02B0                                       i1l5787 03EC  
                                     i1l7497 055C                                       i1l7489 054D  
                                     i1l8821 02FE                                       i1l8903 019F  
                                     _INTCON 000B                                       i1l8817 02F8  
                                     i1l8841 0158                                       i1l8923 01C8  
                                     i1l8915 01BF                                       i1l8851 016E  
                                     i1l8941 01D1                                       i1l8861 0182  
                                     i1l8845 0162                                       i1l8837 014E  
                                     i1l8863 0185                                       i1l9841 0019  
                                     i1l8955 01DF                                       i1l9835 0012  
                                     i1l8981 01F4                                       i1l8991 0222  
                                     i1l8975 01EB                                       _FVRCON 0117  
                                     i1l8993 0226                                       i1l8985 0209  
                                     i1l9849 0021                                       i1l8987 020D  
                                     i1l8997 023B                                       i1l8999 023D  
                         _ui8_Task_Cont100ms 004D                                       _OSCCON 0099  
                                     u487_25 0555                                       u672_25 014A  
              ??_Cb56_UbatHandling_node_fcn2 0024                                       _TMR0IE 005D  
                                     _TMR1IE 0488                                       _TMR1IF 0088  
                                     _TMR2IE 0489                                       _TMR2IF 0089  
                                     _TMR4IE 0499                                       _TMR4IF 0099  
                                     u679_25 01BD                                       _TMR6IE 049B  
                                     _TMR6IF 009B                                       _WDTCON 0097  
       BVH2_Appl_Layer@Sb1_Logical_Operator1 01DC         BVH2_Appl_Layer@Sb1_Logical_Operator2 01CC  
       BVH2_Appl_Layer@Sb1_Logical_Operator3 01DD         BVH2_Appl_Layer@Sb1_Logical_Operator5 01D8  
                                  ??_Task1ms 0070                                   _MotorFlags 004E  
 BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C                                       ___lmul 0F17  
                                  ??___aldiv 002C                                       ___tmul 05D9  
                                     ___wmul 0949                    BVH2_Appl_Layer@Sb4_PI_sum 01E0  
                                  ??___ltdiv 0033                                    ??___lwdiv 0074  
                            _ui8_PWMinDC_sav 00D0            BVH2_Appl_Layer@Cb24_oStalledAlarm 015D  
                          __end_of_PWMReadDC 05A7                        ?_interrupt_PWMCapture 0070  
                                  ?_ADC_Init 0070                                    ?_ADC_Read 0024  
                                  ?_ADC_Wait 0070                               ?_PWM_Write_Out 0070  
                                  ?_BLDCWait 0070                     __size_of_BVH2_Appl_Layer 0585  
                             ??_SetDiagAlarm 0025             BVH2_Appl_Layer@Cb9_oCurrentAlarm 0159  
                    __end_of__initialization 084C                        __end_of_FILTER_IPhase 0729  
                    __end_of_PWM_trans_table 1994                               __pcstackCOMMON 0070  
                            _ui8_PWMoutvalue 00D3                                 __pidataBANK2 0000  
                         _ui16_dryRun_Thresh 01E2                              ??_InitMotorStop 0024  
       __size_of_Cb56_UbatHandling_node_fcn2 0038                                   __end_ofPL2 0446  
                                 __end_ofPL4 045E                                   __end_ofPL6 0F5E  
                                 __end_ofPL8 0F67                                    ?_PWM_CTRL 0070  
                               ??i1_ADC_Read 0072                                    ?i1___wmul 0070  
                               ??i1_ADC_Wait 0070                                    ?_DiagInit 0070  
                          _Cb1_oCurrentAlarm 00CA                                   ??_ADC_Init 0024  
                                 ??_ADC_Read 0026                                   ??_ADC_Wait 0024  
                      _ui16_Speed_demand_mat 012B                                   ??_BLDCWait 0070  
                __end_of_Oscill_Source_Block 1661                    __size_of_PWM_Capture_init 0051  
                         _ui16_Duty_Cycle_In 015E                                 _analog_value 0048  
                       __end_of_InitMotorRun 1732                           __size_of_commutate 0116  
                                 __pbssBANK0 003C                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01A0  
                    _ui8_Duty_Cycle_In_Ratio 00D1                           __size_of_init_bldc 0023  
                       _bool_ControlLoopMode 00DC                           __end_ofi1_ADC_Read 02F6  
                         __end_ofi1_ADC_Wait 02E8                                   __pmaintext 084F  
                                    ?___lmul 0024                              _Cb34_oPWM_Alarm 00C8  
                                    ?___tmul 0024                                      ?___wmul 0024  
                               ?i1_commutate 0070                                   __pintentry 0004  
                                    _CM1CON0 0111                                      _CM1CON1 0112  
                                    i1S10093 0751                                      _CCP1ASE 14AF  
                                    i1S10089 073D                                      _CCP1CON 0293  
                                    _CCP2CON 029A                                      _CCP3CON 0313  
                                    _CCP4CON 031A      __end_of_Cb1_Current_An___High_node_fcn1 0F00  
   __size_of_Cb1_Current_An___High_node_fcn1 001D            ??_Cb1_Current_An___High_node_fcn1 0024  
           ?_Cb1_Current_An___High_node_fcn1 0070              _Cb1_Current_An___High_node_fcn1 0EE3  
                                    _CCP5CON 031E                        _bool_CPU_TempRedAlarm 00DA  
                             ___lmul@product 002C                                   ??_PWM_CTRL 0070  
                                 ??i1___wmul 0074                       ??_interrupt_PWMCapture 0070  
                                 _ui8_Ki_mat 012D                              ??_PWM_Write_Out 0024  
                                 _ui8_Kp_mat 00DE                                      i1l10091 0366  
                                 ??_DiagInit 0025                                      _PWM1CON 0294  
                                 _comm_state 00EC                  BVH2_Appl_Layer@Cb9_StateCnt 00BD  
                          ??_BVH2_Appl_Layer 0032                    _ui16_Speed_demand_mat_Max 0129  
                  _ui16_Speed_demand_mat_min 0127                                      _Task1ms 078C  
                               ?_system_init 0070                                      ___aldiv 067E  
                    BVH2_Appl_Layer@Sb3_Sum1 01DE                              __size_of___lmul 0025  
                            __size_of___tmul 001D                              __size_of___wmul 0015  
                                    ___ltdiv 05A7                                      ___lwdiv 0540  
                       __end_of_SetDiagAlarm 16E6                            __end_of_commutate 013E  
                               _ui8_CompFlag 00E6                                   _init_ports 16B2  
                                    __ptext1 14DE                                      __ptext2 1514  
                                    __ptext3 154D                                      __ptext4 16B2  
                                    __ptext5 16EB                                      __ptext6 170E  
                                    __ptext7 0028                                      __ptext8 1661  
                                    __ptext9 165C                          _phase_delay_counter 013D  
                                    _filter1 014B                                      _filter3 0149  
                          __end_of_init_bldc 170E                                _ui16_Temp_cal 0153  
                           ___aldiv@dividend 0028                   BVH2_Appl_Layer@Sb2_Switch5 01D5  
                                    clrloop0 0787                         end_of_initialization 084C  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00BB         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0  
                       _ui16_fir_IPhase_mean 014F                    __size_of_read_eeprom_data 000B  
                  __size_of_Get_Analog_Value 0007                             ___ltdiv@dividend 0030  
                           __CFG_CLKOUTEN$ON 0000                                ??_clear_timer 0024  
                           ___aldiv@quotient 002E              read_eeprom_data@ui8_adress_data 0025  
                      i1___wmul@multiplicand 0072                                ??_FILTER_Init 0027  
                              ??_FILTER_Ubat 0024                                ??_FILTER_Temp 0024  
                       _Cb56_odFixedValueSel 00C1                                   _timer_init 1514  
             PWM_Write_Out@ui8_DutyCycle_Out 0024                        _ui16_IPhase1_bldc_cal 0160  
                      _ui16_IPhase2_bldc_cal 01C2                             __CFG_FOSC$INTOSC 0000  
                      __size_of_InitMotorRun 0024                          _ui16_Current_Thresh 016E  
                           _PWM_Capture_init 1661                             ___ltdiv@quotient 0033  
                                  _PWMReadDC 0565                        _ui16_IPhase3_bldc_cal 01C0  
                          __size_of_ADC_Init 000A                            __size_of_ADC_Read 0012  
                              _ui16_step_cnt 00B4                            __size_of_ADC_Wait 0019  
                          __size_of_BLDCWait 0021                                   _windowPtr1 0050  
                           _ui8_BattVolt_mat 00AC         BVH2_Appl_Layer@Sb2_Logical_Operator2 01D9  
                   __size_of_interrrupt_bldc 0191                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 170E                               __end_of___lmul 0F3C  
                     _ui16_phase_advancement 00B2                               __end_of___tmul 05F6  
                             __end_of___wmul 095E                                  ?_init_ports 0070  
                       __size_ofi1_commutate 00FF                          __end_of_clear_timer 156E  
                              __pbitbssBANK0 0298                            __size_of_PWM_CTRL 0011  
                                i1ADC_Read@i 0072                                  __end_ofPL10 0F7A  
                                __end_ofPL20 04B3                                  __end_ofPL12 046F  
                                __end_ofPL30 0F89                                  __end_ofPL22 04C4  
                                __end_ofPL14 0480                                  __end_ofPL40 0506  
                                __end_ofPL32 0F96                                  __end_ofPL24 04D4  
                                __end_ofPL16 0491                                  __end_ofPL50 0518  
                                __end_ofPL42 050C                                  __end_ofPL34 04F7  
                                __end_ofPL26 04E4                                  __end_ofPL18 04A3  
                                __end_ofPL60 0FB4                                  __end_ofPL52 0FAD  
                                __end_ofPL44 067E                                  __end_ofPL36 0F9F  
                                __end_ofPL28 04EE                                  __end_ofPL70 17A3  
                                __end_ofPL62 17F8                                  __end_ofPL54 051E  
                                __end_ofPL46 0512                                  __end_ofPL38 0500  
                                __end_ofPL80 17FC                                  __end_ofPL72 0FB8  
                                __end_ofPL64 052B                                  __end_ofPL56 1000  
                                __end_ofPL48 0FA7                                  __end_ofPL82 0FC1  
                                __end_ofPL74 0536                                  __end_ofPL66 0531  
                                __end_ofPL58 0525                                  __end_ofPL84 0540  
                                __end_ofPL76 053B                                  __end_ofPL68 05FC  
                                __end_ofPL86 1800                                  __end_ofPL78 0FBC  
                        start_initialization 081A                            __size_ofi1___wmul 0015  
                        __end_of_FILTER_Init 1587                          __end_of_FILTER_Ubat 179D  
                        __end_of_FILTER_Temp 070C                            __size_of_DiagInit 000D  
                                 ?_PWMReadDC 0070          __end_of_Cb56_UbatHandling_node_fcn2 0FF9  
                _Cb56_UbatHandling_node_fcn2 0FC1                               _ui8_IPhase_sel 00EA  
                               _Cb1_StateCnt 0040                        __size_of_SetDiagAlarm 0024  
                    _ui16_NTC_Temp_bldc_mean 014D                               _ui8_PWM_dc_mat 00DF  
                                   ??___lmul 002C                                     ??___tmul 002A  
                                   ??___wmul 0028                                  __pdataBANK2 0162  
                 read_eeprom_data@ui8_adress 0024                         __size_of_system_init 0036  
                               _Cb1_oShutoff 00C9                                  ?_timer_init 0070  
                             ___tmul@product 002A                        __end_of_InitMotorStop 0F51  
                     __size_of_FILTER_IPhase 001D                              _ui8_Pulse_State 00D2  
                                  ___latbits 0002                              _BVH2_Appl_Layer 095E  
                              __pcstackBANK0 0020                                __pcstackBANK3 01C4  
                          _bool_MotorStalled 00E2                                 _SetDiagAlarm 16C2  
               __size_of_Oscill_Source_Block 0005                          __size_of_init_ports 0010  
                           _read_eeprom_data 160F                                    __pnvBANK1 00EF  
                                  __pnvBANK2 016E                                    __pnvBANK3 01E2  
             BVH2_Appl_Layer@Cb51_oTempAlarm 015C                             _Get_Analog_Value 0F3C  
                                   ?_Task1ms 0070                             ___lwdiv@dividend 0072  
                                _clear_timer 154D                                     ?___aldiv 0024  
                                   ?___ltdiv 002D                                     ?___lwdiv 0070  
                      _bool_HighCurrentAlarm 00E1                         clear_timer@ui8_TmrNb 0024  
                          ??_interrrupt_bldc 007C                _SIBFS_Current_Analysis_High_b 00CD  
                             _ui8_UPhase_sel 00E9                               _bool_UbatAlarm 00D9  
                                _FILTER_Init 156E                                  _FILTER_Ubat 1732  
                                _FILTER_Temp 06EA                                    _comm_time 0046  
                                  __pswtext1 0729                                    __pswtext2 0776  
                                  __pswtext3 073D                                    __pswtext4 0751  
                         _Cb34_oPWM_SC_Alarm 00C7                            _interrupt_handler 0004  
                            _ui16_Ubemf_bldc 00B0                                    _commutate 0028  
                      _SIBFS_PWM_Detection_b 00CC                                     _ADC_Init 1645  
                                   _ADC_Read 1633                __size_of_interrupt_PWMCapture 004F  
                       _bool_DryRunningAlarm 00E3                                     _ADC_Wait 161A  
                         ?_interrupt_handler 0070                        __end_of_PWM_Write_Out 16EB  
                                   _BLDCWait 040A                                  ??_PWMReadDC 0037  
                           __CFG_WDTE$SWDTEN 0000                            _I_calibrationInit 1587  
                           ___lwdiv@quotient 0074                                    _init_bldc 16EB  
    BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 004A                           ?_I_calibrationInit 0070  
                        ??_interrupt_handler 007E                        _Cb56_oUbat_Alarm_High 00C2  
                            ___aldiv@divisor 0024                              ___aldiv@counter 002C  
                             ___wmul@product 0028                          __size_of_timer_init 0039  
                                  clear_ram0 0786                                _FILTER_IPhase 070C  
                        ??_I_calibrationInit 0027                              ___ltdiv@divisor 002D  
                             _Cb34_odPumpOff 00C4                              ___ltdiv@counter 0036  
                                   _GO_nDONE 04E9                     __end_of_PWM_Capture_init 16B2  
                                   _PSTR1CON 0296                    __end_of_interrupt_handler 0026  
                    __end_of_BVH2_Appl_Layer 0EE3                                     _PWM_CTRL 0765  
                          ___wmul@multiplier 0024                                     i1___wmul 02F6  
                                 ?_commutate 0070                      interrrupt_bldc@ui32_tmp 0020  
                                   _DiagInit 164F                    __end_of_I_calibrationInit 160F  
                        ___tmul@multiplicand 0027                          _ui16_fir_Bat_mittel 0151  
                  _ui8_fixed_start_speed_mat 0143                                   ?_init_bldc 0070  
                          ___lmul@multiplier 0024                               _ui16_Capt_Val0 00A8  
                             _ui16_Capt_Val1 00A6                               _ui16_Capt_Val2 00A4  
                             _ui16_I_cal_Ph1 016A                               _ui16_I_cal_Ph2 0168  
                             _ui16_I_cal_Ph3 0166                               ?_FILTER_IPhase 0070  
                         _bool_CPU_TempAlarm 00E4                             _ui16_mat_Current 00AA  
                           __size_of_Task1ms 0003                         _SIBFS_UbatHandling_b 004C  
                    _Cb34_odFixedLowValueSel 00C6                     BVH2_Appl_Layer@Sb2_Error 01DA  
                           __size_of___aldiv 006C                BVH2_Appl_Layer@Cb19_oDryRun55 00B8  
              BVH2_Appl_Layer@Cb19_oDryRun66 00B7                             __size_of___ltdiv 0032  
                           __size_of___lwdiv 0025                                 ??_init_ports 0024  
                          _ui8_lastTaskvalue 00D5                             _ui16_mat_inpTemp 012F  
                             _ui8_StartupPWM 00ED                         _bool_PWMin_err_Alarm 00DB  
                         _Cb1_RestartCounter 00CE             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00B9  
                         _ui16_NTC_Temp_bldc 0155                              ___lwdiv@divisor 0070  
                             _Cb56_odPumpOff 00C0                              ___lwdiv@counter 0076  
                                   __ptext10 1587                                     __ptext11 160F  
                                   __ptext20 05D9                                     __ptext12 156E  
                                   __ptext21 05A7                                     __ptext13 161A  
                                   __ptext30 067E                                     __ptext22 0F43  
                                   __ptext14 1633                                     __ptext31 0FC1  
                                   __ptext23 0F3C                                     __ptext15 164F  
                                   __ptext40 02CF                                     __ptext32 0F00  
                                   __ptext24 1732                                     __ptext16 1645  
                                   __ptext41 02E8                                     __ptext33 05FC  
                                   __ptext25 06EA                                     __ptext17 16C2  
                                   __ptext42 0540                                     __ptext34 0EE3  
                                   __ptext26 070C                                     __ptext18 16E6  
                                   __ptext43 040A                                     __ptext27 095E  
                                   __ptext19 0565                                     __ptext44 078C  
                                   __ptext36 17A3                                     __ptext28 0949  
                                   __ptext45 0765                                     __ptext37 013E  
                                   __ptext29 0F17                                     __ptext38 030B  
                                   __ptext39 02F6                               _ui16_Ubat_bldc 0051  
                    _bool_mat_currAlarm_bldc 00DD                 BVH2_Appl_Layer@Cb14_StateCnt 0125  
                              _Cb44_StateCnt 003E                BVH2_Appl_Layer@Cb51_odPumpOff 015A  
                              __size_of_main 00FA                                   _Cb34_idPWM 004B  
                         __end_of_init_ports 16C2                                  _inputArray1 01B0  
                             _ui16_Speed_mat 0042                 BVH2_Appl_Layer@Cb24_StateCnt 003C  
                BVH2_Appl_Layer@Sb3_Product1 01D3                                ??i1_commutate 0070  
                                   int$flags 007E            BVH2_Appl_Layer@Cb51_oTempRedAlarm 015B  
                              _ui8_Ubemf_sel 00E8                                _Cb44_oShutoff 00C3  
                 __size_of_interrupt_handler 0022                             ?_BVH2_Appl_Layer 0070  
                               ??_timer_init 0025                          _Oscill_Source_Block 165C  
                                 i1_ADC_Read 02E8                                   i1_ADC_Wait 02CF  
                                ??_commutate 0024                     __end_of_read_eeprom_data 161A  
                   __end_of_Get_Analog_Value 0F43                   __size_of_I_calibrationInit 0088  
    __end_of_Cb44_Pic_etat_monitor_node_fcn1 0F17     __size_of_Cb44_Pic_etat_monitor_node_fcn1 0017  
          ??_Cb44_Pic_etat_monitor_node_fcn1 0024             ?_Cb44_Pic_etat_monitor_node_fcn1 0070  
            _Cb44_Pic_etat_monitor_node_fcn1 0F00         __end_of_Cb34_PWM_Detection_node_fcn1 0675  
      __size_of_Cb34_PWM_Detection_node_fcn1 0079                 _Cb34_PWM_Detection_node_fcn1 05FC  
                                ??_init_bldc 0030                                     intlevel1 0000  
                           _rising_bemf_flag 0298                              ??_FILTER_IPhase 0024  
                  _bool_PWMin_Freq_err_Alarm 00D8                         ?_Oscill_Source_Block 0070  
                            _interrrupt_bldc 013E                           __end_of_timer_init 154D  
                               ?_clear_timer 0070                        _bool_start_demand_mat 00EE  
                              ??_system_init 0030                            _ui8_PWMin_failCnt 00CF  
                 PWM_Capture_init@ui8_CCP_Nb 0024                            ___tmul@multiplier 0024  
                               ?_FILTER_Init 0070                                 ?_FILTER_Ubat 0070  
                               ?_FILTER_Temp 0070                                __pstringtext1 1800  
                                 _OPTION_REG 0095                          __end_ofi1_commutate 040A  
                               ___aldiv@sign 002D  BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016D  
              ?_Cb34_PWM_Detection_node_fcn1 0070           BVH2_Appl_Layer@Cb24_RestartCounter 00BF  
                      ??_Oscill_Source_Block 0024                         _Cb34_odFixedValueSel 00C5  
                            _ui8_error_Flags 004F                              _ui8_current_cal 0120  
                     __size_of_InitMotorStop 000E                 __end_of_interrupt_PWMCapture 17F2  
                             _ui16_speed_fil 0137                               _ui16_speed_rar 0141  
                              _filterTempNTC 0147  
