

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon May 06 12:59:36 2024

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	cinit,global,class=CODE,merge=1,delta=2
    14                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	inittext,global,class=CODE,delta=2
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext1,local,class=CONST,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	swtext2,local,class=CONST,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	intentry,global,class=CODE,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	swtext3,local,class=CONST,delta=2
    72                           	psect	text40,local,class=CODE,merge=1,delta=2
    73                           	psect	swtext4,local,class=CONST,delta=2
    74                           	psect	text41,local,class=CODE,merge=1,delta=2
    75                           	psect	text42,local,class=CODE,merge=1,delta=2
    76                           	psect	text43,local,class=CODE,merge=1,delta=2
    77                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text45,local,class=CODE,merge=1,delta=2
    79                           	psect	text46,local,class=CODE,merge=1,delta=2
    80                           	psect	text47,local,class=CODE,merge=1,delta=2
    81                           	dabs	1,0x7E,2
    82  0000                     
    83                           ; Version 2.00
    84                           ; Generated 27/05/2018 GMT
    85                           ; 
    86                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC16F1936 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  0110                     	;# 
   169  0111                     	;# 
   170  0112                     	;# 
   171  0113                     	;# 
   172  0114                     	;# 
   173  0115                     	;# 
   174  0116                     	;# 
   175  0117                     	;# 
   176  0118                     	;# 
   177  0119                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011D                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  0191                     	;# 
   184  0191                     	;# 
   185  0192                     	;# 
   186  0193                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0194                     	;# 
   190  0195                     	;# 
   191  0196                     	;# 
   192  0199                     	;# 
   193  019A                     	;# 
   194  019B                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019C                     	;# 
   199  019C                     	;# 
   200  019D                     	;# 
   201  019E                     	;# 
   202  019F                     	;# 
   203  020D                     	;# 
   204  0210                     	;# 
   205  0211                     	;# 
   206  0212                     	;# 
   207  0213                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0216                     	;# 
   212  0217                     	;# 
   213  0291                     	;# 
   214  0291                     	;# 
   215  0292                     	;# 
   216  0293                     	;# 
   217  0294                     	;# 
   218  0295                     	;# 
   219  0295                     	;# 
   220  0296                     	;# 
   221  0298                     	;# 
   222  0298                     	;# 
   223  0299                     	;# 
   224  029A                     	;# 
   225  029B                     	;# 
   226  029C                     	;# 
   227  029C                     	;# 
   228  029D                     	;# 
   229  029E                     	;# 
   230  029F                     	;# 
   231  0311                     	;# 
   232  0311                     	;# 
   233  0312                     	;# 
   234  0313                     	;# 
   235  0314                     	;# 
   236  0315                     	;# 
   237  0315                     	;# 
   238  0316                     	;# 
   239  0318                     	;# 
   240  0318                     	;# 
   241  0319                     	;# 
   242  031A                     	;# 
   243  031C                     	;# 
   244  031C                     	;# 
   245  031D                     	;# 
   246  031E                     	;# 
   247  0394                     	;# 
   248  0395                     	;# 
   249  0396                     	;# 
   250  0415                     	;# 
   251  0416                     	;# 
   252  0417                     	;# 
   253  041C                     	;# 
   254  041D                     	;# 
   255  041E                     	;# 
   256  0791                     	;# 
   257  0792                     	;# 
   258  0793                     	;# 
   259  0794                     	;# 
   260  0795                     	;# 
   261  0798                     	;# 
   262  0799                     	;# 
   263  07A0                     	;# 
   264  07A1                     	;# 
   265  07A3                     	;# 
   266  07A4                     	;# 
   267  07A6                     	;# 
   268  07A7                     	;# 
   269  07A9                     	;# 
   270  07AA                     	;# 
   271  0FE4                     	;# 
   272  0FE5                     	;# 
   273  0FE6                     	;# 
   274  0FE7                     	;# 
   275  0FE8                     	;# 
   276  0FE9                     	;# 
   277  0FEA                     	;# 
   278  0FEB                     	;# 
   279  0FED                     	;# 
   280  0FEE                     	;# 
   281  0FEF                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0013                     	;# 
   301  0015                     	;# 
   302  0016                     	;# 
   303  0016                     	;# 
   304  0017                     	;# 
   305  0018                     	;# 
   306  0019                     	;# 
   307  001A                     	;# 
   308  001B                     	;# 
   309  001C                     	;# 
   310  001E                     	;# 
   311  001F                     	;# 
   312  008C                     	;# 
   313  008D                     	;# 
   314  008E                     	;# 
   315  0090                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0093                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  010C                     	;# 
   331  010D                     	;# 
   332  010E                     	;# 
   333  0110                     	;# 
   334  0111                     	;# 
   335  0112                     	;# 
   336  0113                     	;# 
   337  0114                     	;# 
   338  0115                     	;# 
   339  0116                     	;# 
   340  0117                     	;# 
   341  0118                     	;# 
   342  0119                     	;# 
   343  011A                     	;# 
   344  011B                     	;# 
   345  011D                     	;# 
   346  018C                     	;# 
   347  018D                     	;# 
   348  0191                     	;# 
   349  0191                     	;# 
   350  0192                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0194                     	;# 
   355  0195                     	;# 
   356  0196                     	;# 
   357  0199                     	;# 
   358  019A                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019C                     	;# 
   364  019C                     	;# 
   365  019D                     	;# 
   366  019E                     	;# 
   367  019F                     	;# 
   368  020D                     	;# 
   369  0210                     	;# 
   370  0211                     	;# 
   371  0212                     	;# 
   372  0213                     	;# 
   373  0214                     	;# 
   374  0215                     	;# 
   375  0215                     	;# 
   376  0216                     	;# 
   377  0217                     	;# 
   378  0291                     	;# 
   379  0291                     	;# 
   380  0292                     	;# 
   381  0293                     	;# 
   382  0294                     	;# 
   383  0295                     	;# 
   384  0295                     	;# 
   385  0296                     	;# 
   386  0298                     	;# 
   387  0298                     	;# 
   388  0299                     	;# 
   389  029A                     	;# 
   390  029B                     	;# 
   391  029C                     	;# 
   392  029C                     	;# 
   393  029D                     	;# 
   394  029E                     	;# 
   395  029F                     	;# 
   396  0311                     	;# 
   397  0311                     	;# 
   398  0312                     	;# 
   399  0313                     	;# 
   400  0314                     	;# 
   401  0315                     	;# 
   402  0315                     	;# 
   403  0316                     	;# 
   404  0318                     	;# 
   405  0318                     	;# 
   406  0319                     	;# 
   407  031A                     	;# 
   408  031C                     	;# 
   409  031C                     	;# 
   410  031D                     	;# 
   411  031E                     	;# 
   412  0394                     	;# 
   413  0395                     	;# 
   414  0396                     	;# 
   415  0415                     	;# 
   416  0416                     	;# 
   417  0417                     	;# 
   418  041C                     	;# 
   419  041D                     	;# 
   420  041E                     	;# 
   421  0791                     	;# 
   422  0792                     	;# 
   423  0793                     	;# 
   424  0794                     	;# 
   425  0795                     	;# 
   426  0798                     	;# 
   427  0799                     	;# 
   428  07A0                     	;# 
   429  07A1                     	;# 
   430  07A3                     	;# 
   431  07A4                     	;# 
   432  07A6                     	;# 
   433  07A7                     	;# 
   434  07A9                     	;# 
   435  07AA                     	;# 
   436  0FE4                     	;# 
   437  0FE5                     	;# 
   438  0FE6                     	;# 
   439  0FE7                     	;# 
   440  0FE8                     	;# 
   441  0FE9                     	;# 
   442  0FEA                     	;# 
   443  0FEB                     	;# 
   444  0FED                     	;# 
   445  0FEE                     	;# 
   446  0FEF                     	;# 
   447  0000                     	;# 
   448  0001                     	;# 
   449  0002                     	;# 
   450  0003                     	;# 
   451  0004                     	;# 
   452  0005                     	;# 
   453  0006                     	;# 
   454  0007                     	;# 
   455  0008                     	;# 
   456  0009                     	;# 
   457  000A                     	;# 
   458  000B                     	;# 
   459  000C                     	;# 
   460  000D                     	;# 
   461  000E                     	;# 
   462  0010                     	;# 
   463  0011                     	;# 
   464  0012                     	;# 
   465  0013                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0016                     	;# 
   469  0017                     	;# 
   470  0018                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  008C                     	;# 
   478  008D                     	;# 
   479  008E                     	;# 
   480  0090                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0095                     	;# 
   485  0096                     	;# 
   486  0097                     	;# 
   487  0098                     	;# 
   488  0099                     	;# 
   489  009A                     	;# 
   490  009B                     	;# 
   491  009B                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009E                     	;# 
   495  010C                     	;# 
   496  010D                     	;# 
   497  010E                     	;# 
   498  0110                     	;# 
   499  0111                     	;# 
   500  0112                     	;# 
   501  0113                     	;# 
   502  0114                     	;# 
   503  0115                     	;# 
   504  0116                     	;# 
   505  0117                     	;# 
   506  0118                     	;# 
   507  0119                     	;# 
   508  011A                     	;# 
   509  011B                     	;# 
   510  011D                     	;# 
   511  018C                     	;# 
   512  018D                     	;# 
   513  0191                     	;# 
   514  0191                     	;# 
   515  0192                     	;# 
   516  0193                     	;# 
   517  0193                     	;# 
   518  0193                     	;# 
   519  0194                     	;# 
   520  0195                     	;# 
   521  0196                     	;# 
   522  0199                     	;# 
   523  019A                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019C                     	;# 
   529  019C                     	;# 
   530  019D                     	;# 
   531  019E                     	;# 
   532  019F                     	;# 
   533  020D                     	;# 
   534  0210                     	;# 
   535  0211                     	;# 
   536  0212                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0215                     	;# 
   540  0215                     	;# 
   541  0216                     	;# 
   542  0217                     	;# 
   543  0291                     	;# 
   544  0291                     	;# 
   545  0292                     	;# 
   546  0293                     	;# 
   547  0294                     	;# 
   548  0295                     	;# 
   549  0295                     	;# 
   550  0296                     	;# 
   551  0298                     	;# 
   552  0298                     	;# 
   553  0299                     	;# 
   554  029A                     	;# 
   555  029B                     	;# 
   556  029C                     	;# 
   557  029C                     	;# 
   558  029D                     	;# 
   559  029E                     	;# 
   560  029F                     	;# 
   561  0311                     	;# 
   562  0311                     	;# 
   563  0312                     	;# 
   564  0313                     	;# 
   565  0314                     	;# 
   566  0315                     	;# 
   567  0315                     	;# 
   568  0316                     	;# 
   569  0318                     	;# 
   570  0318                     	;# 
   571  0319                     	;# 
   572  031A                     	;# 
   573  031C                     	;# 
   574  031C                     	;# 
   575  031D                     	;# 
   576  031E                     	;# 
   577  0394                     	;# 
   578  0395                     	;# 
   579  0396                     	;# 
   580  0415                     	;# 
   581  0416                     	;# 
   582  0417                     	;# 
   583  041C                     	;# 
   584  041D                     	;# 
   585  041E                     	;# 
   586  0791                     	;# 
   587  0792                     	;# 
   588  0793                     	;# 
   589  0794                     	;# 
   590  0795                     	;# 
   591  0798                     	;# 
   592  0799                     	;# 
   593  07A0                     	;# 
   594  07A1                     	;# 
   595  07A3                     	;# 
   596  07A4                     	;# 
   597  07A6                     	;# 
   598  07A7                     	;# 
   599  07A9                     	;# 
   600  07AA                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0013                     	;# 
   631  0015                     	;# 
   632  0016                     	;# 
   633  0016                     	;# 
   634  0017                     	;# 
   635  0018                     	;# 
   636  0019                     	;# 
   637  001A                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  001E                     	;# 
   641  001F                     	;# 
   642  008C                     	;# 
   643  008D                     	;# 
   644  008E                     	;# 
   645  0090                     	;# 
   646  0091                     	;# 
   647  0092                     	;# 
   648  0093                     	;# 
   649  0095                     	;# 
   650  0096                     	;# 
   651  0097                     	;# 
   652  0098                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  0110                     	;# 
   664  0111                     	;# 
   665  0112                     	;# 
   666  0113                     	;# 
   667  0114                     	;# 
   668  0115                     	;# 
   669  0116                     	;# 
   670  0117                     	;# 
   671  0118                     	;# 
   672  0119                     	;# 
   673  011A                     	;# 
   674  011B                     	;# 
   675  011D                     	;# 
   676  018C                     	;# 
   677  018D                     	;# 
   678  0191                     	;# 
   679  0191                     	;# 
   680  0192                     	;# 
   681  0193                     	;# 
   682  0193                     	;# 
   683  0193                     	;# 
   684  0194                     	;# 
   685  0195                     	;# 
   686  0196                     	;# 
   687  0199                     	;# 
   688  019A                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019B                     	;# 
   693  019C                     	;# 
   694  019C                     	;# 
   695  019D                     	;# 
   696  019E                     	;# 
   697  019F                     	;# 
   698  020D                     	;# 
   699  0210                     	;# 
   700  0211                     	;# 
   701  0212                     	;# 
   702  0213                     	;# 
   703  0214                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0216                     	;# 
   707  0217                     	;# 
   708  0291                     	;# 
   709  0291                     	;# 
   710  0292                     	;# 
   711  0293                     	;# 
   712  0294                     	;# 
   713  0295                     	;# 
   714  0295                     	;# 
   715  0296                     	;# 
   716  0298                     	;# 
   717  0298                     	;# 
   718  0299                     	;# 
   719  029A                     	;# 
   720  029B                     	;# 
   721  029C                     	;# 
   722  029C                     	;# 
   723  029D                     	;# 
   724  029E                     	;# 
   725  029F                     	;# 
   726  0311                     	;# 
   727  0311                     	;# 
   728  0312                     	;# 
   729  0313                     	;# 
   730  0314                     	;# 
   731  0315                     	;# 
   732  0315                     	;# 
   733  0316                     	;# 
   734  0318                     	;# 
   735  0318                     	;# 
   736  0319                     	;# 
   737  031A                     	;# 
   738  031C                     	;# 
   739  031C                     	;# 
   740  031D                     	;# 
   741  031E                     	;# 
   742  0394                     	;# 
   743  0395                     	;# 
   744  0396                     	;# 
   745  0415                     	;# 
   746  0416                     	;# 
   747  0417                     	;# 
   748  041C                     	;# 
   749  041D                     	;# 
   750  041E                     	;# 
   751  0791                     	;# 
   752  0792                     	;# 
   753  0793                     	;# 
   754  0794                     	;# 
   755  0795                     	;# 
   756  0798                     	;# 
   757  0799                     	;# 
   758  07A0                     	;# 
   759  07A1                     	;# 
   760  07A3                     	;# 
   761  07A4                     	;# 
   762  07A6                     	;# 
   763  07A7                     	;# 
   764  07A9                     	;# 
   765  07AA                     	;# 
   766  0FE4                     	;# 
   767  0FE5                     	;# 
   768  0FE6                     	;# 
   769  0FE7                     	;# 
   770  0FE8                     	;# 
   771  0FE9                     	;# 
   772  0FEA                     	;# 
   773  0FEB                     	;# 
   774  0FED                     	;# 
   775  0FEE                     	;# 
   776  0FEF                     	;# 
   777  0000                     	;# 
   778  0001                     	;# 
   779  0002                     	;# 
   780  0003                     	;# 
   781  0004                     	;# 
   782  0005                     	;# 
   783  0006                     	;# 
   784  0007                     	;# 
   785  0008                     	;# 
   786  0009                     	;# 
   787  000A                     	;# 
   788  000B                     	;# 
   789  000C                     	;# 
   790  000D                     	;# 
   791  000E                     	;# 
   792  0010                     	;# 
   793  0011                     	;# 
   794  0012                     	;# 
   795  0013                     	;# 
   796  0015                     	;# 
   797  0016                     	;# 
   798  0016                     	;# 
   799  0017                     	;# 
   800  0018                     	;# 
   801  0019                     	;# 
   802  001A                     	;# 
   803  001B                     	;# 
   804  001C                     	;# 
   805  001E                     	;# 
   806  001F                     	;# 
   807  008C                     	;# 
   808  008D                     	;# 
   809  008E                     	;# 
   810  0090                     	;# 
   811  0091                     	;# 
   812  0092                     	;# 
   813  0093                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0098                     	;# 
   818  0099                     	;# 
   819  009A                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  010C                     	;# 
   826  010D                     	;# 
   827  010E                     	;# 
   828  0110                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  011A                     	;# 
   839  011B                     	;# 
   840  011D                     	;# 
   841  018C                     	;# 
   842  018D                     	;# 
   843  0191                     	;# 
   844  0191                     	;# 
   845  0192                     	;# 
   846  0193                     	;# 
   847  0193                     	;# 
   848  0193                     	;# 
   849  0194                     	;# 
   850  0195                     	;# 
   851  0196                     	;# 
   852  0199                     	;# 
   853  019A                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019C                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  020D                     	;# 
   864  0210                     	;# 
   865  0211                     	;# 
   866  0212                     	;# 
   867  0213                     	;# 
   868  0214                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0216                     	;# 
   872  0217                     	;# 
   873  0291                     	;# 
   874  0291                     	;# 
   875  0292                     	;# 
   876  0293                     	;# 
   877  0294                     	;# 
   878  0295                     	;# 
   879  0295                     	;# 
   880  0296                     	;# 
   881  0298                     	;# 
   882  0298                     	;# 
   883  0299                     	;# 
   884  029A                     	;# 
   885  029B                     	;# 
   886  029C                     	;# 
   887  029C                     	;# 
   888  029D                     	;# 
   889  029E                     	;# 
   890  029F                     	;# 
   891  0311                     	;# 
   892  0311                     	;# 
   893  0312                     	;# 
   894  0313                     	;# 
   895  0314                     	;# 
   896  0315                     	;# 
   897  0315                     	;# 
   898  0316                     	;# 
   899  0318                     	;# 
   900  0318                     	;# 
   901  0319                     	;# 
   902  031A                     	;# 
   903  031C                     	;# 
   904  031C                     	;# 
   905  031D                     	;# 
   906  031E                     	;# 
   907  0394                     	;# 
   908  0395                     	;# 
   909  0396                     	;# 
   910  0415                     	;# 
   911  0416                     	;# 
   912  0417                     	;# 
   913  041C                     	;# 
   914  041D                     	;# 
   915  041E                     	;# 
   916  0791                     	;# 
   917  0792                     	;# 
   918  0793                     	;# 
   919  0794                     	;# 
   920  0795                     	;# 
   921  0798                     	;# 
   922  0799                     	;# 
   923  07A0                     	;# 
   924  07A1                     	;# 
   925  07A3                     	;# 
   926  07A4                     	;# 
   927  07A6                     	;# 
   928  07A7                     	;# 
   929  07A9                     	;# 
   930  07AA                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0010                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0013                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  001E                     	;# 
   971  001F                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0093                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0098                     	;# 
   983  0099                     	;# 
   984  009A                     	;# 
   985  009B                     	;# 
   986  009B                     	;# 
   987  009C                     	;# 
   988  009D                     	;# 
   989  009E                     	;# 
   990  010C                     	;# 
   991  010D                     	;# 
   992  010E                     	;# 
   993  0110                     	;# 
   994  0111                     	;# 
   995  0112                     	;# 
   996  0113                     	;# 
   997  0114                     	;# 
   998  0115                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  0118                     	;# 
  1002  0119                     	;# 
  1003  011A                     	;# 
  1004  011B                     	;# 
  1005  011D                     	;# 
  1006  018C                     	;# 
  1007  018D                     	;# 
  1008  0191                     	;# 
  1009  0191                     	;# 
  1010  0192                     	;# 
  1011  0193                     	;# 
  1012  0193                     	;# 
  1013  0193                     	;# 
  1014  0194                     	;# 
  1015  0195                     	;# 
  1016  0196                     	;# 
  1017  0199                     	;# 
  1018  019A                     	;# 
  1019  019B                     	;# 
  1020  019B                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019C                     	;# 
  1025  019D                     	;# 
  1026  019E                     	;# 
  1027  019F                     	;# 
  1028  020D                     	;# 
  1029  0210                     	;# 
  1030  0211                     	;# 
  1031  0212                     	;# 
  1032  0213                     	;# 
  1033  0214                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0291                     	;# 
  1039  0291                     	;# 
  1040  0292                     	;# 
  1041  0293                     	;# 
  1042  0294                     	;# 
  1043  0295                     	;# 
  1044  0295                     	;# 
  1045  0296                     	;# 
  1046  0298                     	;# 
  1047  0298                     	;# 
  1048  0299                     	;# 
  1049  029A                     	;# 
  1050  029B                     	;# 
  1051  029C                     	;# 
  1052  029C                     	;# 
  1053  029D                     	;# 
  1054  029E                     	;# 
  1055  029F                     	;# 
  1056  0311                     	;# 
  1057  0311                     	;# 
  1058  0312                     	;# 
  1059  0313                     	;# 
  1060  0314                     	;# 
  1061  0315                     	;# 
  1062  0315                     	;# 
  1063  0316                     	;# 
  1064  0318                     	;# 
  1065  0318                     	;# 
  1066  0319                     	;# 
  1067  031A                     	;# 
  1068  031C                     	;# 
  1069  031C                     	;# 
  1070  031D                     	;# 
  1071  031E                     	;# 
  1072  0394                     	;# 
  1073  0395                     	;# 
  1074  0396                     	;# 
  1075  0415                     	;# 
  1076  0416                     	;# 
  1077  0417                     	;# 
  1078  041C                     	;# 
  1079  041D                     	;# 
  1080  041E                     	;# 
  1081  0791                     	;# 
  1082  0792                     	;# 
  1083  0793                     	;# 
  1084  0794                     	;# 
  1085  0795                     	;# 
  1086  0798                     	;# 
  1087  0799                     	;# 
  1088  07A0                     	;# 
  1089  07A1                     	;# 
  1090  07A3                     	;# 
  1091  07A4                     	;# 
  1092  07A6                     	;# 
  1093  07A7                     	;# 
  1094  07A9                     	;# 
  1095  07AA                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000D                     	;# 
  1121  000E                     	;# 
  1122  0010                     	;# 
  1123  0011                     	;# 
  1124  0012                     	;# 
  1125  0013                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  001E                     	;# 
  1136  001F                     	;# 
  1137  008C                     	;# 
  1138  008D                     	;# 
  1139  008E                     	;# 
  1140  0090                     	;# 
  1141  0091                     	;# 
  1142  0092                     	;# 
  1143  0093                     	;# 
  1144  0095                     	;# 
  1145  0096                     	;# 
  1146  0097                     	;# 
  1147  0098                     	;# 
  1148  0099                     	;# 
  1149  009A                     	;# 
  1150  009B                     	;# 
  1151  009B                     	;# 
  1152  009C                     	;# 
  1153  009D                     	;# 
  1154  009E                     	;# 
  1155  010C                     	;# 
  1156  010D                     	;# 
  1157  010E                     	;# 
  1158  0110                     	;# 
  1159  0111                     	;# 
  1160  0112                     	;# 
  1161  0113                     	;# 
  1162  0114                     	;# 
  1163  0115                     	;# 
  1164  0116                     	;# 
  1165  0117                     	;# 
  1166  0118                     	;# 
  1167  0119                     	;# 
  1168  011A                     	;# 
  1169  011B                     	;# 
  1170  011D                     	;# 
  1171  018C                     	;# 
  1172  018D                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0193                     	;# 
  1179  0194                     	;# 
  1180  0195                     	;# 
  1181  0196                     	;# 
  1182  0199                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020D                     	;# 
  1194  0210                     	;# 
  1195  0211                     	;# 
  1196  0212                     	;# 
  1197  0213                     	;# 
  1198  0214                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0216                     	;# 
  1202  0217                     	;# 
  1203  0291                     	;# 
  1204  0291                     	;# 
  1205  0292                     	;# 
  1206  0293                     	;# 
  1207  0294                     	;# 
  1208  0295                     	;# 
  1209  0295                     	;# 
  1210  0296                     	;# 
  1211  0298                     	;# 
  1212  0298                     	;# 
  1213  0299                     	;# 
  1214  029A                     	;# 
  1215  029B                     	;# 
  1216  029C                     	;# 
  1217  029C                     	;# 
  1218  029D                     	;# 
  1219  029E                     	;# 
  1220  029F                     	;# 
  1221  0311                     	;# 
  1222  0311                     	;# 
  1223  0312                     	;# 
  1224  0313                     	;# 
  1225  0314                     	;# 
  1226  0315                     	;# 
  1227  0315                     	;# 
  1228  0316                     	;# 
  1229  0318                     	;# 
  1230  0318                     	;# 
  1231  0319                     	;# 
  1232  031A                     	;# 
  1233  031C                     	;# 
  1234  031C                     	;# 
  1235  031D                     	;# 
  1236  031E                     	;# 
  1237  0394                     	;# 
  1238  0395                     	;# 
  1239  0396                     	;# 
  1240  0415                     	;# 
  1241  0416                     	;# 
  1242  0417                     	;# 
  1243  041C                     	;# 
  1244  041D                     	;# 
  1245  041E                     	;# 
  1246  0791                     	;# 
  1247  0792                     	;# 
  1248  0793                     	;# 
  1249  0794                     	;# 
  1250  0795                     	;# 
  1251  0798                     	;# 
  1252  0799                     	;# 
  1253  07A0                     	;# 
  1254  07A1                     	;# 
  1255  07A3                     	;# 
  1256  07A4                     	;# 
  1257  07A6                     	;# 
  1258  07A7                     	;# 
  1259  07A9                     	;# 
  1260  07AA                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  0010                     	;# 
  1288  0011                     	;# 
  1289  0012                     	;# 
  1290  0013                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  001E                     	;# 
  1301  001F                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0090                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0093                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0098                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0110                     	;# 
  1324  0111                     	;# 
  1325  0112                     	;# 
  1326  0113                     	;# 
  1327  0114                     	;# 
  1328  0115                     	;# 
  1329  0116                     	;# 
  1330  0117                     	;# 
  1331  0118                     	;# 
  1332  0119                     	;# 
  1333  011A                     	;# 
  1334  011B                     	;# 
  1335  011D                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  0191                     	;# 
  1339  0191                     	;# 
  1340  0192                     	;# 
  1341  0193                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0199                     	;# 
  1348  019A                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019B                     	;# 
  1353  019C                     	;# 
  1354  019C                     	;# 
  1355  019D                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  020D                     	;# 
  1359  0210                     	;# 
  1360  0211                     	;# 
  1361  0212                     	;# 
  1362  0213                     	;# 
  1363  0214                     	;# 
  1364  0215                     	;# 
  1365  0215                     	;# 
  1366  0216                     	;# 
  1367  0217                     	;# 
  1368  0291                     	;# 
  1369  0291                     	;# 
  1370  0292                     	;# 
  1371  0293                     	;# 
  1372  0294                     	;# 
  1373  0295                     	;# 
  1374  0295                     	;# 
  1375  0296                     	;# 
  1376  0298                     	;# 
  1377  0298                     	;# 
  1378  0299                     	;# 
  1379  029A                     	;# 
  1380  029B                     	;# 
  1381  029C                     	;# 
  1382  029C                     	;# 
  1383  029D                     	;# 
  1384  029E                     	;# 
  1385  029F                     	;# 
  1386  0311                     	;# 
  1387  0311                     	;# 
  1388  0312                     	;# 
  1389  0313                     	;# 
  1390  0314                     	;# 
  1391  0315                     	;# 
  1392  0315                     	;# 
  1393  0316                     	;# 
  1394  0318                     	;# 
  1395  0318                     	;# 
  1396  0319                     	;# 
  1397  031A                     	;# 
  1398  031C                     	;# 
  1399  031C                     	;# 
  1400  031D                     	;# 
  1401  031E                     	;# 
  1402  0394                     	;# 
  1403  0395                     	;# 
  1404  0396                     	;# 
  1405  0415                     	;# 
  1406  0416                     	;# 
  1407  0417                     	;# 
  1408  041C                     	;# 
  1409  041D                     	;# 
  1410  041E                     	;# 
  1411  0791                     	;# 
  1412  0792                     	;# 
  1413  0793                     	;# 
  1414  0794                     	;# 
  1415  0795                     	;# 
  1416  0798                     	;# 
  1417  0799                     	;# 
  1418  07A0                     	;# 
  1419  07A1                     	;# 
  1420  07A3                     	;# 
  1421  07A4                     	;# 
  1422  07A6                     	;# 
  1423  07A7                     	;# 
  1424  07A9                     	;# 
  1425  07AA                     	;# 
  1426  0FE4                     	;# 
  1427  0FE5                     	;# 
  1428  0FE6                     	;# 
  1429  0FE7                     	;# 
  1430  0FE8                     	;# 
  1431  0FE9                     	;# 
  1432  0FEA                     	;# 
  1433  0FEB                     	;# 
  1434  0FED                     	;# 
  1435  0FEE                     	;# 
  1436  0FEF                     	;# 
  1437  0000                     	;# 
  1438  0001                     	;# 
  1439  0002                     	;# 
  1440  0003                     	;# 
  1441  0004                     	;# 
  1442  0005                     	;# 
  1443  0006                     	;# 
  1444  0007                     	;# 
  1445  0008                     	;# 
  1446  0009                     	;# 
  1447  000A                     	;# 
  1448  000B                     	;# 
  1449  000C                     	;# 
  1450  000D                     	;# 
  1451  000E                     	;# 
  1452  0010                     	;# 
  1453  0011                     	;# 
  1454  0012                     	;# 
  1455  0013                     	;# 
  1456  0015                     	;# 
  1457  0016                     	;# 
  1458  0016                     	;# 
  1459  0017                     	;# 
  1460  0018                     	;# 
  1461  0019                     	;# 
  1462  001A                     	;# 
  1463  001B                     	;# 
  1464  001C                     	;# 
  1465  001E                     	;# 
  1466  001F                     	;# 
  1467  008C                     	;# 
  1468  008D                     	;# 
  1469  008E                     	;# 
  1470  0090                     	;# 
  1471  0091                     	;# 
  1472  0092                     	;# 
  1473  0093                     	;# 
  1474  0095                     	;# 
  1475  0096                     	;# 
  1476  0097                     	;# 
  1477  0098                     	;# 
  1478  0099                     	;# 
  1479  009A                     	;# 
  1480  009B                     	;# 
  1481  009B                     	;# 
  1482  009C                     	;# 
  1483  009D                     	;# 
  1484  009E                     	;# 
  1485  010C                     	;# 
  1486  010D                     	;# 
  1487  010E                     	;# 
  1488  0110                     	;# 
  1489  0111                     	;# 
  1490  0112                     	;# 
  1491  0113                     	;# 
  1492  0114                     	;# 
  1493  0115                     	;# 
  1494  0116                     	;# 
  1495  0117                     	;# 
  1496  0118                     	;# 
  1497  0119                     	;# 
  1498  011A                     	;# 
  1499  011B                     	;# 
  1500  011D                     	;# 
  1501  018C                     	;# 
  1502  018D                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019C                     	;# 
  1519  019C                     	;# 
  1520  019D                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  020D                     	;# 
  1524  0210                     	;# 
  1525  0211                     	;# 
  1526  0212                     	;# 
  1527  0213                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0216                     	;# 
  1532  0217                     	;# 
  1533  0291                     	;# 
  1534  0291                     	;# 
  1535  0292                     	;# 
  1536  0293                     	;# 
  1537  0294                     	;# 
  1538  0295                     	;# 
  1539  0295                     	;# 
  1540  0296                     	;# 
  1541  0298                     	;# 
  1542  0298                     	;# 
  1543  0299                     	;# 
  1544  029A                     	;# 
  1545  029B                     	;# 
  1546  029C                     	;# 
  1547  029C                     	;# 
  1548  029D                     	;# 
  1549  029E                     	;# 
  1550  029F                     	;# 
  1551  0311                     	;# 
  1552  0311                     	;# 
  1553  0312                     	;# 
  1554  0313                     	;# 
  1555  0314                     	;# 
  1556  0315                     	;# 
  1557  0315                     	;# 
  1558  0316                     	;# 
  1559  0318                     	;# 
  1560  0318                     	;# 
  1561  0319                     	;# 
  1562  031A                     	;# 
  1563  031C                     	;# 
  1564  031C                     	;# 
  1565  031D                     	;# 
  1566  031E                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0415                     	;# 
  1571  0416                     	;# 
  1572  0417                     	;# 
  1573  041C                     	;# 
  1574  041D                     	;# 
  1575  041E                     	;# 
  1576  0791                     	;# 
  1577  0792                     	;# 
  1578  0793                     	;# 
  1579  0794                     	;# 
  1580  0795                     	;# 
  1581  0798                     	;# 
  1582  0799                     	;# 
  1583  07A0                     	;# 
  1584  07A1                     	;# 
  1585  07A3                     	;# 
  1586  07A4                     	;# 
  1587  07A6                     	;# 
  1588  07A7                     	;# 
  1589  07A9                     	;# 
  1590  07AA                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0013                     	;# 
  1621  0015                     	;# 
  1622  0016                     	;# 
  1623  0016                     	;# 
  1624  0017                     	;# 
  1625  0018                     	;# 
  1626  0019                     	;# 
  1627  001A                     	;# 
  1628  001B                     	;# 
  1629  001C                     	;# 
  1630  001E                     	;# 
  1631  001F                     	;# 
  1632  008C                     	;# 
  1633  008D                     	;# 
  1634  008E                     	;# 
  1635  0090                     	;# 
  1636  0091                     	;# 
  1637  0092                     	;# 
  1638  0093                     	;# 
  1639  0095                     	;# 
  1640  0096                     	;# 
  1641  0097                     	;# 
  1642  0098                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0110                     	;# 
  1654  0111                     	;# 
  1655  0112                     	;# 
  1656  0113                     	;# 
  1657  0114                     	;# 
  1658  0115                     	;# 
  1659  0116                     	;# 
  1660  0117                     	;# 
  1661  0118                     	;# 
  1662  0119                     	;# 
  1663  011A                     	;# 
  1664  011B                     	;# 
  1665  011D                     	;# 
  1666  018C                     	;# 
  1667  018D                     	;# 
  1668  0191                     	;# 
  1669  0191                     	;# 
  1670  0192                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0193                     	;# 
  1674  0194                     	;# 
  1675  0195                     	;# 
  1676  0196                     	;# 
  1677  0199                     	;# 
  1678  019A                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019C                     	;# 
  1685  019D                     	;# 
  1686  019E                     	;# 
  1687  019F                     	;# 
  1688  020D                     	;# 
  1689  0210                     	;# 
  1690  0211                     	;# 
  1691  0212                     	;# 
  1692  0213                     	;# 
  1693  0214                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0294                     	;# 
  1703  0295                     	;# 
  1704  0295                     	;# 
  1705  0296                     	;# 
  1706  0298                     	;# 
  1707  0298                     	;# 
  1708  0299                     	;# 
  1709  029A                     	;# 
  1710  029B                     	;# 
  1711  029C                     	;# 
  1712  029C                     	;# 
  1713  029D                     	;# 
  1714  029E                     	;# 
  1715  029F                     	;# 
  1716  0311                     	;# 
  1717  0311                     	;# 
  1718  0312                     	;# 
  1719  0313                     	;# 
  1720  0314                     	;# 
  1721  0315                     	;# 
  1722  0315                     	;# 
  1723  0316                     	;# 
  1724  0318                     	;# 
  1725  0318                     	;# 
  1726  0319                     	;# 
  1727  031A                     	;# 
  1728  031C                     	;# 
  1729  031C                     	;# 
  1730  031D                     	;# 
  1731  031E                     	;# 
  1732  0394                     	;# 
  1733  0395                     	;# 
  1734  0396                     	;# 
  1735  0415                     	;# 
  1736  0416                     	;# 
  1737  0417                     	;# 
  1738  041C                     	;# 
  1739  041D                     	;# 
  1740  041E                     	;# 
  1741  0791                     	;# 
  1742  0792                     	;# 
  1743  0793                     	;# 
  1744  0794                     	;# 
  1745  0795                     	;# 
  1746  0798                     	;# 
  1747  0799                     	;# 
  1748  07A0                     	;# 
  1749  07A1                     	;# 
  1750  07A3                     	;# 
  1751  07A4                     	;# 
  1752  07A6                     	;# 
  1753  07A7                     	;# 
  1754  07A9                     	;# 
  1755  07AA                     	;# 
  1756  0FE4                     	;# 
  1757  0FE5                     	;# 
  1758  0FE6                     	;# 
  1759  0FE7                     	;# 
  1760  0FE8                     	;# 
  1761  0FE9                     	;# 
  1762  0FEA                     	;# 
  1763  0FEB                     	;# 
  1764  0FED                     	;# 
  1765  0FEE                     	;# 
  1766  0FEF                     	;# 
  1767  0000                     	;# 
  1768  0001                     	;# 
  1769  0002                     	;# 
  1770  0003                     	;# 
  1771  0004                     	;# 
  1772  0005                     	;# 
  1773  0006                     	;# 
  1774  0007                     	;# 
  1775  0008                     	;# 
  1776  0009                     	;# 
  1777  000A                     	;# 
  1778  000B                     	;# 
  1779  000C                     	;# 
  1780  000D                     	;# 
  1781  000E                     	;# 
  1782  0010                     	;# 
  1783  0011                     	;# 
  1784  0012                     	;# 
  1785  0013                     	;# 
  1786  0015                     	;# 
  1787  0016                     	;# 
  1788  0016                     	;# 
  1789  0017                     	;# 
  1790  0018                     	;# 
  1791  0019                     	;# 
  1792  001A                     	;# 
  1793  001B                     	;# 
  1794  001C                     	;# 
  1795  001E                     	;# 
  1796  001F                     	;# 
  1797  008C                     	;# 
  1798  008D                     	;# 
  1799  008E                     	;# 
  1800  0090                     	;# 
  1801  0091                     	;# 
  1802  0092                     	;# 
  1803  0093                     	;# 
  1804  0095                     	;# 
  1805  0096                     	;# 
  1806  0097                     	;# 
  1807  0098                     	;# 
  1808  0099                     	;# 
  1809  009A                     	;# 
  1810  009B                     	;# 
  1811  009B                     	;# 
  1812  009C                     	;# 
  1813  009D                     	;# 
  1814  009E                     	;# 
  1815  010C                     	;# 
  1816  010D                     	;# 
  1817  010E                     	;# 
  1818  0110                     	;# 
  1819  0111                     	;# 
  1820  0112                     	;# 
  1821  0113                     	;# 
  1822  0114                     	;# 
  1823  0115                     	;# 
  1824  0116                     	;# 
  1825  0117                     	;# 
  1826  0118                     	;# 
  1827  0119                     	;# 
  1828  011A                     	;# 
  1829  011B                     	;# 
  1830  011D                     	;# 
  1831  018C                     	;# 
  1832  018D                     	;# 
  1833  0191                     	;# 
  1834  0191                     	;# 
  1835  0192                     	;# 
  1836  0193                     	;# 
  1837  0193                     	;# 
  1838  0193                     	;# 
  1839  0194                     	;# 
  1840  0195                     	;# 
  1841  0196                     	;# 
  1842  0199                     	;# 
  1843  019A                     	;# 
  1844  019B                     	;# 
  1845  019B                     	;# 
  1846  019B                     	;# 
  1847  019B                     	;# 
  1848  019C                     	;# 
  1849  019C                     	;# 
  1850  019D                     	;# 
  1851  019E                     	;# 
  1852  019F                     	;# 
  1853  020D                     	;# 
  1854  0210                     	;# 
  1855  0211                     	;# 
  1856  0212                     	;# 
  1857  0213                     	;# 
  1858  0214                     	;# 
  1859  0215                     	;# 
  1860  0215                     	;# 
  1861  0216                     	;# 
  1862  0217                     	;# 
  1863  0291                     	;# 
  1864  0291                     	;# 
  1865  0292                     	;# 
  1866  0293                     	;# 
  1867  0294                     	;# 
  1868  0295                     	;# 
  1869  0295                     	;# 
  1870  0296                     	;# 
  1871  0298                     	;# 
  1872  0298                     	;# 
  1873  0299                     	;# 
  1874  029A                     	;# 
  1875  029B                     	;# 
  1876  029C                     	;# 
  1877  029C                     	;# 
  1878  029D                     	;# 
  1879  029E                     	;# 
  1880  029F                     	;# 
  1881  0311                     	;# 
  1882  0311                     	;# 
  1883  0312                     	;# 
  1884  0313                     	;# 
  1885  0314                     	;# 
  1886  0315                     	;# 
  1887  0315                     	;# 
  1888  0316                     	;# 
  1889  0318                     	;# 
  1890  0318                     	;# 
  1891  0319                     	;# 
  1892  031A                     	;# 
  1893  031C                     	;# 
  1894  031C                     	;# 
  1895  031D                     	;# 
  1896  031E                     	;# 
  1897  0394                     	;# 
  1898  0395                     	;# 
  1899  0396                     	;# 
  1900  0415                     	;# 
  1901  0416                     	;# 
  1902  0417                     	;# 
  1903  041C                     	;# 
  1904  041D                     	;# 
  1905  041E                     	;# 
  1906  0791                     	;# 
  1907  0792                     	;# 
  1908  0793                     	;# 
  1909  0794                     	;# 
  1910  0795                     	;# 
  1911  0798                     	;# 
  1912  0799                     	;# 
  1913  07A0                     	;# 
  1914  07A1                     	;# 
  1915  07A3                     	;# 
  1916  07A4                     	;# 
  1917  07A6                     	;# 
  1918  07A7                     	;# 
  1919  07A9                     	;# 
  1920  07AA                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932                           
  1933                           	psect	idataBANK0
  1934  07FE                     __pidataBANK0:	
  1935                           
  1936                           ;initializer for _ui8_selected_lid
  1937  07FE  3480               	retlw	128
  1938                           
  1939                           	psect	idataBANK1
  1940  1D6A                     __pidataBANK1:	
  1941                           
  1942                           ;initializer for _ui16_I_cal_Ph3
  1943  1D6A  3401               	retlw	1
  1944  1D6B  3400               	retlw	0
  1945                           
  1946                           ;initializer for _ui16_I_cal_Ph2
  1947  1D6C  3401               	retlw	1
  1948  1D6D  3400               	retlw	0
  1949                           
  1950                           ;initializer for _ui16_I_cal_Ph1
  1951  1D6E  3401               	retlw	1
  1952  1D6F  3400               	retlw	0
  1953                           
  1954                           ;initializer for _wkpoint
  1955  1D70  3401               	retlw	1
  1956                           
  1957                           	psect	idataBANK2
  1958  1D79                     __pidataBANK2:	
  1959                           
  1960                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  1961  1D79  3480               	retlw	128
  1962  1D7A  3438               	retlw	56
  1963  1D7B  3401               	retlw	1
  1964  1D7C  3400               	retlw	0
  1965                           
  1966                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  1967  1D7D  3401               	retlw	1
  1968                           
  1969                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  1970  1D7E  3401               	retlw	1
  1971                           
  1972                           ;initializer for _ui8_failure
  1973  1D7F  3407               	retlw	7
  1974                           
  1975                           ;initializer for _ict_stamp
  1976  1D80  3401               	retlw	1
  1977                           
  1978                           	psect	stringtext1
  1979  1000                     __pstringtext1:	
  1980  1000                     _PWM_trans_table:	
  1981  1000  3400               	retlw	0
  1982  1001  3400               	retlw	0
  1983  1002  3400               	retlw	0
  1984  1003  3400               	retlw	0
  1985  1004  3400               	retlw	0
  1986  1005  3400               	retlw	0
  1987  1006  3400               	retlw	0
  1988  1007  3400               	retlw	0
  1989  1008  3400               	retlw	0
  1990  1009  3400               	retlw	0
  1991  100A  3400               	retlw	0
  1992  100B  3400               	retlw	0
  1993  100C  3400               	retlw	0
  1994  100D  3400               	retlw	0
  1995  100E  3400               	retlw	0
  1996  100F  3400               	retlw	0
  1997  1010  3400               	retlw	0
  1998  1011  3400               	retlw	0
  1999  1012  3400               	retlw	0
  2000  1013  3400               	retlw	0
  2001  1014  34B5               	retlw	181
  2002  1015  3400               	retlw	0
  2003  1016  34B5               	retlw	181
  2004  1017  3400               	retlw	0
  2005  1018  34B5               	retlw	181
  2006  1019  3400               	retlw	0
  2007  101A  34B5               	retlw	181
  2008  101B  3400               	retlw	0
  2009  101C  34B5               	retlw	181
  2010  101D  3400               	retlw	0
  2011  101E  34B5               	retlw	181
  2012  101F  3400               	retlw	0
  2013  1020  34B5               	retlw	181
  2014  1021  3400               	retlw	0
  2015  1022  34B5               	retlw	181
  2016  1023  3400               	retlw	0
  2017  1024  34B5               	retlw	181
  2018  1025  3400               	retlw	0
  2019  1026  34B5               	retlw	181
  2020  1027  3400               	retlw	0
  2021  1028  34B5               	retlw	181
  2022  1029  3400               	retlw	0
  2023  102A  34B6               	retlw	182
  2024  102B  3400               	retlw	0
  2025  102C  34B8               	retlw	184
  2026  102D  3400               	retlw	0
  2027  102E  34B9               	retlw	185
  2028  102F  3400               	retlw	0
  2029  1030  34BA               	retlw	186
  2030  1031  3400               	retlw	0
  2031  1032  34BB               	retlw	187
  2032  1033  3400               	retlw	0
  2033  1034  34BD               	retlw	189
  2034  1035  3400               	retlw	0
  2035  1036  34BE               	retlw	190
  2036  1037  3400               	retlw	0
  2037  1038  34BF               	retlw	191
  2038  1039  3400               	retlw	0
  2039  103A  34C1               	retlw	193
  2040  103B  3400               	retlw	0
  2041  103C  34C2               	retlw	194
  2042  103D  3400               	retlw	0
  2043  103E  34C3               	retlw	195
  2044  103F  3400               	retlw	0
  2045  1040  34C4               	retlw	196
  2046  1041  3400               	retlw	0
  2047  1042  34C6               	retlw	198
  2048  1043  3400               	retlw	0
  2049  1044  34C7               	retlw	199
  2050  1045  3400               	retlw	0
  2051  1046  34C8               	retlw	200
  2052  1047  3400               	retlw	0
  2053  1048  34CA               	retlw	202
  2054  1049  3400               	retlw	0
  2055  104A  34CB               	retlw	203
  2056  104B  3400               	retlw	0
  2057  104C  34CC               	retlw	204
  2058  104D  3400               	retlw	0
  2059  104E  34CD               	retlw	205
  2060  104F  3400               	retlw	0
  2061  1050  34CF               	retlw	207
  2062  1051  3400               	retlw	0
  2063  1052  34D0               	retlw	208
  2064  1053  3400               	retlw	0
  2065  1054  34D1               	retlw	209
  2066  1055  3400               	retlw	0
  2067  1056  34D3               	retlw	211
  2068  1057  3400               	retlw	0
  2069  1058  34D4               	retlw	212
  2070  1059  3400               	retlw	0
  2071  105A  34D5               	retlw	213
  2072  105B  3400               	retlw	0
  2073  105C  34D6               	retlw	214
  2074  105D  3400               	retlw	0
  2075  105E  34D8               	retlw	216
  2076  105F  3400               	retlw	0
  2077  1060  34D9               	retlw	217
  2078  1061  3400               	retlw	0
  2079  1062  34DA               	retlw	218
  2080  1063  3400               	retlw	0
  2081  1064  34DC               	retlw	220
  2082  1065  3400               	retlw	0
  2083  1066  34DD               	retlw	221
  2084  1067  3400               	retlw	0
  2085  1068  34DE               	retlw	222
  2086  1069  3400               	retlw	0
  2087  106A  34E0               	retlw	224
  2088  106B  3400               	retlw	0
  2089  106C  34E1               	retlw	225
  2090  106D  3400               	retlw	0
  2091  106E  34E2               	retlw	226
  2092  106F  3400               	retlw	0
  2093  1070  34E3               	retlw	227
  2094  1071  3400               	retlw	0
  2095  1072  34E5               	retlw	229
  2096  1073  3400               	retlw	0
  2097  1074  34E6               	retlw	230
  2098  1075  3400               	retlw	0
  2099  1076  34E7               	retlw	231
  2100  1077  3400               	retlw	0
  2101  1078  34E9               	retlw	233
  2102  1079  3400               	retlw	0
  2103  107A  34EA               	retlw	234
  2104  107B  3400               	retlw	0
  2105  107C  34EB               	retlw	235
  2106  107D  3400               	retlw	0
  2107  107E  34EC               	retlw	236
  2108  107F  3400               	retlw	0
  2109  1080  34EE               	retlw	238
  2110  1081  3400               	retlw	0
  2111  1082  34EF               	retlw	239
  2112  1083  3400               	retlw	0
  2113  1084  34F0               	retlw	240
  2114  1085  3400               	retlw	0
  2115  1086  34F2               	retlw	242
  2116  1087  3400               	retlw	0
  2117  1088  34F3               	retlw	243
  2118  1089  3400               	retlw	0
  2119  108A  34F4               	retlw	244
  2120  108B  3400               	retlw	0
  2121  108C  34F5               	retlw	245
  2122  108D  3400               	retlw	0
  2123  108E  34F7               	retlw	247
  2124  108F  3400               	retlw	0
  2125  1090  34F8               	retlw	248
  2126  1091  3400               	retlw	0
  2127  1092  34F9               	retlw	249
  2128  1093  3400               	retlw	0
  2129  1094  34FB               	retlw	251
  2130  1095  3400               	retlw	0
  2131  1096  34FC               	retlw	252
  2132  1097  3400               	retlw	0
  2133  1098  34FD               	retlw	253
  2134  1099  3400               	retlw	0
  2135  109A  34FE               	retlw	254
  2136  109B  3400               	retlw	0
  2137  109C  3400               	retlw	0
  2138  109D  3401               	retlw	1
  2139  109E  3401               	retlw	1
  2140  109F  3401               	retlw	1
  2141  10A0  3402               	retlw	2
  2142  10A1  3401               	retlw	1
  2143  10A2  3404               	retlw	4
  2144  10A3  3401               	retlw	1
  2145  10A4  3405               	retlw	5
  2146  10A5  3401               	retlw	1
  2147  10A6  3406               	retlw	6
  2148  10A7  3401               	retlw	1
  2149  10A8  3407               	retlw	7
  2150  10A9  3401               	retlw	1
  2151  10AA  3409               	retlw	9
  2152  10AB  3401               	retlw	1
  2153  10AC  340A               	retlw	10
  2154  10AD  3401               	retlw	1
  2155  10AE  340B               	retlw	11
  2156  10AF  3401               	retlw	1
  2157  10B0  340D               	retlw	13
  2158  10B1  3401               	retlw	1
  2159  10B2  340E               	retlw	14
  2160  10B3  3401               	retlw	1
  2161  10B4  340F               	retlw	15
  2162  10B5  3401               	retlw	1
  2163  10B6  3410               	retlw	16
  2164  10B7  3401               	retlw	1
  2165  10B8  3412               	retlw	18
  2166  10B9  3401               	retlw	1
  2167  10BA  3413               	retlw	19
  2168  10BB  3401               	retlw	1
  2169  10BC  3414               	retlw	20
  2170  10BD  3401               	retlw	1
  2171  10BE  3416               	retlw	22
  2172  10BF  3401               	retlw	1
  2173  10C0  3417               	retlw	23
  2174  10C1  3401               	retlw	1
  2175  10C2  3418               	retlw	24
  2176  10C3  3401               	retlw	1
  2177  10C4  3419               	retlw	25
  2178  10C5  3401               	retlw	1
  2179  10C6  341B               	retlw	27
  2180  10C7  3401               	retlw	1
  2181  10C8  341C               	retlw	28
  2182  10C9  3401               	retlw	1
  2183  10CA  341D               	retlw	29
  2184  10CB  3401               	retlw	1
  2185  10CC  341F               	retlw	31
  2186  10CD  3401               	retlw	1
  2187  10CE  3420               	retlw	32
  2188  10CF  3401               	retlw	1
  2189  10D0  3421               	retlw	33
  2190  10D1  3401               	retlw	1
  2191  10D2  3422               	retlw	34
  2192  10D3  3401               	retlw	1
  2193  10D4  3424               	retlw	36
  2194  10D5  3401               	retlw	1
  2195  10D6  3425               	retlw	37
  2196  10D7  3401               	retlw	1
  2197  10D8  3426               	retlw	38
  2198  10D9  3401               	retlw	1
  2199  10DA  3428               	retlw	40
  2200  10DB  3401               	retlw	1
  2201  10DC  3429               	retlw	41
  2202  10DD  3401               	retlw	1
  2203  10DE  342A               	retlw	42
  2204  10DF  3401               	retlw	1
  2205  10E0  342C               	retlw	44
  2206  10E1  3401               	retlw	1
  2207  10E2  342D               	retlw	45
  2208  10E3  3401               	retlw	1
  2209  10E4  342E               	retlw	46
  2210  10E5  3401               	retlw	1
  2211  10E6  342F               	retlw	47
  2212  10E7  3401               	retlw	1
  2213  10E8  3431               	retlw	49
  2214  10E9  3401               	retlw	1
  2215  10EA  3432               	retlw	50
  2216  10EB  3401               	retlw	1
  2217  10EC  3433               	retlw	51
  2218  10ED  3401               	retlw	1
  2219  10EE  3435               	retlw	53
  2220  10EF  3401               	retlw	1
  2221  10F0  3436               	retlw	54
  2222  10F1  3401               	retlw	1
  2223  10F2  3437               	retlw	55
  2224  10F3  3401               	retlw	1
  2225  10F4  3438               	retlw	56
  2226  10F5  3401               	retlw	1
  2227  10F6  343A               	retlw	58
  2228  10F7  3401               	retlw	1
  2229  10F8  343B               	retlw	59
  2230  10F9  3401               	retlw	1
  2231  10FA  343C               	retlw	60
  2232  10FB  3401               	retlw	1
  2233  10FC  343E               	retlw	62
  2234  10FD  3401               	retlw	1
  2235  10FE  343F               	retlw	63
  2236  10FF  3401               	retlw	1
  2237  1100  3440               	retlw	64
  2238  1101  3401               	retlw	1
  2239  1102  3441               	retlw	65
  2240  1103  3401               	retlw	1
  2241  1104  3443               	retlw	67
  2242  1105  3401               	retlw	1
  2243  1106  3444               	retlw	68
  2244  1107  3401               	retlw	1
  2245  1108  3445               	retlw	69
  2246  1109  3401               	retlw	1
  2247  110A  3447               	retlw	71
  2248  110B  3401               	retlw	1
  2249  110C  3448               	retlw	72
  2250  110D  3401               	retlw	1
  2251  110E  3449               	retlw	73
  2252  110F  3401               	retlw	1
  2253  1110  344A               	retlw	74
  2254  1111  3401               	retlw	1
  2255  1112  344C               	retlw	76
  2256  1113  3401               	retlw	1
  2257  1114  344D               	retlw	77
  2258  1115  3401               	retlw	1
  2259  1116  344E               	retlw	78
  2260  1117  3401               	retlw	1
  2261  1118  3450               	retlw	80
  2262  1119  3401               	retlw	1
  2263  111A  3451               	retlw	81
  2264  111B  3401               	retlw	1
  2265  111C  3452               	retlw	82
  2266  111D  3401               	retlw	1
  2267  111E  3453               	retlw	83
  2268  111F  3401               	retlw	1
  2269  1120  3455               	retlw	85
  2270  1121  3401               	retlw	1
  2271  1122  3456               	retlw	86
  2272  1123  3401               	retlw	1
  2273  1124  3457               	retlw	87
  2274  1125  3401               	retlw	1
  2275  1126  3459               	retlw	89
  2276  1127  3401               	retlw	1
  2277  1128  345A               	retlw	90
  2278  1129  3401               	retlw	1
  2279  112A  345B               	retlw	91
  2280  112B  3401               	retlw	1
  2281  112C  345C               	retlw	92
  2282  112D  3401               	retlw	1
  2283  112E  345E               	retlw	94
  2284  112F  3401               	retlw	1
  2285  1130  345F               	retlw	95
  2286  1131  3401               	retlw	1
  2287  1132  3460               	retlw	96
  2288  1133  3401               	retlw	1
  2289  1134  3462               	retlw	98
  2290  1135  3401               	retlw	1
  2291  1136  3463               	retlw	99
  2292  1137  3401               	retlw	1
  2293  1138  3464               	retlw	100
  2294  1139  3401               	retlw	1
  2295  113A  3465               	retlw	101
  2296  113B  3401               	retlw	1
  2297  113C  3467               	retlw	103
  2298  113D  3401               	retlw	1
  2299  113E  3468               	retlw	104
  2300  113F  3401               	retlw	1
  2301  1140  3469               	retlw	105
  2302  1141  3401               	retlw	1
  2303  1142  346B               	retlw	107
  2304  1143  3401               	retlw	1
  2305  1144  346C               	retlw	108
  2306  1145  3401               	retlw	1
  2307  1146  346D               	retlw	109
  2308  1147  3401               	retlw	1
  2309  1148  346F               	retlw	111
  2310  1149  3401               	retlw	1
  2311  114A  3470               	retlw	112
  2312  114B  3401               	retlw	1
  2313  114C  3471               	retlw	113
  2314  114D  3401               	retlw	1
  2315  114E  3472               	retlw	114
  2316  114F  3401               	retlw	1
  2317  1150  3474               	retlw	116
  2318  1151  3401               	retlw	1
  2319  1152  3475               	retlw	117
  2320  1153  3401               	retlw	1
  2321  1154  3476               	retlw	118
  2322  1155  3401               	retlw	1
  2323  1156  3478               	retlw	120
  2324  1157  3401               	retlw	1
  2325  1158  3479               	retlw	121
  2326  1159  3401               	retlw	1
  2327  115A  347A               	retlw	122
  2328  115B  3401               	retlw	1
  2329  115C  347B               	retlw	123
  2330  115D  3401               	retlw	1
  2331  115E  347D               	retlw	125
  2332  115F  3401               	retlw	1
  2333  1160  347E               	retlw	126
  2334  1161  3401               	retlw	1
  2335  1162  347F               	retlw	127
  2336  1163  3401               	retlw	1
  2337  1164  3481               	retlw	129
  2338  1165  3401               	retlw	1
  2339  1166  3482               	retlw	130
  2340  1167  3401               	retlw	1
  2341  1168  3483               	retlw	131
  2342  1169  3401               	retlw	1
  2343  116A  3484               	retlw	132
  2344  116B  3401               	retlw	1
  2345  116C  3486               	retlw	134
  2346  116D  3401               	retlw	1
  2347  116E  3487               	retlw	135
  2348  116F  3401               	retlw	1
  2349  1170  3488               	retlw	136
  2350  1171  3401               	retlw	1
  2351  1172  348A               	retlw	138
  2352  1173  3401               	retlw	1
  2353  1174  348B               	retlw	139
  2354  1175  3401               	retlw	1
  2355  1176  348C               	retlw	140
  2356  1177  3401               	retlw	1
  2357  1178  348D               	retlw	141
  2358  1179  3401               	retlw	1
  2359  117A  348F               	retlw	143
  2360  117B  3401               	retlw	1
  2361  117C  3490               	retlw	144
  2362  117D  3401               	retlw	1
  2363  117E  3490               	retlw	144
  2364  117F  3401               	retlw	1
  2365  1180  3490               	retlw	144
  2366  1181  3401               	retlw	1
  2367  1182  3490               	retlw	144
  2368  1183  3401               	retlw	1
  2369  1184  3490               	retlw	144
  2370  1185  3401               	retlw	1
  2371  1186  3490               	retlw	144
  2372  1187  3401               	retlw	1
  2373  1188  3490               	retlw	144
  2374  1189  3401               	retlw	1
  2375  118A  3490               	retlw	144
  2376  118B  3401               	retlw	1
  2377  118C  3490               	retlw	144
  2378  118D  3401               	retlw	1
  2379  118E  3490               	retlw	144
  2380  118F  3401               	retlw	1
  2381  1190  3490               	retlw	144
  2382  1191  3401               	retlw	1
  2383  1192  3490               	retlw	144
  2384  1193  3401               	retlw	1
  2385  1194                     __end_of_PWM_trans_table:	
  2386                           
  2387                           	psect	stringtext2
  2388  1800                     __pstringtext2:	
  2389  1800                     _cBEMF_FILTER:	
  2390  1800  3400               	retlw	0
  2391  1801  3402               	retlw	2
  2392  1802  3404               	retlw	4
  2393  1803  3406               	retlw	6
  2394  1804  3408               	retlw	8
  2395  1805  340A               	retlw	10
  2396  1806  340C               	retlw	12
  2397  1807  340E               	retlw	14
  2398  1808  3410               	retlw	16
  2399  1809  3412               	retlw	18
  2400  180A  3414               	retlw	20
  2401  180B  3416               	retlw	22
  2402  180C  3418               	retlw	24
  2403  180D  341A               	retlw	26
  2404  180E  341C               	retlw	28
  2405  180F  341E               	retlw	30
  2406  1810  3420               	retlw	32
  2407  1811  3422               	retlw	34
  2408  1812  3424               	retlw	36
  2409  1813  3426               	retlw	38
  2410  1814  3428               	retlw	40
  2411  1815  342A               	retlw	42
  2412  1816  342C               	retlw	44
  2413  1817  342E               	retlw	46
  2414  1818  3401               	retlw	1
  2415  1819  3401               	retlw	1
  2416  181A  3401               	retlw	1
  2417  181B  3436               	retlw	54
  2418  181C  3401               	retlw	1
  2419  181D  343A               	retlw	58
  2420  181E  343C               	retlw	60
  2421  181F  343E               	retlw	62
  2422  1820  3400               	retlw	0
  2423  1821  3402               	retlw	2
  2424  1822  3404               	retlw	4
  2425  1823  3406               	retlw	6
  2426  1824  3408               	retlw	8
  2427  1825  340A               	retlw	10
  2428  1826  340C               	retlw	12
  2429  1827  340E               	retlw	14
  2430  1828  3401               	retlw	1
  2431  1829  3401               	retlw	1
  2432  182A  3401               	retlw	1
  2433  182B  3416               	retlw	22
  2434  182C  3401               	retlw	1
  2435  182D  341A               	retlw	26
  2436  182E  341C               	retlw	28
  2437  182F  341E               	retlw	30
  2438  1830  3401               	retlw	1
  2439  1831  3401               	retlw	1
  2440  1832  3401               	retlw	1
  2441  1833  3426               	retlw	38
  2442  1834  3401               	retlw	1
  2443  1835  342A               	retlw	42
  2444  1836  342C               	retlw	44
  2445  1837  342E               	retlw	46
  2446  1838  3401               	retlw	1
  2447  1839  3401               	retlw	1
  2448  183A  3401               	retlw	1
  2449  183B  3436               	retlw	54
  2450  183C  3401               	retlw	1
  2451  183D  343A               	retlw	58
  2452  183E  343C               	retlw	60
  2453  183F  343E               	retlw	62
  2454  1840                     __end_of_cBEMF_FILTER:	
  2455                           
  2456                           	psect	stringtext3
  2457  1878                     __pstringtext3:	
  2458  1878                     _Sb2_Fixed_Power:	
  2459  1878  34CA               	retlw	202
  2460  1879  3400               	retlw	0
  2461  187A                     __end_of_Sb2_Fixed_Power:	
  2462                           
  2463                           	psect	nvBANK1
  2464  00EF                     __pnvBANK1:	
  2465  00EF                     _ui8_ResetMatlab:	
  2466  00EF                     	ds	1
  2467                           
  2468                           	psect	nvBANK3
  2469  01ED                     __pnvBANK3:	
  2470  01ED                     _ui16_Current_Thresh:	
  2471  01ED                     	ds	2
  2472                           
  2473                           	psect	nvBANK4
  2474  026E                     __pnvBANK4:	
  2475  026E                     _ui16_dryRun_Thresh:	
  2476  026E                     	ds	2
  2477  0017                     _TMR1H	set	23
  2478  0016                     _TMR1L	set	22
  2479  001A                     _TMR2	set	26
  2480  0015                     _TMR0	set	21
  2481  0018                     _T1CON	set	24
  2482  000B                     _INTCON	set	11
  2483  001C                     _T2CON	set	28
  2484  001B                     _PR2	set	27
  2485  00E2                     _TMR2ON	set	226
  2486  005D                     _TMR0IE	set	93
  2487  0064                     _RA4	set	100
  2488  009D                     _CCP4IF	set	157
  2489  009C                     _CCP3IF	set	156
  2490  008A                     _CCP1IF	set	138
  2491  0090                     _CCP2IF	set	144
  2492  009E                     _CCP5IF	set	158
  2493  009B                     _TMR6IF	set	155
  2494  0089                     _TMR2IF	set	137
  2495  0099                     _TMR4IF	set	153
  2496  0088                     _TMR1IF	set	136
  2497  0075                     _RC5	set	117
  2498  005F                     _GIE	set	95
  2499  005E                     _PEIE	set	94
  2500  0097                     _WDTCON	set	151
  2501  0099                     _OSCCON	set	153
  2502  0093                     _PIE3	set	147
  2503  0092                     _PIE2	set	146
  2504  0091                     _PIE1	set	145
  2505  0095                     _OPTION_REG	set	149
  2506  008E                     _TRISC	set	142
  2507  008D                     _TRISB	set	141
  2508  008C                     _TRISA	set	140
  2509  009B                     _ADRESL	set	155
  2510  009C                     _ADRESH	set	156
  2511  009D                     _ADCON0	set	157
  2512  009E                     _ADCON1	set	158
  2513  049B                     _TMR6IE	set	1179
  2514  0499                     _TMR4IE	set	1177
  2515  0488                     _TMR1IE	set	1160
  2516  049E                     _CCP5IE	set	1182
  2517  049D                     _CCP4IE	set	1181
  2518  049C                     _CCP3IE	set	1180
  2519  048A                     _CCP1IE	set	1162
  2520  0489                     _TMR2IE	set	1161
  2521  0490                     _CCP2IE	set	1168
  2522  0495                     _C1IE	set	1173
  2523  04E9                     _GO_nDONE	set	1257
  2524  04E8                     _ADON	set	1256
  2525  010D                     _LATB	set	269
  2526  010C                     _LATA	set	268
  2527  010E                     _LATC	set	270
  2528  0112                     _CM1CON1	set	274
  2529  0111                     _CM1CON0	set	273
  2530  0117                     _FVRCON	set	279
  2531  0870                     _LATC0	set	2160
  2532  0874                     _LATC4	set	2164
  2533  0873                     _LATC3	set	2163
  2534  0871                     _LATC1	set	2161
  2535  0872                     _LATC2	set	2162
  2536  0869                     _LATB1	set	2153
  2537  086A                     _LATB2	set	2154
  2538  088E                     _C1OUT	set	2190
  2539  018D                     _ANSELB	set	397
  2540  018C                     _ANSELA	set	396
  2541  0196                     _EECON2	set	406
  2542  0193                     _EEDATL	set	403
  2543  0191                     _EEADRL	set	401
  2544  0CA9                     _WR	set	3241
  2545  0CAA                     _WREN	set	3242
  2546  0CA8                     _RD	set	3240
  2547  0CAE                     _CFGS	set	3246
  2548  0CAF                     _EEPGD	set	3247
  2549  0292                     _CCPR1H	set	658
  2550  0299                     _CCPR2H	set	665
  2551  0298                     _CCPR2L	set	664
  2552  029A                     _CCP2CON	set	666
  2553  0291                     _CCPR1L	set	657
  2554  0293                     _CCP1CON	set	659
  2555  0295                     _CCP1AS	set	661
  2556  0294                     _PWM1CON	set	660
  2557  0296                     _PSTR1CON	set	662
  2558  14AF                     _CCP1ASE	set	5295
  2559  031D                     _CCPR5H	set	797
  2560  031C                     _CCPR5L	set	796
  2561  031E                     _CCP5CON	set	798
  2562  0319                     _CCPR4H	set	793
  2563  0318                     _CCPR4L	set	792
  2564  031A                     _CCP4CON	set	794
  2565  0312                     _CCPR3H	set	786
  2566  0311                     _CCPR3L	set	785
  2567  0313                     _CCP3CON	set	787
  2568  041D                     _PR6	set	1053
  2569  0416                     _PR4	set	1046
  2570  041C                     _TMR6	set	1052
  2571  0415                     _TMR4	set	1045
  2572  041E                     _T6CON	set	1054
  2573  0417                     _T4CON	set	1047
  2574  20F2                     _TMR6ON	set	8434
  2575  20BA                     _TMR4ON	set	8378
  2576                           
  2577                           ; #config settings
  2578  0000                     
  2579                           	psect	cinit
  2580  0028                     start_initialization:	
  2581  0028                     __initialization:	
  2582                           
  2583                           ; Initialize objects allocated to BANK0
  2584  0028  3187  27FE  3180   	fcall	__pidataBANK0	;fetch initializer
  2585  002B  00DF               	movwf	__pdataBANK0& (0+127)
  2586                           
  2587                           ; Initialize objects allocated to BANK1
  2588  002C  306A               	movlw	low __pidataBANK1
  2589  002D  0084               	movwf	4
  2590  002E  309D               	movlw	(high __pidataBANK1)| (0+128)
  2591  002F  0085               	movwf	5
  2592  0030  30E8               	movlw	low __pdataBANK1
  2593  0031  0086               	movwf	6
  2594  0032  3000               	movlw	high __pdataBANK1
  2595  0033  0087               	movwf	7
  2596  0034  3007               	movlw	7
  2597  0035  319D  2564  3180   	fcall	init_ram
  2598                           
  2599                           ; Initialize objects allocated to BANK2
  2600  0038  3079               	movlw	low __pidataBANK2
  2601  0039  0084               	movwf	4
  2602  003A  309D               	movlw	(high __pidataBANK2)| (0+128)
  2603  003B  0085               	movwf	5
  2604  003C  3068               	movlw	low __pdataBANK2
  2605  003D  0086               	movwf	6
  2606  003E  3001               	movlw	high __pdataBANK2
  2607  003F  0087               	movwf	7
  2608  0040  3008               	movlw	8
  2609  0041  319D  2564  3180   	fcall	init_ram
  2610                           
  2611                           ; Clear objects allocated to BITBANK0
  2612  0044  01DE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2613                           
  2614                           ; Clear objects allocated to BANK0
  2615  0045  304B               	movlw	low __pbssBANK0
  2616  0046  0084               	movwf	4
  2617  0047  3000               	movlw	high __pbssBANK0
  2618  0048  0085               	movwf	5
  2619  0049  3013               	movlw	19
  2620  004A  319D  255E  3180   	fcall	clear_ram0
  2621                           
  2622                           ; Clear objects allocated to BANK1
  2623  004D  30A0               	movlw	low __pbssBANK1
  2624  004E  0084               	movwf	4
  2625  004F  3000               	movlw	high __pbssBANK1
  2626  0050  0085               	movwf	5
  2627  0051  3048               	movlw	72
  2628  0052  319D  255E  3180   	fcall	clear_ram0
  2629                           
  2630                           ; Clear objects allocated to BANK2
  2631  0055  3020               	movlw	low __pbssBANK2
  2632  0056  0084               	movwf	4
  2633  0057  3001               	movlw	high __pbssBANK2
  2634  0058  0085               	movwf	5
  2635  0059  3048               	movlw	72
  2636  005A  319D  255E  3180   	fcall	clear_ram0
  2637                           
  2638                           ; Clear objects allocated to BANK3
  2639  005D  30A0               	movlw	low __pbssBANK3
  2640  005E  0084               	movwf	4
  2641  005F  3001               	movlw	high __pbssBANK3
  2642  0060  0085               	movwf	5
  2643  0061  304D               	movlw	77
  2644  0062  319D  255E  3180   	fcall	clear_ram0
  2645                           
  2646                           ; Clear objects allocated to BANK4
  2647  0065  3020               	movlw	low __pbssBANK4
  2648  0066  0084               	movwf	4
  2649  0067  3002               	movlw	high __pbssBANK4
  2650  0068  0085               	movwf	5
  2651  0069  304E               	movlw	78
  2652  006A  319D  255E  3180   	fcall	clear_ram0
  2653                           
  2654                           ; Clear objects allocated to BANK5
  2655  006D  30BF               	movlw	low __pbssBANK5
  2656  006E  0084               	movwf	4
  2657  006F  3002               	movlw	high __pbssBANK5
  2658  0070  0085               	movwf	5
  2659  0071  300B               	movlw	11
  2660  0072  319D  255E         	fcall	clear_ram0
  2661  0074                     end_of_initialization:	
  2662                           ;End of C runtime variable initialization code
  2663                           
  2664  0074                     __end_of__initialization:	
  2665  0074  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2666  0075  0020               	movlb	0
  2667  0076  3196  2ECE         	ljmp	_main	;jump to C main() function
  2668                           
  2669                           	psect	bitbssBANK0
  2670  02F0                     __pbitbssBANK0:	
  2671  02F0                     _rising_bemf_flag:	
  2672  02F0                     	ds	1
  2673                           
  2674                           	psect	bssBANK0
  2675  004B                     __pbssBANK0:	
  2676  004B                     BVH2_Appl_Layer@Cb24_StateCnt:	
  2677  004B                     	ds	2
  2678  004D                     _Cb1_StateCnt:	
  2679  004D                     	ds	2
  2680  004F                     _ui16_Speed_mat:	
  2681  004F                     	ds	2
  2682  0051                     _ui16_IPhase_bldc:	
  2683  0051                     	ds	2
  2684  0053                     _comm_time:	
  2685  0053                     	ds	2
  2686  0055                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  2687  0055                     	ds	1
  2688  0056                     _Cb34_idPWM:	
  2689  0056                     	ds	1
  2690  0057                     _SIBFS_UbatHandling_b:	
  2691  0057                     	ds	1
  2692  0058                     _ui8_b_DResB0_c:	
  2693  0058                     	ds	1
  2694  0059                     _ui8_b_DResLocID_c:	
  2695  0059                     	ds	1
  2696  005A                     _MotorFlags:	
  2697  005A                     	ds	1
  2698  005B                     _windowPtr1:	
  2699  005B                     	ds	1
  2700  005C                     _ui16_Ubat_bldc:	
  2701  005C                     	ds	2
  2702                           
  2703                           	psect	dataBANK0
  2704  005F                     __pdataBANK0:	
  2705  005F                     _ui8_selected_lid:	
  2706  005F                     	ds	1
  2707                           
  2708                           	psect	bssBANK1
  2709  00A0                     __pbssBANK1:	
  2710  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  2711  00A0                     	ds	2
  2712  00A2                     BVH2_Appl_Layer@Cb19_Counter:	
  2713  00A2                     	ds	2
  2714  00A4                     _Cb44_StateCnt:	
  2715  00A4                     	ds	2
  2716  00A6                     _ui16_Capt_Val2:	
  2717  00A6                     	ds	2
  2718  00A8                     _ui16_Capt_Val1:	
  2719  00A8                     	ds	2
  2720  00AA                     _ui16_Capt_Val0:	
  2721  00AA                     	ds	2
  2722  00AC                     _ui16_mat_Current:	
  2723  00AC                     	ds	2
  2724  00AE                     _ui8_BattVolt_mat:	
  2725  00AE                     	ds	2
  2726  00B0                     _ui16_duty_cycle_BLDC:	
  2727  00B0                     	ds	2
  2728  00B2                     _ui16_speed_fil:	
  2729  00B2                     	ds	2
  2730  00B4                     _ui16_Ubemf_bldc:	
  2731  00B4                     	ds	2
  2732  00B6                     _ui16_phase_advancement:	
  2733  00B6                     	ds	2
  2734  00B8                     _phase_delay_counter:	
  2735  00B8                     	ds	2
  2736  00BA                     _ui16_step_cnt:	
  2737  00BA                     	ds	2
  2738  00BC                     _analog_value:	
  2739  00BC                     	ds	2
  2740  00BE                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  2741  00BE                     	ds	1
  2742  00BF                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  2743  00BF                     	ds	1
  2744  00C0                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  2745  00C0                     	ds	1
  2746  00C1                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  2747  00C1                     	ds	1
  2748  00C2                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  2749  00C2                     	ds	1
  2750  00C3                     BVH2_Appl_Layer@Cb9_StateCnt:	
  2751  00C3                     	ds	1
  2752  00C4                     BVH2_Appl_Layer@Cb51_Counter:	
  2753  00C4                     	ds	1
  2754  00C5                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  2755  00C5                     	ds	1
  2756  00C6                     _SIBFS_Pic_etat_monitor_b:	
  2757  00C6                     	ds	1
  2758  00C7                     _SIBFS_PWM_Detection_b:	
  2759  00C7                     	ds	1
  2760  00C8                     _SIBFS_Current_Analysis_High_b:	
  2761  00C8                     	ds	1
  2762  00C9                     _Cb1_RestartCounter:	
  2763  00C9                     	ds	1
  2764  00CA                     _bool_mat_pic_etat:	
  2765  00CA                     	ds	1
  2766  00CB                     _ui8_PWMinDC_sav:	
  2767  00CB                     	ds	1
  2768  00CC                     _ui8_PWM_FreqCnt:	
  2769  00CC                     	ds	1
  2770  00CD                     _ui8_Task_Cont100ms:	
  2771  00CD                     	ds	1
  2772  00CE                     _bool_ControlLoopMode:	
  2773  00CE                     	ds	1
  2774  00CF                     _bool_mat_currAlarm_bldc:	
  2775  00CF                     	ds	1
  2776  00D0                     _ui8_PWM_dc_mat:	
  2777  00D0                     	ds	1
  2778  00D1                     _ui8_Task_Cont1ms:	
  2779  00D1                     	ds	1
  2780  00D2                     _ui8_given_supply:	
  2781  00D2                     	ds	1
  2782  00D3                     _phaseCal:	
  2783  00D3                     	ds	1
  2784  00D4                     _bool_HighCurrentAlarm:	
  2785  00D4                     	ds	1
  2786  00D5                     _bool_MotorStalled:	
  2787  00D5                     	ds	1
  2788  00D6                     _bool_DryRunningAlarm:	
  2789  00D6                     	ds	1
  2790  00D7                     _bool_CPU_TempAlarm:	
  2791  00D7                     	ds	1
  2792  00D8                     _Bcnt:	
  2793  00D8                     	ds	1
  2794  00D9                     _ui8_CompFlag:	
  2795  00D9                     	ds	1
  2796  00DA                     _ui8_Ubemf_sel:	
  2797  00DA                     	ds	1
  2798  00DB                     _ui8_UPhase_sel:	
  2799  00DB                     	ds	1
  2800  00DC                     _ui8_IPhase_sel:	
  2801  00DC                     	ds	1
  2802  00DD                     _ui8_BlankingCount:	
  2803  00DD                     	ds	1
  2804  00DE                     _comm_state:	
  2805  00DE                     	ds	1
  2806  00DF                     _ui8_StartupPWM:	
  2807  00DF                     	ds	1
  2808  00E0                     _bool_start_demand_mat:	
  2809  00E0                     	ds	1
  2810  00E1                     _ui8_error_Flags:	
  2811  00E1                     	ds	1
  2812  00E2                     _ui16_IPhase3_bldc_cal:	
  2813  00E2                     	ds	2
  2814  00E4                     _ui16_IPhase2_bldc_cal:	
  2815  00E4                     	ds	2
  2816  00E6                     _ui16_IPhase1_bldc_cal:	
  2817  00E6                     	ds	2
  2818                           
  2819                           	psect	dataBANK1
  2820  00E8                     __pdataBANK1:	
  2821  00E8                     _ui16_I_cal_Ph3:	
  2822  00E8                     	ds	2
  2823  00EA                     _ui16_I_cal_Ph2:	
  2824  00EA                     	ds	2
  2825  00EC                     _ui16_I_cal_Ph1:	
  2826  00EC                     	ds	2
  2827  00EE                     _wkpoint:	
  2828  00EE                     	ds	1
  2829                           
  2830                           	psect	bssBANK2
  2831  0120                     __pbssBANK2:	
  2832  0120                     _ui8_current_cal:	
  2833  0120                     	ds	3
  2834  0123                     _last_pwm:	
  2835  0123                     	ds	2
  2836  0125                     _sum:	
  2837  0125                     	ds	2
  2838  0127                     _ui16_comm_time_max:	
  2839  0127                     	ds	2
  2840  0129                     _filterTempNTC:	
  2841  0129                     	ds	2
  2842  012B                     _filterPh:	
  2843  012B                     	ds	2
  2844  012D                     _filter3:	
  2845  012D                     	ds	2
  2846  012F                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  2847  012F                     	ds	1
  2848  0130                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  2849  0130                     	ds	1
  2850  0131                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  2851  0131                     	ds	1
  2852  0132                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  2853  0132                     	ds	1
  2854  0133                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  2855  0133                     	ds	1
  2856  0134                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  2857  0134                     	ds	1
  2858  0135                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  2859  0135                     	ds	1
  2860  0136                     _power_lockout:	
  2861  0136                     	ds	1
  2862  0137                     _Cb56_odPumpOff:	
  2863  0137                     	ds	1
  2864  0138                     _Cb56_odFixedValueSel:	
  2865  0138                     	ds	1
  2866  0139                     _Cb56_oUbat_Alarm_High:	
  2867  0139                     	ds	1
  2868  013A                     _Cb44_oShutoff:	
  2869  013A                     	ds	1
  2870  013B                     _Cb44_oAlarm:	
  2871  013B                     	ds	1
  2872  013C                     _Cb34_odFixedValueSel:	
  2873  013C                     	ds	1
  2874  013D                     _Cb34_odFixedLowValueSel:	
  2875  013D                     	ds	1
  2876  013E                     _Cb34_oPWM_SC_Alarm:	
  2877  013E                     	ds	1
  2878  013F                     _Cb34_oPWM_Alarm:	
  2879  013F                     	ds	1
  2880  0140                     _Cb1_oShutoff:	
  2881  0140                     	ds	1
  2882  0141                     _Cb1_oCurrentAlarm:	
  2883  0141                     	ds	1
  2884  0142                     _ui8_Duty_Cycle_In_Ratio:	
  2885  0142                     	ds	1
  2886  0143                     _ui8_Pulse_State:	
  2887  0143                     	ds	1
  2888  0144                     _ui8_PWMoutvalue:	
  2889  0144                     	ds	1
  2890  0145                     _pwm_cmd:	
  2891  0145                     	ds	1
  2892  0146                     _ui8_lastTaskvalue:	
  2893  0146                     	ds	1
  2894  0147                     _ui8_Task_Cont5ms:	
  2895  0147                     	ds	1
  2896  0148                     _ui8_Task_Cont3ms:	
  2897  0148                     	ds	1
  2898  0149                     _bool_PWMin_Freq_err_Alarm:	
  2899  0149                     	ds	1
  2900  014A                     _bool_UbatAlarm:	
  2901  014A                     	ds	1
  2902  014B                     _bool_CPU_TempRedAlarm:	
  2903  014B                     	ds	1
  2904  014C                     _bool_PWMin_err_Alarm:	
  2905  014C                     	ds	1
  2906  014D                     _ui8_Kp_mat:	
  2907  014D                     	ds	1
  2908  014E                     _ICT_STAMP_PRESENCE:	
  2909  014E                     	ds	1
  2910  014F                     __ELINMIntSpace:	
  2911  014F                     	ds	1
  2912  0150                     __ELINMIntMessageBufferPointer:	
  2913  0150                     	ds	1
  2914  0151                     __ELINMIntReadBack:	
  2915  0151                     	ds	1
  2916  0152                     __ELINMIntRXMessageSize:	
  2917  0152                     	ds	1
  2918  0153                     __ELINMIntMessageSize:	
  2919  0153                     	ds	1
  2920  0154                     __ELINMIntStatus1:	
  2921  0154                     	ds	1
  2922  0155                     __ELINMIntStatus:	
  2923  0155                     	ds	1
  2924  0156                     __ELINMIntMessageTag:	
  2925  0156                     	ds	1
  2926  0157                     _ui8_cnt_PWM:	
  2927  0157                     	ds	1
  2928  0158                     _ui8_cnt1:	
  2929  0158                     	ds	1
  2930  0159                     _DC_pic_etat_monitor:	
  2931  0159                     	ds	1
  2932  015A                     _Error_PICetatMonitor:	
  2933  015A                     	ds	1
  2934  015B                     _ui8_lin_sim_Failures_ena:	
  2935  015B                     	ds	1
  2936  015C                     _ui8_lin_sim_Failures:	
  2937  015C                     	ds	1
  2938  015D                     _ui8_b_DResB5_c:	
  2939  015D                     	ds	1
  2940  015E                     _ui8_b_DResB4_c:	
  2941  015E                     	ds	1
  2942  015F                     _ui8_b_DResB3_c:	
  2943  015F                     	ds	1
  2944  0160                     _ui8_b_DResB2_c:	
  2945  0160                     	ds	1
  2946  0161                     _ui8_b_DResB1_c:	
  2947  0161                     	ds	1
  2948  0162                     _ui8_b_DResServID_c:	
  2949  0162                     	ds	1
  2950  0163                     _CompFlag_prev:	
  2951  0163                     	ds	1
  2952  0164                     _ui8_sampleState:	
  2953  0164                     	ds	1
  2954  0165                     _BlankingCountdbg:	
  2955  0165                     	ds	1
  2956  0166                     _bemf_filter:	
  2957  0166                     	ds	1
  2958  0167                     _ui8_temp_calibration:	
  2959  0167                     	ds	1
  2960                           
  2961                           	psect	dataBANK2
  2962  0168                     __pdataBANK2:	
  2963  0168                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  2964  0168                     	ds	4
  2965  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  2966  016C                     	ds	1
  2967  016D                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  2968  016D                     	ds	1
  2969  016E                     _ui8_failure:	
  2970  016E                     	ds	1
  2971  016F                     _ict_stamp:	
  2972  016F                     	ds	1
  2973                           
  2974                           	psect	bssBANK3
  2975  01A0                     __pbssBANK3:	
  2976  01A0                     BVH2_Appl_Layer@Cb24_BadCnt:	
  2977  01A0                     	ds	2
  2978  01A2                     BVH2_Appl_Layer@Cb14_StateCnt:	
  2979  01A2                     	ds	2
  2980  01A4                     _prev_Debounce_Tmr:	
  2981  01A4                     	ds	2
  2982  01A6                     _Debounce_Tmr:	
  2983  01A6                     	ds	2
  2984  01A8                     _prev_RA4:	
  2985  01A8                     	ds	2
  2986  01AA                     _ui16_PWMin_failCnt:	
  2987  01AA                     	ds	2
  2988  01AC                     _ui16_Speed_demand_mat_min:	
  2989  01AC                     	ds	2
  2990  01AE                     _ui16_Speed_demand_mat_Max:	
  2991  01AE                     	ds	2
  2992  01B0                     _ui16_Speed_demand_mat:	
  2993  01B0                     	ds	2
  2994  01B2                     _ui8_Ki_mat:	
  2995  01B2                     	ds	2
  2996  01B4                     _ui16_mat_inpTemp:	
  2997  01B4                     	ds	2
  2998  01B6                     _ui16_PWM_Freq_In:	
  2999  01B6                     	ds	2
  3000  01B8                     _ui16_PWM_Freq_mat:	
  3001  01B8                     	ds	2
  3002  01BA                     _ui16_duty_cycle_mat:	
  3003  01BA                     	ds	2
  3004  01BC                     _ui16_speed_rar:	
  3005  01BC                     	ds	2
  3006  01BE                     _ui8_fixed_start_speed_mat:	
  3007  01BE                     	ds	2
  3008  01C0                     _ui16_NTC_Temp_bldc_mean_cal:	
  3009  01C0                     	ds	2
  3010  01C2                     _filterTempCPU:	
  3011  01C2                     	ds	2
  3012  01C4                     _filter1:	
  3013  01C4                     	ds	2
  3014  01C6                     _ui16_CPU_Temp_bldc_mean:	
  3015  01C6                     	ds	2
  3016  01C8                     _ui16_NTC_Temp_bldc_mean:	
  3017  01C8                     	ds	2
  3018  01CA                     _ui16_fir_UPhase_mittel:	
  3019  01CA                     	ds	2
  3020  01CC                     _ui16_fir_IPhase_mean:	
  3021  01CC                     	ds	2
  3022  01CE                     _ui16_fir_Bat_mittel:	
  3023  01CE                     	ds	2
  3024  01D0                     _ui16_Temp_cal:	
  3025  01D0                     	ds	2
  3026  01D2                     _ui16_NTC_Temp_bldc:	
  3027  01D2                     	ds	2
  3028  01D4                     _ui16_IPhase1_bldc:	
  3029  01D4                     	ds	2
  3030  01D6                     _ui16_UPhase_bldc:	
  3031  01D6                     	ds	2
  3032  01D8                     _Cb34_odPumpOff:	
  3033  01D8                     	ds	1
  3034  01D9                     _ui8_debug_out0:	
  3035  01D9                     	ds	1
  3036  01DA                     _bool_StalledMotorStop:	
  3037  01DA                     	ds	1
  3038  01DB                     _bool_PIC_Alarm:	
  3039  01DB                     	ds	1
  3040  01DC                     _bl_Pumpoff_Alarm:	
  3041  01DC                     	ds	1
  3042  01DD                     _ui8_CMD_Mode:	
  3043  01DD                     	ds	1
  3044  01DE                     _ui8_calib_flag:	
  3045  01DE                     	ds	1
  3046  01DF                     _ui8_i_wob:	
  3047  01DF                     	ds	1
  3048  01E0                     _ui8_DebugCnt:	
  3049  01E0                     	ds	1
  3050  01E1                     _ui8_Sync_Cont10ms:	
  3051  01E1                     	ds	1
  3052  01E2                     _ui8_lin_calibration:	
  3053  01E2                     	ds	1
  3054  01E3                     _LIN_DEACTIVATION:	
  3055  01E3                     	ds	1
  3056  01E4                     _FCT_STAMP_WRITING:	
  3057  01E4                     	ds	1
  3058  01E5                     _SPEED_READING:	
  3059  01E5                     	ds	1
  3060  01E6                     _CURRENT_CALIBRATION:	
  3061  01E6                     	ds	1
  3062  01E7                     _VER_SUPPLY_VOLTAGE_VALUE:	
  3063  01E7                     	ds	1
  3064  01E8                     _VER_SW_VERSION_NUMBER:	
  3065  01E8                     	ds	1
  3066  01E9                     _TEMPERATURE_CALIBRATION:	
  3067  01E9                     	ds	1
  3068  01EA                     _FCT_STAMP_ABSENCE:	
  3069  01EA                     	ds	1
  3070  01EB                     _ui16_Duty_Cycle_In:	
  3071  01EB                     	ds	2
  3072                           
  3073                           	psect	bssBANK4
  3074  0220                     __pbssBANK4:	
  3075  0220                     _B:	
  3076  0220                     	ds	16
  3077  0230                     _inputArray1:	
  3078  0230                     	ds	16
  3079  0240                     _checksum:	
  3080  0240                     	ds	6
  3081  0246                     __ELINMIntSleepTimeout:	
  3082  0246                     	ds	4
  3083  024A                     _amps_per_volt_cnt:	
  3084  024A                     	ds	2
  3085  024C                     _ui16_CMD_Mode_Tmr:	
  3086  024C                     	ds	2
  3087  024E                     _ui16_wait:	
  3088  024E                     	ds	2
  3089  0250                     _ui16_Timer_VaL1:	
  3090  0250                     	ds	2
  3091  0252                     __ELINMIntTHeaderMax:	
  3092  0252                     	ds	2
  3093  0254                     __ELINMIntTHeaderMin:	
  3094  0254                     	ds	2
  3095  0256                     __ELINMIntTFrameMax:	
  3096  0256                     	ds	2
  3097  0258                     __ELINMIntTFrameMin:	
  3098  0258                     	ds	2
  3099  025A                     __ELINMIntRXCRC:	
  3100  025A                     	ds	2
  3101  025C                     _ui16_ambiant_temperature:	
  3102  025C                     	ds	2
  3103  025E                     _ui16_CPU_Temp_bldc:	
  3104  025E                     	ds	2
  3105  0260                     _ui16_IPhase3_bldc:	
  3106  0260                     	ds	2
  3107  0262                     _ui16_IPhase2_bldc:	
  3108  0262                     	ds	2
  3109  0264                     _ui16_phase_angle:	
  3110  0264                     	ds	2
  3111  0266                     _phase_delay_counter_debug:	
  3112  0266                     	ds	2
  3113  0268                     _ui8_zero_cros_cnt:	
  3114  0268                     	ds	2
  3115  026A                     _ui16_Task_Cont500ms:	
  3116  026A                     	ds	2
  3117  026C                     _ui16_CPU_Temp_bldc_mean_cal:	
  3118  026C                     	ds	2
  3119                           
  3120                           	psect	bssBANK5
  3121  02BF                     __pbssBANK5:	
  3122  02BF                     __ELINMIntMessageBuffer:	
  3123  02BF                     	ds	11
  3124                           
  3125                           	psect	inittext
  3126  1D64                     init_ram:	
  3127  1D64  00FE               	movwf	126
  3128  1D65                     initloop:	
  3129  1D65  0012               	moviw fsr0++
  3130  1D66  001E               	movwi fsr1++
  3131  1D67  0BFE               	decfsz	126,f
  3132  1D68  2D65               	goto	initloop
  3133  1D69  3400               	retlw	0
  3134                           
  3135                           	psect	clrtext
  3136  1D5E                     clear_ram0:	
  3137                           ;	Called with FSR0 containing the base address, and
  3138                           ;	WREG with the size to clear
  3139                           
  3140  1D5E  0064               	clrwdt	;clear the watchdog before getting into this loop
  3141  1D5F                     clrloop0:	
  3142  1D5F  0180               	clrf	0	;clear RAM location pointed to by FSR
  3143  1D60  3101               	addfsr 0,1
  3144  1D61  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3145  1D62  2D5F               	goto	clrloop0	;have we reached the end yet?
  3146  1D63  3400               	retlw	0	;all done for this memory range, return
  3147                           
  3148                           	psect	cstackBANK5
  3149  02A0                     __pcstackBANK5:	
  3150  02A0                     _BVH2_Appl_Layer$1068:	
  3151                           
  3152                           ; 4 bytes @ 0x0
  3153  02A0                     	ds	4
  3154  02A4                     _BVH2_Appl_Layer$1065:	
  3155                           
  3156                           ; 2 bytes @ 0x4
  3157  02A4                     	ds	2
  3158  02A6                     _BVH2_Appl_Layer$1067:	
  3159                           
  3160                           ; 2 bytes @ 0x6
  3161  02A6                     	ds	2
  3162  02A8                     BVH2_Appl_Layer@Sb2_Switch2:	
  3163                           
  3164                           ; 2 bytes @ 0x8
  3165  02A8                     	ds	2
  3166  02AA                     _BVH2_Appl_Layer$1058:	
  3167                           
  3168                           ; 1 bytes @ 0xA
  3169  02AA                     	ds	1
  3170  02AB                     _BVH2_Appl_Layer$1059:	
  3171                           
  3172                           ; 1 bytes @ 0xB
  3173  02AB                     	ds	1
  3174  02AC                     _BVH2_Appl_Layer$1060:	
  3175                           
  3176                           ; 1 bytes @ 0xC
  3177  02AC                     	ds	1
  3178  02AD                     _BVH2_Appl_Layer$1061:	
  3179                           
  3180                           ; 1 bytes @ 0xD
  3181  02AD                     	ds	1
  3182  02AE                     _BVH2_Appl_Layer$1062:	
  3183                           
  3184                           ; 1 bytes @ 0xE
  3185  02AE                     	ds	1
  3186  02AF                     BVH2_Appl_Layer@Sb2_Error:	
  3187                           
  3188                           ; 2 bytes @ 0xF
  3189  02AF                     	ds	2
  3190  02B1                     BVH2_Appl_Layer@Sb3_Product1:	
  3191                           
  3192                           ; 2 bytes @ 0x11
  3193  02B1                     	ds	2
  3194  02B3                     BVH2_Appl_Layer@Cb24_Reset:	
  3195                           
  3196                           ; 1 bytes @ 0x13
  3197  02B3                     	ds	1
  3198  02B4                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  3199                           
  3200                           ; 1 bytes @ 0x14
  3201  02B4                     	ds	1
  3202  02B5                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  3203                           
  3204                           ; 1 bytes @ 0x15
  3205  02B5                     	ds	1
  3206  02B6                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  3207                           
  3208                           ; 1 bytes @ 0x16
  3209  02B6                     	ds	1
  3210  02B7                     BVH2_Appl_Layer@Sb2_Switch5:	
  3211                           
  3212                           ; 2 bytes @ 0x17
  3213  02B7                     	ds	2
  3214  02B9                     BVH2_Appl_Layer@Sb3_Sum1:	
  3215                           
  3216                           ; 2 bytes @ 0x19
  3217  02B9                     	ds	2
  3218  02BB                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  3219                           
  3220                           ; 1 bytes @ 0x1B
  3221  02BB                     	ds	1
  3222  02BC                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  3223                           
  3224                           ; 1 bytes @ 0x1C
  3225  02BC                     	ds	1
  3226  02BD                     BVH2_Appl_Layer@Sb4_PI_sum:	
  3227                           
  3228                           ; 2 bytes @ 0x1D
  3229  02BD                     	ds	2
  3230                           
  3231                           	psect	cstackCOMMON
  3232  0070                     __pcstackCOMMON:	
  3233  0070                     ?_InitMotorRun:	
  3234  0070                     ?_commutate:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0070                     ?_PWM_Write_Out:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0070                     ?_read_eeprom_data:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0070                     ?_PWMReadDC:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0070                     ?_PWM_CTRL:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0070                     ??_PWM_CTRL:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0070                     ?_interrupt_PWMCapture:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0070                     ??_interrupt_PWMCapture:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0070                     ?_Oscill_Source_Block:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0070                     ?_timer_init:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0070                     ?_PWM_Capture_init:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0070                     ?_clear_timer:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0070                     ?_BVH2_Appl_Layer:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  3283                           ; 1 bytes @ 0x0
  3284                           
  3285  0070                     ?_ADC_Init:	
  3286                           ; 1 bytes @ 0x0
  3287                           
  3288  0070                     ?_ADC_Wait:	
  3289                           ; 1 bytes @ 0x0
  3290                           
  3291  0070                     ?_FILTER_Init:	
  3292                           ; 1 bytes @ 0x0
  3293                           
  3294  0070                     ?_FILTER_Ubat:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297  0070                     ?_FILTER_IPhase:	
  3298                           ; 1 bytes @ 0x0
  3299                           
  3300  0070                     ?_FILTER_Temp:	
  3301                           ; 1 bytes @ 0x0
  3302                           
  3303  0070                     ?_Get_Analog_Value:	
  3304                           ; 1 bytes @ 0x0
  3305                           
  3306  0070                     ?_BLDCWait:	
  3307                           ; 1 bytes @ 0x0
  3308                           
  3309  0070                     ??_BLDCWait:	
  3310                           ; 1 bytes @ 0x0
  3311                           
  3312  0070                     ?_init_bldc:	
  3313                           ; 1 bytes @ 0x0
  3314                           
  3315  0070                     ?_interrrupt_bldc:	
  3316                           ; 1 bytes @ 0x0
  3317                           
  3318  0070                     ?_InitMotorStop:	
  3319                           ; 1 bytes @ 0x0
  3320                           
  3321  0070                     ?_DiagInit:	
  3322                           ; 1 bytes @ 0x0
  3323                           
  3324  0070                     ?_SetDiagAlarm:	
  3325                           ; 1 bytes @ 0x0
  3326                           
  3327  0070                     ?_Task1ms:	
  3328                           ; 1 bytes @ 0x0
  3329                           
  3330  0070                     ??_Task1ms:	
  3331                           ; 1 bytes @ 0x0
  3332                           
  3333  0070                     ?_interrupt_handler:	
  3334                           ; 1 bytes @ 0x0
  3335                           
  3336  0070                     ?_I_calibrationInit:	
  3337                           ; 1 bytes @ 0x0
  3338                           
  3339  0070                     ?_init_ports:	
  3340                           ; 1 bytes @ 0x0
  3341                           
  3342  0070                     ?_system_init:	
  3343                           ; 1 bytes @ 0x0
  3344                           
  3345  0070                     ?_main:	
  3346                           ; 1 bytes @ 0x0
  3347                           
  3348  0070                     ?i1_ADC_Wait:	
  3349                           ; 1 bytes @ 0x0
  3350                           
  3351  0070                     ??i1_ADC_Wait:	
  3352                           ; 1 bytes @ 0x0
  3353                           
  3354  0070                     ?i1_commutate:	
  3355                           ; 1 bytes @ 0x0
  3356                           
  3357  0070                     ??i1_commutate:	
  3358                           ; 1 bytes @ 0x0
  3359                           
  3360  0070                     ?___lwdiv:	
  3361                           ; 1 bytes @ 0x0
  3362                           
  3363  0070                     ?i1_ADC_Read:	
  3364                           ; 2 bytes @ 0x0
  3365                           
  3366  0070                     ?i1___wmul:	
  3367                           ; 2 bytes @ 0x0
  3368                           
  3369  0070                     ___lwdiv@divisor:	
  3370                           ; 2 bytes @ 0x0
  3371                           
  3372  0070                     i1___wmul@multiplier:	
  3373                           ; 2 bytes @ 0x0
  3374                           
  3375                           
  3376                           ; 2 bytes @ 0x0
  3377  0070                     	ds	2
  3378  0072                     ??i1_ADC_Read:	
  3379  0072                     ___lwdiv@dividend:	
  3380                           ; 1 bytes @ 0x2
  3381                           
  3382  0072                     i1___wmul@multiplicand:	
  3383                           ; 2 bytes @ 0x2
  3384                           
  3385                           
  3386                           ; 2 bytes @ 0x2
  3387  0072                     	ds	1
  3388  0073                     i1ADC_Read@i:	
  3389                           
  3390                           ; 1 bytes @ 0x3
  3391  0073                     	ds	1
  3392  0074                     ??___lwdiv:	
  3393  0074                     ??i1___wmul:	
  3394                           ; 1 bytes @ 0x4
  3395                           
  3396  0074                     i1___wmul@product:	
  3397                           ; 1 bytes @ 0x4
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x4
  3401  0074                     	ds	1
  3402  0075                     ___lwdiv@quotient:	
  3403                           
  3404                           ; 2 bytes @ 0x5
  3405  0075                     	ds	2
  3406  0077                     ___lwdiv@counter:	
  3407                           
  3408                           ; 1 bytes @ 0x7
  3409  0077                     	ds	5
  3410  007C                     ??_interrupt_handler:	
  3411                           
  3412                           	psect	cstackBANK0
  3413  0020                     __pcstackBANK0:	
  3414                           ; 1 bytes @ 0xC
  3415                           
  3416  0020                     ??_interrrupt_bldc:	
  3417                           
  3418                           ; 1 bytes @ 0x0
  3419  0020                     	ds	4
  3420  0024                     interrrupt_bldc@ui32_tmp:	
  3421                           
  3422                           ; 4 bytes @ 0x4
  3423  0024                     	ds	4
  3424  0028                     ??_commutate:	
  3425  0028                     ??_PWM_Write_Out:	
  3426                           ; 1 bytes @ 0x8
  3427                           
  3428  0028                     ??_read_eeprom_data:	
  3429                           ; 1 bytes @ 0x8
  3430                           
  3431  0028                     ??_Oscill_Source_Block:	
  3432                           ; 1 bytes @ 0x8
  3433                           
  3434  0028                     ??_PWM_Capture_init:	
  3435                           ; 1 bytes @ 0x8
  3436                           
  3437  0028                     ??_clear_timer:	
  3438                           ; 1 bytes @ 0x8
  3439                           
  3440  0028                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  3441                           ; 1 bytes @ 0x8
  3442                           
  3443  0028                     ??_Cb34_PWM_Detection_node_fcn1:	
  3444                           ; 1 bytes @ 0x8
  3445                           
  3446  0028                     ??_Cb56_UbatHandling_node_fcn2:	
  3447                           ; 1 bytes @ 0x8
  3448                           
  3449  0028                     ??_Cb1_Current_An___High_node_fcn1:	
  3450                           ; 1 bytes @ 0x8
  3451                           
  3452  0028                     ??_ADC_Init:	
  3453                           ; 1 bytes @ 0x8
  3454                           
  3455  0028                     ??_ADC_Wait:	
  3456                           ; 1 bytes @ 0x8
  3457                           
  3458  0028                     ??_FILTER_Ubat:	
  3459                           ; 1 bytes @ 0x8
  3460                           
  3461  0028                     ??_FILTER_IPhase:	
  3462                           ; 1 bytes @ 0x8
  3463                           
  3464  0028                     ??_FILTER_Temp:	
  3465                           ; 1 bytes @ 0x8
  3466                           
  3467  0028                     ??_InitMotorStop:	
  3468                           ; 1 bytes @ 0x8
  3469                           
  3470  0028                     ??_init_ports:	
  3471                           ; 1 bytes @ 0x8
  3472                           
  3473  0028                     ?_ADC_Read:	
  3474                           ; 1 bytes @ 0x8
  3475                           
  3476  0028                     ?_sign:	
  3477                           ; 2 bytes @ 0x8
  3478                           
  3479  0028                     ?___wmul:	
  3480                           ; 2 bytes @ 0x8
  3481                           
  3482  0028                     ?___tmul:	
  3483                           ; 2 bytes @ 0x8
  3484                           
  3485  0028                     ?___lmul:	
  3486                           ; 3 bytes @ 0x8
  3487                           
  3488  0028                     ?___aldiv:	
  3489                           ; 4 bytes @ 0x8
  3490                           
  3491  0028                     PWM_Capture_init@ui8_CCP_Nb:	
  3492                           ; 4 bytes @ 0x8
  3493                           
  3494  0028                     clear_timer@ui8_TmrNb:	
  3495                           ; 1 bytes @ 0x8
  3496                           
  3497  0028                     sign@x:	
  3498                           ; 1 bytes @ 0x8
  3499                           
  3500  0028                     ___wmul@multiplier:	
  3501                           ; 2 bytes @ 0x8
  3502                           
  3503  0028                     ___tmul@multiplier:	
  3504                           ; 2 bytes @ 0x8
  3505                           
  3506  0028                     ___lmul@multiplier:	
  3507                           ; 3 bytes @ 0x8
  3508                           
  3509  0028                     ___aldiv@divisor:	
  3510                           ; 4 bytes @ 0x8
  3511                           
  3512                           
  3513                           ; 4 bytes @ 0x8
  3514  0028                     	ds	1
  3515  0029                     ??_timer_init:	
  3516  0029                     read_eeprom_data@ui8_adress:	
  3517                           ; 1 bytes @ 0x9
  3518                           
  3519  0029                     PWM_Write_Out@ui8_DutyCycle_Out:	
  3520                           ; 1 bytes @ 0x9
  3521                           
  3522  0029                     timer_init@ui8_TmrNb:	
  3523                           ; 1 bytes @ 0x9
  3524                           
  3525                           
  3526                           ; 1 bytes @ 0x9
  3527  0029                     	ds	1
  3528  002A                     ??_ADC_Read:	
  3529  002A                     ??_DiagInit:	
  3530                           ; 1 bytes @ 0xA
  3531                           
  3532  002A                     ??_SetDiagAlarm:	
  3533                           ; 1 bytes @ 0xA
  3534                           
  3535  002A                     ??_sign:	
  3536                           ; 1 bytes @ 0xA
  3537                           
  3538  002A                     read_eeprom_data@ui8_adress_data:	
  3539                           ; 1 bytes @ 0xA
  3540                           
  3541  002A                     ___wmul@multiplicand:	
  3542                           ; 1 bytes @ 0xA
  3543                           
  3544                           
  3545                           ; 2 bytes @ 0xA
  3546  002A                     	ds	1
  3547  002B                     ADC_Read@i:	
  3548  002B                     ___tmul@multiplicand:	
  3549                           ; 1 bytes @ 0xB
  3550                           
  3551                           
  3552                           ; 3 bytes @ 0xB
  3553  002B                     	ds	1
  3554  002C                     ??_FILTER_Init:	
  3555  002C                     ??_I_calibrationInit:	
  3556                           ; 1 bytes @ 0xC
  3557                           
  3558  002C                     ??___wmul:	
  3559                           ; 1 bytes @ 0xC
  3560                           
  3561  002C                     ___wmul@product:	
  3562                           ; 1 bytes @ 0xC
  3563                           
  3564  002C                     ___lmul@multiplicand:	
  3565                           ; 2 bytes @ 0xC
  3566                           
  3567  002C                     ___aldiv@dividend:	
  3568                           ; 4 bytes @ 0xC
  3569                           
  3570                           
  3571                           ; 4 bytes @ 0xC
  3572  002C                     	ds	2
  3573  002E                     ??___tmul:	
  3574  002E                     ?_rate_limit:	
  3575                           ; 1 bytes @ 0xE
  3576                           
  3577  002E                     rate_limit@pwm:	
  3578                           ; 2 bytes @ 0xE
  3579                           
  3580  002E                     ___tmul@product:	
  3581                           ; 2 bytes @ 0xE
  3582                           
  3583                           
  3584                           ; 3 bytes @ 0xE
  3585  002E                     	ds	2
  3586  0030                     ??_rate_limit:	
  3587  0030                     ??___lmul:	
  3588                           ; 1 bytes @ 0x10
  3589                           
  3590  0030                     ??___aldiv:	
  3591                           ; 1 bytes @ 0x10
  3592                           
  3593  0030                     ___lmul@product:	
  3594                           ; 1 bytes @ 0x10
  3595                           
  3596                           
  3597                           ; 4 bytes @ 0x10
  3598  0030                     	ds	1
  3599  0031                     ?___ltdiv:	
  3600  0031                     ___aldiv@counter:	
  3601                           ; 3 bytes @ 0x11
  3602                           
  3603  0031                     ___ltdiv@divisor:	
  3604                           ; 1 bytes @ 0x11
  3605                           
  3606                           
  3607                           ; 3 bytes @ 0x11
  3608  0031                     	ds	1
  3609  0032                     ___aldiv@sign:	
  3610  0032                     rate_limit@sign_delta_pwm:	
  3611                           ; 1 bytes @ 0x12
  3612                           
  3613                           
  3614                           ; 2 bytes @ 0x12
  3615  0032                     	ds	1
  3616  0033                     ___aldiv@quotient:	
  3617                           
  3618                           ; 4 bytes @ 0x13
  3619  0033                     	ds	1
  3620  0034                     ??_InitMotorRun:	
  3621  0034                     ??_Get_Analog_Value:	
  3622                           ; 1 bytes @ 0x14
  3623                           
  3624  0034                     ??_init_bldc:	
  3625                           ; 1 bytes @ 0x14
  3626                           
  3627  0034                     rate_limit@abs_delta_pwm:	
  3628                           ; 1 bytes @ 0x14
  3629                           
  3630  0034                     ___ltdiv@dividend:	
  3631                           ; 2 bytes @ 0x14
  3632                           
  3633                           
  3634                           ; 3 bytes @ 0x14
  3635  0034                     	ds	1
  3636  0035                     ??_system_init:	
  3637                           
  3638                           ; 1 bytes @ 0x15
  3639  0035                     	ds	1
  3640  0036                     rate_limit@pwm_inc:	
  3641                           
  3642                           ; 2 bytes @ 0x16
  3643  0036                     	ds	1
  3644  0037                     ??_BVH2_Appl_Layer:	
  3645  0037                     ??___ltdiv:	
  3646                           ; 1 bytes @ 0x17
  3647                           
  3648                           
  3649                           ; 1 bytes @ 0x17
  3650  0037                     	ds	1
  3651  0038                     rate_limit@sign_pwm_inc:	
  3652  0038                     ___ltdiv@quotient:	
  3653                           ; 2 bytes @ 0x18
  3654                           
  3655                           
  3656                           ; 3 bytes @ 0x18
  3657  0038                     	ds	2
  3658  003A                     rate_limit@delta_pwm:	
  3659                           
  3660                           ; 2 bytes @ 0x1A
  3661  003A                     	ds	1
  3662  003B                     ___ltdiv@counter:	
  3663                           
  3664                           ; 1 bytes @ 0x1B
  3665  003B                     	ds	1
  3666  003C                     ??_PWMReadDC:	
  3667                           
  3668                           ; 1 bytes @ 0x1C
  3669  003C                     	ds	11
  3670  0047                     ??_main:	
  3671                           
  3672                           ; 1 bytes @ 0x27
  3673  0047                     	ds	4
  3674                           
  3675                           	psect	maintext
  3676  16CE                     __pmaintext:	
  3677 ;;
  3678 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3679 ;;
  3680 ;; *************** function _main *****************
  3681 ;; Defined at:
  3682 ;;		line 634 in file "../main.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;		None
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : B1F/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3696 ;;      Params:         0       0       0       0       0       0       0       0
  3697 ;;      Locals:         0       0       0       0       0       0       0       0
  3698 ;;      Temps:          0       4       0       0       0       0       0       0
  3699 ;;      Totals:         0       4       0       0       0       0       0       0
  3700 ;;Total ram usage:        4 bytes
  3701 ;; Hardware stack levels required when called:    7
  3702 ;; This function calls:
  3703 ;;		_BVH2_Appl_Layer
  3704 ;;		_Get_Analog_Value
  3705 ;;		_InitMotorRun
  3706 ;;		_InitMotorStop
  3707 ;;		_PWMReadDC
  3708 ;;		_SetDiagAlarm
  3709 ;;		___wmul
  3710 ;;		_clear_timer
  3711 ;;		_rate_limit
  3712 ;;		_system_init
  3713 ;; This function is called by:
  3714 ;;		Startup code after reset
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function _main
  3720  16CE                     _main:	
  3721                           
  3722                           ;main.c: 646: system_init( );
  3723                           
  3724                           ;incstack = 0
  3725                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3726  16CE  3193  2349  3196   	fcall	_system_init
  3727                           
  3728                           ;main.c: 647: clear_timer( 4 );
  3729  16D1  3004               	movlw	4
  3730  16D2  319E  26DB  3196   	fcall	_clear_timer
  3731                           
  3732                           ;main.c: 648: ui8_lastTaskvalue = 0;
  3733  16D5  0022               	movlb	2	; select bank2
  3734  16D6  01C6               	clrf	_ui8_lastTaskvalue^(0+256)
  3735  16D7                     l11597:	
  3736                           ;main.c: 699: while( 1 )
  3737                           
  3738                           
  3739                           ;main.c: 701: {;main.c: 703: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  3740  16D7  0022               	movlb	2	; select bank2
  3741  16D8  0846               	movf	_ui8_lastTaskvalue^(0+256),w
  3742  16D9  0020               	movlb	0	; select bank0
  3743  16DA  00C7               	movwf	??_main
  3744  16DB  01C8               	clrf	??_main+1
  3745  16DC  09C7               	comf	??_main,f
  3746  16DD  09C8               	comf	??_main+1,f
  3747  16DE  0AC7               	incf	??_main,f
  3748  16DF  1903               	skipnz
  3749  16E0  0AC8               	incf	??_main+1,f
  3750  16E1  0021               	movlb	1	; select bank1
  3751  16E2  0851               	movf	_ui8_Task_Cont1ms^(0+128),w
  3752  16E3  0020               	movlb	0	; select bank0
  3753  16E4  0747               	addwf	??_main,w
  3754  16E5  00C9               	movwf	??_main+2
  3755  16E6  0848               	movf	??_main+1,w
  3756  16E7  1803               	skipnc
  3757  16E8  0A48               	incf	??_main+1,w
  3758  16E9  00CA               	movwf	??_main+3
  3759  16EA  0849               	movf	??_main+2,w
  3760  16EB  044A               	iorwf	??_main+3,w
  3761  16EC  1903               	btfsc	3,2
  3762  16ED  2ED7               	goto	l11597
  3763                           
  3764                           ;main.c: 705: {;main.c: 711: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  3765  16EE  0021               	movlb	1	; select bank1
  3766  16EF  0851               	movf	_ui8_Task_Cont1ms^(0+128),w
  3767  16F0  0020               	movlb	0	; select bank0
  3768  16F1  00C7               	movwf	??_main
  3769  16F2  0847               	movf	??_main,w
  3770  16F3  0022               	movlb	2	; select bank2
  3771  16F4  00C6               	movwf	_ui8_lastTaskvalue^(0+256)
  3772                           
  3773                           ;main.c: 714: ui8_Task_Cont3ms++;
  3774  16F5  3001               	movlw	1
  3775  16F6  0020               	movlb	0	; select bank0
  3776  16F7  00C7               	movwf	??_main
  3777  16F8  0847               	movf	??_main,w
  3778  16F9  0022               	movlb	2	; select bank2
  3779  16FA  07C8               	addwf	_ui8_Task_Cont3ms^(0+256),f
  3780                           
  3781                           ;main.c: 715: ui8_Task_Cont5ms++;
  3782  16FB  3001               	movlw	1
  3783  16FC  0020               	movlb	0	; select bank0
  3784  16FD  00C7               	movwf	??_main
  3785  16FE  0847               	movf	??_main,w
  3786  16FF  0022               	movlb	2	; select bank2
  3787  1700  07C7               	addwf	_ui8_Task_Cont5ms^(0+256),f
  3788                           
  3789                           ;main.c: 716: ui8_Task_Cont100ms++;
  3790  1701  3001               	movlw	1
  3791  1702  0020               	movlb	0	; select bank0
  3792  1703  00C7               	movwf	??_main
  3793  1704  0847               	movf	??_main,w
  3794  1705  0021               	movlb	1	; select bank1
  3795  1706  07CD               	addwf	_ui8_Task_Cont100ms^(0+128),f
  3796                           
  3797                           ;main.c: 935: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  3798  1707  307D               	movlw	125
  3799  1708  0020               	movlb	0	; select bank0
  3800  1709  009B               	movwf	27	;volatile
  3801                           
  3802                           ;main.c: 936: ui16_duty_cycle_BLDC = ui16_duty_cycle_mat*5/4;
  3803  170A  0023               	movlb	3	; select bank3
  3804  170B  083B               	movf	(_ui16_duty_cycle_mat+1)^(0+384),w
  3805  170C  0020               	movlb	0	; select bank0
  3806  170D  00A9               	movwf	___wmul@multiplier+1
  3807  170E  0023               	movlb	3	; select bank3
  3808  170F  083A               	movf	_ui16_duty_cycle_mat^(0+384),w
  3809  1710  0020               	movlb	0	; select bank0
  3810  1711  00A8               	movwf	___wmul@multiplier
  3811  1712  3005               	movlw	5
  3812  1713  00AA               	movwf	___wmul@multiplicand
  3813  1714  3000               	movlw	0
  3814  1715  00AB               	movwf	___wmul@multiplicand+1
  3815  1716  319E  2636  3196   	fcall	___wmul
  3816  1719  0020               	movlb	0	; select bank0
  3817  171A  0828               	movf	?___wmul,w
  3818  171B  00C7               	movwf	??_main
  3819  171C  0829               	movf	?___wmul+1,w
  3820  171D  00C8               	movwf	??_main+1
  3821  171E  36C8               	lsrf	??_main+1,f
  3822  171F  0CC7               	rrf	??_main,f
  3823  1720  36C8               	lsrf	??_main+1,f
  3824  1721  0CC7               	rrf	??_main,f
  3825  1722  0847               	movf	??_main,w
  3826  1723  0021               	movlb	1	; select bank1
  3827  1724  00B0               	movwf	_ui16_duty_cycle_BLDC^(0+128)
  3828  1725  0020               	movlb	0	; select bank0
  3829  1726  0848               	movf	??_main+1,w
  3830  1727  0021               	movlb	1	; select bank1
  3831  1728  00B1               	movwf	(_ui16_duty_cycle_BLDC+1)^(0+128)
  3832                           
  3833                           ;main.c: 953: Get_Analog_Value( );
  3834  1729  319D  2581  3196   	fcall	_Get_Analog_Value
  3835                           
  3836                           ;main.c: 999: if( ui8_Task_Cont3ms > 2 )
  3837  172C  3003               	movlw	3
  3838  172D  0022               	movlb	2	; select bank2
  3839  172E  0248               	subwf	_ui8_Task_Cont3ms^(0+256),w
  3840  172F  1803               	btfsc	3,0
  3841                           
  3842                           ;main.c: 1001: {;main.c: 1003: ui8_Task_Cont3ms = 0;
  3843  1730  01C8               	clrf	_ui8_Task_Cont3ms^(0+256)
  3844                           
  3845                           ;main.c: 1038: };main.c: 1044: if( ui8_Task_Cont5ms > 4 )
  3846  1731  3005               	movlw	5
  3847  1732  0247               	subwf	_ui8_Task_Cont5ms^(0+256),w
  3848  1733  1C03               	skipc
  3849  1734  2FF1               	goto	l11675
  3850                           
  3851                           ;main.c: 1046: {;main.c: 1050: ui8_Task_Cont5ms = 0;
  3852  1735  01C7               	clrf	_ui8_Task_Cont5ms^(0+256)
  3853  1736  0064               	clrwdt	;# 
  3854                           
  3855                           ;main.c: 1058: pwm_cmd = PWMReadDC( );
  3856  1737  3196  2620  3196   	fcall	_PWMReadDC
  3857  173A  0020               	movlb	0	; select bank0
  3858  173B  00C7               	movwf	??_main
  3859  173C  0847               	movf	??_main,w
  3860  173D  0022               	movlb	2	; select bank2
  3861  173E  00C5               	movwf	_pwm_cmd^(0+256)
  3862                           
  3863                           ;main.c: 1059: ui8_PWM_dc_mat = rate_limit(pwm_cmd);
  3864  173F  0845               	movf	_pwm_cmd^(0+256),w
  3865  1740  0020               	movlb	0	; select bank0
  3866  1741  00C7               	movwf	??_main
  3867  1742  01C8               	clrf	??_main+1
  3868  1743  0847               	movf	??_main,w
  3869  1744  00AE               	movwf	rate_limit@pwm
  3870  1745  0848               	movf	??_main+1,w
  3871  1746  00AF               	movwf	rate_limit@pwm+1
  3872  1747  3194  2478  3196   	fcall	_rate_limit
  3873  174A  0020               	movlb	0	; select bank0
  3874  174B  082E               	movf	?_rate_limit,w
  3875  174C  00C9               	movwf	??_main+2
  3876  174D  0849               	movf	??_main+2,w
  3877  174E  0021               	movlb	1	; select bank1
  3878  174F  00D0               	movwf	_ui8_PWM_dc_mat^(0+128)
  3879                           
  3880                           ;main.c: 1062: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  3881  1750  0023               	movlb	3	; select bank3
  3882  1751  0837               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  3883  1752  00B9               	movwf	(_ui16_PWM_Freq_mat+1)^(0+384)
  3884  1753  0836               	movf	_ui16_PWM_Freq_In^(0+384),w
  3885  1754  00B8               	movwf	_ui16_PWM_Freq_mat^(0+384)
  3886                           
  3887                           ;main.c: 1063: ui16_Speed_mat = ui16_speed_fil;
  3888  1755  0021               	movlb	1	; select bank1
  3889  1756  0833               	movf	(_ui16_speed_fil+1)^(0+128),w
  3890  1757  0020               	movlb	0	; select bank0
  3891  1758  00D0               	movwf	_ui16_Speed_mat+1
  3892  1759  0021               	movlb	1	; select bank1
  3893  175A  0832               	movf	_ui16_speed_fil^(0+128),w
  3894  175B  0020               	movlb	0	; select bank0
  3895  175C  00CF               	movwf	_ui16_Speed_mat
  3896                           
  3897                           ;main.c: 1064: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  3898  175D  0023               	movlb	3	; select bank3
  3899  175E  0841               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  3900  175F  00B5               	movwf	(_ui16_mat_inpTemp+1)^(0+384)
  3901  1760  0840               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  3902  1761  00B4               	movwf	_ui16_mat_inpTemp^(0+384)
  3903                           
  3904                           ;main.c: 1065: ui8_Ki_mat = 5;
  3905  1762  3005               	movlw	5
  3906  1763  00B2               	movwf	_ui8_Ki_mat^(0+384)
  3907  1764  3000               	movlw	0
  3908  1765  00B3               	movwf	(_ui8_Ki_mat^(0+384)+1)
  3909                           
  3910                           ;main.c: 1066: ui8_Kp_mat = 0;
  3911  1766  0022               	movlb	2	; select bank2
  3912  1767  01CD               	clrf	_ui8_Kp_mat^(0+256)
  3913                           
  3914                           ;main.c: 1114: ui16_Speed_demand_mat = PWM_trans_table[ ui8_PWM_dc_mat ];
  3915  1768  0021               	movlb	1	; select bank1
  3916  1769  0850               	movf	_ui8_PWM_dc_mat^(0+128),w
  3917  176A  0020               	movlb	0	; select bank0
  3918  176B  00C7               	movwf	??_main
  3919  176C  01C8               	clrf	??_main+1
  3920  176D  35C7               	lslf	??_main,f
  3921  176E  0DC8               	rlf	??_main+1,f
  3922  176F  3000               	movlw	low (_PWM_trans_table| (0+32768))
  3923  1770  0747               	addwf	??_main,w
  3924  1771  0084               	movwf	4
  3925  1772  3090               	movlw	high (_PWM_trans_table| (0+32768))
  3926  1773  3D48               	addwfc	??_main+1,w
  3927  1774  0085               	movwf	5
  3928  1775  3F00               	moviw [0]fsr0
  3929  1776  0023               	movlb	3	; select bank3
  3930  1777  00B0               	movwf	_ui16_Speed_demand_mat^(0+384)
  3931  1778  3F01               	moviw [1]fsr0
  3932  1779  00B1               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  3933                           
  3934                           ;main.c: 1117: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 200 ] );
  3935  177A  3090               	movlw	low ((_PWM_trans_table+400)| (0+32768))
  3936  177B  0084               	movwf	4
  3937  177C  3091               	movlw	high ((_PWM_trans_table+400)| (0+32768))
  3938  177D  0085               	movwf	5
  3939  177E  3F00               	moviw [0]fsr0
  3940  177F  00AE               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  3941  1780  3F01               	moviw [1]fsr0
  3942  1781  00AF               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  3943                           
  3944                           ;main.c: 1120: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 20 ] );
  3945  1782  3028               	movlw	low ((_PWM_trans_table+40)| (0+32768))
  3946  1783  0084               	movwf	4
  3947  1784  3090               	movlw	high ((_PWM_trans_table+40)| (0+32768))
  3948  1785  0085               	movwf	5
  3949  1786  3F00               	moviw [0]fsr0
  3950  1787  00AC               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  3951  1788  3F01               	moviw [1]fsr0
  3952  1789  00AD               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  3953                           
  3954                           ;main.c: 1139: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  3955  178A  084F               	movf	(_ui16_fir_Bat_mittel+1)^(0+384),w
  3956  178B  0020               	movlb	0	; select bank0
  3957  178C  00C8               	movwf	??_main+1
  3958  178D  0023               	movlb	3	; select bank3
  3959  178E  084E               	movf	_ui16_fir_Bat_mittel^(0+384),w
  3960  178F  0020               	movlb	0	; select bank0
  3961  1790  00C7               	movwf	??_main
  3962  1791  36C8               	lsrf	??_main+1,f
  3963  1792  0CC7               	rrf	??_main,f
  3964  1793  36C8               	lsrf	??_main+1,f
  3965  1794  0CC7               	rrf	??_main,f
  3966  1795  0847               	movf	??_main,w
  3967  1796  00C9               	movwf	??_main+2
  3968  1797  01CA               	clrf	??_main+3
  3969  1798  0849               	movf	??_main+2,w
  3970  1799  0021               	movlb	1	; select bank1
  3971  179A  00AE               	movwf	_ui8_BattVolt_mat^(0+128)
  3972  179B  0020               	movlb	0	; select bank0
  3973  179C  084A               	movf	??_main+3,w
  3974  179D  0021               	movlb	1	; select bank1
  3975  179E  00AF               	movwf	(_ui8_BattVolt_mat+1)^(0+128)
  3976                           
  3977                           ;main.c: 1140: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  3978  179F  0023               	movlb	3	; select bank3
  3979  17A0  084D               	movf	(_ui16_fir_IPhase_mean+1)^(0+384),w
  3980  17A1  0021               	movlb	1	; select bank1
  3981  17A2  00AD               	movwf	(_ui16_mat_Current+1)^(0+128)
  3982  17A3  0023               	movlb	3	; select bank3
  3983  17A4  084C               	movf	_ui16_fir_IPhase_mean^(0+384),w
  3984  17A5  0021               	movlb	1	; select bank1
  3985  17A6  00AC               	movwf	_ui16_mat_Current^(0+128)
  3986                           
  3987                           ;main.c: 1141: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  3988  17A7  3000               	movlw	0
  3989  17A8  0020               	movlb	0	; select bank0
  3990  17A9  185A               	btfsc	_MotorFlags,0
  3991  17AA  3001               	movlw	1
  3992  17AB  0021               	movlb	1	; select bank1
  3993  17AC  00CF               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  3994                           
  3995                           ;main.c: 1152: bool_ControlLoopMode = 0;
  3996  17AD  01CE               	clrf	_bool_ControlLoopMode^(0+128)
  3997                           
  3998                           ;main.c: 1160: BVH2_Appl_Layer( );
  3999  17AE  3180  2078  3196   	fcall	_BVH2_Appl_Layer
  4000                           
  4001                           ;main.c: 1163: ui8_ResetMatlab = 0;
  4002  17B1  0021               	movlb	1	; select bank1
  4003  17B2  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4004                           
  4005                           ;main.c: 1169: if( ui16_duty_cycle_mat == 0 )
  4006  17B3  0023               	movlb	3	; select bank3
  4007  17B4  083A               	movf	_ui16_duty_cycle_mat^(0+384),w
  4008  17B5  043B               	iorwf	(_ui16_duty_cycle_mat+1)^(0+384),w
  4009  17B6  1D03               	btfss	3,2
  4010  17B7  2FBC               	goto	l11655
  4011                           
  4012                           ;main.c: 1171: {;main.c: 1173: InitMotorStop( );
  4013  17B8  319D  25A2  3196   	fcall	_InitMotorStop
  4014                           
  4015                           ;main.c: 1176: }
  4016  17BB  2FBF               	goto	l11657
  4017  17BC                     l11655:	
  4018                           
  4019                           ;main.c: 1179: else;main.c: 1180: {;main.c: 1182: InitMotorRun( );
  4020  17BC  319F  27CB  3196   	fcall	_InitMotorRun
  4021  17BF                     l11657:	
  4022                           
  4023                           ;main.c: 1185: };main.c: 1192: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  4024  17BF  0022               	movlb	2	; select bank2
  4025  17C0  084C               	movf	_bool_PWMin_err_Alarm^(0+256),w
  4026  17C1  3901               	andlw	1
  4027  17C2  0021               	movlb	1	; select bank1
  4028  17C3  1061               	bcf	_ui8_error_Flags^(0+128),0
  4029  17C4  1D03               	skipz
  4030  17C5  1461               	bsf	_ui8_error_Flags^(0+128),0
  4031                           
  4032                           ;main.c: 1193: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  4033  17C6  0857               	movf	_bool_CPU_TempAlarm^(0+128),w
  4034  17C7  3901               	andlw	1
  4035  17C8  10E1               	bcf	_ui8_error_Flags^(0+128),1
  4036  17C9  1D03               	skipz
  4037  17CA  14E1               	bsf	_ui8_error_Flags^(0+128),1
  4038                           
  4039                           ;main.c: 1194: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  4040  17CB  0022               	movlb	2	; select bank2
  4041  17CC  084B               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  4042  17CD  3901               	andlw	1
  4043  17CE  0021               	movlb	1	; select bank1
  4044  17CF  13E1               	bcf	_ui8_error_Flags^(0+128),7
  4045  17D0  1D03               	skipz
  4046  17D1  17E1               	bsf	_ui8_error_Flags^(0+128),7
  4047                           
  4048                           ;main.c: 1195: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  4049  17D2  0854               	movf	_bool_HighCurrentAlarm^(0+128),w
  4050  17D3  3901               	andlw	1
  4051  17D4  1161               	bcf	_ui8_error_Flags^(0+128),2
  4052  17D5  1D03               	skipz
  4053  17D6  1561               	bsf	_ui8_error_Flags^(0+128),2
  4054                           
  4055                           ;main.c: 1196: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  4056  17D7  0855               	movf	_bool_MotorStalled^(0+128),w
  4057  17D8  3901               	andlw	1
  4058  17D9  11E1               	bcf	_ui8_error_Flags^(0+128),3
  4059  17DA  1D03               	skipz
  4060  17DB  15E1               	bsf	_ui8_error_Flags^(0+128),3
  4061                           
  4062                           ;main.c: 1197: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  4063  17DC  0856               	movf	_bool_DryRunningAlarm^(0+128),w
  4064  17DD  3901               	andlw	1
  4065  17DE  1261               	bcf	_ui8_error_Flags^(0+128),4
  4066  17DF  1D03               	skipz
  4067  17E0  1661               	bsf	_ui8_error_Flags^(0+128),4
  4068                           
  4069                           ;main.c: 1198: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  4070  17E1  0022               	movlb	2	; select bank2
  4071  17E2  084A               	movf	_bool_UbatAlarm^(0+256),w
  4072  17E3  3901               	andlw	1
  4073  17E4  0021               	movlb	1	; select bank1
  4074  17E5  1361               	bcf	_ui8_error_Flags^(0+128),6
  4075  17E6  1D03               	skipz
  4076  17E7  1761               	bsf	_ui8_error_Flags^(0+128),6
  4077                           
  4078                           ;main.c: 1199: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  4079  17E8  0022               	movlb	2	; select bank2
  4080  17E9  0849               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  4081  17EA  3901               	andlw	1
  4082  17EB  0021               	movlb	1	; select bank1
  4083  17EC  12E1               	bcf	_ui8_error_Flags^(0+128),5
  4084  17ED  1D03               	skipz
  4085  17EE  16E1               	bsf	_ui8_error_Flags^(0+128),5
  4086                           
  4087                           ;main.c: 1204: MotorFlags.bits.B0 = 0;
  4088  17EF  0020               	movlb	0	; select bank0
  4089  17F0  105A               	bcf	_MotorFlags,0
  4090  17F1                     l11675:	
  4091                           
  4092                           ;main.c: 1260: };main.c: 1266: if( ui8_Task_Cont100ms == 25 )
  4093  17F1  3019               	movlw	25
  4094  17F2  0021               	movlb	1	; select bank1
  4095  17F3  064D               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  4096  17F4  1D03               	btfss	3,2
  4097  17F5  2FF9               	goto	l11685
  4098                           
  4099                           ;main.c: 1268: {;main.c: 1279: SetDiagAlarm( );
  4100  17F6  3192  2211  3196   	fcall	_SetDiagAlarm
  4101  17F9                     l11685:	
  4102                           ;main.c: 1439: {
  4103                           
  4104                           ;main.c: 1389: {
  4105                           
  4106                           ;main.c: 1351: {
  4107                           
  4108                           
  4109                           ;main.c: 1481: };main.c: 1487: if( ui8_Task_Cont100ms > 100 )
  4110  17F9  3065               	movlw	101
  4111  17FA  0021               	movlb	1	; select bank1
  4112  17FB  024D               	subwf	_ui8_Task_Cont100ms^(0+128),w
  4113  17FC  1803               	btfsc	3,0
  4114                           
  4115                           ;main.c: 1489: {;main.c: 1493: ui8_Task_Cont100ms = 0;
  4116  17FD  01CD               	clrf	_ui8_Task_Cont100ms^(0+128)
  4117                           
  4118                           ;main.c: 1533: };main.c: 1561: bool_start_demand_mat = 0;
  4119  17FE  01E0               	clrf	_bool_start_demand_mat^(0+128)
  4120                           
  4121                           ;main.c: 1570: else;main.c: 1571: {
  4122                           
  4123                           ;main.c: 1567: }
  4124  17FF  2ED7               	goto	l11597
  4125  1800                     __end_of_main:	
  4126                           
  4127                           	psect	text1
  4128  1349                     __ptext1:	
  4129 ;; *************** function _system_init *****************
  4130 ;; Defined at:
  4131 ;;		line 549 in file "../main.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;		None
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  1    wreg      void 
  4138 ;; Registers used:
  4139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4145 ;;      Params:         0       0       0       0       0       0       0       0
  4146 ;;      Locals:         0       0       0       0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0
  4148 ;;      Totals:         0       0       0       0       0       0       0       0
  4149 ;;Total ram usage:        0 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    6
  4152 ;; This function calls:
  4153 ;;		_ADC_Init
  4154 ;;		_DiagInit
  4155 ;;		_FILTER_Init
  4156 ;;		_I_calibrationInit
  4157 ;;		_Oscill_Source_Block
  4158 ;;		_PWM_Capture_init
  4159 ;;		_init_bldc
  4160 ;;		_init_ports
  4161 ;;		_timer_init
  4162 ;; This function is called by:
  4163 ;;		_main
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           
  4168                           ;psect for function _system_init
  4169  1349                     _system_init:	
  4170                           
  4171                           ;main.c: 553: OPTION_REG = 0b10000001;
  4172                           
  4173                           ;incstack = 0
  4174                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4175  1349  3081               	movlw	129
  4176  134A  0021               	movlb	1	; select bank1
  4177  134B  0095               	movwf	21	;volatile
  4178                           
  4179                           ;main.c: 562: ui8_ResetMatlab = 1;
  4180  134C  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4181  134D  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  4182                           
  4183                           ;main.c: 563: GIE = 0;
  4184  134E  138B               	bcf	11,7	;volatile
  4185                           
  4186                           ;main.c: 564: INTCON = 0;
  4187  134F  018B               	clrf	11	;volatile
  4188                           
  4189                           ;main.c: 565: PIE1 = 0;
  4190  1350  0191               	clrf	17	;volatile
  4191                           
  4192                           ;main.c: 566: PIE2 = 0;
  4193  1351  0192               	clrf	18	;volatile
  4194                           
  4195                           ;main.c: 567: PIE3 = 0;
  4196  1352  0193               	clrf	19	;volatile
  4197                           
  4198                           ;main.c: 569: ui16_Timer_VaL1 = 0;
  4199  1353  0024               	movlb	4	; select bank4
  4200  1354  01D0               	clrf	_ui16_Timer_VaL1^(0+512)
  4201  1355  01D1               	clrf	(_ui16_Timer_VaL1+1)^(0+512)
  4202                           
  4203                           ;main.c: 570: ui8_Task_Cont3ms = 0;
  4204  1356  0022               	movlb	2	; select bank2
  4205  1357  01C8               	clrf	_ui8_Task_Cont3ms^(0+256)
  4206                           
  4207                           ;main.c: 571: ui8_Task_Cont5ms = 0;
  4208  1358  01C7               	clrf	_ui8_Task_Cont5ms^(0+256)
  4209                           
  4210                           ;main.c: 572: ui8_Task_Cont100ms = 0;
  4211  1359  0021               	movlb	1	; select bank1
  4212  135A  01CD               	clrf	_ui8_Task_Cont100ms^(0+128)
  4213                           
  4214                           ;main.c: 573: ui8_DebugCnt = 0;
  4215  135B  0023               	movlb	3	; select bank3
  4216  135C  01E0               	clrf	_ui8_DebugCnt^(0+384)
  4217                           
  4218                           ;main.c: 575: ui8_Sync_Cont10ms = 0;
  4219  135D  01E1               	clrf	_ui8_Sync_Cont10ms^(0+384)
  4220                           
  4221                           ;main.c: 577: ui16_dryRun_Thresh = 73;
  4222  135E  3049               	movlw	73
  4223  135F  0024               	movlb	4	; select bank4
  4224  1360  00EE               	movwf	_ui16_dryRun_Thresh^(0+512)
  4225  1361  3000               	movlw	0
  4226  1362  00EF               	movwf	(_ui16_dryRun_Thresh^(0+512)+1)
  4227                           
  4228                           ;main.c: 579: ui16_Current_Thresh = 360;
  4229  1363  3068               	movlw	104
  4230  1364  0023               	movlb	3	; select bank3
  4231  1365  00ED               	movwf	_ui16_Current_Thresh^(0+384)
  4232  1366  3001               	movlw	1
  4233  1367  00EE               	movwf	(_ui16_Current_Thresh^(0+384)+1)
  4234                           
  4235                           ;main.c: 581: init_ports( );
  4236  1368  319D  25BF  3193   	fcall	_init_ports
  4237                           
  4238                           ;main.c: 592: Oscill_Source_Block( );
  4239  136B  319D  2558  3193   	fcall	_Oscill_Source_Block
  4240                           
  4241                           ;main.c: 593: timer_init( 1 );
  4242  136E  3001               	movlw	1
  4243  136F  3192  2282  3193   	fcall	_timer_init
  4244                           
  4245                           ;main.c: 594: timer_init( 4 );
  4246  1372  3004               	movlw	4
  4247  1373  3192  2282  3193   	fcall	_timer_init
  4248                           
  4249                           ;main.c: 595: timer_init( 6 );
  4250  1376  3006               	movlw	6
  4251  1377  3192  2282  3193   	fcall	_timer_init
  4252                           
  4253                           ;main.c: 598: PWM_Capture_init( 5 );
  4254  137A  3005               	movlw	5
  4255  137B  3188  2001  3193   	fcall	_PWM_Capture_init
  4256                           
  4257                           ;main.c: 599: ADC_Init( );
  4258  137E  319D  258A  3193   	fcall	_ADC_Init
  4259                           
  4260                           ;main.c: 600: DiagInit( );
  4261  1381  319D  2595  3193   	fcall	_DiagInit
  4262                           
  4263                           ;main.c: 601: FILTER_Init( );
  4264  1384  319E  2673  3193   	fcall	_FILTER_Init
  4265                           
  4266                           ;main.c: 604: ui16_Temp_cal = 0;
  4267  1387  0023               	movlb	3	; select bank3
  4268  1388  01D0               	clrf	_ui16_Temp_cal^(0+384)
  4269  1389  01D1               	clrf	(_ui16_Temp_cal+1)^(0+384)
  4270                           
  4271                           ;main.c: 614: I_calibrationInit();
  4272  138A  3188  2058  3193   	fcall	_I_calibrationInit
  4273                           
  4274                           ;main.c: 616: init_bldc( );
  4275  138D  319F  2749         	fcall	_init_bldc
  4276                           
  4277                           ;main.c: 618: PEIE = 1;
  4278  138F  170B               	bsf	11,6	;volatile
  4279                           
  4280                           ;main.c: 619: GIE = 1;
  4281  1390  178B               	bsf	11,7	;volatile
  4282  1391  0008               	return
  4283  1392                     __end_of_system_init:	
  4284                           
  4285                           	psect	text2
  4286  1282                     __ptext2:	
  4287 ;; *************** function _timer_init *****************
  4288 ;; Defined at:
  4289 ;;		line 73 in file "../timer.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  ui8_TmrNb       1    9[BANK0 ] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4303 ;;      Params:         0       0       0       0       0       0       0       0
  4304 ;;      Locals:         0       1       0       0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0
  4306 ;;      Totals:         0       1       0       0       0       0       0       0
  4307 ;;Total ram usage:        1 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    4
  4310 ;; This function calls:
  4311 ;;		_clear_timer
  4312 ;; This function is called by:
  4313 ;;		_system_init
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _timer_init
  4319  1282                     _timer_init:	
  4320                           
  4321                           ;incstack = 0
  4322                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4323                           ;timer_init@ui8_TmrNb stored from wreg
  4324  1282  0020               	movlb	0	; select bank0
  4325  1283  00A9               	movwf	timer_init@ui8_TmrNb
  4326                           
  4327                           ;timer.c: 77: switch( ui8_TmrNb )
  4328  1284  2AAE               	goto	l5885
  4329  1285                     l5855:	
  4330                           ;timer.c: 79: {;timer.c: 81: case 0:
  4331                           
  4332                           
  4333                           ;timer.c: 83: {;timer.c: 86: clear_timer( 0 );
  4334  1285  3000               	movlw	0
  4335  1286  319E  26DB         	fcall	_clear_timer
  4336                           
  4337                           ;timer.c: 87: TMR0IE = 0;
  4338  1288  128B               	bcf	11,5	;volatile
  4339                           
  4340                           ;timer.c: 88: break;
  4341  1289  0008               	return
  4342  128A                     l5859:	
  4343                           ;timer.c: 90: };timer.c: 93: case 1:
  4344                           
  4345                           
  4346                           ;timer.c: 95: {;timer.c: 98: clear_timer( 1 );
  4347  128A  3001               	movlw	1
  4348  128B  319E  26DB         	fcall	_clear_timer
  4349                           
  4350                           ;timer.c: 99: T1CON = 0b01110101;
  4351  128D  3075               	movlw	117
  4352  128E  0020               	movlb	0	; select bank0
  4353  128F  0098               	movwf	24	;volatile
  4354                           
  4355                           ;timer.c: 100: TMR1IE = 0;
  4356  1290  0021               	movlb	1	; select bank1
  4357  1291  1011               	bcf	17,0	;volatile
  4358                           
  4359                           ;timer.c: 101: break;
  4360  1292  0008               	return
  4361  1293                     l5865:	
  4362                           ;timer.c: 103: };timer.c: 106: case 2:
  4363                           
  4364                           
  4365                           ;timer.c: 108: {;timer.c: 111: clear_timer( 2 );
  4366  1293  3002               	movlw	2
  4367  1294  319E  26DB         	fcall	_clear_timer
  4368                           
  4369                           ;timer.c: 112: T2CON = 0b00000111;
  4370  1296  3007               	movlw	7
  4371  1297  0020               	movlb	0	; select bank0
  4372  1298  009C               	movwf	28	;volatile
  4373                           
  4374                           ;timer.c: 113: TMR2IE = 0;
  4375  1299  0021               	movlb	1	; select bank1
  4376  129A  1091               	bcf	17,1	;volatile
  4377                           
  4378                           ;timer.c: 114: break;
  4379  129B  0008               	return
  4380  129C                     l5871:	
  4381                           ;timer.c: 116: };timer.c: 119: case 4:
  4382                           
  4383                           
  4384                           ;timer.c: 121: {;timer.c: 124: clear_timer( 4 );
  4385  129C  3004               	movlw	4
  4386  129D  319E  26DB         	fcall	_clear_timer
  4387                           
  4388                           ;timer.c: 125: T4CON = 0b00001110;
  4389  129F  300E               	movlw	14
  4390  12A0  0028               	movlb	8	; select bank8
  4391  12A1  0097               	movwf	23	;volatile
  4392                           
  4393                           ;timer.c: 129: TMR4IE = 1;
  4394  12A2  0021               	movlb	1	; select bank1
  4395  12A3  1493               	bsf	19,1	;volatile
  4396                           
  4397                           ;timer.c: 131: break;
  4398  12A4  0008               	return
  4399  12A5                     l5877:	
  4400                           ;timer.c: 133: };timer.c: 136: case 6:
  4401                           
  4402                           
  4403                           ;timer.c: 138: {;timer.c: 141: clear_timer( 6 );
  4404  12A5  3006               	movlw	6
  4405  12A6  319E  26DB         	fcall	_clear_timer
  4406                           
  4407                           ;timer.c: 142: T6CON = 0b00000101;
  4408  12A8  3005               	movlw	5
  4409  12A9  0028               	movlb	8	; select bank8
  4410  12AA  009E               	movwf	30	;volatile
  4411                           
  4412                           ;timer.c: 161: TMR6IE = 0;
  4413  12AB  0021               	movlb	1	; select bank1
  4414  12AC  1193               	bcf	19,3	;volatile
  4415                           
  4416                           ;timer.c: 181: };timer.c: 183: }
  4417                           
  4418                           ;timer.c: 176: {;timer.c: 178: break;
  4419                           
  4420                           ;timer.c: 171: };timer.c: 175: default:
  4421                           
  4422                           ;timer.c: 169: break;
  4423  12AD  0008               	return
  4424  12AE                     l5885:	
  4425  12AE  0020               	movlb	0	; select bank0
  4426  12AF  0829               	movf	timer_init@ui8_TmrNb,w
  4427                           
  4428                           ; Switch size 1, requested type "space"
  4429                           ; Number of cases is 5, Range of values is 0 to 6
  4430                           ; switch strategies available:
  4431                           ; Name         Instructions Cycles
  4432                           ; simple_byte           16     9 (average)
  4433                           ; direct_byte           20     6 (fixed)
  4434                           ; jumptable            260     6 (fixed)
  4435                           ;	Chosen strategy is simple_byte
  4436  12B0  3A00               	xorlw	0	; case 0
  4437  12B1  1903               	skipnz
  4438  12B2  2A85               	goto	l5855
  4439  12B3  3A01               	xorlw	1	; case 1
  4440  12B4  1903               	skipnz
  4441  12B5  2A8A               	goto	l5859
  4442  12B6  3A03               	xorlw	3	; case 2
  4443  12B7  1903               	skipnz
  4444  12B8  2A93               	goto	l5865
  4445  12B9  3A06               	xorlw	6	; case 4
  4446  12BA  1903               	skipnz
  4447  12BB  2A9C               	goto	l5871
  4448  12BC  3A02               	xorlw	2	; case 6
  4449  12BD  1903               	skipnz
  4450  12BE  2AA5               	goto	l5877
  4451  12BF  2AC0               	goto	l1734
  4452  12C0                     l1734:	
  4453  12C0  0008               	return
  4454  12C1                     __end_of_timer_init:	
  4455                           
  4456                           	psect	text3
  4457  1EDB                     __ptext3:	
  4458 ;; *************** function _clear_timer *****************
  4459 ;; Defined at:
  4460 ;;		line 302 in file "../timer.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;  ui8_TmrNb       1    8[BANK0 ] unsigned char 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4474 ;;      Params:         0       0       0       0       0       0       0       0
  4475 ;;      Locals:         0       1       0       0       0       0       0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0
  4477 ;;      Totals:         0       1       0       0       0       0       0       0
  4478 ;;Total ram usage:        1 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    3
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;;		_timer_init
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function _clear_timer
  4491  1EDB                     _clear_timer:	
  4492                           
  4493                           ;incstack = 0
  4494                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  4495                           ;clear_timer@ui8_TmrNb stored from wreg
  4496  1EDB  0020               	movlb	0	; select bank0
  4497  1EDC  00A8               	movwf	clear_timer@ui8_TmrNb
  4498                           
  4499                           ;timer.c: 306: switch( ui8_TmrNb )
  4500  1EDD  2EEB               	goto	l5695
  4501  1EDE                     l5683:	
  4502                           ;timer.c: 308: {;timer.c: 310: case 0:
  4503                           
  4504                           
  4505                           ;timer.c: 312: {;timer.c: 314: TMR0 = 0;
  4506  1EDE  0195               	clrf	21	;volatile
  4507                           
  4508                           ;timer.c: 315: break;
  4509  1EDF  0008               	return
  4510  1EE0                     l5685:	
  4511                           ;timer.c: 317: };timer.c: 320: case 1:
  4512                           
  4513                           
  4514                           ;timer.c: 322: {;timer.c: 324: TMR1L = 0x00;
  4515  1EE0  0196               	clrf	22	;volatile
  4516                           
  4517                           ;timer.c: 325: TMR1H = 0x00;
  4518  1EE1  0197               	clrf	23	;volatile
  4519                           
  4520                           ;timer.c: 326: break;
  4521  1EE2  0008               	return
  4522  1EE3                     l5687:	
  4523                           ;timer.c: 328: };timer.c: 331: case 2:
  4524                           
  4525                           
  4526                           ;timer.c: 333: {;timer.c: 335: TMR2 = 0;
  4527  1EE3  019A               	clrf	26	;volatile
  4528                           
  4529                           ;timer.c: 336: break;
  4530  1EE4  0008               	return
  4531  1EE5                     l5689:	
  4532                           ;timer.c: 338: };timer.c: 341: case 4:
  4533                           
  4534                           
  4535                           ;timer.c: 343: {;timer.c: 345: TMR4 = 0;
  4536  1EE5  0028               	movlb	8	; select bank8
  4537  1EE6  0195               	clrf	21	;volatile
  4538                           
  4539                           ;timer.c: 346: break;
  4540  1EE7  0008               	return
  4541  1EE8                     l5691:	
  4542                           ;timer.c: 348: };timer.c: 351: case 6:
  4543                           
  4544                           
  4545                           ;timer.c: 353: {;timer.c: 355: TMR6 = 0;
  4546  1EE8  0028               	movlb	8	; select bank8
  4547  1EE9  019C               	clrf	28	;volatile
  4548                           
  4549                           ;timer.c: 368: };timer.c: 370: }
  4550                           
  4551                           ;timer.c: 363: {;timer.c: 365: break;
  4552                           
  4553                           ;timer.c: 358: };timer.c: 362: default:
  4554                           
  4555                           ;timer.c: 356: break;
  4556  1EEA  0008               	return
  4557  1EEB                     l5695:	
  4558  1EEB  0020               	movlb	0	; select bank0
  4559  1EEC  0828               	movf	clear_timer@ui8_TmrNb,w
  4560                           
  4561                           ; Switch size 1, requested type "space"
  4562                           ; Number of cases is 5, Range of values is 0 to 6
  4563                           ; switch strategies available:
  4564                           ; Name         Instructions Cycles
  4565                           ; simple_byte           16     9 (average)
  4566                           ; direct_byte           20     6 (fixed)
  4567                           ; jumptable            260     6 (fixed)
  4568                           ;	Chosen strategy is simple_byte
  4569  1EED  3A00               	xorlw	0	; case 0
  4570  1EEE  1903               	skipnz
  4571  1EEF  2EDE               	goto	l5683
  4572  1EF0  3A01               	xorlw	1	; case 1
  4573  1EF1  1903               	skipnz
  4574  1EF2  2EE0               	goto	l5685
  4575  1EF3  3A03               	xorlw	3	; case 2
  4576  1EF4  1903               	skipnz
  4577  1EF5  2EE3               	goto	l5687
  4578  1EF6  3A06               	xorlw	6	; case 4
  4579  1EF7  1903               	skipnz
  4580  1EF8  2EE5               	goto	l5689
  4581  1EF9  3A02               	xorlw	2	; case 6
  4582  1EFA  1903               	skipnz
  4583  1EFB  2EE8               	goto	l5691
  4584  1EFC  2EFD               	goto	l1757
  4585  1EFD                     l1757:	
  4586  1EFD  0008               	return
  4587  1EFE                     __end_of_clear_timer:	
  4588                           
  4589                           	psect	text4
  4590  1DBF                     __ptext4:	
  4591 ;; *************** function _init_ports *****************
  4592 ;; Defined at:
  4593 ;;		line 408 in file "../main.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;		None
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4607 ;;      Params:         0       0       0       0       0       0       0       0
  4608 ;;      Locals:         0       0       0       0       0       0       0       0
  4609 ;;      Temps:          0       0       0       0       0       0       0       0
  4610 ;;      Totals:         0       0       0       0       0       0       0       0
  4611 ;;Total ram usage:        0 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    3
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_system_init
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _init_ports
  4623  1DBF                     _init_ports:	
  4624                           
  4625                           ;main.c: 415: ANSELA = 0b00100111;
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in _init_ports: [wreg+status,2]
  4629  1DBF  3027               	movlw	39
  4630  1DC0  0023               	movlb	3	; select bank3
  4631  1DC1  008C               	movwf	12	;volatile
  4632                           
  4633                           ;main.c: 416: ANSELB = 0b00101001;
  4634  1DC2  3029               	movlw	41
  4635  1DC3  008D               	movwf	13	;volatile
  4636                           
  4637                           ;main.c: 419: LATA = 0;
  4638  1DC4  0022               	movlb	2	; select bank2
  4639  1DC5  018C               	clrf	12	;volatile
  4640                           
  4641                           ;main.c: 420: LATB = 0;
  4642  1DC6  018D               	clrf	13	;volatile
  4643                           
  4644                           ;main.c: 421: LATC = 0;
  4645  1DC7  018E               	clrf	14	;volatile
  4646                           
  4647                           ;main.c: 502: TRISA = 0b01111111;
  4648  1DC8  307F               	movlw	127
  4649  1DC9  0021               	movlb	1	; select bank1
  4650  1DCA  008C               	movwf	12	;volatile
  4651                           
  4652                           ;main.c: 511: TRISB = 0b00111001;
  4653  1DCB  3039               	movlw	57
  4654  1DCC  008D               	movwf	13	;volatile
  4655                           
  4656                           ;main.c: 520: TRISC = 0b00000000;
  4657  1DCD  018E               	clrf	14	;volatile
  4658  1DCE  0008               	return
  4659  1DCF                     __end_of_init_ports:	
  4660                           
  4661                           	psect	text5
  4662  1F49                     __ptext5:	
  4663 ;; *************** function _init_bldc *****************
  4664 ;; Defined at:
  4665 ;;		line 207 in file "../bldc.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;		None
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  1    wreg      void 
  4672 ;; Registers used:
  4673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4679 ;;      Params:         0       0       0       0       0       0       0       0
  4680 ;;      Locals:         0       0       0       0       0       0       0       0
  4681 ;;      Temps:          0       1       0       0       0       0       0       0
  4682 ;;      Totals:         0       1       0       0       0       0       0       0
  4683 ;;Total ram usage:        1 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    5
  4686 ;; This function calls:
  4687 ;;		_InitMotorRun
  4688 ;; This function is called by:
  4689 ;;		_system_init
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           
  4694                           ;psect for function _init_bldc
  4695  1F49                     _init_bldc:	
  4696                           
  4697                           ;bldc.c: 218: PSTR1CON = 0;
  4698                           
  4699                           ;incstack = 0
  4700                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4701  1F49  0025               	movlb	5	; select bank5
  4702  1F4A  0196               	clrf	22	;volatile
  4703                           
  4704                           ;bldc.c: 222: CM1CON0 = 0x80;
  4705  1F4B  3080               	movlw	128
  4706  1F4C  0022               	movlb	2	; select bank2
  4707  1F4D  0091               	movwf	17	;volatile
  4708                           
  4709                           ;bldc.c: 228: CM1CON1 = 0x00;
  4710  1F4E  0192               	clrf	18	;volatile
  4711                           
  4712                           ;bldc.c: 230: C1IE = 0;
  4713  1F4F  0021               	movlb	1	; select bank1
  4714  1F50  1292               	bcf	18,5	;volatile
  4715                           
  4716                           ;bldc.c: 235: PWM1CON = 0x87;
  4717  1F51  3087               	movlw	135
  4718  1F52  0025               	movlb	5	; select bank5
  4719  1F53  0094               	movwf	20	;volatile
  4720                           
  4721                           ;bldc.c: 239: CCP1AS = 0x800;
  4722  1F54  0195               	clrf	21	;volatile
  4723                           
  4724                           ;bldc.c: 240: CCP1CON = 0x0C;
  4725  1F55  300C               	movlw	12
  4726  1F56  0093               	movwf	19	;volatile
  4727                           
  4728                           ;bldc.c: 246: CCPR1L = 0;
  4729  1F57  0191               	clrf	17	;volatile
  4730                           
  4731                           ;bldc.c: 248: CCP2IE = 0;
  4732  1F58  0021               	movlb	1	; select bank1
  4733  1F59  1012               	bcf	18,0	;volatile
  4734                           
  4735                           ;bldc.c: 249: CCP2CON = 0x04;
  4736  1F5A  3004               	movlw	4
  4737  1F5B  0025               	movlb	5	; select bank5
  4738  1F5C  009A               	movwf	26	;volatile
  4739                           
  4740                           ;bldc.c: 250: CCPR2L = 0xff;
  4741  1F5D  30FF               	movlw	255
  4742  1F5E  0098               	movwf	24	;volatile
  4743                           
  4744                           ;bldc.c: 251: CCPR2H = 0xff;
  4745  1F5F  30FF               	movlw	255
  4746  1F60  0099               	movwf	25	;volatile
  4747                           
  4748                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  4749  1F61  3064               	movlw	100
  4750  1F62  0020               	movlb	0	; select bank0
  4751  1F63  009B               	movwf	27	;volatile
  4752                           
  4753                           ;bldc.c: 255: T2CON = 0x05;
  4754  1F64  3005               	movlw	5
  4755  1F65  009C               	movwf	28	;volatile
  4756                           
  4757                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  4758  1F66  3028               	movlw	40
  4759  1F67  00B4               	movwf	??_init_bldc
  4760  1F68  0834               	movf	??_init_bldc,w
  4761  1F69  0021               	movlb	1	; select bank1
  4762  1F6A  00DD               	movwf	_ui8_BlankingCount^(0+128)
  4763                           
  4764                           ;bldc.c: 264: TMR2IE = 1;
  4765  1F6B  1491               	bsf	17,1	;volatile
  4766                           
  4767                           ;bldc.c: 267: MotorFlags.b = 0;
  4768  1F6C  0020               	movlb	0	; select bank0
  4769  1F6D  01DA               	clrf	_MotorFlags
  4770                           
  4771                           ;bldc.c: 270: InitMotorRun( );
  4772  1F6E  319F  27CB         	fcall	_InitMotorRun
  4773  1F70  0008               	return
  4774  1F71                     __end_of_init_bldc:	
  4775                           
  4776                           	psect	text6
  4777  1FCB                     __ptext6:	
  4778 ;; *************** function _InitMotorRun *****************
  4779 ;; Defined at:
  4780 ;;		line 2171 in file "../bldc.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;		None
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;		None
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      void 
  4787 ;; Registers used:
  4788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4789 ;; Tracked objects:
  4790 ;;		On entry : 0/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4794 ;;      Params:         0       0       0       0       0       0       0       0
  4795 ;;      Locals:         0       0       0       0       0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0
  4797 ;;      Totals:         0       0       0       0       0       0       0       0
  4798 ;;Total ram usage:        0 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    4
  4801 ;; This function calls:
  4802 ;;		_commutate
  4803 ;; This function is called by:
  4804 ;;		_init_bldc
  4805 ;;		_main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _InitMotorRun
  4811  1FCB                     _InitMotorRun:	
  4812                           
  4813                           ;bldc.c: 2176: if( 0 == MotorFlags.bits.B6 )
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4817  1FCB  0020               	movlb	0	; select bank0
  4818  1FCC  1B5A               	btfsc	_MotorFlags,6
  4819  1FCD  0008               	return
  4820                           
  4821                           ;bldc.c: 2179: {;bldc.c: 2181: MotorFlags.bits.B5 = 0;
  4822  1FCE  12DA               	bcf	_MotorFlags,5
  4823                           
  4824                           ;bldc.c: 2182: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  4825  1FCF  30A6               	movlw	166
  4826  1FD0  0022               	movlb	2	; select bank2
  4827  1FD1  00A7               	movwf	_ui16_comm_time_max^(0+256)
  4828  1FD2  3000               	movlw	0
  4829  1FD3  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
  4830                           
  4831                           ;bldc.c: 2183: comm_state = 1;
  4832  1FD4  0021               	movlb	1	; select bank1
  4833  1FD5  01DE               	clrf	_comm_state^(0+128)
  4834  1FD6  0ADE               	incf	_comm_state^(0+128),f
  4835                           
  4836                           ;bldc.c: 2184: ui16_step_cnt = 0;
  4837  1FD7  01BA               	clrf	_ui16_step_cnt^(0+128)
  4838  1FD8  01BB               	clrf	(_ui16_step_cnt+1)^(0+128)
  4839                           
  4840                           ;bldc.c: 2185: ui16_duty_cycle_BLDC = 0;
  4841  1FD9  01B0               	clrf	_ui16_duty_cycle_BLDC^(0+128)
  4842  1FDA  01B1               	clrf	(_ui16_duty_cycle_BLDC+1)^(0+128)
  4843                           
  4844                           ;bldc.c: 2186: comm_time = 0;
  4845  1FDB  0020               	movlb	0	; select bank0
  4846  1FDC  01D3               	clrf	_comm_time
  4847  1FDD  01D4               	clrf	_comm_time+1
  4848                           
  4849                           ;bldc.c: 2187: bemf_filter = 0;
  4850  1FDE  0022               	movlb	2	; select bank2
  4851  1FDF  01E6               	clrf	_bemf_filter^(0+256)
  4852                           
  4853                           ;bldc.c: 2188: phase_delay_counter = 0;
  4854  1FE0  0021               	movlb	1	; select bank1
  4855  1FE1  01B8               	clrf	_phase_delay_counter^(0+128)
  4856  1FE2  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  4857                           
  4858                           ;bldc.c: 2189: phase_delay_counter_debug = 0;
  4859  1FE3  0024               	movlb	4	; select bank4
  4860  1FE4  01E6               	clrf	_phase_delay_counter_debug^(0+512)
  4861  1FE5  01E7               	clrf	(_phase_delay_counter_debug+1)^(0+512)
  4862                           
  4863                           ;bldc.c: 2190: PSTR1CON = 0;
  4864  1FE6  0025               	movlb	5	; select bank5
  4865  1FE7  0196               	clrf	22	;volatile
  4866                           
  4867                           ;bldc.c: 2193: MotorFlags.bits.B3 = 1 ;
  4868  1FE8  0020               	movlb	0	; select bank0
  4869  1FE9  15DA               	bsf	_MotorFlags,3
  4870                           
  4871                           ;bldc.c: 2194: MotorFlags.bits.B6 = 1 ;
  4872  1FEA  175A               	bsf	_MotorFlags,6
  4873                           
  4874                           ;bldc.c: 2195: ui16_phase_angle = 128;
  4875  1FEB  3080               	movlw	128
  4876  1FEC  0024               	movlb	4	; select bank4
  4877  1FED  00E4               	movwf	_ui16_phase_angle^(0+512)
  4878  1FEE  3000               	movlw	0
  4879  1FEF  00E5               	movwf	(_ui16_phase_angle^(0+512)+1)
  4880                           
  4881                           ;bldc.c: 2196: ui8_StartupPWM = 0 ;
  4882  1FF0  0021               	movlb	1	; select bank1
  4883  1FF1  01DF               	clrf	_ui8_StartupPWM^(0+128)
  4884                           
  4885                           ;bldc.c: 2197: CCPR1L = 0 ;
  4886  1FF2  0025               	movlb	5	; select bank5
  4887  1FF3  0191               	clrf	17	;volatile
  4888                           
  4889                           ;bldc.c: 2198: ui8_sampleState = 0 ;
  4890  1FF4  0022               	movlb	2	; select bank2
  4891  1FF5  01E4               	clrf	_ui8_sampleState^(0+256)
  4892                           
  4893                           ;bldc.c: 2199: ui8_zero_cros_cnt = 0 ;
  4894  1FF6  0024               	movlb	4	; select bank4
  4895  1FF7  01E8               	clrf	_ui8_zero_cros_cnt^(0+512)
  4896  1FF8  01E9               	clrf	(_ui8_zero_cros_cnt+1)^(0+512)
  4897                           
  4898                           ;bldc.c: 2200: MotorFlags.bits.B4 = 1 ;
  4899  1FF9  0020               	movlb	0	; select bank0
  4900  1FFA  165A               	bsf	_MotorFlags,4
  4901                           
  4902                           ;bldc.c: 2208: commutate( );
  4903  1FFB  318D  25A0         	fcall	_commutate
  4904  1FFD  0008               	return
  4905  1FFE                     __end_of_InitMotorRun:	
  4906                           
  4907                           	psect	text7
  4908  0DA0                     __ptext7:	
  4909 ;; *************** function _commutate *****************
  4910 ;; Defined at:
  4911 ;;		line 1426 in file "../bldc.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;		None
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      void 
  4918 ;; Registers used:
  4919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4925 ;;      Params:         0       0       0       0       0       0       0       0
  4926 ;;      Locals:         0       0       0       0       0       0       0       0
  4927 ;;      Temps:          0      12       0       0       0       0       0       0
  4928 ;;      Totals:         0      12       0       0       0       0       0       0
  4929 ;;Total ram usage:       12 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    3
  4932 ;; This function calls:
  4933 ;;		Nothing
  4934 ;; This function is called by:
  4935 ;;		_InitMotorRun
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _commutate
  4941  0DA0                     _commutate:	
  4942                           
  4943                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  4944                           
  4945                           ;incstack = 0
  4946                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0]
  4947  0DA0  3000               	movlw	0
  4948  0DA1  0021               	movlb	1	; select bank1
  4949  0DA2  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
  4950  0DA3  300A               	movlw	10
  4951  0DA4  1903               	skipnz
  4952  0DA5  023A               	subwf	_ui16_step_cnt^(0+128),w
  4953  0DA6  1803               	skipnc
  4954  0DA7  2DAC               	goto	l5381
  4955                           
  4956                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
  4957  0DA8  3001               	movlw	1
  4958  0DA9  07BA               	addwf	_ui16_step_cnt^(0+128),f
  4959  0DAA  3000               	movlw	0
  4960  0DAB  3DBB               	addwfc	(_ui16_step_cnt+1)^(0+128),f
  4961  0DAC                     l5381:	
  4962                           
  4963                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  4964  0DAC  3558               	lslf	_Bcnt^(0+128),w
  4965  0DAD  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4966  0DAE  0086               	movwf	6
  4967  0DAF  3002               	movlw	2	; select bank4/5
  4968  0DB0  0087               	movwf	7
  4969  0DB1  0020               	movlb	0	; select bank0
  4970  0DB2  0853               	movf	_comm_time,w
  4971  0DB3  3FC0               	movwi [0]fsr1
  4972  0DB4  0854               	movf	_comm_time+1,w
  4973  0DB5  3FC1               	movwi [1]fsr1
  4974  0DB6  3001               	movlw	1
  4975  0DB7  00A8               	movwf	??_commutate
  4976  0DB8  0828               	movf	??_commutate,w
  4977  0DB9  0021               	movlb	1	; select bank1
  4978  0DBA  07D8               	addwf	_Bcnt^(0+128),f
  4979                           
  4980                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  4981  0DBB  3007               	movlw	7
  4982  0DBC  0020               	movlb	0	; select bank0
  4983  0DBD  00A8               	movwf	??_commutate
  4984  0DBE  0828               	movf	??_commutate,w
  4985  0DBF  0021               	movlb	1	; select bank1
  4986  0DC0  05D8               	andwf	_Bcnt^(0+128),f
  4987                           
  4988                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  4989  0DC1  300E               	movlw	14
  4990  0DC2  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4991  0DC3  0086               	movwf	6
  4992  0DC4  3002               	movlw	2	; select bank4/5
  4993  0DC5  0087               	movwf	7
  4994  0DC6  300C               	movlw	12
  4995  0DC7  3E20               	addlw	(low (_B| (0+512)))& (0+255)
  4996  0DC8  0084               	movwf	4
  4997  0DC9  3002               	movlw	2	; select bank4/5
  4998  0DCA  0085               	movwf	5
  4999  0DCB  0024               	movlb	4	; select bank4
  5000  0DCC  0824               	movf	(_B^(0+512)+4),w
  5001  0DCD  0722               	addwf	(_B^(0+512)+2),w
  5002  0DCE  0020               	movlb	0	; select bank0
  5003  0DCF  00A8               	movwf	??_commutate
  5004  0DD0  0024               	movlb	4	; select bank4
  5005  0DD1  0825               	movf	((_B+1)^(0+512)+4),w
  5006  0DD2  3D23               	addwfc	((_B+1)^(0+512)+2),w
  5007  0DD3  0020               	movlb	0	; select bank0
  5008  0DD4  00A9               	movwf	??_commutate+1
  5009  0DD5  0024               	movlb	4	; select bank4
  5010  0DD6  0826               	movf	(_B^(0+512)+6),w
  5011  0DD7  0020               	movlb	0	; select bank0
  5012  0DD8  0728               	addwf	??_commutate,w
  5013  0DD9  00AA               	movwf	??_commutate+2
  5014  0DDA  0024               	movlb	4	; select bank4
  5015  0DDB  0827               	movf	((_B+1)^(0+512)+6),w
  5016  0DDC  0020               	movlb	0	; select bank0
  5017  0DDD  3D29               	addwfc	??_commutate+1,w
  5018  0DDE  00AB               	movwf	??_commutate+3
  5019  0DDF  0024               	movlb	4	; select bank4
  5020  0DE0  0828               	movf	(_B^(0+512)+8),w
  5021  0DE1  0020               	movlb	0	; select bank0
  5022  0DE2  072A               	addwf	??_commutate+2,w
  5023  0DE3  00AC               	movwf	??_commutate+4
  5024  0DE4  0024               	movlb	4	; select bank4
  5025  0DE5  0829               	movf	((_B+1)^(0+512)+8),w
  5026  0DE6  0020               	movlb	0	; select bank0
  5027  0DE7  3D2B               	addwfc	??_commutate+3,w
  5028  0DE8  00AD               	movwf	??_commutate+5
  5029  0DE9  0024               	movlb	4	; select bank4
  5030  0DEA  082A               	movf	(_B^(0+512)+10),w
  5031  0DEB  0020               	movlb	0	; select bank0
  5032  0DEC  072C               	addwf	??_commutate+4,w
  5033  0DED  00AE               	movwf	??_commutate+6
  5034  0DEE  0024               	movlb	4	; select bank4
  5035  0DEF  082B               	movf	((_B+1)^(0+512)+10),w
  5036  0DF0  0020               	movlb	0	; select bank0
  5037  0DF1  3D2D               	addwfc	??_commutate+5,w
  5038  0DF2  00AF               	movwf	??_commutate+7
  5039  0DF3  3F00               	moviw [0]fsr0
  5040  0DF4  072E               	addwf	??_commutate+6,w
  5041  0DF5  00B0               	movwf	??_commutate+8
  5042  0DF6  3F01               	moviw [1]fsr0
  5043  0DF7  3D2F               	addwfc	??_commutate+7,w
  5044  0DF8  00B1               	movwf	??_commutate+9
  5045  0DF9  3F40               	moviw [0]fsr1
  5046  0DFA  0730               	addwf	??_commutate+8,w
  5047  0DFB  00B2               	movwf	??_commutate+10
  5048  0DFC  3F41               	moviw [1]fsr1
  5049  0DFD  3D31               	addwfc	??_commutate+9,w
  5050  0DFE  00B3               	movwf	??_commutate+11
  5051  0DFF  0024               	movlb	4	; select bank4
  5052  0E00  0820               	movf	_B^(0+512),w
  5053  0E01  0020               	movlb	0	; select bank0
  5054  0E02  0732               	addwf	??_commutate+10,w
  5055  0E03  0021               	movlb	1	; select bank1
  5056  0E04  00B2               	movwf	_ui16_speed_fil^(0+128)
  5057  0E05  0024               	movlb	4	; select bank4
  5058  0E06  0821               	movf	(_B+1)^(0+512),w
  5059  0E07  0020               	movlb	0	; select bank0
  5060  0E08  3D33               	addwfc	??_commutate+11,w
  5061  0E09  0021               	movlb	1	; select bank1
  5062  0E0A  00B3               	movwf	(_ui16_speed_fil+1)^(0+128)
  5063                           
  5064                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  5065  0E0B  0020               	movlb	0	; select bank0
  5066  0E0C  0854               	movf	_comm_time+1,w
  5067  0E0D  0023               	movlb	3	; select bank3
  5068  0E0E  00BD               	movwf	(_ui16_speed_rar+1)^(0+384)
  5069  0E0F  0020               	movlb	0	; select bank0
  5070  0E10  0853               	movf	_comm_time,w
  5071  0E11  0023               	movlb	3	; select bank3
  5072  0E12  00BC               	movwf	_ui16_speed_rar^(0+384)
  5073                           
  5074                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  5075  0E13  0020               	movlb	0	; select bank0
  5076  0E14  12DA               	bcf	_MotorFlags,5
  5077                           
  5078                           ;bldc.c: 1451: ui8_sampleState = 1;
  5079  0E15  0022               	movlb	2	; select bank2
  5080  0E16  01E4               	clrf	_ui8_sampleState^(0+256)
  5081  0E17  0AE4               	incf	_ui8_sampleState^(0+256),f
  5082                           
  5083                           ;bldc.c: 1455: bemf_filter = 62;
  5084  0E18  303E               	movlw	62
  5085  0E19  0020               	movlb	0	; select bank0
  5086  0E1A  00A8               	movwf	??_commutate
  5087  0E1B  0828               	movf	??_commutate,w
  5088  0E1C  0022               	movlb	2	; select bank2
  5089  0E1D  00E6               	movwf	_bemf_filter^(0+256)
  5090                           
  5091                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  5092  0E1E  0020               	movlb	0	; select bank0
  5093  0E1F  17DA               	bsf	_MotorFlags,7
  5094                           
  5095                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  5096  0E20  1DDA               	btfss	_MotorFlags,3
  5097  0E21  2E9B               	goto	l327
  5098                           
  5099                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
  5100  0E22  0023               	movlb	3	; select bank3
  5101  0E23  083D               	movf	(_ui16_speed_rar+1)^(0+384),w
  5102  0E24  0020               	movlb	0	; select bank0
  5103  0E25  00A9               	movwf	??_commutate+1
  5104  0E26  0023               	movlb	3	; select bank3
  5105  0E27  083C               	movf	_ui16_speed_rar^(0+384),w
  5106  0E28  0020               	movlb	0	; select bank0
  5107  0E29  00A8               	movwf	??_commutate
  5108  0E2A  36A9               	lsrf	??_commutate+1,f
  5109  0E2B  0CA8               	rrf	??_commutate,f
  5110  0E2C  36A9               	lsrf	??_commutate+1,f
  5111  0E2D  0CA8               	rrf	??_commutate,f
  5112  0E2E  36A9               	lsrf	??_commutate+1,f
  5113  0E2F  0CA8               	rrf	??_commutate,f
  5114  0E30  30FF               	movlw	255
  5115  0E31  0528               	andwf	??_commutate,w
  5116  0E32  0021               	movlb	1	; select bank1
  5117  0E33  00B6               	movwf	_ui16_phase_advancement^(0+128)
  5118  0E34  3001               	movlw	1
  5119  0E35  0020               	movlb	0	; select bank0
  5120  0E36  0529               	andwf	??_commutate+1,w
  5121  0E37  0021               	movlb	1	; select bank1
  5122  0E38  00B7               	movwf	(_ui16_phase_advancement+1)^(0+128)
  5123                           
  5124                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  5125  0E39  0020               	movlb	0	; select bank0
  5126  0E3A  0854               	movf	_comm_time+1,w
  5127  0E3B  0021               	movlb	1	; select bank1
  5128  0E3C  0237               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  5129  0E3D  1D03               	skipz
  5130  0E3E  2E43               	goto	u2795
  5131  0E3F  0020               	movlb	0	; select bank0
  5132  0E40  0853               	movf	_comm_time,w
  5133  0E41  0021               	movlb	1	; select bank1
  5134  0E42  0236               	subwf	_ui16_phase_advancement^(0+128),w
  5135  0E43                     u2795:	
  5136  0E43  1803               	skipnc
  5137  0E44  2E59               	goto	l5407
  5138                           
  5139                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
  5140  0E45  0936               	comf	_ui16_phase_advancement^(0+128),w
  5141  0E46  0020               	movlb	0	; select bank0
  5142  0E47  00A8               	movwf	??_commutate
  5143  0E48  0021               	movlb	1	; select bank1
  5144  0E49  0937               	comf	(_ui16_phase_advancement+1)^(0+128),w
  5145  0E4A  0020               	movlb	0	; select bank0
  5146  0E4B  00A9               	movwf	??_commutate+1
  5147  0E4C  0AA8               	incf	??_commutate,f
  5148  0E4D  1903               	skipnz
  5149  0E4E  0AA9               	incf	??_commutate+1,f
  5150  0E4F  0853               	movf	_comm_time,w
  5151  0E50  0728               	addwf	??_commutate,w
  5152  0E51  0021               	movlb	1	; select bank1
  5153  0E52  00B8               	movwf	_phase_delay_counter^(0+128)
  5154  0E53  0020               	movlb	0	; select bank0
  5155  0E54  0854               	movf	_comm_time+1,w
  5156  0E55  3D29               	addwfc	??_commutate+1,w
  5157  0E56  0021               	movlb	1	; select bank1
  5158  0E57  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
  5159                           
  5160                           ;bldc.c: 1478: }
  5161  0E58  2E5B               	goto	l5409
  5162  0E59                     l5407:	
  5163                           
  5164                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
  5165  0E59  01B8               	clrf	_phase_delay_counter^(0+128)
  5166  0E5A  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5167  0E5B                     l5409:	
  5168                           
  5169                           ;bldc.c: 1486: };bldc.c: 1489: phase_delay_counter_debug = phase_delay_counter;
  5170  0E5B  0839               	movf	(_phase_delay_counter+1)^(0+128),w
  5171  0E5C  0024               	movlb	4	; select bank4
  5172  0E5D  00E7               	movwf	(_phase_delay_counter_debug+1)^(0+512)
  5173  0E5E  0021               	movlb	1	; select bank1
  5174  0E5F  0838               	movf	_phase_delay_counter^(0+128),w
  5175  0E60  0024               	movlb	4	; select bank4
  5176  0E61  00E6               	movwf	_phase_delay_counter_debug^(0+512)
  5177                           
  5178                           ;bldc.c: 1508: switch (ui16_step_cnt)
  5179  0E62  2E76               	goto	l5433
  5180  0E63                     l5411:	
  5181                           ;bldc.c: 1510: {;bldc.c: 1512: case 0 :
  5182                           
  5183                           
  5184                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
  5185  0E63  30A6               	movlw	166
  5186  0E64  2E71               	goto	L17
  5187  0E65                     l5413:	
  5188                           ;bldc.c: 1519: };bldc.c: 1522: case 1:
  5189                           
  5190                           ;bldc.c: 1517: break;
  5191                           
  5192                           
  5193                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
  5194  0E65  30F4               	movlw	244
  5195  0E66  0022               	movlb	2	; select bank2
  5196  0E67  00A7               	movwf	_ui16_comm_time_max^(0+256)
  5197  0E68  3001               	movlw	1
  5198  0E69  2E74               	goto	L10
  5199  0E6A                     l5415:	
  5200                           ;bldc.c: 1529: };bldc.c: 1532: case 2:
  5201                           
  5202                           ;bldc.c: 1527: break;
  5203                           
  5204                           
  5205                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
  5206  0E6A  307D               	movlw	125
  5207  0E6B  2E71               	goto	L17
  5208  0E6C                     l5417:	
  5209                           ;bldc.c: 1539: };bldc.c: 1542: case 3:
  5210                           
  5211                           ;bldc.c: 1537: break;
  5212                           
  5213                           
  5214                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
  5215  0E6C  3053               	movlw	83
  5216  0E6D  2E71               	goto	L17
  5217  0E6E                     l5419:	
  5218                           ;bldc.c: 1549: };bldc.c: 1552: case 4:
  5219                           
  5220                           ;bldc.c: 1547: break;
  5221                           
  5222                           
  5223                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
  5224  0E6E  303E               	movlw	62
  5225  0E6F  2E71               	goto	L17
  5226  0E70                     l5421:	
  5227                           ;bldc.c: 1559: };bldc.c: 1562: case 5:
  5228                           
  5229                           ;bldc.c: 1557: break;
  5230                           
  5231  0E70                     l5423:	
  5232                           ;bldc.c: 1569: };bldc.c: 1572: case 6:
  5233                           
  5234                           ;bldc.c: 1567: break;
  5235                           
  5236                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5237                           
  5238  0E70                     l5425:	
  5239                           ;bldc.c: 1579: };bldc.c: 1582: case 7:
  5240                           
  5241                           ;bldc.c: 1577: break;
  5242                           
  5243                           ;bldc.c: 1574: {;bldc.c: 1576: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5244                           
  5245  0E70                     l5427:	
  5246                           ;bldc.c: 1589: };bldc.c: 1592: case 8:
  5247                           
  5248                           ;bldc.c: 1587: break;
  5249                           
  5250                           ;bldc.c: 1584: {;bldc.c: 1586: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5251                           
  5252  0E70                     l5429:	
  5253                           ;bldc.c: 1599: };bldc.c: 1602: case 9:
  5254                           
  5255                           ;bldc.c: 1597: break;
  5256                           
  5257                           ;bldc.c: 1594: {;bldc.c: 1596: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5258                           
  5259  0E70                     l5431:	
  5260                           ;bldc.c: 1609: };bldc.c: 1613: default:
  5261                           
  5262                           ;bldc.c: 1607: break;
  5263                           
  5264                           ;bldc.c: 1604: {;bldc.c: 1606: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  5265                           
  5266                           
  5267                           ;bldc.c: 1614: {;bldc.c: 1616: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
  5268  0E70  3032               	movlw	50
  5269  0E71                     L17:	
  5270  0E71  0022               	movlb	2	; select bank2
  5271  0E72  00A7               	movwf	_ui16_comm_time_max^(0+256)
  5272  0E73  3000               	movlw	0
  5273  0E74                     L10:	
  5274  0E74  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5275                           
  5276                           ;bldc.c: 1618: };bldc.c: 1620: }
  5277  0E75  2E86               	goto	l5435
  5278  0E76                     l5433:	
  5279                           
  5280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5281                           ; Switch size 1, requested type "space"
  5282                           ; Number of cases is 1, Range of values is 0 to 0
  5283                           ; switch strategies available:
  5284                           ; Name         Instructions Cycles
  5285                           ; simple_byte            4     3 (average)
  5286                           ; direct_byte            8     6 (fixed)
  5287                           ; jumptable            260     6 (fixed)
  5288                           ;	Chosen strategy is simple_byte
  5289  0E76  0021               	movlb	1	; select bank1
  5290  0E77  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
  5291  0E78  3A00               	xorlw	0	; case 0
  5292  0E79  1903               	skipnz
  5293  0E7A  2E7C               	goto	l11809
  5294  0E7B  2E70               	goto	l5431
  5295  0E7C                     l11809:	
  5296                           
  5297                           ; Switch size 1, requested type "space"
  5298                           ; Number of cases is 10, Range of values is 0 to 9
  5299                           ; switch strategies available:
  5300                           ; Name         Instructions Cycles
  5301                           ; direct_byte           26     6 (fixed)
  5302                           ; simple_byte           31    16 (average)
  5303                           ; jumptable            260     6 (fixed)
  5304                           ;	Chosen strategy is direct_byte
  5305  0E7C  083A               	movf	_ui16_step_cnt^(0+128),w
  5306  0E7D  0084               	movwf	4
  5307  0E7E  300A               	movlw	10
  5308  0E7F  0204               	subwf	4,w
  5309  0E80  1803               	skipnc
  5310  0E81  2E70               	goto	l5431
  5311  0E82  3191               	movlp	high S11811
  5312  0E83  3504               	lslf	4,w
  5313  0E84  3E94               	addlw	low S11811
  5314  0E85  0082               	movwf	2
  5315  0E86                     l5435:	
  5316                           
  5317                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
  5318  0E86  3000               	movlw	0
  5319  0E87  0022               	movlb	2	; select bank2
  5320  0E88  0228               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  5321  0E89  3032               	movlw	50
  5322  0E8A  1903               	skipnz
  5323  0E8B  0227               	subwf	_ui16_comm_time_max^(0+256),w
  5324  0E8C  1803               	skipnc
  5325  0E8D  2E92               	goto	l5439
  5326                           
  5327                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
  5328  0E8E  3032               	movlw	50
  5329  0E8F  00A7               	movwf	_ui16_comm_time_max^(0+256)
  5330  0E90  3000               	movlw	0
  5331  0E91  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5332  0E92                     l5439:	
  5333                           
  5334                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
  5335  0E92  0020               	movlb	0	; select bank0
  5336  0E93  1E5A               	btfss	_MotorFlags,4
  5337  0E94  2EE0               	goto	l345
  5338                           
  5339                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
  5340  0E95  300A               	movlw	10
  5341  0E96  00A8               	movwf	??_commutate
  5342  0E97  0828               	movf	??_commutate,w
  5343  0E98  0021               	movlb	1	; select bank1
  5344  0E99  00DF               	movwf	_ui8_StartupPWM^(0+128)
  5345                           
  5346                           ;bldc.c: 1641: };bldc.c: 1644: }
  5347  0E9A  2EE0               	goto	l345
  5348  0E9B                     l327:	
  5349                           
  5350                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
  5351  0E9B  1C5E               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5352  0E9C  2EA1               	goto	l5445
  5353                           
  5354                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
  5355  0E9D  0021               	movlb	1	; select bank1
  5356  0E9E  01B8               	clrf	_phase_delay_counter^(0+128)
  5357  0E9F  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5358                           
  5359                           ;bldc.c: 1659: }
  5360  0EA0  2EAF               	goto	l5447
  5361  0EA1                     l5445:	
  5362                           
  5363                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  5364  0EA1  0020               	movlb	0	; select bank0
  5365  0EA2  0854               	movf	_comm_time+1,w
  5366  0EA3  00A9               	movwf	??_commutate+1
  5367  0EA4  0853               	movf	_comm_time,w
  5368  0EA5  00A8               	movwf	??_commutate
  5369  0EA6  36A9               	lsrf	??_commutate+1,f
  5370  0EA7  0CA8               	rrf	??_commutate,f
  5371  0EA8  0828               	movf	??_commutate,w
  5372  0EA9  0021               	movlb	1	; select bank1
  5373  0EAA  00B8               	movwf	_phase_delay_counter^(0+128)
  5374  0EAB  0020               	movlb	0	; select bank0
  5375  0EAC  0829               	movf	??_commutate+1,w
  5376  0EAD  0021               	movlb	1	; select bank1
  5377  0EAE  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
  5378  0EAF                     l5447:	
  5379                           
  5380                           ;bldc.c: 1670: };bldc.c: 1675: phase_delay_counter = 0;
  5381  0EAF  01B8               	clrf	_phase_delay_counter^(0+128)
  5382  0EB0  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
  5383                           
  5384                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  5385  0EB1  0839               	movf	(_phase_delay_counter+1)^(0+128),w
  5386  0EB2  0024               	movlb	4	; select bank4
  5387  0EB3  00E7               	movwf	(_phase_delay_counter_debug+1)^(0+512)
  5388  0EB4  0021               	movlb	1	; select bank1
  5389  0EB5  0838               	movf	_phase_delay_counter^(0+128),w
  5390  0EB6  0024               	movlb	4	; select bank4
  5391  0EB7  00E6               	movwf	_phase_delay_counter_debug^(0+512)
  5392                           
  5393                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
  5394  0EB8  3032               	movlw	50
  5395  0EB9  0022               	movlb	2	; select bank2
  5396  0EBA  00A7               	movwf	_ui16_comm_time_max^(0+256)
  5397  0EBB  3000               	movlw	0
  5398  0EBC  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
  5399                           
  5400                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  5401  0EBD  0020               	movlb	0	; select bank0
  5402  0EBE  1F5A               	btfss	_MotorFlags,6
  5403  0EBF  2EDE               	goto	l5457
  5404                           
  5405                           ;bldc.c: 1693: {;bldc.c: 1751: CCPR1L = ui16_duty_cycle_BLDC >> 2;
  5406  0EC0  0021               	movlb	1	; select bank1
  5407  0EC1  0831               	movf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
  5408  0EC2  0020               	movlb	0	; select bank0
  5409  0EC3  00A9               	movwf	??_commutate+1
  5410  0EC4  0021               	movlb	1	; select bank1
  5411  0EC5  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
  5412  0EC6  0020               	movlb	0	; select bank0
  5413  0EC7  00A8               	movwf	??_commutate
  5414  0EC8  36A9               	lsrf	??_commutate+1,f
  5415  0EC9  0CA8               	rrf	??_commutate,f
  5416  0ECA  36A9               	lsrf	??_commutate+1,f
  5417  0ECB  0CA8               	rrf	??_commutate,f
  5418  0ECC  0828               	movf	??_commutate,w
  5419  0ECD  0025               	movlb	5	; select bank5
  5420  0ECE  0091               	movwf	17	;volatile
  5421                           
  5422                           ;bldc.c: 1752: CCP1CON = ((ui16_duty_cycle_BLDC & 0b11) << 4) | 0x0C;
  5423  0ECF  0021               	movlb	1	; select bank1
  5424  0ED0  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
  5425  0ED1  3903               	andlw	3
  5426  0ED2  0020               	movlb	0	; select bank0
  5427  0ED3  00A8               	movwf	??_commutate
  5428  0ED4  3003               	movlw	3
  5429  0ED5                     u2845:	
  5430  0ED5  35A8               	lslf	??_commutate,f
  5431  0ED6  3EFF               	addlw	-1
  5432  0ED7  1D03               	skipz
  5433  0ED8  2ED5               	goto	u2845
  5434  0ED9  3528               	lslf	??_commutate,w
  5435  0EDA  380C               	iorlw	12
  5436  0EDB  0025               	movlb	5	; select bank5
  5437  0EDC  0093               	movwf	19	;volatile
  5438                           
  5439                           ;bldc.c: 1766: }
  5440  0EDD  2EE0               	goto	l345
  5441  0EDE                     l5457:	
  5442                           
  5443                           ;bldc.c: 1769: else;bldc.c: 1770: {;bldc.c: 1772: CCPR1L = 0;
  5444  0EDE  0025               	movlb	5	; select bank5
  5445  0EDF  0191               	clrf	17	;volatile
  5446  0EE0                     l345:	
  5447                           
  5448                           ;bldc.c: 1774: };bldc.c: 1778: };bldc.c: 1781: comm_time = 0;
  5449  0EE0  0020               	movlb	0	; select bank0
  5450  0EE1  01D3               	clrf	_comm_time
  5451  0EE2  01D4               	clrf	_comm_time+1
  5452                           
  5453                           ;bldc.c: 1785: if( comm_state == 0xff )
  5454  0EE3  0021               	movlb	1	; select bank1
  5455  0EE4  0A5E               	incf	_comm_state^(0+128),w
  5456  0EE5  1D03               	btfss	3,2
  5457  0EE6  2FDD               	goto	l5607
  5458                           
  5459                           ;bldc.c: 1787: {;bldc.c: 1789: comm_state = 6;
  5460  0EE7  3006               	movlw	6
  5461  0EE8  0020               	movlb	0	; select bank0
  5462  0EE9  00A8               	movwf	??_commutate
  5463  0EEA  0828               	movf	??_commutate,w
  5464  0EEB  0021               	movlb	1	; select bank1
  5465  0EEC  00DE               	movwf	_comm_state^(0+128)
  5466                           
  5467                           ;bldc.c: 1791: };bldc.c: 1794: switch( comm_state )
  5468  0EED  2FDD               	goto	l5607
  5469  0EEE                     l5463:	
  5470                           ;bldc.c: 1796: {;bldc.c: 1798: case 1:
  5471                           
  5472                           
  5473                           ;bldc.c: 1801: {;bldc.c: 1807: PSTR1CON = 0b00000001;
  5474  0EEE  3001               	movlw	1
  5475  0EEF  0025               	movlb	5	; select bank5
  5476  0EF0  0096               	movwf	22	;volatile
  5477                           
  5478                           ;bldc.c: 1810: if( MotorFlags.bits.B6 )
  5479  0EF1  0020               	movlb	0	; select bank0
  5480  0EF2  1F5A               	btfss	_MotorFlags,6
  5481  0EF3  2EF9               	goto	l5469
  5482                           
  5483                           ;bldc.c: 1812: {;bldc.c: 1814: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  5484  0EF4  0022               	movlb	2	; select bank2
  5485  0EF5  080E               	movf	14,w	;volatile
  5486  0EF6  39E5               	andlw	229
  5487  0EF7  380A               	iorlw	10
  5488  0EF8  008E               	movwf	14	;volatile
  5489  0EF9                     l5469:	
  5490                           
  5491                           ;bldc.c: 1816: };bldc.c: 1820: LATB2 = 0;
  5492  0EF9  0022               	movlb	2	; select bank2
  5493  0EFA  110D               	bcf	13,2	;volatile
  5494                           
  5495                           ;bldc.c: 1821: LATB1 = 0;
  5496  0EFB  108D               	bcf	13,1	;volatile
  5497                           
  5498                           ;bldc.c: 1822: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  5499  0EFC  3009               	movlw	9
  5500  0EFD  0020               	movlb	0	; select bank0
  5501  0EFE  00A8               	movwf	??_commutate
  5502  0EFF  0828               	movf	??_commutate,w
  5503  0F00  0021               	movlb	1	; select bank1
  5504  0F01  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5505                           
  5506                           ;bldc.c: 1823: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  5507  0F02  01DB               	clrf	_ui8_UPhase_sel^(0+128)
  5508  0F03  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
  5509                           
  5510                           ;bldc.c: 1824: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  5511  0F04  3025               	movlw	37
  5512  0F05  0020               	movlb	0	; select bank0
  5513  0F06  00A8               	movwf	??_commutate
  5514  0F07  0828               	movf	??_commutate,w
  5515  0F08  0021               	movlb	1	; select bank1
  5516  0F09  00DA               	movwf	_ui8_Ubemf_sel^(0+128)
  5517                           
  5518                           ;bldc.c: 1825: CM1CON1 = 0x02;
  5519  0F0A  3002               	movlw	2
  5520  0F0B  0022               	movlb	2	; select bank2
  5521  0F0C  0092               	movwf	18	;volatile
  5522                           
  5523                           ;bldc.c: 1838: CM1CON0 = 0x84;
  5524  0F0D  3084               	movlw	132
  5525  0F0E  0091               	movwf	17	;volatile
  5526                           
  5527                           ;bldc.c: 1839: rising_bemf_flag = 1;
  5528  0F0F  0020               	movlb	0	; select bank0
  5529  0F10  145E               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5530                           
  5531                           ;bldc.c: 1840: comm_state = 6;
  5532  0F11  3006               	movlw	6
  5533  0F12  2FCE               	goto	L14
  5534  0F13                     l5487:	
  5535                           ;bldc.c: 1850: };bldc.c: 1853: case 2:
  5536                           
  5537                           ;bldc.c: 1846: break;
  5538                           
  5539                           
  5540                           ;bldc.c: 1856: {;bldc.c: 1861: PSTR1CON = 0b00000001;
  5541  0F13  3001               	movlw	1
  5542  0F14  0025               	movlb	5	; select bank5
  5543  0F15  0096               	movwf	22	;volatile
  5544                           
  5545                           ;bldc.c: 1864: if( MotorFlags.bits.B6 )
  5546  0F16  0020               	movlb	0	; select bank0
  5547  0F17  1F5A               	btfss	_MotorFlags,6
  5548  0F18  2F1E               	goto	l5493
  5549                           
  5550                           ;bldc.c: 1866: {;bldc.c: 1868: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  5551  0F19  0022               	movlb	2	; select bank2
  5552  0F1A  080E               	movf	14,w	;volatile
  5553  0F1B  39E5               	andlw	229
  5554  0F1C  3812               	iorlw	18
  5555  0F1D  008E               	movwf	14	;volatile
  5556  0F1E                     l5493:	
  5557                           
  5558                           ;bldc.c: 1870: };bldc.c: 1874: LATB2 = 1;
  5559  0F1E  0022               	movlb	2	; select bank2
  5560  0F1F  150D               	bsf	13,2	;volatile
  5561                           
  5562                           ;bldc.c: 1875: LATB1 = 0;
  5563  0F20  108D               	bcf	13,1	;volatile
  5564                           
  5565                           ;bldc.c: 1876: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  5566  0F21  3009               	movlw	9
  5567  0F22  0020               	movlb	0	; select bank0
  5568  0F23  00A8               	movwf	??_commutate
  5569  0F24  0828               	movf	??_commutate,w
  5570  0F25  0021               	movlb	1	; select bank1
  5571  0F26  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5572                           
  5573                           ;bldc.c: 1877: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  5574  0F27  01DB               	clrf	_ui8_UPhase_sel^(0+128)
  5575  0F28  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
  5576                           
  5577                           ;bldc.c: 1878: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  5578  0F29  3005               	movlw	5
  5579  0F2A  0020               	movlb	0	; select bank0
  5580  0F2B  00A8               	movwf	??_commutate
  5581  0F2C  0828               	movf	??_commutate,w
  5582  0F2D  0021               	movlb	1	; select bank1
  5583  0F2E  00DA               	movwf	_ui8_Ubemf_sel^(0+128)
  5584                           
  5585                           ;bldc.c: 1879: CM1CON1 = 0x01;
  5586  0F2F  3001               	movlw	1
  5587  0F30  0022               	movlb	2	; select bank2
  5588  0F31  0092               	movwf	18	;volatile
  5589                           
  5590                           ;bldc.c: 1893: CM1CON0 = 0x94;
  5591  0F32  3094               	movlw	148
  5592  0F33  0091               	movwf	17	;volatile
  5593  0F34  2FD7               	goto	L16
  5594  0F35                     l5511:	
  5595                           ;bldc.c: 1907: };bldc.c: 1910: case 3:
  5596                           
  5597                           ;bldc.c: 1903: break;
  5598                           
  5599                           ;bldc.c: 1895: comm_state = 1;
  5600                           
  5601                           ;bldc.c: 1894: rising_bemf_flag = 0;
  5602                           
  5603                           
  5604                           ;bldc.c: 1913: {;bldc.c: 1918: PSTR1CON = 0b00000010;
  5605  0F35  3002               	movlw	2
  5606  0F36  0025               	movlb	5	; select bank5
  5607  0F37  0096               	movwf	22	;volatile
  5608                           
  5609                           ;bldc.c: 1921: if( MotorFlags.bits.B6 )
  5610  0F38  0020               	movlb	0	; select bank0
  5611  0F39  1F5A               	btfss	_MotorFlags,6
  5612  0F3A  2F40               	goto	l5517
  5613                           
  5614                           ;bldc.c: 1923: {;bldc.c: 1925: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  5615  0F3B  0022               	movlb	2	; select bank2
  5616  0F3C  080E               	movf	14,w	;volatile
  5617  0F3D  39E5               	andlw	229
  5618  0F3E  3818               	iorlw	24
  5619  0F3F  008E               	movwf	14	;volatile
  5620  0F40                     l5517:	
  5621                           
  5622                           ;bldc.c: 1927: };bldc.c: 1930: LATC2 = 0;
  5623  0F40  0022               	movlb	2	; select bank2
  5624  0F41  110E               	bcf	14,2	;volatile
  5625                           
  5626                           ;bldc.c: 1932: LATB1 = 0;
  5627  0F42  108D               	bcf	13,1	;volatile
  5628                           
  5629                           ;bldc.c: 1933: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  5630  0F43  3035               	movlw	53
  5631  0F44  0020               	movlb	0	; select bank0
  5632  0F45  00A8               	movwf	??_commutate
  5633  0F46  0828               	movf	??_commutate,w
  5634  0F47  0021               	movlb	1	; select bank1
  5635  0F48  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5636                           
  5637                           ;bldc.c: 1934: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  5638  0F49  3005               	movlw	5
  5639  0F4A  0020               	movlb	0	; select bank0
  5640  0F4B  00A8               	movwf	??_commutate
  5641  0F4C  0828               	movf	??_commutate,w
  5642  0F4D  0021               	movlb	1	; select bank1
  5643  0F4E  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5644                           
  5645                           ;bldc.c: 1935: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  5646  0F4F  01DA               	clrf	_ui8_Ubemf_sel^(0+128)
  5647  0F50  0ADA               	incf	_ui8_Ubemf_sel^(0+128),f
  5648                           
  5649                           ;bldc.c: 1936: CM1CON1 = 0x00;
  5650  0F51  0022               	movlb	2	; select bank2
  5651  0F52  0192               	clrf	18	;volatile
  5652                           
  5653                           ;bldc.c: 1950: CM1CON0 = 0x84;
  5654  0F53  3084               	movlw	132
  5655  0F54  0091               	movwf	17	;volatile
  5656                           
  5657                           ;bldc.c: 1951: rising_bemf_flag = 1;
  5658  0F55  0020               	movlb	0	; select bank0
  5659  0F56  145E               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5660                           
  5661                           ;bldc.c: 1952: comm_state = 2;
  5662  0F57  3002               	movlw	2
  5663  0F58  2FCE               	goto	L14
  5664  0F59                     l5531:	
  5665                           ;bldc.c: 1961: };bldc.c: 1964: case 4:
  5666                           
  5667                           ;bldc.c: 1957: break;
  5668                           
  5669                           
  5670                           ;bldc.c: 1967: {;bldc.c: 1973: PSTR1CON = 0b00000010;
  5671  0F59  3002               	movlw	2
  5672  0F5A  0025               	movlb	5	; select bank5
  5673  0F5B  0096               	movwf	22	;volatile
  5674                           
  5675                           ;bldc.c: 1976: if( MotorFlags.bits.B6 )
  5676  0F5C  0020               	movlb	0	; select bank0
  5677  0F5D  1F5A               	btfss	_MotorFlags,6
  5678  0F5E  2F64               	goto	l5537
  5679                           
  5680                           ;bldc.c: 1978: {;bldc.c: 1980: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  5681  0F5F  0022               	movlb	2	; select bank2
  5682  0F60  080E               	movf	14,w	;volatile
  5683  0F61  39E5               	andlw	229
  5684  0F62  380A               	iorlw	10
  5685  0F63  008E               	movwf	14	;volatile
  5686  0F64                     l5537:	
  5687                           
  5688                           ;bldc.c: 1982: };bldc.c: 1985: LATC2 = 0;
  5689  0F64  0022               	movlb	2	; select bank2
  5690  0F65  110E               	bcf	14,2	;volatile
  5691                           
  5692                           ;bldc.c: 1987: LATB1 = 1;
  5693  0F66  148D               	bsf	13,1	;volatile
  5694                           
  5695                           ;bldc.c: 1988: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  5696  0F67  3035               	movlw	53
  5697  0F68  0020               	movlb	0	; select bank0
  5698  0F69  00A8               	movwf	??_commutate
  5699  0F6A  0828               	movf	??_commutate,w
  5700  0F6B  0021               	movlb	1	; select bank1
  5701  0F6C  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5702                           
  5703                           ;bldc.c: 1989: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  5704  0F6D  3005               	movlw	5
  5705  0F6E  0020               	movlb	0	; select bank0
  5706  0F6F  00A8               	movwf	??_commutate
  5707  0F70  0828               	movf	??_commutate,w
  5708  0F71  0021               	movlb	1	; select bank1
  5709  0F72  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5710                           
  5711                           ;bldc.c: 1990: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  5712  0F73  3025               	movlw	37
  5713  0F74  0020               	movlb	0	; select bank0
  5714  0F75  00A8               	movwf	??_commutate
  5715  0F76  0828               	movf	??_commutate,w
  5716  0F77  0021               	movlb	1	; select bank1
  5717  0F78  00DA               	movwf	_ui8_Ubemf_sel^(0+128)
  5718                           
  5719                           ;bldc.c: 1991: CM1CON1 = 0x02;
  5720  0F79  3002               	movlw	2
  5721  0F7A  0022               	movlb	2	; select bank2
  5722  0F7B  0092               	movwf	18	;volatile
  5723                           
  5724                           ;bldc.c: 2005: CM1CON0 = 0x94;
  5725  0F7C  3094               	movlw	148
  5726  0F7D  0091               	movwf	17	;volatile
  5727                           
  5728                           ;bldc.c: 2006: rising_bemf_flag = 0;
  5729  0F7E  0020               	movlb	0	; select bank0
  5730  0F7F  105E               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5731                           
  5732                           ;bldc.c: 2007: comm_state = 3;
  5733  0F80  3003               	movlw	3
  5734  0F81  2FCE               	goto	L14
  5735  0F82                     l5555:	
  5736                           ;bldc.c: 2015: };bldc.c: 2018: case 5:
  5737                           
  5738                           ;bldc.c: 2012: break;
  5739                           
  5740                           
  5741                           ;bldc.c: 2021: {;bldc.c: 2027: PSTR1CON = 0b00000100;
  5742  0F82  3004               	movlw	4
  5743  0F83  0025               	movlb	5	; select bank5
  5744  0F84  0096               	movwf	22	;volatile
  5745                           
  5746                           ;bldc.c: 2030: if( MotorFlags.bits.B6 )
  5747  0F85  0020               	movlb	0	; select bank0
  5748  0F86  1F5A               	btfss	_MotorFlags,6
  5749  0F87  2F8D               	goto	l5561
  5750                           
  5751                           ;bldc.c: 2032: {;bldc.c: 2034: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  5752  0F88  0022               	movlb	2	; select bank2
  5753  0F89  080E               	movf	14,w	;volatile
  5754  0F8A  39E5               	andlw	229
  5755  0F8B  3812               	iorlw	18
  5756  0F8C  008E               	movwf	14	;volatile
  5757  0F8D                     l5561:	
  5758                           
  5759                           ;bldc.c: 2036: };bldc.c: 2039: LATC2 = 0;
  5760  0F8D  0022               	movlb	2	; select bank2
  5761  0F8E  110E               	bcf	14,2	;volatile
  5762                           
  5763                           ;bldc.c: 2040: LATB2 = 0;
  5764  0F8F  110D               	bcf	13,2	;volatile
  5765                           
  5766                           ;bldc.c: 2042: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  5767  0F90  3011               	movlw	17
  5768  0F91  0020               	movlb	0	; select bank0
  5769  0F92  00A8               	movwf	??_commutate
  5770  0F93  0828               	movf	??_commutate,w
  5771  0F94  0021               	movlb	1	; select bank1
  5772  0F95  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5773                           
  5774                           ;bldc.c: 2043: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  5775  0F96  3025               	movlw	37
  5776  0F97  0020               	movlb	0	; select bank0
  5777  0F98  00A8               	movwf	??_commutate
  5778  0F99  0828               	movf	??_commutate,w
  5779  0F9A  0021               	movlb	1	; select bank1
  5780  0F9B  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5781                           
  5782                           ;bldc.c: 2044: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  5783  0F9C  3005               	movlw	5
  5784  0F9D  0020               	movlb	0	; select bank0
  5785  0F9E  00A8               	movwf	??_commutate
  5786  0F9F  0828               	movf	??_commutate,w
  5787  0FA0  0021               	movlb	1	; select bank1
  5788  0FA1  00DA               	movwf	_ui8_Ubemf_sel^(0+128)
  5789                           
  5790                           ;bldc.c: 2045: CM1CON1 = 0x01;
  5791  0FA2  3001               	movlw	1
  5792  0FA3  0022               	movlb	2	; select bank2
  5793  0FA4  0092               	movwf	18	;volatile
  5794                           
  5795                           ;bldc.c: 2060: CM1CON0 = 0x84;
  5796  0FA5  3084               	movlw	132
  5797  0FA6  0091               	movwf	17	;volatile
  5798                           
  5799                           ;bldc.c: 2061: rising_bemf_flag = 1;
  5800  0FA7  0020               	movlb	0	; select bank0
  5801  0FA8  145E               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5802                           
  5803                           ;bldc.c: 2062: comm_state = 4;
  5804  0FA9  3004               	movlw	4
  5805  0FAA  2FCE               	goto	L14
  5806  0FAB                     l5579:	
  5807                           ;bldc.c: 2071: };bldc.c: 2074: case 6:
  5808                           
  5809                           ;bldc.c: 2067: break;
  5810                           
  5811                           
  5812                           ;bldc.c: 2077: {;bldc.c: 2082: PSTR1CON = 0b00000100;
  5813  0FAB  3004               	movlw	4
  5814  0FAC  0025               	movlb	5	; select bank5
  5815  0FAD  0096               	movwf	22	;volatile
  5816                           
  5817                           ;bldc.c: 2085: if( MotorFlags.bits.B6 )
  5818  0FAE  0020               	movlb	0	; select bank0
  5819  0FAF  1F5A               	btfss	_MotorFlags,6
  5820  0FB0  2FB6               	goto	l5585
  5821                           
  5822                           ;bldc.c: 2087: {;bldc.c: 2089: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  5823  0FB1  0022               	movlb	2	; select bank2
  5824  0FB2  080E               	movf	14,w	;volatile
  5825  0FB3  39E5               	andlw	229
  5826  0FB4  3818               	iorlw	24
  5827  0FB5  008E               	movwf	14	;volatile
  5828  0FB6                     l5585:	
  5829                           
  5830                           ;bldc.c: 2091: };bldc.c: 2094: LATC2 = 1;
  5831  0FB6  0022               	movlb	2	; select bank2
  5832  0FB7  150E               	bsf	14,2	;volatile
  5833                           
  5834                           ;bldc.c: 2095: LATB2 = 0;
  5835  0FB8  110D               	bcf	13,2	;volatile
  5836                           
  5837                           ;bldc.c: 2097: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  5838  0FB9  3011               	movlw	17
  5839  0FBA  0020               	movlb	0	; select bank0
  5840  0FBB  00A8               	movwf	??_commutate
  5841  0FBC  0828               	movf	??_commutate,w
  5842  0FBD  0021               	movlb	1	; select bank1
  5843  0FBE  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  5844                           
  5845                           ;bldc.c: 2098: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  5846  0FBF  3025               	movlw	37
  5847  0FC0  0020               	movlb	0	; select bank0
  5848  0FC1  00A8               	movwf	??_commutate
  5849  0FC2  0828               	movf	??_commutate,w
  5850  0FC3  0021               	movlb	1	; select bank1
  5851  0FC4  00DB               	movwf	_ui8_UPhase_sel^(0+128)
  5852                           
  5853                           ;bldc.c: 2099: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  5854  0FC5  01DA               	clrf	_ui8_Ubemf_sel^(0+128)
  5855  0FC6  0ADA               	incf	_ui8_Ubemf_sel^(0+128),f
  5856                           
  5857                           ;bldc.c: 2100: CM1CON1 = 0x00;
  5858  0FC7  0022               	movlb	2	; select bank2
  5859  0FC8  0192               	clrf	18	;volatile
  5860                           
  5861                           ;bldc.c: 2114: CM1CON0 = 0x94;
  5862  0FC9  3094               	movlw	148
  5863  0FCA  0091               	movwf	17	;volatile
  5864                           
  5865                           ;bldc.c: 2115: rising_bemf_flag = 0;
  5866  0FCB  0020               	movlb	0	; select bank0
  5867  0FCC  105E               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5868                           
  5869                           ;bldc.c: 2116: comm_state = 5;
  5870  0FCD  3005               	movlw	5
  5871  0FCE                     L14:	
  5872  0FCE  00A8               	movwf	??_commutate
  5873  0FCF  0828               	movf	??_commutate,w
  5874  0FD0  0021               	movlb	1	; select bank1
  5875  0FD1  00DE               	movwf	_comm_state^(0+128)
  5876                           
  5877                           ;bldc.c: 2121: break;
  5878  0FD2  2FF1               	goto	l354
  5879  0FD3                     l5599:	
  5880                           ;bldc.c: 2125: };bldc.c: 2129: default:
  5881                           
  5882                           
  5883                           ;bldc.c: 2130: {;bldc.c: 2132: PSTR1CON = 0x00;
  5884  0FD3  0025               	movlb	5	; select bank5
  5885  0FD4  0196               	clrf	22	;volatile
  5886                           
  5887                           ;bldc.c: 2133: CM1CON0 = 0x00;
  5888  0FD5  0022               	movlb	2	; select bank2
  5889  0FD6  0191               	clrf	17	;volatile
  5890  0FD7                     L16:	
  5891                           
  5892                           ;bldc.c: 2134: rising_bemf_flag = 0;
  5893  0FD7  0020               	movlb	0	; select bank0
  5894  0FD8  105E               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5895                           
  5896                           ;bldc.c: 2135: comm_state = 1;
  5897  0FD9  0021               	movlb	1	; select bank1
  5898  0FDA  01DE               	clrf	_comm_state^(0+128)
  5899  0FDB  0ADE               	incf	_comm_state^(0+128),f
  5900                           
  5901                           ;bldc.c: 2139: };bldc.c: 2141: }
  5902                           
  5903                           ;bldc.c: 2136: break;
  5904  0FDC  2FF1               	goto	l354
  5905  0FDD                     l5607:	
  5906  0FDD  085E               	movf	_comm_state^(0+128),w
  5907                           
  5908                           ; Switch size 1, requested type "space"
  5909                           ; Number of cases is 6, Range of values is 1 to 6
  5910                           ; switch strategies available:
  5911                           ; Name         Instructions Cycles
  5912                           ; simple_byte           19    10 (average)
  5913                           ; direct_byte           21     9 (fixed)
  5914                           ; jumptable            263     9 (fixed)
  5915                           ;	Chosen strategy is simple_byte
  5916  0FDE  3A01               	xorlw	1	; case 1
  5917  0FDF  1903               	skipnz
  5918  0FE0  2EEE               	goto	l5463
  5919  0FE1  3A03               	xorlw	3	; case 2
  5920  0FE2  1903               	skipnz
  5921  0FE3  2F13               	goto	l5487
  5922  0FE4  3A01               	xorlw	1	; case 3
  5923  0FE5  1903               	skipnz
  5924  0FE6  2F35               	goto	l5511
  5925  0FE7  3A07               	xorlw	7	; case 4
  5926  0FE8  1903               	skipnz
  5927  0FE9  2F59               	goto	l5531
  5928  0FEA  3A01               	xorlw	1	; case 5
  5929  0FEB  1903               	skipnz
  5930  0FEC  2F82               	goto	l5555
  5931  0FED  3A03               	xorlw	3	; case 6
  5932  0FEE  1903               	skipnz
  5933  0FEF  2FAB               	goto	l5579
  5934  0FF0  2FD3               	goto	l5599
  5935  0FF1                     l354:	
  5936                           
  5937                           ;bldc.c: 2145: if( rising_bemf_flag )
  5938  0FF1  0020               	movlb	0	; select bank0
  5939  0FF2  1C5E               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  5940  0FF3  2FF6               	goto	l5611
  5941                           
  5942                           ;bldc.c: 2147: {;bldc.c: 2149: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
  5943  0FF4  3028               	movlw	40
  5944  0FF5  2FF8               	goto	L15
  5945  0FF6                     l5611:	
  5946                           ;bldc.c: 2151: }
  5947                           
  5948                           
  5949                           ;bldc.c: 2154: else;bldc.c: 2155: {;bldc.c: 2157: ui8_BlankingCount = ( unsigned char ) 
      +                          ( 0.002 * 20000UL );
  5950  0FF6  3028               	movlw	40
  5951  0FF7  0020               	movlb	0	; select bank0
  5952  0FF8                     L15:	
  5953  0FF8  00A8               	movwf	??_commutate
  5954  0FF9  0828               	movf	??_commutate,w
  5955  0FFA  0021               	movlb	1	; select bank1
  5956  0FFB  00DD               	movwf	_ui8_BlankingCount^(0+128)
  5957                           
  5958                           ;bldc.c: 2159: };bldc.c: 2162: comm_time = 0;
  5959  0FFC  0020               	movlb	0	; select bank0
  5960  0FFD  01D3               	clrf	_comm_time
  5961  0FFE  01D4               	clrf	_comm_time+1
  5962  0FFF  0008               	return
  5963  1000                     __end_of_commutate:	
  5964                           
  5965                           	psect	swtext1
  5966  1194                     __pswtext1:	
  5967  1194                     S11811:	
  5968  1194  318E  2E63         	ljmp	l5411
  5969  1196  318E  2E65         	ljmp	l5413
  5970  1198  318E  2E6A         	ljmp	l5415
  5971  119A  318E  2E6C         	ljmp	l5417
  5972  119C  318E  2E6E         	ljmp	l5419
  5973  119E  318E  2E70         	ljmp	l5421
  5974  11A0  318E  2E70         	ljmp	l5423
  5975  11A2  318E  2E70         	ljmp	l5425
  5976  11A4  318E  2E70         	ljmp	l5427
  5977  11A6  318E  2E70         	ljmp	l5429
  5978                           
  5979                           	psect	text8
  5980  0801                     __ptext8:	
  5981 ;; *************** function _PWM_Capture_init *****************
  5982 ;; Defined at:
  5983 ;;		line 87 in file "../pwm.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  ui8_CCP_Nb      1    8[BANK0 ] unsigned char 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      void 
  5990 ;; Registers used:
  5991 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5997 ;;      Params:         0       0       0       0       0       0       0       0
  5998 ;;      Locals:         0       1       0       0       0       0       0       0
  5999 ;;      Temps:          0       0       0       0       0       0       0       0
  6000 ;;      Totals:         0       1       0       0       0       0       0       0
  6001 ;;Total ram usage:        1 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    3
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_system_init
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           
  6012                           ;psect for function _PWM_Capture_init
  6013  0801                     _PWM_Capture_init:	
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  6017                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  6018  0801  0020               	movlb	0	; select bank0
  6019  0802  00A8               	movwf	PWM_Capture_init@ui8_CCP_Nb
  6020                           
  6021                           ;pwm.c: 92: ui8_PWMinDC_sav = 0;
  6022  0803  0021               	movlb	1	; select bank1
  6023  0804  01CB               	clrf	_ui8_PWMinDC_sav^(0+128)
  6024                           
  6025                           ;pwm.c: 93: ui16_PWMin_failCnt = 0;
  6026  0805  0023               	movlb	3	; select bank3
  6027  0806  01AA               	clrf	_ui16_PWMin_failCnt^(0+384)
  6028  0807  01AB               	clrf	(_ui16_PWMin_failCnt+1)^(0+384)
  6029                           
  6030                           ;pwm.c: 102: switch( ui8_CCP_Nb )
  6031  0808  2845               	goto	l5931
  6032  0809                     l5889:	
  6033                           ;pwm.c: 104: {;pwm.c: 106: case 1:
  6034                           
  6035                           
  6036                           ;pwm.c: 108: {;pwm.c: 110: CCP1CON = 0x00;
  6037  0809  0025               	movlb	5	; select bank5
  6038  080A  0193               	clrf	19	;volatile
  6039                           
  6040                           ;pwm.c: 111: CCPR1L = 0x00;
  6041  080B  0191               	clrf	17	;volatile
  6042                           
  6043                           ;pwm.c: 112: CCPR1H = 0x00;
  6044  080C  0192               	clrf	18	;volatile
  6045                           
  6046                           ;pwm.c: 113: CCP1IE = 1;
  6047  080D  0021               	movlb	1	; select bank1
  6048  080E  1511               	bsf	17,2	;volatile
  6049                           
  6050                           ;pwm.c: 114: CCP1IF = 0;
  6051  080F  0020               	movlb	0	; select bank0
  6052  0810  1111               	bcf	17,2	;volatile
  6053                           
  6054                           ;pwm.c: 115: CCP1CON = 0x05;
  6055  0811  3005               	movlw	5
  6056  0812  0025               	movlb	5	; select bank5
  6057  0813  0093               	movwf	19	;volatile
  6058                           
  6059                           ;pwm.c: 116: break;
  6060  0814  0008               	return
  6061  0815                     l5897:	
  6062                           ;pwm.c: 118: };pwm.c: 121: case 2:
  6063                           
  6064                           
  6065                           ;pwm.c: 123: {;pwm.c: 125: CCP2CON = 0x00;
  6066  0815  0025               	movlb	5	; select bank5
  6067  0816  019A               	clrf	26	;volatile
  6068                           
  6069                           ;pwm.c: 126: CCPR2L = 0x00;
  6070  0817  0198               	clrf	24	;volatile
  6071                           
  6072                           ;pwm.c: 127: CCPR2H = 0x00;
  6073  0818  0199               	clrf	25	;volatile
  6074                           
  6075                           ;pwm.c: 128: CCP2IE = 1;
  6076  0819  0021               	movlb	1	; select bank1
  6077  081A  1412               	bsf	18,0	;volatile
  6078                           
  6079                           ;pwm.c: 129: CCP2IF = 0;
  6080  081B  0020               	movlb	0	; select bank0
  6081  081C  1012               	bcf	18,0	;volatile
  6082                           
  6083                           ;pwm.c: 130: CCP2CON = 0x05;
  6084  081D  3005               	movlw	5
  6085  081E  0025               	movlb	5	; select bank5
  6086  081F  009A               	movwf	26	;volatile
  6087                           
  6088                           ;pwm.c: 131: break;
  6089  0820  0008               	return
  6090  0821                     l5905:	
  6091                           ;pwm.c: 133: };pwm.c: 136: case 3:
  6092                           
  6093                           
  6094                           ;pwm.c: 138: {;pwm.c: 140: CCP3CON = 0x00;
  6095  0821  0026               	movlb	6	; select bank6
  6096  0822  0193               	clrf	19	;volatile
  6097                           
  6098                           ;pwm.c: 141: CCPR3L = 0x00;
  6099  0823  0191               	clrf	17	;volatile
  6100                           
  6101                           ;pwm.c: 142: CCPR3H = 0x00;
  6102  0824  0192               	clrf	18	;volatile
  6103                           
  6104                           ;pwm.c: 143: CCP3IE = 1;
  6105  0825  0021               	movlb	1	; select bank1
  6106  0826  1613               	bsf	19,4	;volatile
  6107                           
  6108                           ;pwm.c: 144: CCP3IF = 0;
  6109  0827  0020               	movlb	0	; select bank0
  6110  0828  1213               	bcf	19,4	;volatile
  6111                           
  6112                           ;pwm.c: 145: CCP3CON = 0x05;
  6113  0829  3005               	movlw	5
  6114  082A  0026               	movlb	6	; select bank6
  6115  082B  0093               	movwf	19	;volatile
  6116                           
  6117                           ;pwm.c: 146: break;
  6118  082C  0008               	return
  6119  082D                     l5913:	
  6120                           ;pwm.c: 148: };pwm.c: 151: case 4:
  6121                           
  6122                           
  6123                           ;pwm.c: 153: {;pwm.c: 155: CCP4CON = 0x00;
  6124  082D  0026               	movlb	6	; select bank6
  6125  082E  019A               	clrf	26	;volatile
  6126                           
  6127                           ;pwm.c: 156: CCPR4L = 0x00;
  6128  082F  0198               	clrf	24	;volatile
  6129                           
  6130                           ;pwm.c: 157: CCPR4H = 0x00;
  6131  0830  0199               	clrf	25	;volatile
  6132                           
  6133                           ;pwm.c: 158: CCP4IE = 1;
  6134  0831  0021               	movlb	1	; select bank1
  6135  0832  1693               	bsf	19,5	;volatile
  6136                           
  6137                           ;pwm.c: 159: CCP4IF = 0;
  6138  0833  0020               	movlb	0	; select bank0
  6139  0834  1293               	bcf	19,5	;volatile
  6140                           
  6141                           ;pwm.c: 160: CCP4CON = 0x05;
  6142  0835  3005               	movlw	5
  6143  0836  0026               	movlb	6	; select bank6
  6144  0837  009A               	movwf	26	;volatile
  6145                           
  6146                           ;pwm.c: 161: break;
  6147  0838  0008               	return
  6148  0839                     l5921:	
  6149                           ;pwm.c: 163: };pwm.c: 166: case 5:
  6150                           
  6151                           
  6152                           ;pwm.c: 168: {;pwm.c: 170: CCP5CON = 0x00;
  6153  0839  0026               	movlb	6	; select bank6
  6154  083A  019E               	clrf	30	;volatile
  6155                           
  6156                           ;pwm.c: 171: CCPR5L = 0x00;
  6157  083B  019C               	clrf	28	;volatile
  6158                           
  6159                           ;pwm.c: 172: CCPR5H = 0x00;
  6160  083C  019D               	clrf	29	;volatile
  6161                           
  6162                           ;pwm.c: 173: CCP5IE = 1;
  6163  083D  0021               	movlb	1	; select bank1
  6164  083E  1713               	bsf	19,6	;volatile
  6165                           
  6166                           ;pwm.c: 174: CCP5IF = 0;
  6167  083F  0020               	movlb	0	; select bank0
  6168  0840  1313               	bcf	19,6	;volatile
  6169                           
  6170                           ;pwm.c: 175: CCP5CON = 0x05;
  6171  0841  3005               	movlw	5
  6172  0842  0026               	movlb	6	; select bank6
  6173  0843  009E               	movwf	30	;volatile
  6174                           
  6175                           ;pwm.c: 187: };pwm.c: 189: }
  6176                           
  6177                           ;pwm.c: 183: {;pwm.c: 185: break;
  6178                           
  6179                           ;pwm.c: 178: };pwm.c: 182: default:
  6180                           
  6181                           ;pwm.c: 176: break;
  6182  0844  0008               	return
  6183  0845                     l5931:	
  6184  0845  0020               	movlb	0	; select bank0
  6185  0846  0828               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  6186                           
  6187                           ; Switch size 1, requested type "space"
  6188                           ; Number of cases is 5, Range of values is 1 to 5
  6189                           ; switch strategies available:
  6190                           ; Name         Instructions Cycles
  6191                           ; simple_byte           16     9 (average)
  6192                           ; direct_byte           19     9 (fixed)
  6193                           ; jumptable            263     9 (fixed)
  6194                           ;	Chosen strategy is simple_byte
  6195  0847  3A01               	xorlw	1	; case 1
  6196  0848  1903               	skipnz
  6197  0849  2809               	goto	l5889
  6198  084A  3A03               	xorlw	3	; case 2
  6199  084B  1903               	skipnz
  6200  084C  2815               	goto	l5897
  6201  084D  3A01               	xorlw	1	; case 3
  6202  084E  1903               	skipnz
  6203  084F  2821               	goto	l5905
  6204  0850  3A07               	xorlw	7	; case 4
  6205  0851  1903               	skipnz
  6206  0852  282D               	goto	l5913
  6207  0853  3A01               	xorlw	1	; case 5
  6208  0854  1903               	skipnz
  6209  0855  2839               	goto	l5921
  6210  0856  2857               	goto	l1172
  6211  0857                     l1172:	
  6212  0857  0008               	return
  6213  0858                     __end_of_PWM_Capture_init:	
  6214                           
  6215                           	psect	text9
  6216  1D58                     __ptext9:	
  6217 ;; *************** function _Oscill_Source_Block *****************
  6218 ;; Defined at:
  6219 ;;		line 478 in file "../timer.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;		None
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;		None
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      void 
  6226 ;; Registers used:
  6227 ;;		wreg
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6233 ;;      Params:         0       0       0       0       0       0       0       0
  6234 ;;      Locals:         0       0       0       0       0       0       0       0
  6235 ;;      Temps:          0       0       0       0       0       0       0       0
  6236 ;;      Totals:         0       0       0       0       0       0       0       0
  6237 ;;Total ram usage:        0 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    3
  6240 ;; This function calls:
  6241 ;;		Nothing
  6242 ;; This function is called by:
  6243 ;;		_system_init
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           
  6248                           ;psect for function _Oscill_Source_Block
  6249  1D58                     _Oscill_Source_Block:	
  6250                           
  6251                           ;timer.c: 482: OSCCON = 0xF0;
  6252                           
  6253                           ;incstack = 0
  6254                           ; Regs used in _Oscill_Source_Block: [wreg]
  6255  1D58  30F0               	movlw	240
  6256  1D59  0021               	movlb	1	; select bank1
  6257  1D5A  0099               	movwf	25	;volatile
  6258                           
  6259                           ;timer.c: 483: WDTCON = 0b00010001;
  6260  1D5B  3011               	movlw	17
  6261  1D5C  0097               	movwf	23	;volatile
  6262  1D5D  0008               	return
  6263  1D5E                     __end_of_Oscill_Source_Block:	
  6264                           
  6265                           	psect	text10
  6266  0858                     __ptext10:	
  6267 ;; *************** function _I_calibrationInit *****************
  6268 ;; Defined at:
  6269 ;;		line 178 in file "../main.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;		None
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;		None
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  1    wreg      void 
  6276 ;; Registers used:
  6277 ;;		wreg, status,2, status,0, pclath, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6283 ;;      Params:         0       0       0       0       0       0       0       0
  6284 ;;      Locals:         0       0       0       0       0       0       0       0
  6285 ;;      Temps:          0       5       0       0       0       0       0       0
  6286 ;;      Totals:         0       5       0       0       0       0       0       0
  6287 ;;Total ram usage:        5 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:    4
  6290 ;; This function calls:
  6291 ;;		_ADC_Read
  6292 ;;		_ADC_Wait
  6293 ;;		_read_eeprom_data
  6294 ;; This function is called by:
  6295 ;;		_system_init
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           
  6300                           ;psect for function _I_calibrationInit
  6301  0858                     _I_calibrationInit:	
  6302                           
  6303                           ;main.c: 182: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  6304                           
  6305                           ;incstack = 0
  6306                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  6307  0858  3003               	movlw	3
  6308  0859  319D  25B0  3188   	fcall	_read_eeprom_data
  6309  085C  3A00               	xorlw	0
  6310  085D  1903               	skipnz
  6311  085E  2881               	goto	l5783
  6312  085F  3003               	movlw	3
  6313  0860  319D  25B0  3188   	fcall	_read_eeprom_data
  6314  0863  3AFF               	xorlw	255
  6315  0864  1903               	skipnz
  6316  0865  2881               	goto	l5783
  6317                           
  6318                           ;main.c: 184: {;main.c: 186: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eep
      +                          rom_data( 0x03 );
  6319  0866  3003               	movlw	3
  6320  0867  319D  25B0  3188   	fcall	_read_eeprom_data
  6321  086A  0020               	movlb	0	; select bank0
  6322  086B  00AC               	movwf	??_I_calibrationInit
  6323  086C  01AD               	clrf	??_I_calibrationInit+1
  6324  086D  3002               	movlw	2
  6325  086E  319D  25B0  3188   	fcall	_read_eeprom_data
  6326  0871  0020               	movlb	0	; select bank0
  6327  0872  00AE               	movwf	??_I_calibrationInit+2
  6328  0873  01AF               	clrf	??_I_calibrationInit+3
  6329  0874  082E               	movf	??_I_calibrationInit+2,w
  6330  0875  00AF               	movwf	??_I_calibrationInit+3
  6331  0876  01AE               	clrf	??_I_calibrationInit+2
  6332  0877  082C               	movf	??_I_calibrationInit,w
  6333  0878  042E               	iorwf	??_I_calibrationInit+2,w
  6334  0879  0021               	movlb	1	; select bank1
  6335  087A  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
  6336  087B  0020               	movlb	0	; select bank0
  6337  087C  082D               	movf	??_I_calibrationInit+1,w
  6338  087D  042F               	iorwf	??_I_calibrationInit+3,w
  6339  087E  0021               	movlb	1	; select bank1
  6340  087F  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  6341                           
  6342                           ;main.c: 189: }
  6343  0880  2886               	goto	l5785
  6344  0881                     l5783:	
  6345                           
  6346                           ;main.c: 192: else;main.c: 193: {;main.c: 195: ui16_I_cal_Ph1 = 0x0100;
  6347  0881  3000               	movlw	0
  6348  0882  0021               	movlb	1	; select bank1
  6349  0883  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
  6350  0884  3001               	movlw	1
  6351  0885  00ED               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
  6352  0886                     l5785:	
  6353                           
  6354                           ;main.c: 198: };main.c: 201: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 
      +                          0x05 ) != 0xFF)
  6355  0886  3005               	movlw	5
  6356  0887  319D  25B0  3188   	fcall	_read_eeprom_data
  6357  088A  3A00               	xorlw	0
  6358  088B  1903               	skipnz
  6359  088C  28AF               	goto	l5791
  6360  088D  3005               	movlw	5
  6361  088E  319D  25B0  3188   	fcall	_read_eeprom_data
  6362  0891  3AFF               	xorlw	255
  6363  0892  1903               	skipnz
  6364  0893  28AF               	goto	l5791
  6365                           
  6366                           ;main.c: 203: {;main.c: 205: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eep
      +                          rom_data( 0x05 );
  6367  0894  3005               	movlw	5
  6368  0895  319D  25B0  3188   	fcall	_read_eeprom_data
  6369  0898  0020               	movlb	0	; select bank0
  6370  0899  00AC               	movwf	??_I_calibrationInit
  6371  089A  01AD               	clrf	??_I_calibrationInit+1
  6372  089B  3004               	movlw	4
  6373  089C  319D  25B0  3188   	fcall	_read_eeprom_data
  6374  089F  0020               	movlb	0	; select bank0
  6375  08A0  00AE               	movwf	??_I_calibrationInit+2
  6376  08A1  01AF               	clrf	??_I_calibrationInit+3
  6377  08A2  082E               	movf	??_I_calibrationInit+2,w
  6378  08A3  00AF               	movwf	??_I_calibrationInit+3
  6379  08A4  01AE               	clrf	??_I_calibrationInit+2
  6380  08A5  082C               	movf	??_I_calibrationInit,w
  6381  08A6  042E               	iorwf	??_I_calibrationInit+2,w
  6382  08A7  0021               	movlb	1	; select bank1
  6383  08A8  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  6384  08A9  0020               	movlb	0	; select bank0
  6385  08AA  082D               	movf	??_I_calibrationInit+1,w
  6386  08AB  042F               	iorwf	??_I_calibrationInit+3,w
  6387  08AC  0021               	movlb	1	; select bank1
  6388  08AD  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  6389                           
  6390                           ;main.c: 208: }
  6391  08AE  28B4               	goto	l5793
  6392  08AF                     l5791:	
  6393                           
  6394                           ;main.c: 211: else;main.c: 212: {;main.c: 214: ui16_I_cal_Ph2 = 0x0100;
  6395  08AF  3000               	movlw	0
  6396  08B0  0021               	movlb	1	; select bank1
  6397  08B1  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  6398  08B2  3001               	movlw	1
  6399  08B3  00EB               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
  6400  08B4                     l5793:	
  6401                           
  6402                           ;main.c: 217: };main.c: 220: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 
      +                          0x07 ) != 0xFF)
  6403  08B4  3007               	movlw	7
  6404  08B5  319D  25B0  3188   	fcall	_read_eeprom_data
  6405  08B8  3A00               	xorlw	0
  6406  08B9  1903               	skipnz
  6407  08BA  28DD               	goto	l5799
  6408  08BB  3007               	movlw	7
  6409  08BC  319D  25B0  3188   	fcall	_read_eeprom_data
  6410  08BF  3AFF               	xorlw	255
  6411  08C0  1903               	skipnz
  6412  08C1  28DD               	goto	l5799
  6413                           
  6414                           ;main.c: 222: {;main.c: 224: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eep
      +                          rom_data( 0x07 );
  6415  08C2  3007               	movlw	7
  6416  08C3  319D  25B0  3188   	fcall	_read_eeprom_data
  6417  08C6  0020               	movlb	0	; select bank0
  6418  08C7  00AC               	movwf	??_I_calibrationInit
  6419  08C8  01AD               	clrf	??_I_calibrationInit+1
  6420  08C9  3006               	movlw	6
  6421  08CA  319D  25B0  3188   	fcall	_read_eeprom_data
  6422  08CD  0020               	movlb	0	; select bank0
  6423  08CE  00AE               	movwf	??_I_calibrationInit+2
  6424  08CF  01AF               	clrf	??_I_calibrationInit+3
  6425  08D0  082E               	movf	??_I_calibrationInit+2,w
  6426  08D1  00AF               	movwf	??_I_calibrationInit+3
  6427  08D2  01AE               	clrf	??_I_calibrationInit+2
  6428  08D3  082C               	movf	??_I_calibrationInit,w
  6429  08D4  042E               	iorwf	??_I_calibrationInit+2,w
  6430  08D5  0021               	movlb	1	; select bank1
  6431  08D6  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
  6432  08D7  0020               	movlb	0	; select bank0
  6433  08D8  082D               	movf	??_I_calibrationInit+1,w
  6434  08D9  042F               	iorwf	??_I_calibrationInit+3,w
  6435  08DA  0021               	movlb	1	; select bank1
  6436  08DB  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  6437                           
  6438                           ;main.c: 226: }
  6439  08DC  28E2               	goto	l5801
  6440  08DD                     l5799:	
  6441                           
  6442                           ;main.c: 229: else;main.c: 230: {;main.c: 232: ui16_I_cal_Ph3 = 0x0100;
  6443  08DD  3000               	movlw	0
  6444  08DE  0021               	movlb	1	; select bank1
  6445  08DF  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
  6446  08E0  3001               	movlw	1
  6447  08E1  00E9               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
  6448  08E2                     l5801:	
  6449                           
  6450                           ;main.c: 235: };main.c: 328: LATC2 = 0;
  6451  08E2  0022               	movlb	2	; select bank2
  6452  08E3  110E               	bcf	14,2	;volatile
  6453                           
  6454                           ;main.c: 329: LATB2 = 0;
  6455  08E4  110D               	bcf	13,2	;volatile
  6456                           
  6457                           ;main.c: 330: LATB1 = 0;
  6458  08E5  108D               	bcf	13,1	;volatile
  6459                           
  6460                           ;main.c: 331: LATC = LATC | 0b00011010;
  6461  08E6  080E               	movf	14,w	;volatile
  6462  08E7  381A               	iorlw	26
  6463  08E8  008E               	movwf	14	;volatile
  6464                           
  6465                           ;main.c: 333: ADC_Wait();
  6466  08E9  319D  25E8  3188   	fcall	_ADC_Wait
  6467                           
  6468                           ;main.c: 334: ADC_Wait();
  6469  08EC  319D  25E8  3188   	fcall	_ADC_Wait
  6470                           
  6471                           ;main.c: 336: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  6472  08EF  3011               	movlw	17
  6473  08F0  0021               	movlb	1	; select bank1
  6474  08F1  009D               	movwf	29	;volatile
  6475                           
  6476                           ;main.c: 337: ADC_Wait();
  6477  08F2  319D  25E8  3188   	fcall	_ADC_Wait
  6478                           
  6479                           ;main.c: 338: ( GO_nDONE = 1 );
  6480  08F5  0021               	movlb	1	; select bank1
  6481  08F6  149D               	bsf	29,1	;volatile
  6482                           
  6483                           ;main.c: 341: ui8_current_cal[2] = ADC_Read();
  6484  08F7  319E  26B8  3188   	fcall	_ADC_Read
  6485  08FA  0020               	movlb	0	; select bank0
  6486  08FB  0828               	movf	?_ADC_Read,w
  6487  08FC  00AC               	movwf	??_I_calibrationInit
  6488  08FD  082C               	movf	??_I_calibrationInit,w
  6489  08FE  0022               	movlb	2	; select bank2
  6490  08FF  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  6491                           
  6492                           ;main.c: 343: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  6493  0900  3035               	movlw	53
  6494  0901  0021               	movlb	1	; select bank1
  6495  0902  009D               	movwf	29	;volatile
  6496                           
  6497                           ;main.c: 344: ADC_Wait();
  6498  0903  319D  25E8  3188   	fcall	_ADC_Wait
  6499                           
  6500                           ;main.c: 345: ( GO_nDONE = 1 );
  6501  0906  0021               	movlb	1	; select bank1
  6502  0907  149D               	bsf	29,1	;volatile
  6503                           
  6504                           ;main.c: 348: ui8_current_cal[1] = ADC_Read();
  6505  0908  319E  26B8  3188   	fcall	_ADC_Read
  6506  090B  0020               	movlb	0	; select bank0
  6507  090C  0828               	movf	?_ADC_Read,w
  6508  090D  00AC               	movwf	??_I_calibrationInit
  6509  090E  082C               	movf	??_I_calibrationInit,w
  6510  090F  0022               	movlb	2	; select bank2
  6511  0910  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  6512                           
  6513                           ;main.c: 350: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  6514  0911  3009               	movlw	9
  6515  0912  0021               	movlb	1	; select bank1
  6516  0913  009D               	movwf	29	;volatile
  6517                           
  6518                           ;main.c: 351: ADC_Wait();
  6519  0914  319D  25E8  3188   	fcall	_ADC_Wait
  6520                           
  6521                           ;main.c: 352: ( GO_nDONE = 1 );
  6522  0917  0021               	movlb	1	; select bank1
  6523  0918  149D               	bsf	29,1	;volatile
  6524                           
  6525                           ;main.c: 355: ui8_current_cal[0] = ADC_Read();
  6526  0919  319E  26B8         	fcall	_ADC_Read
  6527  091B  0020               	movlb	0	; select bank0
  6528  091C  0828               	movf	?_ADC_Read,w
  6529  091D  00AC               	movwf	??_I_calibrationInit
  6530  091E  082C               	movf	??_I_calibrationInit,w
  6531  091F  0022               	movlb	2	; select bank2
  6532  0920  00A0               	movwf	_ui8_current_cal^(0+256)
  6533  0921  0008               	return
  6534  0922                     __end_of_I_calibrationInit:	
  6535                           
  6536                           	psect	text11
  6537  1DB0                     __ptext11:	
  6538 ;; *************** function _read_eeprom_data *****************
  6539 ;; Defined at:
  6540 ;;		line 52 in file "../eeprom.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  ui8_adress      1    wreg     unsigned char 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  ui8_adress      1    9[BANK0 ] unsigned char 
  6545 ;;  ui8_adress_d    1   10[BANK0 ] unsigned char 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      unsigned char 
  6548 ;; Registers used:
  6549 ;;		wreg
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6555 ;;      Params:         0       0       0       0       0       0       0       0
  6556 ;;      Locals:         0       2       0       0       0       0       0       0
  6557 ;;      Temps:          0       1       0       0       0       0       0       0
  6558 ;;      Totals:         0       3       0       0       0       0       0       0
  6559 ;;Total ram usage:        3 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    3
  6562 ;; This function calls:
  6563 ;;		Nothing
  6564 ;; This function is called by:
  6565 ;;		_I_calibrationInit
  6566 ;;		_EOL
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _read_eeprom_data
  6572  1DB0                     _read_eeprom_data:	
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _read_eeprom_data: [wreg]
  6576                           ;read_eeprom_data@ui8_adress stored from wreg
  6577  1DB0  0020               	movlb	0	; select bank0
  6578  1DB1  00A9               	movwf	read_eeprom_data@ui8_adress
  6579                           
  6580                           ;eeprom.c: 56: unsigned char ui8_adress_data;;eeprom.c: 58: EEADRL = ui8_adress;
  6581  1DB2  0829               	movf	read_eeprom_data@ui8_adress,w
  6582  1DB3  0023               	movlb	3	; select bank3
  6583  1DB4  0091               	movwf	17	;volatile
  6584                           
  6585                           ;eeprom.c: 59: EEPGD = 0;
  6586  1DB5  1395               	bcf	21,7	;volsfr
  6587                           
  6588                           ;eeprom.c: 60: CFGS = 0;
  6589  1DB6  1315               	bcf	21,6	;volsfr
  6590                           
  6591                           ;eeprom.c: 61: RD = 1;
  6592  1DB7  1415               	bsf	21,0	;volsfr
  6593                           
  6594                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  6595  1DB8  0813               	movf	19,w	;volatile
  6596  1DB9  0020               	movlb	0	; select bank0
  6597  1DBA  00A8               	movwf	??_read_eeprom_data
  6598  1DBB  0828               	movf	??_read_eeprom_data,w
  6599  1DBC  00AA               	movwf	read_eeprom_data@ui8_adress_data
  6600                           
  6601                           ;eeprom.c: 64: return ui8_adress_data;
  6602  1DBD  082A               	movf	read_eeprom_data@ui8_adress_data,w
  6603  1DBE  0008               	return
  6604  1DBF                     __end_of_read_eeprom_data:	
  6605                           
  6606                           	psect	text12
  6607  1E73                     __ptext12:	
  6608 ;; *************** function _FILTER_Init *****************
  6609 ;; Defined at:
  6610 ;;		line 226 in file "../adc.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6624 ;;      Params:         0       0       0       0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0
  6626 ;;      Temps:          0       1       0       0       0       0       0       0
  6627 ;;      Totals:         0       1       0       0       0       0       0       0
  6628 ;;Total ram usage:        1 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    4
  6631 ;; This function calls:
  6632 ;;		_ADC_Read
  6633 ;;		_ADC_Wait
  6634 ;; This function is called by:
  6635 ;;		_system_init
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           
  6640                           ;psect for function _FILTER_Init
  6641  1E73                     _FILTER_Init:	
  6642                           
  6643                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  6644                           
  6645                           ;incstack = 0
  6646                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6647  1E73  0020               	movlb	0	; select bank0
  6648  1E74  01DB               	clrf	_windowPtr1
  6649  1E75                     L18:	
  6650  1E75  3008               	movlw	8
  6651  1E76  025B               	subwf	_windowPtr1,w
  6652  1E77  1803               	btfsc	3,0
  6653  1E78  0008               	return
  6654                           
  6655                           ;adc.c: 232: {;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  6656  1E79  3031               	movlw	49
  6657  1E7A  0021               	movlb	1	; select bank1
  6658  1E7B  009D               	movwf	29	;volatile
  6659                           
  6660                           ;adc.c: 235: ADC_Wait( );
  6661  1E7C  319D  25E8  319E   	fcall	_ADC_Wait
  6662                           
  6663                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  6664  1E7F  319E  26B8  319E   	fcall	_ADC_Read
  6665  1E82  0020               	movlb	0	; select bank0
  6666  1E83  0829               	movf	?_ADC_Read+1,w
  6667  1E84  00DD               	movwf	_ui16_Ubat_bldc+1	;volatile
  6668  1E85  0828               	movf	?_ADC_Read,w
  6669  1E86  00DC               	movwf	_ui16_Ubat_bldc	;volatile
  6670                           
  6671                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  6672  1E87  355B               	lslf	_windowPtr1,w
  6673  1E88  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  6674  1E89  0086               	movwf	6
  6675  1E8A  3002               	movlw	2	; select bank4/5
  6676  1E8B  0087               	movwf	7
  6677  1E8C  305E               	movlw	94
  6678  1E8D  3FC0               	movwi [0]fsr1
  6679  1E8E  3001               	movlw	1
  6680  1E8F  3FC1               	movwi [1]fsr1
  6681  1E90  3001               	movlw	1
  6682  1E91  00AC               	movwf	??_FILTER_Init
  6683  1E92  082C               	movf	??_FILTER_Init,w
  6684  1E93  07DB               	addwf	_windowPtr1,f
  6685  1E94  2E75               	goto	L18
  6686  1E95                     __end_of_FILTER_Init:	
  6687                           
  6688                           	psect	text13
  6689  1DE8                     __ptext13:	
  6690 ;; *************** function _ADC_Wait *****************
  6691 ;; Defined at:
  6692 ;;		line 128 in file "../adc.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;                  1    wreg      void 
  6699 ;; Registers used:
  6700 ;;		None
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6706 ;;      Params:         0       0       0       0       0       0       0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    3
  6713 ;; This function calls:
  6714 ;;		Nothing
  6715 ;; This function is called by:
  6716 ;;		_FILTER_Init
  6717 ;;		_I_calibrationInit
  6718 ;;		_EOL
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           
  6723                           ;psect for function _ADC_Wait
  6724  1DE8                     _ADC_Wait:	
  6725                           
  6726                           ;adc.c: 133: __nop();
  6727                           
  6728                           ;incstack = 0
  6729                           ; Regs used in _ADC_Wait: []
  6730  1DE8  0000               	nop
  6731                           
  6732                           ;adc.c: 134: __nop();
  6733  1DE9  0000               	nop
  6734                           
  6735                           ;adc.c: 135: __nop();
  6736  1DEA  0000               	nop
  6737                           
  6738                           ;adc.c: 136: __nop();
  6739  1DEB  0000               	nop
  6740                           
  6741                           ;adc.c: 137: __nop();
  6742  1DEC  0000               	nop
  6743                           
  6744                           ;adc.c: 138: __nop();
  6745  1DED  0000               	nop
  6746                           
  6747                           ;adc.c: 139: __nop();
  6748  1DEE  0000               	nop
  6749                           
  6750                           ;adc.c: 140: __nop();
  6751  1DEF  0000               	nop
  6752                           
  6753                           ;adc.c: 142: __nop();
  6754  1DF0  0000               	nop
  6755                           
  6756                           ;adc.c: 143: __nop();
  6757  1DF1  0000               	nop
  6758                           
  6759                           ;adc.c: 144: __nop();
  6760  1DF2  0000               	nop
  6761                           
  6762                           ;adc.c: 145: __nop();
  6763  1DF3  0000               	nop
  6764                           
  6765                           ;adc.c: 146: __nop();
  6766  1DF4  0000               	nop
  6767                           
  6768                           ;adc.c: 147: __nop();
  6769  1DF5  0000               	nop
  6770                           
  6771                           ;adc.c: 148: __nop();
  6772  1DF6  0000               	nop
  6773                           
  6774                           ;adc.c: 149: __nop();
  6775  1DF7  0000               	nop
  6776                           
  6777                           ;adc.c: 151: __nop();
  6778  1DF8  0000               	nop
  6779                           
  6780                           ;adc.c: 152: __nop();
  6781  1DF9  0000               	nop
  6782                           
  6783                           ;adc.c: 153: __nop();
  6784  1DFA  0000               	nop
  6785                           
  6786                           ;adc.c: 154: __nop();
  6787  1DFB  0000               	nop
  6788                           
  6789                           ;adc.c: 155: __nop();
  6790  1DFC  0000               	nop
  6791                           
  6792                           ;adc.c: 156: __nop();
  6793  1DFD  0000               	nop
  6794                           
  6795                           ;adc.c: 157: __nop();
  6796  1DFE  0000               	nop
  6797                           
  6798                           ;adc.c: 158: __nop();
  6799  1DFF  0000               	nop
  6800  1E00  0008               	return
  6801  1E01                     __end_of_ADC_Wait:	
  6802                           
  6803                           	psect	text14
  6804  1EB8                     __ptext14:	
  6805 ;; *************** function _ADC_Read *****************
  6806 ;; Defined at:
  6807 ;;		line 175 in file "../adc.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;		None
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;  i               1   11[BANK0 ] unsigned char 
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  2    8[BANK0 ] unsigned int 
  6814 ;; Registers used:
  6815 ;;		wreg, status,2, status,0
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6821 ;;      Params:         0       2       0       0       0       0       0       0
  6822 ;;      Locals:         0       1       0       0       0       0       0       0
  6823 ;;      Temps:          0       1       0       0       0       0       0       0
  6824 ;;      Totals:         0       4       0       0       0       0       0       0
  6825 ;;Total ram usage:        4 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:    3
  6828 ;; This function calls:
  6829 ;;		Nothing
  6830 ;; This function is called by:
  6831 ;;		_FILTER_Init
  6832 ;;		_I_calibrationInit
  6833 ;;		_EOL
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           
  6838                           ;psect for function _ADC_Read
  6839  1EB8                     _ADC_Read:	
  6840                           
  6841                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
  6842                           
  6843                           ;incstack = 0
  6844                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  6845  1EB8  0020               	movlb	0	; select bank0
  6846  1EB9  01AB               	clrf	ADC_Read@i
  6847  1EBA                     l69:	
  6848                           ;adc.c: 182: while( GO_nDONE )
  6849                           
  6850  1EBA  0021               	movlb	1	; select bank1
  6851  1EBB  1C9D               	btfss	29,1	;volatile
  6852  1EBC  2EC6               	goto	l5633
  6853                           
  6854                           ;adc.c: 184: {;adc.c: 186: i++;
  6855  1EBD  3001               	movlw	1
  6856  1EBE  0020               	movlb	0	; select bank0
  6857  1EBF  00AA               	movwf	??_ADC_Read
  6858  1EC0  082A               	movf	??_ADC_Read,w
  6859  1EC1  07AB               	addwf	ADC_Read@i,f
  6860                           
  6861                           ;adc.c: 189: if( i > 64 )
  6862  1EC2  3041               	movlw	65
  6863  1EC3  022B               	subwf	ADC_Read@i,w
  6864  1EC4  1C03               	skipc
  6865  1EC5  2EBA               	goto	l69
  6866  1EC6                     l5633:	
  6867                           ;adc.c: 191: {;adc.c: 193: break;
  6868                           
  6869                           
  6870                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
  6871  1EC6  0021               	movlb	1	; select bank1
  6872  1EC7  081C               	movf	28,w	;volatile
  6873  1EC8  0020               	movlb	0	; select bank0
  6874  1EC9  00AA               	movwf	??_ADC_Read
  6875  1ECA  082A               	movf	??_ADC_Read,w
  6876  1ECB  0021               	movlb	1	; select bank1
  6877  1ECC  00BD               	movwf	(_analog_value^(0+128)+1)	;volatile
  6878                           
  6879                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  6880  1ECD  081B               	movf	27,w	;volatile
  6881  1ECE  0020               	movlb	0	; select bank0
  6882  1ECF  00AA               	movwf	??_ADC_Read
  6883  1ED0  082A               	movf	??_ADC_Read,w
  6884  1ED1  0021               	movlb	1	; select bank1
  6885  1ED2  00BC               	movwf	_analog_value^(0+128)	;volatile
  6886                           
  6887                           ;adc.c: 204: return analog_value.w;
  6888  1ED3  083D               	movf	(_analog_value+1)^(0+128),w	;volatile
  6889  1ED4  0020               	movlb	0	; select bank0
  6890  1ED5  00A9               	movwf	?_ADC_Read+1
  6891  1ED6  0021               	movlb	1	; select bank1
  6892  1ED7  083C               	movf	_analog_value^(0+128),w	;volatile
  6893  1ED8  0020               	movlb	0	; select bank0
  6894  1ED9  00A8               	movwf	?_ADC_Read
  6895  1EDA  0008               	return
  6896  1EDB                     __end_of_ADC_Read:	
  6897                           
  6898                           	psect	text15
  6899  1D95                     __ptext15:	
  6900 ;; *************** function _DiagInit *****************
  6901 ;; Defined at:
  6902 ;;		line 148 in file "../diag.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;		None
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, status,2, status,0, pclath, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6916 ;;      Params:         0       0       0       0       0       0       0       0
  6917 ;;      Locals:         0       0       0       0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0       0
  6919 ;;      Totals:         0       0       0       0       0       0       0       0
  6920 ;;Total ram usage:        0 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    4
  6923 ;; This function calls:
  6924 ;;		_PWM_Write_Out
  6925 ;; This function is called by:
  6926 ;;		_system_init
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _DiagInit
  6932  1D95                     _DiagInit:	
  6933                           
  6934                           ;diag.c: 162: ui8_error_Flags.b = 0;
  6935                           
  6936                           ;incstack = 0
  6937                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  6938  1D95  0021               	movlb	1	; select bank1
  6939  1D96  01E1               	clrf	_ui8_error_Flags^(0+128)
  6940                           
  6941                           ;diag.c: 163: PWM_Write_Out( 11 );
  6942  1D97  300B               	movlw	11
  6943  1D98  319D  2571         	fcall	_PWM_Write_Out
  6944                           
  6945                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  6946  1D9A  0021               	movlb	1	; select bank1
  6947  1D9B  01E6               	clrf	_ui16_IPhase1_bldc_cal^(0+128)
  6948  1D9C  01E7               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+128)
  6949                           
  6950                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  6951  1D9D  01E4               	clrf	_ui16_IPhase2_bldc_cal^(0+128)
  6952  1D9E  01E5               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+128)
  6953                           
  6954                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  6955  1D9F  01E2               	clrf	_ui16_IPhase3_bldc_cal^(0+128)
  6956  1DA0  01E3               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+128)
  6957  1DA1  0008               	return
  6958  1DA2                     __end_of_DiagInit:	
  6959                           
  6960                           	psect	text16
  6961  1D8A                     __ptext16:	
  6962 ;; *************** function _ADC_Init *****************
  6963 ;; Defined at:
  6964 ;;		line 102 in file "../adc.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  1    wreg      void 
  6971 ;; Registers used:
  6972 ;;		wreg, status,2
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6978 ;;      Params:         0       0       0       0       0       0       0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0
  6981 ;;      Totals:         0       0       0       0       0       0       0       0
  6982 ;;Total ram usage:        0 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    3
  6985 ;; This function calls:
  6986 ;;		Nothing
  6987 ;; This function is called by:
  6988 ;;		_system_init
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           
  6993                           ;psect for function _ADC_Init
  6994  1D8A                     _ADC_Init:	
  6995                           
  6996                           ;adc.c: 106: ADCON1 = 0b10100000;
  6997                           
  6998                           ;incstack = 0
  6999                           ; Regs used in _ADC_Init: [wreg+status,2]
  7000  1D8A  30A0               	movlw	160
  7001  1D8B  0021               	movlb	1	; select bank1
  7002  1D8C  009E               	movwf	30	;volatile
  7003                           
  7004                           ;adc.c: 108: ADCON0 = 0b00000000;
  7005  1D8D  019D               	clrf	29	;volatile
  7006                           
  7007                           ;adc.c: 109: ADON = 1;
  7008  1D8E  141D               	bsf	29,0	;volatile
  7009                           
  7010                           ;adc.c: 110: FVRCON = FVRCON | 0b00110000;
  7011  1D8F  0022               	movlb	2	; select bank2
  7012  1D90  0817               	movf	23,w	;volatile
  7013  1D91  3830               	iorlw	48
  7014  1D92  0097               	movwf	23	;volatile
  7015                           
  7016                           ;adc.c: 111: ui8_temp_calibration = 0;
  7017  1D93  01E7               	clrf	_ui8_temp_calibration^(0+256)
  7018  1D94  0008               	return
  7019  1D95                     __end_of_ADC_Init:	
  7020                           
  7021                           	psect	text17
  7022  1478                     __ptext17:	
  7023 ;; *************** function _rate_limit *****************
  7024 ;; Defined at:
  7025 ;;		line 1589 in file "../main.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;  pwm             2   14[BANK0 ] int 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  sign_pwm_inc    2   24[BANK0 ] int 
  7030 ;;  pwm_inc         2   22[BANK0 ] int 
  7031 ;;  abs_delta_pw    2   20[BANK0 ] int 
  7032 ;;  sign_delta_p    2   18[BANK0 ] int 
  7033 ;;  delta_pwm       2   26[BANK0 ] int 
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  2   14[BANK0 ] int 
  7036 ;; Registers used:
  7037 ;;		wreg, status,2, status,0, pclath, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7043 ;;      Params:         0       2       0       0       0       0       0       0
  7044 ;;      Locals:         0      10       0       0       0       0       0       0
  7045 ;;      Temps:          0       2       0       0       0       0       0       0
  7046 ;;      Totals:         0      14       0       0       0       0       0       0
  7047 ;;Total ram usage:       14 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    4
  7050 ;; This function calls:
  7051 ;;		___wmul
  7052 ;;		_sign
  7053 ;; This function is called by:
  7054 ;;		_main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           
  7059                           ;psect for function _rate_limit
  7060  1478                     _rate_limit:	
  7061                           
  7062                           ;main.c: 1590: int delta_pwm = last_pwm - pwm;
  7063                           
  7064                           ;incstack = 0
  7065                           ; Regs used in _rate_limit: [wreg+status,2+status,0+pclath+cstack]
  7066  1478  0020               	movlb	0	; select bank0
  7067  1479  092E               	comf	rate_limit@pwm,w
  7068  147A  00B0               	movwf	??_rate_limit
  7069  147B  092F               	comf	rate_limit@pwm+1,w
  7070  147C  00B1               	movwf	??_rate_limit+1
  7071  147D  0AB0               	incf	??_rate_limit,f
  7072  147E  1903               	skipnz
  7073  147F  0AB1               	incf	??_rate_limit+1,f
  7074  1480  0022               	movlb	2	; select bank2
  7075  1481  0823               	movf	_last_pwm^(0+256),w
  7076  1482  0020               	movlb	0	; select bank0
  7077  1483  0730               	addwf	??_rate_limit,w
  7078  1484  00BA               	movwf	rate_limit@delta_pwm
  7079  1485  0022               	movlb	2	; select bank2
  7080  1486  0824               	movf	(_last_pwm+1)^(0+256),w
  7081  1487  0020               	movlb	0	; select bank0
  7082  1488  3D31               	addwfc	??_rate_limit+1,w
  7083  1489  00BB               	movwf	rate_limit@delta_pwm+1
  7084                           
  7085                           ;main.c: 1591: if(delta_pwm < 0) {
  7086  148A  1FBB               	btfss	rate_limit@delta_pwm+1,7
  7087  148B  2CE1               	goto	l9137
  7088                           
  7089                           ;main.c: 1592: int sign_delta_pwm = sign(delta_pwm);
  7090  148C  083B               	movf	rate_limit@delta_pwm+1,w
  7091  148D  00A9               	movwf	sign@x+1
  7092  148E  083A               	movf	rate_limit@delta_pwm,w
  7093  148F  00A8               	movwf	sign@x
  7094  1490  319E  2695  3194   	fcall	_sign
  7095  1493  0020               	movlb	0	; select bank0
  7096  1494  0829               	movf	?_sign+1,w
  7097  1495  00B3               	movwf	rate_limit@sign_delta_pwm+1
  7098  1496  0828               	movf	?_sign,w
  7099  1497  00B2               	movwf	rate_limit@sign_delta_pwm
  7100                           
  7101                           ;main.c: 1593: int abs_delta_pwm = delta_pwm;
  7102  1498  083B               	movf	rate_limit@delta_pwm+1,w
  7103  1499  00B5               	movwf	rate_limit@abs_delta_pwm+1
  7104  149A  083A               	movf	rate_limit@delta_pwm,w
  7105  149B  00B4               	movwf	rate_limit@abs_delta_pwm
  7106                           
  7107                           ;main.c: 1594: if(delta_pwm < 0) {abs_delta_pwm = delta_pwm * -1;}
  7108  149C  1FBB               	btfss	rate_limit@delta_pwm+1,7
  7109  149D  2CA9               	goto	l9125
  7110  149E  093A               	comf	rate_limit@delta_pwm,w
  7111  149F  00B0               	movwf	??_rate_limit
  7112  14A0  093B               	comf	rate_limit@delta_pwm+1,w
  7113  14A1  00B1               	movwf	??_rate_limit+1
  7114  14A2  0AB0               	incf	??_rate_limit,f
  7115  14A3  1903               	skipnz
  7116  14A4  0AB1               	incf	??_rate_limit+1,f
  7117  14A5  0830               	movf	??_rate_limit,w
  7118  14A6  00B4               	movwf	rate_limit@abs_delta_pwm
  7119  14A7  0831               	movf	??_rate_limit+1,w
  7120  14A8  00B5               	movwf	rate_limit@abs_delta_pwm+1
  7121  14A9                     l9125:	
  7122                           
  7123                           ;main.c: 1595: int pwm_inc = 5;
  7124  14A9  3005               	movlw	5
  7125  14AA  00B6               	movwf	rate_limit@pwm_inc
  7126  14AB  3000               	movlw	0
  7127  14AC  00B7               	movwf	rate_limit@pwm_inc+1
  7128                           
  7129                           ;main.c: 1596: int sign_pwm_inc = pwm_inc * sign_delta_pwm;
  7130  14AD  0837               	movf	rate_limit@pwm_inc+1,w
  7131  14AE  00A9               	movwf	___wmul@multiplier+1
  7132  14AF  0836               	movf	rate_limit@pwm_inc,w
  7133  14B0  00A8               	movwf	___wmul@multiplier
  7134  14B1  0833               	movf	rate_limit@sign_delta_pwm+1,w
  7135  14B2  00AB               	movwf	___wmul@multiplicand+1
  7136  14B3  0832               	movf	rate_limit@sign_delta_pwm,w
  7137  14B4  00AA               	movwf	___wmul@multiplicand
  7138  14B5  319E  2636  3194   	fcall	___wmul
  7139  14B8  0020               	movlb	0	; select bank0
  7140  14B9  0829               	movf	?___wmul+1,w
  7141  14BA  00B9               	movwf	rate_limit@sign_pwm_inc+1
  7142  14BB  0828               	movf	?___wmul,w
  7143  14BC  00B8               	movwf	rate_limit@sign_pwm_inc
  7144                           
  7145                           ;main.c: 1597: sign_pwm_inc = last_pwm - sign_pwm_inc;
  7146  14BD  0938               	comf	rate_limit@sign_pwm_inc,w
  7147  14BE  00B0               	movwf	??_rate_limit
  7148  14BF  0939               	comf	rate_limit@sign_pwm_inc+1,w
  7149  14C0  00B1               	movwf	??_rate_limit+1
  7150  14C1  0AB0               	incf	??_rate_limit,f
  7151  14C2  1903               	skipnz
  7152  14C3  0AB1               	incf	??_rate_limit+1,f
  7153  14C4  0022               	movlb	2	; select bank2
  7154  14C5  0823               	movf	_last_pwm^(0+256),w
  7155  14C6  0020               	movlb	0	; select bank0
  7156  14C7  0730               	addwf	??_rate_limit,w
  7157  14C8  00B8               	movwf	rate_limit@sign_pwm_inc
  7158  14C9  0022               	movlb	2	; select bank2
  7159  14CA  0824               	movf	(_last_pwm+1)^(0+256),w
  7160  14CB  0020               	movlb	0	; select bank0
  7161  14CC  3D31               	addwfc	??_rate_limit+1,w
  7162  14CD  00B9               	movwf	rate_limit@sign_pwm_inc+1
  7163                           
  7164                           ;main.c: 1599: if (pwm_inc >= abs_delta_pwm) {
  7165  14CE  0837               	movf	rate_limit@pwm_inc+1,w
  7166  14CF  3A80               	xorlw	128
  7167  14D0  00B0               	movwf	??_rate_limit
  7168  14D1  0835               	movf	rate_limit@abs_delta_pwm+1,w
  7169  14D2  3A80               	xorlw	128
  7170  14D3  0230               	subwf	??_rate_limit,w
  7171  14D4  1D03               	skipz
  7172  14D5  2CD8               	goto	u7195
  7173  14D6  0834               	movf	rate_limit@abs_delta_pwm,w
  7174  14D7  0236               	subwf	rate_limit@pwm_inc,w
  7175  14D8                     u7195:	
  7176  14D8  1803               	btfsc	3,0
  7177  14D9  2CE1               	goto	l9137
  7178                           
  7179                           ;main.c: 1602: else {;main.c: 1603: last_pwm = sign_pwm_inc;
  7180                           
  7181                           ;main.c: 1601: }
  7182                           
  7183                           ;main.c: 1600: last_pwm = pwm;
  7184  14DA  0020               	movlb	0	; select bank0
  7185  14DB  0839               	movf	rate_limit@sign_pwm_inc+1,w
  7186  14DC  0022               	movlb	2	; select bank2
  7187  14DD  00A4               	movwf	(_last_pwm+1)^(0+256)
  7188  14DE  0020               	movlb	0	; select bank0
  7189  14DF  0838               	movf	rate_limit@sign_pwm_inc,w
  7190  14E0  2CE7               	goto	L19
  7191  14E1                     l9137:	
  7192                           ;main.c: 1604: };main.c: 1605: }
  7193                           
  7194                           
  7195                           ;main.c: 1606: else {;main.c: 1607: last_pwm = pwm;
  7196  14E1  0020               	movlb	0	; select bank0
  7197  14E2  082F               	movf	rate_limit@pwm+1,w
  7198  14E3  0022               	movlb	2	; select bank2
  7199  14E4  00A4               	movwf	(_last_pwm+1)^(0+256)
  7200  14E5  0020               	movlb	0	; select bank0
  7201  14E6  082E               	movf	rate_limit@pwm,w
  7202  14E7                     L19:	
  7203  14E7  0022               	movlb	2	; select bank2
  7204  14E8  00A3               	movwf	_last_pwm^(0+256)
  7205                           
  7206                           ;main.c: 1608: };main.c: 1611: return last_pwm;
  7207  14E9  0824               	movf	(_last_pwm+1)^(0+256),w
  7208  14EA  0020               	movlb	0	; select bank0
  7209  14EB  00AF               	movwf	?_rate_limit+1
  7210  14EC  0022               	movlb	2	; select bank2
  7211  14ED  0823               	movf	_last_pwm^(0+256),w
  7212  14EE  0020               	movlb	0	; select bank0
  7213  14EF  00AE               	movwf	?_rate_limit
  7214  14F0  0008               	return
  7215  14F1                     __end_of_rate_limit:	
  7216                           
  7217                           	psect	text18
  7218  1E95                     __ptext18:	
  7219 ;; *************** function _sign *****************
  7220 ;; Defined at:
  7221 ;;		line 1585 in file "../main.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;  x               2    8[BANK0 ] int 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;		None
  7226 ;; Return value:  Size  Location     Type
  7227 ;;                  2    8[BANK0 ] int 
  7228 ;; Registers used:
  7229 ;;		wreg, status,2, status,0
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7235 ;;      Params:         0       2       0       0       0       0       0       0
  7236 ;;      Locals:         0       0       0       0       0       0       0       0
  7237 ;;      Temps:          0       3       0       0       0       0       0       0
  7238 ;;      Totals:         0       5       0       0       0       0       0       0
  7239 ;;Total ram usage:        5 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    3
  7242 ;; This function calls:
  7243 ;;		Nothing
  7244 ;; This function is called by:
  7245 ;;		_rate_limit
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           
  7250                           ;psect for function _sign
  7251  1E95                     _sign:	
  7252                           
  7253                           ;main.c: 1586: return (x > 0) - (x < 0);
  7254                           
  7255                           ;incstack = 0
  7256                           ; Regs used in _sign: [wreg+status,2+status,0]
  7257  1E95  0020               	movlb	0	; select bank0
  7258  1E96  1FA9               	btfss	sign@x+1,7
  7259  1E97  2E9A               	goto	u3070
  7260  1E98  3001               	movlw	1
  7261  1E99  2E9B               	goto	u3080
  7262  1E9A                     u3070:	
  7263  1E9A  3000               	movlw	0
  7264  1E9B                     u3080:	
  7265  1E9B  00AA               	movwf	??_sign
  7266  1E9C  01AB               	clrf	??_sign+1
  7267  1E9D  09AA               	comf	??_sign,f
  7268  1E9E  09AB               	comf	??_sign+1,f
  7269  1E9F  0AAA               	incf	??_sign,f
  7270  1EA0  1903               	skipnz
  7271  1EA1  0AAB               	incf	??_sign+1,f
  7272  1EA2  0829               	movf	sign@x+1,w
  7273  1EA3  3A80               	xorlw	128
  7274  1EA4  00AC               	movwf	??_sign+2
  7275  1EA5  3080               	movlw	128
  7276  1EA6  022C               	subwf	??_sign+2,w
  7277  1EA7  1D03               	skipz
  7278  1EA8  2EAB               	goto	u3095
  7279  1EA9  3001               	movlw	1
  7280  1EAA  0228               	subwf	sign@x,w
  7281  1EAB                     u3095:	
  7282  1EAB  1C03               	btfss	3,0
  7283  1EAC  2EAF               	goto	u3090
  7284  1EAD  3001               	movlw	1
  7285  1EAE  2EB0               	goto	u3100
  7286  1EAF                     u3090:	
  7287  1EAF  3000               	movlw	0
  7288  1EB0                     u3100:	
  7289  1EB0  0020               	movlb	0	; select bank0
  7290  1EB1  072A               	addwf	??_sign,w
  7291  1EB2  00A8               	movwf	?_sign
  7292  1EB3  082B               	movf	??_sign+1,w
  7293  1EB4  1803               	skipnc
  7294  1EB5  0A2B               	incf	??_sign+1,w
  7295  1EB6  00A9               	movwf	?_sign+1
  7296  1EB7  0008               	return
  7297  1EB8                     __end_of_sign:	
  7298                           
  7299                           	psect	text19
  7300  1211                     __ptext19:	
  7301 ;; *************** function _SetDiagAlarm *****************
  7302 ;; Defined at:
  7303 ;;		line 210 in file "../diag.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		wreg, status,2, status,0, pclath, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7317 ;;      Params:         0       0       0       0       0       0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0
  7320 ;;      Totals:         0       0       0       0       0       0       0       0
  7321 ;;Total ram usage:        0 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    4
  7324 ;; This function calls:
  7325 ;;		_PWM_Write_Out
  7326 ;; This function is called by:
  7327 ;;		_main
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           
  7332                           ;psect for function _SetDiagAlarm
  7333  1211                     _SetDiagAlarm:	
  7334                           
  7335                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  7336                           
  7337                           ;incstack = 0
  7338                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  7339  1211  0021               	movlb	1	; select bank1
  7340  1212  1F61               	btfss	_ui8_error_Flags^(0+128),6
  7341  1213  2A18               	goto	l6761
  7342                           
  7343                           ;diag.c: 221: {;diag.c: 223: PWM_Write_Out( 88 );
  7344  1214  3058               	movlw	88
  7345  1215  319D  2571         	fcall	_PWM_Write_Out
  7346                           
  7347                           ;diag.c: 226: }
  7348  1217  0008               	return
  7349  1218                     l6761:	
  7350                           
  7351                           ;diag.c: 229: else;diag.c: 230: {;diag.c: 232: if( bool_CPU_TempAlarm )
  7352  1218  0021               	movlb	1	; select bank1
  7353  1219  0857               	movf	_bool_CPU_TempAlarm^(0+128),w
  7354  121A  1903               	btfsc	3,2
  7355  121B  2A20               	goto	l6765
  7356                           
  7357                           ;diag.c: 235: {;diag.c: 237: PWM_Write_Out( 33 );
  7358  121C  3021               	movlw	33
  7359  121D  319D  2571         	fcall	_PWM_Write_Out
  7360                           
  7361                           ;diag.c: 240: }
  7362  121F  0008               	return
  7363  1220                     l6765:	
  7364                           
  7365                           ;diag.c: 243: else;diag.c: 244: {;diag.c: 246: if( bool_DryRunningAlarm )
  7366  1220  0021               	movlb	1	; select bank1
  7367  1221  0856               	movf	_bool_DryRunningAlarm^(0+128),w
  7368  1222  1903               	btfsc	3,2
  7369  1223  2A28               	goto	l6769
  7370                           
  7371                           ;diag.c: 248: {;diag.c: 250: PWM_Write_Out( 66 );
  7372  1224  3042               	movlw	66
  7373  1225  319D  2571         	fcall	_PWM_Write_Out
  7374                           
  7375                           ;diag.c: 253: }
  7376  1227  0008               	return
  7377  1228                     l6769:	
  7378                           
  7379                           ;diag.c: 256: else;diag.c: 257: {;diag.c: 259: if( bool_MotorStalled )
  7380  1228  0021               	movlb	1	; select bank1
  7381  1229  0855               	movf	_bool_MotorStalled^(0+128),w
  7382  122A  1903               	btfsc	3,2
  7383  122B  2A30               	goto	l6773
  7384                           
  7385                           ;diag.c: 261: {;diag.c: 263: PWM_Write_Out( 55 );
  7386  122C  3037               	movlw	55
  7387  122D  319D  2571         	fcall	_PWM_Write_Out
  7388                           
  7389                           ;diag.c: 266: }
  7390  122F  0008               	return
  7391  1230                     l6773:	
  7392                           
  7393                           ;diag.c: 269: else;diag.c: 270: {;diag.c: 272: if( bool_HighCurrentAlarm )
  7394  1230  0021               	movlb	1	; select bank1
  7395  1231  0854               	movf	_bool_HighCurrentAlarm^(0+128),w
  7396  1232  1903               	btfsc	3,2
  7397  1233  2A38               	goto	l514
  7398                           
  7399                           ;diag.c: 274: {;diag.c: 276: PWM_Write_Out( 44 );
  7400  1234  302C               	movlw	44
  7401  1235  319D  2571         	fcall	_PWM_Write_Out
  7402                           
  7403                           ;diag.c: 278: }
  7404  1237  0008               	return
  7405  1238                     l514:	
  7406                           
  7407                           ;diag.c: 281: else;diag.c: 282: {;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  7408  1238  1EE1               	btfss	_ui8_error_Flags^(0+128),5
  7409  1239  2A3E               	goto	l516
  7410                           
  7411                           ;diag.c: 287: {;diag.c: 289: PWM_Write_Out( 77 );
  7412  123A  304D               	movlw	77
  7413  123B  319D  2571         	fcall	_PWM_Write_Out
  7414                           
  7415                           ;diag.c: 292: }
  7416  123D  0008               	return
  7417  123E                     l516:	
  7418                           
  7419                           ;diag.c: 295: else;diag.c: 296: {;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  7420  123E  1C61               	btfss	_ui8_error_Flags^(0+128),0
  7421  123F  2A44               	goto	l6781
  7422                           
  7423                           ;diag.c: 300: {;diag.c: 302: PWM_Write_Out( 22 );
  7424  1240  3016               	movlw	22
  7425  1241  319D  2571         	fcall	_PWM_Write_Out
  7426                           
  7427                           ;diag.c: 305: }
  7428  1243  0008               	return
  7429  1244                     l6781:	
  7430                           
  7431                           ;diag.c: 308: else;diag.c: 309: {;diag.c: 311: PWM_Write_Out( 11 );
  7432  1244  300B               	movlw	11
  7433  1245  319D  2571         	fcall	_PWM_Write_Out
  7434  1247  0008               	return
  7435  1248                     __end_of_SetDiagAlarm:	
  7436                           
  7437                           	psect	text20
  7438  1D71                     __ptext20:	
  7439 ;; *************** function _PWM_Write_Out *****************
  7440 ;; Defined at:
  7441 ;;		line 349 in file "../pwm.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  ui8_DutyCycl    1    wreg     unsigned char 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  ui8_DutyCycl    1    9[BANK0 ] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  1    wreg      void 
  7448 ;; Registers used:
  7449 ;;		wreg
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7455 ;;      Params:         0       0       0       0       0       0       0       0
  7456 ;;      Locals:         0       1       0       0       0       0       0       0
  7457 ;;      Temps:          0       1       0       0       0       0       0       0
  7458 ;;      Totals:         0       2       0       0       0       0       0       0
  7459 ;;Total ram usage:        2 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    3
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		_DiagInit
  7466 ;;		_SetDiagAlarm
  7467 ;;		_EOL
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           
  7472                           ;psect for function _PWM_Write_Out
  7473  1D71                     _PWM_Write_Out:	
  7474                           
  7475                           ;incstack = 0
  7476                           ; Regs used in _PWM_Write_Out: [wreg]
  7477                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
  7478  1D71  0020               	movlb	0	; select bank0
  7479  1D72  00A9               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
  7480                           
  7481                           ;pwm.c: 353: ui8_PWMoutvalue = ui8_DutyCycle_Out;
  7482  1D73  0829               	movf	PWM_Write_Out@ui8_DutyCycle_Out,w
  7483  1D74  00A8               	movwf	??_PWM_Write_Out
  7484  1D75  0828               	movf	??_PWM_Write_Out,w
  7485  1D76  0022               	movlb	2	; select bank2
  7486  1D77  00C4               	movwf	_ui8_PWMoutvalue^(0+256)
  7487  1D78  0008               	return
  7488  1D79                     __end_of_PWM_Write_Out:	
  7489                           
  7490                           	psect	text21
  7491  1620                     __ptext21:	
  7492 ;; *************** function _PWMReadDC *****************
  7493 ;; Defined at:
  7494 ;;		line 370 in file "../pwm.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;		None
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;		None
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  1    wreg      unsigned char 
  7501 ;; Registers used:
  7502 ;;		wreg, status,2, status,0, pclath, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7508 ;;      Params:         0       0       0       0       0       0       0       0
  7509 ;;      Locals:         0       0       0       0       0       0       0       0
  7510 ;;      Temps:          0       4       0       0       0       0       0       0
  7511 ;;      Totals:         0       4       0       0       0       0       0       0
  7512 ;;Total ram usage:        4 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    4
  7515 ;; This function calls:
  7516 ;;		___ltdiv
  7517 ;;		___tmul
  7518 ;; This function is called by:
  7519 ;;		_main
  7520 ;;		_EOL
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           
  7525                           ;psect for function _PWMReadDC
  7526  1620                     _PWMReadDC:	
  7527                           
  7528                           ;pwm.c: 375: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
  7532  1620  0023               	movlb	3	; select bank3
  7533  1621  0836               	movf	_ui16_PWM_Freq_In^(0+384),w
  7534  1622  0020               	movlb	0	; select bank0
  7535  1623  00B1               	movwf	___ltdiv@divisor
  7536  1624  0023               	movlb	3	; select bank3
  7537  1625  0837               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  7538  1626  0020               	movlb	0	; select bank0
  7539  1627  00B2               	movwf	___ltdiv@divisor+1
  7540  1628  01B3               	clrf	___ltdiv@divisor+2
  7541  1629  0023               	movlb	3	; select bank3
  7542  162A  086B               	movf	_ui16_Duty_Cycle_In^(0+384),w
  7543  162B  0020               	movlb	0	; select bank0
  7544  162C  00A8               	movwf	___tmul@multiplier
  7545  162D  0023               	movlb	3	; select bank3
  7546  162E  086C               	movf	(_ui16_Duty_Cycle_In+1)^(0+384),w
  7547  162F  0020               	movlb	0	; select bank0
  7548  1630  00A9               	movwf	___tmul@multiplier+1
  7549  1631  01AA               	clrf	___tmul@multiplier+2
  7550  1632  30C8               	movlw	200
  7551  1633  00AB               	movwf	___tmul@multiplicand
  7552  1634  3000               	movlw	0
  7553  1635  00AC               	movwf	___tmul@multiplicand+1
  7554  1636  3000               	movlw	0
  7555  1637  00AD               	movwf	___tmul@multiplicand+2
  7556  1638  319F  2722  3196   	fcall	___tmul
  7557  163B  0020               	movlb	0	; select bank0
  7558  163C  0828               	movf	?___tmul,w
  7559  163D  00B4               	movwf	___ltdiv@dividend
  7560  163E  0829               	movf	?___tmul+1,w
  7561  163F  00B5               	movwf	___ltdiv@dividend+1
  7562  1640  082A               	movf	?___tmul+2,w
  7563  1641  00B6               	movwf	___ltdiv@dividend+2
  7564  1642  3193  2304  3196   	fcall	___ltdiv
  7565  1645  0020               	movlb	0	; select bank0
  7566  1646  0831               	movf	?___ltdiv,w
  7567  1647  00BC               	movwf	??_PWMReadDC
  7568  1648  083C               	movf	??_PWMReadDC,w
  7569  1649  0021               	movlb	1	; select bank1
  7570  164A  00CB               	movwf	_ui8_PWMinDC_sav^(0+128)
  7571                           
  7572                           ;pwm.c: 377: if( ui8_PWMinDC_sav == 0 )
  7573  164B  084B               	movf	_ui8_PWMinDC_sav^(0+128),w
  7574  164C  1D03               	btfss	3,2
  7575  164D  2EBC               	goto	l10993
  7576                           
  7577                           ;pwm.c: 379: {;pwm.c: 383: ui16_PWMin_failCnt++;
  7578  164E  3001               	movlw	1
  7579  164F  0023               	movlb	3	; select bank3
  7580  1650  07AA               	addwf	_ui16_PWMin_failCnt^(0+384),f
  7581  1651  3000               	movlw	0
  7582  1652  3DAB               	addwfc	(_ui16_PWMin_failCnt+1)^(0+384),f
  7583                           
  7584                           ;pwm.c: 385: if( ui16_PWMin_failCnt >= 5 )
  7585  1653  3000               	movlw	0
  7586  1654  022B               	subwf	(_ui16_PWMin_failCnt+1)^(0+384),w
  7587  1655  3005               	movlw	5
  7588  1656  1903               	skipnz
  7589  1657  022A               	subwf	_ui16_PWMin_failCnt^(0+384),w
  7590  1658  1C03               	skipc
  7591  1659  2EC9               	goto	l10999
  7592                           
  7593                           ;pwm.c: 386: {;pwm.c: 392: Debounce_Tmr++;
  7594  165A  3001               	movlw	1
  7595  165B  07A6               	addwf	_Debounce_Tmr^(0+384),f
  7596  165C  3000               	movlw	0
  7597  165D  3DA7               	addwfc	(_Debounce_Tmr+1)^(0+384),f
  7598                           
  7599                           ;pwm.c: 394: if(RA4 != prev_RA4) {
  7600  165E  1003               	clrc
  7601  165F  0020               	movlb	0	; select bank0
  7602  1660  1A0C               	btfsc	12,4	;volatile
  7603  1661  1403               	setc
  7604  1662  3000               	movlw	0
  7605  1663  3D09               	addwfc	9,w
  7606  1664  00BC               	movwf	??_PWMReadDC
  7607  1665  01BD               	clrf	??_PWMReadDC+1
  7608  1666  0023               	movlb	3	; select bank3
  7609  1667  0829               	movf	(_prev_RA4+1)^(0+384),w
  7610  1668  0020               	movlb	0	; select bank0
  7611  1669  063D               	xorwf	??_PWMReadDC+1,w
  7612  166A  1D03               	skipz
  7613  166B  2E70               	goto	u9675
  7614  166C  0023               	movlb	3	; select bank3
  7615  166D  0828               	movf	_prev_RA4^(0+384),w
  7616  166E  0020               	movlb	0	; select bank0
  7617  166F  063C               	xorwf	??_PWMReadDC,w
  7618  1670                     u9675:	
  7619  1670  1903               	skipnz
  7620  1671  2E77               	goto	l10977
  7621                           
  7622                           ;pwm.c: 395: prev_Debounce_Tmr = Debounce_Tmr;
  7623  1672  0023               	movlb	3	; select bank3
  7624  1673  0827               	movf	(_Debounce_Tmr+1)^(0+384),w
  7625  1674  00A5               	movwf	(_prev_Debounce_Tmr+1)^(0+384)
  7626  1675  0826               	movf	_Debounce_Tmr^(0+384),w
  7627  1676  00A4               	movwf	_prev_Debounce_Tmr^(0+384)
  7628  1677                     l10977:	
  7629                           
  7630                           ;pwm.c: 396: };pwm.c: 397: prev_RA4 = RA4;
  7631  1677  1003               	clrc
  7632  1678  0020               	movlb	0	; select bank0
  7633  1679  1A0C               	btfsc	12,4	;volatile
  7634  167A  1403               	setc
  7635  167B  3000               	movlw	0
  7636  167C  3D09               	addwfc	9,w
  7637  167D  00BC               	movwf	??_PWMReadDC
  7638  167E  01BD               	clrf	??_PWMReadDC+1
  7639  167F  083C               	movf	??_PWMReadDC,w
  7640  1680  0023               	movlb	3	; select bank3
  7641  1681  00A8               	movwf	_prev_RA4^(0+384)
  7642  1682  0020               	movlb	0	; select bank0
  7643  1683  083D               	movf	??_PWMReadDC+1,w
  7644  1684  0023               	movlb	3	; select bank3
  7645  1685  00A9               	movwf	(_prev_RA4+1)^(0+384)
  7646                           
  7647                           ;pwm.c: 399: if((Debounce_Tmr - prev_Debounce_Tmr) > 20) {
  7648  1686  0924               	comf	_prev_Debounce_Tmr^(0+384),w
  7649  1687  0020               	movlb	0	; select bank0
  7650  1688  00BC               	movwf	??_PWMReadDC
  7651  1689  0023               	movlb	3	; select bank3
  7652  168A  0925               	comf	(_prev_Debounce_Tmr+1)^(0+384),w
  7653  168B  0020               	movlb	0	; select bank0
  7654  168C  00BD               	movwf	??_PWMReadDC+1
  7655  168D  0ABC               	incf	??_PWMReadDC,f
  7656  168E  1903               	skipnz
  7657  168F  0ABD               	incf	??_PWMReadDC+1,f
  7658  1690  0023               	movlb	3	; select bank3
  7659  1691  0826               	movf	_Debounce_Tmr^(0+384),w
  7660  1692  0020               	movlb	0	; select bank0
  7661  1693  073C               	addwf	??_PWMReadDC,w
  7662  1694  00BE               	movwf	??_PWMReadDC+2
  7663  1695  0023               	movlb	3	; select bank3
  7664  1696  0827               	movf	(_Debounce_Tmr+1)^(0+384),w
  7665  1697  0020               	movlb	0	; select bank0
  7666  1698  3D3D               	addwfc	??_PWMReadDC+1,w
  7667  1699  00BF               	movwf	??_PWMReadDC+3
  7668  169A  3000               	movlw	0
  7669  169B  023F               	subwf	??_PWMReadDC+3,w
  7670  169C  3015               	movlw	21
  7671  169D  1903               	skipnz
  7672  169E  023E               	subwf	??_PWMReadDC+2,w
  7673  169F  1C03               	skipc
  7674  16A0  2EC9               	goto	l10999
  7675                           
  7676                           ;pwm.c: 400: if(RA4 == 1)
  7677  16A1  1E0C               	btfss	12,4	;volatile
  7678  16A2  2EAF               	goto	l10985
  7679                           
  7680                           ;pwm.c: 401: {;pwm.c: 402: ui16_PWM_Freq_In = 40000;
  7681  16A3  3040               	movlw	64
  7682  16A4  0023               	movlb	3	; select bank3
  7683  16A5  00B6               	movwf	_ui16_PWM_Freq_In^(0+384)
  7684  16A6  309C               	movlw	156
  7685  16A7  00B7               	movwf	(_ui16_PWM_Freq_In^(0+384)+1)
  7686                           
  7687                           ;pwm.c: 403: ui8_Duty_Cycle_In_Ratio = 180;
  7688  16A8  30B4               	movlw	180
  7689  16A9  0020               	movlb	0	; select bank0
  7690  16AA  00BC               	movwf	??_PWMReadDC
  7691  16AB  083C               	movf	??_PWMReadDC,w
  7692  16AC  0022               	movlb	2	; select bank2
  7693  16AD  00C2               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7694                           
  7695                           ;pwm.c: 404: }
  7696  16AE  2EB6               	goto	l10989
  7697  16AF                     l10985:	
  7698                           
  7699                           ;pwm.c: 405: else;pwm.c: 406: {;pwm.c: 407: ui16_PWM_Freq_In = 40000;
  7700  16AF  3040               	movlw	64
  7701  16B0  0023               	movlb	3	; select bank3
  7702  16B1  00B6               	movwf	_ui16_PWM_Freq_In^(0+384)
  7703  16B2  309C               	movlw	156
  7704  16B3  00B7               	movwf	(_ui16_PWM_Freq_In^(0+384)+1)
  7705                           
  7706                           ;pwm.c: 408: ui8_Duty_Cycle_In_Ratio = 0;
  7707  16B4  0022               	movlb	2	; select bank2
  7708  16B5  01C2               	clrf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7709  16B6                     l10989:	
  7710                           
  7711                           ;pwm.c: 409: };pwm.c: 410: Debounce_Tmr = 0;
  7712  16B6  0023               	movlb	3	; select bank3
  7713  16B7  01A6               	clrf	_Debounce_Tmr^(0+384)
  7714  16B8  01A7               	clrf	(_Debounce_Tmr+1)^(0+384)
  7715                           
  7716                           ;pwm.c: 411: prev_Debounce_Tmr = 0;
  7717  16B9  01A4               	clrf	_prev_Debounce_Tmr^(0+384)
  7718  16BA  01A5               	clrf	(_prev_Debounce_Tmr+1)^(0+384)
  7719                           
  7720                           ;pwm.c: 412: };pwm.c: 414: };pwm.c: 418: }
  7721  16BB  2EC9               	goto	l10999
  7722  16BC                     l10993:	
  7723                           
  7724                           ;pwm.c: 421: else;pwm.c: 422: {;pwm.c: 426: ui16_PWMin_failCnt = 0;
  7725  16BC  0023               	movlb	3	; select bank3
  7726  16BD  01AA               	clrf	_ui16_PWMin_failCnt^(0+384)
  7727  16BE  01AB               	clrf	(_ui16_PWMin_failCnt+1)^(0+384)
  7728                           
  7729                           ;pwm.c: 429: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  7730  16BF  0021               	movlb	1	; select bank1
  7731  16C0  084B               	movf	_ui8_PWMinDC_sav^(0+128),w
  7732  16C1  0020               	movlb	0	; select bank0
  7733  16C2  00BC               	movwf	??_PWMReadDC
  7734  16C3  083C               	movf	??_PWMReadDC,w
  7735  16C4  0022               	movlb	2	; select bank2
  7736  16C5  00C2               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  7737                           
  7738                           ;pwm.c: 431: ui16_Duty_Cycle_In = 0;
  7739  16C6  0023               	movlb	3	; select bank3
  7740  16C7  01EB               	clrf	_ui16_Duty_Cycle_In^(0+384)
  7741  16C8  01EC               	clrf	(_ui16_Duty_Cycle_In+1)^(0+384)
  7742  16C9                     l10999:	
  7743                           
  7744                           ;pwm.c: 433: };pwm.c: 436: return ( 200 - ui8_Duty_Cycle_In_Ratio );
  7745  16C9  0022               	movlb	2	; select bank2
  7746  16CA  0342               	decf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
  7747  16CB  3AFF               	xorlw	255
  7748  16CC  3EC8               	addlw	200
  7749  16CD  0008               	return
  7750  16CE                     __end_of_PWMReadDC:	
  7751                           
  7752                           	psect	text22
  7753  1F22                     __ptext22:	
  7754 ;; *************** function ___tmul *****************
  7755 ;; Defined at:
  7756 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul24.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  multiplier      3    8[BANK0 ] unsigned um
  7759 ;;  multiplicand    3   11[BANK0 ] unsigned um
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  product         3   14[BANK0 ] unsigned um
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  3    8[BANK0 ] unsigned um
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7771 ;;      Params:         0       6       0       0       0       0       0       0
  7772 ;;      Locals:         0       3       0       0       0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0       0       0       0
  7774 ;;      Totals:         0       9       0       0       0       0       0       0
  7775 ;;Total ram usage:        9 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    3
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		_PWMReadDC
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           
  7786                           ;psect for function ___tmul
  7787  1F22                     ___tmul:	
  7788                           
  7789                           ;incstack = 0
  7790                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  7791  1F22  3000               	movlw	0
  7792  1F23  0020               	movlb	0	; select bank0
  7793  1F24  00AE               	movwf	___tmul@product
  7794  1F25  3000               	movlw	0
  7795  1F26  00AF               	movwf	___tmul@product+1
  7796  1F27  3000               	movlw	0
  7797  1F28  00B0               	movwf	___tmul@product+2
  7798  1F29                     l6133:	
  7799  1F29  1C28               	btfss	___tmul@multiplier,0
  7800  1F2A  2F31               	goto	l6137
  7801  1F2B  082B               	movf	___tmul@multiplicand,w
  7802  1F2C  07AE               	addwf	___tmul@product,f
  7803  1F2D  082C               	movf	___tmul@multiplicand+1,w
  7804  1F2E  3DAF               	addwfc	___tmul@product+1,f
  7805  1F2F  082D               	movf	___tmul@multiplicand+2,w
  7806  1F30  3DB0               	addwfc	___tmul@product+2,f
  7807  1F31                     l6137:	
  7808  1F31  3001               	movlw	1
  7809  1F32                     u3335:	
  7810  1F32  35AB               	lslf	___tmul@multiplicand,f
  7811  1F33  0DAC               	rlf	___tmul@multiplicand+1,f
  7812  1F34  0DAD               	rlf	___tmul@multiplicand+2,f
  7813  1F35  0B89               	decfsz	9,f
  7814  1F36  2F32               	goto	u3335
  7815  1F37  3001               	movlw	1
  7816  1F38                     u3345:	
  7817  1F38  36AA               	lsrf	___tmul@multiplier+2,f
  7818  1F39  0CA9               	rrf	___tmul@multiplier+1,f
  7819  1F3A  0CA8               	rrf	___tmul@multiplier,f
  7820  1F3B  0B89               	decfsz	9,f
  7821  1F3C  2F38               	goto	u3345
  7822  1F3D  082A               	movf	___tmul@multiplier+2,w
  7823  1F3E  0429               	iorwf	___tmul@multiplier+1,w
  7824  1F3F  0428               	iorwf	___tmul@multiplier,w
  7825  1F40  1D03               	skipz
  7826  1F41  2F29               	goto	l6133
  7827  1F42  082E               	movf	___tmul@product,w
  7828  1F43  00A8               	movwf	?___tmul
  7829  1F44  082F               	movf	___tmul@product+1,w
  7830  1F45  00A9               	movwf	?___tmul+1
  7831  1F46  0830               	movf	___tmul@product+2,w
  7832  1F47  00AA               	movwf	?___tmul+2
  7833  1F48  0008               	return
  7834  1F49                     __end_of___tmul:	
  7835                           
  7836                           	psect	text23
  7837  1304                     __ptext23:	
  7838 ;; *************** function ___ltdiv *****************
  7839 ;; Defined at:
  7840 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltdiv.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  divisor         3   17[BANK0 ] unsigned um
  7843 ;;  dividend        3   20[BANK0 ] unsigned um
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  quotient        3   24[BANK0 ] unsigned um
  7846 ;;  counter         1   27[BANK0 ] unsigned char 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;                  3   17[BANK0 ] unsigned um
  7849 ;; Registers used:
  7850 ;;		wreg, status,2, status,0
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7856 ;;      Params:         0       6       0       0       0       0       0       0
  7857 ;;      Locals:         0       4       0       0       0       0       0       0
  7858 ;;      Temps:          0       1       0       0       0       0       0       0
  7859 ;;      Totals:         0      11       0       0       0       0       0       0
  7860 ;;Total ram usage:       11 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; Hardware stack levels required when called:    3
  7863 ;; This function calls:
  7864 ;;		Nothing
  7865 ;; This function is called by:
  7866 ;;		_PWMReadDC
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           
  7871                           ;psect for function ___ltdiv
  7872  1304                     ___ltdiv:	
  7873                           
  7874                           ;incstack = 0
  7875                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  7876  1304  3000               	movlw	0
  7877  1305  0020               	movlb	0	; select bank0
  7878  1306  00B8               	movwf	___ltdiv@quotient
  7879  1307  3000               	movlw	0
  7880  1308  00B9               	movwf	___ltdiv@quotient+1
  7881  1309  3000               	movlw	0
  7882  130A  00BA               	movwf	___ltdiv@quotient+2
  7883  130B  0833               	movf	___ltdiv@divisor+2,w
  7884  130C  0432               	iorwf	___ltdiv@divisor+1,w
  7885  130D  0431               	iorwf	___ltdiv@divisor,w
  7886  130E  1903               	skipnz
  7887  130F  2B42               	goto	l10691
  7888  1310  01BB               	clrf	___ltdiv@counter
  7889  1311  0ABB               	incf	___ltdiv@counter,f
  7890  1312                     l10677:	
  7891  1312  1BB3               	btfsc	___ltdiv@divisor+2,7
  7892  1313  2B1F               	goto	l10679
  7893  1314  3001               	movlw	1
  7894  1315                     u9265:	
  7895  1315  35B1               	lslf	___ltdiv@divisor,f
  7896  1316  0DB2               	rlf	___ltdiv@divisor+1,f
  7897  1317  0DB3               	rlf	___ltdiv@divisor+2,f
  7898  1318  0B89               	decfsz	9,f
  7899  1319  2B15               	goto	u9265
  7900  131A  3001               	movlw	1
  7901  131B  00B7               	movwf	??___ltdiv
  7902  131C  0837               	movf	??___ltdiv,w
  7903  131D  07BB               	addwf	___ltdiv@counter,f
  7904  131E  2B12               	goto	l10677
  7905  131F                     l10679:	
  7906  131F  3001               	movlw	1
  7907  1320                     u9285:	
  7908  1320  35B8               	lslf	___ltdiv@quotient,f
  7909  1321  0DB9               	rlf	___ltdiv@quotient+1,f
  7910  1322  0DBA               	rlf	___ltdiv@quotient+2,f
  7911  1323  0B89               	decfsz	9,f
  7912  1324  2B20               	goto	u9285
  7913  1325  0833               	movf	___ltdiv@divisor+2,w
  7914  1326  0236               	subwf	___ltdiv@dividend+2,w
  7915  1327  1D03               	skipz
  7916  1328  2B2F               	goto	u9295
  7917  1329  0832               	movf	___ltdiv@divisor+1,w
  7918  132A  0235               	subwf	___ltdiv@dividend+1,w
  7919  132B  1D03               	skipz
  7920  132C  2B2F               	goto	u9295
  7921  132D  0831               	movf	___ltdiv@divisor,w
  7922  132E  0234               	subwf	___ltdiv@dividend,w
  7923  132F                     u9295:	
  7924  132F  1C03               	skipc
  7925  1330  2B38               	goto	l10687
  7926  1331  0831               	movf	___ltdiv@divisor,w
  7927  1332  02B4               	subwf	___ltdiv@dividend,f
  7928  1333  0832               	movf	___ltdiv@divisor+1,w
  7929  1334  3BB5               	subwfb	___ltdiv@dividend+1,f
  7930  1335  0833               	movf	___ltdiv@divisor+2,w
  7931  1336  3BB6               	subwfb	___ltdiv@dividend+2,f
  7932  1337  1438               	bsf	___ltdiv@quotient,0
  7933  1338                     l10687:	
  7934  1338  3001               	movlw	1
  7935  1339                     u9305:	
  7936  1339  36B3               	lsrf	___ltdiv@divisor+2,f
  7937  133A  0CB2               	rrf	___ltdiv@divisor+1,f
  7938  133B  0CB1               	rrf	___ltdiv@divisor,f
  7939  133C  0B89               	decfsz	9,f
  7940  133D  2B39               	goto	u9305
  7941  133E  3001               	movlw	1
  7942  133F  02BB               	subwf	___ltdiv@counter,f
  7943  1340  1D03               	btfss	3,2
  7944  1341  2B1F               	goto	l10679
  7945  1342                     l10691:	
  7946  1342  0838               	movf	___ltdiv@quotient,w
  7947  1343  00B1               	movwf	?___ltdiv
  7948  1344  0839               	movf	___ltdiv@quotient+1,w
  7949  1345  00B2               	movwf	?___ltdiv+1
  7950  1346  083A               	movf	___ltdiv@quotient+2,w
  7951  1347  00B3               	movwf	?___ltdiv+2
  7952  1348  0008               	return
  7953  1349                     __end_of___ltdiv:	
  7954                           
  7955                           	psect	text24
  7956  1DA2                     __ptext24:	
  7957 ;; *************** function _InitMotorStop *****************
  7958 ;; Defined at:
  7959 ;;		line 2222 in file "../bldc.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;		None
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;		None
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      void 
  7966 ;; Registers used:
  7967 ;;		status,2
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7973 ;;      Params:         0       0       0       0       0       0       0       0
  7974 ;;      Locals:         0       0       0       0       0       0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0       0
  7976 ;;      Totals:         0       0       0       0       0       0       0       0
  7977 ;;Total ram usage:        0 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    3
  7980 ;; This function calls:
  7981 ;;		Nothing
  7982 ;; This function is called by:
  7983 ;;		_main
  7984 ;;		_EOL
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           
  7989                           ;psect for function _InitMotorStop
  7990  1DA2                     _InitMotorStop:	
  7991                           
  7992                           ;bldc.c: 2227: if( 1 == MotorFlags.bits.B6 )
  7993                           
  7994                           ;incstack = 0
  7995                           ; Regs used in _InitMotorStop: [status,2]
  7996  1DA2  0020               	movlb	0	; select bank0
  7997  1DA3  1F5A               	btfss	_MotorFlags,6
  7998  1DA4  0008               	return
  7999                           
  8000                           ;bldc.c: 2230: {;bldc.c: 2232: LATC1 = 0;
  8001  1DA5  0022               	movlb	2	; select bank2
  8002  1DA6  108E               	bcf	14,1	;volatile
  8003                           
  8004                           ;bldc.c: 2233: LATC3 = 0;
  8005  1DA7  118E               	bcf	14,3	;volatile
  8006                           
  8007                           ;bldc.c: 2234: LATC4 = 0;
  8008  1DA8  120E               	bcf	14,4	;volatile
  8009                           
  8010                           ;bldc.c: 2236: CCP1ASE = 0;
  8011  1DA9  0025               	movlb	5	; select bank5
  8012  1DAA  1395               	bcf	21,7	;volatile
  8013                           
  8014                           ;bldc.c: 2237: CCPR1L = 0;
  8015  1DAB  0191               	clrf	17	;volatile
  8016                           
  8017                           ;bldc.c: 2238: MotorFlags.bits.B6 = 0;
  8018  1DAC  0020               	movlb	0	; select bank0
  8019  1DAD  135A               	bcf	_MotorFlags,6
  8020                           
  8021                           ;bldc.c: 2239: MotorFlags.bits.B7 = 0;
  8022  1DAE  13DA               	bcf	_MotorFlags,7
  8023  1DAF  0008               	return
  8024  1DB0                     __end_of_InitMotorStop:	
  8025                           
  8026                           	psect	text25
  8027  1D81                     __ptext25:	
  8028 ;; *************** function _Get_Analog_Value *****************
  8029 ;; Defined at:
  8030 ;;		line 442 in file "../adc.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;		None
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8044 ;;      Params:         0       0       0       0       0       0       0       0
  8045 ;;      Locals:         0       0       0       0       0       0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0       0
  8047 ;;      Totals:         0       0       0       0       0       0       0       0
  8048 ;;Total ram usage:        0 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    4
  8051 ;; This function calls:
  8052 ;;		_FILTER_IPhase
  8053 ;;		_FILTER_Temp
  8054 ;;		_FILTER_Ubat
  8055 ;; This function is called by:
  8056 ;;		_main
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _Get_Analog_Value
  8062  1D81                     _Get_Analog_Value:	
  8063                           
  8064                           ;adc.c: 446: FILTER_Ubat( );
  8065                           
  8066                           ;incstack = 0
  8067                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8068  1D81  3194  2402  319D   	fcall	_FILTER_Ubat
  8069                           
  8070                           ;adc.c: 447: FILTER_IPhase( );
  8071  1D84  3191  21DD  319D   	fcall	_FILTER_IPhase
  8072                           
  8073                           ;adc.c: 448: FILTER_Temp( );
  8074  1D87  3192  2248         	fcall	_FILTER_Temp
  8075  1D89  0008               	return
  8076  1D8A                     __end_of_Get_Analog_Value:	
  8077                           
  8078                           	psect	text26
  8079  1402                     __ptext26:	
  8080 ;; *************** function _FILTER_Ubat *****************
  8081 ;; Defined at:
  8082 ;;		line 264 in file "../adc.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      void 
  8089 ;; Registers used:
  8090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8096 ;;      Params:         0       0       0       0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0       0
  8098 ;;      Temps:          0      12       0       0       0       0       0       0
  8099 ;;      Totals:         0      12       0       0       0       0       0       0
  8100 ;;Total ram usage:       12 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    3
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_Get_Analog_Value
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           
  8111                           ;psect for function _FILTER_Ubat
  8112  1402                     _FILTER_Ubat:	
  8113                           
  8114                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  8118  1402  0020               	movlb	0	; select bank0
  8119  1403  355B               	lslf	_windowPtr1,w
  8120  1404  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  8121  1405  0086               	movwf	6
  8122  1406  3002               	movlw	2	; select bank4/5
  8123  1407  0087               	movwf	7
  8124  1408  085C               	movf	_ui16_Ubat_bldc,w	;volatile
  8125  1409  3FC0               	movwi [0]fsr1
  8126  140A  085D               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8127  140B  3FC1               	movwi [1]fsr1
  8128                           
  8129                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  8130  140C  300E               	movlw	14
  8131  140D  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  8132  140E  0086               	movwf	6
  8133  140F  3002               	movlw	2	; select bank4/5
  8134  1410  0087               	movwf	7
  8135  1411  300C               	movlw	12
  8136  1412  3E30               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  8137  1413  0084               	movwf	4
  8138  1414  3002               	movlw	2	; select bank4/5
  8139  1415  0085               	movwf	5
  8140  1416  0024               	movlb	4	; select bank4
  8141  1417  0834               	movf	(_inputArray1^(0+512)+4),w
  8142  1418  0732               	addwf	(_inputArray1^(0+512)+2),w
  8143  1419  0020               	movlb	0	; select bank0
  8144  141A  00A8               	movwf	??_FILTER_Ubat
  8145  141B  0024               	movlb	4	; select bank4
  8146  141C  0835               	movf	((_inputArray1+1)^(0+512)+4),w
  8147  141D  3D33               	addwfc	((_inputArray1+1)^(0+512)+2),w
  8148  141E  0020               	movlb	0	; select bank0
  8149  141F  00A9               	movwf	??_FILTER_Ubat+1
  8150  1420  0024               	movlb	4	; select bank4
  8151  1421  0836               	movf	(_inputArray1^(0+512)+6),w
  8152  1422  0020               	movlb	0	; select bank0
  8153  1423  0728               	addwf	??_FILTER_Ubat,w
  8154  1424  00AA               	movwf	??_FILTER_Ubat+2
  8155  1425  0024               	movlb	4	; select bank4
  8156  1426  0837               	movf	((_inputArray1+1)^(0+512)+6),w
  8157  1427  0020               	movlb	0	; select bank0
  8158  1428  3D29               	addwfc	??_FILTER_Ubat+1,w
  8159  1429  00AB               	movwf	??_FILTER_Ubat+3
  8160  142A  0024               	movlb	4	; select bank4
  8161  142B  0838               	movf	(_inputArray1^(0+512)+8),w
  8162  142C  0020               	movlb	0	; select bank0
  8163  142D  072A               	addwf	??_FILTER_Ubat+2,w
  8164  142E  00AC               	movwf	??_FILTER_Ubat+4
  8165  142F  0024               	movlb	4	; select bank4
  8166  1430  0839               	movf	((_inputArray1+1)^(0+512)+8),w
  8167  1431  0020               	movlb	0	; select bank0
  8168  1432  3D2B               	addwfc	??_FILTER_Ubat+3,w
  8169  1433  00AD               	movwf	??_FILTER_Ubat+5
  8170  1434  0024               	movlb	4	; select bank4
  8171  1435  083A               	movf	(_inputArray1^(0+512)+10),w
  8172  1436  0020               	movlb	0	; select bank0
  8173  1437  072C               	addwf	??_FILTER_Ubat+4,w
  8174  1438  00AE               	movwf	??_FILTER_Ubat+6
  8175  1439  0024               	movlb	4	; select bank4
  8176  143A  083B               	movf	((_inputArray1+1)^(0+512)+10),w
  8177  143B  0020               	movlb	0	; select bank0
  8178  143C  3D2D               	addwfc	??_FILTER_Ubat+5,w
  8179  143D  00AF               	movwf	??_FILTER_Ubat+7
  8180  143E  3F00               	moviw [0]fsr0
  8181  143F  072E               	addwf	??_FILTER_Ubat+6,w
  8182  1440  00B0               	movwf	??_FILTER_Ubat+8
  8183  1441  3F01               	moviw [1]fsr0
  8184  1442  3D2F               	addwfc	??_FILTER_Ubat+7,w
  8185  1443  00B1               	movwf	??_FILTER_Ubat+9
  8186  1444  3F40               	moviw [0]fsr1
  8187  1445  0730               	addwf	??_FILTER_Ubat+8,w
  8188  1446  00B2               	movwf	??_FILTER_Ubat+10
  8189  1447  3F41               	moviw [1]fsr1
  8190  1448  3D31               	addwfc	??_FILTER_Ubat+9,w
  8191  1449  00B3               	movwf	??_FILTER_Ubat+11
  8192  144A  0024               	movlb	4	; select bank4
  8193  144B  0830               	movf	_inputArray1^(0+512),w
  8194  144C  0020               	movlb	0	; select bank0
  8195  144D  0732               	addwf	??_FILTER_Ubat+10,w
  8196  144E  0023               	movlb	3	; select bank3
  8197  144F  00C4               	movwf	_filter1^(0+384)
  8198  1450  0024               	movlb	4	; select bank4
  8199  1451  0831               	movf	(_inputArray1+1)^(0+512),w
  8200  1452  0020               	movlb	0	; select bank0
  8201  1453  3D33               	addwfc	??_FILTER_Ubat+11,w
  8202  1454  0023               	movlb	3	; select bank3
  8203  1455  00C5               	movwf	(_filter1+1)^(0+384)
  8204                           
  8205                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  8206  1456  0845               	movf	(_filter1+1)^(0+384),w
  8207  1457  0020               	movlb	0	; select bank0
  8208  1458  00A9               	movwf	??_FILTER_Ubat+1
  8209  1459  0023               	movlb	3	; select bank3
  8210  145A  0844               	movf	_filter1^(0+384),w
  8211  145B  0020               	movlb	0	; select bank0
  8212  145C  00A8               	movwf	??_FILTER_Ubat
  8213  145D  36A9               	lsrf	??_FILTER_Ubat+1,f
  8214  145E  0CA8               	rrf	??_FILTER_Ubat,f
  8215  145F  36A9               	lsrf	??_FILTER_Ubat+1,f
  8216  1460  0CA8               	rrf	??_FILTER_Ubat,f
  8217  1461  36A9               	lsrf	??_FILTER_Ubat+1,f
  8218  1462  0CA8               	rrf	??_FILTER_Ubat,f
  8219  1463  0828               	movf	??_FILTER_Ubat,w
  8220  1464  0023               	movlb	3	; select bank3
  8221  1465  00CE               	movwf	_ui16_fir_Bat_mittel^(0+384)
  8222  1466  0020               	movlb	0	; select bank0
  8223  1467  0829               	movf	??_FILTER_Ubat+1,w
  8224  1468  0023               	movlb	3	; select bank3
  8225  1469  00CF               	movwf	(_ui16_fir_Bat_mittel+1)^(0+384)
  8226                           
  8227                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  8228  146A  3001               	movlw	1
  8229  146B  0020               	movlb	0	; select bank0
  8230  146C  00A8               	movwf	??_FILTER_Ubat
  8231  146D  0828               	movf	??_FILTER_Ubat,w
  8232  146E  07DB               	addwf	_windowPtr1,f
  8233  146F  3008               	movlw	8
  8234  1470  025B               	subwf	_windowPtr1,w
  8235  1471  1C03               	skipc
  8236  1472  0008               	return
  8237                           
  8238                           ;adc.c: 277: {;adc.c: 279: windowPtr1 = 0;
  8239  1473  01DB               	clrf	_windowPtr1
  8240                           
  8241                           ;adc.c: 280: filter1 = 0;
  8242  1474  0023               	movlb	3	; select bank3
  8243  1475  01C4               	clrf	_filter1^(0+384)
  8244  1476  01C5               	clrf	(_filter1+1)^(0+384)
  8245  1477  0008               	return
  8246  1478                     __end_of_FILTER_Ubat:	
  8247                           
  8248                           	psect	text27
  8249  1248                     __ptext27:	
  8250 ;; *************** function _FILTER_Temp *****************
  8251 ;; Defined at:
  8252 ;;		line 400 in file "../adc.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;		None
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;		None
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  1    wreg      void 
  8259 ;; Registers used:
  8260 ;;		wreg, status,2, status,0
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8266 ;;      Params:         0       0       0       0       0       0       0       0
  8267 ;;      Locals:         0       0       0       0       0       0       0       0
  8268 ;;      Temps:          0       2       0       0       0       0       0       0
  8269 ;;      Totals:         0       2       0       0       0       0       0       0
  8270 ;;Total ram usage:        2 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    3
  8273 ;; This function calls:
  8274 ;;		Nothing
  8275 ;; This function is called by:
  8276 ;;		_Get_Analog_Value
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function _FILTER_Temp
  8282  1248                     _FILTER_Temp:	
  8283                           
  8284                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
  8285                           
  8286                           ;incstack = 0
  8287                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
  8288  1248  0023               	movlb	3	; select bank3
  8289  1249  0852               	movf	_ui16_NTC_Temp_bldc^(0+384),w
  8290  124A  0022               	movlb	2	; select bank2
  8291  124B  0729               	addwf	_filterTempNTC^(0+256),w
  8292  124C  00A9               	movwf	_filterTempNTC^(0+256)
  8293  124D  0023               	movlb	3	; select bank3
  8294  124E  0853               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
  8295  124F  0022               	movlb	2	; select bank2
  8296  1250  3D2A               	addwfc	(_filterTempNTC+1)^(0+256),w
  8297  1251  00AA               	movwf	(_filterTempNTC+1)^(0+256)
  8298                           
  8299                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
  8300  1252  082A               	movf	(_filterTempNTC+1)^(0+256),w
  8301  1253  0020               	movlb	0	; select bank0
  8302  1254  00A9               	movwf	??_FILTER_Temp+1
  8303  1255  0022               	movlb	2	; select bank2
  8304  1256  0829               	movf	_filterTempNTC^(0+256),w
  8305  1257  0020               	movlb	0	; select bank0
  8306  1258  00A8               	movwf	??_FILTER_Temp
  8307  1259  3006               	movlw	6
  8308  125A                     u3005:	
  8309  125A  36A9               	lsrf	??_FILTER_Temp+1,f
  8310  125B  0CA8               	rrf	??_FILTER_Temp,f
  8311  125C  0B89               	decfsz	9,f
  8312  125D  2A5A               	goto	u3005
  8313  125E  0828               	movf	??_FILTER_Temp,w
  8314  125F  0023               	movlb	3	; select bank3
  8315  1260  00C8               	movwf	_ui16_NTC_Temp_bldc_mean^(0+384)
  8316  1261  0020               	movlb	0	; select bank0
  8317  1262  0829               	movf	??_FILTER_Temp+1,w
  8318  1263  0023               	movlb	3	; select bank3
  8319  1264  00C9               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+384)
  8320                           
  8321                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
  8322  1265  0948               	comf	_ui16_NTC_Temp_bldc_mean^(0+384),w
  8323  1266  0020               	movlb	0	; select bank0
  8324  1267  00A8               	movwf	??_FILTER_Temp
  8325  1268  0023               	movlb	3	; select bank3
  8326  1269  0949               	comf	(_ui16_NTC_Temp_bldc_mean+1)^(0+384),w
  8327  126A  0020               	movlb	0	; select bank0
  8328  126B  00A9               	movwf	??_FILTER_Temp+1
  8329  126C  0AA8               	incf	??_FILTER_Temp,f
  8330  126D  1903               	skipnz
  8331  126E  0AA9               	incf	??_FILTER_Temp+1,f
  8332  126F  0022               	movlb	2	; select bank2
  8333  1270  0829               	movf	_filterTempNTC^(0+256),w
  8334  1271  0020               	movlb	0	; select bank0
  8335  1272  0728               	addwf	??_FILTER_Temp,w
  8336  1273  0022               	movlb	2	; select bank2
  8337  1274  00A9               	movwf	_filterTempNTC^(0+256)
  8338  1275  082A               	movf	(_filterTempNTC+1)^(0+256),w
  8339  1276  0020               	movlb	0	; select bank0
  8340  1277  3D29               	addwfc	??_FILTER_Temp+1,w
  8341  1278  0022               	movlb	2	; select bank2
  8342  1279  00AA               	movwf	(_filterTempNTC+1)^(0+256)
  8343                           
  8344                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
  8345  127A  0023               	movlb	3	; select bank3
  8346  127B  0850               	movf	_ui16_Temp_cal^(0+384),w
  8347  127C  0748               	addwf	_ui16_NTC_Temp_bldc_mean^(0+384),w
  8348  127D  00C0               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
  8349  127E  0851               	movf	(_ui16_Temp_cal+1)^(0+384),w
  8350  127F  3D49               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+384),w
  8351  1280  00C1               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
  8352  1281  0008               	return
  8353  1282                     __end_of_FILTER_Temp:	
  8354                           
  8355                           	psect	text28
  8356  11DD                     __ptext28:	
  8357 ;; *************** function _FILTER_IPhase *****************
  8358 ;; Defined at:
  8359 ;;		line 357 in file "../adc.c"
  8360 ;; Parameters:    Size  Location     Type
  8361 ;;		None
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;		None
  8364 ;; Return value:  Size  Location     Type
  8365 ;;                  1    wreg      void 
  8366 ;; Registers used:
  8367 ;;		wreg, status,2, status,0
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8373 ;;      Params:         0       0       0       0       0       0       0       0
  8374 ;;      Locals:         0       0       0       0       0       0       0       0
  8375 ;;      Temps:          0       2       0       0       0       0       0       0
  8376 ;;      Totals:         0       2       0       0       0       0       0       0
  8377 ;;Total ram usage:        2 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; Hardware stack levels required when called:    3
  8380 ;; This function calls:
  8381 ;;		Nothing
  8382 ;; This function is called by:
  8383 ;;		_Get_Analog_Value
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           
  8388                           ;psect for function _FILTER_IPhase
  8389  11DD                     _FILTER_IPhase:	
  8390                           
  8391                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
  8392                           
  8393                           ;incstack = 0
  8394                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
  8395  11DD  0022               	movlb	2	; select bank2
  8396  11DE  082D               	movf	_filter3^(0+256),w
  8397  11DF  0023               	movlb	3	; select bank3
  8398  11E0  0754               	addwf	_ui16_IPhase1_bldc^(0+384),w	;volatile
  8399  11E1  0022               	movlb	2	; select bank2
  8400  11E2  00AD               	movwf	_filter3^(0+256)
  8401  11E3  082E               	movf	(_filter3+1)^(0+256),w
  8402  11E4  0023               	movlb	3	; select bank3
  8403  11E5  3D55               	addwfc	(_ui16_IPhase1_bldc+1)^(0+384),w	;volatile
  8404  11E6  0022               	movlb	2	; select bank2
  8405  11E7  00AE               	movwf	(_filter3+1)^(0+256)
  8406                           
  8407                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
  8408  11E8  082E               	movf	(_filter3+1)^(0+256),w
  8409  11E9  0020               	movlb	0	; select bank0
  8410  11EA  00A9               	movwf	??_FILTER_IPhase+1
  8411  11EB  0022               	movlb	2	; select bank2
  8412  11EC  082D               	movf	_filter3^(0+256),w
  8413  11ED  0020               	movlb	0	; select bank0
  8414  11EE  00A8               	movwf	??_FILTER_IPhase
  8415  11EF  3006               	movlw	6
  8416  11F0                     u2995:	
  8417  11F0  36A9               	lsrf	??_FILTER_IPhase+1,f
  8418  11F1  0CA8               	rrf	??_FILTER_IPhase,f
  8419  11F2  0B89               	decfsz	9,f
  8420  11F3  29F0               	goto	u2995
  8421  11F4  0828               	movf	??_FILTER_IPhase,w
  8422  11F5  0023               	movlb	3	; select bank3
  8423  11F6  00CC               	movwf	_ui16_fir_IPhase_mean^(0+384)
  8424  11F7  0020               	movlb	0	; select bank0
  8425  11F8  0829               	movf	??_FILTER_IPhase+1,w
  8426  11F9  0023               	movlb	3	; select bank3
  8427  11FA  00CD               	movwf	(_ui16_fir_IPhase_mean+1)^(0+384)
  8428                           
  8429                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
  8430  11FB  094C               	comf	_ui16_fir_IPhase_mean^(0+384),w
  8431  11FC  0020               	movlb	0	; select bank0
  8432  11FD  00A8               	movwf	??_FILTER_IPhase
  8433  11FE  0023               	movlb	3	; select bank3
  8434  11FF  094D               	comf	(_ui16_fir_IPhase_mean+1)^(0+384),w
  8435  1200  0020               	movlb	0	; select bank0
  8436  1201  00A9               	movwf	??_FILTER_IPhase+1
  8437  1202  0AA8               	incf	??_FILTER_IPhase,f
  8438  1203  1903               	skipnz
  8439  1204  0AA9               	incf	??_FILTER_IPhase+1,f
  8440  1205  0022               	movlb	2	; select bank2
  8441  1206  082D               	movf	_filter3^(0+256),w
  8442  1207  0020               	movlb	0	; select bank0
  8443  1208  0728               	addwf	??_FILTER_IPhase,w
  8444  1209  0022               	movlb	2	; select bank2
  8445  120A  00AD               	movwf	_filter3^(0+256)
  8446  120B  082E               	movf	(_filter3+1)^(0+256),w
  8447  120C  0020               	movlb	0	; select bank0
  8448  120D  3D29               	addwfc	??_FILTER_IPhase+1,w
  8449  120E  0022               	movlb	2	; select bank2
  8450  120F  00AE               	movwf	(_filter3+1)^(0+256)
  8451  1210  0008               	return
  8452  1211                     __end_of_FILTER_IPhase:	
  8453                           
  8454                           	psect	text29
  8455  0078                     __ptext29:	
  8456 ;; *************** function _BVH2_Appl_Layer *****************
  8457 ;; Defined at:
  8458 ;;		line 333 in file "../T_Link/BVH2_Appl_Layer.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;		None
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  Sb3_Sum1        2   25[BANK5 ] short 
  8463 ;;  Sb3_Product1    2   17[BANK5 ] unsigned short 
  8464 ;;  Sb4_PI_sum      2   29[BANK5 ] short 
  8465 ;;  Sb2_Switch5     2   23[BANK5 ] unsigned short 
  8466 ;;  Sb2_Error       2   15[BANK5 ] short 
  8467 ;;  Sb2_Switch2     2    8[BANK5 ] unsigned short 
  8468 ;;  Sb1_Logical_    1   28[BANK5 ] unsigned char 
  8469 ;;  Sb1_Logical_    1   27[BANK5 ] unsigned char 
  8470 ;;  Sb2_Logical_    1   22[BANK5 ] unsigned char 
  8471 ;;  Sb1_Logical_    1   21[BANK5 ] unsigned char 
  8472 ;;  Sb1_Logical_    1   20[BANK5 ] unsigned char 
  8473 ;;  Cb24_Reset      1   19[BANK5 ] unsigned char 
  8474 ;; Return value:  Size  Location     Type
  8475 ;;                  1    wreg      void 
  8476 ;; Registers used:
  8477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8483 ;;      Params:         0       0       0       0       0       0       0       0
  8484 ;;      Locals:         0       0       0       0       0       0      31       0
  8485 ;;      Temps:          0      16       0       0       0       0       0       0
  8486 ;;      Totals:         0      16       0       0       0       0      31       0
  8487 ;;Total ram usage:       47 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:    4
  8490 ;; This function calls:
  8491 ;;		_Cb1_Current_An___High_node_fcn1
  8492 ;;		_Cb34_PWM_Detection_node_fcn1
  8493 ;;		_Cb44_Pic_etat_monitor_node_fcn1
  8494 ;;		_Cb56_UbatHandling_node_fcn2
  8495 ;;		___aldiv
  8496 ;;		___lmul
  8497 ;;		___wmul
  8498 ;; This function is called by:
  8499 ;;		_main
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _BVH2_Appl_Layer
  8505  0078                     _BVH2_Appl_Layer:	
  8506                           
  8507                           ;BVH2_Appl_Layer.c: 336: static UInt16 Cb14_StateCnt = 0;;BVH2_Appl_Layer.c: 337: static
      +                           UInt16 Cb19_Counter = 0;;BVH2_Appl_Layer.c: 338: static UInt16 Cb24_BadCnt = 0;;BVH2_Ap
      +                          pl_Layer.c: 339: static UInt16 Cb24_StateCnt = 0;;BVH2_Appl_Layer.c: 340: static UInt8 C
      +                          b24_RestartCounter = 0;;BVH2_Appl_Layer.c: 341: static UInt8 Cb51_Counter = 0;;BVH2_Appl
      +                          _Layer.c: 342: static UInt8 Cb9_StateCnt = 0;;BVH2_Appl_Layer.c: 344: static struct tag_
      +                          SIBFS_Current_Analysis_low_b_tp SIBFS_Current_Analysis_low_b = {;BVH2_Appl_Layer.c: 345:
      +                           0 ,
  8508                           
  8509                           ;incstack = 0
  8510                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8511  0078  28DF               	goto	l9219
  8512  0079                     l9143:	
  8513                           ;BVH2_Appl_Layer.c: 415: case (UInt8)4: {
  8514                           
  8515                           
  8516                           ;BVH2_Appl_Layer.c: 417: if (Cb44_StateCnt > 50) {
  8517  0079  3000               	movlw	0
  8518  007A  0021               	movlb	1	; select bank1
  8519  007B  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  8520  007C  3033               	movlw	51
  8521  007D  1903               	skipnz
  8522  007E  0224               	subwf	_Cb44_StateCnt^(0+128),w
  8523  007F  1C03               	skipc
  8524  0080  28C4               	goto	L22
  8525  0081  289C               	goto	l9165
  8526  0082                     l9155:	
  8527                           ;BVH2_Appl_Layer.c: 431: };BVH2_Appl_Layer.c: 432: case (UInt8)5: {
  8528                           
  8529                           ;BVH2_Appl_Layer.c: 427: };BVH2_Appl_Layer.c: 430: break;
  8530                           
  8531                           ;BVH2_Appl_Layer.c: 425: else {;BVH2_Appl_Layer.c: 426: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1;
  8532                           
  8533                           ;BVH2_Appl_Layer.c: 424: }
  8534                           
  8535                           ;BVH2_Appl_Layer.c: 423: Cb44_StateCnt = 0;
  8536                           
  8537                           ;BVH2_Appl_Layer.c: 422: Cb44_oAlarm = 0;
  8538                           
  8539                           ;BVH2_Appl_Layer.c: 421: Cb44_oShutoff = 0;
  8540                           
  8541                           ;BVH2_Appl_Layer.c: 420: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  8542                           
  8543                           
  8544                           ;BVH2_Appl_Layer.c: 434: Cb44_Pic_etat_monitor_node_fcn1();
  8545  0082  319E  26FE  3180   	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  8546                           
  8547                           ;BVH2_Appl_Layer.c: 435: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
  8548  0085  0021               	movlb	1	; select bank1
  8549  0086  0C46               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8550  0087  0020               	movlb	0	; select bank0
  8551  0088  00B7               	movwf	??_BVH2_Appl_Layer
  8552  0089  0CB7               	rrf	??_BVH2_Appl_Layer,f
  8553  008A  0C37               	rrf	??_BVH2_Appl_Layer,w
  8554  008B  3903               	andlw	3
  8555  008C  3A03               	xorlw	3
  8556  008D  1903               	skipnz
  8557  008E  28F5               	goto	l9221
  8558  008F  28C3               	goto	l9203
  8559  0090                     l9161:	
  8560                           ;BVH2_Appl_Layer.c: 441: };BVH2_Appl_Layer.c: 442: case (UInt8)3: {
  8561                           
  8562                           ;BVH2_Appl_Layer.c: 437: };BVH2_Appl_Layer.c: 440: break;
  8563                           
  8564                           ;BVH2_Appl_Layer.c: 436: Cb44_StateCnt = Cb44_StateCnt + 1;
  8565                           
  8566                           
  8567                           ;BVH2_Appl_Layer.c: 444: Cb44_Pic_etat_monitor_node_fcn1();
  8568  0090  319E  26FE  3180   	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  8569                           
  8570                           ;BVH2_Appl_Layer.c: 447: break;
  8571  0093  28F5               	goto	l9221
  8572  0094                     l9163:	
  8573                           ;BVH2_Appl_Layer.c: 448: };BVH2_Appl_Layer.c: 449: case (UInt8)6: {
  8574                           
  8575                           
  8576                           ;BVH2_Appl_Layer.c: 451: if (Cb44_StateCnt > 15) {
  8577  0094  3000               	movlw	0
  8578  0095  0021               	movlb	1	; select bank1
  8579  0096  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  8580  0097  3010               	movlw	16
  8581  0098  1903               	skipnz
  8582  0099  0224               	subwf	_Cb44_StateCnt^(0+128),w
  8583  009A  1C03               	skipc
  8584  009B  28A5               	goto	l9173
  8585  009C                     l9165:	
  8586                           
  8587                           ;BVH2_Appl_Layer.c: 453: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  8588  009C  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8589  009D  39F8               	andlw	-8
  8590  009E  3805               	iorlw	5
  8591  009F  00C6               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8592                           
  8593                           ;BVH2_Appl_Layer.c: 454: Cb44_oShutoff = 0;
  8594  00A0  0022               	movlb	2	; select bank2
  8595  00A1  01BA               	clrf	_Cb44_oShutoff^(0+256)
  8596                           
  8597                           ;BVH2_Appl_Layer.c: 455: Cb44_oAlarm = 0;
  8598  00A2  01BB               	clrf	_Cb44_oAlarm^(0+256)
  8599                           
  8600                           ;BVH2_Appl_Layer.c: 456: Cb44_StateCnt = 0;
  8601  00A3  0021               	movlb	1	; select bank1
  8602  00A4  28DC               	goto	l9217
  8603  00A5                     l9173:	
  8604                           ;BVH2_Appl_Layer.c: 457: }
  8605                           
  8606                           
  8607                           ;BVH2_Appl_Layer.c: 458: else {;BVH2_Appl_Layer.c: 461: if (bool_mat_pic_etat) {
  8608  00A5  084A               	movf	_bool_mat_pic_etat^(0+128),w
  8609  00A6  28B5               	goto	L49
  8610  00A7                     l9185:	
  8611                           ;BVH2_Appl_Layer.c: 475: };BVH2_Appl_Layer.c: 476: case (UInt8)2: {
  8612                           
  8613                           ;BVH2_Appl_Layer.c: 470: };BVH2_Appl_Layer.c: 471: };BVH2_Appl_Layer.c: 474: break;
  8614                           
  8615                           ;BVH2_Appl_Layer.c: 468: else {;BVH2_Appl_Layer.c: 469: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1;
  8616                           
  8617                           ;BVH2_Appl_Layer.c: 467: }
  8618                           
  8619                           ;BVH2_Appl_Layer.c: 466: Cb44_oAlarm = 1;
  8620                           
  8621                           ;BVH2_Appl_Layer.c: 465: Cb44_oShutoff = 1;
  8622                           
  8623                           ;BVH2_Appl_Layer.c: 464: Cb44_StateCnt = 0;
  8624                           
  8625                           ;BVH2_Appl_Layer.c: 463: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)1;
  8626                           
  8627                           
  8628                           ;BVH2_Appl_Layer.c: 481: if (!(bool_mat_pic_etat)) {
  8629  00A7  084A               	movf	_bool_mat_pic_etat^(0+128),w
  8630  00A8  1D03               	btfss	3,2
  8631  00A9  28B2               	goto	l9193
  8632                           
  8633                           ;BVH2_Appl_Layer.c: 483: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
  8634  00AA  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8635  00AB  39F8               	andlw	-8
  8636  00AC  3803               	iorlw	3
  8637  00AD  00C6               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8638                           
  8639                           ;BVH2_Appl_Layer.c: 484: Cb44_oShutoff = 0;
  8640  00AE  0022               	movlb	2	; select bank2
  8641  00AF  01BA               	clrf	_Cb44_oShutoff^(0+256)
  8642                           
  8643                           ;BVH2_Appl_Layer.c: 485: Cb44_oAlarm = 0;
  8644  00B0  01BB               	clrf	_Cb44_oAlarm^(0+256)
  8645                           
  8646                           ;BVH2_Appl_Layer.c: 486: }
  8647  00B1  28F5               	goto	l9221
  8648  00B2                     l9193:	
  8649                           
  8650                           ;BVH2_Appl_Layer.c: 487: else {;BVH2_Appl_Layer.c: 488: if (Cb44_StateCnt) {
  8651  00B2  0021               	movlb	1	; select bank1
  8652  00B3  0824               	movf	_Cb44_StateCnt^(0+128),w
  8653  00B4  0425               	iorwf	(_Cb44_StateCnt+1)^(0+128),w
  8654  00B5                     L49:	
  8655  00B5  1903               	btfsc	3,2
  8656  00B6  28C3               	goto	l9203
  8657                           
  8658                           ;BVH2_Appl_Layer.c: 490: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)1;
  8659  00B7  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8660  00B8  39F8               	andlw	-8
  8661  00B9  3801               	iorlw	1
  8662  00BA  00C6               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8663                           
  8664                           ;BVH2_Appl_Layer.c: 491: Cb44_StateCnt = 0;
  8665  00BB  01A4               	clrf	_Cb44_StateCnt^(0+128)
  8666  00BC  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
  8667                           
  8668                           ;BVH2_Appl_Layer.c: 492: Cb44_oShutoff = 1;
  8669  00BD  0022               	movlb	2	; select bank2
  8670  00BE  01BA               	clrf	_Cb44_oShutoff^(0+256)
  8671  00BF  0ABA               	incf	_Cb44_oShutoff^(0+256),f
  8672                           
  8673                           ;BVH2_Appl_Layer.c: 493: Cb44_oAlarm = 1;
  8674  00C0  01BB               	clrf	_Cb44_oAlarm^(0+256)
  8675  00C1  0ABB               	incf	_Cb44_oAlarm^(0+256),f
  8676                           
  8677                           ;BVH2_Appl_Layer.c: 494: }
  8678  00C2  28F5               	goto	l9221
  8679  00C3                     l9203:	
  8680                           
  8681                           ;BVH2_Appl_Layer.c: 495: else {;BVH2_Appl_Layer.c: 496: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1;
  8682  00C3  0021               	movlb	1	; select bank1
  8683  00C4                     L22:	
  8684  00C4  0824               	movf	_Cb44_StateCnt^(0+128),w
  8685  00C5  3E01               	addlw	1
  8686  00C6  00A4               	movwf	_Cb44_StateCnt^(0+128)
  8687  00C7  3000               	movlw	0
  8688  00C8  3D25               	addwfc	(_Cb44_StateCnt+1)^(0+128),w
  8689  00C9  00A5               	movwf	(_Cb44_StateCnt+1)^(0+128)
  8690                           
  8691                           ;BVH2_Appl_Layer.c: 497: };BVH2_Appl_Layer.c: 498: };BVH2_Appl_Layer.c: 501: break;
  8692  00CA  28F5               	goto	l9221
  8693  00CB                     l9205:	
  8694                           ;BVH2_Appl_Layer.c: 502: };BVH2_Appl_Layer.c: 503: case (UInt8)1: {
  8695                           
  8696                           
  8697                           ;BVH2_Appl_Layer.c: 508: if (!(bool_mat_pic_etat)) {
  8698  00CB  084A               	movf	_bool_mat_pic_etat^(0+128),w
  8699  00CC  1D03               	btfss	3,2
  8700  00CD  28F5               	goto	l9221
  8701                           
  8702                           ;BVH2_Appl_Layer.c: 511: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
  8703  00CE  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8704  00CF  39F8               	andlw	-8
  8705  00D0  3806               	iorlw	6
  8706  00D1  28DB               	goto	L40
  8707  00D2                     l1391:	
  8708                           ;BVH2_Appl_Layer.c: 517: };BVH2_Appl_Layer.c: 518: default: {
  8709                           
  8710                           ;BVH2_Appl_Layer.c: 513: };BVH2_Appl_Layer.c: 516: break;
  8711                           
  8712                           ;BVH2_Appl_Layer.c: 512: Cb44_StateCnt = 0;
  8713                           
  8714                           
  8715                           ;BVH2_Appl_Layer.c: 520: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
  8716  00D2  1AC6               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
  8717  00D3  28F5               	goto	l9221
  8718                           
  8719                           ;BVH2_Appl_Layer.c: 521: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
  8720  00D4  16C6               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
  8721                           
  8722                           ;BVH2_Appl_Layer.c: 525: if (ui8_ResetMatlab != 0) {
  8723  00D5  086F               	movf	_ui8_ResetMatlab^(0+128),w
  8724  00D6  1903               	btfsc	3,2
  8725  00D7  28F5               	goto	l9221
  8726                           
  8727                           ;BVH2_Appl_Layer.c: 527: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
  8728  00D8  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8729  00D9  39F8               	andlw	-8
  8730  00DA  3804               	iorlw	4
  8731  00DB                     L40:	
  8732  00DB  00C6               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8733  00DC                     l9217:	
  8734                           
  8735                           ;BVH2_Appl_Layer.c: 528: Cb44_StateCnt = 0;
  8736  00DC  01A4               	clrf	_Cb44_StateCnt^(0+128)
  8737  00DD  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
  8738                           
  8739                           ;BVH2_Appl_Layer.c: 529: };BVH2_Appl_Layer.c: 530: };BVH2_Appl_Layer.c: 531: };BVH2_Appl
      +                          _Layer.c: 532: }
  8740  00DE  28F5               	goto	l9221
  8741  00DF                     l9219:	
  8742  00DF  0021               	movlb	1	; select bank1
  8743  00E0  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8744  00E1  3907               	andlw	7
  8745                           
  8746                           ; Switch size 1, requested type "space"
  8747                           ; Number of cases is 6, Range of values is 1 to 6
  8748                           ; switch strategies available:
  8749                           ; Name         Instructions Cycles
  8750                           ; simple_byte           19    10 (average)
  8751                           ; direct_byte           21     9 (fixed)
  8752                           ; jumptable            263     9 (fixed)
  8753                           ;	Chosen strategy is simple_byte
  8754  00E2  3A01               	xorlw	1	; case 1
  8755  00E3  1903               	skipnz
  8756  00E4  28CB               	goto	l9205
  8757  00E5  3A03               	xorlw	3	; case 2
  8758  00E6  1903               	skipnz
  8759  00E7  28A7               	goto	l9185
  8760  00E8  3A01               	xorlw	1	; case 3
  8761  00E9  1903               	skipnz
  8762  00EA  2890               	goto	l9161
  8763  00EB  3A07               	xorlw	7	; case 4
  8764  00EC  1903               	skipnz
  8765  00ED  2879               	goto	l9143
  8766  00EE  3A01               	xorlw	1	; case 5
  8767  00EF  1903               	skipnz
  8768  00F0  2882               	goto	l9155
  8769  00F1  3A03               	xorlw	3	; case 6
  8770  00F2  1903               	skipnz
  8771  00F3  2894               	goto	l9163
  8772  00F4  28D2               	goto	l1391
  8773  00F5                     l9221:	
  8774                           
  8775                           ;BVH2_Appl_Layer.c: 537: bool_PIC_Alarm = Cb44_oAlarm;
  8776  00F5  0022               	movlb	2	; select bank2
  8777  00F6  083B               	movf	_Cb44_oAlarm^(0+256),w
  8778  00F7  0020               	movlb	0	; select bank0
  8779  00F8  00B7               	movwf	??_BVH2_Appl_Layer
  8780  00F9  0837               	movf	??_BVH2_Appl_Layer,w
  8781  00FA  0023               	movlb	3	; select bank3
  8782  00FB  00DB               	movwf	_bool_PIC_Alarm^(0+384)
  8783                           
  8784                           ;BVH2_Appl_Layer.c: 541: Cb34_idPWM = 50;
  8785  00FC  3032               	movlw	50
  8786  00FD  0020               	movlb	0	; select bank0
  8787  00FE  00B7               	movwf	??_BVH2_Appl_Layer
  8788  00FF  0837               	movf	??_BVH2_Appl_Layer,w
  8789  0100  00D6               	movwf	_Cb34_idPWM
  8790                           
  8791                           ;BVH2_Appl_Layer.c: 546: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
  8792  0101  0021               	movlb	1	; select bank1
  8793  0102  1A47               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
  8794  0103  2925               	goto	l9245
  8795  0104  2935               	goto	l1394
  8796  0105                     l9227:	
  8797                           ;BVH2_Appl_Layer.c: 549: case (UInt8)3: {
  8798                           
  8799                           ;BVH2_Appl_Layer.c: 548: switch (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns) {
  8800                           
  8801                           
  8802                           ;BVH2_Appl_Layer.c: 552: Cb34_PWM_Detection_node_fcn1();
  8803  0105  3195  2573  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8804                           
  8805                           ;BVH2_Appl_Layer.c: 555: break;
  8806  0108  2945               	goto	l9261
  8807  0109                     l9229:	
  8808                           ;BVH2_Appl_Layer.c: 556: };BVH2_Appl_Layer.c: 557: case (UInt8)8: {
  8809                           
  8810                           
  8811                           ;BVH2_Appl_Layer.c: 560: Cb34_PWM_Detection_node_fcn1();
  8812  0109  3195  2573  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8813                           
  8814                           ;BVH2_Appl_Layer.c: 564: break;
  8815  010C  2945               	goto	l9261
  8816  010D                     l9231:	
  8817                           ;BVH2_Appl_Layer.c: 565: };BVH2_Appl_Layer.c: 566: case (UInt8)4: {
  8818                           
  8819                           
  8820                           ;BVH2_Appl_Layer.c: 569: Cb34_PWM_Detection_node_fcn1();
  8821  010D  3195  2573  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8822                           
  8823                           ;BVH2_Appl_Layer.c: 573: break;
  8824  0110  2945               	goto	l9261
  8825  0111                     l9233:	
  8826                           ;BVH2_Appl_Layer.c: 574: };BVH2_Appl_Layer.c: 575: case (UInt8)6: {
  8827                           
  8828                           
  8829                           ;BVH2_Appl_Layer.c: 577: Cb34_PWM_Detection_node_fcn1();
  8830  0111  3195  2573  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8831                           
  8832                           ;BVH2_Appl_Layer.c: 580: break;
  8833  0114  2945               	goto	l9261
  8834  0115                     l9235:	
  8835                           ;BVH2_Appl_Layer.c: 581: };BVH2_Appl_Layer.c: 582: case (UInt8)7: {
  8836                           
  8837                           
  8838                           ;BVH2_Appl_Layer.c: 585: Cb34_PWM_Detection_node_fcn1();
  8839  0115  3195  2573  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8840                           
  8841                           ;BVH2_Appl_Layer.c: 589: break;
  8842  0118  2945               	goto	l9261
  8843  0119                     l9237:	
  8844                           ;BVH2_Appl_Layer.c: 590: };BVH2_Appl_Layer.c: 591: case (UInt8)2: {
  8845                           
  8846                           
  8847                           ;BVH2_Appl_Layer.c: 593: Cb34_PWM_Detection_node_fcn1();
  8848  0119  3195  2573  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8849                           
  8850                           ;BVH2_Appl_Layer.c: 596: break;
  8851  011C  2945               	goto	l9261
  8852  011D                     l9239:	
  8853                           ;BVH2_Appl_Layer.c: 597: };BVH2_Appl_Layer.c: 598: case (UInt8)5: {
  8854                           
  8855                           
  8856                           ;BVH2_Appl_Layer.c: 601: Cb34_PWM_Detection_node_fcn1();
  8857  011D  3195  2573  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8858                           
  8859                           ;BVH2_Appl_Layer.c: 605: break;
  8860  0120  2945               	goto	l9261
  8861  0121                     l9241:	
  8862                           ;BVH2_Appl_Layer.c: 606: };BVH2_Appl_Layer.c: 607: case (UInt8)1: {
  8863                           
  8864                           
  8865                           ;BVH2_Appl_Layer.c: 609: Cb34_PWM_Detection_node_fcn1();
  8866  0121  3195  2573  3180   	fcall	_Cb34_PWM_Detection_node_fcn1
  8867                           
  8868                           ;BVH2_Appl_Layer.c: 613: };BVH2_Appl_Layer.c: 614: }
  8869                           
  8870                           ;BVH2_Appl_Layer.c: 612: break;
  8871  0124  2945               	goto	l9261
  8872  0125                     l9245:	
  8873  0125  0021               	movlb	1	; select bank1
  8874  0126  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  8875  0127  390F               	andlw	15
  8876                           
  8877                           ; Switch size 1, requested type "space"
  8878                           ; Number of cases is 8, Range of values is 1 to 8
  8879                           ; switch strategies available:
  8880                           ; Name         Instructions Cycles
  8881                           ; direct_byte           25     9 (fixed)
  8882                           ; simple_byte           25    13 (average)
  8883                           ; jumptable            263     9 (fixed)
  8884                           ;	Chosen strategy is direct_byte
  8885  0128  3EFF               	addlw	-1
  8886  0129  1C03               	skipc
  8887  012A  2945               	goto	l9261
  8888  012B  0084               	movwf	4
  8889  012C  3008               	movlw	8
  8890  012D  0204               	subwf	4,w
  8891  012E  1803               	skipnc
  8892  012F  2945               	goto	l9261
  8893  0130  3198               	movlp	high S11813
  8894  0131  3504               	lslf	4,w
  8895  0132  3E68               	addlw	low S11813
  8896  0133  0082               	movwf	2
  8897                           
  8898                           ;BVH2_Appl_Layer.c: 617: }
  8899  0134  2945               	goto	l9261
  8900  0135                     l1394:	
  8901                           
  8902                           ;BVH2_Appl_Layer.c: 618: else {;BVH2_Appl_Layer.c: 619: SIBFS_PWM_Detection_b.Cb35_PWMin
      +                          put_handling = 1;
  8903  0135  1647               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
  8904                           
  8905                           ;BVH2_Appl_Layer.c: 622: if (ui8_ResetMatlab == 1) {
  8906  0136  036F               	decf	_ui8_ResetMatlab^(0+128),w
  8907  0137  1D03               	btfss	3,2
  8908  0138  2945               	goto	l9261
  8909                           
  8910                           ;BVH2_Appl_Layer.c: 624: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
  8911  0139  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  8912  013A  39F0               	andlw	-16
  8913  013B  3801               	iorlw	1
  8914  013C  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
  8915                           
  8916                           ;BVH2_Appl_Layer.c: 625: Cb34_odPumpOff = 1;
  8917  013D  0023               	movlb	3	; select bank3
  8918  013E  01D8               	clrf	_Cb34_odPumpOff^(0+384)
  8919  013F  0AD8               	incf	_Cb34_odPumpOff^(0+384),f
  8920                           
  8921                           ;BVH2_Appl_Layer.c: 626: Cb34_odFixedValueSel = 0;
  8922  0140  0022               	movlb	2	; select bank2
  8923  0141  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
  8924                           
  8925                           ;BVH2_Appl_Layer.c: 627: Cb34_odFixedLowValueSel = 0;
  8926  0142  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
  8927                           
  8928                           ;BVH2_Appl_Layer.c: 628: Cb34_oPWM_SC_Alarm = 0;
  8929  0143  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
  8930                           
  8931                           ;BVH2_Appl_Layer.c: 629: Cb34_oPWM_Alarm = 0;
  8932  0144  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
  8933  0145                     l9261:	
  8934                           
  8935                           ;BVH2_Appl_Layer.c: 630: };BVH2_Appl_Layer.c: 631: };BVH2_Appl_Layer.c: 636: bool_PWMin_
      +                          Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
  8936  0145  0022               	movlb	2	; select bank2
  8937  0146  083E               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
  8938  0147  0020               	movlb	0	; select bank0
  8939  0148  00B7               	movwf	??_BVH2_Appl_Layer
  8940  0149  0837               	movf	??_BVH2_Appl_Layer,w
  8941  014A  0022               	movlb	2	; select bank2
  8942  014B  00C9               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
  8943                           
  8944                           ;BVH2_Appl_Layer.c: 641: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
  8945  014C  0020               	movlb	0	; select bank0
  8946  014D  1DD7               	btfss	_SIBFS_UbatHandling_b,3
  8947  014E  2977               	goto	l1407
  8948                           
  8949                           ;BVH2_Appl_Layer.c: 645: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
  8950  014F  1E57               	btfss	_SIBFS_UbatHandling_b,4
  8951  0150  295E               	goto	l1408
  8952                           
  8953                           ;BVH2_Appl_Layer.c: 647: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
  8954  0151  0857               	movf	_SIBFS_UbatHandling_b,w
  8955  0152  39F8               	andlw	-8
  8956  0153  3802               	iorlw	2
  8957  0154  00D7               	movwf	_SIBFS_UbatHandling_b
  8958                           
  8959                           ;BVH2_Appl_Layer.c: 650: if (((UInt8)ui8_BattVolt_mat) < 139) {
  8960  0155  308B               	movlw	139
  8961  0156  0021               	movlb	1	; select bank1
  8962  0157  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
  8963  0158  1803               	skipnc
  8964  0159  2982               	goto	l1415
  8965                           
  8966                           ;BVH2_Appl_Layer.c: 651: Cb56_UbatHandling_node_fcn2();
  8967  015A  3192  22C1  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  8968                           
  8969                           ;BVH2_Appl_Layer.c: 652: };BVH2_Appl_Layer.c: 655: }
  8970  015D  2982               	goto	l1415
  8971  015E                     l1408:	
  8972                           
  8973                           ;BVH2_Appl_Layer.c: 656: else {;BVH2_Appl_Layer.c: 658: if (SIBFS_UbatHandling_b.Cb59_Sa
      +                          turationLow) {
  8974  015E  1ED7               	btfss	_SIBFS_UbatHandling_b,5
  8975  015F  296D               	goto	l1411
  8976                           
  8977                           ;BVH2_Appl_Layer.c: 660: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
  8978  0160  0857               	movf	_SIBFS_UbatHandling_b,w
  8979  0161  39F8               	andlw	-8
  8980  0162  3803               	iorlw	3
  8981  0163  00D7               	movwf	_SIBFS_UbatHandling_b
  8982                           
  8983                           ;BVH2_Appl_Layer.c: 663: if (((UInt8)ui8_BattVolt_mat) > 49) {
  8984  0164  3032               	movlw	50
  8985  0165  0021               	movlb	1	; select bank1
  8986  0166  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
  8987  0167  1C03               	skipc
  8988  0168  2982               	goto	l1415
  8989                           
  8990                           ;BVH2_Appl_Layer.c: 664: Cb56_UbatHandling_node_fcn2();
  8991  0169  3192  22C1  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  8992                           
  8993                           ;BVH2_Appl_Layer.c: 665: };BVH2_Appl_Layer.c: 668: }
  8994  016C  2982               	goto	l1415
  8995  016D                     l1411:	
  8996                           
  8997                           ;BVH2_Appl_Layer.c: 669: else {;BVH2_Appl_Layer.c: 671: if (SIBFS_UbatHandling_b.Cb60_No
      +                          rmalUbat) {
  8998  016D  1F57               	btfss	_SIBFS_UbatHandling_b,6
  8999  016E  2982               	goto	l1415
  9000                           
  9001                           ;BVH2_Appl_Layer.c: 673: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
  9002  016F  0857               	movf	_SIBFS_UbatHandling_b,w
  9003  0170  39F8               	andlw	-8
  9004  0171  3801               	iorlw	1
  9005  0172  00D7               	movwf	_SIBFS_UbatHandling_b
  9006                           
  9007                           ;BVH2_Appl_Layer.c: 674: Cb56_UbatHandling_node_fcn2();
  9008  0173  3192  22C1  3180   	fcall	_Cb56_UbatHandling_node_fcn2
  9009                           
  9010                           ;BVH2_Appl_Layer.c: 677: };BVH2_Appl_Layer.c: 678: };BVH2_Appl_Layer.c: 679: };BVH2_Appl
      +                          _Layer.c: 682: }
  9011  0176  2982               	goto	l1415
  9012  0177                     l1407:	
  9013                           
  9014                           ;BVH2_Appl_Layer.c: 683: else {;BVH2_Appl_Layer.c: 684: SIBFS_UbatHandling_b.Cb57_Ubat_H
      +                          andling = 1;
  9015  0177  15D7               	bsf	_SIBFS_UbatHandling_b,3
  9016                           
  9017                           ;BVH2_Appl_Layer.c: 687: if (ui8_ResetMatlab == 1) {
  9018  0178  0021               	movlb	1	; select bank1
  9019  0179  036F               	decf	_ui8_ResetMatlab^(0+128),w
  9020  017A  1D03               	btfss	3,2
  9021  017B  2982               	goto	l1415
  9022                           
  9023                           ;BVH2_Appl_Layer.c: 689: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
  9024  017C  0020               	movlb	0	; select bank0
  9025  017D  1757               	bsf	_SIBFS_UbatHandling_b,6
  9026                           
  9027                           ;BVH2_Appl_Layer.c: 690: Cb56_odPumpOff = 0;
  9028  017E  0022               	movlb	2	; select bank2
  9029  017F  01B7               	clrf	_Cb56_odPumpOff^(0+256)
  9030                           
  9031                           ;BVH2_Appl_Layer.c: 691: Cb56_odFixedValueSel = 0;
  9032  0180  01B8               	clrf	_Cb56_odFixedValueSel^(0+256)
  9033                           
  9034                           ;BVH2_Appl_Layer.c: 692: Cb56_oUbat_Alarm_High = 0;
  9035  0181  01B9               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
  9036  0182                     l1415:	
  9037                           
  9038                           ;BVH2_Appl_Layer.c: 693: };BVH2_Appl_Layer.c: 694: };BVH2_Appl_Layer.c: 697: Sb1_Logical
      +                          _Operator2 = 0;
  9039  0182  0025               	movlb	5	; select bank5
  9040  0183  01B4               	clrf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640)
  9041                           
  9042                           ;BVH2_Appl_Layer.c: 702: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
  9043  0184  0021               	movlb	1	; select bank1
  9044  0185  1CC0               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9045  0186  2995               	goto	l1417
  9046                           
  9047                           ;BVH2_Appl_Layer.c: 704: if (Cb51_Counter > 80) {
  9048  0187  3051               	movlw	81
  9049  0188  0244               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+128),w
  9050  0189  1C03               	skipc
  9051  018A  298D               	goto	l9297
  9052                           
  9053                           ;BVH2_Appl_Layer.c: 707: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
  9054  018B  10C0               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9055  018C  29BA               	goto	L41
  9056  018D                     l9297:	
  9057                           ;BVH2_Appl_Layer.c: 713: }
  9058                           
  9059                           ;BVH2_Appl_Layer.c: 712: Cb51_Counter = 0 ;
  9060                           
  9061                           ;BVH2_Appl_Layer.c: 711: Cb51_odPumpOff = 0;
  9062                           
  9063                           ;BVH2_Appl_Layer.c: 710: Cb51_oTempAlarm = 0;
  9064                           
  9065                           ;BVH2_Appl_Layer.c: 709: Cb51_oTempRedAlarm = 0;
  9066                           
  9067                           ;BVH2_Appl_Layer.c: 708: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  9068                           
  9069                           
  9070                           ;BVH2_Appl_Layer.c: 714: else {;BVH2_Appl_Layer.c: 715: Cb51_Counter = Cb51_Counter + 1 
      +                          ;
  9071  018D  0844               	movf	BVH2_Appl_Layer@Cb51_Counter^(0+128),w
  9072  018E  3E01               	addlw	1
  9073  018F  0020               	movlb	0	; select bank0
  9074  0190  00B7               	movwf	??_BVH2_Appl_Layer
  9075  0191  0837               	movf	??_BVH2_Appl_Layer,w
  9076  0192  0021               	movlb	1	; select bank1
  9077  0193  00C4               	movwf	BVH2_Appl_Layer@Cb51_Counter^(0+128)
  9078                           
  9079                           ;BVH2_Appl_Layer.c: 716: };BVH2_Appl_Layer.c: 719: }
  9080  0194  2A4E               	goto	l9403
  9081  0195                     l1417:	
  9082                           
  9083                           ;BVH2_Appl_Layer.c: 720: else {;BVH2_Appl_Layer.c: 722: if (SIBFS_Temperature_Alarm_b.Cb
      +                          53_reset) {
  9084  0195  1D40               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9085  0196  299A               	goto	l1421
  9086                           
  9087                           ;BVH2_Appl_Layer.c: 727: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
  9088  0197  1140               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9089                           
  9090                           ;BVH2_Appl_Layer.c: 728: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
  9091  0198  14C0               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9092                           
  9093                           ;BVH2_Appl_Layer.c: 731: }
  9094  0199  2A4E               	goto	l9403
  9095  019A                     l1421:	
  9096                           
  9097                           ;BVH2_Appl_Layer.c: 732: else {;BVH2_Appl_Layer.c: 734: if (SIBFS_Temperature_Alarm_b.Cb
      +                          54_greenTemp) {
  9098  019A  1DC0               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9099  019B  29AE               	goto	l1423
  9100                           
  9101                           ;BVH2_Appl_Layer.c: 738: if (ui16_mat_inpTemp < 72) {
  9102  019C  3000               	movlw	0
  9103  019D  0023               	movlb	3	; select bank3
  9104  019E  0235               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  9105  019F  3048               	movlw	72
  9106  01A0  1903               	skipnz
  9107  01A1  0234               	subwf	_ui16_mat_inpTemp^(0+384),w
  9108  01A2  1803               	skipnc
  9109  01A3  2A4E               	goto	l9403
  9110                           
  9111                           ;BVH2_Appl_Layer.c: 741: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
  9112  01A4  0021               	movlb	1	; select bank1
  9113  01A5  11C0               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9114                           
  9115                           ;BVH2_Appl_Layer.c: 742: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
  9116  01A6  1640               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9117                           
  9118                           ;BVH2_Appl_Layer.c: 743: Cb51_oTempRedAlarm = 1;
  9119  01A7  0022               	movlb	2	; select bank2
  9120  01A8  01B1               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  9121  01A9  0AB1               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
  9122                           
  9123                           ;BVH2_Appl_Layer.c: 744: Cb51_oTempAlarm = 1;
  9124  01AA  01B2               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  9125  01AB  0AB2               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
  9126                           
  9127                           ;BVH2_Appl_Layer.c: 747: Cb51_odPumpOff = 0;
  9128  01AC  01B0               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  9129                           
  9130                           ;BVH2_Appl_Layer.c: 748: };BVH2_Appl_Layer.c: 751: }
  9131  01AD  2A4E               	goto	l9403
  9132  01AE                     l1423:	
  9133                           
  9134                           ;BVH2_Appl_Layer.c: 752: else {;BVH2_Appl_Layer.c: 754: if (SIBFS_Temperature_Alarm_b.Cb
      +                          55_redTemp) {
  9135  01AE  1E40               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9136  01AF  29C1               	goto	l1426
  9137                           
  9138                           ;BVH2_Appl_Layer.c: 758: if (ui16_mat_inpTemp > 185) {
  9139  01B0  3000               	movlw	0
  9140  01B1  0023               	movlb	3	; select bank3
  9141  01B2  0235               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  9142  01B3  30BA               	movlw	186
  9143  01B4  1903               	skipnz
  9144  01B5  0234               	subwf	_ui16_mat_inpTemp^(0+384),w
  9145  01B6  1C03               	skipc
  9146  01B7  2A4E               	goto	l9403
  9147                           
  9148                           ;BVH2_Appl_Layer.c: 761: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
  9149  01B8  0021               	movlb	1	; select bank1
  9150  01B9  1240               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9151  01BA                     L41:	
  9152                           
  9153                           ;BVH2_Appl_Layer.c: 762: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  9154  01BA  15C0               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9155                           
  9156                           ;BVH2_Appl_Layer.c: 763: Cb51_oTempRedAlarm = 0;
  9157  01BB  0022               	movlb	2	; select bank2
  9158  01BC  01B1               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  9159                           
  9160                           ;BVH2_Appl_Layer.c: 764: Cb51_oTempAlarm = 0;
  9161  01BD  01B2               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  9162                           
  9163                           ;BVH2_Appl_Layer.c: 765: Cb51_odPumpOff = 0;
  9164  01BE  01B0               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  9165                           
  9166                           ;BVH2_Appl_Layer.c: 766: Cb51_Counter = 0 ;
  9167  01BF  0021               	movlb	1	; select bank1
  9168  01C0  29C8               	goto	l9319
  9169  01C1                     l1426:	
  9170                           ;BVH2_Appl_Layer.c: 767: };BVH2_Appl_Layer.c: 770: }
  9171                           
  9172                           
  9173                           ;BVH2_Appl_Layer.c: 771: else {;BVH2_Appl_Layer.c: 773: if (!(SIBFS_Temperature_Alarm_b.
      +                          Cb51_Temperature_Alarm)) {
  9174  01C1  1840               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  9175  01C2  2A4E               	goto	l9403
  9176                           
  9177                           ;BVH2_Appl_Layer.c: 774: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
  9178  01C3  1440               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  9179                           
  9180                           ;BVH2_Appl_Layer.c: 778: if (ui8_ResetMatlab != 0) {
  9181  01C4  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9182  01C5  1903               	btfsc	3,2
  9183  01C6  2A4E               	goto	l9403
  9184                           
  9185                           ;BVH2_Appl_Layer.c: 780: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
  9186  01C7  1540               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9187  01C8                     l9319:	
  9188                           
  9189                           ;BVH2_Appl_Layer.c: 781: Cb51_Counter = 0 ;
  9190  01C8  01C4               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+128)
  9191                           
  9192                           ;BVH2_Appl_Layer.c: 782: };BVH2_Appl_Layer.c: 783: };BVH2_Appl_Layer.c: 784: };BVH2_Appl
      +                          _Layer.c: 785: };BVH2_Appl_Layer.c: 786: };BVH2_Appl_Layer.c: 787: };BVH2_Appl_Layer.c: 
      +                          792: switch (SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns) {
  9193  01C9  2A4E               	goto	l9403
  9194  01CA                     l9321:	
  9195                           ;BVH2_Appl_Layer.c: 793: case (UInt8)6: {
  9196                           
  9197                           
  9198                           ;BVH2_Appl_Layer.c: 795: if (Cb1_StateCnt > 50) {
  9199  01CA  3000               	movlw	0
  9200  01CB  0020               	movlb	0	; select bank0
  9201  01CC  024E               	subwf	_Cb1_StateCnt+1,w
  9202  01CD  3033               	movlw	51
  9203  01CE  1903               	skipnz
  9204  01CF  024D               	subwf	_Cb1_StateCnt,w
  9205  01D0  1C03               	skipc
  9206  01D1  2A36               	goto	l9391
  9207                           
  9208                           ;BVH2_Appl_Layer.c: 798: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 799: (UInt8)5;
  9209  01D2  0021               	movlb	1	; select bank1
  9210  01D3  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9211  01D4  39F0               	andlw	-16
  9212  01D5  3805               	iorlw	5
  9213  01D6  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9214                           
  9215                           ;BVH2_Appl_Layer.c: 800: Cb1_oShutoff = 0;
  9216  01D7  0022               	movlb	2	; select bank2
  9217  01D8  01C0               	clrf	_Cb1_oShutoff^(0+256)
  9218                           
  9219                           ;BVH2_Appl_Layer.c: 801: Cb1_oCurrentAlarm = 0;
  9220  01D9  01C1               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9221  01DA  2A4B               	goto	l9401
  9222  01DB                     l9333:	
  9223                           ;BVH2_Appl_Layer.c: 810: };BVH2_Appl_Layer.c: 811: case (UInt8)3: {
  9224                           
  9225                           ;BVH2_Appl_Layer.c: 806: };BVH2_Appl_Layer.c: 809: break;
  9226                           
  9227                           ;BVH2_Appl_Layer.c: 804: else {;BVH2_Appl_Layer.c: 805: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9228                           
  9229                           ;BVH2_Appl_Layer.c: 803: }
  9230                           
  9231                           ;BVH2_Appl_Layer.c: 802: Cb1_RestartCounter = 0 ;
  9232                           
  9233                           
  9234                           ;BVH2_Appl_Layer.c: 813: Cb1_Current_An___High_node_fcn1();
  9235  01DB  319F  2771  3180   	fcall	_Cb1_Current_An___High_node_fcn1
  9236                           
  9237                           ;BVH2_Appl_Layer.c: 814: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
  9238  01DE  0021               	movlb	1	; select bank1
  9239  01DF  0E48               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9240  01E0  3903               	andlw	3
  9241  01E1  3A03               	xorlw	3
  9242  01E2  1903               	skipnz
  9243  01E3  2A67               	goto	l1435
  9244  01E4  2A36               	goto	l9391
  9245  01E5                     l9339:	
  9246                           ;BVH2_Appl_Layer.c: 820: };BVH2_Appl_Layer.c: 821: case (UInt8)7: {
  9247                           
  9248                           ;BVH2_Appl_Layer.c: 816: };BVH2_Appl_Layer.c: 819: break;
  9249                           
  9250                           ;BVH2_Appl_Layer.c: 815: Cb1_StateCnt = Cb1_StateCnt + 1 ;
  9251                           
  9252                           
  9253                           ;BVH2_Appl_Layer.c: 823: if (Cb1_RestartCounter < 10) {
  9254  01E5  300A               	movlw	10
  9255  01E6  0021               	movlb	1	; select bank1
  9256  01E7  0249               	subwf	_Cb1_RestartCounter^(0+128),w
  9257  01E8  1803               	skipnc
  9258  01E9  2A67               	goto	l1435
  9259  01EA  2A0D               	goto	L48
  9260  01EB                     l9349:	
  9261                           ;BVH2_Appl_Layer.c: 835: };BVH2_Appl_Layer.c: 836: case (UInt8)5: {
  9262                           
  9263                           ;BVH2_Appl_Layer.c: 831: };BVH2_Appl_Layer.c: 834: break;
  9264                           
  9265                           ;BVH2_Appl_Layer.c: 830: Cb1_StateCnt = 0 ;
  9266                           
  9267                           ;BVH2_Appl_Layer.c: 829: Cb1_oCurrentAlarm = 1;
  9268                           
  9269                           ;BVH2_Appl_Layer.c: 828: Cb1_oShutoff = 0;
  9270                           
  9271                           ;BVH2_Appl_Layer.c: 826: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 827: (UInt8)3;
  9272                           
  9273                           
  9274                           ;BVH2_Appl_Layer.c: 838: Cb1_Current_An___High_node_fcn1();
  9275  01EB  319F  2771  3180   	fcall	_Cb1_Current_An___High_node_fcn1
  9276                           
  9277                           ;BVH2_Appl_Layer.c: 841: break;
  9278  01EE  2A67               	goto	l1435
  9279  01EF                     l9351:	
  9280                           ;BVH2_Appl_Layer.c: 842: };BVH2_Appl_Layer.c: 843: case (UInt8)4: {
  9281                           
  9282                           
  9283                           ;BVH2_Appl_Layer.c: 845: if (Cb1_StateCnt > 200) {
  9284  01EF  3000               	movlw	0
  9285  01F0  0020               	movlb	0	; select bank0
  9286  01F1  024E               	subwf	_Cb1_StateCnt+1,w
  9287  01F2  30C9               	movlw	201
  9288  01F3  1903               	skipnz
  9289  01F4  024D               	subwf	_Cb1_StateCnt,w
  9290  01F5  1C03               	skipc
  9291  01F6  2A04               	goto	l9355
  9292                           
  9293                           ;BVH2_Appl_Layer.c: 847: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 848: (UInt8)7;
  9294  01F7  0021               	movlb	1	; select bank1
  9295  01F8  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9296  01F9  39F0               	andlw	-16
  9297  01FA  3807               	iorlw	7
  9298  01FB  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9299                           
  9300                           ;BVH2_Appl_Layer.c: 849: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
  9301  01FC  0849               	movf	_Cb1_RestartCounter^(0+128),w
  9302  01FD  3E01               	addlw	1
  9303  01FE  0020               	movlb	0	; select bank0
  9304  01FF  00B7               	movwf	??_BVH2_Appl_Layer
  9305  0200  0837               	movf	??_BVH2_Appl_Layer,w
  9306  0201  0021               	movlb	1	; select bank1
  9307  0202  00C9               	movwf	_Cb1_RestartCounter^(0+128)
  9308                           
  9309                           ;BVH2_Appl_Layer.c: 850: }
  9310  0203  2A67               	goto	l1435
  9311  0204                     l9355:	
  9312                           
  9313                           ;BVH2_Appl_Layer.c: 851: else {;BVH2_Appl_Layer.c: 854: if (bool_mat_currAlarm_bldc) {
  9314  0204  0021               	movlb	1	; select bank1
  9315  0205  084F               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9316  0206  1903               	btfsc	3,2
  9317  0207  2A36               	goto	l9391
  9318  0208  2A1F               	goto	L42
  9319  0209                     l9365:	
  9320                           ;BVH2_Appl_Layer.c: 869: };BVH2_Appl_Layer.c: 870: case (UInt8)2: {
  9321                           
  9322                           ;BVH2_Appl_Layer.c: 864: };BVH2_Appl_Layer.c: 865: };BVH2_Appl_Layer.c: 868: break;
  9323                           
  9324                           ;BVH2_Appl_Layer.c: 862: else {;BVH2_Appl_Layer.c: 863: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9325                           
  9326                           ;BVH2_Appl_Layer.c: 861: }
  9327                           
  9328                           ;BVH2_Appl_Layer.c: 860: Cb1_oCurrentAlarm = 1;
  9329                           
  9330                           ;BVH2_Appl_Layer.c: 858: Cb1_StateCnt = 0 ;
  9331                           
  9332                           ;BVH2_Appl_Layer.c: 856: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 857: (UInt8)1;
  9333                           
  9334                           
  9335                           ;BVH2_Appl_Layer.c: 875: if (!(bool_mat_currAlarm_bldc)) {
  9336  0209  0021               	movlb	1	; select bank1
  9337  020A  084F               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9338  020B  1D03               	btfss	3,2
  9339  020C  2A16               	goto	l9375
  9340  020D                     L48:	
  9341                           
  9342                           ;BVH2_Appl_Layer.c: 877: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 878: (UInt8)3;
  9343  020D  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9344  020E  39F0               	andlw	-16
  9345  020F  3803               	iorlw	3
  9346  0210  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9347                           
  9348                           ;BVH2_Appl_Layer.c: 879: Cb1_oShutoff = 0;
  9349  0211  0022               	movlb	2	; select bank2
  9350  0212  01C0               	clrf	_Cb1_oShutoff^(0+256)
  9351                           
  9352                           ;BVH2_Appl_Layer.c: 880: Cb1_oCurrentAlarm = 1;
  9353  0213  01C1               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9354  0214  0AC1               	incf	_Cb1_oCurrentAlarm^(0+256),f
  9355  0215  2A32               	goto	l9389
  9356  0216                     l9375:	
  9357                           ;BVH2_Appl_Layer.c: 882: }
  9358                           
  9359                           ;BVH2_Appl_Layer.c: 881: Cb1_StateCnt = 0 ;
  9360                           
  9361                           
  9362                           ;BVH2_Appl_Layer.c: 883: else {;BVH2_Appl_Layer.c: 884: if (Cb1_StateCnt > 1) {
  9363  0216  3000               	movlw	0
  9364  0217  0020               	movlb	0	; select bank0
  9365  0218  024E               	subwf	_Cb1_StateCnt+1,w
  9366  0219  3002               	movlw	2
  9367  021A  1903               	skipnz
  9368  021B  024D               	subwf	_Cb1_StateCnt,w
  9369  021C  1C03               	skipc
  9370  021D  2A36               	goto	l9391
  9371                           
  9372                           ;BVH2_Appl_Layer.c: 886: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 887: (UInt8)1;
  9373  021E  0021               	movlb	1	; select bank1
  9374  021F                     L42:	
  9375  021F  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9376  0220  39F0               	andlw	-16
  9377  0221  3801               	iorlw	1
  9378  0222  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9379                           
  9380                           ;BVH2_Appl_Layer.c: 888: Cb1_StateCnt = 0 ;
  9381  0223  0020               	movlb	0	; select bank0
  9382  0224  01CD               	clrf	_Cb1_StateCnt
  9383  0225  01CE               	clrf	_Cb1_StateCnt+1
  9384                           
  9385                           ;BVH2_Appl_Layer.c: 890: Cb1_oCurrentAlarm = 1;
  9386  0226  0022               	movlb	2	; select bank2
  9387  0227  01C1               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9388  0228  0AC1               	incf	_Cb1_oCurrentAlarm^(0+256),f
  9389  0229  2A67               	goto	l1435
  9390  022A                     l9385:	
  9391                           ;BVH2_Appl_Layer.c: 899: };BVH2_Appl_Layer.c: 900: case (UInt8)1: {
  9392                           
  9393                           ;BVH2_Appl_Layer.c: 894: };BVH2_Appl_Layer.c: 895: };BVH2_Appl_Layer.c: 898: break;
  9394                           
  9395                           ;BVH2_Appl_Layer.c: 892: else {;BVH2_Appl_Layer.c: 893: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9396                           
  9397                           ;BVH2_Appl_Layer.c: 891: }
  9398                           
  9399                           
  9400                           ;BVH2_Appl_Layer.c: 905: if (!(bool_mat_currAlarm_bldc)) {
  9401  022A  0021               	movlb	1	; select bank1
  9402  022B  084F               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9403  022C  1D03               	btfss	3,2
  9404  022D  2A36               	goto	l9391
  9405                           
  9406                           ;BVH2_Appl_Layer.c: 908: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
  9407  022E  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9408  022F  39F0               	andlw	-16
  9409  0230  3804               	iorlw	4
  9410  0231  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9411  0232                     l9389:	
  9412                           
  9413                           ;BVH2_Appl_Layer.c: 909: Cb1_StateCnt = 0 ;
  9414  0232  0020               	movlb	0	; select bank0
  9415  0233  01CD               	clrf	_Cb1_StateCnt
  9416  0234  01CE               	clrf	_Cb1_StateCnt+1
  9417                           
  9418                           ;BVH2_Appl_Layer.c: 910: }
  9419  0235  2A67               	goto	l1435
  9420  0236                     l9391:	
  9421                           
  9422                           ;BVH2_Appl_Layer.c: 911: else {;BVH2_Appl_Layer.c: 912: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  9423  0236  0020               	movlb	0	; select bank0
  9424  0237  084D               	movf	_Cb1_StateCnt,w
  9425  0238  3E01               	addlw	1
  9426  0239  00CD               	movwf	_Cb1_StateCnt
  9427  023A  3000               	movlw	0
  9428  023B  3D4E               	addwfc	_Cb1_StateCnt+1,w
  9429  023C  00CE               	movwf	_Cb1_StateCnt+1
  9430                           
  9431                           ;BVH2_Appl_Layer.c: 913: };BVH2_Appl_Layer.c: 916: break;
  9432  023D  2A67               	goto	l1435
  9433  023E                     l1454:	
  9434                           ;BVH2_Appl_Layer.c: 917: };BVH2_Appl_Layer.c: 918: default: {
  9435                           
  9436                           
  9437                           ;BVH2_Appl_Layer.c: 920: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
  9438  023E  1B48               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
  9439  023F  2A67               	goto	l1435
  9440                           
  9441                           ;BVH2_Appl_Layer.c: 921: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
  9442  0240  1748               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
  9443                           
  9444                           ;BVH2_Appl_Layer.c: 925: if (ui8_ResetMatlab != 0) {
  9445  0241  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9446  0242  1903               	btfsc	3,2
  9447  0243  2A67               	goto	l1435
  9448                           
  9449                           ;BVH2_Appl_Layer.c: 927: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 928: (UInt8)6;
  9450  0244  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9451  0245  39F0               	andlw	-16
  9452  0246  3806               	iorlw	6
  9453  0247  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9454                           
  9455                           ;BVH2_Appl_Layer.c: 929: Cb1_StateCnt = 0 ;
  9456  0248  0020               	movlb	0	; select bank0
  9457  0249  01CD               	clrf	_Cb1_StateCnt
  9458  024A  01CE               	clrf	_Cb1_StateCnt+1
  9459  024B                     l9401:	
  9460                           
  9461                           ;BVH2_Appl_Layer.c: 930: Cb1_RestartCounter = 0 ;
  9462  024B  0021               	movlb	1	; select bank1
  9463  024C  01C9               	clrf	_Cb1_RestartCounter^(0+128)
  9464                           
  9465                           ;BVH2_Appl_Layer.c: 931: };BVH2_Appl_Layer.c: 932: };BVH2_Appl_Layer.c: 933: };BVH2_Appl
      +                          _Layer.c: 934: }
  9466  024D  2A67               	goto	l1435
  9467  024E                     l9403:	
  9468  024E  0021               	movlb	1	; select bank1
  9469  024F  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9470  0250  390F               	andlw	15
  9471                           
  9472                           ; Switch size 1, requested type "space"
  9473                           ; Number of cases is 7, Range of values is 1 to 7
  9474                           ; switch strategies available:
  9475                           ; Name         Instructions Cycles
  9476                           ; simple_byte           22    12 (average)
  9477                           ; direct_byte           23     9 (fixed)
  9478                           ; jumptable            263     9 (fixed)
  9479                           ;	Chosen strategy is simple_byte
  9480  0251  3A01               	xorlw	1	; case 1
  9481  0252  1903               	skipnz
  9482  0253  2A2A               	goto	l9385
  9483  0254  3A03               	xorlw	3	; case 2
  9484  0255  1903               	skipnz
  9485  0256  2A09               	goto	l9365
  9486  0257  3A01               	xorlw	1	; case 3
  9487  0258  1903               	skipnz
  9488  0259  29DB               	goto	l9333
  9489  025A  3A07               	xorlw	7	; case 4
  9490  025B  1903               	skipnz
  9491  025C  29EF               	goto	l9351
  9492  025D  3A01               	xorlw	1	; case 5
  9493  025E  1903               	skipnz
  9494  025F  29EB               	goto	l9349
  9495  0260  3A03               	xorlw	3	; case 6
  9496  0261  1903               	skipnz
  9497  0262  29CA               	goto	l9321
  9498  0263  3A01               	xorlw	1	; case 7
  9499  0264  1903               	skipnz
  9500  0265  29E5               	goto	l9339
  9501  0266  2A3E               	goto	l1454
  9502  0267                     l1435:	
  9503                           
  9504                           ;BVH2_Appl_Layer.c: 937: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||;BVH2_Appl_Layer.c: 938: Cb1_oShutoff || Cb44_oShutoff;
  9505  0267  0025               	movlb	5	; select bank5
  9506  0268  01AA               	clrf	_BVH2_Appl_Layer$1058^(0+640)
  9507  0269  0AAA               	incf	_BVH2_Appl_Layer$1058^(0+640),f
  9508  026A  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640),w
  9509  026B  1D03               	btfss	3,2
  9510  026C  2A7C               	goto	l9417
  9511  026D  0022               	movlb	2	; select bank2
  9512  026E  0837               	movf	_Cb56_odPumpOff^(0+256),w
  9513  026F  1D03               	btfss	3,2
  9514  0270  2A7C               	goto	l9417
  9515  0271  0830               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
  9516  0272  1D03               	btfss	3,2
  9517  0273  2A7C               	goto	l9417
  9518  0274  0840               	movf	_Cb1_oShutoff^(0+256),w
  9519  0275  1D03               	btfss	3,2
  9520  0276  2A7C               	goto	l9417
  9521  0277  083A               	movf	_Cb44_oShutoff^(0+256),w
  9522  0278  1D03               	btfss	3,2
  9523  0279  2A7C               	goto	l9417
  9524  027A  0025               	movlb	5	; select bank5
  9525  027B  01AA               	clrf	_BVH2_Appl_Layer$1058^(0+640)
  9526  027C                     l9417:	
  9527  027C  0025               	movlb	5	; select bank5
  9528  027D  082A               	movf	_BVH2_Appl_Layer$1058^(0+640),w
  9529  027E  0020               	movlb	0	; select bank0
  9530  027F  00B7               	movwf	??_BVH2_Appl_Layer
  9531  0280  0837               	movf	??_BVH2_Appl_Layer,w
  9532  0281  0025               	movlb	5	; select bank5
  9533  0282  00BB               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640)
  9534                           
  9535                           ;BVH2_Appl_Layer.c: 941: Cb24_Reset = ui8_ResetMatlab != 0 ;
  9536  0283  0021               	movlb	1	; select bank1
  9537  0284  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9538  0285  1903               	btfsc	3,2
  9539  0286  2A89               	goto	u7620
  9540  0287  3001               	movlw	1
  9541  0288  2A8A               	goto	u7630
  9542  0289                     u7620:	
  9543  0289  3000               	movlw	0
  9544  028A                     u7630:	
  9545  028A  0020               	movlb	0	; select bank0
  9546  028B  00B7               	movwf	??_BVH2_Appl_Layer
  9547  028C  0837               	movf	??_BVH2_Appl_Layer,w
  9548  028D  0025               	movlb	5	; select bank5
  9549  028E  00B3               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+640)
  9550                           
  9551                           ;BVH2_Appl_Layer.c: 946: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
  9552  028F  0021               	movlb	1	; select bank1
  9553  0290  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9554  0291  2BCB               	goto	l1459
  9555                           
  9556                           ;BVH2_Appl_Layer.c: 952: if (Sb1_Logical_Operator1 || Cb24_Reset) {
  9557  0292  0025               	movlb	5	; select bank5
  9558  0293  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
  9559  0294  1D03               	btfss	3,2
  9560  0295  2AA3               	goto	l9443
  9561  0296  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+640),w
  9562  0297  1D03               	btfss	3,2
  9563  0298  2AA3               	goto	l9443
  9564  0299  2BB4               	goto	l9559
  9565  029A                     l9427:	
  9566                           ;BVH2_Appl_Layer.c: 956: case (UInt8)3: {
  9567                           
  9568                           ;BVH2_Appl_Layer.c: 955: switch (SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns) 
      +                          {
  9569                           
  9570                           
  9571                           ;BVH2_Appl_Layer.c: 957: Cb24_StateCnt = 0 ;
  9572  029A  0020               	movlb	0	; select bank0
  9573  029B  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9574  029C  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9575                           
  9576                           ;BVH2_Appl_Layer.c: 958: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9577  029D  30F8               	movlw	-8
  9578  029E  0021               	movlb	1	; select bank1
  9579  029F  2AA1               	goto	L27
  9580  02A0                     l9431:	
  9581                           ;BVH2_Appl_Layer.c: 960: };BVH2_Appl_Layer.c: 961: case (UInt8)2: {
  9582                           
  9583                           ;BVH2_Appl_Layer.c: 959: break;
  9584                           
  9585  02A0                     l9433:	
  9586                           ;BVH2_Appl_Layer.c: 964: };BVH2_Appl_Layer.c: 965: case (UInt8)1: {
  9587                           
  9588                           ;BVH2_Appl_Layer.c: 963: break;
  9589                           
  9590                           ;BVH2_Appl_Layer.c: 962: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9591                           
  9592  02A0                     l9435:	
  9593                           ;BVH2_Appl_Layer.c: 968: };BVH2_Appl_Layer.c: 969: case (UInt8)5: {
  9594                           
  9595                           ;BVH2_Appl_Layer.c: 967: break;
  9596                           
  9597                           ;BVH2_Appl_Layer.c: 966: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9598                           
  9599  02A0                     l9437:	
  9600                           ;BVH2_Appl_Layer.c: 972: };BVH2_Appl_Layer.c: 973: case (UInt8)6: {
  9601                           
  9602                           ;BVH2_Appl_Layer.c: 971: break;
  9603                           
  9604                           ;BVH2_Appl_Layer.c: 970: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9605                           
  9606  02A0                     l9439:	
  9607                           ;BVH2_Appl_Layer.c: 976: };BVH2_Appl_Layer.c: 977: case (UInt8)4: {
  9608                           
  9609                           ;BVH2_Appl_Layer.c: 975: break;
  9610                           
  9611                           ;BVH2_Appl_Layer.c: 974: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9612                           
  9613                           
  9614                           ;BVH2_Appl_Layer.c: 978: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9615  02A0  30F8               	movlw	-8
  9616  02A1                     L27:	
  9617  02A1  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9618                           
  9619                           ;BVH2_Appl_Layer.c: 980: };BVH2_Appl_Layer.c: 981: }
  9620                           
  9621                           ;BVH2_Appl_Layer.c: 979: break;
  9622  02A2  2AB9               	goto	l1465
  9623  02A3                     l9443:	
  9624  02A3  0021               	movlb	1	; select bank1
  9625  02A4  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9626  02A5  3907               	andlw	7
  9627                           
  9628                           ; Switch size 1, requested type "space"
  9629                           ; Number of cases is 6, Range of values is 1 to 6
  9630                           ; switch strategies available:
  9631                           ; Name         Instructions Cycles
  9632                           ; simple_byte           19    10 (average)
  9633                           ; direct_byte           21     9 (fixed)
  9634                           ; jumptable            263     9 (fixed)
  9635                           ;	Chosen strategy is simple_byte
  9636  02A6  3A01               	xorlw	1	; case 1
  9637  02A7  1903               	skipnz
  9638  02A8  2AA0               	goto	l9433
  9639  02A9  3A03               	xorlw	3	; case 2
  9640  02AA  1903               	skipnz
  9641  02AB  2AA0               	goto	l9431
  9642  02AC  3A01               	xorlw	1	; case 3
  9643  02AD  1903               	skipnz
  9644  02AE  2A9A               	goto	l9427
  9645  02AF  3A07               	xorlw	7	; case 4
  9646  02B0  1903               	skipnz
  9647  02B1  2AA0               	goto	l9439
  9648  02B2  3A01               	xorlw	1	; case 5
  9649  02B3  1903               	skipnz
  9650  02B4  2AA0               	goto	l9435
  9651  02B5  3A03               	xorlw	3	; case 6
  9652  02B6  1903               	skipnz
  9653  02B7  2AA0               	goto	l9437
  9654  02B8  2AB9               	goto	l1465
  9655  02B9                     l1465:	
  9656                           
  9657                           ;BVH2_Appl_Layer.c: 982: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  9658  02B9  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9659  02BA  2BE8               	goto	L43
  9660  02BB                     l9447:	
  9661                           ;BVH2_Appl_Layer.c: 990: case (UInt8)3: {
  9662                           
  9663                           ;BVH2_Appl_Layer.c: 988: else {;BVH2_Appl_Layer.c: 989: switch (SIBFS_Motor_Stalled_b.Cb
      +                          25_Motor_sta__Statemachine_ns) {
  9664                           
  9665                           ;BVH2_Appl_Layer.c: 987: }
  9666                           
  9667                           ;BVH2_Appl_Layer.c: 986: Cb24_RestartCounter = 0 ;
  9668                           
  9669                           ;BVH2_Appl_Layer.c: 985: Cb24_oStalledAlarm = 0;
  9670                           
  9671                           ;BVH2_Appl_Layer.c: 984: Cb24_oMotorStalled = 0;
  9672                           
  9673                           ;BVH2_Appl_Layer.c: 983: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  9674                           
  9675                           
  9676                           ;BVH2_Appl_Layer.c: 993: if (Cb24_StateCnt) {
  9677  02BB  0020               	movlb	0	; select bank0
  9678  02BC  084B               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9679  02BD  044C               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9680  02BE  1903               	btfsc	3,2
  9681  02BF  2BAC               	goto	l9555
  9682                           
  9683                           ;BVH2_Appl_Layer.c: 997: Cb24_StateCnt = 0 ;
  9684  02C0  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9685  02C1  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9686  02C2  2B23               	goto	l9497
  9687  02C3                     l9455:	
  9688                           ;BVH2_Appl_Layer.c: 1008: };BVH2_Appl_Layer.c: 1009: case (UInt8)2: {
  9689                           
  9690                           ;BVH2_Appl_Layer.c: 1003: };BVH2_Appl_Layer.c: 1007: break;
  9691                           
  9692                           ;BVH2_Appl_Layer.c: 1001: else {;BVH2_Appl_Layer.c: 1002: Cb24_StateCnt = Cb24_StateCnt 
      +                          + 1 ;
  9693                           
  9694                           ;BVH2_Appl_Layer.c: 1000: }
  9695                           
  9696                           ;BVH2_Appl_Layer.c: 998: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int);BVH2_Appl_Layer.c: 999: (UInt8)2;
  9697                           
  9698                           
  9699                           ;BVH2_Appl_Layer.c: 1012: if (Cb24_StateCnt > 1000) {
  9700  02C3  3003               	movlw	3
  9701  02C4  0020               	movlb	0	; select bank0
  9702  02C5  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9703  02C6  30E9               	movlw	233
  9704  02C7  1903               	skipnz
  9705  02C8  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9706  02C9  1C03               	skipc
  9707  02CA  2ADB               	goto	l9467
  9708                           
  9709                           ;BVH2_Appl_Layer.c: 1015: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1016: (UInt8)5;
  9710  02CB  0021               	movlb	1	; select bank1
  9711  02CC  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9712  02CD  39F8               	andlw	-8
  9713  02CE  3805               	iorlw	5
  9714  02CF  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9715                           
  9716                           ;BVH2_Appl_Layer.c: 1017: Cb24_StateCnt = 0 ;
  9717  02D0  0020               	movlb	0	; select bank0
  9718  02D1  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9719  02D2  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9720                           
  9721                           ;BVH2_Appl_Layer.c: 1018: Cb24_BadCnt = 0 ;
  9722  02D3  0023               	movlb	3	; select bank3
  9723  02D4  01A0               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9724  02D5  01A1               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9725                           
  9726                           ;BVH2_Appl_Layer.c: 1019: Cb24_oMotorStalled = 0;
  9727  02D6  0021               	movlb	1	; select bank1
  9728  02D7  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9729                           
  9730                           ;BVH2_Appl_Layer.c: 1022: Cb24_oStalledAlarm = 0;
  9731  02D8  0022               	movlb	2	; select bank2
  9732  02D9  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9733                           
  9734                           ;BVH2_Appl_Layer.c: 1023: }
  9735  02DA  2BEE               	goto	l9581
  9736  02DB                     l9467:	
  9737                           
  9738                           ;BVH2_Appl_Layer.c: 1024: else {;BVH2_Appl_Layer.c: 1027: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  9739  02DB  3000               	movlw	0
  9740  02DC  0020               	movlb	0	; select bank0
  9741  02DD  0250               	subwf	_ui16_Speed_mat+1,w
  9742  02DE  3005               	movlw	5
  9743  02DF  1903               	skipnz
  9744  02E0  024F               	subwf	_ui16_Speed_mat,w
  9745  02E1  1C03               	skipc
  9746  02E2  2AEA               	goto	l9471
  9747  02E3  3001               	movlw	1
  9748  02E4  0250               	subwf	_ui16_Speed_mat+1,w
  9749  02E5  302D               	movlw	45
  9750  02E6  1903               	skipnz
  9751  02E7  024F               	subwf	_ui16_Speed_mat,w
  9752  02E8  1C03               	skipc
  9753  02E9  2BAD               	goto	L31
  9754  02EA                     l9471:	
  9755                           
  9756                           ;BVH2_Appl_Layer.c: 1030: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1031: (UInt8)1;
  9757  02EA  0021               	movlb	1	; select bank1
  9758  02EB  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9759  02EC  39F8               	andlw	-8
  9760  02ED  3801               	iorlw	1
  9761  02EE  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9762                           
  9763                           ;BVH2_Appl_Layer.c: 1032: Cb24_oStalledAlarm = 0;
  9764  02EF  0022               	movlb	2	; select bank2
  9765  02F0  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9766                           
  9767                           ;BVH2_Appl_Layer.c: 1033: Cb24_StateCnt = 0 ;
  9768  02F1  0020               	movlb	0	; select bank0
  9769  02F2  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9770  02F3  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9771                           
  9772                           ;BVH2_Appl_Layer.c: 1034: }
  9773  02F4  2BEE               	goto	l9581
  9774  02F5                     l9479:	
  9775                           ;BVH2_Appl_Layer.c: 1043: };BVH2_Appl_Layer.c: 1044: case (UInt8)1: {
  9776                           
  9777                           ;BVH2_Appl_Layer.c: 1037: };BVH2_Appl_Layer.c: 1038: };BVH2_Appl_Layer.c: 1042: break;
  9778                           
  9779                           ;BVH2_Appl_Layer.c: 1035: else {;BVH2_Appl_Layer.c: 1036: Cb24_StateCnt = Cb24_StateCnt 
      +                          + 1 ;
  9780                           
  9781                           
  9782                           ;BVH2_Appl_Layer.c: 1047: if (Cb24_BadCnt > 100) {
  9783  02F5  3000               	movlw	0
  9784  02F6  0023               	movlb	3	; select bank3
  9785  02F7  0221               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
  9786  02F8  3065               	movlw	101
  9787  02F9  1903               	skipnz
  9788  02FA  0220               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
  9789  02FB  1C03               	skipc
  9790  02FC  2B0C               	goto	l9489
  9791                           
  9792                           ;BVH2_Appl_Layer.c: 1050: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1051: (UInt8)4;
  9793  02FD  0021               	movlb	1	; select bank1
  9794  02FE  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9795  02FF  39F8               	andlw	-8
  9796  0300  3804               	iorlw	4
  9797  0301  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9798                           
  9799                           ;BVH2_Appl_Layer.c: 1052: Cb24_StateCnt = 0 ;
  9800  0302  0020               	movlb	0	; select bank0
  9801  0303  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9802  0304  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9803                           
  9804                           ;BVH2_Appl_Layer.c: 1053: Cb24_oMotorStalled = 1;
  9805  0305  0021               	movlb	1	; select bank1
  9806  0306  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9807  0307  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9808                           
  9809                           ;BVH2_Appl_Layer.c: 1054: Cb24_oStalledAlarm = 1;
  9810  0308  0022               	movlb	2	; select bank2
  9811  0309  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9812  030A  0AB3               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9813                           
  9814                           ;BVH2_Appl_Layer.c: 1055: }
  9815  030B  2BEE               	goto	l9581
  9816  030C                     l9489:	
  9817                           
  9818                           ;BVH2_Appl_Layer.c: 1056: else {;BVH2_Appl_Layer.c: 1059: if ((ui16_Speed_mat >= 5) && (
      +                          ui16_Speed_mat <= 300)) {
  9819  030C  3000               	movlw	0
  9820  030D  0020               	movlb	0	; select bank0
  9821  030E  0250               	subwf	_ui16_Speed_mat+1,w
  9822  030F  3005               	movlw	5
  9823  0310  1903               	skipnz
  9824  0311  024F               	subwf	_ui16_Speed_mat,w
  9825  0312  1C03               	skipc
  9826  0313  2B1B               	goto	l9495
  9827  0314  3001               	movlw	1
  9828  0315  0250               	subwf	_ui16_Speed_mat+1,w
  9829  0316  302D               	movlw	45
  9830  0317  1903               	skipnz
  9831  0318  024F               	subwf	_ui16_Speed_mat,w
  9832  0319  1C03               	btfss	3,0
  9833  031A  2B23               	goto	l9497
  9834  031B                     l9495:	
  9835                           ;BVH2_Appl_Layer.c: 1064: }
  9836                           
  9837                           ;BVH2_Appl_Layer.c: 1062: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1063: (UInt8)2;
  9838                           
  9839                           
  9840                           ;BVH2_Appl_Layer.c: 1065: else {;BVH2_Appl_Layer.c: 1066: Cb24_BadCnt = Cb24_BadCnt + 1 
      +                          ;
  9841  031B  0023               	movlb	3	; select bank3
  9842  031C  0820               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
  9843  031D  3E01               	addlw	1
  9844  031E  00A0               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9845  031F  3000               	movlw	0
  9846  0320  3D21               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
  9847  0321  00A1               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9848  0322  2BAC               	goto	l9555
  9849  0323                     l9497:	
  9850                           ;BVH2_Appl_Layer.c: 1074: };BVH2_Appl_Layer.c: 1075: case (UInt8)5: {
  9851                           
  9852                           ;BVH2_Appl_Layer.c: 1068: };BVH2_Appl_Layer.c: 1069: };BVH2_Appl_Layer.c: 1073: break;
  9853                           
  9854                           ;BVH2_Appl_Layer.c: 1067: Cb24_StateCnt = Cb24_StateCnt + 1 ;
  9855                           
  9856                           
  9857                           ;BVH2_Appl_Layer.c: 1082: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1083: (UInt8)2;
  9858  0323  0021               	movlb	1	; select bank1
  9859  0324  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9860  0325  39F8               	andlw	-8
  9861  0326  3802               	iorlw	2
  9862  0327  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9863                           
  9864                           ;BVH2_Appl_Layer.c: 1087: break;
  9865  0328  2BEE               	goto	l9581
  9866  0329                     l9499:	
  9867                           ;BVH2_Appl_Layer.c: 1088: };BVH2_Appl_Layer.c: 1089: case (UInt8)6: {
  9868                           
  9869                           
  9870                           ;BVH2_Appl_Layer.c: 1092: if (Cb24_StateCnt > 10) {
  9871  0329  3000               	movlw	0
  9872  032A  0020               	movlb	0	; select bank0
  9873  032B  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9874  032C  300B               	movlw	11
  9875  032D  1903               	skipnz
  9876  032E  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9877  032F  1C03               	skipc
  9878  0330  2B81               	goto	l9541
  9879                           
  9880                           ;BVH2_Appl_Layer.c: 1093: if (Cb24_RestartCounter == 10) {
  9881  0331  300A               	movlw	10
  9882  0332  0021               	movlb	1	; select bank1
  9883  0333  0645               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),w
  9884  0334  1D03               	btfss	3,2
  9885  0335  2B42               	goto	l9513
  9886                           
  9887                           ;BVH2_Appl_Layer.c: 1095: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9888  0336  30F8               	movlw	-8
  9889  0337  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9890                           
  9891                           ;BVH2_Appl_Layer.c: 1096: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  9892  0338  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9893                           
  9894                           ;BVH2_Appl_Layer.c: 1097: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
  9895  0339  1421               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  9896                           
  9897                           ;BVH2_Appl_Layer.c: 1098: Cb24_oStalledAlarm = 1;
  9898  033A  0022               	movlb	2	; select bank2
  9899  033B  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9900  033C  0AB3               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9901                           
  9902                           ;BVH2_Appl_Layer.c: 1099: Cb24_oMotorStalled = 1;
  9903  033D  0021               	movlb	1	; select bank1
  9904  033E  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9905  033F  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9906                           
  9907                           ;BVH2_Appl_Layer.c: 1100: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9908  0340  3018               	movlw	24
  9909  0341  2B79               	goto	L30
  9910  0342                     l9513:	
  9911                           ;BVH2_Appl_Layer.c: 1101: }
  9912                           
  9913                           
  9914                           ;BVH2_Appl_Layer.c: 1102: else {;BVH2_Appl_Layer.c: 1105: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  9915  0342  3000               	movlw	0
  9916  0343  0020               	movlb	0	; select bank0
  9917  0344  0250               	subwf	_ui16_Speed_mat+1,w
  9918  0345  3005               	movlw	5
  9919  0346  1903               	skipnz
  9920  0347  024F               	subwf	_ui16_Speed_mat,w
  9921  0348  1C03               	skipc
  9922  0349  2B51               	goto	l9517
  9923  034A  3001               	movlw	1
  9924  034B  0250               	subwf	_ui16_Speed_mat+1,w
  9925  034C  302D               	movlw	45
  9926  034D  1903               	skipnz
  9927  034E  024F               	subwf	_ui16_Speed_mat,w
  9928  034F  1C03               	skipc
  9929  0350  2B60               	goto	l9527
  9930  0351                     l9517:	
  9931                           
  9932                           ;BVH2_Appl_Layer.c: 1108: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1109: (UInt8)4;
  9933  0351  0021               	movlb	1	; select bank1
  9934  0352  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9935  0353  39F8               	andlw	-8
  9936  0354  3804               	iorlw	4
  9937  0355  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9938                           
  9939                           ;BVH2_Appl_Layer.c: 1110: Cb24_StateCnt = 0 ;
  9940  0356  0020               	movlb	0	; select bank0
  9941  0357  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9942  0358  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9943                           
  9944                           ;BVH2_Appl_Layer.c: 1111: Cb24_oMotorStalled = 1;
  9945  0359  0021               	movlb	1	; select bank1
  9946  035A  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9947  035B  0ABE               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  9948                           
  9949                           ;BVH2_Appl_Layer.c: 1112: Cb24_oStalledAlarm = 1;
  9950  035C  0022               	movlb	2	; select bank2
  9951  035D  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9952  035E  0AB3               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9953  035F  2B77               	goto	L44
  9954  0360                     l9527:	
  9955                           ;BVH2_Appl_Layer.c: 1114: }
  9956                           
  9957                           ;BVH2_Appl_Layer.c: 1113: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9958                           
  9959                           
  9960                           ;BVH2_Appl_Layer.c: 1115: else {;BVH2_Appl_Layer.c: 1116: if (Cb24_StateCnt > 200) {
  9961  0360  3000               	movlw	0
  9962  0361  0020               	movlb	0	; select bank0
  9963  0362  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  9964  0363  30C9               	movlw	201
  9965  0364  1903               	skipnz
  9966  0365  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  9967  0366  1C03               	skipc
  9968  0367  2B7B               	goto	l9539
  9969                           
  9970                           ;BVH2_Appl_Layer.c: 1119: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1120: (UInt8)5;
  9971  0368  0021               	movlb	1	; select bank1
  9972  0369  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9973  036A  39F8               	andlw	-8
  9974  036B  3805               	iorlw	5
  9975  036C  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9976                           
  9977                           ;BVH2_Appl_Layer.c: 1121: Cb24_StateCnt = 0 ;
  9978  036D  0020               	movlb	0	; select bank0
  9979  036E  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  9980  036F  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  9981                           
  9982                           ;BVH2_Appl_Layer.c: 1122: Cb24_BadCnt = 0 ;
  9983  0370  0023               	movlb	3	; select bank3
  9984  0371  01A0               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
  9985  0372  01A1               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
  9986                           
  9987                           ;BVH2_Appl_Layer.c: 1123: Cb24_oMotorStalled = 0;
  9988  0373  0021               	movlb	1	; select bank1
  9989  0374  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  9990                           
  9991                           ;BVH2_Appl_Layer.c: 1126: Cb24_oStalledAlarm = 0;
  9992  0375  0022               	movlb	2	; select bank2
  9993  0376  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9994  0377                     L44:	
  9995                           
  9996                           ;BVH2_Appl_Layer.c: 1127: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9997  0377  3018               	movlw	24
  9998  0378  0021               	movlb	1	; select bank1
  9999  0379                     L30:	
 10000  0379  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10001                           
 10002                           ;BVH2_Appl_Layer.c: 1128: }
 10003  037A  2B84               	goto	l1500
 10004  037B                     l9539:	
 10005                           
 10006                           ;BVH2_Appl_Layer.c: 1129: else {;BVH2_Appl_Layer.c: 1130: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 1 ;
 10007  037B  0021               	movlb	1	; select bank1
 10008  037C  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10009  037D  39E7               	andlw	-25
 10010  037E  3808               	iorlw	8
 10011  037F  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10012                           
 10013                           ;BVH2_Appl_Layer.c: 1131: };BVH2_Appl_Layer.c: 1132: };BVH2_Appl_Layer.c: 1133: };BVH2_A
      +                          ppl_Layer.c: 1134: }
 10014  0380  2B84               	goto	l1500
 10015  0381                     l9541:	
 10016                           
 10017                           ;BVH2_Appl_Layer.c: 1135: else {;BVH2_Appl_Layer.c: 1136: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 0 ;
 10018  0381  30E7               	movlw	-25
 10019  0382  0021               	movlb	1	; select bank1
 10020  0383  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10021  0384                     l1500:	
 10022                           
 10023                           ;BVH2_Appl_Layer.c: 1137: };BVH2_Appl_Layer.c: 1138: if (SIBFS_Motor_Stalled_b.Cb24_glfl
      +                          ag <= 2) {
 10024  0384  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10025  0385  0020               	movlb	0	; select bank0
 10026  0386  00B7               	movwf	??_BVH2_Appl_Layer
 10027  0387  0CB7               	rrf	??_BVH2_Appl_Layer,f
 10028  0388  0C37               	rrf	??_BVH2_Appl_Layer,w
 10029  0389  3903               	andlw	3
 10030  038A  3A03               	xorlw	3
 10031  038B  1903               	skipnz
 10032  038C  2BEE               	goto	l9581
 10033  038D  2BAD               	goto	L31
 10034  038E                     l9545:	
 10035                           ;BVH2_Appl_Layer.c: 1145: };BVH2_Appl_Layer.c: 1146: case (UInt8)4: {
 10036                           
 10037                           ;BVH2_Appl_Layer.c: 1140: };BVH2_Appl_Layer.c: 1144: break;
 10038                           
 10039                           ;BVH2_Appl_Layer.c: 1139: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 10040                           
 10041                           
 10042                           ;BVH2_Appl_Layer.c: 1149: if (Cb24_StateCnt > 200) {
 10043  038E  3000               	movlw	0
 10044  038F  0020               	movlb	0	; select bank0
 10045  0390  024C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 10046  0391  30C9               	movlw	201
 10047  0392  1903               	skipnz
 10048  0393  024B               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 10049  0394  1C03               	skipc
 10050  0395  2BAC               	goto	l9555
 10051                           
 10052                           ;BVH2_Appl_Layer.c: 1153: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1154: (UInt8)6;
 10053  0396  0021               	movlb	1	; select bank1
 10054  0397  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10055  0398  39F8               	andlw	-8
 10056  0399  3806               	iorlw	6
 10057  039A  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10058                           
 10059                           ;BVH2_Appl_Layer.c: 1155: Cb24_StateCnt = 0 ;
 10060  039B  0020               	movlb	0	; select bank0
 10061  039C  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 10062  039D  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 10063                           
 10064                           ;BVH2_Appl_Layer.c: 1156: Cb24_oMotorStalled = 0;
 10065  039E  0021               	movlb	1	; select bank1
 10066  039F  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
 10067                           
 10068                           ;BVH2_Appl_Layer.c: 1157: Cb24_oStalledAlarm = 1;
 10069  03A0  0022               	movlb	2	; select bank2
 10070  03A1  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10071  03A2  0AB3               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 10072                           
 10073                           ;BVH2_Appl_Layer.c: 1158: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
 10074  03A3  0021               	movlb	1	; select bank1
 10075  03A4  0845               	movf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),w
 10076  03A5  3E01               	addlw	1
 10077  03A6  0020               	movlb	0	; select bank0
 10078  03A7  00B7               	movwf	??_BVH2_Appl_Layer
 10079  03A8  0837               	movf	??_BVH2_Appl_Layer,w
 10080  03A9  0021               	movlb	1	; select bank1
 10081  03AA  00C5               	movwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128)
 10082                           
 10083                           ;BVH2_Appl_Layer.c: 1159: }
 10084  03AB  2BEE               	goto	l9581
 10085  03AC                     l9555:	
 10086                           
 10087                           ;BVH2_Appl_Layer.c: 1160: else {;BVH2_Appl_Layer.c: 1161: Cb24_StateCnt = Cb24_StateCnt 
      +                          + 1 ;
 10088  03AC  0020               	movlb	0	; select bank0
 10089  03AD                     L31:	
 10090  03AD  084B               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
 10091  03AE  3E01               	addlw	1
 10092  03AF  00CB               	movwf	BVH2_Appl_Layer@Cb24_StateCnt
 10093  03B0  3000               	movlw	0
 10094  03B1  3D4C               	addwfc	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 10095  03B2  00CC               	movwf	BVH2_Appl_Layer@Cb24_StateCnt+1
 10096                           
 10097                           ;BVH2_Appl_Layer.c: 1167: };BVH2_Appl_Layer.c: 1168: }
 10098                           
 10099                           ;BVH2_Appl_Layer.c: 1162: };BVH2_Appl_Layer.c: 1166: break;
 10100  03B3  2BEE               	goto	l9581
 10101  03B4                     l9559:	
 10102  03B4  0021               	movlb	1	; select bank1
 10103  03B5  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10104  03B6  3907               	andlw	7
 10105                           
 10106                           ; Switch size 1, requested type "space"
 10107                           ; Number of cases is 6, Range of values is 1 to 6
 10108                           ; switch strategies available:
 10109                           ; Name         Instructions Cycles
 10110                           ; simple_byte           19    10 (average)
 10111                           ; direct_byte           21     9 (fixed)
 10112                           ; jumptable            263     9 (fixed)
 10113                           ;	Chosen strategy is simple_byte
 10114  03B7  3A01               	xorlw	1	; case 1
 10115  03B8  1903               	skipnz
 10116  03B9  2AF5               	goto	l9479
 10117  03BA  3A03               	xorlw	3	; case 2
 10118  03BB  1903               	skipnz
 10119  03BC  2AC3               	goto	l9455
 10120  03BD  3A01               	xorlw	1	; case 3
 10121  03BE  1903               	skipnz
 10122  03BF  2ABB               	goto	l9447
 10123  03C0  3A07               	xorlw	7	; case 4
 10124  03C1  1903               	skipnz
 10125  03C2  2B8E               	goto	l9545
 10126  03C3  3A01               	xorlw	1	; case 5
 10127  03C4  1903               	skipnz
 10128  03C5  2B23               	goto	l9497
 10129  03C6  3A03               	xorlw	3	; case 6
 10130  03C7  1903               	skipnz
 10131  03C8  2B29               	goto	l9499
 10132  03C9  2BEE               	goto	l9581
 10133                           
 10134                           ;BVH2_Appl_Layer.c: 1169: };BVH2_Appl_Layer.c: 1172: }
 10135  03CA  2BEE               	goto	l9581
 10136  03CB                     l1459:	
 10137                           
 10138                           ;BVH2_Appl_Layer.c: 1173: else {;BVH2_Appl_Layer.c: 1175: if (SIBFS_Motor_Stalled_b.Cb32
      +                          _default) {
 10139  03CB  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10140  03CC  2BDF               	goto	l1506
 10141                           
 10142                           ;BVH2_Appl_Layer.c: 1180: if (!(Sb1_Logical_Operator1)) {
 10143  03CD  0025               	movlb	5	; select bank5
 10144  03CE  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
 10145  03CF  1D03               	btfss	3,2
 10146  03D0  2BEE               	goto	l9581
 10147                           
 10148                           ;BVH2_Appl_Layer.c: 1183: SIBFS_Motor_Stalled_b.Cb32_default = 0;
 10149  03D1  0021               	movlb	1	; select bank1
 10150  03D2  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10151                           
 10152                           ;BVH2_Appl_Layer.c: 1184: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
 10153  03D3  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 10154                           
 10155                           ;BVH2_Appl_Layer.c: 1185: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
 10156  03D4  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10157  03D5  39F8               	andlw	-8
 10158  03D6  3803               	iorlw	3
 10159  03D7  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10160                           
 10161                           ;BVH2_Appl_Layer.c: 1186: Cb24_StateCnt = 0 ;
 10162  03D8  0020               	movlb	0	; select bank0
 10163  03D9  01CB               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 10164  03DA  01CC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 10165                           
 10166                           ;BVH2_Appl_Layer.c: 1187: Cb24_BadCnt = 0 ;
 10167  03DB  0023               	movlb	3	; select bank3
 10168  03DC  01A0               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 10169  03DD  01A1               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 10170                           
 10171                           ;BVH2_Appl_Layer.c: 1188: };BVH2_Appl_Layer.c: 1191: }
 10172  03DE  2BEE               	goto	l9581
 10173  03DF                     l1506:	
 10174                           
 10175                           ;BVH2_Appl_Layer.c: 1192: else {;BVH2_Appl_Layer.c: 1194: if (!(SIBFS_Motor_Stalled_b.Cb
      +                          33_Stop)) {
 10176  03DF  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 10177                           
 10178                           ;BVH2_Appl_Layer.c: 1196: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
 10179  03E0  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 10180  03E1  2BEE               	goto	l9581
 10181                           
 10182                           ;BVH2_Appl_Layer.c: 1197: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
 10183  03E2  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 10184                           
 10185                           ;BVH2_Appl_Layer.c: 1200: if (Cb24_Reset) {
 10186  03E3  0025               	movlb	5	; select bank5
 10187  03E4  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+640),w
 10188  03E5  1903               	btfsc	3,2
 10189  03E6  2BEE               	goto	l9581
 10190                           
 10191                           ;BVH2_Appl_Layer.c: 1202: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 10192  03E7  0021               	movlb	1	; select bank1
 10193  03E8                     L43:	
 10194  03E8  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10195                           
 10196                           ;BVH2_Appl_Layer.c: 1203: Cb24_oMotorStalled = 0;
 10197  03E9  01BE               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
 10198                           
 10199                           ;BVH2_Appl_Layer.c: 1204: Cb24_oStalledAlarm = 0;
 10200  03EA  0022               	movlb	2	; select bank2
 10201  03EB  01B3               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10202                           
 10203                           ;BVH2_Appl_Layer.c: 1205: Cb24_RestartCounter = 0 ;
 10204  03EC  0021               	movlb	1	; select bank1
 10205  03ED  01C5               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128)
 10206  03EE                     l9581:	
 10207                           
 10208                           ;BVH2_Appl_Layer.c: 1206: };BVH2_Appl_Layer.c: 1207: };BVH2_Appl_Layer.c: 1208: };BVH2_A
      +                          ppl_Layer.c: 1209: };BVH2_Appl_Layer.c: 1210: };BVH2_Appl_Layer.c: 1215: bool_StalledMot
      +                          orStop = Cb24_oMotorStalled;
 10209  03EE  0021               	movlb	1	; select bank1
 10210  03EF  083E               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),w
 10211  03F0  0020               	movlb	0	; select bank0
 10212  03F1  00B7               	movwf	??_BVH2_Appl_Layer
 10213  03F2  0837               	movf	??_BVH2_Appl_Layer,w
 10214  03F3  0023               	movlb	3	; select bank3
 10215  03F4  00DA               	movwf	_bool_StalledMotorStop^(0+384)
 10216                           
 10217                           ;BVH2_Appl_Layer.c: 1216: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
 10218  03F5  0025               	movlb	5	; select bank5
 10219  03F6  01AB               	clrf	_BVH2_Appl_Layer$1059^(0+640)
 10220  03F7  0AAB               	incf	_BVH2_Appl_Layer$1059^(0+640),f
 10221  03F8  0022               	movlb	2	; select bank2
 10222  03F9  083C               	movf	_Cb34_odFixedValueSel^(0+256),w
 10223  03FA  1D03               	btfss	3,2
 10224  03FB  2C01               	goto	l9591
 10225  03FC  0838               	movf	_Cb56_odFixedValueSel^(0+256),w
 10226  03FD  1D03               	btfss	3,2
 10227  03FE  2C01               	goto	l9591
 10228  03FF  0025               	movlb	5	; select bank5
 10229  0400  01AB               	clrf	_BVH2_Appl_Layer$1059^(0+640)
 10230  0401                     l9591:	
 10231  0401  0025               	movlb	5	; select bank5
 10232  0402  082B               	movf	_BVH2_Appl_Layer$1059^(0+640),w
 10233  0403  0020               	movlb	0	; select bank0
 10234  0404  00B7               	movwf	??_BVH2_Appl_Layer
 10235  0405  0837               	movf	??_BVH2_Appl_Layer,w
 10236  0406  0025               	movlb	5	; select bank5
 10237  0407  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640)
 10238                           
 10239                           ;BVH2_Appl_Layer.c: 1220: if (bool_start_demand_mat) {
 10240  0408  0021               	movlb	1	; select bank1
 10241  0409  0860               	movf	_bool_start_demand_mat^(0+128),w
 10242  040A  1903               	btfsc	3,2
 10243  040B  2C13               	goto	l9597
 10244                           
 10245                           ;BVH2_Appl_Layer.c: 1221: Sb2_Switch5 = ui8_fixed_start_speed_mat;
 10246  040C  0023               	movlb	3	; select bank3
 10247  040D  083F               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
 10248  040E  0025               	movlb	5	; select bank5
 10249  040F  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
 10250  0410  0023               	movlb	3	; select bank3
 10251  0411  083E               	movf	_ui8_fixed_start_speed_mat^(0+384),w
 10252  0412  2C2F               	goto	L34
 10253  0413                     l9597:	
 10254                           ;BVH2_Appl_Layer.c: 1222: }
 10255                           
 10256                           
 10257                           ;BVH2_Appl_Layer.c: 1223: else {;BVH2_Appl_Layer.c: 1226: if (Cb34_odFixedLowValueSel) {
 10258  0413  0022               	movlb	2	; select bank2
 10259  0414  083D               	movf	_Cb34_odFixedLowValueSel^(0+256),w
 10260  0415  1903               	btfsc	3,2
 10261  0416  2C1E               	goto	l9601
 10262                           
 10263                           ;BVH2_Appl_Layer.c: 1227: Sb2_Switch5 = ui16_Speed_demand_mat_min;
 10264  0417  0023               	movlb	3	; select bank3
 10265  0418  082D               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
 10266  0419  0025               	movlb	5	; select bank5
 10267  041A  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
 10268  041B  0023               	movlb	3	; select bank3
 10269  041C  082C               	movf	_ui16_Speed_demand_mat_min^(0+384),w
 10270  041D  2C2F               	goto	L34
 10271  041E                     l9601:	
 10272                           ;BVH2_Appl_Layer.c: 1228: }
 10273                           
 10274                           
 10275                           ;BVH2_Appl_Layer.c: 1229: else {;BVH2_Appl_Layer.c: 1232: if (Sb1_Logical_Operator5) {
 10276  041E  0025               	movlb	5	; select bank5
 10277  041F  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640),w
 10278  0420  1903               	btfsc	3,2
 10279  0421  2C29               	goto	l9605
 10280                           
 10281                           ;BVH2_Appl_Layer.c: 1233: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
 10282  0422  0023               	movlb	3	; select bank3
 10283  0423  082F               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
 10284  0424  0025               	movlb	5	; select bank5
 10285  0425  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
 10286  0426  0023               	movlb	3	; select bank3
 10287  0427  082E               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
 10288  0428  2C2F               	goto	L34
 10289  0429                     l9605:	
 10290                           ;BVH2_Appl_Layer.c: 1234: }
 10291                           
 10292                           
 10293                           ;BVH2_Appl_Layer.c: 1235: else {;BVH2_Appl_Layer.c: 1236: Sb2_Switch5 = ui16_Speed_deman
      +                          d_mat;
 10294  0429  0023               	movlb	3	; select bank3
 10295  042A  0831               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 10296  042B  0025               	movlb	5	; select bank5
 10297  042C  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640)
 10298  042D  0023               	movlb	3	; select bank3
 10299  042E  0830               	movf	_ui16_Speed_demand_mat^(0+384),w
 10300  042F                     L34:	
 10301  042F  0025               	movlb	5	; select bank5
 10302  0430  00B7               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+640)
 10303                           
 10304                           ;BVH2_Appl_Layer.c: 1237: };BVH2_Appl_Layer.c: 1238: };BVH2_Appl_Layer.c: 1239: };BVH2_A
      +                          ppl_Layer.c: 1242: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
 10305  0431  0937               	comf	BVH2_Appl_Layer@Sb2_Switch5^(0+640),w
 10306  0432  0020               	movlb	0	; select bank0
 10307  0433  00B7               	movwf	??_BVH2_Appl_Layer
 10308  0434  0025               	movlb	5	; select bank5
 10309  0435  0938               	comf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+640),w
 10310  0436  0020               	movlb	0	; select bank0
 10311  0437  00B8               	movwf	??_BVH2_Appl_Layer+1
 10312  0438  0AB7               	incf	??_BVH2_Appl_Layer,f
 10313  0439  1903               	skipnz
 10314  043A  0AB8               	incf	??_BVH2_Appl_Layer+1,f
 10315  043B  084F               	movf	_ui16_Speed_mat,w
 10316  043C  0737               	addwf	??_BVH2_Appl_Layer,w
 10317  043D  0025               	movlb	5	; select bank5
 10318  043E  00AF               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+640)
 10319  043F  0020               	movlb	0	; select bank0
 10320  0440  0850               	movf	_ui16_Speed_mat+1,w
 10321  0441  3D38               	addwfc	??_BVH2_Appl_Layer+1,w
 10322  0442  0025               	movlb	5	; select bank5
 10323  0443  00B0               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640)
 10324                           
 10325                           ;BVH2_Appl_Layer.c: 1247: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 10326  0444  0021               	movlb	1	; select bank1
 10327  0445  18C1               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10328  0446  2C9C               	goto	l9651
 10329                           
 10330                           ;BVH2_Appl_Layer.c: 1267: else {;BVH2_Appl_Layer.c: 1269: if (SIBFS_Dry_Running_b.Cb16_D
      +                          ryRunning) {
 10331                           
 10332                           ;BVH2_Appl_Layer.c: 1263: };BVH2_Appl_Layer.c: 1266: }
 10333  0447  1D41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10334  0448  2C94               	goto	l1523
 10335                           
 10336                           ;BVH2_Appl_Layer.c: 1273: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 10337  0449  1DC1               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10338                           
 10339                           ;BVH2_Appl_Layer.c: 1275: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 10340  044A  1E41               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10341  044B  2C9C               	goto	l9651
 10342                           
 10343                           ;BVH2_Appl_Layer.c: 1282: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >;BVH2_Appl_Layer.c: 1283: 400) || (ui16_Speed_mat < 80)) {
 10344  044C  0024               	movlb	4	; select bank4
 10345  044D  086E               	movf	_ui16_dryRun_Thresh^(0+512),w
 10346  044E  3E05               	addlw	5
 10347  044F  0020               	movlb	0	; select bank0
 10348  0450  00B7               	movwf	??_BVH2_Appl_Layer
 10349  0451  3000               	movlw	0
 10350  0452  0024               	movlb	4	; select bank4
 10351  0453  3D6F               	addwfc	(_ui16_dryRun_Thresh+1)^(0+512),w
 10352  0454  0020               	movlb	0	; select bank0
 10353  0455  00B8               	movwf	??_BVH2_Appl_Layer+1
 10354  0456  0021               	movlb	1	; select bank1
 10355  0457  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10356  0458  0020               	movlb	0	; select bank0
 10357  0459  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10358  045A  1D03               	skipz
 10359  045B  2C60               	goto	u7955
 10360  045C  0021               	movlb	1	; select bank1
 10361  045D  082C               	movf	_ui16_mat_Current^(0+128),w
 10362  045E  0020               	movlb	0	; select bank0
 10363  045F  0237               	subwf	??_BVH2_Appl_Layer,w
 10364  0460                     u7955:	
 10365  0460  1C03               	skipc
 10366  0461  2C70               	goto	l1528
 10367  0462  3001               	movlw	1
 10368  0463  0250               	subwf	_ui16_Speed_mat+1,w
 10369  0464  3091               	movlw	145
 10370  0465  1903               	skipnz
 10371  0466  024F               	subwf	_ui16_Speed_mat,w
 10372  0467  1803               	skipnc
 10373  0468  2C70               	goto	l1528
 10374  0469  3000               	movlw	0
 10375  046A  0250               	subwf	_ui16_Speed_mat+1,w
 10376  046B  3050               	movlw	80
 10377  046C  1903               	skipnz
 10378  046D  024F               	subwf	_ui16_Speed_mat,w
 10379  046E  1803               	skipnc
 10380  046F  2C72               	goto	l9629
 10381  0470                     l1528:	
 10382                           
 10383                           ;BVH2_Appl_Layer.c: 1285: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10384  0470  0021               	movlb	1	; select bank1
 10385  0471  2C7B               	goto	L51
 10386  0472                     l9629:	
 10387                           ;BVH2_Appl_Layer.c: 1289: }
 10388                           
 10389                           ;BVH2_Appl_Layer.c: 1288: Cb14_oDryRunAlarm = 0;
 10390                           
 10391                           ;BVH2_Appl_Layer.c: 1287: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10392                           
 10393                           ;BVH2_Appl_Layer.c: 1286: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 10394                           
 10395                           
 10396                           ;BVH2_Appl_Layer.c: 1290: else {;BVH2_Appl_Layer.c: 1291: if ((ui8_PWM_dc_mat < 20) && (
      +                          ui8_PWM_dc_mat > 4)) {
 10397  0472  3014               	movlw	20
 10398  0473  0021               	movlb	1	; select bank1
 10399  0474  0250               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10400  0475  1803               	skipnc
 10401  0476  2C7E               	goto	l9637
 10402  0477  3005               	movlw	5
 10403  0478  0250               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10404  0479  1C03               	skipc
 10405  047A  2C7E               	goto	l9637
 10406  047B                     L51:	
 10407                           
 10408                           ;BVH2_Appl_Layer.c: 1293: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10409  047B  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10410                           
 10411                           ;BVH2_Appl_Layer.c: 1294: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 10412  047C  1141               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10413  047D  2C9A               	goto	l9647
 10414  047E                     l9637:	
 10415                           ;BVH2_Appl_Layer.c: 1297: }
 10416                           
 10417                           ;BVH2_Appl_Layer.c: 1296: Cb14_oDryRunAlarm = 0;
 10418                           
 10419                           ;BVH2_Appl_Layer.c: 1295: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10420                           
 10421                           
 10422                           ;BVH2_Appl_Layer.c: 1298: else {;BVH2_Appl_Layer.c: 1299: if (Cb14_StateCnt > 2000) {
 10423  047E  3007               	movlw	7
 10424  047F  0023               	movlb	3	; select bank3
 10425  0480  0223               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 10426  0481  30D1               	movlw	209
 10427  0482  1903               	skipnz
 10428  0483  0222               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 10429  0484  1C03               	skipc
 10430  0485  2C8C               	goto	l9641
 10431                           
 10432                           ;BVH2_Appl_Layer.c: 1301: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10433  0486  0021               	movlb	1	; select bank1
 10434  0487  1241               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10435                           
 10436                           ;BVH2_Appl_Layer.c: 1302: SIBFS_Dry_Running_b.Cb17_redState = 1;
 10437  0488  15C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10438                           
 10439                           ;BVH2_Appl_Layer.c: 1303: Cb14_oDryRunAlarm = 1;
 10440  0489  01BF               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 10441  048A  0ABF               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 10442                           
 10443                           ;BVH2_Appl_Layer.c: 1304: }
 10444  048B  2C9C               	goto	l9651
 10445  048C                     l9641:	
 10446                           
 10447                           ;BVH2_Appl_Layer.c: 1305: else {;BVH2_Appl_Layer.c: 1306: Cb14_StateCnt = Cb14_StateCnt 
      +                          + 1 ;
 10448  048C  0023               	movlb	3	; select bank3
 10449  048D  0822               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 10450  048E  3E01               	addlw	1
 10451  048F  00A2               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384)
 10452  0490  3000               	movlw	0
 10453  0491  3D23               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 10454  0492  00A3               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384)
 10455                           
 10456                           ;BVH2_Appl_Layer.c: 1307: };BVH2_Appl_Layer.c: 1308: };BVH2_Appl_Layer.c: 1309: };BVH2_A
      +                          ppl_Layer.c: 1312: };BVH2_Appl_Layer.c: 1313: };BVH2_Appl_Layer.c: 1316: }
 10457  0493  2C9C               	goto	l9651
 10458  0494                     l1523:	
 10459                           
 10460                           ;BVH2_Appl_Layer.c: 1317: else {;BVH2_Appl_Layer.c: 1319: if (!(SIBFS_Dry_Running_b.Cb14
      +                          _Dry_Running)) {
 10461  0494  1841               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 10462  0495  2C9C               	goto	l9651
 10463                           
 10464                           ;BVH2_Appl_Layer.c: 1320: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
 10465  0496  1441               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 10466                           
 10467                           ;BVH2_Appl_Layer.c: 1323: if (ui8_ResetMatlab == 1) {
 10468  0497  036F               	decf	_ui8_ResetMatlab^(0+128),w
 10469  0498  1D03               	btfss	3,2
 10470  0499  2C9C               	goto	l9651
 10471  049A                     l9647:	
 10472                           
 10473                           ;BVH2_Appl_Layer.c: 1325: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10474  049A  14C1               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10475                           
 10476                           ;BVH2_Appl_Layer.c: 1326: Cb14_oDryRunAlarm = 0;
 10477  049B  01BF               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 10478  049C                     l9651:	
 10479                           
 10480                           ;BVH2_Appl_Layer.c: 1327: };BVH2_Appl_Layer.c: 1328: };BVH2_Appl_Layer.c: 1329: };BVH2_A
      +                          ppl_Layer.c: 1330: };BVH2_Appl_Layer.c: 1337: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenSta
      +                          te) {
 10481  049C  0020               	movlb	0	; select bank0
 10482  049D  1CD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10483  049E  2CA7               	goto	l1537
 10484                           
 10485                           ;BVH2_Appl_Layer.c: 1342: if (Cb14_oDryRunAlarm) {
 10486  049F  0021               	movlb	1	; select bank1
 10487  04A0  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10488  04A1  1903               	btfsc	3,2
 10489  04A2  2CF9               	goto	l9699
 10490                           
 10491                           ;BVH2_Appl_Layer.c: 1345: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 10492  04A3  0020               	movlb	0	; select bank0
 10493  04A4  10D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10494                           
 10495                           ;BVH2_Appl_Layer.c: 1346: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
 10496  04A5  1555               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10497  04A6  2CD9               	goto	L45
 10498  04A7                     l1537:	
 10499                           ;BVH2_Appl_Layer.c: 1351: };BVH2_Appl_Layer.c: 1354: }
 10500                           
 10501                           ;BVH2_Appl_Layer.c: 1350: Cb19_oDryRun55 = 0;
 10502                           
 10503                           ;BVH2_Appl_Layer.c: 1349: Cb19_oDryRun66 = 1;
 10504                           
 10505                           ;BVH2_Appl_Layer.c: 1348: Cb19_Counter = 0 ;
 10506                           
 10507                           ;BVH2_Appl_Layer.c: 1347: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 10508                           
 10509                           
 10510                           ;BVH2_Appl_Layer.c: 1355: else {;BVH2_Appl_Layer.c: 1357: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b21_DryRunningAlarm) {
 10511  04A7  1D55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10512  04A8  2CEA               	goto	l1540
 10513                           
 10514                           ;BVH2_Appl_Layer.c: 1362: if (!(Cb14_oDryRunAlarm)) {
 10515  04A9  0021               	movlb	1	; select bank1
 10516  04AA  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10517  04AB  1D03               	btfss	3,2
 10518  04AC  2CB7               	goto	l1541
 10519                           
 10520                           ;BVH2_Appl_Layer.c: 1367: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 10521  04AD  0020               	movlb	0	; select bank0
 10522  04AE  1DD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10523  04AF  2CB2               	goto	l1542
 10524                           
 10525                           ;BVH2_Appl_Layer.c: 1368: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 10526  04B0  11D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10527                           
 10528                           ;BVH2_Appl_Layer.c: 1369: }
 10529  04B1  2CB5               	goto	l1543
 10530  04B2                     l1542:	
 10531                           
 10532                           ;BVH2_Appl_Layer.c: 1370: else {;BVH2_Appl_Layer.c: 1372: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
 10533  04B2  1E55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10534  04B3  2CB5               	goto	l1543
 10535                           
 10536                           ;BVH2_Appl_Layer.c: 1373: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 10537  04B4  1255               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10538  04B5                     l1543:	
 10539                           
 10540                           ;BVH2_Appl_Layer.c: 1374: };BVH2_Appl_Layer.c: 1375: };BVH2_Appl_Layer.c: 1376: SIBFS_Dr
      +                          y_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 10541  04B5  1155               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 10542  04B6  2CF2               	goto	L46
 10543  04B7                     l1541:	
 10544                           ;BVH2_Appl_Layer.c: 1381: }
 10545                           
 10546                           ;BVH2_Appl_Layer.c: 1380: Cb19_Counter = 0 ;
 10547                           
 10548                           ;BVH2_Appl_Layer.c: 1379: Cb19_oDryRun66 = 0;
 10549                           
 10550                           ;BVH2_Appl_Layer.c: 1378: Cb19_oDryRun55 = 0;
 10551                           
 10552                           ;BVH2_Appl_Layer.c: 1377: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 10553                           
 10554                           
 10555                           ;BVH2_Appl_Layer.c: 1382: else {;BVH2_Appl_Layer.c: 1384: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b22_DryRun66) {
 10556  04B7  0020               	movlb	0	; select bank0
 10557  04B8  1DD5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10558  04B9  2CCD               	goto	l1546
 10559                           
 10560                           ;BVH2_Appl_Layer.c: 1387: if (Cb19_Counter > 400) {
 10561  04BA  3001               	movlw	1
 10562  04BB  0021               	movlb	1	; select bank1
 10563  04BC  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10564  04BD  3091               	movlw	145
 10565  04BE  1903               	skipnz
 10566  04BF  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10567  04C0  1C03               	skipc
 10568  04C1  2CE2               	goto	l9689
 10569                           
 10570                           ;BVH2_Appl_Layer.c: 1390: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 10571  04C2  0020               	movlb	0	; select bank0
 10572  04C3  11D5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10573                           
 10574                           ;BVH2_Appl_Layer.c: 1391: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
 10575  04C4  1655               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10576                           
 10577                           ;BVH2_Appl_Layer.c: 1392: Cb19_Counter = 0 ;
 10578  04C5  0021               	movlb	1	; select bank1
 10579  04C6  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10580  04C7  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10581                           
 10582                           ;BVH2_Appl_Layer.c: 1393: Cb19_oDryRun66 = 0;
 10583  04C8  0022               	movlb	2	; select bank2
 10584  04C9  01B4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10585                           
 10586                           ;BVH2_Appl_Layer.c: 1394: Cb19_oDryRun55 = 1;
 10587  04CA  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10588  04CB  0AB5               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 10589  04CC  2CF9               	goto	l9699
 10590  04CD                     l1546:	
 10591                           ;BVH2_Appl_Layer.c: 1398: };BVH2_Appl_Layer.c: 1402: }
 10592                           
 10593                           ;BVH2_Appl_Layer.c: 1396: else {;BVH2_Appl_Layer.c: 1397: Cb19_Counter = Cb19_Counter + 
      +                          1 ;
 10594                           
 10595                           ;BVH2_Appl_Layer.c: 1395: }
 10596                           
 10597                           
 10598                           ;BVH2_Appl_Layer.c: 1403: else {;BVH2_Appl_Layer.c: 1405: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
 10599  04CD  1E55               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10600  04CE  2CF9               	goto	l9699
 10601                           
 10602                           ;BVH2_Appl_Layer.c: 1408: if (Cb19_Counter > 400) {
 10603  04CF  3001               	movlw	1
 10604  04D0  0021               	movlb	1	; select bank1
 10605  04D1  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10606  04D2  3091               	movlw	145
 10607  04D3  1903               	skipnz
 10608  04D4  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10609  04D5  1C03               	skipc
 10610  04D6  2CE2               	goto	l9689
 10611                           
 10612                           ;BVH2_Appl_Layer.c: 1411: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 10613  04D7  0020               	movlb	0	; select bank0
 10614  04D8  1255               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 10615  04D9                     L45:	
 10616                           
 10617                           ;BVH2_Appl_Layer.c: 1412: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 10618  04D9  15D5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 10619                           
 10620                           ;BVH2_Appl_Layer.c: 1413: Cb19_Counter = 0 ;
 10621  04DA  0021               	movlb	1	; select bank1
 10622  04DB  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10623  04DC  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10624                           
 10625                           ;BVH2_Appl_Layer.c: 1414: Cb19_oDryRun66 = 1;
 10626  04DD  0022               	movlb	2	; select bank2
 10627  04DE  01B4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10628  04DF  0AB4               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),f
 10629                           
 10630                           ;BVH2_Appl_Layer.c: 1415: Cb19_oDryRun55 = 0;
 10631  04E0  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10632                           
 10633                           ;BVH2_Appl_Layer.c: 1416: }
 10634  04E1  2CF9               	goto	l9699
 10635  04E2                     l9689:	
 10636                           
 10637                           ;BVH2_Appl_Layer.c: 1417: else {;BVH2_Appl_Layer.c: 1418: Cb19_Counter = Cb19_Counter + 
      +                          1 ;
 10638  04E2  0021               	movlb	1	; select bank1
 10639  04E3  0822               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 10640  04E4  3E01               	addlw	1
 10641  04E5  00A2               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10642  04E6  3000               	movlw	0
 10643  04E7  3D23               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 10644  04E8  00A3               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10645                           
 10646                           ;BVH2_Appl_Layer.c: 1419: };BVH2_Appl_Layer.c: 1423: };BVH2_Appl_Layer.c: 1424: };BVH2_A
      +                          ppl_Layer.c: 1425: };BVH2_Appl_Layer.c: 1428: }
 10647  04E9  2CF9               	goto	l9699
 10648  04EA                     l1540:	
 10649                           
 10650                           ;BVH2_Appl_Layer.c: 1429: else {;BVH2_Appl_Layer.c: 1431: if (!(SIBFS_Dry_RunningAlarm_b
      +                          .Cb19_Dry_RunningAlarm)) {
 10651  04EA  1855               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 10652  04EB  2CF9               	goto	l9699
 10653                           
 10654                           ;BVH2_Appl_Layer.c: 1432: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 10655  04EC  1455               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 10656                           
 10657                           ;BVH2_Appl_Layer.c: 1436: if (!(Cb14_oDryRunAlarm)) {
 10658  04ED  0021               	movlb	1	; select bank1
 10659  04EE  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10660  04EF  1D03               	btfss	3,2
 10661  04F0  2CF9               	goto	l9699
 10662                           
 10663                           ;BVH2_Appl_Layer.c: 1438: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 10664  04F1  0020               	movlb	0	; select bank0
 10665  04F2                     L46:	
 10666  04F2  14D5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 10667                           
 10668                           ;BVH2_Appl_Layer.c: 1439: Cb19_oDryRun55 = 0;
 10669  04F3  0022               	movlb	2	; select bank2
 10670  04F4  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10671                           
 10672                           ;BVH2_Appl_Layer.c: 1440: Cb19_oDryRun66 = 0;
 10673  04F5  01B4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10674                           
 10675                           ;BVH2_Appl_Layer.c: 1441: Cb19_Counter = 0 ;
 10676  04F6  0021               	movlb	1	; select bank1
 10677  04F7  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 10678  04F8  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 10679  04F9                     l9699:	
 10680                           
 10681                           ;BVH2_Appl_Layer.c: 1442: };BVH2_Appl_Layer.c: 1443: };BVH2_Appl_Layer.c: 1444: };BVH2_A
      +                          ppl_Layer.c: 1445: };BVH2_Appl_Layer.c: 1450: bool_DryRunningAlarm = Cb19_oDryRun66;
 10682  04F9  0022               	movlb	2	; select bank2
 10683  04FA  0834               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 10684  04FB  0020               	movlb	0	; select bank0
 10685  04FC  00B7               	movwf	??_BVH2_Appl_Layer
 10686  04FD  0837               	movf	??_BVH2_Appl_Layer,w
 10687  04FE  0021               	movlb	1	; select bank1
 10688  04FF  00D6               	movwf	_bool_DryRunningAlarm^(0+128)
 10689                           
 10690                           ;BVH2_Appl_Layer.c: 1453: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 10691  0500  0022               	movlb	2	; select bank2
 10692  0501  0832               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 10693  0502  0020               	movlb	0	; select bank0
 10694  0503  00B7               	movwf	??_BVH2_Appl_Layer
 10695  0504  0837               	movf	??_BVH2_Appl_Layer,w
 10696  0505  0021               	movlb	1	; select bank1
 10697  0506  00D7               	movwf	_bool_CPU_TempAlarm^(0+128)
 10698                           
 10699                           ;BVH2_Appl_Layer.c: 1458: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 10700  0507  1C42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10701  0508  2D23               	goto	l1556
 10702                           
 10703                           ;BVH2_Appl_Layer.c: 1463: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 10704  0509  0023               	movlb	3	; select bank3
 10705  050A  086D               	movf	_ui16_Current_Thresh^(0+384),w
 10706  050B  3EFE               	addlw	254
 10707  050C  0020               	movlb	0	; select bank0
 10708  050D  00B7               	movwf	??_BVH2_Appl_Layer
 10709  050E  30FF               	movlw	255
 10710  050F  0023               	movlb	3	; select bank3
 10711  0510  3D6E               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10712  0511  0020               	movlb	0	; select bank0
 10713  0512  00B8               	movwf	??_BVH2_Appl_Layer+1
 10714  0513  0021               	movlb	1	; select bank1
 10715  0514  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10716  0515  0020               	movlb	0	; select bank0
 10717  0516  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10718  0517  1D03               	skipz
 10719  0518  2D1D               	goto	u8165
 10720  0519  0021               	movlb	1	; select bank1
 10721  051A  082C               	movf	_ui16_mat_Current^(0+128),w
 10722  051B  0020               	movlb	0	; select bank0
 10723  051C  0237               	subwf	??_BVH2_Appl_Layer,w
 10724  051D                     u8165:	
 10725  051D  1803               	skipnc
 10726  051E  2D96               	goto	l9749
 10727                           
 10728                           ;BVH2_Appl_Layer.c: 1466: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 10729  051F  0021               	movlb	1	; select bank1
 10730  0520  1042               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10731                           
 10732                           ;BVH2_Appl_Layer.c: 1467: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
 10733  0521  1542               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10734  0522  2D8B               	goto	l9739
 10735  0523                     l1556:	
 10736                           ;BVH2_Appl_Layer.c: 1469: };BVH2_Appl_Layer.c: 1472: }
 10737                           
 10738                           ;BVH2_Appl_Layer.c: 1468: Cb9_StateCnt = 0 ;
 10739                           
 10740                           
 10741                           ;BVH2_Appl_Layer.c: 1473: else {;BVH2_Appl_Layer.c: 1475: if (SIBFS_Current_Analysis_low
      +                          _b.Cb11_Wait) {
 10742  0523  1CC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10743  0524  2D45               	goto	l1559
 10744                           
 10745                           ;BVH2_Appl_Layer.c: 1480: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 10746  0525  0023               	movlb	3	; select bank3
 10747  0526  086D               	movf	_ui16_Current_Thresh^(0+384),w
 10748  0527  3EFE               	addlw	254
 10749  0528  0020               	movlb	0	; select bank0
 10750  0529  00B7               	movwf	??_BVH2_Appl_Layer
 10751  052A  30FF               	movlw	255
 10752  052B  0023               	movlb	3	; select bank3
 10753  052C  3D6E               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10754  052D  0020               	movlb	0	; select bank0
 10755  052E  00B8               	movwf	??_BVH2_Appl_Layer+1
 10756  052F  0021               	movlb	1	; select bank1
 10757  0530  082D               	movf	(_ui16_mat_Current+1)^(0+128),w
 10758  0531  0020               	movlb	0	; select bank0
 10759  0532  0238               	subwf	??_BVH2_Appl_Layer+1,w
 10760  0533  1D03               	skipz
 10761  0534  2D39               	goto	u8185
 10762  0535  0021               	movlb	1	; select bank1
 10763  0536  082C               	movf	_ui16_mat_Current^(0+128),w
 10764  0537  0020               	movlb	0	; select bank0
 10765  0538  0237               	subwf	??_BVH2_Appl_Layer,w
 10766  0539                     u8185:	
 10767  0539  1803               	skipnc
 10768  053A  2D3E               	goto	l9715
 10769                           
 10770                           ;BVH2_Appl_Layer.c: 1482: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 10771  053B  0021               	movlb	1	; select bank1
 10772  053C  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10773  053D  2D64               	goto	L35
 10774  053E                     l9715:	
 10775                           ;BVH2_Appl_Layer.c: 1485: }
 10776                           
 10777                           ;BVH2_Appl_Layer.c: 1484: Cb9_oCurrentAlarm = 1;
 10778                           
 10779                           ;BVH2_Appl_Layer.c: 1483: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 10780                           
 10781                           
 10782                           ;BVH2_Appl_Layer.c: 1486: else {;BVH2_Appl_Layer.c: 1487: if (Cb9_StateCnt > 100) {
 10783  053E  3065               	movlw	101
 10784  053F  0021               	movlb	1	; select bank1
 10785  0540  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10786  0541  1C03               	skipc
 10787  0542  2D69               	goto	l9733
 10788                           
 10789                           ;BVH2_Appl_Layer.c: 1489: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 10790  0543  10C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10791  0544  2D93               	goto	l9745
 10792  0545                     l1559:	
 10793                           ;BVH2_Appl_Layer.c: 1495: };BVH2_Appl_Layer.c: 1496: };BVH2_Appl_Layer.c: 1499: }
 10794                           
 10795                           ;BVH2_Appl_Layer.c: 1493: else {;BVH2_Appl_Layer.c: 1494: Cb9_StateCnt = Cb9_StateCnt + 
      +                          1 ;
 10796                           
 10797                           ;BVH2_Appl_Layer.c: 1492: }
 10798                           
 10799                           ;BVH2_Appl_Layer.c: 1491: Cb9_oCurrentAlarm = 0;
 10800                           
 10801                           ;BVH2_Appl_Layer.c: 1490: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10802                           
 10803                           
 10804                           ;BVH2_Appl_Layer.c: 1500: else {;BVH2_Appl_Layer.c: 1502: if (SIBFS_Current_Analysis_low
      +                          _b.Cb12_CntOverCurrent) {
 10805  0545  1D42               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10806  0546  2D72               	goto	l1565
 10807                           
 10808                           ;BVH2_Appl_Layer.c: 1507: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 10809  0547  0023               	movlb	3	; select bank3
 10810  0548  086D               	movf	_ui16_Current_Thresh^(0+384),w
 10811  0549  3E02               	addlw	2
 10812  054A  0020               	movlb	0	; select bank0
 10813  054B  00B7               	movwf	??_BVH2_Appl_Layer
 10814  054C  3000               	movlw	0
 10815  054D  0023               	movlb	3	; select bank3
 10816  054E  3D6E               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10817  054F  0020               	movlb	0	; select bank0
 10818  0550  00B8               	movwf	??_BVH2_Appl_Layer+1
 10819  0551  0838               	movf	??_BVH2_Appl_Layer+1,w
 10820  0552  0021               	movlb	1	; select bank1
 10821  0553  022D               	subwf	(_ui16_mat_Current+1)^(0+128),w
 10822  0554  1D03               	skipz
 10823  0555  2D5A               	goto	u8215
 10824  0556  0020               	movlb	0	; select bank0
 10825  0557  0837               	movf	??_BVH2_Appl_Layer,w
 10826  0558  0021               	movlb	1	; select bank1
 10827  0559  022C               	subwf	_ui16_mat_Current^(0+128),w
 10828  055A                     u8215:	
 10829  055A  1803               	skipnc
 10830  055B  2D5E               	goto	l9729
 10831                           
 10832                           ;BVH2_Appl_Layer.c: 1509: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 10833  055C  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10834  055D  2D93               	goto	l9745
 10835  055E                     l9729:	
 10836                           ;BVH2_Appl_Layer.c: 1512: }
 10837                           
 10838                           ;BVH2_Appl_Layer.c: 1511: Cb9_oCurrentAlarm = 0;
 10839                           
 10840                           ;BVH2_Appl_Layer.c: 1510: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10841                           
 10842                           
 10843                           ;BVH2_Appl_Layer.c: 1513: else {;BVH2_Appl_Layer.c: 1514: if (Cb9_StateCnt > 50) {
 10844  055E  3033               	movlw	51
 10845  055F  0021               	movlb	1	; select bank1
 10846  0560  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10847  0561  1C03               	skipc
 10848  0562  2D69               	goto	l9733
 10849                           
 10850                           ;BVH2_Appl_Layer.c: 1516: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 10851  0563  1142               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10852  0564                     L35:	
 10853                           
 10854                           ;BVH2_Appl_Layer.c: 1517: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 10855  0564  15C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10856                           
 10857                           ;BVH2_Appl_Layer.c: 1518: Cb9_oCurrentAlarm = 1;
 10858  0565  0022               	movlb	2	; select bank2
 10859  0566  01AF               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 10860  0567  0AAF               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 10861                           
 10862                           ;BVH2_Appl_Layer.c: 1519: }
 10863  0568  2D96               	goto	l9749
 10864  0569                     l9733:	
 10865                           
 10866                           ;BVH2_Appl_Layer.c: 1520: else {;BVH2_Appl_Layer.c: 1521: Cb9_StateCnt = Cb9_StateCnt + 
      +                          1 ;
 10867  0569  0021               	movlb	1	; select bank1
 10868  056A  0843               	movf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10869  056B  3E01               	addlw	1
 10870  056C  0020               	movlb	0	; select bank0
 10871  056D  00B7               	movwf	??_BVH2_Appl_Layer
 10872  056E  0837               	movf	??_BVH2_Appl_Layer,w
 10873  056F  0021               	movlb	1	; select bank1
 10874  0570  00C3               	movwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 10875                           
 10876                           ;BVH2_Appl_Layer.c: 1522: };BVH2_Appl_Layer.c: 1523: };BVH2_Appl_Layer.c: 1526: }
 10877  0571  2D96               	goto	l9749
 10878  0572                     l1565:	
 10879                           
 10880                           ;BVH2_Appl_Layer.c: 1527: else {;BVH2_Appl_Layer.c: 1529: if (SIBFS_Current_Analysis_low
      +                          _b.Cb13_redState) {
 10881  0572  1DC2               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10882  0573  2D8D               	goto	l1571
 10883                           
 10884                           ;BVH2_Appl_Layer.c: 1534: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 10885  0574  0023               	movlb	3	; select bank3
 10886  0575  086D               	movf	_ui16_Current_Thresh^(0+384),w
 10887  0576  3E02               	addlw	2
 10888  0577  0020               	movlb	0	; select bank0
 10889  0578  00B7               	movwf	??_BVH2_Appl_Layer
 10890  0579  3000               	movlw	0
 10891  057A  0023               	movlb	3	; select bank3
 10892  057B  3D6E               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 10893  057C  0020               	movlb	0	; select bank0
 10894  057D  00B8               	movwf	??_BVH2_Appl_Layer+1
 10895  057E  0838               	movf	??_BVH2_Appl_Layer+1,w
 10896  057F  0021               	movlb	1	; select bank1
 10897  0580  022D               	subwf	(_ui16_mat_Current+1)^(0+128),w
 10898  0581  1D03               	skipz
 10899  0582  2D87               	goto	u8245
 10900  0583  0020               	movlb	0	; select bank0
 10901  0584  0837               	movf	??_BVH2_Appl_Layer,w
 10902  0585  0021               	movlb	1	; select bank1
 10903  0586  022C               	subwf	_ui16_mat_Current^(0+128),w
 10904  0587                     u8245:	
 10905  0587  1803               	skipnc
 10906  0588  2D96               	goto	l9749
 10907                           
 10908                           ;BVH2_Appl_Layer.c: 1537: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 10909  0589  11C2               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10910                           
 10911                           ;BVH2_Appl_Layer.c: 1538: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
 10912  058A  14C2               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10913  058B                     l9739:	
 10914                           
 10915                           ;BVH2_Appl_Layer.c: 1539: Cb9_StateCnt = 0 ;
 10916  058B  01C3               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 10917                           
 10918                           ;BVH2_Appl_Layer.c: 1540: };BVH2_Appl_Layer.c: 1543: }
 10919  058C  2D96               	goto	l9749
 10920  058D                     l1571:	
 10921                           
 10922                           ;BVH2_Appl_Layer.c: 1544: else {;BVH2_Appl_Layer.c: 1546: if (!(SIBFS_Current_Analysis_l
      +                          ow_b.Cb9_Current_Analysis_low)) {
 10923  058D  1A42               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 10924  058E  2D96               	goto	l9749
 10925                           
 10926                           ;BVH2_Appl_Layer.c: 1547: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
 10927  058F  1642               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 10928                           
 10929                           ;BVH2_Appl_Layer.c: 1550: if (ui8_ResetMatlab == 1) {
 10930  0590  036F               	decf	_ui8_ResetMatlab^(0+128),w
 10931  0591  1D03               	btfss	3,2
 10932  0592  2D96               	goto	l9749
 10933  0593                     l9745:	
 10934                           
 10935                           ;BVH2_Appl_Layer.c: 1552: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10936  0593  1442               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10937                           
 10938                           ;BVH2_Appl_Layer.c: 1553: Cb9_oCurrentAlarm = 0;
 10939  0594  0022               	movlb	2	; select bank2
 10940  0595  01AF               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 10941  0596                     l9749:	
 10942                           
 10943                           ;BVH2_Appl_Layer.c: 1554: };BVH2_Appl_Layer.c: 1555: };BVH2_Appl_Layer.c: 1556: };BVH2_A
      +                          ppl_Layer.c: 1557: };BVH2_Appl_Layer.c: 1558: };BVH2_Appl_Layer.c: 1559: };BVH2_Appl_Lay
      +                          er.c: 1564: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 10944  0596  0022               	movlb	2	; select bank2
 10945  0597  082F               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 10946  0598  0020               	movlb	0	; select bank0
 10947  0599  00B7               	movwf	??_BVH2_Appl_Layer
 10948  059A  0837               	movf	??_BVH2_Appl_Layer,w
 10949  059B  0021               	movlb	1	; select bank1
 10950  059C  00D4               	movwf	_bool_HighCurrentAlarm^(0+128)
 10951                           
 10952                           ;BVH2_Appl_Layer.c: 1567: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 10953  059D  0022               	movlb	2	; select bank2
 10954  059E  083F               	movf	_Cb34_oPWM_Alarm^(0+256),w
 10955  059F  0020               	movlb	0	; select bank0
 10956  05A0  00B7               	movwf	??_BVH2_Appl_Layer
 10957  05A1  0837               	movf	??_BVH2_Appl_Layer,w
 10958  05A2  0022               	movlb	2	; select bank2
 10959  05A3  00CC               	movwf	_bool_PWMin_err_Alarm^(0+256)
 10960                           
 10961                           ;BVH2_Appl_Layer.c: 1570: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 10962  05A4  0839               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 10963  05A5  0020               	movlb	0	; select bank0
 10964  05A6  00B7               	movwf	??_BVH2_Appl_Layer
 10965  05A7  0837               	movf	??_BVH2_Appl_Layer,w
 10966  05A8  0022               	movlb	2	; select bank2
 10967  05A9  00CA               	movwf	_bool_UbatAlarm^(0+256)
 10968                           
 10969                           ;BVH2_Appl_Layer.c: 1571: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 10970  05AA  0025               	movlb	5	; select bank5
 10971  05AB  01AC               	clrf	_BVH2_Appl_Layer$1060^(0+640)
 10972  05AC  0AAC               	incf	_BVH2_Appl_Layer$1060^(0+640),f
 10973  05AD  0022               	movlb	2	; select bank2
 10974  05AE  0833               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
 10975  05AF  1D03               	btfss	3,2
 10976  05B0  2DB9               	goto	l9765
 10977  05B1  0841               	movf	_Cb1_oCurrentAlarm^(0+256),w
 10978  05B2  1D03               	btfss	3,2
 10979  05B3  2DB9               	goto	l9765
 10980  05B4  0835               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),w
 10981  05B5  1D03               	btfss	3,2
 10982  05B6  2DB9               	goto	l9765
 10983  05B7  0025               	movlb	5	; select bank5
 10984  05B8  01AC               	clrf	_BVH2_Appl_Layer$1060^(0+640)
 10985  05B9                     l9765:	
 10986  05B9  0025               	movlb	5	; select bank5
 10987  05BA  082C               	movf	_BVH2_Appl_Layer$1060^(0+640),w
 10988  05BB  0020               	movlb	0	; select bank0
 10989  05BC  00B7               	movwf	??_BVH2_Appl_Layer
 10990  05BD  0837               	movf	??_BVH2_Appl_Layer,w
 10991  05BE  0021               	movlb	1	; select bank1
 10992  05BF  00D5               	movwf	_bool_MotorStalled^(0+128)
 10993                           
 10994                           ;BVH2_Appl_Layer.c: 1574: bool_CPU_TempRedAlarm = Cb51_oTempRedAlarm;
 10995  05C0  0022               	movlb	2	; select bank2
 10996  05C1  0831               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 10997  05C2  0020               	movlb	0	; select bank0
 10998  05C3  00B7               	movwf	??_BVH2_Appl_Layer
 10999  05C4  0837               	movf	??_BVH2_Appl_Layer,w
 11000  05C5  0022               	movlb	2	; select bank2
 11001  05C6  00CB               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 11002                           
 11003                           ;BVH2_Appl_Layer.c: 1577: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 11004  05C7  0025               	movlb	5	; select bank5
 11005  05C8  0837               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+640),w
 11006  05C9  0020               	movlb	0	; select bank0
 11007  05CA  00B7               	movwf	??_BVH2_Appl_Layer
 11008  05CB  0837               	movf	??_BVH2_Appl_Layer,w
 11009  05CC  0023               	movlb	3	; select bank3
 11010  05CD  00D9               	movwf	_ui8_debug_out0^(0+384)
 11011                           
 11012                           ;BVH2_Appl_Layer.c: 1578: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 11013  05CE  0025               	movlb	5	; select bank5
 11014  05CF  01AD               	clrf	_BVH2_Appl_Layer$1061^(0+640)
 11015  05D0  0AAD               	incf	_BVH2_Appl_Layer$1061^(0+640),f
 11016  05D1  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+640),w
 11017  05D2  1D03               	btfss	3,2
 11018  05D3  2DDD               	goto	l9781
 11019  05D4  0021               	movlb	1	; select bank1
 11020  05D5  083E               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),w
 11021  05D6  1D03               	btfss	3,2
 11022  05D7  2DDD               	goto	l9781
 11023  05D8  083F               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 11024  05D9  1D03               	btfss	3,2
 11025  05DA  2DDD               	goto	l9781
 11026  05DB  0025               	movlb	5	; select bank5
 11027  05DC  01AD               	clrf	_BVH2_Appl_Layer$1061^(0+640)
 11028  05DD                     l9781:	
 11029  05DD  0025               	movlb	5	; select bank5
 11030  05DE  082D               	movf	_BVH2_Appl_Layer$1061^(0+640),w
 11031  05DF  0020               	movlb	0	; select bank0
 11032  05E0  00B7               	movwf	??_BVH2_Appl_Layer
 11033  05E1  0837               	movf	??_BVH2_Appl_Layer,w
 11034  05E2  0025               	movlb	5	; select bank5
 11035  05E3  00BC               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640)
 11036                           
 11037                           ;BVH2_Appl_Layer.c: 1579: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 11038  05E4  01AE               	clrf	_BVH2_Appl_Layer$1062^(0+640)
 11039  05E5  0AAE               	incf	_BVH2_Appl_Layer$1062^(0+640),f
 11040  05E6  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 11041  05E7  1D03               	btfss	3,2
 11042  05E8  2DEF               	goto	l9791
 11043  05E9  0021               	movlb	1	; select bank1
 11044  05EA  084E               	movf	_bool_ControlLoopMode^(0+128),w
 11045  05EB  1D03               	btfss	3,2
 11046  05EC  2DEF               	goto	l9791
 11047  05ED  0025               	movlb	5	; select bank5
 11048  05EE  01AE               	clrf	_BVH2_Appl_Layer$1062^(0+640)
 11049  05EF                     l9791:	
 11050  05EF  0025               	movlb	5	; select bank5
 11051  05F0  082E               	movf	_BVH2_Appl_Layer$1062^(0+640),w
 11052  05F1  0020               	movlb	0	; select bank0
 11053  05F2  00B7               	movwf	??_BVH2_Appl_Layer
 11054  05F3  0837               	movf	??_BVH2_Appl_Layer,w
 11055  05F4  0025               	movlb	5	; select bank5
 11056  05F5  00B6               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640)
 11057                           
 11058                           ;BVH2_Appl_Layer.c: 1580: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 11059  05F6  0836               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640),w
 11060  05F7  0022               	movlb	2	; select bank2
 11061  05F8  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 11062  05F9  1903               	btfsc	3,2
 11063  05FA  2E06               	goto	l9799
 11064  05FB  086D               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
 11065  05FC  1D03               	btfss	3,2
 11066  05FD  2E06               	goto	l9799
 11067                           
 11068                           ;BVH2_Appl_Layer.c: 1581: {;BVH2_Appl_Layer.c: 1582: X_Sb4_Intergrator = 80000 ;
 11069  05FE  3000               	movlw	0
 11070  05FF  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11071  0600  3001               	movlw	1
 11072  0601  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11073  0602  3038               	movlw	56
 11074  0603  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11075  0604  3080               	movlw	128
 11076  0605  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11077  0606                     l9799:	
 11078                           
 11079                           ;BVH2_Appl_Layer.c: 1583: };BVH2_Appl_Layer.c: 1587: if (Sb1_Logical_Operator3) {
 11080  0606  0025               	movlb	5	; select bank5
 11081  0607  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 11082  0608  1903               	btfsc	3,2
 11083  0609  2E0D               	goto	l9803
 11084                           
 11085                           ;BVH2_Appl_Layer.c: 1588: Sb2_Switch2 = 0 ;
 11086  060A  01A8               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11087  060B  01A9               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11088                           
 11089                           ;BVH2_Appl_Layer.c: 1589: }
 11090  060C  2F30               	goto	l9837
 11091  060D                     l9803:	
 11092                           
 11093                           ;BVH2_Appl_Layer.c: 1590: else {;BVH2_Appl_Layer.c: 1593: if (bool_ControlLoopMode) {
 11094  060D  0021               	movlb	1	; select bank1
 11095  060E  084E               	movf	_bool_ControlLoopMode^(0+128),w
 11096  060F  1903               	btfsc	3,2
 11097  0610  2EBC               	goto	l9823
 11098                           
 11099                           ;BVH2_Appl_Layer.c: 1596: if (Sb1_Logical_Operator5) {
 11100  0611  0025               	movlb	5	; select bank5
 11101  0612  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+640),w
 11102  0613  1903               	btfsc	3,2
 11103  0614  2E1E               	goto	l9809
 11104                           
 11105                           ;BVH2_Appl_Layer.c: 1597: Sb2_Switch2 = Sb2_Fixed_Power;
 11106  0615  3078               	movlw	low (_Sb2_Fixed_Power| (0+32768))
 11107  0616  0084               	movwf	4
 11108  0617  3098               	movlw	high (_Sb2_Fixed_Power| (0+32768))
 11109  0618  0085               	movwf	5
 11110  0619  3F00               	moviw [0]fsr0
 11111  061A  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11112  061B  3F01               	moviw [1]fsr0
 11113  061C  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11114                           
 11115                           ;BVH2_Appl_Layer.c: 1598: }
 11116  061D  2F30               	goto	l9837
 11117  061E                     l9809:	
 11118                           
 11119                           ;BVH2_Appl_Layer.c: 1599: else {;BVH2_Appl_Layer.c: 1601: UInt16 Sb3_Product1 ;;BVH2_App
      +                          l_Layer.c: 1602: Int16 Sb3_Sum1;;BVH2_Appl_Layer.c: 1610: Sb3_Product1 = (UInt16) (((UIn
      +                          t16) (140 << 8)) / 160 );
 11120  061E  30E0               	movlw	224
 11121  061F  00B1               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+640)
 11122  0620  3000               	movlw	0
 11123  0621  00B2               	movwf	(BVH2_Appl_Layer@Sb3_Product1^(0+640)+1)
 11124                           
 11125                           ;BVH2_Appl_Layer.c: 1616: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>;BVH2_Appl_Layer.c: 1617: 8)) + ((Int16) (((Int16) (-((Int16) (
      +                          UInt16) ((((UInt32) Sb3_Product1) * 95) >> 7)))) + 200)));
 11126  0622  0831               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+640),w
 11127  0623  0020               	movlb	0	; select bank0
 11128  0624  00A8               	movwf	___lmul@multiplier
 11129  0625  0025               	movlb	5	; select bank5
 11130  0626  0832               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+640),w
 11131  0627  0020               	movlb	0	; select bank0
 11132  0628  00A9               	movwf	___lmul@multiplier+1
 11133  0629  01AA               	clrf	___lmul@multiplier+2
 11134  062A  01AB               	clrf	___lmul@multiplier+3
 11135  062B  3000               	movlw	0
 11136  062C  00AF               	movwf	___lmul@multiplicand+3
 11137  062D  3000               	movlw	0
 11138  062E  00AE               	movwf	___lmul@multiplicand+2
 11139  062F  3000               	movlw	0
 11140  0630  00AD               	movwf	___lmul@multiplicand+1
 11141  0631  305F               	movlw	95
 11142  0632  00AC               	movwf	___lmul@multiplicand
 11143  0633  319F  279B  3180   	fcall	___lmul
 11144  0636  0020               	movlb	0	; select bank0
 11145  0637  0828               	movf	?___lmul,w
 11146  0638  00B7               	movwf	??_BVH2_Appl_Layer
 11147  0639  0829               	movf	?___lmul+1,w
 11148  063A  00B8               	movwf	??_BVH2_Appl_Layer+1
 11149  063B  082A               	movf	?___lmul+2,w
 11150  063C  00B9               	movwf	??_BVH2_Appl_Layer+2
 11151  063D  082B               	movf	?___lmul+3,w
 11152  063E  00BA               	movwf	??_BVH2_Appl_Layer+3
 11153  063F  3007               	movlw	7
 11154  0640                     u8405:	
 11155  0640  36BA               	lsrf	??_BVH2_Appl_Layer+3,f
 11156  0641  0CB9               	rrf	??_BVH2_Appl_Layer+2,f
 11157  0642  0CB8               	rrf	??_BVH2_Appl_Layer+1,f
 11158  0643  0CB7               	rrf	??_BVH2_Appl_Layer,f
 11159  0644  0B89               	decfsz	9,f
 11160  0645  2E40               	goto	u8405
 11161  0646  0937               	comf	??_BVH2_Appl_Layer,w
 11162  0647  00BB               	movwf	??_BVH2_Appl_Layer+4
 11163  0648  0938               	comf	??_BVH2_Appl_Layer+1,w
 11164  0649  00BC               	movwf	??_BVH2_Appl_Layer+5
 11165  064A  0ABB               	incf	??_BVH2_Appl_Layer+4,f
 11166  064B  1903               	skipnz
 11167  064C  0ABC               	incf	??_BVH2_Appl_Layer+5,f
 11168  064D  0021               	movlb	1	; select bank1
 11169  064E  0850               	movf	_ui8_PWM_dc_mat^(0+128),w
 11170  064F  0020               	movlb	0	; select bank0
 11171  0650  00BD               	movwf	??_BVH2_Appl_Layer+6
 11172  0651  01BE               	clrf	??_BVH2_Appl_Layer+7
 11173  0652  01BF               	clrf	??_BVH2_Appl_Layer+8
 11174  0653  01C0               	clrf	??_BVH2_Appl_Layer+9
 11175  0654  0840               	movf	??_BVH2_Appl_Layer+9,w
 11176  0655  00AB               	movwf	___lmul@multiplier+3
 11177  0656  083F               	movf	??_BVH2_Appl_Layer+8,w
 11178  0657  00AA               	movwf	___lmul@multiplier+2
 11179  0658  083E               	movf	??_BVH2_Appl_Layer+7,w
 11180  0659  00A9               	movwf	___lmul@multiplier+1
 11181  065A  083D               	movf	??_BVH2_Appl_Layer+6,w
 11182  065B  00A8               	movwf	___lmul@multiplier
 11183  065C  0025               	movlb	5	; select bank5
 11184  065D  0831               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+640),w
 11185  065E  0020               	movlb	0	; select bank0
 11186  065F  00AC               	movwf	___lmul@multiplicand
 11187  0660  0025               	movlb	5	; select bank5
 11188  0661  0832               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+640),w
 11189  0662  0020               	movlb	0	; select bank0
 11190  0663  00AD               	movwf	___lmul@multiplicand+1
 11191  0664  01AE               	clrf	___lmul@multiplicand+2
 11192  0665  01AF               	clrf	___lmul@multiplicand+3
 11193  0666  319F  279B  3180   	fcall	___lmul
 11194  0669  0020               	movlb	0	; select bank0
 11195  066A  0828               	movf	?___lmul,w
 11196  066B  00C1               	movwf	??_BVH2_Appl_Layer+10
 11197  066C  0829               	movf	?___lmul+1,w
 11198  066D  00C2               	movwf	??_BVH2_Appl_Layer+11
 11199  066E  082A               	movf	?___lmul+2,w
 11200  066F  00C3               	movwf	??_BVH2_Appl_Layer+12
 11201  0670  082B               	movf	?___lmul+3,w
 11202  0671  00C4               	movwf	??_BVH2_Appl_Layer+13
 11203  0672  3008               	movlw	8
 11204  0673                     u8415:	
 11205  0673  36C4               	lsrf	??_BVH2_Appl_Layer+13,f
 11206  0674  0CC3               	rrf	??_BVH2_Appl_Layer+12,f
 11207  0675  0CC2               	rrf	??_BVH2_Appl_Layer+11,f
 11208  0676  0CC1               	rrf	??_BVH2_Appl_Layer+10,f
 11209  0677  0B89               	decfsz	9,f
 11210  0678  2E73               	goto	u8415
 11211  0679  083B               	movf	??_BVH2_Appl_Layer+4,w
 11212  067A  0741               	addwf	??_BVH2_Appl_Layer+10,w
 11213  067B  00C5               	movwf	??_BVH2_Appl_Layer+14
 11214  067C  083C               	movf	??_BVH2_Appl_Layer+5,w
 11215  067D  3D42               	addwfc	??_BVH2_Appl_Layer+11,w
 11216  067E  00C6               	movwf	??_BVH2_Appl_Layer+15
 11217  067F  0845               	movf	??_BVH2_Appl_Layer+14,w
 11218  0680  3EC8               	addlw	200
 11219  0681  0025               	movlb	5	; select bank5
 11220  0682  00B9               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640)
 11221  0683  3000               	movlw	0
 11222  0684  0020               	movlb	0	; select bank0
 11223  0685  3D46               	addwfc	??_BVH2_Appl_Layer+15,w
 11224  0686  0025               	movlb	5	; select bank5
 11225  0687  00BA               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640)
 11226                           
 11227                           ;BVH2_Appl_Layer.c: 1620: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 11228  0688  083A               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640),w
 11229  0689  3A80               	xorlw	128
 11230  068A  0020               	movlb	0	; select bank0
 11231  068B  00B7               	movwf	??_BVH2_Appl_Layer
 11232  068C  3080               	movlw	128
 11233  068D  0237               	subwf	??_BVH2_Appl_Layer,w
 11234  068E  1D03               	skipz
 11235  068F  2E93               	goto	u8425
 11236  0690  30C9               	movlw	201
 11237  0691  0025               	movlb	5	; select bank5
 11238  0692  0239               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 11239  0693                     u8425:	
 11240  0693  1803               	skipnc
 11241  0694  2EB9               	goto	l9821
 11242  0695  0025               	movlb	5	; select bank5
 11243  0696  083A               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+640),w
 11244  0697  3A80               	xorlw	128
 11245  0698  0020               	movlb	0	; select bank0
 11246  0699  00B7               	movwf	??_BVH2_Appl_Layer
 11247  069A  3080               	movlw	128
 11248  069B  0237               	subwf	??_BVH2_Appl_Layer,w
 11249  069C  1D03               	skipz
 11250  069D  2EA1               	goto	u8435
 11251  069E  303C               	movlw	60
 11252  069F  0025               	movlb	5	; select bank5
 11253  06A0  0239               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 11254  06A1                     u8435:	
 11255  06A1  1C03               	skipc
 11256  06A2  2EB0               	goto	l9819
 11257  06A3  0025               	movlb	5	; select bank5
 11258  06A4  0839               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+640),w
 11259  06A5  0020               	movlb	0	; select bank0
 11260  06A6  00B7               	movwf	??_BVH2_Appl_Layer
 11261  06A7  01B8               	clrf	??_BVH2_Appl_Layer+1
 11262  06A8  0837               	movf	??_BVH2_Appl_Layer,w
 11263  06A9  0025               	movlb	5	; select bank5
 11264  06AA  00A4               	movwf	_BVH2_Appl_Layer$1065^(0+640)
 11265  06AB  0020               	movlb	0	; select bank0
 11266  06AC  0838               	movf	??_BVH2_Appl_Layer+1,w
 11267  06AD  0025               	movlb	5	; select bank5
 11268  06AE  00A5               	movwf	(_BVH2_Appl_Layer$1065+1)^(0+640)
 11269  06AF  2EB5               	goto	l1595
 11270  06B0                     l9819:	
 11271  06B0  303C               	movlw	60
 11272  06B1  0025               	movlb	5	; select bank5
 11273  06B2  00A4               	movwf	_BVH2_Appl_Layer$1065^(0+640)
 11274  06B3  3000               	movlw	0
 11275  06B4  00A5               	movwf	(_BVH2_Appl_Layer$1065^(0+640)+1)
 11276  06B5                     l1595:	
 11277  06B5  0825               	movf	(_BVH2_Appl_Layer$1065+1)^(0+640),w
 11278  06B6  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11279  06B7  0824               	movf	_BVH2_Appl_Layer$1065^(0+640),w
 11280  06B8  2F2A               	goto	L36
 11281  06B9                     l9821:	
 11282  06B9  30C8               	movlw	200
 11283  06BA  0025               	movlb	5	; select bank5
 11284  06BB  2F2D               	goto	L37
 11285  06BC                     l9823:	
 11286                           ;BVH2_Appl_Layer.c: 1621: };BVH2_Appl_Layer.c: 1622: }
 11287                           
 11288                           
 11289                           ;BVH2_Appl_Layer.c: 1623: else {;BVH2_Appl_Layer.c: 1625: Int16 Sb4_PI_sum;;BVH2_Appl_La
      +                          yer.c: 1630: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / ((Int32) 800))
      +                          ) + ((UInt16);BVH2_Appl_Layer.c: 1631: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 11290  06BC  3000               	movlw	0
 11291  06BD  0020               	movlb	0	; select bank0
 11292  06BE  00AB               	movwf	___aldiv@divisor+3
 11293  06BF  3000               	movlw	0
 11294  06C0  00AA               	movwf	___aldiv@divisor+2
 11295  06C1  3003               	movlw	3
 11296  06C2  00A9               	movwf	___aldiv@divisor+1
 11297  06C3  3020               	movlw	32
 11298  06C4  00A8               	movwf	___aldiv@divisor
 11299  06C5  0022               	movlb	2	; select bank2
 11300  06C6  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11301  06C7  0020               	movlb	0	; select bank0
 11302  06C8  00AF               	movwf	___aldiv@dividend+3
 11303  06C9  0022               	movlb	2	; select bank2
 11304  06CA  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11305  06CB  0020               	movlb	0	; select bank0
 11306  06CC  00AE               	movwf	___aldiv@dividend+2
 11307  06CD  0022               	movlb	2	; select bank2
 11308  06CE  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11309  06CF  0020               	movlb	0	; select bank0
 11310  06D0  00AD               	movwf	___aldiv@dividend+1
 11311  06D1  0022               	movlb	2	; select bank2
 11312  06D2  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11313  06D3  0020               	movlb	0	; select bank0
 11314  06D4  00AC               	movwf	___aldiv@dividend
 11315  06D5  3194  24F1  3180   	fcall	___aldiv
 11316  06D8  0020               	movlb	0	; select bank0
 11317  06D9  0828               	movf	?___aldiv,w
 11318  06DA  00B7               	movwf	??_BVH2_Appl_Layer
 11319  06DB  0829               	movf	?___aldiv+1,w
 11320  06DC  00B8               	movwf	??_BVH2_Appl_Layer+1
 11321  06DD  082A               	movf	?___aldiv+2,w
 11322  06DE  00B9               	movwf	??_BVH2_Appl_Layer+2
 11323  06DF  082B               	movf	?___aldiv+3,w
 11324  06E0  00BA               	movwf	??_BVH2_Appl_Layer+3
 11325  06E1  0022               	movlb	2	; select bank2
 11326  06E2  084D               	movf	_ui8_Kp_mat^(0+256),w
 11327  06E3  0020               	movlb	0	; select bank0
 11328  06E4  00BB               	movwf	??_BVH2_Appl_Layer+4
 11329  06E5  01BC               	clrf	??_BVH2_Appl_Layer+5
 11330  06E6  083B               	movf	??_BVH2_Appl_Layer+4,w
 11331  06E7  00A8               	movwf	___wmul@multiplier
 11332  06E8  083C               	movf	??_BVH2_Appl_Layer+5,w
 11333  06E9  00A9               	movwf	___wmul@multiplier+1
 11334  06EA  0025               	movlb	5	; select bank5
 11335  06EB  0830               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640),w
 11336  06EC  0020               	movlb	0	; select bank0
 11337  06ED  00AB               	movwf	___wmul@multiplicand+1
 11338  06EE  0025               	movlb	5	; select bank5
 11339  06EF  082F               	movf	BVH2_Appl_Layer@Sb2_Error^(0+640),w
 11340  06F0  0020               	movlb	0	; select bank0
 11341  06F1  00AA               	movwf	___wmul@multiplicand
 11342  06F2  319E  2636  3180   	fcall	___wmul
 11343  06F5  0020               	movlb	0	; select bank0
 11344  06F6  0828               	movf	?___wmul,w
 11345  06F7  0737               	addwf	??_BVH2_Appl_Layer,w
 11346  06F8  0025               	movlb	5	; select bank5
 11347  06F9  00BD               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640)
 11348  06FA  0020               	movlb	0	; select bank0
 11349  06FB  0829               	movf	?___wmul+1,w
 11350  06FC  3D38               	addwfc	??_BVH2_Appl_Layer+1,w
 11351  06FD  0025               	movlb	5	; select bank5
 11352  06FE  00BE               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640)
 11353                           
 11354                           ;BVH2_Appl_Layer.c: 1634: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 11355  06FF  083E               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11356  0700  3A80               	xorlw	128
 11357  0701  0020               	movlb	0	; select bank0
 11358  0702  00B7               	movwf	??_BVH2_Appl_Layer
 11359  0703  3080               	movlw	128
 11360  0704  0237               	subwf	??_BVH2_Appl_Layer,w
 11361  0705  1D03               	skipz
 11362  0706  2F0A               	goto	u8445
 11363  0707  3001               	movlw	1
 11364  0708  0025               	movlb	5	; select bank5
 11365  0709  023D               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11366  070A                     u8445:	
 11367  070A  1C03               	skipc
 11368  070B  2F14               	goto	l1602
 11369  070C  3000               	movlw	0
 11370  070D  0025               	movlb	5	; select bank5
 11371  070E  023E               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11372  070F  30CB               	movlw	203
 11373  0710  1903               	skipnz
 11374  0711  023D               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11375  0712  1803               	skipnc
 11376  0713  2F2C               	goto	l9835
 11377  0714                     l1602:	
 11378  0714  0025               	movlb	5	; select bank5
 11379  0715  1BBE               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),7
 11380  0716  2F23               	goto	l9833
 11381  0717  3000               	movlw	0
 11382  0718  023E               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11383  0719  3028               	movlw	40
 11384  071A  1903               	skipnz
 11385  071B  023D               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11386  071C  1C03               	skipc
 11387  071D  2F23               	goto	l9833
 11388  071E  083E               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+640),w
 11389  071F  00A7               	movwf	(_BVH2_Appl_Layer$1067+1)^(0+640)
 11390  0720  083D               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+640),w
 11391  0721  00A6               	movwf	_BVH2_Appl_Layer$1067^(0+640)
 11392  0722  2F27               	goto	l1606
 11393  0723                     l9833:	
 11394  0723  3028               	movlw	40
 11395  0724  00A6               	movwf	_BVH2_Appl_Layer$1067^(0+640)
 11396  0725  3000               	movlw	0
 11397  0726  00A7               	movwf	(_BVH2_Appl_Layer$1067^(0+640)+1)
 11398  0727                     l1606:	
 11399  0727  0827               	movf	(_BVH2_Appl_Layer$1067+1)^(0+640),w
 11400  0728  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+640)
 11401  0729  0826               	movf	_BVH2_Appl_Layer$1067^(0+640),w
 11402  072A                     L36:	
 11403  072A  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11404  072B  2F30               	goto	l9837
 11405  072C                     l9835:	
 11406  072C  30CA               	movlw	202
 11407  072D                     L37:	
 11408  072D  00A8               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+640)
 11409  072E  3000               	movlw	0
 11410  072F  00A9               	movwf	(BVH2_Appl_Layer@Sb2_Switch2^(0+640)+1)
 11411  0730                     l9837:	
 11412                           
 11413                           ;BVH2_Appl_Layer.c: 1635: };BVH2_Appl_Layer.c: 1636: };BVH2_Appl_Layer.c: 1664: if (Sb1_
      +                          Logical_Operator3 || power_lockout){
 11414  0730  083C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+640),w
 11415  0731  1D03               	btfss	3,2
 11416  0732  2F37               	goto	l9841
 11417  0733  0022               	movlb	2	; select bank2
 11418  0734  0836               	movf	_power_lockout^(0+256),w
 11419  0735  1903               	btfsc	3,2
 11420  0736  2F3E               	goto	l9845
 11421  0737                     l9841:	
 11422                           
 11423                           ;BVH2_Appl_Layer.c: 1665: ui16_duty_cycle_mat = 0;
 11424  0737  0023               	movlb	3	; select bank3
 11425  0738  01BA               	clrf	_ui16_duty_cycle_mat^(0+384)
 11426  0739  01BB               	clrf	(_ui16_duty_cycle_mat+1)^(0+384)
 11427                           
 11428                           ;BVH2_Appl_Layer.c: 1666: power_lockout = 1;
 11429  073A  0022               	movlb	2	; select bank2
 11430  073B  01B6               	clrf	_power_lockout^(0+256)
 11431  073C  0AB6               	incf	_power_lockout^(0+256),f
 11432                           
 11433                           ;BVH2_Appl_Layer.c: 1667: }
 11434  073D  2F43               	goto	l1610
 11435  073E                     l9845:	
 11436                           
 11437                           ;BVH2_Appl_Layer.c: 1668: else {;BVH2_Appl_Layer.c: 1669: ui16_duty_cycle_mat = ui16_Spe
      +                          ed_demand_mat;
 11438  073E  0023               	movlb	3	; select bank3
 11439  073F  0831               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 11440  0740  00BB               	movwf	(_ui16_duty_cycle_mat+1)^(0+384)
 11441  0741  0830               	movf	_ui16_Speed_demand_mat^(0+384),w
 11442  0742  00BA               	movwf	_ui16_duty_cycle_mat^(0+384)
 11443  0743                     l1610:	
 11444                           
 11445                           ;BVH2_Appl_Layer.c: 1670: };BVH2_Appl_Layer.c: 1673: bl_Pumpoff_Alarm = Sb1_Logical_Oper
      +                          ator2;
 11446  0743  0025               	movlb	5	; select bank5
 11447  0744  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+640),w
 11448  0745  0020               	movlb	0	; select bank0
 11449  0746  00B7               	movwf	??_BVH2_Appl_Layer
 11450  0747  0837               	movf	??_BVH2_Appl_Layer,w
 11451  0748  0023               	movlb	3	; select bank3
 11452  0749  00DC               	movwf	_bl_Pumpoff_Alarm^(0+384)
 11453                           
 11454                           ;BVH2_Appl_Layer.c: 1674: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 11455  074A  0025               	movlb	5	; select bank5
 11456  074B  0836               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+640),w
 11457  074C  0020               	movlb	0	; select bank0
 11458  074D  00B7               	movwf	??_BVH2_Appl_Layer
 11459  074E  0837               	movf	??_BVH2_Appl_Layer,w
 11460  074F  0022               	movlb	2	; select bank2
 11461  0750  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 11462                           
 11463                           ;BVH2_Appl_Layer.c: 1678: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<;BVH2_Appl_Layer.c: 1679: 3));
 11464  0751  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11465  0752  0020               	movlb	0	; select bank0
 11466  0753  00B7               	movwf	??_BVH2_Appl_Layer
 11467  0754  0022               	movlb	2	; select bank2
 11468  0755  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11469  0756  0020               	movlb	0	; select bank0
 11470  0757  00B8               	movwf	??_BVH2_Appl_Layer+1
 11471  0758  0022               	movlb	2	; select bank2
 11472  0759  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11473  075A  0020               	movlb	0	; select bank0
 11474  075B  00B9               	movwf	??_BVH2_Appl_Layer+2
 11475  075C  0022               	movlb	2	; select bank2
 11476  075D  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11477  075E  0020               	movlb	0	; select bank0
 11478  075F  00BA               	movwf	??_BVH2_Appl_Layer+3
 11479  0760  0023               	movlb	3	; select bank3
 11480  0761  0833               	movf	(_ui8_Ki_mat+1)^(0+384),w
 11481  0762  0020               	movlb	0	; select bank0
 11482  0763  00A9               	movwf	___wmul@multiplier+1
 11483  0764  0023               	movlb	3	; select bank3
 11484  0765  0832               	movf	_ui8_Ki_mat^(0+384),w
 11485  0766  0020               	movlb	0	; select bank0
 11486  0767  00A8               	movwf	___wmul@multiplier
 11487  0768  0025               	movlb	5	; select bank5
 11488  0769  0830               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+640),w
 11489  076A  0020               	movlb	0	; select bank0
 11490  076B  00AB               	movwf	___wmul@multiplicand+1
 11491  076C  0025               	movlb	5	; select bank5
 11492  076D  082F               	movf	BVH2_Appl_Layer@Sb2_Error^(0+640),w
 11493  076E  0020               	movlb	0	; select bank0
 11494  076F  00AA               	movwf	___wmul@multiplicand
 11495  0770  319E  2636  3180   	fcall	___wmul
 11496  0773  0020               	movlb	0	; select bank0
 11497  0774  0828               	movf	?___wmul,w
 11498  0775  00BB               	movwf	??_BVH2_Appl_Layer+4
 11499  0776  0829               	movf	?___wmul+1,w
 11500  0777  00BC               	movwf	??_BVH2_Appl_Layer+5
 11501  0778  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11502  0779  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11503  077A  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11504  077B  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11505  077C  35BB               	lslf	??_BVH2_Appl_Layer+4,f
 11506  077D  0DBC               	rlf	??_BVH2_Appl_Layer+5,f
 11507  077E  083B               	movf	??_BVH2_Appl_Layer+4,w
 11508  077F  00BD               	movwf	??_BVH2_Appl_Layer+6
 11509  0780  083C               	movf	??_BVH2_Appl_Layer+5,w
 11510  0781  00BE               	movwf	??_BVH2_Appl_Layer+7
 11511  0782  3000               	movlw	0
 11512  0783  1BBE               	btfsc	??_BVH2_Appl_Layer+7,7
 11513  0784  30FF               	movlw	255
 11514  0785  00BF               	movwf	??_BVH2_Appl_Layer+8
 11515  0786  00C0               	movwf	??_BVH2_Appl_Layer+9
 11516  0787  083D               	movf	??_BVH2_Appl_Layer+6,w
 11517  0788  07B7               	addwf	??_BVH2_Appl_Layer,f
 11518  0789  083E               	movf	??_BVH2_Appl_Layer+7,w
 11519  078A  3DB8               	addwfc	??_BVH2_Appl_Layer+1,f
 11520  078B  083F               	movf	??_BVH2_Appl_Layer+8,w
 11521  078C  3DB9               	addwfc	??_BVH2_Appl_Layer+2,f
 11522  078D  0840               	movf	??_BVH2_Appl_Layer+9,w
 11523  078E  3DBA               	addwfc	??_BVH2_Appl_Layer+3,f
 11524  078F  083A               	movf	??_BVH2_Appl_Layer+3,w
 11525  0790  0022               	movlb	2	; select bank2
 11526  0791  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11527  0792  0020               	movlb	0	; select bank0
 11528  0793  0839               	movf	??_BVH2_Appl_Layer+2,w
 11529  0794  0022               	movlb	2	; select bank2
 11530  0795  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11531  0796  0020               	movlb	0	; select bank0
 11532  0797  0838               	movf	??_BVH2_Appl_Layer+1,w
 11533  0798  0022               	movlb	2	; select bank2
 11534  0799  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11535  079A  0020               	movlb	0	; select bank0
 11536  079B  0837               	movf	??_BVH2_Appl_Layer,w
 11537  079C  0022               	movlb	2	; select bank2
 11538  079D  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11539                           
 11540                           ;BVH2_Appl_Layer.c: 1682: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 11541  079E  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 11542  079F  2FAB               	goto	l9851
 11543  07A0  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11544  07A1  1D03               	btfss	3,2
 11545  07A2  2FDE               	goto	l9857
 11546  07A3  3041               	movlw	65
 11547  07A4  0268               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11548  07A5  3077               	movlw	119
 11549  07A6  3B69               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11550  07A7  3002               	movlw	2
 11551  07A8  3B6A               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11552  07A9  1803               	btfsc	3,0
 11553  07AA  2FDE               	goto	l9857
 11554  07AB                     l9851:	
 11555  07AB  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 11556  07AC  2FC6               	goto	l9855
 11557  07AD  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11558  07AE  1D03               	btfss	3,2
 11559  07AF  2FB7               	goto	l9853
 11560  07B0  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11561  07B1  1D03               	btfss	3,2
 11562  07B2  2FB7               	goto	l9853
 11563  07B3  307D               	movlw	125
 11564  07B4  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11565  07B5  1C03               	btfss	3,0
 11566  07B6  2FC6               	goto	l9855
 11567  07B7                     l9853:	
 11568  07B7  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11569  07B8  0025               	movlb	5	; select bank5
 11570  07B9  00A3               	movwf	(_BVH2_Appl_Layer$1068+3)^(0+640)
 11571  07BA  0022               	movlb	2	; select bank2
 11572  07BB  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11573  07BC  0025               	movlb	5	; select bank5
 11574  07BD  00A2               	movwf	(_BVH2_Appl_Layer$1068+2)^(0+640)
 11575  07BE  0022               	movlb	2	; select bank2
 11576  07BF  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11577  07C0  0025               	movlb	5	; select bank5
 11578  07C1  00A1               	movwf	(_BVH2_Appl_Layer$1068+1)^(0+640)
 11579  07C2  0022               	movlb	2	; select bank2
 11580  07C3  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11581  07C4  0025               	movlb	5	; select bank5
 11582  07C5  2FCE               	goto	L38
 11583  07C6                     l9855:	
 11584  07C6  3000               	movlw	0
 11585  07C7  0025               	movlb	5	; select bank5
 11586  07C8  00A3               	movwf	(_BVH2_Appl_Layer$1068+3)^(0+640)
 11587  07C9  3000               	movlw	0
 11588  07CA  00A2               	movwf	(_BVH2_Appl_Layer$1068+2)^(0+640)
 11589  07CB  307D               	movlw	125
 11590  07CC  00A1               	movwf	(_BVH2_Appl_Layer$1068+1)^(0+640)
 11591  07CD  3000               	movlw	0
 11592  07CE                     L38:	
 11593  07CE  00A0               	movwf	_BVH2_Appl_Layer$1068^(0+640)
 11594  07CF  0823               	movf	(_BVH2_Appl_Layer$1068+3)^(0+640),w
 11595  07D0  0022               	movlb	2	; select bank2
 11596  07D1  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11597  07D2  0025               	movlb	5	; select bank5
 11598  07D3  0822               	movf	(_BVH2_Appl_Layer$1068+2)^(0+640),w
 11599  07D4  0022               	movlb	2	; select bank2
 11600  07D5  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11601  07D6  0025               	movlb	5	; select bank5
 11602  07D7  0821               	movf	(_BVH2_Appl_Layer$1068+1)^(0+640),w
 11603  07D8  0022               	movlb	2	; select bank2
 11604  07D9  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11605  07DA  0025               	movlb	5	; select bank5
 11606  07DB  0820               	movf	_BVH2_Appl_Layer$1068^(0+640),w
 11607  07DC  0022               	movlb	2	; select bank2
 11608  07DD  2FE5               	goto	L39
 11609  07DE                     l9857:	
 11610  07DE  3000               	movlw	0
 11611  07DF  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11612  07E0  3002               	movlw	2
 11613  07E1  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11614  07E2  3077               	movlw	119
 11615  07E3  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11616  07E4  3040               	movlw	64
 11617  07E5                     L39:	
 11618  07E5  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11619                           
 11620                           ;BVH2_Appl_Layer.c: 1685: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 11621  07E6  01ED               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 11622  07E7  0008               	return
 11623  07E8                     __end_of_BVH2_Appl_Layer:	
 11624                           
 11625                           	psect	swtext2
 11626  1868                     __pswtext2:	
 11627  1868                     S11813:	
 11628  1868  3181  2921         	ljmp	l9241
 11629  186A  3181  2919         	ljmp	l9237
 11630  186C  3181  2905         	ljmp	l9227
 11631  186E  3181  290D         	ljmp	l9231
 11632  1870  3181  291D         	ljmp	l9239
 11633  1872  3181  2911         	ljmp	l9233
 11634  1874  3181  2915         	ljmp	l9235
 11635  1876  3181  2909         	ljmp	l9229
 11636                           
 11637                           	psect	text30
 11638  1E36                     __ptext30:	
 11639 ;; *************** function ___wmul *****************
 11640 ;; Defined at:
 11641 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 11642 ;; Parameters:    Size  Location     Type
 11643 ;;  multiplier      2    8[BANK0 ] unsigned int 
 11644 ;;  multiplicand    2   10[BANK0 ] unsigned int 
 11645 ;; Auto vars:     Size  Location     Type
 11646 ;;  product         2   12[BANK0 ] unsigned int 
 11647 ;; Return value:  Size  Location     Type
 11648 ;;                  2    8[BANK0 ] unsigned int 
 11649 ;; Registers used:
 11650 ;;		wreg, status,2, status,0
 11651 ;; Tracked objects:
 11652 ;;		On entry : 0/0
 11653 ;;		On exit  : 0/0
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11656 ;;      Params:         0       4       0       0       0       0       0       0
 11657 ;;      Locals:         0       2       0       0       0       0       0       0
 11658 ;;      Temps:          0       0       0       0       0       0       0       0
 11659 ;;      Totals:         0       6       0       0       0       0       0       0
 11660 ;;Total ram usage:        6 bytes
 11661 ;; Hardware stack levels used:    1
 11662 ;; Hardware stack levels required when called:    3
 11663 ;; This function calls:
 11664 ;;		Nothing
 11665 ;; This function is called by:
 11666 ;;		_rate_limit
 11667 ;;		_EOL
 11668 ;;		_interrrupt_bldc
 11669 ;;		_main
 11670 ;;		_BVH2_Appl_Layer
 11671 ;; This function uses a non-reentrant model
 11672 ;;
 11673                           
 11674                           
 11675                           ;psect for function ___wmul
 11676  1E36                     ___wmul:	
 11677                           
 11678                           ;incstack = 0
 11679                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11680  1E36  0020               	movlb	0	; select bank0
 11681  1E37  01AC               	clrf	___wmul@product
 11682  1E38  01AD               	clrf	___wmul@product+1
 11683  1E39                     l8689:	
 11684  1E39  1C28               	btfss	___wmul@multiplier,0
 11685  1E3A  2E3F               	goto	l1865
 11686  1E3B  082A               	movf	___wmul@multiplicand,w
 11687  1E3C  07AC               	addwf	___wmul@product,f
 11688  1E3D  082B               	movf	___wmul@multiplicand+1,w
 11689  1E3E  3DAD               	addwfc	___wmul@product+1,f
 11690  1E3F                     l1865:	
 11691  1E3F  3001               	movlw	1
 11692  1E40                     u6485:	
 11693  1E40  35AA               	lslf	___wmul@multiplicand,f
 11694  1E41  0DAB               	rlf	___wmul@multiplicand+1,f
 11695  1E42  0B89               	decfsz	9,f
 11696  1E43  2E40               	goto	u6485
 11697  1E44  3001               	movlw	1
 11698  1E45                     u6495:	
 11699  1E45  36A9               	lsrf	___wmul@multiplier+1,f
 11700  1E46  0CA8               	rrf	___wmul@multiplier,f
 11701  1E47  0B89               	decfsz	9,f
 11702  1E48  2E45               	goto	u6495
 11703  1E49  0828               	movf	___wmul@multiplier,w
 11704  1E4A  0429               	iorwf	___wmul@multiplier+1,w
 11705  1E4B  1D03               	btfss	3,2
 11706  1E4C  2E39               	goto	l8689
 11707  1E4D  082D               	movf	___wmul@product+1,w
 11708  1E4E  00A9               	movwf	?___wmul+1
 11709  1E4F  082C               	movf	___wmul@product,w
 11710  1E50  00A8               	movwf	?___wmul
 11711  1E51  0008               	return
 11712  1E52                     __end_of___wmul:	
 11713                           
 11714                           	psect	text31
 11715  1F9B                     __ptext31:	
 11716 ;; *************** function ___lmul *****************
 11717 ;; Defined at:
 11718 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;  multiplier      4    8[BANK0 ] unsigned long 
 11721 ;;  multiplicand    4   12[BANK0 ] unsigned long 
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;  product         4   16[BANK0 ] unsigned long 
 11724 ;; Return value:  Size  Location     Type
 11725 ;;                  4    8[BANK0 ] unsigned long 
 11726 ;; Registers used:
 11727 ;;		wreg, status,2, status,0
 11728 ;; Tracked objects:
 11729 ;;		On entry : 0/0
 11730 ;;		On exit  : 0/0
 11731 ;;		Unchanged: 0/0
 11732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11733 ;;      Params:         0       8       0       0       0       0       0       0
 11734 ;;      Locals:         0       4       0       0       0       0       0       0
 11735 ;;      Temps:          0       0       0       0       0       0       0       0
 11736 ;;      Totals:         0      12       0       0       0       0       0       0
 11737 ;;Total ram usage:       12 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; Hardware stack levels required when called:    3
 11740 ;; This function calls:
 11741 ;;		Nothing
 11742 ;; This function is called by:
 11743 ;;		_BVH2_Appl_Layer
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           
 11748                           ;psect for function ___lmul
 11749  1F9B                     ___lmul:	
 11750                           
 11751                           ;incstack = 0
 11752                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11753  1F9B  3000               	movlw	0
 11754  1F9C  0020               	movlb	0	; select bank0
 11755  1F9D  00B3               	movwf	___lmul@product+3
 11756  1F9E  3000               	movlw	0
 11757  1F9F  00B2               	movwf	___lmul@product+2
 11758  1FA0  3000               	movlw	0
 11759  1FA1  00B1               	movwf	___lmul@product+1
 11760  1FA2  3000               	movlw	0
 11761  1FA3  00B0               	movwf	___lmul@product
 11762  1FA4                     l8703:	
 11763  1FA4  1C28               	btfss	___lmul@multiplier,0
 11764  1FA5  2FAE               	goto	l8707
 11765  1FA6  082C               	movf	___lmul@multiplicand,w
 11766  1FA7  07B0               	addwf	___lmul@product,f
 11767  1FA8  082D               	movf	___lmul@multiplicand+1,w
 11768  1FA9  3DB1               	addwfc	___lmul@product+1,f
 11769  1FAA  082E               	movf	___lmul@multiplicand+2,w
 11770  1FAB  3DB2               	addwfc	___lmul@product+2,f
 11771  1FAC  082F               	movf	___lmul@multiplicand+3,w
 11772  1FAD  3DB3               	addwfc	___lmul@product+3,f
 11773  1FAE                     l8707:	
 11774  1FAE  3001               	movlw	1
 11775  1FAF                     u6525:	
 11776  1FAF  35AC               	lslf	___lmul@multiplicand,f
 11777  1FB0  0DAD               	rlf	___lmul@multiplicand+1,f
 11778  1FB1  0DAE               	rlf	___lmul@multiplicand+2,f
 11779  1FB2  0DAF               	rlf	___lmul@multiplicand+3,f
 11780  1FB3  0B89               	decfsz	9,f
 11781  1FB4  2FAF               	goto	u6525
 11782  1FB5  3001               	movlw	1
 11783  1FB6                     u6535:	
 11784  1FB6  36AB               	lsrf	___lmul@multiplier+3,f
 11785  1FB7  0CAA               	rrf	___lmul@multiplier+2,f
 11786  1FB8  0CA9               	rrf	___lmul@multiplier+1,f
 11787  1FB9  0CA8               	rrf	___lmul@multiplier,f
 11788  1FBA  0B89               	decfsz	9,f
 11789  1FBB  2FB6               	goto	u6535
 11790  1FBC  082B               	movf	___lmul@multiplier+3,w
 11791  1FBD  042A               	iorwf	___lmul@multiplier+2,w
 11792  1FBE  0429               	iorwf	___lmul@multiplier+1,w
 11793  1FBF  0428               	iorwf	___lmul@multiplier,w
 11794  1FC0  1D03               	skipz
 11795  1FC1  2FA4               	goto	l8703
 11796  1FC2  0833               	movf	___lmul@product+3,w
 11797  1FC3  00AB               	movwf	?___lmul+3
 11798  1FC4  0832               	movf	___lmul@product+2,w
 11799  1FC5  00AA               	movwf	?___lmul+2
 11800  1FC6  0831               	movf	___lmul@product+1,w
 11801  1FC7  00A9               	movwf	?___lmul+1
 11802  1FC8  0830               	movf	___lmul@product,w
 11803  1FC9  00A8               	movwf	?___lmul
 11804  1FCA  0008               	return
 11805  1FCB                     __end_of___lmul:	
 11806                           
 11807                           	psect	text32
 11808  14F1                     __ptext32:	
 11809 ;; *************** function ___aldiv *****************
 11810 ;; Defined at:
 11811 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;  divisor         4    8[BANK0 ] long 
 11814 ;;  dividend        4   12[BANK0 ] long 
 11815 ;; Auto vars:     Size  Location     Type
 11816 ;;  quotient        4   19[BANK0 ] long 
 11817 ;;  sign            1   18[BANK0 ] unsigned char 
 11818 ;;  counter         1   17[BANK0 ] unsigned char 
 11819 ;; Return value:  Size  Location     Type
 11820 ;;                  4    8[BANK0 ] long 
 11821 ;; Registers used:
 11822 ;;		wreg, status,2, status,0
 11823 ;; Tracked objects:
 11824 ;;		On entry : 0/0
 11825 ;;		On exit  : 0/0
 11826 ;;		Unchanged: 0/0
 11827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11828 ;;      Params:         0       8       0       0       0       0       0       0
 11829 ;;      Locals:         0       6       0       0       0       0       0       0
 11830 ;;      Temps:          0       1       0       0       0       0       0       0
 11831 ;;      Totals:         0      15       0       0       0       0       0       0
 11832 ;;Total ram usage:       15 bytes
 11833 ;; Hardware stack levels used:    1
 11834 ;; Hardware stack levels required when called:    3
 11835 ;; This function calls:
 11836 ;;		Nothing
 11837 ;; This function is called by:
 11838 ;;		_BVH2_Appl_Layer
 11839 ;; This function uses a non-reentrant model
 11840 ;;
 11841                           
 11842                           
 11843                           ;psect for function ___aldiv
 11844  14F1                     ___aldiv:	
 11845                           
 11846                           ;incstack = 0
 11847                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11848  14F1  0020               	movlb	0	; select bank0
 11849  14F2  01B2               	clrf	___aldiv@sign
 11850  14F3  1FAB               	btfss	___aldiv@divisor+3,7
 11851  14F4  2D02               	goto	l1930
 11852  14F5  09A8               	comf	___aldiv@divisor,f
 11853  14F6  09A9               	comf	___aldiv@divisor+1,f
 11854  14F7  09AA               	comf	___aldiv@divisor+2,f
 11855  14F8  09AB               	comf	___aldiv@divisor+3,f
 11856  14F9  0AA8               	incf	___aldiv@divisor,f
 11857  14FA  1903               	skipnz
 11858  14FB  0AA9               	incf	___aldiv@divisor+1,f
 11859  14FC  1903               	skipnz
 11860  14FD  0AAA               	incf	___aldiv@divisor+2,f
 11861  14FE  1903               	skipnz
 11862  14FF  0AAB               	incf	___aldiv@divisor+3,f
 11863  1500  01B2               	clrf	___aldiv@sign
 11864  1501  0AB2               	incf	___aldiv@sign,f
 11865  1502                     l1930:	
 11866  1502  1FAF               	btfss	___aldiv@dividend+3,7
 11867  1503  2D13               	goto	l8725
 11868  1504  09AC               	comf	___aldiv@dividend,f
 11869  1505  09AD               	comf	___aldiv@dividend+1,f
 11870  1506  09AE               	comf	___aldiv@dividend+2,f
 11871  1507  09AF               	comf	___aldiv@dividend+3,f
 11872  1508  0AAC               	incf	___aldiv@dividend,f
 11873  1509  1903               	skipnz
 11874  150A  0AAD               	incf	___aldiv@dividend+1,f
 11875  150B  1903               	skipnz
 11876  150C  0AAE               	incf	___aldiv@dividend+2,f
 11877  150D  1903               	skipnz
 11878  150E  0AAF               	incf	___aldiv@dividend+3,f
 11879  150F  3001               	movlw	1
 11880  1510  00B0               	movwf	??___aldiv
 11881  1511  0830               	movf	??___aldiv,w
 11882  1512  06B2               	xorwf	___aldiv@sign,f
 11883  1513                     l8725:	
 11884  1513  3000               	movlw	0
 11885  1514  00B6               	movwf	___aldiv@quotient+3
 11886  1515  3000               	movlw	0
 11887  1516  00B5               	movwf	___aldiv@quotient+2
 11888  1517  3000               	movlw	0
 11889  1518  00B4               	movwf	___aldiv@quotient+1
 11890  1519  3000               	movlw	0
 11891  151A  00B3               	movwf	___aldiv@quotient
 11892  151B  082B               	movf	___aldiv@divisor+3,w
 11893  151C  042A               	iorwf	___aldiv@divisor+2,w
 11894  151D  0429               	iorwf	___aldiv@divisor+1,w
 11895  151E  0428               	iorwf	___aldiv@divisor,w
 11896  151F  1903               	skipnz
 11897  1520  2D5C               	goto	l8747
 11898  1521  01B1               	clrf	___aldiv@counter
 11899  1522  0AB1               	incf	___aldiv@counter,f
 11900  1523                     l8733:	
 11901  1523  1BAB               	btfsc	___aldiv@divisor+3,7
 11902  1524  2D31               	goto	l8735
 11903  1525  3001               	movlw	1
 11904  1526                     u6585:	
 11905  1526  35A8               	lslf	___aldiv@divisor,f
 11906  1527  0DA9               	rlf	___aldiv@divisor+1,f
 11907  1528  0DAA               	rlf	___aldiv@divisor+2,f
 11908  1529  0DAB               	rlf	___aldiv@divisor+3,f
 11909  152A  0B89               	decfsz	9,f
 11910  152B  2D26               	goto	u6585
 11911  152C  3001               	movlw	1
 11912  152D  00B0               	movwf	??___aldiv
 11913  152E  0830               	movf	??___aldiv,w
 11914  152F  07B1               	addwf	___aldiv@counter,f
 11915  1530  2D23               	goto	l8733
 11916  1531                     l8735:	
 11917  1531  3001               	movlw	1
 11918  1532                     u6605:	
 11919  1532  35B3               	lslf	___aldiv@quotient,f
 11920  1533  0DB4               	rlf	___aldiv@quotient+1,f
 11921  1534  0DB5               	rlf	___aldiv@quotient+2,f
 11922  1535  0DB6               	rlf	___aldiv@quotient+3,f
 11923  1536  0B89               	decfsz	9,f
 11924  1537  2D32               	goto	u6605
 11925  1538  082B               	movf	___aldiv@divisor+3,w
 11926  1539  022F               	subwf	___aldiv@dividend+3,w
 11927  153A  1D03               	skipz
 11928  153B  2D46               	goto	u6615
 11929  153C  082A               	movf	___aldiv@divisor+2,w
 11930  153D  022E               	subwf	___aldiv@dividend+2,w
 11931  153E  1D03               	skipz
 11932  153F  2D46               	goto	u6615
 11933  1540  0829               	movf	___aldiv@divisor+1,w
 11934  1541  022D               	subwf	___aldiv@dividend+1,w
 11935  1542  1D03               	skipz
 11936  1543  2D46               	goto	u6615
 11937  1544  0828               	movf	___aldiv@divisor,w
 11938  1545  022C               	subwf	___aldiv@dividend,w
 11939  1546                     u6615:	
 11940  1546  1C03               	skipc
 11941  1547  2D51               	goto	l8743
 11942  1548  0828               	movf	___aldiv@divisor,w
 11943  1549  02AC               	subwf	___aldiv@dividend,f
 11944  154A  0829               	movf	___aldiv@divisor+1,w
 11945  154B  3BAD               	subwfb	___aldiv@dividend+1,f
 11946  154C  082A               	movf	___aldiv@divisor+2,w
 11947  154D  3BAE               	subwfb	___aldiv@dividend+2,f
 11948  154E  082B               	movf	___aldiv@divisor+3,w
 11949  154F  3BAF               	subwfb	___aldiv@dividend+3,f
 11950  1550  1433               	bsf	___aldiv@quotient,0
 11951  1551                     l8743:	
 11952  1551  3001               	movlw	1
 11953  1552                     u6625:	
 11954  1552  36AB               	lsrf	___aldiv@divisor+3,f
 11955  1553  0CAA               	rrf	___aldiv@divisor+2,f
 11956  1554  0CA9               	rrf	___aldiv@divisor+1,f
 11957  1555  0CA8               	rrf	___aldiv@divisor,f
 11958  1556  0B89               	decfsz	9,f
 11959  1557  2D52               	goto	u6625
 11960  1558  3001               	movlw	1
 11961  1559  02B1               	subwf	___aldiv@counter,f
 11962  155A  1D03               	btfss	3,2
 11963  155B  2D31               	goto	l8735
 11964  155C                     l8747:	
 11965  155C  0832               	movf	___aldiv@sign,w
 11966  155D  1903               	btfsc	3,2
 11967  155E  2D6A               	goto	l8751
 11968  155F  09B3               	comf	___aldiv@quotient,f
 11969  1560  09B4               	comf	___aldiv@quotient+1,f
 11970  1561  09B5               	comf	___aldiv@quotient+2,f
 11971  1562  09B6               	comf	___aldiv@quotient+3,f
 11972  1563  0AB3               	incf	___aldiv@quotient,f
 11973  1564  1903               	skipnz
 11974  1565  0AB4               	incf	___aldiv@quotient+1,f
 11975  1566  1903               	skipnz
 11976  1567  0AB5               	incf	___aldiv@quotient+2,f
 11977  1568  1903               	skipnz
 11978  1569  0AB6               	incf	___aldiv@quotient+3,f
 11979  156A                     l8751:	
 11980  156A  0836               	movf	___aldiv@quotient+3,w
 11981  156B  00AB               	movwf	?___aldiv+3
 11982  156C  0835               	movf	___aldiv@quotient+2,w
 11983  156D  00AA               	movwf	?___aldiv+2
 11984  156E  0834               	movf	___aldiv@quotient+1,w
 11985  156F  00A9               	movwf	?___aldiv+1
 11986  1570  0833               	movf	___aldiv@quotient,w
 11987  1571  00A8               	movwf	?___aldiv
 11988  1572  0008               	return
 11989  1573                     __end_of___aldiv:	
 11990                           
 11991                           	psect	text33
 11992  12C1                     __ptext33:	
 11993 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 11994 ;; Defined at:
 11995 ;;		line 1915 in file "../T_Link/BVH2_Appl_Layer.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;		None
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;		None
 12000 ;; Return value:  Size  Location     Type
 12001 ;;                  1    wreg      void 
 12002 ;; Registers used:
 12003 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12009 ;;      Params:         0       0       0       0       0       0       0       0
 12010 ;;      Locals:         0       0       0       0       0       0       0       0
 12011 ;;      Temps:          0       0       0       0       0       0       0       0
 12012 ;;      Totals:         0       0       0       0       0       0       0       0
 12013 ;;Total ram usage:        0 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:    3
 12016 ;; This function calls:
 12017 ;;		Nothing
 12018 ;; This function is called by:
 12019 ;;		_BVH2_Appl_Layer
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           
 12024                           ;psect for function _Cb56_UbatHandling_node_fcn2
 12025  12C1                     _Cb56_UbatHandling_node_fcn2:	
 12026                           
 12027                           ;BVH2_Appl_Layer.c: 1918: if (((UInt8)ui8_BattVolt_mat) > 147) {
 12028                           
 12029                           ;incstack = 0
 12030                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 12031  12C1  3094               	movlw	148
 12032  12C2  0021               	movlb	1	; select bank1
 12033  12C3  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
 12034  12C4  1803               	btfsc	3,0
 12035  12C5  2ACD               	goto	l8647
 12036  12C6  2AE5               	goto	l8653
 12037  12C7                     l1661:	
 12038                           ;BVH2_Appl_Layer.c: 1921: case 2: {
 12039                           
 12040                           ;BVH2_Appl_Layer.c: 1920: switch (SIBFS_UbatHandling_b.Aux_sflag3) {
 12041                           
 12042                           
 12043                           ;BVH2_Appl_Layer.c: 1922: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 12044  12C7  1257               	bcf	_SIBFS_UbatHandling_b,4
 12045                           
 12046                           ;BVH2_Appl_Layer.c: 1923: break;
 12047  12C8  2AD7               	goto	l1662
 12048  12C9                     l1663:	
 12049                           ;BVH2_Appl_Layer.c: 1924: };BVH2_Appl_Layer.c: 1925: case 3: {
 12050                           
 12051                           
 12052                           ;BVH2_Appl_Layer.c: 1926: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 12053  12C9  12D7               	bcf	_SIBFS_UbatHandling_b,5
 12054                           
 12055                           ;BVH2_Appl_Layer.c: 1927: break;
 12056  12CA  2AD7               	goto	l1662
 12057  12CB                     l1664:	
 12058                           ;BVH2_Appl_Layer.c: 1928: };BVH2_Appl_Layer.c: 1929: default: {
 12059                           
 12060                           
 12061                           ;BVH2_Appl_Layer.c: 1930: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 12062  12CB  1357               	bcf	_SIBFS_UbatHandling_b,6
 12063                           
 12064                           ;BVH2_Appl_Layer.c: 1931: };BVH2_Appl_Layer.c: 1932: }
 12065  12CC  2AD7               	goto	l1662
 12066  12CD                     l8647:	
 12067  12CD  0020               	movlb	0	; select bank0
 12068  12CE  0857               	movf	_SIBFS_UbatHandling_b,w
 12069  12CF  3907               	andlw	7
 12070                           
 12071                           ; Switch size 1, requested type "space"
 12072                           ; Number of cases is 2, Range of values is 2 to 3
 12073                           ; switch strategies available:
 12074                           ; Name         Instructions Cycles
 12075                           ; simple_byte            7     4 (average)
 12076                           ; direct_byte           13     9 (fixed)
 12077                           ; jumptable            263     9 (fixed)
 12078                           ;	Chosen strategy is simple_byte
 12079  12D0  3A02               	xorlw	2	; case 2
 12080  12D1  1903               	skipnz
 12081  12D2  2AC7               	goto	l1661
 12082  12D3  3A01               	xorlw	1	; case 3
 12083  12D4  1903               	skipnz
 12084  12D5  2AC9               	goto	l1663
 12085  12D6  2ACB               	goto	l1664
 12086  12D7                     l1662:	
 12087                           
 12088                           ;BVH2_Appl_Layer.c: 1933: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 12089  12D7  1657               	bsf	_SIBFS_UbatHandling_b,4
 12090                           
 12091                           ;BVH2_Appl_Layer.c: 1934: Cb56_odPumpOff = 1;
 12092  12D8  0022               	movlb	2	; select bank2
 12093  12D9  01B7               	clrf	_Cb56_odPumpOff^(0+256)
 12094  12DA  0AB7               	incf	_Cb56_odPumpOff^(0+256),f
 12095                           
 12096                           ;BVH2_Appl_Layer.c: 1935: Cb56_odFixedValueSel = 0;
 12097  12DB  01B8               	clrf	_Cb56_odFixedValueSel^(0+256)
 12098                           
 12099                           ;BVH2_Appl_Layer.c: 1936: Cb56_oUbat_Alarm_High = 1;
 12100  12DC  01B9               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 12101  12DD  0AB9               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 12102                           
 12103                           ;BVH2_Appl_Layer.c: 1937: }
 12104  12DE  0008               	return
 12105  12DF                     l1667:	
 12106                           ;BVH2_Appl_Layer.c: 1940: case 2: {
 12107                           
 12108                           ;BVH2_Appl_Layer.c: 1938: else {;BVH2_Appl_Layer.c: 1939: switch (SIBFS_UbatHandling_b.A
      +                          ux_sflag3) {
 12109                           
 12110                           
 12111                           ;BVH2_Appl_Layer.c: 1941: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 12112  12DF  1257               	bcf	_SIBFS_UbatHandling_b,4
 12113                           
 12114                           ;BVH2_Appl_Layer.c: 1942: break;
 12115  12E0  2AEF               	goto	l8655
 12116  12E1                     l1669:	
 12117                           ;BVH2_Appl_Layer.c: 1943: };BVH2_Appl_Layer.c: 1944: case 3: {
 12118                           
 12119                           
 12120                           ;BVH2_Appl_Layer.c: 1945: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 12121  12E1  12D7               	bcf	_SIBFS_UbatHandling_b,5
 12122                           
 12123                           ;BVH2_Appl_Layer.c: 1946: break;
 12124  12E2  2AEF               	goto	l8655
 12125  12E3                     l1670:	
 12126                           ;BVH2_Appl_Layer.c: 1947: };BVH2_Appl_Layer.c: 1948: default: {
 12127                           
 12128                           
 12129                           ;BVH2_Appl_Layer.c: 1949: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 12130  12E3  1357               	bcf	_SIBFS_UbatHandling_b,6
 12131                           
 12132                           ;BVH2_Appl_Layer.c: 1950: };BVH2_Appl_Layer.c: 1951: }
 12133  12E4  2AEF               	goto	l8655
 12134  12E5                     l8653:	
 12135  12E5  0020               	movlb	0	; select bank0
 12136  12E6  0857               	movf	_SIBFS_UbatHandling_b,w
 12137  12E7  3907               	andlw	7
 12138                           
 12139                           ; Switch size 1, requested type "space"
 12140                           ; Number of cases is 2, Range of values is 2 to 3
 12141                           ; switch strategies available:
 12142                           ; Name         Instructions Cycles
 12143                           ; simple_byte            7     4 (average)
 12144                           ; direct_byte           13     9 (fixed)
 12145                           ; jumptable            263     9 (fixed)
 12146                           ;	Chosen strategy is simple_byte
 12147  12E8  3A02               	xorlw	2	; case 2
 12148  12E9  1903               	skipnz
 12149  12EA  2ADF               	goto	l1667
 12150  12EB  3A01               	xorlw	1	; case 3
 12151  12EC  1903               	skipnz
 12152  12ED  2AE1               	goto	l1669
 12153  12EE  2AE3               	goto	l1670
 12154  12EF                     l8655:	
 12155                           
 12156                           ;BVH2_Appl_Layer.c: 1954: if (((UInt8)ui8_BattVolt_mat) < 45) {
 12157  12EF  302D               	movlw	45
 12158  12F0  0021               	movlb	1	; select bank1
 12159  12F1  022E               	subwf	_ui8_BattVolt_mat^(0+128),w
 12160  12F2  1803               	skipnc
 12161  12F3  2AFD               	goto	l1671
 12162                           
 12163                           ;BVH2_Appl_Layer.c: 1956: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 12164  12F4  0020               	movlb	0	; select bank0
 12165  12F5  16D7               	bsf	_SIBFS_UbatHandling_b,5
 12166                           
 12167                           ;BVH2_Appl_Layer.c: 1957: Cb56_odPumpOff = 1;
 12168  12F6  0022               	movlb	2	; select bank2
 12169  12F7  01B7               	clrf	_Cb56_odPumpOff^(0+256)
 12170  12F8  0AB7               	incf	_Cb56_odPumpOff^(0+256),f
 12171                           
 12172                           ;BVH2_Appl_Layer.c: 1958: Cb56_odFixedValueSel = 0;
 12173  12F9  01B8               	clrf	_Cb56_odFixedValueSel^(0+256)
 12174                           
 12175                           ;BVH2_Appl_Layer.c: 1959: Cb56_oUbat_Alarm_High = 1;
 12176  12FA  01B9               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 12177  12FB  0AB9               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 12178                           
 12179                           ;BVH2_Appl_Layer.c: 1960: }
 12180  12FC  0008               	return
 12181  12FD                     l1671:	
 12182                           
 12183                           ;BVH2_Appl_Layer.c: 1961: else {;BVH2_Appl_Layer.c: 1963: SIBFS_UbatHandling_b.Cb60_Norm
      +                          alUbat = 1;
 12184  12FD  0020               	movlb	0	; select bank0
 12185  12FE  1757               	bsf	_SIBFS_UbatHandling_b,6
 12186                           
 12187                           ;BVH2_Appl_Layer.c: 1964: Cb56_odPumpOff = 0;
 12188  12FF  0022               	movlb	2	; select bank2
 12189  1300  01B7               	clrf	_Cb56_odPumpOff^(0+256)
 12190                           
 12191                           ;BVH2_Appl_Layer.c: 1965: Cb56_odFixedValueSel = 0;
 12192  1301  01B8               	clrf	_Cb56_odFixedValueSel^(0+256)
 12193                           
 12194                           ;BVH2_Appl_Layer.c: 1966: Cb56_oUbat_Alarm_High = 0;
 12195  1302  01B9               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 12196  1303  0008               	return
 12197  1304                     __end_of_Cb56_UbatHandling_node_fcn2:	
 12198                           
 12199                           	psect	text34
 12200  1EFE                     __ptext34:	
 12201 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 12202 ;; Defined at:
 12203 ;;		line 1874 in file "../T_Link/BVH2_Appl_Layer.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;		None
 12206 ;; Auto vars:     Size  Location     Type
 12207 ;;		None
 12208 ;; Return value:  Size  Location     Type
 12209 ;;                  1    wreg      void 
 12210 ;; Registers used:
 12211 ;;		wreg, status,2, status,0
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12217 ;;      Params:         0       0       0       0       0       0       0       0
 12218 ;;      Locals:         0       0       0       0       0       0       0       0
 12219 ;;      Temps:          0       0       0       0       0       0       0       0
 12220 ;;      Totals:         0       0       0       0       0       0       0       0
 12221 ;;Total ram usage:        0 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    3
 12224 ;; This function calls:
 12225 ;;		Nothing
 12226 ;; This function is called by:
 12227 ;;		_BVH2_Appl_Layer
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
 12233  1EFE                     _Cb44_Pic_etat_monitor_node_fcn1:	
 12234                           
 12235                           ;BVH2_Appl_Layer.c: 1878: if (bool_mat_pic_etat) {
 12236                           
 12237                           ;incstack = 0
 12238                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 12239  1EFE  0021               	movlb	1	; select bank1
 12240  1EFF  084A               	movf	_bool_mat_pic_etat^(0+128),w
 12241  1F00  1903               	btfsc	3,2
 12242  1F01  2F0B               	goto	l8515
 12243                           
 12244                           ;BVH2_Appl_Layer.c: 1880: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)2;
 12245  1F02  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 12246  1F03  39F8               	andlw	-8
 12247  1F04  3802               	iorlw	2
 12248  1F05  00C6               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 12249                           
 12250                           ;BVH2_Appl_Layer.c: 1881: Cb44_StateCnt = 0 ;
 12251  1F06  01A4               	clrf	_Cb44_StateCnt^(0+128)
 12252  1F07  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
 12253                           
 12254                           ;BVH2_Appl_Layer.c: 1882: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 12255  1F08  3018               	movlw	24
 12256  1F09  04C6               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 12257                           
 12258                           ;BVH2_Appl_Layer.c: 1883: }
 12259  1F0A  0008               	return
 12260  1F0B                     l8515:	
 12261                           
 12262                           ;BVH2_Appl_Layer.c: 1884: else {;BVH2_Appl_Layer.c: 1885: if (Cb44_StateCnt > 5) {
 12263  1F0B  3000               	movlw	0
 12264  1F0C  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 12265  1F0D  3006               	movlw	6
 12266  1F0E  1903               	skipnz
 12267  1F0F  0224               	subwf	_Cb44_StateCnt^(0+128),w
 12268  1F10  1C03               	skipc
 12269  1F11  2F1D               	goto	l8523
 12270                           
 12271                           ;BVH2_Appl_Layer.c: 1887: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 12272  1F12  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 12273  1F13  39F8               	andlw	-8
 12274  1F14  3803               	iorlw	3
 12275  1F15  00C6               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 12276                           
 12277                           ;BVH2_Appl_Layer.c: 1888: Cb44_oShutoff = 0;
 12278  1F16  0022               	movlb	2	; select bank2
 12279  1F17  01BA               	clrf	_Cb44_oShutoff^(0+256)
 12280                           
 12281                           ;BVH2_Appl_Layer.c: 1889: Cb44_oAlarm = 0;
 12282  1F18  01BB               	clrf	_Cb44_oAlarm^(0+256)
 12283                           
 12284                           ;BVH2_Appl_Layer.c: 1890: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 12285  1F19  3018               	movlw	24
 12286  1F1A  0021               	movlb	1	; select bank1
 12287  1F1B  04C6               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 12288                           
 12289                           ;BVH2_Appl_Layer.c: 1891: }
 12290  1F1C  0008               	return
 12291  1F1D                     l8523:	
 12292                           
 12293                           ;BVH2_Appl_Layer.c: 1892: else {;BVH2_Appl_Layer.c: 1893: SIBFS_Pic_etat_monitor_b.Cb44_
      +                          glflag = 1 ;
 12294  1F1D  0846               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 12295  1F1E  39E7               	andlw	-25
 12296  1F1F  3808               	iorlw	8
 12297  1F20  00C6               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 12298  1F21  0008               	return
 12299  1F22                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 12300                           
 12301                           	psect	text35
 12302  1573                     __ptext35:	
 12303 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 12304 ;; Defined at:
 12305 ;;		line 1753 in file "../T_Link/BVH2_Appl_Layer.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;		None
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;		None
 12310 ;; Return value:  Size  Location     Type
 12311 ;;                  1    wreg      void 
 12312 ;; Registers used:
 12313 ;;		wreg, status,2, status,0
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12319 ;;      Params:         0       0       0       0       0       0       0       0
 12320 ;;      Locals:         0       0       0       0       0       0       0       0
 12321 ;;      Temps:          0       0       0       0       0       0       0       0
 12322 ;;      Totals:         0       0       0       0       0       0       0       0
 12323 ;;Total ram usage:        0 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; Hardware stack levels required when called:    3
 12326 ;; This function calls:
 12327 ;;		Nothing
 12328 ;; This function is called by:
 12329 ;;		_BVH2_Appl_Layer
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           
 12334                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 12335  1573                     _Cb34_PWM_Detection_node_fcn1:	
 12336                           
 12337                           ;BVH2_Appl_Layer.c: 1755: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 12338                           
 12339                           ;incstack = 0
 12340                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 12341  1573  0020               	movlb	0	; select bank0
 12342  1574  0856               	movf	_Cb34_idPWM,w
 12343  1575  1903               	btfsc	3,2
 12344  1576  2D7B               	goto	l8529
 12345  1577  30C8               	movlw	200
 12346  1578  0256               	subwf	_Cb34_idPWM,w
 12347  1579  1C03               	skipc
 12348  157A  2D8E               	goto	l8543
 12349  157B                     l8529:	
 12350                           
 12351                           ;BVH2_Appl_Layer.c: 1756: if (Cb34_idPWM > 199) {
 12352  157B  30C8               	movlw	200
 12353  157C  0256               	subwf	_Cb34_idPWM,w
 12354  157D  1C03               	skipc
 12355  157E  0008               	return
 12356                           
 12357                           ;BVH2_Appl_Layer.c: 1758: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 12358  157F  0021               	movlb	1	; select bank1
 12359  1580  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12360  1581  39F0               	andlw	-16
 12361  1582  3807               	iorlw	7
 12362  1583  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12363                           
 12364                           ;BVH2_Appl_Layer.c: 1759: Cb34_odPumpOff = 0;
 12365  1584  0023               	movlb	3	; select bank3
 12366  1585  01D8               	clrf	_Cb34_odPumpOff^(0+384)
 12367                           
 12368                           ;BVH2_Appl_Layer.c: 1760: Cb34_odFixedValueSel = 1;
 12369  1586  0022               	movlb	2	; select bank2
 12370  1587  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
 12371  1588  0ABC               	incf	_Cb34_odFixedValueSel^(0+256),f
 12372                           
 12373                           ;BVH2_Appl_Layer.c: 1761: Cb34_odFixedLowValueSel = 0;
 12374  1589  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12375                           
 12376                           ;BVH2_Appl_Layer.c: 1762: Cb34_oPWM_SC_Alarm = 0;
 12377  158A  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12378                           
 12379                           ;BVH2_Appl_Layer.c: 1763: Cb34_oPWM_Alarm = 1;
 12380  158B  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12381  158C  0ABF               	incf	_Cb34_oPWM_Alarm^(0+256),f
 12382                           
 12383                           ;BVH2_Appl_Layer.c: 1764: };BVH2_Appl_Layer.c: 1765: }
 12384  158D  0008               	return
 12385  158E                     l8543:	
 12386                           
 12387                           ;BVH2_Appl_Layer.c: 1766: else {;BVH2_Appl_Layer.c: 1769: if ((ui16_PWM_Freq_mat < 36000
      +                          ) || (ui16_PWM_Freq_mat > 44000)) {
 12388  158E  308C               	movlw	140
 12389  158F  0023               	movlb	3	; select bank3
 12390  1590  0239               	subwf	(_ui16_PWM_Freq_mat+1)^(0+384),w
 12391  1591  30A0               	movlw	160
 12392  1592  1903               	skipnz
 12393  1593  0238               	subwf	_ui16_PWM_Freq_mat^(0+384),w
 12394  1594  1C03               	skipc
 12395  1595  2D9D               	goto	l8547
 12396  1596  30AB               	movlw	171
 12397  1597  0239               	subwf	(_ui16_PWM_Freq_mat+1)^(0+384),w
 12398  1598  30E1               	movlw	225
 12399  1599  1903               	skipnz
 12400  159A  0238               	subwf	_ui16_PWM_Freq_mat^(0+384),w
 12401  159B  1C03               	skipc
 12402  159C  2DAC               	goto	l8559
 12403  159D                     l8547:	
 12404                           
 12405                           ;BVH2_Appl_Layer.c: 1771: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 12406  159D  0021               	movlb	1	; select bank1
 12407  159E  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12408  159F  39F0               	andlw	-16
 12409  15A0  3806               	iorlw	6
 12410  15A1  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12411                           
 12412                           ;BVH2_Appl_Layer.c: 1772: Cb34_odPumpOff = 0;
 12413  15A2  0023               	movlb	3	; select bank3
 12414  15A3  01D8               	clrf	_Cb34_odPumpOff^(0+384)
 12415                           
 12416                           ;BVH2_Appl_Layer.c: 1773: Cb34_odFixedValueSel = 1;
 12417  15A4  0022               	movlb	2	; select bank2
 12418  15A5  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
 12419  15A6  0ABC               	incf	_Cb34_odFixedValueSel^(0+256),f
 12420                           
 12421                           ;BVH2_Appl_Layer.c: 1774: Cb34_odFixedLowValueSel = 0;
 12422  15A7  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12423                           
 12424                           ;BVH2_Appl_Layer.c: 1775: Cb34_oPWM_SC_Alarm = 1;
 12425  15A8  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12426  15A9  0ABE               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12427                           
 12428                           ;BVH2_Appl_Layer.c: 1776: Cb34_oPWM_Alarm = 0;
 12429  15AA  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12430                           
 12431                           ;BVH2_Appl_Layer.c: 1777: }
 12432  15AB  0008               	return
 12433  15AC                     l8559:	
 12434                           
 12435                           ;BVH2_Appl_Layer.c: 1778: else {;BVH2_Appl_Layer.c: 1779: if (Cb34_idPWM <= 5) {
 12436  15AC  3006               	movlw	6
 12437  15AD  0020               	movlb	0	; select bank0
 12438  15AE  0256               	subwf	_Cb34_idPWM,w
 12439  15AF  1803               	skipnc
 12440  15B0  2DC0               	goto	l8573
 12441                           
 12442                           ;BVH2_Appl_Layer.c: 1781: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 12443  15B1  0021               	movlb	1	; select bank1
 12444  15B2  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12445  15B3  39F0               	andlw	-16
 12446  15B4  3803               	iorlw	3
 12447  15B5  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12448                           
 12449                           ;BVH2_Appl_Layer.c: 1782: Cb34_odPumpOff = 0;
 12450  15B6  0023               	movlb	3	; select bank3
 12451  15B7  01D8               	clrf	_Cb34_odPumpOff^(0+384)
 12452                           
 12453                           ;BVH2_Appl_Layer.c: 1783: Cb34_odFixedValueSel = 1;
 12454  15B8  0022               	movlb	2	; select bank2
 12455  15B9  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
 12456  15BA  0ABC               	incf	_Cb34_odFixedValueSel^(0+256),f
 12457                           
 12458                           ;BVH2_Appl_Layer.c: 1784: Cb34_odFixedLowValueSel = 0;
 12459  15BB  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12460                           
 12461                           ;BVH2_Appl_Layer.c: 1785: Cb34_oPWM_SC_Alarm = 1;
 12462  15BC  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12463  15BD  0ABE               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12464                           
 12465                           ;BVH2_Appl_Layer.c: 1786: Cb34_oPWM_Alarm = 0;
 12466  15BE  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12467                           
 12468                           ;BVH2_Appl_Layer.c: 1787: }
 12469  15BF  0008               	return
 12470  15C0                     l8573:	
 12471                           
 12472                           ;BVH2_Appl_Layer.c: 1788: else {;BVH2_Appl_Layer.c: 1789: if (Cb34_idPWM < 9) {
 12473  15C0  3009               	movlw	9
 12474  15C1  0020               	movlb	0	; select bank0
 12475  15C2  0256               	subwf	_Cb34_idPWM,w
 12476  15C3  1803               	skipnc
 12477  15C4  2DD4               	goto	l8587
 12478                           
 12479                           ;BVH2_Appl_Layer.c: 1792: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1793: (UInt8)8;
 12480  15C5  0021               	movlb	1	; select bank1
 12481  15C6  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12482  15C7  39F0               	andlw	-16
 12483  15C8  3808               	iorlw	8
 12484  15C9  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12485                           
 12486                           ;BVH2_Appl_Layer.c: 1794: Cb34_odPumpOff = 1;
 12487  15CA  0023               	movlb	3	; select bank3
 12488  15CB  01D8               	clrf	_Cb34_odPumpOff^(0+384)
 12489  15CC  0AD8               	incf	_Cb34_odPumpOff^(0+384),f
 12490                           
 12491                           ;BVH2_Appl_Layer.c: 1795: Cb34_odFixedValueSel = 0;
 12492  15CD  0022               	movlb	2	; select bank2
 12493  15CE  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
 12494                           
 12495                           ;BVH2_Appl_Layer.c: 1796: Cb34_odFixedLowValueSel = 0;
 12496  15CF  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12497                           
 12498                           ;BVH2_Appl_Layer.c: 1797: Cb34_oPWM_SC_Alarm = 1;
 12499  15D0  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12500  15D1  0ABE               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12501                           
 12502                           ;BVH2_Appl_Layer.c: 1798: Cb34_oPWM_Alarm = 0;
 12503  15D2  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12504                           
 12505                           ;BVH2_Appl_Layer.c: 1799: }
 12506  15D3  0008               	return
 12507  15D4                     l8587:	
 12508                           
 12509                           ;BVH2_Appl_Layer.c: 1800: else {;BVH2_Appl_Layer.c: 1801: if (Cb34_idPWM > 191) {
 12510  15D4  30C0               	movlw	192
 12511  15D5  0020               	movlb	0	; select bank0
 12512  15D6  0256               	subwf	_Cb34_idPWM,w
 12513  15D7  1C03               	skipc
 12514  15D8  2DE8               	goto	l8601
 12515                           
 12516                           ;BVH2_Appl_Layer.c: 1804: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1805: (UInt8)4;
 12517  15D9  0021               	movlb	1	; select bank1
 12518  15DA  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12519  15DB  39F0               	andlw	-16
 12520  15DC  3804               	iorlw	4
 12521  15DD  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12522                           
 12523                           ;BVH2_Appl_Layer.c: 1806: Cb34_odPumpOff = 0;
 12524  15DE  0023               	movlb	3	; select bank3
 12525  15DF  01D8               	clrf	_Cb34_odPumpOff^(0+384)
 12526                           
 12527                           ;BVH2_Appl_Layer.c: 1807: Cb34_odFixedValueSel = 1;
 12528  15E0  0022               	movlb	2	; select bank2
 12529  15E1  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
 12530  15E2  0ABC               	incf	_Cb34_odFixedValueSel^(0+256),f
 12531                           
 12532                           ;BVH2_Appl_Layer.c: 1808: Cb34_odFixedLowValueSel = 0;
 12533  15E3  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12534                           
 12535                           ;BVH2_Appl_Layer.c: 1809: Cb34_oPWM_SC_Alarm = 1;
 12536  15E4  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12537  15E5  0ABE               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12538                           
 12539                           ;BVH2_Appl_Layer.c: 1810: Cb34_oPWM_Alarm = 0;
 12540  15E6  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12541                           
 12542                           ;BVH2_Appl_Layer.c: 1811: }
 12543  15E7  0008               	return
 12544  15E8                     l8601:	
 12545                           
 12546                           ;BVH2_Appl_Layer.c: 1812: else {;BVH2_Appl_Layer.c: 1813: if (Cb34_idPWM >= 23) {
 12547  15E8  3017               	movlw	23
 12548  15E9  0020               	movlb	0	; select bank0
 12549  15EA  0256               	subwf	_Cb34_idPWM,w
 12550  15EB  1C03               	skipc
 12551  15EC  2DFA               	goto	l8615
 12552                           
 12553                           ;BVH2_Appl_Layer.c: 1816: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1817: (UInt8)2;
 12554  15ED  0021               	movlb	1	; select bank1
 12555  15EE  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12556  15EF  39F0               	andlw	-16
 12557  15F0  3802               	iorlw	2
 12558  15F1  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12559                           
 12560                           ;BVH2_Appl_Layer.c: 1818: Cb34_odPumpOff = 0;
 12561  15F2  0023               	movlb	3	; select bank3
 12562  15F3  01D8               	clrf	_Cb34_odPumpOff^(0+384)
 12563                           
 12564                           ;BVH2_Appl_Layer.c: 1819: Cb34_odFixedLowValueSel = 0;
 12565  15F4  0022               	movlb	2	; select bank2
 12566  15F5  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12567                           
 12568                           ;BVH2_Appl_Layer.c: 1820: Cb34_odFixedValueSel = 0;
 12569  15F6  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
 12570                           
 12571                           ;BVH2_Appl_Layer.c: 1821: Cb34_oPWM_SC_Alarm = 0;
 12572  15F7  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12573                           
 12574                           ;BVH2_Appl_Layer.c: 1822: Cb34_oPWM_Alarm = 0;
 12575  15F8  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12576                           
 12577                           ;BVH2_Appl_Layer.c: 1823: }
 12578  15F9  0008               	return
 12579  15FA                     l8615:	
 12580                           
 12581                           ;BVH2_Appl_Layer.c: 1824: else {;BVH2_Appl_Layer.c: 1825: if (Cb34_idPWM > 19) {
 12582  15FA  3014               	movlw	20
 12583  15FB  0020               	movlb	0	; select bank0
 12584  15FC  0256               	subwf	_Cb34_idPWM,w
 12585  15FD  1C03               	skipc
 12586  15FE  2E0D               	goto	l8629
 12587                           
 12588                           ;BVH2_Appl_Layer.c: 1828: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1829: (UInt8)5;
 12589  15FF  0021               	movlb	1	; select bank1
 12590  1600  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12591  1601  39F0               	andlw	-16
 12592  1602  3805               	iorlw	5
 12593  1603  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12594                           
 12595                           ;BVH2_Appl_Layer.c: 1830: Cb34_odPumpOff = 0;
 12596  1604  0023               	movlb	3	; select bank3
 12597  1605  01D8               	clrf	_Cb34_odPumpOff^(0+384)
 12598                           
 12599                           ;BVH2_Appl_Layer.c: 1831: Cb34_odFixedValueSel = 0;
 12600  1606  0022               	movlb	2	; select bank2
 12601  1607  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
 12602                           
 12603                           ;BVH2_Appl_Layer.c: 1832: Cb34_odFixedLowValueSel = 1;
 12604  1608  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12605  1609  0ABD               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 12606                           
 12607                           ;BVH2_Appl_Layer.c: 1833: Cb34_oPWM_SC_Alarm = 0;
 12608  160A  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12609                           
 12610                           ;BVH2_Appl_Layer.c: 1834: Cb34_oPWM_Alarm = 0;
 12611  160B  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12612                           
 12613                           ;BVH2_Appl_Layer.c: 1835: }
 12614  160C  0008               	return
 12615  160D                     l8629:	
 12616                           
 12617                           ;BVH2_Appl_Layer.c: 1836: else {;BVH2_Appl_Layer.c: 1837: if (Cb34_idPWM <= 19) {
 12618  160D  3014               	movlw	20
 12619  160E  0020               	movlb	0	; select bank0
 12620  160F  0256               	subwf	_Cb34_idPWM,w
 12621  1610  1803               	skipnc
 12622  1611  0008               	return
 12623                           
 12624                           ;BVH2_Appl_Layer.c: 1840: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1841: (UInt8)1;
 12625  1612  0021               	movlb	1	; select bank1
 12626  1613  0847               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12627  1614  39F0               	andlw	-16
 12628  1615  3801               	iorlw	1
 12629  1616  00C7               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12630                           
 12631                           ;BVH2_Appl_Layer.c: 1842: Cb34_odPumpOff = 1;
 12632  1617  0023               	movlb	3	; select bank3
 12633  1618  01D8               	clrf	_Cb34_odPumpOff^(0+384)
 12634  1619  0AD8               	incf	_Cb34_odPumpOff^(0+384),f
 12635                           
 12636                           ;BVH2_Appl_Layer.c: 1843: Cb34_odFixedValueSel = 0;
 12637  161A  0022               	movlb	2	; select bank2
 12638  161B  01BC               	clrf	_Cb34_odFixedValueSel^(0+256)
 12639                           
 12640                           ;BVH2_Appl_Layer.c: 1844: Cb34_odFixedLowValueSel = 0;
 12641  161C  01BD               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12642                           
 12643                           ;BVH2_Appl_Layer.c: 1845: Cb34_oPWM_SC_Alarm = 0;
 12644  161D  01BE               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12645                           
 12646                           ;BVH2_Appl_Layer.c: 1846: Cb34_oPWM_Alarm = 0;
 12647  161E  01BF               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12648  161F  0008               	return
 12649  1620                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 12650                           
 12651                           	psect	text36
 12652  1F71                     __ptext36:	
 12653 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 12654 ;; Defined at:
 12655 ;;		line 1709 in file "../T_Link/BVH2_Appl_Layer.c"
 12656 ;; Parameters:    Size  Location     Type
 12657 ;;		None
 12658 ;; Auto vars:     Size  Location     Type
 12659 ;;		None
 12660 ;; Return value:  Size  Location     Type
 12661 ;;                  1    wreg      void 
 12662 ;; Registers used:
 12663 ;;		wreg, status,2, status,0
 12664 ;; Tracked objects:
 12665 ;;		On entry : 0/0
 12666 ;;		On exit  : 0/0
 12667 ;;		Unchanged: 0/0
 12668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12669 ;;      Params:         0       0       0       0       0       0       0       0
 12670 ;;      Locals:         0       0       0       0       0       0       0       0
 12671 ;;      Temps:          0       0       0       0       0       0       0       0
 12672 ;;      Totals:         0       0       0       0       0       0       0       0
 12673 ;;Total ram usage:        0 bytes
 12674 ;; Hardware stack levels used:    1
 12675 ;; Hardware stack levels required when called:    3
 12676 ;; This function calls:
 12677 ;;		Nothing
 12678 ;; This function is called by:
 12679 ;;		_BVH2_Appl_Layer
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           
 12684                           ;psect for function _Cb1_Current_An___High_node_fcn1
 12685  1F71                     _Cb1_Current_An___High_node_fcn1:	
 12686                           
 12687                           ;BVH2_Appl_Layer.c: 1713: if (bool_mat_currAlarm_bldc) {
 12688                           
 12689                           ;incstack = 0
 12690                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 12691  1F71  0021               	movlb	1	; select bank1
 12692  1F72  084F               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 12693  1F73  1903               	btfsc	3,2
 12694  1F74  2F80               	goto	l8673
 12695                           
 12696                           ;BVH2_Appl_Layer.c: 1715: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1716: (UInt8)2;
 12697  1F75  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12698  1F76  39F0               	andlw	-16
 12699  1F77  3802               	iorlw	2
 12700  1F78  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12701                           
 12702                           ;BVH2_Appl_Layer.c: 1717: Cb1_StateCnt = 0 ;
 12703  1F79  0020               	movlb	0	; select bank0
 12704  1F7A  01CD               	clrf	_Cb1_StateCnt
 12705  1F7B  01CE               	clrf	_Cb1_StateCnt+1
 12706                           
 12707                           ;BVH2_Appl_Layer.c: 1718: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 12708  1F7C  3030               	movlw	48
 12709  1F7D  0021               	movlb	1	; select bank1
 12710  1F7E  04C8               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 12711                           
 12712                           ;BVH2_Appl_Layer.c: 1719: }
 12713  1F7F  0008               	return
 12714  1F80                     l8673:	
 12715                           
 12716                           ;BVH2_Appl_Layer.c: 1720: else {;BVH2_Appl_Layer.c: 1721: if (Cb1_StateCnt > 100) {
 12717  1F80  3000               	movlw	0
 12718  1F81  0020               	movlb	0	; select bank0
 12719  1F82  024E               	subwf	_Cb1_StateCnt+1,w
 12720  1F83  3065               	movlw	101
 12721  1F84  1903               	skipnz
 12722  1F85  024D               	subwf	_Cb1_StateCnt,w
 12723  1F86  1C03               	skipc
 12724  1F87  2F95               	goto	l8685
 12725                           
 12726                           ;BVH2_Appl_Layer.c: 1723: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1724: (UInt8)5;
 12727  1F88  0021               	movlb	1	; select bank1
 12728  1F89  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12729  1F8A  39F0               	andlw	-16
 12730  1F8B  3805               	iorlw	5
 12731  1F8C  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12732                           
 12733                           ;BVH2_Appl_Layer.c: 1725: Cb1_oShutoff = 0;
 12734  1F8D  0022               	movlb	2	; select bank2
 12735  1F8E  01C0               	clrf	_Cb1_oShutoff^(0+256)
 12736                           
 12737                           ;BVH2_Appl_Layer.c: 1726: Cb1_oCurrentAlarm = 0;
 12738  1F8F  01C1               	clrf	_Cb1_oCurrentAlarm^(0+256)
 12739                           
 12740                           ;BVH2_Appl_Layer.c: 1727: Cb1_RestartCounter = 0 ;
 12741  1F90  0021               	movlb	1	; select bank1
 12742  1F91  01C9               	clrf	_Cb1_RestartCounter^(0+128)
 12743                           
 12744                           ;BVH2_Appl_Layer.c: 1728: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 12745  1F92  3030               	movlw	48
 12746  1F93  04C8               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 12747                           
 12748                           ;BVH2_Appl_Layer.c: 1729: }
 12749  1F94  0008               	return
 12750  1F95                     l8685:	
 12751                           
 12752                           ;BVH2_Appl_Layer.c: 1730: else {;BVH2_Appl_Layer.c: 1731: SIBFS_Current_Analysis_High_b.
      +                          Cb1_glflag = 1 ;
 12753  1F95  0021               	movlb	1	; select bank1
 12754  1F96  0848               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 12755  1F97  39CF               	andlw	-49
 12756  1F98  3810               	iorlw	16
 12757  1F99  00C8               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 12758  1F9A  0008               	return
 12759  1F9B                     __end_of_Cb1_Current_An___High_node_fcn1:	
 12760                           
 12761                           	psect	intentry
 12762  0004                     __pintentry:	
 12763 ;; *************** function _interrupt_handler *****************
 12764 ;; Defined at:
 12765 ;;		line 78 in file "../interrupt.c"
 12766 ;; Parameters:    Size  Location     Type
 12767 ;;		None
 12768 ;; Auto vars:     Size  Location     Type
 12769 ;;		None
 12770 ;; Return value:  Size  Location     Type
 12771 ;;                  1    wreg      void 
 12772 ;; Registers used:
 12773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12774 ;; Tracked objects:
 12775 ;;		On entry : 0/0
 12776 ;;		On exit  : 0/0
 12777 ;;		Unchanged: 0/0
 12778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12779 ;;      Params:         0       0       0       0       0       0       0       0
 12780 ;;      Locals:         0       0       0       0       0       0       0       0
 12781 ;;      Temps:          0       0       0       0       0       0       0       0
 12782 ;;      Totals:         0       0       0       0       0       0       0       0
 12783 ;;Total ram usage:        0 bytes
 12784 ;; Hardware stack levels used:    1
 12785 ;; Hardware stack levels required when called:    2
 12786 ;; This function calls:
 12787 ;;		_PWM_CTRL
 12788 ;;		_Task1ms
 12789 ;;		_interrrupt_bldc
 12790 ;;		_interrupt_PWMCapture
 12791 ;; This function is called by:
 12792 ;;		Interrupt level 1
 12793 ;; This function uses a non-reentrant model
 12794 ;;
 12795                           
 12796  0004                     _interrupt_handler:	
 12797                           
 12798                           ;incstack = 0
 12799  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12800                           
 12801                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12802  0005  3180               	pagesel	$
 12803                           
 12804                           ;interrupt.c: 82: if( TMR1IF )
 12805  0006  0020               	movlb	0	; select bank0
 12806  0007  1811               	btfsc	17,0	;volatile
 12807                           
 12808                           ;interrupt.c: 84: {;interrupt.c: 86: TMR1IF = 0;
 12809  0008  1011               	bcf	17,0	;volatile
 12810                           
 12811                           ;interrupt.c: 88: };interrupt.c: 91: if( TMR4IF )
 12812  0009  1C93               	btfss	19,1	;volatile
 12813  000A  2812               	goto	i1l11573
 12814                           
 12815                           ;interrupt.c: 93: {;interrupt.c: 95: TMR4IF = 0;
 12816  000B  1093               	bcf	19,1	;volatile
 12817                           
 12818                           ;interrupt.c: 97: PWM_CTRL( );
 12819  000C  3187  27E8  3180   	fcall	_PWM_CTRL
 12820                           
 12821                           ;interrupt.c: 99: Task1ms( );
 12822  000F  319D  2552  3180   	fcall	_Task1ms
 12823  0012                     i1l11573:	
 12824                           
 12825                           ;interrupt.c: 101: };interrupt.c: 107: if( TMR2IF )
 12826  0012  0020               	movlb	0	; select bank0
 12827  0013  1C91               	btfss	17,1	;volatile
 12828  0014  2819               	goto	i1l11579
 12829                           
 12830                           ;interrupt.c: 109: {;interrupt.c: 111: TMR2IF = 0;
 12831  0015  1091               	bcf	17,1	;volatile
 12832                           
 12833                           ;interrupt.c: 113: interrrupt_bldc( );
 12834  0016  318B  2344  3180   	fcall	_interrrupt_bldc
 12835  0019                     i1l11579:	
 12836                           
 12837                           ;interrupt.c: 115: };interrupt.c: 118: if( TMR6IF )
 12838  0019  0020               	movlb	0	; select bank0
 12839  001A  1993               	btfsc	19,3	;volatile
 12840                           
 12841                           ;interrupt.c: 120: {;interrupt.c: 122: TMR6IF = 0;
 12842  001B  1193               	bcf	19,3	;volatile
 12843                           
 12844                           ;interrupt.c: 132: };interrupt.c: 135: if( CCP5IF )
 12845  001C  1F13               	btfss	19,6	;volatile
 12846  001D  2821               	goto	i1l11587
 12847                           
 12848                           ;interrupt.c: 137: {;interrupt.c: 139: CCP5IF = 0;
 12849  001E  1313               	bcf	19,6	;volatile
 12850                           
 12851                           ;interrupt.c: 141: interrupt_PWMCapture( );
 12852  001F  3193  2392         	fcall	_interrupt_PWMCapture
 12853  0021                     i1l11587:	
 12854                           
 12855                           ;interrupt.c: 144: };interrupt.c: 147: if( CCP2IF )
 12856  0021  0020               	movlb	0	; select bank0
 12857  0022  1812               	btfsc	18,0	;volatile
 12858                           
 12859                           ;interrupt.c: 149: {;interrupt.c: 151: CCP2IF = 0;
 12860  0023  1012               	bcf	18,0	;volatile
 12861  0024  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12862  0025  0009               	retfie
 12863  0026                     __end_of_interrupt_handler:	
 12864                           
 12865                           	psect	text38
 12866  1392                     __ptext38:	
 12867 ;; *************** function _interrupt_PWMCapture *****************
 12868 ;; Defined at:
 12869 ;;		line 462 in file "../pwm.c"
 12870 ;; Parameters:    Size  Location     Type
 12871 ;;		None
 12872 ;; Auto vars:     Size  Location     Type
 12873 ;;		None
 12874 ;; Return value:  Size  Location     Type
 12875 ;;                  1    wreg      void 
 12876 ;; Registers used:
 12877 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12878 ;; Tracked objects:
 12879 ;;		On entry : 0/0
 12880 ;;		On exit  : 0/0
 12881 ;;		Unchanged: 0/0
 12882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12883 ;;      Params:         0       0       0       0       0       0       0       0
 12884 ;;      Locals:         0       0       0       0       0       0       0       0
 12885 ;;      Temps:          2       0       0       0       0       0       0       0
 12886 ;;      Totals:         2       0       0       0       0       0       0       0
 12887 ;;Total ram usage:        2 bytes
 12888 ;; Hardware stack levels used:    1
 12889 ;; This function calls:
 12890 ;;		Nothing
 12891 ;; This function is called by:
 12892 ;;		_interrupt_handler
 12893 ;; This function uses a non-reentrant model
 12894 ;;
 12895                           
 12896                           
 12897                           ;psect for function _interrupt_PWMCapture
 12898  1392                     _interrupt_PWMCapture:	
 12899                           
 12900                           ;pwm.c: 474: switch( ui8_Pulse_State )
 12901                           
 12902                           ;incstack = 0
 12903                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
 12904  1392  2BF5               	goto	i1l6855
 12905  1393                     i1l1195:	
 12906                           ;pwm.c: 476: {;pwm.c: 478: case 0:
 12907                           
 12908                           
 12909                           ;pwm.c: 480: {;pwm.c: 484: ui8_Pulse_State = 1;
 12910  1393  01C3               	clrf	_ui8_Pulse_State^(0+256)
 12911  1394  0AC3               	incf	_ui8_Pulse_State^(0+256),f
 12912                           
 12913                           ;pwm.c: 485: ui16_Capt_Val0.b.lo = CCPR5L;
 12914  1395  0026               	movlb	6	; select bank6
 12915  1396  081C               	movf	28,w	;volatile
 12916  1397  00F0               	movwf	??_interrupt_PWMCapture
 12917  1398  0870               	movf	??_interrupt_PWMCapture,w
 12918  1399  0021               	movlb	1	; select bank1
 12919  139A  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 12920                           
 12921                           ;pwm.c: 486: ui16_Capt_Val0.b.hi = CCPR5H;
 12922  139B  0026               	movlb	6	; select bank6
 12923  139C  081D               	movf	29,w	;volatile
 12924  139D  00F0               	movwf	??_interrupt_PWMCapture
 12925  139E  0870               	movf	??_interrupt_PWMCapture,w
 12926  139F  0021               	movlb	1	; select bank1
 12927  13A0  00AB               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
 12928                           
 12929                           ;pwm.c: 487: CCP5CON = 0x04;
 12930  13A1  3004               	movlw	4
 12931  13A2  0026               	movlb	6	; select bank6
 12932  13A3  009E               	movwf	30	;volatile
 12933                           
 12934                           ;pwm.c: 488: break;
 12935  13A4  0008               	return
 12936  13A5                     i1l6839:	
 12937                           ;pwm.c: 491: };pwm.c: 494: case 1:
 12938                           
 12939                           
 12940                           ;pwm.c: 496: {;pwm.c: 500: ui8_Pulse_State = 2;
 12941  13A5  3002               	movlw	2
 12942  13A6  00F0               	movwf	??_interrupt_PWMCapture
 12943  13A7  0870               	movf	??_interrupt_PWMCapture,w
 12944  13A8  0022               	movlb	2	; select bank2
 12945  13A9  00C3               	movwf	_ui8_Pulse_State^(0+256)
 12946                           
 12947                           ;pwm.c: 501: ui16_Capt_Val1.b.lo = CCPR5L;
 12948  13AA  0026               	movlb	6	; select bank6
 12949  13AB  081C               	movf	28,w	;volatile
 12950  13AC  00F0               	movwf	??_interrupt_PWMCapture
 12951  13AD  0870               	movf	??_interrupt_PWMCapture,w
 12952  13AE  0021               	movlb	1	; select bank1
 12953  13AF  00A8               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
 12954                           
 12955                           ;pwm.c: 502: ui16_Capt_Val1.b.hi = CCPR5H;
 12956  13B0  0026               	movlb	6	; select bank6
 12957  13B1  081D               	movf	29,w	;volatile
 12958  13B2  00F0               	movwf	??_interrupt_PWMCapture
 12959  13B3  0870               	movf	??_interrupt_PWMCapture,w
 12960  13B4  0021               	movlb	1	; select bank1
 12961  13B5  00A9               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
 12962                           
 12963                           ;pwm.c: 503: CCP5CON = 0x05;
 12964  13B6  3005               	movlw	5
 12965  13B7  0026               	movlb	6	; select bank6
 12966  13B8  009E               	movwf	30	;volatile
 12967                           
 12968                           ;pwm.c: 504: break;
 12969  13B9  0008               	return
 12970  13BA                     i1l1198:	
 12971                           ;pwm.c: 507: };pwm.c: 510: case 2:
 12972                           
 12973                           
 12974                           ;pwm.c: 512: {;pwm.c: 516: ui8_Pulse_State = 1;
 12975  13BA  01C3               	clrf	_ui8_Pulse_State^(0+256)
 12976  13BB  0AC3               	incf	_ui8_Pulse_State^(0+256),f
 12977                           
 12978                           ;pwm.c: 517: ui16_Capt_Val2.b.lo = CCPR5L;
 12979  13BC  0026               	movlb	6	; select bank6
 12980  13BD  081C               	movf	28,w	;volatile
 12981  13BE  00F0               	movwf	??_interrupt_PWMCapture
 12982  13BF  0870               	movf	??_interrupt_PWMCapture,w
 12983  13C0  0021               	movlb	1	; select bank1
 12984  13C1  00A6               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
 12985                           
 12986                           ;pwm.c: 518: ui16_Capt_Val2.b.hi = CCPR5H;
 12987  13C2  0026               	movlb	6	; select bank6
 12988  13C3  081D               	movf	29,w	;volatile
 12989  13C4  00F0               	movwf	??_interrupt_PWMCapture
 12990  13C5  0870               	movf	??_interrupt_PWMCapture,w
 12991  13C6  0021               	movlb	1	; select bank1
 12992  13C7  00A7               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
 12993                           
 12994                           ;pwm.c: 519: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
 12995  13C8  092A               	comf	_ui16_Capt_Val0^(0+128),w	;volatile
 12996  13C9  00F0               	movwf	??_interrupt_PWMCapture
 12997  13CA  092B               	comf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 12998  13CB  00F1               	movwf	??_interrupt_PWMCapture+1
 12999  13CC  0AF0               	incf	??_interrupt_PWMCapture,f
 13000  13CD  1903               	skipnz
 13001  13CE  0AF1               	incf	??_interrupt_PWMCapture+1,f
 13002  13CF  0826               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 13003  13D0  0770               	addwf	??_interrupt_PWMCapture,w
 13004  13D1  0023               	movlb	3	; select bank3
 13005  13D2  00B6               	movwf	_ui16_PWM_Freq_In^(0+384)
 13006  13D3  0021               	movlb	1	; select bank1
 13007  13D4  0827               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 13008  13D5  3D71               	addwfc	??_interrupt_PWMCapture+1,w
 13009  13D6  0023               	movlb	3	; select bank3
 13010  13D7  00B7               	movwf	(_ui16_PWM_Freq_In+1)^(0+384)
 13011                           
 13012                           ;pwm.c: 520: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
 13013  13D8  0021               	movlb	1	; select bank1
 13014  13D9  092A               	comf	_ui16_Capt_Val0^(0+128),w	;volatile
 13015  13DA  00F0               	movwf	??_interrupt_PWMCapture
 13016  13DB  092B               	comf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 13017  13DC  00F1               	movwf	??_interrupt_PWMCapture+1
 13018  13DD  0AF0               	incf	??_interrupt_PWMCapture,f
 13019  13DE  1903               	skipnz
 13020  13DF  0AF1               	incf	??_interrupt_PWMCapture+1,f
 13021  13E0  0828               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
 13022  13E1  0770               	addwf	??_interrupt_PWMCapture,w
 13023  13E2  0023               	movlb	3	; select bank3
 13024  13E3  00EB               	movwf	_ui16_Duty_Cycle_In^(0+384)
 13025  13E4  0021               	movlb	1	; select bank1
 13026  13E5  0829               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
 13027  13E6  3D71               	addwfc	??_interrupt_PWMCapture+1,w
 13028  13E7  0023               	movlb	3	; select bank3
 13029  13E8  00EC               	movwf	(_ui16_Duty_Cycle_In+1)^(0+384)
 13030                           
 13031                           ;pwm.c: 521: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
 13032  13E9  0021               	movlb	1	; select bank1
 13033  13EA  0827               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 13034  13EB  00AB               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
 13035  13EC  0826               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 13036  13ED  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 13037                           
 13038                           ;pwm.c: 522: CCP5CON = 0x04;
 13039  13EE  3004               	movlw	4
 13040  13EF  0026               	movlb	6	; select bank6
 13041  13F0  009E               	movwf	30	;volatile
 13042                           
 13043                           ;pwm.c: 539: };pwm.c: 542: break;
 13044                           
 13045                           ;pwm.c: 534: else;pwm.c: 535: {
 13046                           
 13047                           ;pwm.c: 527: {;pwm.c: 531: }
 13048  13F1  0008               	return
 13049  13F2                     i1l6851:	
 13050                           ;pwm.c: 545: };pwm.c: 549: default:
 13051                           
 13052                           
 13053                           ;pwm.c: 550: {;pwm.c: 554: ui8_Pulse_State = 0;
 13054  13F2  0022               	movlb	2	; select bank2
 13055  13F3  01C3               	clrf	_ui8_Pulse_State^(0+256)
 13056                           
 13057                           ;pwm.c: 558: };pwm.c: 560: }
 13058                           
 13059                           ;pwm.c: 555: break;
 13060  13F4  0008               	return
 13061  13F5                     i1l6855:	
 13062  13F5  0022               	movlb	2	; select bank2
 13063  13F6  0843               	movf	_ui8_Pulse_State^(0+256),w
 13064                           
 13065                           ; Switch size 1, requested type "space"
 13066                           ; Number of cases is 3, Range of values is 0 to 2
 13067                           ; switch strategies available:
 13068                           ; Name         Instructions Cycles
 13069                           ; simple_byte           10     6 (average)
 13070                           ; direct_byte           12     6 (fixed)
 13071                           ; jumptable            260     6 (fixed)
 13072                           ;	Chosen strategy is simple_byte
 13073  13F7  3A00               	xorlw	0	; case 0
 13074  13F8  1903               	skipnz
 13075  13F9  2B93               	goto	i1l1195
 13076  13FA  3A01               	xorlw	1	; case 1
 13077  13FB  1903               	skipnz
 13078  13FC  2BA5               	goto	i1l6839
 13079  13FD  3A03               	xorlw	3	; case 2
 13080  13FE  1903               	skipnz
 13081  13FF  2BBA               	goto	i1l1198
 13082  1400  2BF2               	goto	i1l6851
 13083  1401  0008               	return
 13084  1402                     __end_of_interrupt_PWMCapture:	
 13085                           
 13086                           	psect	text39
 13087  0B44                     __ptext39:	
 13088 ;; *************** function _interrrupt_bldc *****************
 13089 ;; Defined at:
 13090 ;;		line 281 in file "../bldc.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;		None
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;  ui32_tmp        4    4[BANK0 ] unsigned long 
 13095 ;; Return value:  Size  Location     Type
 13096 ;;                  1    wreg      void 
 13097 ;; Registers used:
 13098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13099 ;; Tracked objects:
 13100 ;;		On entry : 0/0
 13101 ;;		On exit  : 0/0
 13102 ;;		Unchanged: 0/0
 13103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13104 ;;      Params:         0       0       0       0       0       0       0       0
 13105 ;;      Locals:         0       4       0       0       0       0       0       0
 13106 ;;      Temps:          0       4       0       0       0       0       0       0
 13107 ;;      Totals:         0       8       0       0       0       0       0       0
 13108 ;;Total ram usage:        8 bytes
 13109 ;; Hardware stack levels used:    1
 13110 ;; Hardware stack levels required when called:    1
 13111 ;; This function calls:
 13112 ;;		_BLDCWait
 13113 ;;		___lwdiv
 13114 ;;		i1_ADC_Read
 13115 ;;		i1_ADC_Wait
 13116 ;;		i1___wmul
 13117 ;;		i1_commutate
 13118 ;; This function is called by:
 13119 ;;		_interrupt_handler
 13120 ;; This function uses a non-reentrant model
 13121 ;;
 13122                           
 13123                           
 13124                           ;psect for function _interrrupt_bldc
 13125  0B44                     _interrrupt_bldc:	
 13126                           
 13127                           ;bldc.c: 286: unsigned long ui32_tmp ;;bldc.c: 288: ++comm_time ;
 13128                           
 13129                           ;incstack = 0
 13130                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13131  0B44  3001               	movlw	1
 13132  0B45  0020               	movlb	0	; select bank0
 13133  0B46  07D3               	addwf	_comm_time,f
 13134  0B47  3000               	movlw	0
 13135  0B48  3DD4               	addwfc	_comm_time+1,f
 13136                           
 13137                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
 13138  0B49  0854               	movf	_comm_time+1,w
 13139  0B4A  0022               	movlb	2	; select bank2
 13140  0B4B  0228               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 13141  0B4C  1D03               	skipz
 13142  0B4D  2B52               	goto	u936_25
 13143  0B4E  0020               	movlb	0	; select bank0
 13144  0B4F  0853               	movf	_comm_time,w
 13145  0B50  0022               	movlb	2	; select bank2
 13146  0B51  0227               	subwf	_ui16_comm_time_max^(0+256),w
 13147  0B52                     u936_25:	
 13148  0B52  1803               	skipnc
 13149  0B53  2B57               	goto	i1l10713
 13150                           
 13151                           ;bldc.c: 294: {;bldc.c: 296: commutate( );
 13152  0B54  3189  2122  318B   	fcall	i1_commutate
 13153  0B57                     i1l10713:	
 13154                           
 13155                           ;bldc.c: 298: };bldc.c: 302: if( ui16_step_cnt < 10 )
 13156  0B57  3000               	movlw	0
 13157  0B58  0021               	movlb	1	; select bank1
 13158  0B59  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 13159  0B5A  300A               	movlw	10
 13160  0B5B  1903               	skipnz
 13161  0B5C  023A               	subwf	_ui16_step_cnt^(0+128),w
 13162  0B5D  1C03               	btfss	3,0
 13163  0B5E  2B61               	goto	i1l10717
 13164                           
 13165                           ;bldc.c: 311: else;bldc.c: 312: {;bldc.c: 322: MotorFlags.bits.B3 = 0;
 13166                           
 13167                           ;bldc.c: 304: {;bldc.c: 308: }
 13168  0B5F  0020               	movlb	0	; select bank0
 13169  0B60  11DA               	bcf	_MotorFlags,3
 13170  0B61                     i1l10717:	
 13171                           
 13172                           ;bldc.c: 328: };bldc.c: 331: if (ui16_step_cnt >= 3 )
 13173  0B61  3000               	movlw	0
 13174  0B62  0021               	movlb	1	; select bank1
 13175  0B63  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 13176  0B64  3003               	movlw	3
 13177  0B65  1903               	skipnz
 13178  0B66  023A               	subwf	_ui16_step_cnt^(0+128),w
 13179  0B67  1C03               	skipc
 13180  0B68  2B6B               	goto	i1l10721
 13181                           
 13182                           ;bldc.c: 333: {;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
 13183  0B69  0020               	movlb	0	; select bank0
 13184  0B6A  125A               	bcf	_MotorFlags,4
 13185  0B6B                     i1l10721:	
 13186                           
 13187                           ;bldc.c: 337: };bldc.c: 340: BLDCWait( );
 13188  0B6B  319E  2652  318B   	fcall	_BLDCWait
 13189                           
 13190                           ;bldc.c: 346: if( C1OUT )
 13191  0B6E  0022               	movlb	2	; select bank2
 13192  0B6F  1F11               	btfss	17,6	;volatile
 13193  0B70  2B74               	goto	i1l263
 13194                           
 13195                           ;bldc.c: 349: {;bldc.c: 351: ui8_CompFlag = 0x00;
 13196  0B71  0021               	movlb	1	; select bank1
 13197  0B72  01D9               	clrf	_ui8_CompFlag^(0+128)
 13198                           
 13199                           ;bldc.c: 353: }
 13200  0B73  2D16               	goto	i1l10905
 13201  0B74                     i1l263:	
 13202                           
 13203                           ;bldc.c: 356: else;bldc.c: 357: {;bldc.c: 362: ui8_CompFlag = 0x01;
 13204  0B74  0021               	movlb	1	; select bank1
 13205  0B75  01D9               	clrf	_ui8_CompFlag^(0+128)
 13206  0B76  0AD9               	incf	_ui8_CompFlag^(0+128),f
 13207                           
 13208                           ;bldc.c: 366: };bldc.c: 372: switch( ui8_sampleState )
 13209  0B77  2D16               	goto	i1l10905
 13210  0B78                     i1l10727:	
 13211                           ;bldc.c: 374: {;bldc.c: 376: case 1:
 13212                           
 13213                           
 13214                           ;bldc.c: 378: {;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
 13215  0B78  302D               	movlw	45
 13216  0B79  0021               	movlb	1	; select bank1
 13217  0B7A  009D               	movwf	29	;volatile
 13218                           
 13219                           ;bldc.c: 387: ADC_Wait( );
 13220  0B7B  319D  25CF  318B   	fcall	i1_ADC_Wait
 13221                           
 13222                           ;bldc.c: 391: ( GO_nDONE = 1 );
 13223  0B7E  0021               	movlb	1	; select bank1
 13224  0B7F  149D               	bsf	29,1	;volatile
 13225                           
 13226                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
 13227  0B80  319E  2601  318B   	fcall	i1_ADC_Read
 13228  0B83  0871               	movf	?i1_ADC_Read+1,w
 13229  0B84  0023               	movlb	3	; select bank3
 13230  0B85  00D3               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
 13231  0B86  0870               	movf	?i1_ADC_Read,w
 13232  0B87  00D2               	movwf	_ui16_NTC_Temp_bldc^(0+384)
 13233                           
 13234                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
 13235  0B88  3031               	movlw	49
 13236  0B89  0021               	movlb	1	; select bank1
 13237  0B8A  2C1E               	goto	L60
 13238  0B8B                     i1l10739:	
 13239                           ;bldc.c: 416: };bldc.c: 419: case 2:
 13240                           
 13241                           ;bldc.c: 413: break;
 13242                           
 13243                           ;bldc.c: 410: ui8_sampleState++;
 13244                           
 13245                           ;bldc.c: 407: ( GO_nDONE = 1 );
 13246                           
 13247                           ;bldc.c: 403: ADC_Wait( );
 13248                           
 13249                           
 13250                           ;bldc.c: 421: {;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
 13251  0B8B  0021               	movlb	1	; select bank1
 13252  0B8C  085A               	movf	_ui8_Ubemf_sel^(0+128),w
 13253  0B8D  009D               	movwf	29	;volatile
 13254                           
 13255                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
 13256  0B8E  081B               	movf	27,w	;volatile
 13257  0B8F  0020               	movlb	0	; select bank0
 13258  0B90  00A0               	movwf	??_interrrupt_bldc
 13259  0B91  0820               	movf	??_interrrupt_bldc,w
 13260  0B92  00DC               	movwf	_ui16_Ubat_bldc	;volatile
 13261                           
 13262                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
 13263  0B93  0021               	movlb	1	; select bank1
 13264  0B94  081C               	movf	28,w	;volatile
 13265  0B95  0020               	movlb	0	; select bank0
 13266  0B96  00A0               	movwf	??_interrrupt_bldc
 13267  0B97  0820               	movf	??_interrrupt_bldc,w
 13268  0B98  00DD               	movwf	_ui16_Ubat_bldc+1	;volatile
 13269                           
 13270                           ;bldc.c: 454: __nop();
 13271  0B99  0000               	nop
 13272                           
 13273                           ;bldc.c: 455: __nop();
 13274  0B9A  0000               	nop
 13275                           
 13276                           ;bldc.c: 456: __nop();
 13277  0B9B  0000               	nop
 13278                           
 13279                           ;bldc.c: 457: __nop();
 13280  0B9C  0000               	nop
 13281                           
 13282                           ;bldc.c: 458: __nop();
 13283  0B9D  0000               	nop
 13284                           
 13285                           ;bldc.c: 459: __nop();
 13286  0B9E  0000               	nop
 13287                           
 13288                           ;bldc.c: 460: __nop();
 13289  0B9F  0000               	nop
 13290                           
 13291                           ;bldc.c: 461: __nop();
 13292  0BA0  0000               	nop
 13293                           
 13294                           ;bldc.c: 463: __nop();
 13295  0BA1  0000               	nop
 13296                           
 13297                           ;bldc.c: 464: __nop();
 13298  0BA2  0000               	nop
 13299                           
 13300                           ;bldc.c: 465: __nop();
 13301  0BA3  0000               	nop
 13302                           
 13303                           ;bldc.c: 466: __nop();
 13304  0BA4  0000               	nop
 13305                           
 13306                           ;bldc.c: 467: __nop();
 13307  0BA5  0000               	nop
 13308                           
 13309                           ;bldc.c: 468: __nop();
 13310  0BA6  0000               	nop
 13311                           
 13312                           ;bldc.c: 469: __nop();
 13313  0BA7  0000               	nop
 13314                           
 13315                           ;bldc.c: 470: __nop();
 13316  0BA8  0000               	nop
 13317  0BA9  2C1F               	goto	L59
 13318  0BAA                     i1l10779:	
 13319                           ;bldc.c: 486: };bldc.c: 489: case 3:
 13320                           
 13321                           ;bldc.c: 483: break;
 13322                           
 13323                           ;bldc.c: 480: ui8_sampleState++;
 13324                           
 13325                           ;bldc.c: 477: ( GO_nDONE = 1 );
 13326                           
 13327                           ;bldc.c: 474: ADC_Wait();
 13328                           
 13329                           
 13330                           ;bldc.c: 491: {;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
 13331  0BAA  0021               	movlb	1	; select bank1
 13332  0BAB  081B               	movf	27,w	;volatile
 13333  0BAC  0020               	movlb	0	; select bank0
 13334  0BAD  00A0               	movwf	??_interrrupt_bldc
 13335  0BAE  0820               	movf	??_interrrupt_bldc,w
 13336  0BAF  0021               	movlb	1	; select bank1
 13337  0BB0  00B4               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
 13338                           
 13339                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
 13340  0BB1  081C               	movf	28,w	;volatile
 13341  0BB2  0020               	movlb	0	; select bank0
 13342  0BB3  00A0               	movwf	??_interrrupt_bldc
 13343  0BB4  0820               	movf	??_interrrupt_bldc,w
 13344  0BB5  0021               	movlb	1	; select bank1
 13345  0BB6  00B5               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
 13346                           
 13347                           ;bldc.c: 511: ( GO_nDONE = 1 );
 13348  0BB7  149D               	bsf	29,1	;volatile
 13349                           
 13350                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui16_duty_cycle_BLDC != 0 ) )
 13351  0BB8  0020               	movlb	0	; select bank0
 13352  0BB9  1F5A               	btfss	_MotorFlags,6
 13353  0BBA  2BDF               	goto	i1l10809
 13354  0BBB  0021               	movlb	1	; select bank1
 13355  0BBC  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 13356  0BBD  0431               	iorwf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
 13357  0BBE  1903               	btfsc	3,2
 13358  0BBF  2BDF               	goto	i1l10809
 13359                           
 13360                           ;bldc.c: 521: {;bldc.c: 523: if( rising_bemf_flag )
 13361  0BC0  0020               	movlb	0	; select bank0
 13362  0BC1  1C5E               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 13363  0BC2  2BD7               	goto	i1l10799
 13364                           
 13365                           ;bldc.c: 525: {;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
 13366  0BC3  0021               	movlb	1	; select bank1
 13367  0BC4  0834               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 13368  0BC5  3E64               	addlw	100
 13369  0BC6  0020               	movlb	0	; select bank0
 13370  0BC7  00A0               	movwf	??_interrrupt_bldc
 13371  0BC8  3000               	movlw	0
 13372  0BC9  0021               	movlb	1	; select bank1
 13373  0BCA  3D35               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 13374  0BCB  0020               	movlb	0	; select bank0
 13375  0BCC  00A1               	movwf	??_interrrupt_bldc+1
 13376  0BCD  085D               	movf	_ui16_Ubat_bldc+1,w	;volatile
 13377  0BCE  0221               	subwf	??_interrrupt_bldc+1,w
 13378  0BCF  1D03               	skipz
 13379  0BD0  2BD3               	goto	u943_25
 13380  0BD1  085C               	movf	_ui16_Ubat_bldc,w	;volatile
 13381  0BD2  0220               	subwf	??_interrrupt_bldc,w
 13382  0BD3                     u943_25:	
 13383  0BD3  1803               	skipnc
 13384  0BD4  2D24               	goto	i1l267
 13385                           
 13386                           ;bldc.c: 530: {;bldc.c: 534: ui8_sampleState++;
 13387  0BD5  3001               	movlw	1
 13388  0BD6  2BE1               	goto	L56
 13389  0BD7                     i1l10799:	
 13390                           ;bldc.c: 556: };bldc.c: 559: }
 13391                           
 13392                           ;bldc.c: 550: else;bldc.c: 551: {
 13393                           
 13394                           ;bldc.c: 547: }
 13395                           
 13396                           ;bldc.c: 544: ( GO_nDONE = 1 );
 13397                           
 13398                           ;bldc.c: 540: ADC_Wait( );
 13399                           
 13400                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
 13401                           
 13402                           
 13403                           ;bldc.c: 562: else;bldc.c: 563: {;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
 13404  0BD7  3000               	movlw	0
 13405  0BD8  0021               	movlb	1	; select bank1
 13406  0BD9  0235               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 13407  0BDA  301F               	movlw	31
 13408  0BDB  1903               	skipnz
 13409  0BDC  0234               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 13410  0BDD  1C03               	skipc
 13411  0BDE  2D24               	goto	i1l267
 13412  0BDF                     i1l10809:	
 13413                           ;bldc.c: 593: };bldc.c: 596: };bldc.c: 601: }
 13414                           
 13415                           ;bldc.c: 588: else;bldc.c: 589: {
 13416                           
 13417                           ;bldc.c: 585: }
 13418                           
 13419                           ;bldc.c: 582: ( GO_nDONE = 1 );
 13420                           
 13421                           ;bldc.c: 578: ADC_Wait( );
 13422                           
 13423                           ;bldc.c: 575: ( ADCON0 = ui8_UPhase_sel );
 13424                           
 13425                           ;bldc.c: 567: {;bldc.c: 571: ui8_sampleState++;
 13426                           
 13427                           
 13428                           ;bldc.c: 604: else;bldc.c: 605: {;bldc.c: 607: ui8_sampleState++;
 13429  0BDF  3001               	movlw	1
 13430  0BE0  0020               	movlb	0	; select bank0
 13431  0BE1                     L56:	
 13432  0BE1  00A0               	movwf	??_interrrupt_bldc
 13433  0BE2  0820               	movf	??_interrrupt_bldc,w
 13434  0BE3  0022               	movlb	2	; select bank2
 13435  0BE4  07E4               	addwf	_ui8_sampleState^(0+256),f
 13436                           
 13437                           ;bldc.c: 611: ( ADCON0 = ui8_UPhase_sel );
 13438  0BE5  0021               	movlb	1	; select bank1
 13439  0BE6  085B               	movf	_ui8_UPhase_sel^(0+128),w
 13440  0BE7  009D               	movwf	29	;volatile
 13441                           
 13442                           ;bldc.c: 615: ADC_Wait( );
 13443  0BE8  319D  25CF  318B   	fcall	i1_ADC_Wait
 13444                           
 13445                           ;bldc.c: 619: ( GO_nDONE = 1 );
 13446  0BEB  0021               	movlb	1	; select bank1
 13447  0BEC  149D               	bsf	29,1	;volatile
 13448                           
 13449                           ;bldc.c: 624: };bldc.c: 650: break;
 13450  0BED  2D24               	goto	i1l267
 13451  0BEE                     i1l10817:	
 13452                           ;bldc.c: 653: };bldc.c: 656: case 4:
 13453                           
 13454                           
 13455                           ;bldc.c: 658: {;bldc.c: 664: BlankingCountdbg = ui8_BlankingCount;
 13456  0BEE  0021               	movlb	1	; select bank1
 13457  0BEF  085D               	movf	_ui8_BlankingCount^(0+128),w
 13458  0BF0  0020               	movlb	0	; select bank0
 13459  0BF1  00A0               	movwf	??_interrrupt_bldc
 13460  0BF2  0820               	movf	??_interrrupt_bldc,w
 13461  0BF3  0022               	movlb	2	; select bank2
 13462  0BF4  00E5               	movwf	_BlankingCountdbg^(0+256)
 13463                           
 13464                           ;bldc.c: 665: ui8_BlankingCount = 0;
 13465  0BF5  0021               	movlb	1	; select bank1
 13466  0BF6  01DD               	clrf	_ui8_BlankingCount^(0+128)
 13467                           
 13468                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
 13469  0BF7  319E  2601  318B   	fcall	i1_ADC_Read
 13470  0BFA  0871               	movf	?i1_ADC_Read+1,w
 13471  0BFB  0023               	movlb	3	; select bank3
 13472  0BFC  00D7               	movwf	(_ui16_UPhase_bldc+1)^(0+384)
 13473  0BFD  0870               	movf	?i1_ADC_Read,w
 13474  0BFE  00D6               	movwf	_ui16_UPhase_bldc^(0+384)
 13475                           
 13476                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
 13477  0BFF  0021               	movlb	1	; select bank1
 13478  0C00  1CE1               	btfss	_ui8_error_Flags^(0+128),1
 13479  0C01  2C0B               	goto	i1l10833
 13480                           
 13481                           ;bldc.c: 677: {;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
 13482  0C02  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13483  0C03  009D               	movwf	29	;volatile
 13484                           
 13485                           ;bldc.c: 682: ADC_Wait( );
 13486  0C04  319D  25CF  318B   	fcall	i1_ADC_Wait
 13487                           
 13488                           ;bldc.c: 683: ( GO_nDONE = 1 );
 13489  0C07  0021               	movlb	1	; select bank1
 13490  0C08  149D               	bsf	29,1	;volatile
 13491                           
 13492                           ;bldc.c: 686: ui8_sampleState = 9;
 13493  0C09  3009               	movlw	9
 13494  0C0A  2D09               	goto	L52
 13495  0C0B                     i1l10833:	
 13496                           ;bldc.c: 688: }
 13497                           
 13498                           
 13499                           ;bldc.c: 691: else;bldc.c: 692: {;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 13500  0C0B  3075               	movlw	117
 13501  0C0C  0021               	movlb	1	; select bank1
 13502  0C0D  009D               	movwf	29	;volatile
 13503                           
 13504                           ;bldc.c: 697: ADC_Wait( );
 13505  0C0E  319D  25CF  318B   	fcall	i1_ADC_Wait
 13506  0C11                     i1l10839:	
 13507                           ;bldc.c: 709: };bldc.c: 712: case 5:
 13508                           
 13509                           ;bldc.c: 703: };bldc.c: 706: break;
 13510                           
 13511                           ;bldc.c: 700: ui8_sampleState++;
 13512                           
 13513  0C11                     i1l10841:	
 13514                           ;bldc.c: 724: };bldc.c: 727: case 6:
 13515                           
 13516                           ;bldc.c: 721: break;
 13517                           
 13518                           ;bldc.c: 714: {;bldc.c: 718: ui8_sampleState++;
 13519                           
 13520  0C11                     i1l10843:	
 13521                           ;bldc.c: 739: };bldc.c: 742: case 7:
 13522                           
 13523                           ;bldc.c: 736: break;
 13524                           
 13525                           ;bldc.c: 729: {;bldc.c: 733: ui8_sampleState++;
 13526                           
 13527  0C11  2D0F               	goto	i1l10901
 13528  0C12                     i1l284:	
 13529                           ;bldc.c: 754: };bldc.c: 757: case 8:
 13530                           
 13531                           ;bldc.c: 751: break;
 13532                           
 13533                           ;bldc.c: 744: {;bldc.c: 748: ui8_sampleState++;
 13534                           
 13535                           
 13536                           ;bldc.c: 759: {;bldc.c: 764: ( GO_nDONE = 1 );
 13537  0C12  0021               	movlb	1	; select bank1
 13538  0C13  149D               	bsf	29,1	;volatile
 13539                           
 13540                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
 13541  0C14  319E  2601  318B   	fcall	i1_ADC_Read
 13542  0C17  0871               	movf	?i1_ADC_Read+1,w
 13543  0C18  0024               	movlb	4	; select bank4
 13544  0C19  00DF               	movwf	(_ui16_CPU_Temp_bldc+1)^(0+512)
 13545  0C1A  0870               	movf	?i1_ADC_Read,w
 13546  0C1B  00DE               	movwf	_ui16_CPU_Temp_bldc^(0+512)
 13547                           
 13548                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
 13549  0C1C  0021               	movlb	1	; select bank1
 13550  0C1D  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13551  0C1E                     L60:	
 13552  0C1E  009D               	movwf	29	;volatile
 13553  0C1F                     L59:	
 13554                           
 13555                           ;bldc.c: 776: ADC_Wait( );
 13556  0C1F  319D  25CF  318B   	fcall	i1_ADC_Wait
 13557                           
 13558                           ;bldc.c: 780: ( GO_nDONE = 1 );
 13559  0C22  0021               	movlb	1	; select bank1
 13560  0C23  149D               	bsf	29,1	;volatile
 13561  0C24  2D0F               	goto	i1l10901
 13562  0C25                     i1l10853:	
 13563                           ;bldc.c: 790: };bldc.c: 793: case 9:
 13564                           
 13565                           ;bldc.c: 787: break;
 13566                           
 13567                           ;bldc.c: 784: ui8_sampleState++;
 13568                           
 13569                           
 13570                           ;bldc.c: 795: {;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
 13571  0C25  319E  2601  318B   	fcall	i1_ADC_Read
 13572  0C28  0871               	movf	?i1_ADC_Read+1,w
 13573  0C29  0020               	movlb	0	; select bank0
 13574  0C2A  00D2               	movwf	_ui16_IPhase_bldc+1	;volatile
 13575  0C2B  0870               	movf	?i1_ADC_Read,w
 13576  0C2C  00D1               	movwf	_ui16_IPhase_bldc	;volatile
 13577                           
 13578                           ;bldc.c: 806: if (MotorFlags.bits.B6)
 13579  0C2D  1B5A               	btfsc	_MotorFlags,6
 13580  0C2E  2CDA               	goto	i1l10879
 13581  0C2F  2CE7               	goto	i1l10881
 13582  0C30                     i1l10859:	
 13583                           ;bldc.c: 812: {;bldc.c: 814: case ( 0x02 << 2 ) | 0x01:
 13584                           
 13585                           ;bldc.c: 808: {;bldc.c: 810: switch( ui8_IPhase_sel )
 13586                           
 13587                           
 13588                           ;bldc.c: 816: {;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0
      +                          ]) )
 13589  0C30  0022               	movlb	2	; select bank2
 13590  0C31  0820               	movf	_ui8_current_cal^(0+256),w
 13591  0C32  0020               	movlb	0	; select bank0
 13592  0C33  00A0               	movwf	??_interrrupt_bldc
 13593  0C34  01A1               	clrf	??_interrrupt_bldc+1
 13594  0C35  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13595  0C36  0221               	subwf	??_interrrupt_bldc+1,w
 13596  0C37  1D03               	skipz
 13597  0C38  2C3B               	goto	u947_25
 13598  0C39  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13599  0C3A  0220               	subwf	??_interrrupt_bldc,w
 13600  0C3B                     u947_25:	
 13601  0C3B  1803               	skipnc
 13602  0C3C  2C65               	goto	i1l10863
 13603                           
 13604                           ;bldc.c: 820: {;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[0])*ui16_I_cal_Ph1)>>8);
 13605  0C3D  0022               	movlb	2	; select bank2
 13606  0C3E  0820               	movf	_ui8_current_cal^(0+256),w
 13607  0C3F  0020               	movlb	0	; select bank0
 13608  0C40  00A0               	movwf	??_interrrupt_bldc
 13609  0C41  01A1               	clrf	??_interrrupt_bldc+1
 13610  0C42  09A0               	comf	??_interrrupt_bldc,f
 13611  0C43  09A1               	comf	??_interrrupt_bldc+1,f
 13612  0C44  0AA0               	incf	??_interrrupt_bldc,f
 13613  0C45  1903               	skipnz
 13614  0C46  0AA1               	incf	??_interrrupt_bldc+1,f
 13615  0C47  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13616  0C48  0720               	addwf	??_interrrupt_bldc,w
 13617  0C49  00F0               	movwf	i1___wmul@multiplier
 13618  0C4A  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13619  0C4B  3D21               	addwfc	??_interrrupt_bldc+1,w
 13620  0C4C  00F1               	movwf	i1___wmul@multiplier+1
 13621  0C4D  0021               	movlb	1	; select bank1
 13622  0C4E  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 13623  0C4F  00F3               	movwf	i1___wmul@multiplicand+1
 13624  0C50  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 13625  0C51  00F2               	movwf	i1___wmul@multiplicand
 13626  0C52  319E  261B  318B   	fcall	i1___wmul
 13627  0C55  0870               	movf	?i1___wmul,w
 13628  0C56  0020               	movlb	0	; select bank0
 13629  0C57  00A2               	movwf	??_interrrupt_bldc+2
 13630  0C58  0871               	movf	?i1___wmul+1,w
 13631  0C59  00A3               	movwf	??_interrrupt_bldc+3
 13632  0C5A  0823               	movf	??_interrrupt_bldc+3,w
 13633  0C5B  00A2               	movwf	??_interrrupt_bldc+2
 13634  0C5C  01A3               	clrf	??_interrrupt_bldc+3
 13635  0C5D  0822               	movf	??_interrrupt_bldc+2,w
 13636  0C5E  0023               	movlb	3	; select bank3
 13637  0C5F  00D4               	movwf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13638  0C60  0020               	movlb	0	; select bank0
 13639  0C61  0823               	movf	??_interrrupt_bldc+3,w
 13640  0C62  0023               	movlb	3	; select bank3
 13641  0C63  00D5               	movwf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13642                           
 13643                           ;bldc.c: 824: }
 13644  0C64  2CEF               	goto	i1l10883
 13645  0C65                     i1l10863:	
 13646                           
 13647                           ;bldc.c: 827: else;bldc.c: 828: {;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
 13648  0C65  0023               	movlb	3	; select bank3
 13649  0C66  01D4               	clrf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13650  0C67  01D5               	clrf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13651                           
 13652                           ;bldc.c: 832: };bldc.c: 835: break;
 13653  0C68  2CEF               	goto	i1l10883
 13654  0C69                     i1l10865:	
 13655                           ;bldc.c: 837: };bldc.c: 840: case ( 0x0D << 2 ) | 0x01:
 13656                           
 13657                           
 13658                           ;bldc.c: 842: {;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1
      +                          ] ) )
 13659  0C69  0022               	movlb	2	; select bank2
 13660  0C6A  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 13661  0C6B  0020               	movlb	0	; select bank0
 13662  0C6C  00A0               	movwf	??_interrrupt_bldc
 13663  0C6D  01A1               	clrf	??_interrrupt_bldc+1
 13664  0C6E  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13665  0C6F  0221               	subwf	??_interrrupt_bldc+1,w
 13666  0C70  1D03               	skipz
 13667  0C71  2C74               	goto	u948_25
 13668  0C72  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13669  0C73  0220               	subwf	??_interrrupt_bldc,w
 13670  0C74                     u948_25:	
 13671  0C74  1803               	skipnc
 13672  0C75  2C9E               	goto	i1l10869
 13673                           
 13674                           ;bldc.c: 846: {;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[1])*ui16_I_cal_Ph2)>>8);
 13675  0C76  0022               	movlb	2	; select bank2
 13676  0C77  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 13677  0C78  0020               	movlb	0	; select bank0
 13678  0C79  00A0               	movwf	??_interrrupt_bldc
 13679  0C7A  01A1               	clrf	??_interrrupt_bldc+1
 13680  0C7B  09A0               	comf	??_interrrupt_bldc,f
 13681  0C7C  09A1               	comf	??_interrrupt_bldc+1,f
 13682  0C7D  0AA0               	incf	??_interrrupt_bldc,f
 13683  0C7E  1903               	skipnz
 13684  0C7F  0AA1               	incf	??_interrrupt_bldc+1,f
 13685  0C80  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13686  0C81  0720               	addwf	??_interrrupt_bldc,w
 13687  0C82  00F0               	movwf	i1___wmul@multiplier
 13688  0C83  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13689  0C84  3D21               	addwfc	??_interrrupt_bldc+1,w
 13690  0C85  00F1               	movwf	i1___wmul@multiplier+1
 13691  0C86  0021               	movlb	1	; select bank1
 13692  0C87  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 13693  0C88  00F3               	movwf	i1___wmul@multiplicand+1
 13694  0C89  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 13695  0C8A  00F2               	movwf	i1___wmul@multiplicand
 13696  0C8B  319E  261B  318B   	fcall	i1___wmul
 13697  0C8E  0870               	movf	?i1___wmul,w
 13698  0C8F  0020               	movlb	0	; select bank0
 13699  0C90  00A2               	movwf	??_interrrupt_bldc+2
 13700  0C91  0871               	movf	?i1___wmul+1,w
 13701  0C92  00A3               	movwf	??_interrrupt_bldc+3
 13702  0C93  0823               	movf	??_interrrupt_bldc+3,w
 13703  0C94  00A2               	movwf	??_interrrupt_bldc+2
 13704  0C95  01A3               	clrf	??_interrrupt_bldc+3
 13705  0C96  0822               	movf	??_interrrupt_bldc+2,w
 13706  0C97  0024               	movlb	4	; select bank4
 13707  0C98  00E2               	movwf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13708  0C99  0020               	movlb	0	; select bank0
 13709  0C9A  0823               	movf	??_interrrupt_bldc+3,w
 13710  0C9B  0024               	movlb	4	; select bank4
 13711  0C9C  00E3               	movwf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13712                           
 13713                           ;bldc.c: 851: }
 13714  0C9D  2CEF               	goto	i1l10883
 13715  0C9E                     i1l10869:	
 13716                           
 13717                           ;bldc.c: 854: else;bldc.c: 855: {;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
 13718  0C9E  0024               	movlb	4	; select bank4
 13719  0C9F  01E2               	clrf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13720  0CA0  01E3               	clrf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13721                           
 13722                           ;bldc.c: 859: };bldc.c: 862: break;
 13723  0CA1  2CEF               	goto	i1l10883
 13724  0CA2                     i1l10871:	
 13725                           ;bldc.c: 864: };bldc.c: 867: case ( 0x04 << 2 ) | 0x01:
 13726                           
 13727                           
 13728                           ;bldc.c: 869: {;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]
      +                          ) )
 13729  0CA2  0022               	movlb	2	; select bank2
 13730  0CA3  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 13731  0CA4  0020               	movlb	0	; select bank0
 13732  0CA5  00A0               	movwf	??_interrrupt_bldc
 13733  0CA6  01A1               	clrf	??_interrrupt_bldc+1
 13734  0CA7  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13735  0CA8  0221               	subwf	??_interrrupt_bldc+1,w
 13736  0CA9  1D03               	skipz
 13737  0CAA  2CAD               	goto	u949_25
 13738  0CAB  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13739  0CAC  0220               	subwf	??_interrrupt_bldc,w
 13740  0CAD                     u949_25:	
 13741  0CAD  1803               	skipnc
 13742  0CAE  2CD7               	goto	i1l10875
 13743                           
 13744                           ;bldc.c: 873: {;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[2])*ui16_I_cal_Ph3)>>8);
 13745  0CAF  0022               	movlb	2	; select bank2
 13746  0CB0  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 13747  0CB1  0020               	movlb	0	; select bank0
 13748  0CB2  00A0               	movwf	??_interrrupt_bldc
 13749  0CB3  01A1               	clrf	??_interrrupt_bldc+1
 13750  0CB4  09A0               	comf	??_interrrupt_bldc,f
 13751  0CB5  09A1               	comf	??_interrrupt_bldc+1,f
 13752  0CB6  0AA0               	incf	??_interrrupt_bldc,f
 13753  0CB7  1903               	skipnz
 13754  0CB8  0AA1               	incf	??_interrrupt_bldc+1,f
 13755  0CB9  0851               	movf	_ui16_IPhase_bldc,w	;volatile
 13756  0CBA  0720               	addwf	??_interrrupt_bldc,w
 13757  0CBB  00F0               	movwf	i1___wmul@multiplier
 13758  0CBC  0852               	movf	_ui16_IPhase_bldc+1,w	;volatile
 13759  0CBD  3D21               	addwfc	??_interrrupt_bldc+1,w
 13760  0CBE  00F1               	movwf	i1___wmul@multiplier+1
 13761  0CBF  0021               	movlb	1	; select bank1
 13762  0CC0  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 13763  0CC1  00F3               	movwf	i1___wmul@multiplicand+1
 13764  0CC2  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 13765  0CC3  00F2               	movwf	i1___wmul@multiplicand
 13766  0CC4  319E  261B  318B   	fcall	i1___wmul
 13767  0CC7  0870               	movf	?i1___wmul,w
 13768  0CC8  0020               	movlb	0	; select bank0
 13769  0CC9  00A2               	movwf	??_interrrupt_bldc+2
 13770  0CCA  0871               	movf	?i1___wmul+1,w
 13771  0CCB  00A3               	movwf	??_interrrupt_bldc+3
 13772  0CCC  0823               	movf	??_interrrupt_bldc+3,w
 13773  0CCD  00A2               	movwf	??_interrrupt_bldc+2
 13774  0CCE  01A3               	clrf	??_interrrupt_bldc+3
 13775  0CCF  0822               	movf	??_interrrupt_bldc+2,w
 13776  0CD0  0024               	movlb	4	; select bank4
 13777  0CD1  00E0               	movwf	_ui16_IPhase3_bldc^(0+512)	;volatile
 13778  0CD2  0020               	movlb	0	; select bank0
 13779  0CD3  0823               	movf	??_interrrupt_bldc+3,w
 13780  0CD4  0024               	movlb	4	; select bank4
 13781  0CD5  00E1               	movwf	(_ui16_IPhase3_bldc+1)^(0+512)	;volatile
 13782                           
 13783                           ;bldc.c: 877: }
 13784  0CD6  2CEF               	goto	i1l10883
 13785  0CD7                     i1l10875:	
 13786                           
 13787                           ;bldc.c: 880: else;bldc.c: 881: {;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
 13788  0CD7  0024               	movlb	4	; select bank4
 13789  0CD8  2CED               	goto	L54
 13790  0CD9                     i1l10877:	
 13791                           ;bldc.c: 890: };bldc.c: 894: default:
 13792                           
 13793                           ;bldc.c: 885: };bldc.c: 888: break;
 13794                           
 13795  0CD9  2CE7               	goto	i1l10881
 13796  0CDA                     i1l10879:	
 13797                           ;bldc.c: 902: };bldc.c: 904: }
 13798                           
 13799                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
 13800                           
 13801                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
 13802                           
 13803                           ;bldc.c: 895: {;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
 13804                           
 13805  0CDA  0021               	movlb	1	; select bank1
 13806  0CDB  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13807                           
 13808                           ; Switch size 1, requested type "space"
 13809                           ; Number of cases is 3, Range of values is 9 to 53
 13810                           ; switch strategies available:
 13811                           ; Name         Instructions Cycles
 13812                           ; simple_byte           10     6 (average)
 13813                           ; direct_byte           99     9 (fixed)
 13814                           ; jumptable            263     9 (fixed)
 13815                           ;	Chosen strategy is simple_byte
 13816  0CDC  3A09               	xorlw	9	; case 9
 13817  0CDD  1903               	skipnz
 13818  0CDE  2C30               	goto	i1l10859
 13819  0CDF  3A18               	xorlw	24	; case 17
 13820  0CE0  1903               	skipnz
 13821  0CE1  2CA2               	goto	i1l10871
 13822  0CE2  3A24               	xorlw	36	; case 53
 13823  0CE3  1903               	skipnz
 13824  0CE4  2C69               	goto	i1l10865
 13825  0CE5  2CD9               	goto	i1l10877
 13826                           
 13827                           ;bldc.c: 907: }
 13828  0CE6  2CEF               	goto	i1l10883
 13829  0CE7                     i1l10881:	
 13830                           
 13831                           ;bldc.c: 910: else;bldc.c: 911: {;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
 13832  0CE7  0023               	movlb	3	; select bank3
 13833  0CE8  01D4               	clrf	_ui16_IPhase1_bldc^(0+384)	;volatile
 13834  0CE9  01D5               	clrf	(_ui16_IPhase1_bldc+1)^(0+384)	;volatile
 13835                           
 13836                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
 13837  0CEA  0024               	movlb	4	; select bank4
 13838  0CEB  01E2               	clrf	_ui16_IPhase2_bldc^(0+512)	;volatile
 13839  0CEC  01E3               	clrf	(_ui16_IPhase2_bldc+1)^(0+512)	;volatile
 13840  0CED                     L54:	
 13841                           
 13842                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
 13843  0CED  01E0               	clrf	_ui16_IPhase3_bldc^(0+512)	;volatile
 13844  0CEE  01E1               	clrf	(_ui16_IPhase3_bldc+1)^(0+512)	;volatile
 13845  0CEF                     i1l10883:	
 13846                           
 13847                           ;bldc.c: 918: };bldc.c: 956: if( (ui16_IPhase_bldc.w > 500+40) )
 13848  0CEF  3002               	movlw	2
 13849  0CF0  0020               	movlb	0	; select bank0
 13850  0CF1  0252               	subwf	_ui16_IPhase_bldc+1,w	;volatile
 13851  0CF2  301D               	movlw	29
 13852  0CF3  1903               	skipnz
 13853  0CF4  0251               	subwf	_ui16_IPhase_bldc,w	;volatile
 13854  0CF5  1C03               	skipc
 13855  0CF6  2CFC               	goto	i1l10889
 13856                           
 13857                           ;bldc.c: 958: {;bldc.c: 960: MotorFlags.bits.B0 = 1;
 13858  0CF7  145A               	bsf	_MotorFlags,0
 13859                           
 13860                           ;bldc.c: 964: LATC = LATC & 0b11100101;
 13861  0CF8  0022               	movlb	2	; select bank2
 13862  0CF9  080E               	movf	14,w	;volatile
 13863  0CFA  39E5               	andlw	229
 13864  0CFB  008E               	movwf	14	;volatile
 13865  0CFC                     i1l10889:	
 13866                           ;bldc.c: 973: else;bldc.c: 974: {
 13867                           
 13868                           ;bldc.c: 970: }
 13869                           
 13870                           
 13871                           ;bldc.c: 978: };bldc.c: 984: ADC_Wait( );
 13872  0CFC  319D  25CF  318B   	fcall	i1_ADC_Wait
 13873                           
 13874                           ;bldc.c: 988: ( GO_nDONE = 1 );
 13875  0CFF  0021               	movlb	1	; select bank1
 13876  0D00  149D               	bsf	29,1	;volatile
 13877                           
 13878                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
 13879  0D01  1CE1               	btfss	_ui8_error_Flags^(0+128),1
 13880  0D02  2D0F               	goto	i1l10901
 13881                           
 13882                           ;bldc.c: 993: {;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 13883  0D03  3075               	movlw	117
 13884  0D04  009D               	movwf	29	;volatile
 13885                           
 13886                           ;bldc.c: 998: ADC_Wait( );
 13887  0D05  319D  25CF  318B   	fcall	i1_ADC_Wait
 13888                           
 13889                           ;bldc.c: 1001: ui8_sampleState = 5;
 13890  0D08  3005               	movlw	5
 13891  0D09                     L52:	
 13892  0D09  0020               	movlb	0	; select bank0
 13893  0D0A  00A0               	movwf	??_interrrupt_bldc
 13894  0D0B  0820               	movf	??_interrrupt_bldc,w
 13895  0D0C  0022               	movlb	2	; select bank2
 13896  0D0D  00E4               	movwf	_ui8_sampleState^(0+256)
 13897                           
 13898                           ;bldc.c: 1003: }
 13899  0D0E  2D24               	goto	i1l267
 13900  0D0F                     i1l10901:	
 13901                           
 13902                           ;bldc.c: 1006: else;bldc.c: 1007: {;bldc.c: 1009: ui8_sampleState++;
 13903  0D0F  3001               	movlw	1
 13904  0D10  0020               	movlb	0	; select bank0
 13905  0D11  00A0               	movwf	??_interrrupt_bldc
 13906  0D12  0820               	movf	??_interrrupt_bldc,w
 13907  0D13  0022               	movlb	2	; select bank2
 13908  0D14  07E4               	addwf	_ui8_sampleState^(0+256),f
 13909                           
 13910                           ;bldc.c: 1027: };bldc.c: 1030: }
 13911                           
 13912                           ;bldc.c: 1023: {;bldc.c: 1025: break;
 13913                           
 13914                           ;bldc.c: 1018: };bldc.c: 1021: case 10:
 13915                           
 13916                           ;bldc.c: 1012: };bldc.c: 1015: break;
 13917  0D15  2D24               	goto	i1l267
 13918  0D16                     i1l10905:	
 13919  0D16  0022               	movlb	2	; select bank2
 13920  0D17  0864               	movf	_ui8_sampleState^(0+256),w
 13921                           
 13922                           ; Switch size 1, requested type "space"
 13923                           ; Number of cases is 10, Range of values is 1 to 10
 13924                           ; switch strategies available:
 13925                           ; Name         Instructions Cycles
 13926                           ; direct_byte           29     9 (fixed)
 13927                           ; simple_byte           31    16 (average)
 13928                           ; jumptable            263     9 (fixed)
 13929                           ;	Chosen strategy is direct_byte
 13930  0D18  3EFF               	addlw	-1
 13931  0D19  1C03               	skipc
 13932  0D1A  2D24               	goto	i1l267
 13933  0D1B  0084               	movwf	4
 13934  0D1C  300A               	movlw	10
 13935  0D1D  0204               	subwf	4,w
 13936  0D1E  1803               	skipnc
 13937  0D1F  2D24               	goto	i1l267
 13938  0D20  3198               	movlp	high i1S11815
 13939  0D21  3504               	lslf	4,w
 13940  0D22  3E40               	addlw	low i1S11815
 13941  0D23  0082               	movwf	2
 13942  0D24                     i1l267:	
 13943                           
 13944                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
 13945  0D24  0020               	movlb	0	; select bank0
 13946  0D25  1F5A               	btfss	_MotorFlags,6
 13947  0D26  2D69               	goto	i1l10935
 13948                           
 13949                           ;bldc.c: 1071: {;bldc.c: 1073: if( MotorFlags.bits.B3)
 13950  0D27  1DDA               	btfss	_MotorFlags,3
 13951  0D28  2D6B               	goto	i1l10937
 13952                           
 13953                           ;bldc.c: 1075: {;bldc.c: 1077: bool_start_demand_mat = 1 ;
 13954  0D29  0021               	movlb	1	; select bank1
 13955  0D2A  01E0               	clrf	_bool_start_demand_mat^(0+128)
 13956  0D2B  0AE0               	incf	_bool_start_demand_mat^(0+128),f
 13957                           
 13958                           ;bldc.c: 1078: ui8_fixed_start_speed_mat = 65 ;
 13959  0D2C  3041               	movlw	65
 13960  0D2D  0023               	movlb	3	; select bank3
 13961  0D2E  00BE               	movwf	_ui8_fixed_start_speed_mat^(0+384)
 13962  0D2F  3000               	movlw	0
 13963  0D30  00BF               	movwf	(_ui8_fixed_start_speed_mat^(0+384)+1)
 13964                           
 13965                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
 13966  0D31  0024               	movlb	4	; select bank4
 13967  0D32  01EA               	clrf	_ui16_Task_Cont500ms^(0+512)
 13968  0D33  01EB               	clrf	(_ui16_Task_Cont500ms+1)^(0+512)
 13969                           
 13970                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
 13971  0D34  3003               	movlw	3
 13972  0D35  0020               	movlb	0	; select bank0
 13973  0D36  0553               	andwf	_comm_time,w
 13974  0D37  00A0               	movwf	??_interrrupt_bldc
 13975  0D38  3000               	movlw	0
 13976  0D39  0554               	andwf	_comm_time+1,w
 13977  0D3A  00A1               	movwf	??_interrrupt_bldc+1
 13978  0D3B  0820               	movf	??_interrrupt_bldc,w
 13979  0D3C  0421               	iorwf	??_interrrupt_bldc+1,w
 13980  0D3D  1D03               	btfss	3,2
 13981  0D3E  2D6B               	goto	i1l10937
 13982                           
 13983                           ;bldc.c: 1111: else;bldc.c: 1112: {;bldc.c: 1114: if (ui16_Ubat_bldc.w)
 13984                           
 13985                           ;bldc.c: 1105: };bldc.c: 1108: }
 13986                           
 13987                           ;bldc.c: 1100: {;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 13988                           
 13989                           ;bldc.c: 1096: {;bldc.c: 1098: if (ui16_Ubat_bldc.w)
 13990                           
 13991                           ;bldc.c: 1092: {;bldc.c: 1094: if (MotorFlags.bits.B4)
 13992  0D3F  085C               	movf	_ui16_Ubat_bldc,w	;volatile
 13993  0D40  045D               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
 13994  0D41  1903               	btfsc	3,2
 13995  0D42  2D55               	goto	i1l10927
 13996                           
 13997                           ;bldc.c: 1116: {;bldc.c: 1119: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 13998  0D43  085D               	movf	_ui16_Ubat_bldc+1,w	;volatile
 13999  0D44  00F1               	movwf	___lwdiv@divisor+1
 14000  0D45  085C               	movf	_ui16_Ubat_bldc,w	;volatile
 14001  0D46  00F0               	movwf	___lwdiv@divisor
 14002  0D47  3080               	movlw	128
 14003  0D48  00F2               	movwf	___lwdiv@dividend
 14004  0D49  303E               	movlw	62
 14005  0D4A  00F3               	movwf	___lwdiv@dividend+1
 14006  0D4B  3191  21A9  318B   	fcall	___lwdiv
 14007  0D4E  0870               	movf	?___lwdiv,w
 14008  0D4F  0020               	movlb	0	; select bank0
 14009  0D50  00A4               	movwf	interrrupt_bldc@ui32_tmp
 14010  0D51  0871               	movf	?___lwdiv+1,w
 14011  0D52  00A5               	movwf	interrrupt_bldc@ui32_tmp+1
 14012  0D53  01A6               	clrf	interrrupt_bldc@ui32_tmp+2
 14013  0D54  01A7               	clrf	interrrupt_bldc@ui32_tmp+3
 14014  0D55                     i1l10927:	
 14015                           
 14016                           ;bldc.c: 1121: };bldc.c: 1124: };bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui
      +                          32_tmp) )
 14017  0D55  0021               	movlb	1	; select bank1
 14018  0D56  085F               	movf	_ui8_StartupPWM^(0+128),w
 14019  0D57  0020               	movlb	0	; select bank0
 14020  0D58  0224               	subwf	interrrupt_bldc@ui32_tmp,w
 14021  0D59  1803               	skipnc
 14022  0D5A  2D5F               	goto	i1l10931
 14023                           
 14024                           ;bldc.c: 1129: {;bldc.c: 1131: ui8_StartupPWM--;
 14025  0D5B  3001               	movlw	1
 14026  0D5C  0021               	movlb	1	; select bank1
 14027  0D5D  02DF               	subwf	_ui8_StartupPWM^(0+128),f
 14028                           
 14029                           ;bldc.c: 1133: }
 14030  0D5E  2D65               	goto	i1l10933
 14031  0D5F                     i1l10931:	
 14032                           
 14033                           ;bldc.c: 1136: else;bldc.c: 1137: {;bldc.c: 1139: ui8_StartupPWM++;
 14034  0D5F  3001               	movlw	1
 14035  0D60  0020               	movlb	0	; select bank0
 14036  0D61  00A0               	movwf	??_interrrupt_bldc
 14037  0D62  0820               	movf	??_interrrupt_bldc,w
 14038  0D63  0021               	movlb	1	; select bank1
 14039  0D64  07DF               	addwf	_ui8_StartupPWM^(0+128),f
 14040  0D65                     i1l10933:	
 14041                           
 14042                           ;bldc.c: 1141: };bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
 14043  0D65  085F               	movf	_ui8_StartupPWM^(0+128),w
 14044  0D66  0025               	movlb	5	; select bank5
 14045  0D67  0091               	movwf	17	;volatile
 14046                           
 14047                           ;bldc.c: 1146: };bldc.c: 1149: };bldc.c: 1152: }
 14048  0D68  2D6B               	goto	i1l10937
 14049  0D69                     i1l10935:	
 14050                           
 14051                           ;bldc.c: 1155: else;bldc.c: 1156: {;bldc.c: 1159: CCPR1L = 0;
 14052  0D69  0025               	movlb	5	; select bank5
 14053  0D6A  0191               	clrf	17	;volatile
 14054  0D6B                     i1l10937:	
 14055                           
 14056                           ;bldc.c: 1161: };bldc.c: 1165: if( 0 == ui8_BlankingCount )
 14057  0D6B  0021               	movlb	1	; select bank1
 14058  0D6C  085D               	movf	_ui8_BlankingCount^(0+128),w
 14059  0D6D  1D03               	btfss	3,2
 14060  0D6E  2D97               	goto	i1l10957
 14061                           
 14062                           ;bldc.c: 1168: {;bldc.c: 1177: if( ui8_CompFlag )
 14063  0D6F  0859               	movf	_ui8_CompFlag^(0+128),w
 14064  0D70  1903               	btfsc	3,2
 14065  0D71  2D7C               	goto	i1l316
 14066                           
 14067                           ;bldc.c: 1180: {;bldc.c: 1185: if( MotorFlags.bits.B5 == 0 )
 14068  0D72  0020               	movlb	0	; select bank0
 14069  0D73  1ADA               	btfsc	_MotorFlags,5
 14070  0D74  2D7C               	goto	i1l316
 14071                           
 14072                           ;bldc.c: 1187: {;bldc.c: 1191: ui8_zero_cros_cnt++;
 14073  0D75  3001               	movlw	1
 14074  0D76  0024               	movlb	4	; select bank4
 14075  0D77  07E8               	addwf	_ui8_zero_cros_cnt^(0+512),f
 14076  0D78  3000               	movlw	0
 14077  0D79  3DE9               	addwfc	(_ui8_zero_cros_cnt+1)^(0+512),f
 14078                           
 14079                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
 14080  0D7A  0020               	movlb	0	; select bank0
 14081  0D7B  16DA               	bsf	_MotorFlags,5
 14082  0D7C                     i1l316:	
 14083                           
 14084                           ;bldc.c: 1196: };bldc.c: 1199: };bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
 14085  0D7C  0021               	movlb	1	; select bank1
 14086  0D7D  0859               	movf	_ui8_CompFlag^(0+128),w
 14087  0D7E  0020               	movlb	0	; select bank0
 14088  0D7F  00A0               	movwf	??_interrrupt_bldc
 14089  0D80  0820               	movf	??_interrrupt_bldc,w
 14090  0D81  0022               	movlb	2	; select bank2
 14091  0D82  00E3               	movwf	_CompFlag_prev^(0+256)
 14092                           
 14093                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
 14094  0D83  0020               	movlb	0	; select bank0
 14095  0D84  1EDA               	btfss	_MotorFlags,5
 14096  0D85  0008               	return
 14097                           
 14098                           ;bldc.c: 1353: {;bldc.c: 1357: if( 0 == phase_delay_counter )
 14099  0D86  0021               	movlb	1	; select bank1
 14100  0D87  0838               	movf	_phase_delay_counter^(0+128),w
 14101  0D88  0439               	iorwf	(_phase_delay_counter+1)^(0+128),w
 14102  0D89  1D03               	btfss	3,2
 14103  0D8A  2D91               	goto	i1l10955
 14104                           
 14105                           ;bldc.c: 1360: {;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
 14106  0D8B  0020               	movlb	0	; select bank0
 14107  0D8C  19DA               	btfsc	_MotorFlags,3
 14108  0D8D  0008               	return
 14109                           
 14110                           ;bldc.c: 1364: {;bldc.c: 1378: commutate( );
 14111  0D8E  3189  2122         	fcall	i1_commutate
 14112                           
 14113                           ;bldc.c: 1383: };bldc.c: 1386: }
 14114  0D90  0008               	return
 14115  0D91                     i1l10955:	
 14116                           
 14117                           ;bldc.c: 1389: else;bldc.c: 1390: {;bldc.c: 1392: phase_delay_counter--;
 14118  0D91  30FF               	movlw	255
 14119  0D92  0021               	movlb	1	; select bank1
 14120  0D93  07B8               	addwf	_phase_delay_counter^(0+128),f
 14121  0D94  30FF               	movlw	255
 14122  0D95  3DB9               	addwfc	(_phase_delay_counter+1)^(0+128),f
 14123                           
 14124                           ;bldc.c: 1394: };bldc.c: 1398: };bldc.c: 1401: }
 14125  0D96  0008               	return
 14126  0D97                     i1l10957:	
 14127                           
 14128                           ;bldc.c: 1404: else;bldc.c: 1405: {;bldc.c: 1407: ui8_BlankingCount--;
 14129  0D97  3001               	movlw	1
 14130  0D98  02DD               	subwf	_ui8_BlankingCount^(0+128),f
 14131                           
 14132                           ;bldc.c: 1408: bemf_filter = 62;
 14133  0D99  303E               	movlw	62
 14134  0D9A  0020               	movlb	0	; select bank0
 14135  0D9B  00A0               	movwf	??_interrrupt_bldc
 14136  0D9C  0820               	movf	??_interrrupt_bldc,w
 14137  0D9D  0022               	movlb	2	; select bank2
 14138  0D9E  00E6               	movwf	_bemf_filter^(0+256)
 14139  0D9F  0008               	return
 14140  0DA0                     __end_of_interrrupt_bldc:	
 14141                           
 14142                           	psect	swtext3
 14143  1840                     __pswtext3:	
 14144  1840                     i1S11815:	
 14145  1840  318B  2B78         	ljmp	i1l10727
 14146  1842  318B  2B8B         	ljmp	i1l10739
 14147  1844  318B  2BAA         	ljmp	i1l10779
 14148  1846  318B  2BEE         	ljmp	i1l10817
 14149  1848  318C  2C11         	ljmp	i1l10839
 14150  184A  318C  2C11         	ljmp	i1l10841
 14151  184C  318C  2C11         	ljmp	i1l10843
 14152  184E  318C  2C12         	ljmp	i1l284
 14153  1850  318C  2C25         	ljmp	i1l10853
 14154  1852  318D  2D24         	ljmp	i1l267
 14155                           
 14156                           	psect	text40
 14157  0922                     __ptext40:	
 14158 ;; *************** function i1_commutate *****************
 14159 ;; Defined at:
 14160 ;;		line 1426 in file "../bldc.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;		None
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;		None
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1    wreg      void 
 14167 ;; Registers used:
 14168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14174 ;;      Params:         0       0       0       0       0       0       0       0
 14175 ;;      Locals:         0       0       0       0       0       0       0       0
 14176 ;;      Temps:         12       0       0       0       0       0       0       0
 14177 ;;      Totals:        12       0       0       0       0       0       0       0
 14178 ;;Total ram usage:       12 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; This function calls:
 14181 ;;		Nothing
 14182 ;; This function is called by:
 14183 ;;		_interrrupt_bldc
 14184 ;; This function uses a non-reentrant model
 14185 ;;
 14186                           
 14187                           
 14188                           ;psect for function i1_commutate
 14189  0922                     i1_commutate:	
 14190                           
 14191                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 14192                           
 14193                           ;incstack = 0
 14194                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0]
 14195  0922  3000               	movlw	0
 14196  0923  0021               	movlb	1	; select bank1
 14197  0924  023B               	subwf	(_ui16_step_cnt+1)^(0+128),w
 14198  0925  300A               	movlw	10
 14199  0926  1903               	skipnz
 14200  0927  023A               	subwf	_ui16_step_cnt^(0+128),w
 14201  0928  1803               	skipnc
 14202  0929  292E               	goto	i1l6243
 14203                           
 14204                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
 14205  092A  3001               	movlw	1
 14206  092B  07BA               	addwf	_ui16_step_cnt^(0+128),f
 14207  092C  3000               	movlw	0
 14208  092D  3DBB               	addwfc	(_ui16_step_cnt+1)^(0+128),f
 14209  092E                     i1l6243:	
 14210                           
 14211                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 14212  092E  3558               	lslf	_Bcnt^(0+128),w
 14213  092F  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 14214  0930  0086               	movwf	6
 14215  0931  3002               	movlw	2	; select bank4/5
 14216  0932  0087               	movwf	7
 14217  0933  0020               	movlb	0	; select bank0
 14218  0934  0853               	movf	_comm_time,w
 14219  0935  3FC0               	movwi [0]fsr1
 14220  0936  0854               	movf	_comm_time+1,w
 14221  0937  3FC1               	movwi [1]fsr1
 14222  0938  3001               	movlw	1
 14223  0939  00F0               	movwf	??i1_commutate
 14224  093A  0870               	movf	??i1_commutate,w
 14225  093B  0021               	movlb	1	; select bank1
 14226  093C  07D8               	addwf	_Bcnt^(0+128),f
 14227                           
 14228                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 14229  093D  3007               	movlw	7
 14230  093E  00F0               	movwf	??i1_commutate
 14231  093F  0870               	movf	??i1_commutate,w
 14232  0940  05D8               	andwf	_Bcnt^(0+128),f
 14233                           
 14234                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 14235  0941  300E               	movlw	14
 14236  0942  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 14237  0943  0086               	movwf	6
 14238  0944  3002               	movlw	2	; select bank4/5
 14239  0945  0087               	movwf	7
 14240  0946  300C               	movlw	12
 14241  0947  3E20               	addlw	(low (_B| (0+512)))& (0+255)
 14242  0948  0084               	movwf	4
 14243  0949  3002               	movlw	2	; select bank4/5
 14244  094A  0085               	movwf	5
 14245  094B  0024               	movlb	4	; select bank4
 14246  094C  0824               	movf	(_B^(0+512)+4),w
 14247  094D  0722               	addwf	(_B^(0+512)+2),w
 14248  094E  00F0               	movwf	??i1_commutate
 14249  094F  0825               	movf	((_B+1)^(0+512)+4),w
 14250  0950  3D23               	addwfc	((_B+1)^(0+512)+2),w
 14251  0951  00F1               	movwf	??i1_commutate+1
 14252  0952  0826               	movf	(_B^(0+512)+6),w
 14253  0953  0770               	addwf	??i1_commutate,w
 14254  0954  00F2               	movwf	??i1_commutate+2
 14255  0955  0827               	movf	((_B+1)^(0+512)+6),w
 14256  0956  3D71               	addwfc	??i1_commutate+1,w
 14257  0957  00F3               	movwf	??i1_commutate+3
 14258  0958  0828               	movf	(_B^(0+512)+8),w
 14259  0959  0772               	addwf	??i1_commutate+2,w
 14260  095A  00F4               	movwf	??i1_commutate+4
 14261  095B  0829               	movf	((_B+1)^(0+512)+8),w
 14262  095C  3D73               	addwfc	??i1_commutate+3,w
 14263  095D  00F5               	movwf	??i1_commutate+5
 14264  095E  082A               	movf	(_B^(0+512)+10),w
 14265  095F  0774               	addwf	??i1_commutate+4,w
 14266  0960  00F6               	movwf	??i1_commutate+6
 14267  0961  082B               	movf	((_B+1)^(0+512)+10),w
 14268  0962  3D75               	addwfc	??i1_commutate+5,w
 14269  0963  00F7               	movwf	??i1_commutate+7
 14270  0964  3F00               	moviw [0]fsr0
 14271  0965  0776               	addwf	??i1_commutate+6,w
 14272  0966  00F8               	movwf	??i1_commutate+8
 14273  0967  3F01               	moviw [1]fsr0
 14274  0968  3D77               	addwfc	??i1_commutate+7,w
 14275  0969  00F9               	movwf	??i1_commutate+9
 14276  096A  3F40               	moviw [0]fsr1
 14277  096B  0778               	addwf	??i1_commutate+8,w
 14278  096C  00FA               	movwf	??i1_commutate+10
 14279  096D  3F41               	moviw [1]fsr1
 14280  096E  3D79               	addwfc	??i1_commutate+9,w
 14281  096F  00FB               	movwf	??i1_commutate+11
 14282  0970  0820               	movf	_B^(0+512),w
 14283  0971  077A               	addwf	??i1_commutate+10,w
 14284  0972  0021               	movlb	1	; select bank1
 14285  0973  00B2               	movwf	_ui16_speed_fil^(0+128)
 14286  0974  0024               	movlb	4	; select bank4
 14287  0975  0821               	movf	(_B+1)^(0+512),w
 14288  0976  3D7B               	addwfc	??i1_commutate+11,w
 14289  0977  0021               	movlb	1	; select bank1
 14290  0978  00B3               	movwf	(_ui16_speed_fil+1)^(0+128)
 14291                           
 14292                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 14293  0979  0020               	movlb	0	; select bank0
 14294  097A  0854               	movf	_comm_time+1,w
 14295  097B  0023               	movlb	3	; select bank3
 14296  097C  00BD               	movwf	(_ui16_speed_rar+1)^(0+384)
 14297  097D  0020               	movlb	0	; select bank0
 14298  097E  0853               	movf	_comm_time,w
 14299  097F  0023               	movlb	3	; select bank3
 14300  0980  00BC               	movwf	_ui16_speed_rar^(0+384)
 14301                           
 14302                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 14303  0981  0020               	movlb	0	; select bank0
 14304  0982  12DA               	bcf	_MotorFlags,5
 14305                           
 14306                           ;bldc.c: 1451: ui8_sampleState = 1;
 14307  0983  0022               	movlb	2	; select bank2
 14308  0984  01E4               	clrf	_ui8_sampleState^(0+256)
 14309  0985  0AE4               	incf	_ui8_sampleState^(0+256),f
 14310                           
 14311                           ;bldc.c: 1455: bemf_filter = 62;
 14312  0986  303E               	movlw	62
 14313  0987  00F0               	movwf	??i1_commutate
 14314  0988  0870               	movf	??i1_commutate,w
 14315  0989  00E6               	movwf	_bemf_filter^(0+256)
 14316                           
 14317                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 14318  098A  0020               	movlb	0	; select bank0
 14319  098B  17DA               	bsf	_MotorFlags,7
 14320                           
 14321                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 14322  098C  1DDA               	btfss	_MotorFlags,3
 14323  098D  2A00               	goto	i1l327
 14324                           
 14325                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
 14326  098E  0023               	movlb	3	; select bank3
 14327  098F  083D               	movf	(_ui16_speed_rar+1)^(0+384),w
 14328  0990  00F1               	movwf	??i1_commutate+1
 14329  0991  083C               	movf	_ui16_speed_rar^(0+384),w
 14330  0992  00F0               	movwf	??i1_commutate
 14331  0993  36F1               	lsrf	??i1_commutate+1,f
 14332  0994  0CF0               	rrf	??i1_commutate,f
 14333  0995  36F1               	lsrf	??i1_commutate+1,f
 14334  0996  0CF0               	rrf	??i1_commutate,f
 14335  0997  36F1               	lsrf	??i1_commutate+1,f
 14336  0998  0CF0               	rrf	??i1_commutate,f
 14337  0999  30FF               	movlw	255
 14338  099A  0570               	andwf	??i1_commutate,w
 14339  099B  0021               	movlb	1	; select bank1
 14340  099C  00B6               	movwf	_ui16_phase_advancement^(0+128)
 14341  099D  3001               	movlw	1
 14342  099E  0571               	andwf	??i1_commutate+1,w
 14343  099F  00B7               	movwf	(_ui16_phase_advancement+1)^(0+128)
 14344                           
 14345                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 14346  09A0  0020               	movlb	0	; select bank0
 14347  09A1  0854               	movf	_comm_time+1,w
 14348  09A2  0021               	movlb	1	; select bank1
 14349  09A3  0237               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 14350  09A4  1D03               	skipz
 14351  09A5  29AA               	goto	u361_25
 14352  09A6  0020               	movlb	0	; select bank0
 14353  09A7  0853               	movf	_comm_time,w
 14354  09A8  0021               	movlb	1	; select bank1
 14355  09A9  0236               	subwf	_ui16_phase_advancement^(0+128),w
 14356  09AA                     u361_25:	
 14357  09AA  1803               	skipnc
 14358  09AB  29BE               	goto	i1l6269
 14359                           
 14360                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
 14361  09AC  0936               	comf	_ui16_phase_advancement^(0+128),w
 14362  09AD  00F0               	movwf	??i1_commutate
 14363  09AE  0937               	comf	(_ui16_phase_advancement+1)^(0+128),w
 14364  09AF  00F1               	movwf	??i1_commutate+1
 14365  09B0  0AF0               	incf	??i1_commutate,f
 14366  09B1  1903               	skipnz
 14367  09B2  0AF1               	incf	??i1_commutate+1,f
 14368  09B3  0020               	movlb	0	; select bank0
 14369  09B4  0853               	movf	_comm_time,w
 14370  09B5  0770               	addwf	??i1_commutate,w
 14371  09B6  0021               	movlb	1	; select bank1
 14372  09B7  00B8               	movwf	_phase_delay_counter^(0+128)
 14373  09B8  0020               	movlb	0	; select bank0
 14374  09B9  0854               	movf	_comm_time+1,w
 14375  09BA  3D71               	addwfc	??i1_commutate+1,w
 14376  09BB  0021               	movlb	1	; select bank1
 14377  09BC  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
 14378                           
 14379                           ;bldc.c: 1478: }
 14380  09BD  29C0               	goto	i1l6271
 14381  09BE                     i1l6269:	
 14382                           
 14383                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
 14384  09BE  01B8               	clrf	_phase_delay_counter^(0+128)
 14385  09BF  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14386  09C0                     i1l6271:	
 14387                           
 14388                           ;bldc.c: 1486: };bldc.c: 1489: phase_delay_counter_debug = phase_delay_counter;
 14389  09C0  0839               	movf	(_phase_delay_counter+1)^(0+128),w
 14390  09C1  0024               	movlb	4	; select bank4
 14391  09C2  00E7               	movwf	(_phase_delay_counter_debug+1)^(0+512)
 14392  09C3  0021               	movlb	1	; select bank1
 14393  09C4  0838               	movf	_phase_delay_counter^(0+128),w
 14394  09C5  0024               	movlb	4	; select bank4
 14395  09C6  00E6               	movwf	_phase_delay_counter_debug^(0+512)
 14396                           
 14397                           ;bldc.c: 1508: switch (ui16_step_cnt)
 14398  09C7  29DB               	goto	i1l6295
 14399  09C8                     i1l6273:	
 14400                           ;bldc.c: 1510: {;bldc.c: 1512: case 0 :
 14401                           
 14402                           
 14403                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
 14404  09C8  30A6               	movlw	166
 14405  09C9  29D6               	goto	L76
 14406  09CA                     i1l6275:	
 14407                           ;bldc.c: 1519: };bldc.c: 1522: case 1:
 14408                           
 14409                           ;bldc.c: 1517: break;
 14410                           
 14411                           
 14412                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
 14413  09CA  30F4               	movlw	244
 14414  09CB  0022               	movlb	2	; select bank2
 14415  09CC  00A7               	movwf	_ui16_comm_time_max^(0+256)
 14416  09CD  3001               	movlw	1
 14417  09CE  29D9               	goto	L70
 14418  09CF                     i1l6277:	
 14419                           ;bldc.c: 1529: };bldc.c: 1532: case 2:
 14420                           
 14421                           ;bldc.c: 1527: break;
 14422                           
 14423                           
 14424                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
 14425  09CF  307D               	movlw	125
 14426  09D0  29D6               	goto	L76
 14427  09D1                     i1l6279:	
 14428                           ;bldc.c: 1539: };bldc.c: 1542: case 3:
 14429                           
 14430                           ;bldc.c: 1537: break;
 14431                           
 14432                           
 14433                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
 14434  09D1  3053               	movlw	83
 14435  09D2  29D6               	goto	L76
 14436  09D3                     i1l6281:	
 14437                           ;bldc.c: 1549: };bldc.c: 1552: case 4:
 14438                           
 14439                           ;bldc.c: 1547: break;
 14440                           
 14441                           
 14442                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
 14443  09D3  303E               	movlw	62
 14444  09D4  29D6               	goto	L76
 14445  09D5                     i1l6283:	
 14446                           ;bldc.c: 1559: };bldc.c: 1562: case 5:
 14447                           
 14448                           ;bldc.c: 1557: break;
 14449                           
 14450  09D5                     i1l6285:	
 14451                           ;bldc.c: 1569: };bldc.c: 1572: case 6:
 14452                           
 14453                           ;bldc.c: 1567: break;
 14454                           
 14455                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14456                           
 14457  09D5                     i1l6287:	
 14458                           ;bldc.c: 1579: };bldc.c: 1582: case 7:
 14459                           
 14460                           ;bldc.c: 1577: break;
 14461                           
 14462                           ;bldc.c: 1574: {;bldc.c: 1576: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14463                           
 14464  09D5                     i1l6289:	
 14465                           ;bldc.c: 1589: };bldc.c: 1592: case 8:
 14466                           
 14467                           ;bldc.c: 1587: break;
 14468                           
 14469                           ;bldc.c: 1584: {;bldc.c: 1586: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14470                           
 14471  09D5                     i1l6291:	
 14472                           ;bldc.c: 1599: };bldc.c: 1602: case 9:
 14473                           
 14474                           ;bldc.c: 1597: break;
 14475                           
 14476                           ;bldc.c: 1594: {;bldc.c: 1596: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14477                           
 14478  09D5                     i1l6293:	
 14479                           ;bldc.c: 1609: };bldc.c: 1613: default:
 14480                           
 14481                           ;bldc.c: 1607: break;
 14482                           
 14483                           ;bldc.c: 1604: {;bldc.c: 1606: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 14484                           
 14485                           
 14486                           ;bldc.c: 1614: {;bldc.c: 1616: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
 14487  09D5  3032               	movlw	50
 14488  09D6                     L76:	
 14489  09D6  0022               	movlb	2	; select bank2
 14490  09D7  00A7               	movwf	_ui16_comm_time_max^(0+256)
 14491  09D8  3000               	movlw	0
 14492  09D9                     L70:	
 14493  09D9  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14494                           
 14495                           ;bldc.c: 1618: };bldc.c: 1620: }
 14496  09DA  29EB               	goto	i1l6297
 14497  09DB                     i1l6295:	
 14498                           
 14499                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14500                           ; Switch size 1, requested type "space"
 14501                           ; Number of cases is 1, Range of values is 0 to 0
 14502                           ; switch strategies available:
 14503                           ; Name         Instructions Cycles
 14504                           ; simple_byte            4     3 (average)
 14505                           ; direct_byte            8     6 (fixed)
 14506                           ; jumptable            260     6 (fixed)
 14507                           ;	Chosen strategy is simple_byte
 14508  09DB  0021               	movlb	1	; select bank1
 14509  09DC  083B               	movf	(_ui16_step_cnt+1)^(0+128),w
 14510  09DD  3A00               	xorlw	0	; case 0
 14511  09DE  1903               	skipnz
 14512  09DF  29E1               	goto	i1l11817
 14513  09E0  29D5               	goto	i1l6293
 14514  09E1                     i1l11817:	
 14515                           
 14516                           ; Switch size 1, requested type "space"
 14517                           ; Number of cases is 10, Range of values is 0 to 9
 14518                           ; switch strategies available:
 14519                           ; Name         Instructions Cycles
 14520                           ; direct_byte           26     6 (fixed)
 14521                           ; simple_byte           31    16 (average)
 14522                           ; jumptable            260     6 (fixed)
 14523                           ;	Chosen strategy is direct_byte
 14524  09E1  083A               	movf	_ui16_step_cnt^(0+128),w
 14525  09E2  0084               	movwf	4
 14526  09E3  300A               	movlw	10
 14527  09E4  0204               	subwf	4,w
 14528  09E5  1803               	skipnc
 14529  09E6  29D5               	goto	i1l6293
 14530  09E7  3198               	movlp	high i1S11819
 14531  09E8  3504               	lslf	4,w
 14532  09E9  3E54               	addlw	low i1S11819
 14533  09EA  0082               	movwf	2
 14534  09EB                     i1l6297:	
 14535                           
 14536                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
 14537  09EB  3000               	movlw	0
 14538  09EC  0022               	movlb	2	; select bank2
 14539  09ED  0228               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 14540  09EE  3032               	movlw	50
 14541  09EF  1903               	skipnz
 14542  09F0  0227               	subwf	_ui16_comm_time_max^(0+256),w
 14543  09F1  1803               	skipnc
 14544  09F2  29F7               	goto	i1l6301
 14545                           
 14546                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
 14547  09F3  3032               	movlw	50
 14548  09F4  00A7               	movwf	_ui16_comm_time_max^(0+256)
 14549  09F5  3000               	movlw	0
 14550  09F6  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14551  09F7                     i1l6301:	
 14552                           
 14553                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
 14554  09F7  0020               	movlb	0	; select bank0
 14555  09F8  1E5A               	btfss	_MotorFlags,4
 14556  09F9  2A3F               	goto	i1l345
 14557                           
 14558                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
 14559  09FA  300A               	movlw	10
 14560  09FB  00F0               	movwf	??i1_commutate
 14561  09FC  0870               	movf	??i1_commutate,w
 14562  09FD  0021               	movlb	1	; select bank1
 14563  09FE  00DF               	movwf	_ui8_StartupPWM^(0+128)
 14564                           
 14565                           ;bldc.c: 1641: };bldc.c: 1644: }
 14566  09FF  2A3F               	goto	i1l345
 14567  0A00                     i1l327:	
 14568                           
 14569                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
 14570  0A00  1C5E               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14571  0A01  2A06               	goto	i1l6307
 14572                           
 14573                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
 14574  0A02  0021               	movlb	1	; select bank1
 14575  0A03  01B8               	clrf	_phase_delay_counter^(0+128)
 14576  0A04  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14577                           
 14578                           ;bldc.c: 1659: }
 14579  0A05  2A12               	goto	i1l6309
 14580  0A06                     i1l6307:	
 14581                           
 14582                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 14583  0A06  0020               	movlb	0	; select bank0
 14584  0A07  0854               	movf	_comm_time+1,w
 14585  0A08  00F1               	movwf	??i1_commutate+1
 14586  0A09  0853               	movf	_comm_time,w
 14587  0A0A  00F0               	movwf	??i1_commutate
 14588  0A0B  36F1               	lsrf	??i1_commutate+1,f
 14589  0A0C  0CF0               	rrf	??i1_commutate,f
 14590  0A0D  0870               	movf	??i1_commutate,w
 14591  0A0E  0021               	movlb	1	; select bank1
 14592  0A0F  00B8               	movwf	_phase_delay_counter^(0+128)
 14593  0A10  0871               	movf	??i1_commutate+1,w
 14594  0A11  00B9               	movwf	(_phase_delay_counter+1)^(0+128)
 14595  0A12                     i1l6309:	
 14596                           
 14597                           ;bldc.c: 1670: };bldc.c: 1675: phase_delay_counter = 0;
 14598  0A12  01B8               	clrf	_phase_delay_counter^(0+128)
 14599  0A13  01B9               	clrf	(_phase_delay_counter+1)^(0+128)
 14600                           
 14601                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 14602  0A14  0839               	movf	(_phase_delay_counter+1)^(0+128),w
 14603  0A15  0024               	movlb	4	; select bank4
 14604  0A16  00E7               	movwf	(_phase_delay_counter_debug+1)^(0+512)
 14605  0A17  0021               	movlb	1	; select bank1
 14606  0A18  0838               	movf	_phase_delay_counter^(0+128),w
 14607  0A19  0024               	movlb	4	; select bank4
 14608  0A1A  00E6               	movwf	_phase_delay_counter_debug^(0+512)
 14609                           
 14610                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
 14611  0A1B  3032               	movlw	50
 14612  0A1C  0022               	movlb	2	; select bank2
 14613  0A1D  00A7               	movwf	_ui16_comm_time_max^(0+256)
 14614  0A1E  3000               	movlw	0
 14615  0A1F  00A8               	movwf	(_ui16_comm_time_max^(0+256)+1)
 14616                           
 14617                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 14618  0A20  0020               	movlb	0	; select bank0
 14619  0A21  1F5A               	btfss	_MotorFlags,6
 14620  0A22  2A3D               	goto	i1l6319
 14621                           
 14622                           ;bldc.c: 1693: {;bldc.c: 1751: CCPR1L = ui16_duty_cycle_BLDC >> 2;
 14623  0A23  0021               	movlb	1	; select bank1
 14624  0A24  0831               	movf	(_ui16_duty_cycle_BLDC+1)^(0+128),w
 14625  0A25  00F1               	movwf	??i1_commutate+1
 14626  0A26  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 14627  0A27  00F0               	movwf	??i1_commutate
 14628  0A28  36F1               	lsrf	??i1_commutate+1,f
 14629  0A29  0CF0               	rrf	??i1_commutate,f
 14630  0A2A  36F1               	lsrf	??i1_commutate+1,f
 14631  0A2B  0CF0               	rrf	??i1_commutate,f
 14632  0A2C  0870               	movf	??i1_commutate,w
 14633  0A2D  0025               	movlb	5	; select bank5
 14634  0A2E  0091               	movwf	17	;volatile
 14635                           
 14636                           ;bldc.c: 1752: CCP1CON = ((ui16_duty_cycle_BLDC & 0b11) << 4) | 0x0C;
 14637  0A2F  0021               	movlb	1	; select bank1
 14638  0A30  0830               	movf	_ui16_duty_cycle_BLDC^(0+128),w
 14639  0A31  3903               	andlw	3
 14640  0A32  00F0               	movwf	??i1_commutate
 14641  0A33  3003               	movlw	3
 14642  0A34                     u366_25:	
 14643  0A34  35F0               	lslf	??i1_commutate,f
 14644  0A35  3EFF               	addlw	-1
 14645  0A36  1D03               	skipz
 14646  0A37  2A34               	goto	u366_25
 14647  0A38  3570               	lslf	??i1_commutate,w
 14648  0A39  380C               	iorlw	12
 14649  0A3A  0025               	movlb	5	; select bank5
 14650  0A3B  0093               	movwf	19	;volatile
 14651                           
 14652                           ;bldc.c: 1766: }
 14653  0A3C  2A3F               	goto	i1l345
 14654  0A3D                     i1l6319:	
 14655                           
 14656                           ;bldc.c: 1769: else;bldc.c: 1770: {;bldc.c: 1772: CCPR1L = 0;
 14657  0A3D  0025               	movlb	5	; select bank5
 14658  0A3E  0191               	clrf	17	;volatile
 14659  0A3F                     i1l345:	
 14660                           
 14661                           ;bldc.c: 1774: };bldc.c: 1778: };bldc.c: 1781: comm_time = 0;
 14662  0A3F  0020               	movlb	0	; select bank0
 14663  0A40  01D3               	clrf	_comm_time
 14664  0A41  01D4               	clrf	_comm_time+1
 14665                           
 14666                           ;bldc.c: 1785: if( comm_state == 0xff )
 14667  0A42  0021               	movlb	1	; select bank1
 14668  0A43  0A5E               	incf	_comm_state^(0+128),w
 14669  0A44  1D03               	btfss	3,2
 14670  0A45  2B24               	goto	i1l6469
 14671                           
 14672                           ;bldc.c: 1787: {;bldc.c: 1789: comm_state = 6;
 14673  0A46  3006               	movlw	6
 14674  0A47  00F0               	movwf	??i1_commutate
 14675  0A48  0870               	movf	??i1_commutate,w
 14676  0A49  00DE               	movwf	_comm_state^(0+128)
 14677                           
 14678                           ;bldc.c: 1791: };bldc.c: 1794: switch( comm_state )
 14679  0A4A  2B24               	goto	i1l6469
 14680  0A4B                     i1l6325:	
 14681                           ;bldc.c: 1796: {;bldc.c: 1798: case 1:
 14682                           
 14683                           
 14684                           ;bldc.c: 1801: {;bldc.c: 1807: PSTR1CON = 0b00000001;
 14685  0A4B  3001               	movlw	1
 14686  0A4C  0025               	movlb	5	; select bank5
 14687  0A4D  0096               	movwf	22	;volatile
 14688                           
 14689                           ;bldc.c: 1810: if( MotorFlags.bits.B6 )
 14690  0A4E  0020               	movlb	0	; select bank0
 14691  0A4F  1F5A               	btfss	_MotorFlags,6
 14692  0A50  2A56               	goto	i1l6331
 14693                           
 14694                           ;bldc.c: 1812: {;bldc.c: 1814: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 14695  0A51  0022               	movlb	2	; select bank2
 14696  0A52  080E               	movf	14,w	;volatile
 14697  0A53  39E5               	andlw	229
 14698  0A54  380A               	iorlw	10
 14699  0A55  008E               	movwf	14	;volatile
 14700  0A56                     i1l6331:	
 14701                           
 14702                           ;bldc.c: 1816: };bldc.c: 1820: LATB2 = 0;
 14703  0A56  0022               	movlb	2	; select bank2
 14704  0A57  110D               	bcf	13,2	;volatile
 14705                           
 14706                           ;bldc.c: 1821: LATB1 = 0;
 14707  0A58  108D               	bcf	13,1	;volatile
 14708                           
 14709                           ;bldc.c: 1822: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 14710  0A59  3009               	movlw	9
 14711  0A5A  00F0               	movwf	??i1_commutate
 14712  0A5B  0870               	movf	??i1_commutate,w
 14713  0A5C  0021               	movlb	1	; select bank1
 14714  0A5D  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14715                           
 14716                           ;bldc.c: 1823: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 14717  0A5E  01DB               	clrf	_ui8_UPhase_sel^(0+128)
 14718  0A5F  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
 14719                           
 14720                           ;bldc.c: 1824: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 14721  0A60  3025               	movlw	37
 14722  0A61  00F0               	movwf	??i1_commutate
 14723  0A62  0870               	movf	??i1_commutate,w
 14724  0A63  00DA               	movwf	_ui8_Ubemf_sel^(0+128)
 14725                           
 14726                           ;bldc.c: 1825: CM1CON1 = 0x02;
 14727  0A64  3002               	movlw	2
 14728  0A65  0022               	movlb	2	; select bank2
 14729  0A66  0092               	movwf	18	;volatile
 14730                           
 14731                           ;bldc.c: 1838: CM1CON0 = 0x84;
 14732  0A67  3084               	movlw	132
 14733  0A68  0091               	movwf	17	;volatile
 14734                           
 14735                           ;bldc.c: 1839: rising_bemf_flag = 1;
 14736  0A69  0020               	movlb	0	; select bank0
 14737  0A6A  145E               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14738                           
 14739                           ;bldc.c: 1840: comm_state = 6;
 14740  0A6B  3006               	movlw	6
 14741  0A6C  2B15               	goto	L74
 14742  0A6D                     i1l6349:	
 14743                           ;bldc.c: 1850: };bldc.c: 1853: case 2:
 14744                           
 14745                           ;bldc.c: 1846: break;
 14746                           
 14747                           
 14748                           ;bldc.c: 1856: {;bldc.c: 1861: PSTR1CON = 0b00000001;
 14749  0A6D  3001               	movlw	1
 14750  0A6E  0025               	movlb	5	; select bank5
 14751  0A6F  0096               	movwf	22	;volatile
 14752                           
 14753                           ;bldc.c: 1864: if( MotorFlags.bits.B6 )
 14754  0A70  0020               	movlb	0	; select bank0
 14755  0A71  1F5A               	btfss	_MotorFlags,6
 14756  0A72  2A78               	goto	i1l6355
 14757                           
 14758                           ;bldc.c: 1866: {;bldc.c: 1868: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 14759  0A73  0022               	movlb	2	; select bank2
 14760  0A74  080E               	movf	14,w	;volatile
 14761  0A75  39E5               	andlw	229
 14762  0A76  3812               	iorlw	18
 14763  0A77  008E               	movwf	14	;volatile
 14764  0A78                     i1l6355:	
 14765                           
 14766                           ;bldc.c: 1870: };bldc.c: 1874: LATB2 = 1;
 14767  0A78  0022               	movlb	2	; select bank2
 14768  0A79  150D               	bsf	13,2	;volatile
 14769                           
 14770                           ;bldc.c: 1875: LATB1 = 0;
 14771  0A7A  108D               	bcf	13,1	;volatile
 14772                           
 14773                           ;bldc.c: 1876: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 14774  0A7B  3009               	movlw	9
 14775  0A7C  00F0               	movwf	??i1_commutate
 14776  0A7D  0870               	movf	??i1_commutate,w
 14777  0A7E  0021               	movlb	1	; select bank1
 14778  0A7F  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14779                           
 14780                           ;bldc.c: 1877: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 14781  0A80  01DB               	clrf	_ui8_UPhase_sel^(0+128)
 14782  0A81  0ADB               	incf	_ui8_UPhase_sel^(0+128),f
 14783                           
 14784                           ;bldc.c: 1878: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 14785  0A82  3005               	movlw	5
 14786  0A83  00F0               	movwf	??i1_commutate
 14787  0A84  0870               	movf	??i1_commutate,w
 14788  0A85  00DA               	movwf	_ui8_Ubemf_sel^(0+128)
 14789                           
 14790                           ;bldc.c: 1879: CM1CON1 = 0x01;
 14791  0A86  3001               	movlw	1
 14792  0A87  0022               	movlb	2	; select bank2
 14793  0A88  0092               	movwf	18	;volatile
 14794                           
 14795                           ;bldc.c: 1893: CM1CON0 = 0x94;
 14796  0A89  3094               	movlw	148
 14797  0A8A  0091               	movwf	17	;volatile
 14798  0A8B  2B1E               	goto	L75
 14799  0A8C                     i1l6373:	
 14800                           ;bldc.c: 1907: };bldc.c: 1910: case 3:
 14801                           
 14802                           ;bldc.c: 1903: break;
 14803                           
 14804                           ;bldc.c: 1895: comm_state = 1;
 14805                           
 14806                           ;bldc.c: 1894: rising_bemf_flag = 0;
 14807                           
 14808                           
 14809                           ;bldc.c: 1913: {;bldc.c: 1918: PSTR1CON = 0b00000010;
 14810  0A8C  3002               	movlw	2
 14811  0A8D  0025               	movlb	5	; select bank5
 14812  0A8E  0096               	movwf	22	;volatile
 14813                           
 14814                           ;bldc.c: 1921: if( MotorFlags.bits.B6 )
 14815  0A8F  0020               	movlb	0	; select bank0
 14816  0A90  1F5A               	btfss	_MotorFlags,6
 14817  0A91  2A97               	goto	i1l6379
 14818                           
 14819                           ;bldc.c: 1923: {;bldc.c: 1925: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 14820  0A92  0022               	movlb	2	; select bank2
 14821  0A93  080E               	movf	14,w	;volatile
 14822  0A94  39E5               	andlw	229
 14823  0A95  3818               	iorlw	24
 14824  0A96  008E               	movwf	14	;volatile
 14825  0A97                     i1l6379:	
 14826                           
 14827                           ;bldc.c: 1927: };bldc.c: 1930: LATC2 = 0;
 14828  0A97  0022               	movlb	2	; select bank2
 14829  0A98  110E               	bcf	14,2	;volatile
 14830                           
 14831                           ;bldc.c: 1932: LATB1 = 0;
 14832  0A99  108D               	bcf	13,1	;volatile
 14833                           
 14834                           ;bldc.c: 1933: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 14835  0A9A  3035               	movlw	53
 14836  0A9B  00F0               	movwf	??i1_commutate
 14837  0A9C  0870               	movf	??i1_commutate,w
 14838  0A9D  0021               	movlb	1	; select bank1
 14839  0A9E  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14840                           
 14841                           ;bldc.c: 1934: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 14842  0A9F  3005               	movlw	5
 14843  0AA0  00F0               	movwf	??i1_commutate
 14844  0AA1  0870               	movf	??i1_commutate,w
 14845  0AA2  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14846                           
 14847                           ;bldc.c: 1935: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 14848  0AA3  01DA               	clrf	_ui8_Ubemf_sel^(0+128)
 14849  0AA4  0ADA               	incf	_ui8_Ubemf_sel^(0+128),f
 14850                           
 14851                           ;bldc.c: 1936: CM1CON1 = 0x00;
 14852  0AA5  0022               	movlb	2	; select bank2
 14853  0AA6  0192               	clrf	18	;volatile
 14854                           
 14855                           ;bldc.c: 1950: CM1CON0 = 0x84;
 14856  0AA7  3084               	movlw	132
 14857  0AA8  0091               	movwf	17	;volatile
 14858                           
 14859                           ;bldc.c: 1951: rising_bemf_flag = 1;
 14860  0AA9  0020               	movlb	0	; select bank0
 14861  0AAA  145E               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14862                           
 14863                           ;bldc.c: 1952: comm_state = 2;
 14864  0AAB  3002               	movlw	2
 14865  0AAC  2B15               	goto	L74
 14866  0AAD                     i1l6393:	
 14867                           ;bldc.c: 1961: };bldc.c: 1964: case 4:
 14868                           
 14869                           ;bldc.c: 1957: break;
 14870                           
 14871                           
 14872                           ;bldc.c: 1967: {;bldc.c: 1973: PSTR1CON = 0b00000010;
 14873  0AAD  3002               	movlw	2
 14874  0AAE  0025               	movlb	5	; select bank5
 14875  0AAF  0096               	movwf	22	;volatile
 14876                           
 14877                           ;bldc.c: 1976: if( MotorFlags.bits.B6 )
 14878  0AB0  0020               	movlb	0	; select bank0
 14879  0AB1  1F5A               	btfss	_MotorFlags,6
 14880  0AB2  2AB8               	goto	i1l6399
 14881                           
 14882                           ;bldc.c: 1978: {;bldc.c: 1980: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 14883  0AB3  0022               	movlb	2	; select bank2
 14884  0AB4  080E               	movf	14,w	;volatile
 14885  0AB5  39E5               	andlw	229
 14886  0AB6  380A               	iorlw	10
 14887  0AB7  008E               	movwf	14	;volatile
 14888  0AB8                     i1l6399:	
 14889                           
 14890                           ;bldc.c: 1982: };bldc.c: 1985: LATC2 = 0;
 14891  0AB8  0022               	movlb	2	; select bank2
 14892  0AB9  110E               	bcf	14,2	;volatile
 14893                           
 14894                           ;bldc.c: 1987: LATB1 = 1;
 14895  0ABA  148D               	bsf	13,1	;volatile
 14896                           
 14897                           ;bldc.c: 1988: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 14898  0ABB  3035               	movlw	53
 14899  0ABC  00F0               	movwf	??i1_commutate
 14900  0ABD  0870               	movf	??i1_commutate,w
 14901  0ABE  0021               	movlb	1	; select bank1
 14902  0ABF  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14903                           
 14904                           ;bldc.c: 1989: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 14905  0AC0  3005               	movlw	5
 14906  0AC1  00F0               	movwf	??i1_commutate
 14907  0AC2  0870               	movf	??i1_commutate,w
 14908  0AC3  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14909                           
 14910                           ;bldc.c: 1990: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 14911  0AC4  3025               	movlw	37
 14912  0AC5  00F0               	movwf	??i1_commutate
 14913  0AC6  0870               	movf	??i1_commutate,w
 14914  0AC7  00DA               	movwf	_ui8_Ubemf_sel^(0+128)
 14915                           
 14916                           ;bldc.c: 1991: CM1CON1 = 0x02;
 14917  0AC8  3002               	movlw	2
 14918  0AC9  0022               	movlb	2	; select bank2
 14919  0ACA  0092               	movwf	18	;volatile
 14920                           
 14921                           ;bldc.c: 2005: CM1CON0 = 0x94;
 14922  0ACB  3094               	movlw	148
 14923  0ACC  0091               	movwf	17	;volatile
 14924                           
 14925                           ;bldc.c: 2006: rising_bemf_flag = 0;
 14926  0ACD  0020               	movlb	0	; select bank0
 14927  0ACE  105E               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14928                           
 14929                           ;bldc.c: 2007: comm_state = 3;
 14930  0ACF  3003               	movlw	3
 14931  0AD0  2B15               	goto	L74
 14932  0AD1                     i1l6417:	
 14933                           ;bldc.c: 2015: };bldc.c: 2018: case 5:
 14934                           
 14935                           ;bldc.c: 2012: break;
 14936                           
 14937                           
 14938                           ;bldc.c: 2021: {;bldc.c: 2027: PSTR1CON = 0b00000100;
 14939  0AD1  3004               	movlw	4
 14940  0AD2  0025               	movlb	5	; select bank5
 14941  0AD3  0096               	movwf	22	;volatile
 14942                           
 14943                           ;bldc.c: 2030: if( MotorFlags.bits.B6 )
 14944  0AD4  0020               	movlb	0	; select bank0
 14945  0AD5  1F5A               	btfss	_MotorFlags,6
 14946  0AD6  2ADC               	goto	i1l6423
 14947                           
 14948                           ;bldc.c: 2032: {;bldc.c: 2034: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 14949  0AD7  0022               	movlb	2	; select bank2
 14950  0AD8  080E               	movf	14,w	;volatile
 14951  0AD9  39E5               	andlw	229
 14952  0ADA  3812               	iorlw	18
 14953  0ADB  008E               	movwf	14	;volatile
 14954  0ADC                     i1l6423:	
 14955                           
 14956                           ;bldc.c: 2036: };bldc.c: 2039: LATC2 = 0;
 14957  0ADC  0022               	movlb	2	; select bank2
 14958  0ADD  110E               	bcf	14,2	;volatile
 14959                           
 14960                           ;bldc.c: 2040: LATB2 = 0;
 14961  0ADE  110D               	bcf	13,2	;volatile
 14962                           
 14963                           ;bldc.c: 2042: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 14964  0ADF  3011               	movlw	17
 14965  0AE0  00F0               	movwf	??i1_commutate
 14966  0AE1  0870               	movf	??i1_commutate,w
 14967  0AE2  0021               	movlb	1	; select bank1
 14968  0AE3  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 14969                           
 14970                           ;bldc.c: 2043: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 14971  0AE4  3025               	movlw	37
 14972  0AE5  00F0               	movwf	??i1_commutate
 14973  0AE6  0870               	movf	??i1_commutate,w
 14974  0AE7  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 14975                           
 14976                           ;bldc.c: 2044: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 14977  0AE8  3005               	movlw	5
 14978  0AE9  00F0               	movwf	??i1_commutate
 14979  0AEA  0870               	movf	??i1_commutate,w
 14980  0AEB  00DA               	movwf	_ui8_Ubemf_sel^(0+128)
 14981                           
 14982                           ;bldc.c: 2045: CM1CON1 = 0x01;
 14983  0AEC  3001               	movlw	1
 14984  0AED  0022               	movlb	2	; select bank2
 14985  0AEE  0092               	movwf	18	;volatile
 14986                           
 14987                           ;bldc.c: 2060: CM1CON0 = 0x84;
 14988  0AEF  3084               	movlw	132
 14989  0AF0  0091               	movwf	17	;volatile
 14990                           
 14991                           ;bldc.c: 2061: rising_bemf_flag = 1;
 14992  0AF1  0020               	movlb	0	; select bank0
 14993  0AF2  145E               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 14994                           
 14995                           ;bldc.c: 2062: comm_state = 4;
 14996  0AF3  3004               	movlw	4
 14997  0AF4  2B15               	goto	L74
 14998  0AF5                     i1l6441:	
 14999                           ;bldc.c: 2071: };bldc.c: 2074: case 6:
 15000                           
 15001                           ;bldc.c: 2067: break;
 15002                           
 15003                           
 15004                           ;bldc.c: 2077: {;bldc.c: 2082: PSTR1CON = 0b00000100;
 15005  0AF5  3004               	movlw	4
 15006  0AF6  0025               	movlb	5	; select bank5
 15007  0AF7  0096               	movwf	22	;volatile
 15008                           
 15009                           ;bldc.c: 2085: if( MotorFlags.bits.B6 )
 15010  0AF8  0020               	movlb	0	; select bank0
 15011  0AF9  1F5A               	btfss	_MotorFlags,6
 15012  0AFA  2B00               	goto	i1l6447
 15013                           
 15014                           ;bldc.c: 2087: {;bldc.c: 2089: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 15015  0AFB  0022               	movlb	2	; select bank2
 15016  0AFC  080E               	movf	14,w	;volatile
 15017  0AFD  39E5               	andlw	229
 15018  0AFE  3818               	iorlw	24
 15019  0AFF  008E               	movwf	14	;volatile
 15020  0B00                     i1l6447:	
 15021                           
 15022                           ;bldc.c: 2091: };bldc.c: 2094: LATC2 = 1;
 15023  0B00  0022               	movlb	2	; select bank2
 15024  0B01  150E               	bsf	14,2	;volatile
 15025                           
 15026                           ;bldc.c: 2095: LATB2 = 0;
 15027  0B02  110D               	bcf	13,2	;volatile
 15028                           
 15029                           ;bldc.c: 2097: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 15030  0B03  3011               	movlw	17
 15031  0B04  00F0               	movwf	??i1_commutate
 15032  0B05  0870               	movf	??i1_commutate,w
 15033  0B06  0021               	movlb	1	; select bank1
 15034  0B07  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15035                           
 15036                           ;bldc.c: 2098: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 15037  0B08  3025               	movlw	37
 15038  0B09  00F0               	movwf	??i1_commutate
 15039  0B0A  0870               	movf	??i1_commutate,w
 15040  0B0B  00DB               	movwf	_ui8_UPhase_sel^(0+128)
 15041                           
 15042                           ;bldc.c: 2099: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 15043  0B0C  01DA               	clrf	_ui8_Ubemf_sel^(0+128)
 15044  0B0D  0ADA               	incf	_ui8_Ubemf_sel^(0+128),f
 15045                           
 15046                           ;bldc.c: 2100: CM1CON1 = 0x00;
 15047  0B0E  0022               	movlb	2	; select bank2
 15048  0B0F  0192               	clrf	18	;volatile
 15049                           
 15050                           ;bldc.c: 2114: CM1CON0 = 0x94;
 15051  0B10  3094               	movlw	148
 15052  0B11  0091               	movwf	17	;volatile
 15053                           
 15054                           ;bldc.c: 2115: rising_bemf_flag = 0;
 15055  0B12  0020               	movlb	0	; select bank0
 15056  0B13  105E               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15057                           
 15058                           ;bldc.c: 2116: comm_state = 5;
 15059  0B14  3005               	movlw	5
 15060  0B15                     L74:	
 15061  0B15  00F0               	movwf	??i1_commutate
 15062  0B16  0870               	movf	??i1_commutate,w
 15063  0B17  0021               	movlb	1	; select bank1
 15064  0B18  00DE               	movwf	_comm_state^(0+128)
 15065                           
 15066                           ;bldc.c: 2121: break;
 15067  0B19  2B38               	goto	i1l354
 15068  0B1A                     i1l6461:	
 15069                           ;bldc.c: 2125: };bldc.c: 2129: default:
 15070                           
 15071                           
 15072                           ;bldc.c: 2130: {;bldc.c: 2132: PSTR1CON = 0x00;
 15073  0B1A  0025               	movlb	5	; select bank5
 15074  0B1B  0196               	clrf	22	;volatile
 15075                           
 15076                           ;bldc.c: 2133: CM1CON0 = 0x00;
 15077  0B1C  0022               	movlb	2	; select bank2
 15078  0B1D  0191               	clrf	17	;volatile
 15079  0B1E                     L75:	
 15080                           
 15081                           ;bldc.c: 2134: rising_bemf_flag = 0;
 15082  0B1E  0020               	movlb	0	; select bank0
 15083  0B1F  105E               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15084                           
 15085                           ;bldc.c: 2135: comm_state = 1;
 15086  0B20  0021               	movlb	1	; select bank1
 15087  0B21  01DE               	clrf	_comm_state^(0+128)
 15088  0B22  0ADE               	incf	_comm_state^(0+128),f
 15089                           
 15090                           ;bldc.c: 2139: };bldc.c: 2141: }
 15091                           
 15092                           ;bldc.c: 2136: break;
 15093  0B23  2B38               	goto	i1l354
 15094  0B24                     i1l6469:	
 15095  0B24  085E               	movf	_comm_state^(0+128),w
 15096                           
 15097                           ; Switch size 1, requested type "space"
 15098                           ; Number of cases is 6, Range of values is 1 to 6
 15099                           ; switch strategies available:
 15100                           ; Name         Instructions Cycles
 15101                           ; simple_byte           19    10 (average)
 15102                           ; direct_byte           21     9 (fixed)
 15103                           ; jumptable            263     9 (fixed)
 15104                           ;	Chosen strategy is simple_byte
 15105  0B25  3A01               	xorlw	1	; case 1
 15106  0B26  1903               	skipnz
 15107  0B27  2A4B               	goto	i1l6325
 15108  0B28  3A03               	xorlw	3	; case 2
 15109  0B29  1903               	skipnz
 15110  0B2A  2A6D               	goto	i1l6349
 15111  0B2B  3A01               	xorlw	1	; case 3
 15112  0B2C  1903               	skipnz
 15113  0B2D  2A8C               	goto	i1l6373
 15114  0B2E  3A07               	xorlw	7	; case 4
 15115  0B2F  1903               	skipnz
 15116  0B30  2AAD               	goto	i1l6393
 15117  0B31  3A01               	xorlw	1	; case 5
 15118  0B32  1903               	skipnz
 15119  0B33  2AD1               	goto	i1l6417
 15120  0B34  3A03               	xorlw	3	; case 6
 15121  0B35  1903               	skipnz
 15122  0B36  2AF5               	goto	i1l6441
 15123  0B37  2B1A               	goto	i1l6461
 15124  0B38                     i1l354:	
 15125                           
 15126                           ;bldc.c: 2145: if( rising_bemf_flag )
 15127  0B38  0020               	movlb	0	; select bank0
 15128  0B39  1C5E               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15129  0B3A  2B3B               	goto	i1l6473
 15130  0B3B                     i1l6473:	
 15131                           ;bldc.c: 2151: }
 15132                           
 15133                           ;bldc.c: 2147: {;bldc.c: 2149: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
 15134                           
 15135                           
 15136                           ;bldc.c: 2154: else;bldc.c: 2155: {;bldc.c: 2157: ui8_BlankingCount = ( unsigned char ) 
      +                          ( 0.002 * 20000UL );
 15137  0B3B  3028               	movlw	40
 15138  0B3C  00F0               	movwf	??i1_commutate
 15139  0B3D  0870               	movf	??i1_commutate,w
 15140  0B3E  0021               	movlb	1	; select bank1
 15141  0B3F  00DD               	movwf	_ui8_BlankingCount^(0+128)
 15142                           
 15143                           ;bldc.c: 2159: };bldc.c: 2162: comm_time = 0;
 15144  0B40  0020               	movlb	0	; select bank0
 15145  0B41  01D3               	clrf	_comm_time
 15146  0B42  01D4               	clrf	_comm_time+1
 15147  0B43  0008               	return
 15148  0B44                     __end_ofi1_commutate:	
 15149                           
 15150                           	psect	swtext4
 15151  1854                     __pswtext4:	
 15152  1854                     i1S11819:	
 15153  1854  3189  29C8         	ljmp	i1l6273
 15154  1856  3189  29CA         	ljmp	i1l6275
 15155  1858  3189  29CF         	ljmp	i1l6277
 15156  185A  3189  29D1         	ljmp	i1l6279
 15157  185C  3189  29D3         	ljmp	i1l6281
 15158  185E  3189  29D5         	ljmp	i1l6283
 15159  1860  3189  29D5         	ljmp	i1l6285
 15160  1862  3189  29D5         	ljmp	i1l6287
 15161  1864  3189  29D5         	ljmp	i1l6289
 15162  1866  3189  29D5         	ljmp	i1l6291
 15163                           
 15164                           	psect	text41
 15165  1E1B                     __ptext41:	
 15166 ;; *************** function i1___wmul *****************
 15167 ;; Defined at:
 15168 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
 15169 ;; Parameters:    Size  Location     Type
 15170 ;;  multiplier      2    0[COMMON] unsigned int 
 15171 ;;  multiplicand    2    2[COMMON] unsigned int 
 15172 ;; Auto vars:     Size  Location     Type
 15173 ;;  __wmul          2    4[COMMON] unsigned int 
 15174 ;; Return value:  Size  Location     Type
 15175 ;;                  2    0[COMMON] unsigned int 
 15176 ;; Registers used:
 15177 ;;		wreg, status,2, status,0
 15178 ;; Tracked objects:
 15179 ;;		On entry : 0/0
 15180 ;;		On exit  : 0/0
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15183 ;;      Params:         4       0       0       0       0       0       0       0
 15184 ;;      Locals:         2       0       0       0       0       0       0       0
 15185 ;;      Temps:          0       0       0       0       0       0       0       0
 15186 ;;      Totals:         6       0       0       0       0       0       0       0
 15187 ;;Total ram usage:        6 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; This function calls:
 15190 ;;		Nothing
 15191 ;; This function is called by:
 15192 ;;		_interrrupt_bldc
 15193 ;; This function uses a non-reentrant model
 15194 ;;
 15195                           
 15196                           
 15197                           ;psect for function i1___wmul
 15198  1E1B                     i1___wmul:	
 15199                           
 15200                           ;incstack = 0
 15201                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 15202  1E1B  01F4               	clrf	i1___wmul@product
 15203  1E1C  01F5               	clrf	i1___wmul@product+1
 15204  1E1D                     i1l10697:	
 15205  1E1D  1C70               	btfss	i1___wmul@multiplier,0
 15206  1E1E  2E23               	goto	i1l1865
 15207  1E1F  0872               	movf	i1___wmul@multiplicand,w
 15208  1E20  07F4               	addwf	i1___wmul@product,f
 15209  1E21  0873               	movf	i1___wmul@multiplicand+1,w
 15210  1E22  3DF5               	addwfc	i1___wmul@product+1,f
 15211  1E23                     i1l1865:	
 15212  1E23  3001               	movlw	1
 15213  1E24                     u933_25:	
 15214  1E24  35F2               	lslf	i1___wmul@multiplicand,f
 15215  1E25  0DF3               	rlf	i1___wmul@multiplicand+1,f
 15216  1E26  0B89               	decfsz	9,f
 15217  1E27  2E24               	goto	u933_25
 15218  1E28  3001               	movlw	1
 15219  1E29                     u934_25:	
 15220  1E29  36F1               	lsrf	i1___wmul@multiplier+1,f
 15221  1E2A  0CF0               	rrf	i1___wmul@multiplier,f
 15222  1E2B  0B89               	decfsz	9,f
 15223  1E2C  2E29               	goto	u934_25
 15224  1E2D  0870               	movf	i1___wmul@multiplier,w
 15225  1E2E  0471               	iorwf	i1___wmul@multiplier+1,w
 15226  1E2F  1D03               	btfss	3,2
 15227  1E30  2E1D               	goto	i1l10697
 15228  1E31  0875               	movf	i1___wmul@product+1,w
 15229  1E32  00F1               	movwf	?i1___wmul+1
 15230  1E33  0874               	movf	i1___wmul@product,w
 15231  1E34  00F0               	movwf	?i1___wmul
 15232  1E35  0008               	return
 15233  1E36                     __end_ofi1___wmul:	
 15234                           
 15235                           	psect	text42
 15236  1DCF                     __ptext42:	
 15237 ;; *************** function i1_ADC_Wait *****************
 15238 ;; Defined at:
 15239 ;;		line 128 in file "../adc.c"
 15240 ;; Parameters:    Size  Location     Type
 15241 ;;		None
 15242 ;; Auto vars:     Size  Location     Type
 15243 ;;		None
 15244 ;; Return value:  Size  Location     Type
 15245 ;;                  1    wreg      void 
 15246 ;; Registers used:
 15247 ;;		None
 15248 ;; Tracked objects:
 15249 ;;		On entry : 0/0
 15250 ;;		On exit  : 0/0
 15251 ;;		Unchanged: 0/0
 15252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15253 ;;      Params:         0       0       0       0       0       0       0       0
 15254 ;;      Locals:         0       0       0       0       0       0       0       0
 15255 ;;      Temps:          0       0       0       0       0       0       0       0
 15256 ;;      Totals:         0       0       0       0       0       0       0       0
 15257 ;;Total ram usage:        0 bytes
 15258 ;; Hardware stack levels used:    1
 15259 ;; This function calls:
 15260 ;;		Nothing
 15261 ;; This function is called by:
 15262 ;;		_interrrupt_bldc
 15263 ;; This function uses a non-reentrant model
 15264 ;;
 15265                           
 15266                           
 15267                           ;psect for function i1_ADC_Wait
 15268  1DCF                     i1_ADC_Wait:	
 15269                           
 15270                           ;adc.c: 133: __nop();
 15271                           
 15272                           ;incstack = 0
 15273                           ; Regs used in i1_ADC_Wait: []
 15274  1DCF  0000               	nop
 15275                           
 15276                           ;adc.c: 134: __nop();
 15277  1DD0  0000               	nop
 15278                           
 15279                           ;adc.c: 135: __nop();
 15280  1DD1  0000               	nop
 15281                           
 15282                           ;adc.c: 136: __nop();
 15283  1DD2  0000               	nop
 15284                           
 15285                           ;adc.c: 137: __nop();
 15286  1DD3  0000               	nop
 15287                           
 15288                           ;adc.c: 138: __nop();
 15289  1DD4  0000               	nop
 15290                           
 15291                           ;adc.c: 139: __nop();
 15292  1DD5  0000               	nop
 15293                           
 15294                           ;adc.c: 140: __nop();
 15295  1DD6  0000               	nop
 15296                           
 15297                           ;adc.c: 142: __nop();
 15298  1DD7  0000               	nop
 15299                           
 15300                           ;adc.c: 143: __nop();
 15301  1DD8  0000               	nop
 15302                           
 15303                           ;adc.c: 144: __nop();
 15304  1DD9  0000               	nop
 15305                           
 15306                           ;adc.c: 145: __nop();
 15307  1DDA  0000               	nop
 15308                           
 15309                           ;adc.c: 146: __nop();
 15310  1DDB  0000               	nop
 15311                           
 15312                           ;adc.c: 147: __nop();
 15313  1DDC  0000               	nop
 15314                           
 15315                           ;adc.c: 148: __nop();
 15316  1DDD  0000               	nop
 15317                           
 15318                           ;adc.c: 149: __nop();
 15319  1DDE  0000               	nop
 15320                           
 15321                           ;adc.c: 151: __nop();
 15322  1DDF  0000               	nop
 15323                           
 15324                           ;adc.c: 152: __nop();
 15325  1DE0  0000               	nop
 15326                           
 15327                           ;adc.c: 153: __nop();
 15328  1DE1  0000               	nop
 15329                           
 15330                           ;adc.c: 154: __nop();
 15331  1DE2  0000               	nop
 15332                           
 15333                           ;adc.c: 155: __nop();
 15334  1DE3  0000               	nop
 15335                           
 15336                           ;adc.c: 156: __nop();
 15337  1DE4  0000               	nop
 15338                           
 15339                           ;adc.c: 157: __nop();
 15340  1DE5  0000               	nop
 15341                           
 15342                           ;adc.c: 158: __nop();
 15343  1DE6  0000               	nop
 15344  1DE7  0008               	return
 15345  1DE8                     __end_ofi1_ADC_Wait:	
 15346                           
 15347                           	psect	text43
 15348  1E01                     __ptext43:	
 15349 ;; *************** function i1_ADC_Read *****************
 15350 ;; Defined at:
 15351 ;;		line 175 in file "../adc.c"
 15352 ;; Parameters:    Size  Location     Type
 15353 ;;		None
 15354 ;; Auto vars:     Size  Location     Type
 15355 ;;  ADC_Read        1    3[COMMON] unsigned char 
 15356 ;; Return value:  Size  Location     Type
 15357 ;;                  2    0[COMMON] unsigned int 
 15358 ;; Registers used:
 15359 ;;		wreg, status,2, status,0
 15360 ;; Tracked objects:
 15361 ;;		On entry : 0/0
 15362 ;;		On exit  : 0/0
 15363 ;;		Unchanged: 0/0
 15364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15365 ;;      Params:         2       0       0       0       0       0       0       0
 15366 ;;      Locals:         1       0       0       0       0       0       0       0
 15367 ;;      Temps:          1       0       0       0       0       0       0       0
 15368 ;;      Totals:         4       0       0       0       0       0       0       0
 15369 ;;Total ram usage:        4 bytes
 15370 ;; Hardware stack levels used:    1
 15371 ;; This function calls:
 15372 ;;		Nothing
 15373 ;; This function is called by:
 15374 ;;		_interrrupt_bldc
 15375 ;; This function uses a non-reentrant model
 15376 ;;
 15377                           
 15378                           
 15379                           ;psect for function i1_ADC_Read
 15380  1E01                     i1_ADC_Read:	
 15381                           
 15382                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
 15383                           
 15384                           ;incstack = 0
 15385                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
 15386  1E01  01F3               	clrf	i1ADC_Read@i
 15387  1E02                     i1l69:	
 15388                           ;adc.c: 182: while( GO_nDONE )
 15389                           
 15390  1E02  0021               	movlb	1	; select bank1
 15391  1E03  1C9D               	btfss	29,1	;volatile
 15392  1E04  2E0D               	goto	i1l6235
 15393                           
 15394                           ;adc.c: 184: {;adc.c: 186: i++;
 15395  1E05  3001               	movlw	1
 15396  1E06  00F2               	movwf	??i1_ADC_Read
 15397  1E07  0872               	movf	??i1_ADC_Read,w
 15398  1E08  07F3               	addwf	i1ADC_Read@i,f
 15399                           
 15400                           ;adc.c: 189: if( i > 64 )
 15401  1E09  3041               	movlw	65
 15402  1E0A  0273               	subwf	i1ADC_Read@i,w
 15403  1E0B  1C03               	skipc
 15404  1E0C  2E02               	goto	i1l69
 15405  1E0D                     i1l6235:	
 15406                           ;adc.c: 191: {;adc.c: 193: break;
 15407                           
 15408                           
 15409                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
 15410  1E0D  0021               	movlb	1	; select bank1
 15411  1E0E  081C               	movf	28,w	;volatile
 15412  1E0F  00F2               	movwf	??i1_ADC_Read
 15413  1E10  0872               	movf	??i1_ADC_Read,w
 15414  1E11  00BD               	movwf	(_analog_value^(0+128)+1)	;volatile
 15415                           
 15416                           ;adc.c: 202: analog_value.b.lo = ADRESL;
 15417  1E12  081B               	movf	27,w	;volatile
 15418  1E13  00F2               	movwf	??i1_ADC_Read
 15419  1E14  0872               	movf	??i1_ADC_Read,w
 15420  1E15  00BC               	movwf	_analog_value^(0+128)	;volatile
 15421                           
 15422                           ;adc.c: 204: return analog_value.w;
 15423  1E16  083D               	movf	(_analog_value+1)^(0+128),w	;volatile
 15424  1E17  00F1               	movwf	?i1_ADC_Read+1
 15425  1E18  083C               	movf	_analog_value^(0+128),w	;volatile
 15426  1E19  00F0               	movwf	?i1_ADC_Read
 15427  1E1A  0008               	return
 15428  1E1B                     __end_ofi1_ADC_Read:	
 15429                           
 15430                           	psect	text44
 15431  11A9                     __ptext44:	
 15432 ;; *************** function ___lwdiv *****************
 15433 ;; Defined at:
 15434 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
 15435 ;; Parameters:    Size  Location     Type
 15436 ;;  divisor         2    0[COMMON] unsigned int 
 15437 ;;  dividend        2    2[COMMON] unsigned int 
 15438 ;; Auto vars:     Size  Location     Type
 15439 ;;  quotient        2    5[COMMON] unsigned int 
 15440 ;;  counter         1    7[COMMON] unsigned char 
 15441 ;; Return value:  Size  Location     Type
 15442 ;;                  2    0[COMMON] unsigned int 
 15443 ;; Registers used:
 15444 ;;		wreg, status,2, status,0
 15445 ;; Tracked objects:
 15446 ;;		On entry : 0/0
 15447 ;;		On exit  : 0/0
 15448 ;;		Unchanged: 0/0
 15449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15450 ;;      Params:         4       0       0       0       0       0       0       0
 15451 ;;      Locals:         3       0       0       0       0       0       0       0
 15452 ;;      Temps:          1       0       0       0       0       0       0       0
 15453 ;;      Totals:         8       0       0       0       0       0       0       0
 15454 ;;Total ram usage:        8 bytes
 15455 ;; Hardware stack levels used:    1
 15456 ;; This function calls:
 15457 ;;		Nothing
 15458 ;; This function is called by:
 15459 ;;		_EOL
 15460 ;;		_interrrupt_bldc
 15461 ;; This function uses a non-reentrant model
 15462 ;;
 15463                           
 15464                           
 15465                           ;psect for function ___lwdiv
 15466  11A9                     ___lwdiv:	
 15467                           
 15468                           ;incstack = 0
 15469                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 15470  11A9  01F5               	clrf	___lwdiv@quotient
 15471  11AA  01F6               	clrf	___lwdiv@quotient+1
 15472  11AB  0870               	movf	___lwdiv@divisor,w
 15473  11AC  0471               	iorwf	___lwdiv@divisor+1,w
 15474  11AD  1903               	btfsc	3,2
 15475  11AE  29D8               	goto	i1l8801
 15476  11AF  01F7               	clrf	___lwdiv@counter
 15477  11B0  0AF7               	incf	___lwdiv@counter,f
 15478  11B1                     i1l8789:	
 15479  11B1  1BF1               	btfsc	___lwdiv@divisor+1,7
 15480  11B2  29BD               	goto	i1l8791
 15481  11B3  3001               	movlw	1
 15482  11B4                     u673_25:	
 15483  11B4  35F0               	lslf	___lwdiv@divisor,f
 15484  11B5  0DF1               	rlf	___lwdiv@divisor+1,f
 15485  11B6  0B89               	decfsz	9,f
 15486  11B7  29B4               	goto	u673_25
 15487  11B8  3001               	movlw	1
 15488  11B9  00F4               	movwf	??___lwdiv
 15489  11BA  0874               	movf	??___lwdiv,w
 15490  11BB  07F7               	addwf	___lwdiv@counter,f
 15491  11BC  29B1               	goto	i1l8789
 15492  11BD                     i1l8791:	
 15493  11BD  3001               	movlw	1
 15494  11BE                     u675_25:	
 15495  11BE  35F5               	lslf	___lwdiv@quotient,f
 15496  11BF  0DF6               	rlf	___lwdiv@quotient+1,f
 15497  11C0  0B89               	decfsz	9,f
 15498  11C1  29BE               	goto	u675_25
 15499  11C2  0871               	movf	___lwdiv@divisor+1,w
 15500  11C3  0273               	subwf	___lwdiv@dividend+1,w
 15501  11C4  1D03               	skipz
 15502  11C5  29C8               	goto	u676_25
 15503  11C6  0870               	movf	___lwdiv@divisor,w
 15504  11C7  0272               	subwf	___lwdiv@dividend,w
 15505  11C8                     u676_25:	
 15506  11C8  1C03               	skipc
 15507  11C9  29CF               	goto	i1l8797
 15508  11CA  0870               	movf	___lwdiv@divisor,w
 15509  11CB  02F2               	subwf	___lwdiv@dividend,f
 15510  11CC  0871               	movf	___lwdiv@divisor+1,w
 15511  11CD  3BF3               	subwfb	___lwdiv@dividend+1,f
 15512  11CE  1475               	bsf	___lwdiv@quotient,0
 15513  11CF                     i1l8797:	
 15514  11CF  3001               	movlw	1
 15515  11D0                     u677_25:	
 15516  11D0  36F1               	lsrf	___lwdiv@divisor+1,f
 15517  11D1  0CF0               	rrf	___lwdiv@divisor,f
 15518  11D2  0B89               	decfsz	9,f
 15519  11D3  29D0               	goto	u677_25
 15520  11D4  3001               	movlw	1
 15521  11D5  02F7               	subwf	___lwdiv@counter,f
 15522  11D6  1D03               	btfss	3,2
 15523  11D7  29BD               	goto	i1l8791
 15524  11D8                     i1l8801:	
 15525  11D8  0876               	movf	___lwdiv@quotient+1,w
 15526  11D9  00F1               	movwf	?___lwdiv+1
 15527  11DA  0875               	movf	___lwdiv@quotient,w
 15528  11DB  00F0               	movwf	?___lwdiv
 15529  11DC  0008               	return
 15530  11DD                     __end_of___lwdiv:	
 15531                           
 15532                           	psect	text45
 15533  1E52                     __ptext45:	
 15534 ;; *************** function _BLDCWait *****************
 15535 ;; Defined at:
 15536 ;;		line 156 in file "../bldc.c"
 15537 ;; Parameters:    Size  Location     Type
 15538 ;;		None
 15539 ;; Auto vars:     Size  Location     Type
 15540 ;;		None
 15541 ;; Return value:  Size  Location     Type
 15542 ;;                  1    wreg      void 
 15543 ;; Registers used:
 15544 ;;		None
 15545 ;; Tracked objects:
 15546 ;;		On entry : 0/0
 15547 ;;		On exit  : 0/0
 15548 ;;		Unchanged: 0/0
 15549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15550 ;;      Params:         0       0       0       0       0       0       0       0
 15551 ;;      Locals:         0       0       0       0       0       0       0       0
 15552 ;;      Temps:          0       0       0       0       0       0       0       0
 15553 ;;      Totals:         0       0       0       0       0       0       0       0
 15554 ;;Total ram usage:        0 bytes
 15555 ;; Hardware stack levels used:    1
 15556 ;; This function calls:
 15557 ;;		Nothing
 15558 ;; This function is called by:
 15559 ;;		_interrrupt_bldc
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           
 15564                           ;psect for function _BLDCWait
 15565  1E52                     _BLDCWait:	
 15566                           
 15567                           ;bldc.c: 161: __nop();
 15568                           
 15569                           ;incstack = 0
 15570                           ; Regs used in _BLDCWait: []
 15571  1E52  0000               	nop
 15572                           
 15573                           ;bldc.c: 162: __nop();
 15574  1E53  0000               	nop
 15575                           
 15576                           ;bldc.c: 163: __nop();
 15577  1E54  0000               	nop
 15578                           
 15579                           ;bldc.c: 164: __nop();
 15580  1E55  0000               	nop
 15581                           
 15582                           ;bldc.c: 165: __nop();
 15583  1E56  0000               	nop
 15584                           
 15585                           ;bldc.c: 166: __nop();
 15586  1E57  0000               	nop
 15587                           
 15588                           ;bldc.c: 167: __nop();
 15589  1E58  0000               	nop
 15590                           
 15591                           ;bldc.c: 168: __nop();
 15592  1E59  0000               	nop
 15593                           
 15594                           ;bldc.c: 170: __nop();
 15595  1E5A  0000               	nop
 15596                           
 15597                           ;bldc.c: 171: __nop();
 15598  1E5B  0000               	nop
 15599                           
 15600                           ;bldc.c: 172: __nop();
 15601  1E5C  0000               	nop
 15602                           
 15603                           ;bldc.c: 173: __nop();
 15604  1E5D  0000               	nop
 15605                           
 15606                           ;bldc.c: 174: __nop();
 15607  1E5E  0000               	nop
 15608                           
 15609                           ;bldc.c: 175: __nop();
 15610  1E5F  0000               	nop
 15611                           
 15612                           ;bldc.c: 176: __nop();
 15613  1E60  0000               	nop
 15614                           
 15615                           ;bldc.c: 177: __nop();
 15616  1E61  0000               	nop
 15617                           
 15618                           ;bldc.c: 179: __nop();
 15619  1E62  0000               	nop
 15620                           
 15621                           ;bldc.c: 180: __nop();
 15622  1E63  0000               	nop
 15623                           
 15624                           ;bldc.c: 181: __nop();
 15625  1E64  0000               	nop
 15626                           
 15627                           ;bldc.c: 182: __nop();
 15628  1E65  0000               	nop
 15629                           
 15630                           ;bldc.c: 183: __nop();
 15631  1E66  0000               	nop
 15632                           
 15633                           ;bldc.c: 184: __nop();
 15634  1E67  0000               	nop
 15635                           
 15636                           ;bldc.c: 185: __nop();
 15637  1E68  0000               	nop
 15638                           
 15639                           ;bldc.c: 186: __nop();
 15640  1E69  0000               	nop
 15641                           
 15642                           ;bldc.c: 188: __nop();
 15643  1E6A  0000               	nop
 15644                           
 15645                           ;bldc.c: 189: __nop();
 15646  1E6B  0000               	nop
 15647                           
 15648                           ;bldc.c: 190: __nop();
 15649  1E6C  0000               	nop
 15650                           
 15651                           ;bldc.c: 191: __nop();
 15652  1E6D  0000               	nop
 15653                           
 15654                           ;bldc.c: 192: __nop();
 15655  1E6E  0000               	nop
 15656                           
 15657                           ;bldc.c: 193: __nop();
 15658  1E6F  0000               	nop
 15659                           
 15660                           ;bldc.c: 194: __nop();
 15661  1E70  0000               	nop
 15662                           
 15663                           ;bldc.c: 195: __nop();
 15664  1E71  0000               	nop
 15665  1E72  0008               	return
 15666  1E73                     __end_of_BLDCWait:	
 15667                           
 15668                           	psect	text46
 15669  1D52                     __ptext46:	
 15670 ;; *************** function _Task1ms *****************
 15671 ;; Defined at:
 15672 ;;		line 53 in file "../interrupt.c"
 15673 ;; Parameters:    Size  Location     Type
 15674 ;;		None
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;		None
 15677 ;; Return value:  Size  Location     Type
 15678 ;;                  1    wreg      void 
 15679 ;; Registers used:
 15680 ;;		wreg, status,2, status,0
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15686 ;;      Params:         0       0       0       0       0       0       0       0
 15687 ;;      Locals:         0       0       0       0       0       0       0       0
 15688 ;;      Temps:          1       0       0       0       0       0       0       0
 15689 ;;      Totals:         1       0       0       0       0       0       0       0
 15690 ;;Total ram usage:        1 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; This function calls:
 15693 ;;		Nothing
 15694 ;; This function is called by:
 15695 ;;		_interrupt_handler
 15696 ;; This function uses a non-reentrant model
 15697 ;;
 15698                           
 15699                           
 15700                           ;psect for function _Task1ms
 15701  1D52                     _Task1ms:	
 15702                           
 15703                           ;interrupt.c: 57: ui8_Task_Cont1ms++;
 15704                           
 15705                           ;incstack = 0
 15706                           ; Regs used in _Task1ms: [wreg+status,2+status,0]
 15707  1D52  3001               	movlw	1
 15708  1D53  00F0               	movwf	??_Task1ms
 15709  1D54  0870               	movf	??_Task1ms,w
 15710  1D55  0021               	movlb	1	; select bank1
 15711  1D56  07D1               	addwf	_ui8_Task_Cont1ms^(0+128),f
 15712  1D57  0008               	return
 15713  1D58                     __end_of_Task1ms:	
 15714                           
 15715                           	psect	text47
 15716  07E8                     __ptext47:	
 15717 ;; *************** function _PWM_CTRL *****************
 15718 ;; Defined at:
 15719 ;;		line 207 in file "../pwm.c"
 15720 ;; Parameters:    Size  Location     Type
 15721 ;;		None
 15722 ;; Auto vars:     Size  Location     Type
 15723 ;;		None
 15724 ;; Return value:  Size  Location     Type
 15725 ;;                  1    wreg      void 
 15726 ;; Registers used:
 15727 ;;		wreg, status,2, status,0
 15728 ;; Tracked objects:
 15729 ;;		On entry : 0/0
 15730 ;;		On exit  : 0/0
 15731 ;;		Unchanged: 0/0
 15732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15733 ;;      Params:         0       0       0       0       0       0       0       0
 15734 ;;      Locals:         0       0       0       0       0       0       0       0
 15735 ;;      Temps:          1       0       0       0       0       0       0       0
 15736 ;;      Totals:         1       0       0       0       0       0       0       0
 15737 ;;Total ram usage:        1 bytes
 15738 ;; Hardware stack levels used:    1
 15739 ;; This function calls:
 15740 ;;		Nothing
 15741 ;; This function is called by:
 15742 ;;		_interrupt_handler
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           
 15747                           ;psect for function _PWM_CTRL
 15748  07E8                     _PWM_CTRL:	
 15749                           
 15750                           ;pwm.c: 297: ui8_PWM_FreqCnt++;
 15751                           
 15752                           ;incstack = 0
 15753                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 15754  07E8  3001               	movlw	1
 15755  07E9  00F0               	movwf	??_PWM_CTRL
 15756  07EA  0870               	movf	??_PWM_CTRL,w
 15757  07EB  0021               	movlb	1	; select bank1
 15758  07EC  07CC               	addwf	_ui8_PWM_FreqCnt^(0+128),f
 15759                           
 15760                           ;pwm.c: 299: if( ui8_PWM_FreqCnt >= 100 )
 15761  07ED  3064               	movlw	100
 15762  07EE  024C               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 15763  07EF  1C03               	skipc
 15764  07F0  2FF5               	goto	i1l6831
 15765                           
 15766                           ;pwm.c: 301: {;pwm.c: 303: ui8_PWM_FreqCnt = 0;
 15767  07F1  01CC               	clrf	_ui8_PWM_FreqCnt^(0+128)
 15768                           
 15769                           ;pwm.c: 304: LATC0 = 0;
 15770  07F2  0022               	movlb	2	; select bank2
 15771  07F3  100E               	bcf	14,0	;volatile
 15772                           
 15773                           ;pwm.c: 307: }
 15774  07F4  0008               	return
 15775  07F5                     i1l6831:	
 15776                           
 15777                           ;pwm.c: 310: else;pwm.c: 311: {;pwm.c: 313: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 15778  07F5  0022               	movlb	2	; select bank2
 15779  07F6  0844               	movf	_ui8_PWMoutvalue^(0+256),w
 15780  07F7  0021               	movlb	1	; select bank1
 15781  07F8  024C               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 15782  07F9  1C03               	skipc
 15783  07FA  0008               	return
 15784                           
 15785                           ;pwm.c: 315: {;pwm.c: 317: LATC0 = 1;
 15786  07FB  0022               	movlb	2	; select bank2
 15787  07FC  140E               	bsf	14,0	;volatile
 15788  07FD  0008               	return
 15789  07FE                     __end_of_PWM_CTRL:	
 15790  007E                     btemp	set	126	;btemp
 15791  007E                     int$flags	set	126
 15792  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    470
    Data        16
    BSS         329
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     43      64
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      79
    BANK4            80      0      80
    BANK5            80     31      42
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrrupt_bldc->i1_commutate

Critical Paths under _main in BANK0

    _main->_BVH2_Appl_Layer
    _system_init->_init_bldc
    _timer_init->_clear_timer
    _InitMotorRun->_commutate
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    _rate_limit->___wmul
    _SetDiagAlarm->_PWM_Write_Out
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _Get_Analog_Value->_FILTER_Ubat
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6737
                                             39 BANK0      4     4      0
                    _BVH2_Appl_Layer
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                          _PWMReadDC
                       _SetDiagAlarm
                             ___wmul
                        _clear_timer
                         _rate_limit
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0     181
                           _ADC_Init
                           _DiagInit
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                              9 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            1     1      0       0
                                             20 BANK0      1     1      0
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0       0
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0       0
                                              8 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    5     5      0      69
                                             12 BANK0      5     5      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     3     3      0      45
                                              8 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          1     1      0      24
                                             12 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             4     2      2      24
                                              8 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rate_limit                                          14    12      2    1791
                                             14 BANK0     14    12      2
                             ___wmul
                               _sign
 ---------------------------------------------------------------------------------
 (2) _sign                                                 5     3      2     120
                                              8 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        2     2      0      22
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PWMReadDC                                            4     4      0     296
                                             28 BANK0      4     4      0
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              8 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ltdiv                                             11     5      6      52
                                             17 BANK0     11     5      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                              8 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     47    47      0    3299
                                             23 BANK0     16    16      0
                                              0 BANK5     31    31      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1126
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                              8 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              8 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupt_handler                                    0     0      0     822
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (6) _interrupt_PWMCapture                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _interrrupt_bldc                                      8     8      0     822
                                              0 BANK0      8     8      0
                           _BLDCWait
                            ___lwdiv
                         i1_ADC_Read
                         i1_ADC_Wait
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (7) i1_commutate                                         12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4      44
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Read                                           4     2      2      24
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              8     4      4     700
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (7) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Task1ms                                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _PWM_CTRL                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
   _InitMotorStop
   _PWMReadDC
     ___ltdiv
       ___tmul (ARG)
     ___tmul
   _SetDiagAlarm
     _PWM_Write_Out
   ___wmul
   _clear_timer
   _rate_limit
     ___wmul
     _sign
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     _init_bldc
       _InitMotorRun
         _commutate
     _init_ports
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     ___lwdiv
     i1_ADC_Read
     i1_ADC_Wait
     i1___wmul
     i1_commutate
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1B5       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4F      12       98.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      50      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50     1F      2A      16       52.5%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     1B5      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon May 06 12:59:36 2024

                          ?_PWM_Capture_init 0070                                            _B 0220  
                                          pc 0002                                           l69 1EBA  
                                         _RD 0CA8                                           _WR 0CA9  
                         ??_PWM_Capture_init 0028                          ___wmul@multiplicand 002A  
                           i1___wmul@product 0074                     _SIBFS_Pic_etat_monitor_b 00C6  
           BVH2_Appl_Layer@X_Sb4_Intergrator 0168                          __end_of_system_init 1392  
BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00C2                                  ?i1_ADC_Read 0070  
                                        l327 0E9B                                          l345 0EE0  
                                        l514 1238                                          l354 0FF1  
                                        l516 123E                                  ?i1_ADC_Wait 0070  
                                        _GIE 005F                                          _RA4 0064  
                                        _RC5 0075                                          _PR2 001B  
                                        _PR4 0416                                          _PR6 041D  
                                        _sum 0125                             _ui16_IPhase_bldc 0051  
                               __CFG_BORV$LO 0000                                          wreg 0009  
                          _ui16_IPhase1_bldc 01D4                           __ELINMIntTFrameMax 0256  
                          _ui16_IPhase2_bldc 0262                           __ELINMIntTFrameMin 0258  
                          _ui16_IPhase3_bldc 0260                    BVH2_Appl_Layer@Cb24_Reset 02B3  
                               __CFG_LVP$OFF 0000                          __ELINMIntTHeaderMax 0252  
                        __ELINMIntTHeaderMin 0254                      __end_of_interrrupt_bldc 0DA0  
                                       _C1IE 0495                                         l1411 016D  
                                       l1500 0384                                         l1172 0857  
                                       l1421 019A                                         l1423 01AE  
                                       l1415 0182                                         l1407 0177  
                                       l1408 015E                                         l1417 0195  
                                       l1610 0743                                         l1602 0714  
                                       l1506 03DF                                         l1426 01C1  
                                       l1523 0494                                         l1435 0267  
                                       l1540 04EA                                         l1541 04B7  
                                       l1606 0727                                         l1542 04B2  
                                       l1454 023E                                         l1543 04B5  
                                       l1391 00D2                                         l1528 0470  
                                       l1537 04A7                                         l1465 02B9  
                                       l1546 04CD                                         l1394 0135  
                                       l1571 058D                                         l1459 03CB  
                                       l1556 0523                                         l1661 12C7  
                                       l1565 0572                                         l1670 12E3  
                                       l1662 12D7                                         l1734 12C0  
                                       l1671 12FD                                         l1663 12C9  
                                       l1559 0545                                         l1664 12CB  
                                       l1930 1502                                         l1667 12DF  
                                       l1595 06B5                                         l1669 12E1  
                                       l1757 1EFD                                         l1865 1E3F  
                                       l5411 0E63                                         l6133 1F29  
                                       l5421 0E70                                         l5413 0E65  
                                       l5511 0F35                                         l5431 0E70  
                                       l5423 0E70                                         l5415 0E6A  
                                       l5407 0E59                                         l6137 1F31  
                                       l5425 0E70                                         l5417 0E6C  
                                       l5433 0E76                                         l5409 0E5B  
                                       l5611 0FF6                                         l5531 0F59  
                                       l5427 0E70                                         l5419 0E6E  
                                       l5435 0E86                                         l5517 0F40  
                                       l5445 0EA1                                         l5429 0E70  
                                       l5381 0DAC                                         l5463 0EEE  
                                       l5607 0FDD                                         l5447 0EAF  
                                       l5439 0E92                                         l5633 1EC6  
                                       l5801 08E2                                         l5561 0F8D  
                                       l5537 0F64                                         l5457 0EDE  
                                       l5555 0F82                                         l5493 0F1E  
                                       l5469 0EF9                                         l5487 0F13  
                                       l5921 0839                                         l5913 082D  
                                       l5905 0821                                         l5585 0FB6  
                                       l9203 00C3                                         l5931 0845  
                                       l5579 0FAB                                         l5691 1EE8  
                                       l5683 1EDE                                         l9205 00CB  
                                       l9221 00F5                                         l9125 14A9  
                                       l5685 1EE0                                         l9231 010D  
                                       l9143 0079                                         l5791 08AF  
                                       l5783 0881                                         l5599 0FD3  
                                       l5687 1EE3                                         l5695 1EEB  
                                       l5871 129C                                         l5855 1285  
                                       l8601 15E8                                         l9401 024B  
                                       l9321 01CA                                         l9241 0121  
                                       l9233 0111                                         l9217 00DC  
                                       l9161 0090                                         l6761 1218  
                                       l9137 14E1                                         l5793 08B4  
                                       l5785 0886                                         l5689 1EE5  
                                       l5865 1293                                         l8523 1F1D  
                                       l8515 1F0B                                         l9403 024E  
                                       l9235 0115                                         l9227 0105  
                                       l9163 0094                                         l9155 0082  
                                       l9219 00DF                                         l5859 128A  
                                       l9333 01DB                                         l9237 0119  
                                       l9229 0109                                         l9261 0145  
                                       l9245 0125                                         l9165 009C  
                                       l9173 00A5                                         l6781 1244  
                                       l6773 1230                                         l6765 1220  
                                       l5877 12A5                                         l5885 12AE  
                                       l8615 15FA                                         l8543 158E  
                                       l8703 1FA4                                         l9431 02A0  
                                       l9351 01EF                                         l9319 01C8  
                                       l9239 011D                                         l5799 08DD  
                                       l8529 157B                                         l9601 041E  
                                       l9513 0342                                         l9433 02A0  
                                       l9417 027C                                         l9193 00B2  
                                       l9185 00A7                                         l6769 1228  
                                       l5897 0815                                         l5889 0809  
                                       l8547 159D                                         l8707 1FAE  
                                       l9435 02A0                                         l9427 029A  
                                       l9443 02A3                                         l9355 0204  
                                       l9339 01E5                                         _ADON 04E8  
                                       l8629 160D                                         l8573 15C0  
                                       l8653 12E5                                         l8733 1523  
                                       l8725 1513                                         l9605 0429  
                                       l9517 0351                                         l9541 0381  
                                       l9437 02A0                                         l9365 0209  
                                       l9349 01EB                                         l8559 15AC  
                                       l8655 12EF                                         l8647 12CD  
                                       l8751 156A                                         l8743 1551  
                                       l8735 1531                                         l9527 0360  
                                       l9471 02EA                                         l9455 02C3  
                                       l9447 02BB                                         l9439 02A0  
                                       l9391 0236                                         l9375 0216  
                                       l8673 1F80                                         l9641 048C  
                                       l9545 038E                                         l9385 022A  
                                       l9297 018D                                         l8587 15D4  
                                       l8747 155C                                         l9803 060D  
                                       l9715 053E                                         l9651 049C  
                                       l9555 03AC                                         l9539 037B  
                                       l9467 02DB                                         l8685 1F95  
                                       l9821 06B9                                         l9733 0569  
                                       l9637 047E                                         l9629 0472  
                                       l9581 03EE                                         l9389 0232  
                                       l9823 06BC                                         l9647 049A  
                                       l9591 0401                                         l9495 031B  
                                       l9479 02F5                                         l9559 03B4  
                                       l8689 1E39                                         l9841 0737  
                                       l9833 0723                                         l9809 061E  
                                       l9745 0593                                         l9729 055E  
                                       l9497 0323                                         l9489 030C  
                                       _CFGS 0CAE                                         l9851 07AB  
                                       l9835 072C                                         l9819 06B0  
                                       l9739 058B                                         l9499 0329  
                                       l9853 07B7                                         l9845 073E  
                                       l9837 0730                                         l9781 05DD  
                                       l9765 05B9                                         l9749 0596  
                                       l9597 0413                                         l9855 07C6  
                                       l9791 05EF                                         l9857 07DE  
                                       l9689 04E2                                         l9699 04F9  
                                       l9799 0606                                         u3100 1EB0  
                                       u3005 125A                                         _LATA 010C  
                                       _LATB 010D                                         _LATC 010E  
                                       u3070 1E9A                                         u3080 1E9B  
                                       u3090 1EAF                                         u3335 1F32  
                                       u3095 1EAB                                         _PIE1 0091  
                                       _PIE2 0092                                         u3345 1F38  
                                       _PIE3 0093                                         _PEIE 005E  
                                       u2845 0ED5                                         u2795 0E43  
                                       u2995 11F0                                         i1l69 1E02  
                                       u6605 1532                                         u6525 1FAF  
                                       u6615 1546                                         u6535 1FB6  
                                       u8215 055A                                         u6625 1552  
                                       u7195 14D8                                         u7620 0289  
                                       u6485 1E40                                         u8405 0640  
                                       u8245 0587                                         u8165 051D  
                                       u7630 028A                                         u6495 1E45  
                                       u8415 0673                                         u6585 1526  
                                       u8425 0693                                         u8185 0539  
                                       u9305 1339                                         u8435 06A1  
                                       u8445 070A                                         u9265 1315  
                                       u9285 1320                                         u9295 132F  
                                       u7955 0460                                         u9675 1670  
                                       _TMR0 0015                                         _TMR2 001A  
                                       _TMR4 0415                                         _TMR6 041C  
                                       _WREN 0CAA                                         _Bcnt 00D8  
                           _ui8_Task_Cont1ms 00D1                             _ui8_Task_Cont3ms 0148  
                           _ui8_Task_Cont5ms 0147                             _ui16_PWM_Freq_In 01B6  
                 BVH2_Appl_Layer@Cb24_BadCnt 01A0                                         _main 16CE  
                                       _sign 1E95                                         fsr0h 0005  
                                       fsr1h 0007                                         indf0 0000  
                                       fsr0l 0004                                         fsr1l 0006  
                                       btemp 007E                            _ui8_b_DResLocID_c 0059  
                        timer_init@ui8_TmrNb 0029                             __end_of_ADC_Init 1D95  
                           __end_of_ADC_Read 1EDB                             __end_of_ADC_Wait 1E01  
                                       start 0026                              _ui8_sampleState 0164  
                           __end_of_BLDCWait 1E73                       __size_of_PWM_Write_Out 0008  
                         _ui16_comm_time_max 0127                                        S11811 1194  
                                      S11813 1868                                  i1_commutate 0922  
                              ?_InitMotorRun 0070                              __end_of_Task1ms 1D58  
                        _ui16_duty_cycle_mat 01BA                         _Error_PICetatMonitor 015A  
                              __CFG_PLLEN$ON 0000                                        l10691 1342  
                                      l10677 1312                                        l10687 1338  
                                      l10679 131F                                        l11655 17BC  
                                      l11809 0E7C                                        l11657 17BF  
                                      l11675 17F1                                        l11685 17F9  
                                      l11597 16D7                                        l10985 16AF  
                                      l10977 1677                                        l10993 16BC  
                                      l10989 16B6                                        l10999 16C9  
                                      _C1OUT 088E                              __end_of___aldiv 1573  
                                      ?_main 0070                                        ?_sign 0028  
                                      _EEPGD 0CAF                                        _T1CON 0018  
                                      _T2CON 001C                                        _LATB1 0869  
                                      _LATB2 086A                                        _LATC0 0870  
                                      _LATC1 0871                                        _LATC2 0872  
                                      _LATC3 0873                                _InitMotorStop 1DA2  
                                      _LATC4 0874                                        _T4CON 0417  
                            __end_of___ltdiv 1349                                        _T6CON 041E  
                            __end_of___lwdiv 11DD                                        i1l316 0D7C  
                                      i1l327 0A00                                        i1l263 0B74  
                                      i1l345 0A3F                                        i1l354 0B38  
                                      i1l267 0D24                                        i1l284 0C12  
                                      _TMR1H 0017                                        _TMR1L 0016  
                          _ui8_BlankingCount 00DD                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
                        ___lmul@multiplicand 002C                            _ui16_PWM_Freq_mat 01B8  
   BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00C0                             __end_of_PWM_CTRL 07FE  
               ?_Cb56_UbatHandling_node_fcn2 0070                             __end_ofi1___wmul 1E36  
                                      sign@x 0028            BVH2_Appl_Layer@Cb24_oMotorStalled 00BE  
                                      status 0003                             __end_of_DiagInit 1DA2  
                        i1___wmul@multiplier 0070                                        wtemp0 007E  
                         __size_of_PWMReadDC 00AE               ??_Cb34_PWM_Detection_node_fcn1 0028  
                        _ui16_Task_Cont500ms 026A                          __size_ofi1_ADC_Read 001A  
                        __size_ofi1_ADC_Wait 0019                               __CFG_MCLRE$OFF 0000  
                         _ui8_b_DResServID_c 0162                              __initialization 0028  
                           _ui8_selected_lid 005F                  BVH2_Appl_Layer@Cb51_Counter 00C4  
                BVH2_Appl_Layer@Cb19_Counter 00A2                                  _system_init 1349  
                               _cBEMF_FILTER 1800                                 __end_of_main 1800  
                             ??_InitMotorRun 0034                                 __end_of_sign 1EB8  
                            _PWM_trans_table 1000                         __size_of_clear_timer 0023  
                       _ui16_duty_cycle_BLDC 00B0                          __ELINMIntMessageTag 0156  
                             ?_InitMotorStop 0070                                       ??_main 0047  
                                     ??_sign 002A                         __size_of_FILTER_Init 0022  
                       __size_of_FILTER_Ubat 0076                         __size_of_FILTER_Temp 003A  
                          ?_read_eeprom_data 0070                         _ui8_temp_calibration 0167  
                       _BVH2_Appl_Layer$1060 02AC                         _BVH2_Appl_Layer$1061 02AD  
                       _BVH2_Appl_Layer$1062 02AE                         _BVH2_Appl_Layer$1065 02A4  
                       _BVH2_Appl_Layer$1058 02AA                         _BVH2_Appl_Layer$1059 02AB  
                       _BVH2_Appl_Layer$1067 02A6                         _BVH2_Appl_Layer$1068 02A0  
                       _interrupt_PWMCapture 1392                            ?_Get_Analog_Value 0070  
                _ui16_NTC_Temp_bldc_mean_cal 01C0                           ??_read_eeprom_data 0028  
                              _PWM_Write_Out 1D71                                       _ADCON0 009D  
                         ??_Get_Analog_Value 0034                                       _ADCON1 009E  
                                     _CCP1AS 0295                                       _CCP1IE 048A  
                                     _CCP1IF 008A                                       _CCP2IE 0490  
                                     _CCP2IF 0090                                       _CCP3IE 049C  
                                     _CCP3IF 009C                                       _CCP4IE 049D  
                                     _CCP4IF 009D                                       _CCP5IE 049E  
                                     _CCP5IF 009E                                       _ADRESH 009C  
                                     _ADRESL 009B                                       _EEADRL 0191  
                                     _CCPR1H 0292                                       _CCPR2H 0299  
                                     _CCPR3H 0312                                       _CCPR1L 0291  
                                     _CCPR4H 0319                                       _CCPR2L 0298  
                                     _EEDATL 0193                                       _CCPR3L 0311  
                                     _CCPR5H 031D                                       _CCPR4L 0318  
                                     _CCPR5L 031C                                       _EECON2 0196  
                                  ADC_Read@i 002B                                       _ANSELA 018C  
                                     _ANSELB 018D                             ?_interrrupt_bldc 0070  
                              ?_SetDiagAlarm 0070                                       i1l1195 1393  
                                     i1l1198 13BA                                       i1l1865 1E23  
                                     i1l6301 09F7                             _bl_Pumpoff_Alarm 01DC  
                                     i1l6235 1E0D                                       i1l6331 0A56  
                                     i1l6307 0A06                                       i1l6243 092E  
                                     i1l6325 0A4B                                       i1l6309 0A12  
                                     i1l6423 0ADC                                       i1l6319 0A3D  
                                     i1l6271 09C0                                       i1l6441 0AF5  
                                     i1l6417 0AD1                                       i1l6281 09D3  
                                     i1l6273 09C8                                       i1l6355 0A78  
                                     i1l6291 09D5                                       i1l6283 09D5  
                                     i1l6275 09CA                                       i1l6461 0B1A  
                                     i1l6373 0A8C                                       i1l6349 0A6D  
                                     i1l6293 09D5                                       i1l6285 09D5  
                                     i1l6277 09CF                                       i1l6269 09BE  
                                     i1l6447 0B00                                       i1l6287 09D5  
                                     i1l6279 09D1                                       i1l6295 09DB  
                                     i1l6473 0B3B                                       i1l6393 0AAD  
                                     i1l6289 09D5                                       i1l6297 09EB  
                                     i1l6379 0A97                                       i1l6469 0B24  
                            _ui8_PWM_FreqCnt 00CC                                       i1l6831 07F5  
                                     i1l6399 0AB8                                       i1l6851 13F2  
                                     i1l6839 13A5                                       i1l6855 13F5  
                                     i1l8801 11D8                                       _INTCON 000B  
                                     i1l8791 11BD                                       i1l8797 11CF  
                                     i1l8789 11B1                                       _FVRCON 0117  
                         _ui8_Task_Cont100ms 00CD                                       u361_25 09AA  
                                     u366_25 0A34                                       _OSCCON 0099  
                                     u673_25 11B4                ??_Cb56_UbatHandling_node_fcn2 0028  
                                     u675_25 11BE                      _ui16_CPU_Temp_bldc_mean 01C6  
                                     u676_25 11C8                                       _TMR0IE 005D  
                                     _TMR1IE 0488                                       _TMR1IF 0088  
                                     u677_25 11D0                                       u933_25 1E24  
                                     _TMR2IE 0489                                       _TMR2IF 0089  
                                     u934_25 1E29                                       _TMR4IE 0499  
                                     _TMR4IF 0099                                       u943_25 0BD3  
                                     _TMR6IE 049B                                       _TMR6IF 009B  
                                     _TMR2ON 00E2                                       u936_25 0B52  
                                     _TMR4ON 20BA                                       _TMR6ON 20F2  
                                     u947_25 0C3B                                       u948_25 0C74  
                                     _WDTCON 0097                                       u949_25 0CAD  
       BVH2_Appl_Layer@Sb1_Logical_Operator1 02BB         BVH2_Appl_Layer@Sb1_Logical_Operator2 02B4  
       BVH2_Appl_Layer@Sb1_Logical_Operator3 02BC         BVH2_Appl_Layer@Sb1_Logical_Operator5 02B5  
                                  ??_Task1ms 0070                          _DC_pic_etat_monitor 0159  
                                 _MotorFlags 005A   BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C  
                     __ELINMIntMessageBuffer 02BF                                       ___lmul 1F9B  
                                  ??___aldiv 0030                                       ___tmul 1F22  
                                     ___wmul 1E36                    BVH2_Appl_Layer@Sb4_PI_sum 02BD  
                                  ??___ltdiv 0037                                    ??___lwdiv 0074  
                            _ui8_PWMinDC_sav 00CB                                 _Debounce_Tmr 01A6  
          BVH2_Appl_Layer@Cb24_oStalledAlarm 0133                            __end_of_PWMReadDC 16CE  
                      ?_interrupt_PWMCapture 0070                                    ?_ADC_Init 0070  
                                  ?_ADC_Read 0028                                    ?_ADC_Wait 0070  
                           _ui16_UPhase_bldc 01D6                               ?_PWM_Write_Out 0070  
                                  ?_BLDCWait 0070                     __size_of_BVH2_Appl_Layer 0770  
                             ??_SetDiagAlarm 002A             BVH2_Appl_Layer@Cb9_oCurrentAlarm 012F  
                    __end_of__initialization 0074                           _ui16_CPU_Temp_bldc 025E  
                      __end_of_FILTER_IPhase 1211                      __end_of_PWM_trans_table 1194  
                             __pcstackCOMMON 0070                              _ui8_PWMoutvalue 0144  
                               __pidataBANK0 07FE                                 __pidataBANK1 1D6A  
                               __pidataBANK2 1D79                           _ui16_dryRun_Thresh 026E  
                            ??_InitMotorStop 0028         __size_of_Cb56_UbatHandling_node_fcn2 0043  
                                  ?_PWM_CTRL 0070                                 ??i1_ADC_Read 0072  
                                  ?i1___wmul 0070                                 ??i1_ADC_Wait 0070  
                   _ui8_lin_sim_Failures_ena 015B                                    ?_DiagInit 0070  
                          _Cb1_oCurrentAlarm 0141                                   ??_ADC_Init 0028  
                                 ??_ADC_Read 002A                                   ??_ADC_Wait 0028  
                      _ui16_Speed_demand_mat 01B0                                   ??_BLDCWait 0070  
                __end_of_Oscill_Source_Block 1D5E                    __size_of_PWM_Capture_init 0057  
                       __ELINMIntMessageSize 0153                           _ui16_Duty_Cycle_In 01EB  
                               _analog_value 00BC                         __end_of_InitMotorRun 1FFE  
                         __size_of_commutate 0260                                   __pbssBANK0 004B  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK4 0220  
                                 __pbssBANK5 02BF                      _ui8_Duty_Cycle_In_Ratio 0142  
                         __size_of_init_bldc 0028                         _bool_ControlLoopMode 00CE  
                         __end_ofi1_ADC_Read 1E1B                           __end_ofi1_ADC_Wait 1DE8  
                                 __pmaintext 16CE                                      ?___lmul 0028  
                            _Cb34_oPWM_Alarm 013F                                      ?___tmul 0028  
                                    ?___wmul 0028                                 ?i1_commutate 0070  
                                 __pintentry 0004                                      _CM1CON0 0111  
                                    _CM1CON1 0112                                      _CCP1ASE 14AF  
                                    _CCP1CON 0293                                      _CCP2CON 029A  
                                    i1S11815 1840                                      _CCP3CON 0313  
                                    i1S11819 1854                                      _CCP4CON 031A  
    __end_of_Cb1_Current_An___High_node_fcn1 1F9B     __size_of_Cb1_Current_An___High_node_fcn1 002A  
          ??_Cb1_Current_An___High_node_fcn1 0028             ?_Cb1_Current_An___High_node_fcn1 0070  
            _Cb1_Current_An___High_node_fcn1 1F71                                      _CCP5CON 031E  
                      _bool_CPU_TempRedAlarm 014B                               ___lmul@product 0030  
                                 ??_PWM_CTRL 0070                                rate_limit@pwm 002E  
                                 ??i1___wmul 0074                       ??_interrupt_PWMCapture 0070  
                               _ui8_CMD_Mode 01DD                                   _ui8_Ki_mat 01B2  
                            ??_PWM_Write_Out 0028                                   _ui8_Kp_mat 014D  
                                    i1l10721 0B6B                                      i1l10713 0B57  
                                    i1l10901 0D0F                                      i1l10717 0B61  
                                    i1l10727 0B78                                      i1l10841 0C11  
                                    i1l10833 0C0B                                      i1l10817 0BEE  
                                    i1l10809 0BDF                                      i1l10905 0D16  
                                    i1l10931 0D5F                                      i1l10843 0C11  
                                    i1l10739 0B8B                                      i1l10933 0D65  
                                    i1l10853 0C25                                      i1l11573 0012  
                                    i1l10927 0D55                                      i1l10935 0D69  
                                    i1l10871 0CA2                                      i1l10863 0C65  
                                    i1l10839 0C11                                      i1l10697 1E1D  
                                    i1l11817 09E1                                      i1l10937 0D6B  
                                    i1l10865 0C69                                      i1l10881 0CE7  
                                    i1l10955 0D91                                      i1l10875 0CD7  
                                    i1l10883 0CEF                                      i1l10859 0C30  
                                    i1l10779 0BAA                                      i1l11587 0021  
                                    i1l11579 0019                                      i1l10957 0D97  
                                    i1l10877 0CD9                                      i1l10869 0C9E  
                                    i1l10879 0CDA                                      i1l10799 0BD7  
                                    i1l10889 0CFC                                   ??_DiagInit 002A  
                                    _PWM1CON 0294                          rate_limit@delta_pwm 003A  
                                 _comm_state 00DE                  BVH2_Appl_Layer@Cb9_StateCnt 00C3  
                          ??_BVH2_Appl_Layer 0037                    _ui16_Speed_demand_mat_Max 01AE  
                  _ui16_Speed_demand_mat_min 01AC                                      _Task1ms 1D52  
                               ?_system_init 0070                                      ___aldiv 14F1  
                               _ui8_DebugCnt 01E0                           _ui16_PWMin_failCnt 01AA  
                    BVH2_Appl_Layer@Sb3_Sum1 02B9                              __size_of___lmul 0030  
                            __size_of___tmul 0027                              __size_of___wmul 001C  
                                    ___ltdiv 1304                                      ___lwdiv 11A9  
                       __end_of_SetDiagAlarm 1248                            __end_of_commutate 1000  
                               _ui8_CompFlag 00D9                                   _init_ports 1DBF  
                                    __ptext1 1349                                      __ptext2 1282  
                                    __ptext3 1EDB                                      __ptext4 1DBF  
                                    __ptext5 1F49                                      __ptext6 1FCB  
                                    __ptext7 0DA0                                      __ptext8 0801  
                                    __ptext9 1D58                            _ui16_CMD_Mode_Tmr 024C  
                        _phase_delay_counter 00B8                                      _filter1 01C4  
                                    _filter3 012D                            __end_of_init_bldc 1F71  
                          _bool_mat_pic_etat 00CA                                _ui16_Temp_cal 01D0  
                           ___aldiv@dividend 002C                   BVH2_Appl_Layer@Sb2_Switch2 02A8  
                 BVH2_Appl_Layer@Sb2_Switch5 02B7                               __ELINMIntRXCRC 025A  
                                    _pwm_cmd 0145                                      clrloop0 1D5F  
                                    _wkpoint 00EE                                   _rate_limit 1478  
                       end_of_initialization 0074                               __ELINMIntSpace 014F  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00C1         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0  
                     __ELINMIntRXMessageSize 0152                                      init_ram 1D64  
                                    initloop 1D65                         _ui16_fir_IPhase_mean 01CC  
                  __size_of_read_eeprom_data 000F                    __size_of_Get_Analog_Value 0009  
                           ___ltdiv@dividend 0034                             __CFG_CLKOUTEN$ON 0000  
                              ??_clear_timer 0028                             ___aldiv@quotient 0033  
            read_eeprom_data@ui8_adress_data 002A                            _prev_Debounce_Tmr 01A4  
                      i1___wmul@multiplicand 0072                                ??_FILTER_Init 002C  
                              ??_FILTER_Ubat 0028                                ??_FILTER_Temp 0028  
                       _Cb56_odFixedValueSel 0138                            _FCT_STAMP_ABSENCE 01EA  
                                 _timer_init 1282               PWM_Write_Out@ui8_DutyCycle_Out 0029  
                      _ui16_IPhase1_bldc_cal 00E6                       rate_limit@sign_pwm_inc 0038  
                _ui16_CPU_Temp_bldc_mean_cal 026C                        _ui16_IPhase2_bldc_cal 00E4  
                           __CFG_FOSC$INTOSC 0000                        __size_of_InitMotorRun 0033  
                        _ui16_Current_Thresh 01ED                             _LIN_DEACTIVATION 01E3  
                           _PWM_Capture_init 0801                             ___ltdiv@quotient 0038  
                                  _PWMReadDC 1620                        _ui16_IPhase3_bldc_cal 00E2  
                          __size_of_ADC_Init 000B                            __size_of_ADC_Read 0023  
                              _ui16_step_cnt 00BA                            __size_of_ADC_Wait 0019  
                          __size_of_BLDCWait 0021                           _ICT_STAMP_PRESENCE 014E  
                                 _windowPtr1 005B                             _ui8_BattVolt_mat 00AE  
                          _FCT_STAMP_WRITING 01E4                    _phase_delay_counter_debug 0266  
       BVH2_Appl_Layer@Sb2_Logical_Operator2 02B6                     __size_of_interrrupt_bldc 025C  
                          __ELINMIntReadBack 0151                          _ui8_lin_calibration 01E2  
                            _ui8_ResetMatlab 00EF                                 _InitMotorRun 1FCB  
                             __end_of___lmul 1FCB                       _ui16_phase_advancement 00B6  
                             __end_of___tmul 1F49                               __end_of___wmul 1E52  
                                ?_init_ports 0070                         __size_ofi1_commutate 0222  
                        __end_of_clear_timer 1EFE                                __pbitbssBANK0 02F0  
                          __size_of_PWM_CTRL 0016                                  i1ADC_Read@i 0073  
                        start_initialization 0028                            __size_ofi1___wmul 001B  
                        __end_of_FILTER_Init 1E95                               _bool_PIC_Alarm 01DB  
                        __end_of_FILTER_Ubat 1478                          __end_of_FILTER_Temp 1282  
                          __size_of_DiagInit 000D                                   ?_PWMReadDC 0070  
        __end_of_Cb56_UbatHandling_node_fcn2 1304                  _Cb56_UbatHandling_node_fcn2 12C1  
                                ?_rate_limit 002E                               _ui8_IPhase_sel 00DC  
                               _Cb1_StateCnt 004D                      rate_limit@abs_delta_pwm 0034  
                        _CURRENT_CALIBRATION 01E6                                _SPEED_READING 01E5  
                      __size_of_SetDiagAlarm 0037                      _ui16_NTC_Temp_bldc_mean 01C8  
                             _ui8_PWM_dc_mat 00D0                                     ??___lmul 0030  
                                   ??___tmul 002E                                     ??___wmul 002C  
                                __pdataBANK0 005F                                  __pdataBANK1 00E8  
                                __pdataBANK2 0168                   read_eeprom_data@ui8_adress 0029  
                       __size_of_system_init 0049                            rate_limit@pwm_inc 0036  
                               _Cb1_oShutoff 0140                                  _bemf_filter 0166  
                                ?_timer_init 0070                               ___tmul@product 002E  
                      __end_of_InitMotorStop 1DB0                       __size_of_FILTER_IPhase 0034  
                            _ui8_Pulse_State 0143                                    ___latbits 0002  
                            _BVH2_Appl_Layer 0078                                __pcstackBANK0 0020  
                              __pcstackBANK5 02A0                       _ui16_fir_UPhase_mittel 01CA  
                          _bool_MotorStalled 00D5                         _ui8_lin_sim_Failures 015C  
                               _SetDiagAlarm 1211                             _BlankingCountdbg 0165  
                   _VER_SUPPLY_VOLTAGE_VALUE 01E7                 __size_of_Oscill_Source_Block 0006  
                        __size_of_init_ports 0010                                    _ui16_wait 024E  
                           _read_eeprom_data 1DB0                                    __pnvBANK1 00EF  
                                  __pnvBANK3 01ED                                    __pnvBANK4 026E  
             BVH2_Appl_Layer@Cb51_oTempAlarm 0132                            _amps_per_volt_cnt 024A  
                           _Get_Analog_Value 1D81                                     ?_Task1ms 0070  
                           ___lwdiv@dividend 0072                                  _clear_timer 1EDB  
                                   ?___aldiv 0028                                     ?___ltdiv 0031  
                                   ?___lwdiv 0070                        _bool_HighCurrentAlarm 00D4  
                       clear_timer@ui8_TmrNb 0028                          __size_of_rate_limit 0079  
                          ??_interrrupt_bldc 0020                _SIBFS_Current_Analysis_High_b 00C8  
                             _ui8_UPhase_sel 00DB                               _bool_UbatAlarm 014A  
                                _FILTER_Init 1E73                                  _FILTER_Ubat 1402  
                                _FILTER_Temp 1248                            _ui8_Sync_Cont10ms 01E1  
                                  _comm_time 0053                                    __pswtext1 1194  
                                  __pswtext2 1868                                    __pswtext3 1840  
                                  __pswtext4 1854                                    _ui8_i_wob 01DF  
                         _Cb34_oPWM_SC_Alarm 013E                                _CompFlag_prev 0163  
                          _interrupt_handler 0004                                    _ict_stamp 016F  
                            _ui16_Ubemf_bldc 00B4                                    _commutate 0DA0  
                      _SIBFS_PWM_Detection_b 00C7                                     _ADC_Init 1D8A  
                                   _ADC_Read 1EB8                __size_of_interrupt_PWMCapture 0070  
                       _bool_DryRunningAlarm 00D6                                     _ADC_Wait 1DE8  
                         ?_interrupt_handler 0070                        __end_of_PWM_Write_Out 1D79  
                                   _BLDCWait 1E52                                  ??_PWMReadDC 003C  
                           __CFG_WDTE$SWDTEN 0000                            _I_calibrationInit 0858  
                           ___lwdiv@quotient 0075                                    _init_bldc 1F49  
    BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 0055                           ?_I_calibrationInit 0070  
                        ??_interrupt_handler 007C                        _Cb56_oUbat_Alarm_High 0139  
                                _Cb44_oAlarm 013B                              ___aldiv@divisor 0028  
                            ___aldiv@counter 0031                               ___wmul@product 002C  
                            _ui16_Timer_VaL1 0250                          __size_of_timer_init 003F  
                                  clear_ram0 1D5E                                _FILTER_IPhase 11DD  
                        ??_I_calibrationInit 002C                              ___ltdiv@divisor 0031  
                             _Cb34_odPumpOff 01D8                              ___ltdiv@counter 003B  
                                   _GO_nDONE 04E9                     __end_of_PWM_Capture_init 0858  
                                _ui8_failure 016E                                  _ui8_cnt_PWM 0157  
                                   _PSTR1CON 0296                    __end_of_interrupt_handler 0026  
                    __end_of_BVH2_Appl_Layer 07E8                                     _PWM_CTRL 07E8  
                             _ui8_b_DResB0_c 0058                               _ui8_b_DResB1_c 0161  
                             _ui8_b_DResB2_c 0160                               _ui8_b_DResB3_c 015F  
                             _ui8_b_DResB4_c 015E                               _ui8_b_DResB5_c 015D  
                          ___wmul@multiplier 0028                                     i1___wmul 1E1B  
                                 ?_commutate 0070                      interrrupt_bldc@ui32_tmp 0024  
                                   _DiagInit 1D95                    __end_of_I_calibrationInit 0922  
                        ___tmul@multiplicand 002B                          _ui16_fir_Bat_mittel 01CE  
                  _ui8_fixed_start_speed_mat 01BE                        __ELINMIntSleepTimeout 0246  
                   _ui16_ambiant_temperature 025C                                   ?_init_bldc 0070  
                          ___lmul@multiplier 0028                               _ui16_Capt_Val0 00AA  
                             _ui16_Capt_Val1 00A8                               _ui16_Capt_Val2 00A6  
                             _ui16_I_cal_Ph1 00EC                               _ui16_I_cal_Ph2 00EA  
                             _ui16_I_cal_Ph3 00E8                             __ELINMIntStatus1 0154  
                             ?_FILTER_IPhase 0070                           _bool_CPU_TempAlarm 00D7  
                           _ui16_mat_Current 00AC                             __size_of_Task1ms 0006  
                       _SIBFS_UbatHandling_b 0057                      _Cb34_odFixedLowValueSel 013D  
                   BVH2_Appl_Layer@Sb2_Error 02AF                             __size_of___aldiv 0082  
              BVH2_Appl_Layer@Cb19_oDryRun55 0135                BVH2_Appl_Layer@Cb19_oDryRun66 0134  
                           __size_of___ltdiv 0045                              _Sb2_Fixed_Power 1878  
                           __size_of___lwdiv 0034                                 ??_init_ports 0028  
                          _ui8_lastTaskvalue 0146                             _ui16_mat_inpTemp 01B4  
                             _ui8_StartupPWM 00DF                         _bool_PWMin_err_Alarm 014C  
              __ELINMIntMessageBufferPointer 0150                                     _checksum 0240  
                         _Cb1_RestartCounter 00C9             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00BF  
                         _ui16_NTC_Temp_bldc 01D2                              ___lwdiv@divisor 0070  
                             _Cb56_odPumpOff 0137                              ___lwdiv@counter 0077  
                                   __ptext10 0858                                     __ptext11 1DB0  
                                   __ptext20 1D71                                     __ptext12 1E73  
                                   __ptext21 1620                                     __ptext13 1DE8  
                                   __ptext30 1E36                                     __ptext22 1F22  
                                   __ptext14 1EB8                                     __ptext31 1F9B  
                                   __ptext23 1304                                     __ptext15 1D95  
                                   __ptext40 0922                                     __ptext32 14F1  
                                   __ptext24 1DA2                                     __ptext16 1D8A  
                                   __ptext41 1E1B                                     __ptext33 12C1  
                                   __ptext25 1D81                                     __ptext17 1478  
                                   __ptext42 1DCF                                     __ptext34 1EFE  
                                   __ptext26 1402                                     __ptext18 1E95  
                                   __ptext43 1E01                                     __ptext35 1573  
                                   __ptext27 1248                                     __ptext19 1211  
                                   __ptext44 11A9                                     __ptext36 1F71  
                                   __ptext28 11DD                                     __ptext45 1E52  
                                   __ptext29 0078                                     __ptext46 1D52  
                                   __ptext38 1392                                     __ptext47 07E8  
                                   __ptext39 0B44                                 ??_rate_limit 0030  
                                   _ui8_cnt1 0158                               _ui16_Ubat_bldc 005C  
                                   _filterPh 012B                      _bool_mat_currAlarm_bldc 00CF  
               BVH2_Appl_Layer@Cb14_StateCnt 01A2                                _Cb44_StateCnt 00A4  
              BVH2_Appl_Layer@Cb51_odPumpOff 0130                                     _last_pwm 0123  
                              __size_of_main 0132                                __size_of_sign 0023  
                                 _Cb34_idPWM 0056                                     _phaseCal 00D3  
                         __end_of_init_ports 1DCF                                  _inputArray1 0230  
                             _ui16_Speed_mat 004F                 BVH2_Appl_Layer@Cb24_StateCnt 004B  
                                   _prev_RA4 01A8                  BVH2_Appl_Layer@Sb3_Product1 02B1  
                              ??i1_commutate 0070                                     int$flags 007E  
                   rate_limit@sign_delta_pwm 0032            BVH2_Appl_Layer@Cb51_oTempRedAlarm 0131  
                              _ui8_Ubemf_sel 00DA                                _Cb44_oShutoff 013A  
                             _ui8_calib_flag 01DE                   __size_of_interrupt_handler 0022  
                           ?_BVH2_Appl_Layer 0070                           __end_of_rate_limit 14F1  
                               ??_timer_init 0029                             _ui16_phase_angle 0264  
                        _Oscill_Source_Block 1D58                                   i1_ADC_Read 1E01  
                                 i1_ADC_Wait 1DCF                                  ??_commutate 0028  
                            __ELINMIntStatus 0155                     __end_of_read_eeprom_data 1DBF  
                   __end_of_Get_Analog_Value 1D8A                   __size_of_I_calibrationInit 00CA  
                           _ui8_given_supply 00D2      __end_of_Cb44_Pic_etat_monitor_node_fcn1 1F22  
   __size_of_Cb44_Pic_etat_monitor_node_fcn1 0024            ??_Cb44_Pic_etat_monitor_node_fcn1 0028  
           ?_Cb44_Pic_etat_monitor_node_fcn1 0070              _Cb44_Pic_etat_monitor_node_fcn1 1EFE  
                          _ui8_zero_cros_cnt 0268                               _ui8_debug_out0 01D9  
       __end_of_Cb34_PWM_Detection_node_fcn1 1620        __size_of_Cb34_PWM_Detection_node_fcn1 00AD  
               _Cb34_PWM_Detection_node_fcn1 1573                         __end_of_cBEMF_FILTER 1840  
                                ??_init_bldc 0034                                     intlevel1 0000  
                           _rising_bemf_flag 02F0                              ??_FILTER_IPhase 0028  
                  _bool_PWMin_Freq_err_Alarm 0149                        _VER_SW_VERSION_NUMBER 01E8  
                       ?_Oscill_Source_Block 0070                              _interrrupt_bldc 0B44  
                         __end_of_timer_init 12C1                      __end_of_Sb2_Fixed_Power 187A  
                               ?_clear_timer 0070                        _bool_start_demand_mat 00E0  
                              ??_system_init 0035                   PWM_Capture_init@ui8_CCP_Nb 0028  
                          ___tmul@multiplier 0028                      _TEMPERATURE_CALIBRATION 01E9  
                               ?_FILTER_Init 0070                                 ?_FILTER_Ubat 0070  
                               ?_FILTER_Temp 0070                        _bool_StalledMotorStop 01DA  
                              __pstringtext1 1000                                __pstringtext2 1800  
                              __pstringtext3 1878                                   _OPTION_REG 0095  
                        __end_ofi1_commutate 0B44                                 ___aldiv@sign 0032  
BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016D                ?_Cb34_PWM_Detection_node_fcn1 0070  
         BVH2_Appl_Layer@Cb24_RestartCounter 00C5                        ??_Oscill_Source_Block 0028  
                       _Cb34_odFixedValueSel 013C                              _ui8_error_Flags 00E1  
                            _ui8_current_cal 0120                                _power_lockout 0136  
                     __size_of_InitMotorStop 000E                 __end_of_interrupt_PWMCapture 1402  
                             _ui16_speed_fil 00B2                               _ui16_speed_rar 01BC  
                              _filterTempCPU 01C2                                _filterTempNTC 0129  
