

HI-TECH Software PIC PRO Macro Assembler V9.81 build 7503 
                                                                                               Wed Dec 13 15:23:08 2017

HI-TECH Software Omniscient Code Generator (PRO mode) build 7503
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK1,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cinit,global,class=CODE,delta=2
    12                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	text2030,local,class=CODE,delta=2
    26                           	psect	text2033,local,class=CODE,delta=2
    27                           	psect	text2038,local,class=CODE,delta=2
    28                           	psect	text2039,local,class=CODE,delta=2
    29                           	psect	swtext1,local,class=CONST,delta=2
    30                           	psect	text2040,local,class=CODE,delta=2
    31                           	psect	text2041,local,class=CODE,delta=2
    32                           	psect	text2044,local,class=CODE,delta=2
    33                           	psect	swtext2,local,class=CONST,delta=2
    34                           	psect	text2052,local,class=CODE,delta=2
    35                           	psect	text2055,local,class=CODE,delta=2
    36                           	psect	text2059,local,class=CODE,delta=2
    37                           	psect	text2062,local,class=CODE,delta=2
    38                           	psect	text2068,local,class=CODE,delta=2
    39                           	psect	text2072,local,class=CODE,delta=2
    40                           	psect	text2073,local,class=CODE,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text2078,local,class=CODE,delta=2
    43                           	psect	swtext3,local,class=CONST,delta=2
    44                           	psect	text2079,local,class=CODE,delta=2
    45                           	psect	swtext4,local,class=CONST,delta=2
    46                           	psect	text2081,local,class=CODE,delta=2
    47                           	psect	text2087,local,class=CODE,delta=2
    48                           	psect	text2088,local,class=CODE,delta=2
    49                           	psect	text2089,local,class=CODE,delta=2
    50                           	psect	text2090,local,class=CODE,delta=2
    51                           	psect	pa_nodes,global,class=CODE,delta=2
    52                           	dabs	1,0x7E,2
    53  000A                     	;#
    54                           
    55                           	psect	config
    56  8007  FFBC               	dw	65468	;#
    57  8008  DBFF               	dw	56319	;#
    58                           
    59                           	psect	idataBANK0
    60  0000                     __pidataBANK0:	
    61                           
    62                           	psect	idataBANK2
    63  0000                     __pidataBANK2:	
    64                           
    65                           	psect	idataBANK1
    66  0000                     __pidataBANK1:	
    67                           
    68                           	psect	strings
    69  002C                     __pstrings:	
    70  002C                     __stringtab:	
    71  002C  3400               	retlw	0
    72  002D                     _PWM_trans_table:	
    73  002D  346E               	retlw	110
    74  002E  346E               	retlw	110
    75  002F  346E               	retlw	110
    76  0030  3400               	retlw	0
    77  0031  3400               	retlw	0
    78  0032  3400               	retlw	0
    79  0033  3400               	retlw	0
    80  0034  3400               	retlw	0
    81  0035  3400               	retlw	0
    82  0036  3400               	retlw	0
    83  0037  34D3               	retlw	211
    84  0038  34D3               	retlw	211
    85  0039  34D3               	retlw	211
    86  003A  34D0               	retlw	208
    87  003B  34CE               	retlw	206
    88  003C  34CC               	retlw	204
    89  003D  34C9               	retlw	201
    90  003E  34C7               	retlw	199
    91  003F  34C5               	retlw	197
    92  0040  34C3               	retlw	195
    93  0041  34C1               	retlw	193
    94  0042  34BF               	retlw	191
    95  0043  34BD               	retlw	189
    96  0044  34BB               	retlw	187
    97  0045  34BA               	retlw	186
    98  0046  34B8               	retlw	184
    99  0047  34B6               	retlw	182
   100  0048  34B4               	retlw	180
   101  0049  34B2               	retlw	178
   102  004A  34B1               	retlw	177
   103  004B  34AF               	retlw	175
   104  004C  34AD               	retlw	173
   105  004D  34AC               	retlw	172
   106  004E  34AA               	retlw	170
   107  004F  34A9               	retlw	169
   108  0050  34A7               	retlw	167
   109  0051  34A6               	retlw	166
   110  0052  34A4               	retlw	164
   111  0053  34A3               	retlw	163
   112  0054  34A2               	retlw	162
   113  0055  34A0               	retlw	160
   114  0056  349F               	retlw	159
   115  0057  349D               	retlw	157
   116  0058  349C               	retlw	156
   117  0059  349B               	retlw	155
   118  005A  349A               	retlw	154
   119  005B  3498               	retlw	152
   120  005C  3497               	retlw	151
   121  005D  3496               	retlw	150
   122  005E  3495               	retlw	149
   123  005F  3494               	retlw	148
   124  0060  3492               	retlw	146
   125  0061  3491               	retlw	145
   126  0062  3490               	retlw	144
   127  0063  348F               	retlw	143
   128  0064  348E               	retlw	142
   129  0065  348D               	retlw	141
   130  0066  348C               	retlw	140
   131  0067  348B               	retlw	139
   132  0068  348A               	retlw	138
   133  0069  3489               	retlw	137
   134  006A  3488               	retlw	136
   135  006B  3487               	retlw	135
   136  006C  3486               	retlw	134
   137  006D  3485               	retlw	133
   138  006E  3484               	retlw	132
   139  006F  3483               	retlw	131
   140  0070  3482               	retlw	130
   141  0071  3481               	retlw	129
   142  0072  3480               	retlw	128
   143  0073  347F               	retlw	127
   144  0074  347F               	retlw	127
   145  0075  347E               	retlw	126
   146  0076  347D               	retlw	125
   147  0077  347C               	retlw	124
   148  0078  347B               	retlw	123
   149  0079  347A               	retlw	122
   150  007A  347A               	retlw	122
   151  007B  3479               	retlw	121
   152  007C  3478               	retlw	120
   153  007D  3477               	retlw	119
   154  007E  3477               	retlw	119
   155  007F  3476               	retlw	118
   156  0080  3475               	retlw	117
   157  0081  3474               	retlw	116
   158  0082  3474               	retlw	116
   159  0083  3473               	retlw	115
   160  0084  3472               	retlw	114
   161  0085  3472               	retlw	114
   162  0086  3471               	retlw	113
   163  0087  3470               	retlw	112
   164  0088  3470               	retlw	112
   165  0089  346F               	retlw	111
   166  008A  346E               	retlw	110
   167  008B  346E               	retlw	110
   168  008C  346E               	retlw	110
   169  008D  346E               	retlw	110
   170  008E  346E               	retlw	110
   171  008F  346E               	retlw	110
   172  0090  346E               	retlw	110
   173  0091  346E               	retlw	110
   174                           
   175                           	psect	nvBANK3
   176  01EC                     __pnvBANK3:	
   177  01EC                     _ui16_Current_Thresh:	
   178  01EC                     	ds	2
   179  01EE                     _ui16_dryRun_Thresh:	
   180  01EE                     	ds	2
   181  000B                     _INTCON	set	11
   182  001B                     _PR2	set	27
   183  0018                     _T1CON	set	24
   184  001C                     _T2CON	set	28
   185  0015                     _TMR0	set	21
   186  0017                     _TMR1H	set	23
   187  0016                     _TMR1L	set	22
   188  001A                     _TMR2	set	26
   189  008A                     _CCP1IF	set	138
   190  0090                     _CCP2IF	set	144
   191  009C                     _CCP3IF	set	156
   192  009D                     _CCP4IF	set	157
   193  009E                     _CCP5IF	set	158
   194  005F                     _GIE	set	95
   195  005E                     _PEIE	set	94
   196  0075                     _RC5	set	117
   197  008D                     _RCIF	set	141
   198  005D                     _TMR0IE	set	93
   199  0088                     _TMR1IF	set	136
   200  0089                     _TMR2IF	set	137
   201  0099                     _TMR4IF	set	153
   202  009B                     _TMR6IF	set	155
   203  009D                     _ADCON0	set	157
   204  009E                     _ADCON1	set	158
   205  009C                     _ADRESH	set	156
   206  009B                     _ADRESL	set	155
   207  0095                     _OPTION_REG	set	149
   208  0099                     _OSCCON	set	153
   209  0091                     _PIE1	set	145
   210  0092                     _PIE2	set	146
   211  0093                     _PIE3	set	147
   212  008C                     _TRISA	set	140
   213  008D                     _TRISB	set	141
   214  008E                     _TRISC	set	142
   215  0097                     _WDTCON	set	151
   216  04E8                     _ADON	set	1256
   217  0495                     _C1IE	set	1173
   218  048A                     _CCP1IE	set	1162
   219  0490                     _CCP2IE	set	1168
   220  049C                     _CCP3IE	set	1180
   221  049D                     _CCP4IE	set	1181
   222  049E                     _CCP5IE	set	1182
   223  04E9                     _GO_nDONE	set	1257
   224  0488                     _TMR1IE	set	1160
   225  0489                     _TMR2IE	set	1161
   226  0499                     _TMR4IE	set	1177
   227  049B                     _TMR6IE	set	1179
   228  0111                     _CM1CON0	set	273
   229  0112                     _CM1CON1	set	274
   230  0117                     _FVRCON	set	279
   231  010C                     _LATA	set	268
   232  010D                     _LATB	set	269
   233  010E                     _LATC	set	270
   234  088E                     _C1OUT	set	2190
   235  0869                     _LATB1	set	2153
   236  086A                     _LATB2	set	2154
   237  0870                     _LATC0	set	2160
   238  0871                     _LATC1	set	2161
   239  0872                     _LATC2	set	2162
   240  0873                     _LATC3	set	2163
   241  0874                     _LATC4	set	2164
   242  018C                     _ANSELA	set	396
   243  018D                     _ANSELB	set	397
   244  019F                     _BAUDCON	set	415
   245  0192                     _EEADRH	set	402
   246  0191                     _EEADRL	set	401
   247  0195                     _EECON1	set	405
   248  0196                     _EECON2	set	406
   249  0193                     _EEDATA	set	403
   250  0194                     _EEDATH	set	404
   251  0193                     _EEDATL	set	403
   252  0199                     _RCREG	set	409
   253  019D                     _RCSTA	set	413
   254  019B                     _SPBRG	set	411
   255  019C                     _SPBRGH	set	412
   256  019A                     _TXREG	set	410
   257  019E                     _TXSTA	set	414
   258  0CAE                     _CFGS	set	3246
   259  0CAF                     _EEPGD	set	3247
   260  0CA8                     _RD	set	3240
   261  0CF3                     _SENDB	set	3315
   262  0CA9                     _WR	set	3241
   263  0CAA                     _WREN	set	3242
   264  0295                     _CCP1AS	set	661
   265  0293                     _CCP1CON	set	659
   266  029A                     _CCP2CON	set	666
   267  0292                     _CCPR1H	set	658
   268  0291                     _CCPR1L	set	657
   269  0299                     _CCPR2H	set	665
   270  0298                     _CCPR2L	set	664
   271  0296                     _PSTR1CON	set	662
   272  0294                     _PWM1CON	set	660
   273  14AF                     _CCP1ASE	set	5295
   274  0313                     _CCP3CON	set	787
   275  031A                     _CCP4CON	set	794
   276  031E                     _CCP5CON	set	798
   277  0312                     _CCPR3H	set	786
   278  0311                     _CCPR3L	set	785
   279  0319                     _CCPR4H	set	793
   280  0318                     _CCPR4L	set	792
   281  031D                     _CCPR5H	set	797
   282  031C                     _CCPR5L	set	796
   283  0417                     _T4CON	set	1047
   284  041E                     _T6CON	set	1054
   285  0415                     _TMR4	set	1045
   286  041C                     _TMR6	set	1052
   287                           
   288                           	psect	nvBANK1
   289  00EF                     __pnvBANK1:	
   290  00EF                     _ui8_ResetMatlab:	
   291  00EF                     	ds	1
   292                           
   293                           	psect	cinit
   294  00DE                     start_initialization:	
   295  00DE  3048               	movlw	low __pbssBANK0
   296                           
   297                           ; Clear objects allocated to BITBANK0
   298  00DF  01D3               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   299                           
   300                           ; Clear objects allocated to BANK0
   301  00E0  0084               	movwf	4
   302  00E1  3000               	movlw	high __pbssBANK0
   303  00E2  0085               	movwf	5
   304  00E3  300B               	movlw	11
   305  00E4  3187  27F7  3180   	fcall	clear_ram
   306                           
   307                           ; Clear objects allocated to BANK1
   308  00E7  30A0               	movlw	low __pbssBANK1
   309  00E8  0084               	movwf	4
   310  00E9  3000               	movlw	high __pbssBANK1
   311  00EA  0085               	movwf	5
   312  00EB  3048               	movlw	72
   313  00EC  3187  27F7  3180   	fcall	clear_ram
   314                           
   315                           ; Clear objects allocated to BANK2
   316  00EF  3020               	movlw	low __pbssBANK2
   317  00F0  0084               	movwf	4
   318  00F1  3001               	movlw	high __pbssBANK2
   319  00F2  0085               	movwf	5
   320  00F3  3047               	movlw	71
   321  00F4  3187  27F7  3180   	fcall	clear_ram
   322                           
   323                           ; Clear objects allocated to BANK3
   324  00F7  30A0               	movlw	low __pbssBANK3
   325  00F8  0084               	movwf	4
   326  00F9  3001               	movlw	high __pbssBANK3
   327  00FA  0085               	movwf	5
   328  00FB  304C               	movlw	76
   329  00FC  3187  27F7  3180   	fcall	clear_ram
   330                           
   331                           ; Clear objects allocated to BANK4
   332  00FF  3040               	movlw	low __pbssBANK4
   333  0100  0084               	movwf	4
   334  0101  3002               	movlw	high __pbssBANK4
   335  0102  0085               	movwf	5
   336  0103  301F               	movlw	31
   337  0104  3187  27F7  3180   	fcall	clear_ram
   338                           
   339                           ;initializer for _ui8_selected_lid
   340  0107  3080               	movlw	128
   341  0108  00D4               	movwf	__pdataBANK0& (0+127)
   342                           
   343                           ; Initialize objects allocated to BANK1
   344  0109  0021               	movlb	1	; select bank1
   345                           
   346                           ;initializer for _ui16_I_cal_Ph1
   347  010A  3001               	movlw	1
   348  010B  00E8               	movwf	__pdataBANK1& (0+127)
   349  010C  01E9               	clrf	(__pdataBANK1+1)& (0+127)
   350                           
   351                           ;initializer for _ui16_I_cal_Ph2
   352  010D  00EA               	movwf	(__pdataBANK1+2)& (0+127)
   353  010E  01EB               	clrf	(__pdataBANK1+3)& (0+127)
   354                           
   355                           ;initializer for _ui16_I_cal_Ph3
   356  010F  00EC               	movwf	(__pdataBANK1+4)& (0+127)
   357  0110  01ED               	clrf	(__pdataBANK1+5)& (0+127)
   358                           
   359                           ;initializer for _wkpoint
   360  0111  00EE               	movwf	(__pdataBANK1+6)& (0+127)
   361                           
   362                           ; Initialize objects allocated to BANK2
   363  0112  0022               	movlb	2	; select bank2
   364                           
   365                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
   366  0113  3080               	movlw	128
   367  0114  00E7               	movwf	__pdataBANK2& (0+127)
   368  0115  3038               	movlw	56
   369  0116  00E8               	movwf	(__pdataBANK2+1)& (0+127)
   370  0117  3001               	movlw	1
   371  0118  00E9               	movwf	(__pdataBANK2+2)& (0+127)
   372  0119  01EA               	clrf	(__pdataBANK2+3)& (0+127)
   373                           
   374                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
   375  011A  00EB               	movwf	(__pdataBANK2+4)& (0+127)
   376                           
   377                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
   378  011B  00EC               	movwf	(__pdataBANK2+5)& (0+127)
   379                           
   380                           ;initializer for _ict_stamp
   381  011C  00ED               	movwf	(__pdataBANK2+6)& (0+127)
   382                           
   383                           ;initializer for _ui8_failure
   384  011D  3007               	movlw	7
   385  011E  00EE               	movwf	(__pdataBANK2+7)& (0+127)
   386  011F                     end_of_initialization:	
   387                           ;End of C runtime variable initialization code
   388                           
   389  011F  0020               	movlb	0
   390  0120  2921               	ljmp	_main	;jump to C main() function
   391  0121                     __pmaintext:	
   392 ;;Data sizes: Strings 0, constant 101, data 16, bss 261, persistent 5 stack 0
   393 ;;Auto spaces:   Size  Autos    Used
   394 ;; COMMON          14     13      13
   395 ;; BANK0           80     40      53
   396 ;; BANK1           80      0      80
   397 ;; BANK2           80      0      79
   398 ;; BANK3           80      0      80
   399 ;; BANK4           80     32      63
   400 ;; BANK5           80      0       0
   401 ;; BANK6            5      0       0
   402 ;;
   403 ;; Pointer list with targets:
   404 ;; ?i1_ADC_Read	unsigned int  size(1) Largest target is 0
   405 ;;
   406 ;; ?i1___lwdiv	unsigned int  size(1) Largest target is 0
   407 ;;
   408 ;; ?i1___wmul	unsigned int  size(1) Largest target is 0
   409 ;;
   410 ;; ?_cksum	unsigned int  size(1) Largest target is 0
   411 ;;
   412 ;; ?___aldiv	long  size(1) Largest target is 0
   413 ;;
   414 ;; ?___lmul	unsigned long  size(1) Largest target is 0
   415 ;;
   416 ;; ?___tmul	unsigned um size(1) Largest target is 0
   417 ;;
   418 ;; ?___ltdiv	unsigned um size(1) Largest target is 0
   419 ;;
   420 ;; ?___awdiv	int  size(1) Largest target is 0
   421 ;;
   422 ;; ?__ELINMIntGetPointer	PTR unsigned char  size(1) Largest target is 11
   423 ;;		 -> _ELINMIntMessageBuffer(BANK4[11]), 
   424 ;;
   425 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   426 ;;
   427 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   428 ;;
   429 ;; ?_ADC_Read	unsigned int  size(1) Largest target is 0
   430 ;;
   431 ;; sp___ELINMIntGetPointer	PTR unsigned char  size(1) Largest target is 11
   432 ;;		 -> _ELINMIntMessageBuffer(BANK4[11]), 
   433 ;;
   434 ;; pt	PTR unsigned char  size(1) Largest target is 11
   435 ;;		 -> NULL(NULL[0]), _ELINMIntMessageBuffer(BANK4[11]), 
   436 ;;
   437 ;;
   438 ;; Critical Paths under _main in COMMON
   439 ;;
   440 ;;   None.
   441 ;;
   442 ;; Critical Paths under _interrupt_handler in COMMON
   443 ;;
   444 ;;   _interrupt_handler->_interrrupt_bldc
   445 ;;   _interrrupt_bldc->i1___lwdiv
   446 ;;   i1_commutate->i1___wmul
   447 ;;   _ELINMIntHandler->__ELINMIntResetProtocol
   448 ;;
   449 ;; Critical Paths under _main in BANK0
   450 ;;
   451 ;;   _main->_EOL
   452 ;;   _EOL->_NegativeAnswer
   453 ;;   _Receive_Diag->__ELINMIntReceiveMessage
   454 ;;   _NegativeAnswer->_Transmit_LIN_8Bytes
   455 ;;   _I_calibrationInit->_ADC_Read
   456 ;;   __ELINMIntReceiveMessage->__ELINMIntSendMessage
   457 ;;   _Transmit_LIN_8Bytes->__ELINMIntSendMessage
   458 ;;   _InitMotorRun->_commutate
   459 ;;   _FILTER_Init->_ADC_Read
   460 ;;   _BVH2_Appl_Layer->___aldiv
   461 ;;   _timer_init->_clear_timer
   462 ;;   _init_ports->_read_eeprom_data
   463 ;;   __ELINMIntSendMessage->__ELINMIntCalcIDParity
   464 ;;   _PWMReadDC->___ltdiv
   465 ;;   _SetDiagAlarm->_PWM_Write_Out
   466 ;;   _DiagInit->_PWM_Write_Out
   467 ;;   _commutate->___wmul
   468 ;;   _Get_Analog_Value->_FILTER_Ubat
   469 ;;   ___ltdiv->___tmul
   470 ;;   ___awdiv->___wmul
   471 ;;   _write_eeprom_data->___lwdiv
   472 ;;
   473 ;; Critical Paths under _interrupt_handler in BANK0
   474 ;;
   475 ;;   _interrrupt_bldc->i1_commutate
   476 ;;
   477 ;; Critical Paths under _main in BANK1
   478 ;;
   479 ;;   None.
   480 ;;
   481 ;; Critical Paths under _interrupt_handler in BANK1
   482 ;;
   483 ;;   None.
   484 ;;
   485 ;; Critical Paths under _main in BANK2
   486 ;;
   487 ;;   None.
   488 ;;
   489 ;; Critical Paths under _interrupt_handler in BANK2
   490 ;;
   491 ;;   None.
   492 ;;
   493 ;; Critical Paths under _main in BANK3
   494 ;;
   495 ;;   None.
   496 ;;
   497 ;; Critical Paths under _interrupt_handler in BANK3
   498 ;;
   499 ;;   None.
   500 ;;
   501 ;; Critical Paths under _main in BANK4
   502 ;;
   503 ;;   _main->_BVH2_Appl_Layer
   504 ;;
   505 ;; Critical Paths under _interrupt_handler in BANK4
   506 ;;
   507 ;;   None.
   508 ;;
   509 ;; Critical Paths under _main in BANK5
   510 ;;
   511 ;;   None.
   512 ;;
   513 ;; Critical Paths under _interrupt_handler in BANK5
   514 ;;
   515 ;;   None.
   516 ;;
   517 ;; Critical Paths under _main in BANK6
   518 ;;
   519 ;;   None.
   520 ;;
   521 ;; Critical Paths under _interrupt_handler in BANK6
   522 ;;
   523 ;;   None.
   524 ;;
   525 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   526 ;;
   527 ;;
   528 ;;Call Graph Tables:
   529 ;;
   530 ;; ---------------------------------------------------------------------------------
   531 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   532 ;; ---------------------------------------------------------------------------------
   533 ;; (0) _main                                                 4     4      0   11774
   534 ;;                                             36 BANK0      4     4      0
   535 ;;                        _system_init
   536 ;;                        _clear_timer
   537 ;;                             ___wmul
   538 ;;                            ___awdiv
   539 ;;                   _Get_Analog_Value
   540 ;;                          _PWMReadDC
   541 ;;                    _BVH2_Appl_Layer
   542 ;;                      _InitMotorStop
   543 ;;                       _InitMotorRun
   544 ;;                       _SetDiagAlarm
   545 ;;                   _read_eeprom_data
   546 ;;                       _Receive_Diag
   547 ;;                                _EOL
   548 ;; ---------------------------------------------------------------------------------
   549 ;; (1) _system_init                                          0     0      0     509
   550 ;;                         _init_ports
   551 ;;                       _EnableMCP201
   552 ;;                __ELINMIntInitialize
   553 ;;                _Oscill_Source_Block
   554 ;;                         _timer_init
   555 ;;                   _PWM_Capture_init
   556 ;;                           _ADC_Init
   557 ;;                           _DiagInit
   558 ;;                        _FILTER_Init
   559 ;;                  _I_calibrationInit
   560 ;;                          _init_bldc
   561 ;; ---------------------------------------------------------------------------------
   562 ;; (1) _EOL                                                 27    27      0    7491
   563 ;;                                             33 BANK0      3     3      0
   564 ;;                                              0 BANK4     24    24      0
   565 ;;                _Transmit_LIN_8Bytes
   566 ;;                   _read_eeprom_data
   567 ;;                     _NegativeAnswer
   568 ;;                              _cksum
   569 ;;                      _InitMotorStop
   570 ;;                           _ADC_Wait
   571 ;;                           _ADC_Read
   572 ;;                            ___lwdiv
   573 ;;                  _write_eeprom_data
   574 ;;                             ___wmul
   575 ;;                          _PWMReadDC
   576 ;;                      _PWM_Write_Out
   577 ;; ---------------------------------------------------------------------------------
   578 ;; (1) _Receive_Diag                                         2     2      0     753
   579 ;;                                             26 BANK0      2     2      0
   580 ;;            __ELINMIntReceiveMessage
   581 ;;                __ELINMIntGetPointer
   582 ;; ---------------------------------------------------------------------------------
   583 ;; (2) _NegativeAnswer                                       1     1      0     957
   584 ;;                                             32 BANK0      1     1      0
   585 ;;                _Transmit_LIN_8Bytes
   586 ;; ---------------------------------------------------------------------------------
   587 ;; (2) _init_bldc                                            0     0      0     136
   588 ;;                       _InitMotorRun
   589 ;; ---------------------------------------------------------------------------------
   590 ;; (2) _I_calibrationInit                                    1     1      0     102
   591 ;;                                             15 BANK0      1     1      0
   592 ;;                   _read_eeprom_data
   593 ;;                           _ADC_Wait
   594 ;;                           _ADC_Read
   595 ;; ---------------------------------------------------------------------------------
   596 ;; (2) __ELINMIntReceiveMessage                              3     1      2     678
   597 ;;                                             23 BANK0      3     1      2
   598 ;;               __ELINMIntSendMessage
   599 ;; ---------------------------------------------------------------------------------
   600 ;; (3) _Transmit_LIN_8Bytes                                  9     1      8     926
   601 ;;                                             23 BANK0      9     1      8
   602 ;;                __ELINMIntGetPointer
   603 ;;               __ELINMIntSendMessage
   604 ;; ---------------------------------------------------------------------------------
   605 ;; (1) _InitMotorRun                                         0     0      0     136
   606 ;;                          _commutate
   607 ;; ---------------------------------------------------------------------------------
   608 ;; (2) _FILTER_Init                                          0     0      0      37
   609 ;;                           _ADC_Wait
   610 ;;                           _ADC_Read
   611 ;; ---------------------------------------------------------------------------------
   612 ;; (1) _BVH2_Appl_Layer                                     38    38      0    1954
   613 ;;                                             26 BANK0      6     6      0
   614 ;;                                              0 BANK4     32    32      0
   615 ;;    _Cb44_Pic_etat_monitor_node_fcn1
   616 ;;       _Cb34_PWM_Detection_node_fcn1
   617 ;;        _Cb56_UbatHandling_node_fcn2
   618 ;;    _Cb1_Current_An___High_node_fcn1
   619 ;;                             ___lmul
   620 ;;                            ___aldiv
   621 ;;                             ___wmul
   622 ;; ---------------------------------------------------------------------------------
   623 ;; (2) _timer_init                                           1     1      0      44
   624 ;;                                             13 BANK0      1     1      0
   625 ;;                        _clear_timer
   626 ;; ---------------------------------------------------------------------------------
   627 ;; (2) _init_ports                                           0     0      0      65
   628 ;;                   _read_eeprom_data
   629 ;; ---------------------------------------------------------------------------------
   630 ;; (4) __ELINMIntSendMessage                                10     5      5     603
   631 ;;                                             13 BANK0     10     5      5
   632 ;;              __ELINMIntCalcIDParity
   633 ;; ---------------------------------------------------------------------------------
   634 ;; (2) _PWMReadDC                                            0     0      0     377
   635 ;;                             ___tmul
   636 ;;                            ___ltdiv
   637 ;; ---------------------------------------------------------------------------------
   638 ;; (2) _cksum                                                8     6      2     139
   639 ;;                                             12 BANK0      8     6      2
   640 ;; ---------------------------------------------------------------------------------
   641 ;; (1) _SetDiagAlarm                                         0     0      0      31
   642 ;;                      _PWM_Write_Out
   643 ;; ---------------------------------------------------------------------------------
   644 ;; (2) _DiagInit                                             0     0      0      31
   645 ;;                      _PWM_Write_Out
   646 ;; ---------------------------------------------------------------------------------
   647 ;; (2) _commutate                                           12    12      0     136
   648 ;;                                             18 BANK0     12    12      0
   649 ;;                             ___wmul
   650 ;; ---------------------------------------------------------------------------------
   651 ;; (1) _Get_Analog_Value                                     0     0      0       0
   652 ;;                        _FILTER_Ubat
   653 ;;                      _FILTER_IPhase
   654 ;;                        _FILTER_Temp
   655 ;; ---------------------------------------------------------------------------------
   656 ;; (2) _ADC_Wait                                             0     0      0       0
   657 ;; ---------------------------------------------------------------------------------
   658 ;; (3) ___tmul                                               9     3      6     136
   659 ;;                                             12 BANK0      9     3      6
   660 ;; ---------------------------------------------------------------------------------
   661 ;; (3) ___ltdiv                                             10     4      6     241
   662 ;;                                             21 BANK0     10     4      6
   663 ;;                             ___tmul (ARG)
   664 ;; ---------------------------------------------------------------------------------
   665 ;; (2) ___aldiv                                             14     6      8     445
   666 ;;                                             12 BANK0     14     6      8
   667 ;; ---------------------------------------------------------------------------------
   668 ;; (1) ___awdiv                                              8     4      4     300
   669 ;;                                             18 BANK0      8     4      4
   670 ;;                             ___wmul (ARG)
   671 ;; ---------------------------------------------------------------------------------
   672 ;; (2) ___lmul                                              12     4      8     136
   673 ;;                                             12 BANK0     12     4      8
   674 ;; ---------------------------------------------------------------------------------
   675 ;; (2) ___lwdiv                                              7     3      4     241
   676 ;;                                             12 BANK0      7     3      4
   677 ;; ---------------------------------------------------------------------------------
   678 ;; (2) ___wmul                                               6     2      4     136
   679 ;;                                             12 BANK0      6     2      4
   680 ;; ---------------------------------------------------------------------------------
   681 ;; (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
   682 ;; ---------------------------------------------------------------------------------
   683 ;; (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
   684 ;; ---------------------------------------------------------------------------------
   685 ;; (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
   686 ;; ---------------------------------------------------------------------------------
   687 ;; (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
   688 ;; ---------------------------------------------------------------------------------
   689 ;; (1) _clear_timer                                          1     1      0      22
   690 ;;                                             12 BANK0      1     1      0
   691 ;; ---------------------------------------------------------------------------------
   692 ;; (2) _PWM_Capture_init                                     1     1      0      22
   693 ;;                                             12 BANK0      1     1      0
   694 ;; ---------------------------------------------------------------------------------
   695 ;; (2) _Oscill_Source_Block                                  0     0      0       0
   696 ;; ---------------------------------------------------------------------------------
   697 ;; (5) __ELINMIntCalcIDParity                                1     1      0     309
   698 ;;                                             12 BANK0      1     1      0
   699 ;; ---------------------------------------------------------------------------------
   700 ;; (2) __ELINMIntInitialize                                  0     0      0       0
   701 ;; ---------------------------------------------------------------------------------
   702 ;; (2) _EnableMCP201                                         3     3      0      72
   703 ;;                                             12 BANK0      3     3      0
   704 ;; ---------------------------------------------------------------------------------
   705 ;; (4) __ELINMIntGetPointer                                  2     1      1      44
   706 ;;                                             12 BANK0      2     1      1
   707 ;; ---------------------------------------------------------------------------------
   708 ;; (2) _write_eeprom_data                                    2     1      1      62
   709 ;;                                             19 BANK0      2     1      1
   710 ;;                            ___lwdiv (ARG)
   711 ;; ---------------------------------------------------------------------------------
   712 ;; (2) _read_eeprom_data                                     2     2      0      65
   713 ;;                                             12 BANK0      2     2      0
   714 ;; ---------------------------------------------------------------------------------
   715 ;; (2) _PWM_Write_Out                                        1     1      0      31
   716 ;;                                             12 BANK0      1     1      0
   717 ;; ---------------------------------------------------------------------------------
   718 ;; (2) _InitMotorStop                                        0     0      0       0
   719 ;; ---------------------------------------------------------------------------------
   720 ;; (2) _FILTER_Temp                                          0     0      0       0
   721 ;; ---------------------------------------------------------------------------------
   722 ;; (2) _FILTER_IPhase                                        0     0      0       0
   723 ;; ---------------------------------------------------------------------------------
   724 ;; (2) _FILTER_Ubat                                         12    12      0       0
   725 ;;                                             12 BANK0     12    12      0
   726 ;; ---------------------------------------------------------------------------------
   727 ;; (2) _ADC_Read                                             3     1      2      37
   728 ;;                                             12 BANK0      3     1      2
   729 ;; ---------------------------------------------------------------------------------
   730 ;; (2) _ADC_Init                                             0     0      0       0
   731 ;; ---------------------------------------------------------------------------------
   732 ;; Estimated maximum stack depth 5
   733 ;; ---------------------------------------------------------------------------------
   734 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   735 ;; ---------------------------------------------------------------------------------
   736 ;; (6) _interrupt_handler                                    0     0      0    1557
   737 ;;                           _PWM_CTRL
   738 ;;                            _Task1ms
   739 ;;                    _interrrupt_bldc
   740 ;;                    _ELINMIntHandler
   741 ;;               _interrupt_PWMCapture
   742 ;; ---------------------------------------------------------------------------------
   743 ;; (7) _interrrupt_bldc                                      6     6      0    1535
   744 ;;                                              7 COMMON     6     6      0
   745 ;;                        i1_commutate
   746 ;;                           _BLDCWait
   747 ;;                         i1_ADC_Wait
   748 ;;                         i1_ADC_Read
   749 ;;                           i1___wmul
   750 ;;                          i1___lwdiv
   751 ;; ---------------------------------------------------------------------------------
   752 ;; (8) i1_commutate                                         12    12      0     372
   753 ;;                                              0 BANK0     12    12      0
   754 ;;                           i1___wmul
   755 ;; ---------------------------------------------------------------------------------
   756 ;; (8) i1_ADC_Wait                                           0     0      0       0
   757 ;; ---------------------------------------------------------------------------------
   758 ;; (7) _ELINMIntHandler                                      4     4      0      22
   759 ;;                                              1 COMMON     4     4      0
   760 ;;             __ELINMIntResetProtocol
   761 ;; ---------------------------------------------------------------------------------
   762 ;; (8) _BLDCWait                                             0     0      0       0
   763 ;; ---------------------------------------------------------------------------------
   764 ;; (8) i1___lwdiv                                            7     3      4     656
   765 ;;                                              0 COMMON     7     3      4
   766 ;; ---------------------------------------------------------------------------------
   767 ;; (8) i1___wmul                                             6     2      4     372
   768 ;;                                              0 COMMON     6     2      4
   769 ;; ---------------------------------------------------------------------------------
   770 ;; (8) i1_ADC_Read                                           3     1      2      98
   771 ;;                                              0 COMMON     3     1      2
   772 ;; ---------------------------------------------------------------------------------
   773 ;; (8) __ELINMIntResetProtocol                               1     1      0      22
   774 ;;                                              0 COMMON     1     1      0
   775 ;; ---------------------------------------------------------------------------------
   776 ;; (7) _interrupt_PWMCapture                                 0     0      0       0
   777 ;; ---------------------------------------------------------------------------------
   778 ;; (7) _PWM_CTRL                                             0     0      0       0
   779 ;; ---------------------------------------------------------------------------------
   780 ;; (7) _Task1ms                                              0     0      0       0
   781 ;; ---------------------------------------------------------------------------------
   782 ;; Estimated maximum stack depth 8
   783 ;; ---------------------------------------------------------------------------------
   784 ;; Call Graph Graphs:
   785 ;; _main (ROOT)
   786 ;;   _system_init
   787 ;;     _init_ports
   788 ;;       _read_eeprom_data
   789 ;;     _EnableMCP201
   790 ;;     __ELINMIntInitialize
   791 ;;     _Oscill_Source_Block
   792 ;;     _timer_init
   793 ;;       _clear_timer
   794 ;;     _PWM_Capture_init
   795 ;;     _ADC_Init
   796 ;;     _DiagInit
   797 ;;       _PWM_Write_Out
   798 ;;     _FILTER_Init
   799 ;;       _ADC_Wait
   800 ;;       _ADC_Read
   801 ;;     _I_calibrationInit
   802 ;;       _read_eeprom_data
   803 ;;       _ADC_Wait
   804 ;;       _ADC_Read
   805 ;;     _init_bldc
   806 ;;       _InitMotorRun
   807 ;;         _commutate
   808 ;;           ___wmul
   809 ;;   _clear_timer
   810 ;;   ___wmul
   811 ;;   ___awdiv
   812 ;;     ___wmul (ARG)
   813 ;;   _Get_Analog_Value
   814 ;;     _FILTER_Ubat
   815 ;;     _FILTER_IPhase
   816 ;;     _FILTER_Temp
   817 ;;   _PWMReadDC
   818 ;;     ___tmul
   819 ;;     ___ltdiv
   820 ;;       ___tmul (ARG)
   821 ;;   _BVH2_Appl_Layer
   822 ;;     _Cb44_Pic_etat_monitor_node_fcn1
   823 ;;     _Cb34_PWM_Detection_node_fcn1
   824 ;;     _Cb56_UbatHandling_node_fcn2
   825 ;;     _Cb1_Current_An___High_node_fcn1
   826 ;;     ___lmul
   827 ;;     ___aldiv
   828 ;;     ___wmul
   829 ;;   _InitMotorStop
   830 ;;   _InitMotorRun
   831 ;;     _commutate
   832 ;;       ___wmul
   833 ;;   _SetDiagAlarm
   834 ;;     _PWM_Write_Out
   835 ;;   _read_eeprom_data
   836 ;;   _Receive_Diag
   837 ;;     __ELINMIntReceiveMessage
   838 ;;       __ELINMIntSendMessage
   839 ;;         __ELINMIntCalcIDParity
   840 ;;     __ELINMIntGetPointer
   841 ;;   _EOL
   842 ;;     _Transmit_LIN_8Bytes
   843 ;;       __ELINMIntGetPointer
   844 ;;       __ELINMIntSendMessage
   845 ;;         __ELINMIntCalcIDParity
   846 ;;     _read_eeprom_data
   847 ;;     _NegativeAnswer
   848 ;;       _Transmit_LIN_8Bytes
   849 ;;         __ELINMIntGetPointer
   850 ;;         __ELINMIntSendMessage
   851 ;;           __ELINMIntCalcIDParity
   852 ;;     _cksum
   853 ;;     _InitMotorStop
   854 ;;     _ADC_Wait
   855 ;;     _ADC_Read
   856 ;;     ___lwdiv
   857 ;;     _write_eeprom_data
   858 ;;       ___lwdiv (ARG)
   859 ;;     ___wmul
   860 ;;     _PWMReadDC
   861 ;;       ___tmul
   862 ;;       ___ltdiv
   863 ;;         ___tmul (ARG)
   864 ;;     _PWM_Write_Out
   865 ;;
   866 ;; _interrupt_handler (ROOT)
   867 ;;   _PWM_CTRL
   868 ;;   _Task1ms
   869 ;;   _interrrupt_bldc
   870 ;;     i1_commutate
   871 ;;       i1___wmul
   872 ;;     _BLDCWait
   873 ;;     i1_ADC_Wait
   874 ;;     i1_ADC_Read
   875 ;;     i1___wmul
   876 ;;     i1___lwdiv
   877 ;;   _ELINMIntHandler
   878 ;;     __ELINMIntResetProtocol
   879 ;;   _interrupt_PWMCapture
   880 ;;
   881 ;; Address spaces:
   882 ;;Name               Size   Autos  Total    Cost      Usage
   883 ;;BIGRAM             1F0      0       0       0        0.0%
   884 ;;EEDATA             100      0       0       0        0.0%
   885 ;;NULL                 0      0       0       0        0.0%
   886 ;;CODE                 0      0       0       0        0.0%
   887 ;;BITCOMMON            E      0       0       1        0.0%
   888 ;;BITSFR0              0      0       0       1        0.0%
   889 ;;SFR0                 0      0       0       1        0.0%
   890 ;;COMMON               E      D       D       2       92.9%
   891 ;;BITSFR1              0      0       0       2        0.0%
   892 ;;SFR1                 0      0       0       2        0.0%
   893 ;;BITSFR2              0      0       0       3        0.0%
   894 ;;SFR2                 0      0       0       3        0.0%
   895 ;;STACK                0      0       D       3        0.0%
   896 ;;BITSFR3              0      0       0       4        0.0%
   897 ;;SFR3                 0      0       0       4        0.0%
   898 ;;ABS                  0      0     170       4        0.0%
   899 ;;BITBANK0            50      0       1       5        1.3%
   900 ;;BITSFR4              0      0       0       5        0.0%
   901 ;;SFR4                 0      0       0       5        0.0%
   902 ;;BANK0               50     28      35       6       66.3%
   903 ;;BITSFR5              0      0       0       6        0.0%
   904 ;;SFR5                 0      0       0       6        0.0%
   905 ;;BITBANK1            50      0       0       7        0.0%
   906 ;;BITSFR6              0      0       0       7        0.0%
   907 ;;SFR6                 0      0       0       7        0.0%
   908 ;;BANK1               50      0      50       8      100.0%
   909 ;;BITSFR7              0      0       0       8        0.0%
   910 ;;SFR7                 0      0       0       8        0.0%
   911 ;;BITBANK2            50      0       0       9        0.0%
   912 ;;BITSFR8              0      0       0       9        0.0%
   913 ;;SFR8                 0      0       0       9        0.0%
   914 ;;BANK2               50      0      4F      10       98.8%
   915 ;;BITSFR9              0      0       0      10        0.0%
   916 ;;SFR9                 0      0       0      10        0.0%
   917 ;;BITBANK3            50      0       0      11        0.0%
   918 ;;BITSFR10             0      0       0      11        0.0%
   919 ;;SFR10                0      0       0      11        0.0%
   920 ;;BANK3               50      0      50      12      100.0%
   921 ;;BITSFR11             0      0       0      12        0.0%
   922 ;;SFR11                0      0       0      12        0.0%
   923 ;;BITBANK4            50      0       0      13        0.0%
   924 ;;BITSFR12             0      0       0      13        0.0%
   925 ;;SFR12                0      0       0      13        0.0%
   926 ;;BANK4               50     20      3F      14       78.8%
   927 ;;BITSFR13             0      0       0      14        0.0%
   928 ;;SFR13                0      0       0      14        0.0%
   929 ;;BITBANK5            50      0       0      15        0.0%
   930 ;;BITSFR14             0      0       0      15        0.0%
   931 ;;SFR14                0      0       0      15        0.0%
   932 ;;BANK5               50      0       0      16        0.0%
   933 ;;BITSFR15             0      0       0      16        0.0%
   934 ;;SFR15                0      0       0      16        0.0%
   935 ;;BITBANK6             5      0       0      17        0.0%
   936 ;;BITSFR16             0      0       0      17        0.0%
   937 ;;SFR16                0      0       0      17        0.0%
   938 ;;BANK6                5      0       0      18        0.0%
   939 ;;BITSFR17             0      0       0      18        0.0%
   940 ;;SFR17                0      0       0      18        0.0%
   941 ;;BITSFR18             0      0       0      19        0.0%
   942 ;;SFR18                0      0       0      19        0.0%
   943 ;;DATA                 0      0     17D      19        0.0%
   944 ;;BITSFR19             0      0       0      20        0.0%
   945 ;;SFR19                0      0       0      20        0.0%
   946 ;;BITSFR20             0      0       0      21        0.0%
   947 ;;SFR20                0      0       0      21        0.0%
   948 ;;BITSFR21             0      0       0      22        0.0%
   949 ;;SFR21                0      0       0      22        0.0%
   950 ;;BITSFR22             0      0       0      23        0.0%
   951 ;;SFR22                0      0       0      23        0.0%
   952 ;;BITSFR23             0      0       0      24        0.0%
   953 ;;SFR23                0      0       0      24        0.0%
   954 ;;BITSFR24             0      0       0      25        0.0%
   955 ;;SFR24                0      0       0      25        0.0%
   956 ;;BITSFR25             0      0       0      26        0.0%
   957 ;;SFR25                0      0       0      26        0.0%
   958 ;;BITSFR26             0      0       0      27        0.0%
   959 ;;SFR26                0      0       0      27        0.0%
   960 ;;BITSFR27             0      0       0      28        0.0%
   961 ;;SFR27                0      0       0      28        0.0%
   962 ;;BITSFR28             0      0       0      29        0.0%
   963 ;;SFR28                0      0       0      29        0.0%
   964 ;;BITSFR29             0      0       0      30        0.0%
   965 ;;SFR29                0      0       0      30        0.0%
   966 ;;BITSFR30             0      0       0      31        0.0%
   967 ;;SFR30                0      0       0      31        0.0%
   968 ;;BITSFR31             0      0       0      32        0.0%
   969 ;;SFR31                0      0       0      32        0.0%
   970                           
   971                           
   972 ;; *************** function _main *****************
   973 ;; Defined at:
   974 ;;		line 621 in file "../main.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;		None               void
   981 ;; Registers used:
   982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 17F/0
   985 ;;		On exit  : 1F/2
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   988 ;;      Params:         0       0       0       0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0       0       0       0
   990 ;;      Temps:          0       4       0       0       0       0       0       0
   991 ;;      Totals:         0       4       0       0       0       0       0       0
   992 ;;Total ram usage:        4 bytes
   993 ;; Hardware stack levels required when called:    9
   994 ;; This function calls:
   995 ;;		_system_init
   996 ;;		_clear_timer
   997 ;;		___wmul
   998 ;;		___awdiv
   999 ;;		_Get_Analog_Value
  1000 ;;		_PWMReadDC
  1001 ;;		_BVH2_Appl_Layer
  1002 ;;		_InitMotorStop
  1003 ;;		_InitMotorRun
  1004 ;;		_SetDiagAlarm
  1005 ;;		_read_eeprom_data
  1006 ;;		_Receive_Diag
  1007 ;;		_EOL
  1008 ;; This function is called by:
  1009 ;;		Startup code after reset
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012  0121                     _main:	
  1013                           
  1014                           ;main.c: 631: system_init( );
  1015                           
  1016                           ; Regs used in _main: [allreg]
  1017  0121  2728  3180         	fcall	_system_init
  1018                           
  1019                           ;main.c: 632: clear_timer( 4 );
  1020  0123  3004               	movlw	4
  1021  0124  236C  3180         	fcall	_clear_timer
  1022                           
  1023                           ;main.c: 633: ui8_lastTaskvalue = 0;
  1024  0126  0022               	movlb	2	; select bank2
  1025  0127  01DF               	clrf	_ui8_lastTaskvalue^(0+256)
  1026  0128                     l31323:	
  1027                           
  1028                           ;main.c: 686: {
  1029                           ;main.c: 688: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  1030  0128  0021               	movlb	1	; select bank1
  1031  0129  0862               	movf	_ui8_Task_Cont1ms^(0+128),w
  1032  012A  0020               	movlb	0	; select bank0
  1033  012B  00C4               	movwf	??_main
  1034  012C  01C5               	clrf	??_main+1
  1035  012D  0845               	movf	??_main+1,w
  1036  012E  00C7               	movwf	??_main+3
  1037  012F  0022               	movlb	2	; select bank2
  1038  0130  085F               	movf	_ui8_lastTaskvalue^(0+256),w
  1039  0131  0020               	movlb	0	; select bank0
  1040  0132  0244               	subwf	??_main,w
  1041  0133  00C6               	movwf	??_main+2
  1042  0134  1C03               	skipc
  1043  0135  03C7               	decf	??_main+3,f
  1044  0136  0447               	iorwf	??_main+3,w
  1045  0137  1903               	skipnz
  1046  0138  2928               	goto	l31323
  1047                           
  1048                           ;main.c: 690: {
  1049                           ;main.c: 696: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  1050  0139  0021               	movlb	1	; select bank1
  1051  013A  0862               	movf	_ui8_Task_Cont1ms^(0+128),w
  1052  013B  0022               	movlb	2	; select bank2
  1053  013C  00DF               	movwf	_ui8_lastTaskvalue^(0+256)
  1054                           
  1055                           ;main.c: 699: ui8_Task_Cont3ms++;
  1056  013D  0AD7               	incf	_ui8_Task_Cont3ms^(0+256),f
  1057                           
  1058                           ;main.c: 700: ui8_Task_Cont5ms++;
  1059  013E  0AD8               	incf	_ui8_Task_Cont5ms^(0+256),f
  1060                           
  1061                           ;main.c: 701: ui8_Task_Cont100ms++;
  1062  013F  0021               	movlb	1	; select bank1
  1063  0140  0AE1               	incf	_ui8_Task_Cont100ms^(0+128),f
  1064                           
  1065                           ;main.c: 760: if( ui8_error_Flags.bits.B1 == 1)
  1066  0141  1CE5               	btfss	_ui8_error_Flags^(0+128),1
  1067  0142  294A               	goto	l31339
  1068                           
  1069                           ;main.c: 762: {
  1070                           ;main.c: 808: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 2;
  1071  0143  30C8               	movlw	200
  1072  0144  0020               	movlb	0	; select bank0
  1073  0145  009B               	movwf	27	;volatile
  1074                           
  1075                           ;main.c: 809: ui8_duty_cycle_BLDC = ui8_duty_cycle_mat * 2;
  1076  0146  0021               	movlb	1	; select bank1
  1077  0147  3564               	lslf	_ui8_duty_cycle_mat^(0+128),w
  1078  0148  0020               	movlb	0	; select bank0
  1079  0149  2961               	goto	L1
  1080  014A                     l31339:	
  1081                           ;main.c: 818: }
  1082                           
  1083                           
  1084                           ;main.c: 821: else
  1085                           ;main.c: 822: {
  1086                           ;main.c: 869: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  1087  014A  307D               	movlw	125
  1088  014B  0020               	movlb	0	; select bank0
  1089  014C  009B               	movwf	27	;volatile
  1090                           
  1091                           ;main.c: 870: ui8_duty_cycle_BLDC = ui8_duty_cycle_mat * 5 / 4;
  1092  014D  3004               	movlw	4
  1093  014E  00B2               	movwf	?___awdiv
  1094  014F  01B3               	clrf	?___awdiv+1
  1095  0150  0021               	movlb	1	; select bank1
  1096  0151  0864               	movf	_ui8_duty_cycle_mat^(0+128),w
  1097  0152  0020               	movlb	0	; select bank0
  1098  0153  00AC               	movwf	?___wmul
  1099  0154  3005               	movlw	5
  1100  0155  01AD               	clrf	?___wmul+1
  1101  0156  00AE               	movwf	?___wmul+2
  1102  0157  01AF               	clrf	?___wmul+3
  1103  0158  238D  3180         	fcall	___wmul
  1104  015A  082D               	movf	?___wmul+1,w
  1105  015B  00B5               	movwf	?___awdiv+3
  1106  015C  082C               	movf	?___wmul,w
  1107  015D  00B4               	movwf	?___awdiv+2
  1108  015E  225A  3180         	fcall	___awdiv
  1109  0160  0832               	movf	?___awdiv,w
  1110  0161                     L1:	
  1111  0161  00D0               	movwf	_ui8_duty_cycle_BLDC
  1112                           
  1113                           ;main.c: 880: }
  1114                           ;main.c: 936: Get_Analog_Value( );
  1115  0162  23A2  3180         	fcall	_Get_Analog_Value
  1116                           
  1117                           ;main.c: 982: if( ui8_Task_Cont3ms > 2 )
  1118  0164  3003               	movlw	3
  1119  0165  0022               	movlb	2	; select bank2
  1120  0166  0257               	subwf	_ui8_Task_Cont3ms^(0+256),w
  1121  0167  1803               	btfsc	3,0
  1122                           
  1123                           ;main.c: 984: {
  1124                           ;main.c: 986: ui8_Task_Cont3ms = 0;
  1125  0168  01D7               	clrf	_ui8_Task_Cont3ms^(0+256)
  1126                           
  1127                           ;main.c: 1021: }
  1128                           ;main.c: 1027: if( ui8_Task_Cont5ms > 4 )
  1129  0169  3005               	movlw	5
  1130  016A  0258               	subwf	_ui8_Task_Cont5ms^(0+256),w
  1131  016B  1C03               	skipc
  1132  016C  2A32               	goto	l31409
  1133                           
  1134                           ;main.c: 1029: {
  1135                           ;main.c: 1033: ui8_Task_Cont5ms = 0;
  1136  016D  01D8               	clrf	_ui8_Task_Cont5ms^(0+256)
  1137  016E  0064               	clrwdt	;#
  1138                           
  1139                           ;main.c: 1041: ui8_PWM_dc_mat = PWMReadDC( );
  1140  016F  2634  3180         	fcall	_PWMReadDC
  1141  0171  0021               	movlb	1	; select bank1
  1142  0172  00DE               	movwf	_ui8_PWM_dc_mat^(0+128)
  1143                           
  1144                           ;main.c: 1042: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  1145  0173  0023               	movlb	3	; select bank3
  1146  0174  085B               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  1147  0175  0022               	movlb	2	; select bank2
  1148  0176  00AE               	movwf	(_ui16_PWM_Freq_mat+1)^(0+256)
  1149  0177  0023               	movlb	3	; select bank3
  1150  0178  085A               	movf	_ui16_PWM_Freq_In^(0+384),w
  1151  0179  0022               	movlb	2	; select bank2
  1152  017A  00AD               	movwf	_ui16_PWM_Freq_mat^(0+256)
  1153                           
  1154                           ;main.c: 1043: ui16_Speed_mat = ui16_speed_fil;
  1155  017B  0021               	movlb	1	; select bank1
  1156  017C  083D               	movf	(_ui16_speed_fil+1)^(0+128),w
  1157  017D  00B3               	movwf	(_ui16_Speed_mat+1)^(0+128)
  1158  017E  083C               	movf	_ui16_speed_fil^(0+128),w
  1159  017F  00B2               	movwf	_ui16_Speed_mat^(0+128)
  1160                           
  1161                           ;main.c: 1044: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  1162  0180  0023               	movlb	3	; select bank3
  1163  0181  0859               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  1164  0182  00E5               	movwf	(_ui16_mat_inpTemp+1)^(0+384)
  1165  0183  0858               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  1166  0184  00E4               	movwf	_ui16_mat_inpTemp^(0+384)
  1167                           
  1168                           ;main.c: 1045: ui8_Ki_mat = 5;
  1169  0185  3005               	movlw	5
  1170  0186  00E6               	movwf	_ui8_Ki_mat^(0+384)
  1171  0187  01E7               	clrf	(_ui8_Ki_mat+1)^(0+384)
  1172                           
  1173                           ;main.c: 1046: ui8_Kp_mat = 0;
  1174  0188  0022               	movlb	2	; select bank2
  1175  0189  01D3               	clrf	_ui8_Kp_mat^(0+256)
  1176                           
  1177                           ;main.c: 1056: if( ui8_error_Flags.bits.B1 == 1 )
  1178  018A  0021               	movlb	1	; select bank1
  1179  018B  1CE5               	btfss	_ui8_error_Flags^(0+128),1
  1180  018C  29A3               	goto	l31371
  1181                           
  1182                           ;main.c: 1058: {
  1183                           ;main.c: 1061: ui16_Speed_demand_mat = ( PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] )>>1;
  1184  018D  365E               	lsrf	_ui8_PWM_dc_mat^(0+128),w
  1185  018E  3E2D               	addlw	low (_PWM_trans_table| (0+32768))
  1186  018F  3180               	movlp	high __stringtab
  1187  0190  000A               	callw
  1188  0191                     	pagesel	$
  1189  0191  3689               	lsrf	9,f
  1190  0192  0023               	movlb	3	; select bank3
  1191  0193  00DC               	movwf	_ui16_Speed_demand_mat^(0+384)
  1192  0194  308C               	movlw	low ((_PWM_trans_table| (0+32768)+95))
  1193  0195  01DD               	clrf	(_ui16_Speed_demand_mat+1)^(0+384)
  1194                           
  1195                           ;main.c: 1064: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] )>>1;
  1196  0196  3180               	movlp	high __stringtab
  1197  0197  000A               	callw
  1198  0198                     	pagesel	$
  1199  0198  3689               	lsrf	9,f
  1200  0199  00DE               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  1201  019A  3038               	movlw	low ((_PWM_trans_table| (0+32768)+11))
  1202  019B  01DF               	clrf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  1203                           
  1204                           ;main.c: 1067: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] )>>1;
  1205  019C  3180               	movlp	high __stringtab
  1206  019D  000A               	callw
  1207  019E  3180               	pagesel	$
  1208  019F  3689               	lsrf	9,f
  1209  01A0  00E0               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  1210  01A1  01E1               	clrf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  1211                           
  1212                           ;main.c: 1069: }
  1213  01A2  29DC               	goto	l31373
  1214  01A3                     l31371:	
  1215                           
  1216                           ;main.c: 1072: else
  1217                           ;main.c: 1073: {
  1218                           ;main.c: 1076: ui16_Speed_demand_mat = PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] * 4 / 5;
  1219  01A3  3005               	movlw	5
  1220  01A4  0020               	movlb	0	; select bank0
  1221  01A5  00B2               	movwf	?___awdiv
  1222  01A6  01B3               	clrf	?___awdiv+1
  1223  01A7  0021               	movlb	1	; select bank1
  1224  01A8  365E               	lsrf	_ui8_PWM_dc_mat^(0+128),w
  1225  01A9  3E2D               	addlw	low (_PWM_trans_table| (0+32768))
  1226  01AA  3180               	movlp	high __stringtab
  1227  01AB  000A               	callw
  1228  01AC  3180               	pagesel	$
  1229  01AD  0020               	movlb	0	; select bank0
  1230  01AE  2786  3180         	fcall	PL16	;call to abstracted procedure
  1231  01B0  225A               	fcall	___awdiv
  1232  01B1  0833               	movf	?___awdiv+1,w
  1233  01B2  0023               	movlb	3	; select bank3
  1234  01B3  00DD               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  1235  01B4  0020               	movlb	0	; select bank0
  1236  01B5  0832               	movf	?___awdiv,w
  1237  01B6  0023               	movlb	3	; select bank3
  1238  01B7  00DC               	movwf	_ui16_Speed_demand_mat^(0+384)
  1239                           
  1240                           ;main.c: 1079: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] ) * 4 / 5;
  1241  01B8  3005               	movlw	5
  1242  01B9  0020               	movlb	0	; select bank0
  1243  01BA  00B2               	movwf	?___awdiv
  1244  01BB  308C               	movlw	low ((_PWM_trans_table| (0+32768)+95))
  1245  01BC  01B3               	clrf	?___awdiv+1
  1246  01BD  3180               	movlp	high __stringtab
  1247  01BE  000A               	callw
  1248  01BF  3180               	pagesel	$
  1249  01C0  2786  3180         	fcall	PL16	;call to abstracted procedure
  1250  01C2  225A               	fcall	___awdiv
  1251  01C3  0833               	movf	?___awdiv+1,w
  1252  01C4  0023               	movlb	3	; select bank3
  1253  01C5  00DF               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  1254  01C6  0020               	movlb	0	; select bank0
  1255  01C7  0832               	movf	?___awdiv,w
  1256  01C8  0023               	movlb	3	; select bank3
  1257  01C9  00DE               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  1258                           
  1259                           ;main.c: 1082: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] ) * 4 / 5;
  1260  01CA  3005               	movlw	5
  1261  01CB  0020               	movlb	0	; select bank0
  1262  01CC  00B2               	movwf	?___awdiv
  1263  01CD  3038               	movlw	low ((_PWM_trans_table| (0+32768)+11))
  1264  01CE  01B3               	clrf	?___awdiv+1
  1265  01CF  3180               	movlp	high __stringtab
  1266  01D0  000A               	callw
  1267  01D1  3180               	pagesel	$
  1268  01D2  2786  3180         	fcall	PL16	;call to abstracted procedure
  1269  01D4  225A               	fcall	___awdiv
  1270  01D5  0833               	movf	?___awdiv+1,w
  1271  01D6  0023               	movlb	3	; select bank3
  1272  01D7  00E1               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  1273  01D8  0020               	movlb	0	; select bank0
  1274  01D9  0832               	movf	?___awdiv,w
  1275  01DA  0023               	movlb	3	; select bank3
  1276  01DB  00E0               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  1277  01DC                     l31373:	
  1278                           
  1279                           ;main.c: 1084: }
  1280                           ;main.c: 1119: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  1281  01DC  0022               	movlb	2	; select bank2
  1282  01DD  0830               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  1283  01DE  0020               	movlb	0	; select bank0
  1284  01DF  00C5               	movwf	??_main+1
  1285  01E0  0022               	movlb	2	; select bank2
  1286  01E1  082F               	movf	_ui16_fir_Bat_mittel^(0+256),w
  1287  01E2  0020               	movlb	0	; select bank0
  1288  01E3  00C4               	movwf	??_main
  1289  01E4  36C5               	lsrf	??_main+1,f
  1290  01E5  0CC4               	rrf	??_main,f
  1291  01E6  36C5               	lsrf	??_main+1,f
  1292  01E7  0CC4               	rrf	??_main,f
  1293  01E8  0844               	movf	??_main,w
  1294  01E9  0021               	movlb	1	; select bank1
  1295  01EA  00C0               	movwf	_ui8_BattVolt_mat^(0+128)
  1296  01EB  01C1               	clrf	(_ui8_BattVolt_mat+1)^(0+128)
  1297                           
  1298                           ;main.c: 1120: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  1299  01EC  0022               	movlb	2	; select bank2
  1300  01ED  0832               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  1301  01EE  0021               	movlb	1	; select bank1
  1302  01EF  00B9               	movwf	(_ui16_mat_Current+1)^(0+128)
  1303  01F0  0022               	movlb	2	; select bank2
  1304  01F1  0831               	movf	_ui16_fir_IPhase_mean^(0+256),w
  1305  01F2  0021               	movlb	1	; select bank1
  1306  01F3  00B8               	movwf	_ui16_mat_Current^(0+128)
  1307                           
  1308                           ;main.c: 1121: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  1309  01F4  3000               	movlw	0
  1310  01F5  0020               	movlb	0	; select bank0
  1311  01F6  184B               	btfsc	_MotorFlags,0
  1312  01F7  3001               	movlw	1
  1313  01F8  0021               	movlb	1	; select bank1
  1314  01F9  00D8               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  1315                           
  1316                           ;main.c: 1132: bool_ControlLoopMode = 0;
  1317  01FA  01D4               	clrf	_bool_ControlLoopMode^(0+128)
  1318                           
  1319                           ;main.c: 1140: BVH2_Appl_Layer( );
  1320  01FB  3191  216A  3180   	fcall	_BVH2_Appl_Layer
  1321                           
  1322                           ;main.c: 1143: ui8_ResetMatlab = 0;
  1323  01FE  0021               	movlb	1	; select bank1
  1324  01FF  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  1325                           
  1326                           ;main.c: 1149: if( ui8_duty_cycle_mat == 0 )
  1327  0200  08E4               	movf	_ui8_duty_cycle_mat^(0+128),f
  1328  0201  1D03               	skipz
  1329  0202  2A06               	goto	l31389
  1330                           
  1331                           ;main.c: 1151: {
  1332                           ;main.c: 1153: InitMotorStop( );
  1333  0203  235E  3180         	fcall	_InitMotorStop
  1334                           
  1335                           ;main.c: 1156: }
  1336  0205  2A08               	goto	l31391
  1337  0206                     l31389:	
  1338                           
  1339                           ;main.c: 1159: else
  1340                           ;main.c: 1160: {
  1341                           ;main.c: 1162: InitMotorRun( );
  1342  0206  240F  3180         	fcall	_InitMotorRun
  1343  0208                     l31391:	
  1344                           
  1345                           ;main.c: 1165: }
  1346                           ;main.c: 1172: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  1347  0208  0022               	movlb	2	; select bank2
  1348  0209  084E               	movf	_bool_PWMin_err_Alarm^(0+256),w
  1349  020A  0021               	movlb	1	; select bank1
  1350  020B  1065               	bcf	_ui8_error_Flags^(0+128),0
  1351  020C  1D03               	skipz
  1352  020D  1465               	bsf	_ui8_error_Flags^(0+128),0
  1353                           
  1354                           ;main.c: 1173: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  1355  020E  0853               	movf	_bool_CPU_TempAlarm^(0+128),w
  1356  020F  10E5               	bcf	_ui8_error_Flags^(0+128),1
  1357  0210  1D03               	skipz
  1358  0211  14E5               	bsf	_ui8_error_Flags^(0+128),1
  1359                           
  1360                           ;main.c: 1174: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  1361  0212  0022               	movlb	2	; select bank2
  1362  0213  084C               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  1363  0214  0021               	movlb	1	; select bank1
  1364  0215  13E5               	bcf	_ui8_error_Flags^(0+128),7
  1365  0216  1D03               	skipz
  1366  0217  17E5               	bsf	_ui8_error_Flags^(0+128),7
  1367                           
  1368                           ;main.c: 1175: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  1369  0218  0856               	movf	_bool_HighCurrentAlarm^(0+128),w
  1370  0219  1165               	bcf	_ui8_error_Flags^(0+128),2
  1371  021A  1D03               	skipz
  1372  021B  1565               	bsf	_ui8_error_Flags^(0+128),2
  1373                           
  1374                           ;main.c: 1176: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  1375  021C  0857               	movf	_bool_MotorStalled^(0+128),w
  1376  021D  11E5               	bcf	_ui8_error_Flags^(0+128),3
  1377  021E  1D03               	skipz
  1378  021F  15E5               	bsf	_ui8_error_Flags^(0+128),3
  1379                           
  1380                           ;main.c: 1177: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  1381  0220  0855               	movf	_bool_DryRunningAlarm^(0+128),w
  1382  0221  1265               	bcf	_ui8_error_Flags^(0+128),4
  1383  0222  1D03               	skipz
  1384  0223  1665               	bsf	_ui8_error_Flags^(0+128),4
  1385                           
  1386                           ;main.c: 1178: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  1387  0224  0022               	movlb	2	; select bank2
  1388  0225  084F               	movf	_bool_UbatAlarm^(0+256),w
  1389  0226  0021               	movlb	1	; select bank1
  1390  0227  1365               	bcf	_ui8_error_Flags^(0+128),6
  1391  0228  1D03               	skipz
  1392  0229  1765               	bsf	_ui8_error_Flags^(0+128),6
  1393                           
  1394                           ;main.c: 1179: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  1395  022A  0022               	movlb	2	; select bank2
  1396  022B  084D               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  1397  022C  0021               	movlb	1	; select bank1
  1398  022D  12E5               	bcf	_ui8_error_Flags^(0+128),5
  1399  022E  1D03               	skipz
  1400  022F  16E5               	bsf	_ui8_error_Flags^(0+128),5
  1401                           
  1402                           ;main.c: 1184: MotorFlags.bits.B0 = 0;
  1403  0230  0020               	movlb	0	; select bank0
  1404  0231  104B               	bcf	_MotorFlags,0
  1405  0232                     l31409:	
  1406                           
  1407                           ;main.c: 1240: }
  1408                           ;main.c: 1246: if( ui8_Task_Cont100ms == 25 )
  1409  0232  0021               	movlb	1	; select bank1
  1410  0233  0861               	movf	_ui8_Task_Cont100ms^(0+128),w
  1411  0234  3A19               	xorlw	25
  1412  0235  1D03               	skipz
  1413  0236  2A43               	goto	l31419
  1414                           
  1415                           ;main.c: 1248: {
  1416                           ;main.c: 1259: SetDiagAlarm( );
  1417  0237  260D  3180         	fcall	_SetDiagAlarm
  1418                           
  1419                           ;main.c: 1298: if ((read_eeprom_data(0x55)==0x55) || (RC5 == 0))
  1420  0239  3055               	movlw	85
  1421  023A  2322  3180         	fcall	_read_eeprom_data
  1422  023C  3A55               	xorlw	85
  1423  023D  1D03               	btfss	3,2
  1424  023E  1E8E               	btfss	14,5
  1425  023F  2A43               	goto	l31419
  1426                           
  1427                           ;main.c: 1307: else
  1428                           ;main.c: 1308: {
  1429                           ;main.c: 1311: Receive_Diag(0x11);
  1430  0240  3011               	movlw	17
  1431  0241  26C1  3180         	fcall	_Receive_Diag
  1432  0243                     l31419:	
  1433                           
  1434                           ;main.c: 1315: }
  1435                           ;main.c: 1323: }
  1436                           ;main.c: 1329: if( ui8_Task_Cont100ms == 37 )
  1437  0243  0021               	movlb	1	; select bank1
  1438  0244  0861               	movf	_ui8_Task_Cont100ms^(0+128),w
  1439  0245  3A25               	xorlw	37
  1440  0246  1D03               	skipz
  1441  0247  2A52               	goto	l31431
  1442                           
  1443                           ;main.c: 1331: {
  1444                           ;main.c: 1337: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  1445  0248  3055               	movlw	85
  1446  0249  2322  3180         	fcall	_read_eeprom_data
  1447  024B  3A55               	xorlw	85
  1448  024C  1D03               	btfss	3,2
  1449  024D  1E8E               	btfss	14,5
  1450  024E  2A52               	goto	l31431
  1451                           
  1452                           ;main.c: 1346: else
  1453                           ;main.c: 1347: {
  1454                           ;main.c: 1350: EOL();
  1455  024F  3189  2117  3180   	fcall	_EOL
  1456  0252                     l31431:	
  1457                           
  1458                           ;main.c: 1461: }
  1459                           ;main.c: 1467: if( ui8_Task_Cont100ms > 100 )
  1460  0252  3065               	movlw	101
  1461  0253  0021               	movlb	1	; select bank1
  1462  0254  0261               	subwf	_ui8_Task_Cont100ms^(0+128),w
  1463  0255  1803               	btfsc	3,0
  1464                           
  1465                           ;main.c: 1469: {
  1466                           ;main.c: 1473: ui8_Task_Cont100ms = 0;
  1467  0256  01E1               	clrf	_ui8_Task_Cont100ms^(0+128)
  1468                           
  1469                           ;main.c: 1513: }
  1470                           ;main.c: 1541: bool_start_demand_mat = 0;
  1471  0257  0022               	movlb	2	; select bank2
  1472  0258  01D0               	clrf	_bool_start_demand_mat^(0+256)
  1473                           
  1474                           ;main.c: 1547: }
  1475  0259  2928               	goto	l31323
  1476  025A                     __end_of_main:	
  1477  025A                     __ptext2053:	
  1478 ;; =============== function ___aldiv ends ============
  1479                           
  1480                           
  1481 ;; *************** function ___awdiv *****************
  1482 ;; Defined at:
  1483 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\awdiv.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  divisor         2   18[BANK0 ] int 
  1486 ;;  dividend        2   20[BANK0 ] int 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  quotient        2   24[BANK0 ] int 
  1489 ;;  sign            1   23[BANK0 ] unsigned char 
  1490 ;;  counter         1   22[BANK0 ] unsigned char 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  2   18[BANK0 ] int 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0
  1495 ;; Tracked objects:
  1496 ;;		On entry : 1F/0
  1497 ;;		On exit  : 1F/0
  1498 ;;		Unchanged: FFFE0/0
  1499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1500 ;;      Params:         0       4       0       0       0       0       0       0
  1501 ;;      Locals:         0       4       0       0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0
  1503 ;;      Totals:         0       8       0       0       0       0       0       0
  1504 ;;Total ram usage:        8 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    4
  1507 ;; This function calls:
  1508 ;;		Nothing
  1509 ;; This function is called by:
  1510 ;;		_main
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513  025A                     ___awdiv:	
  1514                           
  1515                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1516  025A  01B7               	clrf	___awdiv@sign
  1517  025B  1FB3               	btfss	___awdiv@divisor+1,7
  1518  025C  2A64               	goto	l25525
  1519  025D  09B2               	comf	___awdiv@divisor,f
  1520  025E  09B3               	comf	___awdiv@divisor+1,f
  1521  025F  0AB2               	incf	___awdiv@divisor,f
  1522  0260  1903               	skipnz
  1523  0261  0AB3               	incf	___awdiv@divisor+1,f
  1524  0262  01B7               	clrf	___awdiv@sign
  1525  0263  0AB7               	incf	___awdiv@sign,f
  1526  0264                     l25525:	
  1527  0264  1FB5               	btfss	___awdiv@dividend+1,7
  1528  0265  2A6D               	goto	l25531
  1529  0266  09B4               	comf	___awdiv@dividend,f
  1530  0267  09B5               	comf	___awdiv@dividend+1,f
  1531  0268  0AB4               	incf	___awdiv@dividend,f
  1532  0269  1903               	skipnz
  1533  026A  0AB5               	incf	___awdiv@dividend+1,f
  1534  026B  3001               	movlw	1
  1535  026C  06B7               	xorwf	___awdiv@sign,f
  1536  026D                     l25531:	
  1537  026D  01B8               	clrf	___awdiv@quotient
  1538  026E  01B9               	clrf	___awdiv@quotient+1
  1539  026F  0833               	movf	___awdiv@divisor+1,w
  1540  0270  0432               	iorwf	___awdiv@divisor,w
  1541  0271  1903               	skipnz
  1542  0272  2A8D               	goto	l25553
  1543  0273  01B6               	clrf	___awdiv@counter
  1544  0274                     L41:	
  1545  0274  0AB6               	incf	___awdiv@counter,f
  1546  0275  1BB3               	btfsc	___awdiv@divisor+1,7
  1547  0276  2A7A               	goto	l25541
  1548  0277  35B2               	lslf	___awdiv@divisor,f
  1549  0278  0DB3               	rlf	___awdiv@divisor+1,f
  1550  0279  2A74               	goto	L41
  1551  027A                     l25541:	
  1552  027A  35B8               	lslf	___awdiv@quotient,f
  1553  027B  0DB9               	rlf	___awdiv@quotient+1,f
  1554  027C  0833               	movf	___awdiv@divisor+1,w
  1555  027D  0235               	subwf	___awdiv@dividend+1,w
  1556  027E  1D03               	skipz
  1557  027F  2A82               	goto	u5445
  1558  0280  0832               	movf	___awdiv@divisor,w
  1559  0281  0234               	subwf	___awdiv@dividend,w
  1560  0282                     u5445:	
  1561  0282  1C03               	skipc
  1562  0283  2A89               	goto	l25549
  1563  0284  0832               	movf	___awdiv@divisor,w
  1564  0285  02B4               	subwf	___awdiv@dividend,f
  1565  0286  0833               	movf	___awdiv@divisor+1,w
  1566  0287  3BB5               	subwfb	___awdiv@dividend+1,f
  1567  0288  1438               	bsf	___awdiv@quotient,0
  1568  0289                     l25549:	
  1569  0289  36B3               	lsrf	___awdiv@divisor+1,f
  1570  028A  0CB2               	rrf	___awdiv@divisor,f
  1571  028B  0BB6               	decfsz	___awdiv@counter,f
  1572  028C  2A7A               	goto	l25541
  1573  028D                     l25553:	
  1574  028D  0837               	movf	___awdiv@sign,w
  1575  028E  1903               	btfsc	3,2
  1576  028F  2A95               	goto	l25557
  1577  0290  09B8               	comf	___awdiv@quotient,f
  1578  0291  09B9               	comf	___awdiv@quotient+1,f
  1579  0292  0AB8               	incf	___awdiv@quotient,f
  1580  0293  1903               	skipnz
  1581  0294  0AB9               	incf	___awdiv@quotient+1,f
  1582  0295                     l25557:	
  1583  0295  0839               	movf	___awdiv@quotient+1,w
  1584  0296  00B3               	movwf	?___awdiv+1
  1585  0297  0838               	movf	___awdiv@quotient,w
  1586  0298  00B2               	movwf	?___awdiv
  1587  0299  0008               	return
  1588  029A                     __end_of___awdiv:	
  1589  029A                     __ptext2034:	
  1590 ;; =============== function _init_bldc ends ============
  1591                           
  1592                           
  1593 ;; *************** function _I_calibrationInit *****************
  1594 ;; Defined at:
  1595 ;;		line 166 in file "../main.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;		None               void
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0, pclath, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 1F/3
  1606 ;;		On exit  : 1F/2
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1609 ;;      Params:         0       0       0       0       0       0       0       0
  1610 ;;      Locals:         0       0       0       0       0       0       0       0
  1611 ;;      Temps:          0       1       0       0       0       0       0       0
  1612 ;;      Totals:         0       1       0       0       0       0       0       0
  1613 ;;Total ram usage:        1 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    5
  1616 ;; This function calls:
  1617 ;;		_read_eeprom_data
  1618 ;;		_ADC_Wait
  1619 ;;		_ADC_Read
  1620 ;; This function is called by:
  1621 ;;		_system_init
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624  029A                     _I_calibrationInit:	
  1625                           
  1626                           ;main.c: 168: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  1627                           
  1628                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  1629  029A  3003               	movlw	3
  1630  029B  2322  3180         	fcall	_read_eeprom_data
  1631  029D  3A00               	xorlw	0
  1632  029E  1903               	skipnz
  1633  029F  2AB4               	goto	l30565
  1634  02A0  3003               	movlw	3
  1635  02A1  2322  3180         	fcall	_read_eeprom_data
  1636  02A3  3AFF               	xorlw	255
  1637  02A4  1903               	skipnz
  1638  02A5  2AB4               	goto	l30565
  1639                           
  1640                           ;main.c: 170: {
  1641                           ;main.c: 172: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03 
      +                          );
  1642  02A6  3003               	movlw	3
  1643  02A7  2322  3180         	fcall	_read_eeprom_data
  1644  02A9  00AF               	movwf	??_I_calibrationInit
  1645  02AA  3002               	movlw	2
  1646  02AB  2322  3180         	fcall	_read_eeprom_data
  1647  02AD  0021               	movlb	1	; select bank1
  1648  02AE  00E9               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  1649  02AF  0020               	movlb	0	; select bank0
  1650  02B0  082F               	movf	??_I_calibrationInit,w
  1651  02B1  0021               	movlb	1	; select bank1
  1652  02B2  00E8               	movwf	_ui16_I_cal_Ph1^(0+128)
  1653                           
  1654                           ;main.c: 175: }
  1655  02B3  2AB8               	goto	l30567
  1656  02B4                     l30565:	
  1657                           
  1658                           ;main.c: 178: else
  1659                           ;main.c: 179: {
  1660                           ;main.c: 181: ui16_I_cal_Ph1 = 0x0100;
  1661  02B4  0021               	movlb	1	; select bank1
  1662  02B5  3001               	movlw	1
  1663  02B6  01E8               	clrf	_ui16_I_cal_Ph1^(0+128)
  1664  02B7  00E9               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
  1665  02B8                     l30567:	
  1666                           
  1667                           ;main.c: 184: }
  1668                           ;main.c: 187: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 0x05 ) != 0xFF)
  1669  02B8  3005               	movlw	5
  1670  02B9  2322  3180         	fcall	_read_eeprom_data
  1671  02BB  3A00               	xorlw	0
  1672  02BC  1903               	skipnz
  1673  02BD  2AD2               	goto	l30573
  1674  02BE  3005               	movlw	5
  1675  02BF  2322  3180         	fcall	_read_eeprom_data
  1676  02C1  3AFF               	xorlw	255
  1677  02C2  1903               	skipnz
  1678  02C3  2AD2               	goto	l30573
  1679                           
  1680                           ;main.c: 189: {
  1681                           ;main.c: 191: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05 
      +                          );
  1682  02C4  3005               	movlw	5
  1683  02C5  2322  3180         	fcall	_read_eeprom_data
  1684  02C7  00AF               	movwf	??_I_calibrationInit
  1685  02C8  3004               	movlw	4
  1686  02C9  2322  3180         	fcall	_read_eeprom_data
  1687  02CB  0021               	movlb	1	; select bank1
  1688  02CC  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  1689  02CD  0020               	movlb	0	; select bank0
  1690  02CE  082F               	movf	??_I_calibrationInit,w
  1691  02CF  0021               	movlb	1	; select bank1
  1692  02D0  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  1693                           
  1694                           ;main.c: 194: }
  1695  02D1  2AD6               	goto	l30575
  1696  02D2                     l30573:	
  1697                           
  1698                           ;main.c: 197: else
  1699                           ;main.c: 198: {
  1700                           ;main.c: 200: ui16_I_cal_Ph2 = 0x0100;
  1701  02D2  0021               	movlb	1	; select bank1
  1702  02D3  3001               	movlw	1
  1703  02D4  01EA               	clrf	_ui16_I_cal_Ph2^(0+128)
  1704  02D5  00EB               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
  1705  02D6                     l30575:	
  1706                           
  1707                           ;main.c: 203: }
  1708                           ;main.c: 206: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 0x07 ) != 0xFF)
  1709  02D6  3007               	movlw	7
  1710  02D7  2322  3180         	fcall	_read_eeprom_data
  1711  02D9  3A00               	xorlw	0
  1712  02DA  1903               	skipnz
  1713  02DB  2AF0               	goto	l30581
  1714  02DC  3007               	movlw	7
  1715  02DD  2322  3180         	fcall	_read_eeprom_data
  1716  02DF  3AFF               	xorlw	255
  1717  02E0  1903               	skipnz
  1718  02E1  2AF0               	goto	l30581
  1719                           
  1720                           ;main.c: 208: {
  1721                           ;main.c: 210: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07 
      +                          );
  1722  02E2  3007               	movlw	7
  1723  02E3  2322  3180         	fcall	_read_eeprom_data
  1724  02E5  00AF               	movwf	??_I_calibrationInit
  1725  02E6  3006               	movlw	6
  1726  02E7  2322  3180         	fcall	_read_eeprom_data
  1727  02E9  0021               	movlb	1	; select bank1
  1728  02EA  00ED               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  1729  02EB  0020               	movlb	0	; select bank0
  1730  02EC  082F               	movf	??_I_calibrationInit,w
  1731  02ED  0021               	movlb	1	; select bank1
  1732  02EE  00EC               	movwf	_ui16_I_cal_Ph3^(0+128)
  1733                           
  1734                           ;main.c: 212: }
  1735  02EF  2AF4               	goto	l30583
  1736  02F0                     l30581:	
  1737                           
  1738                           ;main.c: 215: else
  1739                           ;main.c: 216: {
  1740                           ;main.c: 218: ui16_I_cal_Ph3 = 0x0100;
  1741  02F0  0021               	movlb	1	; select bank1
  1742  02F1  3001               	movlw	1
  1743  02F2  01EC               	clrf	_ui16_I_cal_Ph3^(0+128)
  1744  02F3  00ED               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
  1745  02F4                     l30583:	
  1746                           
  1747                           ;main.c: 221: }
  1748                           ;main.c: 314: LATC2 = 0;
  1749  02F4  0022               	movlb	2	; select bank2
  1750  02F5  301A               	movlw	26
  1751  02F6  110E               	bcf	14,2
  1752                           
  1753                           ;main.c: 315: LATB2 = 0;
  1754  02F7  110D               	bcf	13,2
  1755                           
  1756                           ;main.c: 316: LATB1 = 0;
  1757  02F8  108D               	bcf	13,1
  1758                           
  1759                           ;main.c: 317: LATC = LATC | 0b00011010;
  1760  02F9  048E               	iorwf	14,f	;volatile
  1761                           
  1762                           ;main.c: 319: ADC_Wait();
  1763  02FA  232D  3180         	fcall	_ADC_Wait
  1764                           
  1765                           ;main.c: 320: ADC_Wait();
  1766  02FC  232D  3180         	fcall	_ADC_Wait
  1767                           
  1768                           ;main.c: 322: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  1769  02FE  3011               	movlw	17
  1770  02FF  0021               	movlb	1	; select bank1
  1771  0300  009D               	movwf	29	;volatile
  1772                           
  1773                           ;main.c: 323: ADC_Wait();
  1774  0301  232D  3180         	fcall	_ADC_Wait
  1775                           
  1776                           ;main.c: 324: ( GO_nDONE = 1 );
  1777  0303  0021               	movlb	1	; select bank1
  1778  0304  149D               	bsf	29,1
  1779                           
  1780                           ;main.c: 327: ui8_current_cal[2] = ADC_Read();
  1781  0305  2346  3180         	fcall	_ADC_Read
  1782  0307  082C               	movf	?_ADC_Read,w
  1783  0308  0022               	movlb	2	; select bank2
  1784  0309  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  1785                           
  1786                           ;main.c: 329: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  1787  030A  3035               	movlw	53
  1788  030B  0021               	movlb	1	; select bank1
  1789  030C  009D               	movwf	29	;volatile
  1790                           
  1791                           ;main.c: 330: ADC_Wait();
  1792  030D  232D  3180         	fcall	_ADC_Wait
  1793                           
  1794                           ;main.c: 331: ( GO_nDONE = 1 );
  1795  030F  0021               	movlb	1	; select bank1
  1796  0310  149D               	bsf	29,1
  1797                           
  1798                           ;main.c: 334: ui8_current_cal[1] = ADC_Read();
  1799  0311  2346  3180         	fcall	_ADC_Read
  1800  0313  082C               	movf	?_ADC_Read,w
  1801  0314  0022               	movlb	2	; select bank2
  1802  0315  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  1803                           
  1804                           ;main.c: 336: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  1805  0316  3009               	movlw	9
  1806  0317  0021               	movlb	1	; select bank1
  1807  0318  009D               	movwf	29	;volatile
  1808                           
  1809                           ;main.c: 337: ADC_Wait();
  1810  0319  232D  3180         	fcall	_ADC_Wait
  1811                           
  1812                           ;main.c: 338: ( GO_nDONE = 1 );
  1813  031B  0021               	movlb	1	; select bank1
  1814  031C  149D               	bsf	29,1
  1815                           
  1816                           ;main.c: 341: ui8_current_cal[0] = ADC_Read();
  1817  031D  2346               	fcall	_ADC_Read
  1818  031E  082C               	movf	?_ADC_Read,w
  1819  031F  0022               	movlb	2	; select bank2
  1820  0320  00A0               	movwf	_ui8_current_cal^(0+256)
  1821  0321  0008               	return
  1822  0322                     __end_of_I_calibrationInit:	
  1823  0322                     __ptext2069:	
  1824 ;; =============== function _write_eeprom_data ends ============
  1825                           
  1826                           
  1827 ;; *************** function _read_eeprom_data *****************
  1828 ;; Defined at:
  1829 ;;		line 54 in file "../eeprom.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  ui8_adress      1    wreg     unsigned char 
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;  ui8_adress      1   12[BANK0 ] unsigned char 
  1834 ;;  ui8_adress_d    1   13[BANK0 ] unsigned char 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      unsigned char 
  1837 ;; Registers used:
  1838 ;;		wreg
  1839 ;; Tracked objects:
  1840 ;;		On entry : 18/2
  1841 ;;		On exit  : 1F/0
  1842 ;;		Unchanged: FFFE0/0
  1843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1844 ;;      Params:         0       0       0       0       0       0       0       0
  1845 ;;      Locals:         0       2       0       0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0       0
  1847 ;;      Totals:         0       2       0       0       0       0       0       0
  1848 ;;Total ram usage:        2 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    4
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_EOL
  1855 ;;		_I_calibrationInit
  1856 ;;		_init_ports
  1857 ;;		_main
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860  0322                     _read_eeprom_data:	
  1861                           
  1862                           ; Regs used in _read_eeprom_data: [wreg]
  1863                           ;read_eeprom_data@ui8_adress stored from wreg
  1864  0322  0020               	movlb	0	; select bank0
  1865  0323  00AC               	movwf	read_eeprom_data@ui8_adress
  1866                           
  1867                           ;eeprom.c: 56: unsigned char ui8_adress_data;
  1868                           ;eeprom.c: 58: EEADRL = ui8_adress;
  1869  0324  0023               	movlb	3	; select bank3
  1870  0325  0091               	movwf	17	;volatile
  1871                           
  1872                           ;eeprom.c: 59: EEPGD = 0;
  1873  0326  1395               	bcf	21,7
  1874                           
  1875                           ;eeprom.c: 60: CFGS = 0;
  1876  0327  1315               	bcf	21,6
  1877                           
  1878                           ;eeprom.c: 61: RD = 1;
  1879  0328  1415               	bsf	21,0
  1880                           
  1881                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  1882  0329  0813               	movf	19,w	;volatile
  1883  032A  0020               	movlb	0	; select bank0
  1884  032B  00AD               	movwf	read_eeprom_data@ui8_adress_data
  1885                           
  1886                           ;eeprom.c: 64: return ui8_adress_data;
  1887  032C  0008               	return
  1888  032D                     __end_of_read_eeprom_data:	
  1889  032D                     __ptext2049:	
  1890 ;; =============== function _Get_Analog_Value ends ============
  1891                           
  1892                           
  1893 ;; *************** function _ADC_Wait *****************
  1894 ;; Defined at:
  1895 ;;		line 130 in file "../adc.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;		None               void
  1902 ;; Registers used:
  1903 ;;		None
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/4
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1909 ;;      Params:         0       0       0       0       0       0       0       0
  1910 ;;      Locals:         0       0       0       0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0       0       0       0
  1912 ;;      Totals:         0       0       0       0       0       0       0       0
  1913 ;;Total ram usage:        0 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    4
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_FILTER_Init
  1920 ;;		_EOL
  1921 ;;		_I_calibrationInit
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924  032D                     _ADC_Wait:	
  1925                           
  1926                           ;adc.c: 133: _nop();
  1927                           
  1928                           ; Regs used in _ADC_Wait: []
  1929  032D  0000               	nop
  1930                           
  1931                           ;adc.c: 134: _nop();
  1932  032E  0000               	nop
  1933                           
  1934                           ;adc.c: 135: _nop();
  1935  032F  0000               	nop
  1936                           
  1937                           ;adc.c: 136: _nop();
  1938  0330  0000               	nop
  1939                           
  1940                           ;adc.c: 137: _nop();
  1941  0331  0000               	nop
  1942                           
  1943                           ;adc.c: 138: _nop();
  1944  0332  0000               	nop
  1945                           
  1946                           ;adc.c: 139: _nop();
  1947  0333  0000               	nop
  1948                           
  1949                           ;adc.c: 140: _nop();
  1950  0334  0000               	nop
  1951                           
  1952                           ;adc.c: 142: _nop();
  1953  0335  0000               	nop
  1954                           
  1955                           ;adc.c: 143: _nop();
  1956  0336  0000               	nop
  1957                           
  1958                           ;adc.c: 144: _nop();
  1959  0337  0000               	nop
  1960                           
  1961                           ;adc.c: 145: _nop();
  1962  0338  0000               	nop
  1963                           
  1964                           ;adc.c: 146: _nop();
  1965  0339  0000               	nop
  1966                           
  1967                           ;adc.c: 147: _nop();
  1968  033A  0000               	nop
  1969                           
  1970                           ;adc.c: 148: _nop();
  1971  033B  0000               	nop
  1972                           
  1973                           ;adc.c: 149: _nop();
  1974  033C  0000               	nop
  1975                           
  1976                           ;adc.c: 151: _nop();
  1977  033D  0000               	nop
  1978                           
  1979                           ;adc.c: 152: _nop();
  1980  033E  0000               	nop
  1981                           
  1982                           ;adc.c: 153: _nop();
  1983  033F  0000               	nop
  1984                           
  1985                           ;adc.c: 154: _nop();
  1986  0340  0000               	nop
  1987                           
  1988                           ;adc.c: 155: _nop();
  1989  0341  0000               	nop
  1990                           
  1991                           ;adc.c: 156: _nop();
  1992  0342  0000               	nop
  1993                           
  1994                           ;adc.c: 157: _nop();
  1995  0343  0000               	nop
  1996                           
  1997                           ;adc.c: 158: _nop();
  1998  0344  0000               	nop
  1999  0345  0008               	return
  2000  0346                     __end_of_ADC_Wait:	
  2001  0346                     __ptext2075:	
  2002 ;; =============== function _FILTER_Ubat ends ============
  2003                           
  2004                           
  2005 ;; *************** function _ADC_Read *****************
  2006 ;; Defined at:
  2007 ;;		line 177 in file "../adc.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  i               1   14[BANK0 ] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  2   12[BANK0 ] unsigned int 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/1
  2018 ;;		On exit  : 1F/0
  2019 ;;		Unchanged: FFFE0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2021 ;;      Params:         0       2       0       0       0       0       0       0
  2022 ;;      Locals:         0       1       0       0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0
  2024 ;;      Totals:         0       3       0       0       0       0       0       0
  2025 ;;Total ram usage:        3 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    4
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_FILTER_Init
  2032 ;;		_EOL
  2033 ;;		_I_calibrationInit
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036  0346                     _ADC_Read:	
  2037                           
  2038                           ;adc.c: 179: unsigned char i;
  2039                           ;adc.c: 180: i = 0;
  2040                           
  2041                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  2042  0346  0020               	movlb	0	; select bank0
  2043  0347  01AE               	clrf	ADC_Read@i
  2044  0348                     l1857:	
  2045                           ;adc.c: 182: while( GO_nDONE )
  2046                           
  2047  0348  0021               	movlb	1	; select bank1
  2048  0349  1C9D               	btfss	29,1
  2049  034A  2B51               	goto	l28345
  2050                           
  2051                           ;adc.c: 184: {
  2052                           ;adc.c: 186: i++;
  2053  034B  0020               	movlb	0	; select bank0
  2054  034C  3041               	movlw	65
  2055  034D  0AAE               	incf	ADC_Read@i,f
  2056                           
  2057                           ;adc.c: 189: if( i > 64 )
  2058  034E  022E               	subwf	ADC_Read@i,w
  2059  034F  1C03               	skipc
  2060  0350  2B48               	goto	l1857
  2061  0351                     l28345:	
  2062                           
  2063                           ;adc.c: 195: }
  2064                           ;adc.c: 198: }
  2065                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  2066  0351  0021               	movlb	1	; select bank1
  2067  0352  081C               	movf	28,w	;volatile
  2068  0353  00A9               	movwf	(_analog_value^(0+128)+1)	;volatile
  2069                           
  2070                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  2071  0354  081B               	movf	27,w	;volatile
  2072  0355  00A8               	movwf	_analog_value^(0+128)	;volatile
  2073                           
  2074                           ;adc.c: 204: return analog_value.w;
  2075  0356  0829               	movf	(_analog_value+1)^(0+128),w	;volatile
  2076  0357  0020               	movlb	0	; select bank0
  2077  0358  00AD               	movwf	?_ADC_Read+1
  2078  0359  0021               	movlb	1	; select bank1
  2079  035A  0828               	movf	_analog_value^(0+128),w	;volatile
  2080  035B  0020               	movlb	0	; select bank0
  2081  035C  00AC               	movwf	?_ADC_Read
  2082  035D  0008               	return
  2083  035E                     __end_of_ADC_Read:	
  2084  035E                     __ptext2071:	
  2085 ;; =============== function _PWM_Write_Out ends ============
  2086                           
  2087                           
  2088 ;; *************** function _InitMotorStop *****************
  2089 ;; Defined at:
  2090 ;;		line 2224 in file "../bldc.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;		None               void
  2097 ;; Registers used:
  2098 ;;		status,2
  2099 ;; Tracked objects:
  2100 ;;		On entry : 1E/1
  2101 ;;		On exit  : 1F/0
  2102 ;;		Unchanged: FFFE0/0
  2103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2104 ;;      Params:         0       0       0       0       0       0       0       0
  2105 ;;      Locals:         0       0       0       0       0       0       0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0
  2107 ;;      Totals:         0       0       0       0       0       0       0       0
  2108 ;;Total ram usage:        0 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    4
  2111 ;; This function calls:
  2112 ;;		Nothing
  2113 ;; This function is called by:
  2114 ;;		_EOL
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118  035E                     _InitMotorStop:	
  2119                           
  2120                           ;bldc.c: 2226: if( 1 == MotorFlags.bits.B6 )
  2121                           
  2122                           ; Regs used in _InitMotorStop: [status,2]
  2123  035E  0020               	movlb	0	; select bank0
  2124  035F  1F4B               	btfss	_MotorFlags,6
  2125  0360  0008               	return
  2126                           
  2127                           ;bldc.c: 2229: {
  2128                           ;bldc.c: 2231: LATC1 = 0;
  2129  0361  0022               	movlb	2	; select bank2
  2130  0362  108E               	bcf	14,1
  2131                           
  2132                           ;bldc.c: 2232: LATC3 = 0;
  2133  0363  118E               	bcf	14,3
  2134                           
  2135                           ;bldc.c: 2233: LATC4 = 0;
  2136  0364  120E               	bcf	14,4
  2137                           
  2138                           ;bldc.c: 2235: CCP1ASE = 0;
  2139  0365  0025               	movlb	5	; select bank5
  2140  0366  1395               	bcf	21,7
  2141                           
  2142                           ;bldc.c: 2236: CCPR1L = 0;
  2143  0367  0191               	clrf	17	;volatile
  2144                           
  2145                           ;bldc.c: 2237: MotorFlags.bits.B6 = 0;
  2146  0368  0020               	movlb	0	; select bank0
  2147  0369  134B               	bcf	_MotorFlags,6
  2148                           
  2149                           ;bldc.c: 2238: MotorFlags.bits.B7 = 0;
  2150  036A  13CB               	bcf	_MotorFlags,7
  2151  036B  0008               	return
  2152  036C                     __end_of_InitMotorStop:	
  2153  036C                     __ptext2061:	
  2154 ;; =============== function _Cb44_Pic_etat_monitor_node_fcn1 ends ============
  2155                           
  2156                           
  2157 ;; *************** function _clear_timer *****************
  2158 ;; Defined at:
  2159 ;;		line 304 in file "../timer.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  ui8_TmrNb       1    wreg     unsigned char 
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  ui8_TmrNb       1   12[BANK0 ] unsigned char 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;		None               void
  2166 ;; Registers used:
  2167 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2168 ;; Tracked objects:
  2169 ;;		On entry : 1F/0
  2170 ;;		On exit  : 17/0
  2171 ;;		Unchanged: FFFE0/0
  2172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2173 ;;      Params:         0       0       0       0       0       0       0       0
  2174 ;;      Locals:         0       1       0       0       0       0       0       0
  2175 ;;      Temps:          0       0       0       0       0       0       0       0
  2176 ;;      Totals:         0       1       0       0       0       0       0       0
  2177 ;;Total ram usage:        1 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    4
  2180 ;; This function calls:
  2181 ;;		Nothing
  2182 ;; This function is called by:
  2183 ;;		_main
  2184 ;;		_timer_init
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187  036C                     _clear_timer:	
  2188                           
  2189                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  2190                           ;clear_timer@ui8_TmrNb stored from wreg
  2191  036C  00AC               	movwf	clear_timer@ui8_TmrNb
  2192                           
  2193                           ;timer.c: 306: switch( ui8_TmrNb )
  2194  036D  2B7B               	goto	l25283
  2195  036E                     l25271:	
  2196                           
  2197                           ;timer.c: 312: {
  2198                           ;timer.c: 314: TMR0 = 0;
  2199  036E  0195               	clrf	21	;volatile
  2200                           
  2201                           ;timer.c: 315: break;
  2202  036F  0008               	return
  2203  0370                     l25273:	
  2204                           
  2205                           ;timer.c: 322: {
  2206                           ;timer.c: 324: TMR1L = 0x00;
  2207  0370  0196               	clrf	22	;volatile
  2208                           
  2209                           ;timer.c: 325: TMR1H = 0x00;
  2210  0371  0197               	clrf	23	;volatile
  2211                           
  2212                           ;timer.c: 326: break;
  2213  0372  0008               	return
  2214  0373                     l25275:	
  2215                           
  2216                           ;timer.c: 333: {
  2217                           ;timer.c: 335: TMR2 = 0;
  2218  0373  019A               	clrf	26	;volatile
  2219                           
  2220                           ;timer.c: 336: break;
  2221  0374  0008               	return
  2222  0375                     l25277:	
  2223                           
  2224                           ;timer.c: 343: {
  2225                           ;timer.c: 345: TMR4 = 0;
  2226  0375  0028               	movlb	8	; select bank8
  2227  0376  0195               	clrf	21	;volatile
  2228                           
  2229                           ;timer.c: 346: break;
  2230  0377  0008               	return
  2231  0378                     l25279:	
  2232                           
  2233                           ;timer.c: 353: {
  2234                           ;timer.c: 355: TMR6 = 0;
  2235  0378  0028               	movlb	8	; select bank8
  2236  0379  019C               	clrf	28	;volatile
  2237                           
  2238                           ;timer.c: 356: break;
  2239  037A  0008               	return
  2240  037B                     l25283:	
  2241  037B  082C               	movf	clear_timer@ui8_TmrNb,w
  2242                           
  2243                           ; Switch size 1, requested type "space"
  2244                           ; Number of cases is 5, Range of values is 0 to 6
  2245                           ; switch strategies available:
  2246                           ; Name         Instructions Cycles
  2247                           ; simple_byte           16     9 (average)
  2248                           ; direct_byte           20     6 (fixed)
  2249                           ; jumptable            260     6 (fixed)
  2250                           ; rangetable            11     4 (fixed)
  2251                           ; spacedrange           19     6 (fixed)
  2252                           ; locatedrange           7     3 (fixed)
  2253                           ;	Chosen strategy is simple_byte
  2254  037C  3A00               	xorlw	0	; case 0
  2255  037D  1903               	skipnz
  2256  037E  2B6E               	goto	l25271
  2257  037F  3A01               	xorlw	1	; case 1
  2258  0380  1903               	skipnz
  2259  0381  2B70               	goto	l25273
  2260  0382  3A03               	xorlw	3	; case 2
  2261  0383  1903               	skipnz
  2262  0384  2B73               	goto	l25275
  2263  0385  3A06               	xorlw	6	; case 4
  2264  0386  1903               	skipnz
  2265  0387  2B75               	goto	l25277
  2266  0388  3A02               	xorlw	2	; case 6
  2267  0389  1903               	skipnz
  2268  038A  2B78               	goto	l25279
  2269  038B  2B8C               	goto	l17854
  2270  038C                     l17854:	
  2271  038C  0008               	return
  2272  038D                     __end_of_clear_timer:	
  2273  038D                     __ptext2056:	
  2274 ;; =============== function ___lwdiv ends ============
  2275                           
  2276                           
  2277 ;; *************** function ___wmul *****************
  2278 ;; Defined at:
  2279 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\wmul.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  multiplier      2   12[BANK0 ] unsigned int 
  2282 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  product         2   16[BANK0 ] unsigned int 
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  2   12[BANK0 ] unsigned int 
  2287 ;; Registers used:
  2288 ;;		wreg, status,2, status,0
  2289 ;; Tracked objects:
  2290 ;;		On entry : 1F/0
  2291 ;;		On exit  : 1F/0
  2292 ;;		Unchanged: FFFE0/0
  2293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2294 ;;      Params:         0       4       0       0       0       0       0       0
  2295 ;;      Locals:         0       2       0       0       0       0       0       0
  2296 ;;      Temps:          0       0       0       0       0       0       0       0
  2297 ;;      Totals:         0       6       0       0       0       0       0       0
  2298 ;;Total ram usage:        6 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    4
  2301 ;; This function calls:
  2302 ;;		Nothing
  2303 ;; This function is called by:
  2304 ;;		_commutate
  2305 ;;		_EOL
  2306 ;;		_main
  2307 ;;		_BVH2_Appl_Layer
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310  038D                     ___wmul:	
  2311                           
  2312                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2313  038D  01B0               	clrf	___wmul@product
  2314  038E  01B1               	clrf	___wmul@product+1
  2315  038F                     l28873:	
  2316  038F  1C2C               	btfss	___wmul@multiplier,0
  2317  0390  2B95               	goto	l28877
  2318  0391  082E               	movf	___wmul@multiplicand,w
  2319  0392  07B0               	addwf	___wmul@product,f
  2320  0393  082F               	movf	___wmul@multiplicand+1,w
  2321  0394  3DB1               	addwfc	___wmul@product+1,f
  2322  0395                     l28877:	
  2323  0395  35AE               	lslf	___wmul@multiplicand,f
  2324  0396  0DAF               	rlf	___wmul@multiplicand+1,f
  2325  0397  36AD               	lsrf	___wmul@multiplier+1,f
  2326  0398  0CAC               	rrf	___wmul@multiplier,f
  2327  0399  082D               	movf	___wmul@multiplier+1,w
  2328  039A  042C               	iorwf	___wmul@multiplier,w
  2329  039B  1D03               	skipz
  2330  039C  2B8F               	goto	l28873
  2331  039D  0831               	movf	___wmul@product+1,w
  2332  039E  00AD               	movwf	?___wmul+1
  2333  039F  0830               	movf	___wmul@product,w
  2334  03A0  00AC               	movwf	?___wmul
  2335  03A1  0008               	return
  2336  03A2                     __end_of___wmul:	
  2337  03A2                     __ptext2048:	
  2338 ;; =============== function _commutate ends ============
  2339                           
  2340                           
  2341 ;; *************** function _Get_Analog_Value *****************
  2342 ;; Defined at:
  2343 ;;		line 444 in file "../adc.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;		None
  2348 ;; Return value:  Size  Location     Type
  2349 ;;		None               void
  2350 ;; Registers used:
  2351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 1F/0
  2354 ;;		On exit  : 1F/3
  2355 ;;		Unchanged: FFFE0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2357 ;;      Params:         0       0       0       0       0       0       0       0
  2358 ;;      Locals:         0       0       0       0       0       0       0       0
  2359 ;;      Temps:          0       0       0       0       0       0       0       0
  2360 ;;      Totals:         0       0       0       0       0       0       0       0
  2361 ;;Total ram usage:        0 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    5
  2364 ;; This function calls:
  2365 ;;		_FILTER_Ubat
  2366 ;;		_FILTER_IPhase
  2367 ;;		_FILTER_Temp
  2368 ;; This function is called by:
  2369 ;;		_main
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372  03A2                     _Get_Analog_Value:	
  2373                           
  2374                           ;adc.c: 446: FILTER_Ubat( );
  2375                           
  2376                           ; Regs used in _Get_Analog_Value: [wreg-status,0+pclath+cstack]
  2377  03A2  23A7               	fcall	_FILTER_Ubat
  2378                           
  2379                           ;adc.c: 447: FILTER_IPhase( );
  2380  03A3  319A  22AA         	fcall	_FILTER_IPhase
  2381                           
  2382                           ;adc.c: 448: FILTER_Temp( );
  2383  03A5  319A  2AE4         	ljmp	l24703
  2384  03A7                     __end_of_Get_Analog_Value:	
  2385  03A7                     __ptext2074:	
  2386 ;; =============== function _FILTER_IPhase ends ============
  2387                           
  2388                           
  2389 ;; *************** function _FILTER_Ubat *****************
  2390 ;; Defined at:
  2391 ;;		line 266 in file "../adc.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;		None               void
  2398 ;; Registers used:
  2399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2400 ;; Tracked objects:
  2401 ;;		On entry : 1F/0
  2402 ;;		On exit  : 1D/1
  2403 ;;		Unchanged: FFFE0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2405 ;;      Params:         0       0       0       0       0       0       0       0
  2406 ;;      Locals:         0       0       0       0       0       0       0       0
  2407 ;;      Temps:          0      12       0       0       0       0       0       0
  2408 ;;      Totals:         0      12       0       0       0       0       0       0
  2409 ;;Total ram usage:       12 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    4
  2412 ;; This function calls:
  2413 ;;		Nothing
  2414 ;; This function is called by:
  2415 ;;		_Get_Analog_Value
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418  03A7                     _FILTER_Ubat:	
  2419                           
  2420                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  2421                           
  2422                           ; Regs used in _FILTER_Ubat: [wreg-status,0]
  2423  03A7  0021               	movlb	1	; select bank1
  2424  03A8  3567               	lslf	_windowPtr1^(0+128),w
  2425  03A9  3E40               	addlw	_inputArray1& (0+255)
  2426  03AA  0086               	movwf	6
  2427  03AB  3002               	movlw	2	; select bank4/5
  2428  03AC  0087               	movwf	7
  2429  03AD  0020               	movlb	0	; select bank0
  2430  03AE  0851               	movf	_ui16_Ubat_bldc,w	;volatile
  2431  03AF  3FC0               	movwi [0]fsr1
  2432  03B0  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
  2433  03B1  3FC1               	movwi [1]fsr1
  2434                           
  2435                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  2436  03B2  304E               	movlw	(_inputArray1& (0+255)+14)
  2437  03B3  0086               	movwf	6
  2438  03B4  304C               	movlw	(_inputArray1& (0+255)+12)
  2439  03B5  0084               	movwf	4
  2440  03B6  3002               	movlw	2	; select bank4/5
  2441  03B7  0085               	movwf	5
  2442  03B8  0024               	movlb	4	; select bank4
  2443  03B9  0844               	movf	(_inputArray1^(0+512)+4),w
  2444  03BA  0742               	addwf	(_inputArray1^(0+512)+2),w
  2445  03BB  0020               	movlb	0	; select bank0
  2446  03BC  00AC               	movwf	??_FILTER_Ubat
  2447  03BD  0024               	movlb	4	; select bank4
  2448  03BE  0845               	movf	((_inputArray1+1)^(0+512)+4),w
  2449  03BF  3D43               	addwfc	((_inputArray1+1)^(0+512)+2),w
  2450  03C0  0020               	movlb	0	; select bank0
  2451  03C1  00AD               	movwf	??_FILTER_Ubat+1
  2452  03C2  0024               	movlb	4	; select bank4
  2453  03C3  0846               	movf	(_inputArray1^(0+512)+6),w
  2454  03C4  0020               	movlb	0	; select bank0
  2455  03C5  072C               	addwf	??_FILTER_Ubat,w
  2456  03C6  00AE               	movwf	??_FILTER_Ubat+2
  2457  03C7  0024               	movlb	4	; select bank4
  2458  03C8  0847               	movf	((_inputArray1+1)^(0+512)+6),w
  2459  03C9  0020               	movlb	0	; select bank0
  2460  03CA  3D2D               	addwfc	??_FILTER_Ubat+1,w
  2461  03CB  00AF               	movwf	??_FILTER_Ubat+3
  2462  03CC  0024               	movlb	4	; select bank4
  2463  03CD  0848               	movf	(_inputArray1^(0+512)+8),w
  2464  03CE  0020               	movlb	0	; select bank0
  2465  03CF  072E               	addwf	??_FILTER_Ubat+2,w
  2466  03D0  00B0               	movwf	??_FILTER_Ubat+4
  2467  03D1  0024               	movlb	4	; select bank4
  2468  03D2  0849               	movf	((_inputArray1+1)^(0+512)+8),w
  2469  03D3  0020               	movlb	0	; select bank0
  2470  03D4  3D2F               	addwfc	??_FILTER_Ubat+3,w
  2471  03D5  00B1               	movwf	??_FILTER_Ubat+5
  2472  03D6  0024               	movlb	4	; select bank4
  2473  03D7  084A               	movf	(_inputArray1^(0+512)+10),w
  2474  03D8  0020               	movlb	0	; select bank0
  2475  03D9  0730               	addwf	??_FILTER_Ubat+4,w
  2476  03DA  00B2               	movwf	??_FILTER_Ubat+6
  2477  03DB  0024               	movlb	4	; select bank4
  2478  03DC  084B               	movf	((_inputArray1+1)^(0+512)+10),w
  2479  03DD  0020               	movlb	0	; select bank0
  2480  03DE  3D31               	addwfc	??_FILTER_Ubat+5,w
  2481  03DF  00B3               	movwf	??_FILTER_Ubat+7
  2482  03E0  3F00               	moviw [0]fsr0
  2483  03E1  0732               	addwf	??_FILTER_Ubat+6,w
  2484  03E2  00B4               	movwf	??_FILTER_Ubat+8
  2485  03E3  3F01               	moviw [1]fsr0
  2486  03E4  3D33               	addwfc	??_FILTER_Ubat+7,w
  2487  03E5  00B5               	movwf	??_FILTER_Ubat+9
  2488  03E6  3F40               	moviw [0]fsr1
  2489  03E7  0734               	addwf	??_FILTER_Ubat+8,w
  2490  03E8  00B6               	movwf	??_FILTER_Ubat+10
  2491  03E9  3F41               	moviw [1]fsr1
  2492  03EA  3D35               	addwfc	??_FILTER_Ubat+9,w
  2493  03EB  00B7               	movwf	??_FILTER_Ubat+11
  2494  03EC  0024               	movlb	4	; select bank4
  2495  03ED  0840               	movf	_inputArray1^(0+512),w
  2496  03EE  0020               	movlb	0	; select bank0
  2497  03EF  0736               	addwf	??_FILTER_Ubat+10,w
  2498  03F0  0023               	movlb	3	; select bank3
  2499  03F1  00CA               	movwf	_filter1^(0+384)
  2500  03F2  0024               	movlb	4	; select bank4
  2501  03F3  0841               	movf	(_inputArray1+1)^(0+512),w
  2502  03F4  0020               	movlb	0	; select bank0
  2503  03F5  3D37               	addwfc	??_FILTER_Ubat+11,w
  2504  03F6  0023               	movlb	3	; select bank3
  2505  03F7  00CB               	movwf	(_filter1+1)^(0+384)
  2506                           
  2507                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  2508  03F8  0022               	movlb	2	; select bank2
  2509  03F9  00B0               	movwf	(_ui16_fir_Bat_mittel+1)^(0+256)
  2510  03FA  0023               	movlb	3	; select bank3
  2511  03FB  084A               	movf	_filter1^(0+384),w
  2512  03FC  0022               	movlb	2	; select bank2
  2513  03FD  00AF               	movwf	_ui16_fir_Bat_mittel^(0+256)
  2514  03FE  3008               	movlw	8
  2515  03FF  36B0               	lsrf	(_ui16_fir_Bat_mittel+1)^(0+256),f
  2516  0400  0CAF               	rrf	_ui16_fir_Bat_mittel^(0+256),f
  2517  0401  36B0               	lsrf	(_ui16_fir_Bat_mittel+1)^(0+256),f
  2518  0402  0CAF               	rrf	_ui16_fir_Bat_mittel^(0+256),f
  2519  0403  36B0               	lsrf	(_ui16_fir_Bat_mittel+1)^(0+256),f
  2520  0404  0CAF               	rrf	_ui16_fir_Bat_mittel^(0+256),f
  2521                           
  2522                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  2523  0405  0021               	movlb	1	; select bank1
  2524  0406  0AE7               	incf	_windowPtr1^(0+128),f
  2525  0407  0267               	subwf	_windowPtr1^(0+128),w
  2526  0408  1C03               	skipc
  2527  0409  0008               	return
  2528                           
  2529                           ;adc.c: 277: {
  2530                           ;adc.c: 279: windowPtr1 = 0;
  2531  040A  01E7               	clrf	_windowPtr1^(0+128)
  2532                           
  2533                           ;adc.c: 280: filter1 = 0;
  2534  040B  0023               	movlb	3	; select bank3
  2535  040C  01CA               	clrf	_filter1^(0+384)
  2536  040D  01CB               	clrf	(_filter1+1)^(0+384)
  2537  040E  0008               	return
  2538  040F                     __end_of_FILTER_Ubat:	
  2539  040F                     __ptext2037:	
  2540 ;; =============== function _Transmit_LIN_8Bytes ends ============
  2541                           
  2542                           
  2543 ;; *************** function _InitMotorRun *****************
  2544 ;; Defined at:
  2545 ;;		line 2173 in file "../bldc.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;		None               void
  2552 ;; Registers used:
  2553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 1E/1
  2556 ;;		On exit  : 1F/0
  2557 ;;		Unchanged: FFFE0/0
  2558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2559 ;;      Params:         0       0       0       0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0
  2562 ;;      Totals:         0       0       0       0       0       0       0       0
  2563 ;;Total ram usage:        0 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    6
  2566 ;; This function calls:
  2567 ;;		_commutate
  2568 ;; This function is called by:
  2569 ;;		_init_bldc
  2570 ;;		_main
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573  040F                     _InitMotorRun:	
  2574  040F                     l30475:	
  2575                           ; Regs used in _InitMotorRun: [wreg-status,0+pclath+cstack]
  2576                           
  2577                           
  2578                           ;bldc.c: 2175: if( 0 == MotorFlags.bits.B6 )
  2579  040F  0020               	movlb	0	; select bank0
  2580  0410  1B4B               	btfsc	_MotorFlags,6
  2581  0411  0008               	return
  2582  0412  30A6               	movlw	166
  2583                           
  2584                           ;bldc.c: 2178: {
  2585                           ;bldc.c: 2180: MotorFlags.bits.B5 = 0;
  2586  0413  12CB               	bcf	_MotorFlags,5
  2587                           
  2588                           ;bldc.c: 2181: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  2589  0414  0021               	movlb	1	; select bank1
  2590  0415  00B6               	movwf	_ui16_comm_time_max^(0+128)
  2591  0416  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
  2592                           
  2593                           ;bldc.c: 2182: comm_state = 1;
  2594  0417  01D9               	clrf	_comm_state^(0+128)
  2595  0418  0AD9               	incf	_comm_state^(0+128),f
  2596                           
  2597                           ;bldc.c: 2183: ui16_step_cnt = 0;
  2598  0419  01BE               	clrf	_ui16_step_cnt^(0+128)
  2599  041A  01BF               	clrf	(_ui16_step_cnt+1)^(0+128)
  2600                           
  2601                           ;bldc.c: 2184: ui8_duty_cycle_BLDC = 0;
  2602  041B  0020               	movlb	0	; select bank0
  2603  041C  01D0               	clrf	_ui8_duty_cycle_BLDC
  2604                           
  2605                           ;bldc.c: 2186: bemf_filter = 0;
  2606  041D  01C8               	clrf	_comm_time
  2607  041E  01C9               	clrf	_comm_time+1
  2608                           
  2609                           ;bldc.c: 2188: phase_delay_counter_debug = 0;
  2610  041F  0023               	movlb	3	; select bank3
  2611  0420  01D0               	clrf	_phase_delay_counter^(0+384)
  2612  0421  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
  2613                           
  2614                           ;bldc.c: 2189: PSTR1CON = 0;
  2615  0422  0025               	movlb	5	; select bank5
  2616  0423  0196               	clrf	22	;volatile
  2617                           
  2618                           ;bldc.c: 2192: MotorFlags.bits.B3 = 1 ;
  2619  0424  0020               	movlb	0	; select bank0
  2620  0425  15CB               	bsf	_MotorFlags,3
  2621                           
  2622                           ;bldc.c: 2194: ui16_phase_angle = 128;
  2623  0426  174B               	bsf	_MotorFlags,6
  2624                           
  2625                           ;bldc.c: 2195: ui8_StartupPWM = 0 ;
  2626  0427  0021               	movlb	1	; select bank1
  2627  0428  01E0               	clrf	_ui8_StartupPWM^(0+128)
  2628                           
  2629                           ;bldc.c: 2196: CCPR1L = 0 ;
  2630  0429  0025               	movlb	5	; select bank5
  2631  042A  0191               	clrf	17	;volatile
  2632                           
  2633                           ;bldc.c: 2198: ui8_zero_cros_cnt = 0 ;
  2634  042B  0022               	movlb	2	; select bank2
  2635  042C  01E0               	clrf	_ui8_sampleState^(0+256)
  2636                           
  2637                           ;bldc.c: 2199: MotorFlags.bits.B4 = 1 ;
  2638  042D  0020               	movlb	0	; select bank0
  2639  042E  164B               	bsf	_MotorFlags,4
  2640                           
  2641                           ;bldc.c: 2207: commutate( );
  2642  042F  2C30               	ljmp	l29325
  2643  0430                     __end_of_InitMotorRun:	
  2644  0430                     __ptext2047:	
  2645 ;; =============== function _DiagInit ends ============
  2646                           
  2647                           
  2648 ;; *************** function _commutate *****************
  2649 ;; Defined at:
  2650 ;;		line 1429 in file "../bldc.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;		None               void
  2657 ;; Registers used:
  2658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 1F/0
  2661 ;;		On exit  : 1F/0
  2662 ;;		Unchanged: FFFE0/0
  2663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2664 ;;      Params:         0       0       0       0       0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0       0       0       0
  2666 ;;      Temps:          0      12       0       0       0       0       0       0
  2667 ;;      Totals:         0      12       0       0       0       0       0       0
  2668 ;;Total ram usage:       12 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    5
  2671 ;; This function calls:
  2672 ;;		___wmul
  2673 ;; This function is called by:
  2674 ;;		_InitMotorRun
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677  0430                     _commutate:	
  2678  0430                     l29325:	
  2679                           ; Regs used in _commutate: [wreg-status,0+pclath+cstack]
  2680                           
  2681                           
  2682                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  2683  0430  3000               	movlw	0
  2684  0431  0021               	movlb	1	; select bank1
  2685  0432  023F               	subwf	(_ui16_step_cnt+1)^(0+128),w
  2686  0433  300A               	movlw	10
  2687  0434  1903               	skipnz
  2688  0435  023E               	subwf	_ui16_step_cnt^(0+128),w
  2689  0436  1803               	skipnc
  2690  0437  2C3B               	goto	l29329
  2691                           
  2692                           ;bldc.c: 1433: {
  2693                           ;bldc.c: 1435: ui16_step_cnt++;
  2694  0438  0ABE               	incf	_ui16_step_cnt^(0+128),f
  2695  0439  1903               	skipnz
  2696  043A  0ABF               	incf	(_ui16_step_cnt+1)^(0+128),f
  2697  043B                     l29329:	
  2698                           
  2699                           ;bldc.c: 1437: }
  2700                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  2701  043B  3548               	lslf	_Bcnt^(0+128),w
  2702  043C  3EA0               	addlw	_B& (0+255)
  2703  043D  0086               	movwf	6
  2704  043E  3001               	movlw	1	; select bank3/4
  2705  043F  0087               	movwf	7
  2706  0440  0020               	movlb	0	; select bank0
  2707  0441  0848               	movf	_comm_time,w
  2708  0442  3FC0               	movwi [0]fsr1
  2709  0443  0849               	movf	_comm_time+1,w
  2710  0444  3FC1               	movwi [1]fsr1
  2711  0445  0021               	movlb	1	; select bank1
  2712  0446  3007               	movlw	7
  2713  0447  0AC8               	incf	_Bcnt^(0+128),f
  2714                           
  2715                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  2716  0448  05C8               	andwf	_Bcnt^(0+128),f
  2717                           
  2718                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  2719  0449  30AE               	movlw	(_B& (0+255)+14)
  2720  044A  0086               	movwf	6
  2721  044B  30AC               	movlw	(_B& (0+255)+12)
  2722  044C  0084               	movwf	4
  2723  044D  3001               	movlw	1	; select bank3/4
  2724  044E  0085               	movwf	5
  2725  044F  0023               	movlb	3	; select bank3
  2726  0450  0824               	movf	(_B^(0+384)+4),w
  2727  0451  0722               	addwf	(_B^(0+384)+2),w
  2728  0452  0020               	movlb	0	; select bank0
  2729  0453  00B2               	movwf	??_commutate
  2730  0454  0023               	movlb	3	; select bank3
  2731  0455  0825               	movf	((_B+1)^(0+384)+4),w
  2732  0456  3D23               	addwfc	((_B+1)^(0+384)+2),w
  2733  0457  0020               	movlb	0	; select bank0
  2734  0458  00B3               	movwf	??_commutate+1
  2735  0459  0023               	movlb	3	; select bank3
  2736  045A  0826               	movf	(_B^(0+384)+6),w
  2737  045B  0020               	movlb	0	; select bank0
  2738  045C  0732               	addwf	??_commutate,w
  2739  045D  00B4               	movwf	??_commutate+2
  2740  045E  0023               	movlb	3	; select bank3
  2741  045F  0827               	movf	((_B+1)^(0+384)+6),w
  2742  0460  0020               	movlb	0	; select bank0
  2743  0461  3D33               	addwfc	??_commutate+1,w
  2744  0462  00B5               	movwf	??_commutate+3
  2745  0463  0023               	movlb	3	; select bank3
  2746  0464  0828               	movf	(_B^(0+384)+8),w
  2747  0465  0020               	movlb	0	; select bank0
  2748  0466  0734               	addwf	??_commutate+2,w
  2749  0467  00B6               	movwf	??_commutate+4
  2750  0468  0023               	movlb	3	; select bank3
  2751  0469  0829               	movf	((_B+1)^(0+384)+8),w
  2752  046A  0020               	movlb	0	; select bank0
  2753  046B  3D35               	addwfc	??_commutate+3,w
  2754  046C  00B7               	movwf	??_commutate+5
  2755  046D  0023               	movlb	3	; select bank3
  2756  046E  082A               	movf	(_B^(0+384)+10),w
  2757  046F  0020               	movlb	0	; select bank0
  2758  0470  0736               	addwf	??_commutate+4,w
  2759  0471  00B8               	movwf	??_commutate+6
  2760  0472  0023               	movlb	3	; select bank3
  2761  0473  082B               	movf	((_B+1)^(0+384)+10),w
  2762  0474  0020               	movlb	0	; select bank0
  2763  0475  3D37               	addwfc	??_commutate+5,w
  2764  0476  00B9               	movwf	??_commutate+7
  2765  0477  3F00               	moviw [0]fsr0
  2766  0478  0738               	addwf	??_commutate+6,w
  2767  0479  00BA               	movwf	??_commutate+8
  2768  047A  3F01               	moviw [1]fsr0
  2769  047B  3D39               	addwfc	??_commutate+7,w
  2770  047C  00BB               	movwf	??_commutate+9
  2771  047D  3F40               	moviw [0]fsr1
  2772  047E  073A               	addwf	??_commutate+8,w
  2773  047F  00BC               	movwf	??_commutate+10
  2774  0480  3F41               	moviw [1]fsr1
  2775  0481  3D3B               	addwfc	??_commutate+9,w
  2776  0482  00BD               	movwf	??_commutate+11
  2777  0483  0023               	movlb	3	; select bank3
  2778  0484  0820               	movf	_B^(0+384),w
  2779  0485  0020               	movlb	0	; select bank0
  2780  0486  073C               	addwf	??_commutate+10,w
  2781  0487  0021               	movlb	1	; select bank1
  2782  0488  00BC               	movwf	_ui16_speed_fil^(0+128)
  2783  0489  0023               	movlb	3	; select bank3
  2784  048A  0821               	movf	(_B+1)^(0+384),w
  2785  048B  0020               	movlb	0	; select bank0
  2786  048C  3D3D               	addwfc	??_commutate+11,w
  2787  048D  0021               	movlb	1	; select bank1
  2788  048E  00BD               	movwf	(_ui16_speed_fil+1)^(0+128)
  2789                           
  2790                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  2791  048F  0020               	movlb	0	; select bank0
  2792  0490  0849               	movf	_comm_time+1,w
  2793  0491  0022               	movlb	2	; select bank2
  2794  0492  00B4               	movwf	(_ui16_speed_rar+1)^(0+256)
  2795  0493  0020               	movlb	0	; select bank0
  2796  0494  0848               	movf	_comm_time,w
  2797  0495  0022               	movlb	2	; select bank2
  2798  0496  00B3               	movwf	_ui16_speed_rar^(0+256)
  2799                           
  2800                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  2801  0497  0020               	movlb	0	; select bank0
  2802  0498  12CB               	bcf	_MotorFlags,5
  2803                           
  2804                           ;bldc.c: 1455: bemf_filter = 62;
  2805  0499  0022               	movlb	2	; select bank2
  2806  049A  01E0               	clrf	_ui8_sampleState^(0+256)
  2807  049B  0AE0               	incf	_ui8_sampleState^(0+256),f
  2808                           
  2809                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  2810  049C  0020               	movlb	0	; select bank0
  2811  049D  17CB               	bsf	_MotorFlags,7
  2812                           
  2813                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  2814  049E  1DCB               	btfss	_MotorFlags,3
  2815  049F  2D0D               	goto	l3861
  2816                           
  2817                           ;bldc.c: 1463: {
  2818                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 100 )>>7;
  2819  04A0  0022               	movlb	2	; select bank2
  2820  04A1  0834               	movf	(_ui16_speed_rar+1)^(0+256),w
  2821  04A2  0020               	movlb	0	; select bank0
  2822  04A3  00AD               	movwf	?___wmul+1
  2823  04A4  0022               	movlb	2	; select bank2
  2824  04A5  0833               	movf	_ui16_speed_rar^(0+256),w
  2825  04A6  0020               	movlb	0	; select bank0
  2826  04A7  00AC               	movwf	?___wmul
  2827  04A8  3064               	movlw	100
  2828  04A9  36AD               	lsrf	?___wmul+1,f
  2829  04AA  0CAC               	rrf	?___wmul,f
  2830  04AB  36AD               	lsrf	?___wmul+1,f
  2831  04AC  0CAC               	rrf	?___wmul,f
  2832  04AD  36AD               	lsrf	?___wmul+1,f
  2833  04AE  0CAC               	rrf	?___wmul,f
  2834  04AF  00AE               	movwf	?___wmul+2
  2835  04B0  01AF               	clrf	?___wmul+3
  2836  04B1  238D  3180         	fcall	___wmul
  2837  04B3  082D               	movf	?___wmul+1,w
  2838  04B4  0021               	movlb	1	; select bank1
  2839  04B5  00BB               	movwf	(_ui16_phase_advancement+1)^(0+128)
  2840  04B6  0020               	movlb	0	; select bank0
  2841  04B7  082C               	movf	?___wmul,w
  2842  04B8  0021               	movlb	1	; select bank1
  2843  04B9  00BA               	movwf	_ui16_phase_advancement^(0+128)
  2844  04BA  3007               	movlw	7
  2845  04BB                     u9485:	
  2846  04BB  36BB               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
  2847  04BC  0CBA               	rrf	_ui16_phase_advancement^(0+128),f
  2848  04BD  0B89               	decfsz	9,f
  2849  04BE  2CBB               	goto	u9485
  2850                           
  2851                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  2852  04BF  0020               	movlb	0	; select bank0
  2853  04C0  0849               	movf	_comm_time+1,w
  2854  04C1  0021               	movlb	1	; select bank1
  2855  04C2  023B               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  2856  04C3  1D03               	skipz
  2857  04C4  2CC9               	goto	u9495
  2858  04C5  0020               	movlb	0	; select bank0
  2859  04C6  0848               	movf	_comm_time,w
  2860  04C7  0021               	movlb	1	; select bank1
  2861  04C8  023A               	subwf	_ui16_phase_advancement^(0+128),w
  2862  04C9                     u9495:	
  2863  04C9  1803               	skipnc
  2864  04CA  2CD7               	goto	l29355
  2865                           
  2866                           ;bldc.c: 1474: {
  2867                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
  2868  04CB  0020               	movlb	0	; select bank0
  2869  04CC  2791  3180         	fcall	PL18	;call to abstracted procedure
  2870  04CE  0021               	movlb	1	; select bank1
  2871  04CF  083A               	movf	_ui16_phase_advancement^(0+128),w
  2872  04D0  0023               	movlb	3	; select bank3
  2873  04D1  02D0               	subwf	_phase_delay_counter^(0+384),f
  2874  04D2  0021               	movlb	1	; select bank1
  2875  04D3  083B               	movf	(_ui16_phase_advancement+1)^(0+128),w
  2876  04D4  0023               	movlb	3	; select bank3
  2877  04D5  3BD1               	subwfb	(_phase_delay_counter+1)^(0+384),f
  2878                           
  2879                           ;bldc.c: 1478: }
  2880  04D6  2CEC               	goto	l29379
  2881  04D7                     l29355:	
  2882                           
  2883                           ;bldc.c: 1481: else
  2884                           ;bldc.c: 1482: {
  2885                           ;bldc.c: 1484: phase_delay_counter = 0;
  2886  04D7  0023               	movlb	3	; select bank3
  2887  04D8  01D0               	clrf	_phase_delay_counter^(0+384)
  2888  04D9  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
  2889  04DA  2CEC               	goto	l29379
  2890  04DB                     l29357:	
  2891                           
  2892                           ;bldc.c: 1514: {
  2893                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
  2894  04DB  30A6               	movlw	166
  2895  04DC  2CE9               	goto	L31
  2896  04DD                     l29359:	
  2897                           ;bldc.c: 1517: break;
  2898                           
  2899                           
  2900                           ;bldc.c: 1524: {
  2901                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
  2902  04DD  30F4               	movlw	244
  2903  04DE  00B6               	movwf	_ui16_comm_time_max^(0+128)
  2904  04DF  3001               	movlw	1
  2905  04E0  00B7               	movwf	(_ui16_comm_time_max^(0+128)+1)
  2906                           
  2907                           ;bldc.c: 1527: break;
  2908  04E1  2CFC               	goto	l29381
  2909  04E2                     l29361:	
  2910                           
  2911                           ;bldc.c: 1534: {
  2912                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
  2913  04E2  307D               	movlw	125
  2914  04E3  2CE9               	goto	L31
  2915  04E4                     l29363:	
  2916                           ;bldc.c: 1537: break;
  2917                           
  2918                           
  2919                           ;bldc.c: 1544: {
  2920                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
  2921  04E4  3053               	movlw	83
  2922  04E5  2CE9               	goto	L31
  2923  04E6                     l29365:	
  2924                           ;bldc.c: 1547: break;
  2925                           
  2926                           
  2927                           ;bldc.c: 1554: {
  2928                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2400 * 2 )
      +                           ) ;
  2929  04E6  3029               	movlw	41
  2930  04E7  2CE9               	goto	L31
  2931  04E8                     l29367:	
  2932                           ;bldc.c: 1557: break;
  2933                           
  2934                           
  2935                           ;bldc.c: 1564: {
  2936                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           ) ;
  2937  04E8  3021               	movlw	33
  2938  04E9                     L31:	
  2939  04E9  00B6               	movwf	_ui16_comm_time_max^(0+128)
  2940  04EA  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
  2941                           
  2942                           ;bldc.c: 1567: break;
  2943  04EB  2CFC               	goto	l29381
  2944  04EC                     l29379:	
  2945                           
  2946                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2947                           ; Switch size 1, requested type "space"
  2948                           ; Number of cases is 1, Range of values is 0 to 0
  2949                           ; switch strategies available:
  2950                           ; Name         Instructions Cycles
  2951                           ; simple_byte            4     3 (average)
  2952                           ; direct_byte            8     6 (fixed)
  2953                           ; jumptable            260     6 (fixed)
  2954                           ; rangetable             5     4 (fixed)
  2955                           ; spacedrange            7     6 (fixed)
  2956                           ; locatedrange           1     3 (fixed)
  2957                           ;	Chosen strategy is simple_byte
  2958  04EC  0021               	movlb	1	; select bank1
  2959  04ED  083F               	movf	(_ui16_step_cnt+1)^(0+128),w
  2960  04EE  3A00               	xorlw	0	; case 0
  2961  04EF  1903               	skipnz
  2962  04F0  2CF2               	goto	l31597
  2963  04F1  2CE8               	goto	l29367
  2964  04F2                     l31597:	
  2965                           
  2966                           ; Switch size 1, requested type "space"
  2967                           ; Number of cases is 10, Range of values is 0 to 9
  2968                           ; switch strategies available:
  2969                           ; Name         Instructions Cycles
  2970                           ; direct_byte           26     6 (fixed)
  2971                           ; simple_byte           31    16 (average)
  2972                           ; jumptable            260     6 (fixed)
  2973                           ; rangetable            14     4 (fixed)
  2974                           ; spacedrange           25     6 (fixed)
  2975                           ; locatedrange          10     3 (fixed)
  2976                           ;	Chosen strategy is direct_byte
  2977  04F2  083E               	movf	_ui16_step_cnt^(0+128),w
  2978  04F3  0084               	movwf	4
  2979  04F4  300A               	movlw	10
  2980  04F5  0204               	subwf	4,w
  2981  04F6  1803               	skipnc
  2982  04F7  2CE8               	goto	l29367
  2983  04F8  3180               	movlp	high S31599
  2984  04F9  3504               	lslf	4,w
  2985  04FA  3E92               	addlw	low S31599
  2986  04FB  0082               	movwf	2
  2987  04FC                     l29381:	
  2988                           
  2989                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 *
      +                           2 ) ) )
  2990  04FC  3000               	movlw	0
  2991  04FD  0237               	subwf	(_ui16_comm_time_max+1)^(0+128),w
  2992  04FE  3021               	movlw	33
  2993  04FF  1903               	skipnz
  2994  0500  0236               	subwf	_ui16_comm_time_max^(0+128),w
  2995  0501  1803               	skipnc
  2996  0502  2D06               	goto	l29385
  2997                           
  2998                           ;bldc.c: 1626: {
  2999                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  3000  0503  3021               	movlw	33
  3001  0504  00B6               	movwf	_ui16_comm_time_max^(0+128)
  3002  0505  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
  3003  0506                     l29385:	
  3004                           
  3005                           ;bldc.c: 1630: }
  3006                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
  3007  0506  0020               	movlb	0	; select bank0
  3008  0507  1E4B               	btfss	_MotorFlags,4
  3009  0508  2D42               	goto	l3879
  3010                           
  3011                           ;bldc.c: 1636: {
  3012                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
  3013  0509  300A               	movlw	10
  3014  050A  0021               	movlb	1	; select bank1
  3015  050B  00E0               	movwf	_ui8_StartupPWM^(0+128)
  3016                           
  3017                           ;bldc.c: 1641: }
  3018                           ;bldc.c: 1644: }
  3019  050C  2D42               	goto	l3879
  3020  050D                     l3861:	
  3021                           
  3022                           ;bldc.c: 1647: else
  3023                           ;bldc.c: 1648: {
  3024                           ;bldc.c: 1652: if( rising_bemf_flag)
  3025  050D  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  3026  050E  2D13               	goto	l29391
  3027                           
  3028                           ;bldc.c: 1654: {
  3029                           ;bldc.c: 1657: phase_delay_counter = 0;
  3030  050F  0023               	movlb	3	; select bank3
  3031  0510  01D0               	clrf	_phase_delay_counter^(0+384)
  3032  0511  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
  3033                           
  3034                           ;bldc.c: 1659: }
  3035  0512  2D17               	goto	l29395
  3036  0513                     l29391:	
  3037                           
  3038                           ;bldc.c: 1662: else
  3039                           ;bldc.c: 1663: {
  3040                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  3041  0513  2791  3180         	fcall	PL18	;call to abstracted procedure
  3042  0515  36D1               	lsrf	(_phase_delay_counter+1)^(0+384),f
  3043  0516  0CD0               	rrf	_phase_delay_counter^(0+384),f
  3044  0517                     l29395:	
  3045  0517  3021               	movlw	33
  3046                           
  3047                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  3048  0518  01D0               	clrf	_phase_delay_counter^(0+384)
  3049  0519  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
  3050                           
  3051                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
  3052  051A  0021               	movlb	1	; select bank1
  3053  051B  00B6               	movwf	_ui16_comm_time_max^(0+128)
  3054  051C  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
  3055                           
  3056                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  3057  051D  0020               	movlb	0	; select bank0
  3058  051E  1F4B               	btfss	_MotorFlags,6
  3059  051F  2D40               	goto	l29419
  3060                           
  3061                           ;bldc.c: 1693: {
  3062                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  3063  0520  0025               	movlb	5	; select bank5
  3064  0521  0811               	movf	17,w	;volatile
  3065  0522  0020               	movlb	0	; select bank0
  3066  0523  0650               	xorwf	_ui8_duty_cycle_BLDC,w
  3067  0524  1903               	btfsc	3,2
  3068  0525  2D42               	goto	l3879
  3069                           
  3070                           ;bldc.c: 1706: else
  3071                           ;bldc.c: 1707: {
  3072                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  3073  0526  0025               	movlb	5	; select bank5
  3074  0527  0811               	movf	17,w	;volatile
  3075  0528  0020               	movlb	0	; select bank0
  3076  0529  0250               	subwf	_ui8_duty_cycle_BLDC,w
  3077  052A  1803               	skipnc
  3078  052B  2D36               	goto	l29413
  3079                           
  3080                           ;bldc.c: 1712: {
  3081                           ;bldc.c: 1714: CCPR1L--;
  3082  052C  0025               	movlb	5	; select bank5
  3083  052D  0391               	decf	17,f	;volatile
  3084                           
  3085                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  3086  052E  0811               	movf	17,w	;volatile
  3087  052F  0020               	movlb	0	; select bank0
  3088  0530  0250               	subwf	_ui8_duty_cycle_BLDC,w
  3089  0531  1803               	skipnc
  3090  0532  2D42               	goto	l3879
  3091                           
  3092                           ;bldc.c: 1718: {
  3093                           ;bldc.c: 1720: CCPR1L--;
  3094  0533  0025               	movlb	5	; select bank5
  3095  0534  0391               	decf	17,f	;volatile
  3096  0535  2D42               	goto	l3879
  3097  0536                     l29413:	
  3098                           
  3099                           ;bldc.c: 1728: else
  3100                           ;bldc.c: 1729: {
  3101                           ;bldc.c: 1731: CCPR1L++;
  3102  0536  0025               	movlb	5	; select bank5
  3103  0537  0A91               	incf	17,f	;volatile
  3104                           
  3105                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  3106  0538  0020               	movlb	0	; select bank0
  3107  0539  0850               	movf	_ui8_duty_cycle_BLDC,w
  3108  053A  0025               	movlb	5	; select bank5
  3109  053B  0211               	subwf	17,w	;volatile
  3110  053C  1803               	skipnc
  3111  053D  2D42               	goto	l3879
  3112                           
  3113                           ;bldc.c: 1735: {
  3114                           ;bldc.c: 1737: CCPR1L++;
  3115  053E  0A91               	incf	17,f	;volatile
  3116  053F  2D42               	goto	l3879
  3117  0540                     l29419:	
  3118                           
  3119                           ;bldc.c: 1768: else
  3120                           ;bldc.c: 1769: {
  3121                           ;bldc.c: 1771: CCPR1L = 0;
  3122  0540  0025               	movlb	5	; select bank5
  3123  0541  0191               	clrf	17	;volatile
  3124  0542                     l3879:	
  3125                           
  3126                           ;bldc.c: 1773: }
  3127                           ;bldc.c: 1777: }
  3128                           ;bldc.c: 1780: comm_time = 0;
  3129  0542  0020               	movlb	0	; select bank0
  3130  0543  01C8               	clrf	_comm_time
  3131  0544  01C9               	clrf	_comm_time+1
  3132                           
  3133                           ;bldc.c: 1784: if( comm_state == 0xff )
  3134  0545  0021               	movlb	1	; select bank1
  3135  0546  0859               	movf	_comm_state^(0+128),w
  3136  0547  3AFF               	xorlw	255
  3137  0548  1D03               	skipz
  3138  0549  2DF3               	goto	l29569
  3139                           
  3140                           ;bldc.c: 1786: {
  3141                           ;bldc.c: 1788: comm_state = 6;
  3142  054A  3006               	movlw	6
  3143  054B  00D9               	movwf	_comm_state^(0+128)
  3144  054C  2DF3               	goto	l29569
  3145  054D                     l29425:	
  3146                           
  3147                           ;bldc.c: 1800: {
  3148                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
  3149  054D  3001               	movlw	1
  3150  054E  0025               	movlb	5	; select bank5
  3151  054F  0096               	movwf	22	;volatile
  3152                           
  3153                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  3154  0550  0020               	movlb	0	; select bank0
  3155  0551  1F4B               	btfss	_MotorFlags,6
  3156  0552  2D56               	goto	l29431
  3157                           
  3158                           ;bldc.c: 1811: {
  3159                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  3160  0553  0022               	movlb	2	; select bank2
  3161  0554  27A4  3180         	fcall	PL43	;call to abstracted procedure
  3162  0556                     l29431:	
  3163                           
  3164                           ;bldc.c: 1815: }
  3165                           ;bldc.c: 1819: LATB2 = 0;
  3166  0556  0022               	movlb	2	; select bank2
  3167  0557  3009               	movlw	9
  3168  0558  110D               	bcf	13,2
  3169                           
  3170                           ;bldc.c: 1820: LATB1 = 0;
  3171  0559  108D               	bcf	13,1
  3172                           
  3173                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  3174  055A  0021               	movlb	1	; select bank1
  3175  055B  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  3176  055C  3025               	movlw	37
  3177                           
  3178                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  3179  055D  01E3               	clrf	_ui8_UPhase_sel^(0+128)
  3180  055E  0AE3               	incf	_ui8_UPhase_sel^(0+128),f
  3181                           
  3182                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  3183  055F  0022               	movlb	2	; select bank2
  3184  0560  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
  3185                           
  3186                           ;bldc.c: 1824: CM1CON1 = 0x02;
  3187  0561  3002               	movlw	2
  3188  0562  0092               	movwf	18	;volatile
  3189                           
  3190                           ;bldc.c: 1837: CM1CON0 = 0x84;
  3191  0563  3084               	movlw	132
  3192  0564  0091               	movwf	17	;volatile
  3193                           
  3194                           ;bldc.c: 1838: rising_bemf_flag = 1;
  3195  0565  0020               	movlb	0	; select bank0
  3196  0566  3006               	movlw	6
  3197  0567  2DD2               	goto	L37
  3198  0568                     l29449:	
  3199                           ;bldc.c: 1845: break;
  3200                           
  3201                           ;bldc.c: 1839: comm_state = 6;
  3202                           
  3203                           
  3204                           ;bldc.c: 1855: {
  3205                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
  3206  0568  3001               	movlw	1
  3207  0569  0025               	movlb	5	; select bank5
  3208  056A  0096               	movwf	22	;volatile
  3209                           
  3210                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  3211  056B  0020               	movlb	0	; select bank0
  3212  056C  1F4B               	btfss	_MotorFlags,6
  3213  056D  2D71               	goto	l29455
  3214                           
  3215                           ;bldc.c: 1865: {
  3216                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  3217  056E  0022               	movlb	2	; select bank2
  3218  056F  27A9  3180         	fcall	PL44	;call to abstracted procedure
  3219  0571                     l29455:	
  3220                           
  3221                           ;bldc.c: 1869: }
  3222                           ;bldc.c: 1873: LATB2 = 1;
  3223  0571  0022               	movlb	2	; select bank2
  3224  0572  3009               	movlw	9
  3225  0573  150D               	bsf	13,2
  3226                           
  3227                           ;bldc.c: 1874: LATB1 = 0;
  3228  0574  108D               	bcf	13,1
  3229                           
  3230                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  3231  0575  0021               	movlb	1	; select bank1
  3232  0576  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  3233  0577  3005               	movlw	5
  3234                           
  3235                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  3236  0578  01E3               	clrf	_ui8_UPhase_sel^(0+128)
  3237  0579  0AE3               	incf	_ui8_UPhase_sel^(0+128),f
  3238                           
  3239                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  3240  057A  0022               	movlb	2	; select bank2
  3241  057B  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
  3242                           
  3243                           ;bldc.c: 1878: CM1CON1 = 0x01;
  3244  057C  3001               	movlw	1
  3245  057D  0092               	movwf	18	;volatile
  3246                           
  3247                           ;bldc.c: 1892: CM1CON0 = 0x94;
  3248  057E  3094               	movlw	148
  3249  057F  0091               	movwf	17	;volatile
  3250  0580                     l29469:	
  3251                           
  3252                           ;bldc.c: 1893: rising_bemf_flag = 0;
  3253  0580  0020               	movlb	0	; select bank0
  3254  0581  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  3255                           
  3256                           ;bldc.c: 1894: comm_state = 1;
  3257  0582  0021               	movlb	1	; select bank1
  3258  0583  01D9               	clrf	_comm_state^(0+128)
  3259  0584  0AD9               	incf	_comm_state^(0+128),f
  3260                           
  3261                           ;bldc.c: 1902: break;
  3262  0585  2E07               	goto	l29571
  3263  0586                     l29473:	
  3264                           
  3265                           ;bldc.c: 1912: {
  3266                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
  3267  0586  3002               	movlw	2
  3268  0587  0025               	movlb	5	; select bank5
  3269  0588  0096               	movwf	22	;volatile
  3270                           
  3271                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  3272  0589  0020               	movlb	0	; select bank0
  3273  058A  1F4B               	btfss	_MotorFlags,6
  3274  058B  2D8F               	goto	l29479
  3275                           
  3276                           ;bldc.c: 1922: {
  3277                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  3278  058C  0022               	movlb	2	; select bank2
  3279  058D  279F  3180         	fcall	PL40	;call to abstracted procedure
  3280  058F                     l29479:	
  3281                           
  3282                           ;bldc.c: 1926: }
  3283                           ;bldc.c: 1929: LATC2 = 0;
  3284  058F  0022               	movlb	2	; select bank2
  3285  0590  3035               	movlw	53
  3286  0591  110E               	bcf	14,2
  3287                           
  3288                           ;bldc.c: 1931: LATB1 = 0;
  3289  0592  108D               	bcf	13,1
  3290                           
  3291                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  3292  0593  0021               	movlb	1	; select bank1
  3293  0594  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  3294                           
  3295                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  3296  0595  3005               	movlw	5
  3297  0596  00E3               	movwf	_ui8_UPhase_sel^(0+128)
  3298                           
  3299                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  3300  0597  0022               	movlb	2	; select bank2
  3301  0598  01D9               	clrf	_ui8_Ubemf_sel^(0+256)
  3302  0599  0AD9               	incf	_ui8_Ubemf_sel^(0+256),f
  3303                           
  3304                           ;bldc.c: 1935: CM1CON1 = 0x00;
  3305  059A  0192               	clrf	18	;volatile
  3306                           
  3307                           ;bldc.c: 1949: CM1CON0 = 0x84;
  3308  059B  3084               	movlw	132
  3309  059C  0091               	movwf	17	;volatile
  3310                           
  3311                           ;bldc.c: 1950: rising_bemf_flag = 1;
  3312  059D  0020               	movlb	0	; select bank0
  3313  059E  3002               	movlw	2
  3314  059F  2DD2               	goto	L37
  3315  05A0                     l29493:	
  3316                           ;bldc.c: 1956: break;
  3317                           
  3318                           ;bldc.c: 1951: comm_state = 2;
  3319                           
  3320                           
  3321                           ;bldc.c: 1966: {
  3322                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
  3323  05A0  3002               	movlw	2
  3324  05A1  0025               	movlb	5	; select bank5
  3325  05A2  0096               	movwf	22	;volatile
  3326                           
  3327                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  3328  05A3  0020               	movlb	0	; select bank0
  3329  05A4  1F4B               	btfss	_MotorFlags,6
  3330  05A5  2DA9               	goto	l29499
  3331                           
  3332                           ;bldc.c: 1977: {
  3333                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  3334  05A6  0022               	movlb	2	; select bank2
  3335  05A7  27A4  3180         	fcall	PL43	;call to abstracted procedure
  3336  05A9                     l29499:	
  3337                           
  3338                           ;bldc.c: 1981: }
  3339                           ;bldc.c: 1984: LATC2 = 0;
  3340  05A9  0022               	movlb	2	; select bank2
  3341  05AA  3035               	movlw	53
  3342  05AB  110E               	bcf	14,2
  3343                           
  3344                           ;bldc.c: 1986: LATB1 = 1;
  3345  05AC  148D               	bsf	13,1
  3346                           
  3347                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  3348  05AD  0021               	movlb	1	; select bank1
  3349  05AE  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  3350                           
  3351                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  3352  05AF  3005               	movlw	5
  3353  05B0  00E3               	movwf	_ui8_UPhase_sel^(0+128)
  3354                           
  3355                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  3356  05B1  3025               	movlw	37
  3357  05B2  0022               	movlb	2	; select bank2
  3358  05B3  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
  3359                           
  3360                           ;bldc.c: 1990: CM1CON1 = 0x02;
  3361  05B4  3002               	movlw	2
  3362  05B5  0092               	movwf	18	;volatile
  3363                           
  3364                           ;bldc.c: 2004: CM1CON0 = 0x94;
  3365  05B6  3094               	movlw	148
  3366  05B7  0091               	movwf	17	;volatile
  3367                           
  3368                           ;bldc.c: 2005: rising_bemf_flag = 0;
  3369  05B8  0020               	movlb	0	; select bank0
  3370  05B9  3003               	movlw	3
  3371  05BA  2DEA               	goto	L38
  3372  05BB                     l29517:	
  3373                           ;bldc.c: 2011: break;
  3374                           
  3375                           ;bldc.c: 2006: comm_state = 3;
  3376                           
  3377                           
  3378                           ;bldc.c: 2020: {
  3379                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
  3380  05BB  3004               	movlw	4
  3381  05BC  0025               	movlb	5	; select bank5
  3382  05BD  0096               	movwf	22	;volatile
  3383                           
  3384                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  3385  05BE  0020               	movlb	0	; select bank0
  3386  05BF  1F4B               	btfss	_MotorFlags,6
  3387  05C0  2DC4               	goto	l29523
  3388                           
  3389                           ;bldc.c: 2031: {
  3390                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  3391  05C1  0022               	movlb	2	; select bank2
  3392  05C2  27A9  3180         	fcall	PL44	;call to abstracted procedure
  3393  05C4                     l29523:	
  3394                           
  3395                           ;bldc.c: 2035: }
  3396                           ;bldc.c: 2038: LATC2 = 0;
  3397  05C4  0022               	movlb	2	; select bank2
  3398  05C5  3011               	movlw	17
  3399  05C6  110E               	bcf	14,2
  3400                           
  3401                           ;bldc.c: 2039: LATB2 = 0;
  3402                           
  3403                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  3404                           
  3405                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  3406  05C7  2799  3180         	fcall	PL27	;call to abstracted procedure
  3407                           
  3408                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  3409  05C9  3005               	movlw	5
  3410  05CA  0022               	movlb	2	; select bank2
  3411  05CB  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
  3412                           
  3413                           ;bldc.c: 2044: CM1CON1 = 0x01;
  3414  05CC  3001               	movlw	1
  3415  05CD  0092               	movwf	18	;volatile
  3416                           
  3417                           ;bldc.c: 2059: CM1CON0 = 0x84;
  3418  05CE  3084               	movlw	132
  3419  05CF  0091               	movwf	17	;volatile
  3420                           
  3421                           ;bldc.c: 2060: rising_bemf_flag = 1;
  3422  05D0  0020               	movlb	0	; select bank0
  3423  05D1  3004               	movlw	4
  3424  05D2                     L37:	
  3425  05D2  1453               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  3426                           
  3427                           ;bldc.c: 2061: comm_state = 4;
  3428  05D3  2DEB               	goto	L35
  3429  05D4                     l29541:	
  3430                           ;bldc.c: 2066: break;
  3431                           
  3432                           
  3433                           ;bldc.c: 2076: {
  3434                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
  3435  05D4  3004               	movlw	4
  3436  05D5  0025               	movlb	5	; select bank5
  3437  05D6  0096               	movwf	22	;volatile
  3438                           
  3439                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  3440  05D7  0020               	movlb	0	; select bank0
  3441  05D8  1F4B               	btfss	_MotorFlags,6
  3442  05D9  2DDD               	goto	l29547
  3443                           
  3444                           ;bldc.c: 2086: {
  3445                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  3446  05DA  0022               	movlb	2	; select bank2
  3447  05DB  279F  3180         	fcall	PL40	;call to abstracted procedure
  3448  05DD                     l29547:	
  3449                           
  3450                           ;bldc.c: 2090: }
  3451                           ;bldc.c: 2093: LATC2 = 1;
  3452  05DD  0022               	movlb	2	; select bank2
  3453  05DE  3011               	movlw	17
  3454  05DF  150E               	bsf	14,2
  3455                           
  3456                           ;bldc.c: 2094: LATB2 = 0;
  3457                           
  3458                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  3459                           
  3460                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  3461  05E0  2799  3180         	fcall	PL27	;call to abstracted procedure
  3462                           
  3463                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  3464  05E2  0022               	movlb	2	; select bank2
  3465  05E3  01D9               	clrf	_ui8_Ubemf_sel^(0+256)
  3466  05E4  0AD9               	incf	_ui8_Ubemf_sel^(0+256),f
  3467                           
  3468                           ;bldc.c: 2099: CM1CON1 = 0x00;
  3469  05E5  0192               	clrf	18	;volatile
  3470                           
  3471                           ;bldc.c: 2113: CM1CON0 = 0x94;
  3472  05E6  3094               	movlw	148
  3473  05E7  0091               	movwf	17	;volatile
  3474                           
  3475                           ;bldc.c: 2114: rising_bemf_flag = 0;
  3476  05E8  0020               	movlb	0	; select bank0
  3477  05E9  3005               	movlw	5
  3478  05EA                     L38:	
  3479  05EA  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  3480  05EB                     L35:	
  3481                           
  3482                           ;bldc.c: 2115: comm_state = 5;
  3483  05EB  0021               	movlb	1	; select bank1
  3484  05EC  00D9               	movwf	_comm_state^(0+128)
  3485                           
  3486                           ;bldc.c: 2120: break;
  3487  05ED  2E07               	goto	l29571
  3488  05EE                     l29561:	
  3489                           
  3490                           ;bldc.c: 2129: {
  3491                           ;bldc.c: 2131: PSTR1CON = 0x00;
  3492  05EE  0025               	movlb	5	; select bank5
  3493  05EF  0196               	clrf	22	;volatile
  3494                           
  3495                           ;bldc.c: 2132: CM1CON0 = 0x00;
  3496  05F0  0022               	movlb	2	; select bank2
  3497  05F1  0191               	clrf	17	;volatile
  3498  05F2  2D80               	goto	l29469
  3499  05F3                     l29569:	
  3500  05F3  0859               	movf	_comm_state^(0+128),w
  3501                           
  3502                           ; Switch size 1, requested type "space"
  3503                           ; Number of cases is 6, Range of values is 1 to 6
  3504                           ; switch strategies available:
  3505                           ; Name         Instructions Cycles
  3506                           ; simple_byte           19    10 (average)
  3507                           ; direct_byte           21     9 (fixed)
  3508                           ; jumptable            263     9 (fixed)
  3509                           ;	Chosen strategy is simple_byte
  3510  05F4  3A01               	xorlw	1	; case 1
  3511  05F5  1903               	skipnz
  3512  05F6  2D4D               	goto	l29425
  3513  05F7  3A03               	xorlw	3	; case 2
  3514  05F8  1903               	skipnz
  3515  05F9  2D68               	goto	l29449
  3516  05FA  3A01               	xorlw	1	; case 3
  3517  05FB  1903               	skipnz
  3518  05FC  2D86               	goto	l29473
  3519  05FD  3A07               	xorlw	7	; case 4
  3520  05FE  1903               	skipnz
  3521  05FF  2DA0               	goto	l29493
  3522  0600  3A01               	xorlw	1	; case 5
  3523  0601  1903               	skipnz
  3524  0602  2DBB               	goto	l29517
  3525  0603  3A03               	xorlw	3	; case 6
  3526  0604  1903               	skipnz
  3527  0605  2DD4               	goto	l29541
  3528  0606  2DEE               	goto	l29561
  3529  0607                     l29571:	
  3530                           
  3531                           ;bldc.c: 2146: {
  3532                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  3533  0607  3028               	movlw	40
  3534  0608  00DB               	movwf	_ui8_BlankingCount^(0+128)
  3535                           
  3536                           ;bldc.c: 2158: }
  3537                           ;bldc.c: 2161: comm_time = 0;
  3538                           
  3539                           ;bldc.c: 2150: }
  3540  0609  0020               	movlb	0	; select bank0
  3541  060A  01C8               	clrf	_comm_time
  3542  060B  01C9               	clrf	_comm_time+1
  3543  060C  0008               	return
  3544  060D                     __end_of_commutate:	
  3545  060D                     __ptext2045:	
  3546 ;; =============== function _cksum ends ============
  3547                           
  3548                           
  3549 ;; *************** function _SetDiagAlarm *****************
  3550 ;; Defined at:
  3551 ;;		line 213 in file "../diag.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;		None
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;		None
  3556 ;; Return value:  Size  Location     Type
  3557 ;;		None               void
  3558 ;; Registers used:
  3559 ;;		wreg, status,2, status,0, pclath, cstack
  3560 ;; Tracked objects:
  3561 ;;		On entry : 1F/1
  3562 ;;		On exit  : 1F/2
  3563 ;;		Unchanged: FFFE0/0
  3564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3565 ;;      Params:         0       0       0       0       0       0       0       0
  3566 ;;      Locals:         0       0       0       0       0       0       0       0
  3567 ;;      Temps:          0       0       0       0       0       0       0       0
  3568 ;;      Totals:         0       0       0       0       0       0       0       0
  3569 ;;Total ram usage:        0 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:    5
  3572 ;; This function calls:
  3573 ;;		_PWM_Write_Out
  3574 ;; This function is called by:
  3575 ;;		_main
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578  060D                     _SetDiagAlarm:	
  3579                           
  3580                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  3581                           
  3582                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  3583  060D  1F65               	btfss	_ui8_error_Flags^(0+128),6
  3584  060E  2E11               	goto	l29603
  3585                           
  3586                           ;diag.c: 221: {
  3587                           ;diag.c: 223: PWM_Write_Out( 88 );
  3588  060F  3058               	movlw	88
  3589  0610  2E2F               	ljmp	_PWM_Write_Out
  3590  0611                     l29603:	
  3591                           ;diag.c: 226: }
  3592                           
  3593                           
  3594                           ;diag.c: 229: else
  3595                           ;diag.c: 230: {
  3596                           ;diag.c: 232: if( bool_CPU_TempAlarm )
  3597  0611  0853               	movf	_bool_CPU_TempAlarm^(0+128),w
  3598  0612  1903               	btfsc	3,2
  3599  0613  2E16               	goto	l29607
  3600                           
  3601                           ;diag.c: 235: {
  3602                           ;diag.c: 237: PWM_Write_Out( 33 );
  3603  0614  3021               	movlw	33
  3604  0615  2E2F               	ljmp	_PWM_Write_Out
  3605  0616                     l29607:	
  3606                           ;diag.c: 240: }
  3607                           
  3608                           
  3609                           ;diag.c: 243: else
  3610                           ;diag.c: 244: {
  3611                           ;diag.c: 246: if( bool_DryRunningAlarm )
  3612  0616  0855               	movf	_bool_DryRunningAlarm^(0+128),w
  3613  0617  1903               	btfsc	3,2
  3614  0618  2E1B               	goto	l29611
  3615                           
  3616                           ;diag.c: 248: {
  3617                           ;diag.c: 250: PWM_Write_Out( 66 );
  3618  0619  3042               	movlw	66
  3619  061A  2E2F               	ljmp	_PWM_Write_Out
  3620  061B                     l29611:	
  3621                           ;diag.c: 253: }
  3622                           
  3623                           
  3624                           ;diag.c: 256: else
  3625                           ;diag.c: 257: {
  3626                           ;diag.c: 259: if( bool_MotorStalled )
  3627  061B  0857               	movf	_bool_MotorStalled^(0+128),w
  3628  061C  1903               	btfsc	3,2
  3629  061D  2E20               	goto	l29615
  3630                           
  3631                           ;diag.c: 261: {
  3632                           ;diag.c: 263: PWM_Write_Out( 55 );
  3633  061E  3037               	movlw	55
  3634  061F  2E2F               	ljmp	_PWM_Write_Out
  3635  0620                     l29615:	
  3636                           ;diag.c: 266: }
  3637                           
  3638                           
  3639                           ;diag.c: 269: else
  3640                           ;diag.c: 270: {
  3641                           ;diag.c: 272: if( bool_HighCurrentAlarm )
  3642  0620  0856               	movf	_bool_HighCurrentAlarm^(0+128),w
  3643  0621  1903               	btfsc	3,2
  3644  0622  2E25               	goto	l5830
  3645                           
  3646                           ;diag.c: 274: {
  3647                           ;diag.c: 276: PWM_Write_Out( 44 );
  3648  0623  302C               	movlw	44
  3649  0624  2E2F               	ljmp	_PWM_Write_Out
  3650  0625                     l5830:	
  3651                           ;diag.c: 278: }
  3652                           
  3653                           
  3654                           ;diag.c: 281: else
  3655                           ;diag.c: 282: {
  3656                           ;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  3657  0625  1EE5               	btfss	_ui8_error_Flags^(0+128),5
  3658  0626  2E29               	goto	l5832
  3659                           
  3660                           ;diag.c: 287: {
  3661                           ;diag.c: 289: PWM_Write_Out( 77 );
  3662  0627  304D               	movlw	77
  3663  0628  2E2F               	ljmp	_PWM_Write_Out
  3664  0629                     l5832:	
  3665                           ;diag.c: 292: }
  3666                           
  3667                           
  3668                           ;diag.c: 295: else
  3669                           ;diag.c: 296: {
  3670                           ;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  3671  0629  1C65               	btfss	_ui8_error_Flags^(0+128),0
  3672  062A  2E2D               	goto	l29623
  3673                           
  3674                           ;diag.c: 300: {
  3675                           ;diag.c: 302: PWM_Write_Out( 22 );
  3676  062B  3016               	movlw	22
  3677  062C  2E2F               	ljmp	_PWM_Write_Out
  3678  062D                     l29623:	
  3679                           ;diag.c: 305: }
  3680                           
  3681                           
  3682                           ;diag.c: 308: else
  3683                           ;diag.c: 309: {
  3684                           ;diag.c: 311: PWM_Write_Out( 11 );
  3685  062D  300B               	movlw	11
  3686  062E  2E2F               	ljmp	_PWM_Write_Out
  3687  062F                     __end_of_SetDiagAlarm:	
  3688  062F                     __ptext2070:	
  3689 ;; =============== function _read_eeprom_data ends ============
  3690                           
  3691                           
  3692 ;; *************** function _PWM_Write_Out *****************
  3693 ;; Defined at:
  3694 ;;		line 342 in file "../pwm.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  ui8_DutyCycl    1    wreg     unsigned char 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  ui8_DutyCycl    1   12[BANK0 ] unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;		None               void
  3701 ;; Registers used:
  3702 ;;		wreg
  3703 ;; Tracked objects:
  3704 ;;		On entry : 1C/2
  3705 ;;		On exit  : 1F/2
  3706 ;;		Unchanged: FFFE0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3708 ;;      Params:         0       0       0       0       0       0       0       0
  3709 ;;      Locals:         0       1       0       0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0       0
  3711 ;;      Totals:         0       1       0       0       0       0       0       0
  3712 ;;Total ram usage:        1 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    4
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_DiagInit
  3719 ;;		_SetDiagAlarm
  3720 ;;		_EOL
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723  062F                     _PWM_Write_Out:	
  3724                           
  3725                           ; Regs used in _PWM_Write_Out: [wreg]
  3726                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
  3727  062F  0020               	movlb	0	; select bank0
  3728  0630  00AC               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
  3729                           
  3730                           ;pwm.c: 344: ui8_PWMoutvalue = ui8_DutyCycle_Out;
  3731  0631  0022               	movlb	2	; select bank2
  3732  0632  00D5               	movwf	_ui8_PWMoutvalue^(0+256)
  3733  0633  0008               	return
  3734  0634                     __end_of_PWM_Write_Out:	
  3735  0634                     __ptext2043:	
  3736 ;; =============== function __ELINMIntSendMessage ends ============
  3737                           
  3738                           
  3739 ;; *************** function _PWMReadDC *****************
  3740 ;; Defined at:
  3741 ;;		line 363 in file "../pwm.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;		None
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      unsigned char 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0, pclath, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/2
  3752 ;;		On exit  : 1F/2
  3753 ;;		Unchanged: FFFE0/0
  3754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3755 ;;      Params:         0       0       0       0       0       0       0       0
  3756 ;;      Locals:         0       0       0       0       0       0       0       0
  3757 ;;      Temps:          0       0       0       0       0       0       0       0
  3758 ;;      Totals:         0       0       0       0       0       0       0       0
  3759 ;;Total ram usage:        0 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:    5
  3762 ;; This function calls:
  3763 ;;		___tmul
  3764 ;;		___ltdiv
  3765 ;; This function is called by:
  3766 ;;		_EOL
  3767 ;;		_main
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770  0634                     _PWMReadDC:	
  3771                           
  3772                           ;pwm.c: 366: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
  3773                           
  3774                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
  3775  0634  0023               	movlb	3	; select bank3
  3776  0635  085A               	movf	_ui16_PWM_Freq_In^(0+384),w
  3777  0636  0020               	movlb	0	; select bank0
  3778  0637  00B5               	movwf	?___ltdiv
  3779  0638  0023               	movlb	3	; select bank3
  3780  0639  085B               	movf	(_ui16_PWM_Freq_In+1)^(0+384),w
  3781  063A  0020               	movlb	0	; select bank0
  3782  063B  00B6               	movwf	?___ltdiv+1
  3783  063C  01B7               	clrf	?___ltdiv+2
  3784  063D  0023               	movlb	3	; select bank3
  3785  063E  086A               	movf	_ui16_Duty_Cycle_In^(0+384),w
  3786  063F  0020               	movlb	0	; select bank0
  3787  0640  00AC               	movwf	?___tmul
  3788  0641  0023               	movlb	3	; select bank3
  3789  0642  086B               	movf	(_ui16_Duty_Cycle_In+1)^(0+384),w
  3790  0643  0020               	movlb	0	; select bank0
  3791  0644  00AD               	movwf	?___tmul+1
  3792  0645  30C8               	movlw	200
  3793  0646  01AE               	clrf	?___tmul+2
  3794  0647  00AF               	movwf	?___tmul+3
  3795  0648  01B0               	clrf	?___tmul+4
  3796  0649  01B1               	clrf	?___tmul+5
  3797  064A  26A4  3180         	fcall	___tmul
  3798  064C  082C               	movf	?___tmul,w
  3799  064D  00B8               	movwf	?___ltdiv+3
  3800  064E  082D               	movf	?___tmul+1,w
  3801  064F  00B9               	movwf	?___ltdiv+4
  3802  0650  082E               	movf	?___tmul+2,w
  3803  0651  00BA               	movwf	?___ltdiv+5
  3804  0652  2672  3180         	fcall	___ltdiv
  3805  0654  0835               	movf	?___ltdiv,w
  3806  0655  0021               	movlb	1	; select bank1
  3807  0656  00DF               	movwf	_ui8_PWMinDC_sav^(0+128)
  3808                           
  3809                           ;pwm.c: 368: if( ui8_PWMinDC_sav == 0 )
  3810  0657  08DF               	movf	_ui8_PWMinDC_sav^(0+128),f
  3811  0658  1D03               	skipz
  3812  0659  2E65               	goto	l29659
  3813                           
  3814                           ;pwm.c: 370: {
  3815                           ;pwm.c: 374: ui8_PWMin_failCnt++;
  3816  065A  0022               	movlb	2	; select bank2
  3817  065B  3005               	movlw	5
  3818  065C  0AD4               	incf	_ui8_PWMin_failCnt^(0+256),f
  3819                           
  3820                           ;pwm.c: 376: if( ui8_PWMin_failCnt >= 5 )
  3821  065D  0254               	subwf	_ui8_PWMin_failCnt^(0+256),w
  3822  065E  1C03               	skipc
  3823  065F  2E6E               	goto	l29665
  3824                           
  3825                           ;pwm.c: 378: {
  3826                           ;pwm.c: 380: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  3827  0660  0021               	movlb	1	; select bank1
  3828  0661  085F               	movf	_ui8_PWMinDC_sav^(0+128),w
  3829  0662  0022               	movlb	2	; select bank2
  3830  0663  00D2               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  3831  0664  2E6E               	goto	l29665
  3832  0665                     l29659:	
  3833                           
  3834                           ;pwm.c: 391: else
  3835                           ;pwm.c: 392: {
  3836                           ;pwm.c: 396: ui8_PWMin_failCnt = 0;
  3837  0665  0022               	movlb	2	; select bank2
  3838  0666  01D4               	clrf	_ui8_PWMin_failCnt^(0+256)
  3839                           
  3840                           ;pwm.c: 399: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  3841  0667  0021               	movlb	1	; select bank1
  3842  0668  085F               	movf	_ui8_PWMinDC_sav^(0+128),w
  3843  0669  0022               	movlb	2	; select bank2
  3844  066A  00D2               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  3845                           
  3846                           ;pwm.c: 401: ui16_Duty_Cycle_In = 0;
  3847  066B  0023               	movlb	3	; select bank3
  3848  066C  01EA               	clrf	_ui16_Duty_Cycle_In^(0+384)
  3849  066D  01EB               	clrf	(_ui16_Duty_Cycle_In+1)^(0+384)
  3850  066E                     l29665:	
  3851                           
  3852                           ;pwm.c: 403: }
  3853                           ;pwm.c: 408: return ( 200 - ui8_Duty_Cycle_In_Ratio );
  3854  066E  0022               	movlb	2	; select bank2
  3855  066F  0852               	movf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
  3856  0670  3CC8               	sublw	200
  3857  0671  0008               	return
  3858  0672                     __end_of_PWMReadDC:	
  3859  0672                     __ptext2051:	
  3860 ;; =============== function ___tmul ends ============
  3861                           
  3862                           
  3863 ;; *************** function ___ltdiv *****************
  3864 ;; Defined at:
  3865 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\ltdiv.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  divisor         3   21[BANK0 ] unsigned um
  3868 ;;  dividend        3   24[BANK0 ] unsigned um
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  quotient        3   27[BANK0 ] unsigned um
  3871 ;;  counter         1   30[BANK0 ] unsigned char 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  3   21[BANK0 ] unsigned um
  3874 ;; Registers used:
  3875 ;;		wreg, status,2, status,0
  3876 ;; Tracked objects:
  3877 ;;		On entry : 1F/0
  3878 ;;		On exit  : 1F/0
  3879 ;;		Unchanged: FFFE0/0
  3880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3881 ;;      Params:         0       6       0       0       0       0       0       0
  3882 ;;      Locals:         0       4       0       0       0       0       0       0
  3883 ;;      Temps:          0       0       0       0       0       0       0       0
  3884 ;;      Totals:         0      10       0       0       0       0       0       0
  3885 ;;Total ram usage:       10 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    4
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_PWMReadDC
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894  0672                     ___ltdiv:	
  3895                           
  3896                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  3897  0672  01BB               	clrf	___ltdiv@quotient
  3898  0673  01BC               	clrf	___ltdiv@quotient+1
  3899  0674  01BD               	clrf	___ltdiv@quotient+2
  3900  0675  0837               	movf	___ltdiv@divisor+2,w
  3901  0676  0436               	iorwf	___ltdiv@divisor+1,w
  3902  0677  0435               	iorwf	___ltdiv@divisor,w
  3903  0678  1903               	skipnz
  3904  0679  2E9D               	goto	l28987
  3905  067A  01BE               	clrf	___ltdiv@counter
  3906  067B                     L39:	
  3907  067B  0ABE               	incf	___ltdiv@counter,f
  3908  067C  1BB7               	btfsc	___ltdiv@divisor+2,7
  3909  067D  2E82               	goto	l28975
  3910  067E  35B5               	lslf	___ltdiv@divisor,f
  3911  067F  0DB6               	rlf	___ltdiv@divisor+1,f
  3912  0680  0DB7               	rlf	___ltdiv@divisor+2,f
  3913  0681  2E7B               	goto	L39
  3914  0682                     l28975:	
  3915  0682  35BB               	lslf	___ltdiv@quotient,f
  3916  0683  0DBC               	rlf	___ltdiv@quotient+1,f
  3917  0684  0DBD               	rlf	___ltdiv@quotient+2,f
  3918  0685  0837               	movf	___ltdiv@divisor+2,w
  3919  0686  023A               	subwf	___ltdiv@dividend+2,w
  3920  0687  1D03               	skipz
  3921  0688  2E8F               	goto	u9155
  3922  0689  0836               	movf	___ltdiv@divisor+1,w
  3923  068A  0239               	subwf	___ltdiv@dividend+1,w
  3924  068B  1D03               	skipz
  3925  068C  2E8F               	goto	u9155
  3926  068D  0835               	movf	___ltdiv@divisor,w
  3927  068E  0238               	subwf	___ltdiv@dividend,w
  3928  068F                     u9155:	
  3929  068F  1C03               	skipc
  3930  0690  2E98               	goto	l28983
  3931  0691  0835               	movf	___ltdiv@divisor,w
  3932  0692  02B8               	subwf	___ltdiv@dividend,f
  3933  0693  0836               	movf	___ltdiv@divisor+1,w
  3934  0694  3BB9               	subwfb	___ltdiv@dividend+1,f
  3935  0695  0837               	movf	___ltdiv@divisor+2,w
  3936  0696  3BBA               	subwfb	___ltdiv@dividend+2,f
  3937  0697  143B               	bsf	___ltdiv@quotient,0
  3938  0698                     l28983:	
  3939  0698  36B7               	lsrf	___ltdiv@divisor+2,f
  3940  0699  0CB6               	rrf	___ltdiv@divisor+1,f
  3941  069A  0CB5               	rrf	___ltdiv@divisor,f
  3942  069B  0BBE               	decfsz	___ltdiv@counter,f
  3943  069C  2E82               	goto	l28975
  3944  069D                     l28987:	
  3945  069D  083B               	movf	___ltdiv@quotient,w
  3946  069E  00B5               	movwf	?___ltdiv
  3947  069F  083C               	movf	___ltdiv@quotient+1,w
  3948  06A0  00B6               	movwf	?___ltdiv+1
  3949  06A1  083D               	movf	___ltdiv@quotient+2,w
  3950  06A2  00B7               	movwf	?___ltdiv+2
  3951  06A3  0008               	return
  3952  06A4                     __end_of___ltdiv:	
  3953  06A4                     __ptext2050:	
  3954 ;; =============== function _ADC_Wait ends ============
  3955                           
  3956                           
  3957 ;; *************** function ___tmul *****************
  3958 ;; Defined at:
  3959 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\tmul.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  multiplier      3   12[BANK0 ] unsigned um
  3962 ;;  multiplicand    3   15[BANK0 ] unsigned um
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  product         3   18[BANK0 ] unsigned um
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  3   12[BANK0 ] unsigned um
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0
  3969 ;; Tracked objects:
  3970 ;;		On entry : 1F/0
  3971 ;;		On exit  : 1F/0
  3972 ;;		Unchanged: FFFE0/0
  3973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3974 ;;      Params:         0       6       0       0       0       0       0       0
  3975 ;;      Locals:         0       3       0       0       0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0
  3977 ;;      Totals:         0       9       0       0       0       0       0       0
  3978 ;;Total ram usage:        9 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    4
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_PWMReadDC
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987  06A4                     ___tmul:	
  3988                           
  3989                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  3990  06A4  01B2               	clrf	___tmul@product
  3991  06A5  01B3               	clrf	___tmul@product+1
  3992  06A6  01B4               	clrf	___tmul@product+2
  3993  06A7                     l20013:	
  3994  06A7  1C2C               	btfss	___tmul@multiplier,0
  3995  06A8  2EAF               	goto	l28995
  3996  06A9  082F               	movf	___tmul@multiplicand,w
  3997  06AA  07B2               	addwf	___tmul@product,f
  3998  06AB  0830               	movf	___tmul@multiplicand+1,w
  3999  06AC  3DB3               	addwfc	___tmul@product+1,f
  4000  06AD  0831               	movf	___tmul@multiplicand+2,w
  4001  06AE  3DB4               	addwfc	___tmul@product+2,f
  4002  06AF                     l28995:	
  4003  06AF  35AF               	lslf	___tmul@multiplicand,f
  4004  06B0  0DB0               	rlf	___tmul@multiplicand+1,f
  4005  06B1  0DB1               	rlf	___tmul@multiplicand+2,f
  4006  06B2  36AE               	lsrf	___tmul@multiplier+2,f
  4007  06B3  0CAD               	rrf	___tmul@multiplier+1,f
  4008  06B4  0CAC               	rrf	___tmul@multiplier,f
  4009  06B5  082E               	movf	___tmul@multiplier+2,w
  4010  06B6  042D               	iorwf	___tmul@multiplier+1,w
  4011  06B7  042C               	iorwf	___tmul@multiplier,w
  4012  06B8  1D03               	skipz
  4013  06B9  2EA7               	goto	l20013
  4014  06BA  0832               	movf	___tmul@product,w
  4015  06BB  00AC               	movwf	?___tmul
  4016  06BC  0833               	movf	___tmul@product+1,w
  4017  06BD  00AD               	movwf	?___tmul+1
  4018  06BE  0834               	movf	___tmul@product+2,w
  4019  06BF  00AE               	movwf	?___tmul+2
  4020  06C0  0008               	return
  4021  06C1                     __end_of___tmul:	
  4022  06C1                     __ptext2031:	
  4023 ;; =============== function _EOL ends ============
  4024                           
  4025                           
  4026 ;; *************** function _Receive_Diag *****************
  4027 ;; Defined at:
  4028 ;;		line 317 in file "../lin.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  id              1    wreg     unsigned char 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;  id              1   27[BANK0 ] unsigned char 
  4033 ;; Return value:  Size  Location     Type
  4034 ;;		None               void
  4035 ;; Registers used:
  4036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4037 ;; Tracked objects:
  4038 ;;		On entry : 1F/0
  4039 ;;		On exit  : 1C/0
  4040 ;;		Unchanged: FFFE0/0
  4041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4042 ;;      Params:         0       0       0       0       0       0       0       0
  4043 ;;      Locals:         0       1       0       0       0       0       0       0
  4044 ;;      Temps:          0       1       0       0       0       0       0       0
  4045 ;;      Totals:         0       2       0       0       0       0       0       0
  4046 ;;Total ram usage:        2 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    7
  4049 ;; This function calls:
  4050 ;;		__ELINMIntReceiveMessage
  4051 ;;		__ELINMIntGetPointer
  4052 ;; This function is called by:
  4053 ;;		_main
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056  06C1                     _Receive_Diag:	
  4057                           
  4058                           ; Regs used in _Receive_Diag: [wreg+fsr1l-status,0+pclath+cstack]
  4059                           ;Receive_Diag@id stored from wreg
  4060  06C1  00BB               	movwf	Receive_Diag@id
  4061  06C2                     l11566:	
  4062                           ;lin.c: 320: {
  4063                           ;lin.c: 321: ;
  4064                           
  4065  06C2  1DCC               	btfss	__ELINMIntStatus,3
  4066  06C3  2EC2               	goto	l11566
  4067                           
  4068                           ;lin.c: 322: }
  4069                           ;lin.c: 323: ;
  4070                           ;lin.c: 324: _ELINMIntReceiveMessage ( 5, id, 8 );
  4071  06C4  083B               	movf	Receive_Diag@id,w
  4072  06C5  00B7               	movwf	?__ELINMIntReceiveMessage
  4073  06C6  3008               	movlw	8
  4074  06C7  00B8               	movwf	?__ELINMIntReceiveMessage+1
  4075  06C8  3005               	movlw	5
  4076  06C9  2713  3180         	fcall	__ELINMIntReceiveMessage
  4077  06CB                     l11569:	
  4078                           ;lin.c: 326: {
  4079                           
  4080  06CB  1DCC               	btfss	__ELINMIntStatus,3
  4081  06CC  2ECB               	goto	l11569
  4082                           
  4083                           ;lin.c: 328: }
  4084                           ;lin.c: 329: ;
  4085                           ;lin.c: 330: if( ( ErrorCode == ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  4086  06CD  30F0               	movlw	240
  4087  06CE  054C               	andwf	__ELINMIntStatus,w
  4088  06CF  00BA               	movwf	??_Receive_Diag
  4089  06D0  0021               	movlb	1	; select bank1
  4090  06D1  064A               	xorwf	_ErrorCode^(0+128),w
  4091  06D2  1903               	btfsc	3,2
  4092  06D3  0008               	return
  4093                           
  4094                           ;lin.c: 335: else
  4095                           ;lin.c: 336: {
  4096                           ;lin.c: 337: pt = _ELINMIntGetPointer ( 5, 0 );
  4097  06D4  0020               	movlb	0	; select bank0
  4098  06D5  3005               	movlw	5
  4099  06D6  01AC               	clrf	?__ELINMIntGetPointer
  4100  06D7  2710  3180         	fcall	__ELINMIntGetPointer
  4101  06D9  00CD               	movwf	_pt
  4102                           
  4103                           ;lin.c: 338: my_msg[ 0 ] = *pt;
  4104  06DA  0086               	movwf	6
  4105  06DB  3002               	movlw	2	; select bank4/5
  4106  06DC  0087               	movwf	7
  4107  06DD  0801               	movf	1,w
  4108  06DE  0023               	movlb	3	; select bank3
  4109  06DF  00B0               	movwf	_my_msg^(0+384)
  4110                           
  4111                           ;lin.c: 339: pt++;
  4112                           
  4113                           ;lin.c: 340: my_msg[ 1 ] = *pt;
  4114  06E0  277F  3180         	fcall	PL14	;call to abstracted procedure
  4115  06E2  00B1               	movwf	(_my_msg^(0+384)+1)
  4116                           
  4117                           ;lin.c: 341: pt++;
  4118                           
  4119                           ;lin.c: 342: my_msg[ 2 ] = *pt;
  4120  06E3  277F  3180         	fcall	PL14	;call to abstracted procedure
  4121  06E5  00B2               	movwf	(_my_msg^(0+384)+2)
  4122                           
  4123                           ;lin.c: 343: pt++;
  4124                           
  4125                           ;lin.c: 344: my_msg[ 3 ] = *pt;
  4126  06E6  277F  3180         	fcall	PL14	;call to abstracted procedure
  4127  06E8  00B3               	movwf	(_my_msg^(0+384)+3)
  4128                           
  4129                           ;lin.c: 345: pt++;
  4130                           
  4131                           ;lin.c: 346: my_msg[ 4 ] = *pt;
  4132  06E9  277F  3180         	fcall	PL14	;call to abstracted procedure
  4133  06EB  00B4               	movwf	(_my_msg^(0+384)+4)
  4134                           
  4135                           ;lin.c: 347: pt++;
  4136                           
  4137                           ;lin.c: 348: my_msg[ 5 ] = *pt;
  4138  06EC  277F  3180         	fcall	PL14	;call to abstracted procedure
  4139  06EE  00B5               	movwf	(_my_msg^(0+384)+5)
  4140                           
  4141                           ;lin.c: 349: pt++;
  4142                           
  4143                           ;lin.c: 350: my_msg[ 6 ] = *pt;
  4144  06EF  277F  3180         	fcall	PL14	;call to abstracted procedure
  4145  06F1  00B6               	movwf	(_my_msg^(0+384)+6)
  4146                           
  4147                           ;lin.c: 351: pt++;
  4148                           
  4149                           ;lin.c: 352: my_msg[ 7 ] = *pt;
  4150  06F2  277F               	fcall	PL14	;call to abstracted procedure
  4151  06F3  00B7               	movwf	(_my_msg^(0+384)+7)
  4152                           
  4153                           ;lin.c: 354: ui8_b_DResServID_c = my_msg[ 0 ];
  4154  06F4  0830               	movf	_my_msg^(0+384),w
  4155  06F5  0022               	movlb	2	; select bank2
  4156  06F6  00DE               	movwf	_ui8_b_DResServID_c^(0+256)
  4157                           
  4158                           ;lin.c: 355: ui8_b_DResLocID_c = my_msg[ 1 ];
  4159  06F7  0023               	movlb	3	; select bank3
  4160  06F8  0831               	movf	(_my_msg^(0+384)+1),w
  4161  06F9  0020               	movlb	0	; select bank0
  4162  06FA  00CF               	movwf	_ui8_b_DResLocID_c
  4163                           
  4164                           ;lin.c: 356: ui8_b_DResB0_c = my_msg[ 2 ];
  4165  06FB  0023               	movlb	3	; select bank3
  4166  06FC  0832               	movf	(_my_msg^(0+384)+2),w
  4167  06FD  0020               	movlb	0	; select bank0
  4168  06FE  00CE               	movwf	_ui8_b_DResB0_c
  4169                           
  4170                           ;lin.c: 357: ui8_b_DResB1_c = my_msg[ 3 ];
  4171  06FF  0023               	movlb	3	; select bank3
  4172  0700  0833               	movf	(_my_msg^(0+384)+3),w
  4173  0701  0022               	movlb	2	; select bank2
  4174  0702  00DA               	movwf	_ui8_b_DResB1_c^(0+256)
  4175                           
  4176                           ;lin.c: 358: ui8_b_DResB2_c = my_msg[ 4 ];
  4177  0703  0023               	movlb	3	; select bank3
  4178  0704  0834               	movf	(_my_msg^(0+384)+4),w
  4179  0705  0022               	movlb	2	; select bank2
  4180  0706  00DB               	movwf	_ui8_b_DResB2_c^(0+256)
  4181                           
  4182                           ;lin.c: 359: ui8_b_DResB3_c = my_msg[ 5 ];
  4183  0707  0023               	movlb	3	; select bank3
  4184  0708  0835               	movf	(_my_msg^(0+384)+5),w
  4185  0709  0022               	movlb	2	; select bank2
  4186  070A  00DC               	movwf	_ui8_b_DResB3_c^(0+256)
  4187                           
  4188                           ;lin.c: 361: ui8_b_DResB5_c = my_msg[ 7 ];
  4189  070B  0023               	movlb	3	; select bank3
  4190  070C  0836               	movf	(_my_msg^(0+384)+6),w
  4191  070D  0022               	movlb	2	; select bank2
  4192  070E  00DD               	movwf	_ui8_b_DResB4_c^(0+256)
  4193  070F  0008               	return
  4194  0710                     __end_of_Receive_Diag:	
  4195  0710                     __ptext2067:	
  4196 ;; =============== function _EnableMCP201 ends ============
  4197                           
  4198                           
  4199 ;; *************** function __ELINMIntGetPointer *****************
  4200 ;; Defined at:
  4201 ;;		line 1379 in file "../lin.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;  _ELINMInt_ta    1    wreg     unsigned char 
  4204 ;;  _ELINMInt_po    1   12[BANK0 ] unsigned char 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  _ELINMInt_ta    1   13[BANK0 ] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      PTR unsigned char 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0
  4211 ;; Tracked objects:
  4212 ;;		On entry : 1F/0
  4213 ;;		On exit  : 1F/0
  4214 ;;		Unchanged: FFFE0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4216 ;;      Params:         0       1       0       0       0       0       0       0
  4217 ;;      Locals:         0       1       0       0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0
  4219 ;;      Totals:         0       2       0       0       0       0       0       0
  4220 ;;Total ram usage:        2 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    4
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_Transmit_LIN_8Bytes
  4227 ;;		_Receive_Diag
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230  0710                     __ELINMIntGetPointer:	
  4231                           
  4232                           ;lin.c: 1382: return ( ( BYTE * )& _ELINMIntMessageBuffer[ _ELINMInt_position ] );
  4233                           
  4234                           ; Regs used in __ELINMIntGetPointer: [wreg+status,2+status,0]
  4235  0710  082C               	movf	__ELINMIntGetPointer@_ELINMInt_position,w
  4236  0711  3E54               	addlw	__ELINMIntMessageBuffer& (0+255)
  4237  0712  0008               	return
  4238  0713                     __end_of__ELINMIntGetPointer:	
  4239  0713                     __ptext2035:	
  4240 ;; =============== function _I_calibrationInit ends ============
  4241                           
  4242                           
  4243 ;; *************** function __ELINMIntReceiveMessage *****************
  4244 ;; Defined at:
  4245 ;;		line 1326 in file "../lin.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  _ELINM_tag      1    wreg     unsigned char 
  4248 ;;  _ELINM_id       1   23[BANK0 ] unsigned char 
  4249 ;;  _ELINM_size     1   24[BANK0 ] unsigned char 
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  _ELINM_tag      1   25[BANK0 ] unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;		None               void
  4254 ;; Registers used:
  4255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 1F/0
  4258 ;;		On exit  : 1F/0
  4259 ;;		Unchanged: FFFE0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4261 ;;      Params:         0       2       0       0       0       0       0       0
  4262 ;;      Locals:         0       1       0       0       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0       0       0
  4264 ;;      Totals:         0       3       0       0       0       0       0       0
  4265 ;;Total ram usage:        3 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    6
  4268 ;; This function calls:
  4269 ;;		__ELINMIntSendMessage
  4270 ;; This function is called by:
  4271 ;;		_Receive_Diag
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274  0713                     __ELINMIntReceiveMessage:	
  4275                           
  4276                           ;lin.c: 1331: {
  4277                           ;lin.c: 1333: _ELINMIntMessageTag = _ELINM_tag;
  4278                           
  4279                           ; Regs used in __ELINMIntReceiveMessage: [wreg+fsr1l-status,0+pclath+cstack]
  4280  0713  1DCC               	btfss	__ELINMIntStatus,3
  4281  0714  0008               	return
  4282                           
  4283                           ;lin.c: 1334: _ELINMIntRXMessageSize.SIZE = _ELINM_size;
  4284  0715  0838               	movf	__ELINMIntReceiveMessage@_ELINM_size,w
  4285  0716  0022               	movlb	2	; select bank2
  4286  0717  00CA               	movwf	__ELINMIntRXMessageSize^(0+256)
  4287                           
  4288                           ;lin.c: 1335: _ELINMIntStatus.ELINMINTSTS.RX = 1;
  4289  0718  0020               	movlb	0	; select bank0
  4290  0719  14CC               	bsf	__ELINMIntStatus,1
  4291                           
  4292                           ;lin.c: 1336: _ELINMIntRXCRC.CRC = 0;
  4293  071A  0023               	movlb	3	; select bank3
  4294  071B  01C4               	clrf	__ELINMIntRXCRC^(0+384)
  4295  071C  01C5               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  4296                           
  4297                           ;lin.c: 1337: _ELINMIntSendMessage ( _ELINM_id, 0, ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) * (
      +                           100L * 1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) +
      +                           1L ) * 14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  4298  071D  0020               	movlb	0	; select bank0
  4299  071E  3024               	movlw	36
  4300  071F  01AD               	clrf	?__ELINMIntSendMessage
  4301  0720  00AE               	movwf	?__ELINMIntSendMessage+1
  4302  0721  3033               	movlw	51
  4303  0722  01AF               	clrf	?__ELINMIntSendMessage+2
  4304  0723  00B0               	movwf	?__ELINMIntSendMessage+3
  4305  0724  01B1               	clrf	?__ELINMIntSendMessage+4
  4306  0725  0837               	movf	__ELINMIntReceiveMessage@_ELINM_id,w
  4307  0726  318F  2F73         	ljmp	__ELINMIntSendMessage
  4308  0728                     __end_of__ELINMIntReceiveMessage:	
  4309  0728                     __ptext2029:	
  4310 ;; =============== function _main ends ============
  4311                           
  4312                           
  4313 ;; *************** function _system_init *****************
  4314 ;; Defined at:
  4315 ;;		line 537 in file "../main.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;		None               void
  4322 ;; Registers used:
  4323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 17F/0
  4326 ;;		On exit  : 1F/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4329 ;;      Params:         0       0       0       0       0       0       0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0       0
  4332 ;;      Totals:         0       0       0       0       0       0       0       0
  4333 ;;Total ram usage:        0 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    8
  4336 ;; This function calls:
  4337 ;;		_init_ports
  4338 ;;		_EnableMCP201
  4339 ;;		__ELINMIntInitialize
  4340 ;;		_Oscill_Source_Block
  4341 ;;		_timer_init
  4342 ;;		_PWM_Capture_init
  4343 ;;		_ADC_Init
  4344 ;;		_DiagInit
  4345 ;;		_FILTER_Init
  4346 ;;		_I_calibrationInit
  4347 ;;		_init_bldc
  4348 ;; This function is called by:
  4349 ;;		_main
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352  0728                     _system_init:	
  4353                           
  4354                           ;main.c: 539: OPTION_REG = 0b10000001;
  4355                           
  4356                           ; Regs used in _system_init: [wreg-status,0+pclath+cstack]
  4357  0728  3081               	movlw	129
  4358  0729  0021               	movlb	1	; select bank1
  4359  072A  0095               	movwf	21	;volatile
  4360                           
  4361                           ;main.c: 548: ui8_ResetMatlab = 1;
  4362  072B  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4363  072C  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  4364                           
  4365                           ;main.c: 549: GIE = 0;
  4366  072D  138B               	bcf	11,7
  4367                           
  4368                           ;main.c: 550: INTCON = 0;
  4369  072E  018B               	clrf	11	;volatile
  4370                           
  4371                           ;main.c: 551: PIE1 = 0;
  4372  072F  0191               	clrf	17	;volatile
  4373                           
  4374                           ;main.c: 552: PIE2 = 0;
  4375  0730  0192               	clrf	18	;volatile
  4376                           
  4377                           ;main.c: 555: ui16_Timer_VaL1 = 0;
  4378  0731  0193               	clrf	19	;volatile
  4379                           
  4380                           ;main.c: 556: ui8_Task_Cont3ms = 0;
  4381  0732  0022               	movlb	2	; select bank2
  4382  0733  01D7               	clrf	_ui8_Task_Cont3ms^(0+256)
  4383                           
  4384                           ;main.c: 557: ui8_Task_Cont5ms = 0;
  4385  0734  01D8               	clrf	_ui8_Task_Cont5ms^(0+256)
  4386                           
  4387                           ;main.c: 561: ui8_Sync_Cont10ms = 0;
  4388  0735  0021               	movlb	1	; select bank1
  4389  0736  3049               	movlw	73
  4390  0737  01E1               	clrf	_ui8_Task_Cont100ms^(0+128)
  4391                           
  4392                           ;main.c: 563: ui16_dryRun_Thresh = 73;
  4393  0738  0023               	movlb	3	; select bank3
  4394  0739  00EE               	movwf	_ui16_dryRun_Thresh^(0+384)
  4395  073A  30CD               	movlw	205
  4396  073B  01EF               	clrf	(_ui16_dryRun_Thresh+1)^(0+384)
  4397                           
  4398                           ;main.c: 564: ui16_Current_Thresh = 205;
  4399  073C  00EC               	movwf	_ui16_Current_Thresh^(0+384)
  4400  073D  01ED               	clrf	(_ui16_Current_Thresh+1)^(0+384)
  4401                           
  4402                           ;main.c: 566: init_ports( );
  4403  073E  3190  2003  3180   	fcall	_init_ports
  4404                           
  4405                           ;main.c: 570: EnableMCP201( );
  4406  0741  27AE               	fcall	_EnableMCP201
  4407                           
  4408                           ;main.c: 571: _ELINMIntInitialize( );
  4409  0742  3188  20F8  3180   	fcall	__ELINMIntInitialize
  4410                           
  4411                           ;main.c: 577: Oscill_Source_Block( );
  4412  0745  276E               	fcall	_Oscill_Source_Block
  4413                           
  4414                           ;main.c: 578: timer_init( 1 );
  4415  0746  3001               	movlw	1
  4416  0747  319B  2351  3180   	fcall	_timer_init
  4417                           
  4418                           ;main.c: 579: timer_init( 4 );
  4419  074A  3004               	movlw	4
  4420  074B  319B  2351  3180   	fcall	_timer_init
  4421                           
  4422                           ;main.c: 580: timer_init( 6 );
  4423  074E  3006               	movlw	6
  4424  074F  319B  2351  3180   	fcall	_timer_init
  4425                           
  4426                           ;main.c: 583: PWM_Capture_init( 5 );
  4427  0752  3005               	movlw	5
  4428  0753  319B  238F  3180   	fcall	_PWM_Capture_init
  4429                           
  4430                           ;main.c: 584: ADC_Init( );
  4431  0756  2765  3180         	fcall	_ADC_Init
  4432                           
  4433                           ;main.c: 585: DiagInit( );
  4434  0758  2774               	fcall	_DiagInit
  4435                           
  4436                           ;main.c: 586: FILTER_Init( );
  4437  0759  319A  22C6  3180   	fcall	_FILTER_Init
  4438                           
  4439                           ;main.c: 589: ui16_Temp_cal = 0;
  4440  075C  0023               	movlb	3	; select bank3
  4441  075D  01E2               	clrf	_ui16_Temp_cal^(0+384)
  4442  075E  01E3               	clrf	(_ui16_Temp_cal+1)^(0+384)
  4443                           
  4444                           ;main.c: 599: I_calibrationInit();
  4445  075F  229A               	fcall	_I_calibrationInit
  4446                           
  4447                           ;main.c: 601: init_bldc( );
  4448  0760  319B  2308         	fcall	_init_bldc
  4449                           
  4450                           ;main.c: 603: PEIE = 1;
  4451  0762  170B               	bsf	11,6
  4452                           
  4453                           ;main.c: 604: GIE = 1;
  4454  0763  178B               	bsf	11,7
  4455  0764  0008               	return
  4456  0765                     __end_of_system_init:	
  4457  0765                     __ptext2076:	
  4458 ;; =============== function _ADC_Read ends ============
  4459                           
  4460                           
  4461 ;; *************** function _ADC_Init *****************
  4462 ;; Defined at:
  4463 ;;		line 104 in file "../adc.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;		None
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;		None
  4468 ;; Return value:  Size  Location     Type
  4469 ;;		None               void
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0
  4472 ;; Tracked objects:
  4473 ;;		On entry : 18/1
  4474 ;;		On exit  : 1F/2
  4475 ;;		Unchanged: FFFE0/0
  4476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4477 ;;      Params:         0       0       0       0       0       0       0       0
  4478 ;;      Locals:         0       0       0       0       0       0       0       0
  4479 ;;      Temps:          0       0       0       0       0       0       0       0
  4480 ;;      Totals:         0       0       0       0       0       0       0       0
  4481 ;;Total ram usage:        0 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    4
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_system_init
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490  0765                     _ADC_Init:	
  4491                           
  4492                           ;adc.c: 106: ADCON1 = 0b10100000;
  4493                           
  4494                           ; Regs used in _ADC_Init: [wreg+status,2+status,0]
  4495  0765  30A0               	movlw	160
  4496  0766  0021               	movlb	1	; select bank1
  4497  0767  009E               	movwf	30	;volatile
  4498                           
  4499                           ;adc.c: 108: ADCON0 = 0b00000000;
  4500  0768  019D               	clrf	29	;volatile
  4501  0769  3030               	movlw	48
  4502                           
  4503                           ;adc.c: 109: ADON = 1;
  4504  076A  141D               	bsf	29,0
  4505                           
  4506                           ;adc.c: 111: ui8_temp_calibration = 0;
  4507  076B  0022               	movlb	2	; select bank2
  4508  076C  0497               	iorwf	23,f	;volatile
  4509  076D  0008               	return
  4510  076E                     __end_of_ADC_Init:	
  4511  076E                     __ptext2063:	
  4512 ;; =============== function _PWM_Capture_init ends ============
  4513                           
  4514                           
  4515 ;; *************** function _Oscill_Source_Block *****************
  4516 ;; Defined at:
  4517 ;;		line 480 in file "../timer.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;		None
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;		None
  4522 ;; Return value:  Size  Location     Type
  4523 ;;		None               void
  4524 ;; Registers used:
  4525 ;;		wreg
  4526 ;; Tracked objects:
  4527 ;;		On entry : 1F/0
  4528 ;;		On exit  : 1F/1
  4529 ;;		Unchanged: FFFE0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4531 ;;      Params:         0       0       0       0       0       0       0       0
  4532 ;;      Locals:         0       0       0       0       0       0       0       0
  4533 ;;      Temps:          0       0       0       0       0       0       0       0
  4534 ;;      Totals:         0       0       0       0       0       0       0       0
  4535 ;;Total ram usage:        0 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    4
  4538 ;; This function calls:
  4539 ;;		Nothing
  4540 ;; This function is called by:
  4541 ;;		_system_init
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544  076E                     _Oscill_Source_Block:	
  4545                           
  4546                           ;timer.c: 482: OSCCON = 0xF0;
  4547                           
  4548                           ; Regs used in _Oscill_Source_Block: [wreg]
  4549  076E  30F0               	movlw	240
  4550  076F  0021               	movlb	1	; select bank1
  4551  0770  0099               	movwf	25	;volatile
  4552                           
  4553                           ;timer.c: 483: WDTCON = 0b00010001;
  4554  0771  3011               	movlw	17
  4555  0772  0097               	movwf	23	;volatile
  4556  0773  0008               	return
  4557  0774                     __end_of_Oscill_Source_Block:	
  4558  0774                     __ptext2046:	
  4559 ;; =============== function _SetDiagAlarm ends ============
  4560                           
  4561                           
  4562 ;; *************** function _DiagInit *****************
  4563 ;; Defined at:
  4564 ;;		line 150 in file "../diag.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;		None
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;		None
  4569 ;; Return value:  Size  Location     Type
  4570 ;;		None               void
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0, pclath, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : 1F/2
  4575 ;;		On exit  : 1F/2
  4576 ;;		Unchanged: FFFE0/0
  4577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4578 ;;      Params:         0       0       0       0       0       0       0       0
  4579 ;;      Locals:         0       0       0       0       0       0       0       0
  4580 ;;      Temps:          0       0       0       0       0       0       0       0
  4581 ;;      Totals:         0       0       0       0       0       0       0       0
  4582 ;;Total ram usage:        0 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    5
  4585 ;; This function calls:
  4586 ;;		_PWM_Write_Out
  4587 ;; This function is called by:
  4588 ;;		_system_init
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591  0774                     _DiagInit:	
  4592                           
  4593                           ;diag.c: 162: ui8_error_Flags.b = 0;
  4594                           
  4595                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  4596  0774  0021               	movlb	1	; select bank1
  4597  0775  300B               	movlw	11
  4598  0776  01E5               	clrf	_ui8_error_Flags^(0+128)
  4599                           
  4600                           ;diag.c: 163: PWM_Write_Out( 11 );
  4601  0777  262F               	fcall	_PWM_Write_Out
  4602                           
  4603                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  4604  0778  01E1               	clrf	_ui16_IPhase1_bldc_cal^(0+256)
  4605  0779  01E2               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  4606                           
  4607                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  4608  077A  01E3               	clrf	_ui16_IPhase2_bldc_cal^(0+256)
  4609  077B  01E4               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  4610                           
  4611                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  4612  077C  01E5               	clrf	_ui16_IPhase3_bldc_cal^(0+256)
  4613  077D  01E6               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  4614  077E  0008               	return
  4615  077F                     __end_of_DiagInit:	
  4616  077F                     PL14:	
  4617  077F  0020               	movlb	0	; select bank0
  4618  0780  0ACD               	incf	_pt,f
  4619  0781  084D               	movf	_pt,w
  4620  0782  0086               	movwf	6
  4621  0783  0801               	movf	1,w
  4622  0784  0023               	movlb	3	; select bank3
  4623  0785  0008               	return
  4624  0786                     PL16:	
  4625  0786  00C4               	movwf	??_main
  4626  0787  01C5               	clrf	??_main+1
  4627  0788  35C4               	lslf	??_main,f
  4628  0789  0DC5               	rlf	??_main+1,f
  4629  078A  35C4               	lslf	??_main,f
  4630  078B  0DC5               	rlf	??_main+1,f
  4631  078C  0844               	movf	??_main,w
  4632  078D  00B4               	movwf	?___awdiv+2
  4633  078E  0845               	movf	??_main+1,w
  4634  078F  00B5               	movwf	?___awdiv+3
  4635  0790  0008               	return
  4636  0791                     PL18:	
  4637  0791  0849               	movf	_comm_time+1,w
  4638  0792  0023               	movlb	3	; select bank3
  4639  0793  00D1               	movwf	(_phase_delay_counter+1)^(0+384)
  4640  0794  0020               	movlb	0	; select bank0
  4641  0795  0848               	movf	_comm_time,w
  4642  0796  0023               	movlb	3	; select bank3
  4643  0797  00D0               	movwf	_phase_delay_counter^(0+384)
  4644  0798  0008               	return
  4645  0799                     PL27:	
  4646  0799  110D               	bcf	13,2
  4647  079A  0021               	movlb	1	; select bank1
  4648  079B  00DC               	movwf	_ui8_IPhase_sel^(0+128)
  4649  079C  3025               	movlw	37
  4650  079D  00E3               	movwf	_ui8_UPhase_sel^(0+128)
  4651  079E  0008               	return
  4652  079F                     PL40:	
  4653  079F  080E               	movf	14,w
  4654  07A0  39E5               	andlw	229
  4655  07A1  3818               	iorlw	24
  4656  07A2  008E               	movwf	14	;volatile
  4657  07A3  0008               	return
  4658  07A4                     PL43:	
  4659  07A4  080E               	movf	14,w
  4660  07A5  39E5               	andlw	229
  4661  07A6  380A               	iorlw	10
  4662  07A7  008E               	movwf	14	;volatile
  4663  07A8  0008               	return
  4664  07A9                     PL44:	
  4665  07A9  080E               	movf	14,w
  4666  07AA  39E5               	andlw	229
  4667  07AB  3812               	iorlw	18
  4668  07AC  008E               	movwf	14	;volatile
  4669  07AD  0008               	return
  4670  07AE                     __ptext2066:	
  4671 ;; =============== function __ELINMIntInitialize ends ============
  4672                           
  4673                           
  4674 ;; *************** function _EnableMCP201 *****************
  4675 ;; Defined at:
  4676 ;;		line 436 in file "../lin.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;		None
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  _dcnt           1   14[BANK0 ] unsigned char 
  4681 ;;  _dcnt           1   13[BANK0 ] unsigned char 
  4682 ;;  _dcnt           1   12[BANK0 ] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;		None               void
  4685 ;; Registers used:
  4686 ;;		status,2
  4687 ;; Tracked objects:
  4688 ;;		On entry : 17F/1
  4689 ;;		On exit  : 1F/0
  4690 ;;		Unchanged: FFE00/0
  4691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4692 ;;      Params:         0       0       0       0       0       0       0       0
  4693 ;;      Locals:         0       3       0       0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0       0
  4695 ;;      Totals:         0       3       0       0       0       0       0       0
  4696 ;;Total ram usage:        3 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    4
  4699 ;; This function calls:
  4700 ;;		Nothing
  4701 ;; This function is called by:
  4702 ;;		_system_init
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705  07AE                     _EnableMCP201:	
  4706                           
  4707                           ;lin.c: 448: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4708                           
  4709                           ; Regs used in _EnableMCP201: [status,2]
  4710  07AE  0020               	movlb	0	; select bank0
  4711  07AF  128E               	bcf	14,5
  4712  07B0  01AC               	clrf	EnableMCP201@_dcnt
  4713  07B1  2FB4               	goto	l11590
  4714  07B2                     l11591:	
  4715  07B2  0000               	nop	;#
  4716  07B3  0000               	nop	;#
  4717  07B4                     l11590:	
  4718  07B4  0020               	movlb	0	; select bank0
  4719  07B5  0BAC               	decfsz	EnableMCP201@_dcnt,f
  4720  07B6  2FB2               	goto	l11591
  4721                           
  4722                           ;lin.c: 450: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4723  07B7  168E               	bsf	14,5
  4724  07B8  01AD               	clrf	EnableMCP201@_dcnt_13735
  4725  07B9  2FBC               	goto	l11595
  4726  07BA                     l11596:	
  4727  07BA  0000               	nop	;#
  4728  07BB  0000               	nop	;#
  4729  07BC                     l11595:	
  4730  07BC  0020               	movlb	0	; select bank0
  4731  07BD  0BAD               	decfsz	EnableMCP201@_dcnt_13735,f
  4732  07BE  2FBA               	goto	l11596
  4733                           
  4734                           ;lin.c: 452: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4735  07BF  128E               	bcf	14,5
  4736  07C0  01AE               	clrf	EnableMCP201@_dcnt_13736
  4737  07C1  2FC4               	goto	l11600
  4738  07C2                     l11601:	
  4739  07C2  0000               	nop	;#
  4740  07C3  0000               	nop	;#
  4741  07C4                     l11600:	
  4742  07C4  0020               	movlb	0	; select bank0
  4743  07C5  0BAE               	decfsz	EnableMCP201@_dcnt_13736,f
  4744  07C6  2FC2               	goto	l11601
  4745                           
  4746                           ;lin.c: 453: RC5 = 1;
  4747  07C7  168E               	bsf	14,5
  4748  07C8  0008               	return
  4749  07C9                     __end_of_EnableMCP201:	
  4750                           
  4751                           	psect	bitbssBANK0
  4752  0298                     __pbitbssBANK0:	
  4753  0298                     _rising_bemf_flag:	
  4754  0298                     	ds	1
  4755                           
  4756                           	psect	bssBANK0
  4757  0048                     __pbssBANK0:	
  4758  0048                     _comm_time:	
  4759  0048                     	ds	2
  4760  004A                     _Cb34_idPWM:	
  4761  004A                     	ds	1
  4762  004B                     _MotorFlags:	
  4763  004B                     	ds	1
  4764  004C                     __ELINMIntStatus:	
  4765  004C                     	ds	1
  4766  004D                     _pt:	
  4767  004D                     	ds	1
  4768  004E                     _ui8_b_DResB0_c:	
  4769  004E                     	ds	1
  4770  004F                     _ui8_b_DResLocID_c:	
  4771  004F                     	ds	1
  4772  0050                     _ui8_duty_cycle_BLDC:	
  4773  0050                     	ds	1
  4774  0051                     _ui16_Ubat_bldc:	
  4775  0051                     	ds	2
  4776                           
  4777                           	psect	dataBANK0
  4778  0054                     __pdataBANK0:	
  4779  0054                     _ui8_selected_lid:	
  4780  0054                     	ds	1
  4781                           
  4782                           	psect	bssBANK1
  4783  00A0                     __pbssBANK1:	
  4784  00A0                     BVH2_Appl_Layer@Cb24_StateCnt:	
  4785  00A0                     	ds	2
  4786  00A2                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  4787  00A2                     	ds	2
  4788  00A4                     _Cb1_StateCnt:	
  4789  00A4                     	ds	2
  4790  00A6                     _Cb44_StateCnt:	
  4791  00A6                     	ds	2
  4792  00A8                     _analog_value:	
  4793  00A8                     	ds	2
  4794  00AA                     _ui16_Capt_Val0:	
  4795  00AA                     	ds	2
  4796  00AC                     _ui16_Capt_Val1:	
  4797  00AC                     	ds	2
  4798  00AE                     _ui16_Capt_Val2:	
  4799  00AE                     	ds	2
  4800  00B0                     _ui16_IPhase_bldc:	
  4801  00B0                     	ds	2
  4802  00B2                     _ui16_Speed_mat:	
  4803  00B2                     	ds	2
  4804  00B4                     _ui16_Ubemf_bldc:	
  4805  00B4                     	ds	2
  4806  00B6                     _ui16_comm_time_max:	
  4807  00B6                     	ds	2
  4808  00B8                     _ui16_mat_Current:	
  4809  00B8                     	ds	2
  4810  00BA                     _ui16_phase_advancement:	
  4811  00BA                     	ds	2
  4812  00BC                     _ui16_speed_fil:	
  4813  00BC                     	ds	2
  4814  00BE                     _ui16_step_cnt:	
  4815  00BE                     	ds	2
  4816  00C0                     _ui8_BattVolt_mat:	
  4817  00C0                     	ds	2
  4818  00C2                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  4819  00C2                     	ds	1
  4820  00C3                     BVH2_Appl_Layer@Cb9_StateCnt:	
  4821  00C3                     	ds	1
  4822  00C4                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  4823  00C4                     	ds	1
  4824  00C5                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  4825  00C5                     	ds	1
  4826  00C6                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  4827  00C6                     	ds	1
  4828  00C7                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  4829  00C7                     	ds	1
  4830  00C8                     _Bcnt:	
  4831  00C8                     	ds	1
  4832  00C9                     _Cb56_odFixedValueSel:	
  4833  00C9                     	ds	1
  4834  00CA                     _ErrorCode:	
  4835  00CA                     	ds	1
  4836  00CB                     _SIBFS_Current_Analysis_High_b:	
  4837  00CB                     	ds	1
  4838  00CC                     _SIBFS_PWM_Detection_b:	
  4839  00CC                     	ds	1
  4840  00CD                     _SIBFS_Pic_etat_monitor_b:	
  4841  00CD                     	ds	1
  4842  00CE                     _SIBFS_UbatHandling_b:	
  4843  00CE                     	ds	1
  4844  00CF                     __ELINMIntMessageBufferPointer:	
  4845  00CF                     	ds	1
  4846  00D0                     __ELINMIntMessageSize:	
  4847  00D0                     	ds	1
  4848  00D1                     __ELINMIntReadBack:	
  4849  00D1                     	ds	1
  4850  00D2                     __ELINMIntStatus1:	
  4851  00D2                     	ds	1
  4852  00D3                     _bool_CPU_TempAlarm:	
  4853  00D3                     	ds	1
  4854  00D4                     _bool_ControlLoopMode:	
  4855  00D4                     	ds	1
  4856  00D5                     _bool_DryRunningAlarm:	
  4857  00D5                     	ds	1
  4858  00D6                     _bool_HighCurrentAlarm:	
  4859  00D6                     	ds	1
  4860  00D7                     _bool_MotorStalled:	
  4861  00D7                     	ds	1
  4862  00D8                     _bool_mat_currAlarm_bldc:	
  4863  00D8                     	ds	1
  4864  00D9                     _comm_state:	
  4865  00D9                     	ds	1
  4866  00DA                     _phaseCal:	
  4867  00DA                     	ds	1
  4868  00DB                     _ui8_BlankingCount:	
  4869  00DB                     	ds	1
  4870  00DC                     _ui8_IPhase_sel:	
  4871  00DC                     	ds	1
  4872  00DD                     _ui8_PWM_FreqCnt:	
  4873  00DD                     	ds	1
  4874  00DE                     _ui8_PWM_dc_mat:	
  4875  00DE                     	ds	1
  4876  00DF                     _ui8_PWMinDC_sav:	
  4877  00DF                     	ds	1
  4878  00E0                     _ui8_StartupPWM:	
  4879  00E0                     	ds	1
  4880  00E1                     _ui8_Task_Cont100ms:	
  4881  00E1                     	ds	1
  4882  00E2                     _ui8_Task_Cont1ms:	
  4883  00E2                     	ds	1
  4884  00E3                     _ui8_UPhase_sel:	
  4885  00E3                     	ds	1
  4886  00E4                     _ui8_duty_cycle_mat:	
  4887  00E4                     	ds	1
  4888  00E5                     _ui8_error_Flags:	
  4889  00E5                     	ds	1
  4890  00E6                     _ui8_given_supply:	
  4891  00E6                     	ds	1
  4892  00E7                     _windowPtr1:	
  4893  00E7                     	ds	1
  4894                           
  4895                           	psect	dataBANK1
  4896  00E8                     __pdataBANK1:	
  4897  00E8                     _ui16_I_cal_Ph1:	
  4898  00E8                     	ds	2
  4899  00EA                     _ui16_I_cal_Ph2:	
  4900  00EA                     	ds	2
  4901  00EC                     _ui16_I_cal_Ph3:	
  4902  00EC                     	ds	2
  4903  00EE                     _wkpoint:	
  4904  00EE                     	ds	1
  4905                           
  4906                           	psect	bssBANK2
  4907  0120                     __pbssBANK2:	
  4908  0120                     _ui8_current_cal:	
  4909  0120                     	ds	3
  4910  0123                     __ELINMIntTFrameMin:	
  4911  0123                     	ds	2
  4912  0125                     __ELINMIntTHeaderMin:	
  4913  0125                     	ds	2
  4914  0127                     _sum:	
  4915  0127                     	ds	2
  4916  0129                     _ui16_IPhase1_bldc:	
  4917  0129                     	ds	2
  4918  012B                     _ui16_NTC_Temp_bldc_mean:	
  4919  012B                     	ds	2
  4920  012D                     _ui16_PWM_Freq_mat:	
  4921  012D                     	ds	2
  4922  012F                     _ui16_fir_Bat_mittel:	
  4923  012F                     	ds	2
  4924  0131                     _ui16_fir_IPhase_mean:	
  4925  0131                     	ds	2
  4926  0133                     _ui16_speed_rar:	
  4927  0133                     	ds	2
  4928  0135                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  4929  0135                     	ds	1
  4930  0136                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  4931  0136                     	ds	1
  4932  0137                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  4933  0137                     	ds	1
  4934  0138                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  4935  0138                     	ds	1
  4936  0139                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  4937  0139                     	ds	1
  4938  013A                     BVH2_Appl_Layer@Cb51_Counter:	
  4939  013A                     	ds	1
  4940  013B                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  4941  013B                     	ds	1
  4942  013C                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  4943  013C                     	ds	1
  4944  013D                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  4945  013D                     	ds	1
  4946  013E                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  4947  013E                     	ds	1
  4948  013F                     _Cb1_RestartCounter:	
  4949  013F                     	ds	1
  4950  0140                     _Cb1_oCurrentAlarm:	
  4951  0140                     	ds	1
  4952  0141                     _Cb1_oShutoff:	
  4953  0141                     	ds	1
  4954  0142                     _Cb34_oPWM_Alarm:	
  4955  0142                     	ds	1
  4956  0143                     _Cb34_oPWM_SC_Alarm:	
  4957  0143                     	ds	1
  4958  0144                     _Cb34_odFixedLowValueSel:	
  4959  0144                     	ds	1
  4960  0145                     _Cb34_odFixedValueSel:	
  4961  0145                     	ds	1
  4962  0146                     _Cb34_odPumpOff:	
  4963  0146                     	ds	1
  4964  0147                     _Cb44_oShutoff:	
  4965  0147                     	ds	1
  4966  0148                     _Cb56_oUbat_Alarm_High:	
  4967  0148                     	ds	1
  4968  0149                     _Cb56_odPumpOff:	
  4969  0149                     	ds	1
  4970  014A                     __ELINMIntRXMessageSize:	
  4971  014A                     	ds	1
  4972  014B                     __ELINMIntSpace:	
  4973  014B                     	ds	1
  4974  014C                     _bool_CPU_TempRedAlarm:	
  4975  014C                     	ds	1
  4976  014D                     _bool_PWMin_Freq_err_Alarm:	
  4977  014D                     	ds	1
  4978  014E                     _bool_PWMin_err_Alarm:	
  4979  014E                     	ds	1
  4980  014F                     _bool_UbatAlarm:	
  4981  014F                     	ds	1
  4982  0150                     _bool_start_demand_mat:	
  4983  0150                     	ds	1
  4984  0151                     _ui8_CompFlag:	
  4985  0151                     	ds	1
  4986  0152                     _ui8_Duty_Cycle_In_Ratio:	
  4987  0152                     	ds	1
  4988  0153                     _ui8_Kp_mat:	
  4989  0153                     	ds	1
  4990  0154                     _ui8_PWMin_failCnt:	
  4991  0154                     	ds	1
  4992  0155                     _ui8_PWMoutvalue:	
  4993  0155                     	ds	1
  4994  0156                     _ui8_Pulse_State:	
  4995  0156                     	ds	1
  4996  0157                     _ui8_Task_Cont3ms:	
  4997  0157                     	ds	1
  4998  0158                     _ui8_Task_Cont5ms:	
  4999  0158                     	ds	1
  5000  0159                     _ui8_Ubemf_sel:	
  5001  0159                     	ds	1
  5002  015A                     _ui8_b_DResB1_c:	
  5003  015A                     	ds	1
  5004  015B                     _ui8_b_DResB2_c:	
  5005  015B                     	ds	1
  5006  015C                     _ui8_b_DResB3_c:	
  5007  015C                     	ds	1
  5008  015D                     _ui8_b_DResB4_c:	
  5009  015D                     	ds	1
  5010  015E                     _ui8_b_DResServID_c:	
  5011  015E                     	ds	1
  5012  015F                     _ui8_lastTaskvalue:	
  5013  015F                     	ds	1
  5014  0160                     _ui8_sampleState:	
  5015  0160                     	ds	1
  5016  0161                     _ui16_IPhase1_bldc_cal:	
  5017  0161                     	ds	2
  5018  0163                     _ui16_IPhase2_bldc_cal:	
  5019  0163                     	ds	2
  5020  0165                     _ui16_IPhase3_bldc_cal:	
  5021  0165                     	ds	2
  5022                           
  5023                           	psect	dataBANK2
  5024  0167                     __pdataBANK2:	
  5025  0167                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  5026  0167                     	ds	4
  5027  016B                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  5028  016B                     	ds	1
  5029  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  5030  016C                     	ds	1
  5031  016D                     _ict_stamp:	
  5032  016D                     	ds	1
  5033  016E                     _ui8_failure:	
  5034  016E                     	ds	1
  5035                           
  5036                           	psect	bssBANK3
  5037  01A0                     __pbssBANK3:	
  5038  01A0                     _B:	
  5039  01A0                     	ds	16
  5040  01B0                     _my_msg:	
  5041  01B0                     	ds	8
  5042  01B8                     _checksum:	
  5043  01B8                     	ds	6
  5044  01BE                     BVH2_Appl_Layer@Cb14_StateCnt:	
  5045  01BE                     	ds	2
  5046  01C0                     BVH2_Appl_Layer@Cb19_Counter:	
  5047  01C0                     	ds	2
  5048  01C2                     BVH2_Appl_Layer@Cb24_BadCnt:	
  5049  01C2                     	ds	2
  5050  01C4                     __ELINMIntRXCRC:	
  5051  01C4                     	ds	2
  5052  01C6                     __ELINMIntTFrameMax:	
  5053  01C6                     	ds	2
  5054  01C8                     __ELINMIntTHeaderMax:	
  5055  01C8                     	ds	2
  5056  01CA                     _filter1:	
  5057  01CA                     	ds	2
  5058  01CC                     _filter3:	
  5059  01CC                     	ds	2
  5060  01CE                     _filterTempNTC:	
  5061  01CE                     	ds	2
  5062  01D0                     _phase_delay_counter:	
  5063  01D0                     	ds	2
  5064  01D2                     _ui16_IPhase2_bldc:	
  5065  01D2                     	ds	2
  5066  01D4                     _ui16_IPhase3_bldc:	
  5067  01D4                     	ds	2
  5068  01D6                     _ui16_NTC_Temp_bldc:	
  5069  01D6                     	ds	2
  5070  01D8                     _ui16_NTC_Temp_bldc_mean_cal:	
  5071  01D8                     	ds	2
  5072  01DA                     _ui16_PWM_Freq_In:	
  5073  01DA                     	ds	2
  5074  01DC                     _ui16_Speed_demand_mat:	
  5075  01DC                     	ds	2
  5076  01DE                     _ui16_Speed_demand_mat_Max:	
  5077  01DE                     	ds	2
  5078  01E0                     _ui16_Speed_demand_mat_min:	
  5079  01E0                     	ds	2
  5080  01E2                     _ui16_Temp_cal:	
  5081  01E2                     	ds	2
  5082  01E4                     _ui16_mat_inpTemp:	
  5083  01E4                     	ds	2
  5084  01E6                     _ui8_Ki_mat:	
  5085  01E6                     	ds	2
  5086  01E8                     _ui8_fixed_start_speed_mat:	
  5087  01E8                     	ds	2
  5088  01EA                     _ui16_Duty_Cycle_In:	
  5089  01EA                     	ds	2
  5090                           
  5091                           	psect	bssBANK4
  5092  0240                     __pbssBANK4:	
  5093  0240                     _inputArray1:	
  5094  0240                     	ds	16
  5095  0250                     __ELINMIntSleepTimeout:	
  5096  0250                     	ds	4
  5097  0254                     __ELINMIntMessageBuffer:	
  5098  0254                     	ds	11
  5099                           
  5100                           	psect	clrtext
  5101  07F7                     clear_ram:	
  5102                           ;	Called with FSR0 containing the base address, and
  5103                           ;	WREG with the size to clear
  5104                           
  5105  07F7  0064               	clrwdt	;clear the watchdog before getting into this loop
  5106  07F8                     clrloop:	
  5107  07F8  0180               	clrf	0	;clear RAM location pointed to by FSR
  5108  07F9  3101               	addfsr 0,1
  5109  07FA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5110  07FB  2FF8               	goto	clrloop	;have we reached the end yet?
  5111  07FC  3400               	retlw	0	;all done for this memory range, return
  5112                           
  5113                           	psect	cstackBANK4
  5114  0220                     __pcstackBANK4:	
  5115  0220                     EOL@_dcnt:	
  5116  0220                     _BVH2_Appl_Layer$18247:	
  5117                           ; 1 bytes @ 0x0
  5118                           
  5119                           
  5120                           ; 4 bytes @ 0x0
  5121  0220                     	ds	1
  5122  0221                     EOL@_dcnt_7359:	
  5123                           
  5124                           ; 1 bytes @ 0x1
  5125  0221                     	ds	1
  5126  0222                     EOL@_dcnt_7360:	
  5127                           
  5128                           ; 1 bytes @ 0x2
  5129  0222                     	ds	1
  5130  0223                     EOL@_dcnt_7361:	
  5131                           
  5132                           ; 1 bytes @ 0x3
  5133  0223                     	ds	1
  5134  0224                     EOL@_dcnt_7362:	
  5135  0224                     _BVH2_Appl_Layer$18244:	
  5136                           ; 1 bytes @ 0x4
  5137                           
  5138                           
  5139                           ; 2 bytes @ 0x4
  5140  0224                     	ds	1
  5141  0225                     EOL@_dcnt_7363:	
  5142                           
  5143                           ; 1 bytes @ 0x5
  5144  0225                     	ds	1
  5145  0226                     EOL@_dcnt_7364:	
  5146  0226                     _BVH2_Appl_Layer$18246:	
  5147                           ; 1 bytes @ 0x6
  5148                           
  5149                           
  5150                           ; 2 bytes @ 0x6
  5151  0226                     	ds	1
  5152  0227                     EOL@_dcnt_7365:	
  5153                           
  5154                           ; 1 bytes @ 0x7
  5155  0227                     	ds	1
  5156  0228                     EOL@_dcnt_7366:	
  5157  0228                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  5158                           ; 1 bytes @ 0x8
  5159                           
  5160                           
  5161                           ; 1 bytes @ 0x8
  5162  0228                     	ds	1
  5163  0229                     EOL@_dcnt_7367:	
  5164  0229                     _BVH2_Appl_Layer$18236:	
  5165                           ; 1 bytes @ 0x9
  5166                           
  5167                           
  5168                           ; 1 bytes @ 0x9
  5169  0229                     	ds	1
  5170  022A                     EOL@_dcnt_7368:	
  5171  022A                     _BVH2_Appl_Layer$18237:	
  5172                           ; 1 bytes @ 0xA
  5173                           
  5174                           
  5175                           ; 1 bytes @ 0xA
  5176  022A                     	ds	1
  5177  022B                     EOL@_dcnt_7369:	
  5178  022B                     _BVH2_Appl_Layer$18238:	
  5179                           ; 1 bytes @ 0xB
  5180                           
  5181                           
  5182                           ; 1 bytes @ 0xB
  5183  022B                     	ds	1
  5184  022C                     EOL@_dcnt_7370:	
  5185  022C                     _BVH2_Appl_Layer$18239:	
  5186                           ; 1 bytes @ 0xC
  5187                           
  5188                           
  5189                           ; 1 bytes @ 0xC
  5190  022C                     	ds	1
  5191  022D                     EOL@_dcnt_7371:	
  5192  022D                     _BVH2_Appl_Layer$18240:	
  5193                           ; 1 bytes @ 0xD
  5194                           
  5195                           
  5196                           ; 1 bytes @ 0xD
  5197  022D                     	ds	1
  5198  022E                     EOL@_dcnt_7372:	
  5199  022E                     _BVH2_Appl_Layer$18241:	
  5200                           ; 1 bytes @ 0xE
  5201                           
  5202                           
  5203                           ; 1 bytes @ 0xE
  5204  022E                     	ds	1
  5205  022F                     EOL@_dcnt_7373:	
  5206                           
  5207                           ; 1 bytes @ 0xF
  5208  022F                     	ds	1
  5209  0230                     EOL@_dcnt_7374:	
  5210                           
  5211                           ; 1 bytes @ 0x10
  5212  0230                     	ds	1
  5213  0231                     EOL@_dcnt_7375:	
  5214  0231                     BVH2_Appl_Layer@Sb2_Switch5:	
  5215                           ; 1 bytes @ 0x11
  5216                           
  5217                           
  5218                           ; 2 bytes @ 0x11
  5219  0231                     	ds	1
  5220  0232                     EOL@ui8_b_DResB5_RD:	
  5221                           
  5222                           ; 1 bytes @ 0x12
  5223  0232                     	ds	1
  5224  0233                     EOL@ui8_b_DResB4_RD:	
  5225  0233                     BVH2_Appl_Layer@Cb24_Reset:	
  5226                           ; 1 bytes @ 0x13
  5227                           
  5228                           
  5229                           ; 1 bytes @ 0x13
  5230  0233                     	ds	1
  5231  0234                     EOL@ui8_b_DResB0_RD:	
  5232  0234                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  5233                           ; 1 bytes @ 0x14
  5234                           
  5235                           
  5236                           ; 1 bytes @ 0x14
  5237  0234                     	ds	1
  5238  0235                     EOL@ui8_b_DResB1_RD:	
  5239  0235                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  5240                           ; 1 bytes @ 0x15
  5241                           
  5242                           
  5243                           ; 1 bytes @ 0x15
  5244  0235                     	ds	1
  5245  0236                     EOL@ui8_b_DResB2_RD:	
  5246  0236                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  5247                           ; 1 bytes @ 0x16
  5248                           
  5249                           
  5250                           ; 1 bytes @ 0x16
  5251  0236                     	ds	1
  5252  0237                     EOL@ui8_b_DResB3_RD:	
  5253  0237                     BVH2_Appl_Layer@Sb2_Error:	
  5254                           ; 1 bytes @ 0x17
  5255                           
  5256                           
  5257                           ; 2 bytes @ 0x17
  5258  0237                     	ds	2
  5259  0239                     BVH2_Appl_Layer@Sb2_Switch2:	
  5260                           
  5261                           ; 2 bytes @ 0x19
  5262  0239                     	ds	2
  5263  023B                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  5264                           
  5265                           ; 1 bytes @ 0x1B
  5266  023B                     	ds	1
  5267  023C                     BVH2_Appl_Layer@Sb3_Sum1:	
  5268                           
  5269                           ; 2 bytes @ 0x1C
  5270  023C                     	ds	2
  5271  023E                     BVH2_Appl_Layer@Sb4_PI_sum:	
  5272                           
  5273                           ; 2 bytes @ 0x1E
  5274  023E                     	ds	2
  5275                           
  5276                           	psect	cstackCOMMON
  5277  0070                     __pcstackCOMMON:	
  5278  0070                     ?_InitMotorRun:	
  5279  0070                     ?_commutate:	
  5280                           ; 0 bytes @ 0x0
  5281                           
  5282  0070                     ?_PWM_Write_Out:	
  5283                           ; 0 bytes @ 0x0
  5284                           
  5285  0070                     ?_NegativeAnswer:	
  5286                           ; 0 bytes @ 0x0
  5287                           
  5288  0070                     ?_PWM_CTRL:	
  5289                           ; 0 bytes @ 0x0
  5290                           
  5291  0070                     ??_PWM_CTRL:	
  5292                           ; 0 bytes @ 0x0
  5293                           
  5294  0070                     ?_ELINMIntHandler:	
  5295                           ; 0 bytes @ 0x0
  5296                           
  5297  0070                     ?_interrupt_PWMCapture:	
  5298                           ; 0 bytes @ 0x0
  5299                           
  5300  0070                     ??_interrupt_PWMCapture:	
  5301                           ; 0 bytes @ 0x0
  5302                           
  5303  0070                     ?_Oscill_Source_Block:	
  5304                           ; 0 bytes @ 0x0
  5305                           
  5306  0070                     ?_timer_init:	
  5307                           ; 0 bytes @ 0x0
  5308                           
  5309  0070                     ?_PWM_Capture_init:	
  5310                           ; 0 bytes @ 0x0
  5311                           
  5312  0070                     ?_clear_timer:	
  5313                           ; 0 bytes @ 0x0
  5314                           
  5315  0070                     ?_BVH2_Appl_Layer:	
  5316                           ; 0 bytes @ 0x0
  5317                           
  5318  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  5319                           ; 0 bytes @ 0x0
  5320                           
  5321  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  5322                           ; 0 bytes @ 0x0
  5323                           
  5324  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  5325                           ; 0 bytes @ 0x0
  5326                           
  5327  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  5328                           ; 0 bytes @ 0x0
  5329                           
  5330  0070                     ?_ADC_Init:	
  5331                           ; 0 bytes @ 0x0
  5332                           
  5333  0070                     ?_ADC_Wait:	
  5334                           ; 0 bytes @ 0x0
  5335                           
  5336  0070                     ?_FILTER_Init:	
  5337                           ; 0 bytes @ 0x0
  5338                           
  5339  0070                     ?_FILTER_Ubat:	
  5340                           ; 0 bytes @ 0x0
  5341                           
  5342  0070                     ?_FILTER_IPhase:	
  5343                           ; 0 bytes @ 0x0
  5344                           
  5345  0070                     ?_FILTER_Temp:	
  5346                           ; 0 bytes @ 0x0
  5347                           
  5348  0070                     ?_Get_Analog_Value:	
  5349                           ; 0 bytes @ 0x0
  5350                           
  5351  0070                     ?_BLDCWait:	
  5352                           ; 0 bytes @ 0x0
  5353                           
  5354  0070                     ??_BLDCWait:	
  5355                           ; 0 bytes @ 0x0
  5356                           
  5357  0070                     ?_init_bldc:	
  5358                           ; 0 bytes @ 0x0
  5359                           
  5360  0070                     ?_interrrupt_bldc:	
  5361                           ; 0 bytes @ 0x0
  5362                           
  5363  0070                     ?_InitMotorStop:	
  5364                           ; 0 bytes @ 0x0
  5365                           
  5366  0070                     ?_DiagInit:	
  5367                           ; 0 bytes @ 0x0
  5368                           
  5369  0070                     ?_SetDiagAlarm:	
  5370                           ; 0 bytes @ 0x0
  5371                           
  5372  0070                     ?_EOL:	
  5373                           ; 0 bytes @ 0x0
  5374                           
  5375  0070                     ?_Task1ms:	
  5376                           ; 0 bytes @ 0x0
  5377                           
  5378  0070                     ??_Task1ms:	
  5379                           ; 0 bytes @ 0x0
  5380                           
  5381  0070                     ?_interrupt_handler:	
  5382                           ; 0 bytes @ 0x0
  5383                           
  5384  0070                     ?_Receive_Diag:	
  5385                           ; 0 bytes @ 0x0
  5386                           
  5387  0070                     ?_EnableMCP201:	
  5388                           ; 0 bytes @ 0x0
  5389                           
  5390  0070                     ?__ELINMIntResetProtocol:	
  5391                           ; 0 bytes @ 0x0
  5392                           
  5393  0070                     ??__ELINMIntResetProtocol:	
  5394                           ; 0 bytes @ 0x0
  5395                           
  5396  0070                     ?_I_calibrationInit:	
  5397                           ; 0 bytes @ 0x0
  5398                           
  5399  0070                     ?_init_ports:	
  5400                           ; 0 bytes @ 0x0
  5401                           
  5402  0070                     ?_system_init:	
  5403                           ; 0 bytes @ 0x0
  5404                           
  5405  0070                     ?_main:	
  5406                           ; 0 bytes @ 0x0
  5407                           
  5408  0070                     ?i1_ADC_Wait:	
  5409                           ; 0 bytes @ 0x0
  5410                           
  5411  0070                     ??i1_ADC_Wait:	
  5412                           ; 0 bytes @ 0x0
  5413                           
  5414  0070                     ?i1_commutate:	
  5415                           ; 0 bytes @ 0x0
  5416                           
  5417  0070                     ?_read_eeprom_data:	
  5418                           ; 0 bytes @ 0x0
  5419                           
  5420  0070                     ?_PWMReadDC:	
  5421                           ; 1 bytes @ 0x0
  5422                           
  5423  0070                     ?__ELINMIntInitialize:	
  5424                           ; 1 bytes @ 0x0
  5425                           
  5426  0070                     ?__ELINMIntCalcIDParity:	
  5427                           ; 1 bytes @ 0x0
  5428                           
  5429  0070                     ?i1_ADC_Read:	
  5430                           ; 1 bytes @ 0x0
  5431                           
  5432  0070                     ?i1___wmul:	
  5433                           ; 2 bytes @ 0x0
  5434                           
  5435  0070                     ?i1___lwdiv:	
  5436                           ; 2 bytes @ 0x0
  5437                           
  5438  0070                     __ELINMIntResetProtocol@code:	
  5439                           ; 2 bytes @ 0x0
  5440                           
  5441  0070                     i1___wmul@multiplier:	
  5442                           ; 1 bytes @ 0x0
  5443                           
  5444  0070                     i1___lwdiv@divisor:	
  5445                           ; 2 bytes @ 0x0
  5446                           
  5447                           
  5448                           ; 2 bytes @ 0x0
  5449  0070                     	ds	1
  5450  0071                     ??_ELINMIntHandler:	
  5451                           
  5452                           ; 0 bytes @ 0x1
  5453  0071                     	ds	1
  5454  0072                     ??i1_ADC_Read:	
  5455  0072                     i1ADC_Read@i:	
  5456                           ; 0 bytes @ 0x2
  5457                           
  5458  0072                     i1___wmul@multiplicand:	
  5459                           ; 1 bytes @ 0x2
  5460                           
  5461  0072                     i1___lwdiv@dividend:	
  5462                           ; 2 bytes @ 0x2
  5463                           
  5464                           
  5465                           ; 2 bytes @ 0x2
  5466  0072                     	ds	2
  5467  0074                     ??i1___wmul:	
  5468  0074                     ??i1___lwdiv:	
  5469                           ; 0 bytes @ 0x4
  5470                           
  5471  0074                     i1___lwdiv@counter:	
  5472                           ; 0 bytes @ 0x4
  5473                           
  5474  0074                     i1___wmul@product:	
  5475                           ; 1 bytes @ 0x4
  5476                           
  5477                           
  5478                           ; 2 bytes @ 0x4
  5479  0074                     	ds	1
  5480  0075                     i1___lwdiv@quotient:	
  5481                           
  5482                           ; 2 bytes @ 0x5
  5483  0075                     	ds	2
  5484  0077                     ??_interrrupt_bldc:	
  5485                           
  5486                           ; 0 bytes @ 0x7
  5487  0077                     	ds	2
  5488  0079                     interrrupt_bldc@ui32_tmp:	
  5489                           
  5490                           ; 4 bytes @ 0x9
  5491  0079                     	ds	4
  5492  007D                     ??_interrupt_handler:	
  5493                           
  5494                           	psect	cstackBANK0
  5495  0020                     __pcstackBANK0:	
  5496                           ; 0 bytes @ 0xD
  5497                           
  5498  0020                     ??i1_commutate:	
  5499                           
  5500                           ; 0 bytes @ 0x0
  5501  0020                     	ds	12
  5502  002C                     ??_PWM_Write_Out:	
  5503  002C                     ??_read_eeprom_data:	
  5504                           ; 0 bytes @ 0xC
  5505                           
  5506  002C                     ??_Oscill_Source_Block:	
  5507                           ; 0 bytes @ 0xC
  5508                           
  5509  002C                     ??_PWM_Capture_init:	
  5510                           ; 0 bytes @ 0xC
  5511                           
  5512  002C                     ??_clear_timer:	
  5513                           ; 0 bytes @ 0xC
  5514                           
  5515  002C                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  5516                           ; 0 bytes @ 0xC
  5517                           
  5518  002C                     ??_Cb34_PWM_Detection_node_fcn1:	
  5519                           ; 0 bytes @ 0xC
  5520                           
  5521  002C                     ??_Cb56_UbatHandling_node_fcn2:	
  5522                           ; 0 bytes @ 0xC
  5523                           
  5524  002C                     ??_Cb1_Current_An___High_node_fcn1:	
  5525                           ; 0 bytes @ 0xC
  5526                           
  5527  002C                     ??_ADC_Init:	
  5528                           ; 0 bytes @ 0xC
  5529                           
  5530  002C                     ??_ADC_Wait:	
  5531                           ; 0 bytes @ 0xC
  5532                           
  5533  002C                     ??_FILTER_Ubat:	
  5534                           ; 0 bytes @ 0xC
  5535                           
  5536  002C                     ??_FILTER_IPhase:	
  5537                           ; 0 bytes @ 0xC
  5538                           
  5539  002C                     ??_FILTER_Temp:	
  5540                           ; 0 bytes @ 0xC
  5541                           
  5542  002C                     ??_InitMotorStop:	
  5543                           ; 0 bytes @ 0xC
  5544                           
  5545  002C                     ??_EnableMCP201:	
  5546                           ; 0 bytes @ 0xC
  5547                           
  5548  002C                     ??__ELINMIntInitialize:	
  5549                           ; 0 bytes @ 0xC
  5550                           
  5551  002C                     ??__ELINMIntCalcIDParity:	
  5552                           ; 0 bytes @ 0xC
  5553                           
  5554  002C                     ?__ELINMIntGetPointer:	
  5555                           ; 0 bytes @ 0xC
  5556                           
  5557  002C                     ?_cksum:	
  5558                           ; 1 bytes @ 0xC
  5559                           
  5560  002C                     ?_ADC_Read:	
  5561                           ; 2 bytes @ 0xC
  5562                           
  5563  002C                     ?___wmul:	
  5564                           ; 2 bytes @ 0xC
  5565                           
  5566  002C                     ?___lwdiv:	
  5567                           ; 2 bytes @ 0xC
  5568                           
  5569  002C                     ?___tmul:	
  5570                           ; 2 bytes @ 0xC
  5571                           
  5572  002C                     ?___lmul:	
  5573                           ; 3 bytes @ 0xC
  5574                           
  5575  002C                     ?___aldiv:	
  5576                           ; 4 bytes @ 0xC
  5577                           
  5578  002C                     read_eeprom_data@ui8_adress:	
  5579                           ; 4 bytes @ 0xC
  5580                           
  5581  002C                     EnableMCP201@_dcnt:	
  5582                           ; 1 bytes @ 0xC
  5583                           
  5584  002C                     __ELINMIntCalcIDParity@ELINM_idtr:	
  5585                           ; 1 bytes @ 0xC
  5586                           
  5587  002C                     __ELINMIntGetPointer@_ELINMInt_position:	
  5588                           ; 1 bytes @ 0xC
  5589                           
  5590  002C                     PWM_Capture_init@ui8_CCP_Nb:	
  5591                           ; 1 bytes @ 0xC
  5592                           
  5593  002C                     PWM_Write_Out@ui8_DutyCycle_Out:	
  5594                           ; 1 bytes @ 0xC
  5595                           
  5596  002C                     clear_timer@ui8_TmrNb:	
  5597                           ; 1 bytes @ 0xC
  5598                           
  5599  002C                     ___wmul@multiplier:	
  5600                           ; 1 bytes @ 0xC
  5601                           
  5602  002C                     ___lwdiv@divisor:	
  5603                           ; 2 bytes @ 0xC
  5604                           
  5605  002C                     ___tmul@multiplier:	
  5606                           ; 2 bytes @ 0xC
  5607                           
  5608  002C                     ___lmul@multiplier:	
  5609                           ; 3 bytes @ 0xC
  5610                           
  5611  002C                     ___aldiv@divisor:	
  5612                           ; 4 bytes @ 0xC
  5613                           
  5614                           
  5615                           ; 4 bytes @ 0xC
  5616  002C                     	ds	1
  5617  002D                     ??__ELINMIntGetPointer:	
  5618  002D                     ?__ELINMIntSendMessage:	
  5619                           ; 0 bytes @ 0xD
  5620                           
  5621  002D                     ??_timer_init:	
  5622                           ; 0 bytes @ 0xD
  5623                           
  5624  002D                     ??_DiagInit:	
  5625                           ; 0 bytes @ 0xD
  5626                           
  5627  002D                     ??_SetDiagAlarm:	
  5628                           ; 0 bytes @ 0xD
  5629                           
  5630  002D                     read_eeprom_data@ui8_adress_data:	
  5631                           ; 0 bytes @ 0xD
  5632                           
  5633  002D                     EnableMCP201@_dcnt_13735:	
  5634                           ; 1 bytes @ 0xD
  5635                           
  5636  002D                     __ELINMIntSendMessage@_ELINM_size:	
  5637                           ; 1 bytes @ 0xD
  5638                           
  5639  002D                     __ELINMIntGetPointer@_ELINMInt_tag:	
  5640                           ; 1 bytes @ 0xD
  5641                           
  5642  002D                     timer_init@ui8_TmrNb:	
  5643                           ; 1 bytes @ 0xD
  5644                           
  5645                           
  5646                           ; 1 bytes @ 0xD
  5647  002D                     	ds	1
  5648  002E                     ??_cksum:	
  5649  002E                     ??_ADC_Read:	
  5650                           ; 0 bytes @ 0xE
  5651                           
  5652  002E                     ??_init_ports:	
  5653                           ; 0 bytes @ 0xE
  5654                           
  5655  002E                     ADC_Read@i:	
  5656                           ; 0 bytes @ 0xE
  5657                           
  5658  002E                     EnableMCP201@_dcnt_13736:	
  5659                           ; 1 bytes @ 0xE
  5660                           
  5661  002E                     __ELINMIntSendMessage@_ELINM_fmin:	
  5662                           ; 1 bytes @ 0xE
  5663                           
  5664  002E                     cksum@counter:	
  5665                           ; 2 bytes @ 0xE
  5666                           
  5667  002E                     ___wmul@multiplicand:	
  5668                           ; 2 bytes @ 0xE
  5669                           
  5670  002E                     ___lwdiv@dividend:	
  5671                           ; 2 bytes @ 0xE
  5672                           
  5673                           
  5674                           ; 2 bytes @ 0xE
  5675  002E                     	ds	1
  5676  002F                     ??_FILTER_Init:	
  5677  002F                     ??_I_calibrationInit:	
  5678                           ; 0 bytes @ 0xF
  5679                           
  5680  002F                     ___tmul@multiplicand:	
  5681                           ; 0 bytes @ 0xF
  5682                           
  5683                           
  5684                           ; 3 bytes @ 0xF
  5685  002F                     	ds	1
  5686  0030                     ??___wmul:	
  5687  0030                     ??___lwdiv:	
  5688                           ; 0 bytes @ 0x10
  5689                           
  5690  0030                     ___lwdiv@counter:	
  5691                           ; 0 bytes @ 0x10
  5692                           
  5693  0030                     __ELINMIntSendMessage@_ELINM_fmax:	
  5694                           ; 1 bytes @ 0x10
  5695                           
  5696  0030                     cksum@sum:	
  5697                           ; 2 bytes @ 0x10
  5698                           
  5699  0030                     ___wmul@product:	
  5700                           ; 2 bytes @ 0x10
  5701                           
  5702  0030                     ___lmul@multiplicand:	
  5703                           ; 2 bytes @ 0x10
  5704                           
  5705  0030                     ___aldiv@dividend:	
  5706                           ; 4 bytes @ 0x10
  5707                           
  5708                           
  5709                           ; 4 bytes @ 0x10
  5710  0030                     	ds	1
  5711  0031                     ___lwdiv@quotient:	
  5712                           
  5713                           ; 2 bytes @ 0x11
  5714  0031                     	ds	1
  5715  0032                     ??_commutate:	
  5716  0032                     ??__ELINMIntSendMessage:	
  5717                           ; 0 bytes @ 0x12
  5718                           
  5719  0032                     ??___tmul:	
  5720                           ; 0 bytes @ 0x12
  5721                           
  5722  0032                     ?___awdiv:	
  5723                           ; 0 bytes @ 0x12
  5724                           
  5725  0032                     __ELINMIntSendMessage@_ELINM_idr:	
  5726                           ; 2 bytes @ 0x12
  5727                           
  5728  0032                     cksum@addr:	
  5729                           ; 1 bytes @ 0x12
  5730                           
  5731  0032                     ___awdiv@divisor:	
  5732                           ; 2 bytes @ 0x12
  5733                           
  5734  0032                     ___tmul@product:	
  5735                           ; 2 bytes @ 0x12
  5736                           
  5737                           
  5738                           ; 3 bytes @ 0x12
  5739  0032                     	ds	1
  5740  0033                     ?_write_eeprom_data:	
  5741  0033                     write_eeprom_data@ui8_adress_data:	
  5742                           ; 0 bytes @ 0x13
  5743                           
  5744  0033                     __ELINMIntSendMessage@_ELINM_tid:	
  5745                           ; 1 bytes @ 0x13
  5746                           
  5747                           
  5748                           ; 1 bytes @ 0x13
  5749  0033                     	ds	1
  5750  0034                     ??_write_eeprom_data:	
  5751  0034                     ??___lmul:	
  5752                           ; 0 bytes @ 0x14
  5753                           
  5754  0034                     ??___aldiv:	
  5755                           ; 0 bytes @ 0x14
  5756                           
  5757  0034                     write_eeprom_data@ui8_adress:	
  5758                           ; 0 bytes @ 0x14
  5759                           
  5760  0034                     ___aldiv@counter:	
  5761                           ; 1 bytes @ 0x14
  5762                           
  5763  0034                     __ELINMIntSendMessage@_ELINM_chk:	
  5764                           ; 1 bytes @ 0x14
  5765                           
  5766  0034                     ___awdiv@dividend:	
  5767                           ; 2 bytes @ 0x14
  5768                           
  5769  0034                     ___lmul@product:	
  5770                           ; 2 bytes @ 0x14
  5771                           
  5772                           
  5773                           ; 4 bytes @ 0x14
  5774  0034                     	ds	1
  5775  0035                     ?___ltdiv:	
  5776  0035                     ___aldiv@sign:	
  5777                           ; 3 bytes @ 0x15
  5778                           
  5779  0035                     ___ltdiv@divisor:	
  5780                           ; 1 bytes @ 0x15
  5781                           
  5782                           
  5783                           ; 3 bytes @ 0x15
  5784  0035                     	ds	1
  5785  0036                     ??___awdiv:	
  5786  0036                     __ELINMIntSendMessage@_ELINM_i:	
  5787                           ; 0 bytes @ 0x16
  5788                           
  5789  0036                     ___awdiv@counter:	
  5790                           ; 1 bytes @ 0x16
  5791                           
  5792  0036                     ___aldiv@quotient:	
  5793                           ; 1 bytes @ 0x16
  5794                           
  5795                           
  5796                           ; 4 bytes @ 0x16
  5797  0036                     	ds	1
  5798  0037                     ?_Transmit_LIN_8Bytes:	
  5799  0037                     ?__ELINMIntReceiveMessage:	
  5800                           ; 0 bytes @ 0x17
  5801                           
  5802  0037                     Transmit_LIN_8Bytes@B0:	
  5803                           ; 0 bytes @ 0x17
  5804                           
  5805  0037                     __ELINMIntReceiveMessage@_ELINM_id:	
  5806                           ; 1 bytes @ 0x17
  5807                           
  5808  0037                     ___awdiv@sign:	
  5809                           ; 1 bytes @ 0x17
  5810                           
  5811                           
  5812                           ; 1 bytes @ 0x17
  5813  0037                     	ds	1
  5814  0038                     ??_Get_Analog_Value:	
  5815  0038                     Transmit_LIN_8Bytes@B1:	
  5816                           ; 0 bytes @ 0x18
  5817                           
  5818  0038                     __ELINMIntReceiveMessage@_ELINM_size:	
  5819                           ; 1 bytes @ 0x18
  5820                           
  5821  0038                     ___awdiv@quotient:	
  5822                           ; 1 bytes @ 0x18
  5823                           
  5824  0038                     ___ltdiv@dividend:	
  5825                           ; 2 bytes @ 0x18
  5826                           
  5827                           
  5828                           ; 3 bytes @ 0x18
  5829  0038                     	ds	1
  5830  0039                     ??__ELINMIntReceiveMessage:	
  5831  0039                     Transmit_LIN_8Bytes@B2:	
  5832                           ; 0 bytes @ 0x19
  5833                           
  5834  0039                     __ELINMIntReceiveMessage@_ELINM_tag:	
  5835                           ; 1 bytes @ 0x19
  5836                           
  5837                           
  5838                           ; 1 bytes @ 0x19
  5839  0039                     	ds	1
  5840  003A                     ??_BVH2_Appl_Layer:	
  5841  003A                     ??_Receive_Diag:	
  5842                           ; 0 bytes @ 0x1A
  5843                           
  5844  003A                     Transmit_LIN_8Bytes@B3:	
  5845                           ; 0 bytes @ 0x1A
  5846                           
  5847                           
  5848                           ; 1 bytes @ 0x1A
  5849  003A                     	ds	1
  5850  003B                     ??___ltdiv:	
  5851  003B                     Transmit_LIN_8Bytes@B4:	
  5852                           ; 0 bytes @ 0x1B
  5853                           
  5854  003B                     Receive_Diag@id:	
  5855                           ; 1 bytes @ 0x1B
  5856                           
  5857  003B                     ___ltdiv@quotient:	
  5858                           ; 1 bytes @ 0x1B
  5859                           
  5860                           
  5861                           ; 3 bytes @ 0x1B
  5862  003B                     	ds	1
  5863  003C                     Transmit_LIN_8Bytes@B5:	
  5864                           
  5865                           ; 1 bytes @ 0x1C
  5866  003C                     	ds	1
  5867  003D                     Transmit_LIN_8Bytes@B6:	
  5868                           
  5869                           ; 1 bytes @ 0x1D
  5870  003D                     	ds	1
  5871  003E                     ??_InitMotorRun:	
  5872  003E                     ??_init_bldc:	
  5873                           ; 0 bytes @ 0x1E
  5874                           
  5875  003E                     ??_system_init:	
  5876                           ; 0 bytes @ 0x1E
  5877                           
  5878  003E                     Transmit_LIN_8Bytes@B7:	
  5879                           ; 0 bytes @ 0x1E
  5880                           
  5881  003E                     ___ltdiv@counter:	
  5882                           ; 1 bytes @ 0x1E
  5883                           
  5884                           
  5885                           ; 1 bytes @ 0x1E
  5886  003E                     	ds	1
  5887  003F                     ??_Transmit_LIN_8Bytes:	
  5888  003F                     ??_PWMReadDC:	
  5889                           ; 0 bytes @ 0x1F
  5890                           
  5891  003F                     Transmit_LIN_8Bytes@ID:	
  5892                           ; 0 bytes @ 0x1F
  5893                           
  5894                           
  5895                           ; 1 bytes @ 0x1F
  5896  003F                     	ds	1
  5897  0040                     ??_NegativeAnswer:	
  5898  0040                     NegativeAnswer@LID:	
  5899                           ; 0 bytes @ 0x20
  5900                           
  5901                           
  5902                           ; 1 bytes @ 0x20
  5903  0040                     	ds	1
  5904  0041                     ??_EOL:	
  5905                           
  5906                           ; 0 bytes @ 0x21
  5907  0041                     	ds	3
  5908  0044                     ??_main:	
  5909                           
  5910                           ; 0 bytes @ 0x24
  5911  0044                     	ds	4
  5912                           
  5913                           	psect	text2030
  5914  0917                     __ptext2030:	
  5915 ;; =============== function _system_init ends ============
  5916                           
  5917                           
  5918 ;; *************** function _EOL *****************
  5919 ;; Defined at:
  5920 ;;		line 458 in file "../diag.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;		None
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;  _dcnt           1   17[BANK4 ] unsigned char 
  5925 ;;  _dcnt           1   16[BANK4 ] unsigned char 
  5926 ;;  _dcnt           1   15[BANK4 ] unsigned char 
  5927 ;;  _dcnt           1   14[BANK4 ] unsigned char 
  5928 ;;  _dcnt           1   13[BANK4 ] unsigned char 
  5929 ;;  _dcnt           1   12[BANK4 ] unsigned char 
  5930 ;;  _dcnt           1   11[BANK4 ] unsigned char 
  5931 ;;  _dcnt           1   10[BANK4 ] unsigned char 
  5932 ;;  _dcnt           1    9[BANK4 ] unsigned char 
  5933 ;;  _dcnt           1    8[BANK4 ] unsigned char 
  5934 ;;  _dcnt           1    7[BANK4 ] unsigned char 
  5935 ;;  _dcnt           1    6[BANK4 ] unsigned char 
  5936 ;;  _dcnt           1    5[BANK4 ] unsigned char 
  5937 ;;  _dcnt           1    4[BANK4 ] unsigned char 
  5938 ;;  _dcnt           1    3[BANK4 ] unsigned char 
  5939 ;;  _dcnt           1    2[BANK4 ] unsigned char 
  5940 ;;  _dcnt           1    1[BANK4 ] unsigned char 
  5941 ;;  _dcnt           1    0[BANK4 ] unsigned char 
  5942 ;;  ui8_b_DResB3    1   23[BANK4 ] unsigned char 
  5943 ;;  ui8_b_DResB2    1   22[BANK4 ] unsigned char 
  5944 ;;  ui8_b_DResB1    1   21[BANK4 ] unsigned char 
  5945 ;;  ui8_b_DResB0    1   20[BANK4 ] unsigned char 
  5946 ;;  ui8_b_DResB4    1   19[BANK4 ] unsigned char 
  5947 ;;  ui8_b_DResB5    1   18[BANK4 ] unsigned char 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;		None               void
  5950 ;; Registers used:
  5951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5952 ;; Tracked objects:
  5953 ;;		On entry : 1F/0
  5954 ;;		On exit  : 1E/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5957 ;;      Params:         0       0       0       0       0       0       0       0
  5958 ;;      Locals:         0       0       0       0       0      24       0       0
  5959 ;;      Temps:          0       3       0       0       0       0       0       0
  5960 ;;      Totals:         0       3       0       0       0      24       0       0
  5961 ;;Total ram usage:       27 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:    8
  5964 ;; This function calls:
  5965 ;;		_Transmit_LIN_8Bytes
  5966 ;;		_read_eeprom_data
  5967 ;;		_NegativeAnswer
  5968 ;;		_cksum
  5969 ;;		_InitMotorStop
  5970 ;;		_ADC_Wait
  5971 ;;		_ADC_Read
  5972 ;;		___lwdiv
  5973 ;;		_write_eeprom_data
  5974 ;;		___wmul
  5975 ;;		_PWMReadDC
  5976 ;;		_PWM_Write_Out
  5977 ;; This function is called by:
  5978 ;;		_main
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981  0917                     _EOL:	
  5982                           
  5983                           ;diag.c: 460: unsigned char ui8_b_DResB0_RD;
  5984                           ;diag.c: 461: unsigned char ui8_b_DResB1_RD;
  5985                           ;diag.c: 462: unsigned char ui8_b_DResB2_RD;
  5986                           ;diag.c: 463: unsigned char ui8_b_DResB3_RD;
  5987                           ;diag.c: 464: unsigned char ui8_b_DResB4_RD;
  5988                           ;diag.c: 465: unsigned char ui8_b_DResB5_RD;
  5989                           ;diag.c: 469: if( ui8_b_DResServID_c == 0x3b )
  5990                           
  5991                           ; Regs used in _EOL: [wreg-status,0+pclath+cstack]
  5992  0917  0022               	movlb	2	; select bank2
  5993  0918  085E               	movf	_ui8_b_DResServID_c^(0+256),w
  5994  0919  3A3B               	xorlw	59
  5995  091A  1D03               	skipz
  5996  091B  2E3A               	goto	l31259
  5997                           
  5998                           ;diag.c: 471: {
  5999                           ;diag.c: 477: ui8_selected_lid = ui8_b_DResLocID_c;
  6000  091C  0020               	movlb	0	; select bank0
  6001  091D  084F               	movf	_ui8_b_DResLocID_c,w
  6002  091E  00D4               	movwf	_ui8_selected_lid
  6003                           
  6004                           ;diag.c: 2406: break;
  6005                           
  6006                           ;diag.c: 482: switch( ui8_b_DResLocID_c)
  6007  091F  084F               	movf	_ui8_b_DResLocID_c,w
  6008                           
  6009                           ; Switch size 1, requested type "space"
  6010                           ; Number of cases is 10, Range of values is 128 to 250
  6011                           ; switch strategies available:
  6012                           ; Name         Instructions Cycles
  6013                           ; simple_byte           31    16 (average)
  6014                           ; direct_byte          255     9 (fixed)
  6015                           ; jumptable            263     9 (fixed)
  6016                           ;	Chosen strategy is simple_byte
  6017  0920  3A80               	xorlw	128	; case 128
  6018  0921  1903               	skipnz
  6019  0922  293F               	goto	l30711
  6020  0923  3A10               	xorlw	16	; case 144
  6021  0924  1903               	skipnz
  6022  0925  294F               	goto	l30719
  6023  0926  3A01               	xorlw	1	; case 145
  6024  0927  1903               	skipnz
  6025  0928  29CA               	goto	l30759
  6026  0929  3A02               	xorlw	2	; case 147
  6027  092A  1903               	skipnz
  6028  092B  2A0F               	goto	l30781
  6029  092C  3A07               	xorlw	7	; case 148
  6030  092D  1903               	skipnz
  6031  092E  2A86               	goto	l30839
  6032  092F  3A01               	xorlw	1	; case 149
  6033  0930  1903               	skipnz
  6034  0931  2ADD               	goto	l30869
  6035  0932  3A0D               	xorlw	13	; case 152
  6036  0933  1903               	skipnz
  6037  0934  2CBE               	goto	l31037
  6038  0935  3A07               	xorlw	7	; case 159
  6039  0936  1903               	skipnz
  6040  0937  2D6A               	goto	l31135
  6041  0938  3A3F               	xorlw	63	; case 160
  6042  0939  1903               	skipnz
  6043  093A  2DBB               	goto	l31213
  6044  093B  3A5A               	xorlw	90	; case 250
  6045  093C  1903               	skipnz
  6046  093D  2E26               	goto	l31245
  6047  093E  2E38               	goto	l31253
  6048  093F                     l30711:	
  6049                           
  6050                           ;diag.c: 490: {
  6051                           ;diag.c: 492: if( 0x80 == ui8_selected_lid )
  6052  093F  0854               	movf	_ui8_selected_lid,w
  6053  0940  3A80               	xorlw	128
  6054  0941  1D03               	skipz
  6055  0942  0008               	return
  6056                           
  6057                           ;diag.c: 494: {
  6058                           ;diag.c: 496: ui8_selected_lid = 0x90;
  6059  0943  3090               	movlw	144
  6060  0944  00D4               	movwf	_ui8_selected_lid
  6061                           
  6062                           ;diag.c: 497: ict_stamp = 1;
  6063  0945  0022               	movlb	2	; select bank2
  6064  0946  303A               	movlw	58
  6065  0947  01ED               	clrf	_ict_stamp^(0+256)
  6066  0948  0AED               	incf	_ict_stamp^(0+256),f
  6067                           
  6068                           ;diag.c: 499: Transmit_LIN_8Bytes( 0x10, 0x3A, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
      +                          );
  6069  0949  0020               	movlb	0	; select bank0
  6070  094A  00B7               	movwf	?_Transmit_LIN_8Bytes
  6071  094B  3080               	movlw	128
  6072  094C  26F2  3189         	fcall	PL28	;call to abstracted procedure
  6073  094E  2F30               	ljmp	_Transmit_LIN_8Bytes
  6074  094F                     l30719:	
  6075                           ;diag.c: 516: }
  6076                           ;diag.c: 519: break;
  6077                           
  6078                           ;diag.c: 506: else
  6079                           ;diag.c: 507: {
  6080                           
  6081                           ;diag.c: 503: }
  6082                           
  6083                           
  6084                           ;diag.c: 529: {
  6085                           ;diag.c: 531: if( 0x90 == ui8_selected_lid )
  6086  094F  0854               	movf	_ui8_selected_lid,w
  6087  0950  3A90               	xorlw	144
  6088  0951  1D03               	skipz
  6089  0952  0008               	return
  6090  0953  2999               	goto	l30741
  6091  0954                     l30723:	
  6092                           
  6093                           ;diag.c: 557: {
  6094                           ;diag.c: 559: ui8_b_DResB0_RD = read_eeprom_data( 0xf0 );
  6095  0954  30F0               	movlw	240
  6096  0955  3183  2322  3189   	fcall	_read_eeprom_data
  6097  0958  0024               	movlb	4	; select bank4
  6098  0959  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  6099                           
  6100                           ;diag.c: 560: ui8_b_DResB1_RD = read_eeprom_data( 0xf1 );
  6101  095A  30F1               	movlw	241
  6102  095B  3183  2322  3189   	fcall	_read_eeprom_data
  6103  095E  0024               	movlb	4	; select bank4
  6104  095F  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  6105                           
  6106                           ;diag.c: 561: ui8_b_DResB2_RD = read_eeprom_data( 0xf2 );
  6107  0960  30F2               	movlw	242
  6108  0961  3183  2322  3189   	fcall	_read_eeprom_data
  6109  0964  0024               	movlb	4	; select bank4
  6110  0965  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  6111                           
  6112                           ;diag.c: 562: ui8_b_DResB3_RD = read_eeprom_data( 0xf3 );
  6113  0966  30F3               	movlw	243
  6114  0967  3183  2322  3189   	fcall	_read_eeprom_data
  6115  096A  0024               	movlb	4	; select bank4
  6116  096B  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  6117  096C  3002               	movlw	2
  6118                           
  6119                           ;diag.c: 563: ui8_b_DResB4_RD = 0;
  6120  096D  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
  6121                           
  6122                           ;diag.c: 564: ui8_b_DResB5_RD = 0;
  6123  096E  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
  6124                           
  6125                           ;diag.c: 566: ict_stamp = 2;
  6126  096F  0022               	movlb	2	; select bank2
  6127  0970  00ED               	movwf	_ict_stamp^(0+256)
  6128                           
  6129                           ;diag.c: 567: break;
  6130  0971  29A2               	goto	l30743
  6131  0972                     l30731:	
  6132                           
  6133                           ;diag.c: 574: {
  6134                           ;diag.c: 576: ui8_b_DResB0_RD = read_eeprom_data( 0xeb );
  6135  0972  30EB               	movlw	235
  6136  0973  3183  2322  3189   	fcall	_read_eeprom_data
  6137  0976  0024               	movlb	4	; select bank4
  6138  0977  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  6139                           
  6140                           ;diag.c: 577: ui8_b_DResB1_RD = read_eeprom_data( 0xec );
  6141  0978  30EC               	movlw	236
  6142  0979  3183  2322  3189   	fcall	_read_eeprom_data
  6143  097C  0024               	movlb	4	; select bank4
  6144  097D  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  6145                           
  6146                           ;diag.c: 578: ui8_b_DResB2_RD = read_eeprom_data( 0xed );
  6147  097E  30ED               	movlw	237
  6148  097F  3183  2322  3189   	fcall	_read_eeprom_data
  6149  0982  0024               	movlb	4	; select bank4
  6150  0983  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  6151                           
  6152                           ;diag.c: 579: ui8_b_DResB3_RD = read_eeprom_data( 0xee );
  6153  0984  30EE               	movlw	238
  6154  0985  3183  2322  3189   	fcall	_read_eeprom_data
  6155  0988  0024               	movlb	4	; select bank4
  6156  0989  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  6157                           
  6158                           ;diag.c: 580: ui8_b_DResB4_RD = read_eeprom_data( 0xef );
  6159  098A  30EF               	movlw	239
  6160  098B  3183  2322  3189   	fcall	_read_eeprom_data
  6161  098E  0024               	movlb	4	; select bank4
  6162  098F  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
  6163  0990  3091               	movlw	145
  6164                           
  6165                           ;diag.c: 581: ui8_b_DResB5_RD = 0;
  6166  0991  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
  6167                           
  6168                           ;diag.c: 583: ui8_selected_lid = 0x91;
  6169  0992  0020               	movlb	0	; select bank0
  6170  0993  00D4               	movwf	_ui8_selected_lid
  6171                           
  6172                           ;diag.c: 584: break;
  6173  0994  29A2               	goto	l30743
  6174  0995                     l30737:	
  6175                           
  6176                           ;diag.c: 591: {
  6177                           ;diag.c: 594: NegativeAnswer(0x90);
  6178  0995  3090               	movlw	144
  6179  0996  2720  3189         	fcall	_NegativeAnswer
  6180                           
  6181                           ;diag.c: 595: break;
  6182  0998  29A2               	goto	l30743
  6183  0999                     l30741:	
  6184  0999  0022               	movlb	2	; select bank2
  6185  099A  086D               	movf	_ict_stamp^(0+256),w
  6186                           
  6187                           ; Switch size 1, requested type "space"
  6188                           ; Number of cases is 2, Range of values is 1 to 2
  6189                           ; switch strategies available:
  6190                           ; Name         Instructions Cycles
  6191                           ; simple_byte            7     4 (average)
  6192                           ; direct_byte           13     9 (fixed)
  6193                           ; jumptable            263     9 (fixed)
  6194                           ;	Chosen strategy is simple_byte
  6195  099B  3A01               	xorlw	1	; case 1
  6196  099C  1903               	skipnz
  6197  099D  2954               	goto	l30723
  6198  099E  3A03               	xorlw	3	; case 2
  6199  099F  1903               	skipnz
  6200  09A0  2972               	goto	l30731
  6201  09A1  2995               	goto	l30737
  6202  09A2                     l30743:	
  6203                           
  6204                           ;diag.c: 602: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DResB
      +                          2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF) && (ui8_b_DResB5
      +                          _RD != 0xFF))
  6205  09A2  0024               	movlb	4	; select bank4
  6206  09A3  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  6207  09A4  3AFF               	xorlw	255
  6208  09A5  1903               	skipnz
  6209  09A6  29C3               	goto	l30757
  6210  09A7  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  6211  09A8  3AFF               	xorlw	255
  6212  09A9  1903               	skipnz
  6213  09AA  29C3               	goto	l30757
  6214  09AB  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  6215  09AC  3AFF               	xorlw	255
  6216  09AD  1903               	skipnz
  6217  09AE  29C3               	goto	l30757
  6218  09AF  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  6219  09B0  3AFF               	xorlw	255
  6220  09B1  1903               	skipnz
  6221  09B2  29C3               	goto	l30757
  6222  09B3  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  6223  09B4  3AFF               	xorlw	255
  6224  09B5  1903               	skipnz
  6225  09B6  29C3               	goto	l30757
  6226  09B7  0832               	movf	EOL@ui8_b_DResB5_RD^(0+512),w
  6227  09B8  3AFF               	xorlw	255
  6228  09B9  1903               	skipnz
  6229  09BA  29C3               	goto	l30757
  6230                           
  6231                           ;diag.c: 604: {
  6232                           ;diag.c: 606: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6233  09BB  303A               	movlw	58
  6234  09BC  263D  3189         	fcall	PL2	;call to abstracted procedure
  6235  09BE  2703  3189         	fcall	PL31	;call to abstracted procedure
  6236  09C0  00BE               	movwf	?_Transmit_LIN_8Bytes+7
  6237  09C1  3010               	movlw	16
  6238  09C2  2F30               	ljmp	_Transmit_LIN_8Bytes
  6239  09C3                     l30757:	
  6240                           ;diag.c: 609: }
  6241                           
  6242                           
  6243                           ;diag.c: 612: else
  6244                           ;diag.c: 613: {
  6245                           ;diag.c: 615: Transmit_LIN_8Bytes( 0x10, 0x7F, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
  6246  09C3  307F               	movlw	127
  6247  09C4  0020               	movlb	0	; select bank0
  6248  09C5  00B7               	movwf	?_Transmit_LIN_8Bytes
  6249  09C6  3090               	movlw	144
  6250  09C7  26C2  3189         	fcall	PL11	;call to abstracted procedure
  6251  09C9  2F30               	ljmp	_Transmit_LIN_8Bytes
  6252  09CA                     l30759:	
  6253                           
  6254                           ;diag.c: 657: {
  6255                           ;diag.c: 659: if( 0x91 == ui8_selected_lid )
  6256  09CA  0854               	movf	_ui8_selected_lid,w
  6257  09CB  3A91               	xorlw	145
  6258  09CC  1D03               	skipz
  6259  09CD  0008               	return
  6260                           
  6261                           ;diag.c: 661: {
  6262                           ;diag.c: 672: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
  6263  09CE  30F4               	movlw	244
  6264  09CF  3183  2322  3189   	fcall	_read_eeprom_data
  6265  09D2  0024               	movlb	4	; select bank4
  6266  09D3  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  6267                           
  6268                           ;diag.c: 673: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
  6269  09D4  30F5               	movlw	245
  6270  09D5  3183  2322  3189   	fcall	_read_eeprom_data
  6271  09D8  0024               	movlb	4	; select bank4
  6272  09D9  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  6273                           
  6274                           ;diag.c: 674: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
  6275  09DA  30F6               	movlw	246
  6276  09DB  3183  2322  3189   	fcall	_read_eeprom_data
  6277  09DE  0024               	movlb	4	; select bank4
  6278  09DF  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  6279                           
  6280                           ;diag.c: 675: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
  6281  09E0  30F7               	movlw	247
  6282  09E1  3183  2322  3189   	fcall	_read_eeprom_data
  6283  09E4  0024               	movlb	4	; select bank4
  6284  09E5  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  6285                           
  6286                           ;diag.c: 676: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
  6287  09E6  30F8               	movlw	248
  6288  09E7  3183  2322  3189   	fcall	_read_eeprom_data
  6289                           
  6290                           ;diag.c: 679: if ((ui8_b_DResB0_RD == 0xFF) && (ui8_b_DResB1_RD == 0xFF) && (ui8_b_DResB
      +                          2_RD == 0xFF) && (ui8_b_DResB3_RD == 0xFF) && (ui8_b_DResB4_RD == 0xFF))
  6291  09EA  271B  3189         	fcall	PL47	;call to abstracted procedure
  6292  09EC  1D03               	skipz
  6293  09ED  2A04               	goto	l30777
  6294  09EE  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  6295  09EF  3AFF               	xorlw	255
  6296  09F0  1D03               	skipz
  6297  09F1  2A04               	goto	l30777
  6298  09F2  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  6299  09F3  3AFF               	xorlw	255
  6300  09F4  1D03               	skipz
  6301  09F5  2A04               	goto	l30777
  6302  09F6  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  6303  09F7  3AFF               	xorlw	255
  6304  09F8  1D03               	skipz
  6305  09F9  2A04               	goto	l30777
  6306  09FA  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  6307  09FB  3AFF               	xorlw	255
  6308  09FC  1D03               	skipz
  6309  09FD  2A04               	goto	l30777
  6310                           
  6311                           ;diag.c: 681: {
  6312                           ;diag.c: 683: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6313  09FE  303A               	movlw	58
  6314  09FF  263D  3189         	fcall	PL2	;call to abstracted procedure
  6315  0A01  26CB  3189         	fcall	PL19	;call to abstracted procedure
  6316  0A03  2A0A               	goto	L2
  6317  0A04                     l30777:	
  6318                           ;diag.c: 686: }
  6319                           
  6320                           
  6321                           ;diag.c: 689: else
  6322                           ;diag.c: 690: {
  6323                           ;diag.c: 692: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  6324  0A04  307F               	movlw	127
  6325  0A05  0020               	movlb	0	; select bank0
  6326  0A06  00B7               	movwf	?_Transmit_LIN_8Bytes
  6327  0A07  084F               	movf	_ui8_b_DResLocID_c,w
  6328  0A08  26C2  3189         	fcall	PL11	;call to abstracted procedure
  6329  0A0A                     L2:	
  6330  0A0A  2730               	fcall	_Transmit_LIN_8Bytes
  6331                           
  6332                           ;diag.c: 702: }
  6333                           ;diag.c: 705: ui8_selected_lid = 0x92;
  6334  0A0B  3092               	movlw	146
  6335  0A0C  0020               	movlb	0	; select bank0
  6336  0A0D  00D4               	movwf	_ui8_selected_lid
  6337                           
  6338                           ;diag.c: 708: }
  6339  0A0E  0008               	return
  6340  0A0F                     l30781:	
  6341                           
  6342                           ;diag.c: 834: {
  6343                           ;diag.c: 836: if( 0x93 == ui8_selected_lid )
  6344  0A0F  0854               	movf	_ui8_selected_lid,w
  6345  0A10  3A93               	xorlw	147
  6346  0A11  1D03               	skipz
  6347  0A12  0008               	return
  6348                           
  6349                           ;diag.c: 838: {
  6350                           ;diag.c: 850: sum = cksum( );
  6351  0A13  3187  27C9  3189   	fcall	_cksum
  6352  0A16  082D               	movf	?_cksum+1,w
  6353  0A17  0022               	movlb	2	; select bank2
  6354  0A18  00A8               	movwf	(_sum+1)^(0+256)
  6355  0A19  0020               	movlb	0	; select bank0
  6356  0A1A  082C               	movf	?_cksum,w
  6357  0A1B  0022               	movlb	2	; select bank2
  6358  0A1C  00A7               	movwf	_sum^(0+256)
  6359                           
  6360                           ;diag.c: 851: checksum[ 1 ] = ( (EEADRL=(0x1FFF)&0xff, EEADRH=(0x1FFF)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, _nop(), _nop(), (EEDATH << 8) | EEDATA) );
  6361  0A1D  30FF               	movlw	255
  6362  0A1E  0023               	movlb	3	; select bank3
  6363  0A1F  2715  3189         	fcall	PL46	;call to abstracted procedure
  6364  0A21  1415               	bsf	21,0
  6365  0A22  0000               	nop
  6366  0A23  0000               	nop
  6367  0A24  0023               	movlb	3	; select bank3
  6368  0A25  0814               	movf	20,w	;volatile
  6369  0A26  00BB               	movwf	((_checksum+1)^(0+384)+2)
  6370  0A27  0813               	movf	19,w	;volatile
  6371  0A28  00BA               	movwf	(_checksum^(0+384)+2)
  6372                           
  6373                           ;diag.c: 852: checksum[ 2 ] = ( (EEADRL=(0x1FFE)&0xff, EEADRH=(0x1FFE)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, _nop(), _nop(), (EEDATH << 8) | EEDATA) );
  6374  0A29  30FE               	movlw	254
  6375  0A2A  2715  3189         	fcall	PL46	;call to abstracted procedure
  6376  0A2C  1415               	bsf	21,0
  6377  0A2D  0000               	nop
  6378  0A2E  0000               	nop
  6379  0A2F  0023               	movlb	3	; select bank3
  6380  0A30  0814               	movf	20,w	;volatile
  6381  0A31  00BD               	movwf	((_checksum+1)^(0+384)+4)
  6382  0A32  0813               	movf	19,w	;volatile
  6383  0A33  00BC               	movwf	(_checksum^(0+384)+4)
  6384                           
  6385                           ;diag.c: 853: checksum[ 0 ] = ( checksum[ 1 ]<<8 ) + checksum[ 2 ];
  6386  0A34  3004               	movlw	4
  6387  0A35  3EB8               	addlw	_checksum& (0+255)
  6388  0A36  0086               	movwf	6
  6389  0A37  3001               	movlw	1	; select bank3/4
  6390  0A38  0087               	movwf	7
  6391  0A39  083A               	movf	(_checksum^(0+384)+2),w
  6392  0A3A  0020               	movlb	0	; select bank0
  6393  0A3B  00C2               	movwf	??_EOL+1
  6394  0A3C  01C1               	clrf	??_EOL
  6395  0A3D  3F40               	moviw [0]fsr1
  6396  0A3E  0741               	addwf	??_EOL,w
  6397  0A3F  0023               	movlb	3	; select bank3
  6398  0A40  00B8               	movwf	_checksum^(0+384)
  6399  0A41  3F41               	moviw [1]fsr1
  6400  0A42  0020               	movlb	0	; select bank0
  6401  0A43  3D42               	addwfc	??_EOL+1,w
  6402  0A44  0023               	movlb	3	; select bank3
  6403  0A45  00B9               	movwf	(_checksum^(0+384)+1)
  6404                           
  6405                           ;diag.c: 858: ui8_b_DResB2_RD = checksum[1] ;
  6406  0A46  083A               	movf	(_checksum^(0+384)+2),w
  6407  0A47  0024               	movlb	4	; select bank4
  6408  0A48  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  6409                           
  6410                           ;diag.c: 859: ui8_b_DResB3_RD = checksum[2] ;
  6411  0A49  0023               	movlb	3	; select bank3
  6412  0A4A  083C               	movf	(_checksum^(0+384)+4),w
  6413  0A4B  0024               	movlb	4	; select bank4
  6414  0A4C  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  6415                           
  6416                           ;diag.c: 860: ui8_b_DResB4_RD = (unsigned int)((sum)>>8) ;
  6417  0A4D  0022               	movlb	2	; select bank2
  6418  0A4E  0828               	movf	(_sum+1)^(0+256),w
  6419  0A4F  0024               	movlb	4	; select bank4
  6420  0A50  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
  6421                           
  6422                           ;diag.c: 861: ui8_b_DResB5_RD = (unsigned int)(sum) ;
  6423  0A51  0022               	movlb	2	; select bank2
  6424  0A52  0827               	movf	_sum^(0+256),w
  6425  0A53  0024               	movlb	4	; select bank4
  6426  0A54  00B2               	movwf	EOL@ui8_b_DResB5_RD^(0+512)
  6427                           
  6428                           ;diag.c: 865: if (checksum[0] == sum)
  6429  0A55  0022               	movlb	2	; select bank2
  6430  0A56  0828               	movf	(_sum+1)^(0+256),w
  6431  0A57  0023               	movlb	3	; select bank3
  6432  0A58  0639               	xorwf	(_checksum+1)^(0+384),w
  6433  0A59  1D03               	skipz
  6434  0A5A  2A5F               	goto	u11375
  6435  0A5B  0022               	movlb	2	; select bank2
  6436  0A5C  0827               	movf	_sum^(0+256),w
  6437  0A5D  0023               	movlb	3	; select bank3
  6438  0A5E  0638               	xorwf	_checksum^(0+384),w
  6439  0A5F                     u11375:	
  6440  0A5F  1D03               	skipz
  6441  0A60  2A74               	goto	l30835
  6442                           
  6443                           ;diag.c: 867: {
  6444                           ;diag.c: 869: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
  6445                           ;diag.c: 870: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6446  0A61  303A               	movlw	58
  6447  0A62  0020               	movlb	0	; select bank0
  6448  0A63  00B7               	movwf	?_Transmit_LIN_8Bytes
  6449  0A64  084F               	movf	_ui8_b_DResLocID_c,w
  6450  0A65  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  6451  0A66  3002               	movlw	2
  6452  0A67  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  6453  0A68  01BA               	clrf	?_Transmit_LIN_8Bytes+3
  6454  0A69  0024               	movlb	4	; select bank4
  6455  0A6A  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  6456  0A6B  0020               	movlb	0	; select bank0
  6457  0A6C  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  6458  0A6D  0024               	movlb	4	; select bank4
  6459  0A6E  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  6460  0A6F  0020               	movlb	0	; select bank0
  6461  0A70  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  6462  0A71  2703  3189         	fcall	PL31	;call to abstracted procedure
  6463  0A73  2A7F               	goto	L3
  6464  0A74                     l30835:	
  6465                           ;diag.c: 873: }
  6466                           
  6467                           
  6468                           ;diag.c: 876: else
  6469                           ;diag.c: 877: {
  6470                           ;diag.c: 879: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  6471  0A74  307F               	movlw	127
  6472  0A75  0020               	movlb	0	; select bank0
  6473  0A76  00B7               	movwf	?_Transmit_LIN_8Bytes
  6474  0A77  084F               	movf	_ui8_b_DResLocID_c,w
  6475  0A78  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  6476  0A79  30FF               	movlw	255
  6477  0A7A  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  6478  0A7B  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  6479  0A7C  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  6480  0A7D  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  6481  0A7E  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  6482  0A7F                     L3:	
  6483  0A7F  00BE               	movwf	?_Transmit_LIN_8Bytes+7
  6484  0A80  3010               	movlw	16
  6485  0A81  2730               	fcall	_Transmit_LIN_8Bytes
  6486                           
  6487                           ;diag.c: 889: }
  6488                           ;diag.c: 892: ui8_selected_lid = 0x94;
  6489  0A82  3094               	movlw	148
  6490  0A83  0020               	movlb	0	; select bank0
  6491  0A84  00D4               	movwf	_ui8_selected_lid
  6492                           
  6493                           ;diag.c: 896: }
  6494  0A85  0008               	return
  6495  0A86                     l30839:	
  6496                           
  6497                           ;diag.c: 923: {
  6498                           ;diag.c: 925: if( 0x94 == ui8_selected_lid )
  6499  0A86  0854               	movf	_ui8_selected_lid,w
  6500  0A87  3A94               	xorlw	148
  6501  0A88  1D03               	skipz
  6502  0A89  0008               	return
  6503                           
  6504                           ;diag.c: 927: {
  6505                           ;diag.c: 940: ui8_given_supply = (ui8_b_DResB0_c);
  6506  0A8A  084E               	movf	_ui8_b_DResB0_c,w
  6507  0A8B  0021               	movlb	1	; select bank1
  6508  0A8C  00E6               	movwf	_ui8_given_supply^(0+128)
  6509                           
  6510                           ;diag.c: 942: if (ui8_given_supply == 0)
  6511  0A8D  08E6               	movf	_ui8_given_supply^(0+128),f
  6512  0A8E  1D03               	skipz
  6513  0A8F  2A92               	goto	l30847
  6514                           
  6515                           ;diag.c: 944: {
  6516                           ;diag.c: 946: ui8_given_supply = 0x6F;
  6517  0A90  306F               	movlw	111
  6518  0A91  00E6               	movwf	_ui8_given_supply^(0+128)
  6519  0A92                     l30847:	
  6520                           
  6521                           ;diag.c: 948: }
  6522                           ;diag.c: 951: ui8_b_DResB0_RD = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  6523  0A92  0022               	movlb	2	; select bank2
  6524  0A93  0830               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  6525  0A94  0020               	movlb	0	; select bank0
  6526  0A95  00C2               	movwf	??_EOL+1
  6527  0A96  0022               	movlb	2	; select bank2
  6528  0A97  082F               	movf	_ui16_fir_Bat_mittel^(0+256),w
  6529  0A98  0020               	movlb	0	; select bank0
  6530  0A99  00C1               	movwf	??_EOL
  6531  0A9A  36C2               	lsrf	??_EOL+1,f
  6532  0A9B  0CC1               	rrf	??_EOL,f
  6533  0A9C  36C2               	lsrf	??_EOL+1,f
  6534  0A9D  0CC1               	rrf	??_EOL,f
  6535  0A9E  0841               	movf	??_EOL,w
  6536  0A9F  0024               	movlb	4	; select bank4
  6537  0AA0  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  6538                           
  6539                           ;diag.c: 961: if ((ui8_b_DResB0_RD > ui8_given_supply - 3) && (ui8_b_DResB0_RD < ui8_giv
      +                          en_supply + 3) )
  6540  0AA1  0021               	movlb	1	; select bank1
  6541  0AA2  0866               	movf	_ui8_given_supply^(0+128),w
  6542  0AA3  3EFD               	addlw	253
  6543  0AA4  0020               	movlb	0	; select bank0
  6544  0AA5  00C1               	movwf	??_EOL
  6545  0AA6  30FF               	movlw	255
  6546  0AA7  1803               	skipnc
  6547  0AA8  3000               	movlw	0
  6548  0AA9  00C2               	movwf	??_EOL+1
  6549  0AAA  3A80               	xorlw	128
  6550  0AAB  00C3               	movwf	??_EOL+2
  6551  0AAC  3080               	movlw	128
  6552  0AAD  0243               	subwf	??_EOL+2,w
  6553  0AAE  1D03               	skipz
  6554  0AAF  2AB4               	goto	u11405
  6555  0AB0  0024               	movlb	4	; select bank4
  6556  0AB1  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  6557  0AB2  0020               	movlb	0	; select bank0
  6558  0AB3  0241               	subwf	??_EOL,w
  6559  0AB4                     u11405:	
  6560  0AB4  1803               	skipnc
  6561  0AB5  2AD2               	goto	l30865
  6562  0AB6  0021               	movlb	1	; select bank1
  6563  0AB7  0866               	movf	_ui8_given_supply^(0+128),w
  6564  0AB8  3E03               	addlw	3
  6565  0AB9  0020               	movlb	0	; select bank0
  6566  0ABA  00C1               	movwf	??_EOL
  6567  0ABB  3000               	movlw	0
  6568  0ABC  1803               	skipnc
  6569  0ABD  3001               	movlw	1
  6570  0ABE  00C2               	movwf	??_EOL+1
  6571  0ABF  3A80               	xorlw	128
  6572  0AC0  3C80               	sublw	128
  6573  0AC1  1D03               	skipz
  6574  0AC2  2AC6               	goto	u11415
  6575  0AC3  0841               	movf	??_EOL,w
  6576  0AC4  0024               	movlb	4	; select bank4
  6577  0AC5  0234               	subwf	EOL@ui8_b_DResB0_RD^(0+512),w
  6578  0AC6                     u11415:	
  6579  0AC6  1803               	skipnc
  6580  0AC7  2AD2               	goto	l30865
  6581                           
  6582                           ;diag.c: 965: {
  6583                           ;diag.c: 967: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
  6584                           ;diag.c: 968: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6585  0AC8  303A               	movlw	58
  6586  0AC9  0020               	movlb	0	; select bank0
  6587  0ACA  00B7               	movwf	?_Transmit_LIN_8Bytes
  6588  0ACB  2669  3189         	fcall	PL4	;call to abstracted procedure
  6589  0ACD  3010               	movlw	16
  6590  0ACE  01BA               	clrf	?_Transmit_LIN_8Bytes+3
  6591  0ACF  2710  3189         	fcall	PL42	;call to abstracted procedure
  6592  0AD1  2AD8               	goto	L4
  6593  0AD2                     l30865:	
  6594                           ;diag.c: 971: }
  6595                           
  6596                           
  6597                           ;diag.c: 974: else
  6598                           ;diag.c: 975: {
  6599                           ;diag.c: 977: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  6600  0AD2  307F               	movlw	127
  6601  0AD3  0020               	movlb	0	; select bank0
  6602  0AD4  00B7               	movwf	?_Transmit_LIN_8Bytes
  6603  0AD5  084F               	movf	_ui8_b_DResLocID_c,w
  6604  0AD6  26C2  3189         	fcall	PL11	;call to abstracted procedure
  6605  0AD8                     L4:	
  6606  0AD8  2730               	fcall	_Transmit_LIN_8Bytes
  6607                           
  6608                           ;diag.c: 987: }
  6609                           ;diag.c: 990: ui8_selected_lid = 0x95;
  6610  0AD9  3095               	movlw	149
  6611  0ADA  0020               	movlb	0	; select bank0
  6612  0ADB  00D4               	movwf	_ui8_selected_lid
  6613                           
  6614                           ;diag.c: 993: }
  6615  0ADC  0008               	return
  6616  0ADD                     l30869:	
  6617                           
  6618                           ;diag.c: 1022: {
  6619                           ;diag.c: 1024: if( 0x95 == ui8_selected_lid )
  6620  0ADD  0854               	movf	_ui8_selected_lid,w
  6621  0ADE  3A95               	xorlw	149
  6622  0ADF  1903               	btfsc	3,2
  6623  0AE0  2CAD               	goto	l31033
  6624  0AE1  2CBC               	goto	l31035
  6625  0AE2                     l30873:	
  6626                           
  6627                           ;diag.c: 1037: {
  6628                           ;diag.c: 1039: InitMotorStop( );
  6629  0AE2  3183  235E  3189   	fcall	_InitMotorStop
  6630                           
  6631                           ;diag.c: 1042: PEIE = 0;
  6632  0AE5  130B               	bcf	11,6
  6633                           
  6634                           ;diag.c: 1043: GIE = 0;
  6635  0AE6  138B               	bcf	11,7
  6636                           
  6637                           ;diag.c: 1044: CCP1CON = 0x00;
  6638  0AE7  0025               	movlb	5	; select bank5
  6639  0AE8  0193               	clrf	19	;volatile
  6640                           
  6641                           ;diag.c: 1050: LATB2 = 1;
  6642  0AE9  0022               	movlb	2	; select bank2
  6643  0AEA  3035               	movlw	53
  6644  0AEB  150D               	bsf	13,2
  6645                           
  6646                           ;diag.c: 1051: LATC3 = 1;
  6647  0AEC  158E               	bsf	14,3
  6648                           
  6649                           ;diag.c: 1054: LATC1 = 0;
  6650  0AED  108E               	bcf	14,1
  6651                           
  6652                           ;diag.c: 1055: LATC4 = 0;
  6653  0AEE  120E               	bcf	14,4
  6654                           
  6655                           ;diag.c: 1061: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  6656  0AEF  0021               	movlb	1	; select bank1
  6657  0AF0  009D               	movwf	29	;volatile
  6658  0AF1  0024               	movlb	4	; select bank4
  6659  0AF2  01A0               	clrf	EOL@_dcnt^(0+512)
  6660  0AF3  2AF6               	goto	l5880
  6661  0AF4                     l5881:	
  6662  0AF4  0000               	nop	;#
  6663  0AF5  0000               	nop	;#
  6664  0AF6                     l5880:	
  6665  0AF6  0024               	movlb	4	; select bank4
  6666  0AF7  0BA0               	decfsz	EOL@_dcnt^(0+512),f
  6667  0AF8  2AF4               	goto	l5881
  6668  0AF9  01A1               	clrf	EOL@_dcnt_7359^(0+512)
  6669  0AFA  2AFD               	goto	l5885
  6670  0AFB                     l5886:	
  6671  0AFB  0000               	nop	;#
  6672  0AFC  0000               	nop	;#
  6673  0AFD                     l5885:	
  6674  0AFD  0024               	movlb	4	; select bank4
  6675  0AFE  0BA1               	decfsz	EOL@_dcnt_7359^(0+512),f
  6676  0AFF  2AFB               	goto	l5886
  6677  0B00  01A2               	clrf	EOL@_dcnt_7360^(0+512)
  6678  0B01  2B04               	goto	l5890
  6679  0B02                     l5891:	
  6680  0B02  0000               	nop	;#
  6681  0B03  0000               	nop	;#
  6682  0B04                     l5890:	
  6683  0B04  0024               	movlb	4	; select bank4
  6684  0B05  0BA2               	decfsz	EOL@_dcnt_7360^(0+512),f
  6685  0B06  2B02               	goto	l5891
  6686  0B07  01A3               	clrf	EOL@_dcnt_7361^(0+512)
  6687  0B08  2B0B               	goto	l5895
  6688  0B09                     l5896:	
  6689  0B09  0000               	nop	;#
  6690  0B0A  0000               	nop	;#
  6691  0B0B                     l5895:	
  6692  0B0B  0024               	movlb	4	; select bank4
  6693  0B0C  0BA3               	decfsz	EOL@_dcnt_7361^(0+512),f
  6694  0B0D  2B09               	goto	l5896
  6695  0B0E  01A4               	clrf	EOL@_dcnt_7362^(0+512)
  6696  0B0F  2B12               	goto	l5900
  6697  0B10                     l5901:	
  6698  0B10  0000               	nop	;#
  6699  0B11  0000               	nop	;#
  6700  0B12                     l5900:	
  6701  0B12  0024               	movlb	4	; select bank4
  6702  0B13  0BA4               	decfsz	EOL@_dcnt_7362^(0+512),f
  6703  0B14  2B10               	goto	l5901
  6704  0B15  01A5               	clrf	EOL@_dcnt_7363^(0+512)
  6705  0B16  2B19               	goto	l5905
  6706  0B17                     l5906:	
  6707  0B17  0000               	nop	;#
  6708  0B18  0000               	nop	;#
  6709  0B19                     l5905:	
  6710  0B19  0024               	movlb	4	; select bank4
  6711  0B1A  0BA5               	decfsz	EOL@_dcnt_7363^(0+512),f
  6712  0B1B  2B17               	goto	l5906
  6713                           
  6714                           ;diag.c: 1069: ADC_Wait();
  6715  0B1C  3183  232D  3189   	fcall	_ADC_Wait
  6716                           
  6717                           ;diag.c: 1070: ( GO_nDONE = 1 );
  6718  0B1F  0021               	movlb	1	; select bank1
  6719  0B20  149D               	bsf	29,1
  6720                           
  6721                           ;diag.c: 1071: ui16_IPhase2_bldc_cal.w = ADC_Read() - ui8_current_cal[1];
  6722  0B21  3183  2346  3189   	fcall	_ADC_Read
  6723  0B24  082D               	movf	?_ADC_Read+1,w
  6724  0B25  0022               	movlb	2	; select bank2
  6725  0B26  00E4               	movwf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  6726  0B27  0020               	movlb	0	; select bank0
  6727  0B28  082C               	movf	?_ADC_Read,w
  6728  0B29  0022               	movlb	2	; select bank2
  6729  0B2A  00E3               	movwf	_ui16_IPhase2_bldc_cal^(0+256)
  6730  0B2B  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  6731  0B2C  02E3               	subwf	_ui16_IPhase2_bldc_cal^(0+256),f
  6732  0B2D  1C03               	skipc
  6733  0B2E  03E4               	decf	(_ui16_IPhase2_bldc_cal+1)^(0+256),f
  6734  0B2F  3009               	movlw	9
  6735                           
  6736                           ;diag.c: 1077: LATC2 = 1;
  6737  0B30  150E               	bsf	14,2
  6738                           
  6739                           ;diag.c: 1078: LATC1 = 1;
  6740  0B31  148E               	bsf	14,1
  6741                           
  6742                           ;diag.c: 1081: LATC3 = 0;
  6743  0B32  118E               	bcf	14,3
  6744  0B33  120E               	bcf	14,4
  6745                           
  6746                           ;diag.c: 1088: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  6747  0B34  0021               	movlb	1	; select bank1
  6748  0B35  009D               	movwf	29	;volatile
  6749  0B36  0024               	movlb	4	; select bank4
  6750  0B37  01A6               	clrf	EOL@_dcnt_7364^(0+512)
  6751  0B38  2B3B               	goto	l5910
  6752  0B39                     l5911:	
  6753  0B39  0000               	nop	;#
  6754  0B3A  0000               	nop	;#
  6755  0B3B                     l5910:	
  6756  0B3B  0024               	movlb	4	; select bank4
  6757  0B3C  0BA6               	decfsz	EOL@_dcnt_7364^(0+512),f
  6758  0B3D  2B39               	goto	l5911
  6759  0B3E  01A7               	clrf	EOL@_dcnt_7365^(0+512)
  6760  0B3F  2B42               	goto	l5915
  6761  0B40                     l5916:	
  6762  0B40  0000               	nop	;#
  6763  0B41  0000               	nop	;#
  6764  0B42                     l5915:	
  6765  0B42  0024               	movlb	4	; select bank4
  6766  0B43  0BA7               	decfsz	EOL@_dcnt_7365^(0+512),f
  6767  0B44  2B40               	goto	l5916
  6768  0B45  01A8               	clrf	EOL@_dcnt_7366^(0+512)
  6769  0B46  2B49               	goto	l5920
  6770  0B47                     l5921:	
  6771  0B47  0000               	nop	;#
  6772  0B48  0000               	nop	;#
  6773  0B49                     l5920:	
  6774  0B49  0024               	movlb	4	; select bank4
  6775  0B4A  0BA8               	decfsz	EOL@_dcnt_7366^(0+512),f
  6776  0B4B  2B47               	goto	l5921
  6777  0B4C  01A9               	clrf	EOL@_dcnt_7367^(0+512)
  6778  0B4D  2B50               	goto	l5925
  6779  0B4E                     l5926:	
  6780  0B4E  0000               	nop	;#
  6781  0B4F  0000               	nop	;#
  6782  0B50                     l5925:	
  6783  0B50  0024               	movlb	4	; select bank4
  6784  0B51  0BA9               	decfsz	EOL@_dcnt_7367^(0+512),f
  6785  0B52  2B4E               	goto	l5926
  6786  0B53  01AA               	clrf	EOL@_dcnt_7368^(0+512)
  6787  0B54  2B57               	goto	l5930
  6788  0B55                     l5931:	
  6789  0B55  0000               	nop	;#
  6790  0B56  0000               	nop	;#
  6791  0B57                     l5930:	
  6792  0B57  0024               	movlb	4	; select bank4
  6793  0B58  0BAA               	decfsz	EOL@_dcnt_7368^(0+512),f
  6794  0B59  2B55               	goto	l5931
  6795  0B5A  01AB               	clrf	EOL@_dcnt_7369^(0+512)
  6796  0B5B  2B5E               	goto	l5935
  6797  0B5C                     l5936:	
  6798  0B5C  0000               	nop	;#
  6799  0B5D  0000               	nop	;#
  6800  0B5E                     l5935:	
  6801  0B5E  0024               	movlb	4	; select bank4
  6802  0B5F  0BAB               	decfsz	EOL@_dcnt_7369^(0+512),f
  6803  0B60  2B5C               	goto	l5936
  6804                           
  6805                           ;diag.c: 1096: ADC_Wait();
  6806  0B61  3183  232D  3189   	fcall	_ADC_Wait
  6807                           
  6808                           ;diag.c: 1097: ( GO_nDONE = 1 );
  6809  0B64  0021               	movlb	1	; select bank1
  6810  0B65  149D               	bsf	29,1
  6811                           
  6812                           ;diag.c: 1098: ui16_IPhase1_bldc_cal.w = ADC_Read() - ui8_current_cal[0];
  6813  0B66  3183  2346  3189   	fcall	_ADC_Read
  6814  0B69  082D               	movf	?_ADC_Read+1,w
  6815  0B6A  0022               	movlb	2	; select bank2
  6816  0B6B  00E2               	movwf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  6817  0B6C  0020               	movlb	0	; select bank0
  6818  0B6D  082C               	movf	?_ADC_Read,w
  6819  0B6E  0022               	movlb	2	; select bank2
  6820  0B6F  00E1               	movwf	_ui16_IPhase1_bldc_cal^(0+256)
  6821  0B70  0820               	movf	_ui8_current_cal^(0+256),w
  6822  0B71  02E1               	subwf	_ui16_IPhase1_bldc_cal^(0+256),f
  6823  0B72  1C03               	skipc
  6824  0B73  03E2               	decf	(_ui16_IPhase1_bldc_cal+1)^(0+256),f
  6825  0B74  3011               	movlw	17
  6826                           
  6827                           ;diag.c: 1104: LATB1 = 1;
  6828  0B75  148D               	bsf	13,1
  6829                           
  6830                           ;diag.c: 1105: LATC4 = 1;
  6831  0B76  160E               	bsf	14,4
  6832                           
  6833                           ;diag.c: 1107: LATC1 = 0;
  6834  0B77  108E               	bcf	14,1
  6835  0B78  118E               	bcf	14,3
  6836                           
  6837                           ;diag.c: 1115: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  6838  0B79  0021               	movlb	1	; select bank1
  6839  0B7A  009D               	movwf	29	;volatile
  6840  0B7B  0024               	movlb	4	; select bank4
  6841  0B7C  01AC               	clrf	EOL@_dcnt_7370^(0+512)
  6842  0B7D  2B80               	goto	l5940
  6843  0B7E                     l5941:	
  6844  0B7E  0000               	nop	;#
  6845  0B7F  0000               	nop	;#
  6846  0B80                     l5940:	
  6847  0B80  0024               	movlb	4	; select bank4
  6848  0B81  0BAC               	decfsz	EOL@_dcnt_7370^(0+512),f
  6849  0B82  2B7E               	goto	l5941
  6850  0B83  01AD               	clrf	EOL@_dcnt_7371^(0+512)
  6851  0B84  2B87               	goto	l5945
  6852  0B85                     l5946:	
  6853  0B85  0000               	nop	;#
  6854  0B86  0000               	nop	;#
  6855  0B87                     l5945:	
  6856  0B87  0024               	movlb	4	; select bank4
  6857  0B88  0BAD               	decfsz	EOL@_dcnt_7371^(0+512),f
  6858  0B89  2B85               	goto	l5946
  6859  0B8A  01AE               	clrf	EOL@_dcnt_7372^(0+512)
  6860  0B8B  2B8E               	goto	l5950
  6861  0B8C                     l5951:	
  6862  0B8C  0000               	nop	;#
  6863  0B8D  0000               	nop	;#
  6864  0B8E                     l5950:	
  6865  0B8E  0024               	movlb	4	; select bank4
  6866  0B8F  0BAE               	decfsz	EOL@_dcnt_7372^(0+512),f
  6867  0B90  2B8C               	goto	l5951
  6868  0B91  01AF               	clrf	EOL@_dcnt_7373^(0+512)
  6869  0B92  2B95               	goto	l5955
  6870  0B93                     l5956:	
  6871  0B93  0000               	nop	;#
  6872  0B94  0000               	nop	;#
  6873  0B95                     l5955:	
  6874  0B95  0024               	movlb	4	; select bank4
  6875  0B96  0BAF               	decfsz	EOL@_dcnt_7373^(0+512),f
  6876  0B97  2B93               	goto	l5956
  6877  0B98  01B0               	clrf	EOL@_dcnt_7374^(0+512)
  6878  0B99  2B9C               	goto	l5960
  6879  0B9A                     l5961:	
  6880  0B9A  0000               	nop	;#
  6881  0B9B  0000               	nop	;#
  6882  0B9C                     l5960:	
  6883  0B9C  0024               	movlb	4	; select bank4
  6884  0B9D  0BB0               	decfsz	EOL@_dcnt_7374^(0+512),f
  6885  0B9E  2B9A               	goto	l5961
  6886  0B9F  01B1               	clrf	EOL@_dcnt_7375^(0+512)
  6887  0BA0  2BA3               	goto	l5965
  6888  0BA1                     l5966:	
  6889  0BA1  0000               	nop	;#
  6890  0BA2  0000               	nop	;#
  6891  0BA3                     l5965:	
  6892  0BA3  0024               	movlb	4	; select bank4
  6893  0BA4  0BB1               	decfsz	EOL@_dcnt_7375^(0+512),f
  6894  0BA5  2BA1               	goto	l5966
  6895                           
  6896                           ;diag.c: 1123: ADC_Wait();
  6897  0BA6  3183  232D  3189   	fcall	_ADC_Wait
  6898                           
  6899                           ;diag.c: 1124: ( GO_nDONE = 1 );
  6900  0BA9  0021               	movlb	1	; select bank1
  6901  0BAA  149D               	bsf	29,1
  6902                           
  6903                           ;diag.c: 1125: ui16_IPhase3_bldc_cal.w = ADC_Read() - ui8_current_cal[2];
  6904  0BAB  3183  2346         	fcall	_ADC_Read
  6905  0BAD  082D               	movf	?_ADC_Read+1,w
  6906  0BAE  0022               	movlb	2	; select bank2
  6907  0BAF  00E6               	movwf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  6908  0BB0  0020               	movlb	0	; select bank0
  6909  0BB1  082C               	movf	?_ADC_Read,w
  6910  0BB2  0022               	movlb	2	; select bank2
  6911  0BB3  00E5               	movwf	_ui16_IPhase3_bldc_cal^(0+256)
  6912  0BB4  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  6913  0BB5  02E5               	subwf	_ui16_IPhase3_bldc_cal^(0+256),f
  6914  0BB6  1C03               	skipc
  6915  0BB7  03E6               	decf	(_ui16_IPhase3_bldc_cal+1)^(0+256),f
  6916                           
  6917                           ;diag.c: 1128: LATC = LATC & 0b11100101;
  6918  0BB8  30E5               	movlw	229
  6919  0BB9  058E               	andwf	14,f	;volatile
  6920                           
  6921                           ;diag.c: 1131: CCP1CON = 0x0c;
  6922  0BBA  300C               	movlw	12
  6923  0BBB  0025               	movlb	5	; select bank5
  6924  0BBC  0093               	movwf	19	;volatile
  6925                           
  6926                           ;diag.c: 1132: PEIE = 1;
  6927  0BBD  170B               	bsf	11,6
  6928                           
  6929                           ;diag.c: 1133: GIE = 1;
  6930  0BBE  178B               	bsf	11,7
  6931                           
  6932                           ;diag.c: 1136: phaseCal = 1;
  6933  0BBF  0021               	movlb	1	; select bank1
  6934  0BC0  01DA               	clrf	_phaseCal^(0+128)
  6935  0BC1  0ADA               	incf	_phaseCal^(0+128),f
  6936                           
  6937                           ;diag.c: 1139: break;
  6938  0BC2  0008               	return
  6939  0BC3                     l30971:	
  6940                           
  6941                           ;diag.c: 1146: {
  6942                           ;diag.c: 1151: write_eeprom_data( 0x02, ( unsigned char )( ( 0x7800 / ui16_IPhase1_bldc_
      +                          cal.w )>>8 ) );
  6943  0BC3  26D2               	fcall	PL20	;call to abstracted procedure
  6944  0BC4  319B  232C  3189   	fcall	___lwdiv
  6945  0BC7  082D               	movf	?___lwdiv+1,w
  6946  0BC8  00B3               	movwf	?_write_eeprom_data
  6947  0BC9  3002               	movlw	2
  6948  0BCA  319A  2292  3189   	fcall	_write_eeprom_data
  6949                           
  6950                           ;diag.c: 1152: write_eeprom_data( 0x03, ( unsigned char )( 0x7800 / ui16_IPhase1_bldc_ca
      +                          l.w ) );
  6951  0BCD  26D2               	fcall	PL20	;call to abstracted procedure
  6952  0BCE  319B  232C  3189   	fcall	___lwdiv
  6953  0BD1  082C               	movf	?___lwdiv,w
  6954  0BD2  00B3               	movwf	?_write_eeprom_data
  6955  0BD3  3003               	movlw	3
  6956  0BD4  319A  2292  3189   	fcall	_write_eeprom_data
  6957                           
  6958                           ;diag.c: 1155: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03
      +                           );
  6959  0BD7  3003               	movlw	3
  6960  0BD8  3183  2322  3189   	fcall	_read_eeprom_data
  6961  0BDB  00C1               	movwf	??_EOL
  6962  0BDC  3002               	movlw	2
  6963  0BDD  3183  2322  3189   	fcall	_read_eeprom_data
  6964  0BE0  0021               	movlb	1	; select bank1
  6965  0BE1  00E9               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  6966  0BE2  0020               	movlb	0	; select bank0
  6967  0BE3  0841               	movf	??_EOL,w
  6968  0BE4  0021               	movlb	1	; select bank1
  6969  0BE5  00E8               	movwf	_ui16_I_cal_Ph1^(0+128)
  6970                           
  6971                           ;diag.c: 1167: ui8_b_DResB0_RD = phaseCal;
  6972  0BE6  085A               	movf	_phaseCal^(0+128),w
  6973  0BE7  0024               	movlb	4	; select bank4
  6974  0BE8  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  6975                           
  6976                           ;diag.c: 1169: ui8_b_DResB2_RD = ( unsigned char )( ( ui16_IPhase1_bldc_cal.w * ui16_I_c
      +                          al_Ph1 )>>8 );
  6977  0BE9  0022               	movlb	2	; select bank2
  6978  0BEA  0862               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
  6979  0BEB  0020               	movlb	0	; select bank0
  6980  0BEC  00AD               	movwf	?___wmul+1
  6981  0BED  0022               	movlb	2	; select bank2
  6982  0BEE  0861               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
  6983  0BEF  0020               	movlb	0	; select bank0
  6984  0BF0  00AC               	movwf	?___wmul
  6985  0BF1  0021               	movlb	1	; select bank1
  6986  0BF2  0869               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
  6987  0BF3  0020               	movlb	0	; select bank0
  6988  0BF4  00AF               	movwf	?___wmul+3
  6989  0BF5  0021               	movlb	1	; select bank1
  6990  0BF6  0868               	movf	_ui16_I_cal_Ph1^(0+128),w
  6991  0BF7  0020               	movlb	0	; select bank0
  6992  0BF8  00AE               	movwf	?___wmul+2
  6993  0BF9  3183  238D  3189   	fcall	___wmul
  6994  0BFC  082D               	movf	?___wmul+1,w
  6995  0BFD  0024               	movlb	4	; select bank4
  6996  0BFE  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  6997                           
  6998                           ;diag.c: 1170: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph1 >> 8);
  6999  0BFF  0021               	movlb	1	; select bank1
  7000  0C00  0869               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
  7001  0C01  0024               	movlb	4	; select bank4
  7002  0C02  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7003                           
  7004                           ;diag.c: 1171: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph1 );
  7005  0C03  0021               	movlb	1	; select bank1
  7006  0C04  0868               	movf	_ui16_I_cal_Ph1^(0+128),w
  7007                           
  7008                           ;diag.c: 1177: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7009                           ;diag.c: 1178: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7010                           ;diag.c: 1179: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7011                           ;diag.c: 1180: ui8_b_DResB5_RD );
  7012  0C05  2670  3189         	fcall	PL5	;call to abstracted procedure
  7013  0C07  2652  3189         	fcall	PL3	;call to abstracted procedure
  7014  0C09  2730               	fcall	_Transmit_LIN_8Bytes
  7015                           
  7016                           ;diag.c: 1182: phaseCal = 2;
  7017  0C0A  3002               	movlw	2
  7018  0C0B  00DA               	movwf	_phaseCal^(0+128)
  7019                           
  7020                           ;diag.c: 1184: break;
  7021  0C0C  0008               	return
  7022  0C0D                     l30991:	
  7023                           
  7024                           ;diag.c: 1191: {
  7025                           ;diag.c: 1195: write_eeprom_data( 0x04, ( unsigned char )( ( 0x7800 / ui16_IPhase2_bldc_
      +                          cal.w )>>8 ) );
  7026  0C0D  26EB  3189         	fcall	PL23	;call to abstracted procedure
  7027  0C0F  26DE               	fcall	PL21	;call to abstracted procedure
  7028  0C10  319B  232C  3189   	fcall	___lwdiv
  7029  0C13  082D               	movf	?___lwdiv+1,w
  7030  0C14  00B3               	movwf	?_write_eeprom_data
  7031  0C15  3004               	movlw	4
  7032  0C16  319A  2292  3189   	fcall	_write_eeprom_data
  7033                           
  7034                           ;diag.c: 1196: write_eeprom_data( 0x05, ( unsigned char )( 0x7800 / ui16_IPhase2_bldc_ca
      +                          l.w ) );
  7035  0C19  26EB  3189         	fcall	PL23	;call to abstracted procedure
  7036  0C1B  26DE               	fcall	PL21	;call to abstracted procedure
  7037  0C1C  319B  232C  3189   	fcall	___lwdiv
  7038  0C1F  082C               	movf	?___lwdiv,w
  7039  0C20  00B3               	movwf	?_write_eeprom_data
  7040  0C21  3005               	movlw	5
  7041  0C22  319A  2292  3189   	fcall	_write_eeprom_data
  7042                           
  7043                           ;diag.c: 1199: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05
      +                           );
  7044  0C25  3005               	movlw	5
  7045  0C26  3183  2322  3189   	fcall	_read_eeprom_data
  7046  0C29  00C1               	movwf	??_EOL
  7047  0C2A  3004               	movlw	4
  7048  0C2B  3183  2322  3189   	fcall	_read_eeprom_data
  7049  0C2E  0021               	movlb	1	; select bank1
  7050  0C2F  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  7051  0C30  0020               	movlb	0	; select bank0
  7052  0C31  0841               	movf	??_EOL,w
  7053  0C32  0021               	movlb	1	; select bank1
  7054  0C33  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
  7055                           
  7056                           ;diag.c: 1211: ui8_b_DResB0_RD = phaseCal;
  7057  0C34  085A               	movf	_phaseCal^(0+128),w
  7058  0C35  0024               	movlb	4	; select bank4
  7059  0C36  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7060                           
  7061                           ;diag.c: 1213: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 ) );
  7062  0C37  0022               	movlb	2	; select bank2
  7063  0C38  0864               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
  7064  0C39  0020               	movlb	0	; select bank0
  7065  0C3A  00AD               	movwf	?___wmul+1
  7066  0C3B  0022               	movlb	2	; select bank2
  7067  0C3C  0863               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
  7068  0C3D  0020               	movlb	0	; select bank0
  7069  0C3E  00AC               	movwf	?___wmul
  7070  0C3F  0021               	movlb	1	; select bank1
  7071  0C40  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
  7072  0C41  0020               	movlb	0	; select bank0
  7073  0C42  00AF               	movwf	?___wmul+3
  7074  0C43  0021               	movlb	1	; select bank1
  7075  0C44  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
  7076  0C45  0020               	movlb	0	; select bank0
  7077  0C46  00AE               	movwf	?___wmul+2
  7078  0C47  3183  238D  3189   	fcall	___wmul
  7079  0C4A  082D               	movf	?___wmul+1,w
  7080  0C4B  0024               	movlb	4	; select bank4
  7081  0C4C  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  7082                           
  7083                           ;diag.c: 1214: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph2>>8 );
  7084  0C4D  0021               	movlb	1	; select bank1
  7085  0C4E  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
  7086  0C4F  0024               	movlb	4	; select bank4
  7087  0C50  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7088                           
  7089                           ;diag.c: 1215: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph2 );
  7090  0C51  0021               	movlb	1	; select bank1
  7091  0C52  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
  7092                           
  7093                           ;diag.c: 1221: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7094                           ;diag.c: 1222: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7095                           ;diag.c: 1223: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7096                           ;diag.c: 1224: ui8_b_DResB5_RD );
  7097  0C53  2670  3189         	fcall	PL5	;call to abstracted procedure
  7098  0C55  2652  3189         	fcall	PL3	;call to abstracted procedure
  7099  0C57  2730               	fcall	_Transmit_LIN_8Bytes
  7100                           
  7101                           ;diag.c: 1227: phaseCal = 3;
  7102  0C58  3003               	movlw	3
  7103  0C59  00DA               	movwf	_phaseCal^(0+128)
  7104                           
  7105                           ;diag.c: 1229: break;
  7106  0C5A  0008               	return
  7107  0C5B                     l31011:	
  7108                           
  7109                           ;diag.c: 1236: {
  7110                           ;diag.c: 1240: write_eeprom_data( 0x06, ( unsigned char )( ( 0x7800 / ui16_IPhase3_bldc_
      +                          cal.w )>>8 ) );
  7111  0C5B  26E4  3189         	fcall	PL22	;call to abstracted procedure
  7112  0C5D  26DE               	fcall	PL21	;call to abstracted procedure
  7113  0C5E  319B  232C  3189   	fcall	___lwdiv
  7114  0C61  082D               	movf	?___lwdiv+1,w
  7115  0C62  00B3               	movwf	?_write_eeprom_data
  7116  0C63  3006               	movlw	6
  7117  0C64  319A  2292  3189   	fcall	_write_eeprom_data
  7118                           
  7119                           ;diag.c: 1241: write_eeprom_data( 0x07, ( unsigned char )( 0x7800 / ui16_IPhase3_bldc_ca
      +                          l.w ) );
  7120  0C67  26E4  3189         	fcall	PL22	;call to abstracted procedure
  7121  0C69  26DE               	fcall	PL21	;call to abstracted procedure
  7122  0C6A  319B  232C  3189   	fcall	___lwdiv
  7123  0C6D  082C               	movf	?___lwdiv,w
  7124  0C6E  00B3               	movwf	?_write_eeprom_data
  7125  0C6F  3007               	movlw	7
  7126  0C70  319A  2292  3189   	fcall	_write_eeprom_data
  7127                           
  7128                           ;diag.c: 1245: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07
      +                           );
  7129  0C73  3007               	movlw	7
  7130  0C74  3183  2322  3189   	fcall	_read_eeprom_data
  7131  0C77  00C1               	movwf	??_EOL
  7132  0C78  3006               	movlw	6
  7133  0C79  3183  2322  3189   	fcall	_read_eeprom_data
  7134  0C7C  0021               	movlb	1	; select bank1
  7135  0C7D  00ED               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  7136  0C7E  0020               	movlb	0	; select bank0
  7137  0C7F  0841               	movf	??_EOL,w
  7138  0C80  0021               	movlb	1	; select bank1
  7139  0C81  00EC               	movwf	_ui16_I_cal_Ph3^(0+128)
  7140                           
  7141                           ;diag.c: 1258: ui8_b_DResB0_RD = phaseCal;
  7142  0C82  085A               	movf	_phaseCal^(0+128),w
  7143  0C83  0024               	movlb	4	; select bank4
  7144  0C84  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7145                           
  7146                           ;diag.c: 1260: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 ) );
  7147  0C85  0022               	movlb	2	; select bank2
  7148  0C86  0866               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
  7149  0C87  0020               	movlb	0	; select bank0
  7150  0C88  00AD               	movwf	?___wmul+1
  7151  0C89  0022               	movlb	2	; select bank2
  7152  0C8A  0865               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
  7153  0C8B  0020               	movlb	0	; select bank0
  7154  0C8C  00AC               	movwf	?___wmul
  7155  0C8D  0021               	movlb	1	; select bank1
  7156  0C8E  086D               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
  7157  0C8F  0020               	movlb	0	; select bank0
  7158  0C90  00AF               	movwf	?___wmul+3
  7159  0C91  0021               	movlb	1	; select bank1
  7160  0C92  086C               	movf	_ui16_I_cal_Ph3^(0+128),w
  7161  0C93  0020               	movlb	0	; select bank0
  7162  0C94  00AE               	movwf	?___wmul+2
  7163  0C95  3183  238D  3189   	fcall	___wmul
  7164  0C98  082D               	movf	?___wmul+1,w
  7165  0C99  0024               	movlb	4	; select bank4
  7166  0C9A  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  7167                           
  7168                           ;diag.c: 1261: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph3>>8 );
  7169  0C9B  0021               	movlb	1	; select bank1
  7170  0C9C  086D               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
  7171  0C9D  0024               	movlb	4	; select bank4
  7172  0C9E  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7173                           
  7174                           ;diag.c: 1262: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph3 );
  7175  0C9F  0021               	movlb	1	; select bank1
  7176  0CA0  086C               	movf	_ui16_I_cal_Ph3^(0+128),w
  7177                           
  7178                           ;diag.c: 1267: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7179                           ;diag.c: 1268: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7180                           ;diag.c: 1269: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7181                           ;diag.c: 1270: ui8_b_DResB5_RD );
  7182  0CA1  2670  3189         	fcall	PL5	;call to abstracted procedure
  7183  0CA3  2652  3189         	fcall	PL3	;call to abstracted procedure
  7184  0CA5  2730               	fcall	_Transmit_LIN_8Bytes
  7185                           
  7186                           ;diag.c: 1271: ui8_selected_lid = 0x98;
  7187  0CA6  3098               	movlw	152
  7188  0CA7  0020               	movlb	0	; select bank0
  7189  0CA8  00D4               	movwf	_ui8_selected_lid
  7190                           
  7191                           ;diag.c: 1274: break;
  7192  0CA9  0008               	return
  7193  0CAA                     l31031:	
  7194                           
  7195                           ;diag.c: 1281: {
  7196                           ;diag.c: 1283: NegativeAnswer(ui8_b_DResLocID_c);
  7197  0CAA  0020               	movlb	0	; select bank0
  7198  0CAB  084F               	movf	_ui8_b_DResLocID_c,w
  7199  0CAC  2F20               	ljmp	_NegativeAnswer
  7200  0CAD                     l31033:	
  7201                           ;diag.c: 1285: }
  7202                           ;diag.c: 1287: }
  7203                           
  7204  0CAD  0021               	movlb	1	; select bank1
  7205  0CAE  085A               	movf	_phaseCal^(0+128),w
  7206                           
  7207                           ; Switch size 1, requested type "space"
  7208                           ; Number of cases is 4, Range of values is 0 to 3
  7209                           ; switch strategies available:
  7210                           ; Name         Instructions Cycles
  7211                           ; simple_byte           13     7 (average)
  7212                           ; direct_byte           14     6 (fixed)
  7213                           ; jumptable            260     6 (fixed)
  7214                           ; rangetable             8     4 (fixed)
  7215                           ; spacedrange           13     6 (fixed)
  7216                           ; locatedrange           4     3 (fixed)
  7217                           ;	Chosen strategy is simple_byte
  7218  0CAF  3A00               	xorlw	0	; case 0
  7219  0CB0  1903               	skipnz
  7220  0CB1  2AE2               	goto	l30873
  7221  0CB2  3A01               	xorlw	1	; case 1
  7222  0CB3  1903               	skipnz
  7223  0CB4  2BC3               	goto	l30971
  7224  0CB5  3A03               	xorlw	3	; case 2
  7225  0CB6  1903               	skipnz
  7226  0CB7  2C0D               	goto	l30991
  7227  0CB8  3A01               	xorlw	1	; case 3
  7228  0CB9  1903               	skipnz
  7229  0CBA  2C5B               	goto	l31011
  7230  0CBB  2CAA               	goto	l31031
  7231  0CBC                     l31035:	
  7232                           
  7233                           ;diag.c: 1293: else
  7234                           ;diag.c: 1294: {
  7235                           ;diag.c: 1296: NegativeAnswer(ui8_b_DResLocID_c);
  7236  0CBC  084F               	movf	_ui8_b_DResLocID_c,w
  7237  0CBD  2F20               	ljmp	_NegativeAnswer
  7238  0CBE                     l31037:	
  7239                           
  7240                           ;diag.c: 1311: {
  7241                           ;diag.c: 1313: if( 0x98 == ui8_selected_lid )
  7242  0CBE  0854               	movf	_ui8_selected_lid,w
  7243  0CBF  3A98               	xorlw	152
  7244  0CC0  1D03               	skipz
  7245  0CC1  0008               	return
  7246                           
  7247                           ;diag.c: 1315: {
  7248                           ;diag.c: 1328: wkpoint = ui8_b_DResB0_c;
  7249  0CC2  084E               	movf	_ui8_b_DResB0_c,w
  7250  0CC3  0021               	movlb	1	; select bank1
  7251  0CC4  00EE               	movwf	_wkpoint^(0+128)
  7252                           
  7253                           ;diag.c: 1953: break;
  7254                           
  7255                           ;diag.c: 1334: switch( ui8_b_DResB0_c )
  7256  0CC5  0020               	movlb	0	; select bank0
  7257  0CC6  084E               	movf	_ui8_b_DResB0_c,w
  7258                           
  7259                           ; Switch size 1, requested type "space"
  7260                           ; Number of cases is 4, Range of values is 1 to 5
  7261                           ; switch strategies available:
  7262                           ; Name         Instructions Cycles
  7263                           ; simple_byte           13     7 (average)
  7264                           ; direct_byte           19     9 (fixed)
  7265                           ; jumptable            263     9 (fixed)
  7266                           ;	Chosen strategy is simple_byte
  7267  0CC7  3A01               	xorlw	1	; case 1
  7268  0CC8  1903               	skipnz
  7269  0CC9  2CD4               	goto	l31041
  7270  0CCA  3A02               	xorlw	2	; case 3
  7271  0CCB  1903               	skipnz
  7272  0CCC  2CF9               	goto	l31063
  7273  0CCD  3A07               	xorlw	7	; case 4
  7274  0CCE  1903               	skipnz
  7275  0CCF  2D1E               	goto	l31085
  7276  0CD0  3A01               	xorlw	1	; case 5
  7277  0CD1  1903               	skipnz
  7278  0CD2  2D43               	goto	l31107
  7279  0CD3  2D68               	goto	l31129
  7280  0CD4                     l31041:	
  7281                           
  7282                           ;diag.c: 1342: {
  7283                           ;diag.c: 1344: if( wkpoint == ui8_b_DResB0_c )
  7284  0CD4  270B  3189         	fcall	PL39	;call to abstracted procedure
  7285  0CD6  1D03               	skipz
  7286  0CD7  0008               	return
  7287                           
  7288                           ;diag.c: 1346: {
  7289                           ;diag.c: 1348: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7290  0CD8  084E               	movf	_ui8_b_DResB0_c,w
  7291  0CD9  0024               	movlb	4	; select bank4
  7292  0CDA  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7293                           
  7294                           ;diag.c: 1349: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7295  0CDB  3186  2634  3189   	fcall	_PWMReadDC
  7296                           
  7297                           ;diag.c: 1350: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7298  0CDE  26A5               	fcall	PL9	;call to abstracted procedure
  7299  0CDF  3183  238D  3189   	fcall	___wmul
  7300                           
  7301                           ;diag.c: 1351: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7302  0CE2  26B4               	fcall	PL10	;call to abstracted procedure
  7303  0CE3  3180               	movlp	high __stringtab
  7304  0CE4  000A               	callw
  7305  0CE5  3189               	pagesel	$
  7306                           
  7307                           ;diag.c: 1356: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7308  0CE6  2687  3189         	fcall	PL7	;call to abstracted procedure
  7309  0CE8  1803               	skipnc
  7310  0CE9  2CF6               	goto	l31061
  7311  0CEA  0024               	movlb	4	; select bank4
  7312  0CEB  2674  3189         	fcall	PL6	;call to abstracted procedure
  7313  0CED  1803               	skipnc
  7314  0CEE  2CF6               	goto	l31061
  7315                           
  7316                           ;diag.c: 1358: {
  7317                           ;diag.c: 1360: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  7318  0CEF  303A               	movlw	58
  7319  0CF0  263D  3189         	fcall	PL2	;call to abstracted procedure
  7320  0CF2  3010               	movlw	16
  7321  0CF3  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  7322  0CF4  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  7323  0CF5  2F30               	ljmp	_Transmit_LIN_8Bytes
  7324  0CF6                     l31061:	
  7325                           ;diag.c: 1363: }
  7326                           
  7327                           
  7328                           ;diag.c: 1366: else
  7329                           ;diag.c: 1367: {
  7330                           ;diag.c: 1369: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7331  0CF6  2697  3189         	fcall	PL8	;call to abstracted procedure
  7332  0CF8  2F30               	ljmp	_Transmit_LIN_8Bytes
  7333  0CF9                     l31063:	
  7334                           
  7335                           ;diag.c: 1519: {
  7336                           ;diag.c: 1521: if( wkpoint == ui8_b_DResB0_c )
  7337  0CF9  270B  3189         	fcall	PL39	;call to abstracted procedure
  7338  0CFB  1D03               	skipz
  7339  0CFC  0008               	return
  7340                           
  7341                           ;diag.c: 1523: {
  7342                           ;diag.c: 1525: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7343  0CFD  084E               	movf	_ui8_b_DResB0_c,w
  7344  0CFE  0024               	movlb	4	; select bank4
  7345  0CFF  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7346                           
  7347                           ;diag.c: 1526: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7348  0D00  3186  2634  3189   	fcall	_PWMReadDC
  7349                           
  7350                           ;diag.c: 1527: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7351  0D03  26A5               	fcall	PL9	;call to abstracted procedure
  7352  0D04  3183  238D  3189   	fcall	___wmul
  7353                           
  7354                           ;diag.c: 1528: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7355  0D07  26B4               	fcall	PL10	;call to abstracted procedure
  7356  0D08  3180               	movlp	high __stringtab
  7357  0D09  000A               	callw
  7358  0D0A  3189               	pagesel	$
  7359                           
  7360                           ;diag.c: 1534: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7361  0D0B  2687  3189         	fcall	PL7	;call to abstracted procedure
  7362  0D0D  1803               	skipnc
  7363  0D0E  2D1B               	goto	l31083
  7364  0D0F  0024               	movlb	4	; select bank4
  7365  0D10  2674  3189         	fcall	PL6	;call to abstracted procedure
  7366  0D12  1803               	skipnc
  7367  0D13  2D1B               	goto	l31083
  7368                           
  7369                           ;diag.c: 1536: {
  7370                           ;diag.c: 1538: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  7371                           ;diag.c: 1539: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  7372                           ;diag.c: 1540: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  7373                           ;diag.c: 1541: ui8_b_DResB4_RD,
  7374                           ;diag.c: 1542: ui8_b_DResB5_RD );
  7375  0D14  303A               	movlw	58
  7376  0D15  263D  3189         	fcall	PL2	;call to abstracted procedure
  7377  0D17  3010               	movlw	16
  7378  0D18  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  7379  0D19  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  7380  0D1A  2F30               	ljmp	_Transmit_LIN_8Bytes
  7381  0D1B                     l31083:	
  7382                           ;diag.c: 1545: }
  7383                           
  7384                           
  7385                           ;diag.c: 1548: else
  7386                           ;diag.c: 1549: {
  7387                           ;diag.c: 1551: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7388  0D1B  2697  3189         	fcall	PL8	;call to abstracted procedure
  7389  0D1D  2F30               	ljmp	_Transmit_LIN_8Bytes
  7390  0D1E                     l31085:	
  7391                           
  7392                           ;diag.c: 1607: {
  7393                           ;diag.c: 1609: if( wkpoint == ui8_b_DResB0_c )
  7394  0D1E  270B  3189         	fcall	PL39	;call to abstracted procedure
  7395  0D20  1D03               	skipz
  7396  0D21  0008               	return
  7397                           
  7398                           ;diag.c: 1611: {
  7399                           ;diag.c: 1613: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7400  0D22  084E               	movf	_ui8_b_DResB0_c,w
  7401  0D23  0024               	movlb	4	; select bank4
  7402  0D24  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7403                           
  7404                           ;diag.c: 1614: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7405  0D25  3186  2634  3189   	fcall	_PWMReadDC
  7406                           
  7407                           ;diag.c: 1615: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7408  0D28  26A5               	fcall	PL9	;call to abstracted procedure
  7409  0D29  3183  238D  3189   	fcall	___wmul
  7410                           
  7411                           ;diag.c: 1616: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7412  0D2C  26B4               	fcall	PL10	;call to abstracted procedure
  7413  0D2D  3180               	movlp	high __stringtab
  7414  0D2E  000A               	callw
  7415  0D2F  3189               	pagesel	$
  7416                           
  7417                           ;diag.c: 1622: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7418  0D30  2687  3189         	fcall	PL7	;call to abstracted procedure
  7419  0D32  1803               	skipnc
  7420  0D33  2D40               	goto	l31105
  7421  0D34  0024               	movlb	4	; select bank4
  7422  0D35  2674  3189         	fcall	PL6	;call to abstracted procedure
  7423  0D37  1803               	skipnc
  7424  0D38  2D40               	goto	l31105
  7425                           
  7426                           ;diag.c: 1624: {
  7427                           ;diag.c: 1626: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  7428                           ;diag.c: 1627: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  7429                           ;diag.c: 1628: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  7430                           ;diag.c: 1629: ui8_b_DResB4_RD,
  7431                           ;diag.c: 1630: ui8_b_DResB5_RD );
  7432  0D39  303A               	movlw	58
  7433  0D3A  263D  3189         	fcall	PL2	;call to abstracted procedure
  7434  0D3C  3010               	movlw	16
  7435  0D3D  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  7436  0D3E  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  7437  0D3F  2F30               	ljmp	_Transmit_LIN_8Bytes
  7438  0D40                     l31105:	
  7439                           ;diag.c: 1633: }
  7440                           
  7441                           
  7442                           ;diag.c: 1636: else
  7443                           ;diag.c: 1637: {
  7444                           ;diag.c: 1639: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7445  0D40  2697  3189         	fcall	PL8	;call to abstracted procedure
  7446  0D42  2F30               	ljmp	_Transmit_LIN_8Bytes
  7447  0D43                     l31107:	
  7448                           
  7449                           ;diag.c: 1693: {
  7450                           ;diag.c: 1695: if( wkpoint == ui8_b_DResB0_c )
  7451  0D43  270B  3189         	fcall	PL39	;call to abstracted procedure
  7452  0D45  1D03               	skipz
  7453  0D46  0008               	return
  7454                           
  7455                           ;diag.c: 1697: {
  7456                           ;diag.c: 1699: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7457  0D47  084E               	movf	_ui8_b_DResB0_c,w
  7458  0D48  0024               	movlb	4	; select bank4
  7459  0D49  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7460                           
  7461                           ;diag.c: 1700: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7462  0D4A  3186  2634  3189   	fcall	_PWMReadDC
  7463                           
  7464                           ;diag.c: 1701: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7465  0D4D  26A5               	fcall	PL9	;call to abstracted procedure
  7466  0D4E  3183  238D  3189   	fcall	___wmul
  7467                           
  7468                           ;diag.c: 1702: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7469  0D51  26B4               	fcall	PL10	;call to abstracted procedure
  7470  0D52  3180               	movlp	high __stringtab
  7471  0D53  000A               	callw
  7472  0D54  3189               	pagesel	$
  7473                           
  7474                           ;diag.c: 1707: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7475  0D55  2687  3189         	fcall	PL7	;call to abstracted procedure
  7476  0D57  1803               	skipnc
  7477  0D58  2D65               	goto	l31127
  7478  0D59  0024               	movlb	4	; select bank4
  7479  0D5A  2674  3189         	fcall	PL6	;call to abstracted procedure
  7480  0D5C  1803               	skipnc
  7481  0D5D  2D65               	goto	l31127
  7482                           
  7483                           ;diag.c: 1709: {
  7484                           ;diag.c: 1711: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  7485                           ;diag.c: 1712: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  7486                           ;diag.c: 1713: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  7487                           ;diag.c: 1714: ui8_b_DResB4_RD,
  7488                           ;diag.c: 1715: ui8_b_DResB5_RD );
  7489  0D5E  303A               	movlw	58
  7490  0D5F  263D  3189         	fcall	PL2	;call to abstracted procedure
  7491  0D61  3010               	movlw	16
  7492  0D62  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  7493  0D63  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  7494  0D64  2F30               	ljmp	_Transmit_LIN_8Bytes
  7495  0D65                     l31127:	
  7496                           ;diag.c: 1718: }
  7497                           
  7498                           
  7499                           ;diag.c: 1721: else
  7500                           ;diag.c: 1722: {
  7501                           ;diag.c: 1724: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7502  0D65  2697  3189         	fcall	PL8	;call to abstracted procedure
  7503  0D67  2F30               	ljmp	_Transmit_LIN_8Bytes
  7504  0D68                     l31129:	
  7505                           
  7506                           ;diag.c: 1948: {
  7507                           ;diag.c: 1952: NegativeAnswer(ui8_b_DResLocID_c);
  7508  0D68  084F               	movf	_ui8_b_DResLocID_c,w
  7509  0D69  2F20               	ljmp	_NegativeAnswer
  7510  0D6A                     l31135:	
  7511                           
  7512                           ;diag.c: 1992: {
  7513                           ;diag.c: 1994: if( 0x9f == ui8_selected_lid )
  7514  0D6A  0854               	movf	_ui8_selected_lid,w
  7515  0D6B  3A9F               	xorlw	159
  7516  0D6C  1D03               	skipz
  7517  0D6D  0008               	return
  7518                           
  7519                           ;diag.c: 1996: {
  7520                           ;diag.c: 2000: ui8_failure = ui8_b_DResB0_c;
  7521  0D6E  084E               	movf	_ui8_b_DResB0_c,w
  7522  0D6F  0022               	movlb	2	; select bank2
  7523  0D70  00EE               	movwf	_ui8_failure^(0+256)
  7524                           
  7525                           ;diag.c: 2005: switch (ui8_failure)
  7526  0D71  2DA2               	goto	l31207
  7527  0D72                     l31139:	
  7528                           
  7529                           ;diag.c: 2098: {
  7530                           ;diag.c: 2102: PWM_Write_Out( 55 );
  7531  0D72  3037               	movlw	55
  7532  0D73  3186  262F  3189   	fcall	_PWM_Write_Out
  7533                           
  7534                           ;diag.c: 2103: ui8_error_Flags.bits.B0 = 0;
  7535  0D76  0021               	movlb	1	; select bank1
  7536  0D77  3037               	movlw	55
  7537  0D78  1065               	bcf	_ui8_error_Flags^(0+128),0
  7538                           
  7539                           ;diag.c: 2104: ui8_error_Flags.bits.B1 = 0;
  7540  0D79  10E5               	bcf	_ui8_error_Flags^(0+128),1
  7541                           
  7542                           ;diag.c: 2105: ui8_error_Flags.bits.B7 = 0;
  7543  0D7A  13E5               	bcf	_ui8_error_Flags^(0+128),7
  7544                           
  7545                           ;diag.c: 2106: ui8_error_Flags.bits.B2 = 0;
  7546  0D7B  1165               	bcf	_ui8_error_Flags^(0+128),2
  7547                           
  7548                           ;diag.c: 2107: ui8_error_Flags.bits.B3 = 1;
  7549  0D7C  15E5               	bsf	_ui8_error_Flags^(0+128),3
  7550                           
  7551                           ;diag.c: 2108: ui8_error_Flags.bits.B4 = 0;
  7552  0D7D  1265               	bcf	_ui8_error_Flags^(0+128),4
  7553                           
  7554                           ;diag.c: 2109: ui8_error_Flags.bits.B6 = 0;
  7555  0D7E  1365               	bcf	_ui8_error_Flags^(0+128),6
  7556                           
  7557                           ;diag.c: 2110: ui8_error_Flags.bits.B5 = 0;
  7558  0D7F  12E5               	bcf	_ui8_error_Flags^(0+128),5
  7559                           
  7560                           ;diag.c: 2111: ui8_b_DResB1_RD = 55;
  7561  0D80  0024               	movlb	4	; select bank4
  7562  0D81  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  7563                           
  7564                           ;diag.c: 2112: ui8_b_DResB0_RD = 8;
  7565  0D82  3008               	movlw	8
  7566  0D83  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7567                           
  7568                           ;diag.c: 2113: ui8_failure = 3;
  7569  0D84  3003               	movlw	3
  7570  0D85  0022               	movlb	2	; select bank2
  7571  0D86  00EE               	movwf	_ui8_failure^(0+256)
  7572                           
  7573                           ;diag.c: 2114: break;
  7574  0D87  2DAA               	goto	l31209
  7575  0D88                     l31163:	
  7576                           
  7577                           ;diag.c: 2151: {
  7578                           ;diag.c: 2155: PWM_Write_Out( 77 );
  7579  0D88  304D               	movlw	77
  7580  0D89  3186  262F  3189   	fcall	_PWM_Write_Out
  7581                           
  7582                           ;diag.c: 2156: ui8_error_Flags.bits.B0 = 0;
  7583  0D8C  0021               	movlb	1	; select bank1
  7584  0D8D  304D               	movlw	77
  7585                           
  7586                           ;diag.c: 2157: ui8_error_Flags.bits.B1 = 0;
  7587                           
  7588                           ;diag.c: 2158: ui8_error_Flags.bits.B7 = 0;
  7589                           
  7590                           ;diag.c: 2159: ui8_error_Flags.bits.B2 = 0;
  7591                           
  7592                           ;diag.c: 2160: ui8_error_Flags.bits.B3 = 0;
  7593                           
  7594                           ;diag.c: 2161: ui8_error_Flags.bits.B4 = 0;
  7595                           
  7596                           ;diag.c: 2162: ui8_error_Flags.bits.B6 = 0;
  7597  0D8E  26FB  3189         	fcall	PL30	;call to abstracted procedure
  7598                           
  7599                           ;diag.c: 2163: ui8_error_Flags.bits.B5 = 1;
  7600  0D90  16E5               	bsf	_ui8_error_Flags^(0+128),5
  7601                           
  7602                           ;diag.c: 2165: ui8_b_DResB1_RD = 77;
  7603  0D91  0024               	movlb	4	; select bank4
  7604  0D92  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  7605                           
  7606                           ;diag.c: 2166: ui8_b_DResB0_RD= 1;
  7607  0D93  01B4               	clrf	EOL@ui8_b_DResB0_RD^(0+512)
  7608  0D94  0AB4               	incf	EOL@ui8_b_DResB0_RD^(0+512),f
  7609                           
  7610                           ;diag.c: 2167: ui8_failure = 1;
  7611  0D95  0022               	movlb	2	; select bank2
  7612  0D96  01EE               	clrf	_ui8_failure^(0+256)
  7613  0D97  0AEE               	incf	_ui8_failure^(0+256),f
  7614                           
  7615                           ;diag.c: 2168: break;
  7616  0D98  2DAA               	goto	l31209
  7617  0D99                     l31187:	
  7618                           
  7619                           ;diag.c: 2205: {
  7620                           ;diag.c: 2209: PWM_Write_Out( 11 );
  7621  0D99  300B               	movlw	11
  7622  0D9A  3186  262F  3189   	fcall	_PWM_Write_Out
  7623                           
  7624                           ;diag.c: 2210: ui8_error_Flags.bits.B0 = 0;
  7625  0D9D  0021               	movlb	1	; select bank1
  7626                           
  7627                           ;diag.c: 2211: ui8_error_Flags.bits.B1 = 0;
  7628                           
  7629                           ;diag.c: 2212: ui8_error_Flags.bits.B7 = 0;
  7630                           
  7631                           ;diag.c: 2213: ui8_error_Flags.bits.B2 = 0;
  7632                           
  7633                           ;diag.c: 2214: ui8_error_Flags.bits.B3 = 0;
  7634                           
  7635                           ;diag.c: 2215: ui8_error_Flags.bits.B4 = 0;
  7636                           
  7637                           ;diag.c: 2216: ui8_error_Flags.bits.B6 = 0;
  7638  0D9E  26FB  3189         	fcall	PL30	;call to abstracted procedure
  7639                           
  7640                           ;diag.c: 2217: ui8_error_Flags.bits.B5 = 0;
  7641  0DA0  12E5               	bcf	_ui8_error_Flags^(0+128),5
  7642                           
  7643                           ;diag.c: 2218: break;
  7644  0DA1  2DAA               	goto	l31209
  7645  0DA2                     l31207:	
  7646  0DA2  086E               	movf	_ui8_failure^(0+256),w
  7647                           
  7648                           ; Switch size 1, requested type "space"
  7649                           ; Number of cases is 2, Range of values is 2 to 4
  7650                           ; switch strategies available:
  7651                           ; Name         Instructions Cycles
  7652                           ; simple_byte            7     4 (average)
  7653                           ; direct_byte           15     9 (fixed)
  7654                           ; jumptable            263     9 (fixed)
  7655                           ;	Chosen strategy is simple_byte
  7656  0DA3  3A02               	xorlw	2	; case 2
  7657  0DA4  1903               	skipnz
  7658  0DA5  2D88               	goto	l31163
  7659  0DA6  3A06               	xorlw	6	; case 4
  7660  0DA7  1903               	skipnz
  7661  0DA8  2D72               	goto	l31139
  7662  0DA9  2D99               	goto	l31187
  7663  0DAA                     l31209:	
  7664                           
  7665                           ;diag.c: 2232: ui8_b_DResB3_RD = 0;
  7666  0DAA  0024               	movlb	4	; select bank4
  7667  0DAB  303A               	movlw	58
  7668  0DAC  01B7               	clrf	EOL@ui8_b_DResB3_RD^(0+512)
  7669                           
  7670                           ;diag.c: 2233: ui8_b_DResB4_RD = 0;
  7671  0DAD  01B3               	clrf	EOL@ui8_b_DResB4_RD^(0+512)
  7672                           
  7673                           ;diag.c: 2234: ui8_b_DResB5_RD = 0;
  7674  0DAE  01B2               	clrf	EOL@ui8_b_DResB5_RD^(0+512)
  7675                           
  7676                           ;diag.c: 2237: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7677                           ;diag.c: 2238: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7678                           ;diag.c: 2239: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7679                           ;diag.c: 2240: ui8_b_DResB5_RD );
  7680  0DAF  0020               	movlb	0	; select bank0
  7681  0DB0  00B7               	movwf	?_Transmit_LIN_8Bytes
  7682  0DB1  2669  3189         	fcall	PL4	;call to abstracted procedure
  7683  0DB3  0024               	movlb	4	; select bank4
  7684  0DB4  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  7685  0DB5  0020               	movlb	0	; select bank0
  7686  0DB6  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  7687  0DB7  3010               	movlw	16
  7688  0DB8  2710  3189         	fcall	PL42	;call to abstracted procedure
  7689  0DBA  2F30               	ljmp	_Transmit_LIN_8Bytes
  7690  0DBB                     l31213:	
  7691                           ;diag.c: 2243: }
  7692                           
  7693                           
  7694                           ;diag.c: 2271: {
  7695                           ;diag.c: 2273: if( 0xa0 == ui8_selected_lid )
  7696  0DBB  0854               	movf	_ui8_selected_lid,w
  7697  0DBC  3AA0               	xorlw	160
  7698  0DBD  1D03               	skipz
  7699  0DBE  0008               	return
  7700                           
  7701                           ;diag.c: 2275: {
  7702                           ;diag.c: 2285: write_eeprom_data( 0xf4, ui8_b_DResB0_c );
  7703  0DBF  084E               	movf	_ui8_b_DResB0_c,w
  7704  0DC0  00B3               	movwf	?_write_eeprom_data
  7705  0DC1  30F4               	movlw	244
  7706  0DC2  319A  2292  3189   	fcall	_write_eeprom_data
  7707                           
  7708                           ;diag.c: 2286: write_eeprom_data( 0xf5, ui8_b_DResB1_c );
  7709  0DC5  0022               	movlb	2	; select bank2
  7710  0DC6  085A               	movf	_ui8_b_DResB1_c^(0+256),w
  7711  0DC7  0020               	movlb	0	; select bank0
  7712  0DC8  00B3               	movwf	?_write_eeprom_data
  7713  0DC9  30F5               	movlw	245
  7714  0DCA  319A  2292  3189   	fcall	_write_eeprom_data
  7715                           
  7716                           ;diag.c: 2287: write_eeprom_data( 0xf6, ui8_b_DResB2_c );
  7717  0DCD  0022               	movlb	2	; select bank2
  7718  0DCE  085B               	movf	_ui8_b_DResB2_c^(0+256),w
  7719  0DCF  0020               	movlb	0	; select bank0
  7720  0DD0  00B3               	movwf	?_write_eeprom_data
  7721  0DD1  30F6               	movlw	246
  7722  0DD2  319A  2292  3189   	fcall	_write_eeprom_data
  7723                           
  7724                           ;diag.c: 2288: write_eeprom_data( 0xf7, ui8_b_DResB3_c );
  7725  0DD5  0022               	movlb	2	; select bank2
  7726  0DD6  085C               	movf	_ui8_b_DResB3_c^(0+256),w
  7727  0DD7  0020               	movlb	0	; select bank0
  7728  0DD8  00B3               	movwf	?_write_eeprom_data
  7729  0DD9  30F7               	movlw	247
  7730  0DDA  319A  2292  3189   	fcall	_write_eeprom_data
  7731                           
  7732                           ;diag.c: 2289: write_eeprom_data( 0xf8, ui8_b_DResB4_c );
  7733  0DDD  0022               	movlb	2	; select bank2
  7734  0DDE  085D               	movf	_ui8_b_DResB4_c^(0+256),w
  7735  0DDF  0020               	movlb	0	; select bank0
  7736  0DE0  00B3               	movwf	?_write_eeprom_data
  7737  0DE1  30F8               	movlw	248
  7738  0DE2  319A  2292  3189   	fcall	_write_eeprom_data
  7739                           
  7740                           ;diag.c: 2301: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
  7741  0DE5  30F4               	movlw	244
  7742  0DE6  3183  2322  3189   	fcall	_read_eeprom_data
  7743  0DE9  0024               	movlb	4	; select bank4
  7744  0DEA  00B4               	movwf	EOL@ui8_b_DResB0_RD^(0+512)
  7745                           
  7746                           ;diag.c: 2302: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
  7747  0DEB  30F5               	movlw	245
  7748  0DEC  3183  2322  3189   	fcall	_read_eeprom_data
  7749  0DEF  0024               	movlb	4	; select bank4
  7750  0DF0  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  7751                           
  7752                           ;diag.c: 2303: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
  7753  0DF1  30F6               	movlw	246
  7754  0DF2  3183  2322  3189   	fcall	_read_eeprom_data
  7755  0DF5  0024               	movlb	4	; select bank4
  7756  0DF6  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  7757                           
  7758                           ;diag.c: 2304: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
  7759  0DF7  30F7               	movlw	247
  7760  0DF8  3183  2322  3189   	fcall	_read_eeprom_data
  7761  0DFB  0024               	movlb	4	; select bank4
  7762  0DFC  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7763                           
  7764                           ;diag.c: 2305: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
  7765  0DFD  30F8               	movlw	248
  7766  0DFE  3183  2322  3189   	fcall	_read_eeprom_data
  7767                           
  7768                           ;diag.c: 2309: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DRes
      +                          B2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF))
  7769  0E01  271B  3189         	fcall	PL47	;call to abstracted procedure
  7770  0E03  1903               	skipnz
  7771  0E04  2E1B               	goto	l31241
  7772  0E05  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  7773  0E06  3AFF               	xorlw	255
  7774  0E07  1903               	skipnz
  7775  0E08  2E1B               	goto	l31241
  7776  0E09  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  7777  0E0A  3AFF               	xorlw	255
  7778  0E0B  1903               	skipnz
  7779  0E0C  2E1B               	goto	l31241
  7780  0E0D  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  7781  0E0E  3AFF               	xorlw	255
  7782  0E0F  1903               	skipnz
  7783  0E10  2E1B               	goto	l31241
  7784  0E11  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  7785  0E12  3AFF               	xorlw	255
  7786  0E13  1903               	skipnz
  7787  0E14  2E1B               	goto	l31241
  7788                           
  7789                           ;diag.c: 2311: {
  7790                           ;diag.c: 2313: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  7791  0E15  303A               	movlw	58
  7792  0E16  263D  3189         	fcall	PL2	;call to abstracted procedure
  7793  0E18  26CB  3189         	fcall	PL19	;call to abstracted procedure
  7794  0E1A  2E21               	goto	L5
  7795  0E1B                     l31241:	
  7796                           ;diag.c: 2316: }
  7797                           
  7798                           
  7799                           ;diag.c: 2319: else
  7800                           ;diag.c: 2320: {
  7801                           ;diag.c: 2322: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF,0xFF
      +                          , 0xFF, 0xFF );
  7802  0E1B  307F               	movlw	127
  7803  0E1C  0020               	movlb	0	; select bank0
  7804  0E1D  00B7               	movwf	?_Transmit_LIN_8Bytes
  7805  0E1E  084F               	movf	_ui8_b_DResLocID_c,w
  7806  0E1F  26C2  3189         	fcall	PL11	;call to abstracted procedure
  7807  0E21                     L5:	
  7808  0E21  2730               	fcall	_Transmit_LIN_8Bytes
  7809                           
  7810                           ;diag.c: 2332: }
  7811                           ;diag.c: 2336: ui8_selected_lid = 0xfa;
  7812  0E22  30FA               	movlw	250
  7813  0E23  0020               	movlb	0	; select bank0
  7814  0E24  00D4               	movwf	_ui8_selected_lid
  7815                           
  7816                           ;diag.c: 2339: }
  7817  0E25  0008               	return
  7818  0E26                     l31245:	
  7819                           
  7820                           ;diag.c: 2365: {
  7821                           ;diag.c: 2367: if( 0xfa == ui8_selected_lid )
  7822  0E26  0854               	movf	_ui8_selected_lid,w
  7823  0E27  3AFA               	xorlw	250
  7824  0E28  1D03               	skipz
  7825  0E29  0008               	return
  7826                           
  7827                           ;diag.c: 2369: {
  7828                           ;diag.c: 2371: Transmit_LIN_8Bytes( 0x10, 0x3a, ui8_b_DResLocID_c, 0x00, 0x00, 0x00, 0x0
      +                          0, 0x00, 0x00 );
  7829  0E2A  303A               	movlw	58
  7830  0E2B  00B7               	movwf	?_Transmit_LIN_8Bytes
  7831  0E2C  084F               	movf	_ui8_b_DResLocID_c,w
  7832  0E2D  26F2  3189         	fcall	PL28	;call to abstracted procedure
  7833  0E2F  2730               	fcall	_Transmit_LIN_8Bytes
  7834                           
  7835                           ;diag.c: 2372: write_eeprom_data(0x55,0x55);
  7836  0E30  3055               	movlw	85
  7837  0E31  0020               	movlb	0	; select bank0
  7838  0E32  00B3               	movwf	?_write_eeprom_data
  7839  0E33  319A  2292         	fcall	_write_eeprom_data
  7840                           
  7841                           ;diag.c: 2373: RC5 = 0;
  7842  0E35  0020               	movlb	0	; select bank0
  7843  0E36  128E               	bcf	14,5
  7844                           
  7845                           ;diag.c: 2375: }
  7846  0E37  0008               	return
  7847  0E38                     l31253:	
  7848                           
  7849                           ;diag.c: 2399: {
  7850                           ;diag.c: 2405: NegativeAnswer(ui8_selected_lid);
  7851  0E38  0854               	movf	_ui8_selected_lid,w
  7852  0E39  2F20               	ljmp	_NegativeAnswer
  7853  0E3A                     l31259:	
  7854                           
  7855                           ;diag.c: 2417: else
  7856                           ;diag.c: 2418: {
  7857                           ;diag.c: 2424: NegativeAnswer(ui8_selected_lid);
  7858  0E3A  0020               	movlb	0	; select bank0
  7859  0E3B  0854               	movf	_ui8_selected_lid,w
  7860  0E3C  2F20               	ljmp	_NegativeAnswer
  7861  0E3D                     __end_of_EOL:	
  7862  0E3D                     PL2:	
  7863  0E3D  0020               	movlb	0	; select bank0
  7864  0E3E  00B7               	movwf	?_Transmit_LIN_8Bytes
  7865  0E3F  084F               	movf	_ui8_b_DResLocID_c,w
  7866  0E40  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  7867  0E41  0024               	movlb	4	; select bank4
  7868  0E42  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  7869  0E43  0020               	movlb	0	; select bank0
  7870  0E44  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  7871  0E45  0024               	movlb	4	; select bank4
  7872  0E46  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  7873  0E47  0020               	movlb	0	; select bank0
  7874  0E48  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  7875  0E49  0024               	movlb	4	; select bank4
  7876  0E4A  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  7877  0E4B  0020               	movlb	0	; select bank0
  7878  0E4C  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  7879  0E4D  0024               	movlb	4	; select bank4
  7880  0E4E  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  7881  0E4F  0020               	movlb	0	; select bank0
  7882  0E50  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  7883  0E51  0008               	return
  7884  0E52                     PL3:	
  7885  0E52  00B7               	movwf	?_Transmit_LIN_8Bytes
  7886  0E53  084F               	movf	_ui8_b_DResLocID_c,w
  7887  0E54  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  7888  0E55  0024               	movlb	4	; select bank4
  7889  0E56  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  7890  0E57  0020               	movlb	0	; select bank0
  7891  0E58  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  7892  0E59  01BA               	clrf	?_Transmit_LIN_8Bytes+3
  7893  0E5A  0024               	movlb	4	; select bank4
  7894  0E5B  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  7895  0E5C  0020               	movlb	0	; select bank0
  7896  0E5D  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  7897  0E5E  0024               	movlb	4	; select bank4
  7898  0E5F  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  7899  0E60  0020               	movlb	0	; select bank0
  7900  0E61  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  7901  0E62  0024               	movlb	4	; select bank4
  7902  0E63  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  7903  0E64  0020               	movlb	0	; select bank0
  7904  0E65  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  7905  0E66  3010               	movlw	16
  7906  0E67  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  7907  0E68  0008               	return
  7908  0E69                     PL4:	
  7909  0E69  084F               	movf	_ui8_b_DResLocID_c,w
  7910  0E6A  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  7911  0E6B  0024               	movlb	4	; select bank4
  7912  0E6C  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  7913  0E6D  0020               	movlb	0	; select bank0
  7914  0E6E  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  7915  0E6F  0008               	return
  7916  0E70                     PL5:	
  7917  0E70  0024               	movlb	4	; select bank4
  7918  0E71  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
  7919  0E72  0020               	movlb	0	; select bank0
  7920  0E73  343A               	retlw	58
  7921  0E74                     PL6:	
  7922  0E74  0837               	movf	EOL@ui8_b_DResB3_RD^(0+512),w
  7923  0E75  3EFD               	addlw	253
  7924  0E76  0020               	movlb	0	; select bank0
  7925  0E77  00C1               	movwf	??_EOL
  7926  0E78  30FF               	movlw	255
  7927  0E79  1803               	skipnc
  7928  0E7A  3000               	movlw	0
  7929  0E7B  00C2               	movwf	??_EOL+1
  7930  0E7C  3A80               	xorlw	128
  7931  0E7D  00C3               	movwf	??_EOL+2
  7932  0E7E  3080               	movlw	128
  7933  0E7F  0243               	subwf	??_EOL+2,w
  7934  0E80  1D03               	skipz
  7935  0E81  0008               	return
  7936  0E82  0024               	movlb	4	; select bank4
  7937  0E83  0836               	movf	EOL@ui8_b_DResB2_RD^(0+512),w
  7938  0E84  0020               	movlb	0	; select bank0
  7939  0E85  0241               	subwf	??_EOL,w
  7940  0E86  0008               	return
  7941  0E87                     PL7:	
  7942  0E87  00B7               	movwf	EOL@ui8_b_DResB3_RD^(0+512)
  7943  0E88  3E03               	addlw	3
  7944  0E89  0020               	movlb	0	; select bank0
  7945  0E8A  00C1               	movwf	??_EOL
  7946  0E8B  3000               	movlw	0
  7947  0E8C  1803               	skipnc
  7948  0E8D  3001               	movlw	1
  7949  0E8E  00C2               	movwf	??_EOL+1
  7950  0E8F  3A80               	xorlw	128
  7951  0E90  3C80               	sublw	128
  7952  0E91  1D03               	skipz
  7953  0E92  0008               	return
  7954  0E93  0841               	movf	??_EOL,w
  7955  0E94  0024               	movlb	4	; select bank4
  7956  0E95  0236               	subwf	EOL@ui8_b_DResB2_RD^(0+512),w
  7957  0E96  0008               	return
  7958  0E97                     PL8:	
  7959  0E97  307F               	movlw	127
  7960  0E98  0020               	movlb	0	; select bank0
  7961  0E99  00B7               	movwf	?_Transmit_LIN_8Bytes
  7962  0E9A  084F               	movf	_ui8_b_DResLocID_c,w
  7963  0E9B  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  7964  0E9C  084E               	movf	_ui8_b_DResB0_c,w
  7965  0E9D  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  7966  0E9E  30FF               	movlw	255
  7967  0E9F  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  7968  0EA0  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  7969  0EA1  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  7970  0EA2  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  7971  0EA3  00BE               	movwf	?_Transmit_LIN_8Bytes+7
  7972  0EA4  3410               	retlw	16
  7973  0EA5                     PL9:	
  7974  0EA5  3689               	lsrf	9,f
  7975  0EA6  0024               	movlb	4	; select bank4
  7976  0EA7  00B5               	movwf	EOL@ui8_b_DResB1_RD^(0+512)
  7977  0EA8  0021               	movlb	1	; select bank1
  7978  0EA9  083D               	movf	(_ui16_speed_fil+1)^(0+128),w
  7979  0EAA  0020               	movlb	0	; select bank0
  7980  0EAB  00AD               	movwf	?___wmul+1
  7981  0EAC  0021               	movlb	1	; select bank1
  7982  0EAD  083C               	movf	_ui16_speed_fil^(0+128),w
  7983  0EAE  0020               	movlb	0	; select bank0
  7984  0EAF  00AC               	movwf	?___wmul
  7985  0EB0  3005               	movlw	5
  7986  0EB1  00AE               	movwf	?___wmul+2
  7987  0EB2  01AF               	clrf	?___wmul+3
  7988  0EB3  0008               	return
  7989  0EB4                     PL10:	
  7990  0EB4  082C               	movf	?___wmul,w
  7991  0EB5  00C1               	movwf	??_EOL
  7992  0EB6  082D               	movf	?___wmul+1,w
  7993  0EB7  00C2               	movwf	??_EOL+1
  7994  0EB8  36C2               	lsrf	??_EOL+1,f
  7995  0EB9  0CC1               	rrf	??_EOL,f
  7996  0EBA  36C2               	lsrf	??_EOL+1,f
  7997  0EBB  0CC1               	rrf	??_EOL,f
  7998  0EBC  0841               	movf	??_EOL,w
  7999  0EBD  0024               	movlb	4	; select bank4
  8000  0EBE  00B6               	movwf	EOL@ui8_b_DResB2_RD^(0+512)
  8001  0EBF  0835               	movf	EOL@ui8_b_DResB1_RD^(0+512),w
  8002  0EC0  3E2D               	addlw	low (_PWM_trans_table| (0+32768))
  8003  0EC1  0008               	return
  8004  0EC2                     PL11:	
  8005  0EC2  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  8006  0EC3  30FF               	movlw	255
  8007  0EC4  00B9               	movwf	?_Transmit_LIN_8Bytes+2
  8008  0EC5  00BA               	movwf	?_Transmit_LIN_8Bytes+3
  8009  0EC6  00BB               	movwf	?_Transmit_LIN_8Bytes+4
  8010  0EC7  00BC               	movwf	?_Transmit_LIN_8Bytes+5
  8011  0EC8  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  8012  0EC9  00BE               	movwf	?_Transmit_LIN_8Bytes+7
  8013  0ECA  3410               	retlw	16
  8014  0ECB                     PL19:	
  8015  0ECB  0024               	movlb	4	; select bank4
  8016  0ECC  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  8017  0ECD  0020               	movlb	0	; select bank0
  8018  0ECE  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  8019  0ECF  3010               	movlw	16
  8020  0ED0  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  8021  0ED1  0008               	return
  8022  0ED2                     PL20:	
  8023  0ED2  0022               	movlb	2	; select bank2
  8024  0ED3  0862               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
  8025  0ED4  0020               	movlb	0	; select bank0
  8026  0ED5  00AD               	movwf	?___lwdiv+1
  8027  0ED6  0022               	movlb	2	; select bank2
  8028  0ED7  0861               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
  8029  0ED8  0020               	movlb	0	; select bank0
  8030  0ED9  00AC               	movwf	?___lwdiv
  8031  0EDA  3078               	movlw	120
  8032  0EDB  01AE               	clrf	?___lwdiv+2
  8033  0EDC  00AF               	movwf	?___lwdiv+3
  8034  0EDD  0008               	return
  8035  0EDE                     PL21:	
  8036  0EDE  0020               	movlb	0	; select bank0
  8037  0EDF  00AC               	movwf	?___lwdiv
  8038  0EE0  3078               	movlw	120
  8039  0EE1  01AE               	clrf	?___lwdiv+2
  8040  0EE2  00AF               	movwf	?___lwdiv+3
  8041  0EE3  0008               	return
  8042  0EE4                     PL22:	
  8043  0EE4  0022               	movlb	2	; select bank2
  8044  0EE5  0866               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
  8045  0EE6  0020               	movlb	0	; select bank0
  8046  0EE7  00AD               	movwf	?___lwdiv+1
  8047  0EE8  0022               	movlb	2	; select bank2
  8048  0EE9  0865               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
  8049  0EEA  0008               	return
  8050  0EEB                     PL23:	
  8051  0EEB  0022               	movlb	2	; select bank2
  8052  0EEC  0864               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
  8053  0EED  0020               	movlb	0	; select bank0
  8054  0EEE  00AD               	movwf	?___lwdiv+1
  8055  0EEF  0022               	movlb	2	; select bank2
  8056  0EF0  0863               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
  8057  0EF1  0008               	return
  8058  0EF2                     PL28:	
  8059  0EF2  00B8               	movwf	?_Transmit_LIN_8Bytes+1
  8060  0EF3  3010               	movlw	16
  8061  0EF4  01B9               	clrf	?_Transmit_LIN_8Bytes+2
  8062  0EF5  01BA               	clrf	?_Transmit_LIN_8Bytes+3
  8063  0EF6  01BB               	clrf	?_Transmit_LIN_8Bytes+4
  8064  0EF7  01BC               	clrf	?_Transmit_LIN_8Bytes+5
  8065  0EF8  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  8066  0EF9  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  8067  0EFA  0008               	return
  8068  0EFB                     PL30:	
  8069  0EFB  1065               	bcf	_ui8_error_Flags^(0+128),0
  8070  0EFC  10E5               	bcf	_ui8_error_Flags^(0+128),1
  8071  0EFD  13E5               	bcf	_ui8_error_Flags^(0+128),7
  8072  0EFE  1165               	bcf	_ui8_error_Flags^(0+128),2
  8073  0EFF  11E5               	bcf	_ui8_error_Flags^(0+128),3
  8074  0F00  1265               	bcf	_ui8_error_Flags^(0+128),4
  8075  0F01  1365               	bcf	_ui8_error_Flags^(0+128),6
  8076  0F02  0008               	return
  8077  0F03                     PL31:	
  8078  0F03  0024               	movlb	4	; select bank4
  8079  0F04  0833               	movf	EOL@ui8_b_DResB4_RD^(0+512),w
  8080  0F05  0020               	movlb	0	; select bank0
  8081  0F06  00BD               	movwf	?_Transmit_LIN_8Bytes+6
  8082  0F07  0024               	movlb	4	; select bank4
  8083  0F08  0832               	movf	EOL@ui8_b_DResB5_RD^(0+512),w
  8084  0F09  0020               	movlb	0	; select bank0
  8085  0F0A  0008               	return
  8086  0F0B                     PL39:	
  8087  0F0B  0021               	movlb	1	; select bank1
  8088  0F0C  086E               	movf	_wkpoint^(0+128),w
  8089  0F0D  0020               	movlb	0	; select bank0
  8090  0F0E  064E               	xorwf	_ui8_b_DResB0_c,w
  8091  0F0F  0008               	return
  8092  0F10                     PL42:	
  8093  0F10  01BB               	clrf	?_Transmit_LIN_8Bytes+4
  8094  0F11  01BC               	clrf	?_Transmit_LIN_8Bytes+5
  8095  0F12  01BD               	clrf	?_Transmit_LIN_8Bytes+6
  8096  0F13  01BE               	clrf	?_Transmit_LIN_8Bytes+7
  8097  0F14  0008               	return
  8098  0F15                     PL46:	
  8099  0F15  0091               	movwf	17	;volatile
  8100  0F16  301F               	movlw	31
  8101  0F17  0092               	movwf	18	;volatile
  8102  0F18  1115               	bcf	21,2
  8103  0F19  1795               	bsf	21,7	;volatile
  8104  0F1A  0008               	return
  8105  0F1B                     PL47:	
  8106  0F1B  0024               	movlb	4	; select bank4
  8107  0F1C  00B3               	movwf	EOL@ui8_b_DResB4_RD^(0+512)
  8108  0F1D  0834               	movf	EOL@ui8_b_DResB0_RD^(0+512),w
  8109  0F1E  3AFF               	xorlw	255
  8110  0F1F  0008               	return
  8111  0F20                     __ptext2032:	
  8112 ;; =============== function _Receive_Diag ends ============
  8113                           
  8114                           
  8115 ;; *************** function _NegativeAnswer *****************
  8116 ;; Defined at:
  8117 ;;		line 2438 in file "../diag.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;  LID             1    wreg     unsigned char 
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;  LID             1   32[BANK0 ] unsigned char 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;		None               void
  8124 ;; Registers used:
  8125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 1D/2
  8128 ;;		On exit  : 1F/1
  8129 ;;		Unchanged: FFFE0/0
  8130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8131 ;;      Params:         0       0       0       0       0       0       0       0
  8132 ;;      Locals:         0       1       0       0       0       0       0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0       0
  8134 ;;      Totals:         0       1       0       0       0       0       0       0
  8135 ;;Total ram usage:        1 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    7
  8138 ;; This function calls:
  8139 ;;		_Transmit_LIN_8Bytes
  8140 ;; This function is called by:
  8141 ;;		_EOL
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144  0F20                     _NegativeAnswer:	
  8145                           
  8146                           ; Regs used in _NegativeAnswer: [wreg+fsr1l-status,0+pclath+cstack]
  8147                           ;NegativeAnswer@LID stored from wreg
  8148  0F20  0020               	movlb	0	; select bank0
  8149  0F21  00C0               	movwf	NegativeAnswer@LID
  8150                           
  8151                           ;diag.c: 2440: ui8_b_DResB0_c = 0xFF;
  8152  0F22  30FF               	movlw	255
  8153  0F23  00CE               	movwf	_ui8_b_DResB0_c
  8154                           
  8155                           ;diag.c: 2441: ui8_b_DResB1_c = 0xFF;
  8156  0F24  0022               	movlb	2	; select bank2
  8157  0F25  00DA               	movwf	_ui8_b_DResB1_c^(0+256)
  8158                           
  8159                           ;diag.c: 2442: ui8_b_DResB2_c = 0xFF;
  8160  0F26  00DB               	movwf	_ui8_b_DResB2_c^(0+256)
  8161                           
  8162                           ;diag.c: 2443: ui8_b_DResB3_c = 0xFF;
  8163  0F27  00DC               	movwf	_ui8_b_DResB3_c^(0+256)
  8164                           
  8165                           ;diag.c: 2445: ui8_b_DResB5_c = 0xFF;
  8166  0F28  00DD               	movwf	_ui8_b_DResB4_c^(0+256)
  8167                           
  8168                           ;diag.c: 2447: Transmit_LIN_8Bytes( 0x10, 0x7F, LID, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
  8169  0F29  307F               	movlw	127
  8170  0F2A  0020               	movlb	0	; select bank0
  8171  0F2B  00B7               	movwf	?_Transmit_LIN_8Bytes
  8172  0F2C  0840               	movf	NegativeAnswer@LID,w
  8173  0F2D  26C2  3189         	fcall	PL11	;call to abstracted procedure
  8174  0F2F  2F30               	ljmp	_Transmit_LIN_8Bytes
  8175  0F30                     __end_of_NegativeAnswer:	
  8176  0F30                     __ptext2036:	
  8177 ;; =============== function __ELINMIntReceiveMessage ends ============
  8178                           
  8179                           
  8180 ;; *************** function _Transmit_LIN_8Bytes *****************
  8181 ;; Defined at:
  8182 ;;		line 171 in file "../lin.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  ID              1    wreg     unsigned char 
  8185 ;;  B0              1   23[BANK0 ] unsigned char 
  8186 ;;  B1              1   24[BANK0 ] unsigned char 
  8187 ;;  B2              1   25[BANK0 ] unsigned char 
  8188 ;;  B3              1   26[BANK0 ] unsigned char 
  8189 ;;  B4              1   27[BANK0 ] unsigned char 
  8190 ;;  B5              1   28[BANK0 ] unsigned char 
  8191 ;;  B6              1   29[BANK0 ] unsigned char 
  8192 ;;  B7              1   30[BANK0 ] unsigned char 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  ID              1   31[BANK0 ] unsigned char 
  8195 ;; Return value:  Size  Location     Type
  8196 ;;		None               void
  8197 ;; Registers used:
  8198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 1F/0
  8201 ;;		On exit  : 1F/1
  8202 ;;		Unchanged: FFFE0/0
  8203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8204 ;;      Params:         0       8       0       0       0       0       0       0
  8205 ;;      Locals:         0       1       0       0       0       0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0
  8207 ;;      Totals:         0       9       0       0       0       0       0       0
  8208 ;;Total ram usage:        9 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    6
  8211 ;; This function calls:
  8212 ;;		__ELINMIntGetPointer
  8213 ;;		__ELINMIntSendMessage
  8214 ;; This function is called by:
  8215 ;;		_EOL
  8216 ;;		_NegativeAnswer
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219  0F30                     _Transmit_LIN_8Bytes:	
  8220                           
  8221                           ; Regs used in _Transmit_LIN_8Bytes: [wreg+fsr1l-status,0+pclath+cstack]
  8222                           ;Transmit_LIN_8Bytes@ID stored from wreg
  8223  0F30  00BF               	movwf	Transmit_LIN_8Bytes@ID
  8224  0F31                     l11545:	
  8225                           ;lin.c: 179: {
  8226                           ;lin.c: 180: ;
  8227                           
  8228  0F31  1DCC               	btfss	__ELINMIntStatus,3
  8229  0F32  2F31               	goto	l11545
  8230                           
  8231                           ;lin.c: 181: }
  8232                           ;lin.c: 182: pt = _ELINMIntGetPointer ( 5, 2 );
  8233  0F33  3002               	movlw	2
  8234  0F34  00AC               	movwf	?__ELINMIntGetPointer
  8235  0F35  3005               	movlw	5
  8236  0F36  3187  2710  3189   	fcall	__ELINMIntGetPointer
  8237  0F39  00CD               	movwf	_pt
  8238                           
  8239                           ;lin.c: 183: *pt++ = B0;
  8240  0F3A  0086               	movwf	6
  8241  0F3B  3002               	movlw	2	; select bank4/5
  8242  0F3C  0087               	movwf	7
  8243  0F3D  0837               	movf	Transmit_LIN_8Bytes@B0,w
  8244  0F3E  0081               	movwf	1
  8245  0F3F  0ACD               	incf	_pt,f
  8246                           
  8247                           ;lin.c: 184: *pt++ = B1;
  8248  0F40  084D               	movf	_pt,w
  8249  0F41  0086               	movwf	6
  8250  0F42  0838               	movf	Transmit_LIN_8Bytes@B1,w
  8251  0F43  0081               	movwf	1
  8252  0F44  0ACD               	incf	_pt,f
  8253                           
  8254                           ;lin.c: 185: *pt++ = B2;
  8255  0F45  084D               	movf	_pt,w
  8256  0F46  0086               	movwf	6
  8257  0F47  0839               	movf	Transmit_LIN_8Bytes@B2,w
  8258  0F48  0081               	movwf	1
  8259  0F49  0ACD               	incf	_pt,f
  8260                           
  8261                           ;lin.c: 186: *pt++ = B3;
  8262  0F4A  084D               	movf	_pt,w
  8263  0F4B  0086               	movwf	6
  8264  0F4C  083A               	movf	Transmit_LIN_8Bytes@B3,w
  8265  0F4D  0081               	movwf	1
  8266  0F4E  0ACD               	incf	_pt,f
  8267                           
  8268                           ;lin.c: 187: *pt++ = B4;
  8269  0F4F  084D               	movf	_pt,w
  8270  0F50  0086               	movwf	6
  8271  0F51  083B               	movf	Transmit_LIN_8Bytes@B4,w
  8272  0F52  0081               	movwf	1
  8273  0F53  0ACD               	incf	_pt,f
  8274                           
  8275                           ;lin.c: 188: *pt++ = B5;
  8276  0F54  084D               	movf	_pt,w
  8277  0F55  0086               	movwf	6
  8278  0F56  083C               	movf	Transmit_LIN_8Bytes@B5,w
  8279  0F57  0081               	movwf	1
  8280  0F58  0ACD               	incf	_pt,f
  8281                           
  8282                           ;lin.c: 189: *pt++ = B6;
  8283  0F59  084D               	movf	_pt,w
  8284  0F5A  0086               	movwf	6
  8285  0F5B  083D               	movf	Transmit_LIN_8Bytes@B6,w
  8286  0F5C  0081               	movwf	1
  8287  0F5D  0ACD               	incf	_pt,f
  8288                           
  8289                           ;lin.c: 190: *pt++ = B7;
  8290  0F5E  084D               	movf	_pt,w
  8291  0F5F  0086               	movwf	6
  8292  0F60  083E               	movf	Transmit_LIN_8Bytes@B7,w
  8293  0F61  0081               	movwf	1
  8294  0F62  3008               	movlw	8
  8295  0F63  0ACD               	incf	_pt,f
  8296                           
  8297                           ;lin.c: 192: _ELINMIntSendMessage ( ID, 8, ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) * ( 100L * 
      +                          1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) + 1L ) * 
      +                          14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  8298  0F64  00AD               	movwf	?__ELINMIntSendMessage
  8299  0F65  3055               	movlw	85
  8300  0F66  00AE               	movwf	?__ELINMIntSendMessage+1
  8301  0F67  3077               	movlw	119
  8302  0F68  01AF               	clrf	?__ELINMIntSendMessage+2
  8303  0F69  00B0               	movwf	?__ELINMIntSendMessage+3
  8304  0F6A  01B1               	clrf	?__ELINMIntSendMessage+4
  8305  0F6B  083F               	movf	Transmit_LIN_8Bytes@ID,w
  8306  0F6C  2773               	fcall	__ELINMIntSendMessage
  8307                           
  8308                           ;lin.c: 193: if( ( ErrorCode = ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  8309  0F6D  084C               	movf	__ELINMIntStatus,w
  8310  0F6E  0021               	movlb	1	; select bank1
  8311  0F6F  00CA               	movwf	_ErrorCode^(0+128)
  8312  0F70  30F0               	movlw	240
  8313  0F71  05CA               	andwf	_ErrorCode^(0+128),f
  8314  0F72  0008               	return
  8315  0F73                     __end_of_Transmit_LIN_8Bytes:	
  8316  0F73                     __ptext2042:	
  8317 ;; =============== function _init_ports ends ============
  8318                           
  8319                           
  8320 ;; *************** function __ELINMIntSendMessage *****************
  8321 ;; Defined at:
  8322 ;;		line 1184 in file "../lin.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;  _ELINM_idr      1    wreg     unsigned char 
  8325 ;;  _ELINM_size     1   13[BANK0 ] unsigned char 
  8326 ;;  _ELINM_fmin     2   14[BANK0 ] unsigned int 
  8327 ;;  _ELINM_fmax     2   16[BANK0 ] unsigned int 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  _ELINM_idr      1   18[BANK0 ] unsigned char 
  8330 ;;  _ELINM_chk      2   20[BANK0 ] unsigned int 
  8331 ;;  _ELINM_i        1   22[BANK0 ] unsigned char 
  8332 ;;  _ELINM_tid      1   19[BANK0 ] struct ELINMINT_ID
  8333 ;; Return value:  Size  Location     Type
  8334 ;;		None               void
  8335 ;; Registers used:
  8336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 1F/0
  8339 ;;		On exit  : 1F/0
  8340 ;;		Unchanged: FFFE0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8342 ;;      Params:         0       5       0       0       0       0       0       0
  8343 ;;      Locals:         0       5       0       0       0       0       0       0
  8344 ;;      Temps:          0       0       0       0       0       0       0       0
  8345 ;;      Totals:         0      10       0       0       0       0       0       0
  8346 ;;Total ram usage:       10 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    5
  8349 ;; This function calls:
  8350 ;;		__ELINMIntCalcIDParity
  8351 ;; This function is called by:
  8352 ;;		_Transmit_LIN_8Bytes
  8353 ;;		__ELINMIntReceiveMessage
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356  0F73                     __ELINMIntSendMessage:	
  8357                           
  8358                           ; Regs used in __ELINMIntSendMessage: [wreg+fsr1l-status,0+pclath+cstack]
  8359                           ;__ELINMIntSendMessage@_ELINM_idr stored from wreg
  8360  0F73  00B2               	movwf	__ELINMIntSendMessage@_ELINM_idr
  8361                           
  8362                           ;lin.c: 1186: char _ELINM_i;
  8363                           ;lin.c: 1187: ELINMINT_ID _ELINM_tid;
  8364                           ;lin.c: 1188: unsigned int _ELINM_chk;
  8365                           ;lin.c: 1191: _ELINM_tid.ID = _ELINM_idr;
  8366  0F74  00B3               	movwf	__ELINMIntSendMessage@_ELINM_tid
  8367                           
  8368                           ;lin.c: 1192: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
  8369  0F75  300F               	movlw	15
  8370  0F76  05CC               	andwf	__ELINMIntStatus,f
  8371                           
  8372                           ;lin.c: 1194: _ELINMIntTHeaderMin = ( 34L * ( 100L * 1000000L / 19200L ) / 128L ) / 100;
  8373  0F77  300D               	movlw	13
  8374  0F78  0022               	movlb	2	; select bank2
  8375  0F79  00A5               	movwf	__ELINMIntTHeaderMin^(0+256)
  8376  0F7A  3013               	movlw	19
  8377  0F7B  01A6               	clrf	(__ELINMIntTHeaderMin+1)^(0+256)
  8378                           
  8379                           ;lin.c: 1195: _ELINMIntTHeaderMax = ( ( ( ( 34L + 1 ) * 14L ) / 10L ) * ( 100L * 1000000
      +                          L / 19200L ) / 128L ) / 100;
  8380  0F7C  0023               	movlb	3	; select bank3
  8381  0F7D  00C8               	movwf	__ELINMIntTHeaderMax^(0+384)
  8382  0F7E  01C9               	clrf	(__ELINMIntTHeaderMax+1)^(0+384)
  8383                           
  8384                           ;lin.c: 1196: _ELINMIntTFrameMin = _ELINM_fmin;
  8385  0F7F  0020               	movlb	0	; select bank0
  8386  0F80  082F               	movf	__ELINMIntSendMessage@_ELINM_fmin+1,w
  8387  0F81  0022               	movlb	2	; select bank2
  8388  0F82  00A4               	movwf	(__ELINMIntTFrameMin+1)^(0+256)
  8389  0F83  0020               	movlb	0	; select bank0
  8390  0F84  082E               	movf	__ELINMIntSendMessage@_ELINM_fmin,w
  8391  0F85  0022               	movlb	2	; select bank2
  8392  0F86  00A3               	movwf	__ELINMIntTFrameMin^(0+256)
  8393                           
  8394                           ;lin.c: 1197: _ELINMIntTFrameMax = _ELINM_fmax;
  8395  0F87  0020               	movlb	0	; select bank0
  8396  0F88  0831               	movf	__ELINMIntSendMessage@_ELINM_fmax+1,w
  8397  0F89  0023               	movlb	3	; select bank3
  8398  0F8A  00C7               	movwf	(__ELINMIntTFrameMax+1)^(0+384)
  8399  0F8B  0020               	movlb	0	; select bank0
  8400  0F8C  0830               	movf	__ELINMIntSendMessage@_ELINM_fmax,w
  8401  0F8D  0023               	movlb	3	; select bank3
  8402  0F8E  00C6               	movwf	__ELINMIntTFrameMax^(0+384)
  8403                           
  8404                           ;lin.c: 1207: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
  8405  0F8F  0020               	movlb	0	; select bank0
  8406  0F90  1DCC               	btfss	__ELINMIntStatus,3
  8407  0F91  0008               	return
  8408                           
  8409                           ;lin.c: 1210: {
  8410                           ;lin.c: 1229: _ELINMIntMessageBuffer[ 0 ] = 0x55;
  8411  0F92  3055               	movlw	85
  8412  0F93  0024               	movlb	4	; select bank4
  8413  0F94  00D4               	movwf	__ELINMIntMessageBuffer^(0+512)
  8414                           
  8415                           ;lin.c: 1230: _ELINMIntMessageBuffer[ 1 ] = _ELINMIntCalcIDParity( _ELINM_tid );
  8416  0F95  0020               	movlb	0	; select bank0
  8417  0F96  0833               	movf	__ELINMIntSendMessage@_ELINM_tid,w
  8418  0F97  27DA  3189         	fcall	__ELINMIntCalcIDParity
  8419  0F99  0024               	movlb	4	; select bank4
  8420  0F9A  00D5               	movwf	(__ELINMIntMessageBuffer^(0+512)+1)
  8421                           
  8422                           ;lin.c: 1231: _ELINMIntMessageBufferPointer = 0;
  8423  0F9B  0021               	movlb	1	; select bank1
  8424  0F9C  01CF               	clrf	__ELINMIntMessageBufferPointer^(0+128)
  8425                           
  8426                           ;lin.c: 1238: if( _ELINMIntStatus.ELINMINTSTS.RX )
  8427  0F9D  0020               	movlb	0	; select bank0
  8428  0F9E  1CCC               	btfss	__ELINMIntStatus,1
  8429  0F9F  2FA4               	goto	l29693
  8430                           
  8431                           ;lin.c: 1241: {
  8432                           ;lin.c: 1243: _ELINMIntMessageSize.SIZE = 2;
  8433  0FA0  3002               	movlw	2
  8434  0FA1  0021               	movlb	1	; select bank1
  8435  0FA2  00D0               	movwf	__ELINMIntMessageSize^(0+128)
  8436                           
  8437                           ;lin.c: 1246: }
  8438  0FA3  2FCB               	goto	l29709
  8439  0FA4                     l29693:	
  8440                           
  8441                           ;lin.c: 1249: else
  8442                           ;lin.c: 1250: {
  8443                           ;lin.c: 1252: _ELINMIntMessageSize.SIZE = _ELINM_size + 2;
  8444  0FA4  082D               	movf	__ELINMIntSendMessage@_ELINM_size,w
  8445  0FA5  3E02               	addlw	2
  8446  0FA6  0021               	movlb	1	; select bank1
  8447  0FA7  00D0               	movwf	__ELINMIntMessageSize^(0+128)
  8448                           
  8449                           ;lin.c: 1253: _ELINM_chk = 0;
  8450  0FA8  0020               	movlb	0	; select bank0
  8451  0FA9  3002               	movlw	2
  8452  0FAA  01B4               	clrf	__ELINMIntSendMessage@_ELINM_chk
  8453  0FAB  01B5               	clrf	__ELINMIntSendMessage@_ELINM_chk+1
  8454                           
  8455                           ;lin.c: 1256: for( _ELINM_i = 2;
  8456  0FAC  00B6               	movwf	__ELINMIntSendMessage@_ELINM_i
  8457  0FAD                     l29703:	
  8458                           ;lin.c: 1257: _ELINM_i < _ELINMIntMessageSize.SIZE;
  8459                           ;lin.c: 1258: _ELINM_i++ )
  8460                           
  8461  0FAD  0021               	movlb	1	; select bank1
  8462  0FAE  0850               	movf	__ELINMIntMessageSize^(0+128),w
  8463  0FAF  0020               	movlb	0	; select bank0
  8464  0FB0  0236               	subwf	__ELINMIntSendMessage@_ELINM_i,w
  8465  0FB1  1803               	btfsc	3,0
  8466  0FB2  2FBE               	goto	l29705
  8467                           
  8468                           ;lin.c: 1261: {
  8469                           ;lin.c: 1263: _ELINM_chk += _ELINMIntMessageBuffer[ _ELINM_i ];
  8470  0FB3  0836               	movf	__ELINMIntSendMessage@_ELINM_i,w
  8471  0FB4  3E54               	addlw	__ELINMIntMessageBuffer& (0+255)
  8472  0FB5  0086               	movwf	6
  8473  0FB6  3002               	movlw	2	; select bank4/5
  8474  0FB7  0087               	movwf	7
  8475  0FB8  0801               	movf	1,w
  8476  0FB9  07B4               	addwf	__ELINMIntSendMessage@_ELINM_chk,f
  8477  0FBA  1803               	skipnc
  8478  0FBB  0AB5               	incf	__ELINMIntSendMessage@_ELINM_chk+1,f
  8479  0FBC  0AB6               	incf	__ELINMIntSendMessage@_ELINM_i,f
  8480  0FBD  2FAD               	goto	l29703
  8481  0FBE                     l29705:	
  8482                           
  8483                           ;lin.c: 1266: }
  8484                           ;lin.c: 1269: _ELINMIntMessageBuffer[ _ELINMIntMessageSize.SIZE ]
  8485                           ;lin.c: 1270: = ( ~( _ELINM_chk + ( _ELINM_chk>>8 ) ) );
  8486  0FBE  0021               	movlb	1	; select bank1
  8487  0FBF  0850               	movf	__ELINMIntMessageSize^(0+128),w
  8488  0FC0  3E54               	addlw	__ELINMIntMessageBuffer& (0+255)
  8489  0FC1  0086               	movwf	6
  8490  0FC2  3002               	movlw	2	; select bank4/5
  8491  0FC3  0087               	movwf	7
  8492  0FC4  0020               	movlb	0	; select bank0
  8493  0FC5  0835               	movf	__ELINMIntSendMessage@_ELINM_chk+1,w
  8494  0FC6  0734               	addwf	__ELINMIntSendMessage@_ELINM_chk,w
  8495  0FC7  3AFF               	xorlw	255
  8496  0FC8  0081               	movwf	1
  8497                           
  8498                           ;lin.c: 1271: _ELINMIntMessageSize.SIZE++;
  8499  0FC9  0021               	movlb	1	; select bank1
  8500  0FCA  0AD0               	incf	__ELINMIntMessageSize^(0+128),f
  8501  0FCB                     l29709:	
  8502                           
  8503                           ;lin.c: 1274: }
  8504                           ;lin.c: 1277: SENDB = 1;
  8505  0FCB  0023               	movlb	3	; select bank3
  8506  0FCC  30FF               	movlw	255
  8507  0FCD  159E               	bsf	30,3
  8508                           
  8509                           ;lin.c: 1278: TXREG = 0xFF;
  8510  0FCE  009A               	movwf	26	;volatile
  8511                           
  8512                           ;lin.c: 1279: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
  8513  0FCF  300F               	movlw	15
  8514  0FD0  0020               	movlb	0	; select bank0
  8515  0FD1  05CC               	andwf	__ELINMIntStatus,f
  8516                           
  8517                           ;lin.c: 1280: _ELINMIntStatus.ELINMINTSTS.TX = 1;
  8518  0FD2  144C               	bsf	__ELINMIntStatus,0
  8519                           
  8520                           ;lin.c: 1281: _ELINMIntStatus1.ELINMINTSTS.HEADER = 1;
  8521  0FD3  0021               	movlb	1	; select bank1
  8522  0FD4  14D2               	bsf	__ELINMIntStatus1^(0+128),1
  8523                           
  8524                           ;lin.c: 1282: _ELINMIntStatus1.ELINMINTSTS.FRAME = 1;
  8525  0FD5  1552               	bsf	__ELINMIntStatus1^(0+128),2
  8526                           
  8527                           ;lin.c: 1283: _ELINMIntReadBack = 0x00;
  8528  0FD6  01D1               	clrf	__ELINMIntReadBack^(0+128)
  8529                           
  8530                           ;lin.c: 1284: _ELINMIntStatus.ELINMINTSTS.IDLE = 0;
  8531  0FD7  0020               	movlb	0	; select bank0
  8532  0FD8  11CC               	bcf	__ELINMIntStatus,3
  8533  0FD9  0008               	return
  8534  0FDA                     __end_of__ELINMIntSendMessage:	
  8535  0FDA                     __ptext2064:	
  8536 ;; =============== function _Oscill_Source_Block ends ============
  8537                           
  8538                           
  8539 ;; *************** function __ELINMIntCalcIDParity *****************
  8540 ;; Defined at:
  8541 ;;		line 1051 in file "../lin.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;  ELINM_idtr      1    wreg     struct ELINMINT_ID
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  ELINM_idtr      1   12[BANK0 ] struct ELINMINT_ID
  8546 ;; Return value:  Size  Location     Type
  8547 ;;                  1    wreg      unsigned char 
  8548 ;; Registers used:
  8549 ;;		wreg, status,2, status,0
  8550 ;; Tracked objects:
  8551 ;;		On entry : 1F/0
  8552 ;;		On exit  : 1F/0
  8553 ;;		Unchanged: FFFE0/0
  8554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8555 ;;      Params:         0       0       0       0       0       0       0       0
  8556 ;;      Locals:         0       1       0       0       0       0       0       0
  8557 ;;      Temps:          0       0       0       0       0       0       0       0
  8558 ;;      Totals:         0       1       0       0       0       0       0       0
  8559 ;;Total ram usage:        1 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    4
  8562 ;; This function calls:
  8563 ;;		Nothing
  8564 ;; This function is called by:
  8565 ;;		__ELINMIntSendMessage
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568  0FDA                     __ELINMIntCalcIDParity:	
  8569                           
  8570                           ; Regs used in __ELINMIntCalcIDParity: [wreg+status,2+status,0]
  8571                           ;__ELINMIntCalcIDParity@ELINM_idtr stored from wreg
  8572  0FDA  00AC               	movwf	__ELINMIntCalcIDParity@ELINM_idtr
  8573                           
  8574                           ;lin.c: 1053: ELINM_idtr.ID &= 0x3F;
  8575  0FDB  303F               	movlw	63
  8576  0FDC  05AC               	andwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8577                           
  8578                           ;lin.c: 1056: if( ELINM_idtr.IDbits.ID0)
  8579  0FDD  1C2C               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,0
  8580  0FDE  2FE1               	goto	l11661
  8581                           
  8582                           ;lin.c: 1059: {
  8583                           ;lin.c: 1061: ELINM_idtr.ID ^= 0x40;
  8584  0FDF  3040               	movlw	64
  8585  0FE0  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8586  0FE1                     l11661:	
  8587                           
  8588                           ;lin.c: 1064: }
  8589                           ;lin.c: 1067: if( ELINM_idtr.IDbits.ID1 )
  8590  0FE1  1CAC               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
  8591  0FE2  2FE5               	goto	l11662
  8592                           
  8593                           ;lin.c: 1070: {
  8594                           ;lin.c: 1072: ELINM_idtr.ID ^= 0x40;
  8595  0FE3  3040               	movlw	64
  8596  0FE4  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8597  0FE5                     l11662:	
  8598                           
  8599                           ;lin.c: 1075: }
  8600                           ;lin.c: 1078: if( ELINM_idtr.IDbits.ID2 )
  8601  0FE5  1D2C               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,2
  8602  0FE6  2FE9               	goto	l11663
  8603                           
  8604                           ;lin.c: 1081: {
  8605                           ;lin.c: 1083: ELINM_idtr.ID ^= 0x40;
  8606  0FE7  3040               	movlw	64
  8607  0FE8  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8608  0FE9                     l11663:	
  8609                           
  8610                           ;lin.c: 1086: }
  8611                           ;lin.c: 1089: if( ELINM_idtr.IDbits.ID4 )
  8612  0FE9  1E2C               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
  8613  0FEA  2FED               	goto	l11664
  8614                           
  8615                           ;lin.c: 1092: {
  8616                           ;lin.c: 1094: ELINM_idtr.ID ^= 0x40;
  8617  0FEB  3040               	movlw	64
  8618  0FEC  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8619  0FED                     l11664:	
  8620                           
  8621                           ;lin.c: 1097: }
  8622                           ;lin.c: 1100: ELINM_idtr.IDbits.ID7 = 1;
  8623  0FED  17AC               	bsf	__ELINMIntCalcIDParity@ELINM_idtr,7
  8624                           
  8625                           ;lin.c: 1103: if( ELINM_idtr.IDbits.ID1 )
  8626  0FEE  1CAC               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
  8627  0FEF  2FF2               	goto	l11665
  8628                           
  8629                           ;lin.c: 1106: {
  8630                           ;lin.c: 1108: ELINM_idtr.ID ^= 0x80;
  8631  0FF0  3080               	movlw	128
  8632  0FF1  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8633  0FF2                     l11665:	
  8634                           
  8635                           ;lin.c: 1111: }
  8636                           ;lin.c: 1114: if( ELINM_idtr.IDbits.ID3 )
  8637  0FF2  1DAC               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,3
  8638  0FF3  2FF6               	goto	l11666
  8639                           
  8640                           ;lin.c: 1117: {
  8641                           ;lin.c: 1119: ELINM_idtr.ID ^= 0x80;
  8642  0FF4  3080               	movlw	128
  8643  0FF5  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8644  0FF6                     l11666:	
  8645                           
  8646                           ;lin.c: 1122: }
  8647                           ;lin.c: 1125: if( ELINM_idtr.IDbits.ID4 )
  8648  0FF6  1E2C               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
  8649  0FF7  2FFA               	goto	l11667
  8650                           
  8651                           ;lin.c: 1128: {
  8652                           ;lin.c: 1130: ELINM_idtr.ID ^= 0x80;
  8653  0FF8  3080               	movlw	128
  8654  0FF9  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8655  0FFA                     l11667:	
  8656                           
  8657                           ;lin.c: 1133: }
  8658                           ;lin.c: 1136: if( ELINM_idtr.IDbits.ID5 )
  8659  0FFA  1EAC               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,5
  8660  0FFB  2FFE               	goto	l11668
  8661                           
  8662                           ;lin.c: 1139: {
  8663                           ;lin.c: 1141: ELINM_idtr.ID ^= 0x80;
  8664  0FFC  3080               	movlw	128
  8665  0FFD  06AC               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
  8666  0FFE                     l11668:	
  8667                           
  8668                           ;lin.c: 1144: }
  8669                           ;lin.c: 1147: return ( ( BYTE )ELINM_idtr.ID );
  8670  0FFE  082C               	movf	__ELINMIntCalcIDParity@ELINM_idtr,w
  8671  0FFF  0008               	return
  8672  1000                     __end_of__ELINMIntCalcIDParity:	
  8673                           
  8674                           	psect	text2033
  8675  1B08                     __ptext2033:	
  8676 ;; =============== function _NegativeAnswer ends ============
  8677                           
  8678                           
  8679 ;; *************** function _init_bldc *****************
  8680 ;; Defined at:
  8681 ;;		line 210 in file "../bldc.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;		None
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;		None
  8686 ;; Return value:  Size  Location     Type
  8687 ;;		None               void
  8688 ;; Registers used:
  8689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8690 ;; Tracked objects:
  8691 ;;		On entry : 1F/2
  8692 ;;		On exit  : 1F/0
  8693 ;;		Unchanged: FFFE0/0
  8694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8695 ;;      Params:         0       0       0       0       0       0       0       0
  8696 ;;      Locals:         0       0       0       0       0       0       0       0
  8697 ;;      Temps:          0       0       0       0       0       0       0       0
  8698 ;;      Totals:         0       0       0       0       0       0       0       0
  8699 ;;Total ram usage:        0 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:    7
  8702 ;; This function calls:
  8703 ;;		_InitMotorRun
  8704 ;; This function is called by:
  8705 ;;		_system_init
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708  1B08                     _init_bldc:	
  8709                           
  8710                           ;bldc.c: 218: PSTR1CON = 0;
  8711                           
  8712                           ; Regs used in _init_bldc: [wreg-status,0+pclath+cstack]
  8713  1B08  0025               	movlb	5	; select bank5
  8714  1B09  0196               	clrf	22	;volatile
  8715                           
  8716                           ;bldc.c: 222: CM1CON0 = 0x80;
  8717  1B0A  3080               	movlw	128
  8718  1B0B  0022               	movlb	2	; select bank2
  8719  1B0C  0091               	movwf	17	;volatile
  8720                           
  8721                           ;bldc.c: 228: CM1CON1 = 0x00;
  8722  1B0D  0192               	clrf	18	;volatile
  8723                           
  8724                           ;bldc.c: 230: C1IE = 0;
  8725  1B0E  0021               	movlb	1	; select bank1
  8726  1B0F  3087               	movlw	135
  8727  1B10  1292               	bcf	18,5
  8728                           
  8729                           ;bldc.c: 235: PWM1CON = 0x87;
  8730  1B11  0025               	movlb	5	; select bank5
  8731  1B12  0094               	movwf	20	;volatile
  8732                           
  8733                           ;bldc.c: 239: CCP1AS = 0x800;
  8734  1B13  0195               	clrf	21	;volatile
  8735                           
  8736                           ;bldc.c: 240: CCP1CON = 0x0C;
  8737  1B14  300C               	movlw	12
  8738  1B15  0093               	movwf	19	;volatile
  8739                           
  8740                           ;bldc.c: 246: CCPR1L = 0;
  8741  1B16  0191               	clrf	17	;volatile
  8742                           
  8743                           ;bldc.c: 248: CCP2IE = 0;
  8744  1B17  0021               	movlb	1	; select bank1
  8745  1B18  3004               	movlw	4
  8746  1B19  1012               	bcf	18,0
  8747                           
  8748                           ;bldc.c: 249: CCP2CON = 0x04;
  8749  1B1A  0025               	movlb	5	; select bank5
  8750  1B1B  009A               	movwf	26	;volatile
  8751                           
  8752                           ;bldc.c: 250: CCPR2L = 0xff;
  8753  1B1C  30FF               	movlw	255
  8754  1B1D  0098               	movwf	24	;volatile
  8755                           
  8756                           ;bldc.c: 251: CCPR2H = 0xff;
  8757  1B1E  0099               	movwf	25	;volatile
  8758                           
  8759                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  8760  1B1F  3064               	movlw	100
  8761  1B20  0020               	movlb	0	; select bank0
  8762  1B21  009B               	movwf	27	;volatile
  8763                           
  8764                           ;bldc.c: 255: T2CON = 0x05;
  8765  1B22  3005               	movlw	5
  8766  1B23  009C               	movwf	28	;volatile
  8767                           
  8768                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  8769  1B24  3028               	movlw	40
  8770  1B25  0021               	movlb	1	; select bank1
  8771  1B26  00DB               	movwf	_ui8_BlankingCount^(0+128)
  8772                           
  8773                           ;bldc.c: 264: TMR2IE = 1;
  8774  1B27  1491               	bsf	17,1
  8775                           
  8776                           ;bldc.c: 267: MotorFlags.b = 0;
  8777  1B28  0020               	movlb	0	; select bank0
  8778  1B29  01CB               	clrf	_MotorFlags
  8779                           
  8780                           ;bldc.c: 270: InitMotorRun( );
  8781  1B2A  3184  2C0F         	ljmp	l30475
  8782  1B2C                     __end_of_init_bldc:	
  8783                           
  8784                           	psect	text2038
  8785  1AC6                     __ptext2038:	
  8786 ;; =============== function _InitMotorRun ends ============
  8787                           
  8788                           
  8789 ;; *************** function _FILTER_Init *****************
  8790 ;; Defined at:
  8791 ;;		line 228 in file "../adc.c"
  8792 ;; Parameters:    Size  Location     Type
  8793 ;;		None
  8794 ;; Auto vars:     Size  Location     Type
  8795 ;;		None
  8796 ;; Return value:  Size  Location     Type
  8797 ;;		None               void
  8798 ;; Registers used:
  8799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8800 ;; Tracked objects:
  8801 ;;		On entry : 1F/2
  8802 ;;		On exit  : 1F/1
  8803 ;;		Unchanged: 0/0
  8804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8805 ;;      Params:         0       0       0       0       0       0       0       0
  8806 ;;      Locals:         0       0       0       0       0       0       0       0
  8807 ;;      Temps:          0       0       0       0       0       0       0       0
  8808 ;;      Totals:         0       0       0       0       0       0       0       0
  8809 ;;Total ram usage:        0 bytes
  8810 ;; Hardware stack levels used:    1
  8811 ;; Hardware stack levels required when called:    5
  8812 ;; This function calls:
  8813 ;;		_ADC_Wait
  8814 ;;		_ADC_Read
  8815 ;; This function is called by:
  8816 ;;		_system_init
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819  1AC6                     _FILTER_Init:	
  8820                           
  8821                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  8822                           
  8823                           ; Regs used in _FILTER_Init: [wreg+fsr1l-status,0+pclath+cstack]
  8824  1AC6  0021               	movlb	1	; select bank1
  8825  1AC7  01E7               	clrf	_windowPtr1^(0+128)
  8826  1AC8                     l30461:	
  8827  1AC8  3008               	movlw	8
  8828  1AC9  0267               	subwf	_windowPtr1^(0+128),w
  8829  1ACA  1803               	btfsc	3,0
  8830  1ACB  0008               	return
  8831                           
  8832                           ;adc.c: 232: {
  8833                           ;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  8834  1ACC  3031               	movlw	49
  8835  1ACD  009D               	movwf	29	;volatile
  8836                           
  8837                           ;adc.c: 235: ADC_Wait( );
  8838  1ACE  3183  232D  319A   	fcall	_ADC_Wait
  8839                           
  8840                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  8841  1AD1  3183  2346  319A   	fcall	_ADC_Read
  8842  1AD4  082D               	movf	?_ADC_Read+1,w
  8843  1AD5  00D2               	movwf	_ui16_Ubat_bldc+1	;volatile
  8844  1AD6  082C               	movf	?_ADC_Read,w
  8845  1AD7  00D1               	movwf	_ui16_Ubat_bldc	;volatile
  8846                           
  8847                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  8848  1AD8  0021               	movlb	1	; select bank1
  8849  1AD9  3567               	lslf	_windowPtr1^(0+128),w
  8850  1ADA  3E40               	addlw	_inputArray1& (0+255)
  8851  1ADB  0086               	movwf	6
  8852  1ADC  3002               	movlw	2	; select bank4/5
  8853  1ADD  0087               	movwf	7
  8854  1ADE  305E               	movlw	94
  8855  1ADF  3FC0               	movwi [0]fsr1
  8856  1AE0  3001               	movlw	1
  8857  1AE1  3FC1               	movwi [1]fsr1
  8858  1AE2  0AE7               	incf	_windowPtr1^(0+128),f
  8859  1AE3  2AC8               	goto	l30461
  8860  1AE4                     __end_of_FILTER_Init:	
  8861                           
  8862                           	psect	text2039
  8863  116A                     __ptext2039:	
  8864 ;; =============== function _FILTER_Init ends ============
  8865                           
  8866                           
  8867 ;; *************** function _BVH2_Appl_Layer *****************
  8868 ;; Defined at:
  8869 ;;		line 332 in file "../T_Link/BVH2_Appl_Layer.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  Sb3_Sum1        2   28[BANK4 ] short 
  8874 ;;  Sb3_Product1    2    0        unsigned short 
  8875 ;;  Sb4_PI_sum      2   30[BANK4 ] short 
  8876 ;;  Sb2_Switch2     2   25[BANK4 ] unsigned short 
  8877 ;;  Sb2_Error       2   23[BANK4 ] short 
  8878 ;;  Sb2_Switch5     2   17[BANK4 ] unsigned short 
  8879 ;;  Sb1_Logical_    1   27[BANK4 ] unsigned char 
  8880 ;;  Sb2_Logical_    1   22[BANK4 ] unsigned char 
  8881 ;;  Sb1_Logical_    1   21[BANK4 ] unsigned char 
  8882 ;;  Sb1_Logical_    1   20[BANK4 ] unsigned char 
  8883 ;;  Cb24_Reset      1   19[BANK4 ] unsigned char 
  8884 ;;  Sb1_Logical_    1    8[BANK4 ] unsigned char 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;		None               void
  8887 ;; Registers used:
  8888 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 1F/1
  8891 ;;		On exit  : 1F/2
  8892 ;;		Unchanged: FFE00/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8894 ;;      Params:         0       0       0       0       0       0       0       0
  8895 ;;      Locals:         0       0       0       0       0      32       0       0
  8896 ;;      Temps:          0       6       0       0       0       0       0       0
  8897 ;;      Totals:         0       6       0       0       0      32       0       0
  8898 ;;Total ram usage:       38 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    5
  8901 ;; This function calls:
  8902 ;;		_Cb44_Pic_etat_monitor_node_fcn1
  8903 ;;		_Cb34_PWM_Detection_node_fcn1
  8904 ;;		_Cb56_UbatHandling_node_fcn2
  8905 ;;		_Cb1_Current_An___High_node_fcn1
  8906 ;;		___lmul
  8907 ;;		___aldiv
  8908 ;;		___wmul
  8909 ;; This function is called by:
  8910 ;;		_main
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913  116A                     _BVH2_Appl_Layer:	
  8914                           
  8915                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;
  8916                           ;BVH2_Appl_Layer.c: 335: static UInt16 Cb19_Counter = 0;
  8917                           ;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;
  8918                           ;BVH2_Appl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;
  8919                           ;BVH2_Appl_Layer.c: 338: static UInt8 Cb24_RestartCounter = 0;
  8920                           ;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;
  8921                           ;BVH2_Appl_Layer.c: 340: static UInt8 Cb9_StateCnt = 0;
  8922                           ;BVH2_Appl_Layer.c: 342: static struct tag_SIBFS_Current_Analysis_low_ SIBFS_Current_Ana
      +                          lysis_low_b = {
  8923                           ;BVH2_Appl_Layer.c: 343: 0 ,
  8924                           
  8925                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8926  116A  29A6               	goto	l29805
  8927  116B                     l29745:	
  8928                           
  8929                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
  8930  116B  3000               	movlw	0
  8931  116C  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  8932  116D  3033               	movlw	51
  8933  116E                     L26:	
  8934  116E  1903               	skipnz
  8935  116F  0226               	subwf	_Cb44_StateCnt^(0+128),w
  8936  1170  1C03               	skipc
  8937  1171  297C               	goto	l29753
  8938                           
  8939                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  8940  1172  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8941  1173  39F8               	andlw	-8
  8942  1174  3805               	iorlw	5
  8943  1175  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8944                           
  8945                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
  8946  1176  0022               	movlb	2	; select bank2
  8947  1177  01C7               	clrf	_Cb44_oShutoff^(0+256)
  8948  1178                     l29751:	
  8949                           
  8950                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
  8951  1178  0021               	movlb	1	; select bank1
  8952  1179  01A6               	clrf	_Cb44_StateCnt^(0+128)
  8953  117A  01A7               	clrf	(_Cb44_StateCnt+1)^(0+128)
  8954                           
  8955                           ;BVH2_Appl_Layer.c: 422: }
  8956  117B  29BB               	goto	l29807
  8957  117C                     l29753:	
  8958                           
  8959                           ;BVH2_Appl_Layer.c: 423: else {
  8960                           ;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 1 ;
  8961  117C  0021               	movlb	1	; select bank1
  8962  117D  0AA6               	incf	_Cb44_StateCnt^(0+128),f
  8963  117E  1903               	skipnz
  8964  117F  0AA7               	incf	(_Cb44_StateCnt+1)^(0+128),f
  8965  1180  29BB               	goto	l29807
  8966  1181                     l29755:	
  8967                           
  8968                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
  8969  1181  270A  3191         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  8970                           
  8971                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
  8972  1183  0C4D               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8973  1184  27E3  3191         	fcall	PL35	;call to abstracted procedure
  8974  1186  1D03               	btfss	3,2
  8975  1187  297C               	goto	l29753
  8976  1188  29BB               	goto	l29807
  8977  1189                     l29761:	
  8978                           
  8979                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
  8980  1189  270A  3191         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  8981                           
  8982                           ;BVH2_Appl_Layer.c: 445: break;
  8983  118B  29BB               	goto	l29807
  8984  118C                     l29763:	
  8985                           
  8986                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
  8987  118C  3000               	movlw	0
  8988  118D  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
  8989  118E  3010               	movlw	16
  8990  118F  296E               	goto	L26
  8991  1190                     l29779:	
  8992                           
  8993                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
  8994  1190  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  8995  1191  39F8               	andlw	-8
  8996  1192  3803               	iorlw	3
  8997  1193  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  8998                           
  8999                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
  9000  1194  0022               	movlb	2	; select bank2
  9001  1195  01C7               	clrf	_Cb44_oShutoff^(0+256)
  9002                           
  9003                           ;BVH2_Appl_Layer.c: 484: }
  9004  1196  29BB               	goto	l29807
  9005  1197                     l29793:	
  9006                           
  9007                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
  9008  1197  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9009  1198  39F8               	andlw	-8
  9010  1199  3806               	iorlw	6
  9011  119A  29A4               	goto	L6
  9012  119B                     l15735:	
  9013                           ;BVH2_Appl_Layer.c: 515: }
  9014                           ;BVH2_Appl_Layer.c: 516: default: {
  9015                           
  9016                           
  9017                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
  9018  119B  1ACD               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
  9019  119C  29BB               	goto	l29807
  9020                           
  9021                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
  9022  119D  16CD               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
  9023                           
  9024                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
  9025  119E  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9026  119F  1903               	btfsc	3,2
  9027  11A0  29BB               	goto	l29807
  9028                           
  9029                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
  9030  11A1  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9031  11A2  39F8               	andlw	-8
  9032  11A3  3804               	iorlw	4
  9033  11A4                     L6:	
  9034  11A4  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  9035  11A5  2978               	goto	l29751
  9036  11A6                     l29805:	
  9037  11A6  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  9038  11A7  3907               	andlw	7
  9039                           
  9040                           ; Switch size 1, requested type "space"
  9041                           ; Number of cases is 6, Range of values is 1 to 6
  9042                           ; switch strategies available:
  9043                           ; Name         Instructions Cycles
  9044                           ; simple_byte           19    10 (average)
  9045                           ; direct_byte           21     9 (fixed)
  9046                           ; jumptable            263     9 (fixed)
  9047                           ;	Chosen strategy is simple_byte
  9048  11A8  3A01               	xorlw	1	; case 1
  9049  11A9  1903               	skipnz
  9050  11AA  2997               	goto	l29793
  9051  11AB  3A03               	xorlw	3	; case 2
  9052  11AC  1903               	skipnz
  9053  11AD  2990               	goto	l29779
  9054  11AE  3A01               	xorlw	1	; case 3
  9055  11AF  1903               	skipnz
  9056  11B0  2989               	goto	l29761
  9057  11B1  3A07               	xorlw	7	; case 4
  9058  11B2  1903               	skipnz
  9059  11B3  296B               	goto	l29745
  9060  11B4  3A01               	xorlw	1	; case 5
  9061  11B5  1903               	skipnz
  9062  11B6  2981               	goto	l29755
  9063  11B7  3A03               	xorlw	3	; case 6
  9064  11B8  1903               	skipnz
  9065  11B9  298C               	goto	l29763
  9066  11BA  299B               	goto	l15735
  9067  11BB                     l29807:	
  9068                           
  9069                           ;BVH2_Appl_Layer.c: 538: Cb34_idPWM = ui8_PWM_dc_mat;
  9070  11BB  0021               	movlb	1	; select bank1
  9071  11BC  085E               	movf	_ui8_PWM_dc_mat^(0+128),w
  9072  11BD  0020               	movlb	0	; select bank0
  9073  11BE  00CA               	movwf	_Cb34_idPWM
  9074                           
  9075                           ;BVH2_Appl_Layer.c: 543: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
  9076  11BF  0021               	movlb	1	; select bank1
  9077  11C0  1A4C               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
  9078  11C1  29C7               	goto	l29831
  9079  11C2  29D5               	goto	l15738
  9080  11C3                     l29813:	
  9081                           
  9082                           ;BVH2_Appl_Layer.c: 549: Cb34_PWM_Detection_node_fcn1();
  9083  11C3  3190  20EB  3191   	fcall	_Cb34_PWM_Detection_node_fcn1
  9084                           
  9085                           ;BVH2_Appl_Layer.c: 552: break;
  9086  11C6  29E3               	goto	l29847
  9087  11C7                     l29831:	
  9088  11C7  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  9089  11C8  390F               	andlw	15
  9090                           
  9091                           ; Switch size 1, requested type "space"
  9092                           ; Number of cases is 8, Range of values is 1 to 8
  9093                           ; switch strategies available:
  9094                           ; Name         Instructions Cycles
  9095                           ; direct_byte           25     9 (fixed)
  9096                           ; simple_byte           25    13 (average)
  9097                           ; jumptable            263     9 (fixed)
  9098                           ;	Chosen strategy is direct_byte
  9099  11C9  3EFF               	addlw	-1
  9100  11CA  1C03               	skipc
  9101  11CB  29E3               	goto	l29847
  9102  11CC  0084               	movwf	4
  9103  11CD  3008               	movlw	8
  9104  11CE  0204               	subwf	4,w
  9105  11CF  1803               	skipnc
  9106  11D0  29E3               	goto	l29847
  9107  11D1  3180               	movlp	high S31595
  9108  11D2  3504               	lslf	4,w
  9109  11D3  3ECE               	addlw	low S31595
  9110  11D4  0082               	movwf	2
  9111  11D5                     l15738:	
  9112                           
  9113                           ;BVH2_Appl_Layer.c: 615: else {
  9114                           ;BVH2_Appl_Layer.c: 616: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling = 1;
  9115  11D5  164C               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
  9116                           
  9117                           ;BVH2_Appl_Layer.c: 619: if (ui8_ResetMatlab == 1) {
  9118  11D6  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  9119  11D7  29D9               	goto	u9861
  9120  11D8  29DA               	goto	l29835
  9121  11D9                     u9861:	
  9122  11D9  29E3               	goto	l29847
  9123  11DA                     l29835:	
  9124                           
  9125                           ;BVH2_Appl_Layer.c: 621: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
  9126  11DA  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  9127  11DB  39F0               	andlw	-16
  9128  11DC  3801               	iorlw	1
  9129                           
  9130                           ;BVH2_Appl_Layer.c: 622: Cb34_odPumpOff = 1;
  9131                           
  9132                           ;BVH2_Appl_Layer.c: 623: Cb34_odFixedValueSel = 0;
  9133  11DD  3191  215E  3191   	fcall	PL32	;call to abstracted procedure
  9134                           
  9135                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedLowValueSel = 0;
  9136  11E0  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
  9137                           
  9138                           ;BVH2_Appl_Layer.c: 625: Cb34_oPWM_SC_Alarm = 0;
  9139  11E1  01C3               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
  9140                           
  9141                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_Alarm = 0;
  9142  11E2  01C2               	clrf	_Cb34_oPWM_Alarm^(0+256)
  9143  11E3                     l29847:	
  9144                           
  9145                           ;BVH2_Appl_Layer.c: 627: }
  9146                           ;BVH2_Appl_Layer.c: 628: }
  9147                           ;BVH2_Appl_Layer.c: 633: bool_PWMin_Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
  9148  11E3  0022               	movlb	2	; select bank2
  9149  11E4  0843               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
  9150  11E5  00CD               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
  9151                           
  9152                           ;BVH2_Appl_Layer.c: 638: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
  9153  11E6  0021               	movlb	1	; select bank1
  9154  11E7  1DCE               	btfss	_SIBFS_UbatHandling_b^(0+128),3
  9155  11E8  2A08               	goto	l15751
  9156                           
  9157                           ;BVH2_Appl_Layer.c: 642: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
  9158  11E9  1E4E               	btfss	_SIBFS_UbatHandling_b^(0+128),4
  9159  11EA  29F6               	goto	l15752
  9160                           
  9161                           ;BVH2_Appl_Layer.c: 644: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
  9162  11EB  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
  9163  11EC  39F8               	andlw	-8
  9164  11ED  3802               	iorlw	2
  9165  11EE  00CE               	movwf	_SIBFS_UbatHandling_b^(0+128)
  9166                           
  9167                           ;BVH2_Appl_Layer.c: 647: if (((UInt8)ui8_BattVolt_mat) < 222) {
  9168  11EF  30DE               	movlw	222
  9169  11F0  0240               	subwf	_ui8_BattVolt_mat^(0+128),w
  9170  11F1  1803               	skipnc
  9171  11F2  2A0E               	goto	l15759
  9172  11F3                     l29857:	
  9173                           
  9174                           ;BVH2_Appl_Layer.c: 648: Cb56_UbatHandling_node_fcn2();
  9175  11F3  2760  3191         	fcall	_Cb56_UbatHandling_node_fcn2
  9176  11F5  2A0E               	goto	l15759
  9177  11F6                     l15752:	
  9178                           
  9179                           ;BVH2_Appl_Layer.c: 653: else {
  9180                           ;BVH2_Appl_Layer.c: 655: if (SIBFS_UbatHandling_b.Cb59_SaturationLow) {
  9181  11F6  1ECE               	btfss	_SIBFS_UbatHandling_b^(0+128),5
  9182  11F7  2A01               	goto	l15755
  9183                           
  9184                           ;BVH2_Appl_Layer.c: 657: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
  9185  11F8  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
  9186  11F9  39F8               	andlw	-8
  9187  11FA  3803               	iorlw	3
  9188  11FB  00CE               	movwf	_SIBFS_UbatHandling_b^(0+128)
  9189                           
  9190                           ;BVH2_Appl_Layer.c: 660: if (((UInt8)ui8_BattVolt_mat) > 49) {
  9191  11FC  3032               	movlw	50
  9192  11FD  0240               	subwf	_ui8_BattVolt_mat^(0+128),w
  9193  11FE  1803               	btfsc	3,0
  9194  11FF  29F3               	goto	l29857
  9195  1200  2A0E               	goto	l15759
  9196  1201                     l15755:	
  9197                           
  9198                           ;BVH2_Appl_Layer.c: 666: else {
  9199                           ;BVH2_Appl_Layer.c: 668: if (SIBFS_UbatHandling_b.Cb60_NormalUbat) {
  9200  1201  1F4E               	btfss	_SIBFS_UbatHandling_b^(0+128),6
  9201  1202  2A0E               	goto	l15759
  9202                           
  9203                           ;BVH2_Appl_Layer.c: 670: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
  9204  1203  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
  9205  1204  39F8               	andlw	-8
  9206  1205  3801               	iorlw	1
  9207  1206  00CE               	movwf	_SIBFS_UbatHandling_b^(0+128)
  9208  1207  29F3               	goto	l29857
  9209  1208                     l15751:	
  9210                           
  9211                           ;BVH2_Appl_Layer.c: 680: else {
  9212                           ;BVH2_Appl_Layer.c: 681: SIBFS_UbatHandling_b.Cb57_Ubat_Handling = 1;
  9213  1208  15CE               	bsf	_SIBFS_UbatHandling_b^(0+128),3
  9214                           
  9215                           ;BVH2_Appl_Layer.c: 684: if (ui8_ResetMatlab == 1) {
  9216  1209  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  9217  120A  2A0E               	goto	l15759
  9218                           
  9219                           ;BVH2_Appl_Layer.c: 686: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
  9220  120B  174E               	bsf	_SIBFS_UbatHandling_b^(0+128),6
  9221                           
  9222                           ;BVH2_Appl_Layer.c: 687: Cb56_odPumpOff = 0;
  9223                           
  9224                           ;BVH2_Appl_Layer.c: 688: Cb56_odFixedValueSel = 0;
  9225                           
  9226                           ;BVH2_Appl_Layer.c: 689: Cb56_oUbat_Alarm_High = 0;
  9227  120C  27EA  3191         	fcall	PL36	;call to abstracted procedure
  9228  120E                     l15759:	
  9229                           
  9230                           ;BVH2_Appl_Layer.c: 690: }
  9231                           ;BVH2_Appl_Layer.c: 691: }
  9232                           ;BVH2_Appl_Layer.c: 694: Sb1_Logical_Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueS
      +                          el));
  9233  120E  0024               	movlb	4	; select bank4
  9234  120F  01A9               	clrf	_BVH2_Appl_Layer$18236^(0+512)
  9235  1210  0022               	movlb	2	; select bank2
  9236  1211  0846               	movf	_Cb34_odPumpOff^(0+256),w
  9237  1212  1903               	btfsc	3,2
  9238  1213  2A1B               	goto	l29881
  9239  1214  0021               	movlb	1	; select bank1
  9240  1215  08C9               	movf	_Cb56_odFixedValueSel^(0+128),f
  9241  1216  1D03               	skipz
  9242  1217  2A1B               	goto	l29881
  9243  1218  0024               	movlb	4	; select bank4
  9244  1219  01A9               	clrf	_BVH2_Appl_Layer$18236^(0+512)
  9245  121A  0AA9               	incf	_BVH2_Appl_Layer$18236^(0+512),f
  9246  121B                     l29881:	
  9247  121B  0024               	movlb	4	; select bank4
  9248  121C  0829               	movf	_BVH2_Appl_Layer$18236^(0+512),w
  9249  121D  00A8               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512)
  9250                           
  9251                           ;BVH2_Appl_Layer.c: 699: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
  9252  121E  0021               	movlb	1	; select bank1
  9253  121F  1CC7               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9254  1220  2A30               	goto	l15763
  9255                           
  9256                           ;BVH2_Appl_Layer.c: 701: if (Cb51_Counter > 80) {
  9257  1221  3051               	movlw	81
  9258  1222  0022               	movlb	2	; select bank2
  9259  1223  023A               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+256),w
  9260  1224  1C03               	skipc
  9261  1225  2A2E               	goto	l29891
  9262                           
  9263                           ;BVH2_Appl_Layer.c: 704: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
  9264  1226  0021               	movlb	1	; select bank1
  9265  1227  10C7               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9266  1228                     L8:	
  9267                           
  9268                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  9269  1228  15C7               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9270                           
  9271                           ;BVH2_Appl_Layer.c: 706: Cb51_oTempRedAlarm = 0;
  9272  1229  0022               	movlb	2	; select bank2
  9273  122A  01BC               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  9274                           
  9275                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempAlarm = 0;
  9276  122B  01BB               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  9277                           
  9278                           ;BVH2_Appl_Layer.c: 708: Cb51_odPumpOff = 0;
  9279  122C  01BD               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  9280  122D  2A5E               	goto	L7
  9281  122E                     l29891:	
  9282                           ;BVH2_Appl_Layer.c: 710: }
  9283                           
  9284                           ;BVH2_Appl_Layer.c: 709: Cb51_Counter = 0 ;
  9285                           
  9286                           
  9287                           ;BVH2_Appl_Layer.c: 711: else {
  9288                           ;BVH2_Appl_Layer.c: 712: Cb51_Counter = Cb51_Counter + 1 ;
  9289  122E  0ABA               	incf	BVH2_Appl_Layer@Cb51_Counter^(0+256),f
  9290                           
  9291                           ;BVH2_Appl_Layer.c: 713: }
  9292                           ;BVH2_Appl_Layer.c: 716: }
  9293  122F  2ACB               	goto	l30003
  9294  1230                     l15763:	
  9295                           
  9296                           ;BVH2_Appl_Layer.c: 717: else {
  9297                           ;BVH2_Appl_Layer.c: 719: if (SIBFS_Temperature_Alarm_b.Cb53_reset) {
  9298  1230  1D47               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9299  1231  2A35               	goto	l15767
  9300                           
  9301                           ;BVH2_Appl_Layer.c: 724: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
  9302  1232  1147               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9303                           
  9304                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
  9305  1233  14C7               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  9306                           
  9307                           ;BVH2_Appl_Layer.c: 728: }
  9308  1234  2ACB               	goto	l30003
  9309  1235                     l15767:	
  9310                           
  9311                           ;BVH2_Appl_Layer.c: 729: else {
  9312                           ;BVH2_Appl_Layer.c: 731: if (SIBFS_Temperature_Alarm_b.Cb54_greenTemp) {
  9313  1235  1DC7               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9314  1236  2A49               	goto	l15769
  9315                           
  9316                           ;BVH2_Appl_Layer.c: 735: if (ui16_mat_inpTemp < 72) {
  9317  1237  3000               	movlw	0
  9318  1238  0023               	movlb	3	; select bank3
  9319  1239  0265               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  9320  123A  3048               	movlw	72
  9321  123B  1903               	skipnz
  9322  123C  0264               	subwf	_ui16_mat_inpTemp^(0+384),w
  9323  123D  1803               	skipnc
  9324  123E  2ACB               	goto	l30003
  9325                           
  9326                           ;BVH2_Appl_Layer.c: 738: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
  9327  123F  0021               	movlb	1	; select bank1
  9328  1240  11C7               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  9329                           
  9330                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
  9331  1241  1647               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9332                           
  9333                           ;BVH2_Appl_Layer.c: 740: Cb51_oTempRedAlarm = 1;
  9334  1242  0022               	movlb	2	; select bank2
  9335  1243  01BC               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  9336  1244  0ABC               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
  9337                           
  9338                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempAlarm = 1;
  9339  1245  01BB               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  9340  1246  0ABB               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
  9341                           
  9342                           ;BVH2_Appl_Layer.c: 744: Cb51_odPumpOff = 0;
  9343  1247  01BD               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  9344  1248  2ACB               	goto	l30003
  9345  1249                     l15769:	
  9346                           
  9347                           ;BVH2_Appl_Layer.c: 749: else {
  9348                           ;BVH2_Appl_Layer.c: 751: if (SIBFS_Temperature_Alarm_b.Cb55_redTemp) {
  9349  1249  1E47               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9350  124A  2A56               	goto	l15772
  9351                           
  9352                           ;BVH2_Appl_Layer.c: 755: if (ui16_mat_inpTemp > 185) {
  9353  124B  3000               	movlw	0
  9354  124C  0023               	movlb	3	; select bank3
  9355  124D  0265               	subwf	(_ui16_mat_inpTemp+1)^(0+384),w
  9356  124E  30BA               	movlw	186
  9357  124F  1903               	skipnz
  9358  1250  0264               	subwf	_ui16_mat_inpTemp^(0+384),w
  9359  1251  1C03               	skipc
  9360  1252  2ACB               	goto	l30003
  9361                           
  9362                           ;BVH2_Appl_Layer.c: 758: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
  9363  1253  0021               	movlb	1	; select bank1
  9364  1254  1247               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  9365  1255  2A28               	goto	L8
  9366  1256                     l15772:	
  9367                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  9368                           
  9369                           
  9370                           ;BVH2_Appl_Layer.c: 768: else {
  9371                           ;BVH2_Appl_Layer.c: 770: if (!(SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm)) {
  9372  1256  1847               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  9373  1257  2ACB               	goto	l30003
  9374                           
  9375                           ;BVH2_Appl_Layer.c: 771: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
  9376  1258  1447               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  9377                           
  9378                           ;BVH2_Appl_Layer.c: 775: if (ui8_ResetMatlab != 0) {
  9379  1259  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9380  125A  1903               	btfsc	3,2
  9381  125B  2ACB               	goto	l30003
  9382                           
  9383                           ;BVH2_Appl_Layer.c: 777: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
  9384  125C  1547               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  9385                           
  9386                           ;BVH2_Appl_Layer.c: 778: Cb51_Counter = 0 ;
  9387  125D  0022               	movlb	2	; select bank2
  9388  125E                     L7:	
  9389  125E  01BA               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+256)
  9390  125F  2ACB               	goto	l30003
  9391  1260                     l29915:	
  9392                           
  9393                           ;BVH2_Appl_Layer.c: 792: if (Cb1_StateCnt > 50) {
  9394  1260  3000               	movlw	0
  9395  1261  0225               	subwf	(_Cb1_StateCnt+1)^(0+128),w
  9396  1262  3033               	movlw	51
  9397  1263  1903               	skipnz
  9398  1264  0224               	subwf	_Cb1_StateCnt^(0+128),w
  9399  1265  1C03               	skipc
  9400  1266  2A6D               	goto	l29925
  9401                           
  9402                           ;BVH2_Appl_Layer.c: 795: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
  9403                           ;BVH2_Appl_Layer.c: 796: (UInt8)5;
  9404  1267  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9405                           
  9406                           ;BVH2_Appl_Layer.c: 797: Cb1_oShutoff = 0;
  9407                           
  9408                           ;BVH2_Appl_Layer.c: 798: Cb1_oCurrentAlarm = 0;
  9409  1268  27DC  3191         	fcall	PL34	;call to abstracted procedure
  9410  126A                     l29923:	
  9411                           
  9412                           ;BVH2_Appl_Layer.c: 799: Cb1_RestartCounter = 0 ;
  9413  126A  0022               	movlb	2	; select bank2
  9414  126B  01BF               	clrf	_Cb1_RestartCounter^(0+256)
  9415                           
  9416                           ;BVH2_Appl_Layer.c: 800: }
  9417  126C  2AE4               	goto	l15781
  9418  126D                     l29925:	
  9419                           
  9420                           ;BVH2_Appl_Layer.c: 801: else {
  9421                           ;BVH2_Appl_Layer.c: 802: Cb1_StateCnt = Cb1_StateCnt + 1 ;
  9422  126D  0AA4               	incf	_Cb1_StateCnt^(0+128),f
  9423  126E  1903               	skipnz
  9424  126F  0AA5               	incf	(_Cb1_StateCnt+1)^(0+128),f
  9425  1270  2AE4               	goto	l15781
  9426  1271                     l29927:	
  9427                           
  9428                           ;BVH2_Appl_Layer.c: 810: Cb1_Current_An___High_node_fcn1();
  9429  1271  271F  3191         	fcall	_Cb1_Current_An___High_node_fcn1
  9430                           
  9431                           ;BVH2_Appl_Layer.c: 811: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
  9432  1273  0E4B               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9433  1274  3903               	andlw	3
  9434  1275  3A03               	xorlw	3
  9435  1276  1D03               	btfss	3,2
  9436  1277  2A6D               	goto	l29925
  9437  1278  2AE4               	goto	l15781
  9438  1279                     l29933:	
  9439                           
  9440                           ;BVH2_Appl_Layer.c: 820: if (Cb1_RestartCounter < 10) {
  9441  1279  300A               	movlw	10
  9442  127A  0022               	movlb	2	; select bank2
  9443  127B  023F               	subwf	_Cb1_RestartCounter^(0+256),w
  9444  127C  1803               	skipnc
  9445  127D  2AE4               	goto	l15781
  9446  127E                     l29935:	
  9447                           
  9448                           ;BVH2_Appl_Layer.c: 823: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
  9449                           ;BVH2_Appl_Layer.c: 824: (UInt8)3;
  9450  127E  0021               	movlb	1	; select bank1
  9451  127F  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9452  1280  39F0               	andlw	-16
  9453  1281  3803               	iorlw	3
  9454  1282  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9455                           
  9456                           ;BVH2_Appl_Layer.c: 825: Cb1_oShutoff = 0;
  9457  1283  0022               	movlb	2	; select bank2
  9458  1284  01C1               	clrf	_Cb1_oShutoff^(0+256)
  9459                           
  9460                           ;BVH2_Appl_Layer.c: 826: Cb1_oCurrentAlarm = 1;
  9461  1285  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9462  1286  0AC0               	incf	_Cb1_oCurrentAlarm^(0+256),f
  9463  1287                     l29941:	
  9464                           
  9465                           ;BVH2_Appl_Layer.c: 827: Cb1_StateCnt = 0 ;
  9466  1287  0021               	movlb	1	; select bank1
  9467  1288  01A4               	clrf	_Cb1_StateCnt^(0+128)
  9468  1289  01A5               	clrf	(_Cb1_StateCnt+1)^(0+128)
  9469  128A  2AE4               	goto	l15781
  9470  128B                     l29943:	
  9471                           
  9472                           ;BVH2_Appl_Layer.c: 835: Cb1_Current_An___High_node_fcn1();
  9473  128B  271F  3191         	fcall	_Cb1_Current_An___High_node_fcn1
  9474                           
  9475                           ;BVH2_Appl_Layer.c: 838: break;
  9476  128D  2AE4               	goto	l15781
  9477  128E                     l29945:	
  9478                           
  9479                           ;BVH2_Appl_Layer.c: 842: if (Cb1_StateCnt > 200) {
  9480  128E  3000               	movlw	0
  9481  128F  0225               	subwf	(_Cb1_StateCnt+1)^(0+128),w
  9482  1290  30C9               	movlw	201
  9483  1291  1903               	skipnz
  9484  1292  0224               	subwf	_Cb1_StateCnt^(0+128),w
  9485  1293  1C03               	skipc
  9486  1294  2A9C               	goto	l29951
  9487                           
  9488                           ;BVH2_Appl_Layer.c: 844: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
  9489                           ;BVH2_Appl_Layer.c: 845: (UInt8)7;
  9490  1295  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9491  1296  39F0               	andlw	-16
  9492  1297  3807               	iorlw	7
  9493  1298  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9494                           
  9495                           ;BVH2_Appl_Layer.c: 846: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
  9496  1299  0022               	movlb	2	; select bank2
  9497  129A  0ABF               	incf	_Cb1_RestartCounter^(0+256),f
  9498                           
  9499                           ;BVH2_Appl_Layer.c: 847: }
  9500  129B  2AE4               	goto	l15781
  9501  129C                     l29951:	
  9502                           
  9503                           ;BVH2_Appl_Layer.c: 848: else {
  9504                           ;BVH2_Appl_Layer.c: 851: if (bool_mat_currAlarm_bldc) {
  9505  129C  0858               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  9506  129D  1903               	btfsc	3,2
  9507  129E  2A6D               	goto	l29925
  9508  129F                     l29953:	
  9509                           
  9510                           ;BVH2_Appl_Layer.c: 853: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
  9511                           ;BVH2_Appl_Layer.c: 854: (UInt8)1;
  9512  129F  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9513  12A0  39F0               	andlw	-16
  9514  12A1  3801               	iorlw	1
  9515  12A2  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9516                           
  9517                           ;BVH2_Appl_Layer.c: 855: Cb1_StateCnt = 0 ;
  9518  12A3  01A4               	clrf	_Cb1_StateCnt^(0+128)
  9519  12A4  01A5               	clrf	(_Cb1_StateCnt+1)^(0+128)
  9520                           
  9521                           ;BVH2_Appl_Layer.c: 856: Cb1_oShutoff = 1;
  9522  12A5  0022               	movlb	2	; select bank2
  9523  12A6  01C1               	clrf	_Cb1_oShutoff^(0+256)
  9524  12A7  0AC1               	incf	_Cb1_oShutoff^(0+256),f
  9525                           
  9526                           ;BVH2_Appl_Layer.c: 857: Cb1_oCurrentAlarm = 1;
  9527  12A8  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
  9528  12A9  0AC0               	incf	_Cb1_oCurrentAlarm^(0+256),f
  9529                           
  9530                           ;BVH2_Appl_Layer.c: 858: }
  9531  12AA  2AE4               	goto	l15781
  9532  12AB                     l29963:	
  9533                           
  9534                           ;BVH2_Appl_Layer.c: 872: if (!(bool_mat_currAlarm_bldc)) {
  9535  12AB  08D8               	movf	_bool_mat_currAlarm_bldc^(0+128),f
  9536  12AC  1903               	btfsc	3,2
  9537  12AD  2A7E               	goto	l29935
  9538                           
  9539                           ;BVH2_Appl_Layer.c: 880: else {
  9540                           ;BVH2_Appl_Layer.c: 881: if (Cb1_StateCnt > 1) {
  9541  12AE  3000               	movlw	0
  9542  12AF  0225               	subwf	(_Cb1_StateCnt+1)^(0+128),w
  9543  12B0  3002               	movlw	2
  9544  12B1  1903               	skipnz
  9545  12B2  0224               	subwf	_Cb1_StateCnt^(0+128),w
  9546  12B3  1803               	btfsc	3,0
  9547  12B4  2A9F               	goto	l29953
  9548  12B5  2A6D               	goto	l29925
  9549  12B6                     l29985:	
  9550                           
  9551                           ;BVH2_Appl_Layer.c: 902: if (!(bool_mat_currAlarm_bldc)) {
  9552  12B6  08D8               	movf	_bool_mat_currAlarm_bldc^(0+128),f
  9553  12B7  1D03               	skipz
  9554  12B8  2A6D               	goto	l29925
  9555                           
  9556                           ;BVH2_Appl_Layer.c: 905: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
  9557  12B9  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9558  12BA  39F0               	andlw	-16
  9559  12BB  3804               	iorlw	4
  9560  12BC  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9561  12BD  2A87               	goto	l29941
  9562  12BE                     l15800:	
  9563                           ;BVH2_Appl_Layer.c: 914: }
  9564                           ;BVH2_Appl_Layer.c: 915: default: {
  9565                           
  9566                           
  9567                           ;BVH2_Appl_Layer.c: 917: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
  9568  12BE  1B4B               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
  9569  12BF  2AE4               	goto	l15781
  9570                           
  9571                           ;BVH2_Appl_Layer.c: 918: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
  9572  12C0  174B               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
  9573                           
  9574                           ;BVH2_Appl_Layer.c: 922: if (ui8_ResetMatlab != 0) {
  9575  12C1  086F               	movf	_ui8_ResetMatlab^(0+128),w
  9576  12C2  1903               	btfsc	3,2
  9577  12C3  2AE4               	goto	l15781
  9578                           
  9579                           ;BVH2_Appl_Layer.c: 924: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
  9580                           ;BVH2_Appl_Layer.c: 925: (UInt8)6;
  9581  12C4  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9582  12C5  39F0               	andlw	-16
  9583  12C6  3806               	iorlw	6
  9584  12C7  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  9585                           
  9586                           ;BVH2_Appl_Layer.c: 926: Cb1_StateCnt = 0 ;
  9587  12C8  01A4               	clrf	_Cb1_StateCnt^(0+128)
  9588  12C9  01A5               	clrf	(_Cb1_StateCnt+1)^(0+128)
  9589  12CA  2A6A               	goto	l29923
  9590  12CB                     l30003:	
  9591  12CB  0021               	movlb	1	; select bank1
  9592  12CC  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  9593  12CD  390F               	andlw	15
  9594                           
  9595                           ; Switch size 1, requested type "space"
  9596                           ; Number of cases is 7, Range of values is 1 to 7
  9597                           ; switch strategies available:
  9598                           ; Name         Instructions Cycles
  9599                           ; simple_byte           22    12 (average)
  9600                           ; direct_byte           23     9 (fixed)
  9601                           ; jumptable            263     9 (fixed)
  9602                           ;	Chosen strategy is simple_byte
  9603  12CE  3A01               	xorlw	1	; case 1
  9604  12CF  1903               	skipnz
  9605  12D0  2AB6               	goto	l29985
  9606  12D1  3A03               	xorlw	3	; case 2
  9607  12D2  1903               	skipnz
  9608  12D3  2AAB               	goto	l29963
  9609  12D4  3A01               	xorlw	1	; case 3
  9610  12D5  1903               	skipnz
  9611  12D6  2A71               	goto	l29927
  9612  12D7  3A07               	xorlw	7	; case 4
  9613  12D8  1903               	skipnz
  9614  12D9  2A8E               	goto	l29945
  9615  12DA  3A01               	xorlw	1	; case 5
  9616  12DB  1903               	skipnz
  9617  12DC  2A8B               	goto	l29943
  9618  12DD  3A03               	xorlw	3	; case 6
  9619  12DE  1903               	skipnz
  9620  12DF  2A60               	goto	l29915
  9621  12E0  3A01               	xorlw	1	; case 7
  9622  12E1  1903               	skipnz
  9623  12E2  2A79               	goto	l29933
  9624  12E3  2ABE               	goto	l15800
  9625  12E4                     l15781:	
  9626                           
  9627                           ;BVH2_Appl_Layer.c: 934: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||
  9628                           ;BVH2_Appl_Layer.c: 935: Cb1_oShutoff || Cb44_oShutoff;
  9629  12E4  0024               	movlb	4	; select bank4
  9630  12E5  01AA               	clrf	_BVH2_Appl_Layer$18237^(0+512)
  9631  12E6  0AAA               	incf	_BVH2_Appl_Layer$18237^(0+512),f
  9632  12E7  08A8               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512),f
  9633  12E8  1D03               	skipz
  9634  12E9  2AF9               	goto	l30017
  9635  12EA  0022               	movlb	2	; select bank2
  9636  12EB  08C9               	movf	_Cb56_odPumpOff^(0+256),f
  9637  12EC  1D03               	skipz
  9638  12ED  2AF9               	goto	l30017
  9639  12EE  08BD               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),f
  9640  12EF  1D03               	skipz
  9641  12F0  2AF9               	goto	l30017
  9642  12F1  08C1               	movf	_Cb1_oShutoff^(0+256),f
  9643  12F2  1D03               	skipz
  9644  12F3  2AF9               	goto	l30017
  9645  12F4  08C7               	movf	_Cb44_oShutoff^(0+256),f
  9646  12F5  1D03               	skipz
  9647  12F6  2AF9               	goto	l30017
  9648  12F7  0024               	movlb	4	; select bank4
  9649  12F8  01AA               	clrf	_BVH2_Appl_Layer$18237^(0+512)
  9650  12F9                     l30017:	
  9651  12F9  0024               	movlb	4	; select bank4
  9652  12FA  082A               	movf	_BVH2_Appl_Layer$18237^(0+512),w
  9653  12FB  00BB               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512)
  9654                           
  9655                           ;BVH2_Appl_Layer.c: 938: Cb24_Reset = ui8_ResetMatlab != 0 ;
  9656  12FC  3000               	movlw	0
  9657  12FD  0021               	movlb	1	; select bank1
  9658  12FE  08EF               	movf	_ui8_ResetMatlab^(0+128),f
  9659  12FF  1D03               	skipz
  9660  1300  3001               	movlw	1
  9661  1301  0024               	movlb	4	; select bank4
  9662  1302  00B3               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+512)
  9663                           
  9664                           ;BVH2_Appl_Layer.c: 943: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
  9665  1303  0021               	movlb	1	; select bank1
  9666  1304  1F22               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9667  1305  2BFC               	goto	l15805
  9668                           
  9669                           ;BVH2_Appl_Layer.c: 949: if (Sb1_Logical_Operator1 || Cb24_Reset) {
  9670  1306  0024               	movlb	4	; select bank4
  9671  1307  08BB               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),f
  9672  1308  1D03               	skipz
  9673  1309  2B13               	goto	l30043
  9674  130A  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
  9675  130B  1903               	btfsc	3,2
  9676  130C  2BE5               	goto	l30161
  9677  130D  2B13               	goto	l30043
  9678  130E                     l30027:	
  9679                           
  9680                           ;BVH2_Appl_Layer.c: 954: Cb24_StateCnt = 0 ;
  9681  130E  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
  9682  130F  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
  9683  1310                     l30029:	
  9684                           
  9685                           ;BVH2_Appl_Layer.c: 955: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9686  1310  30F8               	movlw	-8
  9687  1311  05A2               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9688                           
  9689                           ;BVH2_Appl_Layer.c: 956: break;
  9690  1312  2B29               	goto	l15811
  9691  1313                     l30043:	
  9692  1313  0021               	movlb	1	; select bank1
  9693  1314  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9694  1315  3907               	andlw	7
  9695                           
  9696                           ; Switch size 1, requested type "space"
  9697                           ; Number of cases is 6, Range of values is 1 to 6
  9698                           ; switch strategies available:
  9699                           ; Name         Instructions Cycles
  9700                           ; simple_byte           19    10 (average)
  9701                           ; direct_byte           21     9 (fixed)
  9702                           ; jumptable            263     9 (fixed)
  9703                           ;	Chosen strategy is simple_byte
  9704  1316  3A01               	xorlw	1	; case 1
  9705  1317  1903               	skipnz
  9706  1318  2B10               	goto	l30029
  9707  1319  3A03               	xorlw	3	; case 2
  9708  131A  1903               	skipnz
  9709  131B  2B10               	goto	l30029
  9710  131C  3A01               	xorlw	1	; case 3
  9711  131D  1903               	skipnz
  9712  131E  2B0E               	goto	l30027
  9713  131F  3A07               	xorlw	7	; case 4
  9714  1320  1903               	skipnz
  9715  1321  2B10               	goto	l30029
  9716  1322  3A01               	xorlw	1	; case 5
  9717  1323  1903               	skipnz
  9718  1324  2B10               	goto	l30029
  9719  1325  3A03               	xorlw	3	; case 6
  9720  1326  1903               	skipnz
  9721  1327  2B10               	goto	l30029
  9722  1328  2B29               	goto	l15811
  9723  1329                     l15811:	
  9724                           
  9725                           ;BVH2_Appl_Layer.c: 979: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  9726  1329  1322               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9727  132A  2C14               	goto	L22
  9728  132B                     l30047:	
  9729                           ;BVH2_Appl_Layer.c: 984: }
  9730                           
  9731                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  9732                           
  9733                           
  9734                           ;BVH2_Appl_Layer.c: 990: if (Cb24_StateCnt) {
  9735  132B  0821               	movf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
  9736  132C  0420               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
  9737  132D  1903               	skipnz
  9738  132E  2B80               	goto	L9
  9739                           
  9740                           ;BVH2_Appl_Layer.c: 994: Cb24_StateCnt = 0 ;
  9741  132F  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
  9742  1330  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
  9743  1331                     l30051:	
  9744                           
  9745                           ;BVH2_Appl_Layer.c: 995: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int)
  9746                           ;BVH2_Appl_Layer.c: 996: (UInt8)2;
  9747  1331  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9748  1332  39F8               	andlw	-8
  9749  1333  3802               	iorlw	2
  9750  1334  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9751                           
  9752                           ;BVH2_Appl_Layer.c: 997: }
  9753  1335  2C19               	goto	l30183
  9754  1336                     l30055:	
  9755                           ;BVH2_Appl_Layer.c: 998: else {
  9756                           ;BVH2_Appl_Layer.c: 999: Cb24_StateCnt = Cb24_StateCnt + 1 ;
  9757                           
  9758                           
  9759                           ;BVH2_Appl_Layer.c: 1009: if (Cb24_StateCnt > 1000) {
  9760  1336  3003               	movlw	3
  9761  1337  0221               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
  9762  1338  30E9               	movlw	233
  9763  1339  1903               	skipnz
  9764  133A  0220               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
  9765  133B  1C03               	skipc
  9766  133C  2B46               	goto	l30067
  9767                           
  9768                           ;BVH2_Appl_Layer.c: 1012: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
  9769                           ;BVH2_Appl_Layer.c: 1013: (UInt8)5;
  9770  133D  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9771  133E  39F8               	andlw	-8
  9772  133F  3805               	iorlw	5
  9773                           
  9774                           ;BVH2_Appl_Layer.c: 1014: Cb24_StateCnt = 0 ;
  9775                           
  9776                           ;BVH2_Appl_Layer.c: 1015: Cb24_BadCnt = 0 ;
  9777  1340  27BD  3191         	fcall	PL25	;call to abstracted procedure
  9778                           
  9779                           ;BVH2_Appl_Layer.c: 1016: Cb24_oMotorStalled = 0;
  9780  1342  0022               	movlb	2	; select bank2
  9781  1343  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
  9782                           
  9783                           ;BVH2_Appl_Layer.c: 1019: Cb24_oStalledAlarm = 0;
  9784  1344  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9785                           
  9786                           ;BVH2_Appl_Layer.c: 1020: }
  9787  1345  2C19               	goto	l30183
  9788  1346                     l30067:	
  9789                           
  9790                           ;BVH2_Appl_Layer.c: 1021: else {
  9791                           ;BVH2_Appl_Layer.c: 1024: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
  9792  1346  3000               	movlw	0
  9793  1347  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
  9794  1348  3005               	movlw	5
  9795  1349  1903               	skipnz
  9796  134A  0232               	subwf	_ui16_Speed_mat^(0+128),w
  9797  134B  1C03               	skipc
  9798  134C  2B54               	goto	l30071
  9799  134D  3001               	movlw	1
  9800  134E  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
  9801  134F  302D               	movlw	45
  9802  1350  1903               	skipnz
  9803  1351  0232               	subwf	_ui16_Speed_mat^(0+128),w
  9804  1352  1C03               	skipc
  9805  1353  2B80               	goto	L9
  9806  1354                     l30071:	
  9807                           
  9808                           ;BVH2_Appl_Layer.c: 1027: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
  9809                           ;BVH2_Appl_Layer.c: 1028: (UInt8)1;
  9810  1354  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9811  1355  39F8               	andlw	-8
  9812  1356  3801               	iorlw	1
  9813  1357  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  9814                           
  9815                           ;BVH2_Appl_Layer.c: 1029: Cb24_oStalledAlarm = 0;
  9816  1358  0022               	movlb	2	; select bank2
  9817  1359  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9818                           
  9819                           ;BVH2_Appl_Layer.c: 1030: Cb24_StateCnt = 0 ;
  9820  135A  0021               	movlb	1	; select bank1
  9821  135B  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
  9822  135C  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
  9823                           
  9824                           ;BVH2_Appl_Layer.c: 1031: }
  9825  135D  2C19               	goto	l30183
  9826  135E                     l30079:	
  9827                           
  9828                           ;BVH2_Appl_Layer.c: 1044: if (Cb24_BadCnt > 100) {
  9829  135E  3000               	movlw	0
  9830  135F  0023               	movlb	3	; select bank3
  9831  1360  0243               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
  9832  1361  3065               	movlw	101
  9833  1362  1903               	skipnz
  9834  1363  0242               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
  9835  1364  1C03               	skipc
  9836  1365  2B6F               	goto	l30089
  9837                           
  9838                           ;BVH2_Appl_Layer.c: 1047: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
  9839                           ;BVH2_Appl_Layer.c: 1048: (UInt8)4;
  9840  1366  0021               	movlb	1	; select bank1
  9841  1367  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9842                           
  9843                           ;BVH2_Appl_Layer.c: 1049: Cb24_StateCnt = 0 ;
  9844                           
  9845                           ;BVH2_Appl_Layer.c: 1050: Cb24_oMotorStalled = 1;
  9846  1368  27D5  3191         	fcall	PL33	;call to abstracted procedure
  9847  136A  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
  9848  136B  0AB8               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
  9849                           
  9850                           ;BVH2_Appl_Layer.c: 1051: Cb24_oStalledAlarm = 1;
  9851  136C  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9852  136D  0AB9               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9853                           
  9854                           ;BVH2_Appl_Layer.c: 1052: }
  9855  136E  2C19               	goto	l30183
  9856  136F                     l30089:	
  9857                           
  9858                           ;BVH2_Appl_Layer.c: 1053: else {
  9859                           ;BVH2_Appl_Layer.c: 1056: if ((ui16_Speed_mat >= 5) && (ui16_Speed_mat <= 300)) {
  9860  136F  27F7  3191         	fcall	PL49	;call to abstracted procedure
  9861  1371  1903               	skipnz
  9862  1372  0232               	subwf	_ui16_Speed_mat^(0+128),w
  9863  1373  1C03               	skipc
  9864  1374  2B7C               	goto	l30095
  9865  1375  3001               	movlw	1
  9866  1376  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
  9867  1377  302D               	movlw	45
  9868  1378  1903               	skipnz
  9869  1379  0232               	subwf	_ui16_Speed_mat^(0+128),w
  9870  137A  1C03               	btfss	3,0
  9871  137B  2B31               	goto	l30051
  9872  137C                     l30095:	
  9873                           
  9874                           ;BVH2_Appl_Layer.c: 1062: else {
  9875                           ;BVH2_Appl_Layer.c: 1063: Cb24_BadCnt = Cb24_BadCnt + 1 ;
  9876  137C  0023               	movlb	3	; select bank3
  9877  137D  0AC2               	incf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),f
  9878  137E  1903               	skipnz
  9879  137F  0AC3               	incf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),f
  9880  1380                     L9:	
  9881                           
  9882                           ;BVH2_Appl_Layer.c: 1064: Cb24_StateCnt = Cb24_StateCnt + 1 ;
  9883  1380  0021               	movlb	1	; select bank1
  9884  1381  0AA0               	incf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),f
  9885  1382  1903               	skipnz
  9886  1383  0AA1               	incf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),f
  9887  1384  2C19               	goto	l30183
  9888  1385                     l30099:	
  9889                           
  9890                           ;BVH2_Appl_Layer.c: 1089: if (Cb24_StateCnt > 10) {
  9891  1385  3000               	movlw	0
  9892  1386  0221               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
  9893  1387  300B               	movlw	11
  9894  1388  1903               	skipnz
  9895  1389  0220               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
  9896  138A  1C03               	skipc
  9897  138B  2BCA               	goto	l30141
  9898                           
  9899                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_RestartCounter == 10) {
  9900  138C  0022               	movlb	2	; select bank2
  9901  138D  0837               	movf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),w
  9902  138E  3A0A               	xorlw	10
  9903  138F  1D03               	skipz
  9904  1390  2B9D               	goto	l30113
  9905                           
  9906                           ;BVH2_Appl_Layer.c: 1092: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  9907  1391  30F8               	movlw	-8
  9908  1392  0021               	movlb	1	; select bank1
  9909  1393  05A2               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  9910                           
  9911                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  9912  1394  1322               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  9913                           
  9914                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
  9915  1395  1423               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  9916                           
  9917                           ;BVH2_Appl_Layer.c: 1095: Cb24_oStalledAlarm = 1;
  9918  1396  0022               	movlb	2	; select bank2
  9919  1397  3018               	movlw	24
  9920  1398  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9921  1399  0AB9               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9922  139A  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
  9923  139B  0AB8               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
  9924  139C  2BC3               	goto	L11
  9925  139D                     l30113:	
  9926                           ;BVH2_Appl_Layer.c: 1098: }
  9927                           
  9928                           ;BVH2_Appl_Layer.c: 1097: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9929                           
  9930                           
  9931                           ;BVH2_Appl_Layer.c: 1099: else {
  9932                           ;BVH2_Appl_Layer.c: 1102: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
  9933  139D  27F7  3191         	fcall	PL49	;call to abstracted procedure
  9934  139F  1903               	skipnz
  9935  13A0  0232               	subwf	_ui16_Speed_mat^(0+128),w
  9936  13A1  1C03               	skipc
  9937  13A2  2BAA               	goto	l30117
  9938  13A3  3001               	movlw	1
  9939  13A4  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
  9940  13A5  302D               	movlw	45
  9941  13A6  1903               	skipnz
  9942  13A7  0232               	subwf	_ui16_Speed_mat^(0+128),w
  9943  13A8  1C03               	skipc
  9944  13A9  2BB3               	goto	l30127
  9945  13AA                     l30117:	
  9946                           
  9947                           ;BVH2_Appl_Layer.c: 1105: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
  9948                           ;BVH2_Appl_Layer.c: 1106: (UInt8)4;
  9949  13AA  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9950                           
  9951                           ;BVH2_Appl_Layer.c: 1107: Cb24_StateCnt = 0 ;
  9952                           
  9953                           ;BVH2_Appl_Layer.c: 1108: Cb24_oMotorStalled = 1;
  9954  13AB  27D5  3191         	fcall	PL33	;call to abstracted procedure
  9955  13AD  3018               	movlw	24
  9956  13AE  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
  9957  13AF  0AB8               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
  9958                           
  9959                           ;BVH2_Appl_Layer.c: 1109: Cb24_oStalledAlarm = 1;
  9960  13B0  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9961  13B1  0AB9               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  9962                           
  9963                           ;BVH2_Appl_Layer.c: 1110: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9964  13B2  2BC3               	goto	L11
  9965  13B3                     l30127:	
  9966                           ;BVH2_Appl_Layer.c: 1111: }
  9967                           
  9968                           
  9969                           ;BVH2_Appl_Layer.c: 1112: else {
  9970                           ;BVH2_Appl_Layer.c: 1113: if (Cb24_StateCnt > 200) {
  9971  13B3  3000               	movlw	0
  9972  13B4  0221               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
  9973  13B5  30C9               	movlw	201
  9974  13B6  1903               	skipnz
  9975  13B7  0220               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
  9976                           
  9977                           ;BVH2_Appl_Layer.c: 1116: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
  9978                           ;BVH2_Appl_Layer.c: 1117: (UInt8)5;
  9979  13B8  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  9980  13B9  1C03               	skipc
  9981  13BA  2BC6               	goto	L27
  9982  13BB  39F8               	andlw	-8
  9983  13BC  3805               	iorlw	5
  9984                           
  9985                           ;BVH2_Appl_Layer.c: 1118: Cb24_StateCnt = 0 ;
  9986                           
  9987                           ;BVH2_Appl_Layer.c: 1119: Cb24_BadCnt = 0 ;
  9988  13BD  27BD  3191         	fcall	PL25	;call to abstracted procedure
  9989                           
  9990                           ;BVH2_Appl_Layer.c: 1120: Cb24_oMotorStalled = 0;
  9991  13BF  0022               	movlb	2	; select bank2
  9992  13C0  3018               	movlw	24
  9993  13C1  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
  9994  13C2  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  9995  13C3                     L11:	
  9996                           
  9997                           ;BVH2_Appl_Layer.c: 1124: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  9998  13C3  0021               	movlb	1	; select bank1
  9999  13C4  04A2               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10000                           
 10001                           ;BVH2_Appl_Layer.c: 1125: }
 10002  13C5  2BCC               	goto	l15846
 10003  13C6                     L27:	
 10004                           ;BVH2_Appl_Layer.c: 1126: else {
 10005                           ;BVH2_Appl_Layer.c: 1127: SIBFS_Motor_Stalled_b.Cb24_glflag = 1 ;
 10006                           
 10007  13C6  39E7               	andlw	-25
 10008  13C7  3808               	iorlw	8
 10009  13C8  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10010  13C9  2BCC               	goto	l15846
 10011  13CA                     l30141:	
 10012                           
 10013                           ;BVH2_Appl_Layer.c: 1132: else {
 10014                           ;BVH2_Appl_Layer.c: 1133: SIBFS_Motor_Stalled_b.Cb24_glflag = 0 ;
 10015  13CA  30E7               	movlw	-25
 10016  13CB  05A2               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 10017  13CC                     l15846:	
 10018                           
 10019                           ;BVH2_Appl_Layer.c: 1134: }
 10020                           ;BVH2_Appl_Layer.c: 1135: if (SIBFS_Motor_Stalled_b.Cb24_glflag <= 2) {
 10021  13CC  0C22               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10022  13CD  27E3  3191         	fcall	PL35	;call to abstracted procedure
 10023  13CF  1D03               	btfss	3,2
 10024  13D0  2B80               	goto	L9
 10025  13D1  2C19               	goto	l30183
 10026  13D2                     l30145:	
 10027                           
 10028                           ;BVH2_Appl_Layer.c: 1146: if (Cb24_StateCnt > 200) {
 10029  13D2  3000               	movlw	0
 10030  13D3  0221               	subwf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128),w
 10031  13D4  30C9               	movlw	201
 10032  13D5  1903               	skipnz
 10033  13D6  0220               	subwf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128),w
 10034  13D7  1C03               	skipc
 10035  13D8  2B80               	goto	L9
 10036                           
 10037                           ;BVH2_Appl_Layer.c: 1150: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 10038                           ;BVH2_Appl_Layer.c: 1151: (UInt8)6;
 10039  13D9  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10040  13DA  39F8               	andlw	-8
 10041  13DB  3806               	iorlw	6
 10042  13DC  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 10043                           
 10044                           ;BVH2_Appl_Layer.c: 1152: Cb24_StateCnt = 0 ;
 10045  13DD  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 10046  13DE  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 10047                           
 10048                           ;BVH2_Appl_Layer.c: 1153: Cb24_oMotorStalled = 0;
 10049  13DF  0022               	movlb	2	; select bank2
 10050  13E0  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10051                           
 10052                           ;BVH2_Appl_Layer.c: 1154: Cb24_oStalledAlarm = 1;
 10053  13E1  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10054  13E2  0AB9               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 10055                           
 10056                           ;BVH2_Appl_Layer.c: 1155: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
 10057  13E3  0AB7               	incf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),f
 10058                           
 10059                           ;BVH2_Appl_Layer.c: 1156: }
 10060  13E4  2C19               	goto	l30183
 10061  13E5                     l30161:	
 10062  13E5  0021               	movlb	1	; select bank1
 10063  13E6  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10064  13E7  3907               	andlw	7
 10065                           
 10066                           ; Switch size 1, requested type "space"
 10067                           ; Number of cases is 6, Range of values is 1 to 6
 10068                           ; switch strategies available:
 10069                           ; Name         Instructions Cycles
 10070                           ; simple_byte           19    10 (average)
 10071                           ; direct_byte           21     9 (fixed)
 10072                           ; jumptable            263     9 (fixed)
 10073                           ;	Chosen strategy is simple_byte
 10074  13E8  3A01               	xorlw	1	; case 1
 10075  13E9  1903               	skipnz
 10076  13EA  2B5E               	goto	l30079
 10077  13EB  3A03               	xorlw	3	; case 2
 10078  13EC  1903               	skipnz
 10079  13ED  2B36               	goto	l30055
 10080  13EE  3A01               	xorlw	1	; case 3
 10081  13EF  1903               	skipnz
 10082  13F0  2B2B               	goto	l30047
 10083  13F1  3A07               	xorlw	7	; case 4
 10084  13F2  1903               	skipnz
 10085  13F3  2BD2               	goto	l30145
 10086  13F4  3A01               	xorlw	1	; case 5
 10087  13F5  1903               	skipnz
 10088  13F6  2B31               	goto	l30051
 10089  13F7  3A03               	xorlw	3	; case 6
 10090  13F8  1903               	skipnz
 10091  13F9  2B85               	goto	l30099
 10092  13FA  2C19               	goto	l30183
 10093                           
 10094                           ;BVH2_Appl_Layer.c: 1166: }
 10095                           ;BVH2_Appl_Layer.c: 1169: }
 10096  13FB  2C19               	goto	l30183
 10097  13FC                     l15805:	
 10098                           
 10099                           ;BVH2_Appl_Layer.c: 1170: else {
 10100                           ;BVH2_Appl_Layer.c: 1172: if (SIBFS_Motor_Stalled_b.Cb32_default) {
 10101  13FC  1FA2               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10102  13FD  2C0B               	goto	l15852
 10103                           
 10104                           ;BVH2_Appl_Layer.c: 1177: if (!(Sb1_Logical_Operator1)) {
 10105  13FE  0024               	movlb	4	; select bank4
 10106  13FF  08BB               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),f
 10107  1400  1D03               	skipz
 10108  1401  2C19               	goto	l30183
 10109                           
 10110                           ;BVH2_Appl_Layer.c: 1180: SIBFS_Motor_Stalled_b.Cb32_default = 0;
 10111  1402  0021               	movlb	1	; select bank1
 10112  1403  13A2               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10113                           
 10114                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
 10115  1404  1722               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 10116                           
 10117                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
 10118  1405  0822               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 10119  1406  39F8               	andlw	-8
 10120  1407  3803               	iorlw	3
 10121                           
 10122                           ;BVH2_Appl_Layer.c: 1183: Cb24_StateCnt = 0 ;
 10123                           
 10124                           ;BVH2_Appl_Layer.c: 1184: Cb24_BadCnt = 0 ;
 10125  1408  27BD  3191         	fcall	PL25	;call to abstracted procedure
 10126  140A  2C19               	goto	l30183
 10127  140B                     l15852:	
 10128                           
 10129                           ;BVH2_Appl_Layer.c: 1189: else {
 10130                           ;BVH2_Appl_Layer.c: 1191: if (!(SIBFS_Motor_Stalled_b.Cb33_Stop)) {
 10131  140B  1C23               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 10132                           
 10133                           ;BVH2_Appl_Layer.c: 1193: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
 10134  140C  1AA2               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 10135  140D  2C19               	goto	l30183
 10136                           
 10137                           ;BVH2_Appl_Layer.c: 1194: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
 10138  140E  16A2               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 10139                           
 10140                           ;BVH2_Appl_Layer.c: 1197: if (Cb24_Reset) {
 10141  140F  0024               	movlb	4	; select bank4
 10142  1410  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 10143  1411  1903               	btfsc	3,2
 10144  1412  2C19               	goto	l30183
 10145                           
 10146                           ;BVH2_Appl_Layer.c: 1199: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 10147  1413  0021               	movlb	1	; select bank1
 10148  1414                     L22:	
 10149  1414  17A2               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 10150                           
 10151                           ;BVH2_Appl_Layer.c: 981: Cb24_oMotorStalled = 0;
 10152  1415  0022               	movlb	2	; select bank2
 10153  1416  01B8               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 10154                           
 10155                           ;BVH2_Appl_Layer.c: 982: Cb24_oStalledAlarm = 0;
 10156  1417  01B9               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 10157                           
 10158                           ;BVH2_Appl_Layer.c: 983: Cb24_RestartCounter = 0 ;
 10159  1418  01B7               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256)
 10160  1419                     l30183:	
 10161                           
 10162                           ;BVH2_Appl_Layer.c: 1213: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
 10163  1419  0024               	movlb	4	; select bank4
 10164  141A  01AB               	clrf	_BVH2_Appl_Layer$18238^(0+512)
 10165  141B  0AAB               	incf	_BVH2_Appl_Layer$18238^(0+512),f
 10166  141C  0022               	movlb	2	; select bank2
 10167  141D  08C5               	movf	_Cb34_odFixedValueSel^(0+256),f
 10168  141E  1D03               	skipz
 10169  141F  2C26               	goto	l30191
 10170  1420  0021               	movlb	1	; select bank1
 10171  1421  08C9               	movf	_Cb56_odFixedValueSel^(0+128),f
 10172  1422  1D03               	skipz
 10173  1423  2C26               	goto	l30191
 10174  1424  0024               	movlb	4	; select bank4
 10175  1425  01AB               	clrf	_BVH2_Appl_Layer$18238^(0+512)
 10176  1426                     l30191:	
 10177  1426  0024               	movlb	4	; select bank4
 10178  1427  082B               	movf	_BVH2_Appl_Layer$18238^(0+512),w
 10179  1428  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512)
 10180                           
 10181                           ;BVH2_Appl_Layer.c: 1217: if (bool_start_demand_mat) {
 10182  1429  0022               	movlb	2	; select bank2
 10183  142A  0850               	movf	_bool_start_demand_mat^(0+256),w
 10184  142B  1903               	btfsc	3,2
 10185  142C  2C34               	goto	l30197
 10186                           
 10187                           ;BVH2_Appl_Layer.c: 1218: Sb2_Switch5 = ui8_fixed_start_speed_mat;
 10188  142D  0023               	movlb	3	; select bank3
 10189  142E  0869               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
 10190  142F  0024               	movlb	4	; select bank4
 10191  1430  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 10192  1431  0023               	movlb	3	; select bank3
 10193  1432  0868               	movf	_ui8_fixed_start_speed_mat^(0+384),w
 10194  1433  2C4F               	goto	L12
 10195  1434                     l30197:	
 10196                           ;BVH2_Appl_Layer.c: 1219: }
 10197                           
 10198                           
 10199                           ;BVH2_Appl_Layer.c: 1220: else {
 10200                           ;BVH2_Appl_Layer.c: 1223: if (Cb34_odFixedLowValueSel) {
 10201  1434  0844               	movf	_Cb34_odFixedLowValueSel^(0+256),w
 10202  1435  1903               	btfsc	3,2
 10203  1436  2C3E               	goto	l30201
 10204                           
 10205                           ;BVH2_Appl_Layer.c: 1224: Sb2_Switch5 = ui16_Speed_demand_mat_min;
 10206  1437  0023               	movlb	3	; select bank3
 10207  1438  0861               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
 10208  1439  0024               	movlb	4	; select bank4
 10209  143A  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 10210  143B  0023               	movlb	3	; select bank3
 10211  143C  0860               	movf	_ui16_Speed_demand_mat_min^(0+384),w
 10212  143D  2C4F               	goto	L12
 10213  143E                     l30201:	
 10214                           ;BVH2_Appl_Layer.c: 1225: }
 10215                           
 10216                           
 10217                           ;BVH2_Appl_Layer.c: 1226: else {
 10218                           ;BVH2_Appl_Layer.c: 1229: if (Sb1_Logical_Operator5) {
 10219  143E  0024               	movlb	4	; select bank4
 10220  143F  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 10221  1440  1903               	btfsc	3,2
 10222  1441  2C49               	goto	l30205
 10223                           
 10224                           ;BVH2_Appl_Layer.c: 1230: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
 10225  1442  0023               	movlb	3	; select bank3
 10226  1443  085F               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
 10227  1444  0024               	movlb	4	; select bank4
 10228  1445  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 10229  1446  0023               	movlb	3	; select bank3
 10230  1447  085E               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
 10231  1448  2C4F               	goto	L12
 10232  1449                     l30205:	
 10233                           ;BVH2_Appl_Layer.c: 1231: }
 10234                           
 10235                           
 10236                           ;BVH2_Appl_Layer.c: 1232: else {
 10237                           ;BVH2_Appl_Layer.c: 1233: Sb2_Switch5 = ui16_Speed_demand_mat;
 10238  1449  0023               	movlb	3	; select bank3
 10239  144A  085D               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 10240  144B  0024               	movlb	4	; select bank4
 10241  144C  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 10242  144D  0023               	movlb	3	; select bank3
 10243  144E  085C               	movf	_ui16_Speed_demand_mat^(0+384),w
 10244  144F                     L12:	
 10245  144F  0024               	movlb	4	; select bank4
 10246  1450  00B1               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+512)
 10247                           
 10248                           ;BVH2_Appl_Layer.c: 1234: }
 10249                           ;BVH2_Appl_Layer.c: 1235: }
 10250                           ;BVH2_Appl_Layer.c: 1236: }
 10251                           ;BVH2_Appl_Layer.c: 1239: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
 10252  1451  0021               	movlb	1	; select bank1
 10253  1452  0833               	movf	(_ui16_Speed_mat+1)^(0+128),w
 10254  1453  0024               	movlb	4	; select bank4
 10255  1454  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512)
 10256  1455  0021               	movlb	1	; select bank1
 10257  1456  0832               	movf	_ui16_Speed_mat^(0+128),w
 10258  1457  0024               	movlb	4	; select bank4
 10259  1458  00B7               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+512)
 10260  1459  0831               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+512),w
 10261  145A  02B7               	subwf	BVH2_Appl_Layer@Sb2_Error^(0+512),f
 10262  145B  0832               	movf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512),w
 10263  145C  3BB8               	subwfb	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),f
 10264                           
 10265                           ;BVH2_Appl_Layer.c: 1244: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 10266  145D  0021               	movlb	1	; select bank1
 10267  145E  1CC6               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10268  145F  2C8A               	goto	l15866
 10269                           
 10270                           ;BVH2_Appl_Layer.c: 1251: if ((((Int32)ui16_mat_Current) < (ui16_dryRun_Thresh - 5)) && 
      +                          (ui16_Speed_mat < 400) &&
 10271                           ;BVH2_Appl_Layer.c: 1252: (ui16_Speed_mat > 80)) {
 10272  1460  0023               	movlb	3	; select bank3
 10273  1461  086E               	movf	_ui16_dryRun_Thresh^(0+384),w
 10274  1462  3EFB               	addlw	251
 10275  1463  0020               	movlb	0	; select bank0
 10276  1464  00BA               	movwf	??_BVH2_Appl_Layer
 10277  1465  30FF               	movlw	255
 10278  1466  0023               	movlb	3	; select bank3
 10279  1467  3D6F               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 10280  1468  0020               	movlb	0	; select bank0
 10281  1469  00BB               	movwf	??_BVH2_Appl_Layer+1
 10282  146A  0021               	movlb	1	; select bank1
 10283  146B  0239               	subwf	(_ui16_mat_Current+1)^(0+128),w
 10284  146C  1D03               	skipz
 10285  146D  2C72               	goto	u10485
 10286  146E  0020               	movlb	0	; select bank0
 10287  146F  083A               	movf	??_BVH2_Appl_Layer,w
 10288  1470  0021               	movlb	1	; select bank1
 10289  1471  0238               	subwf	_ui16_mat_Current^(0+128),w
 10290  1472                     u10485:	
 10291  1472  1803               	skipnc
 10292  1473  2CCF               	goto	l30253
 10293  1474  3001               	movlw	1
 10294  1475  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10295  1476  3090               	movlw	144
 10296  1477  1903               	skipnz
 10297  1478  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10298  1479  1803               	skipnc
 10299  147A  2CCF               	goto	l30253
 10300  147B  3000               	movlw	0
 10301  147C  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10302  147D  3051               	movlw	81
 10303  147E  1903               	skipnz
 10304  147F  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10305  1480  1C03               	skipc
 10306  1481  2CCF               	goto	l30253
 10307                           
 10308                           ;BVH2_Appl_Layer.c: 1255: SIBFS_Dry_Running_b.Cb15_greenState = 0;
 10309  1482  10C6               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10310                           
 10311                           ;BVH2_Appl_Layer.c: 1256: SIBFS_Dry_Running_b.Cb16_DryRunning = 1;
 10312  1483  1546               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10313                           
 10314                           ;BVH2_Appl_Layer.c: 1257: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 1;
 10315  1484  1646               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10316                           
 10317                           ;BVH2_Appl_Layer.c: 1258: Cb14_StateCnt = 0 ;
 10318  1485  0023               	movlb	3	; select bank3
 10319  1486  01BE               	clrf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384)
 10320  1487  01BF               	clrf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384)
 10321                           
 10322                           ;BVH2_Appl_Layer.c: 1259: Cb14_oDryRunAlarm = 0;
 10323  1488  0021               	movlb	1	; select bank1
 10324  1489  2CCE               	goto	l30229
 10325  148A                     l15866:	
 10326                           
 10327                           ;BVH2_Appl_Layer.c: 1264: else {
 10328                           ;BVH2_Appl_Layer.c: 1266: if (SIBFS_Dry_Running_b.Cb16_DryRunning) {
 10329  148A  1D46               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10330  148B  2CC8               	goto	l15869
 10331                           
 10332                           ;BVH2_Appl_Layer.c: 1270: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 10333  148C  1DC6               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10334                           
 10335                           ;BVH2_Appl_Layer.c: 1272: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 10336  148D  1E46               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10337  148E  2CCF               	goto	l30253
 10338                           
 10339                           ;BVH2_Appl_Layer.c: 1279: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >
 10340                           ;BVH2_Appl_Layer.c: 1280: 400) || (ui16_Speed_mat < 80)) {
 10341  148F  0023               	movlb	3	; select bank3
 10342  1490  086E               	movf	_ui16_dryRun_Thresh^(0+384),w
 10343  1491  3E05               	addlw	5
 10344  1492  0020               	movlb	0	; select bank0
 10345  1493  00BA               	movwf	??_BVH2_Appl_Layer
 10346  1494  3000               	movlw	0
 10347  1495  0023               	movlb	3	; select bank3
 10348  1496  3D6F               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 10349  1497  2796  3191         	fcall	PL12	;call to abstracted procedure
 10350  1499  1C03               	skipc
 10351  149A  2CAA               	goto	l15874
 10352  149B  3001               	movlw	1
 10353  149C  0021               	movlb	1	; select bank1
 10354  149D  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10355  149E  3091               	movlw	145
 10356  149F  1903               	skipnz
 10357  14A0  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10358  14A1  1803               	skipnc
 10359  14A2  2CAA               	goto	l15874
 10360  14A3  3000               	movlw	0
 10361  14A4  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 10362  14A5  3050               	movlw	80
 10363  14A6  1903               	skipnz
 10364  14A7  0232               	subwf	_ui16_Speed_mat^(0+128),w
 10365  14A8  1803               	skipnc
 10366  14A9  2CAE               	goto	l30231
 10367  14AA                     l15874:	
 10368                           
 10369                           ;BVH2_Appl_Layer.c: 1282: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10370  14AA  0021               	movlb	1	; select bank1
 10371  14AB  1246               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10372                           
 10373                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 10374  14AC  1146               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 10375  14AD  2CCD               	goto	L23
 10376  14AE                     l30231:	
 10377                           ;BVH2_Appl_Layer.c: 1286: }
 10378                           
 10379                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10380                           
 10381                           
 10382                           ;BVH2_Appl_Layer.c: 1287: else {
 10383                           ;BVH2_Appl_Layer.c: 1288: if ((ui8_PWM_dc_mat < 20) && (ui8_PWM_dc_mat > 4)) {
 10384  14AE  3014               	movlw	20
 10385  14AF  025E               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10386  14B0  1803               	skipnc
 10387  14B1  2CB6               	goto	l30239
 10388  14B2  3005               	movlw	5
 10389  14B3  025E               	subwf	_ui8_PWM_dc_mat^(0+128),w
 10390  14B4  1803               	btfsc	3,0
 10391  14B5  2CAA               	goto	l15874
 10392  14B6                     l30239:	
 10393                           
 10394                           ;BVH2_Appl_Layer.c: 1295: else {
 10395                           ;BVH2_Appl_Layer.c: 1296: if (Cb14_StateCnt > 2000) {
 10396  14B6  3007               	movlw	7
 10397  14B7  0023               	movlb	3	; select bank3
 10398  14B8  023F               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),w
 10399  14B9  30D1               	movlw	209
 10400  14BA  1903               	skipnz
 10401  14BB  023E               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),w
 10402  14BC  1C03               	skipc
 10403  14BD  2CC4               	goto	l30243
 10404                           
 10405                           ;BVH2_Appl_Layer.c: 1298: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 10406  14BE  0021               	movlb	1	; select bank1
 10407  14BF  1246               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 10408                           
 10409                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb17_redState = 1;
 10410  14C0  15C6               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 10411                           
 10412                           ;BVH2_Appl_Layer.c: 1300: Cb14_oDryRunAlarm = 1;
 10413  14C1  01C2               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 10414  14C2  0AC2               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 10415                           
 10416                           ;BVH2_Appl_Layer.c: 1301: }
 10417  14C3  2CCF               	goto	l30253
 10418  14C4                     l30243:	
 10419                           
 10420                           ;BVH2_Appl_Layer.c: 1302: else {
 10421                           ;BVH2_Appl_Layer.c: 1303: Cb14_StateCnt = Cb14_StateCnt + 1 ;
 10422  14C4  0ABE               	incf	BVH2_Appl_Layer@Cb14_StateCnt^(0+384),f
 10423  14C5  1903               	skipnz
 10424  14C6  0ABF               	incf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+384),f
 10425  14C7  2CCF               	goto	l30253
 10426  14C8                     l15869:	
 10427                           
 10428                           ;BVH2_Appl_Layer.c: 1314: else {
 10429                           ;BVH2_Appl_Layer.c: 1316: if (!(SIBFS_Dry_Running_b.Cb14_Dry_Running)) {
 10430  14C8  1846               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 10431  14C9  2CCF               	goto	l30253
 10432                           
 10433                           ;BVH2_Appl_Layer.c: 1317: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
 10434  14CA  1446               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 10435                           
 10436                           ;BVH2_Appl_Layer.c: 1320: if (ui8_ResetMatlab == 1) {
 10437  14CB  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 10438  14CC  2CCF               	goto	l30253
 10439  14CD                     L23:	
 10440                           
 10441                           ;BVH2_Appl_Layer.c: 1322: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 10442  14CD  14C6               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 10443  14CE                     l30229:	
 10444                           
 10445                           ;BVH2_Appl_Layer.c: 1285: Cb14_oDryRunAlarm = 0;
 10446  14CE  01C2               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 10447  14CF                     l30253:	
 10448                           
 10449                           ;BVH2_Appl_Layer.c: 1324: }
 10450                           ;BVH2_Appl_Layer.c: 1325: }
 10451                           ;BVH2_Appl_Layer.c: 1326: }
 10452                           ;BVH2_Appl_Layer.c: 1327: }
 10453                           ;BVH2_Appl_Layer.c: 1334: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenState) {
 10454  14CF  0021               	movlb	1	; select bank1
 10455  14D0  1CC5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 10456  14D1  2CDD               	goto	l15883
 10457                           
 10458                           ;BVH2_Appl_Layer.c: 1339: if (Cb14_oDryRunAlarm) {
 10459  14D2  0842               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 10460  14D3  1903               	btfsc	3,2
 10461  14D4  2D1B               	goto	l30301
 10462                           
 10463                           ;BVH2_Appl_Layer.c: 1342: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 10464  14D5  10C5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 10465                           
 10466                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
 10467  14D6  1545               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 10468  14D7                     L13:	
 10469                           
 10470                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 10471  14D7  15C5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 10472                           
 10473                           ;BVH2_Appl_Layer.c: 1345: Cb19_Counter = 0 ;
 10474                           
 10475                           ;BVH2_Appl_Layer.c: 1346: Cb19_oDryRun66 = 1;
 10476  14D8  27F1  3191         	fcall	PL38	;call to abstracted procedure
 10477  14DA  0AB6               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),f
 10478                           
 10479                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun55 = 0;
 10480  14DB  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10481                           
 10482                           ;BVH2_Appl_Layer.c: 1348: }
 10483                           ;BVH2_Appl_Layer.c: 1351: }
 10484  14DC  2D1B               	goto	l30301
 10485  14DD                     l15883:	
 10486                           
 10487                           ;BVH2_Appl_Layer.c: 1352: else {
 10488                           ;BVH2_Appl_Layer.c: 1354: if (SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm) {
 10489  14DD  1D45               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 10490  14DE  2D0E               	goto	l15886
 10491                           
 10492                           ;BVH2_Appl_Layer.c: 1359: if (!(Cb14_oDryRunAlarm)) {
 10493  14DF  08C2               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 10494  14E0  1D03               	skipz
 10495  14E1  2CEB               	goto	l15887
 10496                           
 10497                           ;BVH2_Appl_Layer.c: 1364: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 10498  14E2  1DC5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 10499  14E3  2CE6               	goto	l15888
 10500                           
 10501                           ;BVH2_Appl_Layer.c: 1365: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 10502  14E4  11C5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 10503                           
 10504                           ;BVH2_Appl_Layer.c: 1366: }
 10505  14E5  2CE9               	goto	l15889
 10506  14E6                     l15888:	
 10507                           
 10508                           ;BVH2_Appl_Layer.c: 1367: else {
 10509                           ;BVH2_Appl_Layer.c: 1369: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 10510  14E6  1E45               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 10511  14E7  2CE9               	goto	l15889
 10512                           
 10513                           ;BVH2_Appl_Layer.c: 1370: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 10514  14E8  1245               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 10515  14E9                     l15889:	
 10516                           
 10517                           ;BVH2_Appl_Layer.c: 1371: }
 10518                           ;BVH2_Appl_Layer.c: 1372: }
 10519                           ;BVH2_Appl_Layer.c: 1373: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 10520  14E9  1145               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),2
 10521  14EA  2D14               	goto	l30297
 10522  14EB                     l15887:	
 10523                           ;BVH2_Appl_Layer.c: 1378: }
 10524                           
 10525                           ;BVH2_Appl_Layer.c: 1374: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 10526                           
 10527                           
 10528                           ;BVH2_Appl_Layer.c: 1379: else {
 10529                           ;BVH2_Appl_Layer.c: 1381: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 10530  14EB  1DC5               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 10531  14EC  2D01               	goto	l15892
 10532                           
 10533                           ;BVH2_Appl_Layer.c: 1384: if (Cb19_Counter > 400) {
 10534  14ED  3001               	movlw	1
 10535  14EE  0023               	movlb	3	; select bank3
 10536  14EF  0241               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384),w
 10537  14F0  3091               	movlw	145
 10538  14F1  1903               	skipnz
 10539  14F2  0240               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+384),w
 10540  14F3  1C03               	skipc
 10541  14F4  2CFD               	goto	l30281
 10542                           
 10543                           ;BVH2_Appl_Layer.c: 1387: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 10544  14F5  0021               	movlb	1	; select bank1
 10545  14F6  11C5               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),3
 10546                           
 10547                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
 10548  14F7  1645               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 10549                           
 10550                           ;BVH2_Appl_Layer.c: 1389: Cb19_Counter = 0 ;
 10551                           
 10552                           ;BVH2_Appl_Layer.c: 1390: Cb19_oDryRun66 = 0;
 10553  14F8  27F1  3191         	fcall	PL38	;call to abstracted procedure
 10554                           
 10555                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun55 = 1;
 10556  14FA  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10557  14FB  0AB5               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 10558                           
 10559                           ;BVH2_Appl_Layer.c: 1392: }
 10560  14FC  2D1B               	goto	l30301
 10561  14FD                     l30281:	
 10562                           
 10563                           ;BVH2_Appl_Layer.c: 1393: else {
 10564                           ;BVH2_Appl_Layer.c: 1394: Cb19_Counter = Cb19_Counter + 1 ;
 10565  14FD  0AC0               	incf	BVH2_Appl_Layer@Cb19_Counter^(0+384),f
 10566  14FE  1903               	skipnz
 10567  14FF  0AC1               	incf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384),f
 10568  1500  2D1B               	goto	l30301
 10569  1501                     l15892:	
 10570                           
 10571                           ;BVH2_Appl_Layer.c: 1400: else {
 10572                           ;BVH2_Appl_Layer.c: 1402: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 10573  1501  1E45               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 10574  1502  2D1B               	goto	l30301
 10575                           
 10576                           ;BVH2_Appl_Layer.c: 1405: if (Cb19_Counter > 400) {
 10577  1503  3001               	movlw	1
 10578  1504  0023               	movlb	3	; select bank3
 10579  1505  0241               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384),w
 10580  1506  3091               	movlw	145
 10581  1507  1903               	skipnz
 10582  1508  0240               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+384),w
 10583  1509  1C03               	skipc
 10584  150A  2CFD               	goto	l30281
 10585                           
 10586                           ;BVH2_Appl_Layer.c: 1408: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 10587  150B  0021               	movlb	1	; select bank1
 10588  150C  1245               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),4
 10589  150D  2CD7               	goto	L13
 10590  150E                     l15886:	
 10591                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 10592                           
 10593                           
 10594                           ;BVH2_Appl_Layer.c: 1426: else {
 10595                           ;BVH2_Appl_Layer.c: 1428: if (!(SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm)) {
 10596  150E  1845               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),0
 10597  150F  2D1B               	goto	l30301
 10598                           
 10599                           ;BVH2_Appl_Layer.c: 1429: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 10600  1510  1445               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),0
 10601                           
 10602                           ;BVH2_Appl_Layer.c: 1433: if (!(Cb14_oDryRunAlarm)) {
 10603  1511  08C2               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 10604  1512  1D03               	skipz
 10605  1513  2D1B               	goto	l30301
 10606  1514                     l30297:	
 10607                           
 10608                           ;BVH2_Appl_Layer.c: 1435: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 10609  1514  14C5               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b^(0+128),1
 10610                           
 10611                           ;BVH2_Appl_Layer.c: 1375: Cb19_oDryRun55 = 0;
 10612  1515  0022               	movlb	2	; select bank2
 10613  1516  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 10614                           
 10615                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun66 = 0;
 10616  1517  01B6               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 10617                           
 10618                           ;BVH2_Appl_Layer.c: 1377: Cb19_Counter = 0 ;
 10619  1518  0023               	movlb	3	; select bank3
 10620  1519  01C0               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+384)
 10621  151A  01C1               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384)
 10622  151B                     l30301:	
 10623                           
 10624                           ;BVH2_Appl_Layer.c: 1439: }
 10625                           ;BVH2_Appl_Layer.c: 1440: }
 10626                           ;BVH2_Appl_Layer.c: 1441: }
 10627                           ;BVH2_Appl_Layer.c: 1442: }
 10628                           ;BVH2_Appl_Layer.c: 1447: bool_DryRunningAlarm = Cb19_oDryRun66;
 10629  151B  0022               	movlb	2	; select bank2
 10630  151C  0836               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 10631  151D  0021               	movlb	1	; select bank1
 10632  151E  00D5               	movwf	_bool_DryRunningAlarm^(0+128)
 10633                           
 10634                           ;BVH2_Appl_Layer.c: 1450: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 10635  151F  0022               	movlb	2	; select bank2
 10636  1520  083B               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 10637  1521  0021               	movlb	1	; select bank1
 10638  1522  00D3               	movwf	_bool_CPU_TempAlarm^(0+128)
 10639                           
 10640                           ;BVH2_Appl_Layer.c: 1455: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 10641  1523  1C44               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10642  1524  2D31               	goto	l15902
 10643                           
 10644                           ;BVH2_Appl_Layer.c: 1460: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 10645  1525  0023               	movlb	3	; select bank3
 10646  1526  27A3  3191         	fcall	PL13	;call to abstracted procedure
 10647  1528  2796  3191         	fcall	PL12	;call to abstracted procedure
 10648  152A  1803               	skipnc
 10649  152B  2D6B               	goto	l30351
 10650                           
 10651                           ;BVH2_Appl_Layer.c: 1463: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 10652  152C  0021               	movlb	1	; select bank1
 10653  152D  1044               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10654                           
 10655                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
 10656  152E  1544               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10657  152F                     l30311:	
 10658                           
 10659                           ;BVH2_Appl_Layer.c: 1465: Cb9_StateCnt = 0 ;
 10660  152F  01C3               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 10661  1530  2D6B               	goto	l30351
 10662  1531                     l15902:	
 10663                           
 10664                           ;BVH2_Appl_Layer.c: 1470: else {
 10665                           ;BVH2_Appl_Layer.c: 1472: if (SIBFS_Current_Analysis_low_b.Cb11_Wait) {
 10666  1531  1CC4               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10667  1532  2D46               	goto	l15905
 10668                           
 10669                           ;BVH2_Appl_Layer.c: 1477: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 10670  1533  0023               	movlb	3	; select bank3
 10671  1534  27A3  3191         	fcall	PL13	;call to abstracted procedure
 10672  1536  2796  3191         	fcall	PL12	;call to abstracted procedure
 10673  1538  1803               	skipnc
 10674  1539  2D3D               	goto	l30317
 10675                           
 10676                           ;BVH2_Appl_Layer.c: 1479: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 10677  153A  0021               	movlb	1	; select bank1
 10678  153B  10C4               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10679  153C  2D54               	goto	L14
 10680  153D                     l30317:	
 10681                           ;BVH2_Appl_Layer.c: 1482: }
 10682                           
 10683                           ;BVH2_Appl_Layer.c: 1481: Cb9_oCurrentAlarm = 1;
 10684                           
 10685                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 10686                           
 10687                           
 10688                           ;BVH2_Appl_Layer.c: 1483: else {
 10689                           ;BVH2_Appl_Layer.c: 1484: if (Cb9_StateCnt > 100) {
 10690  153D  3065               	movlw	101
 10691  153E  0021               	movlb	1	; select bank1
 10692  153F  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10693  1540  1C03               	skipc
 10694  1541  2D44               	goto	l30323
 10695                           
 10696                           ;BVH2_Appl_Layer.c: 1486: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 10697  1542  10C4               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10698  1543  2D68               	goto	L24
 10699  1544                     l30323:	
 10700                           ;BVH2_Appl_Layer.c: 1489: }
 10701                           
 10702                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10703                           
 10704                           
 10705                           ;BVH2_Appl_Layer.c: 1490: else {
 10706                           ;BVH2_Appl_Layer.c: 1491: Cb9_StateCnt = Cb9_StateCnt + 1 ;
 10707  1544  0AC3               	incf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),f
 10708  1545  2D6B               	goto	l30351
 10709  1546                     l15905:	
 10710                           
 10711                           ;BVH2_Appl_Layer.c: 1497: else {
 10712                           ;BVH2_Appl_Layer.c: 1499: if (SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent) {
 10713  1546  1D44               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10714  1547  2D59               	goto	l15911
 10715                           
 10716                           ;BVH2_Appl_Layer.c: 1504: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 10717  1548  0023               	movlb	3	; select bank3
 10718  1549  27AB  3191         	fcall	PL15	;call to abstracted procedure
 10719  154B  1803               	skipnc
 10720  154C  2D4F               	goto	l30331
 10721                           
 10722                           ;BVH2_Appl_Layer.c: 1506: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 10723  154D  1144               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10724  154E  2D68               	goto	L24
 10725  154F                     l30331:	
 10726                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10727                           
 10728                           
 10729                           ;BVH2_Appl_Layer.c: 1510: else {
 10730                           ;BVH2_Appl_Layer.c: 1511: if (Cb9_StateCnt > 50) {
 10731  154F  3033               	movlw	51
 10732  1550  0243               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 10733  1551  1C03               	skipc
 10734  1552  2D44               	goto	l30323
 10735                           
 10736                           ;BVH2_Appl_Layer.c: 1513: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 10737  1553  1144               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 10738  1554                     L14:	
 10739                           
 10740                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 10741  1554  15C4               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10742                           
 10743                           ;BVH2_Appl_Layer.c: 1515: Cb9_oCurrentAlarm = 1;
 10744  1555  0022               	movlb	2	; select bank2
 10745  1556  01BE               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 10746  1557  0ABE               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 10747                           
 10748                           ;BVH2_Appl_Layer.c: 1516: }
 10749  1558  2D6B               	goto	l30351
 10750  1559                     l15911:	
 10751                           
 10752                           ;BVH2_Appl_Layer.c: 1524: else {
 10753                           ;BVH2_Appl_Layer.c: 1526: if (SIBFS_Current_Analysis_low_b.Cb13_redState) {
 10754  1559  1DC4               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10755  155A  2D63               	goto	l15917
 10756                           
 10757                           ;BVH2_Appl_Layer.c: 1531: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 10758  155B  0023               	movlb	3	; select bank3
 10759  155C  27AB  3191         	fcall	PL15	;call to abstracted procedure
 10760  155E  1803               	skipnc
 10761  155F  2D6B               	goto	l30351
 10762                           
 10763                           ;BVH2_Appl_Layer.c: 1534: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 10764  1560  11C4               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 10765                           
 10766                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
 10767  1561  14C4               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 10768  1562  2D2F               	goto	l30311
 10769  1563                     l15917:	
 10770                           
 10771                           ;BVH2_Appl_Layer.c: 1541: else {
 10772                           ;BVH2_Appl_Layer.c: 1543: if (!(SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low)) {
 10773  1563  1A44               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 10774  1564  2D6B               	goto	l30351
 10775                           
 10776                           ;BVH2_Appl_Layer.c: 1544: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
 10777  1565  1644               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 10778                           
 10779                           ;BVH2_Appl_Layer.c: 1547: if (ui8_ResetMatlab == 1) {
 10780  1566  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 10781  1567  2D6B               	goto	l30351
 10782  1568                     L24:	
 10783                           
 10784                           ;BVH2_Appl_Layer.c: 1549: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 10785  1568  1444               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 10786                           
 10787                           ;BVH2_Appl_Layer.c: 1488: Cb9_oCurrentAlarm = 0;
 10788  1569  0022               	movlb	2	; select bank2
 10789  156A  01BE               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 10790  156B                     l30351:	
 10791                           
 10792                           ;BVH2_Appl_Layer.c: 1551: }
 10793                           ;BVH2_Appl_Layer.c: 1552: }
 10794                           ;BVH2_Appl_Layer.c: 1553: }
 10795                           ;BVH2_Appl_Layer.c: 1554: }
 10796                           ;BVH2_Appl_Layer.c: 1555: }
 10797                           ;BVH2_Appl_Layer.c: 1556: }
 10798                           ;BVH2_Appl_Layer.c: 1561: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 10799  156B  0022               	movlb	2	; select bank2
 10800  156C  083E               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 10801  156D  0021               	movlb	1	; select bank1
 10802  156E  00D6               	movwf	_bool_HighCurrentAlarm^(0+128)
 10803                           
 10804                           ;BVH2_Appl_Layer.c: 1564: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 10805  156F  0022               	movlb	2	; select bank2
 10806  1570  0842               	movf	_Cb34_oPWM_Alarm^(0+256),w
 10807  1571  00CE               	movwf	_bool_PWMin_err_Alarm^(0+256)
 10808                           
 10809                           ;BVH2_Appl_Layer.c: 1567: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 10810  1572  0848               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 10811  1573  00CF               	movwf	_bool_UbatAlarm^(0+256)
 10812                           
 10813                           ;BVH2_Appl_Layer.c: 1568: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 10814  1574  0024               	movlb	4	; select bank4
 10815  1575  01AC               	clrf	_BVH2_Appl_Layer$18239^(0+512)
 10816  1576  0AAC               	incf	_BVH2_Appl_Layer$18239^(0+512),f
 10817  1577  0022               	movlb	2	; select bank2
 10818  1578  08B9               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 10819  1579  1D03               	skipz
 10820  157A  2D83               	goto	l30367
 10821  157B  08C0               	movf	_Cb1_oCurrentAlarm^(0+256),f
 10822  157C  1D03               	skipz
 10823  157D  2D83               	goto	l30367
 10824  157E  08B5               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 10825  157F  1D03               	skipz
 10826  1580  2D83               	goto	l30367
 10827  1581  0024               	movlb	4	; select bank4
 10828  1582  01AC               	clrf	_BVH2_Appl_Layer$18239^(0+512)
 10829  1583                     l30367:	
 10830  1583  0024               	movlb	4	; select bank4
 10831  1584  082C               	movf	_BVH2_Appl_Layer$18239^(0+512),w
 10832  1585  0021               	movlb	1	; select bank1
 10833  1586  00D7               	movwf	_bool_MotorStalled^(0+128)
 10834                           
 10835                           ;BVH2_Appl_Layer.c: 1574: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 10836  1587  0022               	movlb	2	; select bank2
 10837  1588  083C               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 10838  1589  00CC               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 10839                           
 10840                           ;BVH2_Appl_Layer.c: 1575: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 10841  158A  0024               	movlb	4	; select bank4
 10842  158B  01AD               	clrf	_BVH2_Appl_Layer$18240^(0+512)
 10843  158C  0AAD               	incf	_BVH2_Appl_Layer$18240^(0+512),f
 10844  158D  08BB               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),f
 10845  158E  1D03               	skipz
 10846  158F  2D9A               	goto	l30381
 10847  1590  0022               	movlb	2	; select bank2
 10848  1591  08B8               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 10849  1592  1D03               	skipz
 10850  1593  2D9A               	goto	l30381
 10851  1594  0021               	movlb	1	; select bank1
 10852  1595  08C2               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 10853  1596  1D03               	skipz
 10854  1597  2D9A               	goto	l30381
 10855  1598  0024               	movlb	4	; select bank4
 10856  1599  01AD               	clrf	_BVH2_Appl_Layer$18240^(0+512)
 10857  159A                     l30381:	
 10858  159A  0024               	movlb	4	; select bank4
 10859  159B  082D               	movf	_BVH2_Appl_Layer$18240^(0+512),w
 10860  159C  00B4               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512)
 10861                           
 10862                           ;BVH2_Appl_Layer.c: 1576: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 10863  159D  01AE               	clrf	_BVH2_Appl_Layer$18241^(0+512)
 10864  159E  0AAE               	incf	_BVH2_Appl_Layer$18241^(0+512),f
 10865  159F  08B4               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),f
 10866  15A0  1D03               	skipz
 10867  15A1  2DA8               	goto	l30391
 10868  15A2  0021               	movlb	1	; select bank1
 10869  15A3  08D4               	movf	_bool_ControlLoopMode^(0+128),f
 10870  15A4  1D03               	skipz
 10871  15A5  2DA8               	goto	l30391
 10872  15A6  0024               	movlb	4	; select bank4
 10873  15A7  01AE               	clrf	_BVH2_Appl_Layer$18241^(0+512)
 10874  15A8                     l30391:	
 10875  15A8  0024               	movlb	4	; select bank4
 10876  15A9  082E               	movf	_BVH2_Appl_Layer$18241^(0+512),w
 10877  15AA  00B6               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512)
 10878                           
 10879                           ;BVH2_Appl_Layer.c: 1577: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 10880  15AB  0022               	movlb	2	; select bank2
 10881  15AC  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 10882  15AD  1903               	btfsc	3,2
 10883  15AE  2DB9               	goto	l15928
 10884  15AF  08EB               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),f
 10885  15B0  1D03               	skipz
 10886  15B1  2DB9               	goto	l15928
 10887                           
 10888                           ;BVH2_Appl_Layer.c: 1578: {
 10889                           ;BVH2_Appl_Layer.c: 1579: X_Sb4_Intergrator = 80000 ;
 10890  15B2  3001               	movlw	1
 10891  15B3  01EA               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 10892  15B4  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 10893  15B5  3038               	movlw	56
 10894  15B6  00E8               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 10895  15B7  3080               	movlw	128
 10896  15B8  00E7               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 10897  15B9                     l15928:	
 10898                           
 10899                           ;BVH2_Appl_Layer.c: 1580: }
 10900                           ;BVH2_Appl_Layer.c: 1584: if (Sb1_Logical_Operator3) {
 10901  15B9  0024               	movlb	4	; select bank4
 10902  15BA  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 10903  15BB  1903               	btfsc	3,2
 10904  15BC  2DBF               	goto	l30401
 10905                           
 10906                           ;BVH2_Appl_Layer.c: 1585: Sb2_Switch2 = 0 ;
 10907  15BD  01B9               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 10908  15BE  2E20               	goto	L17
 10909  15BF                     l30401:	
 10910                           ;BVH2_Appl_Layer.c: 1586: }
 10911                           
 10912                           
 10913                           ;BVH2_Appl_Layer.c: 1587: else {
 10914                           ;BVH2_Appl_Layer.c: 1590: if (bool_ControlLoopMode) {
 10915  15BF  0021               	movlb	1	; select bank1
 10916  15C0  0854               	movf	_bool_ControlLoopMode^(0+128),w
 10917  15C1  1903               	btfsc	3,2
 10918  15C2  2E22               	goto	l30423
 10919                           
 10920                           ;BVH2_Appl_Layer.c: 1593: if (Sb1_Logical_Operator5) {
 10921  15C3  0024               	movlb	4	; select bank4
 10922  15C4  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 10923  15C5  1903               	btfsc	3,2
 10924  15C6  2DC9               	goto	l30409
 10925  15C7                     l30405:	
 10926                           
 10927                           ;BVH2_Appl_Layer.c: 1594: Sb2_Switch2 = Sb2_Fixed_Power;
 10928  15C7  30CA               	movlw	202
 10929  15C8  2E1F               	goto	L25
 10930  15C9                     l30409:	
 10931                           ;BVH2_Appl_Layer.c: 1595: }
 10932                           
 10933                           
 10934                           ;BVH2_Appl_Layer.c: 1613: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>
 10935                           ;BVH2_Appl_Layer.c: 1614: 8)) + ((Int16) (((Int16) (-((Int16) (UInt16) ((((UInt32) Sb3_P
      +                          roduct1) * 95) >> 7)))) + 200)));
 10936  15C9  0021               	movlb	1	; select bank1
 10937  15CA  085E               	movf	_ui8_PWM_dc_mat^(0+128),w
 10938  15CB  0020               	movlb	0	; select bank0
 10939  15CC  00AC               	movwf	?___lmul
 10940  15CD  30E0               	movlw	224
 10941  15CE  27CD  3191         	fcall	PL29	;call to abstracted procedure
 10942  15D0  273B  3191         	fcall	___lmul
 10943  15D2  082E               	movf	?___lmul+2,w
 10944  15D3  0024               	movlb	4	; select bank4
 10945  15D4  00BD               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512)
 10946  15D5  0020               	movlb	0	; select bank0
 10947  15D6  082D               	movf	?___lmul+1,w
 10948  15D7  0024               	movlb	4	; select bank4
 10949  15D8  00BC               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512)
 10950  15D9  30E0               	movlw	224
 10951  15DA  0020               	movlb	0	; select bank0
 10952  15DB  00AC               	movwf	?___lmul
 10953  15DC  305F               	movlw	95
 10954  15DD  27CD  3191         	fcall	PL29	;call to abstracted procedure
 10955  15DF  273B  3191         	fcall	___lmul
 10956  15E1  082C               	movf	?___lmul,w
 10957  15E2  00BA               	movwf	??_BVH2_Appl_Layer
 10958  15E3  082D               	movf	?___lmul+1,w
 10959  15E4  00BB               	movwf	??_BVH2_Appl_Layer+1
 10960  15E5  082E               	movf	?___lmul+2,w
 10961  15E6  00BC               	movwf	??_BVH2_Appl_Layer+2
 10962  15E7  082F               	movf	?___lmul+3,w
 10963  15E8  00BD               	movwf	??_BVH2_Appl_Layer+3
 10964  15E9  3007               	movlw	7
 10965  15EA                     u10995:	
 10966  15EA  36BD               	lsrf	??_BVH2_Appl_Layer+3,f
 10967  15EB  0CBC               	rrf	??_BVH2_Appl_Layer+2,f
 10968  15EC  0CBB               	rrf	??_BVH2_Appl_Layer+1,f
 10969  15ED  0CBA               	rrf	??_BVH2_Appl_Layer,f
 10970  15EE  0B89               	decfsz	9,f
 10971  15EF  2DEA               	goto	u10995
 10972  15F0  083A               	movf	??_BVH2_Appl_Layer,w
 10973  15F1  0024               	movlb	4	; select bank4
 10974  15F2  02BC               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 10975  15F3  0020               	movlb	0	; select bank0
 10976  15F4  083B               	movf	??_BVH2_Appl_Layer+1,w
 10977  15F5  0024               	movlb	4	; select bank4
 10978  15F6  3BBD               	subwfb	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 10979  15F7  30C8               	movlw	200
 10980  15F8  07BC               	addwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 10981  15F9  1803               	skipnc
 10982  15FA  0ABD               	incf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 10983                           
 10984                           ;BVH2_Appl_Layer.c: 1617: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 10985  15FB  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 10986  15FC  3A80               	xorlw	128
 10987  15FD  00FF               	movwf	127
 10988  15FE  3080               	movlw	128
 10989  15FF  027F               	subwf	127,w
 10990  1600  1D03               	skipz
 10991  1601  2E04               	goto	u11005
 10992  1602  30C9               	movlw	201
 10993  1603  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 10994  1604                     u11005:	
 10995  1604  1803               	skipnc
 10996  1605  2E1D               	goto	l30421
 10997  1606  0024               	movlb	4	; select bank4
 10998  1607  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 10999  1608  3A80               	xorlw	128
 11000  1609  00FF               	movwf	127
 11001  160A  3080               	movlw	128
 11002  160B  027F               	subwf	127,w
 11003  160C  1D03               	skipz
 11004  160D  2E10               	goto	u11015
 11005  160E  303C               	movlw	60
 11006  160F  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 11007  1610                     u11015:	
 11008  1610  1C03               	skipc
 11009  1611  2E15               	goto	l30419
 11010  1612  0024               	movlb	4	; select bank4
 11011  1613  083C               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 11012  1614  2E17               	goto	L18
 11013  1615                     l30419:	
 11014  1615  303C               	movlw	60
 11015  1616  0024               	movlb	4	; select bank4
 11016  1617                     L18:	
 11017  1617  00A4               	movwf	_BVH2_Appl_Layer$18244^(0+512)
 11018  1618  01A5               	clrf	(_BVH2_Appl_Layer$18244+1)^(0+512)
 11019  1619  0825               	movf	(_BVH2_Appl_Layer$18244+1)^(0+512),w
 11020  161A  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 11021  161B  0824               	movf	_BVH2_Appl_Layer$18244^(0+512),w
 11022  161C  2E7B               	goto	L19
 11023  161D                     l30421:	
 11024  161D  30C8               	movlw	200
 11025  161E  0024               	movlb	4	; select bank4
 11026  161F                     L25:	
 11027  161F  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 11028  1620                     L17:	
 11029  1620  01BA               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 11030  1621  2E7C               	goto	l30437
 11031  1622                     l30423:	
 11032                           
 11033                           ;BVH2_Appl_Layer.c: 1620: else {
 11034                           ;BVH2_Appl_Layer.c: 1622: Int16 Sb4_PI_sum;
 11035                           ;BVH2_Appl_Layer.c: 1627: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / (
      +                          (Int32) 800))) + ((UInt16)
 11036                           ;BVH2_Appl_Layer.c: 1628: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 11037  1622  0020               	movlb	0	; select bank0
 11038  1623  3003               	movlw	3
 11039  1624  01AF               	clrf	?___aldiv+3
 11040  1625  01AE               	clrf	?___aldiv+2
 11041  1626  00AD               	movwf	?___aldiv+1
 11042  1627  3020               	movlw	32
 11043  1628  00AC               	movwf	?___aldiv
 11044  1629  0022               	movlb	2	; select bank2
 11045  162A  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11046  162B  0020               	movlb	0	; select bank0
 11047  162C  00B3               	movwf	?___aldiv+7
 11048  162D  0022               	movlb	2	; select bank2
 11049  162E  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11050  162F  0020               	movlb	0	; select bank0
 11051  1630  00B2               	movwf	?___aldiv+6
 11052  1631  0022               	movlb	2	; select bank2
 11053  1632  0868               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11054  1633  0020               	movlb	0	; select bank0
 11055  1634  00B1               	movwf	?___aldiv+5
 11056  1635  0022               	movlb	2	; select bank2
 11057  1636  0867               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11058  1637  0020               	movlb	0	; select bank0
 11059  1638  00B0               	movwf	?___aldiv+4
 11060  1639  3190  207F  3191   	fcall	___aldiv
 11061  163C  082D               	movf	?___aldiv+1,w
 11062  163D  0024               	movlb	4	; select bank4
 11063  163E  00BF               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512)
 11064  163F  0020               	movlb	0	; select bank0
 11065  1640  082C               	movf	?___aldiv,w
 11066  1641  0024               	movlb	4	; select bank4
 11067  1642  00BE               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512)
 11068  1643  0022               	movlb	2	; select bank2
 11069  1644  0853               	movf	_ui8_Kp_mat^(0+256),w
 11070  1645  0020               	movlb	0	; select bank0
 11071  1646  00AC               	movwf	?___wmul
 11072  1647  01AD               	clrf	?___wmul+1
 11073  1648  27C4               	fcall	PL26	;call to abstracted procedure
 11074  1649  3183  238D  3191   	fcall	___wmul
 11075  164C  082C               	movf	?___wmul,w
 11076  164D  0024               	movlb	4	; select bank4
 11077  164E  07BE               	addwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),f
 11078  164F  0020               	movlb	0	; select bank0
 11079  1650  082D               	movf	?___wmul+1,w
 11080  1651  0024               	movlb	4	; select bank4
 11081  1652  3DBF               	addwfc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),f
 11082                           
 11083                           ;BVH2_Appl_Layer.c: 1631: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 11084  1653  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 11085  1654  3A80               	xorlw	128
 11086  1655  00FF               	movwf	127
 11087  1656  3080               	movlw	128
 11088  1657  027F               	subwf	127,w
 11089  1658  1D03               	skipz
 11090  1659  2E5C               	goto	u11025
 11091  165A  3001               	movlw	1
 11092  165B  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 11093  165C                     u11025:	
 11094  165C  1C03               	skipc
 11095  165D  2E66               	goto	l15948
 11096  165E  3000               	movlw	0
 11097  165F  0024               	movlb	4	; select bank4
 11098  1660  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 11099  1661  30CB               	movlw	203
 11100  1662  1903               	skipnz
 11101  1663  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 11102  1664  1803               	skipnc
 11103  1665  2DC7               	goto	l30405
 11104  1666                     l15948:	
 11105  1666  0024               	movlb	4	; select bank4
 11106  1667  1BBF               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),7
 11107  1668  2E75               	goto	l30433
 11108  1669  3000               	movlw	0
 11109  166A  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 11110  166B  3028               	movlw	40
 11111  166C  1903               	skipnz
 11112  166D  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 11113  166E  1C03               	skipc
 11114  166F  2E75               	goto	l30433
 11115  1670  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 11116  1671  00A7               	movwf	(_BVH2_Appl_Layer$18246+1)^(0+512)
 11117  1672  083E               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 11118  1673  00A6               	movwf	_BVH2_Appl_Layer$18246^(0+512)
 11119  1674  2E78               	goto	l15952
 11120  1675                     l30433:	
 11121  1675  3028               	movlw	40
 11122  1676  00A6               	movwf	_BVH2_Appl_Layer$18246^(0+512)
 11123  1677  01A7               	clrf	(_BVH2_Appl_Layer$18246+1)^(0+512)
 11124  1678                     l15952:	
 11125  1678  0827               	movf	(_BVH2_Appl_Layer$18246+1)^(0+512),w
 11126  1679  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 11127  167A  0826               	movf	_BVH2_Appl_Layer$18246^(0+512),w
 11128  167B                     L19:	
 11129  167B  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 11130  167C                     l30437:	
 11131                           
 11132                           ;BVH2_Appl_Layer.c: 1640: bl_Pumpoff_Alarm = Sb1_Logical_Operator2;
 11133  167C  083A               	movf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512),w
 11134  167D  0020               	movlb	0	; select bank0
 11135  167E  00BB               	movwf	??_BVH2_Appl_Layer+1
 11136  167F  0024               	movlb	4	; select bank4
 11137  1680  0839               	movf	BVH2_Appl_Layer@Sb2_Switch2^(0+512),w
 11138  1681  0020               	movlb	0	; select bank0
 11139  1682  00BA               	movwf	??_BVH2_Appl_Layer
 11140  1683  36BB               	lsrf	??_BVH2_Appl_Layer+1,f
 11141  1684  0CBA               	rrf	??_BVH2_Appl_Layer,f
 11142  1685  083A               	movf	??_BVH2_Appl_Layer,w
 11143  1686  0021               	movlb	1	; select bank1
 11144  1687  00E4               	movwf	_ui8_duty_cycle_mat^(0+128)
 11145                           
 11146                           ;BVH2_Appl_Layer.c: 1641: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 11147  1688  0024               	movlb	4	; select bank4
 11148  1689  0836               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512),w
 11149  168A  0022               	movlb	2	; select bank2
 11150  168B  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 11151                           
 11152                           ;BVH2_Appl_Layer.c: 1645: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<
 11153                           ;BVH2_Appl_Layer.c: 1646: 3));
 11154  168C  0023               	movlb	3	; select bank3
 11155  168D  0867               	movf	(_ui8_Ki_mat+1)^(0+384),w
 11156  168E  0020               	movlb	0	; select bank0
 11157  168F  00AD               	movwf	?___wmul+1
 11158  1690  0023               	movlb	3	; select bank3
 11159  1691  0866               	movf	_ui8_Ki_mat^(0+384),w
 11160  1692  0020               	movlb	0	; select bank0
 11161  1693  00AC               	movwf	?___wmul
 11162  1694  27C4               	fcall	PL26	;call to abstracted procedure
 11163  1695  3183  238D  3191   	fcall	___wmul
 11164  1698  082C               	movf	?___wmul,w
 11165  1699  00BA               	movwf	??_BVH2_Appl_Layer
 11166  169A  082D               	movf	?___wmul+1,w
 11167  169B  00BB               	movwf	??_BVH2_Appl_Layer+1
 11168  169C  35BA               	lslf	??_BVH2_Appl_Layer,f
 11169  169D  0DBB               	rlf	??_BVH2_Appl_Layer+1,f
 11170  169E  35BA               	lslf	??_BVH2_Appl_Layer,f
 11171  169F  0DBB               	rlf	??_BVH2_Appl_Layer+1,f
 11172  16A0  35BA               	lslf	??_BVH2_Appl_Layer,f
 11173  16A1  0DBB               	rlf	??_BVH2_Appl_Layer+1,f
 11174  16A2  083A               	movf	??_BVH2_Appl_Layer,w
 11175  16A3  00BC               	movwf	??_BVH2_Appl_Layer+2
 11176  16A4  083B               	movf	??_BVH2_Appl_Layer+1,w
 11177  16A5  00BD               	movwf	??_BVH2_Appl_Layer+3
 11178  16A6  3000               	movlw	0
 11179  16A7  1BBD               	btfsc	??_BVH2_Appl_Layer+3,7
 11180  16A8  30FF               	movlw	255
 11181  16A9  00BE               	movwf	??_BVH2_Appl_Layer+4
 11182  16AA  00BF               	movwf	??_BVH2_Appl_Layer+5
 11183  16AB  083C               	movf	??_BVH2_Appl_Layer+2,w
 11184  16AC  0022               	movlb	2	; select bank2
 11185  16AD  07E7               	addwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),f
 11186  16AE  0020               	movlb	0	; select bank0
 11187  16AF  083D               	movf	??_BVH2_Appl_Layer+3,w
 11188  16B0  0022               	movlb	2	; select bank2
 11189  16B1  3DE8               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),f
 11190  16B2  0020               	movlb	0	; select bank0
 11191  16B3  083E               	movf	??_BVH2_Appl_Layer+4,w
 11192  16B4  0022               	movlb	2	; select bank2
 11193  16B5  3DE9               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),f
 11194  16B6  0020               	movlb	0	; select bank0
 11195  16B7  083F               	movf	??_BVH2_Appl_Layer+5,w
 11196  16B8  0022               	movlb	2	; select bank2
 11197  16B9  3DEA               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),f
 11198                           
 11199                           ;BVH2_Appl_Layer.c: 1649: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 11200  16BA  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11201  16BB  27FB  3191         	fcall	PL50	;call to abstracted procedure
 11202  16BD  1D03               	skipz
 11203  16BE  2EC9               	goto	u11063
 11204  16BF  3002               	movlw	2
 11205  16C0  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11206  16C1  1D03               	skipz
 11207  16C2  2EC9               	goto	u11063
 11208  16C3  3077               	movlw	119
 11209  16C4  0268               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11210  16C5  1D03               	skipz
 11211  16C6  2EC9               	goto	u11063
 11212  16C7  3041               	movlw	65
 11213  16C8  0267               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11214  16C9                     u11063:	
 11215  16C9  1803               	skipnc
 11216  16CA  2F01               	goto	l30451
 11217  16CB  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11218  16CC  27FB  3191         	fcall	PL50	;call to abstracted procedure
 11219  16CE  1D03               	skipz
 11220  16CF  2EDA               	goto	u11073
 11221  16D0  3000               	movlw	0
 11222  16D1  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11223  16D2  1D03               	skipz
 11224  16D3  2EDA               	goto	u11073
 11225  16D4  307D               	movlw	125
 11226  16D5  0268               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11227  16D6  1D03               	skipz
 11228  16D7  2EDA               	goto	u11073
 11229  16D8  3000               	movlw	0
 11230  16D9  0267               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11231  16DA                     u11073:	
 11232  16DA  1C03               	skipc
 11233  16DB  2EEC               	goto	l30449
 11234  16DC  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 11235  16DD  0024               	movlb	4	; select bank4
 11236  16DE  00A3               	movwf	(_BVH2_Appl_Layer$18247+3)^(0+512)
 11237  16DF  0022               	movlb	2	; select bank2
 11238  16E0  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 11239  16E1  0024               	movlb	4	; select bank4
 11240  16E2  00A2               	movwf	(_BVH2_Appl_Layer$18247+2)^(0+512)
 11241  16E3  0022               	movlb	2	; select bank2
 11242  16E4  0868               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 11243  16E5  0024               	movlb	4	; select bank4
 11244  16E6  00A1               	movwf	(_BVH2_Appl_Layer$18247+1)^(0+512)
 11245  16E7  0022               	movlb	2	; select bank2
 11246  16E8  0867               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 11247  16E9  0024               	movlb	4	; select bank4
 11248  16EA  00A0               	movwf	_BVH2_Appl_Layer$18247^(0+512)
 11249  16EB  2EF2               	goto	l15960
 11250  16EC                     l30449:	
 11251  16EC  0024               	movlb	4	; select bank4
 11252  16ED  307D               	movlw	125
 11253  16EE  01A3               	clrf	(_BVH2_Appl_Layer$18247+3)^(0+512)
 11254  16EF  01A2               	clrf	(_BVH2_Appl_Layer$18247+2)^(0+512)
 11255  16F0  00A1               	movwf	(_BVH2_Appl_Layer$18247+1)^(0+512)
 11256  16F1  01A0               	clrf	_BVH2_Appl_Layer$18247^(0+512)
 11257  16F2                     l15960:	
 11258  16F2  0823               	movf	(_BVH2_Appl_Layer$18247+3)^(0+512),w
 11259  16F3  0022               	movlb	2	; select bank2
 11260  16F4  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11261  16F5  0024               	movlb	4	; select bank4
 11262  16F6  0822               	movf	(_BVH2_Appl_Layer$18247+2)^(0+512),w
 11263  16F7  0022               	movlb	2	; select bank2
 11264  16F8  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11265  16F9  0024               	movlb	4	; select bank4
 11266  16FA  0821               	movf	(_BVH2_Appl_Layer$18247+1)^(0+512),w
 11267  16FB  0022               	movlb	2	; select bank2
 11268  16FC  00E8               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11269  16FD  0024               	movlb	4	; select bank4
 11270  16FE  0820               	movf	_BVH2_Appl_Layer$18247^(0+512),w
 11271  16FF  0022               	movlb	2	; select bank2
 11272  1700  2F07               	goto	L20
 11273  1701                     l30451:	
 11274  1701  3002               	movlw	2
 11275  1702  01EA               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 11276  1703  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 11277  1704  3077               	movlw	119
 11278  1705  00E8               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 11279  1706  3040               	movlw	64
 11280  1707                     L20:	
 11281  1707  00E7               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 11282                           
 11283                           ;BVH2_Appl_Layer.c: 1652: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 11284  1708  01EB               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 11285  1709  0008               	return
 11286  170A                     __end_of_BVH2_Appl_Layer:	
 11287  170A                     __ptext2060:	
 11288 ;; =============== function _Cb34_PWM_Detection_node_fcn1 ends ============
 11289                           
 11290                           
 11291 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 11292 ;; Defined at:
 11293 ;;		line 1840 in file "../T_Link/BVH2_Appl_Layer.c"
 11294 ;; Parameters:    Size  Location     Type
 11295 ;;		None
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;		None
 11298 ;; Return value:  Size  Location     Type
 11299 ;;		None               void
 11300 ;; Registers used:
 11301 ;;		wreg, status,2, status,0
 11302 ;; Tracked objects:
 11303 ;;		On entry : 1F/1
 11304 ;;		On exit  : 1F/1
 11305 ;;		Unchanged: FFFE0/0
 11306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11307 ;;      Params:         0       0       0       0       0       0       0       0
 11308 ;;      Locals:         0       0       0       0       0       0       0       0
 11309 ;;      Temps:          0       0       0       0       0       0       0       0
 11310 ;;      Totals:         0       0       0       0       0       0       0       0
 11311 ;;Total ram usage:        0 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; Hardware stack levels required when called:    4
 11314 ;; This function calls:
 11315 ;;		Nothing
 11316 ;; This function is called by:
 11317 ;;		_BVH2_Appl_Layer
 11318 ;; This function uses a non-reentrant model
 11319 ;;
 11320  170A                     _Cb44_Pic_etat_monitor_node_fcn1:	
 11321                           
 11322                           ;BVH2_Appl_Layer.c: 1849: else {
 11323                           ;BVH2_Appl_Layer.c: 1850: if (Cb44_StateCnt > 5) {
 11324                           
 11325                           ;BVH2_Appl_Layer.c: 1843: if (bool_mat_pic_etat) {
 11326                           
 11327                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 11328  170A  3000               	movlw	0
 11329  170B  0227               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 11330  170C  3006               	movlw	6
 11331  170D  1903               	skipnz
 11332  170E  0226               	subwf	_Cb44_StateCnt^(0+128),w
 11333                           
 11334                           ;BVH2_Appl_Layer.c: 1852: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 11335  170F  084D               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 11336  1710  1C03               	skipc
 11337  1711  2F1B               	goto	L46
 11338  1712  39F8               	andlw	-8
 11339  1713  3803               	iorlw	3
 11340  1714  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 11341                           
 11342                           ;BVH2_Appl_Layer.c: 1854: Cb44_oAlarm = 0;
 11343  1715  0022               	movlb	2	; select bank2
 11344  1716  3018               	movlw	24
 11345  1717  01C7               	clrf	_Cb44_oShutoff^(0+256)
 11346                           
 11347                           ;BVH2_Appl_Layer.c: 1855: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 11348  1718  0021               	movlb	1	; select bank1
 11349  1719  04CD               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 11350                           
 11351                           ;BVH2_Appl_Layer.c: 1856: }
 11352  171A  0008               	return
 11353  171B                     L46:	
 11354                           ;BVH2_Appl_Layer.c: 1857: else {
 11355                           ;BVH2_Appl_Layer.c: 1858: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 1 ;
 11356                           
 11357  171B  39E7               	andlw	-25
 11358  171C  3808               	iorlw	8
 11359  171D  00CD               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 11360  171E  0008               	return
 11361  171F                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 11362  171F                     __ptext2057:	
 11363 ;; =============== function ___wmul ends ============
 11364                           
 11365                           
 11366 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 11367 ;; Defined at:
 11368 ;;		line 1677 in file "../T_Link/BVH2_Appl_Layer.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;		None
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;		None
 11373 ;; Return value:  Size  Location     Type
 11374 ;;		None               void
 11375 ;; Registers used:
 11376 ;;		wreg, status,2, status,0
 11377 ;; Tracked objects:
 11378 ;;		On entry : 1F/1
 11379 ;;		On exit  : 1F/1
 11380 ;;		Unchanged: FFFE0/0
 11381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11382 ;;      Params:         0       0       0       0       0       0       0       0
 11383 ;;      Locals:         0       0       0       0       0       0       0       0
 11384 ;;      Temps:          0       0       0       0       0       0       0       0
 11385 ;;      Totals:         0       0       0       0       0       0       0       0
 11386 ;;Total ram usage:        0 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; Hardware stack levels required when called:    4
 11389 ;; This function calls:
 11390 ;;		Nothing
 11391 ;; This function is called by:
 11392 ;;		_BVH2_Appl_Layer
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395  171F                     _Cb1_Current_An___High_node_fcn1:	
 11396                           
 11397                           ;BVH2_Appl_Layer.c: 1680: if (bool_mat_currAlarm_bldc) {
 11398                           
 11399                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 11400  171F  0858               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 11401  1720  1903               	btfsc	3,2
 11402  1721  2F2F               	goto	l28857
 11403                           
 11404                           ;BVH2_Appl_Layer.c: 1682: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 11405                           ;BVH2_Appl_Layer.c: 1683: (UInt8)2;
 11406  1722  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 11407  1723  39F0               	andlw	-16
 11408  1724  3802               	iorlw	2
 11409  1725  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 11410                           
 11411                           ;BVH2_Appl_Layer.c: 1684: Cb1_StateCnt = 0 ;
 11412  1726  01A4               	clrf	_Cb1_StateCnt^(0+128)
 11413  1727  01A5               	clrf	(_Cb1_StateCnt+1)^(0+128)
 11414  1728  2F2B               	goto	l28855
 11415  1729                     L43:	
 11416                           ;BVH2_Appl_Layer.c: 1690: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 11417                           ;BVH2_Appl_Layer.c: 1691: (UInt8)5;
 11418                           
 11419                           
 11420                           ;BVH2_Appl_Layer.c: 1692: Cb1_oShutoff = 0;
 11421                           
 11422                           ;BVH2_Appl_Layer.c: 1693: Cb1_oCurrentAlarm = 0;
 11423  1729  27DC               	fcall	PL34	;call to abstracted procedure
 11424                           
 11425                           ;BVH2_Appl_Layer.c: 1694: Cb1_RestartCounter = 0 ;
 11426  172A  01BF               	clrf	_Cb1_RestartCounter^(0+256)
 11427  172B                     l28855:	
 11428                           
 11429                           ;BVH2_Appl_Layer.c: 1685: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 11430  172B  3030               	movlw	48
 11431  172C  0021               	movlb	1	; select bank1
 11432  172D  04CB               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 11433                           
 11434                           ;BVH2_Appl_Layer.c: 1686: }
 11435  172E  0008               	return
 11436  172F                     l28857:	
 11437                           
 11438                           ;BVH2_Appl_Layer.c: 1687: else {
 11439                           ;BVH2_Appl_Layer.c: 1688: if (Cb1_StateCnt > 100) {
 11440  172F  3000               	movlw	0
 11441  1730  0225               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 11442  1731  3065               	movlw	101
 11443  1732  1903               	skipnz
 11444  1733  0224               	subwf	_Cb1_StateCnt^(0+128),w
 11445                           
 11446                           ;BVH2_Appl_Layer.c: 1697: else {
 11447                           ;BVH2_Appl_Layer.c: 1698: SIBFS_Current_Analysis_High_b.Cb1_glflag = 1 ;
 11448  1734  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 11449  1735  1803               	btfsc	3,0
 11450  1736  2F29               	goto	L43
 11451  1737  39CF               	andlw	-49
 11452  1738  3810               	iorlw	16
 11453  1739  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 11454  173A  0008               	return
 11455  173B                     __end_of_Cb1_Current_An___High_node_fcn1:	
 11456  173B                     __ptext2054:	
 11457 ;; =============== function ___awdiv ends ============
 11458                           
 11459                           
 11460 ;; *************** function ___lmul *****************
 11461 ;; Defined at:
 11462 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\lmul.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;  multiplier      4   12[BANK0 ] unsigned long 
 11465 ;;  multiplicand    4   16[BANK0 ] unsigned long 
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;  product         4   20[BANK0 ] unsigned long 
 11468 ;; Return value:  Size  Location     Type
 11469 ;;                  4   12[BANK0 ] unsigned long 
 11470 ;; Registers used:
 11471 ;;		wreg, status,2, status,0
 11472 ;; Tracked objects:
 11473 ;;		On entry : 1F/0
 11474 ;;		On exit  : 1F/0
 11475 ;;		Unchanged: FFFE0/0
 11476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11477 ;;      Params:         0       8       0       0       0       0       0       0
 11478 ;;      Locals:         0       4       0       0       0       0       0       0
 11479 ;;      Temps:          0       0       0       0       0       0       0       0
 11480 ;;      Totals:         0      12       0       0       0       0       0       0
 11481 ;;Total ram usage:       12 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; Hardware stack levels required when called:    4
 11484 ;; This function calls:
 11485 ;;		Nothing
 11486 ;; This function is called by:
 11487 ;;		_BVH2_Appl_Layer
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490  173B                     ___lmul:	
 11491                           
 11492                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11493  173B  01B4               	clrf	___lmul@product
 11494  173C  01B5               	clrf	___lmul@product+1
 11495  173D  01B6               	clrf	___lmul@product+2
 11496  173E  01B7               	clrf	___lmul@product+3
 11497  173F                     l19762:	
 11498  173F  1C2C               	btfss	___lmul@multiplier,0
 11499  1740  2F49               	goto	l28917
 11500  1741  0830               	movf	___lmul@multiplicand,w
 11501  1742  07B4               	addwf	___lmul@product,f
 11502  1743  0831               	movf	___lmul@multiplicand+1,w
 11503  1744  3DB5               	addwfc	___lmul@product+1,f
 11504  1745  0832               	movf	___lmul@multiplicand+2,w
 11505  1746  3DB6               	addwfc	___lmul@product+2,f
 11506  1747  0833               	movf	___lmul@multiplicand+3,w
 11507  1748  3DB7               	addwfc	___lmul@product+3,f
 11508  1749                     l28917:	
 11509  1749  35B0               	lslf	___lmul@multiplicand,f
 11510  174A  0DB1               	rlf	___lmul@multiplicand+1,f
 11511  174B  0DB2               	rlf	___lmul@multiplicand+2,f
 11512  174C  0DB3               	rlf	___lmul@multiplicand+3,f
 11513  174D  36AF               	lsrf	___lmul@multiplier+3,f
 11514  174E  0CAE               	rrf	___lmul@multiplier+2,f
 11515  174F  0CAD               	rrf	___lmul@multiplier+1,f
 11516  1750  0CAC               	rrf	___lmul@multiplier,f
 11517  1751  082F               	movf	___lmul@multiplier+3,w
 11518  1752  042E               	iorwf	___lmul@multiplier+2,w
 11519  1753  042D               	iorwf	___lmul@multiplier+1,w
 11520  1754  042C               	iorwf	___lmul@multiplier,w
 11521  1755  1D03               	skipz
 11522  1756  2F3F               	goto	l19762
 11523  1757  0837               	movf	___lmul@product+3,w
 11524  1758  00AF               	movwf	?___lmul+3
 11525  1759  0836               	movf	___lmul@product+2,w
 11526  175A  00AE               	movwf	?___lmul+2
 11527  175B  0835               	movf	___lmul@product+1,w
 11528  175C  00AD               	movwf	?___lmul+1
 11529  175D  0834               	movf	___lmul@product,w
 11530  175E  00AC               	movwf	?___lmul
 11531  175F  0008               	return
 11532  1760                     __end_of___lmul:	
 11533  1760                     __ptext2058:	
 11534 ;; =============== function _Cb1_Current_An___High_node_fcn1 ends ============
 11535                           
 11536                           
 11537 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 11538 ;; Defined at:
 11539 ;;		line 1881 in file "../T_Link/BVH2_Appl_Layer.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;		None
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;		None
 11544 ;; Return value:  Size  Location     Type
 11545 ;;		None               void
 11546 ;; Registers used:
 11547 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11548 ;; Tracked objects:
 11549 ;;		On entry : 1F/1
 11550 ;;		On exit  : 1F/2
 11551 ;;		Unchanged: FFFE0/0
 11552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11553 ;;      Params:         0       0       0       0       0       0       0       0
 11554 ;;      Locals:         0       0       0       0       0       0       0       0
 11555 ;;      Temps:          0       0       0       0       0       0       0       0
 11556 ;;      Totals:         0       0       0       0       0       0       0       0
 11557 ;;Total ram usage:        0 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    4
 11560 ;; This function calls:
 11561 ;;		Nothing
 11562 ;; This function is called by:
 11563 ;;		_BVH2_Appl_Layer
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566  1760                     _Cb56_UbatHandling_node_fcn2:	
 11567                           
 11568                           ;BVH2_Appl_Layer.c: 1883: if (((UInt8)ui8_BattVolt_mat) > 230) {
 11569                           
 11570                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 11571  1760  30E7               	movlw	231
 11572  1761  0240               	subwf	_ui8_BattVolt_mat^(0+128),w
 11573  1762  1803               	btfsc	3,0
 11574  1763  2F6B               	goto	l28831
 11575  1764  2F84               	goto	l28837
 11576  1765                     l16002:	
 11577                           ;BVH2_Appl_Layer.c: 1886: case 2: {
 11578                           
 11579                           
 11580                           ;BVH2_Appl_Layer.c: 1887: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 11581  1765  124E               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 11582                           
 11583                           ;BVH2_Appl_Layer.c: 1888: break;
 11584  1766  2F74               	goto	l16003
 11585  1767                     l16004:	
 11586                           ;BVH2_Appl_Layer.c: 1889: }
 11587                           ;BVH2_Appl_Layer.c: 1890: case 3: {
 11588                           
 11589                           
 11590                           ;BVH2_Appl_Layer.c: 1891: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 11591  1767  12CE               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 11592                           
 11593                           ;BVH2_Appl_Layer.c: 1892: break;
 11594  1768  2F74               	goto	l16003
 11595  1769                     l16005:	
 11596                           ;BVH2_Appl_Layer.c: 1893: }
 11597                           ;BVH2_Appl_Layer.c: 1894: default: {
 11598                           
 11599                           
 11600                           ;BVH2_Appl_Layer.c: 1895: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 11601  1769  134E               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 11602                           
 11603                           ;BVH2_Appl_Layer.c: 1896: }
 11604                           ;BVH2_Appl_Layer.c: 1897: }
 11605  176A  2F74               	goto	l16003
 11606  176B                     l28831:	
 11607  176B  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
 11608  176C  3907               	andlw	7
 11609                           
 11610                           ; Switch size 1, requested type "space"
 11611                           ; Number of cases is 2, Range of values is 2 to 3
 11612                           ; switch strategies available:
 11613                           ; Name         Instructions Cycles
 11614                           ; simple_byte            7     4 (average)
 11615                           ; direct_byte           13     9 (fixed)
 11616                           ; jumptable            263     9 (fixed)
 11617                           ;	Chosen strategy is simple_byte
 11618  176D  3A02               	xorlw	2	; case 2
 11619  176E  1903               	skipnz
 11620  176F  2F65               	goto	l16002
 11621  1770  3A01               	xorlw	1	; case 3
 11622  1771  1903               	skipnz
 11623  1772  2F67               	goto	l16004
 11624  1773  2F69               	goto	l16005
 11625  1774                     l16003:	
 11626                           
 11627                           ;BVH2_Appl_Layer.c: 1898: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 11628  1774  164E               	bsf	_SIBFS_UbatHandling_b^(0+128),4
 11629  1775                     L44:	
 11630                           
 11631                           ;BVH2_Appl_Layer.c: 1899: Cb56_odPumpOff = 1;
 11632  1775  0022               	movlb	2	; select bank2
 11633  1776  01C9               	clrf	_Cb56_odPumpOff^(0+256)
 11634  1777  0AC9               	incf	_Cb56_odPumpOff^(0+256),f
 11635                           
 11636                           ;BVH2_Appl_Layer.c: 1900: Cb56_odFixedValueSel = 0;
 11637  1778  0021               	movlb	1	; select bank1
 11638  1779  01C9               	clrf	_Cb56_odFixedValueSel^(0+128)
 11639                           
 11640                           ;BVH2_Appl_Layer.c: 1901: Cb56_oUbat_Alarm_High = 1;
 11641  177A  0022               	movlb	2	; select bank2
 11642  177B  01C8               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 11643  177C  0AC8               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 11644                           
 11645                           ;BVH2_Appl_Layer.c: 1902: }
 11646  177D  0008               	return
 11647  177E                     l16008:	
 11648                           ;BVH2_Appl_Layer.c: 1905: case 2: {
 11649                           
 11650                           
 11651                           ;BVH2_Appl_Layer.c: 1906: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 11652  177E  124E               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 11653                           
 11654                           ;BVH2_Appl_Layer.c: 1907: break;
 11655  177F  2F8D               	goto	l28839
 11656  1780                     l16010:	
 11657                           ;BVH2_Appl_Layer.c: 1908: }
 11658                           ;BVH2_Appl_Layer.c: 1909: case 3: {
 11659                           
 11660                           
 11661                           ;BVH2_Appl_Layer.c: 1910: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 11662  1780  12CE               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 11663                           
 11664                           ;BVH2_Appl_Layer.c: 1911: break;
 11665  1781  2F8D               	goto	l28839
 11666  1782                     l16011:	
 11667                           ;BVH2_Appl_Layer.c: 1912: }
 11668                           ;BVH2_Appl_Layer.c: 1913: default: {
 11669                           
 11670                           
 11671                           ;BVH2_Appl_Layer.c: 1914: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 11672  1782  134E               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 11673                           
 11674                           ;BVH2_Appl_Layer.c: 1915: }
 11675                           ;BVH2_Appl_Layer.c: 1916: }
 11676  1783  2F8D               	goto	l28839
 11677  1784                     l28837:	
 11678  1784  084E               	movf	_SIBFS_UbatHandling_b^(0+128),w
 11679  1785  3907               	andlw	7
 11680                           
 11681                           ; Switch size 1, requested type "space"
 11682                           ; Number of cases is 2, Range of values is 2 to 3
 11683                           ; switch strategies available:
 11684                           ; Name         Instructions Cycles
 11685                           ; simple_byte            7     4 (average)
 11686                           ; direct_byte           13     9 (fixed)
 11687                           ; jumptable            263     9 (fixed)
 11688                           ;	Chosen strategy is simple_byte
 11689  1786  3A02               	xorlw	2	; case 2
 11690  1787  1903               	skipnz
 11691  1788  2F7E               	goto	l16008
 11692  1789  3A01               	xorlw	1	; case 3
 11693  178A  1903               	skipnz
 11694  178B  2F80               	goto	l16010
 11695  178C  2F82               	goto	l16011
 11696  178D                     l28839:	
 11697                           
 11698                           ;BVH2_Appl_Layer.c: 1919: if (((UInt8)ui8_BattVolt_mat) < 45) {
 11699  178D  302D               	movlw	45
 11700  178E  0240               	subwf	_ui8_BattVolt_mat^(0+128),w
 11701  178F  1803               	skipnc
 11702  1790  2F93               	goto	l16012
 11703                           
 11704                           ;BVH2_Appl_Layer.c: 1921: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 11705  1791  16CE               	bsf	_SIBFS_UbatHandling_b^(0+128),5
 11706  1792  2F75               	goto	L44
 11707  1793                     l16012:	
 11708                           ;BVH2_Appl_Layer.c: 1922: Cb56_odPumpOff = 1;
 11709                           
 11710                           
 11711                           ;BVH2_Appl_Layer.c: 1926: else {
 11712                           ;BVH2_Appl_Layer.c: 1928: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 11713  1793  174E               	bsf	_SIBFS_UbatHandling_b^(0+128),6
 11714                           
 11715                           ;BVH2_Appl_Layer.c: 1929: Cb56_odPumpOff = 0;
 11716                           
 11717                           ;BVH2_Appl_Layer.c: 1930: Cb56_odFixedValueSel = 0;
 11718                           
 11719                           ;BVH2_Appl_Layer.c: 1931: Cb56_oUbat_Alarm_High = 0;
 11720  1794  27EA               	fcall	PL36	;call to abstracted procedure
 11721  1795  0008               	return
 11722  1796                     __end_of_Cb56_UbatHandling_node_fcn2:	
 11723  1796                     PL12:	
 11724  1796  0020               	movlb	0	; select bank0
 11725  1797  00BB               	movwf	??_BVH2_Appl_Layer+1
 11726  1798  0021               	movlb	1	; select bank1
 11727  1799  0839               	movf	(_ui16_mat_Current+1)^(0+128),w
 11728  179A  0020               	movlb	0	; select bank0
 11729  179B  023B               	subwf	??_BVH2_Appl_Layer+1,w
 11730  179C  1D03               	skipz
 11731  179D  0008               	return
 11732  179E  0021               	movlb	1	; select bank1
 11733  179F  0838               	movf	_ui16_mat_Current^(0+128),w
 11734  17A0  0020               	movlb	0	; select bank0
 11735  17A1  023A               	subwf	??_BVH2_Appl_Layer,w
 11736  17A2  0008               	return
 11737  17A3                     PL13:	
 11738  17A3  086C               	movf	_ui16_Current_Thresh^(0+384),w
 11739  17A4  3EFE               	addlw	254
 11740  17A5  0020               	movlb	0	; select bank0
 11741  17A6  00BA               	movwf	??_BVH2_Appl_Layer
 11742  17A7  30FF               	movlw	255
 11743  17A8  0023               	movlb	3	; select bank3
 11744  17A9  3D6D               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 11745  17AA  0008               	return
 11746  17AB                     PL15:	
 11747  17AB  086C               	movf	_ui16_Current_Thresh^(0+384),w
 11748  17AC  3E02               	addlw	2
 11749  17AD  0020               	movlb	0	; select bank0
 11750  17AE  00BA               	movwf	??_BVH2_Appl_Layer
 11751  17AF  3000               	movlw	0
 11752  17B0  0023               	movlb	3	; select bank3
 11753  17B1  3D6D               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 11754  17B2  0020               	movlb	0	; select bank0
 11755  17B3  00BB               	movwf	??_BVH2_Appl_Layer+1
 11756  17B4  0021               	movlb	1	; select bank1
 11757  17B5  0239               	subwf	(_ui16_mat_Current+1)^(0+128),w
 11758  17B6  1D03               	skipz
 11759  17B7  0008               	return
 11760  17B8  0020               	movlb	0	; select bank0
 11761  17B9  083A               	movf	??_BVH2_Appl_Layer,w
 11762  17BA  0021               	movlb	1	; select bank1
 11763  17BB  0238               	subwf	_ui16_mat_Current^(0+128),w
 11764  17BC  0008               	return
 11765  17BD                     PL25:	
 11766  17BD  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 11767  17BE  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 11768  17BF  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 11769  17C0  0023               	movlb	3	; select bank3
 11770  17C1  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 11771  17C2  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 11772  17C3  0008               	return
 11773  17C4                     PL26:	
 11774  17C4  0024               	movlb	4	; select bank4
 11775  17C5  0838               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),w
 11776  17C6  0020               	movlb	0	; select bank0
 11777  17C7  00AF               	movwf	?___wmul+3
 11778  17C8  0024               	movlb	4	; select bank4
 11779  17C9  0837               	movf	BVH2_Appl_Layer@Sb2_Error^(0+512),w
 11780  17CA  0020               	movlb	0	; select bank0
 11781  17CB  00AE               	movwf	?___wmul+2
 11782  17CC  0008               	return
 11783  17CD                     PL29:	
 11784  17CD  01AD               	clrf	?___lmul+1
 11785  17CE  01AE               	clrf	?___lmul+2
 11786  17CF  01AF               	clrf	?___lmul+3
 11787  17D0  00B0               	movwf	?___lmul+4
 11788  17D1  01B1               	clrf	?___lmul+5
 11789  17D2  01B2               	clrf	?___lmul+6
 11790  17D3  01B3               	clrf	?___lmul+7
 11791  17D4  0008               	return
 11792  17D5                     PL33:	
 11793  17D5  39F8               	andlw	-8
 11794  17D6  3804               	iorlw	4
 11795  17D7  00A2               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 11796  17D8  01A0               	clrf	BVH2_Appl_Layer@Cb24_StateCnt^(0+128)
 11797  17D9  01A1               	clrf	(BVH2_Appl_Layer@Cb24_StateCnt+1)^(0+128)
 11798  17DA  0022               	movlb	2	; select bank2
 11799  17DB  0008               	return
 11800  17DC                     PL34:	
 11801  17DC  39F0               	andlw	-16
 11802  17DD  3805               	iorlw	5
 11803  17DE  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 11804  17DF  0022               	movlb	2	; select bank2
 11805  17E0  01C1               	clrf	_Cb1_oShutoff^(0+256)
 11806  17E1  01C0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 11807  17E2  0008               	return
 11808  17E3                     PL35:	
 11809  17E3  0020               	movlb	0	; select bank0
 11810  17E4  00BA               	movwf	??_BVH2_Appl_Layer
 11811  17E5  0CBA               	rrf	??_BVH2_Appl_Layer,f
 11812  17E6  0C3A               	rrf	??_BVH2_Appl_Layer,w
 11813  17E7  3903               	andlw	3
 11814  17E8  3A03               	xorlw	3
 11815  17E9  0008               	return
 11816  17EA                     PL36:	
 11817  17EA  0022               	movlb	2	; select bank2
 11818  17EB  01C9               	clrf	_Cb56_odPumpOff^(0+256)
 11819  17EC  0021               	movlb	1	; select bank1
 11820  17ED  01C9               	clrf	_Cb56_odFixedValueSel^(0+128)
 11821  17EE  0022               	movlb	2	; select bank2
 11822  17EF  01C8               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 11823  17F0  0008               	return
 11824  17F1                     PL38:	
 11825  17F1  0023               	movlb	3	; select bank3
 11826  17F2  01C0               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+384)
 11827  17F3  01C1               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+384)
 11828  17F4  0022               	movlb	2	; select bank2
 11829  17F5  01B6               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 11830  17F6  0008               	return
 11831  17F7                     PL49:	
 11832  17F7  3000               	movlw	0
 11833  17F8  0021               	movlb	1	; select bank1
 11834  17F9  0233               	subwf	(_ui16_Speed_mat+1)^(0+128),w
 11835  17FA  3405               	retlw	5
 11836  17FB                     PL50:	
 11837  17FB  3A80               	xorlw	128
 11838  17FC  00FF               	movwf	127
 11839  17FD  3080               	movlw	128
 11840  17FE  027F               	subwf	127,w
 11841  17FF  0008               	return
 11842                           
 11843                           	psect	swtext1
 11844  00CE                     __pswtext1:	
 11845  00CE                     S31595:	
 11846  00CE  3191  29C3         	ljmp	l29813
 11847  00D0  3191  29C3         	ljmp	l29813
 11848  00D2  3191  29C3         	ljmp	l29813
 11849  00D4  3191  29C3         	ljmp	l29813
 11850  00D6  3191  29C3         	ljmp	l29813
 11851  00D8  3191  29C3         	ljmp	l29813
 11852  00DA  3191  29C3         	ljmp	l29813
 11853  00DC  3191  29C3         	ljmp	l29813
 11854                           
 11855                           	psect	text2040
 11856  1B51                     __ptext2040:	
 11857 ;; =============== function _BVH2_Appl_Layer ends ============
 11858                           
 11859                           
 11860 ;; *************** function _timer_init *****************
 11861 ;; Defined at:
 11862 ;;		line 75 in file "../timer.c"
 11863 ;; Parameters:    Size  Location     Type
 11864 ;;  ui8_TmrNb       1    wreg     unsigned char 
 11865 ;; Auto vars:     Size  Location     Type
 11866 ;;  ui8_TmrNb       1   13[BANK0 ] unsigned char 
 11867 ;; Return value:  Size  Location     Type
 11868 ;;		None               void
 11869 ;; Registers used:
 11870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11871 ;; Tracked objects:
 11872 ;;		On entry : 16/1
 11873 ;;		On exit  : 16/0
 11874 ;;		Unchanged: FFFE0/0
 11875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11876 ;;      Params:         0       0       0       0       0       0       0       0
 11877 ;;      Locals:         0       1       0       0       0       0       0       0
 11878 ;;      Temps:          0       0       0       0       0       0       0       0
 11879 ;;      Totals:         0       1       0       0       0       0       0       0
 11880 ;;Total ram usage:        1 bytes
 11881 ;; Hardware stack levels used:    1
 11882 ;; Hardware stack levels required when called:    5
 11883 ;; This function calls:
 11884 ;;		_clear_timer
 11885 ;; This function is called by:
 11886 ;;		_system_init
 11887 ;; This function uses a non-reentrant model
 11888 ;;
 11889  1B51                     _timer_init:	
 11890                           
 11891                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11892                           ;timer_init@ui8_TmrNb stored from wreg
 11893  1B51  0020               	movlb	0	; select bank0
 11894  1B52  00AD               	movwf	timer_init@ui8_TmrNb
 11895                           
 11896                           ;timer.c: 77: switch( ui8_TmrNb )
 11897  1B53  2B7D               	goto	l26417
 11898  1B54                     l26387:	
 11899                           
 11900                           ;timer.c: 83: {
 11901                           ;timer.c: 86: clear_timer( 0 );
 11902  1B54  3000               	movlw	0
 11903  1B55  3183  236C         	fcall	_clear_timer
 11904                           
 11905                           ;timer.c: 87: TMR0IE = 0;
 11906  1B57  128B               	bcf	11,5
 11907                           
 11908                           ;timer.c: 88: break;
 11909  1B58  0008               	return
 11910  1B59                     l26391:	
 11911                           
 11912                           ;timer.c: 95: {
 11913                           ;timer.c: 98: clear_timer( 1 );
 11914  1B59  3001               	movlw	1
 11915  1B5A  3183  236C         	fcall	_clear_timer
 11916                           
 11917                           ;timer.c: 99: T1CON = 0b01110101;
 11918  1B5C  3075               	movlw	117
 11919  1B5D  0020               	movlb	0	; select bank0
 11920  1B5E  0098               	movwf	24	;volatile
 11921                           
 11922                           ;timer.c: 100: TMR1IE = 0;
 11923  1B5F  0021               	movlb	1	; select bank1
 11924  1B60  1011               	bcf	17,0
 11925                           
 11926                           ;timer.c: 101: break;
 11927  1B61  0008               	return
 11928  1B62                     l26397:	
 11929                           
 11930                           ;timer.c: 108: {
 11931                           ;timer.c: 111: clear_timer( 2 );
 11932  1B62  3002               	movlw	2
 11933  1B63  3183  236C         	fcall	_clear_timer
 11934                           
 11935                           ;timer.c: 112: T2CON = 0b00000111;
 11936  1B65  3007               	movlw	7
 11937  1B66  0020               	movlb	0	; select bank0
 11938  1B67  009C               	movwf	28	;volatile
 11939                           
 11940                           ;timer.c: 113: TMR2IE = 0;
 11941  1B68  0021               	movlb	1	; select bank1
 11942  1B69  1091               	bcf	17,1
 11943                           
 11944                           ;timer.c: 114: break;
 11945  1B6A  0008               	return
 11946  1B6B                     l26403:	
 11947                           
 11948                           ;timer.c: 121: {
 11949                           ;timer.c: 124: clear_timer( 4 );
 11950  1B6B  3004               	movlw	4
 11951  1B6C  3183  236C         	fcall	_clear_timer
 11952                           
 11953                           ;timer.c: 125: T4CON = 0b00001110;
 11954  1B6E  300E               	movlw	14
 11955  1B6F  0028               	movlb	8	; select bank8
 11956  1B70  0097               	movwf	23	;volatile
 11957                           
 11958                           ;timer.c: 129: TMR4IE = 1;
 11959  1B71  0021               	movlb	1	; select bank1
 11960  1B72  1493               	bsf	19,1
 11961                           
 11962                           ;timer.c: 131: break;
 11963  1B73  0008               	return
 11964  1B74                     l26409:	
 11965                           
 11966                           ;timer.c: 138: {
 11967                           ;timer.c: 141: clear_timer( 6 );
 11968  1B74  3006               	movlw	6
 11969  1B75  3183  236C         	fcall	_clear_timer
 11970                           
 11971                           ;timer.c: 142: T6CON = 0b00000101;
 11972  1B77  3005               	movlw	5
 11973  1B78  0028               	movlb	8	; select bank8
 11974  1B79  009E               	movwf	30	;volatile
 11975                           
 11976                           ;timer.c: 147: TMR6IE = 1;
 11977  1B7A  0021               	movlb	1	; select bank1
 11978  1B7B  1593               	bsf	19,3
 11979                           
 11980                           ;timer.c: 169: break;
 11981  1B7C  0008               	return
 11982  1B7D                     l26417:	
 11983  1B7D  082D               	movf	timer_init@ui8_TmrNb,w
 11984                           
 11985                           ; Switch size 1, requested type "space"
 11986                           ; Number of cases is 5, Range of values is 0 to 6
 11987                           ; switch strategies available:
 11988                           ; Name         Instructions Cycles
 11989                           ; simple_byte           16     9 (average)
 11990                           ; direct_byte           20     6 (fixed)
 11991                           ; jumptable            260     6 (fixed)
 11992                           ; rangetable            11     4 (fixed)
 11993                           ; spacedrange           19     6 (fixed)
 11994                           ; locatedrange           7     3 (fixed)
 11995                           ;	Chosen strategy is simple_byte
 11996  1B7E  3A00               	xorlw	0	; case 0
 11997  1B7F  1903               	skipnz
 11998  1B80  2B54               	goto	l26387
 11999  1B81  3A01               	xorlw	1	; case 1
 12000  1B82  1903               	skipnz
 12001  1B83  2B59               	goto	l26391
 12002  1B84  3A03               	xorlw	3	; case 2
 12003  1B85  1903               	skipnz
 12004  1B86  2B62               	goto	l26397
 12005  1B87  3A06               	xorlw	6	; case 4
 12006  1B88  1903               	skipnz
 12007  1B89  2B6B               	goto	l26403
 12008  1B8A  3A02               	xorlw	2	; case 6
 12009  1B8B  1903               	skipnz
 12010  1B8C  2B74               	goto	l26409
 12011  1B8D  2B8E               	goto	l17831
 12012  1B8E                     l17831:	
 12013  1B8E  0008               	return
 12014  1B8F                     __end_of_timer_init:	
 12015                           
 12016                           	psect	text2041
 12017  1003                     __ptext2041:	
 12018 ;; =============== function _timer_init ends ============
 12019                           
 12020                           
 12021 ;; *************** function _init_ports *****************
 12022 ;; Defined at:
 12023 ;;		line 396 in file "../main.c"
 12024 ;; Parameters:    Size  Location     Type
 12025 ;;		None
 12026 ;; Auto vars:     Size  Location     Type
 12027 ;;		None
 12028 ;; Return value:  Size  Location     Type
 12029 ;;		None               void
 12030 ;; Registers used:
 12031 ;;		wreg, status,2, pclath, cstack
 12032 ;; Tracked objects:
 12033 ;;		On entry : 17F/3
 12034 ;;		On exit  : 17F/1
 12035 ;;		Unchanged: FFE80/0
 12036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12037 ;;      Params:         0       0       0       0       0       0       0       0
 12038 ;;      Locals:         0       0       0       0       0       0       0       0
 12039 ;;      Temps:          0       0       0       0       0       0       0       0
 12040 ;;      Totals:         0       0       0       0       0       0       0       0
 12041 ;;Total ram usage:        0 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    5
 12044 ;; This function calls:
 12045 ;;		_read_eeprom_data
 12046 ;; This function is called by:
 12047 ;;		_system_init
 12048 ;; This function uses a non-reentrant model
 12049 ;;
 12050  1003                     _init_ports:	
 12051                           
 12052                           ;main.c: 401: ANSELA = 0b00100111;
 12053                           
 12054                           ; Regs used in _init_ports: [wreg+status,2+pclath+cstack]
 12055  1003  3027               	movlw	39
 12056  1004  008C               	movwf	12	;volatile
 12057                           
 12058                           ;main.c: 402: ANSELB = 0b00101001;
 12059  1005  3029               	movlw	41
 12060  1006  008D               	movwf	13	;volatile
 12061                           
 12062                           ;main.c: 405: LATA = 0;
 12063  1007  0022               	movlb	2	; select bank2
 12064  1008  018C               	clrf	12	;volatile
 12065                           
 12066                           ;main.c: 406: LATB = 0;
 12067  1009  018D               	clrf	13	;volatile
 12068                           
 12069                           ;main.c: 407: LATC = 0;
 12070  100A  018E               	clrf	14	;volatile
 12071                           
 12072                           ;main.c: 412: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
 12073  100B  3055               	movlw	85
 12074  100C  3183  2322  3190   	fcall	_read_eeprom_data
 12075  100F  3A55               	xorlw	85
 12076  1010  1903               	skipnz
 12077  1011  2814               	goto	l29737
 12078  1012  1A8E               	btfsc	14,5
 12079  1013  281B               	goto	l29741
 12080  1014                     l29737:	
 12081                           
 12082                           ;main.c: 414: {
 12083                           ;main.c: 416: TRISA = 0b01111111;
 12084  1014  307F               	movlw	127
 12085  1015  0021               	movlb	1	; select bank1
 12086  1016  008C               	movwf	12	;volatile
 12087                           
 12088                           ;main.c: 425: TRISB = 0b00111001;
 12089  1017  3039               	movlw	57
 12090  1018  008D               	movwf	13	;volatile
 12091                           
 12092                           ;main.c: 434: TRISC = 0b00000000;
 12093  1019  018E               	clrf	14	;volatile
 12094                           
 12095                           ;main.c: 445: }
 12096  101A  0008               	return
 12097  101B                     l29741:	
 12098                           
 12099                           ;main.c: 448: else
 12100                           ;main.c: 449: {
 12101                           ;main.c: 451: TRISA = 0b01111111;
 12102  101B  307F               	movlw	127
 12103  101C  0021               	movlb	1	; select bank1
 12104  101D  008C               	movwf	12	;volatile
 12105                           
 12106                           ;main.c: 460: TRISB = 0b00111001;
 12107  101E  3039               	movlw	57
 12108  101F  008D               	movwf	13	;volatile
 12109                           
 12110                           ;main.c: 469: TRISC = 0b10000000;
 12111  1020  3080               	movlw	128
 12112  1021  008E               	movwf	14	;volatile
 12113  1022  0008               	return
 12114  1023                     __end_of_init_ports:	
 12115                           
 12116                           	psect	text2044
 12117  07C9                     __ptext2044:	
 12118 ;; =============== function _PWMReadDC ends ============
 12119                           
 12120                           
 12121 ;; *************** function _cksum *****************
 12122 ;; Defined at:
 12123 ;;		line 6 in file "../cksum.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;		None
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;  addr            2   18[BANK0 ] unsigned short 
 12128 ;;  sum             2   16[BANK0 ] unsigned int 
 12129 ;;  counter         2   14[BANK0 ] unsigned int 
 12130 ;; Return value:  Size  Location     Type
 12131 ;;                  2   12[BANK0 ] unsigned int 
 12132 ;; Registers used:
 12133 ;;		wreg, status,2, status,0
 12134 ;; Tracked objects:
 12135 ;;		On entry : 1F/0
 12136 ;;		On exit  : 1F/0
 12137 ;;		Unchanged: 0/0
 12138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12139 ;;      Params:         0       2       0       0       0       0       0       0
 12140 ;;      Locals:         0       6       0       0       0       0       0       0
 12141 ;;      Temps:          0       0       0       0       0       0       0       0
 12142 ;;      Totals:         0       8       0       0       0       0       0       0
 12143 ;;Total ram usage:        8 bytes
 12144 ;; Hardware stack levels used:    1
 12145 ;; Hardware stack levels required when called:    4
 12146 ;; This function calls:
 12147 ;;		Nothing
 12148 ;; This function is called by:
 12149 ;;		_EOL
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152  07C9                     _cksum:	
 12153  07C9  30FE               	movlw	254
 12154                           
 12155                           ;cksum.c: 7: unsigned int sum;
 12156                           ;cksum.c: 8: unsigned short addr;
 12157                           ;cksum.c: 9: unsigned int counter;
 12158                           ;cksum.c: 11: addr = 0L;
 12159                           
 12160                           ; Regs used in _cksum: [wreg+status,2+status,0]
 12161  07CA  01B2               	clrf	cksum@addr
 12162  07CB  01B3               	clrf	cksum@addr+1
 12163                           
 12164                           ;cksum.c: 12: sum = 0;
 12165  07CC  01B0               	clrf	cksum@sum
 12166  07CD  01B1               	clrf	cksum@sum+1
 12167                           
 12168                           ;cksum.c: 13: counter = ( (8192 - 2 - 1) - 0L + 1 );
 12169  07CE  00AE               	movwf	cksum@counter
 12170  07CF  301F               	movlw	31
 12171  07D0  00AF               	movwf	cksum@counter+1
 12172  07D1                     l29643:	
 12173                           ;cksum.c: 15: while(counter--){
 12174                           
 12175  07D1  3001               	movlw	1
 12176  07D2  02AE               	subwf	cksum@counter,f
 12177  07D3  3000               	movlw	0
 12178  07D4  3BAF               	subwfb	cksum@counter+1,f
 12179  07D5  0A2E               	incf	cksum@counter,w
 12180  07D6  1903               	skipnz
 12181  07D7  0A2F               	incf	cksum@counter+1,w
 12182  07D8  1903               	btfsc	3,2
 12183  07D9  2FF2               	goto	l29645
 12184                           
 12185                           ;cksum.c: 22: sum += (EEADRL=(addr)&0xff, EEADRH=(addr)>>8, WREN=0, EECON1 |= 0x80, RD=1
      +                          , _nop(), _nop(), (EEDATH << 8) | EEDATA);
 12186  07DA  0832               	movf	cksum@addr,w
 12187  07DB  0023               	movlb	3	; select bank3
 12188  07DC  0091               	movwf	17	;volatile
 12189  07DD  0020               	movlb	0	; select bank0
 12190  07DE  0833               	movf	cksum@addr+1,w
 12191  07DF  0023               	movlb	3	; select bank3
 12192  07E0  0092               	movwf	18	;volatile
 12193  07E1  1115               	bcf	21,2
 12194  07E2  1795               	bsf	21,7	;volatile
 12195  07E3  1415               	bsf	21,0
 12196  07E4  0000               	nop
 12197  07E5  0000               	nop
 12198  07E6  0023               	movlb	3	; select bank3
 12199  07E7  0813               	movf	19,w	;volatile
 12200  07E8  0020               	movlb	0	; select bank0
 12201  07E9  07B0               	addwf	cksum@sum,f
 12202  07EA  0023               	movlb	3	; select bank3
 12203  07EB  0814               	movf	20,w	;volatile
 12204  07EC  0020               	movlb	0	; select bank0
 12205  07ED  3DB1               	addwfc	cksum@sum+1,f
 12206                           
 12207                           ;cksum.c: 31: addr++;
 12208  07EE  0AB2               	incf	cksum@addr,f
 12209  07EF  1903               	skipnz
 12210  07F0  0AB3               	incf	cksum@addr+1,f
 12211  07F1  2FD1               	goto	l29643
 12212  07F2                     l29645:	
 12213                           
 12214                           ;cksum.c: 32: }
 12215                           ;cksum.c: 33: return sum;
 12216  07F2  0831               	movf	cksum@sum+1,w
 12217  07F3  00AD               	movwf	?_cksum+1
 12218  07F4  0830               	movf	cksum@sum,w
 12219  07F5  00AC               	movwf	?_cksum
 12220  07F6  0008               	return
 12221  07F7                     __end_of_cksum:	
 12222                           
 12223                           	psect	swtext2
 12224  0092                     __pswtext2:	
 12225  0092                     S31599:	
 12226  0092  3184  2CDB         	ljmp	l29357
 12227  0094  3184  2CDD         	ljmp	l29359
 12228  0096  3184  2CE2         	ljmp	l29361
 12229  0098  3184  2CE4         	ljmp	l29363
 12230  009A  3184  2CE6         	ljmp	l29365
 12231  009C  3184  2CE8         	ljmp	l29367
 12232  009E  3184  2CE8         	ljmp	l29367
 12233  00A0  3184  2CE8         	ljmp	l29367
 12234  00A2  3184  2CE8         	ljmp	l29367
 12235  00A4  3184  2CE8         	ljmp	l29367
 12236                           
 12237                           	psect	text2052
 12238  107F                     __ptext2052:	
 12239 ;; =============== function ___ltdiv ends ============
 12240                           
 12241                           
 12242 ;; *************** function ___aldiv *****************
 12243 ;; Defined at:
 12244 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\aldiv.c"
 12245 ;; Parameters:    Size  Location     Type
 12246 ;;  divisor         4   12[BANK0 ] long 
 12247 ;;  dividend        4   16[BANK0 ] long 
 12248 ;; Auto vars:     Size  Location     Type
 12249 ;;  quotient        4   22[BANK0 ] long 
 12250 ;;  sign            1   21[BANK0 ] unsigned char 
 12251 ;;  counter         1   20[BANK0 ] unsigned char 
 12252 ;; Return value:  Size  Location     Type
 12253 ;;                  4   12[BANK0 ] long 
 12254 ;; Registers used:
 12255 ;;		wreg, status,2, status,0
 12256 ;; Tracked objects:
 12257 ;;		On entry : 1F/0
 12258 ;;		On exit  : 1F/0
 12259 ;;		Unchanged: FFFE0/0
 12260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12261 ;;      Params:         0       8       0       0       0       0       0       0
 12262 ;;      Locals:         0       6       0       0       0       0       0       0
 12263 ;;      Temps:          0       0       0       0       0       0       0       0
 12264 ;;      Totals:         0      14       0       0       0       0       0       0
 12265 ;;Total ram usage:       14 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    4
 12268 ;; This function calls:
 12269 ;;		Nothing
 12270 ;; This function is called by:
 12271 ;;		_BVH2_Appl_Layer
 12272 ;; This function uses a non-reentrant model
 12273 ;;
 12274  107F                     ___aldiv:	
 12275                           
 12276                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12277  107F  01B5               	clrf	___aldiv@sign
 12278  1080  1FAF               	btfss	___aldiv@divisor+3,7
 12279  1081  288F               	goto	l19882
 12280  1082  09AC               	comf	___aldiv@divisor,f
 12281  1083  09AD               	comf	___aldiv@divisor+1,f
 12282  1084  09AE               	comf	___aldiv@divisor+2,f
 12283  1085  09AF               	comf	___aldiv@divisor+3,f
 12284  1086  0AAC               	incf	___aldiv@divisor,f
 12285  1087  1903               	skipnz
 12286  1088  0AAD               	incf	___aldiv@divisor+1,f
 12287  1089  1903               	skipnz
 12288  108A  0AAE               	incf	___aldiv@divisor+2,f
 12289  108B  1903               	skipnz
 12290  108C  0AAF               	incf	___aldiv@divisor+3,f
 12291  108D  01B5               	clrf	___aldiv@sign
 12292  108E  0AB5               	incf	___aldiv@sign,f
 12293  108F                     l19882:	
 12294  108F  1FB3               	btfss	___aldiv@dividend+3,7
 12295  1090  289E               	goto	l28935
 12296  1091  09B0               	comf	___aldiv@dividend,f
 12297  1092  09B1               	comf	___aldiv@dividend+1,f
 12298  1093  09B2               	comf	___aldiv@dividend+2,f
 12299  1094  09B3               	comf	___aldiv@dividend+3,f
 12300  1095  0AB0               	incf	___aldiv@dividend,f
 12301  1096  1903               	skipnz
 12302  1097  0AB1               	incf	___aldiv@dividend+1,f
 12303  1098  1903               	skipnz
 12304  1099  0AB2               	incf	___aldiv@dividend+2,f
 12305  109A  1903               	skipnz
 12306  109B  0AB3               	incf	___aldiv@dividend+3,f
 12307  109C  3001               	movlw	1
 12308  109D  06B5               	xorwf	___aldiv@sign,f
 12309  109E                     l28935:	
 12310  109E  01B6               	clrf	___aldiv@quotient
 12311  109F  01B7               	clrf	___aldiv@quotient+1
 12312  10A0  01B8               	clrf	___aldiv@quotient+2
 12313  10A1  01B9               	clrf	___aldiv@quotient+3
 12314  10A2  082F               	movf	___aldiv@divisor+3,w
 12315  10A3  042E               	iorwf	___aldiv@divisor+2,w
 12316  10A4  042D               	iorwf	___aldiv@divisor+1,w
 12317  10A5  042C               	iorwf	___aldiv@divisor,w
 12318  10A6  1903               	skipnz
 12319  10A7  28D4               	goto	l28957
 12320  10A8  01B4               	clrf	___aldiv@counter
 12321  10A9                     L40:	
 12322  10A9  0AB4               	incf	___aldiv@counter,f
 12323  10AA  1BAF               	btfsc	___aldiv@divisor+3,7
 12324  10AB  28B1               	goto	l28945
 12325  10AC  35AC               	lslf	___aldiv@divisor,f
 12326  10AD  0DAD               	rlf	___aldiv@divisor+1,f
 12327  10AE  0DAE               	rlf	___aldiv@divisor+2,f
 12328  10AF  0DAF               	rlf	___aldiv@divisor+3,f
 12329  10B0  28A9               	goto	L40
 12330  10B1                     l28945:	
 12331  10B1  35B6               	lslf	___aldiv@quotient,f
 12332  10B2  0DB7               	rlf	___aldiv@quotient+1,f
 12333  10B3  0DB8               	rlf	___aldiv@quotient+2,f
 12334  10B4  0DB9               	rlf	___aldiv@quotient+3,f
 12335  10B5  082F               	movf	___aldiv@divisor+3,w
 12336  10B6  0233               	subwf	___aldiv@dividend+3,w
 12337  10B7  1D03               	skipz
 12338  10B8  28C3               	goto	u9105
 12339  10B9  082E               	movf	___aldiv@divisor+2,w
 12340  10BA  0232               	subwf	___aldiv@dividend+2,w
 12341  10BB  1D03               	skipz
 12342  10BC  28C3               	goto	u9105
 12343  10BD  082D               	movf	___aldiv@divisor+1,w
 12344  10BE  0231               	subwf	___aldiv@dividend+1,w
 12345  10BF  1D03               	skipz
 12346  10C0  28C3               	goto	u9105
 12347  10C1  082C               	movf	___aldiv@divisor,w
 12348  10C2  0230               	subwf	___aldiv@dividend,w
 12349  10C3                     u9105:	
 12350  10C3  1C03               	skipc
 12351  10C4  28CE               	goto	l28953
 12352  10C5  082C               	movf	___aldiv@divisor,w
 12353  10C6  02B0               	subwf	___aldiv@dividend,f
 12354  10C7  082D               	movf	___aldiv@divisor+1,w
 12355  10C8  3BB1               	subwfb	___aldiv@dividend+1,f
 12356  10C9  082E               	movf	___aldiv@divisor+2,w
 12357  10CA  3BB2               	subwfb	___aldiv@dividend+2,f
 12358  10CB  082F               	movf	___aldiv@divisor+3,w
 12359  10CC  3BB3               	subwfb	___aldiv@dividend+3,f
 12360  10CD  1436               	bsf	___aldiv@quotient,0
 12361  10CE                     l28953:	
 12362  10CE  36AF               	lsrf	___aldiv@divisor+3,f
 12363  10CF  0CAE               	rrf	___aldiv@divisor+2,f
 12364  10D0  0CAD               	rrf	___aldiv@divisor+1,f
 12365  10D1  0CAC               	rrf	___aldiv@divisor,f
 12366  10D2  0BB4               	decfsz	___aldiv@counter,f
 12367  10D3  28B1               	goto	l28945
 12368  10D4                     l28957:	
 12369  10D4  0835               	movf	___aldiv@sign,w
 12370  10D5  1903               	btfsc	3,2
 12371  10D6  28E2               	goto	l28961
 12372  10D7  09B6               	comf	___aldiv@quotient,f
 12373  10D8  09B7               	comf	___aldiv@quotient+1,f
 12374  10D9  09B8               	comf	___aldiv@quotient+2,f
 12375  10DA  09B9               	comf	___aldiv@quotient+3,f
 12376  10DB  0AB6               	incf	___aldiv@quotient,f
 12377  10DC  1903               	skipnz
 12378  10DD  0AB7               	incf	___aldiv@quotient+1,f
 12379  10DE  1903               	skipnz
 12380  10DF  0AB8               	incf	___aldiv@quotient+2,f
 12381  10E0  1903               	skipnz
 12382  10E1  0AB9               	incf	___aldiv@quotient+3,f
 12383  10E2                     l28961:	
 12384  10E2  0839               	movf	___aldiv@quotient+3,w
 12385  10E3  00AF               	movwf	?___aldiv+3
 12386  10E4  0838               	movf	___aldiv@quotient+2,w
 12387  10E5  00AE               	movwf	?___aldiv+2
 12388  10E6  0837               	movf	___aldiv@quotient+1,w
 12389  10E7  00AD               	movwf	?___aldiv+1
 12390  10E8  0836               	movf	___aldiv@quotient,w
 12391  10E9  00AC               	movwf	?___aldiv
 12392  10EA  0008               	return
 12393  10EB                     __end_of___aldiv:	
 12394                           
 12395                           	psect	text2055
 12396  1B2C                     __ptext2055:	
 12397 ;; =============== function ___lmul ends ============
 12398                           
 12399                           
 12400 ;; *************** function ___lwdiv *****************
 12401 ;; Defined at:
 12402 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\lwdiv.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;  divisor         2   12[BANK0 ] unsigned int 
 12405 ;;  dividend        2   14[BANK0 ] unsigned int 
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;  quotient        2   17[BANK0 ] unsigned int 
 12408 ;;  counter         1   16[BANK0 ] unsigned char 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  2   12[BANK0 ] unsigned int 
 12411 ;; Registers used:
 12412 ;;		wreg, status,2, status,0
 12413 ;; Tracked objects:
 12414 ;;		On entry : 1F/0
 12415 ;;		On exit  : 1F/0
 12416 ;;		Unchanged: FFFE0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12418 ;;      Params:         0       4       0       0       0       0       0       0
 12419 ;;      Locals:         0       3       0       0       0       0       0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0
 12421 ;;      Totals:         0       7       0       0       0       0       0       0
 12422 ;;Total ram usage:        7 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    4
 12425 ;; This function calls:
 12426 ;;		Nothing
 12427 ;; This function is called by:
 12428 ;;		_EOL
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431  1B2C                     ___lwdiv:	
 12432                           
 12433                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12434  1B2C  01B1               	clrf	___lwdiv@quotient
 12435  1B2D  01B2               	clrf	___lwdiv@quotient+1
 12436  1B2E  082D               	movf	___lwdiv@divisor+1,w
 12437  1B2F  042C               	iorwf	___lwdiv@divisor,w
 12438  1B30  1903               	skipnz
 12439  1B31  2B4C               	goto	l28909
 12440  1B32  01B0               	clrf	___lwdiv@counter
 12441  1B33                     L42:	
 12442  1B33  0AB0               	incf	___lwdiv@counter,f
 12443  1B34  1BAD               	btfsc	___lwdiv@divisor+1,7
 12444  1B35  2B39               	goto	l28897
 12445  1B36  35AC               	lslf	___lwdiv@divisor,f
 12446  1B37  0DAD               	rlf	___lwdiv@divisor+1,f
 12447  1B38  2B33               	goto	L42
 12448  1B39                     l28897:	
 12449  1B39  35B1               	lslf	___lwdiv@quotient,f
 12450  1B3A  0DB2               	rlf	___lwdiv@quotient+1,f
 12451  1B3B  082D               	movf	___lwdiv@divisor+1,w
 12452  1B3C  022F               	subwf	___lwdiv@dividend+1,w
 12453  1B3D  1D03               	skipz
 12454  1B3E  2B41               	goto	u9025
 12455  1B3F  082C               	movf	___lwdiv@divisor,w
 12456  1B40  022E               	subwf	___lwdiv@dividend,w
 12457  1B41                     u9025:	
 12458  1B41  1C03               	skipc
 12459  1B42  2B48               	goto	l28905
 12460  1B43  082C               	movf	___lwdiv@divisor,w
 12461  1B44  02AE               	subwf	___lwdiv@dividend,f
 12462  1B45  082D               	movf	___lwdiv@divisor+1,w
 12463  1B46  3BAF               	subwfb	___lwdiv@dividend+1,f
 12464  1B47  1431               	bsf	___lwdiv@quotient,0
 12465  1B48                     l28905:	
 12466  1B48  36AD               	lsrf	___lwdiv@divisor+1,f
 12467  1B49  0CAC               	rrf	___lwdiv@divisor,f
 12468  1B4A  0BB0               	decfsz	___lwdiv@counter,f
 12469  1B4B  2B39               	goto	l28897
 12470  1B4C                     l28909:	
 12471  1B4C  0832               	movf	___lwdiv@quotient+1,w
 12472  1B4D  00AD               	movwf	?___lwdiv+1
 12473  1B4E  0831               	movf	___lwdiv@quotient,w
 12474  1B4F  00AC               	movwf	?___lwdiv
 12475  1B50  0008               	return
 12476  1B51                     __end_of___lwdiv:	
 12477                           
 12478                           	psect	text2059
 12479  10EB                     __ptext2059:	
 12480 ;; =============== function _Cb56_UbatHandling_node_fcn2 ends ============
 12481                           
 12482                           
 12483 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 12484 ;; Defined at:
 12485 ;;		line 1721 in file "../T_Link/BVH2_Appl_Layer.c"
 12486 ;; Parameters:    Size  Location     Type
 12487 ;;		None
 12488 ;; Auto vars:     Size  Location     Type
 12489 ;;		None
 12490 ;; Return value:  Size  Location     Type
 12491 ;;		None               void
 12492 ;; Registers used:
 12493 ;;		wreg, status,2, status,0
 12494 ;; Tracked objects:
 12495 ;;		On entry : 1F/1
 12496 ;;		On exit  : 1D/0
 12497 ;;		Unchanged: FFFE0/0
 12498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12499 ;;      Params:         0       0       0       0       0       0       0       0
 12500 ;;      Locals:         0       0       0       0       0       0       0       0
 12501 ;;      Temps:          0       0       0       0       0       0       0       0
 12502 ;;      Totals:         0       0       0       0       0       0       0       0
 12503 ;;Total ram usage:        0 bytes
 12504 ;; Hardware stack levels used:    1
 12505 ;; Hardware stack levels required when called:    4
 12506 ;; This function calls:
 12507 ;;		Nothing
 12508 ;; This function is called by:
 12509 ;;		_BVH2_Appl_Layer
 12510 ;; This function uses a non-reentrant model
 12511 ;;
 12512  10EB                     _Cb34_PWM_Detection_node_fcn1:	
 12513                           
 12514                           ;BVH2_Appl_Layer.c: 1722: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 12515                           
 12516                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 12517  10EB  0020               	movlb	0	; select bank0
 12518  10EC  084A               	movf	_Cb34_idPWM,w
 12519  10ED  1903               	btfsc	3,2
 12520  10EE  28F3               	goto	l28715
 12521  10EF  30C8               	movlw	200
 12522  10F0  024A               	subwf	_Cb34_idPWM,w
 12523  10F1  1C03               	skipc
 12524  10F2  28FD               	goto	l28727
 12525  10F3                     l28715:	
 12526                           
 12527                           ;BVH2_Appl_Layer.c: 1724: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 12528  10F3  0021               	movlb	1	; select bank1
 12529  10F4  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12530  10F5  39F0               	andlw	-16
 12531  10F6  3807               	iorlw	7
 12532                           
 12533                           ;BVH2_Appl_Layer.c: 1725: Cb34_odPumpOff = 0;
 12534                           
 12535                           ;BVH2_Appl_Layer.c: 1726: Cb34_odFixedValueSel = 1;
 12536  10F7  2164               	fcall	PL41	;call to abstracted procedure
 12537                           
 12538                           ;BVH2_Appl_Layer.c: 1727: Cb34_odFixedLowValueSel = 0;
 12539  10F8  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12540                           
 12541                           ;BVH2_Appl_Layer.c: 1728: Cb34_oPWM_SC_Alarm = 0;
 12542  10F9  01C3               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12543                           
 12544                           ;BVH2_Appl_Layer.c: 1729: Cb34_oPWM_Alarm = 1;
 12545  10FA  01C2               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12546  10FB  0AC2               	incf	_Cb34_oPWM_Alarm^(0+256),f
 12547                           
 12548                           ;BVH2_Appl_Layer.c: 1730: }
 12549  10FC  0008               	return
 12550  10FD                     l28727:	
 12551                           
 12552                           ;BVH2_Appl_Layer.c: 1731: else {
 12553                           ;BVH2_Appl_Layer.c: 1734: if ((ui16_PWM_Freq_mat < 36000) || (ui16_PWM_Freq_mat > 44000)
      +                          ) {
 12554  10FD  308C               	movlw	140
 12555  10FE  0022               	movlb	2	; select bank2
 12556  10FF  022E               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 12557  1100  30A0               	movlw	160
 12558  1101  1903               	skipnz
 12559  1102  022D               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 12560  1103  1C03               	skipc
 12561  1104  290C               	goto	l28731
 12562  1105  30AB               	movlw	171
 12563  1106  022E               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 12564  1107  30E1               	movlw	225
 12565  1108  1903               	skipnz
 12566  1109  022D               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 12567  110A  1C03               	skipc
 12568  110B  2922               	goto	l28743
 12569  110C                     l28731:	
 12570                           
 12571                           ;BVH2_Appl_Layer.c: 1736: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 12572  110C  0021               	movlb	1	; select bank1
 12573  110D  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12574  110E  39F0               	andlw	-16
 12575  110F  3806               	iorlw	6
 12576  1110  2915               	goto	L45
 12577  1111                     l28745:	
 12578                           
 12579                           ;BVH2_Appl_Layer.c: 1746: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 12580  1111  0021               	movlb	1	; select bank1
 12581  1112  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12582  1113  39F0               	andlw	-16
 12583  1114  3803               	iorlw	3
 12584  1115                     L45:	
 12585                           
 12586                           ;BVH2_Appl_Layer.c: 1737: Cb34_odPumpOff = 0;
 12587                           
 12588                           ;BVH2_Appl_Layer.c: 1738: Cb34_odFixedValueSel = 1;
 12589  1115  2164  3190         	fcall	PL41	;call to abstracted procedure
 12590  1117  291D               	goto	l28737
 12591  1118                     l28759:	
 12592                           
 12593                           ;BVH2_Appl_Layer.c: 1757: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12594                           ;BVH2_Appl_Layer.c: 1758: (UInt8)8;
 12595  1118  0021               	movlb	1	; select bank1
 12596  1119  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12597  111A  39F0               	andlw	-16
 12598  111B  3808               	iorlw	8
 12599                           
 12600                           ;BVH2_Appl_Layer.c: 1759: Cb34_odPumpOff = 1;
 12601                           
 12602                           ;BVH2_Appl_Layer.c: 1760: Cb34_odFixedValueSel = 0;
 12603  111C  215E               	fcall	PL32	;call to abstracted procedure
 12604  111D                     l28737:	
 12605                           
 12606                           ;BVH2_Appl_Layer.c: 1739: Cb34_odFixedLowValueSel = 0;
 12607  111D  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12608                           
 12609                           ;BVH2_Appl_Layer.c: 1740: Cb34_oPWM_SC_Alarm = 1;
 12610  111E  01C3               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12611  111F  0AC3               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 12612  1120                     l28741:	
 12613                           
 12614                           ;BVH2_Appl_Layer.c: 1741: Cb34_oPWM_Alarm = 0;
 12615  1120  01C2               	clrf	_Cb34_oPWM_Alarm^(0+256)
 12616                           
 12617                           ;BVH2_Appl_Layer.c: 1742: }
 12618  1121  0008               	return
 12619  1122                     l28743:	
 12620                           
 12621                           ;BVH2_Appl_Layer.c: 1743: else {
 12622                           ;BVH2_Appl_Layer.c: 1744: if (Cb34_idPWM <= 5) {
 12623  1122  3006               	movlw	6
 12624  1123  0020               	movlb	0	; select bank0
 12625  1124  024A               	subwf	_Cb34_idPWM,w
 12626  1125  1C03               	btfss	3,0
 12627  1126  2911               	goto	l28745
 12628                           
 12629                           ;BVH2_Appl_Layer.c: 1753: else {
 12630                           ;BVH2_Appl_Layer.c: 1754: if (Cb34_idPWM < 9) {
 12631  1127  3009               	movlw	9
 12632  1128  024A               	subwf	_Cb34_idPWM,w
 12633  1129  1C03               	btfss	3,0
 12634  112A  2918               	goto	l28759
 12635                           
 12636                           ;BVH2_Appl_Layer.c: 1765: else {
 12637                           ;BVH2_Appl_Layer.c: 1766: if (Cb34_idPWM > 191) {
 12638  112B  30C0               	movlw	192
 12639  112C  024A               	subwf	_Cb34_idPWM,w
 12640  112D  1C03               	skipc
 12641  112E  2934               	goto	l28785
 12642                           
 12643                           ;BVH2_Appl_Layer.c: 1769: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12644                           ;BVH2_Appl_Layer.c: 1770: (UInt8)4;
 12645  112F  0021               	movlb	1	; select bank1
 12646  1130  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12647  1131  39F0               	andlw	-16
 12648  1132  3804               	iorlw	4
 12649  1133  2915               	goto	L45
 12650  1134                     l28785:	
 12651                           
 12652                           ;BVH2_Appl_Layer.c: 1777: else {
 12653                           ;BVH2_Appl_Layer.c: 1778: if (Cb34_idPWM >= 23) {
 12654  1134  3017               	movlw	23
 12655  1135  024A               	subwf	_Cb34_idPWM,w
 12656  1136  1C03               	skipc
 12657  1137  2943               	goto	l28799
 12658                           
 12659                           ;BVH2_Appl_Layer.c: 1781: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12660                           ;BVH2_Appl_Layer.c: 1782: (UInt8)2;
 12661  1138  0021               	movlb	1	; select bank1
 12662  1139  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12663  113A  39F0               	andlw	-16
 12664  113B  3802               	iorlw	2
 12665  113C  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12666                           
 12667                           ;BVH2_Appl_Layer.c: 1783: Cb34_odPumpOff = 0;
 12668  113D  0022               	movlb	2	; select bank2
 12669  113E  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12670                           
 12671                           ;BVH2_Appl_Layer.c: 1784: Cb34_odFixedLowValueSel = 0;
 12672  113F  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12673                           
 12674                           ;BVH2_Appl_Layer.c: 1785: Cb34_odFixedValueSel = 0;
 12675  1140  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12676  1141                     l28795:	
 12677                           
 12678                           ;BVH2_Appl_Layer.c: 1786: Cb34_oPWM_SC_Alarm = 0;
 12679  1141  01C3               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 12680  1142  2920               	goto	l28741
 12681  1143                     l28799:	
 12682                           
 12683                           ;BVH2_Appl_Layer.c: 1789: else {
 12684                           ;BVH2_Appl_Layer.c: 1790: if (Cb34_idPWM > 19) {
 12685  1143  3014               	movlw	20
 12686  1144  024A               	subwf	_Cb34_idPWM,w
 12687  1145  1C03               	skipc
 12688  1146  2952               	goto	l28813
 12689                           
 12690                           ;BVH2_Appl_Layer.c: 1793: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12691                           ;BVH2_Appl_Layer.c: 1794: (UInt8)5;
 12692  1147  0021               	movlb	1	; select bank1
 12693  1148  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12694  1149  39F0               	andlw	-16
 12695  114A  3805               	iorlw	5
 12696  114B  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12697                           
 12698                           ;BVH2_Appl_Layer.c: 1795: Cb34_odPumpOff = 0;
 12699  114C  0022               	movlb	2	; select bank2
 12700  114D  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12701                           
 12702                           ;BVH2_Appl_Layer.c: 1796: Cb34_odFixedValueSel = 0;
 12703  114E  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12704                           
 12705                           ;BVH2_Appl_Layer.c: 1797: Cb34_odFixedLowValueSel = 1;
 12706  114F  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12707  1150  0AC4               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 12708  1151  2941               	goto	l28795
 12709  1152                     l28813:	
 12710                           
 12711                           ;BVH2_Appl_Layer.c: 1801: else {
 12712                           ;BVH2_Appl_Layer.c: 1802: if (Cb34_idPWM <= 19) {
 12713  1152  3014               	movlw	20
 12714  1153  024A               	subwf	_Cb34_idPWM,w
 12715  1154  1803               	skipnc
 12716  1155  0008               	return
 12717                           
 12718                           ;BVH2_Appl_Layer.c: 1805: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 12719                           ;BVH2_Appl_Layer.c: 1806: (UInt8)1;
 12720  1156  0021               	movlb	1	; select bank1
 12721  1157  084C               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12722  1158  39F0               	andlw	-16
 12723  1159  3801               	iorlw	1
 12724                           
 12725                           ;BVH2_Appl_Layer.c: 1807: Cb34_odPumpOff = 1;
 12726                           
 12727                           ;BVH2_Appl_Layer.c: 1808: Cb34_odFixedValueSel = 0;
 12728  115A  215E  3190         	fcall	PL32	;call to abstracted procedure
 12729                           
 12730                           ;BVH2_Appl_Layer.c: 1809: Cb34_odFixedLowValueSel = 0;
 12731  115C  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 12732  115D  2941               	goto	l28795
 12733  115E                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 12734  115E                     PL32:	
 12735  115E  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12736  115F  0022               	movlb	2	; select bank2
 12737  1160  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12738  1161  0AC6               	incf	_Cb34_odPumpOff^(0+256),f
 12739  1162  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12740  1163  0008               	return
 12741  1164                     PL41:	
 12742  1164  00CC               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12743  1165  0022               	movlb	2	; select bank2
 12744  1166  01C6               	clrf	_Cb34_odPumpOff^(0+256)
 12745  1167  01C5               	clrf	_Cb34_odFixedValueSel^(0+256)
 12746  1168  0AC5               	incf	_Cb34_odFixedValueSel^(0+256),f
 12747  1169  0008               	return
 12748                           
 12749                           	psect	text2062
 12750  1B8F                     __ptext2062:	
 12751 ;; =============== function _clear_timer ends ============
 12752                           
 12753                           
 12754 ;; *************** function _PWM_Capture_init *****************
 12755 ;; Defined at:
 12756 ;;		line 80 in file "../pwm.c"
 12757 ;; Parameters:    Size  Location     Type
 12758 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
 12759 ;; Auto vars:     Size  Location     Type
 12760 ;;  ui8_CCP_Nb      1   12[BANK0 ] unsigned char 
 12761 ;; Return value:  Size  Location     Type
 12762 ;;		None               void
 12763 ;; Registers used:
 12764 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12765 ;; Tracked objects:
 12766 ;;		On entry : 16/1
 12767 ;;		On exit  : 18/0
 12768 ;;		Unchanged: FFFE0/0
 12769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12770 ;;      Params:         0       0       0       0       0       0       0       0
 12771 ;;      Locals:         0       1       0       0       0       0       0       0
 12772 ;;      Temps:          0       0       0       0       0       0       0       0
 12773 ;;      Totals:         0       1       0       0       0       0       0       0
 12774 ;;Total ram usage:        1 bytes
 12775 ;; Hardware stack levels used:    1
 12776 ;; Hardware stack levels required when called:    4
 12777 ;; This function calls:
 12778 ;;		Nothing
 12779 ;; This function is called by:
 12780 ;;		_system_init
 12781 ;; This function uses a non-reentrant model
 12782 ;;
 12783  1B8F                     _PWM_Capture_init:	
 12784                           
 12785                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
 12786                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
 12787  1B8F  0020               	movlb	0	; select bank0
 12788  1B90  00AC               	movwf	PWM_Capture_init@ui8_CCP_Nb
 12789                           
 12790                           ;pwm.c: 83: ui8_PWMinDC_sav = 0;
 12791  1B91  0021               	movlb	1	; select bank1
 12792  1B92  01DF               	clrf	_ui8_PWMinDC_sav^(0+128)
 12793                           
 12794                           ;pwm.c: 84: ui8_PWMin_failCnt = 0;
 12795  1B93  0022               	movlb	2	; select bank2
 12796  1B94  01D4               	clrf	_ui8_PWMin_failCnt^(0+256)
 12797                           
 12798                           ;pwm.c: 93: switch( ui8_CCP_Nb )
 12799  1B95  2BD2               	goto	l25267
 12800  1B96                     l25225:	
 12801                           
 12802                           ;pwm.c: 99: {
 12803                           ;pwm.c: 101: CCP1CON = 0x00;
 12804  1B96  0025               	movlb	5	; select bank5
 12805  1B97  0193               	clrf	19	;volatile
 12806                           
 12807                           ;pwm.c: 102: CCPR1L = 0x00;
 12808  1B98  0191               	clrf	17	;volatile
 12809                           
 12810                           ;pwm.c: 103: CCPR1H = 0x00;
 12811  1B99  0192               	clrf	18	;volatile
 12812                           
 12813                           ;pwm.c: 104: CCP1IE = 1;
 12814  1B9A  0021               	movlb	1	; select bank1
 12815  1B9B  1511               	bsf	17,2
 12816                           
 12817                           ;pwm.c: 105: CCP1IF = 0;
 12818  1B9C  0020               	movlb	0	; select bank0
 12819  1B9D  3005               	movlw	5
 12820  1B9E  1111               	bcf	17,2
 12821                           
 12822                           ;pwm.c: 106: CCP1CON = 0x05;
 12823  1B9F  0025               	movlb	5	; select bank5
 12824  1BA0  0093               	movwf	19	;volatile
 12825                           
 12826                           ;pwm.c: 107: break;
 12827  1BA1  0008               	return
 12828  1BA2                     l25233:	
 12829                           
 12830                           ;pwm.c: 114: {
 12831                           ;pwm.c: 116: CCP2CON = 0x00;
 12832  1BA2  0025               	movlb	5	; select bank5
 12833  1BA3  019A               	clrf	26	;volatile
 12834                           
 12835                           ;pwm.c: 117: CCPR2L = 0x00;
 12836  1BA4  0198               	clrf	24	;volatile
 12837                           
 12838                           ;pwm.c: 118: CCPR2H = 0x00;
 12839  1BA5  0199               	clrf	25	;volatile
 12840                           
 12841                           ;pwm.c: 119: CCP2IE = 1;
 12842  1BA6  0021               	movlb	1	; select bank1
 12843  1BA7  1412               	bsf	18,0
 12844                           
 12845                           ;pwm.c: 120: CCP2IF = 0;
 12846  1BA8  0020               	movlb	0	; select bank0
 12847  1BA9  3005               	movlw	5
 12848  1BAA  1012               	bcf	18,0
 12849                           
 12850                           ;pwm.c: 121: CCP2CON = 0x05;
 12851  1BAB  0025               	movlb	5	; select bank5
 12852  1BAC  009A               	movwf	26	;volatile
 12853                           
 12854                           ;pwm.c: 122: break;
 12855  1BAD  0008               	return
 12856  1BAE                     l25241:	
 12857                           
 12858                           ;pwm.c: 129: {
 12859                           ;pwm.c: 131: CCP3CON = 0x00;
 12860  1BAE  0026               	movlb	6	; select bank6
 12861  1BAF  0193               	clrf	19	;volatile
 12862                           
 12863                           ;pwm.c: 132: CCPR3L = 0x00;
 12864  1BB0  0191               	clrf	17	;volatile
 12865                           
 12866                           ;pwm.c: 133: CCPR3H = 0x00;
 12867  1BB1  0192               	clrf	18	;volatile
 12868                           
 12869                           ;pwm.c: 134: CCP3IE = 1;
 12870  1BB2  0021               	movlb	1	; select bank1
 12871  1BB3  1613               	bsf	19,4
 12872                           
 12873                           ;pwm.c: 135: CCP3IF = 0;
 12874  1BB4  0020               	movlb	0	; select bank0
 12875  1BB5  3005               	movlw	5
 12876  1BB6  1213               	bcf	19,4
 12877                           
 12878                           ;pwm.c: 136: CCP3CON = 0x05;
 12879  1BB7  0026               	movlb	6	; select bank6
 12880  1BB8  0093               	movwf	19	;volatile
 12881                           
 12882                           ;pwm.c: 137: break;
 12883  1BB9  0008               	return
 12884  1BBA                     l25249:	
 12885                           
 12886                           ;pwm.c: 144: {
 12887                           ;pwm.c: 146: CCP4CON = 0x00;
 12888  1BBA  0026               	movlb	6	; select bank6
 12889  1BBB  019A               	clrf	26	;volatile
 12890                           
 12891                           ;pwm.c: 147: CCPR4L = 0x00;
 12892  1BBC  0198               	clrf	24	;volatile
 12893                           
 12894                           ;pwm.c: 148: CCPR4H = 0x00;
 12895  1BBD  0199               	clrf	25	;volatile
 12896                           
 12897                           ;pwm.c: 149: CCP4IE = 1;
 12898  1BBE  0021               	movlb	1	; select bank1
 12899  1BBF  1693               	bsf	19,5
 12900                           
 12901                           ;pwm.c: 150: CCP4IF = 0;
 12902  1BC0  0020               	movlb	0	; select bank0
 12903  1BC1  3005               	movlw	5
 12904  1BC2  1293               	bcf	19,5
 12905                           
 12906                           ;pwm.c: 151: CCP4CON = 0x05;
 12907  1BC3  0026               	movlb	6	; select bank6
 12908  1BC4  009A               	movwf	26	;volatile
 12909                           
 12910                           ;pwm.c: 152: break;
 12911  1BC5  0008               	return
 12912  1BC6                     l25257:	
 12913                           
 12914                           ;pwm.c: 159: {
 12915                           ;pwm.c: 161: CCP5CON = 0x00;
 12916  1BC6  0026               	movlb	6	; select bank6
 12917  1BC7  019E               	clrf	30	;volatile
 12918                           
 12919                           ;pwm.c: 162: CCPR5L = 0x00;
 12920  1BC8  019C               	clrf	28	;volatile
 12921                           
 12922                           ;pwm.c: 163: CCPR5H = 0x00;
 12923  1BC9  019D               	clrf	29	;volatile
 12924                           
 12925                           ;pwm.c: 164: CCP5IE = 1;
 12926  1BCA  0021               	movlb	1	; select bank1
 12927  1BCB  1713               	bsf	19,6
 12928                           
 12929                           ;pwm.c: 165: CCP5IF = 0;
 12930  1BCC  0020               	movlb	0	; select bank0
 12931  1BCD  3005               	movlw	5
 12932  1BCE  1313               	bcf	19,6
 12933                           
 12934                           ;pwm.c: 166: CCP5CON = 0x05;
 12935  1BCF  0026               	movlb	6	; select bank6
 12936  1BD0  009E               	movwf	30	;volatile
 12937                           
 12938                           ;pwm.c: 167: break;
 12939  1BD1  0008               	return
 12940  1BD2                     l25267:	
 12941  1BD2  0020               	movlb	0	; select bank0
 12942  1BD3  082C               	movf	PWM_Capture_init@ui8_CCP_Nb,w
 12943                           
 12944                           ; Switch size 1, requested type "space"
 12945                           ; Number of cases is 5, Range of values is 1 to 5
 12946                           ; switch strategies available:
 12947                           ; Name         Instructions Cycles
 12948                           ; simple_byte           16     9 (average)
 12949                           ; direct_byte           19     9 (fixed)
 12950                           ; jumptable            263     9 (fixed)
 12951                           ;	Chosen strategy is simple_byte
 12952  1BD4  3A01               	xorlw	1	; case 1
 12953  1BD5  1903               	skipnz
 12954  1BD6  2B96               	goto	l25225
 12955  1BD7  3A03               	xorlw	3	; case 2
 12956  1BD8  1903               	skipnz
 12957  1BD9  2BA2               	goto	l25233
 12958  1BDA  3A01               	xorlw	1	; case 3
 12959  1BDB  1903               	skipnz
 12960  1BDC  2BAE               	goto	l25241
 12961  1BDD  3A07               	xorlw	7	; case 4
 12962  1BDE  1903               	skipnz
 12963  1BDF  2BBA               	goto	l25249
 12964  1BE0  3A01               	xorlw	1	; case 5
 12965  1BE1  1903               	skipnz
 12966  1BE2  2BC6               	goto	l25257
 12967  1BE3  2BE4               	goto	l15524
 12968  1BE4                     l15524:	
 12969  1BE4  0008               	return
 12970  1BE5                     __end_of_PWM_Capture_init:	
 12971                           
 12972                           	psect	text2068
 12973  1A92                     __ptext2068:	
 12974 ;; =============== function __ELINMIntGetPointer ends ============
 12975                           
 12976                           
 12977 ;; *************** function _write_eeprom_data *****************
 12978 ;; Defined at:
 12979 ;;		line 86 in file "../eeprom.c"
 12980 ;; Parameters:    Size  Location     Type
 12981 ;;  ui8_adress      1    wreg     unsigned char 
 12982 ;;  ui8_adress_d    1   19[BANK0 ] unsigned char 
 12983 ;; Auto vars:     Size  Location     Type
 12984 ;;  ui8_adress      1   20[BANK0 ] unsigned char 
 12985 ;; Return value:  Size  Location     Type
 12986 ;;		None               void
 12987 ;; Registers used:
 12988 ;;		wreg
 12989 ;; Tracked objects:
 12990 ;;		On entry : 1F/0
 12991 ;;		On exit  : 1F/3
 12992 ;;		Unchanged: FFE00/0
 12993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12994 ;;      Params:         0       1       0       0       0       0       0       0
 12995 ;;      Locals:         0       1       0       0       0       0       0       0
 12996 ;;      Temps:          0       0       0       0       0       0       0       0
 12997 ;;      Totals:         0       2       0       0       0       0       0       0
 12998 ;;Total ram usage:        2 bytes
 12999 ;; Hardware stack levels used:    1
 13000 ;; Hardware stack levels required when called:    4
 13001 ;; This function calls:
 13002 ;;		Nothing
 13003 ;; This function is called by:
 13004 ;;		_EOL
 13005 ;; This function uses a non-reentrant model
 13006 ;;
 13007  1A92                     _write_eeprom_data:	
 13008                           
 13009                           ; Regs used in _write_eeprom_data: [wreg]
 13010                           ;write_eeprom_data@ui8_adress stored from wreg
 13011  1A92  00B4               	movwf	write_eeprom_data@ui8_adress
 13012                           
 13013                           ;eeprom.c: 89: EEADRL = ui8_adress;
 13014  1A93  0023               	movlb	3	; select bank3
 13015  1A94  0091               	movwf	17	;volatile
 13016                           
 13017                           ;eeprom.c: 90: EEDATL = ui8_adress_data;
 13018  1A95  0020               	movlb	0	; select bank0
 13019  1A96  0833               	movf	write_eeprom_data@ui8_adress_data,w
 13020  1A97  0023               	movlb	3	; select bank3
 13021  1A98  0093               	movwf	19	;volatile
 13022  1A99  3055               	movlw	85
 13023                           
 13024                           ;eeprom.c: 91: CFGS = 0;
 13025  1A9A  1315               	bcf	21,6
 13026                           
 13027                           ;eeprom.c: 92: EEPGD = 0;
 13028  1A9B  1395               	bcf	21,7
 13029                           
 13030                           ;eeprom.c: 93: WREN = 1;
 13031  1A9C  1515               	bsf	21,2
 13032  1A9D  138B               	bcf	11,7
 13033                           
 13034                           ;eeprom.c: 96: EECON2 = 0x55;
 13035  1A9E  0096               	movwf	22	;volatile
 13036                           
 13037                           ;eeprom.c: 97: EECON2 = 0xAA;
 13038  1A9F  30AA               	movlw	170
 13039  1AA0  0096               	movwf	22	;volatile
 13040                           
 13041                           ;eeprom.c: 98: WR = 1;
 13042  1AA1  1495               	bsf	21,1
 13043                           
 13044                           ;eeprom.c: 99: GIE = 1;
 13045  1AA2  178B               	bsf	11,7
 13046                           
 13047                           ;eeprom.c: 100: WREN = 0;
 13048  1AA3  1115               	bcf	21,2
 13049  1AA4                     l7831:	
 13050                           ;eeprom.c: 103: while( WR )
 13051                           
 13052  1AA4  0023               	movlb	3	; select bank3
 13053  1AA5  1C95               	btfss	21,1
 13054  1AA6  0008               	return
 13055  1AA7  0000               	nop	;#
 13056  1AA8  0000               	nop	;#
 13057  1AA9  2AA4               	goto	l7831
 13058  1AAA                     __end_of_write_eeprom_data:	
 13059                           
 13060                           	psect	text2072
 13061  1AE4                     __ptext2072:	
 13062 ;; =============== function _InitMotorStop ends ============
 13063                           
 13064                           
 13065 ;; *************** function _FILTER_Temp *****************
 13066 ;; Defined at:
 13067 ;;		line 402 in file "../adc.c"
 13068 ;; Parameters:    Size  Location     Type
 13069 ;;		None
 13070 ;; Auto vars:     Size  Location     Type
 13071 ;;		None
 13072 ;; Return value:  Size  Location     Type
 13073 ;;		None               void
 13074 ;; Registers used:
 13075 ;;		wreg, status,2, status,0
 13076 ;; Tracked objects:
 13077 ;;		On entry : 1F/3
 13078 ;;		On exit  : 1F/3
 13079 ;;		Unchanged: FFFE0/0
 13080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13081 ;;      Params:         0       0       0       0       0       0       0       0
 13082 ;;      Locals:         0       0       0       0       0       0       0       0
 13083 ;;      Temps:          0       0       0       0       0       0       0       0
 13084 ;;      Totals:         0       0       0       0       0       0       0       0
 13085 ;;Total ram usage:        0 bytes
 13086 ;; Hardware stack levels used:    1
 13087 ;; Hardware stack levels required when called:    4
 13088 ;; This function calls:
 13089 ;;		Nothing
 13090 ;; This function is called by:
 13091 ;;		_Get_Analog_Value
 13092 ;; This function uses a non-reentrant model
 13093 ;;
 13094  1AE4                     _FILTER_Temp:	
 13095  1AE4                     l24703:	
 13096                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
 13097                           
 13098                           
 13099                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
 13100  1AE4  0856               	movf	_ui16_NTC_Temp_bldc^(0+384),w
 13101  1AE5  07CE               	addwf	_filterTempNTC^(0+384),f
 13102  1AE6  0857               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
 13103  1AE7  3DCF               	addwfc	(_filterTempNTC+1)^(0+384),f
 13104                           
 13105                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
 13106  1AE8  084F               	movf	(_filterTempNTC+1)^(0+384),w
 13107  1AE9  0022               	movlb	2	; select bank2
 13108  1AEA  00AC               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256)
 13109  1AEB  0023               	movlb	3	; select bank3
 13110  1AEC  084E               	movf	_filterTempNTC^(0+384),w
 13111  1AED  0022               	movlb	2	; select bank2
 13112  1AEE  00AB               	movwf	_ui16_NTC_Temp_bldc_mean^(0+256)
 13113  1AEF  3006               	movlw	6
 13114  1AF0                     u4365:	
 13115  1AF0  36AC               	lsrf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),f
 13116  1AF1  0CAB               	rrf	_ui16_NTC_Temp_bldc_mean^(0+256),f
 13117  1AF2  0B89               	decfsz	9,f
 13118  1AF3  2AF0               	goto	u4365
 13119                           
 13120                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
 13121  1AF4  082B               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
 13122  1AF5  0023               	movlb	3	; select bank3
 13123  1AF6  02CE               	subwf	_filterTempNTC^(0+384),f
 13124  1AF7  0022               	movlb	2	; select bank2
 13125  1AF8  082C               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
 13126  1AF9  0023               	movlb	3	; select bank3
 13127  1AFA  3BCF               	subwfb	(_filterTempNTC+1)^(0+384),f
 13128                           
 13129                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
 13130  1AFB  0022               	movlb	2	; select bank2
 13131  1AFC  082C               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
 13132  1AFD  0023               	movlb	3	; select bank3
 13133  1AFE  00D9               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
 13134  1AFF  0022               	movlb	2	; select bank2
 13135  1B00  082B               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
 13136  1B01  0023               	movlb	3	; select bank3
 13137  1B02  00D8               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
 13138  1B03  0862               	movf	_ui16_Temp_cal^(0+384),w
 13139  1B04  07D8               	addwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),f
 13140  1B05  0863               	movf	(_ui16_Temp_cal+1)^(0+384),w
 13141  1B06  3DD9               	addwfc	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),f
 13142  1B07  0008               	return
 13143  1B08                     __end_of_FILTER_Temp:	
 13144                           
 13145                           	psect	text2073
 13146  1AAA                     __ptext2073:	
 13147 ;; =============== function _FILTER_Temp ends ============
 13148                           
 13149                           
 13150 ;; *************** function _FILTER_IPhase *****************
 13151 ;; Defined at:
 13152 ;;		line 359 in file "../adc.c"
 13153 ;; Parameters:    Size  Location     Type
 13154 ;;		None
 13155 ;; Auto vars:     Size  Location     Type
 13156 ;;		None
 13157 ;; Return value:  Size  Location     Type
 13158 ;;		None               void
 13159 ;; Registers used:
 13160 ;;		wreg, status,2, status,0
 13161 ;; Tracked objects:
 13162 ;;		On entry : 1D/1
 13163 ;;		On exit  : 1F/3
 13164 ;;		Unchanged: FFFE0/0
 13165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13166 ;;      Params:         0       0       0       0       0       0       0       0
 13167 ;;      Locals:         0       0       0       0       0       0       0       0
 13168 ;;      Temps:          0       0       0       0       0       0       0       0
 13169 ;;      Totals:         0       0       0       0       0       0       0       0
 13170 ;;Total ram usage:        0 bytes
 13171 ;; Hardware stack levels used:    1
 13172 ;; Hardware stack levels required when called:    4
 13173 ;; This function calls:
 13174 ;;		Nothing
 13175 ;; This function is called by:
 13176 ;;		_Get_Analog_Value
 13177 ;; This function uses a non-reentrant model
 13178 ;;
 13179  1AAA                     _FILTER_IPhase:	
 13180                           
 13181                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
 13182                           
 13183                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
 13184  1AAA  0022               	movlb	2	; select bank2
 13185  1AAB  0829               	movf	_ui16_IPhase1_bldc^(0+256),w	;volatile
 13186  1AAC  0023               	movlb	3	; select bank3
 13187  1AAD  07CC               	addwf	_filter3^(0+384),f
 13188  1AAE  0022               	movlb	2	; select bank2
 13189  1AAF  082A               	movf	(_ui16_IPhase1_bldc+1)^(0+256),w	;volatile
 13190  1AB0  0023               	movlb	3	; select bank3
 13191  1AB1  3DCD               	addwfc	(_filter3+1)^(0+384),f
 13192                           
 13193                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
 13194  1AB2  084D               	movf	(_filter3+1)^(0+384),w
 13195  1AB3  0022               	movlb	2	; select bank2
 13196  1AB4  00B2               	movwf	(_ui16_fir_IPhase_mean+1)^(0+256)
 13197  1AB5  0023               	movlb	3	; select bank3
 13198  1AB6  084C               	movf	_filter3^(0+384),w
 13199  1AB7  0022               	movlb	2	; select bank2
 13200  1AB8  00B1               	movwf	_ui16_fir_IPhase_mean^(0+256)
 13201  1AB9  3006               	movlw	6
 13202  1ABA                     u4355:	
 13203  1ABA  36B2               	lsrf	(_ui16_fir_IPhase_mean+1)^(0+256),f
 13204  1ABB  0CB1               	rrf	_ui16_fir_IPhase_mean^(0+256),f
 13205  1ABC  0B89               	decfsz	9,f
 13206  1ABD  2ABA               	goto	u4355
 13207                           
 13208                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
 13209  1ABE  0831               	movf	_ui16_fir_IPhase_mean^(0+256),w
 13210  1ABF  0023               	movlb	3	; select bank3
 13211  1AC0  02CC               	subwf	_filter3^(0+384),f
 13212  1AC1  0022               	movlb	2	; select bank2
 13213  1AC2  0832               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
 13214  1AC3  0023               	movlb	3	; select bank3
 13215  1AC4  3BCD               	subwfb	(_filter3+1)^(0+384),f
 13216  1AC5  0008               	return
 13217  1AC6                     __end_of_FILTER_IPhase:	
 13218                           
 13219                           	psect	intentry
 13220  0004                     __pintentry:	
 13221 ;; =============== function _ADC_Init ends ============
 13222                           
 13223                           
 13224 ;; *************** function _interrupt_handler *****************
 13225 ;; Defined at:
 13226 ;;		line 79 in file "../interrupt.c"
 13227 ;; Parameters:    Size  Location     Type
 13228 ;;		None
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;		None
 13231 ;; Return value:  Size  Location     Type
 13232 ;;		None               void
 13233 ;; Registers used:
 13234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13235 ;; Tracked objects:
 13236 ;;		On entry : 0/0
 13237 ;;		On exit  : 1F/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13240 ;;      Params:         0       0       0       0       0       0       0       0
 13241 ;;      Locals:         0       0       0       0       0       0       0       0
 13242 ;;      Temps:          0       0       0       0       0       0       0       0
 13243 ;;      Totals:         0       0       0       0       0       0       0       0
 13244 ;;Total ram usage:        0 bytes
 13245 ;; Hardware stack levels used:    1
 13246 ;; Hardware stack levels required when called:    3
 13247 ;; This function calls:
 13248 ;;		_PWM_CTRL
 13249 ;;		_Task1ms
 13250 ;;		_interrrupt_bldc
 13251 ;;		_ELINMIntHandler
 13252 ;;		_interrupt_PWMCapture
 13253 ;; This function is called by:
 13254 ;;		Interrupt level 1
 13255 ;; This function uses a non-reentrant model
 13256 ;;
 13257  0004                     _interrupt_handler:	
 13258                           
 13259                           ; Regs used in _interrupt_handler: [wreg-status,0+pclath+cstack]
 13260  0004  3180               	pagesel	$
 13261                           
 13262                           ;interrupt.c: 81: if( TMR1IF )
 13263  0005  0020               	movlb	0	; select bank0
 13264  0006  1811               	btfsc	17,0
 13265                           
 13266                           ;interrupt.c: 83: {
 13267                           ;interrupt.c: 85: TMR1IF = 0;
 13268  0007  1011               	bcf	17,0
 13269                           
 13270                           ;interrupt.c: 87: }
 13271                           ;interrupt.c: 90: if( TMR4IF )
 13272  0008  1C93               	btfss	19,1
 13273  0009  2811               	goto	i1l28647
 13274                           
 13275                           ;interrupt.c: 92: {
 13276                           ;interrupt.c: 94: TMR4IF = 0;
 13277  000A  1093               	bcf	19,1
 13278                           
 13279                           ;interrupt.c: 96: PWM_CTRL( );
 13280  000B  319A  227F  3180   	fcall	_PWM_CTRL
 13281                           
 13282                           ;interrupt.c: 98: Task1ms( );
 13283  000E  3187  27FD  3180   	fcall	_Task1ms
 13284  0011                     i1l28647:	
 13285                           
 13286                           ;interrupt.c: 100: }
 13287                           ;interrupt.c: 106: if( TMR2IF )
 13288  0011  0020               	movlb	0	; select bank0
 13289  0012  1C91               	btfss	17,1
 13290  0013  2818               	goto	i1l28653
 13291                           
 13292                           ;interrupt.c: 108: {
 13293                           ;interrupt.c: 110: TMR2IF = 0;
 13294  0014  1091               	bcf	17,1
 13295                           
 13296                           ;interrupt.c: 112: interrrupt_bldc( );
 13297  0015  319D  25C8  3180   	fcall	_interrrupt_bldc
 13298  0018                     i1l28653:	
 13299                           
 13300                           ;interrupt.c: 114: }
 13301                           ;interrupt.c: 117: if( TMR6IF )
 13302  0018  0020               	movlb	0	; select bank0
 13303  0019  1D93               	btfss	19,3
 13304  001A  281F               	goto	i1l28659
 13305                           
 13306                           ;interrupt.c: 119: {
 13307                           ;interrupt.c: 121: TMR6IF = 0;
 13308  001B  1193               	bcf	19,3
 13309                           
 13310                           ;interrupt.c: 126: ELINMIntHandler( );
 13311  001C  3188  2006  3180   	fcall	_ELINMIntHandler
 13312  001F                     i1l28659:	
 13313                           
 13314                           ;interrupt.c: 131: }
 13315                           ;interrupt.c: 134: if( CCP5IF )
 13316  001F  0020               	movlb	0	; select bank0
 13317  0020  1F13               	btfss	19,6
 13318  0021  2825               	goto	i1l28665
 13319                           
 13320                           ;interrupt.c: 136: {
 13321                           ;interrupt.c: 138: CCP5IF = 0;
 13322  0022  1313               	bcf	19,6
 13323                           
 13324                           ;interrupt.c: 140: interrupt_PWMCapture( );
 13325  0023  3190  2023         	fcall	_interrupt_PWMCapture
 13326  0025                     i1l28665:	
 13327                           
 13328                           ;interrupt.c: 142: }
 13329                           ;interrupt.c: 145: if( CCP2IF )
 13330  0025  0020               	movlb	0	; select bank0
 13331  0026  1812               	btfsc	18,0
 13332                           
 13333                           ;interrupt.c: 147: {
 13334                           ;interrupt.c: 149: CCP2IF = 0;
 13335  0027  1012               	bcf	18,0
 13336  0028  0009               	retfie
 13337  0029                     __end_of_interrupt_handler:	
 13338                           
 13339                           	psect	text2078
 13340  1DC8                     __ptext2078:	
 13341 ;; =============== function _interrupt_handler ends ============
 13342                           
 13343                           
 13344 ;; *************** function _interrrupt_bldc *****************
 13345 ;; Defined at:
 13346 ;;		line 284 in file "../bldc.c"
 13347 ;; Parameters:    Size  Location     Type
 13348 ;;		None
 13349 ;; Auto vars:     Size  Location     Type
 13350 ;;  ui32_tmp        4    9[COMMON] unsigned long 
 13351 ;; Return value:  Size  Location     Type
 13352 ;;		None               void
 13353 ;; Registers used:
 13354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13355 ;; Tracked objects:
 13356 ;;		On entry : 1F/0
 13357 ;;		On exit  : 1C/0
 13358 ;;		Unchanged: 0/0
 13359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13360 ;;      Params:         0       0       0       0       0       0       0       0
 13361 ;;      Locals:         4       0       0       0       0       0       0       0
 13362 ;;      Temps:          2       0       0       0       0       0       0       0
 13363 ;;      Totals:         6       0       0       0       0       0       0       0
 13364 ;;Total ram usage:        6 bytes
 13365 ;; Hardware stack levels used:    1
 13366 ;; Hardware stack levels required when called:    2
 13367 ;; This function calls:
 13368 ;;		i1_commutate
 13369 ;;		_BLDCWait
 13370 ;;		i1_ADC_Wait
 13371 ;;		i1_ADC_Read
 13372 ;;		i1___wmul
 13373 ;;		i1___lwdiv
 13374 ;; This function is called by:
 13375 ;;		_interrupt_handler
 13376 ;; This function uses a non-reentrant model
 13377 ;;
 13378  1DC8                     _interrrupt_bldc:	
 13379                           
 13380                           ;bldc.c: 286: unsigned long ui32_tmp ;
 13381                           ;bldc.c: 288: ++comm_time ;
 13382                           
 13383                           ; Regs used in _interrrupt_bldc: [wreg-status,0+pclath+cstack]
 13384  1DC8  0AC8               	incf	_comm_time,f
 13385  1DC9  1903               	skipnz
 13386  1DCA  0AC9               	incf	_comm_time+1,f
 13387                           
 13388                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
 13389  1DCB  0849               	movf	_comm_time+1,w
 13390  1DCC  0021               	movlb	1	; select bank1
 13391  1DCD  0237               	subwf	(_ui16_comm_time_max+1)^(0+128),w
 13392  1DCE  1D03               	skipz
 13393  1DCF  2DD4               	goto	u838_25
 13394  1DD0  0020               	movlb	0	; select bank0
 13395  1DD1  0848               	movf	_comm_time,w
 13396  1DD2  0021               	movlb	1	; select bank1
 13397  1DD3  0236               	subwf	_ui16_comm_time_max^(0+128),w
 13398  1DD4                     u838_25:	
 13399  1DD4  1803               	skipnc
 13400  1DD5  2DD9               	goto	i1l28357
 13401                           
 13402                           ;bldc.c: 294: {
 13403                           ;bldc.c: 296: commutate( );
 13404  1DD6  319B  23E5  319D   	fcall	i1_commutate
 13405  1DD9                     i1l28357:	
 13406                           
 13407                           ;bldc.c: 298: }
 13408                           ;bldc.c: 302: if( ui16_step_cnt < 10 )
 13409  1DD9  3000               	movlw	0
 13410  1DDA  0021               	movlb	1	; select bank1
 13411  1DDB  023F               	subwf	(_ui16_step_cnt+1)^(0+128),w
 13412  1DDC  300A               	movlw	10
 13413  1DDD  1903               	skipnz
 13414  1DDE  023E               	subwf	_ui16_step_cnt^(0+128),w
 13415  1DDF  1C03               	btfss	3,0
 13416  1DE0  2DE3               	goto	i1l28361
 13417                           
 13418                           ;bldc.c: 311: else
 13419                           ;bldc.c: 312: {
 13420                           ;bldc.c: 322: MotorFlags.bits.B3 = 0;
 13421  1DE1  0020               	movlb	0	; select bank0
 13422  1DE2  11CB               	bcf	_MotorFlags,3
 13423  1DE3                     i1l28361:	
 13424                           
 13425                           ;bldc.c: 328: }
 13426                           ;bldc.c: 331: if (ui16_step_cnt >= 3 )
 13427  1DE3  3000               	movlw	0
 13428  1DE4  0021               	movlb	1	; select bank1
 13429  1DE5  023F               	subwf	(_ui16_step_cnt+1)^(0+128),w
 13430  1DE6  3003               	movlw	3
 13431  1DE7  1903               	skipnz
 13432  1DE8  023E               	subwf	_ui16_step_cnt^(0+128),w
 13433  1DE9  1C03               	skipc
 13434  1DEA  2DED               	goto	i1l28365
 13435                           
 13436                           ;bldc.c: 333: {
 13437                           ;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
 13438  1DEB  0020               	movlb	0	; select bank0
 13439  1DEC  124B               	bcf	_MotorFlags,4
 13440  1DED                     i1l28365:	
 13441                           
 13442                           ;bldc.c: 337: }
 13443                           ;bldc.c: 340: BLDCWait( );
 13444  1DED  27D3  319D         	fcall	_BLDCWait
 13445                           
 13446                           ;bldc.c: 346: if( C1OUT )
 13447  1DEF  0022               	movlb	2	; select bank2
 13448  1DF0  1F11               	btfss	17,6
 13449  1DF1  2DF4               	goto	i1l3797
 13450                           
 13451                           ;bldc.c: 349: {
 13452                           ;bldc.c: 351: ui8_CompFlag = 0x00;
 13453  1DF2  01D1               	clrf	_ui8_CompFlag^(0+256)
 13454                           
 13455                           ;bldc.c: 353: }
 13456  1DF3  2F06               	goto	i1l28547
 13457  1DF4                     i1l3797:	
 13458                           
 13459                           ;bldc.c: 356: else
 13460                           ;bldc.c: 357: {
 13461                           ;bldc.c: 362: ui8_CompFlag = 0x01;
 13462  1DF4  01D1               	clrf	_ui8_CompFlag^(0+256)
 13463  1DF5  0AD1               	incf	_ui8_CompFlag^(0+256),f
 13464  1DF6  2F06               	goto	i1l28547
 13465  1DF7                     i1l28371:	
 13466                           
 13467                           ;bldc.c: 378: {
 13468                           ;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
 13469  1DF7  302D               	movlw	45
 13470  1DF8  0021               	movlb	1	; select bank1
 13471  1DF9  009D               	movwf	29	;volatile
 13472                           
 13473                           ;bldc.c: 387: ADC_Wait( );
 13474  1DFA  276E  319D         	fcall	i1_ADC_Wait
 13475                           
 13476                           ;bldc.c: 391: ( GO_nDONE = 1 );
 13477  1DFC  0021               	movlb	1	; select bank1
 13478  1DFD  149D               	bsf	29,1
 13479                           
 13480                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
 13481  1DFE  2787  319D         	fcall	i1_ADC_Read
 13482  1E00  0871               	movf	?i1_ADC_Read+1,w
 13483  1E01  0023               	movlb	3	; select bank3
 13484  1E02  00D7               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
 13485  1E03  0870               	movf	?i1_ADC_Read,w
 13486  1E04  00D6               	movwf	_ui16_NTC_Temp_bldc^(0+384)
 13487                           
 13488                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
 13489  1E05  3031               	movlw	49
 13490  1E06  0021               	movlb	1	; select bank1
 13491  1E07                     L53:	
 13492  1E07  009D               	movwf	29	;volatile
 13493  1E08                     L47:	
 13494                           
 13495                           ;bldc.c: 403: ADC_Wait( );
 13496  1E08  276E  319D         	fcall	i1_ADC_Wait
 13497                           
 13498                           ;bldc.c: 407: ( GO_nDONE = 1 );
 13499  1E0A  0021               	movlb	1	; select bank1
 13500  1E0B  149D               	bsf	29,1
 13501  1E0C                     i1l28381:	
 13502                           
 13503                           ;bldc.c: 410: ui8_sampleState++;
 13504  1E0C  0022               	movlb	2	; select bank2
 13505  1E0D  0AE0               	incf	_ui8_sampleState^(0+256),f
 13506                           
 13507                           ;bldc.c: 413: break;
 13508  1E0E  2F13               	goto	i1l3801
 13509  1E0F                     i1l28383:	
 13510                           
 13511                           ;bldc.c: 421: {
 13512                           ;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
 13513  1E0F  0859               	movf	_ui8_Ubemf_sel^(0+256),w
 13514  1E10  0021               	movlb	1	; select bank1
 13515  1E11  009D               	movwf	29	;volatile
 13516                           
 13517                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
 13518  1E12  081B               	movf	27,w	;volatile
 13519  1E13  0020               	movlb	0	; select bank0
 13520  1E14  00D1               	movwf	_ui16_Ubat_bldc	;volatile
 13521                           
 13522                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
 13523  1E15  0021               	movlb	1	; select bank1
 13524  1E16  081C               	movf	28,w	;volatile
 13525  1E17  0020               	movlb	0	; select bank0
 13526  1E18  00D2               	movwf	_ui16_Ubat_bldc+1	;volatile
 13527                           
 13528                           ;bldc.c: 454: _nop();
 13529  1E19  0000               	nop
 13530                           
 13531                           ;bldc.c: 455: _nop();
 13532  1E1A  0000               	nop
 13533                           
 13534                           ;bldc.c: 456: _nop();
 13535  1E1B  0000               	nop
 13536                           
 13537                           ;bldc.c: 457: _nop();
 13538  1E1C  0000               	nop
 13539                           
 13540                           ;bldc.c: 458: _nop();
 13541  1E1D  0000               	nop
 13542                           
 13543                           ;bldc.c: 459: _nop();
 13544  1E1E  0000               	nop
 13545                           
 13546                           ;bldc.c: 460: _nop();
 13547  1E1F  0000               	nop
 13548                           
 13549                           ;bldc.c: 461: _nop();
 13550  1E20  0000               	nop
 13551                           
 13552                           ;bldc.c: 463: _nop();
 13553  1E21  0000               	nop
 13554                           
 13555                           ;bldc.c: 464: _nop();
 13556  1E22  0000               	nop
 13557                           
 13558                           ;bldc.c: 465: _nop();
 13559  1E23  0000               	nop
 13560                           
 13561                           ;bldc.c: 466: _nop();
 13562  1E24  0000               	nop
 13563                           
 13564                           ;bldc.c: 467: _nop();
 13565  1E25  0000               	nop
 13566                           
 13567                           ;bldc.c: 468: _nop();
 13568  1E26  0000               	nop
 13569                           
 13570                           ;bldc.c: 469: _nop();
 13571  1E27  0000               	nop
 13572                           
 13573                           ;bldc.c: 470: _nop();
 13574  1E28  0000               	nop
 13575  1E29  2E08               	goto	L47
 13576  1E2A                     i1l28423:	
 13577                           ;bldc.c: 474: ADC_Wait();
 13578                           
 13579                           
 13580                           ;bldc.c: 491: {
 13581                           ;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
 13582  1E2A  0021               	movlb	1	; select bank1
 13583  1E2B  081B               	movf	27,w	;volatile
 13584  1E2C  00B4               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
 13585                           
 13586                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
 13587  1E2D  081C               	movf	28,w	;volatile
 13588  1E2E  00B5               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
 13589                           
 13590                           ;bldc.c: 511: ( GO_nDONE = 1 );
 13591  1E2F  149D               	bsf	29,1
 13592                           
 13593                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui8_duty_cycle_BLDC != 0 ) )
 13594  1E30  0020               	movlb	0	; select bank0
 13595  1E31  1F4B               	btfss	_MotorFlags,6
 13596  1E32  2E48               	goto	i1l28435
 13597  1E33  0850               	movf	_ui8_duty_cycle_BLDC,w
 13598  1E34  1903               	btfsc	3,2
 13599  1E35  2E48               	goto	i1l28435
 13600                           
 13601                           ;bldc.c: 521: {
 13602                           ;bldc.c: 523: if( rising_bemf_flag )
 13603  1E36  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 13604  1E37  2E52               	goto	i1l28443
 13605                           
 13606                           ;bldc.c: 525: {
 13607                           ;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
 13608  1E38  0021               	movlb	1	; select bank1
 13609  1E39  0834               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 13610  1E3A  3E64               	addlw	100
 13611  1E3B  00F7               	movwf	??_interrrupt_bldc
 13612  1E3C  3000               	movlw	0
 13613  1E3D  3D35               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 13614  1E3E  00F8               	movwf	??_interrrupt_bldc+1
 13615  1E3F  0020               	movlb	0	; select bank0
 13616  1E40  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 13617  1E41  0278               	subwf	??_interrrupt_bldc+1,w
 13618  1E42  1D03               	skipz
 13619  1E43  2E46               	goto	u845_25
 13620  1E44  0851               	movf	_ui16_Ubat_bldc,w	;volatile
 13621  1E45  0277               	subwf	??_interrrupt_bldc,w
 13622  1E46                     u845_25:	
 13623  1E46  1803               	skipnc
 13624  1E47  2F13               	goto	i1l3801
 13625  1E48                     i1l28435:	
 13626                           
 13627                           ;bldc.c: 530: {
 13628                           ;bldc.c: 534: ui8_sampleState++;
 13629  1E48  0022               	movlb	2	; select bank2
 13630  1E49  0AE0               	incf	_ui8_sampleState^(0+256),f
 13631                           
 13632                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
 13633  1E4A  0021               	movlb	1	; select bank1
 13634  1E4B  0863               	movf	_ui8_UPhase_sel^(0+128),w
 13635  1E4C  009D               	movwf	29	;volatile
 13636                           
 13637                           ;bldc.c: 540: ADC_Wait( );
 13638  1E4D  276E  319D         	fcall	i1_ADC_Wait
 13639                           
 13640                           ;bldc.c: 544: ( GO_nDONE = 1 );
 13641  1E4F  0021               	movlb	1	; select bank1
 13642  1E50  149D               	bsf	29,1
 13643                           
 13644                           ;bldc.c: 547: }
 13645  1E51  2F13               	goto	i1l3801
 13646  1E52                     i1l28443:	
 13647                           
 13648                           ;bldc.c: 562: else
 13649                           ;bldc.c: 563: {
 13650                           ;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
 13651  1E52  3000               	movlw	0
 13652  1E53  0021               	movlb	1	; select bank1
 13653  1E54  0235               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 13654  1E55  301F               	movlw	31
 13655  1E56  1903               	skipnz
 13656  1E57  0234               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 13657  1E58  1803               	btfsc	3,0
 13658  1E59  2E48               	goto	i1l28435
 13659  1E5A  2F13               	goto	i1l3801
 13660  1E5B                     i1l28461:	
 13661                           ;bldc.c: 593: }
 13662                           ;bldc.c: 596: }
 13663                           ;bldc.c: 601: }
 13664                           
 13665                           
 13666                           ;bldc.c: 665: ui8_BlankingCount = 0;
 13667  1E5B  0021               	movlb	1	; select bank1
 13668  1E5C  01DB               	clrf	_ui8_BlankingCount^(0+128)
 13669                           
 13670                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
 13671  1E5D  2787  319D         	fcall	i1_ADC_Read
 13672                           
 13673                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
 13674  1E5F  1CE5               	btfss	_ui8_error_Flags^(0+128),1
 13675  1E60  2E69               	goto	i1l28475
 13676                           
 13677                           ;bldc.c: 677: {
 13678                           ;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
 13679  1E61  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13680  1E62  009D               	movwf	29	;volatile
 13681                           
 13682                           ;bldc.c: 682: ADC_Wait( );
 13683  1E63  276E  319D         	fcall	i1_ADC_Wait
 13684                           
 13685                           ;bldc.c: 683: ( GO_nDONE = 1 );
 13686  1E65  0021               	movlb	1	; select bank1
 13687  1E66  3009               	movlw	9
 13688  1E67  149D               	bsf	29,1
 13689                           
 13690                           ;bldc.c: 686: ui8_sampleState = 9;
 13691  1E68  2F03               	goto	L48
 13692  1E69                     i1l28475:	
 13693                           ;bldc.c: 688: }
 13694                           
 13695                           
 13696                           ;bldc.c: 691: else
 13697                           ;bldc.c: 692: {
 13698                           ;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 13699  1E69  3075               	movlw	117
 13700  1E6A  009D               	movwf	29	;volatile
 13701                           
 13702                           ;bldc.c: 697: ADC_Wait( );
 13703  1E6B  276E  319D         	fcall	i1_ADC_Wait
 13704  1E6D  2E0C               	goto	i1l28381
 13705  1E6E                     i1l3818:	
 13706                           ;bldc.c: 754: }
 13707                           ;bldc.c: 757: case 8:
 13708                           
 13709                           
 13710                           ;bldc.c: 759: {
 13711                           ;bldc.c: 764: ( GO_nDONE = 1 );
 13712  1E6E  0021               	movlb	1	; select bank1
 13713  1E6F  149D               	bsf	29,1
 13714                           
 13715                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
 13716  1E70  2787  319D         	fcall	i1_ADC_Read
 13717                           
 13718                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
 13719  1E72  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13720  1E73  2E07               	goto	L53
 13721  1E74                     i1l28495:	
 13722                           ;bldc.c: 776: ADC_Wait( );
 13723                           
 13724                           
 13725                           ;bldc.c: 795: {
 13726                           ;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
 13727  1E74  2787  319D         	fcall	i1_ADC_Read
 13728  1E76  0871               	movf	?i1_ADC_Read+1,w
 13729  1E77  00B1               	movwf	(_ui16_IPhase_bldc+1)^(0+128)	;volatile
 13730  1E78  0870               	movf	?i1_ADC_Read,w
 13731  1E79  00B0               	movwf	_ui16_IPhase_bldc^(0+128)	;volatile
 13732                           
 13733                           ;bldc.c: 806: if (MotorFlags.bits.B6)
 13734  1E7A  0020               	movlb	0	; select bank0
 13735  1E7B  1B4B               	btfsc	_MotorFlags,6
 13736  1E7C  2EDF               	goto	i1l28521
 13737  1E7D  2ED6               	goto	i1l28519
 13738  1E7E                     i1l28501:	
 13739                           
 13740                           ;bldc.c: 816: {
 13741                           ;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0]) )
 13742  1E7E  0022               	movlb	2	; select bank2
 13743  1E7F  0820               	movf	_ui8_current_cal^(0+256),w
 13744  1E80  27F4  319D         	fcall	PL17	;call to abstracted procedure
 13745  1E82  1803               	skipnc
 13746  1E83  2E98               	goto	i1l28505
 13747                           
 13748                           ;bldc.c: 820: {
 13749                           ;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[0])*ui16_I_c
      +                          al_Ph1)>>8);
 13750  1E84  0831               	movf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 13751  1E85  00F1               	movwf	?i1___wmul+1
 13752  1E86  0830               	movf	_ui16_IPhase_bldc^(0+128),w	;volatile
 13753  1E87  00F0               	movwf	?i1___wmul
 13754  1E88  0022               	movlb	2	; select bank2
 13755  1E89  0820               	movf	_ui8_current_cal^(0+256),w
 13756  1E8A  02F0               	subwf	?i1___wmul,f
 13757  1E8B  1C03               	skipc
 13758  1E8C  03F1               	decf	?i1___wmul+1,f
 13759  1E8D  0021               	movlb	1	; select bank1
 13760  1E8E  0869               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 13761  1E8F  00F3               	movwf	?i1___wmul+3
 13762  1E90  0868               	movf	_ui16_I_cal_Ph1^(0+128),w
 13763  1E91  00F2               	movwf	?i1___wmul+2
 13764  1E92  2799  319D         	fcall	i1___wmul
 13765  1E94  0871               	movf	?i1___wmul+1,w
 13766  1E95  0022               	movlb	2	; select bank2
 13767  1E96  00A9               	movwf	_ui16_IPhase1_bldc^(0+256)	;volatile
 13768  1E97  2E9A               	goto	L49
 13769  1E98                     i1l28505:	
 13770                           ;bldc.c: 824: }
 13771                           
 13772                           
 13773                           ;bldc.c: 827: else
 13774                           ;bldc.c: 828: {
 13775                           ;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
 13776  1E98  0022               	movlb	2	; select bank2
 13777  1E99  01A9               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
 13778  1E9A                     L49:	
 13779  1E9A  01AA               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
 13780  1E9B  2EEB               	goto	i1l28525
 13781  1E9C                     i1l28507:	
 13782                           
 13783                           ;bldc.c: 842: {
 13784                           ;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1] ) )
 13785  1E9C  0022               	movlb	2	; select bank2
 13786  1E9D  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 13787  1E9E  27F4  319D         	fcall	PL17	;call to abstracted procedure
 13788  1EA0  1803               	skipnc
 13789  1EA1  2EB6               	goto	i1l28511
 13790                           
 13791                           ;bldc.c: 846: {
 13792                           ;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[1])*ui16_I_c
      +                          al_Ph2)>>8);
 13793  1EA2  0831               	movf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 13794  1EA3  00F1               	movwf	?i1___wmul+1
 13795  1EA4  0830               	movf	_ui16_IPhase_bldc^(0+128),w	;volatile
 13796  1EA5  00F0               	movwf	?i1___wmul
 13797  1EA6  0022               	movlb	2	; select bank2
 13798  1EA7  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 13799  1EA8  02F0               	subwf	?i1___wmul,f
 13800  1EA9  1C03               	skipc
 13801  1EAA  03F1               	decf	?i1___wmul+1,f
 13802  1EAB  0021               	movlb	1	; select bank1
 13803  1EAC  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 13804  1EAD  00F3               	movwf	?i1___wmul+3
 13805  1EAE  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 13806  1EAF  00F2               	movwf	?i1___wmul+2
 13807  1EB0  2799  319D         	fcall	i1___wmul
 13808  1EB2  0871               	movf	?i1___wmul+1,w
 13809  1EB3  0023               	movlb	3	; select bank3
 13810  1EB4  00D2               	movwf	_ui16_IPhase2_bldc^(0+384)	;volatile
 13811  1EB5  2EB8               	goto	L50
 13812  1EB6                     i1l28511:	
 13813                           ;bldc.c: 851: }
 13814                           
 13815                           
 13816                           ;bldc.c: 854: else
 13817                           ;bldc.c: 855: {
 13818                           ;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
 13819  1EB6  0023               	movlb	3	; select bank3
 13820  1EB7  01D2               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
 13821  1EB8                     L50:	
 13822  1EB8  01D3               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
 13823  1EB9  2EEB               	goto	i1l28525
 13824  1EBA                     i1l28513:	
 13825                           
 13826                           ;bldc.c: 869: {
 13827                           ;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]) )
 13828  1EBA  0022               	movlb	2	; select bank2
 13829  1EBB  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 13830  1EBC  27F4  319D         	fcall	PL17	;call to abstracted procedure
 13831  1EBE  1803               	skipnc
 13832  1EBF  2ED4               	goto	i1l28517
 13833                           
 13834                           ;bldc.c: 873: {
 13835                           ;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[2])*ui16_I_c
      +                          al_Ph3)>>8);
 13836  1EC0  0831               	movf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 13837  1EC1  00F1               	movwf	?i1___wmul+1
 13838  1EC2  0830               	movf	_ui16_IPhase_bldc^(0+128),w	;volatile
 13839  1EC3  00F0               	movwf	?i1___wmul
 13840  1EC4  0022               	movlb	2	; select bank2
 13841  1EC5  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 13842  1EC6  02F0               	subwf	?i1___wmul,f
 13843  1EC7  1C03               	skipc
 13844  1EC8  03F1               	decf	?i1___wmul+1,f
 13845  1EC9  0021               	movlb	1	; select bank1
 13846  1ECA  086D               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 13847  1ECB  00F3               	movwf	?i1___wmul+3
 13848  1ECC  086C               	movf	_ui16_I_cal_Ph3^(0+128),w
 13849  1ECD  00F2               	movwf	?i1___wmul+2
 13850  1ECE  2799  319D         	fcall	i1___wmul
 13851  1ED0  0871               	movf	?i1___wmul+1,w
 13852  1ED1  0023               	movlb	3	; select bank3
 13853  1ED2  00D4               	movwf	_ui16_IPhase3_bldc^(0+384)	;volatile
 13854  1ED3  2EDD               	goto	L52
 13855  1ED4                     i1l28517:	
 13856                           ;bldc.c: 877: }
 13857                           
 13858                           
 13859                           ;bldc.c: 880: else
 13860                           ;bldc.c: 881: {
 13861                           ;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
 13862  1ED4  0023               	movlb	3	; select bank3
 13863  1ED5  2EDC               	goto	L54
 13864  1ED6                     i1l28519:	
 13865                           
 13866                           ;bldc.c: 895: {
 13867                           ;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
 13868  1ED6  0022               	movlb	2	; select bank2
 13869  1ED7  01A9               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
 13870  1ED8  01AA               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
 13871                           
 13872                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
 13873  1ED9  0023               	movlb	3	; select bank3
 13874  1EDA  01D2               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
 13875  1EDB  01D3               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
 13876  1EDC                     L54:	
 13877                           
 13878                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
 13879  1EDC  01D4               	clrf	_ui16_IPhase3_bldc^(0+384)	;volatile
 13880  1EDD                     L52:	
 13881  1EDD  01D5               	clrf	(_ui16_IPhase3_bldc+1)^(0+384)	;volatile
 13882                           
 13883                           ;bldc.c: 902: }
 13884                           ;bldc.c: 904: }
 13885  1EDE  2EEB               	goto	i1l28525
 13886  1EDF                     i1l28521:	
 13887  1EDF  0021               	movlb	1	; select bank1
 13888  1EE0  085C               	movf	_ui8_IPhase_sel^(0+128),w
 13889                           
 13890                           ; Switch size 1, requested type "space"
 13891                           ; Number of cases is 3, Range of values is 9 to 53
 13892                           ; switch strategies available:
 13893                           ; Name         Instructions Cycles
 13894                           ; simple_byte           10     6 (average)
 13895                           ; direct_byte           99     9 (fixed)
 13896                           ; jumptable            263     9 (fixed)
 13897                           ;	Chosen strategy is simple_byte
 13898  1EE1  3A09               	xorlw	9	; case 9
 13899  1EE2  1903               	skipnz
 13900  1EE3  2E7E               	goto	i1l28501
 13901  1EE4  3A18               	xorlw	24	; case 17
 13902  1EE5  1903               	skipnz
 13903  1EE6  2EBA               	goto	i1l28513
 13904  1EE7  3A24               	xorlw	36	; case 53
 13905  1EE8  1903               	skipnz
 13906  1EE9  2E9C               	goto	i1l28507
 13907  1EEA  2ED6               	goto	i1l28519
 13908  1EEB                     i1l28525:	
 13909                           
 13910                           ;bldc.c: 918: }
 13911                           ;bldc.c: 956: if( (ui16_IPhase_bldc.w > 300+40) )
 13912  1EEB  3001               	movlw	1
 13913  1EEC  0021               	movlb	1	; select bank1
 13914  1EED  0231               	subwf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 13915  1EEE  3055               	movlw	85
 13916  1EEF  1903               	skipnz
 13917  1EF0  0230               	subwf	_ui16_IPhase_bldc^(0+128),w	;volatile
 13918  1EF1  1C03               	skipc
 13919  1EF2  2EF8               	goto	i1l28531
 13920                           
 13921                           ;bldc.c: 958: {
 13922                           ;bldc.c: 960: MotorFlags.bits.B0 = 1;
 13923  1EF3  0020               	movlb	0	; select bank0
 13924  1EF4  30E5               	movlw	229
 13925  1EF5  144B               	bsf	_MotorFlags,0
 13926                           
 13927                           ;bldc.c: 964: LATC = LATC & 0b11100101;
 13928  1EF6  0022               	movlb	2	; select bank2
 13929  1EF7  058E               	andwf	14,f	;volatile
 13930  1EF8                     i1l28531:	
 13931                           ;bldc.c: 970: }
 13932                           
 13933                           
 13934                           ;bldc.c: 978: }
 13935                           ;bldc.c: 984: ADC_Wait( );
 13936  1EF8  276E  319D         	fcall	i1_ADC_Wait
 13937                           
 13938                           ;bldc.c: 988: ( GO_nDONE = 1 );
 13939  1EFA  0021               	movlb	1	; select bank1
 13940  1EFB  149D               	bsf	29,1
 13941                           
 13942                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
 13943  1EFC  1CE5               	btfss	_ui8_error_Flags^(0+128),1
 13944  1EFD  2E0C               	goto	i1l28381
 13945                           
 13946                           ;bldc.c: 993: {
 13947                           ;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 13948  1EFE  3075               	movlw	117
 13949  1EFF  009D               	movwf	29	;volatile
 13950                           
 13951                           ;bldc.c: 998: ADC_Wait( );
 13952  1F00  276E  319D         	fcall	i1_ADC_Wait
 13953                           
 13954                           ;bldc.c: 1001: ui8_sampleState = 5;
 13955  1F02  3005               	movlw	5
 13956  1F03                     L48:	
 13957  1F03  0022               	movlb	2	; select bank2
 13958  1F04  00E0               	movwf	_ui8_sampleState^(0+256)
 13959                           
 13960                           ;bldc.c: 1003: }
 13961  1F05  2F13               	goto	i1l3801
 13962  1F06                     i1l28547:	
 13963  1F06  0860               	movf	_ui8_sampleState^(0+256),w
 13964                           
 13965                           ; Switch size 1, requested type "space"
 13966                           ; Number of cases is 10, Range of values is 1 to 10
 13967                           ; switch strategies available:
 13968                           ; Name         Instructions Cycles
 13969                           ; direct_byte           29     9 (fixed)
 13970                           ; simple_byte           31    16 (average)
 13971                           ; jumptable            263     9 (fixed)
 13972                           ;	Chosen strategy is direct_byte
 13973  1F07  3EFF               	addlw	-1
 13974  1F08  1C03               	skipc
 13975  1F09  2F13               	goto	i1l3801
 13976  1F0A  0084               	movwf	4
 13977  1F0B  300A               	movlw	10
 13978  1F0C  0204               	subwf	4,w
 13979  1F0D  1803               	skipnc
 13980  1F0E  2F13               	goto	i1l3801
 13981  1F0F  3180               	movlp	high i1S31601
 13982  1F10  3504               	lslf	4,w
 13983  1F11  3EA6               	addlw	low i1S31601
 13984  1F12  0082               	movwf	2
 13985  1F13                     i1l3801:	
 13986                           
 13987                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
 13988  1F13  0020               	movlb	0	; select bank0
 13989  1F14  1F4B               	btfss	_MotorFlags,6
 13990  1F15  2F4B               	goto	i1l28575
 13991                           
 13992                           ;bldc.c: 1071: {
 13993                           ;bldc.c: 1073: if( MotorFlags.bits.B3)
 13994  1F16  1DCB               	btfss	_MotorFlags,3
 13995  1F17  2F4D               	goto	i1l28577
 13996                           
 13997                           ;bldc.c: 1075: {
 13998                           ;bldc.c: 1077: bool_start_demand_mat = 1 ;
 13999  1F18  0022               	movlb	2	; select bank2
 14000  1F19  3041               	movlw	65
 14001  1F1A  01D0               	clrf	_bool_start_demand_mat^(0+256)
 14002  1F1B  0AD0               	incf	_bool_start_demand_mat^(0+256),f
 14003                           
 14004                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
 14005  1F1C  0023               	movlb	3	; select bank3
 14006  1F1D  00E8               	movwf	_ui8_fixed_start_speed_mat^(0+384)
 14007  1F1E  01E9               	clrf	(_ui8_fixed_start_speed_mat+1)^(0+384)
 14008                           
 14009                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
 14010  1F1F  0020               	movlb	0	; select bank0
 14011  1F20  0848               	movf	_comm_time,w
 14012  1F21  3903               	andlw	3
 14013  1F22  1D03               	btfss	3,2
 14014  1F23  2F4D               	goto	i1l28577
 14015                           
 14016                           ;bldc.c: 1092: {
 14017                           ;bldc.c: 1094: if (MotorFlags.bits.B4)
 14018  1F24  1E4B               	btfss	_MotorFlags,4
 14019  1F25  2F3B               	goto	i1l28563
 14020                           
 14021                           ;bldc.c: 1096: {
 14022                           ;bldc.c: 1098: if (ui16_Ubat_bldc.w)
 14023  1F26  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 14024  1F27  0451               	iorwf	_ui16_Ubat_bldc,w	;volatile
 14025  1F28  1903               	skipnz
 14026  1F29  2F3F               	goto	i1l28567
 14027  1F2A                     i1l28561:	
 14028                           
 14029                           ;bldc.c: 1100: {
 14030                           ;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 14031  1F2A  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 14032  1F2B  00F1               	movwf	?i1___lwdiv+1
 14033  1F2C  0851               	movf	_ui16_Ubat_bldc,w	;volatile
 14034  1F2D  00F0               	movwf	?i1___lwdiv
 14035  1F2E  3080               	movlw	128
 14036  1F2F  00F2               	movwf	?i1___lwdiv+2
 14037  1F30  303E               	movlw	62
 14038  1F31  00F3               	movwf	?i1___lwdiv+3
 14039  1F32  27AE  319D         	fcall	i1___lwdiv
 14040  1F34  0870               	movf	?i1___lwdiv,w
 14041  1F35  00F9               	movwf	interrrupt_bldc@ui32_tmp
 14042  1F36  0871               	movf	?i1___lwdiv+1,w
 14043  1F37  00FA               	movwf	interrrupt_bldc@ui32_tmp+1
 14044  1F38  01FB               	clrf	interrrupt_bldc@ui32_tmp+2
 14045  1F39  01FC               	clrf	interrrupt_bldc@ui32_tmp+3
 14046  1F3A  2F3F               	goto	i1l28567
 14047  1F3B                     i1l28563:	
 14048                           
 14049                           ;bldc.c: 1111: else
 14050                           ;bldc.c: 1112: {
 14051                           ;bldc.c: 1114: if (ui16_Ubat_bldc.w)
 14052  1F3B  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
 14053  1F3C  0451               	iorwf	_ui16_Ubat_bldc,w	;volatile
 14054  1F3D  1D03               	btfss	3,2
 14055  1F3E  2F2A               	goto	i1l28561
 14056  1F3F                     i1l28567:	
 14057                           
 14058                           ;bldc.c: 1121: }
 14059                           ;bldc.c: 1124: }
 14060                           ;bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui32_tmp) )
 14061  1F3F  0021               	movlb	1	; select bank1
 14062  1F40  0860               	movf	_ui8_StartupPWM^(0+128),w
 14063  1F41  0279               	subwf	interrrupt_bldc@ui32_tmp,w
 14064  1F42  1803               	skipnc
 14065  1F43  2F46               	goto	i1l28571
 14066                           
 14067                           ;bldc.c: 1129: {
 14068                           ;bldc.c: 1131: ui8_StartupPWM--;
 14069  1F44  03E0               	decf	_ui8_StartupPWM^(0+128),f
 14070                           
 14071                           ;bldc.c: 1133: }
 14072  1F45  2F47               	goto	i1l28573
 14073  1F46                     i1l28571:	
 14074                           
 14075                           ;bldc.c: 1136: else
 14076                           ;bldc.c: 1137: {
 14077                           ;bldc.c: 1139: ui8_StartupPWM++;
 14078  1F46  0AE0               	incf	_ui8_StartupPWM^(0+128),f
 14079  1F47                     i1l28573:	
 14080                           
 14081                           ;bldc.c: 1141: }
 14082                           ;bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
 14083  1F47  0860               	movf	_ui8_StartupPWM^(0+128),w
 14084  1F48  0025               	movlb	5	; select bank5
 14085  1F49  0091               	movwf	17	;volatile
 14086  1F4A  2F4D               	goto	i1l28577
 14087  1F4B                     i1l28575:	
 14088                           
 14089                           ;bldc.c: 1155: else
 14090                           ;bldc.c: 1156: {
 14091                           ;bldc.c: 1159: CCPR1L = 0;
 14092  1F4B  0025               	movlb	5	; select bank5
 14093  1F4C  0191               	clrf	17	;volatile
 14094  1F4D                     i1l28577:	
 14095                           
 14096                           ;bldc.c: 1161: }
 14097                           ;bldc.c: 1165: if( 0 == ui8_BlankingCount )
 14098  1F4D  0021               	movlb	1	; select bank1
 14099  1F4E  08DB               	movf	_ui8_BlankingCount^(0+128),f
 14100  1F4F  1D03               	skipz
 14101  1F50  2F6C               	goto	i1l28593
 14102                           
 14103                           ;bldc.c: 1168: {
 14104                           ;bldc.c: 1177: if( ui8_CompFlag )
 14105  1F51  0022               	movlb	2	; select bank2
 14106  1F52  0851               	movf	_ui8_CompFlag^(0+256),w
 14107  1F53  1903               	btfsc	3,2
 14108  1F54  2F59               	goto	i1l3850
 14109                           
 14110                           ;bldc.c: 1187: {
 14111                           ;bldc.c: 1191: ui8_zero_cros_cnt++;
 14112  1F55  0020               	movlb	0	; select bank0
 14113  1F56  1ACB               	btfsc	_MotorFlags,5
 14114  1F57  2F59               	goto	i1l3850
 14115                           
 14116                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
 14117  1F58  16CB               	bsf	_MotorFlags,5
 14118  1F59                     i1l3850:	
 14119                           ;bldc.c: 1196: }
 14120                           ;bldc.c: 1199: }
 14121                           ;bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
 14122                           
 14123                           
 14124                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
 14125  1F59  0020               	movlb	0	; select bank0
 14126  1F5A  1ECB               	btfss	_MotorFlags,5
 14127  1F5B  0008               	return
 14128                           
 14129                           ;bldc.c: 1353: {
 14130                           ;bldc.c: 1357: if( 0 == phase_delay_counter )
 14131  1F5C  0023               	movlb	3	; select bank3
 14132  1F5D  0851               	movf	(_phase_delay_counter+1)^(0+384),w
 14133  1F5E  0450               	iorwf	_phase_delay_counter^(0+384),w
 14134  1F5F  1D03               	skipz
 14135  1F60  2F67               	goto	i1l28591
 14136                           
 14137                           ;bldc.c: 1360: {
 14138                           ;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
 14139  1F61  0020               	movlb	0	; select bank0
 14140  1F62  19CB               	btfsc	_MotorFlags,3
 14141  1F63  0008               	return
 14142                           
 14143                           ;bldc.c: 1364: {
 14144                           ;bldc.c: 1378: commutate( );
 14145  1F64  319B  23E5         	fcall	i1_commutate
 14146  1F66  0008               	return
 14147  1F67                     i1l28591:	
 14148                           
 14149                           ;bldc.c: 1389: else
 14150                           ;bldc.c: 1390: {
 14151                           ;bldc.c: 1392: phase_delay_counter--;
 14152  1F67  30FF               	movlw	-1
 14153  1F68  07D0               	addwf	_phase_delay_counter^(0+384),f
 14154  1F69  1C03               	skipc
 14155  1F6A  03D1               	decf	(_phase_delay_counter+1)^(0+384),f
 14156  1F6B  0008               	return
 14157  1F6C                     i1l28593:	
 14158                           ;bldc.c: 1394: }
 14159                           ;bldc.c: 1398: }
 14160                           ;bldc.c: 1401: }
 14161                           
 14162                           
 14163                           ;bldc.c: 1408: bemf_filter = 62;
 14164  1F6C  03DB               	decf	_ui8_BlankingCount^(0+128),f
 14165  1F6D  0008               	return
 14166  1F6E                     __end_of_interrrupt_bldc:	
 14167  1F6E                     __ptext2080:	
 14168 ;; =============== function i1_commutate ends ============
 14169                           
 14170                           
 14171 ;; *************** function i1_ADC_Wait *****************
 14172 ;; Defined at:
 14173 ;;		line 130 in file "../adc.c"
 14174 ;; Parameters:    Size  Location     Type
 14175 ;;		None
 14176 ;; Auto vars:     Size  Location     Type
 14177 ;;		None
 14178 ;; Return value:  Size  Location     Type
 14179 ;;		None               void
 14180 ;; Registers used:
 14181 ;;		None
 14182 ;; Tracked objects:
 14183 ;;		On entry : 0/1
 14184 ;;		On exit  : 0/0
 14185 ;;		Unchanged: 0/0
 14186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14187 ;;      Params:         0       0       0       0       0       0       0       0
 14188 ;;      Locals:         0       0       0       0       0       0       0       0
 14189 ;;      Temps:          0       0       0       0       0       0       0       0
 14190 ;;      Totals:         0       0       0       0       0       0       0       0
 14191 ;;Total ram usage:        0 bytes
 14192 ;; Hardware stack levels used:    1
 14193 ;; This function calls:
 14194 ;;		Nothing
 14195 ;; This function is called by:
 14196 ;;		_interrrupt_bldc
 14197 ;; This function uses a non-reentrant model
 14198 ;;
 14199  1F6E                     i1_ADC_Wait:	
 14200                           
 14201                           ;adc.c: 133: _nop();
 14202                           
 14203                           ; Regs used in i1_ADC_Wait: []
 14204  1F6E  0000               	nop
 14205                           
 14206                           ;adc.c: 134: _nop();
 14207  1F6F  0000               	nop
 14208                           
 14209                           ;adc.c: 135: _nop();
 14210  1F70  0000               	nop
 14211                           
 14212                           ;adc.c: 136: _nop();
 14213  1F71  0000               	nop
 14214                           
 14215                           ;adc.c: 137: _nop();
 14216  1F72  0000               	nop
 14217                           
 14218                           ;adc.c: 138: _nop();
 14219  1F73  0000               	nop
 14220                           
 14221                           ;adc.c: 139: _nop();
 14222  1F74  0000               	nop
 14223                           
 14224                           ;adc.c: 140: _nop();
 14225  1F75  0000               	nop
 14226                           
 14227                           ;adc.c: 142: _nop();
 14228  1F76  0000               	nop
 14229                           
 14230                           ;adc.c: 143: _nop();
 14231  1F77  0000               	nop
 14232                           
 14233                           ;adc.c: 144: _nop();
 14234  1F78  0000               	nop
 14235                           
 14236                           ;adc.c: 145: _nop();
 14237  1F79  0000               	nop
 14238                           
 14239                           ;adc.c: 146: _nop();
 14240  1F7A  0000               	nop
 14241                           
 14242                           ;adc.c: 147: _nop();
 14243  1F7B  0000               	nop
 14244                           
 14245                           ;adc.c: 148: _nop();
 14246  1F7C  0000               	nop
 14247                           
 14248                           ;adc.c: 149: _nop();
 14249  1F7D  0000               	nop
 14250                           
 14251                           ;adc.c: 151: _nop();
 14252  1F7E  0000               	nop
 14253                           
 14254                           ;adc.c: 152: _nop();
 14255  1F7F  0000               	nop
 14256                           
 14257                           ;adc.c: 153: _nop();
 14258  1F80  0000               	nop
 14259                           
 14260                           ;adc.c: 154: _nop();
 14261  1F81  0000               	nop
 14262                           
 14263                           ;adc.c: 155: _nop();
 14264  1F82  0000               	nop
 14265                           
 14266                           ;adc.c: 156: _nop();
 14267  1F83  0000               	nop
 14268                           
 14269                           ;adc.c: 157: _nop();
 14270  1F84  0000               	nop
 14271                           
 14272                           ;adc.c: 158: _nop();
 14273  1F85  0000               	nop
 14274  1F86  0008               	return
 14275  1F87                     __end_ofi1_ADC_Wait:	
 14276  1F87                     __ptext2085:	
 14277 ;; =============== function i1___wmul ends ============
 14278                           
 14279                           
 14280 ;; *************** function i1_ADC_Read *****************
 14281 ;; Defined at:
 14282 ;;		line 177 in file "../adc.c"
 14283 ;; Parameters:    Size  Location     Type
 14284 ;;		None
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;  ADC_Read        1    2[COMMON] unsigned char 
 14287 ;; Return value:  Size  Location     Type
 14288 ;;                  2    0[COMMON] unsigned int 
 14289 ;; Registers used:
 14290 ;;		wreg, status,2, status,0
 14291 ;; Tracked objects:
 14292 ;;		On entry : 1C/1
 14293 ;;		On exit  : 1F/1
 14294 ;;		Unchanged: FFFE0/0
 14295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14296 ;;      Params:         2       0       0       0       0       0       0       0
 14297 ;;      Locals:         1       0       0       0       0       0       0       0
 14298 ;;      Temps:          0       0       0       0       0       0       0       0
 14299 ;;      Totals:         3       0       0       0       0       0       0       0
 14300 ;;Total ram usage:        3 bytes
 14301 ;; Hardware stack levels used:    1
 14302 ;; This function calls:
 14303 ;;		Nothing
 14304 ;; This function is called by:
 14305 ;;		_interrrupt_bldc
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308  1F87                     i1_ADC_Read:	
 14309                           
 14310                           ;adc.c: 179: unsigned char i;
 14311                           ;adc.c: 180: i = 0;
 14312                           
 14313                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
 14314  1F87  01F2               	clrf	i1ADC_Read@i
 14315  1F88                     i1l1857:	
 14316                           ;adc.c: 182: while( GO_nDONE )
 14317                           
 14318  1F88  0021               	movlb	1	; select bank1
 14319  1F89  1C9D               	btfss	29,1
 14320  1F8A  2F90               	goto	i1l29013
 14321  1F8B  3041               	movlw	65
 14322                           
 14323                           ;adc.c: 184: {
 14324                           ;adc.c: 186: i++;
 14325  1F8C  0AF2               	incf	i1ADC_Read@i,f
 14326                           
 14327                           ;adc.c: 189: if( i > 64 )
 14328  1F8D  0272               	subwf	i1ADC_Read@i,w
 14329  1F8E  1C03               	skipc
 14330  1F8F  2F88               	goto	i1l1857
 14331  1F90                     i1l29013:	
 14332                           
 14333                           ;adc.c: 195: }
 14334                           ;adc.c: 198: }
 14335                           ;adc.c: 201: analog_value.b.hi = ADRESH;
 14336  1F90  081C               	movf	28,w	;volatile
 14337  1F91  00A9               	movwf	(_analog_value^(0+128)+1)	;volatile
 14338                           
 14339                           ;adc.c: 202: analog_value.b.lo = ADRESL;
 14340  1F92  081B               	movf	27,w	;volatile
 14341  1F93  00A8               	movwf	_analog_value^(0+128)	;volatile
 14342                           
 14343                           ;adc.c: 204: return analog_value.w;
 14344  1F94  0829               	movf	(_analog_value+1)^(0+128),w	;volatile
 14345  1F95  00F1               	movwf	?i1_ADC_Read+1
 14346  1F96  0828               	movf	_analog_value^(0+128),w	;volatile
 14347  1F97  00F0               	movwf	?i1_ADC_Read
 14348  1F98  0008               	return
 14349  1F99                     __end_ofi1_ADC_Read:	
 14350  1F99                     __ptext2084:	
 14351 ;; =============== function i1___lwdiv ends ============
 14352                           
 14353                           
 14354 ;; *************** function i1___wmul *****************
 14355 ;; Defined at:
 14356 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\wmul.c"
 14357 ;; Parameters:    Size  Location     Type
 14358 ;;  __wmul          2    0[COMMON] unsigned int 
 14359 ;;  __wmul          2    2[COMMON] unsigned int 
 14360 ;; Auto vars:     Size  Location     Type
 14361 ;;  __wmul          2    4[COMMON] unsigned int 
 14362 ;; Return value:  Size  Location     Type
 14363 ;;                  2    0[COMMON] unsigned int 
 14364 ;; Registers used:
 14365 ;;		wreg, status,2, status,0
 14366 ;; Tracked objects:
 14367 ;;		On entry : 1C/1
 14368 ;;		On exit  : 1C/1
 14369 ;;		Unchanged: FFFE3/0
 14370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14371 ;;      Params:         4       0       0       0       0       0       0       0
 14372 ;;      Locals:         2       0       0       0       0       0       0       0
 14373 ;;      Temps:          0       0       0       0       0       0       0       0
 14374 ;;      Totals:         6       0       0       0       0       0       0       0
 14375 ;;Total ram usage:        6 bytes
 14376 ;; Hardware stack levels used:    1
 14377 ;; This function calls:
 14378 ;;		Nothing
 14379 ;; This function is called by:
 14380 ;;		_interrrupt_bldc
 14381 ;;		i1_commutate
 14382 ;; This function uses a non-reentrant model
 14383 ;;
 14384  1F99                     i1___wmul:	
 14385                           
 14386                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 14387  1F99  01F4               	clrf	i1___wmul@product
 14388  1F9A  01F5               	clrf	i1___wmul@product+1
 14389  1F9B                     i1l29283:	
 14390  1F9B  1C70               	btfss	i1___wmul@multiplier,0
 14391  1F9C  2FA1               	goto	i1l29287
 14392  1F9D  0872               	movf	i1___wmul@multiplicand,w
 14393  1F9E  07F4               	addwf	i1___wmul@product,f
 14394  1F9F  0873               	movf	i1___wmul@multiplicand+1,w
 14395  1FA0  3DF5               	addwfc	i1___wmul@product+1,f
 14396  1FA1                     i1l29287:	
 14397  1FA1  35F2               	lslf	i1___wmul@multiplicand,f
 14398  1FA2  0DF3               	rlf	i1___wmul@multiplicand+1,f
 14399  1FA3  36F1               	lsrf	i1___wmul@multiplier+1,f
 14400  1FA4  0CF0               	rrf	i1___wmul@multiplier,f
 14401  1FA5  0871               	movf	i1___wmul@multiplier+1,w
 14402  1FA6  0470               	iorwf	i1___wmul@multiplier,w
 14403  1FA7  1D03               	skipz
 14404  1FA8  2F9B               	goto	i1l29283
 14405  1FA9  0875               	movf	i1___wmul@product+1,w
 14406  1FAA  00F1               	movwf	?i1___wmul+1
 14407  1FAB  0874               	movf	i1___wmul@product,w
 14408  1FAC  00F0               	movwf	?i1___wmul
 14409  1FAD  0008               	return
 14410  1FAE                     __end_ofi1___wmul:	
 14411  1FAE                     __ptext2083:	
 14412 ;; =============== function _BLDCWait ends ============
 14413                           
 14414                           
 14415 ;; *************** function i1___lwdiv *****************
 14416 ;; Defined at:
 14417 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.81\sources\lwdiv.c"
 14418 ;; Parameters:    Size  Location     Type
 14419 ;;  __lwdiv         2    0[COMMON] unsigned int 
 14420 ;;  __lwdiv         2    2[COMMON] unsigned int 
 14421 ;; Auto vars:     Size  Location     Type
 14422 ;;  __lwdiv         2    5[COMMON] unsigned int 
 14423 ;;  __lwdiv         1    4[COMMON] unsigned char 
 14424 ;; Return value:  Size  Location     Type
 14425 ;;                  2    0[COMMON] unsigned int 
 14426 ;; Registers used:
 14427 ;;		wreg, status,2, status,0
 14428 ;; Tracked objects:
 14429 ;;		On entry : 1F/0
 14430 ;;		On exit  : 1F/0
 14431 ;;		Unchanged: FFFE0/0
 14432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14433 ;;      Params:         4       0       0       0       0       0       0       0
 14434 ;;      Locals:         3       0       0       0       0       0       0       0
 14435 ;;      Temps:          0       0       0       0       0       0       0       0
 14436 ;;      Totals:         7       0       0       0       0       0       0       0
 14437 ;;Total ram usage:        7 bytes
 14438 ;; Hardware stack levels used:    1
 14439 ;; This function calls:
 14440 ;;		Nothing
 14441 ;; This function is called by:
 14442 ;;		_interrrupt_bldc
 14443 ;; This function uses a non-reentrant model
 14444 ;;
 14445  1FAE                     i1___lwdiv:	
 14446                           
 14447                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 14448  1FAE  01F5               	clrf	i1___lwdiv@quotient
 14449  1FAF  01F6               	clrf	i1___lwdiv@quotient+1
 14450  1FB0  0871               	movf	i1___lwdiv@divisor+1,w
 14451  1FB1  0470               	iorwf	i1___lwdiv@divisor,w
 14452  1FB2  1903               	skipnz
 14453  1FB3  2FCE               	goto	i1l29319
 14454  1FB4  01F4               	clrf	i1___lwdiv@counter
 14455  1FB5                     L68:	
 14456  1FB5  0AF4               	incf	i1___lwdiv@counter,f
 14457  1FB6  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 14458  1FB7  2FBB               	goto	i1l29307
 14459  1FB8  35F0               	lslf	i1___lwdiv@divisor,f
 14460  1FB9  0DF1               	rlf	i1___lwdiv@divisor+1,f
 14461  1FBA  2FB5               	goto	L68
 14462  1FBB                     i1l29307:	
 14463  1FBB  35F5               	lslf	i1___lwdiv@quotient,f
 14464  1FBC  0DF6               	rlf	i1___lwdiv@quotient+1,f
 14465  1FBD  0871               	movf	i1___lwdiv@divisor+1,w
 14466  1FBE  0273               	subwf	i1___lwdiv@dividend+1,w
 14467  1FBF  1D03               	skipz
 14468  1FC0  2FC3               	goto	u944_25
 14469  1FC1  0870               	movf	i1___lwdiv@divisor,w
 14470  1FC2  0272               	subwf	i1___lwdiv@dividend,w
 14471  1FC3                     u944_25:	
 14472  1FC3  1C03               	skipc
 14473  1FC4  2FCA               	goto	i1l29315
 14474  1FC5  0870               	movf	i1___lwdiv@divisor,w
 14475  1FC6  02F2               	subwf	i1___lwdiv@dividend,f
 14476  1FC7  0871               	movf	i1___lwdiv@divisor+1,w
 14477  1FC8  3BF3               	subwfb	i1___lwdiv@dividend+1,f
 14478  1FC9  1475               	bsf	i1___lwdiv@quotient,0
 14479  1FCA                     i1l29315:	
 14480  1FCA  36F1               	lsrf	i1___lwdiv@divisor+1,f
 14481  1FCB  0CF0               	rrf	i1___lwdiv@divisor,f
 14482  1FCC  0BF4               	decfsz	i1___lwdiv@counter,f
 14483  1FCD  2FBB               	goto	i1l29307
 14484  1FCE                     i1l29319:	
 14485  1FCE  0876               	movf	i1___lwdiv@quotient+1,w
 14486  1FCF  00F1               	movwf	?i1___lwdiv+1
 14487  1FD0  0875               	movf	i1___lwdiv@quotient,w
 14488  1FD1  00F0               	movwf	?i1___lwdiv
 14489  1FD2  0008               	return
 14490  1FD3                     __end_ofi1___lwdiv:	
 14491  1FD3                     __ptext2082:	
 14492 ;; =============== function _ELINMIntHandler ends ============
 14493                           
 14494                           
 14495 ;; *************** function _BLDCWait *****************
 14496 ;; Defined at:
 14497 ;;		line 158 in file "../bldc.c"
 14498 ;; Parameters:    Size  Location     Type
 14499 ;;		None
 14500 ;; Auto vars:     Size  Location     Type
 14501 ;;		None
 14502 ;; Return value:  Size  Location     Type
 14503 ;;		None               void
 14504 ;; Registers used:
 14505 ;;		None
 14506 ;; Tracked objects:
 14507 ;;		On entry : 1E/1
 14508 ;;		On exit  : 0/0
 14509 ;;		Unchanged: 0/0
 14510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14511 ;;      Params:         0       0       0       0       0       0       0       0
 14512 ;;      Locals:         0       0       0       0       0       0       0       0
 14513 ;;      Temps:          0       0       0       0       0       0       0       0
 14514 ;;      Totals:         0       0       0       0       0       0       0       0
 14515 ;;Total ram usage:        0 bytes
 14516 ;; Hardware stack levels used:    1
 14517 ;; This function calls:
 14518 ;;		Nothing
 14519 ;; This function is called by:
 14520 ;;		_interrrupt_bldc
 14521 ;; This function uses a non-reentrant model
 14522 ;;
 14523  1FD3                     _BLDCWait:	
 14524                           
 14525                           ;bldc.c: 161: _nop();
 14526                           
 14527                           ; Regs used in _BLDCWait: []
 14528  1FD3  0000               	nop
 14529                           
 14530                           ;bldc.c: 162: _nop();
 14531  1FD4  0000               	nop
 14532                           
 14533                           ;bldc.c: 163: _nop();
 14534  1FD5  0000               	nop
 14535                           
 14536                           ;bldc.c: 164: _nop();
 14537  1FD6  0000               	nop
 14538                           
 14539                           ;bldc.c: 165: _nop();
 14540  1FD7  0000               	nop
 14541                           
 14542                           ;bldc.c: 166: _nop();
 14543  1FD8  0000               	nop
 14544                           
 14545                           ;bldc.c: 167: _nop();
 14546  1FD9  0000               	nop
 14547                           
 14548                           ;bldc.c: 168: _nop();
 14549  1FDA  0000               	nop
 14550                           
 14551                           ;bldc.c: 170: _nop();
 14552  1FDB  0000               	nop
 14553                           
 14554                           ;bldc.c: 171: _nop();
 14555  1FDC  0000               	nop
 14556                           
 14557                           ;bldc.c: 172: _nop();
 14558  1FDD  0000               	nop
 14559                           
 14560                           ;bldc.c: 173: _nop();
 14561  1FDE  0000               	nop
 14562                           
 14563                           ;bldc.c: 174: _nop();
 14564  1FDF  0000               	nop
 14565                           
 14566                           ;bldc.c: 175: _nop();
 14567  1FE0  0000               	nop
 14568                           
 14569                           ;bldc.c: 176: _nop();
 14570  1FE1  0000               	nop
 14571                           
 14572                           ;bldc.c: 177: _nop();
 14573  1FE2  0000               	nop
 14574                           
 14575                           ;bldc.c: 179: _nop();
 14576  1FE3  0000               	nop
 14577                           
 14578                           ;bldc.c: 180: _nop();
 14579  1FE4  0000               	nop
 14580                           
 14581                           ;bldc.c: 181: _nop();
 14582  1FE5  0000               	nop
 14583                           
 14584                           ;bldc.c: 182: _nop();
 14585  1FE6  0000               	nop
 14586                           
 14587                           ;bldc.c: 183: _nop();
 14588  1FE7  0000               	nop
 14589                           
 14590                           ;bldc.c: 184: _nop();
 14591  1FE8  0000               	nop
 14592                           
 14593                           ;bldc.c: 185: _nop();
 14594  1FE9  0000               	nop
 14595                           
 14596                           ;bldc.c: 186: _nop();
 14597  1FEA  0000               	nop
 14598                           
 14599                           ;bldc.c: 188: _nop();
 14600  1FEB  0000               	nop
 14601                           
 14602                           ;bldc.c: 189: _nop();
 14603  1FEC  0000               	nop
 14604                           
 14605                           ;bldc.c: 190: _nop();
 14606  1FED  0000               	nop
 14607                           
 14608                           ;bldc.c: 191: _nop();
 14609  1FEE  0000               	nop
 14610                           
 14611                           ;bldc.c: 192: _nop();
 14612  1FEF  0000               	nop
 14613                           
 14614                           ;bldc.c: 193: _nop();
 14615  1FF0  0000               	nop
 14616                           
 14617                           ;bldc.c: 194: _nop();
 14618  1FF1  0000               	nop
 14619                           
 14620                           ;bldc.c: 195: _nop();
 14621  1FF2  0000               	nop
 14622  1FF3  0008               	return
 14623  1FF4                     __end_of_BLDCWait:	
 14624  1FF4                     PL17:	
 14625  1FF4  00F7               	movwf	??_interrrupt_bldc
 14626  1FF5  01F8               	clrf	??_interrrupt_bldc+1
 14627  1FF6  0021               	movlb	1	; select bank1
 14628  1FF7  0831               	movf	(_ui16_IPhase_bldc+1)^(0+128),w	;volatile
 14629  1FF8  0278               	subwf	??_interrrupt_bldc+1,w
 14630  1FF9  1D03               	skipz
 14631  1FFA  0008               	return
 14632  1FFB  0830               	movf	_ui16_IPhase_bldc^(0+128),w	;volatile
 14633  1FFC  0277               	subwf	??_interrrupt_bldc,w
 14634  1FFD  0008               	return
 14635                           
 14636                           	psect	swtext3
 14637  00A6                     __pswtext3:	
 14638  00A6                     i1S31601:	
 14639  00A6  319D  2DF7         	ljmp	i1l28371
 14640  00A8  319E  2E0F         	ljmp	i1l28383
 14641  00AA  319E  2E2A         	ljmp	i1l28423
 14642  00AC  319E  2E5B         	ljmp	i1l28461
 14643  00AE  319E  2E0C         	ljmp	i1l28381
 14644  00B0  319E  2E0C         	ljmp	i1l28381
 14645  00B2  319E  2E0C         	ljmp	i1l28381
 14646  00B4  319E  2E6E         	ljmp	i1l3818
 14647  00B6  319E  2E74         	ljmp	i1l28495
 14648  00B8  319F  2F13         	ljmp	i1l3801
 14649                           
 14650                           	psect	text2079
 14651  1BE5                     __ptext2079:	
 14652 ;; =============== function _interrrupt_bldc ends ============
 14653                           
 14654                           
 14655 ;; *************** function i1_commutate *****************
 14656 ;; Defined at:
 14657 ;;		line 1429 in file "../bldc.c"
 14658 ;; Parameters:    Size  Location     Type
 14659 ;;		None
 14660 ;; Auto vars:     Size  Location     Type
 14661 ;;		None
 14662 ;; Return value:  Size  Location     Type
 14663 ;;		None               void
 14664 ;; Registers used:
 14665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14666 ;; Tracked objects:
 14667 ;;		On entry : 1E/1
 14668 ;;		On exit  : 1F/0
 14669 ;;		Unchanged: FFFE0/0
 14670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14671 ;;      Params:         0       0       0       0       0       0       0       0
 14672 ;;      Locals:         0       0       0       0       0       0       0       0
 14673 ;;      Temps:          0      12       0       0       0       0       0       0
 14674 ;;      Totals:         0      12       0       0       0       0       0       0
 14675 ;;Total ram usage:       12 bytes
 14676 ;; Hardware stack levels used:    1
 14677 ;; Hardware stack levels required when called:    1
 14678 ;; This function calls:
 14679 ;;		i1___wmul
 14680 ;; This function is called by:
 14681 ;;		_interrrupt_bldc
 14682 ;; This function uses a non-reentrant model
 14683 ;;
 14684  1BE5                     i1_commutate:	
 14685                           
 14686                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 14687                           
 14688                           ; Regs used in i1_commutate: [wreg-status,0+pclath+cstack]
 14689  1BE5  3000               	movlw	0
 14690  1BE6  0021               	movlb	1	; select bank1
 14691  1BE7  023F               	subwf	(_ui16_step_cnt+1)^(0+128),w
 14692  1BE8  300A               	movlw	10
 14693  1BE9  1903               	skipnz
 14694  1BEA  023E               	subwf	_ui16_step_cnt^(0+128),w
 14695  1BEB  1803               	skipnc
 14696  1BEC  2BF0               	goto	i1l29021
 14697                           
 14698                           ;bldc.c: 1433: {
 14699                           ;bldc.c: 1435: ui16_step_cnt++;
 14700  1BED  0ABE               	incf	_ui16_step_cnt^(0+128),f
 14701  1BEE  1903               	skipnz
 14702  1BEF  0ABF               	incf	(_ui16_step_cnt+1)^(0+128),f
 14703  1BF0                     i1l29021:	
 14704                           
 14705                           ;bldc.c: 1437: }
 14706                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 14707  1BF0  3548               	lslf	_Bcnt^(0+128),w
 14708  1BF1  3EA0               	addlw	_B& (0+255)
 14709  1BF2  0086               	movwf	6
 14710  1BF3  3001               	movlw	1	; select bank3/4
 14711  1BF4  0087               	movwf	7
 14712  1BF5  0020               	movlb	0	; select bank0
 14713  1BF6  0848               	movf	_comm_time,w
 14714  1BF7  3FC0               	movwi [0]fsr1
 14715  1BF8  0849               	movf	_comm_time+1,w
 14716  1BF9  3FC1               	movwi [1]fsr1
 14717  1BFA  0021               	movlb	1	; select bank1
 14718  1BFB  3007               	movlw	7
 14719  1BFC  0AC8               	incf	_Bcnt^(0+128),f
 14720                           
 14721                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 14722  1BFD  05C8               	andwf	_Bcnt^(0+128),f
 14723                           
 14724                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 14725  1BFE  30AE               	movlw	(_B& (0+255)+14)
 14726  1BFF  0086               	movwf	6
 14727  1C00  30AC               	movlw	(_B& (0+255)+12)
 14728  1C01  0084               	movwf	4
 14729  1C02  3001               	movlw	1	; select bank3/4
 14730  1C03  0085               	movwf	5
 14731  1C04  0023               	movlb	3	; select bank3
 14732  1C05  0824               	movf	(_B^(0+384)+4),w
 14733  1C06  0722               	addwf	(_B^(0+384)+2),w
 14734  1C07  0020               	movlb	0	; select bank0
 14735  1C08  00A0               	movwf	??i1_commutate
 14736  1C09  0023               	movlb	3	; select bank3
 14737  1C0A  0825               	movf	((_B+1)^(0+384)+4),w
 14738  1C0B  3D23               	addwfc	((_B+1)^(0+384)+2),w
 14739  1C0C  0020               	movlb	0	; select bank0
 14740  1C0D  00A1               	movwf	??i1_commutate+1
 14741  1C0E  0023               	movlb	3	; select bank3
 14742  1C0F  0826               	movf	(_B^(0+384)+6),w
 14743  1C10  0020               	movlb	0	; select bank0
 14744  1C11  0720               	addwf	??i1_commutate,w
 14745  1C12  00A2               	movwf	??i1_commutate+2
 14746  1C13  0023               	movlb	3	; select bank3
 14747  1C14  0827               	movf	((_B+1)^(0+384)+6),w
 14748  1C15  0020               	movlb	0	; select bank0
 14749  1C16  3D21               	addwfc	??i1_commutate+1,w
 14750  1C17  00A3               	movwf	??i1_commutate+3
 14751  1C18  0023               	movlb	3	; select bank3
 14752  1C19  0828               	movf	(_B^(0+384)+8),w
 14753  1C1A  0020               	movlb	0	; select bank0
 14754  1C1B  0722               	addwf	??i1_commutate+2,w
 14755  1C1C  00A4               	movwf	??i1_commutate+4
 14756  1C1D  0023               	movlb	3	; select bank3
 14757  1C1E  0829               	movf	((_B+1)^(0+384)+8),w
 14758  1C1F  0020               	movlb	0	; select bank0
 14759  1C20  3D23               	addwfc	??i1_commutate+3,w
 14760  1C21  00A5               	movwf	??i1_commutate+5
 14761  1C22  0023               	movlb	3	; select bank3
 14762  1C23  082A               	movf	(_B^(0+384)+10),w
 14763  1C24  0020               	movlb	0	; select bank0
 14764  1C25  0724               	addwf	??i1_commutate+4,w
 14765  1C26  00A6               	movwf	??i1_commutate+6
 14766  1C27  0023               	movlb	3	; select bank3
 14767  1C28  082B               	movf	((_B+1)^(0+384)+10),w
 14768  1C29  0020               	movlb	0	; select bank0
 14769  1C2A  3D25               	addwfc	??i1_commutate+5,w
 14770  1C2B  00A7               	movwf	??i1_commutate+7
 14771  1C2C  3F00               	moviw [0]fsr0
 14772  1C2D  0726               	addwf	??i1_commutate+6,w
 14773  1C2E  00A8               	movwf	??i1_commutate+8
 14774  1C2F  3F01               	moviw [1]fsr0
 14775  1C30  3D27               	addwfc	??i1_commutate+7,w
 14776  1C31  00A9               	movwf	??i1_commutate+9
 14777  1C32  3F40               	moviw [0]fsr1
 14778  1C33  0728               	addwf	??i1_commutate+8,w
 14779  1C34  00AA               	movwf	??i1_commutate+10
 14780  1C35  3F41               	moviw [1]fsr1
 14781  1C36  3D29               	addwfc	??i1_commutate+9,w
 14782  1C37  00AB               	movwf	??i1_commutate+11
 14783  1C38  0023               	movlb	3	; select bank3
 14784  1C39  0820               	movf	_B^(0+384),w
 14785  1C3A  0020               	movlb	0	; select bank0
 14786  1C3B  072A               	addwf	??i1_commutate+10,w
 14787  1C3C  0021               	movlb	1	; select bank1
 14788  1C3D  00BC               	movwf	_ui16_speed_fil^(0+128)
 14789  1C3E  0023               	movlb	3	; select bank3
 14790  1C3F  0821               	movf	(_B+1)^(0+384),w
 14791  1C40  0020               	movlb	0	; select bank0
 14792  1C41  3D2B               	addwfc	??i1_commutate+11,w
 14793  1C42  0021               	movlb	1	; select bank1
 14794  1C43  00BD               	movwf	(_ui16_speed_fil+1)^(0+128)
 14795                           
 14796                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 14797  1C44  0020               	movlb	0	; select bank0
 14798  1C45  0849               	movf	_comm_time+1,w
 14799  1C46  0022               	movlb	2	; select bank2
 14800  1C47  00B4               	movwf	(_ui16_speed_rar+1)^(0+256)
 14801  1C48  0020               	movlb	0	; select bank0
 14802  1C49  0848               	movf	_comm_time,w
 14803  1C4A  0022               	movlb	2	; select bank2
 14804  1C4B  00B3               	movwf	_ui16_speed_rar^(0+256)
 14805                           
 14806                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 14807  1C4C  0020               	movlb	0	; select bank0
 14808  1C4D  12CB               	bcf	_MotorFlags,5
 14809                           
 14810                           ;bldc.c: 1455: bemf_filter = 62;
 14811  1C4E  0022               	movlb	2	; select bank2
 14812  1C4F  01E0               	clrf	_ui8_sampleState^(0+256)
 14813  1C50  0AE0               	incf	_ui8_sampleState^(0+256),f
 14814                           
 14815                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 14816  1C51  0020               	movlb	0	; select bank0
 14817  1C52  17CB               	bsf	_MotorFlags,7
 14818                           
 14819                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 14820  1C53  1DCB               	btfss	_MotorFlags,3
 14821  1C54  2CBF               	goto	i1l3861
 14822                           
 14823                           ;bldc.c: 1463: {
 14824                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 100 )>>7;
 14825  1C55  0022               	movlb	2	; select bank2
 14826  1C56  0834               	movf	(_ui16_speed_rar+1)^(0+256),w
 14827  1C57  00F1               	movwf	?i1___wmul+1
 14828  1C58  0833               	movf	_ui16_speed_rar^(0+256),w
 14829  1C59  00F0               	movwf	?i1___wmul
 14830  1C5A  3064               	movlw	100
 14831  1C5B  36F1               	lsrf	?i1___wmul+1,f
 14832  1C5C  0CF0               	rrf	?i1___wmul,f
 14833  1C5D  36F1               	lsrf	?i1___wmul+1,f
 14834  1C5E  0CF0               	rrf	?i1___wmul,f
 14835  1C5F  36F1               	lsrf	?i1___wmul+1,f
 14836  1C60  0CF0               	rrf	?i1___wmul,f
 14837  1C61  00F2               	movwf	?i1___wmul+2
 14838  1C62  01F3               	clrf	?i1___wmul+3
 14839  1C63  319F  2799  319B   	fcall	i1___wmul
 14840  1C66  0871               	movf	?i1___wmul+1,w
 14841  1C67  0021               	movlb	1	; select bank1
 14842  1C68  00BB               	movwf	(_ui16_phase_advancement+1)^(0+128)
 14843  1C69  0870               	movf	?i1___wmul,w
 14844  1C6A  00BA               	movwf	_ui16_phase_advancement^(0+128)
 14845  1C6B  3007               	movlw	7
 14846  1C6C                     u923_25:	
 14847  1C6C  36BB               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 14848  1C6D  0CBA               	rrf	_ui16_phase_advancement^(0+128),f
 14849  1C6E  0B89               	decfsz	9,f
 14850  1C6F  2C6C               	goto	u923_25
 14851                           
 14852                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 14853  1C70  0020               	movlb	0	; select bank0
 14854  1C71  0849               	movf	_comm_time+1,w
 14855  1C72  0021               	movlb	1	; select bank1
 14856  1C73  023B               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 14857  1C74  1D03               	skipz
 14858  1C75  2C7A               	goto	u924_25
 14859  1C76  0020               	movlb	0	; select bank0
 14860  1C77  0848               	movf	_comm_time,w
 14861  1C78  0021               	movlb	1	; select bank1
 14862  1C79  023A               	subwf	_ui16_phase_advancement^(0+128),w
 14863  1C7A                     u924_25:	
 14864  1C7A  1803               	skipnc
 14865  1C7B  2C89               	goto	i1l29047
 14866                           
 14867                           ;bldc.c: 1474: {
 14868                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
 14869  1C7C  0020               	movlb	0	; select bank0
 14870  1C7D  3187  2791  319B   	fcall	PL18	;call to abstracted procedure
 14871  1C80  0021               	movlb	1	; select bank1
 14872  1C81  083A               	movf	_ui16_phase_advancement^(0+128),w
 14873  1C82  0023               	movlb	3	; select bank3
 14874  1C83  02D0               	subwf	_phase_delay_counter^(0+384),f
 14875  1C84  0021               	movlb	1	; select bank1
 14876  1C85  083B               	movf	(_ui16_phase_advancement+1)^(0+128),w
 14877  1C86  0023               	movlb	3	; select bank3
 14878  1C87  3BD1               	subwfb	(_phase_delay_counter+1)^(0+384),f
 14879                           
 14880                           ;bldc.c: 1478: }
 14881  1C88  2C9E               	goto	i1l29071
 14882  1C89                     i1l29047:	
 14883                           
 14884                           ;bldc.c: 1481: else
 14885                           ;bldc.c: 1482: {
 14886                           ;bldc.c: 1484: phase_delay_counter = 0;
 14887  1C89  0023               	movlb	3	; select bank3
 14888  1C8A  01D0               	clrf	_phase_delay_counter^(0+384)
 14889  1C8B  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 14890  1C8C  2C9E               	goto	i1l29071
 14891  1C8D                     i1l29049:	
 14892                           
 14893                           ;bldc.c: 1514: {
 14894                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
 14895  1C8D  30A6               	movlw	166
 14896  1C8E  2C9B               	goto	L58
 14897  1C8F                     i1l29051:	
 14898                           ;bldc.c: 1517: break;
 14899                           
 14900                           
 14901                           ;bldc.c: 1524: {
 14902                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
 14903  1C8F  30F4               	movlw	244
 14904  1C90  00B6               	movwf	_ui16_comm_time_max^(0+128)
 14905  1C91  3001               	movlw	1
 14906  1C92  00B7               	movwf	(_ui16_comm_time_max^(0+128)+1)
 14907                           
 14908                           ;bldc.c: 1527: break;
 14909  1C93  2CAE               	goto	i1l29073
 14910  1C94                     i1l29053:	
 14911                           
 14912                           ;bldc.c: 1534: {
 14913                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
 14914  1C94  307D               	movlw	125
 14915  1C95  2C9B               	goto	L58
 14916  1C96                     i1l29055:	
 14917                           ;bldc.c: 1537: break;
 14918                           
 14919                           
 14920                           ;bldc.c: 1544: {
 14921                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
 14922  1C96  3053               	movlw	83
 14923  1C97  2C9B               	goto	L58
 14924  1C98                     i1l29057:	
 14925                           ;bldc.c: 1547: break;
 14926                           
 14927                           
 14928                           ;bldc.c: 1554: {
 14929                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2400 * 2 )
      +                           ) ;
 14930  1C98  3029               	movlw	41
 14931  1C99  2C9B               	goto	L58
 14932  1C9A                     i1l29059:	
 14933                           ;bldc.c: 1557: break;
 14934                           
 14935                           
 14936                           ;bldc.c: 1564: {
 14937                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           ) ;
 14938  1C9A  3021               	movlw	33
 14939  1C9B                     L58:	
 14940  1C9B  00B6               	movwf	_ui16_comm_time_max^(0+128)
 14941  1C9C  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 14942                           
 14943                           ;bldc.c: 1567: break;
 14944  1C9D  2CAE               	goto	i1l29073
 14945  1C9E                     i1l29071:	
 14946                           
 14947                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14948                           ; Switch size 1, requested type "space"
 14949                           ; Number of cases is 1, Range of values is 0 to 0
 14950                           ; switch strategies available:
 14951                           ; Name         Instructions Cycles
 14952                           ; simple_byte            4     3 (average)
 14953                           ; direct_byte            8     6 (fixed)
 14954                           ; jumptable            260     6 (fixed)
 14955                           ; rangetable             5     4 (fixed)
 14956                           ; spacedrange            7     6 (fixed)
 14957                           ; locatedrange           1     3 (fixed)
 14958                           ;	Chosen strategy is simple_byte
 14959  1C9E  0021               	movlb	1	; select bank1
 14960  1C9F  083F               	movf	(_ui16_step_cnt+1)^(0+128),w
 14961  1CA0  3A00               	xorlw	0	; case 0
 14962  1CA1  1903               	skipnz
 14963  1CA2  2CA4               	goto	i1l31603
 14964  1CA3  2C9A               	goto	i1l29059
 14965  1CA4                     i1l31603:	
 14966                           
 14967                           ; Switch size 1, requested type "space"
 14968                           ; Number of cases is 10, Range of values is 0 to 9
 14969                           ; switch strategies available:
 14970                           ; Name         Instructions Cycles
 14971                           ; direct_byte           26     6 (fixed)
 14972                           ; simple_byte           31    16 (average)
 14973                           ; jumptable            260     6 (fixed)
 14974                           ; rangetable            14     4 (fixed)
 14975                           ; spacedrange           25     6 (fixed)
 14976                           ; locatedrange          10     3 (fixed)
 14977                           ;	Chosen strategy is direct_byte
 14978  1CA4  083E               	movf	_ui16_step_cnt^(0+128),w
 14979  1CA5  0084               	movwf	4
 14980  1CA6  300A               	movlw	10
 14981  1CA7  0204               	subwf	4,w
 14982  1CA8  1803               	skipnc
 14983  1CA9  2C9A               	goto	i1l29059
 14984  1CAA  3180               	movlp	high i1S31605
 14985  1CAB  3504               	lslf	4,w
 14986  1CAC  3EBA               	addlw	low i1S31605
 14987  1CAD  0082               	movwf	2
 14988  1CAE                     i1l29073:	
 14989                           
 14990                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 *
      +                           2 ) ) )
 14991  1CAE  3000               	movlw	0
 14992  1CAF  0237               	subwf	(_ui16_comm_time_max+1)^(0+128),w
 14993  1CB0  3021               	movlw	33
 14994  1CB1  1903               	skipnz
 14995  1CB2  0236               	subwf	_ui16_comm_time_max^(0+128),w
 14996  1CB3  1803               	skipnc
 14997  1CB4  2CB8               	goto	i1l29077
 14998                           
 14999                           ;bldc.c: 1626: {
 15000                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
 15001  1CB5  3021               	movlw	33
 15002  1CB6  00B6               	movwf	_ui16_comm_time_max^(0+128)
 15003  1CB7  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 15004  1CB8                     i1l29077:	
 15005                           
 15006                           ;bldc.c: 1630: }
 15007                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
 15008  1CB8  0020               	movlb	0	; select bank0
 15009  1CB9  1E4B               	btfss	_MotorFlags,4
 15010  1CBA  2CF5               	goto	i1l3879
 15011                           
 15012                           ;bldc.c: 1636: {
 15013                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
 15014  1CBB  300A               	movlw	10
 15015  1CBC  0021               	movlb	1	; select bank1
 15016  1CBD  00E0               	movwf	_ui8_StartupPWM^(0+128)
 15017                           
 15018                           ;bldc.c: 1641: }
 15019                           ;bldc.c: 1644: }
 15020  1CBE  2CF5               	goto	i1l3879
 15021  1CBF                     i1l3861:	
 15022                           
 15023                           ;bldc.c: 1647: else
 15024                           ;bldc.c: 1648: {
 15025                           ;bldc.c: 1652: if( rising_bemf_flag)
 15026  1CBF  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15027  1CC0  2CC5               	goto	i1l29083
 15028                           
 15029                           ;bldc.c: 1654: {
 15030                           ;bldc.c: 1657: phase_delay_counter = 0;
 15031  1CC1  0023               	movlb	3	; select bank3
 15032  1CC2  01D0               	clrf	_phase_delay_counter^(0+384)
 15033  1CC3  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 15034                           
 15035                           ;bldc.c: 1659: }
 15036  1CC4  2CCA               	goto	i1l29087
 15037  1CC5                     i1l29083:	
 15038                           
 15039                           ;bldc.c: 1662: else
 15040                           ;bldc.c: 1663: {
 15041                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 15042  1CC5  3187  2791  319B   	fcall	PL18	;call to abstracted procedure
 15043  1CC8  36D1               	lsrf	(_phase_delay_counter+1)^(0+384),f
 15044  1CC9  0CD0               	rrf	_phase_delay_counter^(0+384),f
 15045  1CCA                     i1l29087:	
 15046  1CCA  3021               	movlw	33
 15047                           
 15048                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 15049  1CCB  01D0               	clrf	_phase_delay_counter^(0+384)
 15050  1CCC  01D1               	clrf	(_phase_delay_counter+1)^(0+384)
 15051                           
 15052                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 3000 * 2 )
      +                           );
 15053  1CCD  0021               	movlb	1	; select bank1
 15054  1CCE  00B6               	movwf	_ui16_comm_time_max^(0+128)
 15055  1CCF  01B7               	clrf	(_ui16_comm_time_max+1)^(0+128)
 15056                           
 15057                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 15058  1CD0  0020               	movlb	0	; select bank0
 15059  1CD1  1F4B               	btfss	_MotorFlags,6
 15060  1CD2  2CF3               	goto	i1l29111
 15061                           
 15062                           ;bldc.c: 1693: {
 15063                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
 15064  1CD3  0025               	movlb	5	; select bank5
 15065  1CD4  0811               	movf	17,w	;volatile
 15066  1CD5  0020               	movlb	0	; select bank0
 15067  1CD6  0650               	xorwf	_ui8_duty_cycle_BLDC,w
 15068  1CD7  1903               	btfsc	3,2
 15069  1CD8  2CF5               	goto	i1l3879
 15070                           
 15071                           ;bldc.c: 1706: else
 15072                           ;bldc.c: 1707: {
 15073                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
 15074  1CD9  0025               	movlb	5	; select bank5
 15075  1CDA  0811               	movf	17,w	;volatile
 15076  1CDB  0020               	movlb	0	; select bank0
 15077  1CDC  0250               	subwf	_ui8_duty_cycle_BLDC,w
 15078  1CDD  1803               	skipnc
 15079  1CDE  2CE9               	goto	i1l29105
 15080                           
 15081                           ;bldc.c: 1712: {
 15082                           ;bldc.c: 1714: CCPR1L--;
 15083  1CDF  0025               	movlb	5	; select bank5
 15084  1CE0  0391               	decf	17,f	;volatile
 15085                           
 15086                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
 15087  1CE1  0811               	movf	17,w	;volatile
 15088  1CE2  0020               	movlb	0	; select bank0
 15089  1CE3  0250               	subwf	_ui8_duty_cycle_BLDC,w
 15090  1CE4  1803               	skipnc
 15091  1CE5  2CF5               	goto	i1l3879
 15092                           
 15093                           ;bldc.c: 1718: {
 15094                           ;bldc.c: 1720: CCPR1L--;
 15095  1CE6  0025               	movlb	5	; select bank5
 15096  1CE7  0391               	decf	17,f	;volatile
 15097  1CE8  2CF5               	goto	i1l3879
 15098  1CE9                     i1l29105:	
 15099                           
 15100                           ;bldc.c: 1728: else
 15101                           ;bldc.c: 1729: {
 15102                           ;bldc.c: 1731: CCPR1L++;
 15103  1CE9  0025               	movlb	5	; select bank5
 15104  1CEA  0A91               	incf	17,f	;volatile
 15105                           
 15106                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
 15107  1CEB  0020               	movlb	0	; select bank0
 15108  1CEC  0850               	movf	_ui8_duty_cycle_BLDC,w
 15109  1CED  0025               	movlb	5	; select bank5
 15110  1CEE  0211               	subwf	17,w	;volatile
 15111  1CEF  1803               	skipnc
 15112  1CF0  2CF5               	goto	i1l3879
 15113                           
 15114                           ;bldc.c: 1735: {
 15115                           ;bldc.c: 1737: CCPR1L++;
 15116  1CF1  0A91               	incf	17,f	;volatile
 15117  1CF2  2CF5               	goto	i1l3879
 15118  1CF3                     i1l29111:	
 15119                           
 15120                           ;bldc.c: 1768: else
 15121                           ;bldc.c: 1769: {
 15122                           ;bldc.c: 1771: CCPR1L = 0;
 15123  1CF3  0025               	movlb	5	; select bank5
 15124  1CF4  0191               	clrf	17	;volatile
 15125  1CF5                     i1l3879:	
 15126                           
 15127                           ;bldc.c: 1773: }
 15128                           ;bldc.c: 1777: }
 15129                           ;bldc.c: 1780: comm_time = 0;
 15130  1CF5  0020               	movlb	0	; select bank0
 15131  1CF6  01C8               	clrf	_comm_time
 15132  1CF7  01C9               	clrf	_comm_time+1
 15133                           
 15134                           ;bldc.c: 1784: if( comm_state == 0xff )
 15135  1CF8  0021               	movlb	1	; select bank1
 15136  1CF9  0859               	movf	_comm_state^(0+128),w
 15137  1CFA  3AFF               	xorlw	255
 15138  1CFB  1D03               	skipz
 15139  1CFC  2DAE               	goto	i1l29261
 15140                           
 15141                           ;bldc.c: 1786: {
 15142                           ;bldc.c: 1788: comm_state = 6;
 15143  1CFD  3006               	movlw	6
 15144  1CFE  00D9               	movwf	_comm_state^(0+128)
 15145  1CFF  2DAE               	goto	i1l29261
 15146  1D00                     i1l29117:	
 15147                           
 15148                           ;bldc.c: 1800: {
 15149                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
 15150  1D00  3001               	movlw	1
 15151  1D01  0025               	movlb	5	; select bank5
 15152  1D02  0096               	movwf	22	;volatile
 15153                           
 15154                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
 15155  1D03  0020               	movlb	0	; select bank0
 15156  1D04  1F4B               	btfss	_MotorFlags,6
 15157  1D05  2D0A               	goto	i1l29123
 15158                           
 15159                           ;bldc.c: 1811: {
 15160                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 15161  1D06  0022               	movlb	2	; select bank2
 15162  1D07  3187  27A4  319B   	fcall	PL43	;call to abstracted procedure
 15163  1D0A                     i1l29123:	
 15164                           
 15165                           ;bldc.c: 1815: }
 15166                           ;bldc.c: 1819: LATB2 = 0;
 15167  1D0A  0022               	movlb	2	; select bank2
 15168  1D0B  3009               	movlw	9
 15169  1D0C  110D               	bcf	13,2
 15170                           
 15171                           ;bldc.c: 1820: LATB1 = 0;
 15172  1D0D  108D               	bcf	13,1
 15173                           
 15174                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 15175  1D0E  0021               	movlb	1	; select bank1
 15176  1D0F  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15177  1D10  3025               	movlw	37
 15178                           
 15179                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 15180  1D11  01E3               	clrf	_ui8_UPhase_sel^(0+128)
 15181  1D12  0AE3               	incf	_ui8_UPhase_sel^(0+128),f
 15182                           
 15183                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 15184  1D13  0022               	movlb	2	; select bank2
 15185  1D14  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 15186                           
 15187                           ;bldc.c: 1824: CM1CON1 = 0x02;
 15188  1D15  3002               	movlw	2
 15189  1D16  0092               	movwf	18	;volatile
 15190                           
 15191                           ;bldc.c: 1837: CM1CON0 = 0x84;
 15192  1D17  3084               	movlw	132
 15193  1D18  0091               	movwf	17	;volatile
 15194                           
 15195                           ;bldc.c: 1838: rising_bemf_flag = 1;
 15196  1D19  0020               	movlb	0	; select bank0
 15197  1D1A  3006               	movlw	6
 15198  1D1B  2D8B               	goto	L64
 15199  1D1C                     i1l29141:	
 15200                           ;bldc.c: 1845: break;
 15201                           
 15202                           ;bldc.c: 1839: comm_state = 6;
 15203                           
 15204                           
 15205                           ;bldc.c: 1855: {
 15206                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
 15207  1D1C  3001               	movlw	1
 15208  1D1D  0025               	movlb	5	; select bank5
 15209  1D1E  0096               	movwf	22	;volatile
 15210                           
 15211                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
 15212  1D1F  0020               	movlb	0	; select bank0
 15213  1D20  1F4B               	btfss	_MotorFlags,6
 15214  1D21  2D26               	goto	i1l29147
 15215                           
 15216                           ;bldc.c: 1865: {
 15217                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 15218  1D22  0022               	movlb	2	; select bank2
 15219  1D23  3187  27A9  319B   	fcall	PL44	;call to abstracted procedure
 15220  1D26                     i1l29147:	
 15221                           
 15222                           ;bldc.c: 1869: }
 15223                           ;bldc.c: 1873: LATB2 = 1;
 15224  1D26  0022               	movlb	2	; select bank2
 15225  1D27  3009               	movlw	9
 15226  1D28  150D               	bsf	13,2
 15227                           
 15228                           ;bldc.c: 1874: LATB1 = 0;
 15229  1D29  108D               	bcf	13,1
 15230                           
 15231                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 15232  1D2A  0021               	movlb	1	; select bank1
 15233  1D2B  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15234  1D2C  3005               	movlw	5
 15235                           
 15236                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 15237  1D2D  01E3               	clrf	_ui8_UPhase_sel^(0+128)
 15238  1D2E  0AE3               	incf	_ui8_UPhase_sel^(0+128),f
 15239                           
 15240                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 15241  1D2F  0022               	movlb	2	; select bank2
 15242  1D30  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 15243                           
 15244                           ;bldc.c: 1878: CM1CON1 = 0x01;
 15245  1D31  3001               	movlw	1
 15246  1D32  0092               	movwf	18	;volatile
 15247                           
 15248                           ;bldc.c: 1892: CM1CON0 = 0x94;
 15249  1D33  3094               	movlw	148
 15250  1D34  0091               	movwf	17	;volatile
 15251  1D35                     i1l29161:	
 15252                           
 15253                           ;bldc.c: 1893: rising_bemf_flag = 0;
 15254  1D35  0020               	movlb	0	; select bank0
 15255  1D36  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15256                           
 15257                           ;bldc.c: 1894: comm_state = 1;
 15258  1D37  0021               	movlb	1	; select bank1
 15259  1D38  01D9               	clrf	_comm_state^(0+128)
 15260  1D39  0AD9               	incf	_comm_state^(0+128),f
 15261                           
 15262                           ;bldc.c: 1902: break;
 15263  1D3A  2DC2               	goto	i1l29263
 15264  1D3B                     i1l29165:	
 15265                           
 15266                           ;bldc.c: 1912: {
 15267                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
 15268  1D3B  3002               	movlw	2
 15269  1D3C  0025               	movlb	5	; select bank5
 15270  1D3D  0096               	movwf	22	;volatile
 15271                           
 15272                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
 15273  1D3E  0020               	movlb	0	; select bank0
 15274  1D3F  1F4B               	btfss	_MotorFlags,6
 15275  1D40  2D45               	goto	i1l29171
 15276                           
 15277                           ;bldc.c: 1922: {
 15278                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 15279  1D41  0022               	movlb	2	; select bank2
 15280  1D42  3187  279F  319B   	fcall	PL40	;call to abstracted procedure
 15281  1D45                     i1l29171:	
 15282                           
 15283                           ;bldc.c: 1926: }
 15284                           ;bldc.c: 1929: LATC2 = 0;
 15285  1D45  0022               	movlb	2	; select bank2
 15286  1D46  3035               	movlw	53
 15287  1D47  110E               	bcf	14,2
 15288                           
 15289                           ;bldc.c: 1931: LATB1 = 0;
 15290  1D48  108D               	bcf	13,1
 15291                           
 15292                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 15293  1D49  0021               	movlb	1	; select bank1
 15294  1D4A  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15295                           
 15296                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 15297  1D4B  3005               	movlw	5
 15298  1D4C  00E3               	movwf	_ui8_UPhase_sel^(0+128)
 15299                           
 15300                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 15301  1D4D  0022               	movlb	2	; select bank2
 15302  1D4E  01D9               	clrf	_ui8_Ubemf_sel^(0+256)
 15303  1D4F  0AD9               	incf	_ui8_Ubemf_sel^(0+256),f
 15304                           
 15305                           ;bldc.c: 1935: CM1CON1 = 0x00;
 15306  1D50  0192               	clrf	18	;volatile
 15307                           
 15308                           ;bldc.c: 1949: CM1CON0 = 0x84;
 15309  1D51  3084               	movlw	132
 15310  1D52  0091               	movwf	17	;volatile
 15311                           
 15312                           ;bldc.c: 1950: rising_bemf_flag = 1;
 15313  1D53  0020               	movlb	0	; select bank0
 15314  1D54  3002               	movlw	2
 15315  1D55  2D8B               	goto	L64
 15316  1D56                     i1l29185:	
 15317                           ;bldc.c: 1956: break;
 15318                           
 15319                           ;bldc.c: 1951: comm_state = 2;
 15320                           
 15321                           
 15322                           ;bldc.c: 1966: {
 15323                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
 15324  1D56  3002               	movlw	2
 15325  1D57  0025               	movlb	5	; select bank5
 15326  1D58  0096               	movwf	22	;volatile
 15327                           
 15328                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
 15329  1D59  0020               	movlb	0	; select bank0
 15330  1D5A  1F4B               	btfss	_MotorFlags,6
 15331  1D5B  2D60               	goto	i1l29191
 15332                           
 15333                           ;bldc.c: 1977: {
 15334                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 15335  1D5C  0022               	movlb	2	; select bank2
 15336  1D5D  3187  27A4  319B   	fcall	PL43	;call to abstracted procedure
 15337  1D60                     i1l29191:	
 15338                           
 15339                           ;bldc.c: 1981: }
 15340                           ;bldc.c: 1984: LATC2 = 0;
 15341  1D60  0022               	movlb	2	; select bank2
 15342  1D61  3035               	movlw	53
 15343  1D62  110E               	bcf	14,2
 15344                           
 15345                           ;bldc.c: 1986: LATB1 = 1;
 15346  1D63  148D               	bsf	13,1
 15347                           
 15348                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 15349  1D64  0021               	movlb	1	; select bank1
 15350  1D65  00DC               	movwf	_ui8_IPhase_sel^(0+128)
 15351                           
 15352                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 15353  1D66  3005               	movlw	5
 15354  1D67  00E3               	movwf	_ui8_UPhase_sel^(0+128)
 15355                           
 15356                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 15357  1D68  3025               	movlw	37
 15358  1D69  0022               	movlb	2	; select bank2
 15359  1D6A  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 15360                           
 15361                           ;bldc.c: 1990: CM1CON1 = 0x02;
 15362  1D6B  3002               	movlw	2
 15363  1D6C  0092               	movwf	18	;volatile
 15364                           
 15365                           ;bldc.c: 2004: CM1CON0 = 0x94;
 15366  1D6D  3094               	movlw	148
 15367  1D6E  0091               	movwf	17	;volatile
 15368                           
 15369                           ;bldc.c: 2005: rising_bemf_flag = 0;
 15370  1D6F  0020               	movlb	0	; select bank0
 15371  1D70  3003               	movlw	3
 15372  1D71  2DA5               	goto	L65
 15373  1D72                     i1l29209:	
 15374                           ;bldc.c: 2011: break;
 15375                           
 15376                           ;bldc.c: 2006: comm_state = 3;
 15377                           
 15378                           
 15379                           ;bldc.c: 2020: {
 15380                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
 15381  1D72  3004               	movlw	4
 15382  1D73  0025               	movlb	5	; select bank5
 15383  1D74  0096               	movwf	22	;volatile
 15384                           
 15385                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
 15386  1D75  0020               	movlb	0	; select bank0
 15387  1D76  1F4B               	btfss	_MotorFlags,6
 15388  1D77  2D7C               	goto	i1l29215
 15389                           
 15390                           ;bldc.c: 2031: {
 15391                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 15392  1D78  0022               	movlb	2	; select bank2
 15393  1D79  3187  27A9  319B   	fcall	PL44	;call to abstracted procedure
 15394  1D7C                     i1l29215:	
 15395                           
 15396                           ;bldc.c: 2035: }
 15397                           ;bldc.c: 2038: LATC2 = 0;
 15398  1D7C  0022               	movlb	2	; select bank2
 15399  1D7D  3011               	movlw	17
 15400  1D7E  110E               	bcf	14,2
 15401                           
 15402                           ;bldc.c: 2039: LATB2 = 0;
 15403                           
 15404                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 15405                           
 15406                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 15407  1D7F  3187  2799  319B   	fcall	PL27	;call to abstracted procedure
 15408                           
 15409                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 15410  1D82  3005               	movlw	5
 15411  1D83  0022               	movlb	2	; select bank2
 15412  1D84  00D9               	movwf	_ui8_Ubemf_sel^(0+256)
 15413                           
 15414                           ;bldc.c: 2044: CM1CON1 = 0x01;
 15415  1D85  3001               	movlw	1
 15416  1D86  0092               	movwf	18	;volatile
 15417                           
 15418                           ;bldc.c: 2059: CM1CON0 = 0x84;
 15419  1D87  3084               	movlw	132
 15420  1D88  0091               	movwf	17	;volatile
 15421                           
 15422                           ;bldc.c: 2060: rising_bemf_flag = 1;
 15423  1D89  0020               	movlb	0	; select bank0
 15424  1D8A  3004               	movlw	4
 15425  1D8B                     L64:	
 15426  1D8B  1453               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15427                           
 15428                           ;bldc.c: 2061: comm_state = 4;
 15429  1D8C  2DA6               	goto	L62
 15430  1D8D                     i1l29233:	
 15431                           ;bldc.c: 2066: break;
 15432                           
 15433                           
 15434                           ;bldc.c: 2076: {
 15435                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
 15436  1D8D  3004               	movlw	4
 15437  1D8E  0025               	movlb	5	; select bank5
 15438  1D8F  0096               	movwf	22	;volatile
 15439                           
 15440                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
 15441  1D90  0020               	movlb	0	; select bank0
 15442  1D91  1F4B               	btfss	_MotorFlags,6
 15443  1D92  2D97               	goto	i1l29239
 15444                           
 15445                           ;bldc.c: 2086: {
 15446                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 15447  1D93  0022               	movlb	2	; select bank2
 15448  1D94  3187  279F  319B   	fcall	PL40	;call to abstracted procedure
 15449  1D97                     i1l29239:	
 15450                           
 15451                           ;bldc.c: 2090: }
 15452                           ;bldc.c: 2093: LATC2 = 1;
 15453  1D97  0022               	movlb	2	; select bank2
 15454  1D98  3011               	movlw	17
 15455  1D99  150E               	bsf	14,2
 15456                           
 15457                           ;bldc.c: 2094: LATB2 = 0;
 15458                           
 15459                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 15460                           
 15461                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 15462  1D9A  3187  2799  319B   	fcall	PL27	;call to abstracted procedure
 15463                           
 15464                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 15465  1D9D  0022               	movlb	2	; select bank2
 15466  1D9E  01D9               	clrf	_ui8_Ubemf_sel^(0+256)
 15467  1D9F  0AD9               	incf	_ui8_Ubemf_sel^(0+256),f
 15468                           
 15469                           ;bldc.c: 2099: CM1CON1 = 0x00;
 15470  1DA0  0192               	clrf	18	;volatile
 15471                           
 15472                           ;bldc.c: 2113: CM1CON0 = 0x94;
 15473  1DA1  3094               	movlw	148
 15474  1DA2  0091               	movwf	17	;volatile
 15475                           
 15476                           ;bldc.c: 2114: rising_bemf_flag = 0;
 15477  1DA3  0020               	movlb	0	; select bank0
 15478  1DA4  3005               	movlw	5
 15479  1DA5                     L65:	
 15480  1DA5  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 15481  1DA6                     L62:	
 15482                           
 15483                           ;bldc.c: 2115: comm_state = 5;
 15484  1DA6  0021               	movlb	1	; select bank1
 15485  1DA7  00D9               	movwf	_comm_state^(0+128)
 15486                           
 15487                           ;bldc.c: 2120: break;
 15488  1DA8  2DC2               	goto	i1l29263
 15489  1DA9                     i1l29253:	
 15490                           
 15491                           ;bldc.c: 2129: {
 15492                           ;bldc.c: 2131: PSTR1CON = 0x00;
 15493  1DA9  0025               	movlb	5	; select bank5
 15494  1DAA  0196               	clrf	22	;volatile
 15495                           
 15496                           ;bldc.c: 2132: CM1CON0 = 0x00;
 15497  1DAB  0022               	movlb	2	; select bank2
 15498  1DAC  0191               	clrf	17	;volatile
 15499  1DAD  2D35               	goto	i1l29161
 15500  1DAE                     i1l29261:	
 15501  1DAE  0859               	movf	_comm_state^(0+128),w
 15502                           
 15503                           ; Switch size 1, requested type "space"
 15504                           ; Number of cases is 6, Range of values is 1 to 6
 15505                           ; switch strategies available:
 15506                           ; Name         Instructions Cycles
 15507                           ; simple_byte           19    10 (average)
 15508                           ; direct_byte           21     9 (fixed)
 15509                           ; jumptable            263     9 (fixed)
 15510                           ;	Chosen strategy is simple_byte
 15511  1DAF  3A01               	xorlw	1	; case 1
 15512  1DB0  1903               	skipnz
 15513  1DB1  2D00               	goto	i1l29117
 15514  1DB2  3A03               	xorlw	3	; case 2
 15515  1DB3  1903               	skipnz
 15516  1DB4  2D1C               	goto	i1l29141
 15517  1DB5  3A01               	xorlw	1	; case 3
 15518  1DB6  1903               	skipnz
 15519  1DB7  2D3B               	goto	i1l29165
 15520  1DB8  3A07               	xorlw	7	; case 4
 15521  1DB9  1903               	skipnz
 15522  1DBA  2D56               	goto	i1l29185
 15523  1DBB  3A01               	xorlw	1	; case 5
 15524  1DBC  1903               	skipnz
 15525  1DBD  2D72               	goto	i1l29209
 15526  1DBE  3A03               	xorlw	3	; case 6
 15527  1DBF  1903               	skipnz
 15528  1DC0  2D8D               	goto	i1l29233
 15529  1DC1  2DA9               	goto	i1l29253
 15530  1DC2                     i1l29263:	
 15531                           
 15532                           ;bldc.c: 2146: {
 15533                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
 15534  1DC2  3028               	movlw	40
 15535  1DC3  00DB               	movwf	_ui8_BlankingCount^(0+128)
 15536                           
 15537                           ;bldc.c: 2158: }
 15538                           ;bldc.c: 2161: comm_time = 0;
 15539                           
 15540                           ;bldc.c: 2150: }
 15541  1DC4  0020               	movlb	0	; select bank0
 15542  1DC5  01C8               	clrf	_comm_time
 15543  1DC6  01C9               	clrf	_comm_time+1
 15544  1DC7  0008               	return
 15545  1DC8                     __end_ofi1_commutate:	
 15546                           
 15547                           	psect	swtext4
 15548  00BA                     __pswtext4:	
 15549  00BA                     i1S31605:	
 15550  00BA  319C  2C8D         	ljmp	i1l29049
 15551  00BC  319C  2C8F         	ljmp	i1l29051
 15552  00BE  319C  2C94         	ljmp	i1l29053
 15553  00C0  319C  2C96         	ljmp	i1l29055
 15554  00C2  319C  2C98         	ljmp	i1l29057
 15555  00C4  319C  2C9A         	ljmp	i1l29059
 15556  00C6  319C  2C9A         	ljmp	i1l29059
 15557  00C8  319C  2C9A         	ljmp	i1l29059
 15558  00CA  319C  2C9A         	ljmp	i1l29059
 15559  00CC  319C  2C9A         	ljmp	i1l29059
 15560                           
 15561                           	psect	text2081
 15562  0806                     __ptext2081:	
 15563 ;; =============== function i1_ADC_Wait ends ============
 15564                           
 15565                           
 15566 ;; *************** function _ELINMIntHandler *****************
 15567 ;; Defined at:
 15568 ;;		line 558 in file "../lin.c"
 15569 ;; Parameters:    Size  Location     Type
 15570 ;;		None
 15571 ;; Auto vars:     Size  Location     Type
 15572 ;;		None
 15573 ;; Return value:  Size  Location     Type
 15574 ;;		None               void
 15575 ;; Registers used:
 15576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15577 ;; Tracked objects:
 15578 ;;		On entry : 1F/0
 15579 ;;		On exit  : 18/0
 15580 ;;		Unchanged: FFFE0/0
 15581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15582 ;;      Params:         0       0       0       0       0       0       0       0
 15583 ;;      Locals:         0       0       0       0       0       0       0       0
 15584 ;;      Temps:          4       0       0       0       0       0       0       0
 15585 ;;      Totals:         4       0       0       0       0       0       0       0
 15586 ;;Total ram usage:        4 bytes
 15587 ;; Hardware stack levels used:    1
 15588 ;; Hardware stack levels required when called:    1
 15589 ;; This function calls:
 15590 ;;		__ELINMIntResetProtocol
 15591 ;; This function is called by:
 15592 ;;		_interrupt_handler
 15593 ;; This function uses a non-reentrant model
 15594 ;;
 15595  0806                     _ELINMIntHandler:	
 15596                           
 15597                           ;lin.c: 560: if( SENDB == 0)
 15598                           
 15599                           ; Regs used in _ELINMIntHandler: [wreg+fsr1l-status,0+pclath+cstack]
 15600  0806  0023               	movlb	3	; select bank3
 15601  0807  199E               	btfsc	30,3
 15602  0808  2888               	goto	i1l25123
 15603                           
 15604                           ;lin.c: 563: {
 15605                           ;lin.c: 565: if( RCIF)
 15606  0809  0020               	movlb	0	; select bank0
 15607  080A  1E91               	btfss	17,5
 15608  080B  2888               	goto	i1l25123
 15609                           
 15610                           ;lin.c: 568: {
 15611                           ;lin.c: 572: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
 15612  080C  1DCC               	btfss	__ELINMIntStatus,3
 15613  080D  2824               	goto	i1l11614
 15614                           
 15615                           ;lin.c: 575: {
 15616                           ;lin.c: 577: if( ( RCSTA & 0x06 ) == 0)
 15617  080E  0023               	movlb	3	; select bank3
 15618  080F  081D               	movf	29,w
 15619  0810  3906               	andlw	6
 15620  0811  1D03               	btfss	3,2
 15621  0812  2888               	goto	i1l25123
 15622                           
 15623                           ;lin.c: 580: {
 15624                           ;lin.c: 584: if( RCREG == 0x80)
 15625  0813  0819               	movf	25,w	;volatile
 15626  0814  3A80               	xorlw	128
 15627  0815  1D03               	skipz
 15628  0816  2888               	goto	i1l25123
 15629                           
 15630                           ;lin.c: 587: {
 15631                           ;lin.c: 589: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
 15632  0817  0024               	movlb	4	; select bank4
 15633  0818  2110  3188         	fcall	PL24	;call to abstracted procedure
 15634                           
 15635                           ;lin.c: 590: _ELINMIntReadBack = RCREG;
 15636  081A  0023               	movlb	3	; select bank3
 15637  081B  0819               	movf	25,w	;volatile
 15638  081C  0021               	movlb	1	; select bank1
 15639  081D  00D1               	movwf	__ELINMIntReadBack^(0+128)
 15640                           
 15641                           ;lin.c: 593: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT)
 15642  081E  1ED2               	btfss	__ELINMIntStatus1^(0+128),5
 15643  081F  2822               	goto	i1l11617
 15644                           
 15645                           ;lin.c: 596: {
 15646                           ;lin.c: 598: _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT = 0;
 15647  0820  12D2               	bcf	__ELINMIntStatus1^(0+128),5
 15648                           
 15649                           ;lin.c: 601: }
 15650  0821  2888               	goto	i1l25123
 15651  0822                     i1l11617:	
 15652                           
 15653                           ;lin.c: 604: else
 15654                           ;lin.c: 605: {
 15655                           ;lin.c: 607: _ELINMIntStatus1.ELINMINTSTS.WAKEUP = 1;
 15656  0822  1452               	bsf	__ELINMIntStatus1^(0+128),0
 15657  0823  2888               	goto	i1l25123
 15658  0824                     i1l11614:	
 15659                           
 15660                           ;lin.c: 623: else
 15661                           ;lin.c: 624: {
 15662                           ;lin.c: 626: if( _ELINMIntStatus.ELINMINTSTS.TX)
 15663  0824  1C4C               	btfss	__ELINMIntStatus,0
 15664  0825  285F               	goto	i1l11620
 15665                           
 15666                           ;lin.c: 629: {
 15667                           ;lin.c: 633: if( ( RCSTA & 0x06 ) && _ELINMIntMessageBufferPointer)
 15668  0826  0023               	movlb	3	; select bank3
 15669  0827  081D               	movf	29,w
 15670  0828  3906               	andlw	6
 15671  0829  1903               	btfsc	3,2
 15672  082A  282F               	goto	i1l25069
 15673  082B  0021               	movlb	1	; select bank1
 15674  082C  084F               	movf	__ELINMIntMessageBufferPointer^(0+128),w
 15675  082D  1D03               	skipz
 15676  082E  2866               	goto	i1l25101
 15677  082F                     i1l25069:	
 15678                           ;lin.c: 642: }
 15679                           
 15680                           ;lin.c: 636: {
 15681                           ;lin.c: 638: _ELINMIntResetProtocol(
 15682                           ;lin.c: 639: 0x08 + 0x04 + 0x70 );
 15683                           
 15684                           
 15685                           ;lin.c: 645: else
 15686                           ;lin.c: 646: {
 15687                           ;lin.c: 651: if( _ELINMIntMessageBufferPointer == 2)
 15688  082F  0021               	movlb	1	; select bank1
 15689  0830  084F               	movf	__ELINMIntMessageBufferPointer^(0+128),w
 15690  0831  3A02               	xorlw	2
 15691  0832  1903               	btfsc	3,2
 15692                           
 15693                           ;lin.c: 654: {
 15694                           ;lin.c: 656: _ELINMIntStatus1.ELINMINTSTS.HEADER = 0;
 15695  0833  10D2               	bcf	__ELINMIntStatus1^(0+128),1
 15696                           
 15697                           ;lin.c: 659: }
 15698                           ;lin.c: 662: if( _ELINMIntSpace)
 15699  0834  0022               	movlb	2	; select bank2
 15700  0835  084B               	movf	__ELINMIntSpace^(0+256),w
 15701  0836  1903               	btfsc	3,2
 15702  0837  283A               	goto	i1l25077
 15703                           
 15704                           ;lin.c: 665: {
 15705                           ;lin.c: 667: _ELINMIntSpace--;
 15706  0838  03CB               	decf	__ELINMIntSpace^(0+256),f
 15707                           
 15708                           ;lin.c: 670: }
 15709  0839  2888               	goto	i1l25123
 15710  083A                     i1l25077:	
 15711                           
 15712                           ;lin.c: 673: else
 15713                           ;lin.c: 674: {
 15714                           ;lin.c: 676: if( _ELINMIntReadBack != RCREG)
 15715  083A  0021               	movlb	1	; select bank1
 15716  083B  0851               	movf	__ELINMIntReadBack^(0+128),w
 15717  083C  0023               	movlb	3	; select bank3
 15718  083D  0619               	xorwf	25,w	;volatile
 15719  083E  1903               	skipnz
 15720  083F  2842               	goto	i1l25081
 15721                           
 15722                           ;lin.c: 679: {
 15723                           ;lin.c: 681: _ELINMIntResetProtocol(0x08 + 0x04 + 0x60 );
 15724  0840  306C               	movlw	108
 15725  0841  2886               	goto	L66
 15726  0842                     i1l25081:	
 15727                           ;lin.c: 684: }
 15728                           
 15729                           
 15730                           ;lin.c: 687: else
 15731                           ;lin.c: 688: {
 15732                           ;lin.c: 693: if( _ELINMIntMessageSize.SIZE)
 15733  0842  0021               	movlb	1	; select bank1
 15734  0843  0850               	movf	__ELINMIntMessageSize^(0+128),w
 15735  0844  1903               	btfsc	3,2
 15736  0845  2855               	goto	i1l11628
 15737                           
 15738                           ;lin.c: 696: {
 15739                           ;lin.c: 698: _ELINMIntReadBack = RCREG;
 15740  0846  0023               	movlb	3	; select bank3
 15741  0847  0819               	movf	25,w	;volatile
 15742  0848  0021               	movlb	1	; select bank1
 15743  0849  00D1               	movwf	__ELINMIntReadBack^(0+128)
 15744                           
 15745                           ;lin.c: 699: _ELINMIntReadBack = _ELINMIntMessageBuffer[ _ELINMIntMessageBufferPointer ];
 15746  084A  20F2  3188         	fcall	PL45	;call to abstracted procedure
 15747  084C  0801               	movf	1,w
 15748  084D  00D1               	movwf	__ELINMIntReadBack^(0+128)
 15749                           
 15750                           ;lin.c: 700: TXREG = _ELINMIntReadBack; _ELINMIntMessageSize.SIZE--;
 15751  084E  0023               	movlb	3	; select bank3
 15752  084F  009A               	movwf	26	;volatile
 15753  0850  0021               	movlb	1	; select bank1
 15754  0851  03D0               	decf	__ELINMIntMessageSize^(0+128),f
 15755  0852                     i1l25091:	
 15756                           
 15757                           ;lin.c: 702: _ELINMIntSpace += (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)
      +                          /2;
 15758  0852  0021               	movlb	1	; select bank1
 15759  0853  0ACF               	incf	__ELINMIntMessageBufferPointer^(0+128),f
 15760                           
 15761                           ;lin.c: 705: }
 15762  0854  2888               	goto	i1l25123
 15763  0855                     i1l11628:	
 15764                           
 15765                           ;lin.c: 708: else
 15766                           ;lin.c: 709: {
 15767                           ;lin.c: 714: if( _ELINMIntStatus.ELINMINTSTS.RX)
 15768  0855  0020               	movlb	0	; select bank0
 15769  0856  1CCC               	btfss	__ELINMIntStatus,1
 15770  0857  285C               	goto	i1l11630
 15771                           
 15772                           ;lin.c: 717: {
 15773                           ;lin.c: 719: _ELINMIntStatus.ELINMINTSTS.TX = 0;
 15774  0858  104C               	bcf	__ELINMIntStatus,0
 15775                           
 15776                           ;lin.c: 720: _ELINMIntMessageBufferPointer = 0;
 15777  0859  0021               	movlb	1	; select bank1
 15778  085A  01CF               	clrf	__ELINMIntMessageBufferPointer^(0+128)
 15779                           
 15780                           ;lin.c: 723: }
 15781  085B  2888               	goto	i1l25123
 15782  085C                     i1l11630:	
 15783                           
 15784                           ;lin.c: 726: else
 15785                           ;lin.c: 727: {
 15786                           ;lin.c: 732: _ELINMIntStatus1.ELINMINTSTS.FRAME = 0;
 15787  085C  0021               	movlb	1	; select bank1
 15788  085D  1152               	bcf	__ELINMIntStatus1^(0+128),2
 15789  085E  2885               	goto	i1l25121
 15790  085F                     i1l11620:	
 15791                           ;lin.c: 733: _ELINMIntResetProtocol( 0x08 );
 15792                           
 15793                           
 15794                           ;lin.c: 755: else
 15795                           ;lin.c: 756: {
 15796                           ;lin.c: 758: if( _ELINMIntStatus.ELINMINTSTS.RX)
 15797  085F  1CCC               	btfss	__ELINMIntStatus,1
 15798  0860  2888               	goto	i1l25123
 15799                           
 15800                           ;lin.c: 761: {
 15801                           ;lin.c: 765: if( RCSTA & 0x06)
 15802  0861  0023               	movlb	3	; select bank3
 15803  0862  081D               	movf	29,w
 15804  0863  3906               	andlw	6
 15805  0864  1903               	btfsc	3,2
 15806  0865  2868               	goto	i1l25103
 15807  0866                     i1l25101:	
 15808                           
 15809                           ;lin.c: 768: {
 15810                           ;lin.c: 770: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x70 );
 15811  0866  307C               	movlw	124
 15812  0867  2886               	goto	L66
 15813  0868                     i1l25103:	
 15814                           ;lin.c: 773: }
 15815                           
 15816                           
 15817                           ;lin.c: 776: else
 15818                           ;lin.c: 777: {
 15819                           ;lin.c: 779: if( _ELINMIntRXMessageSize.SIZE)
 15820  0868  0022               	movlb	2	; select bank2
 15821  0869  084A               	movf	__ELINMIntRXMessageSize^(0+256),w
 15822  086A  1903               	btfsc	3,2
 15823  086B  287D               	goto	i1l25115
 15824                           
 15825                           ;lin.c: 782: {
 15826                           ;lin.c: 784: _ELINMIntMessageBuffer [ _ELINMIntMessageBufferPointer ] = RCREG;
 15827  086C  0021               	movlb	1	; select bank1
 15828  086D  20F2  3188         	fcall	PL45	;call to abstracted procedure
 15829  086F  0023               	movlb	3	; select bank3
 15830  0870  0819               	movf	25,w	;volatile
 15831  0871  0081               	movwf	1
 15832                           
 15833                           ;lin.c: 785: _ELINMIntRXMessageSize.SIZE--;
 15834  0872  0022               	movlb	2	; select bank2
 15835  0873  03CA               	decf	__ELINMIntRXMessageSize^(0+256),f
 15836                           
 15837                           ;lin.c: 786: _ELINMIntRXCRC.CRC += RCREG;
 15838  0874  0023               	movlb	3	; select bank3
 15839  0875  0819               	movf	25,w	;volatile
 15840  0876  07C4               	addwf	__ELINMIntRXCRC^(0+384),f
 15841  0877  1803               	skipnc
 15842  0878  0AC5               	incf	(__ELINMIntRXCRC+1)^(0+384),f
 15843                           
 15844                           ;lin.c: 789: if( _ELINMIntRXCRC.CRCbits.CRC8)
 15845  0879  1C45               	btfss	(__ELINMIntRXCRC^(0+384)+1),0
 15846  087A  2852               	goto	i1l25091
 15847                           
 15848                           ;lin.c: 792: {
 15849                           ;lin.c: 794: _ELINMIntRXCRC.CRCL++;
 15850  087B  0AC4               	incf	__ELINMIntRXCRC^(0+384),f
 15851  087C  2852               	goto	i1l25091
 15852  087D                     i1l25115:	
 15853                           
 15854                           ;lin.c: 813: _ELINMIntRXCRC.CRCL += RCREG + 1;
 15855  087D  0023               	movlb	3	; select bank3
 15856  087E  0A19               	incf	25,w	;volatile
 15857  087F  07C4               	addwf	__ELINMIntRXCRC^(0+384),f
 15858                           
 15859                           ;lin.c: 816: if( _ELINMIntRXCRC.CRCL )
 15860  0880  0844               	movf	__ELINMIntRXCRC^(0+384),w
 15861  0881  1903               	btfsc	3,2
 15862  0882  2885               	goto	i1l25121
 15863                           
 15864                           ;lin.c: 819: {
 15865                           ;lin.c: 821: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x50 );
 15866  0883  305C               	movlw	92
 15867  0884  2886               	goto	L66
 15868  0885                     i1l25121:	
 15869                           ;lin.c: 824: }
 15870                           
 15871                           
 15872                           ;lin.c: 827: else
 15873                           ;lin.c: 828: {
 15874                           ;lin.c: 830: _ELINMIntResetProtocol( 0x08 );
 15875  0885  3008               	movlw	8
 15876  0886                     L66:	
 15877  0886  20E3  3188         	fcall	__ELINMIntResetProtocol
 15878  0888                     i1l25123:	
 15879                           
 15880                           ;lin.c: 833: }
 15881                           ;lin.c: 836: }
 15882                           ;lin.c: 839: }
 15883                           ;lin.c: 843: }
 15884                           ;lin.c: 846: }
 15885                           ;lin.c: 849: }
 15886                           ;lin.c: 853: }
 15887                           ;lin.c: 856: }
 15888                           ;lin.c: 859: if( _ELINMIntStatus.ELINMINTSTS.IDLE == 0 )
 15889  0888  0020               	movlb	0	; select bank0
 15890  0889  19CC               	btfsc	__ELINMIntStatus,3
 15891  088A  28C9               	goto	i1l11641
 15892                           
 15893                           ;lin.c: 862: {
 15894                           ;lin.c: 866: if( _ELINMIntStatus1.ELINMINTSTS.FRAME == 1)
 15895  088B  0021               	movlb	1	; select bank1
 15896  088C  1D52               	btfss	__ELINMIntStatus1^(0+128),2
 15897  088D  28C2               	goto	i1l25149
 15898                           
 15899                           ;lin.c: 869: {
 15900                           ;lin.c: 871: if( _ELINMIntStatus1.ELINMINTSTS.HEADER == 1)
 15901  088E  1CD2               	btfss	__ELINMIntStatus1^(0+128),1
 15902  088F  28A5               	goto	i1l25137
 15903                           
 15904                           ;lin.c: 874: {
 15905                           ;lin.c: 876: if( _ELINMIntTHeaderMin)
 15906  0890  0022               	movlb	2	; select bank2
 15907  0891  0826               	movf	(__ELINMIntTHeaderMin+1)^(0+256),w
 15908  0892  0425               	iorwf	__ELINMIntTHeaderMin^(0+256),w
 15909  0893  1903               	skipnz
 15910  0894  2899               	goto	i1l11644
 15911                           
 15912                           ;lin.c: 879: {
 15913                           ;lin.c: 881: _ELINMIntTHeaderMin--;
 15914  0895  3001               	movlw	1
 15915  0896  02A5               	subwf	__ELINMIntTHeaderMin^(0+256),f
 15916  0897  3000               	movlw	0
 15917  0898  3BA6               	subwfb	(__ELINMIntTHeaderMin+1)^(0+256),f
 15918  0899                     i1l11644:	
 15919                           
 15920                           ;lin.c: 884: }
 15921                           ;lin.c: 887: if( _ELINMIntTHeaderMax)
 15922  0899  0023               	movlb	3	; select bank3
 15923  089A  0849               	movf	(__ELINMIntTHeaderMax+1)^(0+384),w
 15924  089B  0448               	iorwf	__ELINMIntTHeaderMax^(0+384),w
 15925  089C  1903               	skipnz
 15926  089D  28A3               	goto	i1l25135
 15927                           
 15928                           ;lin.c: 890: {
 15929                           ;lin.c: 892: _ELINMIntTHeaderMax--;
 15930  089E  3001               	movlw	1
 15931  089F  02C8               	subwf	__ELINMIntTHeaderMax^(0+384),f
 15932  08A0  3000               	movlw	0
 15933  08A1  3BC9               	subwfb	(__ELINMIntTHeaderMax+1)^(0+384),f
 15934                           
 15935                           ;lin.c: 895: }
 15936  08A2  28AD               	goto	i1l25141
 15937  08A3                     i1l25135:	
 15938                           
 15939                           ;lin.c: 898: else
 15940                           ;lin.c: 899: {
 15941                           ;lin.c: 902: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x20 );
 15942  08A3  302C               	movlw	44
 15943  08A4  28AB               	goto	L67
 15944  08A5                     i1l25137:	
 15945                           
 15946                           ;lin.c: 911: else
 15947                           ;lin.c: 912: {
 15948                           ;lin.c: 917: if( _ELINMIntTHeaderMin)
 15949  08A5  0022               	movlb	2	; select bank2
 15950  08A6  0826               	movf	(__ELINMIntTHeaderMin+1)^(0+256),w
 15951  08A7  0425               	iorwf	__ELINMIntTHeaderMin^(0+256),w
 15952  08A8  1903               	skipnz
 15953  08A9  28AD               	goto	i1l25141
 15954                           
 15955                           ;lin.c: 920: {
 15956                           ;lin.c: 922: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x10 );
 15957  08AA  301C               	movlw	28
 15958  08AB                     L67:	
 15959  08AB  20E3  3188         	fcall	__ELINMIntResetProtocol
 15960  08AD                     i1l25141:	
 15961                           
 15962                           ;lin.c: 925: }
 15963                           ;lin.c: 928: }
 15964                           ;lin.c: 931: if( _ELINMIntTFrameMin)
 15965  08AD  0022               	movlb	2	; select bank2
 15966  08AE  0824               	movf	(__ELINMIntTFrameMin+1)^(0+256),w
 15967  08AF  0423               	iorwf	__ELINMIntTFrameMin^(0+256),w
 15968  08B0  1903               	skipnz
 15969  08B1  28B6               	goto	i1l11649
 15970                           
 15971                           ;lin.c: 934: {
 15972                           ;lin.c: 936: _ELINMIntTFrameMin--;
 15973  08B2  3001               	movlw	1
 15974  08B3  02A3               	subwf	__ELINMIntTFrameMin^(0+256),f
 15975  08B4  3000               	movlw	0
 15976  08B5  3BA4               	subwfb	(__ELINMIntTFrameMin+1)^(0+256),f
 15977  08B6                     i1l11649:	
 15978                           
 15979                           ;lin.c: 939: }
 15980                           ;lin.c: 942: if( _ELINMIntTFrameMax)
 15981  08B6  0023               	movlb	3	; select bank3
 15982  08B7  0847               	movf	(__ELINMIntTFrameMax+1)^(0+384),w
 15983  08B8  0446               	iorwf	__ELINMIntTFrameMax^(0+384),w
 15984  08B9  1903               	skipnz
 15985  08BA  28C0               	goto	i1l25147
 15986                           
 15987                           ;lin.c: 945: {
 15988                           ;lin.c: 947: _ELINMIntTFrameMax--;
 15989  08BB  3001               	movlw	1
 15990  08BC  02C6               	subwf	__ELINMIntTFrameMax^(0+384),f
 15991  08BD  3000               	movlw	0
 15992  08BE  3BC7               	subwfb	(__ELINMIntTFrameMax+1)^(0+384),f
 15993                           
 15994                           ;lin.c: 950: }
 15995  08BF  0008               	return
 15996  08C0                     i1l25147:	
 15997                           
 15998                           ;lin.c: 953: else
 15999                           ;lin.c: 954: {
 16000                           ;lin.c: 957: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x40 );
 16001  08C0  304C               	movlw	76
 16002  08C1  28E3               	ljmp	__ELINMIntResetProtocol
 16003  08C2                     i1l25149:	
 16004                           
 16005                           ;lin.c: 966: else
 16006                           ;lin.c: 967: {
 16007                           ;lin.c: 972: if( _ELINMIntTFrameMin)
 16008  08C2  0022               	movlb	2	; select bank2
 16009  08C3  0824               	movf	(__ELINMIntTFrameMin+1)^(0+256),w
 16010  08C4  0423               	iorwf	__ELINMIntTFrameMin^(0+256),w
 16011  08C5  1903               	skipnz
 16012  08C6  0008               	return
 16013                           
 16014                           ;lin.c: 975: {
 16015                           ;lin.c: 977: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x30 );
 16016  08C7  303C               	movlw	60
 16017  08C8  28E3               	ljmp	__ELINMIntResetProtocol
 16018  08C9                     i1l11641:	
 16019                           
 16020                           ;lin.c: 990: else
 16021                           ;lin.c: 991: {
 16022                           ;lin.c: 993: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT == 0)
 16023  08C9  0021               	movlb	1	; select bank1
 16024  08CA  1AD2               	btfsc	__ELINMIntStatus1^(0+128),5
 16025  08CB  0008               	return
 16026                           
 16027                           ;lin.c: 996: {
 16028                           ;lin.c: 998: if( _ELINMIntSleepTimeout)
 16029  08CC  0024               	movlb	4	; select bank4
 16030  08CD  0853               	movf	(__ELINMIntSleepTimeout+3)^(0+512),w
 16031  08CE  0452               	iorwf	(__ELINMIntSleepTimeout+2)^(0+512),w
 16032  08CF  0451               	iorwf	(__ELINMIntSleepTimeout+1)^(0+512),w
 16033  08D0  0450               	iorwf	__ELINMIntSleepTimeout^(0+512),w
 16034  08D1  1903               	skipnz
 16035  08D2  28E0               	goto	i1l11656
 16036                           
 16037                           ;lin.c: 1001: {
 16038                           ;lin.c: 1003: _ELINMIntSleepTimeout--;
 16039  08D3  3001               	movlw	1
 16040  08D4  00F1               	movwf	??_ELINMIntHandler
 16041  08D5  01F2               	clrf	??_ELINMIntHandler+1
 16042  08D6  01F3               	clrf	??_ELINMIntHandler+2
 16043  08D7  01F4               	clrf	??_ELINMIntHandler+3
 16044  08D8  02D0               	subwf	__ELINMIntSleepTimeout^(0+512),f
 16045  08D9  0872               	movf	??_ELINMIntHandler+1,w
 16046  08DA  3BD1               	subwfb	(__ELINMIntSleepTimeout+1)^(0+512),f
 16047  08DB  0873               	movf	??_ELINMIntHandler+2,w
 16048  08DC  3BD2               	subwfb	(__ELINMIntSleepTimeout+2)^(0+512),f
 16049  08DD  0874               	movf	??_ELINMIntHandler+3,w
 16050  08DE  3BD3               	subwfb	(__ELINMIntSleepTimeout+3)^(0+512),f
 16051                           
 16052                           ;lin.c: 1006: }
 16053  08DF  0008               	return
 16054  08E0                     i1l11656:	
 16055                           
 16056                           ;lin.c: 1009: else
 16057                           ;lin.c: 1010: {
 16058                           ;lin.c: 1012: _ELINMIntStatus1.ELINMINTSTS.SLEEP_TIMEOUT = 1;
 16059  08E0  0021               	movlb	1	; select bank1
 16060  08E1  1752               	bsf	__ELINMIntStatus1^(0+128),6
 16061  08E2  0008               	return
 16062  08E3                     __end_of_ELINMIntHandler:	
 16063  08E3                     __ptext2086:	
 16064 ;; =============== function i1_ADC_Read ends ============
 16065                           
 16066                           
 16067 ;; *************** function __ELINMIntResetProtocol *****************
 16068 ;; Defined at:
 16069 ;;		line 527 in file "../lin.c"
 16070 ;; Parameters:    Size  Location     Type
 16071 ;;  code            1    wreg     unsigned char 
 16072 ;; Auto vars:     Size  Location     Type
 16073 ;;  code            1    0[COMMON] unsigned char 
 16074 ;; Return value:  Size  Location     Type
 16075 ;;		None               void
 16076 ;; Registers used:
 16077 ;;		wreg, status,2
 16078 ;; Tracked objects:
 16079 ;;		On entry : 1C/1
 16080 ;;		On exit  : 1F/4
 16081 ;;		Unchanged: FFFE0/0
 16082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16083 ;;      Params:         0       0       0       0       0       0       0       0
 16084 ;;      Locals:         1       0       0       0       0       0       0       0
 16085 ;;      Temps:          0       0       0       0       0       0       0       0
 16086 ;;      Totals:         1       0       0       0       0       0       0       0
 16087 ;;Total ram usage:        1 bytes
 16088 ;; Hardware stack levels used:    1
 16089 ;; This function calls:
 16090 ;;		Nothing
 16091 ;; This function is called by:
 16092 ;;		_ELINMIntHandler
 16093 ;; This function uses a non-reentrant model
 16094 ;;
 16095  08E3                     __ELINMIntResetProtocol:	
 16096                           
 16097                           ; Regs used in __ELINMIntResetProtocol: [wreg+status,2]
 16098                           ;__ELINMIntResetProtocol@code stored from wreg
 16099  08E3  00F0               	movwf	__ELINMIntResetProtocol@code
 16100                           
 16101                           ;lin.c: 529: _ELINMIntReadBack = RCREG;
 16102  08E4  0023               	movlb	3	; select bank3
 16103  08E5  0819               	movf	25,w	;volatile
 16104  08E6  0021               	movlb	1	; select bank1
 16105  08E7  00D1               	movwf	__ELINMIntReadBack^(0+128)
 16106                           
 16107                           ;lin.c: 530: _ELINMIntStatus1.ELINMIntStatusByte = 0;
 16108  08E8  01D2               	clrf	__ELINMIntStatus1^(0+128)
 16109                           
 16110                           ;lin.c: 531: _ELINMIntRXCRC.CRC = 0;
 16111  08E9  0023               	movlb	3	; select bank3
 16112  08EA  01C4               	clrf	__ELINMIntRXCRC^(0+384)
 16113  08EB  01C5               	clrf	(__ELINMIntRXCRC+1)^(0+384)
 16114                           
 16115                           ;lin.c: 532: _ELINMIntStatus.ELINMIntStatusByte = code;
 16116  08EC  0870               	movf	__ELINMIntResetProtocol@code,w
 16117  08ED  0020               	movlb	0	; select bank0
 16118  08EE  00CC               	movwf	__ELINMIntStatus
 16119                           
 16120                           ;lin.c: 533: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
 16121  08EF  0024               	movlb	4	; select bank4
 16122  08F0  2110               	fcall	PL24	;call to abstracted procedure
 16123  08F1  0008               	return
 16124  08F2                     __end_of__ELINMIntResetProtocol:	
 16125  08F2                     PL45:	
 16126  08F2  084F               	movf	__ELINMIntMessageBufferPointer^(0+128),w
 16127  08F3  3E54               	addlw	__ELINMIntMessageBuffer& (0+255)
 16128  08F4  0086               	movwf	6
 16129  08F5  3002               	movlw	2	; select bank4/5
 16130  08F6  0087               	movwf	7
 16131  08F7  0008               	return
 16132  08F8                     __ptext2065:	
 16133 ;; =============== function __ELINMIntCalcIDParity ends ============
 16134                           
 16135                           
 16136 ;; *************** function __ELINMIntInitialize *****************
 16137 ;; Defined at:
 16138 ;;		line 485 in file "../lin.c"
 16139 ;; Parameters:    Size  Location     Type
 16140 ;;		None
 16141 ;; Auto vars:     Size  Location     Type
 16142 ;;		None
 16143 ;; Return value:  Size  Location     Type
 16144 ;;                  1    wreg      unsigned char 
 16145 ;; Registers used:
 16146 ;;		wreg, status,2
 16147 ;; Tracked objects:
 16148 ;;		On entry : 1F/0
 16149 ;;		On exit  : 1F/0
 16150 ;;		Unchanged: FFFE0/0
 16151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16152 ;;      Params:         0       0       0       0       0       0       0       0
 16153 ;;      Locals:         0       0       0       0       0       0       0       0
 16154 ;;      Temps:          0       0       0       0       0       0       0       0
 16155 ;;      Totals:         0       0       0       0       0       0       0       0
 16156 ;;Total ram usage:        0 bytes
 16157 ;; Hardware stack levels used:    1
 16158 ;; Hardware stack levels required when called:    4
 16159 ;; This function calls:
 16160 ;;		Nothing
 16161 ;; This function is called by:
 16162 ;;		_system_init
 16163 ;; This function uses a non-reentrant model
 16164 ;;
 16165  08F8                     __ELINMIntInitialize:	
 16166                           
 16167                           ;lin.c: 487: SPBRG = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)&0x00FF);
 16168                           
 16169                           ; Regs used in __ELINMIntInitialize: [wreg+status,2]
 16170  08F8  309F               	movlw	159
 16171  08F9  0023               	movlb	3	; select bank3
 16172  08FA  009B               	movwf	27	;volatile
 16173                           
 16174                           ;lin.c: 488: SPBRGH = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)>>8);
 16175  08FB  3001               	movlw	1
 16176  08FC  009C               	movwf	28	;volatile
 16177                           
 16178                           ;lin.c: 489: TXSTA = 0x26;
 16179  08FD  3026               	movlw	38
 16180  08FE  009E               	movwf	30	;volatile
 16181                           
 16182                           ;lin.c: 490: RCSTA = 0x90;
 16183  08FF  3090               	movlw	144
 16184  0900  009D               	movwf	29	;volatile
 16185                           
 16186                           ;lin.c: 491: BAUDCON = 0x48;
 16187  0901  3048               	movlw	72
 16188  0902  009F               	movwf	31	;volatile
 16189                           
 16190                           ;lin.c: 492: PIE1 = 0x00;
 16191  0903  0021               	movlb	1	; select bank1
 16192  0904  0191               	clrf	17	;volatile
 16193                           
 16194                           ;lin.c: 493: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
 16195  0905  0024               	movlb	4	; select bank4
 16196  0906  2110               	fcall	PL24	;call to abstracted procedure
 16197                           
 16198                           ;lin.c: 494: _ELINMIntSpace = (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)/
      +                          2;
 16199  0907  0022               	movlb	2	; select bank2
 16200  0908  01CB               	clrf	__ELINMIntSpace^(0+256)
 16201                           
 16202                           ;lin.c: 495: _ELINMIntStatus.ELINMIntStatusByte = 0;
 16203  0909  0020               	movlb	0	; select bank0
 16204  090A  01CC               	clrf	__ELINMIntStatus
 16205                           
 16206                           ;lin.c: 496: _ELINMIntStatus1.ELINMIntStatusByte = 0;
 16207  090B  0021               	movlb	1	; select bank1
 16208  090C  01D2               	clrf	__ELINMIntStatus1^(0+128)
 16209                           
 16210                           ;lin.c: 497: _ELINMIntStatus.ELINMINTSTS.IDLE = 1;
 16211  090D  0020               	movlb	0	; select bank0
 16212  090E  15CC               	bsf	__ELINMIntStatus,3
 16213  090F  0008               	return
 16214  0910                     __end_of__ELINMIntInitialize:	
 16215  0910                     PL24:	
 16216  0910  3027               	movlw	39
 16217  0911  01D3               	clrf	(__ELINMIntSleepTimeout+3)^(0+512)
 16218  0912  01D2               	clrf	(__ELINMIntSleepTimeout+2)^(0+512)
 16219  0913  00D1               	movwf	(__ELINMIntSleepTimeout+1)^(0+512)
 16220  0914  30BB               	movlw	187
 16221  0915  00D0               	movwf	__ELINMIntSleepTimeout^(0+512)
 16222  0916  0008               	return
 16223                           
 16224                           	psect	text2087
 16225  1023                     __ptext2087:	
 16226 ;; =============== function __ELINMIntResetProtocol ends ============
 16227                           
 16228                           
 16229 ;; *************** function _interrupt_PWMCapture *****************
 16230 ;; Defined at:
 16231 ;;		line 440 in file "../pwm.c"
 16232 ;; Parameters:    Size  Location     Type
 16233 ;;		None
 16234 ;; Auto vars:     Size  Location     Type
 16235 ;;		None
 16236 ;; Return value:  Size  Location     Type
 16237 ;;		None               void
 16238 ;; Registers used:
 16239 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16240 ;; Tracked objects:
 16241 ;;		On entry : 1F/0
 16242 ;;		On exit  : 1B/2
 16243 ;;		Unchanged: FFFE0/0
 16244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16245 ;;      Params:         0       0       0       0       0       0       0       0
 16246 ;;      Locals:         0       0       0       0       0       0       0       0
 16247 ;;      Temps:          0       0       0       0       0       0       0       0
 16248 ;;      Totals:         0       0       0       0       0       0       0       0
 16249 ;;Total ram usage:        0 bytes
 16250 ;; Hardware stack levels used:    1
 16251 ;; This function calls:
 16252 ;;		Nothing
 16253 ;; This function is called by:
 16254 ;;		_interrupt_handler
 16255 ;; This function uses a non-reentrant model
 16256 ;;
 16257  1023                     _interrupt_PWMCapture:	
 16258                           
 16259                           ;pwm.c: 450: switch( ui8_Pulse_State )
 16260                           
 16261                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
 16262  1023  2868               	goto	i1l25171
 16263  1024                     i1l15543:	
 16264                           ;pwm.c: 452: {
 16265                           ;pwm.c: 454: case 0:
 16266                           
 16267                           
 16268                           ;pwm.c: 456: {
 16269                           ;pwm.c: 460: ui8_Pulse_State = 1;
 16270                           
 16271                           ;pwm.c: 461: ui16_Capt_Val0.b.lo = CCPR5L;
 16272  1024  2075  3190         	fcall	PL37	;call to abstracted procedure
 16273  1026  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 16274                           
 16275                           ;pwm.c: 462: ui16_Capt_Val0.b.hi = CCPR5H;
 16276  1027  0026               	movlb	6	; select bank6
 16277  1028  081D               	movf	29,w	;volatile
 16278  1029  0021               	movlb	1	; select bank1
 16279  102A  00AB               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
 16280                           
 16281                           ;pwm.c: 463: CCP5CON = 0x04;
 16282                           
 16283                           ;pwm.c: 464: break;
 16284  102B  287B               	ljmp	PL48	;call to abstracted procedure
 16285  102C                     i1l25161:	
 16286                           
 16287                           ;pwm.c: 472: {
 16288                           ;pwm.c: 476: ui8_Pulse_State = 2;
 16289  102C  3002               	movlw	2
 16290  102D  00D6               	movwf	_ui8_Pulse_State^(0+256)
 16291                           
 16292                           ;pwm.c: 477: ui16_Capt_Val1.b.lo = CCPR5L;
 16293  102E  0026               	movlb	6	; select bank6
 16294  102F  081C               	movf	28,w	;volatile
 16295  1030  0021               	movlb	1	; select bank1
 16296  1031  00AC               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
 16297                           
 16298                           ;pwm.c: 478: ui16_Capt_Val1.b.hi = CCPR5H;
 16299  1032  0026               	movlb	6	; select bank6
 16300  1033  081D               	movf	29,w	;volatile
 16301  1034  0021               	movlb	1	; select bank1
 16302  1035  00AD               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
 16303                           
 16304                           ;pwm.c: 479: CCP5CON = 0x05;
 16305  1036  3005               	movlw	5
 16306  1037  0026               	movlb	6	; select bank6
 16307  1038  009E               	movwf	30	;volatile
 16308                           
 16309                           ;pwm.c: 480: break;
 16310  1039  0008               	return
 16311  103A                     i1l15546:	
 16312                           ;pwm.c: 483: }
 16313                           ;pwm.c: 486: case 2:
 16314                           
 16315                           
 16316                           ;pwm.c: 488: {
 16317                           ;pwm.c: 492: ui8_Pulse_State = 1;
 16318                           
 16319                           ;pwm.c: 493: ui16_Capt_Val2.b.lo = CCPR5L;
 16320  103A  2075  3190         	fcall	PL37	;call to abstracted procedure
 16321  103C  00AE               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
 16322                           
 16323                           ;pwm.c: 494: ui16_Capt_Val2.b.hi = CCPR5H;
 16324  103D  0026               	movlb	6	; select bank6
 16325  103E  081D               	movf	29,w	;volatile
 16326  103F  0021               	movlb	1	; select bank1
 16327  1040  00AF               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
 16328                           
 16329                           ;pwm.c: 495: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
 16330  1041  082F               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 16331  1042  0023               	movlb	3	; select bank3
 16332  1043  00DB               	movwf	(_ui16_PWM_Freq_In+1)^(0+384)
 16333  1044  0021               	movlb	1	; select bank1
 16334  1045  082E               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 16335  1046  0023               	movlb	3	; select bank3
 16336  1047  00DA               	movwf	_ui16_PWM_Freq_In^(0+384)
 16337  1048  0021               	movlb	1	; select bank1
 16338  1049  082A               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
 16339  104A  0023               	movlb	3	; select bank3
 16340  104B  02DA               	subwf	_ui16_PWM_Freq_In^(0+384),f
 16341  104C  0021               	movlb	1	; select bank1
 16342  104D  082B               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 16343  104E  0023               	movlb	3	; select bank3
 16344  104F  3BDB               	subwfb	(_ui16_PWM_Freq_In+1)^(0+384),f
 16345                           
 16346                           ;pwm.c: 496: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
 16347  1050  0021               	movlb	1	; select bank1
 16348  1051  082D               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
 16349  1052  0023               	movlb	3	; select bank3
 16350  1053  00EB               	movwf	(_ui16_Duty_Cycle_In+1)^(0+384)
 16351  1054  0021               	movlb	1	; select bank1
 16352  1055  082C               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
 16353  1056  0023               	movlb	3	; select bank3
 16354  1057  00EA               	movwf	_ui16_Duty_Cycle_In^(0+384)
 16355  1058  0021               	movlb	1	; select bank1
 16356  1059  082A               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
 16357  105A  0023               	movlb	3	; select bank3
 16358  105B  02EA               	subwf	_ui16_Duty_Cycle_In^(0+384),f
 16359  105C  0021               	movlb	1	; select bank1
 16360  105D  082B               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 16361  105E  0023               	movlb	3	; select bank3
 16362  105F  3BEB               	subwfb	(_ui16_Duty_Cycle_In+1)^(0+384),f
 16363                           
 16364                           ;pwm.c: 497: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
 16365  1060  0021               	movlb	1	; select bank1
 16366  1061  082F               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 16367  1062  00AB               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
 16368  1063  082E               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 16369  1064  00AA               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 16370                           
 16371                           ;pwm.c: 501: if( ui16_Duty_Cycle_In )
 16372  1065  287B               	ljmp	PL48	;call to abstracted procedure
 16373  1066                     i1l25167:	
 16374                           
 16375                           ;pwm.c: 526: {
 16376                           ;pwm.c: 530: ui8_Pulse_State = 0;
 16377  1066  01D6               	clrf	_ui8_Pulse_State^(0+256)
 16378                           
 16379                           ;pwm.c: 531: break;
 16380  1067  0008               	return
 16381  1068                     i1l25171:	
 16382  1068  0022               	movlb	2	; select bank2
 16383  1069  0856               	movf	_ui8_Pulse_State^(0+256),w
 16384                           
 16385                           ; Switch size 1, requested type "space"
 16386                           ; Number of cases is 3, Range of values is 0 to 2
 16387                           ; switch strategies available:
 16388                           ; Name         Instructions Cycles
 16389                           ; simple_byte           10     6 (average)
 16390                           ; direct_byte           12     6 (fixed)
 16391                           ; jumptable            260     6 (fixed)
 16392                           ; rangetable             7     4 (fixed)
 16393                           ; spacedrange           11     6 (fixed)
 16394                           ; locatedrange           3     3 (fixed)
 16395                           ;	Chosen strategy is simple_byte
 16396  106A  3A00               	xorlw	0	; case 0
 16397  106B  1903               	skipnz
 16398  106C  2824               	goto	i1l15543
 16399  106D  3A01               	xorlw	1	; case 1
 16400  106E  1903               	skipnz
 16401  106F  282C               	goto	i1l25161
 16402  1070  3A03               	xorlw	3	; case 2
 16403  1071  1903               	skipnz
 16404  1072  283A               	goto	i1l15546
 16405  1073  2866               	goto	i1l25167
 16406  1074  0008               	return
 16407  1075                     __end_of_interrupt_PWMCapture:	
 16408  1075                     PL37:	
 16409  1075  01D6               	clrf	_ui8_Pulse_State^(0+256)
 16410  1076  0AD6               	incf	_ui8_Pulse_State^(0+256),f
 16411  1077  0026               	movlb	6	; select bank6
 16412  1078  081C               	movf	28,w	;volatile
 16413  1079  0021               	movlb	1	; select bank1
 16414  107A  0008               	return
 16415  107B                     PL48:	
 16416  107B  3004               	movlw	4
 16417  107C  0026               	movlb	6	; select bank6
 16418  107D  009E               	movwf	30	;volatile
 16419  107E  0008               	return
 16420                           
 16421                           	psect	text2088
 16422  1A7F                     __ptext2088:	
 16423 ;; =============== function _interrupt_PWMCapture ends ============
 16424                           
 16425                           
 16426 ;; *************** function _PWM_CTRL *****************
 16427 ;; Defined at:
 16428 ;;		line 200 in file "../pwm.c"
 16429 ;; Parameters:    Size  Location     Type
 16430 ;;		None
 16431 ;; Auto vars:     Size  Location     Type
 16432 ;;		None
 16433 ;; Return value:  Size  Location     Type
 16434 ;;		None               void
 16435 ;; Registers used:
 16436 ;;		wreg, status,2, status,0
 16437 ;; Tracked objects:
 16438 ;;		On entry : 1F/0
 16439 ;;		On exit  : 1C/0
 16440 ;;		Unchanged: FFFE0/0
 16441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16442 ;;      Params:         0       0       0       0       0       0       0       0
 16443 ;;      Locals:         0       0       0       0       0       0       0       0
 16444 ;;      Temps:          0       0       0       0       0       0       0       0
 16445 ;;      Totals:         0       0       0       0       0       0       0       0
 16446 ;;Total ram usage:        0 bytes
 16447 ;; Hardware stack levels used:    1
 16448 ;; This function calls:
 16449 ;;		Nothing
 16450 ;; This function is called by:
 16451 ;;		_interrupt_handler
 16452 ;; This function uses a non-reentrant model
 16453 ;;
 16454  1A7F                     _PWM_CTRL:	
 16455                           
 16456                           ;pwm.c: 288: ui8_PWM_FreqCnt++;
 16457                           
 16458                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 16459  1A7F  0021               	movlb	1	; select bank1
 16460  1A80  3064               	movlw	100
 16461  1A81  0ADD               	incf	_ui8_PWM_FreqCnt^(0+128),f
 16462                           
 16463                           ;pwm.c: 290: if( ui8_PWM_FreqCnt >= 100 )
 16464  1A82  025D               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 16465  1A83  1C03               	skipc
 16466  1A84  2A89               	goto	i1l25043
 16467                           
 16468                           ;pwm.c: 292: {
 16469                           ;pwm.c: 294: ui8_PWM_FreqCnt = 0;
 16470  1A85  01DD               	clrf	_ui8_PWM_FreqCnt^(0+128)
 16471                           
 16472                           ;pwm.c: 295: LATC0 = 0;
 16473  1A86  0022               	movlb	2	; select bank2
 16474  1A87  100E               	bcf	14,0
 16475                           
 16476                           ;pwm.c: 298: }
 16477  1A88  0008               	return
 16478  1A89                     i1l25043:	
 16479                           
 16480                           ;pwm.c: 301: else
 16481                           ;pwm.c: 302: {
 16482                           ;pwm.c: 304: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 16483  1A89  0022               	movlb	2	; select bank2
 16484  1A8A  0855               	movf	_ui8_PWMoutvalue^(0+256),w
 16485  1A8B  0021               	movlb	1	; select bank1
 16486  1A8C  025D               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 16487  1A8D  1C03               	skipc
 16488  1A8E  0008               	return
 16489                           
 16490                           ;pwm.c: 306: {
 16491                           ;pwm.c: 308: LATC0 = 1;
 16492  1A8F  0022               	movlb	2	; select bank2
 16493  1A90  140E               	bsf	14,0
 16494  1A91  0008               	return
 16495  1A92                     __end_of_PWM_CTRL:	
 16496                           
 16497                           	psect	text2089
 16498  07FD                     __ptext2089:	
 16499 ;; =============== function _PWM_CTRL ends ============
 16500                           
 16501                           
 16502 ;; *************** function _Task1ms *****************
 16503 ;; Defined at:
 16504 ;;		line 54 in file "../interrupt.c"
 16505 ;; Parameters:    Size  Location     Type
 16506 ;;		None
 16507 ;; Auto vars:     Size  Location     Type
 16508 ;;		None
 16509 ;; Return value:  Size  Location     Type
 16510 ;;		None               void
 16511 ;; Registers used:
 16512 ;;		status,2, status,0
 16513 ;; Tracked objects:
 16514 ;;		On entry : 1C/0
 16515 ;;		On exit  : 1F/1
 16516 ;;		Unchanged: FFFE0/0
 16517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16518 ;;      Params:         0       0       0       0       0       0       0       0
 16519 ;;      Locals:         0       0       0       0       0       0       0       0
 16520 ;;      Temps:          0       0       0       0       0       0       0       0
 16521 ;;      Totals:         0       0       0       0       0       0       0       0
 16522 ;;Total ram usage:        0 bytes
 16523 ;; Hardware stack levels used:    1
 16524 ;; This function calls:
 16525 ;;		Nothing
 16526 ;; This function is called by:
 16527 ;;		_interrupt_handler
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530  07FD                     _Task1ms:	
 16531                           
 16532                           ;interrupt.c: 56: ui8_Task_Cont1ms++;
 16533                           
 16534                           ; Regs used in _Task1ms: [status]
 16535  07FD  0021               	movlb	1	; select bank1
 16536  07FE  0AE2               	incf	_ui8_Task_Cont1ms^(0+128),f
 16537  07FF  0008               	return
 16538  0800                     __end_of_Task1ms:	
 16539                           
 16540                           	psect	text2090
 16541  0000                     __ptext2090:	
 16542 ;; =============== function _Task1ms ends ============
 16543                           
 16544  007E                     btemp	set	126	;btemp
 16545  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.81 build 7503 
Symbol Table                                                                                   Wed Dec 13 15:23:08 2017

                              EOL@_dcnt_7360 0222                                EOL@_dcnt_7361 0223  
                              EOL@_dcnt_7370 022C                                EOL@_dcnt_7362 0224  
                              EOL@_dcnt_7371 022D                                EOL@_dcnt_7363 0225  
                              EOL@_dcnt_7372 022E                                EOL@_dcnt_7364 0226  
                              EOL@_dcnt_7373 022F                                EOL@_dcnt_7365 0227  
                              EOL@_dcnt_7374 0230                                EOL@_dcnt_7366 0228  
                              EOL@_dcnt_7375 0231                                EOL@_dcnt_7367 0229  
                              EOL@_dcnt_7359 0221                                EOL@_dcnt_7368 022A  
                              EOL@_dcnt_7369 022B                            ?_PWM_Capture_init 0070  
                                          _B 01A0                                            pc 0002  
                                         _RD 0CA8                                           _WR 0CA9  
                               ___awdiv@sign 0037                           ??_PWM_Capture_init 002C  
                                         _pt 004D                          ___wmul@multiplicand 002E  
                           i1___wmul@product 0074                     _SIBFS_Pic_etat_monitor_b 00CD  
           BVH2_Appl_Layer@X_Sb4_Intergrator 0167                          __end_of_system_init 0765  
BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00C4                                  ?i1_ADC_Read 0070  
                                ?i1_ADC_Wait 0070                                          _GIE 005F  
                                        _EOL 0917                                          _RC5 0075  
                                        _PR2 001B                                          _sum 0127  
                           _ui16_IPhase_bldc 00B0                                          wreg 0009  
                          _ui16_IPhase1_bldc 0129                           __ELINMIntTFrameMax 01C6  
                          _ui16_IPhase2_bldc 01D2                           __ELINMIntTFrameMin 0123  
                          _ui16_IPhase3_bldc 01D4                    BVH2_Appl_Layer@Cb24_Reset 0233  
                                       ?_EOL 0070                          __ELINMIntTHeaderMax 01C8  
                        __ELINMIntTHeaderMin 0125                      __end_of_interrrupt_bldc 1F6E  
                                       _C1IE 0495                         __end_of_EnableMCP201 07C9  
                                       l1851 0000                                         l1861 0000  
                                       l6021 0000                                         l1854 0000  
                                       l1857 0348                                         l1882 0000  
                                       l1876 0000                                         l1879 0000  
                                       l3908 0000                                         l3861 050D  
                                       l3790 0000                                         l5900 0B12  
                                       l5901 0B10                                         l5830 0625  
                                       l5910 0B3B                                         l3879 0542  
                                       l5911 0B39                                         l5832 0629  
                                       l5920 0B49                                         l5921 0B47  
                                       l5905 0B19                                         l5930 0B57  
                                       l5906 0B17                                         l5819 0000  
                                       l5931 0B55                                         l5915 0B42  
                                       l5940 0B80                                         l5916 0B40  
                                       l5941 0B7E                                         l5925 0B50  
                                       l5950 0B8E                                         l5926 0B4E  
                                       l5951 0B8C                                         l5935 0B5E  
                                       l5960 0B9C                                         l5936 0B5C  
                                       l5880 0AF6                                         l5961 0B9A  
                                       l5945 0B87                                         l5881 0AF4  
                                       l5946 0B85                                         l5890 0B04  
                                       l5955 0B95                                         l5891 0B02  
                                       l5956 0B93                                         l5965 0BA3  
                                       l5885 0AFD                                         l5966 0BA1  
                                       l5886 0AFB                                         l7831 1AA4  
                                       l5895 0B0B                                         l5896 0B09  
                                       l7834 0000                                         l7828 0000  
                                       _ADON 04E8                                         _CFGS 0CAE  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         _PIE1 0091  
                                       _PIE2 0092                                         _PIE3 0093  
                                       u4355 1ABA                                         _PEIE 005E  
                                       u4365 1AF0                                         _RCIF 008D  
                                       u5445 0282                                         u9025 1B41  
                                       u9105 10C3                                         u9155 068F  
                                       u9485 04BB                                         u9495 04C9  
                                       u9861 11D9                                         _TMR0 0015  
                                       _TMR2 001A                                         _TMR4 0415  
                                       _TMR6 041C                                         _WREN 0CAA  
                                       _Bcnt 00C8                             _ui8_Task_Cont1ms 00E2  
                           _ui8_Task_Cont3ms 0157                             _ui8_Task_Cont5ms 0158  
                           _ui16_PWM_Freq_In 01DA                   BVH2_Appl_Layer@Cb24_BadCnt 01C2  
                                       _main 0121                                         fsr0h 0005  
                                       fsr1h 0007                                         fsr0l 0004  
                                       indf0 0000                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                          _ui8_b_DResLocID_c 004F                          timer_init@ui8_TmrNb 002D  
                           __end_of_ADC_Init 076E                             __end_of_ADC_Read 035E  
                           __end_of_ADC_Wait 0346                                         start 0029  
                            _ui8_sampleState 0160                             __end_of_BLDCWait 1FF4  
                     __size_of_PWM_Write_Out 0005                           _ui16_comm_time_max 00B6  
                                      S31595 00CE                                        S31599 0092  
            __end_of__ELINMIntReceiveMessage 0728                                        ??_EOL 0041  
                                i1_commutate 1BE5                                ?_InitMotorRun 0070  
                            __end_of_Task1ms 0800                          __ELINMIntGetPointer 0710  
                               cksum@counter 002E                                        l20000 0000  
                                      l20013 06A7                                        l20016 0000  
                                      l11600 07C4                                        l11601 07C2  
                                      l11602 0000                                        l11603 0000  
                                      l30003 12CB                                        l30021 0000  
                                      l30005 0000                                        l11606 0000  
                                      l30111 0000                                        l30201 143E  
                                      l30121 0000                                        l30105 0000  
                                      l30113 139D                                        l30017 12F9  
                                      l11545 0F31                                        l31001 0000  
                                      l30203 0000                                        l30131 0000  
                                      l30123 0000                                        l30107 0000  
                                      l30051 1331                                        l30027 130E  
                                      l30043 1313                                        l30019 0000  
                                      l31011 0C5B                                        l31003 0000  
                                      l11661 0FE1                                        l30301 151B  
                                      l30205 1449                                        l30133 0000  
                                      l30125 0000                                        l30117 13AA  
                                      l30109 0000                                        l30141 13CA  
                                      l30061 0000                                        l30029 1310  
                                      l11549 0000                                        l31021 0000  
                                      l31013 0000                                        l31005 0000  
                                      l11590 07B4                                        l11662 0FE5  
                                      l11566 06C2                                        l11591 07B2  
                                      l11663 0FE9                                        l30311 152F  
                                      l30303 0000                                        l30231 14AE  
                                      l30207 0000                                        l30151 0000  
                                      l30135 0000                                        l30119 0000  
                                      l30127 13B3                                        l30071 1354  
                                      l30063 0000                                        l30055 1336  
                                      l30047 132B                                        l31111 0000  
                                      l31031 0CAA                                        l31023 0000  
                                      l31015 0000                                        l31007 0000  
                                      l11592 0000                                        l11664 0FED  
                                      l11665 0FF2                                        l30401 15BF  
                                      l30305 0000                                        l30217 0000  
                                      l30153 0000                                        l30145 13D2  
                                      l30137 0000                                        l30073 0000  
                                      l30065 0000                                        l30161 13E5  
                                      l11569 06CB                                        l31201 0000  
                                      l31121 0000                                        l31113 0000  
                                      l31105 0D40                                        l31041 0CD4  
                                      l31025 0000                                        l31017 0000  
                                      l31009 0000                                        l31033 0CAD  
                                      l11666 0FF6                                        l16010 1780  
                                      l16002 1765                                        l11595 07BC  
                                      l11667 0FFA                                        l16011 1782  
                                      l16003 1774                                        l30411 0000  
                                      l30403 0000                                        l30331 154F  
                                      l30323 1544                                        l30243 14C4  
                                      l30171 0000                                        l30155 0000  
                                      l30083 0000                                        l30075 0000  
                                      l30059 0000                                        l30067 1346  
                                      l31211 0000                                        l31203 0000  
                                      l31115 0000                                        l31107 0D43  
                                      l31051 0000                                        l31027 0000  
                                      l31019 0000                                        l31035 0CBC  
                                      l11596 07BA                                        l11668 0FFE  
                                      l16012 1793                                        l16004 1767  
                                      l11685 0000                                        l11597 0000  
                                      l11669 0000                                        l16005 1769  
                                      l30421 161D                                        l30413 0000  
                                      l30405 15C7                                        l30317 153D  
                                      l30261 0000                                        l30229 14CE  
                                      l30253 14CF                                        l30149 0000  
                                      l30085 0000                                        l30501 0000  
                                      l31221 0000                                        l31213 0DBB  
                                      l31141 0000                                        l31117 0000  
                                      l31061 0CF6                                        l31053 0000  
                                      l31045 0000                                        l31037 0CBE  
                                      l31029 0000                                        l31301 0000  
                                      l30423 1622                                        l30351 156B  
                                      l30247 0000                                        l30239 14B6  
                                      l30191 1426                                        l30167 0000  
                                      l30095 137C                                        l30087 0000  
                                      l30079 135E                                        l30183 1419  
                                      l30503 0000                                        l30511 0000  
                                      l31223 0000                                        l31151 0000  
                                      l31143 0000                                        l31207 0DA2  
                                      l31135 0D6A                                        l31127 0D65  
                                      l31119 0000                                        l31071 0000  
                                      l31063 0CF9                                        l31055 0000  
                                      l31047 0000                                        l31311 0000  
                                      l31303 0000                                        l16008 177E  
                                      l30441 0000                                        l30433 1675  
                                      l30425 0000                                        l30409 15C9  
                                      l30353 0000                                        l30345 0000  
                                      l30281 14FD                                        l30257 0000  
                                      l30249 0000                                        l30193 0000  
                                      l30185 0000                                        l30177 0000  
                                      l30169 0000                                        l30089 136F  
                                      l30505 0000                                        l30521 0000  
                                      l30513 0000                                        l30601 0000  
                                      l31241 0E1B                                        l31225 0000  
                                      l31217 0000                                        l31209 0DAA  
                                      l31161 0000                                        l31153 0000  
                                      l31145 0000                                        l31129 0D68  
                                      l31073 0000                                        l31049 0000  
                                      l31313 0000                                        l31305 0000  
                                      l31401 0000                                        l31321 0000  
                                      l30451 1701                                        l30443 0000  
                                      l30419 1615                                        l30371 0000  
                                      l30355 0000                                        l30347 0000  
                                      l30195 0000                                        l30179 0000  
                                      l30099 1385                                        l30531 0000  
                                      l30523 0000                                        l30515 0000  
                                      l30507 0000                                        l30611 0000  
                                      l30603 0000                                        l31251 0000  
                                      l31227 0000                                        l31219 0000  
                                      l31171 0000                                        l31163 0D88  
                                      l31155 0000                                        l31147 0000  
                                      l31139 0D72                                        l31091 0000  
                                      l31083 0D1B                                        l31075 0000  
                                      l31067 0000                                        l31315 0000  
                                      l31307 0000                                        l31403 0000  
                                      l31331 0000                                        l31323 0128  
                                      l30437 167C                                        l30381 159A  
                                      l30373 0000                                        l30357 0000  
                                      l30277 0000                                        l30197 1434  
                                      l30461 1AC8                                        l30541 0000  
                                      l30533 0000                                        l30525 0000  
                                      l30517 0000                                        l30613 0000  
                                      l30605 0000                                        l30621 0000  
                                      l30701 0000                                        l31253 0E38  
                                      l31245 0E26                                        l31229 0000  
                                      l31181 0000                                        l31173 0000  
                                      l31165 0000                                        l31157 0000  
                                      l31149 0000                                        l31093 0000  
                                      l31085 0D1E                                        l31077 0000  
                                      l31069 0000                                        l31309 0000  
                                      l31261 0000                                        l31413 0000  
                                      l31405 0000                                        l31341 0000  
                                      l31333 0000                                        l31317 0000  
                                      l30439 0000                                        l30391 15A8  
                                      l30383 0000                                        l30367 1583  
                                      l30359 0000                                        l30295 0000  
                                      l30279 0000                                        l30199 0000  
                                      l30471 0000                                        l30543 0000  
                                      l30535 0000                                        l30527 0000  
                                      l30519 0000                                        l30615 0000  
                                      l30607 0000                                        l30631 0000  
                                      l30623 0000                                        l30703 0000  
                                      l31191 0000                                        l31183 0000  
                                      l31175 0000                                        l31167 0000  
                                      l31159 0000                                        l31095 0000  
                                      l30711 093F                                        l31271 0000  
                                      l31263 0000                                        l31431 0252  
                                      l31407 0000                                        l31327 0000  
                                      l31319 0000                                        l13648 0000  
                                      l30449 16EC                                        l30393 0000  
                                      l30385 0000                                        l30369 0000  
                                      l30297 1514                                        l30481 0000  
                                      l30545 0000                                        l30537 0000  
                                      l30529 0000                                        l30553 0000  
                                      l30617 0000                                        l30609 0000  
                                      l30641 0000                                        l30633 0000  
                                      l30625 0000                                        l30705 0000  
                                      l31249 0000                                        l31193 0000  
                                      l31185 0000                                        l31177 0000  
                                      l31169 0000                                        l31097 0000  
                                      l31089 0000                                        l30801 0000  
                                      l31281 0000                                        l31273 0000  
                                      l31265 0000                                        l31361 0000  
                                      l31353 0000                                        l31409 0232  
                                      l31345 0000                                        l31337 0000  
                                      l31329 0000                                        l13658 0000  
                                      l30467 0000                                        l30459 0000  
                                      l30491 0000                                        l30483 0000  
                                      l30475 040F                                        l30547 0000  
                                      l30539 0000                                        l30555 0000  
                                      l30643 0000                                        l30635 0000  
                                      l30627 0000                                        l30619 0000  
                                      l30651 0000                                        l31195 0000  
                                      l31187 0D99                                        l31179 0000  
                                      l31099 0000                                        l30811 0000  
                                      l30803 0000                                        l30731 0972  
                                      l30723 0954                                        l30715 0000  
                                      l31259 0E3A                                        l30707 0000  
                                      l31291 0000                                        l31283 0000  
                                      l31275 0000                                        l31267 0000  
                                      l31419 0243                                        l31371 01A3  
                                      l31363 0000                                        l31355 0000  
                                      l31339 014A                                        l15524 1BE4  
                                      l15533 0000                                        l25221 0000  
                                      l30469 0000                                        l30493 0000  
                                      l30485 0000                                        l30557 0000  
                                      l30549 0000                                        l30581 02F0  
                                      l30573 02D2                                        l30565 02B4  
                                      l30645 0000                                        l30637 0000  
                                      l30629 0000                                        l30653 0000  
                                      l31197 0000                                        l31189 0000  
                                      l30901 0000                                        l30821 0000  
                                      l30813 0000                                        l30805 0000  
                                      l30733 0000                                        l30725 0000  
                                      l30741 0999                                        l30717 0000  
                                      l31293 0000                                        l31285 0000  
                                      l31277 0000                                        l31269 0000  
                                      l31381 0000                                        l31373 01DC  
                                      l31365 0000                                        l31357 0000  
                                      l25231 0000                                        l25223 0000  
                                      l30399 0000                                        l30495 0000  
                                      l30487 0000                                        l30479 0000  
                                      l30591 0000                                        l30583 02F4  
                                      l30575 02D6                                        l30567 02B8  
                                      l30559 0000                                        l30647 0000  
                                      l30639 0000                                        l30671 0000  
                                      l30663 0000                                        l31199 0000  
                                      l30911 0000                                        l30903 0000  
                                      l30831 0000                                        l30823 0000  
                                      l30815 0000                                        l30807 0000  
                                      l30735 0000                                        l30743 09A2  
                                      l30727 0000                                        l30719 094F  
                                      l31295 0000                                        l31287 0000  
                                      l31279 0000                                        l31391 0208  
                                      l31383 0000                                        l31375 0000  
                                      l31367 0000                                        l31359 0000  
                                      l15800 12BE                                        l25241 1BAE  
                                      l25233 1BA2                                        l25225 1B96  
                                      l30497 0000                                        l30489 0000  
                                      l30593 0000                                        l30585 0000  
                                      l30649 0000                                        l30681 0000  
                                      l30673 0000                                        l30665 0000  
                                      l30921 0000                                        l30913 0000  
                                      l30905 0000                                        l30825 0000  
                                      l30817 0000                                        l30809 0000  
                                      l30737 0995                                        l30729 0000  
                                      l31297 0000                                        l31289 0000  
                                      l31393 0000                                        l31385 0000  
                                      l31377 0000                                        l25251 0000  
                                      l25243 0000                                        l25235 0000  
                                      l25227 0000                                        l15539 0000  
                                      l15811 1329                                        l30499 0000  
                                      l30595 0000                                        l30587 0000  
                                      l30691 0000                                        l30683 0000  
                                      l30675 0000                                        l30667 0000  
                                      l30931 0000                                        l30923 0000  
                                      l30915 0000                                        l30907 0000  
                                      l30851 0000                                        l30843 0000  
                                      l30835 0A74                                        l30827 0000  
                                      l30819 0000                                        l30763 0000  
                                      l31299 0000                                        l31395 0000  
                                      l31379 0000                                        l24701 0000  
                                      l25181 0000                                        l25261 0000  
                                      l25253 0000                                        l25245 0000  
                                      l25237 0000                                        l25229 0000  
                                      l15805 13FC                                        l30597 0000  
                                      l30589 0000                                        l30693 0000  
                                      l30685 0000                                        l30677 0000  
                                      l30669 0000                                        l30941 0000  
                                      l30933 0000                                        l30925 0000  
                                      l30917 0000                                        l30909 0000  
                                      l30853 0000                                        l30829 0000  
                                      l30781 0A0F                                        l30765 0000  
                                      l30757 09C3                                        l31397 0000  
                                      l31389 0206                                        l15902 1531  
                                      l24711 0000                                        l24703 1AE4  
                                      l25183 0000                                        l25191 0000  
                                      l25263 0000                                        l25255 0000  
                                      l25247 0000                                        l25239 0000  
                                      l25271 036E                                        l15911 1559  
                                      l15751 1208                                        l15735 119B  
                                      l30599 0000                                        l30695 0000  
                                      l30687 0000                                        l30679 0000  
                                      l30951 0000                                        l30943 0000  
                                      l30935 0000                                        l30927 0000  
                                      l30919 0000                                        l30855 0000  
                                      l30847 0A92                                        l30839 0A86  
                                      l30791 0000                                        l30759 09CA  
                                      l31399 0000                                        l15752 11F6  
                                      l24705 0000                                        l25177 0000  
                                      l25185 0000                                        l25257 1BC6  
                                      l25249 1BBA                                        l25273 0370  
                                      l26401 0000                                        l15905 1546  
                                      l30697 0000                                        l30689 0000  
                                      l30961 0000                                        l30953 0000  
                                      l30945 0000                                        l30937 0000  
                                      l30929 0000                                        l30881 0000  
                                      l30873 0AE2                                        l30865 0AD2  
                                      l30857 0000                                        l30849 0000  
                                      l30793 0000                                        l30785 0000  
                                      l30777 0A04                                        l15738 11D5  
                                      l24707 0000                                        l25179 0000  
                                      l25187 0000                                        l25259 0000  
                                      l25267 1BD2                                        l25275 0373  
                                      l25283 037B                                        l25531 026D  
                                      l25523 0000                                        l26411 0000  
                                      l26403 1B6B                                        l15763 1230  
                                      l15755 1201                                        l30699 0000  
                                      l30971 0BC3                                        l30963 0000  
                                      l30955 0000                                        l30947 0000  
                                      l30939 0000                                        l30891 0000  
                                      l30883 0000                                        l30875 0000  
                                      l30859 0000                                        l30795 0000  
                                      l30787 0000                                        l15852 140B  
                                      l15772 1256                                        l24709 0000  
                                      l25189 0000                                        l25277 0375  
                                      l25269 0000                                        l25541 027A  
                                      l25533 0000                                        l25525 0264  
                                      l25517 0000                                        l31597 04F2  
                                      l26413 0000                                        l26405 0000  
                                      l15917 1563                                        l15781 12E4  
                                      l30981 0000                                        l30973 0000  
                                      l30965 0000                                        l30957 0000  
                                      l30949 0000                                        l30893 0000  
                                      l30885 0000                                        l30877 0000  
                                      l30869 0ADD                                        l30797 0000  
                                      l30789 0000                                        l15846 13CC  
                                      l24671 0000                                        l25279 0378  
                                      l25551 0000                                        l25543 0000  
                                      l25519 0000                                        l26407 0000  
                                      l15767 1235                                        l15759 120E  
                                      l30991 0C0D                                        l30983 0000  
                                      l30975 0000                                        l30967 0000  
                                      l30959 0000                                        l30895 0000  
                                      l30887 0000                                        l30879 0000  
                                      l30799 0000                                        l15960 16F2  
                                      l15952 1678                                        l15928 15B9  
                                      l24665 0000                                        l25553 028D  
                                      l25529 0000                                        l26409 1B74  
                                      l26417 1B7D                                        l15961 0000  
                                      l15769 1249                                        l30993 0000  
                                      l30985 0000                                        l30977 0000  
                                      l30969 0000                                        l30897 0000  
                                      l30889 0000                                        l15874 14AA  
                                      l15866 148A                                        l24667 0000  
                                      l24691 0000                                        l25555 0000  
                                      l25547 0000                                        l15883 14DD  
                                      l30995 0000                                        l30987 0000  
                                      l30979 0000                                        l30899 0000  
                                      l15948 1666                                        l15892 1501  
                                      l24669 0000                                        l24693 0000  
                                      l24685 0000                                        l25557 0295  
                                      l25549 0289                                        l15869 14C8  
                                      l30997 0000                                        l30989 0000  
                                      l15886 150E                                        l24687 0000  
                                      l26391 1B59                                        l17831 1B8E  
                                      l15887 14EB                                        l30999 0000  
                                      l15888 14E6                                        l24689 0000  
                                      l24697 0000                                        l26393 0000  
                                      l26385 0000                                        l15889 14E9  
                                      l24699 0000                                        l26395 0000  
                                      l26387 1B54                                        l19700 0000  
                                      l28341 0000                                        l26397 1B62  
                                      l26389 0000                                        l17854 038C  
                                      l26399 0000                                        l28345 0351  
                                      l28337 0000                                        l25961 0000  
                                      l28603 0000                                        l28611 0000  
                                      l29323 0000                                        l25963 0000  
                                      l29331 0000                                        l17868 0000  
                                      l28605 0000                                        l28613 0000  
                                      l28621 0000                                        l28701 0000  
                                      l25965 0000                                        l29501 0000  
                                      l29421 0000                                        l29413 0536  
                                      l29341 0000                                        l29333 0000  
                                      l29325 0430                                        l28607 0000  
                                      l28615 0000                                        l28631 0000  
                                      l28623 0000                                        l28711 0000  
                                      l29511 0000                                        l29503 0000  
                                      l29431 0556                                        l29415 0000  
                                      l29351 0000                                        l29343 0000  
                                      l29335 0000                                        l28609 0000  
                                      l28617 0000                                        l28633 0000  
                                      l28625 0000                                        l28705 0000  
                                      l28721 0000                                        l28713 0000  
                                      l29513 0000                                        l29505 0000  
                                      l29441 0000                                        l29433 0000  
                                      l29425 054D                                        l29409 0000  
                                      l29361 04E2                                        l29345 0000  
                                      l29337 0000                                        l29329 043B  
                                      l19690 0000                                        l19762 173F  
                                      _C1OUT 088E                                        l28635 0000  
                                      l28627 0000                                        l28707 0000  
                                      l28803 0000                                        l28731 110C  
                                      l28723 0000                                        l28715 10F3  
                            __end_of___aldiv 10EB                                        l29531 0000  
                                      l29523 05C4                                        l29515 0000  
                                      l29507 0000                                        l29451 0000  
                                      l29443 0000                                        l29435 0000  
                                      l29427 0000                                        l29419 0540  
                                      l29363 04E4                                        l29355 04D7  
                                      l29339 0000                                        l29611 061B  
                                      l29603 0611                                        l28629 0000  
                                      l28821 0000                                        l28805 0000  
                                      l28813 1152                                        l28741 1120  
                                      l28725 0000                                        l28717 0000  
                                      l19765 0000                                        l19837 0000  
                                      l29541 05D4                                        l29533 0000  
                                      l29525 0000                                        l29517 05BB  
                                      l29509 0000                                        l29461 0000  
                                      l29445 0000                                        l29437 0000  
                                      l29365 04E6                                        l29381 04FC  
                                      l29357 04DB                                        l29349 0000  
                                      l29613 0000                                        l29605 0000  
                                      l29701 0000                                        l19678 0000  
                                      l28807 0000                                        l28735 0000  
                                      l28743 1122                                        l28719 0000  
                                      l28727 10FD                                        l28831 176B  
                                      l28903 0000                                        l29551 0000  
                                      l29543 0000                                        l29535 0000  
                                      l29527 0000                                        l29519 0000  
                                      l29471 0000                                        l29463 0000  
                                      l29455 0571                                        l29447 0000  
                                      l29439 0000                                        l29391 0513  
                                      l29367 04E8                                        l29359 04DD  
                                      l29623 062D                                        l29615 0620  
                                      l29607 0616                                        l29631 0000  
                                      l29711 0000                                        l29703 0FAD  
                                      l28673 0000                                        l28817 0000  
                                      l28761 0000                                        l28745 1111  
                                      l28737 111D                                        l28905 1B48  
                                      l28913 0000                                        l29561 05EE  
                                      l29553 0000                                        l29537 0000  
                                      l29529 0000                                        l29481 0000  
                                      l29473 0586                                        l29465 0000  
                                      l29457 0000                                        l29449 0568  
                                      l29393 0000                                        l29385 0506  
                                      l29617 0000                                        l29609 0000  
                                      l29641 0000                                        l29633 0000  
                                      l29625 0000                                        l29721 0000  
                                      l29713 0000                                        l29705 0FBE  
                                      l29801 0000                                        l19882 108F  
                                      l28819 0000                                        l28763 0000  
                                      l28739 0000                                        l28835 0000  
                                      l28827 0000                                        l28851 0000  
                                      l28907 0000                                        l29555 0000  
                                      l29547 05DD                                        l29539 0000  
                                      l29491 0000                                        l29483 0000  
                                      l29475 0000                                        l29467 0000  
                                      l29459 0000                                        l29571 0607  
                                      l29395 0517                                        l29379 04EC  
                                      l29635 0000                                        l29643 07D1  
                                      l29627 0000                                        l29651 0000  
                                      l29723 0000                                        l29715 0000  
                                      l29707 0000                                        l29731 0000  
                                      l19892 0000                                        l28669 0000  
                                      l28693 0000                                        l28837 1784  
                                      l28861 0000                                        l28853 0000  
                                      l28909 1B4C                                        l28917 1749  
                                      l28933 0000                                        l28925 0000  
                                      l29557 0000                                        l29549 0000  
                                      l29493 05A0                                        l29485 0000  
                                      l29469 0580                                        l29397 0000  
                                      l29645 07F2                                        l29637 0000  
                                      l29661 0000                                        l29717 0000  
                                      l29709 0FCB                                        l29741 101B  
                                      l29733 0000                                        l29725 0000  
                                      l29813 11C3                                        l29805 11A6  
                                      l28599 0000                                        l28791 0000  
                                      l28759 1118                                        l28847 0000  
                                      l28839 178D                                        l28863 0000  
                                      l28855 172B                                        l28871 0000  
                                      l28919 0000                                        l28951 0000  
                                      l28935 109E                                        l28927 0000  
                                      l29575 0000                                        l29559 0000  
                                      l29495 0000                                        l29487 0000  
                                      l29479 058F                                        l29399 0000  
                                      l29591 0000                                        l29639 0000  
                                      l29663 0000                                        l29655 0000  
                                      l29719 0000                                        l29671 0000  
                                      l29727 0000                                        l29911 0000  
                                      l29831 11C7                                        l29807 11BB  
                                      l29751 1178                                        l29743 0000  
                                      l28793 0000                                        l28785 1134  
                                      l28865 0000                                        l28857 172F  
                                      l28849 0000                                        l28881 0000  
                                      l28873 038F                                        l28961 10E2  
                                      l28953 10CE                                        l28945 10B1  
                                      l28937 0000                                        l29489 0000  
                                      l29569 05F3                                        l29593 0000  
                                      l29665 066E                                        l29649 0000  
                                      l29681 0000                                        l29673 0000  
                                      l29737 1014                                        l29729 0000  
                                      l29921 0000                                        l29913 0000  
                                      l29841 0000                                        l29833 0000  
                                      l29809 0000                                        l29761 1189  
                                      l29753 117C                                        l29745 116B  
                                      l28795 1141                                        l28955 0000  
                                      l28947 0000                                        l29499 05A9  
                                      l29595 0000                                        l29659 0665  
                                      l29675 0000                                        l29739 0000  
                                      l29923 126A                                        l29915 1260  
                                      l29843 0000                                        l29835 11DA  
                                      l29763 118C                                        l29755 1181  
                                      l28789 0000                                        l28877 0395  
                                      l28957 10D4                                        l28981 0000  
                                      l28965 0000                                        l29597 0000  
                                      l29589 0000                                        l29693 0FA4  
                                      l29685 0000                                        l29677 0000  
                                      l29669 0000                                        l29941 1287  
                                      l29933 1279                                        l29925 126D  
                                      l29909 0000                                        l29861 0000  
                                      l29845 0000                                        l29837 0000  
                                      l29781 0000                                        l29757 0000  
                                      l29749 0000                                        l28799 1143  
                                      l28879 0000                                        l28887 0000  
                                      l28959 0000                                        l28983 0698  
                                      l28975 0682                                        l28967 0000  
                                      l28991 0000                                        l29599 0000  
                                      l29695 0000                                        l29687 0000  
                                      l29679 0000                                        l29951 129C  
                                      l29943 128B                                        l29935 127E  
                                      l29927 1271                                        l29919 0000  
                                      l29871 0000                                        l29855 0000  
                                      l29839 0000                                        l29847 11E3  
                                      l28897 1B39                                        l28889 0000  
                                      l28985 0000                                        l28977 0000  
                                      l29697 0000                                        l29689 0000  
                                      l29953 129F                                        l29945 128E  
                                      l29937 0000                                        l29929 0000  
                                      l29881 121B                                        l29873 0000  
                                      l29857 11F3                                        l29849 0000  
                                      l29793 1197                                        l28899 0000  
                                      l28987 069D                                        l28995 06AF  
                                      l29963 12AB                                        l29955 0000  
                                      l29939 0000                                        l29891 122E  
                                      l29883 0000                                        l29875 0000  
                                      l29779 1190                                        l28997 0000  
                                      l29957 0000                                        l29949 0000  
                                      l29877 0000                                        l29869 0000  
                                      l29959 0000                                        l29799 0000  
                                      l29985 12B6                                        l29995 0000  
                                      l29899 0000                                        l29997 0000  
                                      l29999 0000                                        ?_main 0070  
                            __end_of___awdiv 029A                                        _EEPGD 0CAF  
                                      u11005 1604                                        u11015 1610  
                                      u11025 165C                                        u11063 16C9  
                                      u11073 16DA                              ___awdiv@divisor 0032  
                                      u11405 0AB4                                        u11415 0AC6  
                                      _T1CON 0018                                        u10485 1472  
                                      u11375 0A5F                                        _T2CON 001C  
                                      _LATB1 0869                                        _LATC0 0870  
                                      _LATB2 086A                                        _LATC1 0871  
                                      _LATC2 0872                                        _LATC3 0873  
                              _InitMotorStop 035E                                        _LATC4 0874  
                                      u10990 0000                                        _T4CON 0417  
                                      u10995 15EA                              __end_of___ltdiv 06A4  
                                      _T6CON 041E                              __end_of___lwdiv 1B51  
                            ___awdiv@counter 0036                                        _RCREG 0199  
                           ?_ELINMIntHandler 0070                                        _SENDB 0CF3  
                                      _RCSTA 019D                                        _TMR1H 0017  
                                      _TMR1L 0016                                        _SPBRG 019B  
                          _ui8_BlankingCount 00DB                            EnableMCP201@_dcnt 002C  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E                                        _TXREG 019A  
                                      _TXSTA 019E                          ___lmul@multiplicand 0030  
                          _ui16_PWM_Freq_mat 012D                       ?__ELINMIntCalcIDParity 0070  
                                      _cksum 07C9                         ?__ELINMIntGetPointer 002C  
   BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00C7                             __end_of_PWM_CTRL 1A92  
               ?_Cb56_UbatHandling_node_fcn2 0070                             __end_ofi1___wmul 1FAE  
          BVH2_Appl_Layer@Cb24_oMotorStalled 0138                                        status 0003  
                           __end_of_DiagInit 077F                          i1___wmul@multiplier 0070  
                                      wtemp0 007E                           __size_of_PWMReadDC 003E  
             ??_Cb34_PWM_Detection_node_fcn1 002C                           __size_ofi1___lwdiv 0025  
                        __size_ofi1_ADC_Read 0012                          __size_ofi1_ADC_Wait 0019  
                         _ui8_b_DResServID_c 015E                             _ui8_selected_lid 0054  
                BVH2_Appl_Layer@Cb19_Counter 01C0                  BVH2_Appl_Layer@Cb51_Counter 013A  
                             _NegativeAnswer 0F20                                  _system_init 0728  
                         _ui8_duty_cycle_mat 00E4                                 __end_of_main 025A  
                             ??_InitMotorRun 003E                              _PWM_trans_table 002D  
                        __ELINMIntInitialize 08F8                         __size_of_clear_timer 0021  
                             ?_InitMotorStop 0070                                       ??_main 0044  
                       __size_of_FILTER_Init 001E                         __size_of_FILTER_Ubat 0068  
                       __size_of_FILTER_Temp 0024                            ?_read_eeprom_data 0070  
                              ?_Receive_Diag 0070                         _interrupt_PWMCapture 1023  
                          ?_Get_Analog_Value 0070                 __end_of__ELINMIntSendMessage 0FDA  
                _ui16_NTC_Temp_bldc_mean_cal 01D8                           ??_read_eeprom_data 002C  
                              _PWM_Write_Out 062F                                       _ADCON0 009D  
                         ??_Get_Analog_Value 0038                                       _ADCON1 009E  
                                     ?_cksum 002C                        ??__ELINMIntGetPointer 002D  
                       ?__ELINMIntInitialize 0070                                       _CCP1AS 0295  
                                     _CCP1IE 048A                                       _CCP1IF 008A  
                                     _CCP2IE 0490                                       _CCP2IF 0090  
                                     _CCP3IE 049C                                       _CCP3IF 009C  
                                     _CCP4IE 049D                                       _CCP4IF 009D  
                                     _CCP5IE 049E                                       _CCP5IF 009E  
                                     _ADRESH 009C                                       _EEADRH 0192  
                                     _ADRESL 009B                                       _EEADRL 0191  
                                     _EEDATA 0193                                       _CCPR1H 0292  
                                     _CCPR2H 0299                                       _EEDATH 0194  
                                     _CCPR3H 0312                                       _CCPR1L 0291  
                                     _CCPR4H 0319                                       _CCPR2L 0298  
                                     _EEDATL 0193                                       _CCPR5H 031D  
                                     _CCPR3L 0311                                       _CCPR4L 0318  
                                     _CCPR5L 031C                                       _EECON1 0195  
                                     _EECON2 0196                             ___awdiv@dividend 0034  
                                  ADC_Read@i 002E                                       _ANSELA 018C  
                                     _ANSELB 018D                             ?_interrrupt_bldc 0070  
                              ?_SetDiagAlarm 0070                                       i1l1861 0000  
                                     i1l1854 0000                                       i1l1857 1F88  
                                     i1l3801 1F13                                       i1l3850 1F59  
                                     i1l3818 1E6E                                       i1l3908 0000  
                                     i1l3861 1CBF                                       i1l3787 0000  
                                     i1l3797 1DF4                                       i1l3879 1CF5  
                            _ui8_PWM_FreqCnt 00DD                                       _INTCON 000B  
                                     i1l9651 0000                                       _FVRCON 0117  
                         _ui8_Task_Cont100ms 00E1            __ELINMIntReceiveMessage@_ELINM_id 0037  
                                     _OSCCON 0099                ??_Cb56_UbatHandling_node_fcn2 002C  
                                     u923_25 1C6C                                       u924_25 1C7A  
                                     _TMR0IE 005D                                       _TMR1IE 0488  
                                     _TMR1IF 0088                                       u845_25 1E46  
                                     _TMR2IE 0489                                       _TMR2IF 0089  
                                     u838_25 1DD4                                       _TMR4IE 0499  
                                     _TMR4IF 0099                                       _SPBRGH 019C  
                                     _TMR6IE 049B                                       _TMR6IF 009B  
                                     u944_25 1FC3                                       _WDTCON 0097  
       BVH2_Appl_Layer@Sb1_Logical_Operator1 023B         BVH2_Appl_Layer@Sb1_Logical_Operator2 0228  
       BVH2_Appl_Layer@Sb1_Logical_Operator3 0234         BVH2_Appl_Layer@Sb1_Logical_Operator5 0235  
                     __end_of_NegativeAnswer 0F30                                    ??_Task1ms 0070  
                                 _MotorFlags 004B   BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C  
                     __ELINMIntMessageBuffer 0254                                       ___lmul 173B  
                                  ??___aldiv 0034                                       ___tmul 06A4  
                                     ___wmul 038D                                    ??___awdiv 0036  
                  BVH2_Appl_Layer@Sb4_PI_sum 023E                                    ??___ltdiv 003B  
                                  ??___lwdiv 0030                              _ui8_PWMinDC_sav 00DF  
                           ___awdiv@quotient 0038                                       _my_msg 01B0  
                          _write_eeprom_data 1A92            BVH2_Appl_Layer@Cb24_oStalledAlarm 0139  
                                     clrloop 07F8                            __end_of_PWMReadDC 0672  
                             ??_Receive_Diag 003A                            __end_ofi1___lwdiv 1FD3  
                         EOL@ui8_b_DResB0_RD 0234                           EOL@ui8_b_DResB1_RD 0235  
                         EOL@ui8_b_DResB2_RD 0236                           EOL@ui8_b_DResB3_RD 0237  
                      ?_interrupt_PWMCapture 0070                           EOL@ui8_b_DResB4_RD 0233  
                         EOL@ui8_b_DResB5_RD 0232                           ?_write_eeprom_data 0033  
                      __size_of_EnableMCP201 001B                                    ?_ADC_Init 0070  
                                  ?_ADC_Read 002C                                    ?_ADC_Wait 0070  
                             ?_PWM_Write_Out 0070                                    ?_BLDCWait 0070  
                   __size_of_BVH2_Appl_Layer 05A0                        ??__ELINMIntInitialize 002C  
                             ??_SetDiagAlarm 002D                          ??_write_eeprom_data 0034  
           __size_of__ELINMIntReceiveMessage 0015             BVH2_Appl_Layer@Cb9_oCurrentAlarm 013E  
                      __end_of_FILTER_IPhase 1AC6                     ??__ELINMIntResetProtocol 0070  
                            ?_NegativeAnswer 0070                          _ui8_duty_cycle_BLDC 0050  
                             __pcstackCOMMON 0070                              _ui8_PWMoutvalue 0155  
                               __pidataBANK0 0000                                 __pidataBANK1 0000  
                               __pidataBANK2 0000                           _ui16_dryRun_Thresh 01EE  
                              __end_of_cksum 07F7                                 _EnableMCP201 07AE  
                            ??_InitMotorStop 002C         __size_of_Cb56_UbatHandling_node_fcn2 0036  
     __ELINMIntGetPointer@_ELINMInt_position 002C                    __end_of_write_eeprom_data 1AAA  
            __ELINMIntSendMessage@_ELINM_chk 0034              __ELINMIntSendMessage@_ELINM_idr 0032  
            __ELINMIntSendMessage@_ELINM_tid 0033                                    ?_PWM_CTRL 0070  
                               ??i1_ADC_Read 0072                                    ?i1___wmul 0070  
                               ??i1_ADC_Wait 0070                                    ?_DiagInit 0070  
                      Transmit_LIN_8Bytes@B0 0037                        Transmit_LIN_8Bytes@B1 0038  
                      Transmit_LIN_8Bytes@B2 0039                        Transmit_LIN_8Bytes@B3 003A  
                      Transmit_LIN_8Bytes@B4 003B                        Transmit_LIN_8Bytes@B5 003C  
                      Transmit_LIN_8Bytes@B6 003D                        Transmit_LIN_8Bytes@B7 003E  
                      Transmit_LIN_8Bytes@ID 003F                            _Cb1_oCurrentAlarm 0140  
                                 ??_ADC_Init 002C                                   ??_ADC_Read 002E  
                                 ??_ADC_Wait 002C                        _ui16_Speed_demand_mat 01DC  
                                 ??_BLDCWait 0070                  __end_of_Oscill_Source_Block 0774  
                  __size_of_PWM_Capture_init 0056                         __ELINMIntMessageSize 00D0  
                         _ui16_Duty_Cycle_In 01EA                                      ??_cksum 002E  
           write_eeprom_data@ui8_adress_data 0033                                 _analog_value 00A8  
                __end_of_Transmit_LIN_8Bytes 0F73                         __end_of_InitMotorRun 0430  
                         __size_of_commutate 01DD                                   __pbssBANK0 0048  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK4 0240  
                    _ui8_Duty_Cycle_In_Ratio 0152                        _BVH2_Appl_Layer$18240 022D  
                      _BVH2_Appl_Layer$18241 022E                        _BVH2_Appl_Layer$18236 0229  
                      _BVH2_Appl_Layer$18244 0224                        _BVH2_Appl_Layer$18237 022A  
                      _BVH2_Appl_Layer$18238 022B                        _BVH2_Appl_Layer$18246 0226  
                      _BVH2_Appl_Layer$18239 022C                        _BVH2_Appl_Layer$18247 0220  
                         __size_of_init_bldc 0024                         _bool_ControlLoopMode 00D4  
                         __end_ofi1_ADC_Read 1F99                           __end_ofi1_ADC_Wait 1F87  
                                 __pmaintext 0121                         __ELINMIntSendMessage 0F73  
                                    ?___lmul 002C                              _Cb34_oPWM_Alarm 0142  
                                    ?___tmul 002C                                      ?___wmul 002C  
                               ?i1_commutate 0070                                   __pintentry 0004  
                                    _CM1CON0 0111                                      _CM1CON1 0112  
                                    _CCP1ASE 14AF                                      _CCP1CON 0293  
                                    _CCP2CON 029A                                      _CCP3CON 0313  
                                    _CCP4CON 031A      __end_of_Cb1_Current_An___High_node_fcn1 173B  
   __size_of_Cb1_Current_An___High_node_fcn1 001C            ??_Cb1_Current_An___High_node_fcn1 002C  
           ?_Cb1_Current_An___High_node_fcn1 0070              _Cb1_Current_An___High_node_fcn1 171F  
                                    _CCP5CON 031E                                      i1S31601 00A6  
                                    i1S31605 00BA                        _bool_CPU_TempRedAlarm 014C  
                                 __ptext2030 0917                                   __ptext2031 06C1  
                                 __ptext2040 1B51                                   __ptext2032 0F20  
                                 __ptext2041 1003                                   __ptext2033 1B08  
                                 __ptext2050 06A4                                   __ptext2042 0F73  
                                 __ptext2034 029A                                   __ptext2051 0672  
                                 __ptext2043 0634                                   __ptext2035 0713  
                                 __ptext2060 170A                                   __ptext2052 107F  
                                 __ptext2044 07C9                                   __ptext2036 0F30  
                                 __ptext2061 036C                                   __ptext2053 025A  
                                 __ptext2045 060D                                   __ptext2037 040F  
                                 __ptext2029 0728                                   __ptext2070 062F  
                                 __ptext2062 1B8F                                   __ptext2054 173B  
                                 __ptext2046 0774                                   __ptext2038 1AC6  
                                 __ptext2071 035E                                   __ptext2063 076E  
                                 __ptext2055 1B2C                                   __ptext2047 0430  
                                 __ptext2039 116A                                      _BAUDCON 019F  
                                 __ptext2080 1F6E                                   __ptext2072 1AE4  
                                 __ptext2064 0FDA                                   __ptext2056 038D  
                                 __ptext2048 03A2                                   __ptext2081 0806  
                                 __ptext2073 1AAA                                   __ptext2065 08F8  
                                 __ptext2057 171F                                   __ptext2049 032D  
                                 __ptext2090 0000                                   __ptext2082 1FD3  
                                 __ptext2074 03A7                                   __ptext2066 07AE  
                                 __ptext2058 1760                                   __ptext2083 1FAE  
                                 __ptext2075 0346                                   __ptext2067 0710  
                                 __ptext2059 10EB                                   __ptext2084 1F99  
                                 __ptext2076 0765                                   __ptext2068 1A92  
                                 __ptext2085 1F87                                   __ptext2069 0322  
                                 __ptext2086 08E3                                   __ptext2078 1DC8  
                                 __ptext2087 1023                                   __ptext2079 1BE5  
                                 __ptext2088 1A7F                                   __ptext2089 07FD  
                             ___lmul@product 0034                                   ??_PWM_CTRL 0070  
                                 ??i1___wmul 0074                       ??_interrupt_PWMCapture 0070  
                                 _ui8_Ki_mat 01E6                              ??_PWM_Write_Out 002C  
                                 _ui8_Kp_mat 0153                                      i1l11620 085F  
                                    i1l11630 085C                                      i1l11614 0824  
                                    i1l11609 0000                                      i1l11641 08C9  
                                    i1l11617 0822                                      i1l11644 0899  
                                    i1l11628 0855                                      i1l11656 08E0  
                                    i1l11649 08B6                                      i1l25001 0000  
                                    i1l25101 0866                                      i1l25111 0000  
                                    i1l25103 0868                                      i1l25041 0000  
                                    i1l25121 0885                                      i1l25105 0000  
                                    i1l25043 1A89                                      i1l25035 0000  
                                    i1l25107 0000                                      i1l25115 087D  
                                    i1l25123 0888                                      i1l31603 1CA4  
                                    i1l25037 0000                                      i1l25141 08AD  
                                    i1l25117 0000                                      i1l25109 0000  
                                    i1l15543 1024                                      i1l25135 08A3  
                                    i1l25119 0000                                      i1l25047 0000  
                                    i1l25161 102C                                      i1l25137 08A5  
                                    i1l25081 0842                                      i1l15546 103A  
                                    i1l25163 0000                                      i1l25171 1068  
                                    i1l25147 08C0                                      i1l25091 0852  
                                    i1l25083 0000                                      i1l25075 0000  
                                    i1l25067 0000                                      i1l25059 0000  
                                    i1l25157 0000                                      i1l25149 08C2  
                                    i1l25085 0000                                      i1l25077 083A  
                                    i1l25069 082F                                      i1l25167 1066  
                                    i1l25159 0000                                      i1l25095 0000  
                                    i1l25087 0000                                      i1l25097 0000  
                                    i1l25089 0000                                      i1l25195 0000  
                                    i1l25197 0000                                      i1l25199 0000  
                                    i1l29003 0000                                   ??_DiagInit 002D  
                                    i1l29013 1F90                                      i1l29005 0000  
                                    i1l29101 0000                                      i1l29021 1BF0  
                                    i1l29111 1CF3                                      i1l29031 0000  
                                    i1l29023 0000                                      i1l29009 0000  
                                    i1l29201 0000                                      i1l29113 0000  
                                    i1l29105 1CE9                                      i1l29041 0000  
                                    i1l29033 0000                                      i1l29025 0000  
                                    i1l29017 0000                                      i1l28401 0000  
                                    i1l29211 0000                                      i1l29203 0000  
                                    i1l29131 0000                                      i1l29123 1D0A  
                                    i1l29107 0000                                      i1l29051 1C8F  
                                    i1l29043 0000                                      i1l29035 0000  
                                    i1l29027 0000                                      i1l28411 0000  
                                    i1l28403 0000                                      i1l19700 0000  
                                    i1l29221 0000                                      i1l29205 0000  
                                    i1l29141 1D1C                                      i1l29133 0000  
                                    i1l29125 0000                                      i1l29117 1D00  
                                    i1l29053 1C94                                      i1l29037 0000  
                                    i1l29029 0000                                      i1l28501 1E7E  
                                    i1l28413 0000                                      i1l28405 0000  
                                    i1l29231 0000                                      i1l29223 0000  
                                    i1l29215 1D7C                                      i1l29207 0000  
                                    i1l29151 0000                                      i1l29143 0000  
                                    i1l29135 0000                                      i1l29127 0000  
                                    i1l29119 0000                                      i1l29055 1C96  
                                    i1l29071 1C9E                                      i1l29047 1C89  
                                    i1l28511 1EB6                                      i1l28431 0000  
                                    i1l28423 1E2A                                      i1l28415 0000  
                                    i1l28407 0000                                      i1l28351 0000  
                                    i1l29313 0000                                      i1l29241 0000  
                                    i1l29233 1D8D                                      i1l29225 0000  
                                    i1l29217 0000                                      i1l29209 1D72  
                                    i1l29161 1D35                                      i1l29153 0000  
                                    i1l29137 0000                                      i1l29129 0000  
                                    i1l29057 1C98                                      i1l29073 1CAE  
                                    i1l29049 1C8D                                      i1l28513 1EBA  
                                    i1l28505 1E98                                      i1l28521 1EDF  
                                    i1l28441 0000                                      i1l28425 0000  
                                    i1l28417 0000                                      i1l28409 0000  
                                    i1l28361 1DE3                                      i1l28353 0000  
                                    i1l29315 1FCA                                      i1l29307 1FBB  
                                    i1l29251 0000                                      i1l29243 0000  
                                    i1l29235 0000                                      i1l29227 0000  
                                    i1l29219 0000                                      i1l29171 1D45  
                                    i1l29163 0000                                      i1l29155 0000  
                                    i1l29147 1D26                                      i1l29139 0000  
                                    i1l29091 0000                                      i1l29083 1CC5  
                                    i1l29059 1C9A                                      i1l28531 1EF8  
                                    i1l28507 1E9C                                      i1l28443 1E52  
                                    i1l28435 1E48                                      i1l28427 0000  
                                    i1l28371 1DF7                                      i1l29317 0000  
                                    i1l29309 0000                                      i1l28349 0000  
                                    i1l29253 1DA9                                      i1l29245 0000  
                                    i1l29229 0000                                      i1l29181 0000  
                                    i1l29173 0000                                      i1l29165 1D3B  
                                    i1l29157 0000                                      i1l29149 0000  
                                    i1l29261 1DAE                                      i1l29085 0000  
                                    i1l29077 1CB8                                      i1l28541 0000  
                                    i1l28533 0000                                      i1l28517 1ED4  
                                    i1l28525 1EEB                                      i1l28461 1E5B  
                                    i1l28437 0000                                      i1l28381 1E0C  
                                    i1l28373 0000                                      i1l28365 1DED  
                                    i1l28357 1DD9                                      i1l29319 1FCE  
                                    i1l29247 0000                                      i1l29239 1D97  
                                    i1l29191 1D60                                      i1l29183 0000  
                                    i1l29175 0000                                      i1l29167 0000  
                                    i1l29159 0000                                      i1l29263 1DC2  
                                    i1l29087 1CCA                                      i1l28535 0000  
                                    i1l28519 1ED6                                      i1l28471 0000  
                                    i1l28463 0000                                      i1l28439 0000  
                                    i1l28391 0000                                      i1l28383 1E0F  
                                    i1l28375 0000                                      i1l28367 0000  
                                    i1l29281 0000                                      i1l29249 0000  
                                    i1l29193 0000                                      i1l29185 1D56  
                                    i1l29177 0000                                      i1l29089 0000  
                                    i1l28561 1F2A                                      i1l28553 0000  
                                    i1l28529 0000                                      i1l28473 0000  
                                    i1l28465 0000                                      i1l28393 0000  
                                    i1l28385 0000                                      i1l28377 0000  
                                    i1l19690 0000                                      i1l29291 0000  
                                    i1l29283 1F9B                                      i1l29267 0000  
                                    i1l29195 0000                                      i1l29187 0000  
                                    i1l29179 0000                                      i1l28571 1F46  
                                    i1l28563 1F3B                                      i1l28555 0000  
                                    i1l28539 0000                                      i1l28475 1E69  
                                    i1l28395 0000                                      i1l28387 0000  
                                    i1l28547 1F06                                      i1l28651 0000  
                                    i1l28643 0000                                      i1l29197 0000  
                                    i1l28581 0000                                      i1l28573 1F47  
                                    i1l28477 0000                                      i1l28469 0000  
                                    i1l28397 0000                                      i1l28389 0000  
                                    i1l28653 0018                                      i1l28645 0000  
                                    i1l28637 0000                                      i1l29287 1FA1  
                                    i1l29199 0000                                      i1l28591 1F67  
                                    i1l28567 1F3F                                      i1l28575 1F4B  
                                    i1l28495 1E74                                      i1l28487 0000  
                                    i1l28399 0000                                      i1l28663 0000  
                                    i1l28647 0011                                      i1l29289 0000  
                                    i1l29297 0000                                      i1l28593 1F6C  
                                    i1l28577 1F4D                                      i1l28497 0000  
                                    i1l28489 0000                                      i1l28665 0025  
                                    i1l28657 0000                                      i1l29299 0000  
                                    i1l28659 001F                      ??__ELINMIntCalcIDParity 002C  
                                    _PWM1CON 0294                                   _comm_state 00D9  
                                 __stringtab 002C                  BVH2_Appl_Layer@Cb9_StateCnt 00C3  
                          ??_BVH2_Appl_Layer 003A                    _ui16_Speed_demand_mat_Max 01DE  
                  _ui16_Speed_demand_mat_min 01E0              __size_of__ELINMIntResetProtocol 000F  
                                    _Task1ms 07FD                         __end_of_Receive_Diag 0710  
                      ?__ELINMIntSendMessage 002D                                 ?_system_init 0070  
                                    ___aldiv 107F                      BVH2_Appl_Layer@Sb3_Sum1 023C  
                                    ___awdiv 025A                              __size_of___lmul 0025  
                            __size_of___tmul 001D                              __size_of___wmul 0015  
                                    ___ltdiv 0672                                      ___lwdiv 1B2C  
                       __end_of_SetDiagAlarm 062F                            __end_of_commutate 060D  
                 __size_of_write_eeprom_data 0018                                 _ui8_CompFlag 0151  
                                 _init_ports 1003                          _phase_delay_counter 01D0  
                                    _filter1 01CA                                      _filter3 01CC  
                               __size_of_EOL 0526                            i1___lwdiv@divisor 0070  
                          __end_of_init_bldc 1B2C                            i1___lwdiv@counter 0074  
                              _ui16_Temp_cal 01E2                             ___aldiv@dividend 0030  
                 BVH2_Appl_Layer@Sb2_Switch2 0239                   BVH2_Appl_Layer@Sb2_Switch5 0231  
                             __ELINMIntRXCRC 01C4                      __ELINMIntReceiveMessage 0713  
                                    _wkpoint 00EE                         end_of_initialization 011F  
                             __ELINMIntSpace 014B                     __size_of_ELINMIntHandler 00DD  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00C6         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A2  
                     __ELINMIntRXMessageSize 014A                         _ui16_fir_IPhase_mean 0131  
                  __size_of_read_eeprom_data 000B                    __size_of_Get_Analog_Value 0005  
                           ___ltdiv@dividend 0038                                ??_clear_timer 002C  
                           ___aldiv@quotient 0036              read_eeprom_data@ui8_adress_data 002D  
                      i1___wmul@multiplicand 0072                                ??_FILTER_Init 002F  
                              ??_FILTER_Ubat 002C                                ??_FILTER_Temp 002C  
                       _Cb56_odFixedValueSel 00C9                                   _timer_init 1B51  
             PWM_Write_Out@ui8_DutyCycle_Out 002C                        _ui16_IPhase1_bldc_cal 0161  
                __end_of__ELINMIntGetPointer 0713                       __ELINMIntResetProtocol 08E3  
                      _ui16_IPhase2_bldc_cal 0163                        __size_of_InitMotorRun 0021  
                        _ui16_Current_Thresh 01EC                            NegativeAnswer@LID 0040  
                           _PWM_Capture_init 1B8F                             ___ltdiv@quotient 003B  
                                  _PWMReadDC 0634                        _ui16_IPhase3_bldc_cal 0165  
                          __size_of_ADC_Init 0009                            __size_of_ADC_Read 0018  
                              _ui16_step_cnt 00BE                                    i1___lwdiv 1FAE  
                          __size_of_ADC_Wait 0019                            __size_of_BLDCWait 0021  
                                 _windowPtr1 00E7                             _ui8_BattVolt_mat 00C0  
                           ??_NegativeAnswer 0040         BVH2_Appl_Layer@Sb2_Logical_Operator2 0236  
                     ??__ELINMIntSendMessage 0032                     __size_of_interrrupt_bldc 01A6  
                          __ELINMIntReadBack 00D1                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 040F                               __end_of___lmul 1760  
                     _ui16_phase_advancement 00BA                               __end_of___tmul 06C1  
                             __end_of___wmul 03A2                                  ?_init_ports 0070  
                       __size_ofi1_commutate 01E3                          __end_of_clear_timer 038D  
                              __pbitbssBANK0 0298                  __end_of__ELINMIntInitialize 0910  
                          __size_of_PWM_CTRL 0013                                  i1ADC_Read@i 0072  
           __ELINMIntSendMessage@_ELINM_fmax 0030             __ELINMIntSendMessage@_ELINM_fmin 002E  
                        start_initialization 00DE                            __size_ofi1___wmul 0015  
                  ??__ELINMIntReceiveMessage 0039             __ELINMIntSendMessage@_ELINM_size 002D  
                                __end_of_EOL 0E3D                          __end_of_FILTER_Init 1AE4  
                        __end_of_FILTER_Ubat 040F                          __end_of_FILTER_Temp 1B08  
                          __size_of_DiagInit 000B                                   ?_PWMReadDC 0070  
                                  _ErrorCode 00CA                                   ?i1___lwdiv 0070  
        __end_of_Cb56_UbatHandling_node_fcn2 1796                  _Cb56_UbatHandling_node_fcn2 1760  
                             _ui8_IPhase_sel 00DC                                 _Cb1_StateCnt 00A4  
                      __size_of_Receive_Diag 004F                               Receive_Diag@id 003B  
                          ??_ELINMIntHandler 0071                        __size_of_SetDiagAlarm 0022  
                    _ui16_NTC_Temp_bldc_mean 012B                               _ui8_PWM_dc_mat 00DE  
                                   ??___lmul 0034                                     ??___tmul 0032  
                                   ??___wmul 0030                                  __pdataBANK0 0054  
                                __pdataBANK1 00E8                                  __pdataBANK2 0167  
                 read_eeprom_data@ui8_adress 002C                         __size_of_system_init 003D  
                               _Cb1_oShutoff 0141                                  ?_timer_init 0070  
                             ___tmul@product 0032                        __end_of_InitMotorStop 036C  
                                   EOL@_dcnt 0220                       __size_of_FILTER_IPhase 001C  
                            _ui8_Pulse_State 0156                              _BVH2_Appl_Layer 116A  
                               _Receive_Diag 06C1                                __pcstackBANK0 0020  
                              __pcstackBANK4 0220               __size_of__ELINMIntCalcIDParity 0026  
              __end_of__ELINMIntCalcIDParity 1000                            _bool_MotorStalled 00D7  
                               _SetDiagAlarm 060D                 __size_of_Oscill_Source_Block 0006  
                        __size_of_init_ports 0020                             _read_eeprom_data 0322  
                                  __pnvBANK1 00EF                                    __pnvBANK3 01EC  
             BVH2_Appl_Layer@Cb51_oTempAlarm 013B                             _Get_Analog_Value 03A2  
               __size_of_Transmit_LIN_8Bytes 0043                                     ?_Task1ms 0070  
                           ___lwdiv@dividend 002E                                  _clear_timer 036C  
                                   ?___aldiv 002C                __ELINMIntSendMessage@_ELINM_i 0036  
                                   ?___awdiv 0032                                     ?___ltdiv 0035  
                                   ?___lwdiv 002C                        _bool_HighCurrentAlarm 00D6  
                       clear_timer@ui8_TmrNb 002C                            ??_interrrupt_bldc 0077  
              _SIBFS_Current_Analysis_High_b 00CB                               _ui8_UPhase_sel 00E3  
                             _bool_UbatAlarm 014F                                  _FILTER_Init 1AC6  
                                  __pstrings 002C                                  _FILTER_Ubat 03A7  
                                _FILTER_Temp 1AE4                                    _comm_time 0048  
                                  __pswtext1 00CE                                    __pswtext2 0092  
                                  __pswtext3 00A6                                    __pswtext4 00BA  
                         _Cb34_oPWM_SC_Alarm 0143                            _interrupt_handler 0004  
                                  _ict_stamp 016D                              _ui16_Ubemf_bldc 00B4  
                                  _commutate 0430                        _SIBFS_PWM_Detection_b 00CC  
                __ELINMIntResetProtocol@code 0070                                     _ADC_Init 0765  
                                   _ADC_Read 0346                __size_of_interrupt_PWMCapture 0052  
                       _bool_DryRunningAlarm 00D5                                     _ADC_Wait 032D  
                         ?_interrupt_handler 0070                        __end_of_PWM_Write_Out 0634  
                                   _BLDCWait 1FD3                                  ??_PWMReadDC 003F  
                          _I_calibrationInit 029A                             ___lwdiv@quotient 0031  
                                ??i1___lwdiv 0074                                    _init_bldc 1B08  
                             __size_of_cksum 002E      BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 00C5  
                         ?_I_calibrationInit 0070                          ??_interrupt_handler 007D  
                      _Cb56_oUbat_Alarm_High 0148                              ___aldiv@divisor 002C  
                            ___aldiv@counter 0034                               ___wmul@product 0030  
                        __size_of_timer_init 003E                                _FILTER_IPhase 1AAA  
          __ELINMIntGetPointer@_ELINMInt_tag 002D                          ??_I_calibrationInit 002F  
                            ___ltdiv@divisor 0035                               _Cb34_odPumpOff 0146  
                            ___ltdiv@counter 003E                                     _GO_nDONE 04E9  
                   __end_of_PWM_Capture_init 1BE5                                  _ui8_failure 016E  
                                   _PSTR1CON 0296                      ?__ELINMIntResetProtocol 0070  
                  __end_of_interrupt_handler 0029                      __end_of_BVH2_Appl_Layer 170A  
                                   _PWM_CTRL 1A7F                               _ui8_b_DResB0_c 004E  
                             _ui8_b_DResB1_c 015A                               _ui8_b_DResB2_c 015B  
                             _ui8_b_DResB3_c 015C                               _ui8_b_DResB4_c 015D  
                          ___wmul@multiplier 002C                                     i1___wmul 1F99  
                                 ?_commutate 0070                                    cksum@addr 0032  
                    interrrupt_bldc@ui32_tmp 0079                                     _DiagInit 0774  
                  __end_of_I_calibrationInit 0322                          ___tmul@multiplicand 002F  
                        _ui16_fir_Bat_mittel 012F                    _ui8_fixed_start_speed_mat 01E8  
                      __ELINMIntSleepTimeout 0250                                   ?_init_bldc 0070  
                          ___lmul@multiplier 002C                               _ui16_Capt_Val0 00AA  
                             _ui16_Capt_Val1 00AC                               _ui16_Capt_Val2 00AE  
                             _ui16_I_cal_Ph1 00E8                               _ui16_I_cal_Ph2 00EA  
                             _ui16_I_cal_Ph3 00EC                             __ELINMIntStatus1 00D2  
                             ?_FILTER_IPhase 0070                           _bool_CPU_TempAlarm 00D3  
                           _ui16_mat_Current 00B8                             __size_of_Task1ms 0003  
                       _SIBFS_UbatHandling_b 00CE                      _Cb34_odFixedLowValueSel 0144  
             __end_of__ELINMIntResetProtocol 08F2                                ?_EnableMCP201 0070  
                   BVH2_Appl_Layer@Sb2_Error 0237                             __size_of___aldiv 006C  
                           __size_of___awdiv 0040                BVH2_Appl_Layer@Cb19_oDryRun55 0135  
              BVH2_Appl_Layer@Cb19_oDryRun66 0136                             __size_of___ltdiv 0032  
                           __size_of___lwdiv 0025                                 ??_init_ports 002E  
                          _ui8_lastTaskvalue 015F                             _ui16_mat_inpTemp 01E4  
                             _ui8_StartupPWM 00E0                         _bool_PWMin_err_Alarm 014E  
              __ELINMIntMessageBufferPointer 00CF                                     _checksum 01B8  
                         _Cb1_RestartCounter 013F             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00C2  
                         _ui16_NTC_Temp_bldc 01D6                              ___lwdiv@divisor 002C  
                             _Cb56_odPumpOff 0149                              ___lwdiv@counter 0030  
                            _ELINMIntHandler 0806                 __size_of__ELINMIntGetPointer 0003  
                             _ui16_Ubat_bldc 0051                      _bool_mat_currAlarm_bldc 00D8  
               BVH2_Appl_Layer@Cb14_StateCnt 01BE                                _Cb44_StateCnt 00A6  
                         i1___lwdiv@dividend 0072                BVH2_Appl_Layer@Cb51_odPumpOff 013D  
                              __size_of_main 0139                                   _Cb34_idPWM 004A  
                                   _phaseCal 00DA                           __end_of_init_ports 1023  
                                _inputArray1 0240                               _ui16_Speed_mat 00B2  
               BVH2_Appl_Layer@Cb24_StateCnt 00A0                                     clear_ram 07F7  
              __size_of__ELINMIntSendMessage 0067                                ??i1_commutate 0020  
                             ??_EnableMCP201 002C            BVH2_Appl_Layer@Cb51_oTempRedAlarm 013C  
                              _ui8_Ubemf_sel 0159                                _Cb44_oShutoff 0147  
                 __size_of_interrupt_handler 0025                                     cksum@sum 0030  
                           ?_BVH2_Appl_Layer 0070                                 ??_timer_init 002D  
                        _Oscill_Source_Block 076E                           i1___lwdiv@quotient 0075  
                                 i1_ADC_Read 1F87                                   i1_ADC_Wait 1F6E  
                                ??_commutate 0032                              __ELINMIntStatus 004C  
                   __end_of_read_eeprom_data 032D                     __end_of_Get_Analog_Value 03A7  
                        _Transmit_LIN_8Bytes 0F30                   __size_of_I_calibrationInit 0088  
                           _ui8_given_supply 00E6      __end_of_Cb44_Pic_etat_monitor_node_fcn1 171F  
   __size_of_Cb44_Pic_etat_monitor_node_fcn1 0015            ??_Cb44_Pic_etat_monitor_node_fcn1 002C  
           ?_Cb44_Pic_etat_monitor_node_fcn1 0070              _Cb44_Pic_etat_monitor_node_fcn1 170A  
       __end_of_Cb34_PWM_Detection_node_fcn1 115E        __size_of_Cb34_PWM_Detection_node_fcn1 0073  
               _Cb34_PWM_Detection_node_fcn1 10EB                                  ??_init_bldc 003E  
               __size_of__ELINMIntInitialize 0018                                     intlevel1 0000  
        __ELINMIntReceiveMessage@_ELINM_size 0038                             _rising_bemf_flag 0298  
                            ??_FILTER_IPhase 002C                    _bool_PWMin_Freq_err_Alarm 014D  
                write_eeprom_data@ui8_adress 0034                         ?_Oscill_Source_Block 0070  
                            _interrrupt_bldc 1DC8                           __end_of_timer_init 1B8F  
                       ?_Transmit_LIN_8Bytes 0037                                 ?_clear_timer 0070  
                      _bool_start_demand_mat 0150                                ??_system_init 003E  
                          _ui8_PWMin_failCnt 0154                   PWM_Capture_init@ui8_CCP_Nb 002C  
                    __size_of_NegativeAnswer 0010                            ___tmul@multiplier 002C  
                    EnableMCP201@_dcnt_13735 002D                      EnableMCP201@_dcnt_13736 002E  
                               ?_FILTER_Init 0070                                 ?_FILTER_Ubat 0070  
                               ?_FILTER_Temp 0070                     ?__ELINMIntReceiveMessage 0037  
                                 _OPTION_REG 0095                      __end_of_ELINMIntHandler 08E3  
         __ELINMIntReceiveMessage@_ELINM_tag 0039                          __end_ofi1_commutate 1DC8  
                               ___aldiv@sign 0035  BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016B  
              ?_Cb34_PWM_Detection_node_fcn1 0070                        __ELINMIntCalcIDParity 0FDA  
         BVH2_Appl_Layer@Cb24_RestartCounter 0137                        ??_Oscill_Source_Block 002C  
                       _Cb34_odFixedValueSel 0145             __ELINMIntCalcIDParity@ELINM_idtr 002C  
                            _ui8_error_Flags 00E5                              _ui8_current_cal 0120  
                      ??_Transmit_LIN_8Bytes 003F                       __size_of_InitMotorStop 000E  
               __end_of_interrupt_PWMCapture 1075                               _ui16_speed_fil 00BC  
                             _ui16_speed_rar 0133                                _filterTempNTC 01CE  
