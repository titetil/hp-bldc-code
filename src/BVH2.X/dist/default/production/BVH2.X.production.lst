

Microchip Technology PIC PRO Macro Assembler V1.44 build -154322312 
                                                                                               Tue Feb 12 15:07:04 2019

Microchip Technology Omniscient Code Generator v1.44 (PRO mode) build 201709140600
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext1,local,class=CONST,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text41,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext2,local,class=CONST,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	swtext3,local,class=CONST,delta=2
    36                           	psect	swtext4,local,class=CONST,delta=2
    37                           	psect	text58,local,class=CODE,merge=1,delta=2
    38                           	psect	text59,local,class=CODE,merge=1,delta=2
    39                           	psect	pa_nodes0,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.44
    43                           ; Generated 14/09/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F1936 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0090                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0110                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0113                     	;# 
   131  0114                     	;# 
   132  0115                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  0118                     	;# 
   136  0119                     	;# 
   137  011A                     	;# 
   138  011B                     	;# 
   139  011D                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  0191                     	;# 
   143  0191                     	;# 
   144  0192                     	;# 
   145  0193                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0194                     	;# 
   149  0195                     	;# 
   150  0196                     	;# 
   151  0199                     	;# 
   152  019A                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019C                     	;# 
   158  019C                     	;# 
   159  019D                     	;# 
   160  019E                     	;# 
   161  019F                     	;# 
   162  020D                     	;# 
   163  0210                     	;# 
   164  0211                     	;# 
   165  0212                     	;# 
   166  0213                     	;# 
   167  0214                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0216                     	;# 
   171  0217                     	;# 
   172  0291                     	;# 
   173  0291                     	;# 
   174  0292                     	;# 
   175  0293                     	;# 
   176  0294                     	;# 
   177  0295                     	;# 
   178  0295                     	;# 
   179  0296                     	;# 
   180  0298                     	;# 
   181  0298                     	;# 
   182  0299                     	;# 
   183  029A                     	;# 
   184  029B                     	;# 
   185  029C                     	;# 
   186  029C                     	;# 
   187  029D                     	;# 
   188  029E                     	;# 
   189  029F                     	;# 
   190  0311                     	;# 
   191  0311                     	;# 
   192  0312                     	;# 
   193  0313                     	;# 
   194  0314                     	;# 
   195  0315                     	;# 
   196  0315                     	;# 
   197  0316                     	;# 
   198  0318                     	;# 
   199  0318                     	;# 
   200  0319                     	;# 
   201  031A                     	;# 
   202  031C                     	;# 
   203  031C                     	;# 
   204  031D                     	;# 
   205  031E                     	;# 
   206  0394                     	;# 
   207  0395                     	;# 
   208  0396                     	;# 
   209  0415                     	;# 
   210  0416                     	;# 
   211  0417                     	;# 
   212  041C                     	;# 
   213  041D                     	;# 
   214  041E                     	;# 
   215  0791                     	;# 
   216  0792                     	;# 
   217  0793                     	;# 
   218  0794                     	;# 
   219  0795                     	;# 
   220  0798                     	;# 
   221  0799                     	;# 
   222  07A0                     	;# 
   223  07A1                     	;# 
   224  07A3                     	;# 
   225  07A4                     	;# 
   226  07A6                     	;# 
   227  07A7                     	;# 
   228  07A9                     	;# 
   229  07AA                     	;# 
   230  0FE4                     	;# 
   231  0FE5                     	;# 
   232  0FE6                     	;# 
   233  0FE7                     	;# 
   234  0FE8                     	;# 
   235  0FE9                     	;# 
   236  0FEA                     	;# 
   237  0FEB                     	;# 
   238  0FED                     	;# 
   239  0FEE                     	;# 
   240  0FEF                     	;# 
   241  0000                     	;# 
   242  0001                     	;# 
   243  0002                     	;# 
   244  0003                     	;# 
   245  0004                     	;# 
   246  0005                     	;# 
   247  0006                     	;# 
   248  0007                     	;# 
   249  0008                     	;# 
   250  0009                     	;# 
   251  000A                     	;# 
   252  000B                     	;# 
   253  000C                     	;# 
   254  000D                     	;# 
   255  000E                     	;# 
   256  0010                     	;# 
   257  0011                     	;# 
   258  0012                     	;# 
   259  0013                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0016                     	;# 
   263  0017                     	;# 
   264  0018                     	;# 
   265  0019                     	;# 
   266  001A                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  001E                     	;# 
   270  001F                     	;# 
   271  008C                     	;# 
   272  008D                     	;# 
   273  008E                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0093                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  0110                     	;# 
   293  0111                     	;# 
   294  0112                     	;# 
   295  0113                     	;# 
   296  0114                     	;# 
   297  0115                     	;# 
   298  0116                     	;# 
   299  0117                     	;# 
   300  0118                     	;# 
   301  0119                     	;# 
   302  011A                     	;# 
   303  011B                     	;# 
   304  011D                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0194                     	;# 
   314  0195                     	;# 
   315  0196                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019C                     	;# 
   323  019C                     	;# 
   324  019D                     	;# 
   325  019E                     	;# 
   326  019F                     	;# 
   327  020D                     	;# 
   328  0210                     	;# 
   329  0211                     	;# 
   330  0212                     	;# 
   331  0213                     	;# 
   332  0214                     	;# 
   333  0215                     	;# 
   334  0215                     	;# 
   335  0216                     	;# 
   336  0217                     	;# 
   337  0291                     	;# 
   338  0291                     	;# 
   339  0292                     	;# 
   340  0293                     	;# 
   341  0294                     	;# 
   342  0295                     	;# 
   343  0295                     	;# 
   344  0296                     	;# 
   345  0298                     	;# 
   346  0298                     	;# 
   347  0299                     	;# 
   348  029A                     	;# 
   349  029B                     	;# 
   350  029C                     	;# 
   351  029C                     	;# 
   352  029D                     	;# 
   353  029E                     	;# 
   354  029F                     	;# 
   355  0311                     	;# 
   356  0311                     	;# 
   357  0312                     	;# 
   358  0313                     	;# 
   359  0314                     	;# 
   360  0315                     	;# 
   361  0315                     	;# 
   362  0316                     	;# 
   363  0318                     	;# 
   364  0318                     	;# 
   365  0319                     	;# 
   366  031A                     	;# 
   367  031C                     	;# 
   368  031C                     	;# 
   369  031D                     	;# 
   370  031E                     	;# 
   371  0394                     	;# 
   372  0395                     	;# 
   373  0396                     	;# 
   374  0415                     	;# 
   375  0416                     	;# 
   376  0417                     	;# 
   377  041C                     	;# 
   378  041D                     	;# 
   379  041E                     	;# 
   380  0791                     	;# 
   381  0792                     	;# 
   382  0793                     	;# 
   383  0794                     	;# 
   384  0795                     	;# 
   385  0798                     	;# 
   386  0799                     	;# 
   387  07A0                     	;# 
   388  07A1                     	;# 
   389  07A3                     	;# 
   390  07A4                     	;# 
   391  07A6                     	;# 
   392  07A7                     	;# 
   393  07A9                     	;# 
   394  07AA                     	;# 
   395  0FE4                     	;# 
   396  0FE5                     	;# 
   397  0FE6                     	;# 
   398  0FE7                     	;# 
   399  0FE8                     	;# 
   400  0FE9                     	;# 
   401  0FEA                     	;# 
   402  0FEB                     	;# 
   403  0FED                     	;# 
   404  0FEE                     	;# 
   405  0FEF                     	;# 
   406  0000                     	;# 
   407  0001                     	;# 
   408  0002                     	;# 
   409  0003                     	;# 
   410  0004                     	;# 
   411  0005                     	;# 
   412  0006                     	;# 
   413  0007                     	;# 
   414  0008                     	;# 
   415  0009                     	;# 
   416  000A                     	;# 
   417  000B                     	;# 
   418  000C                     	;# 
   419  000D                     	;# 
   420  000E                     	;# 
   421  0010                     	;# 
   422  0011                     	;# 
   423  0012                     	;# 
   424  0013                     	;# 
   425  0015                     	;# 
   426  0016                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001C                     	;# 
   434  001E                     	;# 
   435  001F                     	;# 
   436  008C                     	;# 
   437  008D                     	;# 
   438  008E                     	;# 
   439  0090                     	;# 
   440  0091                     	;# 
   441  0092                     	;# 
   442  0093                     	;# 
   443  0095                     	;# 
   444  0096                     	;# 
   445  0097                     	;# 
   446  0098                     	;# 
   447  0099                     	;# 
   448  009A                     	;# 
   449  009B                     	;# 
   450  009B                     	;# 
   451  009C                     	;# 
   452  009D                     	;# 
   453  009E                     	;# 
   454  010C                     	;# 
   455  010D                     	;# 
   456  010E                     	;# 
   457  0110                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  018C                     	;# 
   471  018D                     	;# 
   472  0191                     	;# 
   473  0191                     	;# 
   474  0192                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0194                     	;# 
   479  0195                     	;# 
   480  0196                     	;# 
   481  0199                     	;# 
   482  019A                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019C                     	;# 
   488  019C                     	;# 
   489  019D                     	;# 
   490  019E                     	;# 
   491  019F                     	;# 
   492  020D                     	;# 
   493  0210                     	;# 
   494  0211                     	;# 
   495  0212                     	;# 
   496  0213                     	;# 
   497  0214                     	;# 
   498  0215                     	;# 
   499  0215                     	;# 
   500  0216                     	;# 
   501  0217                     	;# 
   502  0291                     	;# 
   503  0291                     	;# 
   504  0292                     	;# 
   505  0293                     	;# 
   506  0294                     	;# 
   507  0295                     	;# 
   508  0295                     	;# 
   509  0296                     	;# 
   510  0298                     	;# 
   511  0298                     	;# 
   512  0299                     	;# 
   513  029A                     	;# 
   514  029B                     	;# 
   515  029C                     	;# 
   516  029C                     	;# 
   517  029D                     	;# 
   518  029E                     	;# 
   519  029F                     	;# 
   520  0311                     	;# 
   521  0311                     	;# 
   522  0312                     	;# 
   523  0313                     	;# 
   524  0314                     	;# 
   525  0315                     	;# 
   526  0315                     	;# 
   527  0316                     	;# 
   528  0318                     	;# 
   529  0318                     	;# 
   530  0319                     	;# 
   531  031A                     	;# 
   532  031C                     	;# 
   533  031C                     	;# 
   534  031D                     	;# 
   535  031E                     	;# 
   536  0394                     	;# 
   537  0395                     	;# 
   538  0396                     	;# 
   539  0415                     	;# 
   540  0416                     	;# 
   541  0417                     	;# 
   542  041C                     	;# 
   543  041D                     	;# 
   544  041E                     	;# 
   545  0791                     	;# 
   546  0792                     	;# 
   547  0793                     	;# 
   548  0794                     	;# 
   549  0795                     	;# 
   550  0798                     	;# 
   551  0799                     	;# 
   552  07A0                     	;# 
   553  07A1                     	;# 
   554  07A3                     	;# 
   555  07A4                     	;# 
   556  07A6                     	;# 
   557  07A7                     	;# 
   558  07A9                     	;# 
   559  07AA                     	;# 
   560  0FE4                     	;# 
   561  0FE5                     	;# 
   562  0FE6                     	;# 
   563  0FE7                     	;# 
   564  0FE8                     	;# 
   565  0FE9                     	;# 
   566  0FEA                     	;# 
   567  0FEB                     	;# 
   568  0FED                     	;# 
   569  0FEE                     	;# 
   570  0FEF                     	;# 
   571  0000                     	;# 
   572  0001                     	;# 
   573  0002                     	;# 
   574  0003                     	;# 
   575  0004                     	;# 
   576  0005                     	;# 
   577  0006                     	;# 
   578  0007                     	;# 
   579  0008                     	;# 
   580  0009                     	;# 
   581  000A                     	;# 
   582  000B                     	;# 
   583  000C                     	;# 
   584  000D                     	;# 
   585  000E                     	;# 
   586  0010                     	;# 
   587  0011                     	;# 
   588  0012                     	;# 
   589  0013                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  001E                     	;# 
   600  001F                     	;# 
   601  008C                     	;# 
   602  008D                     	;# 
   603  008E                     	;# 
   604  0090                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  010C                     	;# 
   620  010D                     	;# 
   621  010E                     	;# 
   622  0110                     	;# 
   623  0111                     	;# 
   624  0112                     	;# 
   625  0113                     	;# 
   626  0114                     	;# 
   627  0115                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  0118                     	;# 
   631  0119                     	;# 
   632  011A                     	;# 
   633  011B                     	;# 
   634  011D                     	;# 
   635  018C                     	;# 
   636  018D                     	;# 
   637  0191                     	;# 
   638  0191                     	;# 
   639  0192                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0194                     	;# 
   644  0195                     	;# 
   645  0196                     	;# 
   646  0199                     	;# 
   647  019A                     	;# 
   648  019B                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019C                     	;# 
   654  019D                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  020D                     	;# 
   658  0210                     	;# 
   659  0211                     	;# 
   660  0212                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0291                     	;# 
   668  0291                     	;# 
   669  0292                     	;# 
   670  0293                     	;# 
   671  0294                     	;# 
   672  0295                     	;# 
   673  0295                     	;# 
   674  0296                     	;# 
   675  0298                     	;# 
   676  0298                     	;# 
   677  0299                     	;# 
   678  029A                     	;# 
   679  029B                     	;# 
   680  029C                     	;# 
   681  029C                     	;# 
   682  029D                     	;# 
   683  029E                     	;# 
   684  029F                     	;# 
   685  0311                     	;# 
   686  0311                     	;# 
   687  0312                     	;# 
   688  0313                     	;# 
   689  0314                     	;# 
   690  0315                     	;# 
   691  0315                     	;# 
   692  0316                     	;# 
   693  0318                     	;# 
   694  0318                     	;# 
   695  0319                     	;# 
   696  031A                     	;# 
   697  031C                     	;# 
   698  031C                     	;# 
   699  031D                     	;# 
   700  031E                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  0415                     	;# 
   705  0416                     	;# 
   706  0417                     	;# 
   707  041C                     	;# 
   708  041D                     	;# 
   709  041E                     	;# 
   710  0791                     	;# 
   711  0792                     	;# 
   712  0793                     	;# 
   713  0794                     	;# 
   714  0795                     	;# 
   715  0798                     	;# 
   716  0799                     	;# 
   717  07A0                     	;# 
   718  07A1                     	;# 
   719  07A3                     	;# 
   720  07A4                     	;# 
   721  07A6                     	;# 
   722  07A7                     	;# 
   723  07A9                     	;# 
   724  07AA                     	;# 
   725  0FE4                     	;# 
   726  0FE5                     	;# 
   727  0FE6                     	;# 
   728  0FE7                     	;# 
   729  0FE8                     	;# 
   730  0FE9                     	;# 
   731  0FEA                     	;# 
   732  0FEB                     	;# 
   733  0FED                     	;# 
   734  0FEE                     	;# 
   735  0FEF                     	;# 
   736  0000                     	;# 
   737  0001                     	;# 
   738  0002                     	;# 
   739  0003                     	;# 
   740  0004                     	;# 
   741  0005                     	;# 
   742  0006                     	;# 
   743  0007                     	;# 
   744  0008                     	;# 
   745  0009                     	;# 
   746  000A                     	;# 
   747  000B                     	;# 
   748  000C                     	;# 
   749  000D                     	;# 
   750  000E                     	;# 
   751  0010                     	;# 
   752  0011                     	;# 
   753  0012                     	;# 
   754  0013                     	;# 
   755  0015                     	;# 
   756  0016                     	;# 
   757  0016                     	;# 
   758  0017                     	;# 
   759  0018                     	;# 
   760  0019                     	;# 
   761  001A                     	;# 
   762  001B                     	;# 
   763  001C                     	;# 
   764  001E                     	;# 
   765  001F                     	;# 
   766  008C                     	;# 
   767  008D                     	;# 
   768  008E                     	;# 
   769  0090                     	;# 
   770  0091                     	;# 
   771  0092                     	;# 
   772  0093                     	;# 
   773  0095                     	;# 
   774  0096                     	;# 
   775  0097                     	;# 
   776  0098                     	;# 
   777  0099                     	;# 
   778  009A                     	;# 
   779  009B                     	;# 
   780  009B                     	;# 
   781  009C                     	;# 
   782  009D                     	;# 
   783  009E                     	;# 
   784  010C                     	;# 
   785  010D                     	;# 
   786  010E                     	;# 
   787  0110                     	;# 
   788  0111                     	;# 
   789  0112                     	;# 
   790  0113                     	;# 
   791  0114                     	;# 
   792  0115                     	;# 
   793  0116                     	;# 
   794  0117                     	;# 
   795  0118                     	;# 
   796  0119                     	;# 
   797  011A                     	;# 
   798  011B                     	;# 
   799  011D                     	;# 
   800  018C                     	;# 
   801  018D                     	;# 
   802  0191                     	;# 
   803  0191                     	;# 
   804  0192                     	;# 
   805  0193                     	;# 
   806  0193                     	;# 
   807  0193                     	;# 
   808  0194                     	;# 
   809  0195                     	;# 
   810  0196                     	;# 
   811  0199                     	;# 
   812  019A                     	;# 
   813  019B                     	;# 
   814  019B                     	;# 
   815  019B                     	;# 
   816  019B                     	;# 
   817  019C                     	;# 
   818  019C                     	;# 
   819  019D                     	;# 
   820  019E                     	;# 
   821  019F                     	;# 
   822  020D                     	;# 
   823  0210                     	;# 
   824  0211                     	;# 
   825  0212                     	;# 
   826  0213                     	;# 
   827  0214                     	;# 
   828  0215                     	;# 
   829  0215                     	;# 
   830  0216                     	;# 
   831  0217                     	;# 
   832  0291                     	;# 
   833  0291                     	;# 
   834  0292                     	;# 
   835  0293                     	;# 
   836  0294                     	;# 
   837  0295                     	;# 
   838  0295                     	;# 
   839  0296                     	;# 
   840  0298                     	;# 
   841  0298                     	;# 
   842  0299                     	;# 
   843  029A                     	;# 
   844  029B                     	;# 
   845  029C                     	;# 
   846  029C                     	;# 
   847  029D                     	;# 
   848  029E                     	;# 
   849  029F                     	;# 
   850  0311                     	;# 
   851  0311                     	;# 
   852  0312                     	;# 
   853  0313                     	;# 
   854  0314                     	;# 
   855  0315                     	;# 
   856  0315                     	;# 
   857  0316                     	;# 
   858  0318                     	;# 
   859  0318                     	;# 
   860  0319                     	;# 
   861  031A                     	;# 
   862  031C                     	;# 
   863  031C                     	;# 
   864  031D                     	;# 
   865  031E                     	;# 
   866  0394                     	;# 
   867  0395                     	;# 
   868  0396                     	;# 
   869  0415                     	;# 
   870  0416                     	;# 
   871  0417                     	;# 
   872  041C                     	;# 
   873  041D                     	;# 
   874  041E                     	;# 
   875  0791                     	;# 
   876  0792                     	;# 
   877  0793                     	;# 
   878  0794                     	;# 
   879  0795                     	;# 
   880  0798                     	;# 
   881  0799                     	;# 
   882  07A0                     	;# 
   883  07A1                     	;# 
   884  07A3                     	;# 
   885  07A4                     	;# 
   886  07A6                     	;# 
   887  07A7                     	;# 
   888  07A9                     	;# 
   889  07AA                     	;# 
   890  0FE4                     	;# 
   891  0FE5                     	;# 
   892  0FE6                     	;# 
   893  0FE7                     	;# 
   894  0FE8                     	;# 
   895  0FE9                     	;# 
   896  0FEA                     	;# 
   897  0FEB                     	;# 
   898  0FED                     	;# 
   899  0FEE                     	;# 
   900  0FEF                     	;# 
   901  0000                     	;# 
   902  0001                     	;# 
   903  0002                     	;# 
   904  0003                     	;# 
   905  0004                     	;# 
   906  0005                     	;# 
   907  0006                     	;# 
   908  0007                     	;# 
   909  0008                     	;# 
   910  0009                     	;# 
   911  000A                     	;# 
   912  000B                     	;# 
   913  000C                     	;# 
   914  000D                     	;# 
   915  000E                     	;# 
   916  0010                     	;# 
   917  0011                     	;# 
   918  0012                     	;# 
   919  0013                     	;# 
   920  0015                     	;# 
   921  0016                     	;# 
   922  0016                     	;# 
   923  0017                     	;# 
   924  0018                     	;# 
   925  0019                     	;# 
   926  001A                     	;# 
   927  001B                     	;# 
   928  001C                     	;# 
   929  001E                     	;# 
   930  001F                     	;# 
   931  008C                     	;# 
   932  008D                     	;# 
   933  008E                     	;# 
   934  0090                     	;# 
   935  0091                     	;# 
   936  0092                     	;# 
   937  0093                     	;# 
   938  0095                     	;# 
   939  0096                     	;# 
   940  0097                     	;# 
   941  0098                     	;# 
   942  0099                     	;# 
   943  009A                     	;# 
   944  009B                     	;# 
   945  009B                     	;# 
   946  009C                     	;# 
   947  009D                     	;# 
   948  009E                     	;# 
   949  010C                     	;# 
   950  010D                     	;# 
   951  010E                     	;# 
   952  0110                     	;# 
   953  0111                     	;# 
   954  0112                     	;# 
   955  0113                     	;# 
   956  0114                     	;# 
   957  0115                     	;# 
   958  0116                     	;# 
   959  0117                     	;# 
   960  0118                     	;# 
   961  0119                     	;# 
   962  011A                     	;# 
   963  011B                     	;# 
   964  011D                     	;# 
   965  018C                     	;# 
   966  018D                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0193                     	;# 
   973  0194                     	;# 
   974  0195                     	;# 
   975  0196                     	;# 
   976  0199                     	;# 
   977  019A                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019C                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020D                     	;# 
   988  0210                     	;# 
   989  0211                     	;# 
   990  0212                     	;# 
   991  0213                     	;# 
   992  0214                     	;# 
   993  0215                     	;# 
   994  0215                     	;# 
   995  0216                     	;# 
   996  0217                     	;# 
   997  0291                     	;# 
   998  0291                     	;# 
   999  0292                     	;# 
  1000  0293                     	;# 
  1001  0294                     	;# 
  1002  0295                     	;# 
  1003  0295                     	;# 
  1004  0296                     	;# 
  1005  0298                     	;# 
  1006  0298                     	;# 
  1007  0299                     	;# 
  1008  029A                     	;# 
  1009  029B                     	;# 
  1010  029C                     	;# 
  1011  029C                     	;# 
  1012  029D                     	;# 
  1013  029E                     	;# 
  1014  029F                     	;# 
  1015  0311                     	;# 
  1016  0311                     	;# 
  1017  0312                     	;# 
  1018  0313                     	;# 
  1019  0314                     	;# 
  1020  0315                     	;# 
  1021  0315                     	;# 
  1022  0316                     	;# 
  1023  0318                     	;# 
  1024  0318                     	;# 
  1025  0319                     	;# 
  1026  031A                     	;# 
  1027  031C                     	;# 
  1028  031C                     	;# 
  1029  031D                     	;# 
  1030  031E                     	;# 
  1031  0394                     	;# 
  1032  0395                     	;# 
  1033  0396                     	;# 
  1034  0415                     	;# 
  1035  0416                     	;# 
  1036  0417                     	;# 
  1037  041C                     	;# 
  1038  041D                     	;# 
  1039  041E                     	;# 
  1040  0791                     	;# 
  1041  0792                     	;# 
  1042  0793                     	;# 
  1043  0794                     	;# 
  1044  0795                     	;# 
  1045  0798                     	;# 
  1046  0799                     	;# 
  1047  07A0                     	;# 
  1048  07A1                     	;# 
  1049  07A3                     	;# 
  1050  07A4                     	;# 
  1051  07A6                     	;# 
  1052  07A7                     	;# 
  1053  07A9                     	;# 
  1054  07AA                     	;# 
  1055  0FE4                     	;# 
  1056  0FE5                     	;# 
  1057  0FE6                     	;# 
  1058  0FE7                     	;# 
  1059  0FE8                     	;# 
  1060  0FE9                     	;# 
  1061  0FEA                     	;# 
  1062  0FEB                     	;# 
  1063  0FED                     	;# 
  1064  0FEE                     	;# 
  1065  0FEF                     	;# 
  1066  0000                     	;# 
  1067  0001                     	;# 
  1068  0002                     	;# 
  1069  0003                     	;# 
  1070  0004                     	;# 
  1071  0005                     	;# 
  1072  0006                     	;# 
  1073  0007                     	;# 
  1074  0008                     	;# 
  1075  0009                     	;# 
  1076  000A                     	;# 
  1077  000B                     	;# 
  1078  000C                     	;# 
  1079  000D                     	;# 
  1080  000E                     	;# 
  1081  0010                     	;# 
  1082  0011                     	;# 
  1083  0012                     	;# 
  1084  0013                     	;# 
  1085  0015                     	;# 
  1086  0016                     	;# 
  1087  0016                     	;# 
  1088  0017                     	;# 
  1089  0018                     	;# 
  1090  0019                     	;# 
  1091  001A                     	;# 
  1092  001B                     	;# 
  1093  001C                     	;# 
  1094  001E                     	;# 
  1095  001F                     	;# 
  1096  008C                     	;# 
  1097  008D                     	;# 
  1098  008E                     	;# 
  1099  0090                     	;# 
  1100  0091                     	;# 
  1101  0092                     	;# 
  1102  0093                     	;# 
  1103  0095                     	;# 
  1104  0096                     	;# 
  1105  0097                     	;# 
  1106  0098                     	;# 
  1107  0099                     	;# 
  1108  009A                     	;# 
  1109  009B                     	;# 
  1110  009B                     	;# 
  1111  009C                     	;# 
  1112  009D                     	;# 
  1113  009E                     	;# 
  1114  010C                     	;# 
  1115  010D                     	;# 
  1116  010E                     	;# 
  1117  0110                     	;# 
  1118  0111                     	;# 
  1119  0112                     	;# 
  1120  0113                     	;# 
  1121  0114                     	;# 
  1122  0115                     	;# 
  1123  0116                     	;# 
  1124  0117                     	;# 
  1125  0118                     	;# 
  1126  0119                     	;# 
  1127  011A                     	;# 
  1128  011B                     	;# 
  1129  011D                     	;# 
  1130  018C                     	;# 
  1131  018D                     	;# 
  1132  0191                     	;# 
  1133  0191                     	;# 
  1134  0192                     	;# 
  1135  0193                     	;# 
  1136  0193                     	;# 
  1137  0193                     	;# 
  1138  0194                     	;# 
  1139  0195                     	;# 
  1140  0196                     	;# 
  1141  0199                     	;# 
  1142  019A                     	;# 
  1143  019B                     	;# 
  1144  019B                     	;# 
  1145  019B                     	;# 
  1146  019B                     	;# 
  1147  019C                     	;# 
  1148  019C                     	;# 
  1149  019D                     	;# 
  1150  019E                     	;# 
  1151  019F                     	;# 
  1152  020D                     	;# 
  1153  0210                     	;# 
  1154  0211                     	;# 
  1155  0212                     	;# 
  1156  0213                     	;# 
  1157  0214                     	;# 
  1158  0215                     	;# 
  1159  0215                     	;# 
  1160  0216                     	;# 
  1161  0217                     	;# 
  1162  0291                     	;# 
  1163  0291                     	;# 
  1164  0292                     	;# 
  1165  0293                     	;# 
  1166  0294                     	;# 
  1167  0295                     	;# 
  1168  0295                     	;# 
  1169  0296                     	;# 
  1170  0298                     	;# 
  1171  0298                     	;# 
  1172  0299                     	;# 
  1173  029A                     	;# 
  1174  029B                     	;# 
  1175  029C                     	;# 
  1176  029C                     	;# 
  1177  029D                     	;# 
  1178  029E                     	;# 
  1179  029F                     	;# 
  1180  0311                     	;# 
  1181  0311                     	;# 
  1182  0312                     	;# 
  1183  0313                     	;# 
  1184  0314                     	;# 
  1185  0315                     	;# 
  1186  0315                     	;# 
  1187  0316                     	;# 
  1188  0318                     	;# 
  1189  0318                     	;# 
  1190  0319                     	;# 
  1191  031A                     	;# 
  1192  031C                     	;# 
  1193  031C                     	;# 
  1194  031D                     	;# 
  1195  031E                     	;# 
  1196  0394                     	;# 
  1197  0395                     	;# 
  1198  0396                     	;# 
  1199  0415                     	;# 
  1200  0416                     	;# 
  1201  0417                     	;# 
  1202  041C                     	;# 
  1203  041D                     	;# 
  1204  041E                     	;# 
  1205  0791                     	;# 
  1206  0792                     	;# 
  1207  0793                     	;# 
  1208  0794                     	;# 
  1209  0795                     	;# 
  1210  0798                     	;# 
  1211  0799                     	;# 
  1212  07A0                     	;# 
  1213  07A1                     	;# 
  1214  07A3                     	;# 
  1215  07A4                     	;# 
  1216  07A6                     	;# 
  1217  07A7                     	;# 
  1218  07A9                     	;# 
  1219  07AA                     	;# 
  1220  0FE4                     	;# 
  1221  0FE5                     	;# 
  1222  0FE6                     	;# 
  1223  0FE7                     	;# 
  1224  0FE8                     	;# 
  1225  0FE9                     	;# 
  1226  0FEA                     	;# 
  1227  0FEB                     	;# 
  1228  0FED                     	;# 
  1229  0FEE                     	;# 
  1230  0FEF                     	;# 
  1231  0000                     	;# 
  1232  0001                     	;# 
  1233  0002                     	;# 
  1234  0003                     	;# 
  1235  0004                     	;# 
  1236  0005                     	;# 
  1237  0006                     	;# 
  1238  0007                     	;# 
  1239  0008                     	;# 
  1240  0009                     	;# 
  1241  000A                     	;# 
  1242  000B                     	;# 
  1243  000C                     	;# 
  1244  000D                     	;# 
  1245  000E                     	;# 
  1246  0010                     	;# 
  1247  0011                     	;# 
  1248  0012                     	;# 
  1249  0013                     	;# 
  1250  0015                     	;# 
  1251  0016                     	;# 
  1252  0016                     	;# 
  1253  0017                     	;# 
  1254  0018                     	;# 
  1255  0019                     	;# 
  1256  001A                     	;# 
  1257  001B                     	;# 
  1258  001C                     	;# 
  1259  001E                     	;# 
  1260  001F                     	;# 
  1261  008C                     	;# 
  1262  008D                     	;# 
  1263  008E                     	;# 
  1264  0090                     	;# 
  1265  0091                     	;# 
  1266  0092                     	;# 
  1267  0093                     	;# 
  1268  0095                     	;# 
  1269  0096                     	;# 
  1270  0097                     	;# 
  1271  0098                     	;# 
  1272  0099                     	;# 
  1273  009A                     	;# 
  1274  009B                     	;# 
  1275  009B                     	;# 
  1276  009C                     	;# 
  1277  009D                     	;# 
  1278  009E                     	;# 
  1279  010C                     	;# 
  1280  010D                     	;# 
  1281  010E                     	;# 
  1282  0110                     	;# 
  1283  0111                     	;# 
  1284  0112                     	;# 
  1285  0113                     	;# 
  1286  0114                     	;# 
  1287  0115                     	;# 
  1288  0116                     	;# 
  1289  0117                     	;# 
  1290  0118                     	;# 
  1291  0119                     	;# 
  1292  011A                     	;# 
  1293  011B                     	;# 
  1294  011D                     	;# 
  1295  018C                     	;# 
  1296  018D                     	;# 
  1297  0191                     	;# 
  1298  0191                     	;# 
  1299  0192                     	;# 
  1300  0193                     	;# 
  1301  0193                     	;# 
  1302  0193                     	;# 
  1303  0194                     	;# 
  1304  0195                     	;# 
  1305  0196                     	;# 
  1306  0199                     	;# 
  1307  019A                     	;# 
  1308  019B                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019B                     	;# 
  1312  019C                     	;# 
  1313  019C                     	;# 
  1314  019D                     	;# 
  1315  019E                     	;# 
  1316  019F                     	;# 
  1317  020D                     	;# 
  1318  0210                     	;# 
  1319  0211                     	;# 
  1320  0212                     	;# 
  1321  0213                     	;# 
  1322  0214                     	;# 
  1323  0215                     	;# 
  1324  0215                     	;# 
  1325  0216                     	;# 
  1326  0217                     	;# 
  1327  0291                     	;# 
  1328  0291                     	;# 
  1329  0292                     	;# 
  1330  0293                     	;# 
  1331  0294                     	;# 
  1332  0295                     	;# 
  1333  0295                     	;# 
  1334  0296                     	;# 
  1335  0298                     	;# 
  1336  0298                     	;# 
  1337  0299                     	;# 
  1338  029A                     	;# 
  1339  029B                     	;# 
  1340  029C                     	;# 
  1341  029C                     	;# 
  1342  029D                     	;# 
  1343  029E                     	;# 
  1344  029F                     	;# 
  1345  0311                     	;# 
  1346  0311                     	;# 
  1347  0312                     	;# 
  1348  0313                     	;# 
  1349  0314                     	;# 
  1350  0315                     	;# 
  1351  0315                     	;# 
  1352  0316                     	;# 
  1353  0318                     	;# 
  1354  0318                     	;# 
  1355  0319                     	;# 
  1356  031A                     	;# 
  1357  031C                     	;# 
  1358  031C                     	;# 
  1359  031D                     	;# 
  1360  031E                     	;# 
  1361  0394                     	;# 
  1362  0395                     	;# 
  1363  0396                     	;# 
  1364  0415                     	;# 
  1365  0416                     	;# 
  1366  0417                     	;# 
  1367  041C                     	;# 
  1368  041D                     	;# 
  1369  041E                     	;# 
  1370  0791                     	;# 
  1371  0792                     	;# 
  1372  0793                     	;# 
  1373  0794                     	;# 
  1374  0795                     	;# 
  1375  0798                     	;# 
  1376  0799                     	;# 
  1377  07A0                     	;# 
  1378  07A1                     	;# 
  1379  07A3                     	;# 
  1380  07A4                     	;# 
  1381  07A6                     	;# 
  1382  07A7                     	;# 
  1383  07A9                     	;# 
  1384  07AA                     	;# 
  1385  0FE4                     	;# 
  1386  0FE5                     	;# 
  1387  0FE6                     	;# 
  1388  0FE7                     	;# 
  1389  0FE8                     	;# 
  1390  0FE9                     	;# 
  1391  0FEA                     	;# 
  1392  0FEB                     	;# 
  1393  0FED                     	;# 
  1394  0FEE                     	;# 
  1395  0FEF                     	;# 
  1396  0000                     	;# 
  1397  0001                     	;# 
  1398  0002                     	;# 
  1399  0003                     	;# 
  1400  0004                     	;# 
  1401  0005                     	;# 
  1402  0006                     	;# 
  1403  0007                     	;# 
  1404  0008                     	;# 
  1405  0009                     	;# 
  1406  000A                     	;# 
  1407  000B                     	;# 
  1408  000C                     	;# 
  1409  000D                     	;# 
  1410  000E                     	;# 
  1411  0010                     	;# 
  1412  0011                     	;# 
  1413  0012                     	;# 
  1414  0013                     	;# 
  1415  0015                     	;# 
  1416  0016                     	;# 
  1417  0016                     	;# 
  1418  0017                     	;# 
  1419  0018                     	;# 
  1420  0019                     	;# 
  1421  001A                     	;# 
  1422  001B                     	;# 
  1423  001C                     	;# 
  1424  001E                     	;# 
  1425  001F                     	;# 
  1426  008C                     	;# 
  1427  008D                     	;# 
  1428  008E                     	;# 
  1429  0090                     	;# 
  1430  0091                     	;# 
  1431  0092                     	;# 
  1432  0093                     	;# 
  1433  0095                     	;# 
  1434  0096                     	;# 
  1435  0097                     	;# 
  1436  0098                     	;# 
  1437  0099                     	;# 
  1438  009A                     	;# 
  1439  009B                     	;# 
  1440  009B                     	;# 
  1441  009C                     	;# 
  1442  009D                     	;# 
  1443  009E                     	;# 
  1444  010C                     	;# 
  1445  010D                     	;# 
  1446  010E                     	;# 
  1447  0110                     	;# 
  1448  0111                     	;# 
  1449  0112                     	;# 
  1450  0113                     	;# 
  1451  0114                     	;# 
  1452  0115                     	;# 
  1453  0116                     	;# 
  1454  0117                     	;# 
  1455  0118                     	;# 
  1456  0119                     	;# 
  1457  011A                     	;# 
  1458  011B                     	;# 
  1459  011D                     	;# 
  1460  018C                     	;# 
  1461  018D                     	;# 
  1462  0191                     	;# 
  1463  0191                     	;# 
  1464  0192                     	;# 
  1465  0193                     	;# 
  1466  0193                     	;# 
  1467  0193                     	;# 
  1468  0194                     	;# 
  1469  0195                     	;# 
  1470  0196                     	;# 
  1471  0199                     	;# 
  1472  019A                     	;# 
  1473  019B                     	;# 
  1474  019B                     	;# 
  1475  019B                     	;# 
  1476  019B                     	;# 
  1477  019C                     	;# 
  1478  019C                     	;# 
  1479  019D                     	;# 
  1480  019E                     	;# 
  1481  019F                     	;# 
  1482  020D                     	;# 
  1483  0210                     	;# 
  1484  0211                     	;# 
  1485  0212                     	;# 
  1486  0213                     	;# 
  1487  0214                     	;# 
  1488  0215                     	;# 
  1489  0215                     	;# 
  1490  0216                     	;# 
  1491  0217                     	;# 
  1492  0291                     	;# 
  1493  0291                     	;# 
  1494  0292                     	;# 
  1495  0293                     	;# 
  1496  0294                     	;# 
  1497  0295                     	;# 
  1498  0295                     	;# 
  1499  0296                     	;# 
  1500  0298                     	;# 
  1501  0298                     	;# 
  1502  0299                     	;# 
  1503  029A                     	;# 
  1504  029B                     	;# 
  1505  029C                     	;# 
  1506  029C                     	;# 
  1507  029D                     	;# 
  1508  029E                     	;# 
  1509  029F                     	;# 
  1510  0311                     	;# 
  1511  0311                     	;# 
  1512  0312                     	;# 
  1513  0313                     	;# 
  1514  0314                     	;# 
  1515  0315                     	;# 
  1516  0315                     	;# 
  1517  0316                     	;# 
  1518  0318                     	;# 
  1519  0318                     	;# 
  1520  0319                     	;# 
  1521  031A                     	;# 
  1522  031C                     	;# 
  1523  031C                     	;# 
  1524  031D                     	;# 
  1525  031E                     	;# 
  1526  0394                     	;# 
  1527  0395                     	;# 
  1528  0396                     	;# 
  1529  0415                     	;# 
  1530  0416                     	;# 
  1531  0417                     	;# 
  1532  041C                     	;# 
  1533  041D                     	;# 
  1534  041E                     	;# 
  1535  0791                     	;# 
  1536  0792                     	;# 
  1537  0793                     	;# 
  1538  0794                     	;# 
  1539  0795                     	;# 
  1540  0798                     	;# 
  1541  0799                     	;# 
  1542  07A0                     	;# 
  1543  07A1                     	;# 
  1544  07A3                     	;# 
  1545  07A4                     	;# 
  1546  07A6                     	;# 
  1547  07A7                     	;# 
  1548  07A9                     	;# 
  1549  07AA                     	;# 
  1550  0FE4                     	;# 
  1551  0FE5                     	;# 
  1552  0FE6                     	;# 
  1553  0FE7                     	;# 
  1554  0FE8                     	;# 
  1555  0FE9                     	;# 
  1556  0FEA                     	;# 
  1557  0FEB                     	;# 
  1558  0FED                     	;# 
  1559  0FEE                     	;# 
  1560  0FEF                     	;# 
  1561  0000                     	;# 
  1562  0001                     	;# 
  1563  0002                     	;# 
  1564  0003                     	;# 
  1565  0004                     	;# 
  1566  0005                     	;# 
  1567  0006                     	;# 
  1568  0007                     	;# 
  1569  0008                     	;# 
  1570  0009                     	;# 
  1571  000A                     	;# 
  1572  000B                     	;# 
  1573  000C                     	;# 
  1574  000D                     	;# 
  1575  000E                     	;# 
  1576  0010                     	;# 
  1577  0011                     	;# 
  1578  0012                     	;# 
  1579  0013                     	;# 
  1580  0015                     	;# 
  1581  0016                     	;# 
  1582  0016                     	;# 
  1583  0017                     	;# 
  1584  0018                     	;# 
  1585  0019                     	;# 
  1586  001A                     	;# 
  1587  001B                     	;# 
  1588  001C                     	;# 
  1589  001E                     	;# 
  1590  001F                     	;# 
  1591  008C                     	;# 
  1592  008D                     	;# 
  1593  008E                     	;# 
  1594  0090                     	;# 
  1595  0091                     	;# 
  1596  0092                     	;# 
  1597  0093                     	;# 
  1598  0095                     	;# 
  1599  0096                     	;# 
  1600  0097                     	;# 
  1601  0098                     	;# 
  1602  0099                     	;# 
  1603  009A                     	;# 
  1604  009B                     	;# 
  1605  009B                     	;# 
  1606  009C                     	;# 
  1607  009D                     	;# 
  1608  009E                     	;# 
  1609  010C                     	;# 
  1610  010D                     	;# 
  1611  010E                     	;# 
  1612  0110                     	;# 
  1613  0111                     	;# 
  1614  0112                     	;# 
  1615  0113                     	;# 
  1616  0114                     	;# 
  1617  0115                     	;# 
  1618  0116                     	;# 
  1619  0117                     	;# 
  1620  0118                     	;# 
  1621  0119                     	;# 
  1622  011A                     	;# 
  1623  011B                     	;# 
  1624  011D                     	;# 
  1625  018C                     	;# 
  1626  018D                     	;# 
  1627  0191                     	;# 
  1628  0191                     	;# 
  1629  0192                     	;# 
  1630  0193                     	;# 
  1631  0193                     	;# 
  1632  0193                     	;# 
  1633  0194                     	;# 
  1634  0195                     	;# 
  1635  0196                     	;# 
  1636  0199                     	;# 
  1637  019A                     	;# 
  1638  019B                     	;# 
  1639  019B                     	;# 
  1640  019B                     	;# 
  1641  019B                     	;# 
  1642  019C                     	;# 
  1643  019C                     	;# 
  1644  019D                     	;# 
  1645  019E                     	;# 
  1646  019F                     	;# 
  1647  020D                     	;# 
  1648  0210                     	;# 
  1649  0211                     	;# 
  1650  0212                     	;# 
  1651  0213                     	;# 
  1652  0214                     	;# 
  1653  0215                     	;# 
  1654  0215                     	;# 
  1655  0216                     	;# 
  1656  0217                     	;# 
  1657  0291                     	;# 
  1658  0291                     	;# 
  1659  0292                     	;# 
  1660  0293                     	;# 
  1661  0294                     	;# 
  1662  0295                     	;# 
  1663  0295                     	;# 
  1664  0296                     	;# 
  1665  0298                     	;# 
  1666  0298                     	;# 
  1667  0299                     	;# 
  1668  029A                     	;# 
  1669  029B                     	;# 
  1670  029C                     	;# 
  1671  029C                     	;# 
  1672  029D                     	;# 
  1673  029E                     	;# 
  1674  029F                     	;# 
  1675  0311                     	;# 
  1676  0311                     	;# 
  1677  0312                     	;# 
  1678  0313                     	;# 
  1679  0314                     	;# 
  1680  0315                     	;# 
  1681  0315                     	;# 
  1682  0316                     	;# 
  1683  0318                     	;# 
  1684  0318                     	;# 
  1685  0319                     	;# 
  1686  031A                     	;# 
  1687  031C                     	;# 
  1688  031C                     	;# 
  1689  031D                     	;# 
  1690  031E                     	;# 
  1691  0394                     	;# 
  1692  0395                     	;# 
  1693  0396                     	;# 
  1694  0415                     	;# 
  1695  0416                     	;# 
  1696  0417                     	;# 
  1697  041C                     	;# 
  1698  041D                     	;# 
  1699  041E                     	;# 
  1700  0791                     	;# 
  1701  0792                     	;# 
  1702  0793                     	;# 
  1703  0794                     	;# 
  1704  0795                     	;# 
  1705  0798                     	;# 
  1706  0799                     	;# 
  1707  07A0                     	;# 
  1708  07A1                     	;# 
  1709  07A3                     	;# 
  1710  07A4                     	;# 
  1711  07A6                     	;# 
  1712  07A7                     	;# 
  1713  07A9                     	;# 
  1714  07AA                     	;# 
  1715  0FE4                     	;# 
  1716  0FE5                     	;# 
  1717  0FE6                     	;# 
  1718  0FE7                     	;# 
  1719  0FE8                     	;# 
  1720  0FE9                     	;# 
  1721  0FEA                     	;# 
  1722  0FEB                     	;# 
  1723  0FED                     	;# 
  1724  0FEE                     	;# 
  1725  0FEF                     	;# 
  1726                           
  1727                           	psect	idataBANK0
  1728  0000                     __pidataBANK0:	
  1729                           
  1730                           	psect	idataBANK1
  1731  0000                     __pidataBANK1:	
  1732                           
  1733                           	psect	idataBANK2
  1734  0000                     __pidataBANK2:	
  1735                           
  1736                           	psect	stringtext1
  1737  1800                     __pstringtext1:	
  1738  1800                     _PWM_trans_table:	
  1739  1800  346E               	retlw	110
  1740  1801  346E               	retlw	110
  1741  1802  346E               	retlw	110
  1742  1803  3400               	retlw	0
  1743  1804  3400               	retlw	0
  1744  1805  3400               	retlw	0
  1745  1806  3400               	retlw	0
  1746  1807  3400               	retlw	0
  1747  1808  3400               	retlw	0
  1748  1809  3400               	retlw	0
  1749  180A  34D3               	retlw	211
  1750  180B  34D3               	retlw	211
  1751  180C  34D3               	retlw	211
  1752  180D  34D0               	retlw	208
  1753  180E  34CE               	retlw	206
  1754  180F  34CC               	retlw	204
  1755  1810  34C9               	retlw	201
  1756  1811  34C7               	retlw	199
  1757  1812  34C5               	retlw	197
  1758  1813  34C3               	retlw	195
  1759  1814  34C1               	retlw	193
  1760  1815  34BF               	retlw	191
  1761  1816  34BD               	retlw	189
  1762  1817  34BB               	retlw	187
  1763  1818  34BA               	retlw	186
  1764  1819  34B8               	retlw	184
  1765  181A  34B6               	retlw	182
  1766  181B  34B4               	retlw	180
  1767  181C  34B2               	retlw	178
  1768  181D  34B1               	retlw	177
  1769  181E  34AF               	retlw	175
  1770  181F  34AD               	retlw	173
  1771  1820  34AC               	retlw	172
  1772  1821  34AA               	retlw	170
  1773  1822  34A9               	retlw	169
  1774  1823  34A7               	retlw	167
  1775  1824  34A6               	retlw	166
  1776  1825  34A4               	retlw	164
  1777  1826  34A3               	retlw	163
  1778  1827  34A2               	retlw	162
  1779  1828  34A0               	retlw	160
  1780  1829  349F               	retlw	159
  1781  182A  349D               	retlw	157
  1782  182B  349C               	retlw	156
  1783  182C  349B               	retlw	155
  1784  182D  349A               	retlw	154
  1785  182E  3498               	retlw	152
  1786  182F  3497               	retlw	151
  1787  1830  3496               	retlw	150
  1788  1831  3495               	retlw	149
  1789  1832  3494               	retlw	148
  1790  1833  3492               	retlw	146
  1791  1834  3491               	retlw	145
  1792  1835  3490               	retlw	144
  1793  1836  348F               	retlw	143
  1794  1837  348E               	retlw	142
  1795  1838  348D               	retlw	141
  1796  1839  348C               	retlw	140
  1797  183A  348B               	retlw	139
  1798  183B  348A               	retlw	138
  1799  183C  3489               	retlw	137
  1800  183D  3488               	retlw	136
  1801  183E  3487               	retlw	135
  1802  183F  3486               	retlw	134
  1803  1840  3485               	retlw	133
  1804  1841  3484               	retlw	132
  1805  1842  3483               	retlw	131
  1806  1843  3482               	retlw	130
  1807  1844  3481               	retlw	129
  1808  1845  3480               	retlw	128
  1809  1846  347F               	retlw	127
  1810  1847  347F               	retlw	127
  1811  1848  347E               	retlw	126
  1812  1849  347D               	retlw	125
  1813  184A  347C               	retlw	124
  1814  184B  347B               	retlw	123
  1815  184C  347A               	retlw	122
  1816  184D  347A               	retlw	122
  1817  184E  3479               	retlw	121
  1818  184F  3478               	retlw	120
  1819  1850  3477               	retlw	119
  1820  1851  3477               	retlw	119
  1821  1852  3476               	retlw	118
  1822  1853  3475               	retlw	117
  1823  1854  3474               	retlw	116
  1824  1855  3474               	retlw	116
  1825  1856  3473               	retlw	115
  1826  1857  3472               	retlw	114
  1827  1858  3472               	retlw	114
  1828  1859  3471               	retlw	113
  1829  185A  3470               	retlw	112
  1830  185B  3470               	retlw	112
  1831  185C  346F               	retlw	111
  1832  185D  346E               	retlw	110
  1833  185E  346E               	retlw	110
  1834  185F  346E               	retlw	110
  1835  1860  346E               	retlw	110
  1836  1861  346E               	retlw	110
  1837  1862  346E               	retlw	110
  1838  1863  346E               	retlw	110
  1839  1864  346E               	retlw	110
  1840  1865                     __end_of_PWM_trans_table:	
  1841                           
  1842                           	psect	nvBANK1
  1843  00EF                     __pnvBANK1:	
  1844  00EF                     _ui8_ResetMatlab:	
  1845  00EF                     	ds	1
  1846                           
  1847                           	psect	nvBANK3
  1848  01E6                     __pnvBANK3:	
  1849  01E6                     _ui16_Current_Thresh:	
  1850  01E6                     	ds	2
  1851  01E8                     _ui16_dryRun_Thresh:	
  1852  01E8                     	ds	2
  1853  0017                     _TMR1H	set	23
  1854  0016                     _TMR1L	set	22
  1855  001A                     _TMR2	set	26
  1856  0015                     _TMR0	set	21
  1857  0018                     _T1CON	set	24
  1858  000B                     _INTCON	set	11
  1859  001C                     _T2CON	set	28
  1860  001B                     _PR2	set	27
  1861  005D                     _TMR0IE	set	93
  1862  009D                     _CCP4IF	set	157
  1863  009C                     _CCP3IF	set	156
  1864  008A                     _CCP1IF	set	138
  1865  008D                     _RCIF	set	141
  1866  0090                     _CCP2IF	set	144
  1867  009E                     _CCP5IF	set	158
  1868  009B                     _TMR6IF	set	155
  1869  0089                     _TMR2IF	set	137
  1870  0099                     _TMR4IF	set	153
  1871  0088                     _TMR1IF	set	136
  1872  0075                     _RC5	set	117
  1873  005F                     _GIE	set	95
  1874  005E                     _PEIE	set	94
  1875  0097                     _WDTCON	set	151
  1876  0099                     _OSCCON	set	153
  1877  0093                     _PIE3	set	147
  1878  0092                     _PIE2	set	146
  1879  0095                     _OPTION_REG	set	149
  1880  008E                     _TRISC	set	142
  1881  008D                     _TRISB	set	141
  1882  008C                     _TRISA	set	140
  1883  0091                     _PIE1	set	145
  1884  009B                     _ADRESL	set	155
  1885  009C                     _ADRESH	set	156
  1886  009D                     _ADCON0	set	157
  1887  009E                     _ADCON1	set	158
  1888  049B                     _TMR6IE	set	1179
  1889  0499                     _TMR4IE	set	1177
  1890  0488                     _TMR1IE	set	1160
  1891  049E                     _CCP5IE	set	1182
  1892  049D                     _CCP4IE	set	1181
  1893  049C                     _CCP3IE	set	1180
  1894  048A                     _CCP1IE	set	1162
  1895  0489                     _TMR2IE	set	1161
  1896  0490                     _CCP2IE	set	1168
  1897  0495                     _C1IE	set	1173
  1898  04E9                     _GO_nDONE	set	1257
  1899  04E8                     _ADON	set	1256
  1900  010D                     _LATB	set	269
  1901  010C                     _LATA	set	268
  1902  010E                     _LATC	set	270
  1903  0112                     _CM1CON1	set	274
  1904  0111                     _CM1CON0	set	273
  1905  0117                     _FVRCON	set	279
  1906  0870                     _LATC0	set	2160
  1907  0874                     _LATC4	set	2164
  1908  0873                     _LATC3	set	2163
  1909  0871                     _LATC1	set	2161
  1910  0872                     _LATC2	set	2162
  1911  0869                     _LATB1	set	2153
  1912  086A                     _LATB2	set	2154
  1913  088E                     _C1OUT	set	2190
  1914  018D                     _ANSELB	set	397
  1915  018C                     _ANSELA	set	396
  1916  019A                     _TXREG	set	410
  1917  0199                     _RCREG	set	409
  1918  019F                     _BAUDCON	set	415
  1919  019D                     _RCSTA	set	413
  1920  019E                     _TXSTA	set	414
  1921  019C                     _SPBRGH	set	412
  1922  019B                     _SPBRG	set	411
  1923  0196                     _EECON2	set	406
  1924  0193                     _EEDATL	set	403
  1925  0193                     _EEDATA	set	403
  1926  0194                     _EEDATH	set	404
  1927  0195                     _EECON1	set	405
  1928  0192                     _EEADRH	set	402
  1929  0191                     _EEADRL	set	401
  1930  0CF3                     _SENDB	set	3315
  1931  0CA9                     _WR	set	3241
  1932  0CAE                     _CFGS	set	3246
  1933  0CAF                     _EEPGD	set	3247
  1934  0CA8                     _RD	set	3240
  1935  0CAA                     _WREN	set	3242
  1936  0292                     _CCPR1H	set	658
  1937  0299                     _CCPR2H	set	665
  1938  0298                     _CCPR2L	set	664
  1939  029A                     _CCP2CON	set	666
  1940  0291                     _CCPR1L	set	657
  1941  0293                     _CCP1CON	set	659
  1942  0295                     _CCP1AS	set	661
  1943  0294                     _PWM1CON	set	660
  1944  0296                     _PSTR1CON	set	662
  1945  14AF                     _CCP1ASE	set	5295
  1946  031D                     _CCPR5H	set	797
  1947  031C                     _CCPR5L	set	796
  1948  031E                     _CCP5CON	set	798
  1949  0319                     _CCPR4H	set	793
  1950  0318                     _CCPR4L	set	792
  1951  031A                     _CCP4CON	set	794
  1952  0312                     _CCPR3H	set	786
  1953  0311                     _CCPR3L	set	785
  1954  0313                     _CCP3CON	set	787
  1955  041C                     _TMR6	set	1052
  1956  0415                     _TMR4	set	1045
  1957  041E                     _T6CON	set	1054
  1958  0417                     _T4CON	set	1047
  1959                           
  1960                           ; #config settings
  1961  0000                     
  1962                           	psect	cinit
  1963  002D                     start_initialization:	
  1964  002D                     __initialization:	
  1965                           
  1966                           ;initializer for _ui8_selected_lid
  1967  002D  3080               	movlw	128
  1968  002E  00E9               	movwf	__pdataBANK0& (0+127)
  1969                           
  1970                           ; Initialize objects allocated to BANK1
  1971  002F  0021               	movlb	1	; select bank1
  1972                           
  1973                           ;initializer for _ui16_I_cal_Ph3
  1974  0030  3001               	movlw	1
  1975  0031  00E7               	movwf	__pdataBANK1& (0+127)
  1976  0032  01E8               	clrf	(__pdataBANK1+1)& (0+127)
  1977                           
  1978                           ;initializer for _ui16_I_cal_Ph2
  1979  0033  00E9               	movwf	(__pdataBANK1+2)& (0+127)
  1980  0034  01EA               	clrf	(__pdataBANK1+3)& (0+127)
  1981                           
  1982                           ;initializer for _ui16_I_cal_Ph1
  1983  0035  00EB               	movwf	(__pdataBANK1+4)& (0+127)
  1984  0036  01EC               	clrf	(__pdataBANK1+5)& (0+127)
  1985                           
  1986                           ;initializer for _wkpoint
  1987  0037  00ED               	movwf	(__pdataBANK1+6)& (0+127)
  1988                           
  1989                           ;initializer for _ict_stamp
  1990  0038  00EE               	movwf	(__pdataBANK1+7)& (0+127)
  1991                           
  1992                           ; Initialize objects allocated to BANK2
  1993  0039  0022               	movlb	2	; select bank2
  1994                           
  1995                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  1996  003A  3080               	movlw	128
  1997  003B  00E9               	movwf	__pdataBANK2& (0+127)
  1998  003C  3038               	movlw	56
  1999  003D  00EA               	movwf	(__pdataBANK2+1)& (0+127)
  2000  003E  3001               	movlw	1
  2001  003F  00EB               	movwf	(__pdataBANK2+2)& (0+127)
  2002  0040  01EC               	clrf	(__pdataBANK2+3)& (0+127)
  2003                           
  2004                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  2005  0041  00ED               	movwf	(__pdataBANK2+4)& (0+127)
  2006                           
  2007                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  2008  0042  00EE               	movwf	(__pdataBANK2+5)& (0+127)
  2009                           
  2010                           ;initializer for _ui8_failure
  2011  0043  3007               	movlw	7
  2012  0044  00EF               	movwf	(__pdataBANK2+6)& (0+127)
  2013                           
  2014                           ; Clear objects allocated to BITBANK0
  2015  0045  0020               	movlb	0	; select bank0
  2016  0046  3054               	movlw	low __pbssBANK0
  2017  0047  01E8               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2018                           
  2019                           ; Clear objects allocated to BANK0
  2020  0048  0084               	movwf	4
  2021  0049  3000               	movlw	high __pbssBANK0
  2022  004A  0085               	movwf	5
  2023  004B  3014               	movlw	20
  2024  004C  3187  2710  3180   	fcall	clear_ram0
  2025                           
  2026                           ; Clear objects allocated to BANK1
  2027  004F  30A0               	movlw	low __pbssBANK1
  2028  0050  0084               	movwf	4
  2029  0051  3000               	movlw	high __pbssBANK1
  2030  0052  0085               	movwf	5
  2031  0053  3047               	movlw	71
  2032  0054  3187  2710  3180   	fcall	clear_ram0
  2033                           
  2034                           ; Clear objects allocated to BANK2
  2035  0057  3020               	movlw	low __pbssBANK2
  2036  0058  0084               	movwf	4
  2037  0059  3001               	movlw	high __pbssBANK2
  2038  005A  0085               	movwf	5
  2039  005B  3049               	movlw	73
  2040  005C  3187  2710  3180   	fcall	clear_ram0
  2041                           
  2042                           ; Clear objects allocated to BANK3
  2043  005F  30A0               	movlw	low __pbssBANK3
  2044  0060  0084               	movwf	4
  2045  0061  3001               	movlw	high __pbssBANK3
  2046  0062  0085               	movwf	5
  2047  0063  3046               	movlw	70
  2048  0064  3187  2710  3180   	fcall	clear_ram0
  2049                           
  2050                           ; Clear objects allocated to BANK4
  2051  0067  3040               	movlw	low __pbssBANK4
  2052  0068  0084               	movwf	4
  2053  0069  3002               	movlw	high __pbssBANK4
  2054  006A  0085               	movwf	5
  2055  006B  301B               	movlw	27
  2056  006C  3187  2710  3180   	fcall	clear_ram0
  2057  006F                     end_of_initialization:	
  2058                           ;End of C runtime variable initialization code
  2059                           
  2060  006F                     __end_of__initialization:	
  2061  006F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2062  0070  0020               	movlb	0
  2063  0071  2872               	ljmp	_main	;jump to C main() function
  2064  0072                     __pmaintext:	
  2065 ;;
  2066 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2067 ;;
  2068 ;; *************** function _main *****************
  2069 ;; Defined at:
  2070 ;;		line 630 in file "../main.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : B1F/0
  2081 ;;		On exit  : 1F/1
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2084 ;;      Params:         0       0       0       0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       4       0       0       0
  2087 ;;      Totals:         0       0       0       0       4       0       0       0
  2088 ;;Total ram usage:        4 bytes
  2089 ;; Hardware stack levels required when called:    8
  2090 ;; This function calls:
  2091 ;;		_BVH2_Appl_Layer
  2092 ;;		_EOL
  2093 ;;		_Get_Analog_Value
  2094 ;;		_InitMotorRun
  2095 ;;		_InitMotorStop
  2096 ;;		_Receive_Diag
  2097 ;;		_SetDiagAlarm
  2098 ;;		___awdiv
  2099 ;;		_clear_timer
  2100 ;;		_read_eeprom_data
  2101 ;;		_system_init
  2102 ;; This function is called by:
  2103 ;;		Startup code after reset
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           
  2108                           ;psect for function _main
  2109  0072                     _main:	
  2110                           
  2111                           ;main.c: 642: system_init( );
  2112                           
  2113                           ;incstack = 0
  2114                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2115  0072  2334  3180         	fcall	_system_init
  2116                           
  2117                           ;main.c: 643: clear_timer( 4 );
  2118  0074  3004               	movlw	4
  2119  0075  2313  3180         	fcall	_clear_timer
  2120                           
  2121                           ;main.c: 644: ui8_lastTaskvalue = 0;
  2122  0077  0022               	movlb	2	; select bank2
  2123  0078  01D6               	clrf	_ui8_lastTaskvalue^(0+256)
  2124  0079                     l14210:	
  2125                           
  2126                           ;main.c: 697: {
  2127                           ;main.c: 699: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  2128  0079  0021               	movlb	1	; select bank1
  2129  007A  0850               	movf	_ui8_Task_Cont1ms^(0+128),w
  2130  007B  0023               	movlb	3	; select bank3
  2131  007C  00EA               	movwf	??_main^(0+384)
  2132  007D  01EB               	clrf	(??_main^(0+384)+1)
  2133  007E  086B               	movf	(??_main+1)^(0+384),w
  2134  007F  00ED               	movwf	((??_main+2)^(0+384)+1)
  2135  0080  0022               	movlb	2	; select bank2
  2136  0081  0856               	movf	_ui8_lastTaskvalue^(0+256),w
  2137  0082  0023               	movlb	3	; select bank3
  2138  0083  026A               	subwf	??_main^(0+384),w
  2139  0084  00EC               	movwf	(??_main+2)^(0+384)
  2140  0085  1C03               	skipc
  2141  0086  03ED               	decf	((??_main+2)^(0+384)+1),f
  2142  0087  046D               	iorwf	((??_main+2)^(0+384)+1),w
  2143  0088  1903               	btfsc	3,2
  2144  0089  2879               	goto	l14210
  2145                           
  2146                           ;main.c: 701: {
  2147                           ;main.c: 707: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  2148  008A  0021               	movlb	1	; select bank1
  2149  008B  0850               	movf	_ui8_Task_Cont1ms^(0+128),w
  2150  008C  0022               	movlb	2	; select bank2
  2151  008D  00D6               	movwf	_ui8_lastTaskvalue^(0+256)
  2152                           
  2153                           ;main.c: 710: ui8_Task_Cont3ms++;
  2154  008E  0AD8               	incf	_ui8_Task_Cont3ms^(0+256),f
  2155                           
  2156                           ;main.c: 711: ui8_Task_Cont5ms++;
  2157  008F  0AD7               	incf	_ui8_Task_Cont5ms^(0+256),f
  2158                           
  2159                           ;main.c: 712: ui8_Task_Cont100ms++;
  2160  0090  0021               	movlb	1	; select bank1
  2161  0091  0AC8               	incf	_ui8_Task_Cont100ms^(0+128),f
  2162                           
  2163                           ;main.c: 771: if( ui8_error_Flags.bits.B1 == 1)
  2164  0092  0020               	movlb	0	; select bank0
  2165  0093  1CE5               	btfss	_ui8_error_Flags,1
  2166  0094  2899               	goto	l14224
  2167                           
  2168                           ;main.c: 773: {
  2169                           ;main.c: 780: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 2;
  2170  0095  30C8               	movlw	200
  2171  0096  009B               	movwf	27	;volatile
  2172                           
  2173                           ;main.c: 781: ui8_duty_cycle_BLDC = 100*5/4;
  2174  0097  307D               	movlw	125
  2175  0098  289B               	goto	L1
  2176  0099                     l14224:	
  2177                           ;main.c: 829: }
  2178                           
  2179                           
  2180                           ;main.c: 832: else
  2181                           ;main.c: 833: {
  2182                           ;main.c: 840: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  2183  0099  307D               	movlw	125
  2184  009A  009B               	movwf	27	;volatile
  2185  009B                     L1:	
  2186                           
  2187                           ;main.c: 841: ui8_duty_cycle_BLDC = 100*5/4;
  2188  009B  00E4               	movwf	_ui8_duty_cycle_BLDC
  2189                           
  2190                           ;main.c: 891: }
  2191                           ;main.c: 947: Get_Analog_Value( );
  2192  009C  21ED  3180         	fcall	_Get_Analog_Value
  2193                           
  2194                           ;main.c: 993: if( ui8_Task_Cont3ms > 2 )
  2195  009E  3003               	movlw	3
  2196  009F  0022               	movlb	2	; select bank2
  2197  00A0  0258               	subwf	_ui8_Task_Cont3ms^(0+256),w
  2198  00A1  1803               	btfsc	3,0
  2199                           
  2200                           ;main.c: 995: {
  2201                           ;main.c: 997: ui8_Task_Cont3ms = 0;
  2202  00A2  01D8               	clrf	_ui8_Task_Cont3ms^(0+256)
  2203                           
  2204                           ;main.c: 1032: }
  2205                           ;main.c: 1038: if( ui8_Task_Cont5ms > 4 )
  2206  00A3  3005               	movlw	5
  2207  00A4  0257               	subwf	_ui8_Task_Cont5ms^(0+256),w
  2208  00A5  1C03               	skipc
  2209  00A6  2977               	goto	l14290
  2210                           
  2211                           ;main.c: 1040: {
  2212                           ;main.c: 1044: ui8_Task_Cont5ms = 0;
  2213  00A7  01D7               	clrf	_ui8_Task_Cont5ms^(0+256)
  2214  00A8  0064               	clrwdt	;# 
  2215                           
  2216                           ;main.c: 1054: ui8_PWM_dc_mat = 200;
  2217  00A9  30C8               	movlw	200
  2218  00AA  0020               	movlb	0	; select bank0
  2219  00AB  00DE               	movwf	_ui8_PWM_dc_mat
  2220                           
  2221                           ;main.c: 1055: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  2222  00AC  0022               	movlb	2	; select bank2
  2223  00AD  0828               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
  2224  00AE  00AA               	movwf	(_ui16_PWM_Freq_mat+1)^(0+256)
  2225  00AF  0827               	movf	_ui16_PWM_Freq_In^(0+256),w
  2226  00B0  00A9               	movwf	_ui16_PWM_Freq_mat^(0+256)
  2227                           
  2228                           ;main.c: 1056: ui16_Speed_mat = ui16_speed_fil;
  2229  00B1  0021               	movlb	1	; select bank1
  2230  00B2  0833               	movf	(_ui16_speed_fil+1)^(0+128),w
  2231  00B3  0020               	movlb	0	; select bank0
  2232  00B4  00D7               	movwf	_ui16_Speed_mat+1
  2233  00B5  0021               	movlb	1	; select bank1
  2234  00B6  0832               	movf	_ui16_speed_fil^(0+128),w
  2235  00B7  0020               	movlb	0	; select bank0
  2236  00B8  00D6               	movwf	_ui16_Speed_mat
  2237                           
  2238                           ;main.c: 1057: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  2239  00B9  0023               	movlb	3	; select bank3
  2240  00BA  085B               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  2241  00BB  0022               	movlb	2	; select bank2
  2242  00BC  00A6               	movwf	(_ui16_mat_inpTemp+1)^(0+256)
  2243  00BD  0023               	movlb	3	; select bank3
  2244  00BE  085A               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  2245  00BF  0022               	movlb	2	; select bank2
  2246  00C0  00A5               	movwf	_ui16_mat_inpTemp^(0+256)
  2247                           
  2248                           ;main.c: 1058: ui8_Ki_mat = 5;
  2249  00C1  3005               	movlw	5
  2250  00C2  0023               	movlb	3	; select bank3
  2251  00C3  00CA               	movwf	_ui8_Ki_mat^(0+384)
  2252  00C4  01CB               	clrf	(_ui8_Ki_mat+1)^(0+384)
  2253                           
  2254                           ;main.c: 1059: ui8_Kp_mat = 0;
  2255  00C5  0022               	movlb	2	; select bank2
  2256  00C6  01DE               	clrf	_ui8_Kp_mat^(0+256)
  2257                           
  2258                           ;main.c: 1069: if( ui8_error_Flags.bits.B1 == 1 )
  2259  00C7  0020               	movlb	0	; select bank0
  2260  00C8  1CE5               	btfss	_ui8_error_Flags,1
  2261  00C9  28E2               	goto	l14252
  2262                           
  2263                           ;main.c: 1071: {
  2264                           ;main.c: 1074: ui16_Speed_demand_mat = ( PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] )>>1;
  2265  00CA  365E               	lsrf	_ui8_PWM_dc_mat,w
  2266  00CB  23E1  3180         	fcall	PL8	;call to abstracted procedure
  2267  00CD  3689               	lsrf	9,f
  2268  00CE  0023               	movlb	3	; select bank3
  2269  00CF  00C8               	movwf	_ui16_Speed_demand_mat^(0+384)
  2270  00D0  305F               	movlw	low ((_PWM_trans_table+95)| (0+32768))
  2271  00D1  01C9               	clrf	(_ui16_Speed_demand_mat+1)^(0+384)
  2272                           
  2273                           ;main.c: 1077: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] )>>1;
  2274  00D2  0084               	movwf	4
  2275  00D3  3098               	movlw	high ((_PWM_trans_table+95)| (0+32768))
  2276  00D4  0085               	movwf	5
  2277  00D5  0800               	movf	0,w	;code access
  2278  00D6  3689               	lsrf	9,f
  2279  00D7  00C6               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  2280  00D8  300B               	movlw	low ((_PWM_trans_table+11)| (0+32768))
  2281  00D9  01C7               	clrf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  2282                           
  2283                           ;main.c: 1080: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] )>>1;
  2284  00DA  0084               	movwf	4
  2285  00DB  3098               	movlw	high ((_PWM_trans_table+11)| (0+32768))
  2286  00DC  0085               	movwf	5
  2287  00DD  0800               	movf	0,w	;code access
  2288  00DE  3689               	lsrf	9,f
  2289  00DF  00C4               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  2290  00E0  01C5               	clrf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  2291                           
  2292                           ;main.c: 1082: }
  2293  00E1  2911               	goto	l14254
  2294  00E2                     l14252:	
  2295                           
  2296                           ;main.c: 1085: else
  2297                           ;main.c: 1086: {
  2298                           ;main.c: 1089: ui16_Speed_demand_mat = PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] * 4 / 5;
  2299  00E2  365E               	lsrf	_ui8_PWM_dc_mat,w
  2300  00E3  23E1  3180         	fcall	PL8	;call to abstracted procedure
  2301  00E5  23F0  3180         	fcall	PL48	;call to abstracted procedure
  2302  00E7  219F  3180         	fcall	___awdiv
  2303  00E9  0825               	movf	?___awdiv+1,w
  2304  00EA  0023               	movlb	3	; select bank3
  2305  00EB  00C9               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  2306  00EC  0020               	movlb	0	; select bank0
  2307  00ED  0824               	movf	?___awdiv,w
  2308  00EE  0023               	movlb	3	; select bank3
  2309  00EF  00C8               	movwf	_ui16_Speed_demand_mat^(0+384)
  2310                           
  2311                           ;main.c: 1092: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] ) * 4 / 5;
  2312  00F0  305F               	movlw	low ((_PWM_trans_table+95)| (0+32768))
  2313  00F1  0084               	movwf	4
  2314  00F2  3098               	movlw	high ((_PWM_trans_table+95)| (0+32768))
  2315  00F3  0085               	movwf	5
  2316  00F4  0800               	movf	0,w	;code access
  2317  00F5  0020               	movlb	0	; select bank0
  2318  00F6  23F0  3180         	fcall	PL48	;call to abstracted procedure
  2319  00F8  219F  3180         	fcall	___awdiv
  2320  00FA  0825               	movf	?___awdiv+1,w
  2321  00FB  0023               	movlb	3	; select bank3
  2322  00FC  00C7               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  2323  00FD  0020               	movlb	0	; select bank0
  2324  00FE  0824               	movf	?___awdiv,w
  2325  00FF  0023               	movlb	3	; select bank3
  2326  0100  00C6               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  2327                           
  2328                           ;main.c: 1095: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] ) * 4 / 5;
  2329  0101  300B               	movlw	low ((_PWM_trans_table+11)| (0+32768))
  2330  0102  0084               	movwf	4
  2331  0103  3098               	movlw	high ((_PWM_trans_table+11)| (0+32768))
  2332  0104  0085               	movwf	5
  2333  0105  0800               	movf	0,w	;code access
  2334  0106  0020               	movlb	0	; select bank0
  2335  0107  23F0  3180         	fcall	PL48	;call to abstracted procedure
  2336  0109  219F               	fcall	___awdiv
  2337  010A  0825               	movf	?___awdiv+1,w
  2338  010B  0023               	movlb	3	; select bank3
  2339  010C  00C5               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  2340  010D  0020               	movlb	0	; select bank0
  2341  010E  0824               	movf	?___awdiv,w
  2342  010F  0023               	movlb	3	; select bank3
  2343  0110  00C4               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  2344  0111                     l14254:	
  2345                           
  2346                           ;main.c: 1097: }
  2347                           ;main.c: 1132: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  2348  0111  0022               	movlb	2	; select bank2
  2349  0112  083A               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  2350  0113  0023               	movlb	3	; select bank3
  2351  0114  00EB               	movwf	(??_main^(0+384)+1)
  2352  0115  0022               	movlb	2	; select bank2
  2353  0116  0839               	movf	_ui16_fir_Bat_mittel^(0+256),w
  2354  0117  0023               	movlb	3	; select bank3
  2355  0118  00EA               	movwf	??_main^(0+384)
  2356  0119  36EB               	lsrf	(??_main^(0+384)+1),f
  2357  011A  0CEA               	rrf	??_main^(0+384),f
  2358  011B  36EB               	lsrf	(??_main^(0+384)+1),f
  2359  011C  0CEA               	rrf	??_main^(0+384),f
  2360  011D  086A               	movf	??_main^(0+384),w
  2361  011E  0021               	movlb	1	; select bank1
  2362  011F  00B0               	movwf	_ui8_BattVolt_mat^(0+128)
  2363  0120  01B1               	clrf	(_ui8_BattVolt_mat+1)^(0+128)
  2364                           
  2365                           ;main.c: 1133: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  2366  0121  0022               	movlb	2	; select bank2
  2367  0122  0838               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  2368  0123  0021               	movlb	1	; select bank1
  2369  0124  00AF               	movwf	(_ui16_mat_Current+1)^(0+128)
  2370  0125  0022               	movlb	2	; select bank2
  2371  0126  0837               	movf	_ui16_fir_IPhase_mean^(0+256),w
  2372  0127  0021               	movlb	1	; select bank1
  2373  0128  00AE               	movwf	_ui16_mat_Current^(0+128)
  2374                           
  2375                           ;main.c: 1134: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  2376  0129  3000               	movlw	0
  2377  012A  0020               	movlb	0	; select bank0
  2378  012B  1863               	btfsc	_MotorFlags,0
  2379  012C  3001               	movlw	1
  2380  012D  0021               	movlb	1	; select bank1
  2381  012E  00CA               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  2382                           
  2383                           ;main.c: 1145: bool_ControlLoopMode = 0;
  2384  012F  01C9               	clrf	_bool_ControlLoopMode^(0+128)
  2385                           
  2386                           ;main.c: 1153: BVH2_Appl_Layer( );
  2387  0130  3190  2084  3180   	fcall	_BVH2_Appl_Layer
  2388                           
  2389                           ;main.c: 1156: ui8_ResetMatlab = 0;
  2390  0133  0021               	movlb	1	; select bank1
  2391  0134  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  2392                           
  2393                           ;main.c: 1162: if( ui8_duty_cycle_mat == 0 )
  2394  0135  0022               	movlb	2	; select bank2
  2395  0136  085D               	movf	_ui8_duty_cycle_mat^(0+256),w
  2396  0137  1D03               	btfss	3,2
  2397  0138  293C               	goto	l14270
  2398                           
  2399                           ;main.c: 1164: {
  2400                           ;main.c: 1166: InitMotorStop( );
  2401  0139  21DF  3180         	fcall	_InitMotorStop
  2402                           
  2403                           ;main.c: 1169: }
  2404  013B  293E               	goto	l14272
  2405  013C                     l14270:	
  2406                           
  2407                           ;main.c: 1172: else
  2408                           ;main.c: 1173: {
  2409                           ;main.c: 1175: InitMotorRun( );
  2410  013C  22F0  3180         	fcall	_InitMotorRun
  2411  013E                     l14272:	
  2412                           
  2413                           ;main.c: 1178: }
  2414                           ;main.c: 1185: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  2415  013E  0022               	movlb	2	; select bank2
  2416  013F  085C               	movf	_bool_PWMin_err_Alarm^(0+256),w
  2417  0140  3901               	andlw	1
  2418  0141  0020               	movlb	0	; select bank0
  2419  0142  1065               	bcf	_ui8_error_Flags,0
  2420  0143  1D03               	skipz
  2421  0144  1465               	bsf	_ui8_error_Flags,0
  2422                           
  2423                           ;main.c: 1186: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  2424  0145  0021               	movlb	1	; select bank1
  2425  0146  085B               	movf	_bool_CPU_TempAlarm^(0+128),w
  2426  0147  3901               	andlw	1
  2427  0148  0020               	movlb	0	; select bank0
  2428  0149  10E5               	bcf	_ui8_error_Flags,1
  2429  014A  1D03               	skipz
  2430  014B  14E5               	bsf	_ui8_error_Flags,1
  2431                           
  2432                           ;main.c: 1187: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  2433  014C  0022               	movlb	2	; select bank2
  2434  014D  085B               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  2435  014E  3901               	andlw	1
  2436  014F  0020               	movlb	0	; select bank0
  2437  0150  13E5               	bcf	_ui8_error_Flags,7
  2438  0151  1D03               	skipz
  2439  0152  17E5               	bsf	_ui8_error_Flags,7
  2440                           
  2441                           ;main.c: 1188: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  2442  0153  0021               	movlb	1	; select bank1
  2443  0154  0858               	movf	_bool_HighCurrentAlarm^(0+128),w
  2444  0155  3901               	andlw	1
  2445  0156  0020               	movlb	0	; select bank0
  2446  0157  1165               	bcf	_ui8_error_Flags,2
  2447  0158  1D03               	skipz
  2448  0159  1565               	bsf	_ui8_error_Flags,2
  2449                           
  2450                           ;main.c: 1189: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  2451  015A  0021               	movlb	1	; select bank1
  2452  015B  0859               	movf	_bool_MotorStalled^(0+128),w
  2453  015C  3901               	andlw	1
  2454  015D  0020               	movlb	0	; select bank0
  2455  015E  11E5               	bcf	_ui8_error_Flags,3
  2456  015F  1D03               	skipz
  2457  0160  15E5               	bsf	_ui8_error_Flags,3
  2458                           
  2459                           ;main.c: 1190: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  2460  0161  0021               	movlb	1	; select bank1
  2461  0162  085A               	movf	_bool_DryRunningAlarm^(0+128),w
  2462  0163  3901               	andlw	1
  2463  0164  0020               	movlb	0	; select bank0
  2464  0165  1265               	bcf	_ui8_error_Flags,4
  2465  0166  1D03               	skipz
  2466  0167  1665               	bsf	_ui8_error_Flags,4
  2467                           
  2468                           ;main.c: 1191: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  2469  0168  0022               	movlb	2	; select bank2
  2470  0169  085A               	movf	_bool_UbatAlarm^(0+256),w
  2471  016A  3901               	andlw	1
  2472  016B  0020               	movlb	0	; select bank0
  2473  016C  1365               	bcf	_ui8_error_Flags,6
  2474  016D  1D03               	skipz
  2475  016E  1765               	bsf	_ui8_error_Flags,6
  2476                           
  2477                           ;main.c: 1192: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  2478  016F  0022               	movlb	2	; select bank2
  2479  0170  0859               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  2480  0171  3901               	andlw	1
  2481  0172  0020               	movlb	0	; select bank0
  2482  0173  12E5               	bcf	_ui8_error_Flags,5
  2483  0174  1D03               	skipz
  2484  0175  16E5               	bsf	_ui8_error_Flags,5
  2485                           
  2486                           ;main.c: 1197: MotorFlags.bits.B0 = 0;
  2487  0176  1063               	bcf	_MotorFlags,0
  2488  0177                     l14290:	
  2489                           
  2490                           ;main.c: 1253: }
  2491                           ;main.c: 1259: if( ui8_Task_Cont100ms == 25 )
  2492  0177  3019               	movlw	25
  2493  0178  0021               	movlb	1	; select bank1
  2494  0179  0648               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2495  017A  1D03               	btfss	3,2
  2496  017B  2988               	goto	l14300
  2497                           
  2498                           ;main.c: 1261: {
  2499                           ;main.c: 1272: SetDiagAlarm( );
  2500  017C  22C3               	fcall	_SetDiagAlarm
  2501                           
  2502                           ;main.c: 1311: if ((read_eeprom_data(0x55)==0x55) || (RC5 == 0))
  2503  017D  3055               	movlw	85
  2504  017E  318D  258D  3180   	fcall	_read_eeprom_data
  2505  0181  3A55               	xorlw	85
  2506  0182  1D03               	btfss	3,2
  2507  0183  1E8E               	btfss	14,5	;volatile
  2508  0184  2988               	goto	l14300
  2509                           
  2510                           ;main.c: 1320: else
  2511                           ;main.c: 1321: {
  2512                           ;main.c: 1324: Receive_Diag(0x11);
  2513  0185  3011               	movlw	17
  2514  0186  225E  3180         	fcall	_Receive_Diag
  2515  0188                     l14300:	
  2516                           
  2517                           ;main.c: 1328: }
  2518                           ;main.c: 1336: }
  2519                           ;main.c: 1342: if( ui8_Task_Cont100ms == 37 )
  2520  0188  3025               	movlw	37
  2521  0189  0021               	movlb	1	; select bank1
  2522  018A  0648               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2523  018B  1D03               	btfss	3,2
  2524  018C  2998               	goto	l14312
  2525                           
  2526                           ;main.c: 1344: {
  2527                           ;main.c: 1350: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  2528  018D  3055               	movlw	85
  2529  018E  318D  258D  3180   	fcall	_read_eeprom_data
  2530  0191  3A55               	xorlw	85
  2531  0192  1D03               	btfss	3,2
  2532  0193  1E8E               	btfss	14,5	;volatile
  2533  0194  2998               	goto	l14312
  2534                           
  2535                           ;main.c: 1359: else
  2536                           ;main.c: 1360: {
  2537                           ;main.c: 1363: EOL();
  2538  0195  3188  20FA  3180   	fcall	_EOL
  2539  0198                     l14312:	
  2540                           
  2541                           ;main.c: 1474: }
  2542                           ;main.c: 1480: if( ui8_Task_Cont100ms > 100 )
  2543  0198  3065               	movlw	101
  2544  0199  0021               	movlb	1	; select bank1
  2545  019A  0248               	subwf	_ui8_Task_Cont100ms^(0+128),w
  2546  019B  1803               	btfsc	3,0
  2547                           
  2548                           ;main.c: 1482: {
  2549                           ;main.c: 1486: ui8_Task_Cont100ms = 0;
  2550  019C  01C8               	clrf	_ui8_Task_Cont100ms^(0+128)
  2551                           
  2552                           ;main.c: 1526: }
  2553                           ;main.c: 1554: bool_start_demand_mat = 0;
  2554  019D  01E5               	clrf	_bool_start_demand_mat^(0+128)
  2555                           
  2556                           ;main.c: 1560: }
  2557  019E  2879               	goto	l14210
  2558  019F                     __end_of_main:	
  2559  019F                     __ptext16:	
  2560 ;; *************** function ___awdiv *****************
  2561 ;; Defined at:
  2562 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;  divisor         2    4[BANK0 ] int 
  2565 ;;  dividend        2    6[BANK0 ] int 
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;  quotient        2   10[BANK0 ] int 
  2568 ;;  sign            1    9[BANK0 ] unsigned char 
  2569 ;;  counter         1    8[BANK0 ] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  2    4[BANK0 ] int 
  2572 ;; Registers used:
  2573 ;;		wreg, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 1F/0
  2576 ;;		On exit  : 1F/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2579 ;;      Params:         0       4       0       0       0       0       0       0
  2580 ;;      Locals:         0       4       0       0       0       0       0       0
  2581 ;;      Temps:          0       0       0       0       0       0       0       0
  2582 ;;      Totals:         0       8       0       0       0       0       0       0
  2583 ;;Total ram usage:        8 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    3
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_main
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           
  2594                           ;psect for function ___awdiv
  2595  019F                     ___awdiv:	
  2596                           
  2597                           ;incstack = 0
  2598                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2599  019F  01A9               	clrf	___awdiv@sign
  2600  01A0  1FA5               	btfss	___awdiv@divisor+1,7
  2601  01A1  29A9               	goto	l9062
  2602  01A2  09A4               	comf	___awdiv@divisor,f
  2603  01A3  09A5               	comf	___awdiv@divisor+1,f
  2604  01A4  0AA4               	incf	___awdiv@divisor,f
  2605  01A5  1903               	skipnz
  2606  01A6  0AA5               	incf	___awdiv@divisor+1,f
  2607  01A7  01A9               	clrf	___awdiv@sign
  2608  01A8  0AA9               	incf	___awdiv@sign,f
  2609  01A9                     l9062:	
  2610  01A9  1FA7               	btfss	___awdiv@dividend+1,7
  2611  01AA  29B2               	goto	l9068
  2612  01AB  09A6               	comf	___awdiv@dividend,f
  2613  01AC  09A7               	comf	___awdiv@dividend+1,f
  2614  01AD  0AA6               	incf	___awdiv@dividend,f
  2615  01AE  1903               	skipnz
  2616  01AF  0AA7               	incf	___awdiv@dividend+1,f
  2617  01B0  3001               	movlw	1
  2618  01B1  06A9               	xorwf	___awdiv@sign,f
  2619  01B2                     l9068:	
  2620  01B2  01AA               	clrf	___awdiv@quotient
  2621  01B3  01AB               	clrf	___awdiv@quotient+1
  2622  01B4  0824               	movf	___awdiv@divisor,w
  2623  01B5  0425               	iorwf	___awdiv@divisor+1,w
  2624  01B6  1903               	btfsc	3,2
  2625  01B7  29D2               	goto	l9090
  2626  01B8  01A8               	clrf	___awdiv@counter
  2627  01B9                     L13:	
  2628  01B9  0AA8               	incf	___awdiv@counter,f
  2629  01BA  1BA5               	btfsc	___awdiv@divisor+1,7
  2630  01BB  29BF               	goto	l9078
  2631  01BC  35A4               	lslf	___awdiv@divisor,f
  2632  01BD  0DA5               	rlf	___awdiv@divisor+1,f
  2633  01BE  29B9               	goto	L13
  2634  01BF                     l9078:	
  2635  01BF  35AA               	lslf	___awdiv@quotient,f
  2636  01C0  0DAB               	rlf	___awdiv@quotient+1,f
  2637  01C1  0825               	movf	___awdiv@divisor+1,w
  2638  01C2  0227               	subwf	___awdiv@dividend+1,w
  2639  01C3  1D03               	skipz
  2640  01C4  29C7               	goto	u6905
  2641  01C5  0824               	movf	___awdiv@divisor,w
  2642  01C6  0226               	subwf	___awdiv@dividend,w
  2643  01C7                     u6905:	
  2644  01C7  1C03               	skipc
  2645  01C8  29CE               	goto	l9086
  2646  01C9  0824               	movf	___awdiv@divisor,w
  2647  01CA  02A6               	subwf	___awdiv@dividend,f
  2648  01CB  0825               	movf	___awdiv@divisor+1,w
  2649  01CC  3BA7               	subwfb	___awdiv@dividend+1,f
  2650  01CD  142A               	bsf	___awdiv@quotient,0
  2651  01CE                     l9086:	
  2652  01CE  36A5               	lsrf	___awdiv@divisor+1,f
  2653  01CF  0CA4               	rrf	___awdiv@divisor,f
  2654  01D0  0BA8               	decfsz	___awdiv@counter,f
  2655  01D1  29BF               	goto	l9078
  2656  01D2                     l9090:	
  2657  01D2  0829               	movf	___awdiv@sign,w
  2658  01D3  1903               	btfsc	3,2
  2659  01D4  29DA               	goto	l9094
  2660  01D5  09AA               	comf	___awdiv@quotient,f
  2661  01D6  09AB               	comf	___awdiv@quotient+1,f
  2662  01D7  0AAA               	incf	___awdiv@quotient,f
  2663  01D8  1903               	skipnz
  2664  01D9  0AAB               	incf	___awdiv@quotient+1,f
  2665  01DA                     l9094:	
  2666  01DA  082B               	movf	___awdiv@quotient+1,w
  2667  01DB  00A5               	movwf	?___awdiv+1
  2668  01DC  082A               	movf	___awdiv@quotient,w
  2669  01DD  00A4               	movwf	?___awdiv
  2670  01DE  0008               	return
  2671  01DF                     __end_of___awdiv:	
  2672  01DF                     __ptext38:	
  2673 ;; *************** function _InitMotorStop *****************
  2674 ;; Defined at:
  2675 ;;		line 2221 in file "../bldc.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;		None
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  1    wreg      void 
  2682 ;; Registers used:
  2683 ;;		status,2
  2684 ;; Tracked objects:
  2685 ;;		On entry : 1C/2
  2686 ;;		On exit  : 1F/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2689 ;;      Params:         0       0       0       0       0       0       0       0
  2690 ;;      Locals:         0       0       0       0       0       0       0       0
  2691 ;;      Temps:          0       0       0       0       0       0       0       0
  2692 ;;      Totals:         0       0       0       0       0       0       0       0
  2693 ;;Total ram usage:        0 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    3
  2696 ;; This function calls:
  2697 ;;		Nothing
  2698 ;; This function is called by:
  2699 ;;		_EOL
  2700 ;;		_main
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           
  2705                           ;psect for function _InitMotorStop
  2706  01DF                     _InitMotorStop:	
  2707                           
  2708                           ;bldc.c: 2226: if( 1 == MotorFlags.bits.B6 )
  2709                           
  2710                           ;incstack = 0
  2711                           ; Regs used in _InitMotorStop: [status,2]
  2712  01DF  0020               	movlb	0	; select bank0
  2713  01E0  1F63               	btfss	_MotorFlags,6
  2714  01E1  0008               	return
  2715                           
  2716                           ;bldc.c: 2229: {
  2717                           ;bldc.c: 2231: LATC1 = 0;
  2718  01E2  0022               	movlb	2	; select bank2
  2719  01E3  108E               	bcf	14,1	;volatile
  2720                           
  2721                           ;bldc.c: 2232: LATC3 = 0;
  2722  01E4  118E               	bcf	14,3	;volatile
  2723                           
  2724                           ;bldc.c: 2233: LATC4 = 0;
  2725  01E5  120E               	bcf	14,4	;volatile
  2726                           
  2727                           ;bldc.c: 2235: CCP1ASE = 0;
  2728  01E6  0025               	movlb	5	; select bank5
  2729  01E7  1395               	bcf	21,7	;volatile
  2730                           
  2731                           ;bldc.c: 2236: CCPR1L = 0;
  2732  01E8  0191               	clrf	17	;volatile
  2733                           
  2734                           ;bldc.c: 2237: MotorFlags.bits.B6 = 0;
  2735  01E9  0020               	movlb	0	; select bank0
  2736  01EA  1363               	bcf	_MotorFlags,6
  2737                           
  2738                           ;bldc.c: 2238: MotorFlags.bits.B7 = 0;
  2739  01EB  13E3               	bcf	_MotorFlags,7
  2740  01EC  0008               	return
  2741  01ED                     __end_of_InitMotorStop:	
  2742  01ED                     __ptext20:	
  2743 ;; *************** function _Get_Analog_Value *****************
  2744 ;; Defined at:
  2745 ;;		line 442 in file "../adc.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2754 ;; Tracked objects:
  2755 ;;		On entry : 1F/0
  2756 ;;		On exit  : 1F/3
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2759 ;;      Params:         0       0       0       0       0       0       0       0
  2760 ;;      Locals:         0       0       0       0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0       0       0       0
  2762 ;;      Totals:         0       0       0       0       0       0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    4
  2766 ;; This function calls:
  2767 ;;		_FILTER_IPhase
  2768 ;;		_FILTER_Temp
  2769 ;;		_FILTER_Ubat
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           
  2776                           ;psect for function _Get_Analog_Value
  2777  01ED                     _Get_Analog_Value:	
  2778                           
  2779                           ;adc.c: 446: FILTER_Ubat( );
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2783  01ED  21F2  3180         	fcall	_FILTER_Ubat
  2784                           
  2785                           ;adc.c: 447: FILTER_IPhase( );
  2786  01EF  23FA               	fcall	_FILTER_IPhase
  2787                           
  2788                           ;adc.c: 448: FILTER_Temp( );
  2789  01F0  3186  2E63         	ljmp	l6388
  2790  01F2                     __end_of_Get_Analog_Value:	
  2791  01F2                     __ptext21:	
  2792 ;; *************** function _FILTER_Ubat *****************
  2793 ;; Defined at:
  2794 ;;		line 264 in file "../adc.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;		None
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2803 ;; Tracked objects:
  2804 ;;		On entry : 1F/0
  2805 ;;		On exit  : 1D/1
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2808 ;;      Params:         0       0       0       0       0       0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0       0
  2810 ;;      Temps:          0      12       0       0       0       0       0       0
  2811 ;;      Totals:         0      12       0       0       0       0       0       0
  2812 ;;Total ram usage:       12 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    3
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_Get_Analog_Value
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           
  2823                           ;psect for function _FILTER_Ubat
  2824  01F2                     _FILTER_Ubat:	
  2825                           
  2826                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  2830  01F2  318F  272E  3180   	fcall	PL94	;call to abstracted procedure
  2831  01F5  0020               	movlb	0	; select bank0
  2832  01F6  0866               	movf	_ui16_Ubat_bldc,w	;volatile
  2833  01F7  3FC0               	movwi [0]fsr1
  2834  01F8  0867               	movf	_ui16_Ubat_bldc+1,w	;volatile
  2835  01F9  3FC1               	movwi [1]fsr1
  2836                           
  2837                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  2838  01FA  304E               	movlw	((low (_inputArray1| (0+512)))& (0+255)+14)
  2839  01FB  0086               	movwf	6
  2840  01FC  304C               	movlw	((low (_inputArray1| (0+512)))& (0+255)+12)
  2841  01FD  0084               	movwf	4
  2842  01FE  3002               	movlw	2	; select bank4/5
  2843  01FF  0085               	movwf	5
  2844  0200  0024               	movlb	4	; select bank4
  2845  0201  0844               	movf	(_inputArray1^(0+512)+4),w
  2846  0202  0742               	addwf	(_inputArray1^(0+512)+2),w
  2847  0203  0020               	movlb	0	; select bank0
  2848  0204  00A4               	movwf	??_FILTER_Ubat
  2849  0205  0024               	movlb	4	; select bank4
  2850  0206  0845               	movf	((_inputArray1+1)^(0+512)+4),w
  2851  0207  3D43               	addwfc	((_inputArray1+1)^(0+512)+2),w
  2852  0208  0020               	movlb	0	; select bank0
  2853  0209  00A5               	movwf	??_FILTER_Ubat+1
  2854  020A  0024               	movlb	4	; select bank4
  2855  020B  0846               	movf	(_inputArray1^(0+512)+6),w
  2856  020C  0020               	movlb	0	; select bank0
  2857  020D  0724               	addwf	??_FILTER_Ubat,w
  2858  020E  00A6               	movwf	??_FILTER_Ubat+2
  2859  020F  0024               	movlb	4	; select bank4
  2860  0210  0847               	movf	((_inputArray1+1)^(0+512)+6),w
  2861  0211  0020               	movlb	0	; select bank0
  2862  0212  3D25               	addwfc	??_FILTER_Ubat+1,w
  2863  0213  00A7               	movwf	??_FILTER_Ubat+3
  2864  0214  0024               	movlb	4	; select bank4
  2865  0215  0848               	movf	(_inputArray1^(0+512)+8),w
  2866  0216  0020               	movlb	0	; select bank0
  2867  0217  0726               	addwf	??_FILTER_Ubat+2,w
  2868  0218  00A8               	movwf	??_FILTER_Ubat+4
  2869  0219  0024               	movlb	4	; select bank4
  2870  021A  0849               	movf	((_inputArray1+1)^(0+512)+8),w
  2871  021B  0020               	movlb	0	; select bank0
  2872  021C  3D27               	addwfc	??_FILTER_Ubat+3,w
  2873  021D  00A9               	movwf	??_FILTER_Ubat+5
  2874  021E  0024               	movlb	4	; select bank4
  2875  021F  084A               	movf	(_inputArray1^(0+512)+10),w
  2876  0220  0020               	movlb	0	; select bank0
  2877  0221  0728               	addwf	??_FILTER_Ubat+4,w
  2878  0222  00AA               	movwf	??_FILTER_Ubat+6
  2879  0223  0024               	movlb	4	; select bank4
  2880  0224  084B               	movf	((_inputArray1+1)^(0+512)+10),w
  2881  0225  0020               	movlb	0	; select bank0
  2882  0226  3D29               	addwfc	??_FILTER_Ubat+5,w
  2883  0227  00AB               	movwf	??_FILTER_Ubat+7
  2884  0228  3F00               	moviw [0]fsr0
  2885  0229  072A               	addwf	??_FILTER_Ubat+6,w
  2886  022A  00AC               	movwf	??_FILTER_Ubat+8
  2887  022B  3F01               	moviw [1]fsr0
  2888  022C  3D2B               	addwfc	??_FILTER_Ubat+7,w
  2889  022D  00AD               	movwf	??_FILTER_Ubat+9
  2890  022E  3F40               	moviw [0]fsr1
  2891  022F  072C               	addwf	??_FILTER_Ubat+8,w
  2892  0230  00AE               	movwf	??_FILTER_Ubat+10
  2893  0231  3F41               	moviw [1]fsr1
  2894  0232  3D2D               	addwfc	??_FILTER_Ubat+9,w
  2895  0233  00AF               	movwf	??_FILTER_Ubat+11
  2896  0234  0024               	movlb	4	; select bank4
  2897  0235  0840               	movf	_inputArray1^(0+512),w
  2898  0236  0020               	movlb	0	; select bank0
  2899  0237  072E               	addwf	??_FILTER_Ubat+10,w
  2900  0238  0023               	movlb	3	; select bank3
  2901  0239  00E0               	movwf	_filter1^(0+384)
  2902  023A  0024               	movlb	4	; select bank4
  2903  023B  0841               	movf	(_inputArray1+1)^(0+512),w
  2904  023C  0020               	movlb	0	; select bank0
  2905  023D  3D2F               	addwfc	??_FILTER_Ubat+11,w
  2906  023E  0023               	movlb	3	; select bank3
  2907  023F  00E1               	movwf	(_filter1+1)^(0+384)
  2908                           
  2909                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  2910  0240  0020               	movlb	0	; select bank0
  2911  0241  00A5               	movwf	??_FILTER_Ubat+1
  2912  0242  0023               	movlb	3	; select bank3
  2913  0243  0860               	movf	_filter1^(0+384),w
  2914  0244  0020               	movlb	0	; select bank0
  2915  0245  00A4               	movwf	??_FILTER_Ubat
  2916  0246  36A5               	lsrf	??_FILTER_Ubat+1,f
  2917  0247  0CA4               	rrf	??_FILTER_Ubat,f
  2918  0248  36A5               	lsrf	??_FILTER_Ubat+1,f
  2919  0249  0CA4               	rrf	??_FILTER_Ubat,f
  2920  024A  36A5               	lsrf	??_FILTER_Ubat+1,f
  2921  024B  0CA4               	rrf	??_FILTER_Ubat,f
  2922  024C  0824               	movf	??_FILTER_Ubat,w
  2923  024D  0022               	movlb	2	; select bank2
  2924  024E  00B9               	movwf	_ui16_fir_Bat_mittel^(0+256)
  2925  024F  0020               	movlb	0	; select bank0
  2926  0250  0825               	movf	??_FILTER_Ubat+1,w
  2927  0251  0022               	movlb	2	; select bank2
  2928  0252  00BA               	movwf	(_ui16_fir_Bat_mittel+1)^(0+256)
  2929                           
  2930                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  2931  0253  3008               	movlw	8
  2932  0254  0021               	movlb	1	; select bank1
  2933  0255  0AE6               	incf	_windowPtr1^(0+128),f
  2934  0256  0266               	subwf	_windowPtr1^(0+128),w
  2935  0257  1C03               	skipc
  2936  0258  0008               	return
  2937                           
  2938                           ;adc.c: 277: {
  2939                           ;adc.c: 279: windowPtr1 = 0;
  2940  0259  01E6               	clrf	_windowPtr1^(0+128)
  2941                           
  2942                           ;adc.c: 280: filter1 = 0;
  2943  025A  0023               	movlb	3	; select bank3
  2944  025B  01E0               	clrf	_filter1^(0+384)
  2945  025C  01E1               	clrf	(_filter1+1)^(0+384)
  2946  025D  0008               	return
  2947  025E                     __end_of_FILTER_Ubat:	
  2948  025E                     __ptext18:	
  2949 ;; *************** function _Receive_Diag *****************
  2950 ;; Defined at:
  2951 ;;		line 315 in file "../lin.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  id              1    wreg     unsigned char 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  id              1   19[BANK0 ] unsigned char 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2960 ;; Tracked objects:
  2961 ;;		On entry : 1F/0
  2962 ;;		On exit  : 1F/1
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2965 ;;      Params:         0       0       0       0       0       0       0       0
  2966 ;;      Locals:         0       1       0       0       0       0       0       0
  2967 ;;      Temps:          0       1       0       0       0       0       0       0
  2968 ;;      Totals:         0       2       0       0       0       0       0       0
  2969 ;;Total ram usage:        2 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    6
  2972 ;; This function calls:
  2973 ;;		__ELINMIntGetPointer
  2974 ;;		__ELINMIntReceiveMessage
  2975 ;; This function is called by:
  2976 ;;		_main
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           
  2981                           ;psect for function _Receive_Diag
  2982  025E                     _Receive_Diag:	
  2983                           
  2984                           ;incstack = 0
  2985                           ; Regs used in _Receive_Diag: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2986                           ;Receive_Diag@id stored from wreg
  2987  025E  00B3               	movwf	Receive_Diag@id
  2988  025F                     l916:	
  2989                           ;lin.c: 320: {
  2990                           ;lin.c: 321: ;
  2991                           
  2992  025F  1DE0               	btfss	__ELINMIntStatus,3
  2993  0260  2A5F               	goto	l916
  2994                           
  2995                           ;lin.c: 322: }
  2996                           ;lin.c: 323: ;
  2997                           ;lin.c: 324: _ELINMIntReceiveMessage ( 5, id, 8 );
  2998  0261  0833               	movf	Receive_Diag@id,w
  2999  0262  00AF               	movwf	__ELINMIntReceiveMessage@_ELINM_id
  3000  0263  3008               	movlw	8
  3001  0264  00B0               	movwf	__ELINMIntReceiveMessage@_ELINM_size
  3002  0265  3005               	movlw	5
  3003  0266  22AE  3180         	fcall	__ELINMIntReceiveMessage
  3004  0268                     l919:	
  3005                           ;lin.c: 326: {
  3006                           
  3007  0268  1DE0               	btfss	__ELINMIntStatus,3
  3008  0269  2A68               	goto	l919
  3009                           
  3010                           ;lin.c: 328: }
  3011                           ;lin.c: 329: ;
  3012                           ;lin.c: 330: if( ( ErrorCode == ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  3013  026A  30F0               	movlw	240
  3014  026B  0560               	andwf	__ELINMIntStatus,w
  3015  026C  00B2               	movwf	??_Receive_Diag
  3016  026D  0021               	movlb	1	; select bank1
  3017  026E  064B               	xorwf	_ErrorCode^(0+128),w
  3018  026F  1903               	btfsc	3,2
  3019  0270  0008               	return
  3020                           
  3021                           ;lin.c: 335: else
  3022                           ;lin.c: 336: {
  3023                           ;lin.c: 337: pt = _ELINMIntGetPointer ( 5, 0 );
  3024  0271  0020               	movlb	0	; select bank0
  3025  0272  3005               	movlw	5
  3026  0273  01A4               	clrf	__ELINMIntGetPointer@_ELINMInt_position
  3027  0274  318E  2627  3180   	fcall	__ELINMIntGetPointer
  3028  0277  00DF               	movwf	_pt
  3029                           
  3030                           ;lin.c: 338: my_msg[ 0 ] = *pt;
  3031  0278  0086               	movwf	6
  3032  0279  3002               	movlw	2	; select bank4/5
  3033  027A  0087               	movwf	7
  3034  027B  0801               	movf	1,w
  3035  027C  0023               	movlb	3	; select bank3
  3036  027D  00B0               	movwf	_my_msg^(0+384)
  3037                           
  3038                           ;lin.c: 339: pt++;
  3039                           
  3040                           ;lin.c: 340: my_msg[ 1 ] = *pt;
  3041  027E  23E9  3180         	fcall	PL28	;call to abstracted procedure
  3042  0280  00B1               	movwf	(_my_msg^(0+384)+1)
  3043                           
  3044                           ;lin.c: 341: pt++;
  3045                           
  3046                           ;lin.c: 342: my_msg[ 2 ] = *pt;
  3047  0281  23E9  3180         	fcall	PL28	;call to abstracted procedure
  3048  0283  00B2               	movwf	(_my_msg^(0+384)+2)
  3049                           
  3050                           ;lin.c: 343: pt++;
  3051                           
  3052                           ;lin.c: 344: my_msg[ 3 ] = *pt;
  3053  0284  23E9  3180         	fcall	PL28	;call to abstracted procedure
  3054  0286  00B3               	movwf	(_my_msg^(0+384)+3)
  3055                           
  3056                           ;lin.c: 345: pt++;
  3057                           
  3058                           ;lin.c: 346: my_msg[ 4 ] = *pt;
  3059  0287  23E9  3180         	fcall	PL28	;call to abstracted procedure
  3060  0289  00B4               	movwf	(_my_msg^(0+384)+4)
  3061                           
  3062                           ;lin.c: 347: pt++;
  3063                           
  3064                           ;lin.c: 348: my_msg[ 5 ] = *pt;
  3065  028A  23E9  3180         	fcall	PL28	;call to abstracted procedure
  3066  028C  00B5               	movwf	(_my_msg^(0+384)+5)
  3067                           
  3068                           ;lin.c: 349: pt++;
  3069                           
  3070                           ;lin.c: 350: my_msg[ 6 ] = *pt;
  3071  028D  23E9  3180         	fcall	PL28	;call to abstracted procedure
  3072  028F  00B6               	movwf	(_my_msg^(0+384)+6)
  3073                           
  3074                           ;lin.c: 351: pt++;
  3075                           
  3076                           ;lin.c: 352: my_msg[ 7 ] = *pt;
  3077  0290  23E9               	fcall	PL28	;call to abstracted procedure
  3078  0291  00B7               	movwf	(_my_msg^(0+384)+7)
  3079                           
  3080                           ;lin.c: 354: ui8_b_DResServID_c = my_msg[ 0 ];
  3081  0292  0830               	movf	_my_msg^(0+384),w
  3082  0293  0021               	movlb	1	; select bank1
  3083  0294  00D7               	movwf	_ui8_b_DResServID_c^(0+128)
  3084                           
  3085                           ;lin.c: 355: ui8_b_DResLocID_c = my_msg[ 1 ];
  3086  0295  0023               	movlb	3	; select bank3
  3087  0296  0831               	movf	(_my_msg^(0+384)+1),w
  3088  0297  0020               	movlb	0	; select bank0
  3089  0298  00E2               	movwf	_ui8_b_DResLocID_c
  3090                           
  3091                           ;lin.c: 356: ui8_b_DResB0_c = my_msg[ 2 ];
  3092  0299  0023               	movlb	3	; select bank3
  3093  029A  0832               	movf	(_my_msg^(0+384)+2),w
  3094  029B  0020               	movlb	0	; select bank0
  3095  029C  00E1               	movwf	_ui8_b_DResB0_c
  3096                           
  3097                           ;lin.c: 357: ui8_b_DResB1_c = my_msg[ 3 ];
  3098  029D  0023               	movlb	3	; select bank3
  3099  029E  0833               	movf	(_my_msg^(0+384)+3),w
  3100  029F  0021               	movlb	1	; select bank1
  3101  02A0  00D6               	movwf	_ui8_b_DResB1_c^(0+128)
  3102                           
  3103                           ;lin.c: 358: ui8_b_DResB2_c = my_msg[ 4 ];
  3104  02A1  0023               	movlb	3	; select bank3
  3105  02A2  0834               	movf	(_my_msg^(0+384)+4),w
  3106  02A3  0021               	movlb	1	; select bank1
  3107  02A4  00D5               	movwf	_ui8_b_DResB2_c^(0+128)
  3108                           
  3109                           ;lin.c: 359: ui8_b_DResB3_c = my_msg[ 5 ];
  3110  02A5  0023               	movlb	3	; select bank3
  3111  02A6  0835               	movf	(_my_msg^(0+384)+5),w
  3112  02A7  0021               	movlb	1	; select bank1
  3113  02A8  00D4               	movwf	_ui8_b_DResB3_c^(0+128)
  3114                           
  3115                           ;lin.c: 361: ui8_b_DResB5_c = my_msg[ 7 ];
  3116  02A9  0023               	movlb	3	; select bank3
  3117  02AA  0836               	movf	(_my_msg^(0+384)+6),w
  3118  02AB  0021               	movlb	1	; select bank1
  3119  02AC  00D3               	movwf	_ui8_b_DResB4_c^(0+128)
  3120  02AD  0008               	return
  3121  02AE                     __end_of_Receive_Diag:	
  3122  02AE                     __ptext19:	
  3123 ;; *************** function __ELINMIntReceiveMessage *****************
  3124 ;; Defined at:
  3125 ;;		line 1321 in file "../lin.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  _ELINM_tag      1    wreg     unsigned char 
  3128 ;;  _ELINM_id       1   15[BANK0 ] unsigned char 
  3129 ;;  _ELINM_size     1   16[BANK0 ] unsigned char 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  _ELINM_tag      1   17[BANK0 ] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 1F/0
  3138 ;;		On exit  : 1F/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3141 ;;      Params:         0       2       0       0       0       0       0       0
  3142 ;;      Locals:         0       1       0       0       0       0       0       0
  3143 ;;      Temps:          0       0       0       0       0       0       0       0
  3144 ;;      Totals:         0       3       0       0       0       0       0       0
  3145 ;;Total ram usage:        3 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    5
  3148 ;; This function calls:
  3149 ;;		__ELINMIntSendMessage
  3150 ;; This function is called by:
  3151 ;;		_Receive_Diag
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           
  3156                           ;psect for function __ELINMIntReceiveMessage
  3157  02AE                     __ELINMIntReceiveMessage:	
  3158                           
  3159                           ;lin.c: 1331: {
  3160                           ;lin.c: 1333: _ELINMIntMessageTag = _ELINM_tag;
  3161                           
  3162                           ;incstack = 0
  3163                           ; Regs used in __ELINMIntReceiveMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  3164  02AE  1DE0               	btfss	__ELINMIntStatus,3
  3165  02AF  0008               	return
  3166                           
  3167                           ;lin.c: 1334: _ELINMIntRXMessageSize.SIZE = _ELINM_size;
  3168  02B0  0830               	movf	__ELINMIntReceiveMessage@_ELINM_size,w
  3169  02B1  0022               	movlb	2	; select bank2
  3170  02B2  00E0               	movwf	__ELINMIntRXMessageSize^(0+256)
  3171                           
  3172                           ;lin.c: 1335: _ELINMIntStatus.ELINMINTSTS.RX = 1;
  3173  02B3  0020               	movlb	0	; select bank0
  3174  02B4  14E0               	bsf	__ELINMIntStatus,1
  3175                           
  3176                           ;lin.c: 1336: _ELINMIntRXCRC.CRC = 0;
  3177  02B5  0023               	movlb	3	; select bank3
  3178  02B6  01D0               	clrf	__ELINMIntRXCRC^(0+384)
  3179  02B7  01D1               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  3180                           
  3181                           ;lin.c: 1337: _ELINMIntSendMessage ( _ELINM_id, 0, ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) * (
      +                           100L * 1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) +
      +                           1L ) * 14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  3182  02B8  0020               	movlb	0	; select bank0
  3183  02B9  3024               	movlw	36
  3184  02BA  01A5               	clrf	__ELINMIntSendMessage@_ELINM_size
  3185  02BB  00A6               	movwf	__ELINMIntSendMessage@_ELINM_fmin
  3186  02BC  3033               	movlw	51
  3187  02BD  01A7               	clrf	__ELINMIntSendMessage@_ELINM_fmin+1
  3188  02BE  00A8               	movwf	__ELINMIntSendMessage@_ELINM_fmax
  3189  02BF  01A9               	clrf	__ELINMIntSendMessage@_ELINM_fmax+1
  3190  02C0  082F               	movf	__ELINMIntReceiveMessage@_ELINM_id,w
  3191  02C1  3184  2C35         	ljmp	__ELINMIntSendMessage
  3192  02C3                     __end_of__ELINMIntReceiveMessage:	
  3193  02C3                     __ptext17:	
  3194 ;; *************** function _SetDiagAlarm *****************
  3195 ;; Defined at:
  3196 ;;		line 210 in file "../diag.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, status,0, pclath, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 1F/1
  3207 ;;		On exit  : 1F/2
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3210 ;;      Params:         0       0       0       0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0
  3213 ;;      Totals:         0       0       0       0       0       0       0       0
  3214 ;;Total ram usage:        0 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    4
  3217 ;; This function calls:
  3218 ;;		_PWM_Write_Out
  3219 ;; This function is called by:
  3220 ;;		_main
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _SetDiagAlarm
  3226  02C3                     _SetDiagAlarm:	
  3227                           
  3228                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  3229                           
  3230                           ;incstack = 0
  3231                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  3232  02C3  0020               	movlb	0	; select bank0
  3233  02C4  1F65               	btfss	_ui8_error_Flags,6
  3234  02C5  2AC9               	goto	l12772
  3235                           
  3236                           ;diag.c: 221: {
  3237                           ;diag.c: 223: PWM_Write_Out( 88 );
  3238  02C6  3058               	movlw	88
  3239  02C7  318E  2E22         	ljmp	_PWM_Write_Out
  3240  02C9                     l12772:	
  3241                           ;diag.c: 226: }
  3242                           
  3243                           
  3244                           ;diag.c: 229: else
  3245                           ;diag.c: 230: {
  3246                           ;diag.c: 232: if( bool_CPU_TempAlarm )
  3247  02C9  0021               	movlb	1	; select bank1
  3248  02CA  085B               	movf	_bool_CPU_TempAlarm^(0+128),w
  3249  02CB  1903               	btfsc	3,2
  3250  02CC  2AD0               	goto	l12776
  3251                           
  3252                           ;diag.c: 235: {
  3253                           ;diag.c: 237: PWM_Write_Out( 33 );
  3254  02CD  3021               	movlw	33
  3255  02CE  318E  2E22         	ljmp	_PWM_Write_Out
  3256  02D0                     l12776:	
  3257                           ;diag.c: 240: }
  3258                           
  3259                           
  3260                           ;diag.c: 243: else
  3261                           ;diag.c: 244: {
  3262                           ;diag.c: 246: if( bool_DryRunningAlarm )
  3263  02D0  085A               	movf	_bool_DryRunningAlarm^(0+128),w
  3264  02D1  1903               	btfsc	3,2
  3265  02D2  2AD6               	goto	l12780
  3266                           
  3267                           ;diag.c: 248: {
  3268                           ;diag.c: 250: PWM_Write_Out( 66 );
  3269  02D3  3042               	movlw	66
  3270  02D4  318E  2E22         	ljmp	_PWM_Write_Out
  3271  02D6                     l12780:	
  3272                           ;diag.c: 253: }
  3273                           
  3274                           
  3275                           ;diag.c: 256: else
  3276                           ;diag.c: 257: {
  3277                           ;diag.c: 259: if( bool_MotorStalled )
  3278  02D6  0859               	movf	_bool_MotorStalled^(0+128),w
  3279  02D7  1903               	btfsc	3,2
  3280  02D8  2ADC               	goto	l12784
  3281                           
  3282                           ;diag.c: 261: {
  3283                           ;diag.c: 263: PWM_Write_Out( 55 );
  3284  02D9  3037               	movlw	55
  3285  02DA  318E  2E22         	ljmp	_PWM_Write_Out
  3286  02DC                     l12784:	
  3287                           ;diag.c: 266: }
  3288                           
  3289                           
  3290                           ;diag.c: 269: else
  3291                           ;diag.c: 270: {
  3292                           ;diag.c: 272: if( bool_HighCurrentAlarm )
  3293  02DC  0858               	movf	_bool_HighCurrentAlarm^(0+128),w
  3294  02DD  1903               	btfsc	3,2
  3295  02DE  2AE2               	goto	l534
  3296                           
  3297                           ;diag.c: 274: {
  3298                           ;diag.c: 276: PWM_Write_Out( 44 );
  3299  02DF  302C               	movlw	44
  3300  02E0  318E  2E22         	ljmp	_PWM_Write_Out
  3301  02E2                     l534:	
  3302                           ;diag.c: 278: }
  3303                           
  3304                           
  3305                           ;diag.c: 281: else
  3306                           ;diag.c: 282: {
  3307                           ;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  3308  02E2  0020               	movlb	0	; select bank0
  3309  02E3  1EE5               	btfss	_ui8_error_Flags,5
  3310  02E4  2AE8               	goto	l536
  3311                           
  3312                           ;diag.c: 287: {
  3313                           ;diag.c: 289: PWM_Write_Out( 77 );
  3314  02E5  304D               	movlw	77
  3315  02E6  318E  2E22         	ljmp	_PWM_Write_Out
  3316  02E8                     l536:	
  3317                           ;diag.c: 292: }
  3318                           
  3319                           
  3320                           ;diag.c: 295: else
  3321                           ;diag.c: 296: {
  3322                           ;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  3323  02E8  1C65               	btfss	_ui8_error_Flags,0
  3324  02E9  2AED               	goto	l12792
  3325                           
  3326                           ;diag.c: 300: {
  3327                           ;diag.c: 302: PWM_Write_Out( 22 );
  3328  02EA  3016               	movlw	22
  3329  02EB  318E  2E22         	ljmp	_PWM_Write_Out
  3330  02ED                     l12792:	
  3331                           ;diag.c: 305: }
  3332                           
  3333                           
  3334                           ;diag.c: 308: else
  3335                           ;diag.c: 309: {
  3336                           ;diag.c: 311: PWM_Write_Out( 11 );
  3337  02ED  300B               	movlw	11
  3338  02EE  318E  2E22         	ljmp	_PWM_Write_Out
  3339  02F0                     __end_of_SetDiagAlarm:	
  3340  02F0                     __ptext6:	
  3341 ;; *************** function _InitMotorRun *****************
  3342 ;; Defined at:
  3343 ;;		line 2170 in file "../bldc.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;		None
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;		None
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  1    wreg      void 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 1D/2
  3354 ;;		On exit  : 1F/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3357 ;;      Params:         0       0       0       0       0       0       0       0
  3358 ;;      Locals:         0       0       0       0       0       0       0       0
  3359 ;;      Temps:          0       0       0       0       0       0       0       0
  3360 ;;      Totals:         0       0       0       0       0       0       0       0
  3361 ;;Total ram usage:        0 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    4
  3364 ;; This function calls:
  3365 ;;		_commutate
  3366 ;; This function is called by:
  3367 ;;		_init_bldc
  3368 ;;		_main
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372                           
  3373                           ;psect for function _InitMotorRun
  3374  02F0                     _InitMotorRun:	
  3375  02F0                     l6236:	
  3376                           ;incstack = 0
  3377                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3378                           
  3379                           
  3380                           ;bldc.c: 2175: if( 0 == MotorFlags.bits.B6 )
  3381  02F0  0020               	movlb	0	; select bank0
  3382  02F1  1B63               	btfsc	_MotorFlags,6
  3383  02F2  0008               	return
  3384  02F3  30A6               	movlw	166
  3385                           
  3386                           ;bldc.c: 2178: {
  3387                           ;bldc.c: 2180: MotorFlags.bits.B5 = 0;
  3388  02F4  12E3               	bcf	_MotorFlags,5
  3389                           
  3390                           ;bldc.c: 2181: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  3391  02F5  0022               	movlb	2	; select bank2
  3392  02F6  00B1               	movwf	_ui16_comm_time_max^(0+256)
  3393  02F7  01B2               	clrf	(_ui16_comm_time_max+1)^(0+256)
  3394                           
  3395                           ;bldc.c: 2182: comm_state = 1;
  3396  02F8  0021               	movlb	1	; select bank1
  3397  02F9  01E3               	clrf	_comm_state^(0+128)
  3398  02FA  0AE3               	incf	_comm_state^(0+128),f
  3399                           
  3400                           ;bldc.c: 2183: ui16_step_cnt = 0;
  3401  02FB  01B8               	clrf	_ui16_step_cnt^(0+128)
  3402  02FC  01B9               	clrf	(_ui16_step_cnt+1)^(0+128)
  3403                           
  3404                           ;bldc.c: 2184: ui8_duty_cycle_BLDC = 0;
  3405  02FD  0020               	movlb	0	; select bank0
  3406  02FE  01E4               	clrf	_ui8_duty_cycle_BLDC
  3407                           
  3408                           ;bldc.c: 2186: bemf_filter = 0;
  3409  02FF  01DA               	clrf	_comm_time
  3410  0300  01DB               	clrf	_comm_time+1
  3411                           
  3412                           ;bldc.c: 2188: phase_delay_counter_debug = 0;
  3413  0301  0023               	movlb	3	; select bank3
  3414  0302  01D6               	clrf	_phase_delay_counter^(0+384)
  3415  0303  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  3416                           
  3417                           ;bldc.c: 2189: PSTR1CON = 0;
  3418  0304  0025               	movlb	5	; select bank5
  3419  0305  0196               	clrf	22	;volatile
  3420                           
  3421                           ;bldc.c: 2192: MotorFlags.bits.B3 = 1 ;
  3422  0306  0020               	movlb	0	; select bank0
  3423  0307  15E3               	bsf	_MotorFlags,3
  3424                           
  3425                           ;bldc.c: 2194: ui16_phase_angle = 128;
  3426  0308  1763               	bsf	_MotorFlags,6
  3427                           
  3428                           ;bldc.c: 2195: ui8_StartupPWM = 0 ;
  3429  0309  0021               	movlb	1	; select bank1
  3430  030A  01E4               	clrf	_ui8_StartupPWM^(0+128)
  3431                           
  3432                           ;bldc.c: 2196: CCPR1L = 0 ;
  3433  030B  0025               	movlb	5	; select bank5
  3434  030C  0191               	clrf	17	;volatile
  3435                           
  3436                           ;bldc.c: 2198: ui8_zero_cros_cnt = 0 ;
  3437  030D  0021               	movlb	1	; select bank1
  3438  030E  01DE               	clrf	_ui8_sampleState^(0+128)
  3439                           
  3440                           ;bldc.c: 2199: MotorFlags.bits.B4 = 1 ;
  3441  030F  0020               	movlb	0	; select bank0
  3442  0310  1663               	bsf	_MotorFlags,4
  3443                           
  3444                           ;bldc.c: 2207: commutate( );
  3445  0311  319A  2AA3         	ljmp	l5898
  3446  0313                     __end_of_InitMotorRun:	
  3447  0313                     __ptext3:	
  3448 ;; *************** function _clear_timer *****************
  3449 ;; Defined at:
  3450 ;;		line 302 in file "../timer.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  ui8_TmrNb       1    wreg     unsigned char 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  ui8_TmrNb       1    4[BANK0 ] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3459 ;; Tracked objects:
  3460 ;;		On entry : 1F/0
  3461 ;;		On exit  : 17/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3464 ;;      Params:         0       0       0       0       0       0       0       0
  3465 ;;      Locals:         0       1       0       0       0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0       0       0       0
  3467 ;;      Totals:         0       1       0       0       0       0       0       0
  3468 ;;Total ram usage:        1 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    3
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_main
  3475 ;;		_timer_init
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           
  3480                           ;psect for function _clear_timer
  3481  0313                     _clear_timer:	
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  3485                           ;clear_timer@ui8_TmrNb stored from wreg
  3486  0313  00A4               	movwf	clear_timer@ui8_TmrNb
  3487                           
  3488                           ;timer.c: 306: switch( ui8_TmrNb )
  3489  0314  2B22               	goto	l6336
  3490  0315                     l6324:	
  3491                           
  3492                           ;timer.c: 312: {
  3493                           ;timer.c: 314: TMR0 = 0;
  3494  0315  0195               	clrf	21	;volatile
  3495                           
  3496                           ;timer.c: 315: break;
  3497  0316  0008               	return
  3498  0317                     l6326:	
  3499                           
  3500                           ;timer.c: 322: {
  3501                           ;timer.c: 324: TMR1L = 0x00;
  3502  0317  0196               	clrf	22	;volatile
  3503                           
  3504                           ;timer.c: 325: TMR1H = 0x00;
  3505  0318  0197               	clrf	23	;volatile
  3506                           
  3507                           ;timer.c: 326: break;
  3508  0319  0008               	return
  3509  031A                     l6328:	
  3510                           
  3511                           ;timer.c: 333: {
  3512                           ;timer.c: 335: TMR2 = 0;
  3513  031A  019A               	clrf	26	;volatile
  3514                           
  3515                           ;timer.c: 336: break;
  3516  031B  0008               	return
  3517  031C                     l6330:	
  3518                           
  3519                           ;timer.c: 343: {
  3520                           ;timer.c: 345: TMR4 = 0;
  3521  031C  0028               	movlb	8	; select bank8
  3522  031D  0195               	clrf	21	;volatile
  3523                           
  3524                           ;timer.c: 346: break;
  3525  031E  0008               	return
  3526  031F                     l6332:	
  3527                           
  3528                           ;timer.c: 353: {
  3529                           ;timer.c: 355: TMR6 = 0;
  3530  031F  0028               	movlb	8	; select bank8
  3531  0320  019C               	clrf	28	;volatile
  3532                           
  3533                           ;timer.c: 356: break;
  3534  0321  0008               	return
  3535  0322                     l6336:	
  3536  0322  0824               	movf	clear_timer@ui8_TmrNb,w
  3537                           
  3538                           ; Switch size 1, requested type "space"
  3539                           ; Number of cases is 5, Range of values is 0 to 6
  3540                           ; switch strategies available:
  3541                           ; Name         Instructions Cycles
  3542                           ; simple_byte           16     9 (average)
  3543                           ; direct_byte           20     6 (fixed)
  3544                           ; jumptable            260     6 (fixed)
  3545                           ;	Chosen strategy is simple_byte
  3546  0323  3A00               	xorlw	0	; case 0
  3547  0324  1903               	skipnz
  3548  0325  2B15               	goto	l6324
  3549  0326  3A01               	xorlw	1	; case 1
  3550  0327  1903               	skipnz
  3551  0328  2B17               	goto	l6326
  3552  0329  3A03               	xorlw	3	; case 2
  3553  032A  1903               	skipnz
  3554  032B  2B1A               	goto	l6328
  3555  032C  3A06               	xorlw	6	; case 4
  3556  032D  1903               	skipnz
  3557  032E  2B1C               	goto	l6330
  3558  032F  3A02               	xorlw	2	; case 6
  3559  0330  1903               	skipnz
  3560  0331  2B1F               	goto	l6332
  3561  0332  2B33               	goto	l1940
  3562  0333                     l1940:	
  3563  0333  0008               	return
  3564  0334                     __end_of_clear_timer:	
  3565  0334                     __ptext1:	
  3566 ;; *************** function _system_init *****************
  3567 ;; Defined at:
  3568 ;;		line 545 in file "../main.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;		None
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      void 
  3575 ;; Registers used:
  3576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : B1F/0
  3579 ;;		On exit  : 1F/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3582 ;;      Params:         0       0       0       0       0       0       0       0
  3583 ;;      Locals:         0       0       0       0       0       0       0       0
  3584 ;;      Temps:          0       0       0       0       0       0       0       0
  3585 ;;      Totals:         0       0       0       0       0       0       0       0
  3586 ;;Total ram usage:        0 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    6
  3589 ;; This function calls:
  3590 ;;		_ADC_Init
  3591 ;;		_DiagInit
  3592 ;;		_EnableMCP201
  3593 ;;		_FILTER_Init
  3594 ;;		_I_calibrationInit
  3595 ;;		_Oscill_Source_Block
  3596 ;;		_PWM_Capture_init
  3597 ;;		__ELINMIntInitialize
  3598 ;;		_init_bldc
  3599 ;;		_init_ports
  3600 ;;		_timer_init
  3601 ;; This function is called by:
  3602 ;;		_main
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           
  3607                           ;psect for function _system_init
  3608  0334                     _system_init:	
  3609                           
  3610                           ;main.c: 549: OPTION_REG = 0b10000001;
  3611                           
  3612                           ;incstack = 0
  3613                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3614  0334  3081               	movlw	129
  3615  0335  0021               	movlb	1	; select bank1
  3616  0336  0095               	movwf	21	;volatile
  3617                           
  3618                           ;main.c: 558: ui8_ResetMatlab = 1;
  3619  0337  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  3620  0338  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  3621                           
  3622                           ;main.c: 559: GIE = 0;
  3623  0339  138B               	bcf	11,7	;volatile
  3624                           
  3625                           ;main.c: 560: INTCON = 0;
  3626  033A  018B               	clrf	11	;volatile
  3627                           
  3628                           ;main.c: 561: PIE1 = 0;
  3629  033B  0191               	clrf	17	;volatile
  3630                           
  3631                           ;main.c: 562: PIE2 = 0;
  3632  033C  0192               	clrf	18	;volatile
  3633                           
  3634                           ;main.c: 565: ui16_Timer_VaL1 = 0;
  3635  033D  0193               	clrf	19	;volatile
  3636                           
  3637                           ;main.c: 566: ui8_Task_Cont3ms = 0;
  3638  033E  0022               	movlb	2	; select bank2
  3639  033F  01D8               	clrf	_ui8_Task_Cont3ms^(0+256)
  3640                           
  3641                           ;main.c: 567: ui8_Task_Cont5ms = 0;
  3642  0340  01D7               	clrf	_ui8_Task_Cont5ms^(0+256)
  3643                           
  3644                           ;main.c: 571: ui8_Sync_Cont10ms = 0;
  3645  0341  0021               	movlb	1	; select bank1
  3646  0342  3049               	movlw	73
  3647  0343  01C8               	clrf	_ui8_Task_Cont100ms^(0+128)
  3648                           
  3649                           ;main.c: 573: ui16_dryRun_Thresh = 73;
  3650  0344  0023               	movlb	3	; select bank3
  3651  0345  00E8               	movwf	_ui16_dryRun_Thresh^(0+384)
  3652  0346  3068               	movlw	104
  3653  0347  01E9               	clrf	(_ui16_dryRun_Thresh+1)^(0+384)
  3654                           
  3655                           ;main.c: 575: ui16_Current_Thresh = 360;
  3656  0348  00E6               	movwf	_ui16_Current_Thresh^(0+384)
  3657  0349  3001               	movlw	1
  3658  034A  00E7               	movwf	(_ui16_Current_Thresh^(0+384)+1)
  3659                           
  3660                           ;main.c: 577: init_ports( );
  3661  034B  3188  2054  3180   	fcall	_init_ports
  3662                           
  3663                           ;main.c: 581: EnableMCP201( );
  3664  034E  23C0               	fcall	_EnableMCP201
  3665                           
  3666                           ;main.c: 582: _ELINMIntInitialize( );
  3667  034F  3184  241D  3180   	fcall	__ELINMIntInitialize
  3668                           
  3669                           ;main.c: 588: Oscill_Source_Block( );
  3670  0352  23DB  3180         	fcall	_Oscill_Source_Block
  3671                           
  3672                           ;main.c: 589: timer_init( 1 );
  3673  0354  3001               	movlw	1
  3674  0355  2371  3180         	fcall	_timer_init
  3675                           
  3676                           ;main.c: 590: timer_init( 4 );
  3677  0357  3004               	movlw	4
  3678  0358  2371  3180         	fcall	_timer_init
  3679                           
  3680                           ;main.c: 591: timer_init( 6 );
  3681  035A  3006               	movlw	6
  3682  035B  2371               	fcall	_timer_init
  3683                           
  3684                           ;main.c: 594: PWM_Capture_init( 5 );
  3685  035C  3005               	movlw	5
  3686  035D  3185  25B4  3180   	fcall	_PWM_Capture_init
  3687                           
  3688                           ;main.c: 595: ADC_Init( );
  3689  0360  23AA  3180         	fcall	_ADC_Init
  3690                           
  3691                           ;main.c: 596: DiagInit( );
  3692  0362  23B4               	fcall	_DiagInit
  3693                           
  3694                           ;main.c: 597: FILTER_Init( );
  3695  0363  318F  2701  3180   	fcall	_FILTER_Init
  3696                           
  3697                           ;main.c: 600: ui16_Temp_cal = 0;
  3698  0366  0023               	movlb	3	; select bank3
  3699  0367  01E2               	clrf	_ui16_Temp_cal^(0+384)
  3700  0368  01E3               	clrf	(_ui16_Temp_cal+1)^(0+384)
  3701                           
  3702                           ;main.c: 610: I_calibrationInit();
  3703  0369  3188  2071  3180   	fcall	_I_calibrationInit
  3704                           
  3705                           ;main.c: 612: init_bldc( );
  3706  036C  3186  268C         	fcall	_init_bldc
  3707                           
  3708                           ;main.c: 614: PEIE = 1;
  3709  036E  170B               	bsf	11,6	;volatile
  3710                           
  3711                           ;main.c: 615: GIE = 1;
  3712  036F  178B               	bsf	11,7	;volatile
  3713  0370  0008               	return
  3714  0371                     __end_of_system_init:	
  3715  0371                     __ptext2:	
  3716 ;; *************** function _timer_init *****************
  3717 ;; Defined at:
  3718 ;;		line 73 in file "../timer.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  ui8_TmrNb       1    wreg     unsigned char 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  ui8_TmrNb       1    5[BANK0 ] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 16/1
  3729 ;;		On exit  : 16/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3732 ;;      Params:         0       0       0       0       0       0       0       0
  3733 ;;      Locals:         0       1       0       0       0       0       0       0
  3734 ;;      Temps:          0       0       0       0       0       0       0       0
  3735 ;;      Totals:         0       1       0       0       0       0       0       0
  3736 ;;Total ram usage:        1 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    4
  3739 ;; This function calls:
  3740 ;;		_clear_timer
  3741 ;; This function is called by:
  3742 ;;		_system_init
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           
  3747                           ;psect for function _timer_init
  3748  0371                     _timer_init:	
  3749                           
  3750                           ;incstack = 0
  3751                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3752                           ;timer_init@ui8_TmrNb stored from wreg
  3753  0371  0020               	movlb	0	; select bank0
  3754  0372  00A5               	movwf	timer_init@ui8_TmrNb
  3755                           
  3756                           ;timer.c: 77: switch( ui8_TmrNb )
  3757  0373  2B98               	goto	l6654
  3758  0374                     l6624:	
  3759                           
  3760                           ;timer.c: 83: {
  3761                           ;timer.c: 86: clear_timer( 0 );
  3762  0374  3000               	movlw	0
  3763  0375  2313               	fcall	_clear_timer
  3764                           
  3765                           ;timer.c: 87: TMR0IE = 0;
  3766  0376  128B               	bcf	11,5	;volatile
  3767                           
  3768                           ;timer.c: 88: break;
  3769  0377  0008               	return
  3770  0378                     l6628:	
  3771                           
  3772                           ;timer.c: 95: {
  3773                           ;timer.c: 98: clear_timer( 1 );
  3774  0378  3001               	movlw	1
  3775  0379  2313               	fcall	_clear_timer
  3776                           
  3777                           ;timer.c: 99: T1CON = 0b01110101;
  3778  037A  3075               	movlw	117
  3779  037B  0020               	movlb	0	; select bank0
  3780  037C  0098               	movwf	24	;volatile
  3781                           
  3782                           ;timer.c: 100: TMR1IE = 0;
  3783  037D  0021               	movlb	1	; select bank1
  3784  037E  1011               	bcf	17,0	;volatile
  3785                           
  3786                           ;timer.c: 101: break;
  3787  037F  0008               	return
  3788  0380                     l6634:	
  3789                           
  3790                           ;timer.c: 108: {
  3791                           ;timer.c: 111: clear_timer( 2 );
  3792  0380  3002               	movlw	2
  3793  0381  2313               	fcall	_clear_timer
  3794                           
  3795                           ;timer.c: 112: T2CON = 0b00000111;
  3796  0382  3007               	movlw	7
  3797  0383  0020               	movlb	0	; select bank0
  3798  0384  009C               	movwf	28	;volatile
  3799                           
  3800                           ;timer.c: 113: TMR2IE = 0;
  3801  0385  0021               	movlb	1	; select bank1
  3802  0386  1091               	bcf	17,1	;volatile
  3803                           
  3804                           ;timer.c: 114: break;
  3805  0387  0008               	return
  3806  0388                     l6640:	
  3807                           
  3808                           ;timer.c: 121: {
  3809                           ;timer.c: 124: clear_timer( 4 );
  3810  0388  3004               	movlw	4
  3811  0389  2313               	fcall	_clear_timer
  3812                           
  3813                           ;timer.c: 125: T4CON = 0b00001110;
  3814  038A  300E               	movlw	14
  3815  038B  0028               	movlb	8	; select bank8
  3816  038C  0097               	movwf	23	;volatile
  3817                           
  3818                           ;timer.c: 129: TMR4IE = 1;
  3819  038D  0021               	movlb	1	; select bank1
  3820  038E  1493               	bsf	19,1	;volatile
  3821                           
  3822                           ;timer.c: 131: break;
  3823  038F  0008               	return
  3824  0390                     l6646:	
  3825                           
  3826                           ;timer.c: 138: {
  3827                           ;timer.c: 141: clear_timer( 6 );
  3828  0390  3006               	movlw	6
  3829  0391  2313               	fcall	_clear_timer
  3830                           
  3831                           ;timer.c: 142: T6CON = 0b00000101;
  3832  0392  3005               	movlw	5
  3833  0393  0028               	movlb	8	; select bank8
  3834  0394  009E               	movwf	30	;volatile
  3835                           
  3836                           ;timer.c: 147: TMR6IE = 1;
  3837  0395  0021               	movlb	1	; select bank1
  3838  0396  1593               	bsf	19,3	;volatile
  3839                           
  3840                           ;timer.c: 169: break;
  3841  0397  0008               	return
  3842  0398                     l6654:	
  3843  0398  0825               	movf	timer_init@ui8_TmrNb,w
  3844                           
  3845                           ; Switch size 1, requested type "space"
  3846                           ; Number of cases is 5, Range of values is 0 to 6
  3847                           ; switch strategies available:
  3848                           ; Name         Instructions Cycles
  3849                           ; simple_byte           16     9 (average)
  3850                           ; direct_byte           20     6 (fixed)
  3851                           ; jumptable            260     6 (fixed)
  3852                           ;	Chosen strategy is simple_byte
  3853  0399  3A00               	xorlw	0	; case 0
  3854  039A  1903               	skipnz
  3855  039B  2B74               	goto	l6624
  3856  039C  3A01               	xorlw	1	; case 1
  3857  039D  1903               	skipnz
  3858  039E  2B78               	goto	l6628
  3859  039F  3A03               	xorlw	3	; case 2
  3860  03A0  1903               	skipnz
  3861  03A1  2B80               	goto	l6634
  3862  03A2  3A06               	xorlw	6	; case 4
  3863  03A3  1903               	skipnz
  3864  03A4  2B88               	goto	l6640
  3865  03A5  3A02               	xorlw	2	; case 6
  3866  03A6  1903               	skipnz
  3867  03A7  2B90               	goto	l6646
  3868  03A8  2BA9               	goto	l1917
  3869  03A9                     l1917:	
  3870  03A9  0008               	return
  3871  03AA                     __end_of_timer_init:	
  3872  03AA                     __ptext15:	
  3873 ;; *************** function _ADC_Init *****************
  3874 ;; Defined at:
  3875 ;;		line 102 in file "../adc.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;		None
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg, status,2
  3884 ;; Tracked objects:
  3885 ;;		On entry : 18/1
  3886 ;;		On exit  : 1F/2
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3889 ;;      Params:         0       0       0       0       0       0       0       0
  3890 ;;      Locals:         0       0       0       0       0       0       0       0
  3891 ;;      Temps:          0       0       0       0       0       0       0       0
  3892 ;;      Totals:         0       0       0       0       0       0       0       0
  3893 ;;Total ram usage:        0 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    3
  3896 ;; This function calls:
  3897 ;;		Nothing
  3898 ;; This function is called by:
  3899 ;;		_system_init
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           
  3904                           ;psect for function _ADC_Init
  3905  03AA                     _ADC_Init:	
  3906                           
  3907                           ;adc.c: 106: ADCON1 = 0b10100000;
  3908                           
  3909                           ;incstack = 0
  3910                           ; Regs used in _ADC_Init: [wreg+status,2]
  3911  03AA  30A0               	movlw	160
  3912  03AB  0021               	movlb	1	; select bank1
  3913  03AC  009E               	movwf	30	;volatile
  3914                           
  3915                           ;adc.c: 108: ADCON0 = 0b00000000;
  3916  03AD  019D               	clrf	29	;volatile
  3917                           
  3918                           ;adc.c: 109: ADON = 1;
  3919  03AE  141D               	bsf	29,0	;volatile
  3920                           
  3921                           ;adc.c: 111: ui8_temp_calibration = 0;
  3922  03AF  0022               	movlb	2	; select bank2
  3923  03B0  0817               	movf	23,w	;volatile
  3924  03B1  3830               	iorlw	48
  3925  03B2  0097               	movwf	23	;volatile
  3926  03B3  0008               	return
  3927  03B4                     __end_of_ADC_Init:	
  3928  03B4                     __ptext14:	
  3929 ;; *************** function _DiagInit *****************
  3930 ;; Defined at:
  3931 ;;		line 148 in file "../diag.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;		None
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;		None
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      void 
  3938 ;; Registers used:
  3939 ;;		wreg, status,2, status,0, pclath, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 1F/2
  3942 ;;		On exit  : 1F/2
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3945 ;;      Params:         0       0       0       0       0       0       0       0
  3946 ;;      Locals:         0       0       0       0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0       0
  3948 ;;      Totals:         0       0       0       0       0       0       0       0
  3949 ;;Total ram usage:        0 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    4
  3952 ;; This function calls:
  3953 ;;		_PWM_Write_Out
  3954 ;; This function is called by:
  3955 ;;		_system_init
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           
  3960                           ;psect for function _DiagInit
  3961  03B4                     _DiagInit:	
  3962                           
  3963                           ;diag.c: 162: ui8_error_Flags.b = 0;
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  3967  03B4  0020               	movlb	0	; select bank0
  3968  03B5  300B               	movlw	11
  3969  03B6  01E5               	clrf	_ui8_error_Flags
  3970                           
  3971                           ;diag.c: 163: PWM_Write_Out( 11 );
  3972  03B7  318E  2622         	fcall	_PWM_Write_Out
  3973                           
  3974                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  3975  03B9  01E7               	clrf	_ui16_IPhase1_bldc_cal^(0+256)
  3976  03BA  01E8               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  3977                           
  3978                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  3979  03BB  01E5               	clrf	_ui16_IPhase2_bldc_cal^(0+256)
  3980  03BC  01E6               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  3981                           
  3982                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  3983  03BD  01E3               	clrf	_ui16_IPhase3_bldc_cal^(0+256)
  3984  03BE  01E4               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  3985  03BF  0008               	return
  3986  03C0                     __end_of_DiagInit:	
  3987  03C0                     __ptext13:	
  3988 ;; *************** function _EnableMCP201 *****************
  3989 ;; Defined at:
  3990 ;;		line 434 in file "../lin.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  _dcnt           1    6[BANK0 ] unsigned char 
  3995 ;;  _dcnt           1    5[BANK0 ] unsigned char 
  3996 ;;  _dcnt           1    4[BANK0 ] unsigned char 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		status,2
  4001 ;; Tracked objects:
  4002 ;;		On entry : 1F/1
  4003 ;;		On exit  : 1F/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4006 ;;      Params:         0       0       0       0       0       0       0       0
  4007 ;;      Locals:         0       3       0       0       0       0       0       0
  4008 ;;      Temps:          0       0       0       0       0       0       0       0
  4009 ;;      Totals:         0       3       0       0       0       0       0       0
  4010 ;;Total ram usage:        3 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    3
  4013 ;; This function calls:
  4014 ;;		Nothing
  4015 ;; This function is called by:
  4016 ;;		_system_init
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           
  4021                           ;psect for function _EnableMCP201
  4022  03C0                     _EnableMCP201:	
  4023                           
  4024                           ;lin.c: 448: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4025                           
  4026                           ;incstack = 0
  4027                           ; Regs used in _EnableMCP201: [status,2]
  4028  03C0  0020               	movlb	0	; select bank0
  4029  03C1  128E               	bcf	14,5	;volatile
  4030  03C2  01A4               	clrf	EnableMCP201@_dcnt
  4031  03C3  2BC6               	goto	l940
  4032  03C4                     l941:	
  4033  03C4  0000               	nop	;# 
  4034  03C5  0000               	nop	;# 
  4035  03C6                     l940:	
  4036  03C6  0020               	movlb	0	; select bank0
  4037  03C7  0BA4               	decfsz	EnableMCP201@_dcnt,f
  4038  03C8  2BC4               	goto	l941
  4039                           
  4040                           ;lin.c: 450: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4041  03C9  168E               	bsf	14,5	;volatile
  4042  03CA  01A5               	clrf	EnableMCP201@_dcnt_712
  4043  03CB  2BCE               	goto	l945
  4044  03CC                     l946:	
  4045  03CC  0000               	nop	;# 
  4046  03CD  0000               	nop	;# 
  4047  03CE                     l945:	
  4048  03CE  0020               	movlb	0	; select bank0
  4049  03CF  0BA5               	decfsz	EnableMCP201@_dcnt_712,f
  4050  03D0  2BCC               	goto	l946
  4051                           
  4052                           ;lin.c: 452: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4053  03D1  128E               	bcf	14,5	;volatile
  4054  03D2  01A6               	clrf	EnableMCP201@_dcnt_713
  4055  03D3  2BD6               	goto	l950
  4056  03D4                     l951:	
  4057  03D4  0000               	nop	;# 
  4058  03D5  0000               	nop	;# 
  4059  03D6                     l950:	
  4060  03D6  0020               	movlb	0	; select bank0
  4061  03D7  0BA6               	decfsz	EnableMCP201@_dcnt_713,f
  4062  03D8  2BD4               	goto	l951
  4063                           
  4064                           ;lin.c: 453: RC5 = 1;
  4065  03D9  168E               	bsf	14,5	;volatile
  4066  03DA  0008               	return
  4067  03DB                     __end_of_EnableMCP201:	
  4068  03DB                     __ptext10:	
  4069 ;; *************** function _Oscill_Source_Block *****************
  4070 ;; Defined at:
  4071 ;;		line 478 in file "../timer.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;		None
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;		None
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		wreg
  4080 ;; Tracked objects:
  4081 ;;		On entry : 1F/0
  4082 ;;		On exit  : 1F/1
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4085 ;;      Params:         0       0       0       0       0       0       0       0
  4086 ;;      Locals:         0       0       0       0       0       0       0       0
  4087 ;;      Temps:          0       0       0       0       0       0       0       0
  4088 ;;      Totals:         0       0       0       0       0       0       0       0
  4089 ;;Total ram usage:        0 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    3
  4092 ;; This function calls:
  4093 ;;		Nothing
  4094 ;; This function is called by:
  4095 ;;		_system_init
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           
  4100                           ;psect for function _Oscill_Source_Block
  4101  03DB                     _Oscill_Source_Block:	
  4102                           
  4103                           ;timer.c: 482: OSCCON = 0xF0;
  4104                           
  4105                           ;incstack = 0
  4106                           ; Regs used in _Oscill_Source_Block: [wreg]
  4107  03DB  30F0               	movlw	240
  4108  03DC  0021               	movlb	1	; select bank1
  4109  03DD  0099               	movwf	25	;volatile
  4110                           
  4111                           ;timer.c: 483: WDTCON = 0b00010001;
  4112  03DE  3011               	movlw	17
  4113  03DF  0097               	movwf	23	;volatile
  4114  03E0  0008               	return
  4115  03E1                     __end_of_Oscill_Source_Block:	
  4116  03E1                     PL8:	
  4117  03E1  3E00               	addlw	low (_PWM_trans_table| (0+32768))
  4118  03E2  0084               	movwf	4
  4119  03E3  3098               	movlw	high (_PWM_trans_table| (0+32768))
  4120  03E4  1803               	skipnc
  4121  03E5  3E01               	addlw	1
  4122  03E6  0085               	movwf	5
  4123  03E7  0800               	movf	0,w	;code access
  4124  03E8  0008               	return
  4125  03E9                     __end_ofPL8:	
  4126  03E9                     PL28:	
  4127  03E9  0020               	movlb	0	; select bank0
  4128  03EA  0ADF               	incf	_pt,f
  4129  03EB  085F               	movf	_pt,w
  4130  03EC  0086               	movwf	6
  4131  03ED  0801               	movf	1,w
  4132  03EE  0023               	movlb	3	; select bank3
  4133  03EF  0008               	return
  4134  03F0                     __end_ofPL28:	
  4135  03F0                     PL48:	
  4136  03F0  00A6               	movwf	___awdiv@dividend
  4137  03F1  3005               	movlw	5
  4138  03F2  01A7               	clrf	___awdiv@dividend+1
  4139  03F3  35A6               	lslf	___awdiv@dividend,f
  4140  03F4  0DA7               	rlf	___awdiv@dividend+1,f
  4141  03F5  35A6               	lslf	___awdiv@dividend,f
  4142  03F6  0DA7               	rlf	___awdiv@dividend+1,f
  4143  03F7  00A4               	movwf	___awdiv@divisor
  4144  03F8  01A5               	clrf	___awdiv@divisor+1
  4145  03F9  0008               	return
  4146  03FA                     __end_ofPL48:	
  4147  03FA                     __ptext23:	
  4148 ;; *************** function _FILTER_IPhase *****************
  4149 ;; Defined at:
  4150 ;;		line 357 in file "../adc.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      void 
  4157 ;; Registers used:
  4158 ;;		wreg, status,2, status,0
  4159 ;; Tracked objects:
  4160 ;;		On entry : 1D/1
  4161 ;;		On exit  : 1F/3
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4164 ;;      Params:         0       0       0       0       0       0       0       0
  4165 ;;      Locals:         0       0       0       0       0       0       0       0
  4166 ;;      Temps:          0       2       0       0       0       0       0       0
  4167 ;;      Totals:         0       2       0       0       0       0       0       0
  4168 ;;Total ram usage:        2 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    3
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_Get_Analog_Value
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function _FILTER_IPhase
  4180  03FA                     _FILTER_IPhase:	
  4181                           
  4182                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
  4186  03FA  0022               	movlb	2	; select bank2
  4187  03FB  083B               	movf	_ui16_IPhase1_bldc^(0+256),w	;volatile
  4188  03FC  0023               	movlb	3	; select bank3
  4189  03FD  07DE               	addwf	_filter3^(0+384),f
  4190  03FE  0022               	movlb	2	; select bank2
  4191  03FF  083C               	movf	(_ui16_IPhase1_bldc+1)^(0+256),w	;volatile
  4192  0400  0023               	movlb	3	; select bank3
  4193  0401  3DDF               	addwfc	(_filter3+1)^(0+384),f
  4194                           
  4195                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
  4196  0402  085F               	movf	(_filter3+1)^(0+384),w
  4197  0403  0020               	movlb	0	; select bank0
  4198  0404  00A5               	movwf	??_FILTER_IPhase+1
  4199  0405  0023               	movlb	3	; select bank3
  4200  0406  085E               	movf	_filter3^(0+384),w
  4201  0407  0020               	movlb	0	; select bank0
  4202  0408  00A4               	movwf	??_FILTER_IPhase
  4203  0409  3006               	movlw	6
  4204  040A                     u3585:	
  4205  040A  36A5               	lsrf	??_FILTER_IPhase+1,f
  4206  040B  0CA4               	rrf	??_FILTER_IPhase,f
  4207  040C  0B89               	decfsz	9,f
  4208  040D  2C0A               	goto	u3585
  4209  040E  0824               	movf	??_FILTER_IPhase,w
  4210  040F  0022               	movlb	2	; select bank2
  4211  0410  00B7               	movwf	_ui16_fir_IPhase_mean^(0+256)
  4212  0411  0020               	movlb	0	; select bank0
  4213  0412  0825               	movf	??_FILTER_IPhase+1,w
  4214  0413  0022               	movlb	2	; select bank2
  4215  0414  00B8               	movwf	(_ui16_fir_IPhase_mean+1)^(0+256)
  4216                           
  4217                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
  4218  0415  0837               	movf	_ui16_fir_IPhase_mean^(0+256),w
  4219  0416  0023               	movlb	3	; select bank3
  4220  0417  02DE               	subwf	_filter3^(0+384),f
  4221  0418  0022               	movlb	2	; select bank2
  4222  0419  0838               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  4223  041A  0023               	movlb	3	; select bank3
  4224  041B  3BDF               	subwfb	(_filter3+1)^(0+384),f
  4225  041C  0008               	return
  4226  041D                     __end_of_FILTER_IPhase:	
  4227                           
  4228                           	psect	bitbssBANK0
  4229  0340                     __pbitbssBANK0:	
  4230  0340                     _rising_bemf_flag:	
  4231  0340                     	ds	1
  4232                           
  4233                           	psect	bssBANK0
  4234  0054                     __pbssBANK0:	
  4235  0054                     BVH2_Appl_Layer@Cb24_StateCnt:	
  4236  0054                     	ds	2
  4237  0056                     _ui16_Speed_mat:	
  4238  0056                     	ds	2
  4239  0058                     _ui16_IPhase_bldc:	
  4240  0058                     	ds	2
  4241  005A                     _comm_time:	
  4242  005A                     	ds	2
  4243  005C                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  4244  005C                     	ds	1
  4245  005D                     _Cb34_idPWM:	
  4246  005D                     	ds	1
  4247  005E                     _ui8_PWM_dc_mat:	
  4248  005E                     	ds	1
  4249  005F                     _pt:	
  4250  005F                     	ds	1
  4251  0060                     __ELINMIntStatus:	
  4252  0060                     	ds	1
  4253  0061                     _ui8_b_DResB0_c:	
  4254  0061                     	ds	1
  4255  0062                     _ui8_b_DResLocID_c:	
  4256  0062                     	ds	1
  4257  0063                     _MotorFlags:	
  4258  0063                     	ds	1
  4259  0064                     _ui8_duty_cycle_BLDC:	
  4260  0064                     	ds	1
  4261  0065                     _ui8_error_Flags:	
  4262  0065                     	ds	1
  4263  0066                     _ui16_Ubat_bldc:	
  4264  0066                     	ds	2
  4265                           
  4266                           	psect	dataBANK0
  4267  0069                     __pdataBANK0:	
  4268  0069                     _ui8_selected_lid:	
  4269  0069                     	ds	1
  4270                           
  4271                           	psect	bssBANK1
  4272  00A0                     __pbssBANK1:	
  4273  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  4274  00A0                     	ds	2
  4275  00A2                     BVH2_Appl_Layer@Cb19_Counter:	
  4276  00A2                     	ds	2
  4277  00A4                     _Cb44_StateCnt:	
  4278  00A4                     	ds	2
  4279  00A6                     _Cb1_StateCnt:	
  4280  00A6                     	ds	2
  4281  00A8                     _ui16_Capt_Val2:	
  4282  00A8                     	ds	2
  4283  00AA                     _ui16_Capt_Val1:	
  4284  00AA                     	ds	2
  4285  00AC                     _ui16_Capt_Val0:	
  4286  00AC                     	ds	2
  4287  00AE                     _ui16_mat_Current:	
  4288  00AE                     	ds	2
  4289  00B0                     _ui8_BattVolt_mat:	
  4290  00B0                     	ds	2
  4291  00B2                     _ui16_speed_fil:	
  4292  00B2                     	ds	2
  4293  00B4                     _ui16_Ubemf_bldc:	
  4294  00B4                     	ds	2
  4295  00B6                     _ui16_phase_advancement:	
  4296  00B6                     	ds	2
  4297  00B8                     _ui16_step_cnt:	
  4298  00B8                     	ds	2
  4299  00BA                     _analog_value:	
  4300  00BA                     	ds	2
  4301  00BC                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  4302  00BC                     	ds	1
  4303  00BD                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  4304  00BD                     	ds	1
  4305  00BE                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  4306  00BE                     	ds	1
  4307  00BF                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  4308  00BF                     	ds	1
  4309  00C0                     BVH2_Appl_Layer@Cb9_StateCnt:	
  4310  00C0                     	ds	1
  4311  00C1                     _Cb56_odFixedValueSel:	
  4312  00C1                     	ds	1
  4313  00C2                     _SIBFS_UbatHandling_b:	
  4314  00C2                     	ds	1
  4315  00C3                     _SIBFS_Pic_etat_monitor_b:	
  4316  00C3                     	ds	1
  4317  00C4                     _SIBFS_PWM_Detection_b:	
  4318  00C4                     	ds	1
  4319  00C5                     _SIBFS_Current_Analysis_High_b:	
  4320  00C5                     	ds	1
  4321  00C6                     _ui8_PWMinDC_sav:	
  4322  00C6                     	ds	1
  4323  00C7                     _ui8_PWM_FreqCnt:	
  4324  00C7                     	ds	1
  4325  00C8                     _ui8_Task_Cont100ms:	
  4326  00C8                     	ds	1
  4327  00C9                     _bool_ControlLoopMode:	
  4328  00C9                     	ds	1
  4329  00CA                     _bool_mat_currAlarm_bldc:	
  4330  00CA                     	ds	1
  4331  00CB                     _ErrorCode:	
  4332  00CB                     	ds	1
  4333  00CC                     __ELINMIntMessageBufferPointer:	
  4334  00CC                     	ds	1
  4335  00CD                     __ELINMIntReadBack:	
  4336  00CD                     	ds	1
  4337  00CE                     __ELINMIntMessageSize:	
  4338  00CE                     	ds	1
  4339  00CF                     __ELINMIntStatus1:	
  4340  00CF                     	ds	1
  4341  00D0                     _ui8_Task_Cont1ms:	
  4342  00D0                     	ds	1
  4343  00D1                     _ui8_given_supply:	
  4344  00D1                     	ds	1
  4345  00D2                     _phaseCal:	
  4346  00D2                     	ds	1
  4347  00D3                     _ui8_b_DResB4_c:	
  4348  00D3                     	ds	1
  4349  00D4                     _ui8_b_DResB3_c:	
  4350  00D4                     	ds	1
  4351  00D5                     _ui8_b_DResB2_c:	
  4352  00D5                     	ds	1
  4353  00D6                     _ui8_b_DResB1_c:	
  4354  00D6                     	ds	1
  4355  00D7                     _ui8_b_DResServID_c:	
  4356  00D7                     	ds	1
  4357  00D8                     _bool_HighCurrentAlarm:	
  4358  00D8                     	ds	1
  4359  00D9                     _bool_MotorStalled:	
  4360  00D9                     	ds	1
  4361  00DA                     _bool_DryRunningAlarm:	
  4362  00DA                     	ds	1
  4363  00DB                     _bool_CPU_TempAlarm:	
  4364  00DB                     	ds	1
  4365  00DC                     _Bcnt:	
  4366  00DC                     	ds	1
  4367  00DD                     _ui8_CompFlag:	
  4368  00DD                     	ds	1
  4369  00DE                     _ui8_sampleState:	
  4370  00DE                     	ds	1
  4371  00DF                     _ui8_Ubemf_sel:	
  4372  00DF                     	ds	1
  4373  00E0                     _ui8_UPhase_sel:	
  4374  00E0                     	ds	1
  4375  00E1                     _ui8_IPhase_sel:	
  4376  00E1                     	ds	1
  4377  00E2                     _ui8_BlankingCount:	
  4378  00E2                     	ds	1
  4379  00E3                     _comm_state:	
  4380  00E3                     	ds	1
  4381  00E4                     _ui8_StartupPWM:	
  4382  00E4                     	ds	1
  4383  00E5                     _bool_start_demand_mat:	
  4384  00E5                     	ds	1
  4385  00E6                     _windowPtr1:	
  4386  00E6                     	ds	1
  4387                           
  4388                           	psect	dataBANK1
  4389  00E7                     __pdataBANK1:	
  4390  00E7                     _ui16_I_cal_Ph3:	
  4391  00E7                     	ds	2
  4392  00E9                     _ui16_I_cal_Ph2:	
  4393  00E9                     	ds	2
  4394  00EB                     _ui16_I_cal_Ph1:	
  4395  00EB                     	ds	2
  4396  00ED                     _wkpoint:	
  4397  00ED                     	ds	1
  4398  00EE                     _ict_stamp:	
  4399  00EE                     	ds	1
  4400                           
  4401                           	psect	bssBANK2
  4402  0120                     __pbssBANK2:	
  4403  0120                     _ui8_current_cal:	
  4404  0120                     	ds	3
  4405  0123                     BVH2_Appl_Layer@Cb14_StateCnt:	
  4406  0123                     	ds	2
  4407  0125                     _ui16_mat_inpTemp:	
  4408  0125                     	ds	2
  4409  0127                     _ui16_PWM_Freq_In:	
  4410  0127                     	ds	2
  4411  0129                     _ui16_PWM_Freq_mat:	
  4412  0129                     	ds	2
  4413  012B                     __ELINMIntTHeaderMin:	
  4414  012B                     	ds	2
  4415  012D                     __ELINMIntTFrameMin:	
  4416  012D                     	ds	2
  4417  012F                     _sum:	
  4418  012F                     	ds	2
  4419  0131                     _ui16_comm_time_max:	
  4420  0131                     	ds	2
  4421  0133                     _ui16_speed_rar:	
  4422  0133                     	ds	2
  4423  0135                     _ui16_NTC_Temp_bldc_mean:	
  4424  0135                     	ds	2
  4425  0137                     _ui16_fir_IPhase_mean:	
  4426  0137                     	ds	2
  4427  0139                     _ui16_fir_Bat_mittel:	
  4428  0139                     	ds	2
  4429  013B                     _ui16_IPhase1_bldc:	
  4430  013B                     	ds	2
  4431  013D                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  4432  013D                     	ds	1
  4433  013E                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  4434  013E                     	ds	1
  4435  013F                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  4436  013F                     	ds	1
  4437  0140                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  4438  0140                     	ds	1
  4439  0141                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  4440  0141                     	ds	1
  4441  0142                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  4442  0142                     	ds	1
  4443  0143                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  4444  0143                     	ds	1
  4445  0144                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  4446  0144                     	ds	1
  4447  0145                     BVH2_Appl_Layer@Cb51_Counter:	
  4448  0145                     	ds	1
  4449  0146                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  4450  0146                     	ds	1
  4451  0147                     _Cb56_odPumpOff:	
  4452  0147                     	ds	1
  4453  0148                     _Cb56_oUbat_Alarm_High:	
  4454  0148                     	ds	1
  4455  0149                     _Cb44_oShutoff:	
  4456  0149                     	ds	1
  4457  014A                     _Cb34_odPumpOff:	
  4458  014A                     	ds	1
  4459  014B                     _Cb34_odFixedValueSel:	
  4460  014B                     	ds	1
  4461  014C                     _Cb34_odFixedLowValueSel:	
  4462  014C                     	ds	1
  4463  014D                     _Cb34_oPWM_SC_Alarm:	
  4464  014D                     	ds	1
  4465  014E                     _Cb34_oPWM_Alarm:	
  4466  014E                     	ds	1
  4467  014F                     _Cb1_oShutoff:	
  4468  014F                     	ds	1
  4469  0150                     _Cb1_oCurrentAlarm:	
  4470  0150                     	ds	1
  4471  0151                     _Cb1_RestartCounter:	
  4472  0151                     	ds	1
  4473  0152                     _ui8_PWMin_failCnt:	
  4474  0152                     	ds	1
  4475  0153                     _ui8_Duty_Cycle_In_Ratio:	
  4476  0153                     	ds	1
  4477  0154                     _ui8_Pulse_State:	
  4478  0154                     	ds	1
  4479  0155                     _ui8_PWMoutvalue:	
  4480  0155                     	ds	1
  4481  0156                     _ui8_lastTaskvalue:	
  4482  0156                     	ds	1
  4483  0157                     _ui8_Task_Cont5ms:	
  4484  0157                     	ds	1
  4485  0158                     _ui8_Task_Cont3ms:	
  4486  0158                     	ds	1
  4487  0159                     _bool_PWMin_Freq_err_Alarm:	
  4488  0159                     	ds	1
  4489  015A                     _bool_UbatAlarm:	
  4490  015A                     	ds	1
  4491  015B                     _bool_CPU_TempRedAlarm:	
  4492  015B                     	ds	1
  4493  015C                     _bool_PWMin_err_Alarm:	
  4494  015C                     	ds	1
  4495  015D                     _ui8_duty_cycle_mat:	
  4496  015D                     	ds	1
  4497  015E                     _ui8_Kp_mat:	
  4498  015E                     	ds	1
  4499  015F                     __ELINMIntSpace:	
  4500  015F                     	ds	1
  4501  0160                     __ELINMIntRXMessageSize:	
  4502  0160                     	ds	1
  4503  0161                     _ui16_Duty_Cycle_In:	
  4504  0161                     	ds	2
  4505  0163                     _ui16_IPhase3_bldc_cal:	
  4506  0163                     	ds	2
  4507  0165                     _ui16_IPhase2_bldc_cal:	
  4508  0165                     	ds	2
  4509  0167                     _ui16_IPhase1_bldc_cal:	
  4510  0167                     	ds	2
  4511                           
  4512                           	psect	dataBANK2
  4513  0169                     __pdataBANK2:	
  4514  0169                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  4515  0169                     	ds	4
  4516  016D                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  4517  016D                     	ds	1
  4518  016E                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  4519  016E                     	ds	1
  4520  016F                     _ui8_failure:	
  4521  016F                     	ds	1
  4522                           
  4523                           	psect	bssBANK3
  4524  01A0                     __pbssBANK3:	
  4525  01A0                     _B:	
  4526  01A0                     	ds	16
  4527  01B0                     _my_msg:	
  4528  01B0                     	ds	8
  4529  01B8                     _checksum:	
  4530  01B8                     	ds	6
  4531  01BE                     __ELINMIntSleepTimeout:	
  4532  01BE                     	ds	4
  4533  01C2                     BVH2_Appl_Layer@Cb24_BadCnt:	
  4534  01C2                     	ds	2
  4535  01C4                     _ui16_Speed_demand_mat_min:	
  4536  01C4                     	ds	2
  4537  01C6                     _ui16_Speed_demand_mat_Max:	
  4538  01C6                     	ds	2
  4539  01C8                     _ui16_Speed_demand_mat:	
  4540  01C8                     	ds	2
  4541  01CA                     _ui8_Ki_mat:	
  4542  01CA                     	ds	2
  4543  01CC                     __ELINMIntTHeaderMax:	
  4544  01CC                     	ds	2
  4545  01CE                     __ELINMIntTFrameMax:	
  4546  01CE                     	ds	2
  4547  01D0                     __ELINMIntRXCRC:	
  4548  01D0                     	ds	2
  4549  01D2                     _ui16_IPhase3_bldc:	
  4550  01D2                     	ds	2
  4551  01D4                     _ui16_IPhase2_bldc:	
  4552  01D4                     	ds	2
  4553  01D6                     _phase_delay_counter:	
  4554  01D6                     	ds	2
  4555  01D8                     _ui8_fixed_start_speed_mat:	
  4556  01D8                     	ds	2
  4557  01DA                     _ui16_NTC_Temp_bldc_mean_cal:	
  4558  01DA                     	ds	2
  4559  01DC                     _filterTempNTC:	
  4560  01DC                     	ds	2
  4561  01DE                     _filter3:	
  4562  01DE                     	ds	2
  4563  01E0                     _filter1:	
  4564  01E0                     	ds	2
  4565  01E2                     _ui16_Temp_cal:	
  4566  01E2                     	ds	2
  4567  01E4                     _ui16_NTC_Temp_bldc:	
  4568  01E4                     	ds	2
  4569                           
  4570                           	psect	bssBANK4
  4571  0240                     __pbssBANK4:	
  4572  0240                     _inputArray1:	
  4573  0240                     	ds	16
  4574  0250                     __ELINMIntMessageBuffer:	
  4575  0250                     	ds	11
  4576                           
  4577                           	psect	clrtext
  4578  0710                     clear_ram0:	
  4579                           ;	Called with FSR0 containing the base address, and
  4580                           ;	WREG with the size to clear
  4581                           
  4582  0710  0064               	clrwdt	;clear the watchdog before getting into this loop
  4583  0711                     clrloop0:	
  4584  0711  0180               	clrf	0	;clear RAM location pointed to by FSR
  4585  0712  3101               	addfsr 0,1
  4586  0713  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4587  0714  2F11               	goto	clrloop0	;have we reached the end yet?
  4588  0715  3400               	retlw	0	;all done for this memory range, return
  4589                           
  4590                           	psect	cstackBANK4
  4591  0220                     __pcstackBANK4:	
  4592  0220                     _BVH2_Appl_Layer$1218:	
  4593                           
  4594                           ; 4 bytes @ 0x0
  4595  0220                     	ds	4
  4596  0224                     _BVH2_Appl_Layer$1215:	
  4597                           
  4598                           ; 2 bytes @ 0x4
  4599  0224                     	ds	2
  4600  0226                     _BVH2_Appl_Layer$1217:	
  4601                           
  4602                           ; 2 bytes @ 0x6
  4603  0226                     	ds	2
  4604  0228                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  4605                           
  4606                           ; 1 bytes @ 0x8
  4607  0228                     	ds	1
  4608  0229                     _BVH2_Appl_Layer$1207:	
  4609                           
  4610                           ; 1 bytes @ 0x9
  4611  0229                     	ds	1
  4612  022A                     _BVH2_Appl_Layer$1208:	
  4613                           
  4614                           ; 1 bytes @ 0xA
  4615  022A                     	ds	1
  4616  022B                     _BVH2_Appl_Layer$1209:	
  4617                           
  4618                           ; 1 bytes @ 0xB
  4619  022B                     	ds	1
  4620  022C                     _BVH2_Appl_Layer$1210:	
  4621                           
  4622                           ; 1 bytes @ 0xC
  4623  022C                     	ds	1
  4624  022D                     _BVH2_Appl_Layer$1211:	
  4625                           
  4626                           ; 1 bytes @ 0xD
  4627  022D                     	ds	1
  4628  022E                     _BVH2_Appl_Layer$1212:	
  4629                           
  4630                           ; 1 bytes @ 0xE
  4631  022E                     	ds	1
  4632  022F                     BVH2_Appl_Layer@Sb3_Product1:	
  4633                           
  4634                           ; 2 bytes @ 0xF
  4635  022F                     	ds	2
  4636  0231                     BVH2_Appl_Layer@Sb2_Switch5:	
  4637                           
  4638                           ; 2 bytes @ 0x11
  4639  0231                     	ds	2
  4640  0233                     BVH2_Appl_Layer@Cb24_Reset:	
  4641                           
  4642                           ; 1 bytes @ 0x13
  4643  0233                     	ds	1
  4644  0234                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  4645                           
  4646                           ; 1 bytes @ 0x14
  4647  0234                     	ds	1
  4648  0235                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  4649                           
  4650                           ; 1 bytes @ 0x15
  4651  0235                     	ds	1
  4652  0236                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  4653                           
  4654                           ; 1 bytes @ 0x16
  4655  0236                     	ds	1
  4656  0237                     BVH2_Appl_Layer@Sb2_Error:	
  4657                           
  4658                           ; 2 bytes @ 0x17
  4659  0237                     	ds	2
  4660  0239                     BVH2_Appl_Layer@Sb2_Switch2:	
  4661                           
  4662                           ; 2 bytes @ 0x19
  4663  0239                     	ds	2
  4664  023B                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  4665                           
  4666                           ; 1 bytes @ 0x1B
  4667  023B                     	ds	1
  4668  023C                     BVH2_Appl_Layer@Sb3_Sum1:	
  4669                           
  4670                           ; 2 bytes @ 0x1C
  4671  023C                     	ds	2
  4672  023E                     BVH2_Appl_Layer@Sb4_PI_sum:	
  4673                           
  4674                           ; 2 bytes @ 0x1E
  4675  023E                     	ds	2
  4676                           
  4677                           	psect	cstackBANK3
  4678  01EA                     __pcstackBANK3:	
  4679  01EA                     ??_main:	
  4680                           
  4681                           ; 1 bytes @ 0x0
  4682  01EA                     	ds	4
  4683                           
  4684                           	psect	cstackCOMMON
  4685  0070                     __pcstackCOMMON:	
  4686  0070                     ?_InitMotorRun:	
  4687  0070                     ?_commutate:	
  4688                           ; 1 bytes @ 0x0
  4689                           
  4690  0070                     ?_PWM_Write_Out:	
  4691                           ; 1 bytes @ 0x0
  4692                           
  4693  0070                     ?_read_eeprom_data:	
  4694                           ; 1 bytes @ 0x0
  4695                           
  4696  0070                     ?_NegativeAnswer:	
  4697                           ; 1 bytes @ 0x0
  4698                           
  4699  0070                     ?_PWMReadDC:	
  4700                           ; 1 bytes @ 0x0
  4701                           
  4702  0070                     ?_PWM_CTRL:	
  4703                           ; 1 bytes @ 0x0
  4704                           
  4705  0070                     ??_PWM_CTRL:	
  4706                           ; 1 bytes @ 0x0
  4707                           
  4708  0070                     ?_ELINMIntHandler:	
  4709                           ; 1 bytes @ 0x0
  4710                           
  4711  0070                     ?_interrupt_PWMCapture:	
  4712                           ; 1 bytes @ 0x0
  4713                           
  4714  0070                     ??_interrupt_PWMCapture:	
  4715                           ; 1 bytes @ 0x0
  4716                           
  4717  0070                     ?_Oscill_Source_Block:	
  4718                           ; 1 bytes @ 0x0
  4719                           
  4720  0070                     ?_timer_init:	
  4721                           ; 1 bytes @ 0x0
  4722                           
  4723  0070                     ?_PWM_Capture_init:	
  4724                           ; 1 bytes @ 0x0
  4725                           
  4726  0070                     ?_clear_timer:	
  4727                           ; 1 bytes @ 0x0
  4728                           
  4729  0070                     ?_BVH2_Appl_Layer:	
  4730                           ; 1 bytes @ 0x0
  4731                           
  4732  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  4733                           ; 1 bytes @ 0x0
  4734                           
  4735  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  4736                           ; 1 bytes @ 0x0
  4737                           
  4738  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  4739                           ; 1 bytes @ 0x0
  4740                           
  4741  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  4742                           ; 1 bytes @ 0x0
  4743                           
  4744  0070                     ?_ADC_Init:	
  4745                           ; 1 bytes @ 0x0
  4746                           
  4747  0070                     ?_ADC_Wait:	
  4748                           ; 1 bytes @ 0x0
  4749                           
  4750  0070                     ?_FILTER_Init:	
  4751                           ; 1 bytes @ 0x0
  4752                           
  4753  0070                     ?_FILTER_Ubat:	
  4754                           ; 1 bytes @ 0x0
  4755                           
  4756  0070                     ?_FILTER_IPhase:	
  4757                           ; 1 bytes @ 0x0
  4758                           
  4759  0070                     ?_FILTER_Temp:	
  4760                           ; 1 bytes @ 0x0
  4761                           
  4762  0070                     ?_Get_Analog_Value:	
  4763                           ; 1 bytes @ 0x0
  4764                           
  4765  0070                     ?_BLDCWait:	
  4766                           ; 1 bytes @ 0x0
  4767                           
  4768  0070                     ??_BLDCWait:	
  4769                           ; 1 bytes @ 0x0
  4770                           
  4771  0070                     ?_init_bldc:	
  4772                           ; 1 bytes @ 0x0
  4773                           
  4774  0070                     ?_interrrupt_bldc:	
  4775                           ; 1 bytes @ 0x0
  4776                           
  4777  0070                     ?_InitMotorStop:	
  4778                           ; 1 bytes @ 0x0
  4779                           
  4780  0070                     ?_DiagInit:	
  4781                           ; 1 bytes @ 0x0
  4782                           
  4783  0070                     ?_SetDiagAlarm:	
  4784                           ; 1 bytes @ 0x0
  4785                           
  4786  0070                     ?_EOL:	
  4787                           ; 1 bytes @ 0x0
  4788                           
  4789  0070                     ?_Task1ms:	
  4790                           ; 1 bytes @ 0x0
  4791                           
  4792  0070                     ??_Task1ms:	
  4793                           ; 1 bytes @ 0x0
  4794                           
  4795  0070                     ?_interrupt_handler:	
  4796                           ; 1 bytes @ 0x0
  4797                           
  4798  0070                     ?_Receive_Diag:	
  4799                           ; 1 bytes @ 0x0
  4800                           
  4801  0070                     ?_EnableMCP201:	
  4802                           ; 1 bytes @ 0x0
  4803                           
  4804  0070                     ?__ELINMIntInitialize:	
  4805                           ; 1 bytes @ 0x0
  4806                           
  4807  0070                     ?__ELINMIntResetProtocol:	
  4808                           ; 1 bytes @ 0x0
  4809                           
  4810  0070                     ??__ELINMIntResetProtocol:	
  4811                           ; 1 bytes @ 0x0
  4812                           
  4813  0070                     ?__ELINMIntCalcIDParity:	
  4814                           ; 1 bytes @ 0x0
  4815                           
  4816  0070                     ?_I_calibrationInit:	
  4817                           ; 1 bytes @ 0x0
  4818                           
  4819  0070                     ?_init_ports:	
  4820                           ; 1 bytes @ 0x0
  4821                           
  4822  0070                     ?_system_init:	
  4823                           ; 1 bytes @ 0x0
  4824                           
  4825  0070                     ?_main:	
  4826                           ; 1 bytes @ 0x0
  4827                           
  4828  0070                     ?i1_ADC_Wait:	
  4829                           ; 1 bytes @ 0x0
  4830                           
  4831  0070                     ??i1_ADC_Wait:	
  4832                           ; 1 bytes @ 0x0
  4833                           
  4834  0070                     ?i1_commutate:	
  4835                           ; 1 bytes @ 0x0
  4836                           
  4837  0070                     ??i1_commutate:	
  4838                           ; 1 bytes @ 0x0
  4839                           
  4840  0070                     ?i1_ADC_Read:	
  4841                           ; 1 bytes @ 0x0
  4842                           
  4843  0070                     ?i1___wmul:	
  4844                           ; 2 bytes @ 0x0
  4845                           
  4846  0070                     ?i1___lwdiv:	
  4847                           ; 2 bytes @ 0x0
  4848                           
  4849  0070                     __ELINMIntResetProtocol@code:	
  4850                           ; 2 bytes @ 0x0
  4851                           
  4852  0070                     i1___wmul@multiplier:	
  4853                           ; 1 bytes @ 0x0
  4854                           
  4855  0070                     i1___lwdiv@divisor:	
  4856                           ; 2 bytes @ 0x0
  4857                           
  4858                           
  4859                           ; 2 bytes @ 0x0
  4860  0070                     	ds	1
  4861  0071                     ??_ELINMIntHandler:	
  4862                           
  4863                           ; 1 bytes @ 0x1
  4864  0071                     	ds	1
  4865  0072                     ??i1_ADC_Read:	
  4866  0072                     i1ADC_Read@i:	
  4867                           ; 1 bytes @ 0x2
  4868                           
  4869  0072                     i1___wmul@multiplicand:	
  4870                           ; 1 bytes @ 0x2
  4871                           
  4872  0072                     i1___lwdiv@dividend:	
  4873                           ; 2 bytes @ 0x2
  4874                           
  4875                           
  4876                           ; 2 bytes @ 0x2
  4877  0072                     	ds	2
  4878  0074                     ??i1___wmul:	
  4879  0074                     ??i1___lwdiv:	
  4880                           ; 1 bytes @ 0x4
  4881                           
  4882  0074                     i1___lwdiv@counter:	
  4883                           ; 1 bytes @ 0x4
  4884                           
  4885  0074                     i1___wmul@product:	
  4886                           ; 1 bytes @ 0x4
  4887                           
  4888                           
  4889                           ; 2 bytes @ 0x4
  4890  0074                     	ds	1
  4891  0075                     i1___lwdiv@quotient:	
  4892                           
  4893                           ; 2 bytes @ 0x5
  4894  0075                     	ds	7
  4895  007C                     ??_interrrupt_bldc:	
  4896                           
  4897                           ; 1 bytes @ 0xC
  4898  007C                     	ds	2
  4899  007E                     ??_interrupt_handler:	
  4900                           
  4901                           	psect	cstackBANK0
  4902  0020                     __pcstackBANK0:	
  4903                           ; 1 bytes @ 0xE
  4904                           
  4905  0020                     interrrupt_bldc@ui32_tmp:	
  4906                           
  4907                           ; 4 bytes @ 0x0
  4908  0020                     	ds	4
  4909  0024                     ??_commutate:	
  4910  0024                     ??_PWM_Write_Out:	
  4911                           ; 1 bytes @ 0x4
  4912                           
  4913  0024                     ??_read_eeprom_data:	
  4914                           ; 1 bytes @ 0x4
  4915                           
  4916  0024                     ?__ELINMIntGetPointer:	
  4917                           ; 1 bytes @ 0x4
  4918                           
  4919  0024                     ??_Oscill_Source_Block:	
  4920                           ; 1 bytes @ 0x4
  4921                           
  4922  0024                     ??_PWM_Capture_init:	
  4923                           ; 1 bytes @ 0x4
  4924                           
  4925  0024                     ??_clear_timer:	
  4926                           ; 1 bytes @ 0x4
  4927                           
  4928  0024                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  4929                           ; 1 bytes @ 0x4
  4930                           
  4931  0024                     ??_Cb34_PWM_Detection_node_fcn1:	
  4932                           ; 1 bytes @ 0x4
  4933                           
  4934  0024                     ??_Cb56_UbatHandling_node_fcn2:	
  4935                           ; 1 bytes @ 0x4
  4936                           
  4937  0024                     ??_Cb1_Current_An___High_node_fcn1:	
  4938                           ; 1 bytes @ 0x4
  4939                           
  4940  0024                     ??_ADC_Init:	
  4941                           ; 1 bytes @ 0x4
  4942                           
  4943  0024                     ??_ADC_Wait:	
  4944                           ; 1 bytes @ 0x4
  4945                           
  4946  0024                     ??_FILTER_Ubat:	
  4947                           ; 1 bytes @ 0x4
  4948                           
  4949  0024                     ??_FILTER_IPhase:	
  4950                           ; 1 bytes @ 0x4
  4951                           
  4952  0024                     ??_FILTER_Temp:	
  4953                           ; 1 bytes @ 0x4
  4954                           
  4955  0024                     ??_InitMotorStop:	
  4956                           ; 1 bytes @ 0x4
  4957                           
  4958  0024                     ??_EnableMCP201:	
  4959                           ; 1 bytes @ 0x4
  4960                           
  4961  0024                     ??__ELINMIntInitialize:	
  4962                           ; 1 bytes @ 0x4
  4963                           
  4964  0024                     ??__ELINMIntCalcIDParity:	
  4965                           ; 1 bytes @ 0x4
  4966                           
  4967  0024                     ?_cksum:	
  4968                           ; 1 bytes @ 0x4
  4969                           
  4970  0024                     ?_ADC_Read:	
  4971                           ; 2 bytes @ 0x4
  4972                           
  4973  0024                     ?___wmul:	
  4974                           ; 2 bytes @ 0x4
  4975                           
  4976  0024                     ?___awdiv:	
  4977                           ; 2 bytes @ 0x4
  4978                           
  4979  0024                     ?___lwdiv:	
  4980                           ; 2 bytes @ 0x4
  4981                           
  4982  0024                     ?___tmul:	
  4983                           ; 2 bytes @ 0x4
  4984                           
  4985  0024                     ?___lmul:	
  4986                           ; 3 bytes @ 0x4
  4987                           
  4988  0024                     ?___aldiv:	
  4989                           ; 4 bytes @ 0x4
  4990                           
  4991  0024                     read_eeprom_data@ui8_adress:	
  4992                           ; 4 bytes @ 0x4
  4993                           
  4994  0024                     EnableMCP201@_dcnt:	
  4995                           ; 1 bytes @ 0x4
  4996                           
  4997  0024                     __ELINMIntCalcIDParity@ELINM_idtr:	
  4998                           ; 1 bytes @ 0x4
  4999                           
  5000  0024                     __ELINMIntGetPointer@_ELINMInt_position:	
  5001                           ; 1 bytes @ 0x4
  5002                           
  5003  0024                     PWM_Capture_init@ui8_CCP_Nb:	
  5004                           ; 1 bytes @ 0x4
  5005                           
  5006  0024                     PWM_Write_Out@ui8_DutyCycle_Out:	
  5007                           ; 1 bytes @ 0x4
  5008                           
  5009  0024                     clear_timer@ui8_TmrNb:	
  5010                           ; 1 bytes @ 0x4
  5011                           
  5012  0024                     ___wmul@multiplier:	
  5013                           ; 1 bytes @ 0x4
  5014                           
  5015  0024                     ___awdiv@divisor:	
  5016                           ; 2 bytes @ 0x4
  5017                           
  5018  0024                     ___lwdiv@divisor:	
  5019                           ; 2 bytes @ 0x4
  5020                           
  5021  0024                     ___tmul@multiplier:	
  5022                           ; 2 bytes @ 0x4
  5023                           
  5024  0024                     ___lmul@multiplier:	
  5025                           ; 3 bytes @ 0x4
  5026                           
  5027  0024                     ___aldiv@divisor:	
  5028                           ; 4 bytes @ 0x4
  5029                           
  5030                           
  5031                           ; 4 bytes @ 0x4
  5032  0024                     	ds	1
  5033  0025                     ??__ELINMIntGetPointer:	
  5034  0025                     ?__ELINMIntSendMessage:	
  5035                           ; 1 bytes @ 0x5
  5036                           
  5037  0025                     ??_timer_init:	
  5038                           ; 1 bytes @ 0x5
  5039                           
  5040  0025                     ??_DiagInit:	
  5041                           ; 1 bytes @ 0x5
  5042                           
  5043  0025                     ??_SetDiagAlarm:	
  5044                           ; 1 bytes @ 0x5
  5045                           
  5046  0025                     read_eeprom_data@ui8_adress_data:	
  5047                           ; 1 bytes @ 0x5
  5048                           
  5049  0025                     EnableMCP201@_dcnt_712:	
  5050                           ; 1 bytes @ 0x5
  5051                           
  5052  0025                     __ELINMIntSendMessage@_ELINM_size:	
  5053                           ; 1 bytes @ 0x5
  5054                           
  5055  0025                     __ELINMIntGetPointer@_ELINMInt_tag:	
  5056                           ; 1 bytes @ 0x5
  5057                           
  5058  0025                     timer_init@ui8_TmrNb:	
  5059                           ; 1 bytes @ 0x5
  5060                           
  5061                           
  5062                           ; 1 bytes @ 0x5
  5063  0025                     	ds	1
  5064  0026                     ??_cksum:	
  5065  0026                     ??_ADC_Read:	
  5066                           ; 1 bytes @ 0x6
  5067                           
  5068  0026                     ??_init_ports:	
  5069                           ; 1 bytes @ 0x6
  5070                           
  5071  0026                     ADC_Read@i:	
  5072                           ; 1 bytes @ 0x6
  5073                           
  5074  0026                     EnableMCP201@_dcnt_713:	
  5075                           ; 1 bytes @ 0x6
  5076                           
  5077  0026                     __ELINMIntSendMessage@_ELINM_fmin:	
  5078                           ; 1 bytes @ 0x6
  5079                           
  5080  0026                     cksum@counter:	
  5081                           ; 2 bytes @ 0x6
  5082                           
  5083  0026                     ___wmul@multiplicand:	
  5084                           ; 2 bytes @ 0x6
  5085                           
  5086  0026                     ___awdiv@dividend:	
  5087                           ; 2 bytes @ 0x6
  5088                           
  5089  0026                     ___lwdiv@dividend:	
  5090                           ; 2 bytes @ 0x6
  5091                           
  5092                           
  5093                           ; 2 bytes @ 0x6
  5094  0026                     	ds	1
  5095  0027                     ??_FILTER_Init:	
  5096  0027                     ??_I_calibrationInit:	
  5097                           ; 1 bytes @ 0x7
  5098                           
  5099  0027                     ___tmul@multiplicand:	
  5100                           ; 1 bytes @ 0x7
  5101                           
  5102                           
  5103                           ; 3 bytes @ 0x7
  5104  0027                     	ds	1
  5105  0028                     ??___wmul:	
  5106  0028                     ??___awdiv:	
  5107                           ; 1 bytes @ 0x8
  5108                           
  5109  0028                     ??___lwdiv:	
  5110                           ; 1 bytes @ 0x8
  5111                           
  5112  0028                     ___awdiv@counter:	
  5113                           ; 1 bytes @ 0x8
  5114                           
  5115  0028                     ___lwdiv@counter:	
  5116                           ; 1 bytes @ 0x8
  5117                           
  5118  0028                     __ELINMIntSendMessage@_ELINM_fmax:	
  5119                           ; 1 bytes @ 0x8
  5120                           
  5121  0028                     cksum@sum:	
  5122                           ; 2 bytes @ 0x8
  5123                           
  5124  0028                     ___wmul@product:	
  5125                           ; 2 bytes @ 0x8
  5126                           
  5127  0028                     ___lmul@multiplicand:	
  5128                           ; 2 bytes @ 0x8
  5129                           
  5130  0028                     ___aldiv@dividend:	
  5131                           ; 4 bytes @ 0x8
  5132                           
  5133                           
  5134                           ; 4 bytes @ 0x8
  5135  0028                     	ds	1
  5136  0029                     ___awdiv@sign:	
  5137  0029                     ___lwdiv@quotient:	
  5138                           ; 1 bytes @ 0x9
  5139                           
  5140                           
  5141                           ; 2 bytes @ 0x9
  5142  0029                     	ds	1
  5143  002A                     ??__ELINMIntSendMessage:	
  5144  002A                     ??___tmul:	
  5145                           ; 1 bytes @ 0xA
  5146                           
  5147  002A                     __ELINMIntSendMessage@_ELINM_idr:	
  5148                           ; 1 bytes @ 0xA
  5149                           
  5150  002A                     cksum@addr:	
  5151                           ; 1 bytes @ 0xA
  5152                           
  5153  002A                     ___awdiv@quotient:	
  5154                           ; 2 bytes @ 0xA
  5155                           
  5156  002A                     ___tmul@product:	
  5157                           ; 2 bytes @ 0xA
  5158                           
  5159                           
  5160                           ; 3 bytes @ 0xA
  5161  002A                     	ds	1
  5162  002B                     ?_write_eeprom_data:	
  5163  002B                     write_eeprom_data@ui8_adress_data:	
  5164                           ; 1 bytes @ 0xB
  5165                           
  5166  002B                     __ELINMIntSendMessage@_ELINM_tid:	
  5167                           ; 1 bytes @ 0xB
  5168                           
  5169                           
  5170                           ; 1 bytes @ 0xB
  5171  002B                     	ds	1
  5172  002C                     ??_write_eeprom_data:	
  5173  002C                     ??___lmul:	
  5174                           ; 1 bytes @ 0xC
  5175                           
  5176  002C                     ??___aldiv:	
  5177                           ; 1 bytes @ 0xC
  5178                           
  5179  002C                     write_eeprom_data@ui8_adress:	
  5180                           ; 1 bytes @ 0xC
  5181                           
  5182  002C                     __ELINMIntSendMessage@_ELINM_i:	
  5183                           ; 1 bytes @ 0xC
  5184                           
  5185  002C                     ___aldiv@counter:	
  5186                           ; 1 bytes @ 0xC
  5187                           
  5188  002C                     ___lmul@product:	
  5189                           ; 1 bytes @ 0xC
  5190                           
  5191                           
  5192                           ; 4 bytes @ 0xC
  5193  002C                     	ds	1
  5194  002D                     ?___ltdiv:	
  5195  002D                     ___aldiv@sign:	
  5196                           ; 3 bytes @ 0xD
  5197                           
  5198  002D                     __ELINMIntSendMessage@_ELINM_chk:	
  5199                           ; 1 bytes @ 0xD
  5200                           
  5201  002D                     ___ltdiv@divisor:	
  5202                           ; 2 bytes @ 0xD
  5203                           
  5204                           
  5205                           ; 3 bytes @ 0xD
  5206  002D                     	ds	1
  5207  002E                     ___aldiv@quotient:	
  5208                           
  5209                           ; 4 bytes @ 0xE
  5210  002E                     	ds	1
  5211  002F                     ?_Transmit_LIN_8Bytes:	
  5212  002F                     ?__ELINMIntReceiveMessage:	
  5213                           ; 1 bytes @ 0xF
  5214                           
  5215  002F                     Transmit_LIN_8Bytes@B0:	
  5216                           ; 1 bytes @ 0xF
  5217                           
  5218  002F                     __ELINMIntReceiveMessage@_ELINM_id:	
  5219                           ; 1 bytes @ 0xF
  5220                           
  5221                           
  5222                           ; 1 bytes @ 0xF
  5223  002F                     	ds	1
  5224  0030                     ??_InitMotorRun:	
  5225  0030                     ??_Get_Analog_Value:	
  5226                           ; 1 bytes @ 0x10
  5227                           
  5228  0030                     ??_init_bldc:	
  5229                           ; 1 bytes @ 0x10
  5230                           
  5231  0030                     ??_system_init:	
  5232                           ; 1 bytes @ 0x10
  5233                           
  5234  0030                     Transmit_LIN_8Bytes@B1:	
  5235                           ; 1 bytes @ 0x10
  5236                           
  5237  0030                     __ELINMIntReceiveMessage@_ELINM_size:	
  5238                           ; 1 bytes @ 0x10
  5239                           
  5240  0030                     ___ltdiv@dividend:	
  5241                           ; 1 bytes @ 0x10
  5242                           
  5243                           
  5244                           ; 3 bytes @ 0x10
  5245  0030                     	ds	1
  5246  0031                     ??__ELINMIntReceiveMessage:	
  5247  0031                     Transmit_LIN_8Bytes@B2:	
  5248                           ; 1 bytes @ 0x11
  5249                           
  5250  0031                     __ELINMIntReceiveMessage@_ELINM_tag:	
  5251                           ; 1 bytes @ 0x11
  5252                           
  5253                           
  5254                           ; 1 bytes @ 0x11
  5255  0031                     	ds	1
  5256  0032                     ??_BVH2_Appl_Layer:	
  5257  0032                     ??_Receive_Diag:	
  5258                           ; 1 bytes @ 0x12
  5259                           
  5260  0032                     Transmit_LIN_8Bytes@B3:	
  5261                           ; 1 bytes @ 0x12
  5262                           
  5263                           
  5264                           ; 1 bytes @ 0x12
  5265  0032                     	ds	1
  5266  0033                     ??___ltdiv:	
  5267  0033                     Transmit_LIN_8Bytes@B4:	
  5268                           ; 1 bytes @ 0x13
  5269                           
  5270  0033                     Receive_Diag@id:	
  5271                           ; 1 bytes @ 0x13
  5272                           
  5273  0033                     ___ltdiv@quotient:	
  5274                           ; 1 bytes @ 0x13
  5275                           
  5276                           
  5277                           ; 3 bytes @ 0x13
  5278  0033                     	ds	1
  5279  0034                     Transmit_LIN_8Bytes@B5:	
  5280                           
  5281                           ; 1 bytes @ 0x14
  5282  0034                     	ds	1
  5283  0035                     Transmit_LIN_8Bytes@B6:	
  5284                           
  5285                           ; 1 bytes @ 0x15
  5286  0035                     	ds	1
  5287  0036                     Transmit_LIN_8Bytes@B7:	
  5288  0036                     ___ltdiv@counter:	
  5289                           ; 1 bytes @ 0x16
  5290                           
  5291                           
  5292                           ; 1 bytes @ 0x16
  5293  0036                     	ds	1
  5294  0037                     ??_Transmit_LIN_8Bytes:	
  5295  0037                     ??_PWMReadDC:	
  5296                           ; 1 bytes @ 0x17
  5297                           
  5298  0037                     Transmit_LIN_8Bytes@ID:	
  5299                           ; 1 bytes @ 0x17
  5300                           
  5301                           
  5302                           ; 1 bytes @ 0x17
  5303  0037                     	ds	1
  5304  0038                     ??_NegativeAnswer:	
  5305  0038                     NegativeAnswer@LID:	
  5306                           ; 1 bytes @ 0x18
  5307                           
  5308                           
  5309                           ; 1 bytes @ 0x18
  5310  0038                     	ds	1
  5311  0039                     ??_EOL:	
  5312                           
  5313                           ; 1 bytes @ 0x19
  5314  0039                     	ds	3
  5315  003C                     EOL@_dcnt:	
  5316                           
  5317                           ; 1 bytes @ 0x1C
  5318  003C                     	ds	1
  5319  003D                     EOL@_dcnt_413:	
  5320                           
  5321                           ; 1 bytes @ 0x1D
  5322  003D                     	ds	1
  5323  003E                     EOL@_dcnt_414:	
  5324                           
  5325                           ; 1 bytes @ 0x1E
  5326  003E                     	ds	1
  5327  003F                     EOL@_dcnt_415:	
  5328                           
  5329                           ; 1 bytes @ 0x1F
  5330  003F                     	ds	1
  5331  0040                     EOL@_dcnt_416:	
  5332                           
  5333                           ; 1 bytes @ 0x20
  5334  0040                     	ds	1
  5335  0041                     EOL@_dcnt_417:	
  5336                           
  5337                           ; 1 bytes @ 0x21
  5338  0041                     	ds	1
  5339  0042                     EOL@_dcnt_418:	
  5340                           
  5341                           ; 1 bytes @ 0x22
  5342  0042                     	ds	1
  5343  0043                     EOL@_dcnt_419:	
  5344                           
  5345                           ; 1 bytes @ 0x23
  5346  0043                     	ds	1
  5347  0044                     EOL@_dcnt_420:	
  5348                           
  5349                           ; 1 bytes @ 0x24
  5350  0044                     	ds	1
  5351  0045                     EOL@_dcnt_421:	
  5352                           
  5353                           ; 1 bytes @ 0x25
  5354  0045                     	ds	1
  5355  0046                     EOL@_dcnt_422:	
  5356                           
  5357                           ; 1 bytes @ 0x26
  5358  0046                     	ds	1
  5359  0047                     EOL@_dcnt_423:	
  5360                           
  5361                           ; 1 bytes @ 0x27
  5362  0047                     	ds	1
  5363  0048                     EOL@_dcnt_424:	
  5364                           
  5365                           ; 1 bytes @ 0x28
  5366  0048                     	ds	1
  5367  0049                     EOL@_dcnt_425:	
  5368                           
  5369                           ; 1 bytes @ 0x29
  5370  0049                     	ds	1
  5371  004A                     EOL@_dcnt_426:	
  5372                           
  5373                           ; 1 bytes @ 0x2A
  5374  004A                     	ds	1
  5375  004B                     EOL@_dcnt_427:	
  5376                           
  5377                           ; 1 bytes @ 0x2B
  5378  004B                     	ds	1
  5379  004C                     EOL@_dcnt_428:	
  5380                           
  5381                           ; 1 bytes @ 0x2C
  5382  004C                     	ds	1
  5383  004D                     EOL@_dcnt_429:	
  5384                           
  5385                           ; 1 bytes @ 0x2D
  5386  004D                     	ds	1
  5387  004E                     EOL@ui8_b_DResB5_RD:	
  5388                           
  5389                           ; 1 bytes @ 0x2E
  5390  004E                     	ds	1
  5391  004F                     EOL@ui8_b_DResB4_RD:	
  5392                           
  5393                           ; 1 bytes @ 0x2F
  5394  004F                     	ds	1
  5395  0050                     EOL@ui8_b_DResB0_RD:	
  5396                           
  5397                           ; 1 bytes @ 0x30
  5398  0050                     	ds	1
  5399  0051                     EOL@ui8_b_DResB1_RD:	
  5400                           
  5401                           ; 1 bytes @ 0x31
  5402  0051                     	ds	1
  5403  0052                     EOL@ui8_b_DResB2_RD:	
  5404                           
  5405                           ; 1 bytes @ 0x32
  5406  0052                     	ds	1
  5407  0053                     EOL@ui8_b_DResB3_RD:	
  5408                           
  5409                           ; 1 bytes @ 0x33
  5410  0053                     	ds	1
  5411                           
  5412                           	psect	text4
  5413  0854                     __ptext4:	
  5414 ;; *************** function _init_ports *****************
  5415 ;; Defined at:
  5416 ;;		line 404 in file "../main.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;		None
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;		None
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  1    wreg      void 
  5423 ;; Registers used:
  5424 ;;		wreg, status,2, pclath, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : B1F/3
  5427 ;;		On exit  : 1F/1
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5430 ;;      Params:         0       0       0       0       0       0       0       0
  5431 ;;      Locals:         0       0       0       0       0       0       0       0
  5432 ;;      Temps:          0       0       0       0       0       0       0       0
  5433 ;;      Totals:         0       0       0       0       0       0       0       0
  5434 ;;Total ram usage:        0 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    4
  5437 ;; This function calls:
  5438 ;;		_read_eeprom_data
  5439 ;; This function is called by:
  5440 ;;		_system_init
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           
  5445                           ;psect for function _init_ports
  5446  0854                     _init_ports:	
  5447                           
  5448                           ;main.c: 411: ANSELA = 0b00100111;
  5449                           
  5450                           ;incstack = 0
  5451                           ; Regs used in _init_ports: [wreg+status,2+pclath+cstack]
  5452  0854  3027               	movlw	39
  5453  0855  008C               	movwf	12	;volatile
  5454                           
  5455                           ;main.c: 412: ANSELB = 0b00101001;
  5456  0856  3029               	movlw	41
  5457  0857  008D               	movwf	13	;volatile
  5458                           
  5459                           ;main.c: 415: LATA = 0;
  5460  0858  0022               	movlb	2	; select bank2
  5461  0859  018C               	clrf	12	;volatile
  5462                           
  5463                           ;main.c: 416: LATB = 0;
  5464  085A  018D               	clrf	13	;volatile
  5465                           
  5466                           ;main.c: 417: LATC = 0;
  5467  085B  018E               	clrf	14	;volatile
  5468                           
  5469                           ;main.c: 422: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  5470  085C  3055               	movlw	85
  5471  085D  258D  3188         	fcall	_read_eeprom_data
  5472  085F  3A55               	xorlw	85
  5473  0860  1903               	skipnz
  5474  0861  2864               	goto	l12430
  5475  0862  1A8E               	btfsc	14,5	;volatile
  5476  0863  2867               	goto	l12434
  5477  0864                     l12430:	
  5478                           
  5479                           ;main.c: 424: {
  5480                           ;main.c: 426: TRISA = 0b01111111;
  5481                           
  5482                           ;main.c: 435: TRISB = 0b00111001;
  5483  0864  206B               	fcall	PL104	;call to abstracted procedure
  5484                           
  5485                           ;main.c: 444: TRISC = 0b00000000;
  5486  0865  018E               	clrf	14	;volatile
  5487                           
  5488                           ;main.c: 455: }
  5489  0866  0008               	return
  5490  0867                     l12434:	
  5491                           
  5492                           ;main.c: 458: else
  5493                           ;main.c: 459: {
  5494                           ;main.c: 461: TRISA = 0b01111111;
  5495                           
  5496                           ;main.c: 470: TRISB = 0b00111001;
  5497  0867  206B               	fcall	PL104	;call to abstracted procedure
  5498                           
  5499                           ;main.c: 479: TRISC = 0b10000000;
  5500  0868  3080               	movlw	128
  5501  0869  008E               	movwf	14	;volatile
  5502  086A  0008               	return
  5503  086B                     __end_of_init_ports:	
  5504  086B                     PL104:	
  5505  086B  307F               	movlw	127
  5506  086C  0021               	movlb	1	; select bank1
  5507  086D  008C               	movwf	12	;volatile
  5508  086E  3039               	movlw	57
  5509  086F  008D               	movwf	13	;volatile
  5510  0870  0008               	return
  5511  0871                     __end_ofPL104:	
  5512  0871                     __ptext11:	
  5513 ;; *************** function _I_calibrationInit *****************
  5514 ;; Defined at:
  5515 ;;		line 174 in file "../main.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;		None
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0, pclath, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 1F/3
  5526 ;;		On exit  : 1F/2
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5529 ;;      Params:         0       0       0       0       0       0       0       0
  5530 ;;      Locals:         0       0       0       0       0       0       0       0
  5531 ;;      Temps:          0       1       0       0       0       0       0       0
  5532 ;;      Totals:         0       1       0       0       0       0       0       0
  5533 ;;Total ram usage:        1 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    4
  5536 ;; This function calls:
  5537 ;;		_ADC_Read
  5538 ;;		_ADC_Wait
  5539 ;;		_read_eeprom_data
  5540 ;; This function is called by:
  5541 ;;		_system_init
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           
  5546                           ;psect for function _I_calibrationInit
  5547  0871                     _I_calibrationInit:	
  5548                           
  5549                           ;main.c: 178: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  5550                           
  5551                           ;incstack = 0
  5552                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  5553  0871  3003               	movlw	3
  5554  0872  258D  3188         	fcall	_read_eeprom_data
  5555  0874  3A00               	xorlw	0
  5556  0875  1903               	skipnz
  5557  0876  288B               	goto	l12364
  5558  0877  3003               	movlw	3
  5559  0878  258D  3188         	fcall	_read_eeprom_data
  5560  087A  3AFF               	xorlw	255
  5561  087B  1903               	skipnz
  5562  087C  288B               	goto	l12364
  5563                           
  5564                           ;main.c: 180: {
  5565                           ;main.c: 182: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03 
      +                          );
  5566  087D  3003               	movlw	3
  5567  087E  258D  3188         	fcall	_read_eeprom_data
  5568  0880  00A7               	movwf	??_I_calibrationInit
  5569  0881  3002               	movlw	2
  5570  0882  258D  3188         	fcall	_read_eeprom_data
  5571  0884  0021               	movlb	1	; select bank1
  5572  0885  00EC               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  5573  0886  0020               	movlb	0	; select bank0
  5574  0887  0827               	movf	??_I_calibrationInit,w
  5575  0888  0021               	movlb	1	; select bank1
  5576  0889  00EB               	movwf	_ui16_I_cal_Ph1^(0+128)
  5577                           
  5578                           ;main.c: 185: }
  5579  088A  288F               	goto	l12366
  5580  088B                     l12364:	
  5581                           
  5582                           ;main.c: 188: else
  5583                           ;main.c: 189: {
  5584                           ;main.c: 191: ui16_I_cal_Ph1 = 0x0100;
  5585  088B  0021               	movlb	1	; select bank1
  5586  088C  3001               	movlw	1
  5587  088D  01EB               	clrf	_ui16_I_cal_Ph1^(0+128)
  5588  088E  00EC               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
  5589  088F                     l12366:	
  5590                           
  5591                           ;main.c: 194: }
  5592                           ;main.c: 197: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 0x05 ) != 0xFF)
  5593  088F  3005               	movlw	5
  5594  0890  258D  3188         	fcall	_read_eeprom_data
  5595  0892  3A00               	xorlw	0
  5596  0893  1903               	skipnz
  5597  0894  28A9               	goto	l12372
  5598  0895  3005               	movlw	5
  5599  0896  258D  3188         	fcall	_read_eeprom_data
  5600  0898  3AFF               	xorlw	255
  5601  0899  1903               	skipnz
  5602  089A  28A9               	goto	l12372
  5603                           
  5604                           ;main.c: 199: {
  5605                           ;main.c: 201: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05 
      +                          );
  5606  089B  3005               	movlw	5
  5607  089C  258D  3188         	fcall	_read_eeprom_data
  5608  089E  00A7               	movwf	??_I_calibrationInit
  5609  089F  3004               	movlw	4
  5610  08A0  258D  3188         	fcall	_read_eeprom_data
  5611  08A2  0021               	movlb	1	; select bank1
  5612  08A3  00EA               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  5613  08A4  0020               	movlb	0	; select bank0
  5614  08A5  0827               	movf	??_I_calibrationInit,w
  5615  08A6  0021               	movlb	1	; select bank1
  5616  08A7  00E9               	movwf	_ui16_I_cal_Ph2^(0+128)
  5617                           
  5618                           ;main.c: 204: }
  5619  08A8  28AD               	goto	l12374
  5620  08A9                     l12372:	
  5621                           
  5622                           ;main.c: 207: else
  5623                           ;main.c: 208: {
  5624                           ;main.c: 210: ui16_I_cal_Ph2 = 0x0100;
  5625  08A9  0021               	movlb	1	; select bank1
  5626  08AA  3001               	movlw	1
  5627  08AB  01E9               	clrf	_ui16_I_cal_Ph2^(0+128)
  5628  08AC  00EA               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
  5629  08AD                     l12374:	
  5630                           
  5631                           ;main.c: 213: }
  5632                           ;main.c: 216: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 0x07 ) != 0xFF)
  5633  08AD  3007               	movlw	7
  5634  08AE  258D  3188         	fcall	_read_eeprom_data
  5635  08B0  3A00               	xorlw	0
  5636  08B1  1903               	skipnz
  5637  08B2  28C7               	goto	l12380
  5638  08B3  3007               	movlw	7
  5639  08B4  258D  3188         	fcall	_read_eeprom_data
  5640  08B6  3AFF               	xorlw	255
  5641  08B7  1903               	skipnz
  5642  08B8  28C7               	goto	l12380
  5643                           
  5644                           ;main.c: 218: {
  5645                           ;main.c: 220: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07 
      +                          );
  5646  08B9  3007               	movlw	7
  5647  08BA  258D  3188         	fcall	_read_eeprom_data
  5648  08BC  00A7               	movwf	??_I_calibrationInit
  5649  08BD  3006               	movlw	6
  5650  08BE  258D  3188         	fcall	_read_eeprom_data
  5651  08C0  0021               	movlb	1	; select bank1
  5652  08C1  00E8               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  5653  08C2  0020               	movlb	0	; select bank0
  5654  08C3  0827               	movf	??_I_calibrationInit,w
  5655  08C4  0021               	movlb	1	; select bank1
  5656  08C5  00E7               	movwf	_ui16_I_cal_Ph3^(0+128)
  5657                           
  5658                           ;main.c: 222: }
  5659  08C6  28CB               	goto	l12382
  5660  08C7                     l12380:	
  5661                           
  5662                           ;main.c: 225: else
  5663                           ;main.c: 226: {
  5664                           ;main.c: 228: ui16_I_cal_Ph3 = 0x0100;
  5665  08C7  0021               	movlb	1	; select bank1
  5666  08C8  3001               	movlw	1
  5667  08C9  01E7               	clrf	_ui16_I_cal_Ph3^(0+128)
  5668  08CA  00E8               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
  5669  08CB                     l12382:	
  5670                           
  5671                           ;main.c: 231: }
  5672                           ;main.c: 324: LATC2 = 0;
  5673  08CB  0022               	movlb	2	; select bank2
  5674  08CC  110E               	bcf	14,2	;volatile
  5675                           
  5676                           ;main.c: 325: LATB2 = 0;
  5677  08CD  110D               	bcf	13,2	;volatile
  5678                           
  5679                           ;main.c: 326: LATB1 = 0;
  5680  08CE  108D               	bcf	13,1	;volatile
  5681                           
  5682                           ;main.c: 327: LATC = LATC | 0b00011010;
  5683  08CF  080E               	movf	14,w	;volatile
  5684  08D0  381A               	iorlw	26
  5685  08D1  008E               	movwf	14	;volatile
  5686                           
  5687                           ;main.c: 329: ADC_Wait();
  5688  08D2  25F4  3188         	fcall	_ADC_Wait
  5689                           
  5690                           ;main.c: 330: ADC_Wait();
  5691  08D4  25F4  3188         	fcall	_ADC_Wait
  5692                           
  5693                           ;main.c: 332: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  5694  08D6  3011               	movlw	17
  5695  08D7  0021               	movlb	1	; select bank1
  5696  08D8  009D               	movwf	29	;volatile
  5697                           
  5698                           ;main.c: 333: ADC_Wait();
  5699  08D9  25F4  3188         	fcall	_ADC_Wait
  5700                           
  5701                           ;main.c: 334: ( GO_nDONE = 1 );
  5702  08DB  0021               	movlb	1	; select bank1
  5703  08DC  149D               	bsf	29,1	;volatile
  5704                           
  5705                           ;main.c: 337: ui8_current_cal[2] = ADC_Read();
  5706  08DD  2719  3188         	fcall	_ADC_Read
  5707  08DF  0824               	movf	?_ADC_Read,w
  5708  08E0  0022               	movlb	2	; select bank2
  5709  08E1  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  5710                           
  5711                           ;main.c: 339: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  5712  08E2  3035               	movlw	53
  5713  08E3  0021               	movlb	1	; select bank1
  5714  08E4  009D               	movwf	29	;volatile
  5715                           
  5716                           ;main.c: 340: ADC_Wait();
  5717  08E5  25F4  3188         	fcall	_ADC_Wait
  5718                           
  5719                           ;main.c: 341: ( GO_nDONE = 1 );
  5720  08E7  0021               	movlb	1	; select bank1
  5721  08E8  149D               	bsf	29,1	;volatile
  5722                           
  5723                           ;main.c: 344: ui8_current_cal[1] = ADC_Read();
  5724  08E9  2719  3188         	fcall	_ADC_Read
  5725  08EB  0824               	movf	?_ADC_Read,w
  5726  08EC  0022               	movlb	2	; select bank2
  5727  08ED  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  5728                           
  5729                           ;main.c: 346: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  5730  08EE  3009               	movlw	9
  5731  08EF  0021               	movlb	1	; select bank1
  5732  08F0  009D               	movwf	29	;volatile
  5733                           
  5734                           ;main.c: 347: ADC_Wait();
  5735  08F1  25F4  3188         	fcall	_ADC_Wait
  5736                           
  5737                           ;main.c: 348: ( GO_nDONE = 1 );
  5738  08F3  0021               	movlb	1	; select bank1
  5739  08F4  149D               	bsf	29,1	;volatile
  5740                           
  5741                           ;main.c: 351: ui8_current_cal[0] = ADC_Read();
  5742  08F5  2719               	fcall	_ADC_Read
  5743  08F6  0824               	movf	?_ADC_Read,w
  5744  08F7  0022               	movlb	2	; select bank2
  5745  08F8  00A0               	movwf	_ui8_current_cal^(0+256)
  5746  08F9  0008               	return
  5747  08FA                     __end_of_I_calibrationInit:	
  5748  08FA                     __ptext24:	
  5749 ;; *************** function _EOL *****************
  5750 ;; Defined at:
  5751 ;;		line 456 in file "../diag.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  _dcnt           1   45[BANK0 ] unsigned char 
  5756 ;;  _dcnt           1   44[BANK0 ] unsigned char 
  5757 ;;  _dcnt           1   43[BANK0 ] unsigned char 
  5758 ;;  _dcnt           1   42[BANK0 ] unsigned char 
  5759 ;;  _dcnt           1   41[BANK0 ] unsigned char 
  5760 ;;  _dcnt           1   40[BANK0 ] unsigned char 
  5761 ;;  _dcnt           1   39[BANK0 ] unsigned char 
  5762 ;;  _dcnt           1   38[BANK0 ] unsigned char 
  5763 ;;  _dcnt           1   37[BANK0 ] unsigned char 
  5764 ;;  _dcnt           1   36[BANK0 ] unsigned char 
  5765 ;;  _dcnt           1   35[BANK0 ] unsigned char 
  5766 ;;  _dcnt           1   34[BANK0 ] unsigned char 
  5767 ;;  _dcnt           1   33[BANK0 ] unsigned char 
  5768 ;;  _dcnt           1   32[BANK0 ] unsigned char 
  5769 ;;  _dcnt           1   31[BANK0 ] unsigned char 
  5770 ;;  _dcnt           1   30[BANK0 ] unsigned char 
  5771 ;;  _dcnt           1   29[BANK0 ] unsigned char 
  5772 ;;  _dcnt           1   28[BANK0 ] unsigned char 
  5773 ;;  ui8_b_DResB3    1   51[BANK0 ] unsigned char 
  5774 ;;  ui8_b_DResB2    1   50[BANK0 ] unsigned char 
  5775 ;;  ui8_b_DResB1    1   49[BANK0 ] unsigned char 
  5776 ;;  ui8_b_DResB0    1   48[BANK0 ] unsigned char 
  5777 ;;  ui8_b_DResB4    1   47[BANK0 ] unsigned char 
  5778 ;;  ui8_b_DResB5    1   46[BANK0 ] unsigned char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      void 
  5781 ;; Registers used:
  5782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5783 ;; Tracked objects:
  5784 ;;		On entry : 1F/0
  5785 ;;		On exit  : 1E/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5788 ;;      Params:         0       0       0       0       0       0       0       0
  5789 ;;      Locals:         0      24       0       0       0       0       0       0
  5790 ;;      Temps:          0       3       0       0       0       0       0       0
  5791 ;;      Totals:         0      27       0       0       0       0       0       0
  5792 ;;Total ram usage:       27 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    7
  5795 ;; This function calls:
  5796 ;;		_ADC_Read
  5797 ;;		_ADC_Wait
  5798 ;;		_InitMotorStop
  5799 ;;		_NegativeAnswer
  5800 ;;		_PWMReadDC
  5801 ;;		_PWM_Write_Out
  5802 ;;		_Transmit_LIN_8Bytes
  5803 ;;		___lwdiv
  5804 ;;		___wmul
  5805 ;;		_cksum
  5806 ;;		_read_eeprom_data
  5807 ;;		_write_eeprom_data
  5808 ;; This function is called by:
  5809 ;;		_main
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           
  5814                           ;psect for function _EOL
  5815  08FA                     _EOL:	
  5816                           
  5817                           ;diag.c: 460: unsigned char ui8_b_DResB0_RD;
  5818                           ;diag.c: 461: unsigned char ui8_b_DResB1_RD;
  5819                           ;diag.c: 462: unsigned char ui8_b_DResB2_RD;
  5820                           ;diag.c: 463: unsigned char ui8_b_DResB3_RD;
  5821                           ;diag.c: 464: unsigned char ui8_b_DResB4_RD;
  5822                           ;diag.c: 465: unsigned char ui8_b_DResB5_RD;
  5823                           ;diag.c: 469: if( ui8_b_DResServID_c == 0x3b )
  5824                           
  5825                           ;incstack = 0
  5826                           ; Regs used in _EOL: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5827  08FA  303B               	movlw	59
  5828  08FB  0021               	movlb	1	; select bank1
  5829  08FC  0657               	xorwf	_ui8_b_DResServID_c^(0+128),w
  5830  08FD  1D03               	btfss	3,2
  5831  08FE  2D8A               	goto	l13346
  5832                           
  5833                           ;diag.c: 471: {
  5834                           ;diag.c: 477: ui8_selected_lid = ui8_b_DResLocID_c;
  5835  08FF  0020               	movlb	0	; select bank0
  5836  0900  0862               	movf	_ui8_b_DResLocID_c,w
  5837  0901  00E9               	movwf	_ui8_selected_lid
  5838                           
  5839                           ;diag.c: 2406: break;
  5840                           
  5841                           ;diag.c: 482: switch( ui8_b_DResLocID_c)
  5842  0902  0862               	movf	_ui8_b_DResLocID_c,w
  5843                           
  5844                           ; Switch size 1, requested type "space"
  5845                           ; Number of cases is 10, Range of values is 128 to 250
  5846                           ; switch strategies available:
  5847                           ; Name         Instructions Cycles
  5848                           ; simple_byte           31    16 (average)
  5849                           ; direct_byte          255     9 (fixed)
  5850                           ; jumptable            263     9 (fixed)
  5851                           ;	Chosen strategy is simple_byte
  5852  0903  3A80               	xorlw	128	; case 128
  5853  0904  1903               	skipnz
  5854  0905  2922               	goto	l12798
  5855  0906  3A10               	xorlw	16	; case 144
  5856  0907  1903               	skipnz
  5857  0908  2932               	goto	l12806
  5858  0909  3A01               	xorlw	1	; case 145
  5859  090A  1903               	skipnz
  5860  090B  2991               	goto	l12846
  5861  090C  3A02               	xorlw	2	; case 147
  5862  090D  1903               	skipnz
  5863  090E  29C5               	goto	l12868
  5864  090F  3A07               	xorlw	7	; case 148
  5865  0910  1903               	skipnz
  5866  0911  2A33               	goto	l12926
  5867  0912  3A01               	xorlw	1	; case 149
  5868  0913  1903               	skipnz
  5869  0914  2A89               	goto	l12956
  5870  0915  3A0D               	xorlw	13	; case 152
  5871  0916  1903               	skipnz
  5872  0917  2C50               	goto	l13124
  5873  0918  3A07               	xorlw	7	; case 159
  5874  0919  1903               	skipnz
  5875  091A  2CD8               	goto	l13222
  5876  091B  3A3F               	xorlw	63	; case 160
  5877  091C  1903               	skipnz
  5878  091D  2D1C               	goto	l13300
  5879  091E  3A5A               	xorlw	90	; case 250
  5880  091F  1903               	skipnz
  5881  0920  2D76               	goto	l13332
  5882  0921  2D88               	goto	l13340
  5883  0922                     l12798:	
  5884                           
  5885                           ;diag.c: 490: {
  5886                           ;diag.c: 492: if( 0x80 == ui8_selected_lid )
  5887  0922  3080               	movlw	128
  5888  0923  0669               	xorwf	_ui8_selected_lid,w
  5889  0924  1D03               	btfss	3,2
  5890  0925  0008               	return
  5891                           
  5892                           ;diag.c: 494: {
  5893                           ;diag.c: 496: ui8_selected_lid = 0x90;
  5894  0926  3090               	movlw	144
  5895  0927  00E9               	movwf	_ui8_selected_lid
  5896                           
  5897                           ;diag.c: 497: ict_stamp = 1;
  5898  0928  0021               	movlb	1	; select bank1
  5899  0929  303A               	movlw	58
  5900  092A  01EE               	clrf	_ict_stamp^(0+128)
  5901  092B  0AEE               	incf	_ict_stamp^(0+128),f
  5902                           
  5903                           ;diag.c: 499: Transmit_LIN_8Bytes( 0x10, 0x3A, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
      +                          );
  5904  092C  0020               	movlb	0	; select bank0
  5905  092D  00AF               	movwf	Transmit_LIN_8Bytes@B0
  5906  092E  3080               	movlw	128
  5907  092F  26C0  3188         	fcall	PL74	;call to abstracted procedure
  5908  0931  2DB1               	ljmp	_Transmit_LIN_8Bytes
  5909  0932                     l12806:	
  5910                           ;diag.c: 516: }
  5911                           ;diag.c: 519: break;
  5912                           
  5913                           ;diag.c: 506: else
  5914                           ;diag.c: 507: {
  5915                           
  5916                           ;diag.c: 503: }
  5917                           
  5918                           
  5919                           ;diag.c: 529: {
  5920                           ;diag.c: 531: if( 0x90 == ui8_selected_lid )
  5921  0932  3090               	movlw	144
  5922  0933  0669               	xorwf	_ui8_selected_lid,w
  5923  0934  1D03               	btfss	3,2
  5924  0935  0008               	return
  5925  0936  2969               	goto	l12828
  5926  0937                     l12810:	
  5927                           
  5928                           ;diag.c: 557: {
  5929                           ;diag.c: 559: ui8_b_DResB0_RD = read_eeprom_data( 0xf0 );
  5930  0937  30F0               	movlw	240
  5931  0938  258D  3188         	fcall	_read_eeprom_data
  5932  093A  00D0               	movwf	EOL@ui8_b_DResB0_RD
  5933                           
  5934                           ;diag.c: 560: ui8_b_DResB1_RD = read_eeprom_data( 0xf1 );
  5935  093B  30F1               	movlw	241
  5936  093C  258D  3188         	fcall	_read_eeprom_data
  5937  093E  00D1               	movwf	EOL@ui8_b_DResB1_RD
  5938                           
  5939                           ;diag.c: 561: ui8_b_DResB2_RD = read_eeprom_data( 0xf2 );
  5940  093F  30F2               	movlw	242
  5941  0940  258D  3188         	fcall	_read_eeprom_data
  5942  0942  00D2               	movwf	EOL@ui8_b_DResB2_RD
  5943                           
  5944                           ;diag.c: 562: ui8_b_DResB3_RD = read_eeprom_data( 0xf3 );
  5945  0943  30F3               	movlw	243
  5946  0944  258D  3188         	fcall	_read_eeprom_data
  5947  0946  00D3               	movwf	EOL@ui8_b_DResB3_RD
  5948  0947  3002               	movlw	2
  5949                           
  5950                           ;diag.c: 563: ui8_b_DResB4_RD = 0;
  5951  0948  01CF               	clrf	EOL@ui8_b_DResB4_RD
  5952                           
  5953                           ;diag.c: 564: ui8_b_DResB5_RD = 0;
  5954  0949  01CE               	clrf	EOL@ui8_b_DResB5_RD
  5955                           
  5956                           ;diag.c: 566: ict_stamp = 2;
  5957  094A  0021               	movlb	1	; select bank1
  5958  094B  00EE               	movwf	_ict_stamp^(0+128)
  5959                           
  5960                           ;diag.c: 567: break;
  5961  094C  2972               	goto	l12830
  5962  094D                     l12818:	
  5963                           
  5964                           ;diag.c: 574: {
  5965                           ;diag.c: 576: ui8_b_DResB0_RD = read_eeprom_data( 0xeb );
  5966  094D  30EB               	movlw	235
  5967  094E  258D  3188         	fcall	_read_eeprom_data
  5968  0950  00D0               	movwf	EOL@ui8_b_DResB0_RD
  5969                           
  5970                           ;diag.c: 577: ui8_b_DResB1_RD = read_eeprom_data( 0xec );
  5971  0951  30EC               	movlw	236
  5972  0952  258D  3188         	fcall	_read_eeprom_data
  5973  0954  00D1               	movwf	EOL@ui8_b_DResB1_RD
  5974                           
  5975                           ;diag.c: 578: ui8_b_DResB2_RD = read_eeprom_data( 0xed );
  5976  0955  30ED               	movlw	237
  5977  0956  258D  3188         	fcall	_read_eeprom_data
  5978  0958  00D2               	movwf	EOL@ui8_b_DResB2_RD
  5979                           
  5980                           ;diag.c: 579: ui8_b_DResB3_RD = read_eeprom_data( 0xee );
  5981  0959  30EE               	movlw	238
  5982  095A  258D  3188         	fcall	_read_eeprom_data
  5983  095C  00D3               	movwf	EOL@ui8_b_DResB3_RD
  5984                           
  5985                           ;diag.c: 580: ui8_b_DResB4_RD = read_eeprom_data( 0xef );
  5986  095D  30EF               	movlw	239
  5987  095E  258D  3188         	fcall	_read_eeprom_data
  5988  0960  00CF               	movwf	EOL@ui8_b_DResB4_RD
  5989  0961  3091               	movlw	145
  5990                           
  5991                           ;diag.c: 581: ui8_b_DResB5_RD = 0;
  5992  0962  01CE               	clrf	EOL@ui8_b_DResB5_RD
  5993                           
  5994                           ;diag.c: 583: ui8_selected_lid = 0x91;
  5995  0963  00E9               	movwf	_ui8_selected_lid
  5996                           
  5997                           ;diag.c: 584: break;
  5998  0964  2972               	goto	l12830
  5999  0965                     l12824:	
  6000                           
  6001                           ;diag.c: 591: {
  6002                           ;diag.c: 594: NegativeAnswer(0x90);
  6003  0965  3090               	movlw	144
  6004  0966  27C0  3188         	fcall	_NegativeAnswer
  6005                           
  6006                           ;diag.c: 595: break;
  6007  0968  2972               	goto	l12830
  6008  0969                     l12828:	
  6009  0969  0021               	movlb	1	; select bank1
  6010  096A  086E               	movf	_ict_stamp^(0+128),w
  6011                           
  6012                           ; Switch size 1, requested type "space"
  6013                           ; Number of cases is 2, Range of values is 1 to 2
  6014                           ; switch strategies available:
  6015                           ; Name         Instructions Cycles
  6016                           ; simple_byte            7     4 (average)
  6017                           ; direct_byte           13     9 (fixed)
  6018                           ; jumptable            263     9 (fixed)
  6019                           ;	Chosen strategy is simple_byte
  6020  096B  3A01               	xorlw	1	; case 1
  6021  096C  1903               	skipnz
  6022  096D  2937               	goto	l12810
  6023  096E  3A03               	xorlw	3	; case 2
  6024  096F  1903               	skipnz
  6025  0970  294D               	goto	l12818
  6026  0971  2965               	goto	l12824
  6027  0972                     l12830:	
  6028                           
  6029                           ;diag.c: 602: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DResB
      +                          2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF) && (ui8_b_DResB5
      +                          _RD != 0xFF))
  6030  0972  0020               	movlb	0	; select bank0
  6031  0973  0A50               	incf	EOL@ui8_b_DResB0_RD,w
  6032  0974  1903               	btfsc	3,2
  6033  0975  2989               	goto	l12844
  6034  0976  0A51               	incf	EOL@ui8_b_DResB1_RD,w
  6035  0977  1903               	btfsc	3,2
  6036  0978  2989               	goto	l12844
  6037  0979  0A52               	incf	EOL@ui8_b_DResB2_RD,w
  6038  097A  1903               	btfsc	3,2
  6039  097B  2989               	goto	l12844
  6040  097C  0A53               	incf	EOL@ui8_b_DResB3_RD,w
  6041  097D  1903               	btfsc	3,2
  6042  097E  2989               	goto	l12844
  6043  097F  0A4F               	incf	EOL@ui8_b_DResB4_RD,w
  6044  0980  1903               	btfsc	3,2
  6045  0981  2989               	goto	l12844
  6046  0982  0A4E               	incf	EOL@ui8_b_DResB5_RD,w
  6047  0983  1903               	btfsc	3,2
  6048  0984  2989               	goto	l12844
  6049                           
  6050                           ;diag.c: 604: {
  6051                           ;diag.c: 606: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6052  0985  303A               	movlw	58
  6053  0986  262A  3188         	fcall	PL2	;call to abstracted procedure
  6054  0988  2DB1               	ljmp	_Transmit_LIN_8Bytes
  6055  0989                     l12844:	
  6056                           ;diag.c: 609: }
  6057                           
  6058                           
  6059                           ;diag.c: 612: else
  6060                           ;diag.c: 613: {
  6061                           ;diag.c: 615: Transmit_LIN_8Bytes( 0x10, 0x7F, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
  6062  0989  307F               	movlw	127
  6063  098A  00AF               	movwf	Transmit_LIN_8Bytes@B0
  6064  098B  3090               	movlw	144
  6065  098C  269D  3188         	fcall	PL22	;call to abstracted procedure
  6066  098E  00B6               	movwf	Transmit_LIN_8Bytes@B7
  6067  098F  3010               	movlw	16
  6068  0990  2DB1               	ljmp	_Transmit_LIN_8Bytes
  6069  0991                     l12846:	
  6070                           
  6071                           ;diag.c: 657: {
  6072                           ;diag.c: 659: if( 0x91 == ui8_selected_lid )
  6073  0991  3091               	movlw	145
  6074  0992  0669               	xorwf	_ui8_selected_lid,w
  6075  0993  1D03               	btfss	3,2
  6076  0994  0008               	return
  6077                           
  6078                           ;diag.c: 661: {
  6079                           ;diag.c: 672: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
  6080  0995  30F4               	movlw	244
  6081  0996  258D  3188         	fcall	_read_eeprom_data
  6082  0998  00D0               	movwf	EOL@ui8_b_DResB0_RD
  6083                           
  6084                           ;diag.c: 673: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
  6085  0999  30F5               	movlw	245
  6086  099A  258D  3188         	fcall	_read_eeprom_data
  6087  099C  00D1               	movwf	EOL@ui8_b_DResB1_RD
  6088                           
  6089                           ;diag.c: 674: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
  6090  099D  30F6               	movlw	246
  6091  099E  258D  3188         	fcall	_read_eeprom_data
  6092  09A0  00D2               	movwf	EOL@ui8_b_DResB2_RD
  6093                           
  6094                           ;diag.c: 675: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
  6095  09A1  30F7               	movlw	247
  6096  09A2  258D  3188         	fcall	_read_eeprom_data
  6097  09A4  00D3               	movwf	EOL@ui8_b_DResB3_RD
  6098                           
  6099                           ;diag.c: 676: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
  6100  09A5  30F8               	movlw	248
  6101  09A6  258D  3188         	fcall	_read_eeprom_data
  6102  09A8  00CF               	movwf	EOL@ui8_b_DResB4_RD
  6103                           
  6104                           ;diag.c: 677: ui8_b_DResB5_RD = 0;
  6105  09A9  01CE               	clrf	EOL@ui8_b_DResB5_RD
  6106                           
  6107                           ;diag.c: 679: if ((ui8_b_DResB0_RD == 0xFF) && (ui8_b_DResB1_RD == 0xFF) && (ui8_b_DResB
      +                          2_RD == 0xFF) && (ui8_b_DResB3_RD == 0xFF) && (ui8_b_DResB4_RD == 0xFF))
  6108  09AA  0F50               	incfsz	EOL@ui8_b_DResB0_RD,w
  6109  09AB  29B9               	goto	l12864
  6110  09AC  0F51               	incfsz	EOL@ui8_b_DResB1_RD,w
  6111  09AD  29B9               	goto	l12864
  6112  09AE  0F52               	incfsz	EOL@ui8_b_DResB2_RD,w
  6113  09AF  29B9               	goto	l12864
  6114  09B0  0F53               	incfsz	EOL@ui8_b_DResB3_RD,w
  6115  09B1  29B9               	goto	l12864
  6116  09B2  0F4F               	incfsz	EOL@ui8_b_DResB4_RD,w
  6117  09B3  29B9               	goto	l12864
  6118                           
  6119                           ;diag.c: 681: {
  6120                           ;diag.c: 683: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6121  09B4  303A               	movlw	58
  6122  09B5  00AF               	movwf	Transmit_LIN_8Bytes@B0
  6123  09B6  263A  3188         	fcall	PL4	;call to abstracted procedure
  6124  09B8  29BE               	goto	L14
  6125  09B9                     l12864:	
  6126                           ;diag.c: 686: }
  6127                           
  6128                           
  6129                           ;diag.c: 689: else
  6130                           ;diag.c: 690: {
  6131                           ;diag.c: 692: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  6132  09B9  307F               	movlw	127
  6133  09BA  00AF               	movwf	Transmit_LIN_8Bytes@B0
  6134  09BB  0862               	movf	_ui8_b_DResLocID_c,w
  6135  09BC  269D  3188         	fcall	PL22	;call to abstracted procedure
  6136  09BE                     L14:	
  6137  09BE  00B6               	movwf	Transmit_LIN_8Bytes@B7
  6138  09BF  3010               	movlw	16
  6139  09C0  25B1               	fcall	_Transmit_LIN_8Bytes
  6140                           
  6141                           ;diag.c: 702: }
  6142                           ;diag.c: 705: ui8_selected_lid = 0x92;
  6143  09C1  3092               	movlw	146
  6144  09C2  0020               	movlb	0	; select bank0
  6145  09C3  00E9               	movwf	_ui8_selected_lid
  6146                           
  6147                           ;diag.c: 708: }
  6148  09C4  0008               	return
  6149  09C5                     l12868:	
  6150                           
  6151                           ;diag.c: 834: {
  6152                           ;diag.c: 836: if( 0x93 == ui8_selected_lid )
  6153  09C5  3093               	movlw	147
  6154  09C6  0669               	xorwf	_ui8_selected_lid,w
  6155  09C7  1D03               	btfss	3,2
  6156  09C8  0008               	return
  6157                           
  6158                           ;diag.c: 838: {
  6159                           ;diag.c: 850: sum = cksum( );
  6160  09C9  27D2  3188         	fcall	_cksum
  6161  09CB  0825               	movf	?_cksum+1,w
  6162  09CC  0022               	movlb	2	; select bank2
  6163  09CD  00B0               	movwf	(_sum+1)^(0+256)
  6164  09CE  0020               	movlb	0	; select bank0
  6165  09CF  0824               	movf	?_cksum,w
  6166  09D0  0022               	movlb	2	; select bank2
  6167  09D1  00AF               	movwf	_sum^(0+256)
  6168                           
  6169                           ;diag.c: 851: checksum[ 1 ] = ( (EEADRL=(0x1FFF)&0xff, EEADRH=(0x1FFF)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, __nop(), __nop(), (EEDATH << 8) | EEDATA) );
  6170  09D2  30FF               	movlw	255
  6171  09D3  0023               	movlb	3	; select bank3
  6172  09D4  0091               	movwf	17	;volatile
  6173  09D5  301F               	movlw	31
  6174  09D6  0092               	movwf	18	;volatile
  6175  09D7  1115               	bcf	21,2	;volsfr
  6176  09D8  1795               	bsf	21,7	;volsfr
  6177  09D9  1415               	bsf	21,0	;volsfr
  6178  09DA  0000               	nop
  6179  09DB  0000               	nop
  6180  09DC  0023               	movlb	3	; select bank3
  6181  09DD  0814               	movf	20,w	;volatile
  6182  09DE  00BB               	movwf	((_checksum+1)^(0+384)+2)
  6183  09DF  0813               	movf	19,w	;volatile
  6184  09E0  00BA               	movwf	(_checksum^(0+384)+2)
  6185                           
  6186                           ;diag.c: 852: checksum[ 2 ] = ( (EEADRL=(0x1FFE)&0xff, EEADRH=(0x1FFE)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, __nop(), __nop(), (EEDATH << 8) | EEDATA) );
  6187  09E1  30FE               	movlw	254
  6188  09E2  0091               	movwf	17	;volatile
  6189  09E3  301F               	movlw	31
  6190  09E4  0092               	movwf	18	;volatile
  6191  09E5  1115               	bcf	21,2	;volsfr
  6192  09E6  1795               	bsf	21,7	;volsfr
  6193  09E7  1415               	bsf	21,0	;volsfr
  6194  09E8  0000               	nop
  6195  09E9  0000               	nop
  6196  09EA  0023               	movlb	3	; select bank3
  6197  09EB  0814               	movf	20,w	;volatile
  6198  09EC  00BD               	movwf	((_checksum+1)^(0+384)+4)
  6199  09ED  0813               	movf	19,w	;volatile
  6200  09EE  00BC               	movwf	(_checksum^(0+384)+4)
  6201                           
  6202                           ;diag.c: 853: checksum[ 0 ] = ( checksum[ 1 ]<<8 ) + checksum[ 2 ];
  6203  09EF  30BC               	movlw	((low (_checksum| (0+256)))& (0+255)+4)
  6204  09F0  0086               	movwf	6
  6205  09F1  3001               	movlw	1	; select bank3/4
  6206  09F2  0087               	movwf	7
  6207  09F3  083A               	movf	(_checksum^(0+384)+2),w
  6208  09F4  0020               	movlb	0	; select bank0
  6209  09F5  00BA               	movwf	??_EOL+1
  6210  09F6  01B9               	clrf	??_EOL
  6211  09F7  3F40               	moviw [0]fsr1
  6212  09F8  0739               	addwf	??_EOL,w
  6213  09F9  0023               	movlb	3	; select bank3
  6214  09FA  00B8               	movwf	_checksum^(0+384)
  6215  09FB  3F41               	moviw [1]fsr1
  6216  09FC  0020               	movlb	0	; select bank0
  6217  09FD  3D3A               	addwfc	??_EOL+1,w
  6218  09FE  0023               	movlb	3	; select bank3
  6219  09FF  00B9               	movwf	(_checksum^(0+384)+1)
  6220                           
  6221                           ;diag.c: 856: ui8_b_DResB0_RD = 0x02;
  6222  0A00  3002               	movlw	2
  6223  0A01  0020               	movlb	0	; select bank0
  6224  0A02  00D0               	movwf	EOL@ui8_b_DResB0_RD
  6225                           
  6226                           ;diag.c: 857: ui8_b_DResB1_RD = 0x00;
  6227  0A03  01D1               	clrf	EOL@ui8_b_DResB1_RD
  6228                           
  6229                           ;diag.c: 858: ui8_b_DResB2_RD = checksum[1] ;
  6230  0A04  0023               	movlb	3	; select bank3
  6231  0A05  083A               	movf	(_checksum^(0+384)+2),w
  6232  0A06  0020               	movlb	0	; select bank0
  6233  0A07  00D2               	movwf	EOL@ui8_b_DResB2_RD
  6234                           
  6235                           ;diag.c: 859: ui8_b_DResB3_RD = checksum[2] ;
  6236  0A08  0023               	movlb	3	; select bank3
  6237  0A09  083C               	movf	(_checksum^(0+384)+4),w
  6238  0A0A  0020               	movlb	0	; select bank0
  6239  0A0B  00D3               	movwf	EOL@ui8_b_DResB3_RD
  6240                           
  6241                           ;diag.c: 860: ui8_b_DResB4_RD = (unsigned int)((sum)>>8) ;
  6242  0A0C  0022               	movlb	2	; select bank2
  6243  0A0D  0830               	movf	(_sum^(0+256)+1),w
  6244  0A0E  0020               	movlb	0	; select bank0
  6245  0A0F  00CF               	movwf	EOL@ui8_b_DResB4_RD
  6246                           
  6247                           ;diag.c: 861: ui8_b_DResB5_RD = (unsigned int)(sum) ;
  6248  0A10  0022               	movlb	2	; select bank2
  6249  0A11  082F               	movf	_sum^(0+256),w
  6250  0A12  0020               	movlb	0	; select bank0
  6251  0A13  00CE               	movwf	EOL@ui8_b_DResB5_RD
  6252                           
  6253                           ;diag.c: 865: if (checksum[0] == sum)
  6254  0A14  0022               	movlb	2	; select bank2
  6255  0A15  0830               	movf	(_sum+1)^(0+256),w
  6256  0A16  0023               	movlb	3	; select bank3
  6257  0A17  0639               	xorwf	(_checksum+1)^(0+384),w
  6258  0A18  1D03               	skipz
  6259  0A19  2A1E               	goto	u11285
  6260  0A1A  0022               	movlb	2	; select bank2
  6261  0A1B  082F               	movf	_sum^(0+256),w
  6262  0A1C  0023               	movlb	3	; select bank3
  6263  0A1D  0638               	xorwf	_checksum^(0+384),w
  6264  0A1E                     u11285:	
  6265  0A1E  1D03               	skipz
  6266  0A1F  2A26               	goto	l12922
  6267                           
  6268                           ;diag.c: 867: {
  6269                           ;diag.c: 869: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
  6270                           ;diag.c: 870: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6271  0A20  303A               	movlw	58
  6272  0A21  0020               	movlb	0	; select bank0
  6273  0A22  00AF               	movwf	Transmit_LIN_8Bytes@B0
  6274  0A23  263A  3188         	fcall	PL4	;call to abstracted procedure
  6275  0A25  2A2C               	goto	L15
  6276  0A26                     l12922:	
  6277                           ;diag.c: 873: }
  6278                           
  6279                           
  6280                           ;diag.c: 876: else
  6281                           ;diag.c: 877: {
  6282                           ;diag.c: 879: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  6283  0A26  307F               	movlw	127
  6284  0A27  0020               	movlb	0	; select bank0
  6285  0A28  00AF               	movwf	Transmit_LIN_8Bytes@B0
  6286  0A29  0862               	movf	_ui8_b_DResLocID_c,w
  6287  0A2A  269D  3188         	fcall	PL22	;call to abstracted procedure
  6288  0A2C                     L15:	
  6289  0A2C  00B6               	movwf	Transmit_LIN_8Bytes@B7
  6290  0A2D  3010               	movlw	16
  6291  0A2E  25B1               	fcall	_Transmit_LIN_8Bytes
  6292                           
  6293                           ;diag.c: 889: }
  6294                           ;diag.c: 892: ui8_selected_lid = 0x94;
  6295  0A2F  3094               	movlw	148
  6296  0A30  0020               	movlb	0	; select bank0
  6297  0A31  00E9               	movwf	_ui8_selected_lid
  6298                           
  6299                           ;diag.c: 896: }
  6300  0A32  0008               	return
  6301  0A33                     l12926:	
  6302                           
  6303                           ;diag.c: 923: {
  6304                           ;diag.c: 925: if( 0x94 == ui8_selected_lid )
  6305  0A33  3094               	movlw	148
  6306  0A34  0669               	xorwf	_ui8_selected_lid,w
  6307  0A35  1D03               	btfss	3,2
  6308  0A36  0008               	return
  6309                           
  6310                           ;diag.c: 927: {
  6311                           ;diag.c: 940: ui8_given_supply = (ui8_b_DResB0_c);
  6312  0A37  0861               	movf	_ui8_b_DResB0_c,w
  6313  0A38  0021               	movlb	1	; select bank1
  6314  0A39  00D1               	movwf	_ui8_given_supply^(0+128)
  6315                           
  6316                           ;diag.c: 942: if (ui8_given_supply == 0)
  6317  0A3A  0851               	movf	_ui8_given_supply^(0+128),w
  6318  0A3B  1D03               	btfss	3,2
  6319  0A3C  2A3F               	goto	l12934
  6320                           
  6321                           ;diag.c: 944: {
  6322                           ;diag.c: 946: ui8_given_supply = 0x6F;
  6323  0A3D  306F               	movlw	111
  6324  0A3E  00D1               	movwf	_ui8_given_supply^(0+128)
  6325  0A3F                     l12934:	
  6326                           
  6327                           ;diag.c: 948: }
  6328                           ;diag.c: 951: ui8_b_DResB0_RD = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  6329  0A3F  0022               	movlb	2	; select bank2
  6330  0A40  083A               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  6331  0A41  0020               	movlb	0	; select bank0
  6332  0A42  00BA               	movwf	??_EOL+1
  6333  0A43  0022               	movlb	2	; select bank2
  6334  0A44  0839               	movf	_ui16_fir_Bat_mittel^(0+256),w
  6335  0A45  0020               	movlb	0	; select bank0
  6336  0A46  00B9               	movwf	??_EOL
  6337  0A47  36BA               	lsrf	??_EOL+1,f
  6338  0A48  0CB9               	rrf	??_EOL,f
  6339  0A49  36BA               	lsrf	??_EOL+1,f
  6340  0A4A  0CB9               	rrf	??_EOL,f
  6341  0A4B  0839               	movf	??_EOL,w
  6342  0A4C  00D0               	movwf	EOL@ui8_b_DResB0_RD
  6343                           
  6344                           ;diag.c: 952: ui8_b_DResB1_RD = 0;
  6345  0A4D  01D1               	clrf	EOL@ui8_b_DResB1_RD
  6346                           
  6347                           ;diag.c: 953: ui8_b_DResB2_RD = 0;
  6348  0A4E  01D2               	clrf	EOL@ui8_b_DResB2_RD
  6349                           
  6350                           ;diag.c: 954: ui8_b_DResB3_RD = 0;
  6351  0A4F  01D3               	clrf	EOL@ui8_b_DResB3_RD
  6352                           
  6353                           ;diag.c: 955: ui8_b_DResB4_RD = 0;
  6354  0A50  01CF               	clrf	EOL@ui8_b_DResB4_RD
  6355                           
  6356                           ;diag.c: 956: ui8_b_DResB5_RD = 0;
  6357  0A51  01CE               	clrf	EOL@ui8_b_DResB5_RD
  6358                           
  6359                           ;diag.c: 961: if ((ui8_b_DResB0_RD > ui8_given_supply - 3) && (ui8_b_DResB0_RD < ui8_giv
      +                          en_supply + 3) )
  6360  0A52  0021               	movlb	1	; select bank1
  6361  0A53  0851               	movf	_ui8_given_supply^(0+128),w
  6362  0A54  3EFD               	addlw	253
  6363  0A55  0020               	movlb	0	; select bank0
  6364  0A56  00B9               	movwf	??_EOL
  6365  0A57  30FF               	movlw	255
  6366  0A58  1803               	skipnc
  6367  0A59  3000               	movlw	0
  6368  0A5A  00BA               	movwf	??_EOL+1
  6369  0A5B  3A80               	xorlw	128
  6370  0A5C  00BB               	movwf	??_EOL+2
  6371  0A5D  3080               	movlw	128
  6372  0A5E  023B               	subwf	??_EOL+2,w
  6373  0A5F  1D03               	skipz
  6374  0A60  2A63               	goto	u11315
  6375  0A61  0850               	movf	EOL@ui8_b_DResB0_RD,w
  6376  0A62  0239               	subwf	??_EOL,w
  6377  0A63                     u11315:	
  6378  0A63  1803               	skipnc
  6379  0A64  2A7C               	goto	l12952
  6380  0A65  0021               	movlb	1	; select bank1
  6381  0A66  0851               	movf	_ui8_given_supply^(0+128),w
  6382  0A67  3E03               	addlw	3
  6383  0A68  0020               	movlb	0	; select bank0
  6384  0A69  00B9               	movwf	??_EOL
  6385  0A6A  3000               	movlw	0
  6386  0A6B  1803               	skipnc
  6387  0A6C  3001               	movlw	1
  6388  0A6D  00BA               	movwf	??_EOL+1
  6389  0A6E  3A80               	xorlw	128
  6390  0A6F  3C80               	sublw	128
  6391  0A70  1D03               	skipz
  6392  0A71  2A74               	goto	u11325
  6393  0A72  0839               	movf	??_EOL,w
  6394  0A73  0250               	subwf	EOL@ui8_b_DResB0_RD,w
  6395  0A74                     u11325:	
  6396  0A74  1803               	skipnc
  6397  0A75  2A7C               	goto	l12952
  6398                           
  6399                           ;diag.c: 965: {
  6400                           ;diag.c: 967: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
  6401                           ;diag.c: 968: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  6402  0A76  303A               	movlw	58
  6403  0A77  0020               	movlb	0	; select bank0
  6404  0A78  00AF               	movwf	Transmit_LIN_8Bytes@B0
  6405  0A79  263A  3188         	fcall	PL4	;call to abstracted procedure
  6406  0A7B  2A82               	goto	L16
  6407  0A7C                     l12952:	
  6408                           ;diag.c: 971: }
  6409                           
  6410                           
  6411                           ;diag.c: 974: else
  6412                           ;diag.c: 975: {
  6413                           ;diag.c: 977: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
  6414  0A7C  307F               	movlw	127
  6415  0A7D  0020               	movlb	0	; select bank0
  6416  0A7E  00AF               	movwf	Transmit_LIN_8Bytes@B0
  6417  0A7F  0862               	movf	_ui8_b_DResLocID_c,w
  6418  0A80  269D  3188         	fcall	PL22	;call to abstracted procedure
  6419  0A82                     L16:	
  6420  0A82  00B6               	movwf	Transmit_LIN_8Bytes@B7
  6421  0A83  3010               	movlw	16
  6422  0A84  25B1               	fcall	_Transmit_LIN_8Bytes
  6423                           
  6424                           ;diag.c: 987: }
  6425                           ;diag.c: 990: ui8_selected_lid = 0x95;
  6426  0A85  3095               	movlw	149
  6427  0A86  0020               	movlb	0	; select bank0
  6428  0A87  00E9               	movwf	_ui8_selected_lid
  6429                           
  6430                           ;diag.c: 993: }
  6431  0A88  0008               	return
  6432  0A89                     l12956:	
  6433                           
  6434                           ;diag.c: 1022: {
  6435                           ;diag.c: 1024: if( 0x95 == ui8_selected_lid )
  6436  0A89  3095               	movlw	149
  6437  0A8A  0669               	xorwf	_ui8_selected_lid,w
  6438  0A8B  1903               	btfsc	3,2
  6439  0A8C  2C3F               	goto	l13120
  6440  0A8D  2C4E               	goto	l13122
  6441  0A8E                     l12960:	
  6442                           
  6443                           ;diag.c: 1037: {
  6444                           ;diag.c: 1039: InitMotorStop( );
  6445  0A8E  3181  21DF  3188   	fcall	_InitMotorStop
  6446                           
  6447                           ;diag.c: 1042: PEIE = 0;
  6448  0A91  130B               	bcf	11,6	;volatile
  6449                           
  6450                           ;diag.c: 1043: GIE = 0;
  6451  0A92  138B               	bcf	11,7	;volatile
  6452                           
  6453                           ;diag.c: 1044: CCP1CON = 0x00;
  6454  0A93  0025               	movlb	5	; select bank5
  6455  0A94  0193               	clrf	19	;volatile
  6456                           
  6457                           ;diag.c: 1050: LATB2 = 1;
  6458  0A95  0022               	movlb	2	; select bank2
  6459  0A96  150D               	bsf	13,2	;volatile
  6460                           
  6461                           ;diag.c: 1051: LATC3 = 1;
  6462  0A97  158E               	bsf	14,3	;volatile
  6463                           
  6464                           ;diag.c: 1054: LATC1 = 0;
  6465  0A98  108E               	bcf	14,1	;volatile
  6466                           
  6467                           ;diag.c: 1055: LATC4 = 0;
  6468  0A99  120E               	bcf	14,4	;volatile
  6469                           
  6470                           ;diag.c: 1061: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  6471  0A9A  3035               	movlw	53
  6472  0A9B  0021               	movlb	1	; select bank1
  6473  0A9C  009D               	movwf	29	;volatile
  6474  0A9D  0020               	movlb	0	; select bank0
  6475  0A9E  01BC               	clrf	EOL@_dcnt
  6476  0A9F  2AA2               	goto	l584
  6477  0AA0                     l585:	
  6478  0AA0  0000               	nop	;# 
  6479  0AA1  0000               	nop	;# 
  6480  0AA2                     l584:	
  6481  0AA2  0020               	movlb	0	; select bank0
  6482  0AA3  0BBC               	decfsz	EOL@_dcnt,f
  6483  0AA4  2AA0               	goto	l585
  6484  0AA5  01BD               	clrf	EOL@_dcnt_413
  6485  0AA6  2AA9               	goto	l589
  6486  0AA7                     l590:	
  6487  0AA7  0000               	nop	;# 
  6488  0AA8  0000               	nop	;# 
  6489  0AA9                     l589:	
  6490  0AA9  0020               	movlb	0	; select bank0
  6491  0AAA  0BBD               	decfsz	EOL@_dcnt_413,f
  6492  0AAB  2AA7               	goto	l590
  6493  0AAC  01BE               	clrf	EOL@_dcnt_414
  6494  0AAD  2AB0               	goto	l594
  6495  0AAE                     l595:	
  6496  0AAE  0000               	nop	;# 
  6497  0AAF  0000               	nop	;# 
  6498  0AB0                     l594:	
  6499  0AB0  0020               	movlb	0	; select bank0
  6500  0AB1  0BBE               	decfsz	EOL@_dcnt_414,f
  6501  0AB2  2AAE               	goto	l595
  6502  0AB3  01BF               	clrf	EOL@_dcnt_415
  6503  0AB4  2AB7               	goto	l599
  6504  0AB5                     l600:	
  6505  0AB5  0000               	nop	;# 
  6506  0AB6  0000               	nop	;# 
  6507  0AB7                     l599:	
  6508  0AB7  0020               	movlb	0	; select bank0
  6509  0AB8  0BBF               	decfsz	EOL@_dcnt_415,f
  6510  0AB9  2AB5               	goto	l600
  6511  0ABA  01C0               	clrf	EOL@_dcnt_416
  6512  0ABB  2ABE               	goto	l604
  6513  0ABC                     l605:	
  6514  0ABC  0000               	nop	;# 
  6515  0ABD  0000               	nop	;# 
  6516  0ABE                     l604:	
  6517  0ABE  0020               	movlb	0	; select bank0
  6518  0ABF  0BC0               	decfsz	EOL@_dcnt_416,f
  6519  0AC0  2ABC               	goto	l605
  6520  0AC1  01C1               	clrf	EOL@_dcnt_417
  6521  0AC2  2AC5               	goto	l609
  6522  0AC3                     l610:	
  6523  0AC3  0000               	nop	;# 
  6524  0AC4  0000               	nop	;# 
  6525  0AC5                     l609:	
  6526  0AC5  0020               	movlb	0	; select bank0
  6527  0AC6  0BC1               	decfsz	EOL@_dcnt_417,f
  6528  0AC7  2AC3               	goto	l610
  6529                           
  6530                           ;diag.c: 1069: ADC_Wait();
  6531  0AC8  25F4  3188         	fcall	_ADC_Wait
  6532                           
  6533                           ;diag.c: 1070: ( GO_nDONE = 1 );
  6534  0ACA  0021               	movlb	1	; select bank1
  6535  0ACB  149D               	bsf	29,1	;volatile
  6536                           
  6537                           ;diag.c: 1071: ui16_IPhase2_bldc_cal.w = ADC_Read() - ui8_current_cal[1];
  6538  0ACC  2719  3188         	fcall	_ADC_Read
  6539  0ACE  0825               	movf	?_ADC_Read+1,w
  6540  0ACF  0022               	movlb	2	; select bank2
  6541  0AD0  00E6               	movwf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  6542  0AD1  0020               	movlb	0	; select bank0
  6543  0AD2  0824               	movf	?_ADC_Read,w
  6544  0AD3  0022               	movlb	2	; select bank2
  6545  0AD4  00E5               	movwf	_ui16_IPhase2_bldc_cal^(0+256)
  6546  0AD5  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  6547  0AD6  02E5               	subwf	_ui16_IPhase2_bldc_cal^(0+256),f
  6548  0AD7  1C03               	skipc
  6549  0AD8  03E6               	decf	(_ui16_IPhase2_bldc_cal+1)^(0+256),f
  6550                           
  6551                           ;diag.c: 1077: LATC2 = 1;
  6552  0AD9  150E               	bsf	14,2	;volatile
  6553                           
  6554                           ;diag.c: 1078: LATC1 = 1;
  6555  0ADA  148E               	bsf	14,1	;volatile
  6556                           
  6557                           ;diag.c: 1081: LATC3 = 0;
  6558  0ADB  118E               	bcf	14,3	;volatile
  6559                           
  6560                           ;diag.c: 1082: LATC4 = 0;
  6561  0ADC  120E               	bcf	14,4	;volatile
  6562                           
  6563                           ;diag.c: 1088: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  6564  0ADD  3009               	movlw	9
  6565  0ADE  0021               	movlb	1	; select bank1
  6566  0ADF  009D               	movwf	29	;volatile
  6567  0AE0  0020               	movlb	0	; select bank0
  6568  0AE1  01C2               	clrf	EOL@_dcnt_418
  6569  0AE2  2AE5               	goto	l614
  6570  0AE3                     l615:	
  6571  0AE3  0000               	nop	;# 
  6572  0AE4  0000               	nop	;# 
  6573  0AE5                     l614:	
  6574  0AE5  0020               	movlb	0	; select bank0
  6575  0AE6  0BC2               	decfsz	EOL@_dcnt_418,f
  6576  0AE7  2AE3               	goto	l615
  6577  0AE8  01C3               	clrf	EOL@_dcnt_419
  6578  0AE9  2AEC               	goto	l619
  6579  0AEA                     l620:	
  6580  0AEA  0000               	nop	;# 
  6581  0AEB  0000               	nop	;# 
  6582  0AEC                     l619:	
  6583  0AEC  0020               	movlb	0	; select bank0
  6584  0AED  0BC3               	decfsz	EOL@_dcnt_419,f
  6585  0AEE  2AEA               	goto	l620
  6586  0AEF  01C4               	clrf	EOL@_dcnt_420
  6587  0AF0  2AF3               	goto	l624
  6588  0AF1                     l625:	
  6589  0AF1  0000               	nop	;# 
  6590  0AF2  0000               	nop	;# 
  6591  0AF3                     l624:	
  6592  0AF3  0020               	movlb	0	; select bank0
  6593  0AF4  0BC4               	decfsz	EOL@_dcnt_420,f
  6594  0AF5  2AF1               	goto	l625
  6595  0AF6  01C5               	clrf	EOL@_dcnt_421
  6596  0AF7  2AFA               	goto	l629
  6597  0AF8                     l630:	
  6598  0AF8  0000               	nop	;# 
  6599  0AF9  0000               	nop	;# 
  6600  0AFA                     l629:	
  6601  0AFA  0020               	movlb	0	; select bank0
  6602  0AFB  0BC5               	decfsz	EOL@_dcnt_421,f
  6603  0AFC  2AF8               	goto	l630
  6604  0AFD  01C6               	clrf	EOL@_dcnt_422
  6605  0AFE  2B01               	goto	l634
  6606  0AFF                     l635:	
  6607  0AFF  0000               	nop	;# 
  6608  0B00  0000               	nop	;# 
  6609  0B01                     l634:	
  6610  0B01  0020               	movlb	0	; select bank0
  6611  0B02  0BC6               	decfsz	EOL@_dcnt_422,f
  6612  0B03  2AFF               	goto	l635
  6613  0B04  01C7               	clrf	EOL@_dcnt_423
  6614  0B05  2B08               	goto	l639
  6615  0B06                     l640:	
  6616  0B06  0000               	nop	;# 
  6617  0B07  0000               	nop	;# 
  6618  0B08                     l639:	
  6619  0B08  0020               	movlb	0	; select bank0
  6620  0B09  0BC7               	decfsz	EOL@_dcnt_423,f
  6621  0B0A  2B06               	goto	l640
  6622                           
  6623                           ;diag.c: 1096: ADC_Wait();
  6624  0B0B  25F4  3188         	fcall	_ADC_Wait
  6625                           
  6626                           ;diag.c: 1097: ( GO_nDONE = 1 );
  6627  0B0D  0021               	movlb	1	; select bank1
  6628  0B0E  149D               	bsf	29,1	;volatile
  6629                           
  6630                           ;diag.c: 1098: ui16_IPhase1_bldc_cal.w = ADC_Read() - ui8_current_cal[0];
  6631  0B0F  2719  3188         	fcall	_ADC_Read
  6632  0B11  0825               	movf	?_ADC_Read+1,w
  6633  0B12  0022               	movlb	2	; select bank2
  6634  0B13  00E8               	movwf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  6635  0B14  0020               	movlb	0	; select bank0
  6636  0B15  0824               	movf	?_ADC_Read,w
  6637  0B16  0022               	movlb	2	; select bank2
  6638  0B17  00E7               	movwf	_ui16_IPhase1_bldc_cal^(0+256)
  6639  0B18  0820               	movf	_ui8_current_cal^(0+256),w
  6640  0B19  02E7               	subwf	_ui16_IPhase1_bldc_cal^(0+256),f
  6641  0B1A  1C03               	skipc
  6642  0B1B  03E8               	decf	(_ui16_IPhase1_bldc_cal+1)^(0+256),f
  6643                           
  6644                           ;diag.c: 1104: LATB1 = 1;
  6645  0B1C  148D               	bsf	13,1	;volatile
  6646                           
  6647                           ;diag.c: 1105: LATC4 = 1;
  6648  0B1D  160E               	bsf	14,4	;volatile
  6649                           
  6650                           ;diag.c: 1107: LATC1 = 0;
  6651  0B1E  108E               	bcf	14,1	;volatile
  6652                           
  6653                           ;diag.c: 1108: LATC3 = 0;
  6654  0B1F  118E               	bcf	14,3	;volatile
  6655                           
  6656                           ;diag.c: 1115: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
  6657  0B20  3011               	movlw	17
  6658  0B21  0021               	movlb	1	; select bank1
  6659  0B22  009D               	movwf	29	;volatile
  6660  0B23  0020               	movlb	0	; select bank0
  6661  0B24  01C8               	clrf	EOL@_dcnt_424
  6662  0B25  2B28               	goto	l644
  6663  0B26                     l645:	
  6664  0B26  0000               	nop	;# 
  6665  0B27  0000               	nop	;# 
  6666  0B28                     l644:	
  6667  0B28  0020               	movlb	0	; select bank0
  6668  0B29  0BC8               	decfsz	EOL@_dcnt_424,f
  6669  0B2A  2B26               	goto	l645
  6670  0B2B  01C9               	clrf	EOL@_dcnt_425
  6671  0B2C  2B2F               	goto	l649
  6672  0B2D                     l650:	
  6673  0B2D  0000               	nop	;# 
  6674  0B2E  0000               	nop	;# 
  6675  0B2F                     l649:	
  6676  0B2F  0020               	movlb	0	; select bank0
  6677  0B30  0BC9               	decfsz	EOL@_dcnt_425,f
  6678  0B31  2B2D               	goto	l650
  6679  0B32  01CA               	clrf	EOL@_dcnt_426
  6680  0B33  2B36               	goto	l654
  6681  0B34                     l655:	
  6682  0B34  0000               	nop	;# 
  6683  0B35  0000               	nop	;# 
  6684  0B36                     l654:	
  6685  0B36  0020               	movlb	0	; select bank0
  6686  0B37  0BCA               	decfsz	EOL@_dcnt_426,f
  6687  0B38  2B34               	goto	l655
  6688  0B39  01CB               	clrf	EOL@_dcnt_427
  6689  0B3A  2B3D               	goto	l659
  6690  0B3B                     l660:	
  6691  0B3B  0000               	nop	;# 
  6692  0B3C  0000               	nop	;# 
  6693  0B3D                     l659:	
  6694  0B3D  0020               	movlb	0	; select bank0
  6695  0B3E  0BCB               	decfsz	EOL@_dcnt_427,f
  6696  0B3F  2B3B               	goto	l660
  6697  0B40  01CC               	clrf	EOL@_dcnt_428
  6698  0B41  2B44               	goto	l664
  6699  0B42                     l665:	
  6700  0B42  0000               	nop	;# 
  6701  0B43  0000               	nop	;# 
  6702  0B44                     l664:	
  6703  0B44  0020               	movlb	0	; select bank0
  6704  0B45  0BCC               	decfsz	EOL@_dcnt_428,f
  6705  0B46  2B42               	goto	l665
  6706  0B47  01CD               	clrf	EOL@_dcnt_429
  6707  0B48  2B4B               	goto	l669
  6708  0B49                     l670:	
  6709  0B49  0000               	nop	;# 
  6710  0B4A  0000               	nop	;# 
  6711  0B4B                     l669:	
  6712  0B4B  0020               	movlb	0	; select bank0
  6713  0B4C  0BCD               	decfsz	EOL@_dcnt_429,f
  6714  0B4D  2B49               	goto	l670
  6715                           
  6716                           ;diag.c: 1123: ADC_Wait();
  6717  0B4E  25F4  3188         	fcall	_ADC_Wait
  6718                           
  6719                           ;diag.c: 1124: ( GO_nDONE = 1 );
  6720  0B50  0021               	movlb	1	; select bank1
  6721  0B51  149D               	bsf	29,1	;volatile
  6722                           
  6723                           ;diag.c: 1125: ui16_IPhase3_bldc_cal.w = ADC_Read() - ui8_current_cal[2];
  6724  0B52  2719               	fcall	_ADC_Read
  6725  0B53  0825               	movf	?_ADC_Read+1,w
  6726  0B54  0022               	movlb	2	; select bank2
  6727  0B55  00E4               	movwf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  6728  0B56  0020               	movlb	0	; select bank0
  6729  0B57  0824               	movf	?_ADC_Read,w
  6730  0B58  0022               	movlb	2	; select bank2
  6731  0B59  00E3               	movwf	_ui16_IPhase3_bldc_cal^(0+256)
  6732  0B5A  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  6733  0B5B  02E3               	subwf	_ui16_IPhase3_bldc_cal^(0+256),f
  6734  0B5C  1C03               	skipc
  6735  0B5D  03E4               	decf	(_ui16_IPhase3_bldc_cal+1)^(0+256),f
  6736                           
  6737                           ;diag.c: 1128: LATC = LATC & 0b11100101;
  6738  0B5E  30E5               	movlw	229
  6739  0B5F  058E               	andwf	14,f	;volatile
  6740                           
  6741                           ;diag.c: 1131: CCP1CON = 0x0c;
  6742  0B60  300C               	movlw	12
  6743  0B61  0025               	movlb	5	; select bank5
  6744  0B62  0093               	movwf	19	;volatile
  6745                           
  6746                           ;diag.c: 1132: PEIE = 1;
  6747  0B63  170B               	bsf	11,6	;volatile
  6748                           
  6749                           ;diag.c: 1133: GIE = 1;
  6750  0B64  178B               	bsf	11,7	;volatile
  6751                           
  6752                           ;diag.c: 1136: phaseCal = 1;
  6753  0B65  0021               	movlb	1	; select bank1
  6754  0B66  01D2               	clrf	_phaseCal^(0+128)
  6755  0B67  0AD2               	incf	_phaseCal^(0+128),f
  6756                           
  6757                           ;diag.c: 1139: break;
  6758  0B68  0008               	return
  6759  0B69                     l13058:	
  6760                           
  6761                           ;diag.c: 1146: {
  6762                           ;diag.c: 1151: write_eeprom_data( 0x02, ( unsigned char )( ( 0x7800 / ui16_IPhase1_bldc_
      +                          cal.w )>>8 ) );
  6763  0B69  26AB  3188         	fcall	PL56	;call to abstracted procedure
  6764  0B6B  26A5  3188         	fcall	PL54	;call to abstracted procedure
  6765  0B6D  26DC  3188         	fcall	___lwdiv
  6766  0B6F  0825               	movf	?___lwdiv+1,w
  6767  0B70  00AB               	movwf	write_eeprom_data@ui8_adress_data
  6768  0B71  3002               	movlw	2
  6769  0B72  2598  3188         	fcall	_write_eeprom_data
  6770                           
  6771                           ;diag.c: 1152: write_eeprom_data( 0x03, ( unsigned char )( 0x7800 / ui16_IPhase1_bldc_ca
      +                          l.w ) );
  6772  0B74  26AB  3188         	fcall	PL56	;call to abstracted procedure
  6773  0B76  26A5  3188         	fcall	PL54	;call to abstracted procedure
  6774  0B78  26DC  3188         	fcall	___lwdiv
  6775  0B7A  0824               	movf	?___lwdiv,w
  6776  0B7B  00AB               	movwf	write_eeprom_data@ui8_adress_data
  6777  0B7C  3003               	movlw	3
  6778  0B7D  2598  3188         	fcall	_write_eeprom_data
  6779                           
  6780                           ;diag.c: 1155: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03
      +                           );
  6781  0B7F  3003               	movlw	3
  6782  0B80  258D  3188         	fcall	_read_eeprom_data
  6783  0B82  00B9               	movwf	??_EOL
  6784  0B83  3002               	movlw	2
  6785  0B84  258D  3188         	fcall	_read_eeprom_data
  6786  0B86  0021               	movlb	1	; select bank1
  6787  0B87  00EC               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
  6788  0B88  0020               	movlb	0	; select bank0
  6789  0B89  0839               	movf	??_EOL,w
  6790  0B8A  0021               	movlb	1	; select bank1
  6791  0B8B  00EB               	movwf	_ui16_I_cal_Ph1^(0+128)
  6792                           
  6793                           ;diag.c: 1167: ui8_b_DResB0_RD = phaseCal;
  6794                           
  6795                           ;diag.c: 1168: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase1_bldc_cal.w * ui16_I
      +                          _cal_Ph1 )>>8 )>>8 );
  6796                           
  6797                           ;diag.c: 1169: ui8_b_DResB2_RD = ( unsigned char )( ( ui16_IPhase1_bldc_cal.w * ui16_I_c
      +                          al_Ph1 )>>8 );
  6798  0B8C  26D1  3188         	fcall	PL88	;call to abstracted procedure
  6799  0B8E  0868               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
  6800  0B8F  0020               	movlb	0	; select bank0
  6801  0B90  00A5               	movwf	___wmul@multiplier+1
  6802  0B91  0022               	movlb	2	; select bank2
  6803  0B92  0867               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
  6804  0B93  0020               	movlb	0	; select bank0
  6805  0B94  00A4               	movwf	___wmul@multiplier
  6806  0B95  0021               	movlb	1	; select bank1
  6807  0B96  086C               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
  6808  0B97  0020               	movlb	0	; select bank0
  6809  0B98  00A7               	movwf	___wmul@multiplicand+1
  6810  0B99  0021               	movlb	1	; select bank1
  6811  0B9A  086B               	movf	_ui16_I_cal_Ph1^(0+128),w
  6812  0B9B  0020               	movlb	0	; select bank0
  6813  0B9C  00A6               	movwf	___wmul@multiplicand
  6814  0B9D  260D  3188         	fcall	___wmul
  6815  0B9F  0825               	movf	?___wmul+1,w
  6816  0BA0  00D2               	movwf	EOL@ui8_b_DResB2_RD
  6817                           
  6818                           ;diag.c: 1170: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph1 >> 8);
  6819  0BA1  0021               	movlb	1	; select bank1
  6820  0BA2  086C               	movf	(_ui16_I_cal_Ph1^(0+128)+1),w
  6821  0BA3  0020               	movlb	0	; select bank0
  6822  0BA4  00D3               	movwf	EOL@ui8_b_DResB3_RD
  6823                           
  6824                           ;diag.c: 1171: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph1 );
  6825  0BA5  0021               	movlb	1	; select bank1
  6826  0BA6  086B               	movf	_ui16_I_cal_Ph1^(0+128),w
  6827                           
  6828                           ;diag.c: 1172: ui8_b_DResB5_RD = 0;
  6829  0BA7  267B  3188         	fcall	PL12	;call to abstracted procedure
  6830                           
  6831                           ;diag.c: 1177: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  6832                           ;diag.c: 1178: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  6833                           ;diag.c: 1179: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  6834                           ;diag.c: 1180: ui8_b_DResB5_RD );
  6835  0BA9  262A  3188         	fcall	PL2	;call to abstracted procedure
  6836  0BAB  25B1               	fcall	_Transmit_LIN_8Bytes
  6837                           
  6838                           ;diag.c: 1182: phaseCal = 2;
  6839  0BAC  3002               	movlw	2
  6840  0BAD  00D2               	movwf	_phaseCal^(0+128)
  6841                           
  6842                           ;diag.c: 1184: break;
  6843  0BAE  0008               	return
  6844  0BAF                     l13078:	
  6845                           
  6846                           ;diag.c: 1191: {
  6847                           ;diag.c: 1195: write_eeprom_data( 0x04, ( unsigned char )( ( 0x7800 / ui16_IPhase2_bldc_
      +                          cal.w )>>8 ) );
  6848  0BAF  26B9  3188         	fcall	PL60	;call to abstracted procedure
  6849  0BB1  26A5  3188         	fcall	PL54	;call to abstracted procedure
  6850  0BB3  26DC  3188         	fcall	___lwdiv
  6851  0BB5  0825               	movf	?___lwdiv+1,w
  6852  0BB6  00AB               	movwf	write_eeprom_data@ui8_adress_data
  6853  0BB7  3004               	movlw	4
  6854  0BB8  2598  3188         	fcall	_write_eeprom_data
  6855                           
  6856                           ;diag.c: 1196: write_eeprom_data( 0x05, ( unsigned char )( 0x7800 / ui16_IPhase2_bldc_ca
      +                          l.w ) );
  6857  0BBA  26B9  3188         	fcall	PL60	;call to abstracted procedure
  6858  0BBC  26A5  3188         	fcall	PL54	;call to abstracted procedure
  6859  0BBE  26DC  3188         	fcall	___lwdiv
  6860  0BC0  0824               	movf	?___lwdiv,w
  6861  0BC1  00AB               	movwf	write_eeprom_data@ui8_adress_data
  6862  0BC2  3005               	movlw	5
  6863  0BC3  2598  3188         	fcall	_write_eeprom_data
  6864                           
  6865                           ;diag.c: 1199: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05
      +                           );
  6866  0BC5  3005               	movlw	5
  6867  0BC6  258D  3188         	fcall	_read_eeprom_data
  6868  0BC8  00B9               	movwf	??_EOL
  6869  0BC9  3004               	movlw	4
  6870  0BCA  258D  3188         	fcall	_read_eeprom_data
  6871  0BCC  0021               	movlb	1	; select bank1
  6872  0BCD  00EA               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
  6873  0BCE  0020               	movlb	0	; select bank0
  6874  0BCF  0839               	movf	??_EOL,w
  6875  0BD0  0021               	movlb	1	; select bank1
  6876  0BD1  00E9               	movwf	_ui16_I_cal_Ph2^(0+128)
  6877                           
  6878                           ;diag.c: 1211: ui8_b_DResB0_RD = phaseCal;
  6879                           
  6880                           ;diag.c: 1212: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 )>>8 );
  6881                           
  6882                           ;diag.c: 1213: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 ) );
  6883  0BD2  26D1  3188         	fcall	PL88	;call to abstracted procedure
  6884  0BD4  0866               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
  6885  0BD5  0020               	movlb	0	; select bank0
  6886  0BD6  00A5               	movwf	___wmul@multiplier+1
  6887  0BD7  0022               	movlb	2	; select bank2
  6888  0BD8  0865               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
  6889  0BD9  0020               	movlb	0	; select bank0
  6890  0BDA  00A4               	movwf	___wmul@multiplier
  6891  0BDB  0021               	movlb	1	; select bank1
  6892  0BDC  086A               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
  6893  0BDD  0020               	movlb	0	; select bank0
  6894  0BDE  00A7               	movwf	___wmul@multiplicand+1
  6895  0BDF  0021               	movlb	1	; select bank1
  6896  0BE0  0869               	movf	_ui16_I_cal_Ph2^(0+128),w
  6897  0BE1  0020               	movlb	0	; select bank0
  6898  0BE2  00A6               	movwf	___wmul@multiplicand
  6899  0BE3  260D  3188         	fcall	___wmul
  6900  0BE5  0825               	movf	?___wmul+1,w
  6901  0BE6  00D2               	movwf	EOL@ui8_b_DResB2_RD
  6902                           
  6903                           ;diag.c: 1214: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph2>>8 );
  6904  0BE7  0021               	movlb	1	; select bank1
  6905  0BE8  086A               	movf	(_ui16_I_cal_Ph2^(0+128)+1),w
  6906  0BE9  0020               	movlb	0	; select bank0
  6907  0BEA  00D3               	movwf	EOL@ui8_b_DResB3_RD
  6908                           
  6909                           ;diag.c: 1215: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph2 );
  6910  0BEB  0021               	movlb	1	; select bank1
  6911  0BEC  0869               	movf	_ui16_I_cal_Ph2^(0+128),w
  6912                           
  6913                           ;diag.c: 1216: ui8_b_DResB5_RD = 0;
  6914  0BED  267B  3188         	fcall	PL12	;call to abstracted procedure
  6915                           
  6916                           ;diag.c: 1221: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  6917                           ;diag.c: 1222: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  6918                           ;diag.c: 1223: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  6919                           ;diag.c: 1224: ui8_b_DResB5_RD );
  6920  0BEF  262A  3188         	fcall	PL2	;call to abstracted procedure
  6921  0BF1  25B1               	fcall	_Transmit_LIN_8Bytes
  6922                           
  6923                           ;diag.c: 1227: phaseCal = 3;
  6924  0BF2  3003               	movlw	3
  6925  0BF3  00D2               	movwf	_phaseCal^(0+128)
  6926                           
  6927                           ;diag.c: 1229: break;
  6928  0BF4  0008               	return
  6929  0BF5                     l13098:	
  6930                           
  6931                           ;diag.c: 1236: {
  6932                           ;diag.c: 1240: write_eeprom_data( 0x06, ( unsigned char )( ( 0x7800 / ui16_IPhase3_bldc_
      +                          cal.w )>>8 ) );
  6933  0BF5  26B2  3188         	fcall	PL58	;call to abstracted procedure
  6934  0BF7  26A5  3188         	fcall	PL54	;call to abstracted procedure
  6935  0BF9  26DC  3188         	fcall	___lwdiv
  6936  0BFB  0825               	movf	?___lwdiv+1,w
  6937  0BFC  00AB               	movwf	write_eeprom_data@ui8_adress_data
  6938  0BFD  3006               	movlw	6
  6939  0BFE  2598  3188         	fcall	_write_eeprom_data
  6940                           
  6941                           ;diag.c: 1241: write_eeprom_data( 0x07, ( unsigned char )( 0x7800 / ui16_IPhase3_bldc_ca
      +                          l.w ) );
  6942  0C00  26B2  3188         	fcall	PL58	;call to abstracted procedure
  6943  0C02  26A5  3188         	fcall	PL54	;call to abstracted procedure
  6944  0C04  26DC  3188         	fcall	___lwdiv
  6945  0C06  0824               	movf	?___lwdiv,w
  6946  0C07  00AB               	movwf	write_eeprom_data@ui8_adress_data
  6947  0C08  3007               	movlw	7
  6948  0C09  2598  3188         	fcall	_write_eeprom_data
  6949                           
  6950                           ;diag.c: 1245: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07
      +                           );
  6951  0C0B  3007               	movlw	7
  6952  0C0C  258D  3188         	fcall	_read_eeprom_data
  6953  0C0E  00B9               	movwf	??_EOL
  6954  0C0F  3006               	movlw	6
  6955  0C10  258D  3188         	fcall	_read_eeprom_data
  6956  0C12  0021               	movlb	1	; select bank1
  6957  0C13  00E8               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
  6958  0C14  0020               	movlb	0	; select bank0
  6959  0C15  0839               	movf	??_EOL,w
  6960  0C16  0021               	movlb	1	; select bank1
  6961  0C17  00E7               	movwf	_ui16_I_cal_Ph3^(0+128)
  6962                           
  6963                           ;diag.c: 1258: ui8_b_DResB0_RD = phaseCal;
  6964                           
  6965                           ;diag.c: 1259: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 )>>8 );
  6966                           
  6967                           ;diag.c: 1260: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 ) );
  6968  0C18  26D1  3188         	fcall	PL88	;call to abstracted procedure
  6969  0C1A  0864               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
  6970  0C1B  0020               	movlb	0	; select bank0
  6971  0C1C  00A5               	movwf	___wmul@multiplier+1
  6972  0C1D  0022               	movlb	2	; select bank2
  6973  0C1E  0863               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
  6974  0C1F  0020               	movlb	0	; select bank0
  6975  0C20  00A4               	movwf	___wmul@multiplier
  6976  0C21  0021               	movlb	1	; select bank1
  6977  0C22  0868               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
  6978  0C23  0020               	movlb	0	; select bank0
  6979  0C24  00A7               	movwf	___wmul@multiplicand+1
  6980  0C25  0021               	movlb	1	; select bank1
  6981  0C26  0867               	movf	_ui16_I_cal_Ph3^(0+128),w
  6982  0C27  0020               	movlb	0	; select bank0
  6983  0C28  00A6               	movwf	___wmul@multiplicand
  6984  0C29  260D  3188         	fcall	___wmul
  6985  0C2B  0825               	movf	?___wmul+1,w
  6986  0C2C  00D2               	movwf	EOL@ui8_b_DResB2_RD
  6987                           
  6988                           ;diag.c: 1261: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph3>>8 );
  6989  0C2D  0021               	movlb	1	; select bank1
  6990  0C2E  0868               	movf	(_ui16_I_cal_Ph3^(0+128)+1),w
  6991  0C2F  0020               	movlb	0	; select bank0
  6992  0C30  00D3               	movwf	EOL@ui8_b_DResB3_RD
  6993                           
  6994                           ;diag.c: 1262: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph3 );
  6995  0C31  0021               	movlb	1	; select bank1
  6996  0C32  0867               	movf	_ui16_I_cal_Ph3^(0+128),w
  6997                           
  6998                           ;diag.c: 1263: ui8_b_DResB5_RD = 0;
  6999  0C33  267B  3188         	fcall	PL12	;call to abstracted procedure
  7000                           
  7001                           ;diag.c: 1267: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7002                           ;diag.c: 1268: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7003                           ;diag.c: 1269: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7004                           ;diag.c: 1270: ui8_b_DResB5_RD );
  7005  0C35  262A  3188         	fcall	PL2	;call to abstracted procedure
  7006  0C37  25B1               	fcall	_Transmit_LIN_8Bytes
  7007                           
  7008                           ;diag.c: 1271: ui8_selected_lid = 0x98;
  7009  0C38  3098               	movlw	152
  7010  0C39  0020               	movlb	0	; select bank0
  7011  0C3A  00E9               	movwf	_ui8_selected_lid
  7012                           
  7013                           ;diag.c: 1274: break;
  7014  0C3B  0008               	return
  7015  0C3C                     l13118:	
  7016                           
  7017                           ;diag.c: 1281: {
  7018                           ;diag.c: 1283: NegativeAnswer(ui8_b_DResLocID_c);
  7019  0C3C  0020               	movlb	0	; select bank0
  7020  0C3D  0862               	movf	_ui8_b_DResLocID_c,w
  7021  0C3E  2FC0               	ljmp	_NegativeAnswer
  7022  0C3F                     l13120:	
  7023                           ;diag.c: 1285: }
  7024                           ;diag.c: 1287: }
  7025                           
  7026  0C3F  0021               	movlb	1	; select bank1
  7027  0C40  0852               	movf	_phaseCal^(0+128),w
  7028                           
  7029                           ; Switch size 1, requested type "space"
  7030                           ; Number of cases is 4, Range of values is 0 to 3
  7031                           ; switch strategies available:
  7032                           ; Name         Instructions Cycles
  7033                           ; simple_byte           13     7 (average)
  7034                           ; direct_byte           14     6 (fixed)
  7035                           ; jumptable            260     6 (fixed)
  7036                           ;	Chosen strategy is simple_byte
  7037  0C41  3A00               	xorlw	0	; case 0
  7038  0C42  1903               	skipnz
  7039  0C43  2A8E               	goto	l12960
  7040  0C44  3A01               	xorlw	1	; case 1
  7041  0C45  1903               	skipnz
  7042  0C46  2B69               	goto	l13058
  7043  0C47  3A03               	xorlw	3	; case 2
  7044  0C48  1903               	skipnz
  7045  0C49  2BAF               	goto	l13078
  7046  0C4A  3A01               	xorlw	1	; case 3
  7047  0C4B  1903               	skipnz
  7048  0C4C  2BF5               	goto	l13098
  7049  0C4D  2C3C               	goto	l13118
  7050  0C4E                     l13122:	
  7051                           
  7052                           ;diag.c: 1293: else
  7053                           ;diag.c: 1294: {
  7054                           ;diag.c: 1296: NegativeAnswer(ui8_b_DResLocID_c);
  7055  0C4E  0862               	movf	_ui8_b_DResLocID_c,w
  7056  0C4F  2FC0               	ljmp	_NegativeAnswer
  7057  0C50                     l13124:	
  7058                           
  7059                           ;diag.c: 1311: {
  7060                           ;diag.c: 1313: if( 0x98 == ui8_selected_lid )
  7061  0C50  3098               	movlw	152
  7062  0C51  0669               	xorwf	_ui8_selected_lid,w
  7063  0C52  1D03               	btfss	3,2
  7064  0C53  0008               	return
  7065                           
  7066                           ;diag.c: 1315: {
  7067                           ;diag.c: 1328: wkpoint = ui8_b_DResB0_c;
  7068  0C54  0861               	movf	_ui8_b_DResB0_c,w
  7069  0C55  0021               	movlb	1	; select bank1
  7070  0C56  00ED               	movwf	_wkpoint^(0+128)
  7071                           
  7072                           ;diag.c: 1953: break;
  7073                           
  7074                           ;diag.c: 1334: switch( ui8_b_DResB0_c )
  7075  0C57  0020               	movlb	0	; select bank0
  7076  0C58  0861               	movf	_ui8_b_DResB0_c,w
  7077                           
  7078                           ; Switch size 1, requested type "space"
  7079                           ; Number of cases is 4, Range of values is 1 to 5
  7080                           ; switch strategies available:
  7081                           ; Name         Instructions Cycles
  7082                           ; simple_byte           13     7 (average)
  7083                           ; direct_byte           19     9 (fixed)
  7084                           ; jumptable            263     9 (fixed)
  7085                           ;	Chosen strategy is simple_byte
  7086  0C59  3A01               	xorlw	1	; case 1
  7087  0C5A  1903               	skipnz
  7088  0C5B  2C66               	goto	l13128
  7089  0C5C  3A02               	xorlw	2	; case 3
  7090  0C5D  1903               	skipnz
  7091  0C5E  2C82               	goto	l13150
  7092  0C5F  3A07               	xorlw	7	; case 4
  7093  0C60  1903               	skipnz
  7094  0C61  2C9E               	goto	l13172
  7095  0C62  3A01               	xorlw	1	; case 5
  7096  0C63  1903               	skipnz
  7097  0C64  2CBA               	goto	l13194
  7098  0C65  2CD6               	goto	l13216
  7099  0C66                     l13128:	
  7100                           
  7101                           ;diag.c: 1342: {
  7102                           ;diag.c: 1344: if( wkpoint == ui8_b_DResB0_c )
  7103  0C66  26D7  3188         	fcall	PL110	;call to abstracted procedure
  7104  0C68  1D03               	skipz
  7105  0C69  0008               	return
  7106                           
  7107                           ;diag.c: 1346: {
  7108                           ;diag.c: 1348: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7109  0C6A  0861               	movf	_ui8_b_DResB0_c,w
  7110  0C6B  00D0               	movwf	EOL@ui8_b_DResB0_RD
  7111                           
  7112                           ;diag.c: 1349: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7113  0C6C  2735  3188         	fcall	_PWMReadDC
  7114                           
  7115                           ;diag.c: 1350: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7116  0C6E  2680  3188         	fcall	PL14	;call to abstracted procedure
  7117  0C70  260D  3188         	fcall	___wmul
  7118                           
  7119                           ;diag.c: 1351: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7120                           
  7121                           ;diag.c: 1352: ui8_b_DResB4_RD = 0;
  7122                           
  7123                           ;diag.c: 1353: ui8_b_DResB5_RD = 0;
  7124                           
  7125                           ;diag.c: 1356: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7126  0C72  2648  3188         	fcall	PL6	;call to abstracted procedure
  7127  0C74  1803               	skipnc
  7128  0C75  2C7F               	goto	l13148
  7129  0C76  266A  3188         	fcall	PL10	;call to abstracted procedure
  7130  0C78  1803               	skipnc
  7131  0C79  2C7F               	goto	l13148
  7132                           
  7133                           ;diag.c: 1358: {
  7134                           ;diag.c: 1360: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  7135  0C7A  303A               	movlw	58
  7136  0C7B  0020               	movlb	0	; select bank0
  7137  0C7C  262A  3188         	fcall	PL2	;call to abstracted procedure
  7138  0C7E  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7139  0C7F                     l13148:	
  7140                           ;diag.c: 1363: }
  7141                           
  7142                           
  7143                           ;diag.c: 1366: else
  7144                           ;diag.c: 1367: {
  7145                           ;diag.c: 1369: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7146  0C7F  268F  3188         	fcall	PL16	;call to abstracted procedure
  7147  0C81  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7148  0C82                     l13150:	
  7149                           
  7150                           ;diag.c: 1519: {
  7151                           ;diag.c: 1521: if( wkpoint == ui8_b_DResB0_c )
  7152  0C82  26D7  3188         	fcall	PL110	;call to abstracted procedure
  7153  0C84  1D03               	skipz
  7154  0C85  0008               	return
  7155                           
  7156                           ;diag.c: 1523: {
  7157                           ;diag.c: 1525: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7158  0C86  0861               	movf	_ui8_b_DResB0_c,w
  7159  0C87  00D0               	movwf	EOL@ui8_b_DResB0_RD
  7160                           
  7161                           ;diag.c: 1526: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7162  0C88  2735  3188         	fcall	_PWMReadDC
  7163                           
  7164                           ;diag.c: 1527: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7165  0C8A  2680  3188         	fcall	PL14	;call to abstracted procedure
  7166  0C8C  260D  3188         	fcall	___wmul
  7167                           
  7168                           ;diag.c: 1528: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7169                           
  7170                           ;diag.c: 1529: ui8_b_DResB4_RD = 0;
  7171                           
  7172                           ;diag.c: 1530: ui8_b_DResB5_RD = 0;
  7173                           
  7174                           ;diag.c: 1534: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7175  0C8E  2648  3188         	fcall	PL6	;call to abstracted procedure
  7176  0C90  1803               	skipnc
  7177  0C91  2C9B               	goto	l13170
  7178  0C92  266A  3188         	fcall	PL10	;call to abstracted procedure
  7179  0C94  1803               	skipnc
  7180  0C95  2C9B               	goto	l13170
  7181                           
  7182                           ;diag.c: 1536: {
  7183                           ;diag.c: 1538: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  7184                           ;diag.c: 1539: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  7185                           ;diag.c: 1540: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  7186                           ;diag.c: 1541: ui8_b_DResB4_RD,
  7187                           ;diag.c: 1542: ui8_b_DResB5_RD );
  7188  0C96  303A               	movlw	58
  7189  0C97  0020               	movlb	0	; select bank0
  7190  0C98  262A  3188         	fcall	PL2	;call to abstracted procedure
  7191  0C9A  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7192  0C9B                     l13170:	
  7193                           ;diag.c: 1545: }
  7194                           
  7195                           
  7196                           ;diag.c: 1548: else
  7197                           ;diag.c: 1549: {
  7198                           ;diag.c: 1551: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7199  0C9B  268F  3188         	fcall	PL16	;call to abstracted procedure
  7200  0C9D  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7201  0C9E                     l13172:	
  7202                           
  7203                           ;diag.c: 1607: {
  7204                           ;diag.c: 1609: if( wkpoint == ui8_b_DResB0_c )
  7205  0C9E  26D7  3188         	fcall	PL110	;call to abstracted procedure
  7206  0CA0  1D03               	skipz
  7207  0CA1  0008               	return
  7208                           
  7209                           ;diag.c: 1611: {
  7210                           ;diag.c: 1613: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7211  0CA2  0861               	movf	_ui8_b_DResB0_c,w
  7212  0CA3  00D0               	movwf	EOL@ui8_b_DResB0_RD
  7213                           
  7214                           ;diag.c: 1614: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7215  0CA4  2735  3188         	fcall	_PWMReadDC
  7216                           
  7217                           ;diag.c: 1615: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7218  0CA6  2680  3188         	fcall	PL14	;call to abstracted procedure
  7219  0CA8  260D  3188         	fcall	___wmul
  7220                           
  7221                           ;diag.c: 1616: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7222                           
  7223                           ;diag.c: 1617: ui8_b_DResB4_RD = 0;
  7224                           
  7225                           ;diag.c: 1618: ui8_b_DResB5_RD = 0;
  7226                           
  7227                           ;diag.c: 1622: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7228  0CAA  2648  3188         	fcall	PL6	;call to abstracted procedure
  7229  0CAC  1803               	skipnc
  7230  0CAD  2CB7               	goto	l13192
  7231  0CAE  266A  3188         	fcall	PL10	;call to abstracted procedure
  7232  0CB0  1803               	skipnc
  7233  0CB1  2CB7               	goto	l13192
  7234                           
  7235                           ;diag.c: 1624: {
  7236                           ;diag.c: 1626: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  7237                           ;diag.c: 1627: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  7238                           ;diag.c: 1628: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  7239                           ;diag.c: 1629: ui8_b_DResB4_RD,
  7240                           ;diag.c: 1630: ui8_b_DResB5_RD );
  7241  0CB2  303A               	movlw	58
  7242  0CB3  0020               	movlb	0	; select bank0
  7243  0CB4  262A  3188         	fcall	PL2	;call to abstracted procedure
  7244  0CB6  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7245  0CB7                     l13192:	
  7246                           ;diag.c: 1633: }
  7247                           
  7248                           
  7249                           ;diag.c: 1636: else
  7250                           ;diag.c: 1637: {
  7251                           ;diag.c: 1639: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7252  0CB7  268F  3188         	fcall	PL16	;call to abstracted procedure
  7253  0CB9  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7254  0CBA                     l13194:	
  7255                           
  7256                           ;diag.c: 1693: {
  7257                           ;diag.c: 1695: if( wkpoint == ui8_b_DResB0_c )
  7258  0CBA  26D7  3188         	fcall	PL110	;call to abstracted procedure
  7259  0CBC  1D03               	skipz
  7260  0CBD  0008               	return
  7261                           
  7262                           ;diag.c: 1697: {
  7263                           ;diag.c: 1699: ui8_b_DResB0_RD = ui8_b_DResB0_c;
  7264  0CBE  0861               	movf	_ui8_b_DResB0_c,w
  7265  0CBF  00D0               	movwf	EOL@ui8_b_DResB0_RD
  7266                           
  7267                           ;diag.c: 1700: ui8_b_DResB1_RD = PWMReadDC( )>>1;
  7268  0CC0  2735  3188         	fcall	_PWMReadDC
  7269                           
  7270                           ;diag.c: 1701: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
  7271  0CC2  2680  3188         	fcall	PL14	;call to abstracted procedure
  7272  0CC4  260D  3188         	fcall	___wmul
  7273                           
  7274                           ;diag.c: 1702: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
  7275                           
  7276                           ;diag.c: 1703: ui8_b_DResB4_RD = 0;
  7277                           
  7278                           ;diag.c: 1704: ui8_b_DResB5_RD = 0;
  7279                           
  7280                           ;diag.c: 1707: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
  7281  0CC6  2648  3188         	fcall	PL6	;call to abstracted procedure
  7282  0CC8  1803               	skipnc
  7283  0CC9  2CD3               	goto	l13214
  7284  0CCA  266A  3188         	fcall	PL10	;call to abstracted procedure
  7285  0CCC  1803               	skipnc
  7286  0CCD  2CD3               	goto	l13214
  7287                           
  7288                           ;diag.c: 1709: {
  7289                           ;diag.c: 1711: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
  7290                           ;diag.c: 1712: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
  7291                           ;diag.c: 1713: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
  7292                           ;diag.c: 1714: ui8_b_DResB4_RD,
  7293                           ;diag.c: 1715: ui8_b_DResB5_RD );
  7294  0CCE  303A               	movlw	58
  7295  0CCF  0020               	movlb	0	; select bank0
  7296  0CD0  262A  3188         	fcall	PL2	;call to abstracted procedure
  7297  0CD2  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7298  0CD3                     l13214:	
  7299                           ;diag.c: 1718: }
  7300                           
  7301                           
  7302                           ;diag.c: 1721: else
  7303                           ;diag.c: 1722: {
  7304                           ;diag.c: 1724: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
  7305  0CD3  268F  3188         	fcall	PL16	;call to abstracted procedure
  7306  0CD5  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7307  0CD6                     l13216:	
  7308                           
  7309                           ;diag.c: 1948: {
  7310                           ;diag.c: 1952: NegativeAnswer(ui8_b_DResLocID_c);
  7311  0CD6  0862               	movf	_ui8_b_DResLocID_c,w
  7312  0CD7  2FC0               	ljmp	_NegativeAnswer
  7313  0CD8                     l13222:	
  7314                           
  7315                           ;diag.c: 1992: {
  7316                           ;diag.c: 1994: if( 0x9f == ui8_selected_lid )
  7317  0CD8  309F               	movlw	159
  7318  0CD9  0669               	xorwf	_ui8_selected_lid,w
  7319  0CDA  1D03               	btfss	3,2
  7320  0CDB  0008               	return
  7321                           
  7322                           ;diag.c: 1996: {
  7323                           ;diag.c: 2000: ui8_failure = ui8_b_DResB0_c;
  7324  0CDC  0861               	movf	_ui8_b_DResB0_c,w
  7325  0CDD  0022               	movlb	2	; select bank2
  7326  0CDE  00EF               	movwf	_ui8_failure^(0+256)
  7327                           
  7328                           ;diag.c: 2005: switch (ui8_failure)
  7329  0CDF  2D0B               	goto	l13294
  7330  0CE0                     l13226:	
  7331                           
  7332                           ;diag.c: 2098: {
  7333                           ;diag.c: 2102: PWM_Write_Out( 55 );
  7334  0CE0  3037               	movlw	55
  7335  0CE1  2622  3188         	fcall	_PWM_Write_Out
  7336                           
  7337                           ;diag.c: 2103: ui8_error_Flags.bits.B0 = 0;
  7338  0CE3  0020               	movlb	0	; select bank0
  7339  0CE4  3037               	movlw	55
  7340  0CE5  1065               	bcf	_ui8_error_Flags,0
  7341                           
  7342                           ;diag.c: 2104: ui8_error_Flags.bits.B1 = 0;
  7343  0CE6  10E5               	bcf	_ui8_error_Flags,1
  7344                           
  7345                           ;diag.c: 2105: ui8_error_Flags.bits.B7 = 0;
  7346  0CE7  13E5               	bcf	_ui8_error_Flags,7
  7347                           
  7348                           ;diag.c: 2106: ui8_error_Flags.bits.B2 = 0;
  7349  0CE8  1165               	bcf	_ui8_error_Flags,2
  7350                           
  7351                           ;diag.c: 2107: ui8_error_Flags.bits.B3 = 1;
  7352  0CE9  15E5               	bsf	_ui8_error_Flags,3
  7353                           
  7354                           ;diag.c: 2108: ui8_error_Flags.bits.B4 = 0;
  7355  0CEA  1265               	bcf	_ui8_error_Flags,4
  7356                           
  7357                           ;diag.c: 2109: ui8_error_Flags.bits.B6 = 0;
  7358  0CEB  1365               	bcf	_ui8_error_Flags,6
  7359                           
  7360                           ;diag.c: 2110: ui8_error_Flags.bits.B5 = 0;
  7361  0CEC  12E5               	bcf	_ui8_error_Flags,5
  7362                           
  7363                           ;diag.c: 2111: ui8_b_DResB1_RD = 55;
  7364  0CED  00D1               	movwf	EOL@ui8_b_DResB1_RD
  7365                           
  7366                           ;diag.c: 2112: ui8_b_DResB0_RD = 8;
  7367  0CEE  3008               	movlw	8
  7368  0CEF  00D0               	movwf	EOL@ui8_b_DResB0_RD
  7369                           
  7370                           ;diag.c: 2113: ui8_failure = 3;
  7371  0CF0  3003               	movlw	3
  7372  0CF1  0022               	movlb	2	; select bank2
  7373  0CF2  00EF               	movwf	_ui8_failure^(0+256)
  7374                           
  7375                           ;diag.c: 2114: break;
  7376  0CF3  2D13               	goto	l13296
  7377  0CF4                     l13250:	
  7378                           
  7379                           ;diag.c: 2151: {
  7380                           ;diag.c: 2155: PWM_Write_Out( 77 );
  7381  0CF4  304D               	movlw	77
  7382  0CF5  2622  3188         	fcall	_PWM_Write_Out
  7383                           
  7384                           ;diag.c: 2156: ui8_error_Flags.bits.B0 = 0;
  7385  0CF7  0020               	movlb	0	; select bank0
  7386  0CF8  304D               	movlw	77
  7387                           
  7388                           ;diag.c: 2157: ui8_error_Flags.bits.B1 = 0;
  7389                           
  7390                           ;diag.c: 2158: ui8_error_Flags.bits.B7 = 0;
  7391                           
  7392                           ;diag.c: 2159: ui8_error_Flags.bits.B2 = 0;
  7393                           
  7394                           ;diag.c: 2160: ui8_error_Flags.bits.B3 = 0;
  7395                           
  7396                           ;diag.c: 2161: ui8_error_Flags.bits.B4 = 0;
  7397                           
  7398                           ;diag.c: 2162: ui8_error_Flags.bits.B6 = 0;
  7399  0CF9  26C9  3188         	fcall	PL78	;call to abstracted procedure
  7400                           
  7401                           ;diag.c: 2163: ui8_error_Flags.bits.B5 = 1;
  7402  0CFB  16E5               	bsf	_ui8_error_Flags,5
  7403                           
  7404                           ;diag.c: 2165: ui8_b_DResB1_RD = 77;
  7405  0CFC  00D1               	movwf	EOL@ui8_b_DResB1_RD
  7406                           
  7407                           ;diag.c: 2166: ui8_b_DResB0_RD= 1;
  7408  0CFD  01D0               	clrf	EOL@ui8_b_DResB0_RD
  7409  0CFE  0AD0               	incf	EOL@ui8_b_DResB0_RD,f
  7410                           
  7411                           ;diag.c: 2167: ui8_failure = 1;
  7412  0CFF  0022               	movlb	2	; select bank2
  7413  0D00  01EF               	clrf	_ui8_failure^(0+256)
  7414  0D01  0AEF               	incf	_ui8_failure^(0+256),f
  7415                           
  7416                           ;diag.c: 2168: break;
  7417  0D02  2D13               	goto	l13296
  7418  0D03                     l13274:	
  7419                           
  7420                           ;diag.c: 2205: {
  7421                           ;diag.c: 2209: PWM_Write_Out( 11 );
  7422  0D03  300B               	movlw	11
  7423  0D04  2622  3188         	fcall	_PWM_Write_Out
  7424                           
  7425                           ;diag.c: 2210: ui8_error_Flags.bits.B0 = 0;
  7426  0D06  0020               	movlb	0	; select bank0
  7427                           
  7428                           ;diag.c: 2211: ui8_error_Flags.bits.B1 = 0;
  7429                           
  7430                           ;diag.c: 2212: ui8_error_Flags.bits.B7 = 0;
  7431                           
  7432                           ;diag.c: 2213: ui8_error_Flags.bits.B2 = 0;
  7433                           
  7434                           ;diag.c: 2214: ui8_error_Flags.bits.B3 = 0;
  7435                           
  7436                           ;diag.c: 2215: ui8_error_Flags.bits.B4 = 0;
  7437                           
  7438                           ;diag.c: 2216: ui8_error_Flags.bits.B6 = 0;
  7439  0D07  26C9  3188         	fcall	PL78	;call to abstracted procedure
  7440                           
  7441                           ;diag.c: 2217: ui8_error_Flags.bits.B5 = 0;
  7442  0D09  12E5               	bcf	_ui8_error_Flags,5
  7443                           
  7444                           ;diag.c: 2218: break;
  7445  0D0A  2D13               	goto	l13296
  7446  0D0B                     l13294:	
  7447  0D0B  086F               	movf	_ui8_failure^(0+256),w
  7448                           
  7449                           ; Switch size 1, requested type "space"
  7450                           ; Number of cases is 2, Range of values is 2 to 4
  7451                           ; switch strategies available:
  7452                           ; Name         Instructions Cycles
  7453                           ; simple_byte            7     4 (average)
  7454                           ; direct_byte           15     9 (fixed)
  7455                           ; jumptable            263     9 (fixed)
  7456                           ;	Chosen strategy is simple_byte
  7457  0D0C  3A02               	xorlw	2	; case 2
  7458  0D0D  1903               	skipnz
  7459  0D0E  2CF4               	goto	l13250
  7460  0D0F  3A06               	xorlw	6	; case 4
  7461  0D10  1903               	skipnz
  7462  0D11  2CE0               	goto	l13226
  7463  0D12  2D03               	goto	l13274
  7464  0D13                     l13296:	
  7465                           
  7466                           ;diag.c: 2231: ui8_b_DResB2_RD = 0;
  7467  0D13  0020               	movlb	0	; select bank0
  7468  0D14  303A               	movlw	58
  7469  0D15  01D2               	clrf	EOL@ui8_b_DResB2_RD
  7470                           
  7471                           ;diag.c: 2232: ui8_b_DResB3_RD = 0;
  7472  0D16  01D3               	clrf	EOL@ui8_b_DResB3_RD
  7473                           
  7474                           ;diag.c: 2233: ui8_b_DResB4_RD = 0;
  7475  0D17  01CF               	clrf	EOL@ui8_b_DResB4_RD
  7476                           
  7477                           ;diag.c: 2234: ui8_b_DResB5_RD = 0;
  7478  0D18  01CE               	clrf	EOL@ui8_b_DResB5_RD
  7479                           
  7480                           ;diag.c: 2237: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
  7481                           ;diag.c: 2238: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
  7482                           ;diag.c: 2239: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
  7483                           ;diag.c: 2240: ui8_b_DResB5_RD );
  7484  0D19  262A  3188         	fcall	PL2	;call to abstracted procedure
  7485  0D1B  2DB1               	ljmp	_Transmit_LIN_8Bytes
  7486  0D1C                     l13300:	
  7487                           ;diag.c: 2243: }
  7488                           
  7489                           
  7490                           ;diag.c: 2271: {
  7491                           ;diag.c: 2273: if( 0xa0 == ui8_selected_lid )
  7492  0D1C  30A0               	movlw	160
  7493  0D1D  0669               	xorwf	_ui8_selected_lid,w
  7494  0D1E  1D03               	btfss	3,2
  7495  0D1F  0008               	return
  7496                           
  7497                           ;diag.c: 2275: {
  7498                           ;diag.c: 2285: write_eeprom_data( 0xf4, ui8_b_DResB0_c );
  7499  0D20  0861               	movf	_ui8_b_DResB0_c,w
  7500  0D21  00AB               	movwf	write_eeprom_data@ui8_adress_data
  7501  0D22  30F4               	movlw	244
  7502  0D23  2598  3188         	fcall	_write_eeprom_data
  7503                           
  7504                           ;diag.c: 2286: write_eeprom_data( 0xf5, ui8_b_DResB1_c );
  7505  0D25  0021               	movlb	1	; select bank1
  7506  0D26  0856               	movf	_ui8_b_DResB1_c^(0+128),w
  7507  0D27  0020               	movlb	0	; select bank0
  7508  0D28  00AB               	movwf	write_eeprom_data@ui8_adress_data
  7509  0D29  30F5               	movlw	245
  7510  0D2A  2598  3188         	fcall	_write_eeprom_data
  7511                           
  7512                           ;diag.c: 2287: write_eeprom_data( 0xf6, ui8_b_DResB2_c );
  7513  0D2C  0021               	movlb	1	; select bank1
  7514  0D2D  0855               	movf	_ui8_b_DResB2_c^(0+128),w
  7515  0D2E  0020               	movlb	0	; select bank0
  7516  0D2F  00AB               	movwf	write_eeprom_data@ui8_adress_data
  7517  0D30  30F6               	movlw	246
  7518  0D31  2598  3188         	fcall	_write_eeprom_data
  7519                           
  7520                           ;diag.c: 2288: write_eeprom_data( 0xf7, ui8_b_DResB3_c );
  7521  0D33  0021               	movlb	1	; select bank1
  7522  0D34  0854               	movf	_ui8_b_DResB3_c^(0+128),w
  7523  0D35  0020               	movlb	0	; select bank0
  7524  0D36  00AB               	movwf	write_eeprom_data@ui8_adress_data
  7525  0D37  30F7               	movlw	247
  7526  0D38  2598  3188         	fcall	_write_eeprom_data
  7527                           
  7528                           ;diag.c: 2289: write_eeprom_data( 0xf8, ui8_b_DResB4_c );
  7529  0D3A  0021               	movlb	1	; select bank1
  7530  0D3B  0853               	movf	_ui8_b_DResB4_c^(0+128),w
  7531  0D3C  0020               	movlb	0	; select bank0
  7532  0D3D  00AB               	movwf	write_eeprom_data@ui8_adress_data
  7533  0D3E  30F8               	movlw	248
  7534  0D3F  2598  3188         	fcall	_write_eeprom_data
  7535                           
  7536                           ;diag.c: 2301: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
  7537  0D41  30F4               	movlw	244
  7538  0D42  258D  3188         	fcall	_read_eeprom_data
  7539  0D44  00D0               	movwf	EOL@ui8_b_DResB0_RD
  7540                           
  7541                           ;diag.c: 2302: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
  7542  0D45  30F5               	movlw	245
  7543  0D46  258D  3188         	fcall	_read_eeprom_data
  7544  0D48  00D1               	movwf	EOL@ui8_b_DResB1_RD
  7545                           
  7546                           ;diag.c: 2303: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
  7547  0D49  30F6               	movlw	246
  7548  0D4A  258D  3188         	fcall	_read_eeprom_data
  7549  0D4C  00D2               	movwf	EOL@ui8_b_DResB2_RD
  7550                           
  7551                           ;diag.c: 2304: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
  7552  0D4D  30F7               	movlw	247
  7553  0D4E  258D  3188         	fcall	_read_eeprom_data
  7554  0D50  00D3               	movwf	EOL@ui8_b_DResB3_RD
  7555                           
  7556                           ;diag.c: 2305: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
  7557  0D51  30F8               	movlw	248
  7558  0D52  258D  3188         	fcall	_read_eeprom_data
  7559  0D54  00CF               	movwf	EOL@ui8_b_DResB4_RD
  7560                           
  7561                           ;diag.c: 2306: ui8_b_DResB5_RD = 0;
  7562  0D55  01CE               	clrf	EOL@ui8_b_DResB5_RD
  7563                           
  7564                           ;diag.c: 2309: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DRes
      +                          B2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF))
  7565  0D56  0A50               	incf	EOL@ui8_b_DResB0_RD,w
  7566  0D57  1903               	btfsc	3,2
  7567  0D58  2D6A               	goto	l13328
  7568  0D59  0A51               	incf	EOL@ui8_b_DResB1_RD,w
  7569  0D5A  1903               	btfsc	3,2
  7570  0D5B  2D6A               	goto	l13328
  7571  0D5C  0A52               	incf	EOL@ui8_b_DResB2_RD,w
  7572  0D5D  1903               	btfsc	3,2
  7573  0D5E  2D6A               	goto	l13328
  7574  0D5F  0A53               	incf	EOL@ui8_b_DResB3_RD,w
  7575  0D60  1903               	btfsc	3,2
  7576  0D61  2D6A               	goto	l13328
  7577  0D62  0A4F               	incf	EOL@ui8_b_DResB4_RD,w
  7578  0D63  1903               	btfsc	3,2
  7579  0D64  2D6A               	goto	l13328
  7580                           
  7581                           ;diag.c: 2311: {
  7582                           ;diag.c: 2313: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
  7583  0D65  303A               	movlw	58
  7584  0D66  00AF               	movwf	Transmit_LIN_8Bytes@B0
  7585  0D67  263A  3188         	fcall	PL4	;call to abstracted procedure
  7586  0D69  2D6F               	goto	L17
  7587  0D6A                     l13328:	
  7588                           ;diag.c: 2316: }
  7589                           
  7590                           
  7591                           ;diag.c: 2319: else
  7592                           ;diag.c: 2320: {
  7593                           ;diag.c: 2322: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF,0xFF
      +                          , 0xFF, 0xFF );
  7594  0D6A  307F               	movlw	127
  7595  0D6B  00AF               	movwf	Transmit_LIN_8Bytes@B0
  7596  0D6C  0862               	movf	_ui8_b_DResLocID_c,w
  7597  0D6D  269D  3188         	fcall	PL22	;call to abstracted procedure
  7598  0D6F                     L17:	
  7599  0D6F  00B6               	movwf	Transmit_LIN_8Bytes@B7
  7600  0D70  3010               	movlw	16
  7601  0D71  25B1               	fcall	_Transmit_LIN_8Bytes
  7602                           
  7603                           ;diag.c: 2332: }
  7604                           ;diag.c: 2336: ui8_selected_lid = 0xfa;
  7605  0D72  30FA               	movlw	250
  7606  0D73  0020               	movlb	0	; select bank0
  7607  0D74  00E9               	movwf	_ui8_selected_lid
  7608                           
  7609                           ;diag.c: 2339: }
  7610  0D75  0008               	return
  7611  0D76                     l13332:	
  7612                           
  7613                           ;diag.c: 2365: {
  7614                           ;diag.c: 2367: if( 0xfa == ui8_selected_lid )
  7615  0D76  30FA               	movlw	250
  7616  0D77  0669               	xorwf	_ui8_selected_lid,w
  7617  0D78  1D03               	btfss	3,2
  7618  0D79  0008               	return
  7619                           
  7620                           ;diag.c: 2369: {
  7621                           ;diag.c: 2371: Transmit_LIN_8Bytes( 0x10, 0x3a, ui8_b_DResLocID_c, 0x00, 0x00, 0x00, 0x0
      +                          0, 0x00, 0x00 );
  7622  0D7A  303A               	movlw	58
  7623  0D7B  00AF               	movwf	Transmit_LIN_8Bytes@B0
  7624  0D7C  0862               	movf	_ui8_b_DResLocID_c,w
  7625  0D7D  26C0  3188         	fcall	PL74	;call to abstracted procedure
  7626  0D7F  25B1  3188         	fcall	_Transmit_LIN_8Bytes
  7627                           
  7628                           ;diag.c: 2372: write_eeprom_data(0x55,0x55);
  7629  0D81  3055               	movlw	85
  7630  0D82  0020               	movlb	0	; select bank0
  7631  0D83  00AB               	movwf	write_eeprom_data@ui8_adress_data
  7632  0D84  2598               	fcall	_write_eeprom_data
  7633                           
  7634                           ;diag.c: 2373: RC5 = 0;
  7635  0D85  0020               	movlb	0	; select bank0
  7636  0D86  128E               	bcf	14,5	;volatile
  7637                           
  7638                           ;diag.c: 2375: }
  7639  0D87  0008               	return
  7640  0D88                     l13340:	
  7641                           
  7642                           ;diag.c: 2399: {
  7643                           ;diag.c: 2405: NegativeAnswer(ui8_selected_lid);
  7644  0D88  0869               	movf	_ui8_selected_lid,w
  7645  0D89  2FC0               	ljmp	_NegativeAnswer
  7646  0D8A                     l13346:	
  7647                           
  7648                           ;diag.c: 2417: else
  7649                           ;diag.c: 2418: {
  7650                           ;diag.c: 2424: NegativeAnswer(ui8_selected_lid);
  7651  0D8A  0020               	movlb	0	; select bank0
  7652  0D8B  0869               	movf	_ui8_selected_lid,w
  7653  0D8C  2FC0               	ljmp	_NegativeAnswer
  7654  0D8D                     __end_of_EOL:	
  7655  0D8D                     __ptext26:	
  7656 ;; *************** function _read_eeprom_data *****************
  7657 ;; Defined at:
  7658 ;;		line 52 in file "../eeprom.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  ui8_adress      1    wreg     unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  ui8_adress      1    4[BANK0 ] unsigned char 
  7663 ;;  ui8_adress_d    1    5[BANK0 ] unsigned char 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      unsigned char 
  7666 ;; Registers used:
  7667 ;;		wreg
  7668 ;; Tracked objects:
  7669 ;;		On entry : 1C/2
  7670 ;;		On exit  : 1F/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7673 ;;      Params:         0       0       0       0       0       0       0       0
  7674 ;;      Locals:         0       2       0       0       0       0       0       0
  7675 ;;      Temps:          0       0       0       0       0       0       0       0
  7676 ;;      Totals:         0       2       0       0       0       0       0       0
  7677 ;;Total ram usage:        2 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    3
  7680 ;; This function calls:
  7681 ;;		Nothing
  7682 ;; This function is called by:
  7683 ;;		_EOL
  7684 ;;		_I_calibrationInit
  7685 ;;		_init_ports
  7686 ;;		_main
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           
  7691                           ;psect for function _read_eeprom_data
  7692  0D8D                     _read_eeprom_data:	
  7693                           
  7694                           ;incstack = 0
  7695                           ; Regs used in _read_eeprom_data: [wreg]
  7696                           ;read_eeprom_data@ui8_adress stored from wreg
  7697  0D8D  0020               	movlb	0	; select bank0
  7698  0D8E  00A4               	movwf	read_eeprom_data@ui8_adress
  7699                           
  7700                           ;eeprom.c: 56: unsigned char ui8_adress_data;
  7701                           ;eeprom.c: 58: EEADRL = ui8_adress;
  7702  0D8F  0023               	movlb	3	; select bank3
  7703  0D90  0091               	movwf	17	;volatile
  7704                           
  7705                           ;eeprom.c: 59: EEPGD = 0;
  7706  0D91  1395               	bcf	21,7	;volsfr
  7707                           
  7708                           ;eeprom.c: 60: CFGS = 0;
  7709  0D92  1315               	bcf	21,6	;volsfr
  7710                           
  7711                           ;eeprom.c: 61: RD = 1;
  7712  0D93  1415               	bsf	21,0	;volsfr
  7713                           
  7714                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  7715  0D94  0813               	movf	19,w	;volatile
  7716  0D95  0020               	movlb	0	; select bank0
  7717  0D96  00A5               	movwf	read_eeprom_data@ui8_adress_data
  7718                           
  7719                           ;eeprom.c: 64: return ui8_adress_data;
  7720  0D97  0008               	return
  7721  0D98                     __end_of_read_eeprom_data:	
  7722  0D98                     __ptext25:	
  7723 ;; *************** function _write_eeprom_data *****************
  7724 ;; Defined at:
  7725 ;;		line 83 in file "../eeprom.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  ui8_adress      1    wreg     unsigned char 
  7728 ;;  ui8_adress_d    1   11[BANK0 ] unsigned char 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;  ui8_adress      1   12[BANK0 ] unsigned char 
  7731 ;; Return value:  Size  Location     Type
  7732 ;;                  1    wreg      void 
  7733 ;; Registers used:
  7734 ;;		wreg
  7735 ;; Tracked objects:
  7736 ;;		On entry : 1F/0
  7737 ;;		On exit  : 1F/3
  7738 ;;		Unchanged: 0/0
  7739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7740 ;;      Params:         0       1       0       0       0       0       0       0
  7741 ;;      Locals:         0       1       0       0       0       0       0       0
  7742 ;;      Temps:          0       0       0       0       0       0       0       0
  7743 ;;      Totals:         0       2       0       0       0       0       0       0
  7744 ;;Total ram usage:        2 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:    3
  7747 ;; This function calls:
  7748 ;;		Nothing
  7749 ;; This function is called by:
  7750 ;;		_EOL
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           
  7755                           ;psect for function _write_eeprom_data
  7756  0D98                     _write_eeprom_data:	
  7757                           
  7758                           ;incstack = 0
  7759                           ; Regs used in _write_eeprom_data: [wreg]
  7760                           ;write_eeprom_data@ui8_adress stored from wreg
  7761  0D98  00AC               	movwf	write_eeprom_data@ui8_adress
  7762                           
  7763                           ;eeprom.c: 89: EEADRL = ui8_adress;
  7764  0D99  0023               	movlb	3	; select bank3
  7765  0D9A  0091               	movwf	17	;volatile
  7766                           
  7767                           ;eeprom.c: 90: EEDATL = ui8_adress_data;
  7768  0D9B  0020               	movlb	0	; select bank0
  7769  0D9C  082B               	movf	write_eeprom_data@ui8_adress_data,w
  7770  0D9D  0023               	movlb	3	; select bank3
  7771  0D9E  0093               	movwf	19	;volatile
  7772                           
  7773                           ;eeprom.c: 91: CFGS = 0;
  7774  0D9F  1315               	bcf	21,6	;volsfr
  7775                           
  7776                           ;eeprom.c: 92: EEPGD = 0;
  7777  0DA0  1395               	bcf	21,7	;volsfr
  7778                           
  7779                           ;eeprom.c: 93: WREN = 1;
  7780  0DA1  1515               	bsf	21,2	;volsfr
  7781                           
  7782                           ;eeprom.c: 95: GIE = 0;
  7783  0DA2  138B               	bcf	11,7	;volatile
  7784                           
  7785                           ;eeprom.c: 96: EECON2 = 0x55;
  7786  0DA3  3055               	movlw	85
  7787  0DA4  0096               	movwf	22	;volsfr
  7788                           
  7789                           ;eeprom.c: 97: EECON2 = 0xAA;
  7790  0DA5  30AA               	movlw	170
  7791  0DA6  0096               	movwf	22	;volsfr
  7792                           
  7793                           ;eeprom.c: 98: WR = 1;
  7794  0DA7  1495               	bsf	21,1	;volsfr
  7795                           
  7796                           ;eeprom.c: 99: GIE = 1;
  7797  0DA8  178B               	bsf	11,7	;volatile
  7798                           
  7799                           ;eeprom.c: 100: WREN = 0;
  7800  0DA9  1115               	bcf	21,2	;volsfr
  7801  0DAA                     l751:	
  7802                           ;eeprom.c: 103: while( WR )
  7803                           
  7804  0DAA  0023               	movlb	3	; select bank3
  7805  0DAB  1895               	btfsc	21,1	;volsfr
  7806  0DAC  2DAE               	goto	l752
  7807  0DAD  0008               	return
  7808  0DAE                     l752:	
  7809  0DAE  0000               	nop	;# 
  7810  0DAF  0000               	nop	;# 
  7811  0DB0  2DAA               	goto	l751
  7812  0DB1                     __end_of_write_eeprom_data:	
  7813  0DB1                     __ptext34:	
  7814 ;; *************** function _Transmit_LIN_8Bytes *****************
  7815 ;; Defined at:
  7816 ;;		line 167 in file "../lin.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  ID              1    wreg     unsigned char 
  7819 ;;  B0              1   15[BANK0 ] unsigned char 
  7820 ;;  B1              1   16[BANK0 ] unsigned char 
  7821 ;;  B2              1   17[BANK0 ] unsigned char 
  7822 ;;  B3              1   18[BANK0 ] unsigned char 
  7823 ;;  B4              1   19[BANK0 ] unsigned char 
  7824 ;;  B5              1   20[BANK0 ] unsigned char 
  7825 ;;  B6              1   21[BANK0 ] unsigned char 
  7826 ;;  B7              1   22[BANK0 ] unsigned char 
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;  ID              1   23[BANK0 ] unsigned char 
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  1    wreg      void 
  7831 ;; Registers used:
  7832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 1F/0
  7835 ;;		On exit  : 1F/1
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7838 ;;      Params:         0       8       0       0       0       0       0       0
  7839 ;;      Locals:         0       1       0       0       0       0       0       0
  7840 ;;      Temps:          0       0       0       0       0       0       0       0
  7841 ;;      Totals:         0       9       0       0       0       0       0       0
  7842 ;;Total ram usage:        9 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    5
  7845 ;; This function calls:
  7846 ;;		__ELINMIntGetPointer
  7847 ;;		__ELINMIntSendMessage
  7848 ;; This function is called by:
  7849 ;;		_EOL
  7850 ;;		_NegativeAnswer
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _Transmit_LIN_8Bytes
  7856  0DB1                     _Transmit_LIN_8Bytes:	
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _Transmit_LIN_8Bytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7860                           ;Transmit_LIN_8Bytes@ID stored from wreg
  7861  0DB1  00B7               	movwf	Transmit_LIN_8Bytes@ID
  7862  0DB2                     l895:	
  7863                           ;lin.c: 179: {
  7864                           ;lin.c: 180: ;
  7865                           
  7866  0DB2  1DE0               	btfss	__ELINMIntStatus,3
  7867  0DB3  2DB2               	goto	l895
  7868                           
  7869                           ;lin.c: 181: }
  7870                           ;lin.c: 182: pt = _ELINMIntGetPointer ( 5, 2 );
  7871  0DB4  3002               	movlw	2
  7872  0DB5  00A4               	movwf	__ELINMIntGetPointer@_ELINMInt_position
  7873  0DB6  3005               	movlw	5
  7874  0DB7  2627  3188         	fcall	__ELINMIntGetPointer
  7875  0DB9  00DF               	movwf	_pt
  7876                           
  7877                           ;lin.c: 183: *pt++ = B0;
  7878  0DBA  0086               	movwf	6
  7879  0DBB  3002               	movlw	2	; select bank4/5
  7880  0DBC  0087               	movwf	7
  7881  0DBD  082F               	movf	Transmit_LIN_8Bytes@B0,w
  7882  0DBE  0081               	movwf	1
  7883  0DBF  0ADF               	incf	_pt,f
  7884                           
  7885                           ;lin.c: 184: *pt++ = B1;
  7886  0DC0  085F               	movf	_pt,w
  7887  0DC1  0086               	movwf	6
  7888  0DC2  0830               	movf	Transmit_LIN_8Bytes@B1,w
  7889  0DC3  0081               	movwf	1
  7890  0DC4  0ADF               	incf	_pt,f
  7891                           
  7892                           ;lin.c: 185: *pt++ = B2;
  7893  0DC5  085F               	movf	_pt,w
  7894  0DC6  0086               	movwf	6
  7895  0DC7  0831               	movf	Transmit_LIN_8Bytes@B2,w
  7896  0DC8  0081               	movwf	1
  7897  0DC9  0ADF               	incf	_pt,f
  7898                           
  7899                           ;lin.c: 186: *pt++ = B3;
  7900  0DCA  085F               	movf	_pt,w
  7901  0DCB  0086               	movwf	6
  7902  0DCC  0832               	movf	Transmit_LIN_8Bytes@B3,w
  7903  0DCD  0081               	movwf	1
  7904  0DCE  0ADF               	incf	_pt,f
  7905                           
  7906                           ;lin.c: 187: *pt++ = B4;
  7907  0DCF  085F               	movf	_pt,w
  7908  0DD0  0086               	movwf	6
  7909  0DD1  0833               	movf	Transmit_LIN_8Bytes@B4,w
  7910  0DD2  0081               	movwf	1
  7911  0DD3  0ADF               	incf	_pt,f
  7912                           
  7913                           ;lin.c: 188: *pt++ = B5;
  7914  0DD4  085F               	movf	_pt,w
  7915  0DD5  0086               	movwf	6
  7916  0DD6  0834               	movf	Transmit_LIN_8Bytes@B5,w
  7917  0DD7  0081               	movwf	1
  7918  0DD8  0ADF               	incf	_pt,f
  7919                           
  7920                           ;lin.c: 189: *pt++ = B6;
  7921  0DD9  085F               	movf	_pt,w
  7922  0DDA  0086               	movwf	6
  7923  0DDB  0835               	movf	Transmit_LIN_8Bytes@B6,w
  7924  0DDC  0081               	movwf	1
  7925  0DDD  0ADF               	incf	_pt,f
  7926                           
  7927                           ;lin.c: 190: *pt++ = B7;
  7928  0DDE  085F               	movf	_pt,w
  7929  0DDF  0086               	movwf	6
  7930  0DE0  0836               	movf	Transmit_LIN_8Bytes@B7,w
  7931  0DE1  0081               	movwf	1
  7932  0DE2  3008               	movlw	8
  7933  0DE3  0ADF               	incf	_pt,f
  7934                           
  7935                           ;lin.c: 192: _ELINMIntSendMessage ( ID, 8, ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) * ( 100L * 
      +                          1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) + 1L ) * 
      +                          14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  7936  0DE4  00A5               	movwf	__ELINMIntSendMessage@_ELINM_size
  7937  0DE5  3055               	movlw	85
  7938  0DE6  00A6               	movwf	__ELINMIntSendMessage@_ELINM_fmin
  7939  0DE7  3077               	movlw	119
  7940  0DE8  01A7               	clrf	__ELINMIntSendMessage@_ELINM_fmin+1
  7941  0DE9  00A8               	movwf	__ELINMIntSendMessage@_ELINM_fmax
  7942  0DEA  01A9               	clrf	__ELINMIntSendMessage@_ELINM_fmax+1
  7943  0DEB  0837               	movf	Transmit_LIN_8Bytes@ID,w
  7944  0DEC  3184  2435         	fcall	__ELINMIntSendMessage
  7945                           
  7946                           ;lin.c: 193: if( ( ErrorCode = ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  7947  0DEE  0860               	movf	__ELINMIntStatus,w
  7948  0DEF  0021               	movlb	1	; select bank1
  7949  0DF0  00CB               	movwf	_ErrorCode^(0+128)
  7950  0DF1  30F0               	movlw	240
  7951  0DF2  05CB               	andwf	_ErrorCode^(0+128),f
  7952  0DF3  0008               	return
  7953  0DF4                     __end_of_Transmit_LIN_8Bytes:	
  7954  0DF4                     __ptext39:	
  7955 ;; *************** function _ADC_Wait *****************
  7956 ;; Defined at:
  7957 ;;		line 128 in file "../adc.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;		None
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      void 
  7964 ;; Registers used:
  7965 ;;		None
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/2
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7971 ;;      Params:         0       0       0       0       0       0       0       0
  7972 ;;      Locals:         0       0       0       0       0       0       0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0       0
  7974 ;;      Totals:         0       0       0       0       0       0       0       0
  7975 ;;Total ram usage:        0 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    3
  7978 ;; This function calls:
  7979 ;;		Nothing
  7980 ;; This function is called by:
  7981 ;;		_FILTER_Init
  7982 ;;		_EOL
  7983 ;;		_I_calibrationInit
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           
  7988                           ;psect for function _ADC_Wait
  7989  0DF4                     _ADC_Wait:	
  7990                           
  7991                           ;adc.c: 133: __nop();
  7992                           
  7993                           ;incstack = 0
  7994                           ; Regs used in _ADC_Wait: []
  7995  0DF4  0000               	nop
  7996                           
  7997                           ;adc.c: 134: __nop();
  7998  0DF5  0000               	nop
  7999                           
  8000                           ;adc.c: 135: __nop();
  8001  0DF6  0000               	nop
  8002                           
  8003                           ;adc.c: 136: __nop();
  8004  0DF7  0000               	nop
  8005                           
  8006                           ;adc.c: 137: __nop();
  8007  0DF8  0000               	nop
  8008                           
  8009                           ;adc.c: 138: __nop();
  8010  0DF9  0000               	nop
  8011                           
  8012                           ;adc.c: 139: __nop();
  8013  0DFA  0000               	nop
  8014                           
  8015                           ;adc.c: 140: __nop();
  8016  0DFB  0000               	nop
  8017                           
  8018                           ;adc.c: 142: __nop();
  8019  0DFC  0000               	nop
  8020                           
  8021                           ;adc.c: 143: __nop();
  8022  0DFD  0000               	nop
  8023                           
  8024                           ;adc.c: 144: __nop();
  8025  0DFE  0000               	nop
  8026                           
  8027                           ;adc.c: 145: __nop();
  8028  0DFF  0000               	nop
  8029                           
  8030                           ;adc.c: 146: __nop();
  8031  0E00  0000               	nop
  8032                           
  8033                           ;adc.c: 147: __nop();
  8034  0E01  0000               	nop
  8035                           
  8036                           ;adc.c: 148: __nop();
  8037  0E02  0000               	nop
  8038                           
  8039                           ;adc.c: 149: __nop();
  8040  0E03  0000               	nop
  8041                           
  8042                           ;adc.c: 151: __nop();
  8043  0E04  0000               	nop
  8044                           
  8045                           ;adc.c: 152: __nop();
  8046  0E05  0000               	nop
  8047                           
  8048                           ;adc.c: 153: __nop();
  8049  0E06  0000               	nop
  8050                           
  8051                           ;adc.c: 154: __nop();
  8052  0E07  0000               	nop
  8053                           
  8054                           ;adc.c: 155: __nop();
  8055  0E08  0000               	nop
  8056                           
  8057                           ;adc.c: 156: __nop();
  8058  0E09  0000               	nop
  8059                           
  8060                           ;adc.c: 157: __nop();
  8061  0E0A  0000               	nop
  8062                           
  8063                           ;adc.c: 158: __nop();
  8064  0E0B  0000               	nop
  8065  0E0C  0008               	return
  8066  0E0D                     __end_of_ADC_Wait:	
  8067  0E0D                     __ptext42:	
  8068 ;; *************** function ___wmul *****************
  8069 ;; Defined at:
  8070 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  multiplier      2    4[BANK0 ] unsigned int 
  8073 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  product         2    8[BANK0 ] unsigned int 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  2    4[BANK0 ] unsigned int 
  8078 ;; Registers used:
  8079 ;;		wreg, status,2, status,0
  8080 ;; Tracked objects:
  8081 ;;		On entry : 1F/0
  8082 ;;		On exit  : 1F/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8085 ;;      Params:         0       4       0       0       0       0       0       0
  8086 ;;      Locals:         0       2       0       0       0       0       0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0       0
  8088 ;;      Totals:         0       6       0       0       0       0       0       0
  8089 ;;Total ram usage:        6 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    3
  8092 ;; This function calls:
  8093 ;;		Nothing
  8094 ;; This function is called by:
  8095 ;;		_EOL
  8096 ;;		_interrrupt_bldc
  8097 ;;		_BVH2_Appl_Layer
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           
  8102                           ;psect for function ___wmul
  8103  0E0D                     ___wmul:	
  8104                           
  8105                           ;incstack = 0
  8106                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8107  0E0D  01A8               	clrf	___wmul@product
  8108  0E0E  01A9               	clrf	___wmul@product+1
  8109  0E0F                     l12438:	
  8110  0E0F  1C24               	btfss	___wmul@multiplier,0
  8111  0E10  2E15               	goto	l12442
  8112  0E11  0826               	movf	___wmul@multiplicand,w
  8113  0E12  07A8               	addwf	___wmul@product,f
  8114  0E13  0827               	movf	___wmul@multiplicand+1,w
  8115  0E14  3DA9               	addwfc	___wmul@product+1,f
  8116  0E15                     l12442:	
  8117  0E15  35A6               	lslf	___wmul@multiplicand,f
  8118  0E16  0DA7               	rlf	___wmul@multiplicand+1,f
  8119  0E17  36A5               	lsrf	___wmul@multiplier+1,f
  8120  0E18  0CA4               	rrf	___wmul@multiplier,f
  8121  0E19  0824               	movf	___wmul@multiplier,w
  8122  0E1A  0425               	iorwf	___wmul@multiplier+1,w
  8123  0E1B  1D03               	btfss	3,2
  8124  0E1C  2E0F               	goto	l12438
  8125  0E1D  0829               	movf	___wmul@product+1,w
  8126  0E1E  00A5               	movwf	?___wmul+1
  8127  0E1F  0828               	movf	___wmul@product,w
  8128  0E20  00A4               	movwf	?___wmul
  8129  0E21  0008               	return
  8130  0E22                     __end_of___wmul:	
  8131  0E22                     __ptext29:	
  8132 ;; *************** function _PWM_Write_Out *****************
  8133 ;; Defined at:
  8134 ;;		line 340 in file "../pwm.c"
  8135 ;; Parameters:    Size  Location     Type
  8136 ;;  ui8_DutyCycl    1    wreg     unsigned char 
  8137 ;; Auto vars:     Size  Location     Type
  8138 ;;  ui8_DutyCycl    1    4[BANK0 ] unsigned char 
  8139 ;; Return value:  Size  Location     Type
  8140 ;;                  1    wreg      void 
  8141 ;; Registers used:
  8142 ;;		wreg
  8143 ;; Tracked objects:
  8144 ;;		On entry : 1C/0
  8145 ;;		On exit  : 1F/2
  8146 ;;		Unchanged: 0/0
  8147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8148 ;;      Params:         0       0       0       0       0       0       0       0
  8149 ;;      Locals:         0       1       0       0       0       0       0       0
  8150 ;;      Temps:          0       0       0       0       0       0       0       0
  8151 ;;      Totals:         0       1       0       0       0       0       0       0
  8152 ;;Total ram usage:        1 bytes
  8153 ;; Hardware stack levels used:    1
  8154 ;; Hardware stack levels required when called:    3
  8155 ;; This function calls:
  8156 ;;		Nothing
  8157 ;; This function is called by:
  8158 ;;		_DiagInit
  8159 ;;		_SetDiagAlarm
  8160 ;;		_EOL
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           
  8165                           ;psect for function _PWM_Write_Out
  8166  0E22                     _PWM_Write_Out:	
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in _PWM_Write_Out: [wreg]
  8170                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
  8171  0E22  0020               	movlb	0	; select bank0
  8172  0E23  00A4               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
  8173                           
  8174                           ;pwm.c: 344: ui8_PWMoutvalue = ui8_DutyCycle_Out;
  8175  0E24  0022               	movlb	2	; select bank2
  8176  0E25  00D5               	movwf	_ui8_PWMoutvalue^(0+256)
  8177  0E26  0008               	return
  8178  0E27                     __end_of_PWM_Write_Out:	
  8179  0E27                     __ptext37:	
  8180 ;; *************** function __ELINMIntGetPointer *****************
  8181 ;; Defined at:
  8182 ;;		line 1375 in file "../lin.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  _ELINMInt_ta    1    wreg     unsigned char 
  8185 ;;  _ELINMInt_po    1    4[BANK0 ] unsigned char 
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  _ELINMInt_ta    1    5[BANK0 ] unsigned char 
  8188 ;; Return value:  Size  Location     Type
  8189 ;;                  1    wreg      PTR unsigned char 
  8190 ;; Registers used:
  8191 ;;		wreg, status,2, status,0
  8192 ;; Tracked objects:
  8193 ;;		On entry : 1F/0
  8194 ;;		On exit  : 1F/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8197 ;;      Params:         0       1       0       0       0       0       0       0
  8198 ;;      Locals:         0       1       0       0       0       0       0       0
  8199 ;;      Temps:          0       0       0       0       0       0       0       0
  8200 ;;      Totals:         0       2       0       0       0       0       0       0
  8201 ;;Total ram usage:        2 bytes
  8202 ;; Hardware stack levels used:    1
  8203 ;; Hardware stack levels required when called:    3
  8204 ;; This function calls:
  8205 ;;		Nothing
  8206 ;; This function is called by:
  8207 ;;		_Transmit_LIN_8Bytes
  8208 ;;		_Receive_Diag
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           
  8213                           ;psect for function __ELINMIntGetPointer
  8214  0E27                     __ELINMIntGetPointer:	
  8215                           
  8216                           ;lin.c: 1382: return ( ( BYTE * )& _ELINMIntMessageBuffer[ _ELINMInt_position ] );
  8217                           
  8218                           ;incstack = 0
  8219                           ; Regs used in __ELINMIntGetPointer: [wreg+status,2+status,0]
  8220  0E27  0824               	movf	__ELINMIntGetPointer@_ELINMInt_position,w
  8221  0E28  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
  8222  0E29  0008               	return
  8223  0E2A                     __end_of__ELINMIntGetPointer:	
  8224  0E2A                     PL2:	
  8225  0E2A  00AF               	movwf	Transmit_LIN_8Bytes@B0
  8226  0E2B  0862               	movf	_ui8_b_DResLocID_c,w
  8227  0E2C  00B0               	movwf	Transmit_LIN_8Bytes@B1
  8228  0E2D  0850               	movf	EOL@ui8_b_DResB0_RD,w
  8229  0E2E  00B1               	movwf	Transmit_LIN_8Bytes@B2
  8230  0E2F  0851               	movf	EOL@ui8_b_DResB1_RD,w
  8231  0E30  00B2               	movwf	Transmit_LIN_8Bytes@B3
  8232  0E31  0852               	movf	EOL@ui8_b_DResB2_RD,w
  8233  0E32  00B3               	movwf	Transmit_LIN_8Bytes@B4
  8234  0E33  0853               	movf	EOL@ui8_b_DResB3_RD,w
  8235  0E34  00B4               	movwf	Transmit_LIN_8Bytes@B5
  8236  0E35  084F               	movf	EOL@ui8_b_DResB4_RD,w
  8237  0E36  00B5               	movwf	Transmit_LIN_8Bytes@B6
  8238  0E37  084E               	movf	EOL@ui8_b_DResB5_RD,w
  8239  0E38  00B6               	movwf	Transmit_LIN_8Bytes@B7
  8240  0E39  3410               	retlw	16
  8241  0E3A                     __end_ofPL2:	
  8242  0E3A                     PL4:	
  8243  0E3A  0862               	movf	_ui8_b_DResLocID_c,w
  8244  0E3B  00B0               	movwf	Transmit_LIN_8Bytes@B1
  8245  0E3C  0850               	movf	EOL@ui8_b_DResB0_RD,w
  8246  0E3D  00B1               	movwf	Transmit_LIN_8Bytes@B2
  8247  0E3E  0851               	movf	EOL@ui8_b_DResB1_RD,w
  8248  0E3F  00B2               	movwf	Transmit_LIN_8Bytes@B3
  8249  0E40  0852               	movf	EOL@ui8_b_DResB2_RD,w
  8250  0E41  00B3               	movwf	Transmit_LIN_8Bytes@B4
  8251  0E42  0853               	movf	EOL@ui8_b_DResB3_RD,w
  8252  0E43  00B4               	movwf	Transmit_LIN_8Bytes@B5
  8253  0E44  084F               	movf	EOL@ui8_b_DResB4_RD,w
  8254  0E45  00B5               	movwf	Transmit_LIN_8Bytes@B6
  8255  0E46  084E               	movf	EOL@ui8_b_DResB5_RD,w
  8256  0E47  0008               	return
  8257  0E48                     __end_ofPL4:	
  8258  0E48                     PL6:	
  8259  0E48  0824               	movf	?___wmul,w
  8260  0E49  00B9               	movwf	??_EOL
  8261  0E4A  0825               	movf	?___wmul+1,w
  8262  0E4B  00BA               	movwf	??_EOL+1
  8263  0E4C  36BA               	lsrf	??_EOL+1,f
  8264  0E4D  0CB9               	rrf	??_EOL,f
  8265  0E4E  36BA               	lsrf	??_EOL+1,f
  8266  0E4F  0CB9               	rrf	??_EOL,f
  8267  0E50  0839               	movf	??_EOL,w
  8268  0E51  00D2               	movwf	EOL@ui8_b_DResB2_RD
  8269  0E52  0851               	movf	EOL@ui8_b_DResB1_RD,w
  8270  0E53  3E00               	addlw	low (_PWM_trans_table| (0+32768))
  8271  0E54  0084               	movwf	4
  8272  0E55  3098               	movlw	high (_PWM_trans_table| (0+32768))
  8273  0E56  1803               	skipnc
  8274  0E57  3E01               	addlw	1
  8275  0E58  0085               	movwf	5
  8276  0E59  0800               	movf	0,w	;code access
  8277  0E5A  00D3               	movwf	EOL@ui8_b_DResB3_RD
  8278  0E5B  01CF               	clrf	EOL@ui8_b_DResB4_RD
  8279  0E5C  01CE               	clrf	EOL@ui8_b_DResB5_RD
  8280  0E5D  3E03               	addlw	3
  8281  0E5E  00B9               	movwf	??_EOL
  8282  0E5F  3000               	movlw	0
  8283  0E60  1803               	skipnc
  8284  0E61  3001               	movlw	1
  8285  0E62  00BA               	movwf	??_EOL+1
  8286  0E63  3A80               	xorlw	128
  8287  0E64  3C80               	sublw	128
  8288  0E65  1D03               	skipz
  8289  0E66  0008               	return
  8290  0E67  0839               	movf	??_EOL,w
  8291  0E68  0252               	subwf	EOL@ui8_b_DResB2_RD,w
  8292  0E69  0008               	return
  8293  0E6A                     __end_ofPL6:	
  8294  0E6A                     PL10:	
  8295  0E6A  0020               	movlb	0	; select bank0
  8296  0E6B  0853               	movf	EOL@ui8_b_DResB3_RD,w
  8297  0E6C  3EFD               	addlw	253
  8298  0E6D  00B9               	movwf	??_EOL
  8299  0E6E  30FF               	movlw	255
  8300  0E6F  1803               	skipnc
  8301  0E70  3000               	movlw	0
  8302  0E71  00BA               	movwf	??_EOL+1
  8303  0E72  3A80               	xorlw	128
  8304  0E73  00BB               	movwf	??_EOL+2
  8305  0E74  3080               	movlw	128
  8306  0E75  023B               	subwf	??_EOL+2,w
  8307  0E76  1D03               	skipz
  8308  0E77  0008               	return
  8309  0E78  0852               	movf	EOL@ui8_b_DResB2_RD,w
  8310  0E79  0239               	subwf	??_EOL,w
  8311  0E7A  0008               	return
  8312  0E7B                     __end_ofPL10:	
  8313  0E7B                     PL12:	
  8314  0E7B  0020               	movlb	0	; select bank0
  8315  0E7C  00CF               	movwf	EOL@ui8_b_DResB4_RD
  8316  0E7D  303A               	movlw	58
  8317  0E7E  01CE               	clrf	EOL@ui8_b_DResB5_RD
  8318  0E7F  0008               	return
  8319  0E80                     __end_ofPL12:	
  8320  0E80                     PL14:	
  8321  0E80  3689               	lsrf	9,f
  8322  0E81  0020               	movlb	0	; select bank0
  8323  0E82  00D1               	movwf	EOL@ui8_b_DResB1_RD
  8324  0E83  0021               	movlb	1	; select bank1
  8325  0E84  0833               	movf	(_ui16_speed_fil+1)^(0+128),w
  8326  0E85  0020               	movlb	0	; select bank0
  8327  0E86  00A5               	movwf	___wmul@multiplier+1
  8328  0E87  0021               	movlb	1	; select bank1
  8329  0E88  0832               	movf	_ui16_speed_fil^(0+128),w
  8330  0E89  0020               	movlb	0	; select bank0
  8331  0E8A  00A4               	movwf	___wmul@multiplier
  8332  0E8B  3005               	movlw	5
  8333  0E8C  00A6               	movwf	___wmul@multiplicand
  8334  0E8D  01A7               	clrf	___wmul@multiplicand+1
  8335  0E8E  0008               	return
  8336  0E8F                     __end_ofPL14:	
  8337  0E8F                     PL16:	
  8338  0E8F  307F               	movlw	127
  8339  0E90  0020               	movlb	0	; select bank0
  8340  0E91  00AF               	movwf	Transmit_LIN_8Bytes@B0
  8341  0E92  0862               	movf	_ui8_b_DResLocID_c,w
  8342  0E93  00B0               	movwf	Transmit_LIN_8Bytes@B1
  8343  0E94  0861               	movf	_ui8_b_DResB0_c,w
  8344  0E95  00B1               	movwf	Transmit_LIN_8Bytes@B2
  8345  0E96  30FF               	movlw	255
  8346  0E97  00B2               	movwf	Transmit_LIN_8Bytes@B3
  8347  0E98  00B3               	movwf	Transmit_LIN_8Bytes@B4
  8348  0E99  00B4               	movwf	Transmit_LIN_8Bytes@B5
  8349  0E9A  00B5               	movwf	Transmit_LIN_8Bytes@B6
  8350  0E9B  00B6               	movwf	Transmit_LIN_8Bytes@B7
  8351  0E9C  3410               	retlw	16
  8352  0E9D                     __end_ofPL16:	
  8353  0E9D                     PL22:	
  8354  0E9D  00B0               	movwf	Transmit_LIN_8Bytes@B1
  8355  0E9E  30FF               	movlw	255
  8356  0E9F  00B1               	movwf	Transmit_LIN_8Bytes@B2
  8357  0EA0  00B2               	movwf	Transmit_LIN_8Bytes@B3
  8358  0EA1  00B3               	movwf	Transmit_LIN_8Bytes@B4
  8359  0EA2  00B4               	movwf	Transmit_LIN_8Bytes@B5
  8360  0EA3  00B5               	movwf	Transmit_LIN_8Bytes@B6
  8361  0EA4  0008               	return
  8362  0EA5                     __end_ofPL22:	
  8363  0EA5                     PL54:	
  8364  0EA5  0020               	movlb	0	; select bank0
  8365  0EA6  00A4               	movwf	___lwdiv@divisor
  8366  0EA7  3078               	movlw	120
  8367  0EA8  01A6               	clrf	___lwdiv@dividend
  8368  0EA9  00A7               	movwf	___lwdiv@dividend+1
  8369  0EAA  0008               	return
  8370  0EAB                     __end_ofPL54:	
  8371  0EAB                     PL56:	
  8372  0EAB  0022               	movlb	2	; select bank2
  8373  0EAC  0868               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
  8374  0EAD  0020               	movlb	0	; select bank0
  8375  0EAE  00A5               	movwf	___lwdiv@divisor+1
  8376  0EAF  0022               	movlb	2	; select bank2
  8377  0EB0  0867               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
  8378  0EB1  0008               	return
  8379  0EB2                     __end_ofPL56:	
  8380  0EB2                     PL58:	
  8381  0EB2  0022               	movlb	2	; select bank2
  8382  0EB3  0864               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
  8383  0EB4  0020               	movlb	0	; select bank0
  8384  0EB5  00A5               	movwf	___lwdiv@divisor+1
  8385  0EB6  0022               	movlb	2	; select bank2
  8386  0EB7  0863               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
  8387  0EB8  0008               	return
  8388  0EB9                     __end_ofPL58:	
  8389  0EB9                     PL60:	
  8390  0EB9  0022               	movlb	2	; select bank2
  8391  0EBA  0866               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
  8392  0EBB  0020               	movlb	0	; select bank0
  8393  0EBC  00A5               	movwf	___lwdiv@divisor+1
  8394  0EBD  0022               	movlb	2	; select bank2
  8395  0EBE  0865               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
  8396  0EBF  0008               	return
  8397  0EC0                     __end_ofPL60:	
  8398  0EC0                     PL74:	
  8399  0EC0  00B0               	movwf	Transmit_LIN_8Bytes@B1
  8400  0EC1  3010               	movlw	16
  8401  0EC2  01B1               	clrf	Transmit_LIN_8Bytes@B2
  8402  0EC3  01B2               	clrf	Transmit_LIN_8Bytes@B3
  8403  0EC4  01B3               	clrf	Transmit_LIN_8Bytes@B4
  8404  0EC5  01B4               	clrf	Transmit_LIN_8Bytes@B5
  8405  0EC6  01B5               	clrf	Transmit_LIN_8Bytes@B6
  8406  0EC7  01B6               	clrf	Transmit_LIN_8Bytes@B7
  8407  0EC8  0008               	return
  8408  0EC9                     __end_ofPL74:	
  8409  0EC9                     PL78:	
  8410  0EC9  1065               	bcf	_ui8_error_Flags,0
  8411  0ECA  10E5               	bcf	_ui8_error_Flags,1
  8412  0ECB  13E5               	bcf	_ui8_error_Flags,7
  8413  0ECC  1165               	bcf	_ui8_error_Flags,2
  8414  0ECD  11E5               	bcf	_ui8_error_Flags,3
  8415  0ECE  1265               	bcf	_ui8_error_Flags,4
  8416  0ECF  1365               	bcf	_ui8_error_Flags,6
  8417  0ED0  0008               	return
  8418  0ED1                     __end_ofPL78:	
  8419  0ED1                     PL88:	
  8420  0ED1  0852               	movf	_phaseCal^(0+128),w
  8421  0ED2  0020               	movlb	0	; select bank0
  8422  0ED3  00D0               	movwf	EOL@ui8_b_DResB0_RD
  8423  0ED4  01D1               	clrf	EOL@ui8_b_DResB1_RD
  8424  0ED5  0022               	movlb	2	; select bank2
  8425  0ED6  0008               	return
  8426  0ED7                     __end_ofPL88:	
  8427  0ED7                     PL110:	
  8428  0ED7  0021               	movlb	1	; select bank1
  8429  0ED8  086D               	movf	_wkpoint^(0+128),w
  8430  0ED9  0020               	movlb	0	; select bank0
  8431  0EDA  0661               	xorwf	_ui8_b_DResB0_c,w
  8432  0EDB  0008               	return
  8433  0EDC                     __end_ofPL110:	
  8434  0EDC                     __ptext28:	
  8435 ;; *************** function ___lwdiv *****************
  8436 ;; Defined at:
  8437 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;  divisor         2    4[BANK0 ] unsigned int 
  8440 ;;  dividend        2    6[BANK0 ] unsigned int 
  8441 ;; Auto vars:     Size  Location     Type
  8442 ;;  quotient        2    9[BANK0 ] unsigned int 
  8443 ;;  counter         1    8[BANK0 ] unsigned char 
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  2    4[BANK0 ] unsigned int 
  8446 ;; Registers used:
  8447 ;;		wreg, status,2, status,0
  8448 ;; Tracked objects:
  8449 ;;		On entry : 1F/0
  8450 ;;		On exit  : 1F/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8453 ;;      Params:         0       4       0       0       0       0       0       0
  8454 ;;      Locals:         0       3       0       0       0       0       0       0
  8455 ;;      Temps:          0       0       0       0       0       0       0       0
  8456 ;;      Totals:         0       7       0       0       0       0       0       0
  8457 ;;Total ram usage:        7 bytes
  8458 ;; Hardware stack levels used:    1
  8459 ;; Hardware stack levels required when called:    3
  8460 ;; This function calls:
  8461 ;;		Nothing
  8462 ;; This function is called by:
  8463 ;;		_EOL
  8464 ;;		_interrrupt_bldc
  8465 ;; This function uses a non-reentrant model
  8466 ;;
  8467                           
  8468                           
  8469                           ;psect for function ___lwdiv
  8470  0EDC                     ___lwdiv:	
  8471                           
  8472                           ;incstack = 0
  8473                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8474  0EDC  01A9               	clrf	___lwdiv@quotient
  8475  0EDD  01AA               	clrf	___lwdiv@quotient+1
  8476  0EDE  0824               	movf	___lwdiv@divisor,w
  8477  0EDF  0425               	iorwf	___lwdiv@divisor+1,w
  8478  0EE0  1903               	btfsc	3,2
  8479  0EE1  2EFC               	goto	l12474
  8480  0EE2  01A8               	clrf	___lwdiv@counter
  8481  0EE3                     L18:	
  8482  0EE3  0AA8               	incf	___lwdiv@counter,f
  8483  0EE4  1BA5               	btfsc	___lwdiv@divisor+1,7
  8484  0EE5  2EE9               	goto	l12462
  8485  0EE6  35A4               	lslf	___lwdiv@divisor,f
  8486  0EE7  0DA5               	rlf	___lwdiv@divisor+1,f
  8487  0EE8  2EE3               	goto	L18
  8488  0EE9                     l12462:	
  8489  0EE9  35A9               	lslf	___lwdiv@quotient,f
  8490  0EEA  0DAA               	rlf	___lwdiv@quotient+1,f
  8491  0EEB  0825               	movf	___lwdiv@divisor+1,w
  8492  0EEC  0227               	subwf	___lwdiv@dividend+1,w
  8493  0EED  1D03               	skipz
  8494  0EEE  2EF1               	goto	u10685
  8495  0EEF  0824               	movf	___lwdiv@divisor,w
  8496  0EF0  0226               	subwf	___lwdiv@dividend,w
  8497  0EF1                     u10685:	
  8498  0EF1  1C03               	skipc
  8499  0EF2  2EF8               	goto	l12470
  8500  0EF3  0824               	movf	___lwdiv@divisor,w
  8501  0EF4  02A6               	subwf	___lwdiv@dividend,f
  8502  0EF5  0825               	movf	___lwdiv@divisor+1,w
  8503  0EF6  3BA7               	subwfb	___lwdiv@dividend+1,f
  8504  0EF7  1429               	bsf	___lwdiv@quotient,0
  8505  0EF8                     l12470:	
  8506  0EF8  36A5               	lsrf	___lwdiv@divisor+1,f
  8507  0EF9  0CA4               	rrf	___lwdiv@divisor,f
  8508  0EFA  0BA8               	decfsz	___lwdiv@counter,f
  8509  0EFB  2EE9               	goto	l12462
  8510  0EFC                     l12474:	
  8511  0EFC  082A               	movf	___lwdiv@quotient+1,w
  8512  0EFD  00A5               	movwf	?___lwdiv+1
  8513  0EFE  0829               	movf	___lwdiv@quotient,w
  8514  0EFF  00A4               	movwf	?___lwdiv
  8515  0F00  0008               	return
  8516  0F01                     __end_of___lwdiv:	
  8517  0F01                     __ptext12:	
  8518 ;; *************** function _FILTER_Init *****************
  8519 ;; Defined at:
  8520 ;;		line 226 in file "../adc.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;		None
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;		None
  8525 ;; Return value:  Size  Location     Type
  8526 ;;                  1    wreg      void 
  8527 ;; Registers used:
  8528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8529 ;; Tracked objects:
  8530 ;;		On entry : 1F/2
  8531 ;;		On exit  : 1F/1
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8534 ;;      Params:         0       0       0       0       0       0       0       0
  8535 ;;      Locals:         0       0       0       0       0       0       0       0
  8536 ;;      Temps:          0       0       0       0       0       0       0       0
  8537 ;;      Totals:         0       0       0       0       0       0       0       0
  8538 ;;Total ram usage:        0 bytes
  8539 ;; Hardware stack levels used:    1
  8540 ;; Hardware stack levels required when called:    4
  8541 ;; This function calls:
  8542 ;;		_ADC_Read
  8543 ;;		_ADC_Wait
  8544 ;; This function is called by:
  8545 ;;		_system_init
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           
  8550                           ;psect for function _FILTER_Init
  8551  0F01                     _FILTER_Init:	
  8552                           
  8553                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  8554                           
  8555                           ;incstack = 0
  8556                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8557  0F01  0021               	movlb	1	; select bank1
  8558  0F02  01E6               	clrf	_windowPtr1^(0+128)
  8559  0F03                     l12252:	
  8560  0F03  3008               	movlw	8
  8561  0F04  0266               	subwf	_windowPtr1^(0+128),w
  8562  0F05  1803               	btfsc	3,0
  8563  0F06  0008               	return
  8564                           
  8565                           ;adc.c: 232: {
  8566                           ;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  8567  0F07  3031               	movlw	49
  8568  0F08  009D               	movwf	29	;volatile
  8569                           
  8570                           ;adc.c: 235: ADC_Wait( );
  8571  0F09  25F4  3188         	fcall	_ADC_Wait
  8572                           
  8573                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  8574  0F0B  2719  3188         	fcall	_ADC_Read
  8575  0F0D  0825               	movf	?_ADC_Read+1,w
  8576  0F0E  00E7               	movwf	_ui16_Ubat_bldc+1	;volatile
  8577  0F0F  0824               	movf	?_ADC_Read,w
  8578  0F10  00E6               	movwf	_ui16_Ubat_bldc	;volatile
  8579                           
  8580                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  8581  0F11  272E  3188         	fcall	PL94	;call to abstracted procedure
  8582  0F13  305E               	movlw	94
  8583  0F14  3FC0               	movwi [0]fsr1
  8584  0F15  3001               	movlw	1
  8585  0F16  3FC1               	movwi [1]fsr1
  8586  0F17  0AE6               	incf	_windowPtr1^(0+128),f
  8587  0F18  2F03               	goto	l12252
  8588  0F19                     __end_of_FILTER_Init:	
  8589  0F19                     __ptext40:	
  8590 ;; *************** function _ADC_Read *****************
  8591 ;; Defined at:
  8592 ;;		line 175 in file "../adc.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;		None
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  i               1    6[BANK0 ] unsigned char 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  2    4[BANK0 ] unsigned int 
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/1
  8603 ;;		On exit  : 1F/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8606 ;;      Params:         0       2       0       0       0       0       0       0
  8607 ;;      Locals:         0       1       0       0       0       0       0       0
  8608 ;;      Temps:          0       0       0       0       0       0       0       0
  8609 ;;      Totals:         0       3       0       0       0       0       0       0
  8610 ;;Total ram usage:        3 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    3
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_FILTER_Init
  8617 ;;		_EOL
  8618 ;;		_I_calibrationInit
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           
  8623                           ;psect for function _ADC_Read
  8624  0F19                     _ADC_Read:	
  8625                           
  8626                           ;adc.c: 179: unsigned char i;
  8627                           ;adc.c: 180: i = 0;
  8628                           
  8629                           ;incstack = 0
  8630                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  8631  0F19  0020               	movlb	0	; select bank0
  8632  0F1A  01A6               	clrf	ADC_Read@i
  8633  0F1B                     l69:	
  8634                           ;adc.c: 182: while( GO_nDONE )
  8635                           
  8636  0F1B  0021               	movlb	1	; select bank1
  8637  0F1C  1C9D               	btfss	29,1	;volatile
  8638  0F1D  2F24               	goto	l12154
  8639                           
  8640                           ;adc.c: 184: {
  8641                           ;adc.c: 186: i++;
  8642  0F1E  0020               	movlb	0	; select bank0
  8643  0F1F  3041               	movlw	65
  8644  0F20  0AA6               	incf	ADC_Read@i,f
  8645                           
  8646                           ;adc.c: 189: if( i > 64 )
  8647  0F21  0226               	subwf	ADC_Read@i,w
  8648  0F22  1C03               	skipc
  8649  0F23  2F1B               	goto	l69
  8650  0F24                     l12154:	
  8651                           
  8652                           ;adc.c: 195: }
  8653                           ;adc.c: 198: }
  8654                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  8655  0F24  0021               	movlb	1	; select bank1
  8656                           
  8657                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  8658                           
  8659                           ;adc.c: 204: return analog_value.w;
  8660  0F25  319F  27B4         	fcall	PL116	;call to abstracted procedure
  8661  0F27  0020               	movlb	0	; select bank0
  8662  0F28  00A5               	movwf	?_ADC_Read+1
  8663  0F29  0021               	movlb	1	; select bank1
  8664  0F2A  083A               	movf	_analog_value^(0+128),w	;volatile
  8665  0F2B  0020               	movlb	0	; select bank0
  8666  0F2C  00A4               	movwf	?_ADC_Read
  8667  0F2D  0008               	return
  8668  0F2E                     __end_of_ADC_Read:	
  8669  0F2E                     PL94:	
  8670  0F2E  0021               	movlb	1	; select bank1
  8671  0F2F  3566               	lslf	_windowPtr1^(0+128),w
  8672  0F30  3E40               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  8673  0F31  0086               	movwf	6
  8674  0F32  3002               	movlw	2	; select bank4/5
  8675  0F33  0087               	movwf	7
  8676  0F34  0008               	return
  8677  0F35                     __end_ofPL94:	
  8678  0F35                     __ptext30:	
  8679 ;; *************** function _PWMReadDC *****************
  8680 ;; Defined at:
  8681 ;;		line 361 in file "../pwm.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;		None
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;		None
  8686 ;; Return value:  Size  Location     Type
  8687 ;;                  1    wreg      unsigned char 
  8688 ;; Registers used:
  8689 ;;		wreg, status,2, status,0, pclath, cstack
  8690 ;; Tracked objects:
  8691 ;;		On entry : 1F/0
  8692 ;;		On exit  : 1F/2
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8695 ;;      Params:         0       0       0       0       0       0       0       0
  8696 ;;      Locals:         0       0       0       0       0       0       0       0
  8697 ;;      Temps:          0       0       0       0       0       0       0       0
  8698 ;;      Totals:         0       0       0       0       0       0       0       0
  8699 ;;Total ram usage:        0 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:    4
  8702 ;; This function calls:
  8703 ;;		___ltdiv
  8704 ;;		___tmul
  8705 ;; This function is called by:
  8706 ;;		_EOL
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _PWMReadDC
  8712  0F35                     _PWMReadDC:	
  8713                           
  8714                           ;pwm.c: 366: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
  8715                           
  8716                           ;incstack = 0
  8717                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
  8718  0F35  0022               	movlb	2	; select bank2
  8719  0F36  0827               	movf	_ui16_PWM_Freq_In^(0+256),w
  8720  0F37  0020               	movlb	0	; select bank0
  8721  0F38  00AD               	movwf	___ltdiv@divisor
  8722  0F39  0022               	movlb	2	; select bank2
  8723  0F3A  0828               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
  8724  0F3B  0020               	movlb	0	; select bank0
  8725  0F3C  00AE               	movwf	___ltdiv@divisor+1
  8726  0F3D  01AF               	clrf	___ltdiv@divisor+2
  8727  0F3E  0022               	movlb	2	; select bank2
  8728  0F3F  0861               	movf	_ui16_Duty_Cycle_In^(0+256),w
  8729  0F40  0020               	movlb	0	; select bank0
  8730  0F41  00A4               	movwf	___tmul@multiplier
  8731  0F42  0022               	movlb	2	; select bank2
  8732  0F43  0862               	movf	(_ui16_Duty_Cycle_In+1)^(0+256),w
  8733  0F44  0020               	movlb	0	; select bank0
  8734  0F45  00A5               	movwf	___tmul@multiplier+1
  8735  0F46  30C8               	movlw	200
  8736  0F47  01A6               	clrf	___tmul@multiplier+2
  8737  0F48  00A7               	movwf	___tmul@multiplicand
  8738  0F49  01A8               	clrf	___tmul@multiplicand+1
  8739  0F4A  01A9               	clrf	___tmul@multiplicand+2
  8740  0F4B  27A3  3188         	fcall	___tmul
  8741  0F4D  0824               	movf	?___tmul,w
  8742  0F4E  00B0               	movwf	___ltdiv@dividend
  8743  0F4F  0825               	movf	?___tmul+1,w
  8744  0F50  00B1               	movwf	___ltdiv@dividend+1
  8745  0F51  0826               	movf	?___tmul+2,w
  8746  0F52  00B2               	movwf	___ltdiv@dividend+2
  8747  0F53  2771  3188         	fcall	___ltdiv
  8748  0F55  082D               	movf	?___ltdiv,w
  8749  0F56  0021               	movlb	1	; select bank1
  8750  0F57  00C6               	movwf	_ui8_PWMinDC_sav^(0+128)
  8751                           
  8752                           ;pwm.c: 368: if( ui8_PWMinDC_sav == 0 )
  8753  0F58  0846               	movf	_ui8_PWMinDC_sav^(0+128),w
  8754  0F59  1D03               	btfss	3,2
  8755  0F5A  2F66               	goto	l12338
  8756                           
  8757                           ;pwm.c: 370: {
  8758                           ;pwm.c: 374: ui8_PWMin_failCnt++;
  8759  0F5B  0022               	movlb	2	; select bank2
  8760  0F5C  3005               	movlw	5
  8761  0F5D  0AD2               	incf	_ui8_PWMin_failCnt^(0+256),f
  8762                           
  8763                           ;pwm.c: 376: if( ui8_PWMin_failCnt >= 5 )
  8764  0F5E  0252               	subwf	_ui8_PWMin_failCnt^(0+256),w
  8765  0F5F  1C03               	skipc
  8766  0F60  2F6E               	goto	l12344
  8767                           
  8768                           ;pwm.c: 378: {
  8769                           ;pwm.c: 380: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  8770  0F61  0021               	movlb	1	; select bank1
  8771  0F62  0846               	movf	_ui8_PWMinDC_sav^(0+128),w
  8772  0F63  0022               	movlb	2	; select bank2
  8773  0F64  00D3               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  8774  0F65  2F6E               	goto	l12344
  8775  0F66                     l12338:	
  8776                           
  8777                           ;pwm.c: 391: else
  8778                           ;pwm.c: 392: {
  8779                           ;pwm.c: 396: ui8_PWMin_failCnt = 0;
  8780  0F66  0022               	movlb	2	; select bank2
  8781  0F67  01D2               	clrf	_ui8_PWMin_failCnt^(0+256)
  8782                           
  8783                           ;pwm.c: 399: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  8784  0F68  0021               	movlb	1	; select bank1
  8785  0F69  0846               	movf	_ui8_PWMinDC_sav^(0+128),w
  8786  0F6A  0022               	movlb	2	; select bank2
  8787  0F6B  00D3               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  8788                           
  8789                           ;pwm.c: 401: ui16_Duty_Cycle_In = 0;
  8790  0F6C  01E1               	clrf	_ui16_Duty_Cycle_In^(0+256)
  8791  0F6D  01E2               	clrf	(_ui16_Duty_Cycle_In+1)^(0+256)
  8792  0F6E                     l12344:	
  8793                           
  8794                           ;pwm.c: 403: }
  8795                           ;pwm.c: 408: return ( 200 - ui8_Duty_Cycle_In_Ratio );
  8796  0F6E  0853               	movf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
  8797  0F6F  3CC8               	sublw	200
  8798  0F70  0008               	return
  8799  0F71                     __end_of_PWMReadDC:	
  8800  0F71                     __ptext32:	
  8801 ;; *************** function ___ltdiv *****************
  8802 ;; Defined at:
  8803 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ltdiv.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;  divisor         3   13[BANK0 ] unsigned um
  8806 ;;  dividend        3   16[BANK0 ] unsigned um
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;  quotient        3   19[BANK0 ] unsigned um
  8809 ;;  counter         1   22[BANK0 ] unsigned char 
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  3   13[BANK0 ] unsigned um
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0
  8814 ;; Tracked objects:
  8815 ;;		On entry : 1F/0
  8816 ;;		On exit  : 1F/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8819 ;;      Params:         0       6       0       0       0       0       0       0
  8820 ;;      Locals:         0       4       0       0       0       0       0       0
  8821 ;;      Temps:          0       0       0       0       0       0       0       0
  8822 ;;      Totals:         0      10       0       0       0       0       0       0
  8823 ;;Total ram usage:       10 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    3
  8826 ;; This function calls:
  8827 ;;		Nothing
  8828 ;; This function is called by:
  8829 ;;		_PWMReadDC
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           
  8834                           ;psect for function ___ltdiv
  8835  0F71                     ___ltdiv:	
  8836                           
  8837                           ;incstack = 0
  8838                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  8839  0F71  01B3               	clrf	___ltdiv@quotient
  8840  0F72  01B4               	clrf	___ltdiv@quotient+1
  8841  0F73  01B5               	clrf	___ltdiv@quotient+2
  8842  0F74  082F               	movf	___ltdiv@divisor+2,w
  8843  0F75  042E               	iorwf	___ltdiv@divisor+1,w
  8844  0F76  042D               	iorwf	___ltdiv@divisor,w
  8845  0F77  1903               	skipnz
  8846  0F78  2F9C               	goto	l12246
  8847  0F79  01B6               	clrf	___ltdiv@counter
  8848  0F7A                     L19:	
  8849  0F7A  0AB6               	incf	___ltdiv@counter,f
  8850  0F7B  1BAF               	btfsc	___ltdiv@divisor+2,7
  8851  0F7C  2F81               	goto	l12234
  8852  0F7D  35AD               	lslf	___ltdiv@divisor,f
  8853  0F7E  0DAE               	rlf	___ltdiv@divisor+1,f
  8854  0F7F  0DAF               	rlf	___ltdiv@divisor+2,f
  8855  0F80  2F7A               	goto	L19
  8856  0F81                     l12234:	
  8857  0F81  35B3               	lslf	___ltdiv@quotient,f
  8858  0F82  0DB4               	rlf	___ltdiv@quotient+1,f
  8859  0F83  0DB5               	rlf	___ltdiv@quotient+2,f
  8860  0F84  082F               	movf	___ltdiv@divisor+2,w
  8861  0F85  0232               	subwf	___ltdiv@dividend+2,w
  8862  0F86  1D03               	skipz
  8863  0F87  2F8E               	goto	u10475
  8864  0F88  082E               	movf	___ltdiv@divisor+1,w
  8865  0F89  0231               	subwf	___ltdiv@dividend+1,w
  8866  0F8A  1D03               	skipz
  8867  0F8B  2F8E               	goto	u10475
  8868  0F8C  082D               	movf	___ltdiv@divisor,w
  8869  0F8D  0230               	subwf	___ltdiv@dividend,w
  8870  0F8E                     u10475:	
  8871  0F8E  1C03               	skipc
  8872  0F8F  2F97               	goto	l12242
  8873  0F90  082D               	movf	___ltdiv@divisor,w
  8874  0F91  02B0               	subwf	___ltdiv@dividend,f
  8875  0F92  082E               	movf	___ltdiv@divisor+1,w
  8876  0F93  3BB1               	subwfb	___ltdiv@dividend+1,f
  8877  0F94  082F               	movf	___ltdiv@divisor+2,w
  8878  0F95  3BB2               	subwfb	___ltdiv@dividend+2,f
  8879  0F96  1433               	bsf	___ltdiv@quotient,0
  8880  0F97                     l12242:	
  8881  0F97  36AF               	lsrf	___ltdiv@divisor+2,f
  8882  0F98  0CAE               	rrf	___ltdiv@divisor+1,f
  8883  0F99  0CAD               	rrf	___ltdiv@divisor,f
  8884  0F9A  0BB6               	decfsz	___ltdiv@counter,f
  8885  0F9B  2F81               	goto	l12234
  8886  0F9C                     l12246:	
  8887  0F9C  0833               	movf	___ltdiv@quotient,w
  8888  0F9D  00AD               	movwf	?___ltdiv
  8889  0F9E  0834               	movf	___ltdiv@quotient+1,w
  8890  0F9F  00AE               	movwf	?___ltdiv+1
  8891  0FA0  0835               	movf	___ltdiv@quotient+2,w
  8892  0FA1  00AF               	movwf	?___ltdiv+2
  8893  0FA2  0008               	return
  8894  0FA3                     __end_of___ltdiv:	
  8895  0FA3                     __ptext31:	
  8896 ;; *************** function ___tmul *****************
  8897 ;; Defined at:
  8898 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul24.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;  multiplier      3    4[BANK0 ] unsigned um
  8901 ;;  multiplicand    3    7[BANK0 ] unsigned um
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;  product         3   10[BANK0 ] unsigned um
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  3    4[BANK0 ] unsigned um
  8906 ;; Registers used:
  8907 ;;		wreg, status,2, status,0
  8908 ;; Tracked objects:
  8909 ;;		On entry : 1F/0
  8910 ;;		On exit  : 1F/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8913 ;;      Params:         0       6       0       0       0       0       0       0
  8914 ;;      Locals:         0       3       0       0       0       0       0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0       0
  8916 ;;      Totals:         0       9       0       0       0       0       0       0
  8917 ;;Total ram usage:        9 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    3
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_PWMReadDC
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           
  8928                           ;psect for function ___tmul
  8929  0FA3                     ___tmul:	
  8930                           
  8931                           ;incstack = 0
  8932                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  8933  0FA3  01AA               	clrf	___tmul@product
  8934  0FA4  01AB               	clrf	___tmul@product+1
  8935  0FA5  01AC               	clrf	___tmul@product+2
  8936  0FA6                     l2065:	
  8937  0FA6  1C24               	btfss	___tmul@multiplier,0
  8938  0FA7  2FAE               	goto	l12216
  8939  0FA8  0827               	movf	___tmul@multiplicand,w
  8940  0FA9  07AA               	addwf	___tmul@product,f
  8941  0FAA  0828               	movf	___tmul@multiplicand+1,w
  8942  0FAB  3DAB               	addwfc	___tmul@product+1,f
  8943  0FAC  0829               	movf	___tmul@multiplicand+2,w
  8944  0FAD  3DAC               	addwfc	___tmul@product+2,f
  8945  0FAE                     l12216:	
  8946  0FAE  35A7               	lslf	___tmul@multiplicand,f
  8947  0FAF  0DA8               	rlf	___tmul@multiplicand+1,f
  8948  0FB0  0DA9               	rlf	___tmul@multiplicand+2,f
  8949  0FB1  36A6               	lsrf	___tmul@multiplier+2,f
  8950  0FB2  0CA5               	rrf	___tmul@multiplier+1,f
  8951  0FB3  0CA4               	rrf	___tmul@multiplier,f
  8952  0FB4  0826               	movf	___tmul@multiplier+2,w
  8953  0FB5  0425               	iorwf	___tmul@multiplier+1,w
  8954  0FB6  0424               	iorwf	___tmul@multiplier,w
  8955  0FB7  1D03               	skipz
  8956  0FB8  2FA6               	goto	l2065
  8957  0FB9  082A               	movf	___tmul@product,w
  8958  0FBA  00A4               	movwf	?___tmul
  8959  0FBB  082B               	movf	___tmul@product+1,w
  8960  0FBC  00A5               	movwf	?___tmul+1
  8961  0FBD  082C               	movf	___tmul@product+2,w
  8962  0FBE  00A6               	movwf	?___tmul+2
  8963  0FBF  0008               	return
  8964  0FC0                     __end_of___tmul:	
  8965  0FC0                     __ptext33:	
  8966 ;; *************** function _NegativeAnswer *****************
  8967 ;; Defined at:
  8968 ;;		line 2436 in file "../diag.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;  LID             1    wreg     unsigned char 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  LID             1   24[BANK0 ] unsigned char 
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      void 
  8975 ;; Registers used:
  8976 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8977 ;; Tracked objects:
  8978 ;;		On entry : 1E/1
  8979 ;;		On exit  : 1F/1
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8982 ;;      Params:         0       0       0       0       0       0       0       0
  8983 ;;      Locals:         0       1       0       0       0       0       0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0       0
  8985 ;;      Totals:         0       1       0       0       0       0       0       0
  8986 ;;Total ram usage:        1 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    6
  8989 ;; This function calls:
  8990 ;;		_Transmit_LIN_8Bytes
  8991 ;; This function is called by:
  8992 ;;		_EOL
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           
  8997                           ;psect for function _NegativeAnswer
  8998  0FC0                     _NegativeAnswer:	
  8999                           
  9000                           ;incstack = 0
  9001                           ; Regs used in _NegativeAnswer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9002                           ;NegativeAnswer@LID stored from wreg
  9003  0FC0  0020               	movlb	0	; select bank0
  9004  0FC1  00B8               	movwf	NegativeAnswer@LID
  9005                           
  9006                           ;diag.c: 2440: ui8_b_DResB0_c = 0xFF;
  9007  0FC2  30FF               	movlw	255
  9008  0FC3  00E1               	movwf	_ui8_b_DResB0_c
  9009                           
  9010                           ;diag.c: 2441: ui8_b_DResB1_c = 0xFF;
  9011  0FC4  0021               	movlb	1	; select bank1
  9012  0FC5  00D6               	movwf	_ui8_b_DResB1_c^(0+128)
  9013                           
  9014                           ;diag.c: 2442: ui8_b_DResB2_c = 0xFF;
  9015  0FC6  00D5               	movwf	_ui8_b_DResB2_c^(0+128)
  9016                           
  9017                           ;diag.c: 2443: ui8_b_DResB3_c = 0xFF;
  9018  0FC7  00D4               	movwf	_ui8_b_DResB3_c^(0+128)
  9019                           
  9020                           ;diag.c: 2445: ui8_b_DResB5_c = 0xFF;
  9021  0FC8  00D3               	movwf	_ui8_b_DResB4_c^(0+128)
  9022                           
  9023                           ;diag.c: 2447: Transmit_LIN_8Bytes( 0x10, 0x7F, LID, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
  9024  0FC9  307F               	movlw	127
  9025  0FCA  0020               	movlb	0	; select bank0
  9026  0FCB  00AF               	movwf	Transmit_LIN_8Bytes@B0
  9027  0FCC  0838               	movf	NegativeAnswer@LID,w
  9028  0FCD  269D  3188         	fcall	PL22	;call to abstracted procedure
  9029  0FCF  00B6               	movwf	Transmit_LIN_8Bytes@B7
  9030  0FD0  3010               	movlw	16
  9031  0FD1  2DB1               	ljmp	_Transmit_LIN_8Bytes
  9032  0FD2                     __end_of_NegativeAnswer:	
  9033  0FD2                     __ptext27:	
  9034 ;; *************** function _cksum *****************
  9035 ;; Defined at:
  9036 ;;		line 6 in file "../cksum.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;		None
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  addr            2   10[BANK0 ] unsigned short 
  9041 ;;  sum             2    8[BANK0 ] unsigned int 
  9042 ;;  counter         2    6[BANK0 ] unsigned int 
  9043 ;; Return value:  Size  Location     Type
  9044 ;;                  2    4[BANK0 ] unsigned int 
  9045 ;; Registers used:
  9046 ;;		wreg, status,2, status,0
  9047 ;; Tracked objects:
  9048 ;;		On entry : 1F/0
  9049 ;;		On exit  : 1F/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9052 ;;      Params:         0       2       0       0       0       0       0       0
  9053 ;;      Locals:         0       6       0       0       0       0       0       0
  9054 ;;      Temps:          0       0       0       0       0       0       0       0
  9055 ;;      Totals:         0       8       0       0       0       0       0       0
  9056 ;;Total ram usage:        8 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    3
  9059 ;; This function calls:
  9060 ;;		Nothing
  9061 ;; This function is called by:
  9062 ;;		_EOL
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           
  9067                           ;psect for function _cksum
  9068  0FD2                     _cksum:	
  9069  0FD2  30FE               	movlw	254
  9070                           
  9071                           ;cksum.c: 7: unsigned int sum;
  9072                           ;cksum.c: 8: unsigned short addr;
  9073                           ;cksum.c: 9: unsigned int counter;
  9074                           ;cksum.c: 11: addr = 0L;
  9075                           
  9076                           ;incstack = 0
  9077                           ; Regs used in _cksum: [wreg+status,2+status,0]
  9078  0FD3  01AA               	clrf	cksum@addr
  9079  0FD4  01AB               	clrf	cksum@addr+1
  9080                           
  9081                           ;cksum.c: 12: sum = 0;
  9082  0FD5  01A8               	clrf	cksum@sum
  9083  0FD6  01A9               	clrf	cksum@sum+1
  9084                           
  9085                           ;cksum.c: 13: counter = ( (8192 - 2 - 1) - 0L + 1 );
  9086  0FD7  00A6               	movwf	cksum@counter
  9087  0FD8  301F               	movlw	31
  9088  0FD9  00A7               	movwf	cksum@counter+1
  9089  0FDA                     l1973:	
  9090                           ;cksum.c: 15: while(counter--){
  9091                           
  9092  0FDA  3001               	movlw	1
  9093  0FDB  02A6               	subwf	cksum@counter,f
  9094  0FDC  3000               	movlw	0
  9095  0FDD  3BA7               	subwfb	cksum@counter+1,f
  9096  0FDE  0F26               	incfsz	cksum@counter,w
  9097  0FDF  2FE3               	goto	l12294
  9098  0FE0  0A27               	incf	cksum@counter+1,w
  9099  0FE1  1903               	btfsc	3,2
  9100  0FE2  2FFB               	goto	l12308
  9101  0FE3                     l12294:	
  9102                           
  9103                           ;cksum.c: 22: sum += (EEADRL=(addr)&0xff, EEADRH=(addr)>>8, WREN=0, EECON1 |= 0x80, RD=1
      +                          , __nop(), __nop(), (EEDATH << 8) | EEDATA);
  9104  0FE3  082A               	movf	cksum@addr,w
  9105  0FE4  0023               	movlb	3	; select bank3
  9106  0FE5  0091               	movwf	17	;volatile
  9107  0FE6  0020               	movlb	0	; select bank0
  9108  0FE7  082B               	movf	cksum@addr+1,w
  9109  0FE8  0023               	movlb	3	; select bank3
  9110  0FE9  0092               	movwf	18	;volatile
  9111  0FEA  1115               	bcf	21,2	;volsfr
  9112  0FEB  1795               	bsf	21,7	;volsfr
  9113  0FEC  1415               	bsf	21,0	;volsfr
  9114  0FED  0000               	nop
  9115  0FEE  0000               	nop
  9116  0FEF  0023               	movlb	3	; select bank3
  9117  0FF0  0813               	movf	19,w	;volatile
  9118  0FF1  0020               	movlb	0	; select bank0
  9119  0FF2  07A8               	addwf	cksum@sum,f
  9120  0FF3  0023               	movlb	3	; select bank3
  9121  0FF4  0814               	movf	20,w	;volatile
  9122  0FF5  0020               	movlb	0	; select bank0
  9123  0FF6  3DA9               	addwfc	cksum@sum+1,f
  9124                           
  9125                           ;cksum.c: 31: addr++;
  9126  0FF7  0AAA               	incf	cksum@addr,f
  9127  0FF8  1903               	skipnz
  9128  0FF9  0AAB               	incf	cksum@addr+1,f
  9129  0FFA  2FDA               	goto	l1973
  9130  0FFB                     l12308:	
  9131                           
  9132                           ;cksum.c: 32: }
  9133                           ;cksum.c: 33: return sum;
  9134  0FFB  0829               	movf	cksum@sum+1,w
  9135  0FFC  00A5               	movwf	?_cksum+1
  9136  0FFD  0828               	movf	cksum@sum,w
  9137  0FFE  00A4               	movwf	?_cksum
  9138  0FFF  0008               	return
  9139  1000                     __end_of_cksum:	
  9140                           
  9141                           	psect	text5
  9142  068C                     __ptext5:	
  9143 ;; *************** function _init_bldc *****************
  9144 ;; Defined at:
  9145 ;;		line 207 in file "../bldc.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;		None
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;		None
  9150 ;; Return value:  Size  Location     Type
  9151 ;;                  1    wreg      void 
  9152 ;; Registers used:
  9153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9154 ;; Tracked objects:
  9155 ;;		On entry : 1F/2
  9156 ;;		On exit  : 1F/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9159 ;;      Params:         0       0       0       0       0       0       0       0
  9160 ;;      Locals:         0       0       0       0       0       0       0       0
  9161 ;;      Temps:          0       0       0       0       0       0       0       0
  9162 ;;      Totals:         0       0       0       0       0       0       0       0
  9163 ;;Total ram usage:        0 bytes
  9164 ;; Hardware stack levels used:    1
  9165 ;; Hardware stack levels required when called:    5
  9166 ;; This function calls:
  9167 ;;		_InitMotorRun
  9168 ;; This function is called by:
  9169 ;;		_system_init
  9170 ;; This function uses a non-reentrant model
  9171 ;;
  9172                           
  9173                           
  9174                           ;psect for function _init_bldc
  9175  068C                     _init_bldc:	
  9176                           
  9177                           ;bldc.c: 218: PSTR1CON = 0;
  9178                           
  9179                           ;incstack = 0
  9180                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9181  068C  0025               	movlb	5	; select bank5
  9182  068D  0196               	clrf	22	;volatile
  9183                           
  9184                           ;bldc.c: 222: CM1CON0 = 0x80;
  9185  068E  3080               	movlw	128
  9186  068F  0022               	movlb	2	; select bank2
  9187  0690  0091               	movwf	17	;volatile
  9188                           
  9189                           ;bldc.c: 228: CM1CON1 = 0x00;
  9190  0691  0192               	clrf	18	;volatile
  9191                           
  9192                           ;bldc.c: 230: C1IE = 0;
  9193  0692  0021               	movlb	1	; select bank1
  9194  0693  1292               	bcf	18,5	;volatile
  9195                           
  9196                           ;bldc.c: 235: PWM1CON = 0x87;
  9197  0694  3087               	movlw	135
  9198  0695  0025               	movlb	5	; select bank5
  9199  0696  0094               	movwf	20	;volatile
  9200                           
  9201                           ;bldc.c: 239: CCP1AS = 0x800;
  9202  0697  0195               	clrf	21	;volatile
  9203                           
  9204                           ;bldc.c: 240: CCP1CON = 0x0C;
  9205  0698  300C               	movlw	12
  9206  0699  0093               	movwf	19	;volatile
  9207                           
  9208                           ;bldc.c: 246: CCPR1L = 0;
  9209  069A  0191               	clrf	17	;volatile
  9210                           
  9211                           ;bldc.c: 248: CCP2IE = 0;
  9212  069B  0021               	movlb	1	; select bank1
  9213  069C  1012               	bcf	18,0	;volatile
  9214                           
  9215                           ;bldc.c: 249: CCP2CON = 0x04;
  9216  069D  3004               	movlw	4
  9217  069E  0025               	movlb	5	; select bank5
  9218  069F  009A               	movwf	26	;volatile
  9219                           
  9220                           ;bldc.c: 250: CCPR2L = 0xff;
  9221  06A0  30FF               	movlw	255
  9222  06A1  0098               	movwf	24	;volatile
  9223                           
  9224                           ;bldc.c: 251: CCPR2H = 0xff;
  9225  06A2  0099               	movwf	25	;volatile
  9226                           
  9227                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  9228  06A3  3064               	movlw	100
  9229  06A4  0020               	movlb	0	; select bank0
  9230  06A5  009B               	movwf	27	;volatile
  9231                           
  9232                           ;bldc.c: 255: T2CON = 0x05;
  9233  06A6  3005               	movlw	5
  9234  06A7  009C               	movwf	28	;volatile
  9235                           
  9236                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  9237  06A8  3028               	movlw	40
  9238  06A9  0021               	movlb	1	; select bank1
  9239  06AA  00E2               	movwf	_ui8_BlankingCount^(0+128)
  9240                           
  9241                           ;bldc.c: 264: TMR2IE = 1;
  9242  06AB  1491               	bsf	17,1	;volatile
  9243                           
  9244                           ;bldc.c: 267: MotorFlags.b = 0;
  9245  06AC  0020               	movlb	0	; select bank0
  9246  06AD  01E3               	clrf	_MotorFlags
  9247                           
  9248                           ;bldc.c: 270: InitMotorRun( );
  9249  06AE  3182  2AF0         	ljmp	l6236
  9250  06B0                     __end_of_init_bldc:	
  9251                           
  9252                           	psect	text7
  9253  1AA3                     __ptext7:	
  9254 ;; *************** function _commutate *****************
  9255 ;; Defined at:
  9256 ;;		line 1426 in file "../bldc.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;		None
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;		None
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      void 
  9263 ;; Registers used:
  9264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9265 ;; Tracked objects:
  9266 ;;		On entry : 1F/0
  9267 ;;		On exit  : 1F/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9270 ;;      Params:         0       0       0       0       0       0       0       0
  9271 ;;      Locals:         0       0       0       0       0       0       0       0
  9272 ;;      Temps:          0      12       0       0       0       0       0       0
  9273 ;;      Totals:         0      12       0       0       0       0       0       0
  9274 ;;Total ram usage:       12 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:    3
  9277 ;; This function calls:
  9278 ;;		Nothing
  9279 ;; This function is called by:
  9280 ;;		_InitMotorRun
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           
  9285                           ;psect for function _commutate
  9286  1AA3                     _commutate:	
  9287  1AA3                     l5898:	
  9288                           ;incstack = 0
  9289                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0]
  9290                           
  9291                           
  9292                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  9293  1AA3  3000               	movlw	0
  9294  1AA4  0021               	movlb	1	; select bank1
  9295  1AA5  0239               	subwf	(_ui16_step_cnt+1)^(0+128),w
  9296  1AA6  300A               	movlw	10
  9297  1AA7  1903               	skipnz
  9298  1AA8  0238               	subwf	_ui16_step_cnt^(0+128),w
  9299  1AA9  1803               	skipnc
  9300  1AAA  2AAE               	goto	l5902
  9301                           
  9302                           ;bldc.c: 1433: {
  9303                           ;bldc.c: 1435: ui16_step_cnt++;
  9304  1AAB  0AB8               	incf	_ui16_step_cnt^(0+128),f
  9305  1AAC  1903               	skipnz
  9306  1AAD  0AB9               	incf	(_ui16_step_cnt+1)^(0+128),f
  9307  1AAE                     l5902:	
  9308                           
  9309                           ;bldc.c: 1437: }
  9310                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  9311                           
  9312                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  9313                           
  9314                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  9315  1AAE  26D3  319A         	fcall	PL20	;call to abstracted procedure
  9316  1AB0  0020               	movlb	0	; select bank0
  9317  1AB1  00A4               	movwf	??_commutate
  9318  1AB2  0023               	movlb	3	; select bank3
  9319  1AB3  0825               	movf	((_B+1)^(0+384)+4),w
  9320  1AB4  3D23               	addwfc	((_B+1)^(0+384)+2),w
  9321  1AB5  0020               	movlb	0	; select bank0
  9322  1AB6  00A5               	movwf	??_commutate+1
  9323  1AB7  0023               	movlb	3	; select bank3
  9324  1AB8  0826               	movf	(_B^(0+384)+6),w
  9325  1AB9  0020               	movlb	0	; select bank0
  9326  1ABA  0724               	addwf	??_commutate,w
  9327  1ABB  00A6               	movwf	??_commutate+2
  9328  1ABC  0023               	movlb	3	; select bank3
  9329  1ABD  0827               	movf	((_B+1)^(0+384)+6),w
  9330  1ABE  0020               	movlb	0	; select bank0
  9331  1ABF  3D25               	addwfc	??_commutate+1,w
  9332  1AC0  00A7               	movwf	??_commutate+3
  9333  1AC1  0023               	movlb	3	; select bank3
  9334  1AC2  0828               	movf	(_B^(0+384)+8),w
  9335  1AC3  0020               	movlb	0	; select bank0
  9336  1AC4  0726               	addwf	??_commutate+2,w
  9337  1AC5  00A8               	movwf	??_commutate+4
  9338  1AC6  0023               	movlb	3	; select bank3
  9339  1AC7  0829               	movf	((_B+1)^(0+384)+8),w
  9340  1AC8  0020               	movlb	0	; select bank0
  9341  1AC9  3D27               	addwfc	??_commutate+3,w
  9342  1ACA  00A9               	movwf	??_commutate+5
  9343  1ACB  0023               	movlb	3	; select bank3
  9344  1ACC  082A               	movf	(_B^(0+384)+10),w
  9345  1ACD  0020               	movlb	0	; select bank0
  9346  1ACE  0728               	addwf	??_commutate+4,w
  9347  1ACF  00AA               	movwf	??_commutate+6
  9348  1AD0  0023               	movlb	3	; select bank3
  9349  1AD1  082B               	movf	((_B+1)^(0+384)+10),w
  9350  1AD2  0020               	movlb	0	; select bank0
  9351  1AD3  3D29               	addwfc	??_commutate+5,w
  9352  1AD4  00AB               	movwf	??_commutate+7
  9353  1AD5  3F00               	moviw [0]fsr0
  9354  1AD6  072A               	addwf	??_commutate+6,w
  9355  1AD7  00AC               	movwf	??_commutate+8
  9356  1AD8  3F01               	moviw [1]fsr0
  9357  1AD9  3D2B               	addwfc	??_commutate+7,w
  9358  1ADA  00AD               	movwf	??_commutate+9
  9359  1ADB  3F40               	moviw [0]fsr1
  9360  1ADC  072C               	addwf	??_commutate+8,w
  9361  1ADD  00AE               	movwf	??_commutate+10
  9362  1ADE  3F41               	moviw [1]fsr1
  9363  1ADF  3D2D               	addwfc	??_commutate+9,w
  9364  1AE0  00AF               	movwf	??_commutate+11
  9365  1AE1  0023               	movlb	3	; select bank3
  9366  1AE2  0820               	movf	_B^(0+384),w
  9367  1AE3  0020               	movlb	0	; select bank0
  9368  1AE4  072E               	addwf	??_commutate+10,w
  9369  1AE5  0021               	movlb	1	; select bank1
  9370  1AE6  00B2               	movwf	_ui16_speed_fil^(0+128)
  9371  1AE7  0023               	movlb	3	; select bank3
  9372  1AE8  0821               	movf	(_B+1)^(0+384),w
  9373  1AE9  0020               	movlb	0	; select bank0
  9374  1AEA  3D2F               	addwfc	??_commutate+11,w
  9375                           
  9376                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  9377                           
  9378                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  9379                           
  9380                           ;bldc.c: 1455: bemf_filter = 62;
  9381                           
  9382                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  9383  1AEB  26EB  319A         	fcall	PL32	;call to abstracted procedure
  9384                           
  9385                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  9386  1AED  1DE3               	btfss	_MotorFlags,3
  9387  1AEE  2B29               	goto	l327
  9388                           
  9389                           ;bldc.c: 1463: {
  9390                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>>7;
  9391                           
  9392                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  9393  1AEF  26B8  319A         	fcall	PL18	;call to abstracted procedure
  9394  1AF1  1803               	skipnc
  9395  1AF2  2AF6               	goto	l5930
  9396                           
  9397                           ;bldc.c: 1474: {
  9398                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
  9399  1AF3  2750  319A         	fcall	PL44	;call to abstracted procedure
  9400                           
  9401                           ;bldc.c: 1478: }
  9402  1AF5  2B0A               	goto	l5954
  9403  1AF6                     l5930:	
  9404                           
  9405                           ;bldc.c: 1481: else
  9406                           ;bldc.c: 1482: {
  9407                           ;bldc.c: 1484: phase_delay_counter = 0;
  9408  1AF6  0023               	movlb	3	; select bank3
  9409  1AF7  01D6               	clrf	_phase_delay_counter^(0+384)
  9410  1AF8  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  9411  1AF9  2B0A               	goto	l5954
  9412  1AFA                     l5932:	
  9413                           
  9414                           ;bldc.c: 1514: {
  9415                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
  9416  1AFA  30A6               	movlw	166
  9417  1AFB  2B06               	goto	L5
  9418  1AFC                     l5934:	
  9419                           ;bldc.c: 1517: break;
  9420                           
  9421                           
  9422                           ;bldc.c: 1524: {
  9423                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
  9424  1AFC  27A8  319A         	fcall	PL100	;call to abstracted procedure
  9425                           
  9426                           ;bldc.c: 1527: break;
  9427  1AFE  2B18               	goto	l5956
  9428  1AFF                     l5936:	
  9429                           
  9430                           ;bldc.c: 1534: {
  9431                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
  9432  1AFF  307D               	movlw	125
  9433  1B00  2B06               	goto	L5
  9434  1B01                     l5938:	
  9435                           ;bldc.c: 1537: break;
  9436                           
  9437                           
  9438                           ;bldc.c: 1544: {
  9439                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
  9440  1B01  3053               	movlw	83
  9441  1B02  2B06               	goto	L5
  9442  1B03                     l5940:	
  9443                           ;bldc.c: 1547: break;
  9444                           
  9445                           
  9446                           ;bldc.c: 1554: {
  9447                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1600 * 2 )
      +                           ) ;
  9448  1B03  303E               	movlw	62
  9449  1B04  2B06               	goto	L5
  9450  1B05                     l5942:	
  9451                           ;bldc.c: 1557: break;
  9452                           
  9453                           
  9454                           ;bldc.c: 1564: {
  9455                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           ) ;
  9456  1B05  3032               	movlw	50
  9457  1B06                     L5:	
  9458  1B06  0022               	movlb	2	; select bank2
  9459  1B07  00B1               	movwf	_ui16_comm_time_max^(0+256)
  9460  1B08  01B2               	clrf	(_ui16_comm_time_max+1)^(0+256)
  9461                           
  9462                           ;bldc.c: 1567: break;
  9463  1B09  2B18               	goto	l5956
  9464  1B0A                     l5954:	
  9465                           
  9466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9467                           ; Switch size 1, requested type "space"
  9468                           ; Number of cases is 1, Range of values is 0 to 0
  9469                           ; switch strategies available:
  9470                           ; Name         Instructions Cycles
  9471                           ; simple_byte            4     3 (average)
  9472                           ; direct_byte            8     6 (fixed)
  9473                           ; jumptable            260     6 (fixed)
  9474                           ;	Chosen strategy is simple_byte
  9475  1B0A  0021               	movlb	1	; select bank1
  9476  1B0B  0839               	movf	(_ui16_step_cnt+1)^(0+128),w
  9477  1B0C  3A00               	xorlw	0	; case 0
  9478  1B0D  1903               	skipnz
  9479  1B0E  2B10               	goto	l14486
  9480  1B0F  2B05               	goto	l5942
  9481  1B10                     l14486:	
  9482                           
  9483                           ; Switch size 1, requested type "space"
  9484                           ; Number of cases is 10, Range of values is 0 to 9
  9485                           ; switch strategies available:
  9486                           ; Name         Instructions Cycles
  9487                           ; direct_byte           26     6 (fixed)
  9488                           ; simple_byte           31    16 (average)
  9489                           ; jumptable            260     6 (fixed)
  9490                           ;	Chosen strategy is direct_byte
  9491  1B10  27C5  319A         	fcall	PL122	;call to abstracted procedure
  9492  1B12  1803               	skipnc
  9493  1B13  2B05               	goto	l5942
  9494  1B14  3186               	movlp	high S14488
  9495  1B15  3504               	lslf	4,w
  9496  1B16  3EB0               	addlw	low S14488
  9497  1B17  0082               	movwf	2
  9498  1B18                     l5956:	
  9499                           
  9500                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
  9501  1B18  3000               	movlw	0
  9502  1B19  0232               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  9503  1B1A  3032               	movlw	50
  9504  1B1B  1903               	skipnz
  9505  1B1C  0231               	subwf	_ui16_comm_time_max^(0+256),w
  9506  1B1D  1803               	skipnc
  9507  1B1E  2B22               	goto	l5960
  9508                           
  9509                           ;bldc.c: 1626: {
  9510                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
  9511  1B1F  3032               	movlw	50
  9512  1B20  00B1               	movwf	_ui16_comm_time_max^(0+256)
  9513  1B21  01B2               	clrf	(_ui16_comm_time_max+1)^(0+256)
  9514  1B22                     l5960:	
  9515                           
  9516                           ;bldc.c: 1630: }
  9517                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
  9518  1B22  0020               	movlb	0	; select bank0
  9519  1B23  1E63               	btfss	_MotorFlags,4
  9520  1B24  2B57               	goto	l345
  9521                           
  9522                           ;bldc.c: 1636: {
  9523                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
  9524  1B25  300A               	movlw	10
  9525  1B26  0021               	movlb	1	; select bank1
  9526  1B27  00E4               	movwf	_ui8_StartupPWM^(0+128)
  9527                           
  9528                           ;bldc.c: 1641: }
  9529                           ;bldc.c: 1644: }
  9530  1B28  2B57               	goto	l345
  9531  1B29                     l327:	
  9532                           
  9533                           ;bldc.c: 1647: else
  9534                           ;bldc.c: 1648: {
  9535                           ;bldc.c: 1652: if( rising_bemf_flag)
  9536  1B29  1C68               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9537  1B2A  2B2F               	goto	l5966
  9538                           
  9539                           ;bldc.c: 1654: {
  9540                           ;bldc.c: 1657: phase_delay_counter = 0;
  9541  1B2B  0023               	movlb	3	; select bank3
  9542  1B2C  01D6               	clrf	_phase_delay_counter^(0+384)
  9543  1B2D  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  9544                           
  9545                           ;bldc.c: 1659: }
  9546  1B2E  2B3C               	goto	l5968
  9547  1B2F                     l5966:	
  9548                           
  9549                           ;bldc.c: 1662: else
  9550                           ;bldc.c: 1663: {
  9551                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  9552  1B2F  085B               	movf	_comm_time+1,w
  9553  1B30  00A5               	movwf	??_commutate+1
  9554  1B31  085A               	movf	_comm_time,w
  9555  1B32  00A4               	movwf	??_commutate
  9556  1B33  36A5               	lsrf	??_commutate+1,f
  9557  1B34  0CA4               	rrf	??_commutate,f
  9558  1B35  0824               	movf	??_commutate,w
  9559  1B36  0023               	movlb	3	; select bank3
  9560  1B37  00D6               	movwf	_phase_delay_counter^(0+384)
  9561  1B38  0020               	movlb	0	; select bank0
  9562  1B39  0825               	movf	??_commutate+1,w
  9563  1B3A  0023               	movlb	3	; select bank3
  9564  1B3B  00D7               	movwf	(_phase_delay_counter+1)^(0+384)
  9565  1B3C                     l5968:	
  9566                           
  9567                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  9568                           
  9569                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
  9570                           
  9571                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  9572  1B3C  278D  319A         	fcall	PL80	;call to abstracted procedure
  9573  1B3E  1F63               	btfss	_MotorFlags,6
  9574  1B3F  2B55               	goto	l5992
  9575                           
  9576                           ;bldc.c: 1693: {
  9577                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  9578  1B40  27C0  319A         	fcall	PL120	;call to abstracted procedure
  9579  1B42  1903               	btfsc	3,2
  9580  1B43  2B57               	goto	l345
  9581                           
  9582                           ;bldc.c: 1706: else
  9583                           ;bldc.c: 1707: {
  9584                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  9585  1B44  27D4  319A         	fcall	PL134	;call to abstracted procedure
  9586  1B46  1803               	skipnc
  9587  1B47  2B4F               	goto	l5986
  9588                           
  9589                           ;bldc.c: 1712: {
  9590                           ;bldc.c: 1714: CCPR1L--;
  9591                           
  9592                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  9593  1B48  27AE  319A         	fcall	PL108	;call to abstracted procedure
  9594  1B4A  1803               	skipnc
  9595  1B4B  2B57               	goto	l345
  9596                           
  9597                           ;bldc.c: 1718: {
  9598                           ;bldc.c: 1720: CCPR1L--;
  9599  1B4C  0025               	movlb	5	; select bank5
  9600  1B4D  0391               	decf	17,f	;volatile
  9601  1B4E  2B57               	goto	l345
  9602  1B4F                     l5986:	
  9603                           
  9604                           ;bldc.c: 1728: else
  9605                           ;bldc.c: 1729: {
  9606                           ;bldc.c: 1731: CCPR1L++;
  9607                           
  9608                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  9609  1B4F  27A1  319A         	fcall	PL98	;call to abstracted procedure
  9610  1B51  1803               	skipnc
  9611  1B52  2B57               	goto	l345
  9612                           
  9613                           ;bldc.c: 1735: {
  9614                           ;bldc.c: 1737: CCPR1L++;
  9615  1B53  0A91               	incf	17,f	;volatile
  9616  1B54  2B57               	goto	l345
  9617  1B55                     l5992:	
  9618                           
  9619                           ;bldc.c: 1768: else
  9620                           ;bldc.c: 1769: {
  9621                           ;bldc.c: 1771: CCPR1L = 0;
  9622  1B55  0025               	movlb	5	; select bank5
  9623  1B56  0191               	clrf	17	;volatile
  9624  1B57                     l345:	
  9625                           
  9626                           ;bldc.c: 1773: }
  9627                           ;bldc.c: 1777: }
  9628                           ;bldc.c: 1780: comm_time = 0;
  9629                           
  9630                           ;bldc.c: 1784: if( comm_state == 0xff )
  9631  1B57  27CF  319A         	fcall	PL130	;call to abstracted procedure
  9632  1B59  0F63               	incfsz	_comm_state^(0+128),w
  9633  1B5A  2BA9               	goto	l6142
  9634                           
  9635                           ;bldc.c: 1786: {
  9636                           ;bldc.c: 1788: comm_state = 6;
  9637  1B5B  3006               	movlw	6
  9638  1B5C  00E3               	movwf	_comm_state^(0+128)
  9639  1B5D  2BA9               	goto	l6142
  9640  1B5E                     l5998:	
  9641                           
  9642                           ;bldc.c: 1800: {
  9643                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
  9644  1B5E  3001               	movlw	1
  9645  1B5F  0025               	movlb	5	; select bank5
  9646  1B60  0096               	movwf	22	;volatile
  9647                           
  9648                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  9649  1B61  0020               	movlb	0	; select bank0
  9650  1B62  1F63               	btfss	_MotorFlags,6
  9651  1B63  2B66               	goto	l6004
  9652                           
  9653                           ;bldc.c: 1811: {
  9654                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9655  1B64  2781  319A         	fcall	PL72	;call to abstracted procedure
  9656  1B66                     l6004:	
  9657                           
  9658                           ;bldc.c: 1815: }
  9659                           ;bldc.c: 1819: LATB2 = 0;
  9660                           
  9661                           ;bldc.c: 1820: LATB1 = 0;
  9662                           
  9663                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9664                           
  9665                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9666                           
  9667                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9668                           
  9669                           ;bldc.c: 1824: CM1CON1 = 0x02;
  9670                           
  9671                           ;bldc.c: 1837: CM1CON0 = 0x84;
  9672                           
  9673                           ;bldc.c: 1838: rising_bemf_flag = 1;
  9674  1B66  271F  319A         	fcall	PL38	;call to abstracted procedure
  9675  1B68  2B96               	goto	L11
  9676  1B69                     l6022:	
  9677                           ;bldc.c: 1845: break;
  9678                           
  9679                           ;bldc.c: 1839: comm_state = 6;
  9680                           
  9681                           
  9682                           ;bldc.c: 1855: {
  9683                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
  9684  1B69  3001               	movlw	1
  9685  1B6A  0025               	movlb	5	; select bank5
  9686  1B6B  0096               	movwf	22	;volatile
  9687                           
  9688                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  9689  1B6C  0020               	movlb	0	; select bank0
  9690  1B6D  1F63               	btfss	_MotorFlags,6
  9691  1B6E  2B71               	goto	l6028
  9692                           
  9693                           ;bldc.c: 1865: {
  9694                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9695  1B6F  2787  319A         	fcall	PL76	;call to abstracted procedure
  9696  1B71                     l6028:	
  9697                           
  9698                           ;bldc.c: 1869: }
  9699                           ;bldc.c: 1873: LATB2 = 1;
  9700                           
  9701                           ;bldc.c: 1874: LATB1 = 0;
  9702                           
  9703                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9704                           
  9705                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9706                           
  9707                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9708                           
  9709                           ;bldc.c: 1878: CM1CON1 = 0x01;
  9710                           
  9711                           ;bldc.c: 1892: CM1CON0 = 0x94;
  9712  1B71  2761  319A         	fcall	PL46	;call to abstracted procedure
  9713  1B73                     l6042:	
  9714                           
  9715                           ;bldc.c: 1893: rising_bemf_flag = 0;
  9716                           
  9717                           ;bldc.c: 1894: comm_state = 1;
  9718  1B73  27BA  319A         	fcall	PL118	;call to abstracted procedure
  9719                           
  9720                           ;bldc.c: 1902: break;
  9721  1B75  2BBD               	goto	l6144
  9722  1B76                     l6046:	
  9723                           
  9724                           ;bldc.c: 1912: {
  9725                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
  9726  1B76  3002               	movlw	2
  9727  1B77  0025               	movlb	5	; select bank5
  9728  1B78  0096               	movwf	22	;volatile
  9729                           
  9730                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  9731  1B79  0020               	movlb	0	; select bank0
  9732  1B7A  1F63               	btfss	_MotorFlags,6
  9733  1B7B  2B7E               	goto	l6052
  9734                           
  9735                           ;bldc.c: 1922: {
  9736                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9737  1B7C  277B  319A         	fcall	PL68	;call to abstracted procedure
  9738  1B7E                     l6052:	
  9739                           
  9740                           ;bldc.c: 1926: }
  9741                           ;bldc.c: 1929: LATC2 = 0;
  9742                           
  9743                           ;bldc.c: 1931: LATB1 = 0;
  9744                           
  9745                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9746                           
  9747                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9748                           
  9749                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9750                           
  9751                           ;bldc.c: 1935: CM1CON1 = 0x00;
  9752                           
  9753                           ;bldc.c: 1949: CM1CON0 = 0x84;
  9754                           
  9755                           ;bldc.c: 1950: rising_bemf_flag = 1;
  9756  1B7E  2740  319A         	fcall	PL42	;call to abstracted procedure
  9757  1B80  2B96               	goto	L11
  9758  1B81                     l6066:	
  9759                           ;bldc.c: 1956: break;
  9760                           
  9761                           ;bldc.c: 1951: comm_state = 2;
  9762                           
  9763                           
  9764                           ;bldc.c: 1966: {
  9765                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
  9766  1B81  3002               	movlw	2
  9767  1B82  0025               	movlb	5	; select bank5
  9768  1B83  0096               	movwf	22	;volatile
  9769                           
  9770                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  9771  1B84  0020               	movlb	0	; select bank0
  9772  1B85  1F63               	btfss	_MotorFlags,6
  9773  1B86  2B89               	goto	l6072
  9774                           
  9775                           ;bldc.c: 1977: {
  9776                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9777  1B87  2781  319A         	fcall	PL72	;call to abstracted procedure
  9778  1B89                     l6072:	
  9779                           
  9780                           ;bldc.c: 1981: }
  9781                           ;bldc.c: 1984: LATC2 = 0;
  9782                           
  9783                           ;bldc.c: 1986: LATB1 = 1;
  9784                           
  9785                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9786                           
  9787                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9788                           
  9789                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9790                           
  9791                           ;bldc.c: 1990: CM1CON1 = 0x02;
  9792                           
  9793                           ;bldc.c: 2004: CM1CON0 = 0x94;
  9794                           
  9795                           ;bldc.c: 2005: rising_bemf_flag = 0;
  9796  1B89  270E  319A         	fcall	PL36	;call to abstracted procedure
  9797  1B8B  2BA2               	goto	L12
  9798  1B8C                     l6090:	
  9799                           ;bldc.c: 2011: break;
  9800                           
  9801                           ;bldc.c: 2006: comm_state = 3;
  9802                           
  9803                           
  9804                           ;bldc.c: 2020: {
  9805                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
  9806  1B8C  3004               	movlw	4
  9807  1B8D  0025               	movlb	5	; select bank5
  9808  1B8E  0096               	movwf	22	;volatile
  9809                           
  9810                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  9811  1B8F  0020               	movlb	0	; select bank0
  9812  1B90  1F63               	btfss	_MotorFlags,6
  9813  1B91  2B94               	goto	l6096
  9814                           
  9815                           ;bldc.c: 2031: {
  9816                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9817  1B92  2787  319A         	fcall	PL76	;call to abstracted procedure
  9818  1B94                     l6096:	
  9819                           
  9820                           ;bldc.c: 2035: }
  9821                           ;bldc.c: 2038: LATC2 = 0;
  9822                           
  9823                           ;bldc.c: 2039: LATB2 = 0;
  9824                           
  9825                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9826                           
  9827                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9828                           
  9829                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9830                           
  9831                           ;bldc.c: 2044: CM1CON1 = 0x01;
  9832                           
  9833                           ;bldc.c: 2059: CM1CON0 = 0x84;
  9834                           
  9835                           ;bldc.c: 2060: rising_bemf_flag = 1;
  9836  1B94  26FD  319A         	fcall	PL34	;call to abstracted procedure
  9837  1B96                     L11:	
  9838  1B96  1468               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9839                           
  9840                           ;bldc.c: 2061: comm_state = 4;
  9841  1B97  2BA3               	goto	L9
  9842  1B98                     l6114:	
  9843                           ;bldc.c: 2066: break;
  9844                           
  9845                           
  9846                           ;bldc.c: 2076: {
  9847                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
  9848  1B98  3004               	movlw	4
  9849  1B99  0025               	movlb	5	; select bank5
  9850  1B9A  0096               	movwf	22	;volatile
  9851                           
  9852                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  9853  1B9B  0020               	movlb	0	; select bank0
  9854  1B9C  1F63               	btfss	_MotorFlags,6
  9855  1B9D  2BA0               	goto	l6120
  9856                           
  9857                           ;bldc.c: 2086: {
  9858                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9859  1B9E  277B  319A         	fcall	PL68	;call to abstracted procedure
  9860  1BA0                     l6120:	
  9861                           
  9862                           ;bldc.c: 2090: }
  9863                           ;bldc.c: 2093: LATC2 = 1;
  9864                           
  9865                           ;bldc.c: 2094: LATB2 = 0;
  9866                           
  9867                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9868                           
  9869                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9870                           
  9871                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9872                           
  9873                           ;bldc.c: 2099: CM1CON1 = 0x00;
  9874                           
  9875                           ;bldc.c: 2113: CM1CON0 = 0x94;
  9876                           
  9877                           ;bldc.c: 2114: rising_bemf_flag = 0;
  9878  1BA0  2730  319A         	fcall	PL40	;call to abstracted procedure
  9879  1BA2                     L12:	
  9880  1BA2  1068               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9881  1BA3                     L9:	
  9882                           
  9883                           ;bldc.c: 2115: comm_state = 5;
  9884  1BA3  0021               	movlb	1	; select bank1
  9885  1BA4  00E3               	movwf	_comm_state^(0+128)
  9886                           
  9887                           ;bldc.c: 2120: break;
  9888  1BA5  2BBD               	goto	l6144
  9889  1BA6                     l6134:	
  9890                           
  9891                           ;bldc.c: 2129: {
  9892                           ;bldc.c: 2131: PSTR1CON = 0x00;
  9893                           
  9894                           ;bldc.c: 2132: CM1CON0 = 0x00;
  9895  1BA6  27CA  319A         	fcall	PL124	;call to abstracted procedure
  9896  1BA8  2B73               	goto	l6042
  9897  1BA9                     l6142:	
  9898  1BA9  0863               	movf	_comm_state^(0+128),w
  9899                           
  9900                           ; Switch size 1, requested type "space"
  9901                           ; Number of cases is 6, Range of values is 1 to 6
  9902                           ; switch strategies available:
  9903                           ; Name         Instructions Cycles
  9904                           ; simple_byte           19    10 (average)
  9905                           ; direct_byte           21     9 (fixed)
  9906                           ; jumptable            263     9 (fixed)
  9907                           ;	Chosen strategy is simple_byte
  9908  1BAA  3A01               	xorlw	1	; case 1
  9909  1BAB  1903               	skipnz
  9910  1BAC  2B5E               	goto	l5998
  9911  1BAD  3A03               	xorlw	3	; case 2
  9912  1BAE  1903               	skipnz
  9913  1BAF  2B69               	goto	l6022
  9914  1BB0  3A01               	xorlw	1	; case 3
  9915  1BB1  1903               	skipnz
  9916  1BB2  2B76               	goto	l6046
  9917  1BB3  3A07               	xorlw	7	; case 4
  9918  1BB4  1903               	skipnz
  9919  1BB5  2B81               	goto	l6066
  9920  1BB6  3A01               	xorlw	1	; case 5
  9921  1BB7  1903               	skipnz
  9922  1BB8  2B8C               	goto	l6090
  9923  1BB9  3A03               	xorlw	3	; case 6
  9924  1BBA  1903               	skipnz
  9925  1BBB  2B98               	goto	l6114
  9926  1BBC  2BA6               	goto	l6134
  9927  1BBD                     l6144:	
  9928                           
  9929                           ;bldc.c: 2146: {
  9930                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  9931                           
  9932                           ;bldc.c: 2158: }
  9933                           ;bldc.c: 2161: comm_time = 0;
  9934                           
  9935                           ;bldc.c: 2150: }
  9936  1BBD  2F9B               	ljmp	PL90	;call to abstracted procedure
  9937  1BBE                     __end_of_commutate:	
  9938  1BBE                     __ptext51:	
  9939 ;; *************** function _interrrupt_bldc *****************
  9940 ;; Defined at:
  9941 ;;		line 281 in file "../bldc.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;		None
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;  ui32_tmp        4    0[BANK0 ] unsigned long 
  9946 ;; Return value:  Size  Location     Type
  9947 ;;                  1    wreg      void 
  9948 ;; Registers used:
  9949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9950 ;; Tracked objects:
  9951 ;;		On entry : 1F/0
  9952 ;;		On exit  : 1C/0
  9953 ;;		Unchanged: 0/0
  9954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9955 ;;      Params:         0       0       0       0       0       0       0       0
  9956 ;;      Locals:         0       4       0       0       0       0       0       0
  9957 ;;      Temps:          2       0       0       0       0       0       0       0
  9958 ;;      Totals:         2       4       0       0       0       0       0       0
  9959 ;;Total ram usage:        6 bytes
  9960 ;; Hardware stack levels used:    1
  9961 ;; Hardware stack levels required when called:    1
  9962 ;; This function calls:
  9963 ;;		_BLDCWait
  9964 ;;		i1_ADC_Read
  9965 ;;		i1_ADC_Wait
  9966 ;;		i1___lwdiv
  9967 ;;		i1___wmul
  9968 ;;		i1_commutate
  9969 ;; This function is called by:
  9970 ;;		_interrupt_handler
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           
  9975                           ;psect for function _interrrupt_bldc
  9976  1BBE                     _interrrupt_bldc:	
  9977                           
  9978                           ;bldc.c: 286: unsigned long ui32_tmp ;
  9979                           ;bldc.c: 288: ++comm_time ;
  9980                           
  9981                           ;incstack = 0
  9982                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9983  1BBE  0ADA               	incf	_comm_time,f
  9984  1BBF  1903               	skipnz
  9985  1BC0  0ADB               	incf	_comm_time+1,f
  9986                           
  9987                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
  9988  1BC1  085B               	movf	_comm_time+1,w
  9989  1BC2  0022               	movlb	2	; select bank2
  9990  1BC3  0232               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  9991  1BC4  1D03               	skipz
  9992  1BC5  2BCA               	goto	u1076_25
  9993  1BC6  0020               	movlb	0	; select bank0
  9994  1BC7  085A               	movf	_comm_time,w
  9995  1BC8  0022               	movlb	2	; select bank2
  9996  1BC9  0231               	subwf	_ui16_comm_time_max^(0+256),w
  9997  1BCA                     u1076_25:	
  9998  1BCA  1803               	skipnc
  9999  1BCB  2BCE               	goto	i1l12526
 10000                           
 10001                           ;bldc.c: 294: {
 10002                           ;bldc.c: 296: commutate( );
 10003  1BCC  2590  319A         	fcall	i1_commutate
 10004  1BCE                     i1l12526:	
 10005                           
 10006                           ;bldc.c: 298: }
 10007                           ;bldc.c: 302: if( ui16_step_cnt < 10 )
 10008  1BCE  3000               	movlw	0
 10009  1BCF  0021               	movlb	1	; select bank1
 10010  1BD0  0239               	subwf	(_ui16_step_cnt+1)^(0+128),w
 10011  1BD1  300A               	movlw	10
 10012  1BD2  1903               	skipnz
 10013  1BD3  0238               	subwf	_ui16_step_cnt^(0+128),w
 10014  1BD4  1C03               	btfss	3,0
 10015  1BD5  2BD8               	goto	i1l12530
 10016                           
 10017                           ;bldc.c: 311: else
 10018                           ;bldc.c: 312: {
 10019                           ;bldc.c: 322: MotorFlags.bits.B3 = 0;
 10020  1BD6  0020               	movlb	0	; select bank0
 10021  1BD7  11E3               	bcf	_MotorFlags,3
 10022  1BD8                     i1l12530:	
 10023                           
 10024                           ;bldc.c: 328: }
 10025                           ;bldc.c: 331: if (ui16_step_cnt >= 3 )
 10026  1BD8  3000               	movlw	0
 10027  1BD9  0021               	movlb	1	; select bank1
 10028  1BDA  0239               	subwf	(_ui16_step_cnt+1)^(0+128),w
 10029  1BDB  3003               	movlw	3
 10030  1BDC  1903               	skipnz
 10031  1BDD  0238               	subwf	_ui16_step_cnt^(0+128),w
 10032  1BDE  1C03               	skipc
 10033  1BDF  2BE2               	goto	i1l12534
 10034                           
 10035                           ;bldc.c: 333: {
 10036                           ;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
 10037  1BE0  0020               	movlb	0	; select bank0
 10038  1BE1  1263               	bcf	_MotorFlags,4
 10039  1BE2                     i1l12534:	
 10040                           
 10041                           ;bldc.c: 337: }
 10042                           ;bldc.c: 340: BLDCWait( );
 10043  1BE2  2697  319A         	fcall	_BLDCWait
 10044                           
 10045                           ;bldc.c: 346: if( C1OUT )
 10046  1BE4  0022               	movlb	2	; select bank2
 10047  1BE5  1F11               	btfss	17,6	;volatile
 10048  1BE6  2BEA               	goto	i1l263
 10049                           
 10050                           ;bldc.c: 349: {
 10051                           ;bldc.c: 351: ui8_CompFlag = 0x00;
 10052  1BE7  0021               	movlb	1	; select bank1
 10053  1BE8  01DD               	clrf	_ui8_CompFlag^(0+128)
 10054                           
 10055                           ;bldc.c: 353: }
 10056  1BE9  2CF2               	goto	i1l12716
 10057  1BEA                     i1l263:	
 10058                           
 10059                           ;bldc.c: 356: else
 10060                           ;bldc.c: 357: {
 10061                           ;bldc.c: 362: ui8_CompFlag = 0x01;
 10062  1BEA  0021               	movlb	1	; select bank1
 10063  1BEB  01DD               	clrf	_ui8_CompFlag^(0+128)
 10064  1BEC  0ADD               	incf	_ui8_CompFlag^(0+128),f
 10065  1BED  2CF2               	goto	i1l12716
 10066  1BEE                     i1l12540:	
 10067                           
 10068                           ;bldc.c: 378: {
 10069                           ;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
 10070  1BEE  302D               	movlw	45
 10071  1BEF  009D               	movwf	29	;volatile
 10072                           
 10073                           ;bldc.c: 387: ADC_Wait( );
 10074  1BF0  2554  319A         	fcall	i1_ADC_Wait
 10075                           
 10076                           ;bldc.c: 391: ( GO_nDONE = 1 );
 10077  1BF2  0021               	movlb	1	; select bank1
 10078  1BF3  149D               	bsf	29,1	;volatile
 10079                           
 10080                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
 10081  1BF4  256D  319A         	fcall	i1_ADC_Read
 10082  1BF6  0871               	movf	?i1_ADC_Read+1,w
 10083  1BF7  0023               	movlb	3	; select bank3
 10084  1BF8  00E5               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
 10085  1BF9  0870               	movf	?i1_ADC_Read,w
 10086  1BFA  00E4               	movwf	_ui16_NTC_Temp_bldc^(0+384)
 10087                           
 10088                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
 10089  1BFB  3031               	movlw	49
 10090  1BFC  0021               	movlb	1	; select bank1
 10091  1BFD                     L51:	
 10092  1BFD  009D               	movwf	29	;volatile
 10093  1BFE                     L46:	
 10094                           
 10095                           ;bldc.c: 403: ADC_Wait( );
 10096  1BFE  2554  319A         	fcall	i1_ADC_Wait
 10097                           
 10098                           ;bldc.c: 407: ( GO_nDONE = 1 );
 10099  1C00  0021               	movlb	1	; select bank1
 10100  1C01  149D               	bsf	29,1	;volatile
 10101  1C02                     i1l12550:	
 10102                           
 10103                           ;bldc.c: 410: ui8_sampleState++;
 10104  1C02  0021               	movlb	1	; select bank1
 10105  1C03  0ADE               	incf	_ui8_sampleState^(0+128),f
 10106                           
 10107                           ;bldc.c: 413: break;
 10108  1C04  2CFF               	goto	i1l267
 10109  1C05                     i1l12552:	
 10110                           
 10111                           ;bldc.c: 421: {
 10112                           ;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
 10113  1C05  085F               	movf	_ui8_Ubemf_sel^(0+128),w
 10114  1C06  009D               	movwf	29	;volatile
 10115                           
 10116                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
 10117  1C07  081B               	movf	27,w	;volatile
 10118  1C08  0020               	movlb	0	; select bank0
 10119  1C09  00E6               	movwf	_ui16_Ubat_bldc	;volatile
 10120                           
 10121                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
 10122  1C0A  0021               	movlb	1	; select bank1
 10123  1C0B  081C               	movf	28,w	;volatile
 10124  1C0C  0020               	movlb	0	; select bank0
 10125  1C0D  00E7               	movwf	_ui16_Ubat_bldc+1	;volatile
 10126                           
 10127                           ;bldc.c: 454: __nop();
 10128  1C0E  0000               	nop
 10129                           
 10130                           ;bldc.c: 455: __nop();
 10131  1C0F  0000               	nop
 10132                           
 10133                           ;bldc.c: 456: __nop();
 10134  1C10  0000               	nop
 10135                           
 10136                           ;bldc.c: 457: __nop();
 10137  1C11  0000               	nop
 10138                           
 10139                           ;bldc.c: 458: __nop();
 10140  1C12  0000               	nop
 10141                           
 10142                           ;bldc.c: 459: __nop();
 10143  1C13  0000               	nop
 10144                           
 10145                           ;bldc.c: 460: __nop();
 10146  1C14  0000               	nop
 10147                           
 10148                           ;bldc.c: 461: __nop();
 10149  1C15  0000               	nop
 10150                           
 10151                           ;bldc.c: 463: __nop();
 10152  1C16  0000               	nop
 10153                           
 10154                           ;bldc.c: 464: __nop();
 10155  1C17  0000               	nop
 10156                           
 10157                           ;bldc.c: 465: __nop();
 10158  1C18  0000               	nop
 10159                           
 10160                           ;bldc.c: 466: __nop();
 10161  1C19  0000               	nop
 10162                           
 10163                           ;bldc.c: 467: __nop();
 10164  1C1A  0000               	nop
 10165                           
 10166                           ;bldc.c: 468: __nop();
 10167  1C1B  0000               	nop
 10168                           
 10169                           ;bldc.c: 469: __nop();
 10170  1C1C  0000               	nop
 10171                           
 10172                           ;bldc.c: 470: __nop();
 10173  1C1D  0000               	nop
 10174  1C1E  2BFE               	goto	L46
 10175  1C1F                     i1l12592:	
 10176                           ;bldc.c: 474: ADC_Wait();
 10177                           
 10178                           
 10179                           ;bldc.c: 491: {
 10180                           ;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
 10181  1C1F  081B               	movf	27,w	;volatile
 10182  1C20  00B4               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
 10183                           
 10184                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
 10185  1C21  081C               	movf	28,w	;volatile
 10186  1C22  00B5               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
 10187                           
 10188                           ;bldc.c: 511: ( GO_nDONE = 1 );
 10189  1C23  149D               	bsf	29,1	;volatile
 10190                           
 10191                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui8_duty_cycle_BLDC != 0 ) )
 10192  1C24  0020               	movlb	0	; select bank0
 10193  1C25  1F63               	btfss	_MotorFlags,6
 10194  1C26  2C3C               	goto	i1l12604
 10195  1C27  0864               	movf	_ui8_duty_cycle_BLDC,w
 10196  1C28  1903               	btfsc	3,2
 10197  1C29  2C3C               	goto	i1l12604
 10198                           
 10199                           ;bldc.c: 521: {
 10200                           ;bldc.c: 523: if( rising_bemf_flag )
 10201  1C2A  1C68               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10202  1C2B  2C45               	goto	i1l12612
 10203                           
 10204                           ;bldc.c: 525: {
 10205                           ;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
 10206  1C2C  0021               	movlb	1	; select bank1
 10207  1C2D  0834               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 10208  1C2E  3E64               	addlw	100
 10209  1C2F  00FC               	movwf	??_interrrupt_bldc
 10210  1C30  3000               	movlw	0
 10211  1C31  3D35               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 10212  1C32  00FD               	movwf	??_interrrupt_bldc+1
 10213  1C33  0020               	movlb	0	; select bank0
 10214  1C34  0867               	movf	_ui16_Ubat_bldc+1,w	;volatile
 10215  1C35  027D               	subwf	??_interrrupt_bldc+1,w
 10216  1C36  1D03               	skipz
 10217  1C37  2C3A               	goto	u1083_25
 10218  1C38  0866               	movf	_ui16_Ubat_bldc,w	;volatile
 10219  1C39  027C               	subwf	??_interrrupt_bldc,w
 10220  1C3A                     u1083_25:	
 10221  1C3A  1803               	skipnc
 10222  1C3B  2CFF               	goto	i1l267
 10223  1C3C                     i1l12604:	
 10224                           
 10225                           ;bldc.c: 530: {
 10226                           ;bldc.c: 534: ui8_sampleState++;
 10227  1C3C  0021               	movlb	1	; select bank1
 10228  1C3D  0ADE               	incf	_ui8_sampleState^(0+128),f
 10229                           
 10230                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
 10231  1C3E  0860               	movf	_ui8_UPhase_sel^(0+128),w
 10232  1C3F  009D               	movwf	29	;volatile
 10233                           
 10234                           ;bldc.c: 540: ADC_Wait( );
 10235  1C40  2554  319A         	fcall	i1_ADC_Wait
 10236                           
 10237                           ;bldc.c: 544: ( GO_nDONE = 1 );
 10238  1C42  0021               	movlb	1	; select bank1
 10239  1C43  149D               	bsf	29,1	;volatile
 10240                           
 10241                           ;bldc.c: 547: }
 10242  1C44  2CFF               	goto	i1l267
 10243  1C45                     i1l12612:	
 10244                           
 10245                           ;bldc.c: 562: else
 10246                           ;bldc.c: 563: {
 10247                           ;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
 10248  1C45  3000               	movlw	0
 10249  1C46  0021               	movlb	1	; select bank1
 10250  1C47  0235               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
 10251  1C48  301F               	movlw	31
 10252  1C49  1903               	skipnz
 10253  1C4A  0234               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
 10254  1C4B  1803               	btfsc	3,0
 10255  1C4C  2C3C               	goto	i1l12604
 10256  1C4D  2CFF               	goto	i1l267
 10257  1C4E                     i1l12630:	
 10258                           ;bldc.c: 593: }
 10259                           ;bldc.c: 596: }
 10260                           ;bldc.c: 601: }
 10261                           
 10262                           
 10263                           ;bldc.c: 665: ui8_BlankingCount = 0;
 10264  1C4E  01E2               	clrf	_ui8_BlankingCount^(0+128)
 10265                           
 10266                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
 10267  1C4F  256D  319A         	fcall	i1_ADC_Read
 10268                           
 10269                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
 10270  1C51  0020               	movlb	0	; select bank0
 10271  1C52  1CE5               	btfss	_ui8_error_Flags,1
 10272  1C53  2C5D               	goto	i1l12644
 10273                           
 10274                           ;bldc.c: 677: {
 10275                           ;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
 10276  1C54  0021               	movlb	1	; select bank1
 10277  1C55  0861               	movf	_ui8_IPhase_sel^(0+128),w
 10278  1C56  009D               	movwf	29	;volatile
 10279                           
 10280                           ;bldc.c: 682: ADC_Wait( );
 10281  1C57  2554  319A         	fcall	i1_ADC_Wait
 10282                           
 10283                           ;bldc.c: 683: ( GO_nDONE = 1 );
 10284  1C59  0021               	movlb	1	; select bank1
 10285  1C5A  149D               	bsf	29,1	;volatile
 10286                           
 10287                           ;bldc.c: 686: ui8_sampleState = 9;
 10288  1C5B  3009               	movlw	9
 10289  1C5C  2CF0               	goto	L47
 10290  1C5D                     i1l12644:	
 10291                           ;bldc.c: 688: }
 10292                           
 10293                           
 10294                           ;bldc.c: 691: else
 10295                           ;bldc.c: 692: {
 10296                           ;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 10297  1C5D  3075               	movlw	117
 10298  1C5E  0021               	movlb	1	; select bank1
 10299  1C5F  009D               	movwf	29	;volatile
 10300                           
 10301                           ;bldc.c: 697: ADC_Wait( );
 10302  1C60  2554  319A         	fcall	i1_ADC_Wait
 10303  1C62  2C02               	goto	i1l12550
 10304  1C63                     i1l284:	
 10305                           ;bldc.c: 754: }
 10306                           ;bldc.c: 757: case 8:
 10307                           
 10308                           
 10309                           ;bldc.c: 759: {
 10310                           ;bldc.c: 764: ( GO_nDONE = 1 );
 10311  1C63  149D               	bsf	29,1	;volatile
 10312                           
 10313                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
 10314  1C64  256D  319A         	fcall	i1_ADC_Read
 10315                           
 10316                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
 10317  1C66  0861               	movf	_ui8_IPhase_sel^(0+128),w
 10318  1C67  2BFD               	goto	L51
 10319  1C68                     i1l12664:	
 10320                           ;bldc.c: 776: ADC_Wait( );
 10321                           
 10322                           
 10323                           ;bldc.c: 795: {
 10324                           ;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
 10325  1C68  256D  319A         	fcall	i1_ADC_Read
 10326  1C6A  0871               	movf	?i1_ADC_Read+1,w
 10327  1C6B  0020               	movlb	0	; select bank0
 10328  1C6C  00D9               	movwf	_ui16_IPhase_bldc+1	;volatile
 10329  1C6D  0870               	movf	?i1_ADC_Read,w
 10330  1C6E  00D8               	movwf	_ui16_IPhase_bldc	;volatile
 10331                           
 10332                           ;bldc.c: 806: if (MotorFlags.bits.B6)
 10333  1C6F  1B63               	btfsc	_MotorFlags,6
 10334  1C70  2CC2               	goto	i1l12690
 10335  1C71  2CCE               	goto	i1l12692
 10336  1C72                     i1l12670:	
 10337                           
 10338                           ;bldc.c: 816: {
 10339                           ;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0]) )
 10340  1C72  0022               	movlb	2	; select bank2
 10341  1C73  0820               	movf	_ui8_current_cal^(0+256),w
 10342  1C74  2771  319A         	fcall	PL50	;call to abstracted procedure
 10343  1C76  1803               	skipnc
 10344  1C77  2C89               	goto	i1l12674
 10345                           
 10346                           ;bldc.c: 820: {
 10347                           ;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[0])*ui16_I_c
      +                          al_Ph1)>>8);
 10348  1C78  2795  319A         	fcall	PL84	;call to abstracted procedure
 10349  1C7A  0820               	movf	_ui8_current_cal^(0+256),w
 10350  1C7B  02F0               	subwf	i1___wmul@multiplier,f
 10351  1C7C  1C03               	skipc
 10352  1C7D  03F1               	decf	i1___wmul@multiplier+1,f
 10353  1C7E  0021               	movlb	1	; select bank1
 10354  1C7F  086C               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 10355  1C80  00F3               	movwf	i1___wmul@multiplicand+1
 10356  1C81  086B               	movf	_ui16_I_cal_Ph1^(0+128),w
 10357  1C82  00F2               	movwf	i1___wmul@multiplicand
 10358  1C83  257B  319A         	fcall	i1___wmul
 10359  1C85  0871               	movf	?i1___wmul+1,w
 10360  1C86  0022               	movlb	2	; select bank2
 10361  1C87  00BB               	movwf	_ui16_IPhase1_bldc^(0+256)	;volatile
 10362  1C88  2C8B               	goto	L48
 10363  1C89                     i1l12674:	
 10364                           ;bldc.c: 824: }
 10365                           
 10366                           
 10367                           ;bldc.c: 827: else
 10368                           ;bldc.c: 828: {
 10369                           ;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
 10370  1C89  0022               	movlb	2	; select bank2
 10371  1C8A  01BB               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
 10372  1C8B                     L48:	
 10373  1C8B  01BC               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
 10374  1C8C  2CD6               	goto	i1l12694
 10375  1C8D                     i1l12676:	
 10376                           
 10377                           ;bldc.c: 842: {
 10378                           ;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1] ) )
 10379  1C8D  0022               	movlb	2	; select bank2
 10380  1C8E  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 10381  1C8F  2771  319A         	fcall	PL50	;call to abstracted procedure
 10382  1C91  1803               	skipnc
 10383  1C92  2CA4               	goto	i1l12680
 10384                           
 10385                           ;bldc.c: 846: {
 10386                           ;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[1])*ui16_I_c
      +                          al_Ph2)>>8);
 10387  1C93  2795  319A         	fcall	PL84	;call to abstracted procedure
 10388  1C95  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 10389  1C96  02F0               	subwf	i1___wmul@multiplier,f
 10390  1C97  1C03               	skipc
 10391  1C98  03F1               	decf	i1___wmul@multiplier+1,f
 10392  1C99  0021               	movlb	1	; select bank1
 10393  1C9A  086A               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 10394  1C9B  00F3               	movwf	i1___wmul@multiplicand+1
 10395  1C9C  0869               	movf	_ui16_I_cal_Ph2^(0+128),w
 10396  1C9D  00F2               	movwf	i1___wmul@multiplicand
 10397  1C9E  257B  319A         	fcall	i1___wmul
 10398  1CA0  0871               	movf	?i1___wmul+1,w
 10399  1CA1  0023               	movlb	3	; select bank3
 10400  1CA2  00D4               	movwf	_ui16_IPhase2_bldc^(0+384)	;volatile
 10401  1CA3  2CA6               	goto	L49
 10402  1CA4                     i1l12680:	
 10403                           ;bldc.c: 851: }
 10404                           
 10405                           
 10406                           ;bldc.c: 854: else
 10407                           ;bldc.c: 855: {
 10408                           ;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
 10409  1CA4  0023               	movlb	3	; select bank3
 10410  1CA5  01D4               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
 10411  1CA6                     L49:	
 10412  1CA6  01D5               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
 10413  1CA7  2CD6               	goto	i1l12694
 10414  1CA8                     i1l12682:	
 10415                           
 10416                           ;bldc.c: 869: {
 10417                           ;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]) )
 10418  1CA8  0022               	movlb	2	; select bank2
 10419  1CA9  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 10420  1CAA  2771  319A         	fcall	PL50	;call to abstracted procedure
 10421  1CAC  1803               	skipnc
 10422  1CAD  2CBF               	goto	i1l12686
 10423                           
 10424                           ;bldc.c: 873: {
 10425                           ;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[2])*ui16_I_c
      +                          al_Ph3)>>8);
 10426  1CAE  2795  319A         	fcall	PL84	;call to abstracted procedure
 10427  1CB0  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 10428  1CB1  02F0               	subwf	i1___wmul@multiplier,f
 10429  1CB2  1C03               	skipc
 10430  1CB3  03F1               	decf	i1___wmul@multiplier+1,f
 10431  1CB4  0021               	movlb	1	; select bank1
 10432  1CB5  0868               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 10433  1CB6  00F3               	movwf	i1___wmul@multiplicand+1
 10434  1CB7  0867               	movf	_ui16_I_cal_Ph3^(0+128),w
 10435  1CB8  00F2               	movwf	i1___wmul@multiplicand
 10436  1CB9  257B  319A         	fcall	i1___wmul
 10437  1CBB  0871               	movf	?i1___wmul+1,w
 10438  1CBC  0023               	movlb	3	; select bank3
 10439  1CBD  00D2               	movwf	_ui16_IPhase3_bldc^(0+384)	;volatile
 10440  1CBE  2CD5               	goto	L50
 10441  1CBF                     i1l12686:	
 10442                           ;bldc.c: 877: }
 10443                           
 10444                           
 10445                           ;bldc.c: 880: else
 10446                           ;bldc.c: 881: {
 10447                           ;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
 10448  1CBF  0023               	movlb	3	; select bank3
 10449  1CC0  2CD4               	goto	L52
 10450  1CC1                     i1l12688:	
 10451  1CC1  2CCE               	goto	i1l12692
 10452  1CC2                     i1l12690:	
 10453                           ;bldc.c: 902: }
 10454                           ;bldc.c: 904: }
 10455                           
 10456                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
 10457                           
 10458                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
 10459                           
 10460                           ;bldc.c: 895: {
 10461                           ;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
 10462                           
 10463  1CC2  0021               	movlb	1	; select bank1
 10464  1CC3  0861               	movf	_ui8_IPhase_sel^(0+128),w
 10465                           
 10466                           ; Switch size 1, requested type "space"
 10467                           ; Number of cases is 3, Range of values is 9 to 53
 10468                           ; switch strategies available:
 10469                           ; Name         Instructions Cycles
 10470                           ; simple_byte           10     6 (average)
 10471                           ; direct_byte           99     9 (fixed)
 10472                           ; jumptable            263     9 (fixed)
 10473                           ;	Chosen strategy is simple_byte
 10474  1CC4  3A09               	xorlw	9	; case 9
 10475  1CC5  1903               	skipnz
 10476  1CC6  2C72               	goto	i1l12670
 10477  1CC7  3A18               	xorlw	24	; case 17
 10478  1CC8  1903               	skipnz
 10479  1CC9  2CA8               	goto	i1l12682
 10480  1CCA  3A24               	xorlw	36	; case 53
 10481  1CCB  1903               	skipnz
 10482  1CCC  2C8D               	goto	i1l12676
 10483  1CCD  2CC1               	goto	i1l12688
 10484  1CCE                     i1l12692:	
 10485                           
 10486                           ;bldc.c: 910: else
 10487                           ;bldc.c: 911: {
 10488                           ;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
 10489  1CCE  0022               	movlb	2	; select bank2
 10490  1CCF  01BB               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
 10491  1CD0  01BC               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
 10492                           
 10493                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
 10494  1CD1  0023               	movlb	3	; select bank3
 10495  1CD2  01D4               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
 10496  1CD3  01D5               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
 10497  1CD4                     L52:	
 10498                           
 10499                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
 10500  1CD4  01D2               	clrf	_ui16_IPhase3_bldc^(0+384)	;volatile
 10501  1CD5                     L50:	
 10502  1CD5  01D3               	clrf	(_ui16_IPhase3_bldc+1)^(0+384)	;volatile
 10503  1CD6                     i1l12694:	
 10504                           
 10505                           ;bldc.c: 918: }
 10506                           ;bldc.c: 956: if( (ui16_IPhase_bldc.w > 500+40) )
 10507  1CD6  3002               	movlw	2
 10508  1CD7  0020               	movlb	0	; select bank0
 10509  1CD8  0259               	subwf	_ui16_IPhase_bldc+1,w	;volatile
 10510  1CD9  301D               	movlw	29
 10511  1CDA  1903               	skipnz
 10512  1CDB  0258               	subwf	_ui16_IPhase_bldc,w	;volatile
 10513  1CDC  1C03               	skipc
 10514  1CDD  2CE2               	goto	i1l12700
 10515  1CDE  30E5               	movlw	229
 10516                           
 10517                           ;bldc.c: 958: {
 10518                           ;bldc.c: 960: MotorFlags.bits.B0 = 1;
 10519  1CDF  1463               	bsf	_MotorFlags,0
 10520                           
 10521                           ;bldc.c: 964: LATC = LATC & 0b11100101;
 10522  1CE0  0022               	movlb	2	; select bank2
 10523  1CE1  058E               	andwf	14,f	;volatile
 10524  1CE2                     i1l12700:	
 10525                           ;bldc.c: 970: }
 10526                           
 10527                           
 10528                           ;bldc.c: 978: }
 10529                           ;bldc.c: 984: ADC_Wait( );
 10530  1CE2  2554  319A         	fcall	i1_ADC_Wait
 10531                           
 10532                           ;bldc.c: 988: ( GO_nDONE = 1 );
 10533  1CE4  0021               	movlb	1	; select bank1
 10534  1CE5  149D               	bsf	29,1	;volatile
 10535                           
 10536                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
 10537  1CE6  0020               	movlb	0	; select bank0
 10538  1CE7  1CE5               	btfss	_ui8_error_Flags,1
 10539  1CE8  2C02               	goto	i1l12550
 10540                           
 10541                           ;bldc.c: 993: {
 10542                           ;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
 10543  1CE9  3075               	movlw	117
 10544  1CEA  0021               	movlb	1	; select bank1
 10545  1CEB  009D               	movwf	29	;volatile
 10546                           
 10547                           ;bldc.c: 998: ADC_Wait( );
 10548  1CEC  2554  319A         	fcall	i1_ADC_Wait
 10549                           
 10550                           ;bldc.c: 1001: ui8_sampleState = 5;
 10551  1CEE  3005               	movlw	5
 10552  1CEF  0021               	movlb	1	; select bank1
 10553  1CF0                     L47:	
 10554  1CF0  00DE               	movwf	_ui8_sampleState^(0+128)
 10555                           
 10556                           ;bldc.c: 1003: }
 10557  1CF1  2CFF               	goto	i1l267
 10558  1CF2                     i1l12716:	
 10559  1CF2  085E               	movf	_ui8_sampleState^(0+128),w
 10560                           
 10561                           ; Switch size 1, requested type "space"
 10562                           ; Number of cases is 10, Range of values is 1 to 10
 10563                           ; switch strategies available:
 10564                           ; Name         Instructions Cycles
 10565                           ; direct_byte           29     9 (fixed)
 10566                           ; simple_byte           31    16 (average)
 10567                           ; jumptable            263     9 (fixed)
 10568                           ;	Chosen strategy is direct_byte
 10569  1CF3  3EFF               	addlw	-1
 10570  1CF4  1C03               	skipc
 10571  1CF5  2CFF               	goto	i1l267
 10572  1CF6  0084               	movwf	4
 10573  1CF7  300A               	movlw	10
 10574  1CF8  0204               	subwf	4,w
 10575  1CF9  1803               	skipnc
 10576  1CFA  2CFF               	goto	i1l267
 10577  1CFB  3186               	movlp	high i1S14492
 10578  1CFC  3504               	lslf	4,w
 10579  1CFD  3EC4               	addlw	low i1S14492
 10580  1CFE  0082               	movwf	2
 10581  1CFF                     i1l267:	
 10582                           
 10583                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
 10584  1CFF  0020               	movlb	0	; select bank0
 10585  1D00  1F63               	btfss	_MotorFlags,6
 10586  1D01  2D33               	goto	i1l12744
 10587                           
 10588                           ;bldc.c: 1071: {
 10589                           ;bldc.c: 1073: if( MotorFlags.bits.B3)
 10590  1D02  1DE3               	btfss	_MotorFlags,3
 10591  1D03  2D35               	goto	i1l12746
 10592                           
 10593                           ;bldc.c: 1075: {
 10594                           ;bldc.c: 1077: bool_start_demand_mat = 1 ;
 10595  1D04  0021               	movlb	1	; select bank1
 10596  1D05  3041               	movlw	65
 10597  1D06  01E5               	clrf	_bool_start_demand_mat^(0+128)
 10598  1D07  0AE5               	incf	_bool_start_demand_mat^(0+128),f
 10599                           
 10600                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
 10601  1D08  0023               	movlb	3	; select bank3
 10602  1D09  00D8               	movwf	_ui8_fixed_start_speed_mat^(0+384)
 10603  1D0A  01D9               	clrf	(_ui8_fixed_start_speed_mat+1)^(0+384)
 10604                           
 10605                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
 10606  1D0B  0020               	movlb	0	; select bank0
 10607  1D0C  085A               	movf	_comm_time,w
 10608  1D0D  3903               	andlw	3
 10609  1D0E  1D03               	btfss	3,2
 10610  1D0F  2D35               	goto	i1l12746
 10611                           
 10612                           ;bldc.c: 1111: else
 10613                           ;bldc.c: 1112: {
 10614                           ;bldc.c: 1114: if (ui16_Ubat_bldc.w)
 10615                           
 10616                           ;bldc.c: 1100: {
 10617                           ;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 10618                           
 10619                           ;bldc.c: 1096: {
 10620                           ;bldc.c: 1098: if (ui16_Ubat_bldc.w)
 10621                           
 10622                           ;bldc.c: 1092: {
 10623                           ;bldc.c: 1094: if (MotorFlags.bits.B4)
 10624  1D10  0866               	movf	_ui16_Ubat_bldc,w	;volatile
 10625  1D11  0467               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
 10626  1D12  1903               	btfsc	3,2
 10627  1D13  2D24               	goto	i1l12736
 10628                           
 10629                           ;bldc.c: 1116: {
 10630                           ;bldc.c: 1119: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
 10631  1D14  0867               	movf	_ui16_Ubat_bldc+1,w	;volatile
 10632  1D15  00F1               	movwf	i1___lwdiv@divisor+1
 10633  1D16  0866               	movf	_ui16_Ubat_bldc,w	;volatile
 10634  1D17  00F0               	movwf	i1___lwdiv@divisor
 10635  1D18  3080               	movlw	128
 10636  1D19  00F2               	movwf	i1___lwdiv@dividend
 10637  1D1A  303E               	movlw	62
 10638  1D1B  00F3               	movwf	i1___lwdiv@dividend+1
 10639  1D1C  27D9  319A         	fcall	i1___lwdiv
 10640  1D1E  0870               	movf	?i1___lwdiv,w
 10641  1D1F  00A0               	movwf	interrrupt_bldc@ui32_tmp
 10642  1D20  0871               	movf	?i1___lwdiv+1,w
 10643  1D21  00A1               	movwf	interrrupt_bldc@ui32_tmp+1
 10644  1D22  01A2               	clrf	interrrupt_bldc@ui32_tmp+2
 10645  1D23  01A3               	clrf	interrrupt_bldc@ui32_tmp+3
 10646  1D24                     i1l12736:	
 10647                           
 10648                           ;bldc.c: 1121: }
 10649                           ;bldc.c: 1124: }
 10650                           ;bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui32_tmp) )
 10651  1D24  0021               	movlb	1	; select bank1
 10652  1D25  0864               	movf	_ui8_StartupPWM^(0+128),w
 10653  1D26  0020               	movlb	0	; select bank0
 10654  1D27  0220               	subwf	interrrupt_bldc@ui32_tmp,w
 10655  1D28  1803               	skipnc
 10656  1D29  2D2D               	goto	i1l12740
 10657                           
 10658                           ;bldc.c: 1129: {
 10659                           ;bldc.c: 1131: ui8_StartupPWM--;
 10660  1D2A  0021               	movlb	1	; select bank1
 10661  1D2B  03E4               	decf	_ui8_StartupPWM^(0+128),f
 10662                           
 10663                           ;bldc.c: 1133: }
 10664  1D2C  2D2F               	goto	i1l12742
 10665  1D2D                     i1l12740:	
 10666                           
 10667                           ;bldc.c: 1136: else
 10668                           ;bldc.c: 1137: {
 10669                           ;bldc.c: 1139: ui8_StartupPWM++;
 10670  1D2D  0021               	movlb	1	; select bank1
 10671  1D2E  0AE4               	incf	_ui8_StartupPWM^(0+128),f
 10672  1D2F                     i1l12742:	
 10673                           
 10674                           ;bldc.c: 1141: }
 10675                           ;bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
 10676  1D2F  0864               	movf	_ui8_StartupPWM^(0+128),w
 10677  1D30  0025               	movlb	5	; select bank5
 10678  1D31  0091               	movwf	17	;volatile
 10679  1D32  2D35               	goto	i1l12746
 10680  1D33                     i1l12744:	
 10681                           
 10682                           ;bldc.c: 1155: else
 10683                           ;bldc.c: 1156: {
 10684                           ;bldc.c: 1159: CCPR1L = 0;
 10685  1D33  0025               	movlb	5	; select bank5
 10686  1D34  0191               	clrf	17	;volatile
 10687  1D35                     i1l12746:	
 10688                           
 10689                           ;bldc.c: 1161: }
 10690                           ;bldc.c: 1165: if( 0 == ui8_BlankingCount )
 10691  1D35  0021               	movlb	1	; select bank1
 10692  1D36  0862               	movf	_ui8_BlankingCount^(0+128),w
 10693  1D37  1D03               	btfss	3,2
 10694  1D38  2D52               	goto	i1l12762
 10695                           
 10696                           ;bldc.c: 1168: {
 10697                           ;bldc.c: 1177: if( ui8_CompFlag )
 10698  1D39  085D               	movf	_ui8_CompFlag^(0+128),w
 10699  1D3A  1903               	btfsc	3,2
 10700  1D3B  2D40               	goto	i1l316
 10701                           
 10702                           ;bldc.c: 1187: {
 10703                           ;bldc.c: 1191: ui8_zero_cros_cnt++;
 10704  1D3C  0020               	movlb	0	; select bank0
 10705  1D3D  1AE3               	btfsc	_MotorFlags,5
 10706  1D3E  2D40               	goto	i1l316
 10707                           
 10708                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
 10709  1D3F  16E3               	bsf	_MotorFlags,5
 10710  1D40                     i1l316:	
 10711                           ;bldc.c: 1196: }
 10712                           ;bldc.c: 1199: }
 10713                           ;bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
 10714                           
 10715                           
 10716                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
 10717  1D40  0020               	movlb	0	; select bank0
 10718  1D41  1EE3               	btfss	_MotorFlags,5
 10719  1D42  0008               	return
 10720                           
 10721                           ;bldc.c: 1353: {
 10722                           ;bldc.c: 1357: if( 0 == phase_delay_counter )
 10723  1D43  0023               	movlb	3	; select bank3
 10724  1D44  0856               	movf	_phase_delay_counter^(0+384),w
 10725  1D45  0457               	iorwf	(_phase_delay_counter+1)^(0+384),w
 10726  1D46  1D03               	btfss	3,2
 10727  1D47  2D4D               	goto	i1l12760
 10728                           
 10729                           ;bldc.c: 1360: {
 10730                           ;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
 10731  1D48  0020               	movlb	0	; select bank0
 10732  1D49  19E3               	btfsc	_MotorFlags,3
 10733  1D4A  0008               	return
 10734                           
 10735                           ;bldc.c: 1364: {
 10736                           ;bldc.c: 1378: commutate( );
 10737  1D4B  2590               	fcall	i1_commutate
 10738  1D4C  0008               	return
 10739  1D4D                     i1l12760:	
 10740                           
 10741                           ;bldc.c: 1389: else
 10742                           ;bldc.c: 1390: {
 10743                           ;bldc.c: 1392: phase_delay_counter--;
 10744  1D4D  30FF               	movlw	-1
 10745  1D4E  07D6               	addwf	_phase_delay_counter^(0+384),f
 10746  1D4F  1C03               	skipc
 10747  1D50  03D7               	decf	(_phase_delay_counter+1)^(0+384),f
 10748                           
 10749                           ;bldc.c: 1394: }
 10750                           ;bldc.c: 1398: }
 10751                           ;bldc.c: 1401: }
 10752  1D51  0008               	return
 10753  1D52                     i1l12762:	
 10754                           
 10755                           ;bldc.c: 1408: bemf_filter = 62;
 10756  1D52  03E2               	decf	_ui8_BlankingCount^(0+128),f
 10757  1D53  0008               	return
 10758  1D54                     __end_of_interrrupt_bldc:	
 10759  1D54                     __ptext55:	
 10760 ;; *************** function i1_ADC_Wait *****************
 10761 ;; Defined at:
 10762 ;;		line 128 in file "../adc.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;		None
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;		None
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  1    wreg      void 
 10769 ;; Registers used:
 10770 ;;		None
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/1
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10776 ;;      Params:         0       0       0       0       0       0       0       0
 10777 ;;      Locals:         0       0       0       0       0       0       0       0
 10778 ;;      Temps:          0       0       0       0       0       0       0       0
 10779 ;;      Totals:         0       0       0       0       0       0       0       0
 10780 ;;Total ram usage:        0 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; This function calls:
 10783 ;;		Nothing
 10784 ;; This function is called by:
 10785 ;;		_interrrupt_bldc
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function i1_ADC_Wait
 10791  1D54                     i1_ADC_Wait:	
 10792                           
 10793                           ;adc.c: 133: __nop();
 10794                           
 10795                           ;incstack = 0
 10796                           ; Regs used in i1_ADC_Wait: []
 10797  1D54  0000               	nop
 10798                           
 10799                           ;adc.c: 134: __nop();
 10800  1D55  0000               	nop
 10801                           
 10802                           ;adc.c: 135: __nop();
 10803  1D56  0000               	nop
 10804                           
 10805                           ;adc.c: 136: __nop();
 10806  1D57  0000               	nop
 10807                           
 10808                           ;adc.c: 137: __nop();
 10809  1D58  0000               	nop
 10810                           
 10811                           ;adc.c: 138: __nop();
 10812  1D59  0000               	nop
 10813                           
 10814                           ;adc.c: 139: __nop();
 10815  1D5A  0000               	nop
 10816                           
 10817                           ;adc.c: 140: __nop();
 10818  1D5B  0000               	nop
 10819                           
 10820                           ;adc.c: 142: __nop();
 10821  1D5C  0000               	nop
 10822                           
 10823                           ;adc.c: 143: __nop();
 10824  1D5D  0000               	nop
 10825                           
 10826                           ;adc.c: 144: __nop();
 10827  1D5E  0000               	nop
 10828                           
 10829                           ;adc.c: 145: __nop();
 10830  1D5F  0000               	nop
 10831                           
 10832                           ;adc.c: 146: __nop();
 10833  1D60  0000               	nop
 10834                           
 10835                           ;adc.c: 147: __nop();
 10836  1D61  0000               	nop
 10837                           
 10838                           ;adc.c: 148: __nop();
 10839  1D62  0000               	nop
 10840                           
 10841                           ;adc.c: 149: __nop();
 10842  1D63  0000               	nop
 10843                           
 10844                           ;adc.c: 151: __nop();
 10845  1D64  0000               	nop
 10846                           
 10847                           ;adc.c: 152: __nop();
 10848  1D65  0000               	nop
 10849                           
 10850                           ;adc.c: 153: __nop();
 10851  1D66  0000               	nop
 10852                           
 10853                           ;adc.c: 154: __nop();
 10854  1D67  0000               	nop
 10855                           
 10856                           ;adc.c: 155: __nop();
 10857  1D68  0000               	nop
 10858                           
 10859                           ;adc.c: 156: __nop();
 10860  1D69  0000               	nop
 10861                           
 10862                           ;adc.c: 157: __nop();
 10863  1D6A  0000               	nop
 10864                           
 10865                           ;adc.c: 158: __nop();
 10866  1D6B  0000               	nop
 10867  1D6C  0008               	return
 10868  1D6D                     __end_ofi1_ADC_Wait:	
 10869  1D6D                     __ptext56:	
 10870 ;; *************** function i1_ADC_Read *****************
 10871 ;; Defined at:
 10872 ;;		line 175 in file "../adc.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;		None
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;  ADC_Read        1    2[COMMON] unsigned char 
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  2    0[COMMON] unsigned int 
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0
 10881 ;; Tracked objects:
 10882 ;;		On entry : 1E/1
 10883 ;;		On exit  : 1F/1
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10886 ;;      Params:         2       0       0       0       0       0       0       0
 10887 ;;      Locals:         1       0       0       0       0       0       0       0
 10888 ;;      Temps:          0       0       0       0       0       0       0       0
 10889 ;;      Totals:         3       0       0       0       0       0       0       0
 10890 ;;Total ram usage:        3 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; This function calls:
 10893 ;;		Nothing
 10894 ;; This function is called by:
 10895 ;;		_interrrupt_bldc
 10896 ;; This function uses a non-reentrant model
 10897 ;;
 10898                           
 10899                           
 10900                           ;psect for function i1_ADC_Read
 10901  1D6D                     i1_ADC_Read:	
 10902                           
 10903                           ;adc.c: 179: unsigned char i;
 10904                           ;adc.c: 180: i = 0;
 10905                           
 10906                           ;incstack = 0
 10907                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
 10908  1D6D  01F2               	clrf	i1ADC_Read@i
 10909  1D6E                     i1l69:	
 10910                           ;adc.c: 182: while( GO_nDONE )
 10911                           
 10912  1D6E  0021               	movlb	1	; select bank1
 10913  1D6F  1C9D               	btfss	29,1	;volatile
 10914  1D70  2D76               	goto	i1l6984
 10915  1D71  3041               	movlw	65
 10916                           
 10917                           ;adc.c: 184: {
 10918                           ;adc.c: 186: i++;
 10919  1D72  0AF2               	incf	i1ADC_Read@i,f
 10920                           
 10921                           ;adc.c: 189: if( i > 64 )
 10922  1D73  0272               	subwf	i1ADC_Read@i,w
 10923  1D74  1C03               	skipc
 10924  1D75  2D6E               	goto	i1l69
 10925  1D76                     i1l6984:	
 10926                           
 10927                           ;adc.c: 195: }
 10928                           ;adc.c: 198: }
 10929                           ;adc.c: 201: analog_value.b.hi = ADRESH;
 10930                           
 10931                           ;adc.c: 202: analog_value.b.lo = ADRESL;
 10932                           
 10933                           ;adc.c: 204: return analog_value.w;
 10934  1D76  27B4               	fcall	PL116	;call to abstracted procedure
 10935  1D77  00F1               	movwf	?i1_ADC_Read+1
 10936  1D78  083A               	movf	_analog_value^(0+128),w	;volatile
 10937  1D79  00F0               	movwf	?i1_ADC_Read
 10938  1D7A  0008               	return
 10939  1D7B                     __end_ofi1_ADC_Read:	
 10940  1D7B                     __ptext53:	
 10941 ;; *************** function i1___wmul *****************
 10942 ;; Defined at:
 10943 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  multiplier      2    0[COMMON] unsigned int 
 10946 ;;  multiplicand    2    2[COMMON] unsigned int 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  __wmul          2    4[COMMON] unsigned int 
 10949 ;; Return value:  Size  Location     Type
 10950 ;;                  2    0[COMMON] unsigned int 
 10951 ;; Registers used:
 10952 ;;		wreg, status,2, status,0
 10953 ;; Tracked objects:
 10954 ;;		On entry : 1F/1
 10955 ;;		On exit  : 1F/1
 10956 ;;		Unchanged: 1F/0
 10957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10958 ;;      Params:         4       0       0       0       0       0       0       0
 10959 ;;      Locals:         2       0       0       0       0       0       0       0
 10960 ;;      Temps:          0       0       0       0       0       0       0       0
 10961 ;;      Totals:         6       0       0       0       0       0       0       0
 10962 ;;Total ram usage:        6 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; This function calls:
 10965 ;;		Nothing
 10966 ;; This function is called by:
 10967 ;;		_interrrupt_bldc
 10968 ;; This function uses a non-reentrant model
 10969 ;;
 10970                           
 10971                           
 10972                           ;psect for function i1___wmul
 10973  1D7B                     i1___wmul:	
 10974                           
 10975                           ;incstack = 0
 10976                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 10977  1D7B  01F4               	clrf	i1___wmul@product
 10978  1D7C  01F5               	clrf	i1___wmul@product+1
 10979  1D7D                     i1l12480:	
 10980  1D7D  1C70               	btfss	i1___wmul@multiplier,0
 10981  1D7E  2D83               	goto	i1l12484
 10982  1D7F  0872               	movf	i1___wmul@multiplicand,w
 10983  1D80  07F4               	addwf	i1___wmul@product,f
 10984  1D81  0873               	movf	i1___wmul@multiplicand+1,w
 10985  1D82  3DF5               	addwfc	i1___wmul@product+1,f
 10986  1D83                     i1l12484:	
 10987  1D83  35F2               	lslf	i1___wmul@multiplicand,f
 10988  1D84  0DF3               	rlf	i1___wmul@multiplicand+1,f
 10989  1D85  36F1               	lsrf	i1___wmul@multiplier+1,f
 10990  1D86  0CF0               	rrf	i1___wmul@multiplier,f
 10991  1D87  0870               	movf	i1___wmul@multiplier,w
 10992  1D88  0471               	iorwf	i1___wmul@multiplier+1,w
 10993  1D89  1D03               	btfss	3,2
 10994  1D8A  2D7D               	goto	i1l12480
 10995  1D8B  0875               	movf	i1___wmul@product+1,w
 10996  1D8C  00F1               	movwf	?i1___wmul+1
 10997  1D8D  0874               	movf	i1___wmul@product,w
 10998  1D8E  00F0               	movwf	?i1___wmul
 10999  1D8F  0008               	return
 11000  1D90                     __end_ofi1___wmul:	
 11001  1D90                     __ptext52:	
 11002 ;; *************** function i1_commutate *****************
 11003 ;; Defined at:
 11004 ;;		line 1426 in file "../bldc.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;		None
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;		None
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  1    wreg      void 
 11011 ;; Registers used:
 11012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11013 ;; Tracked objects:
 11014 ;;		On entry : 1D/2
 11015 ;;		On exit  : 1F/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11018 ;;      Params:         0       0       0       0       0       0       0       0
 11019 ;;      Locals:         0       0       0       0       0       0       0       0
 11020 ;;      Temps:         12       0       0       0       0       0       0       0
 11021 ;;      Totals:        12       0       0       0       0       0       0       0
 11022 ;;Total ram usage:       12 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; This function calls:
 11025 ;;		Nothing
 11026 ;; This function is called by:
 11027 ;;		_interrrupt_bldc
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function i1_commutate
 11033  1D90                     i1_commutate:	
 11034                           
 11035                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 11036                           
 11037                           ;incstack = 0
 11038                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0]
 11039  1D90  3000               	movlw	0
 11040  1D91  0021               	movlb	1	; select bank1
 11041  1D92  0239               	subwf	(_ui16_step_cnt+1)^(0+128),w
 11042  1D93  300A               	movlw	10
 11043  1D94  1903               	skipnz
 11044  1D95  0238               	subwf	_ui16_step_cnt^(0+128),w
 11045  1D96  1803               	skipnc
 11046  1D97  2D9B               	goto	i1l6992
 11047                           
 11048                           ;bldc.c: 1433: {
 11049                           ;bldc.c: 1435: ui16_step_cnt++;
 11050  1D98  0AB8               	incf	_ui16_step_cnt^(0+128),f
 11051  1D99  1903               	skipnz
 11052  1D9A  0AB9               	incf	(_ui16_step_cnt+1)^(0+128),f
 11053  1D9B                     i1l6992:	
 11054                           
 11055                           ;bldc.c: 1437: }
 11056                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 11057                           
 11058                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 11059                           
 11060                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 11061  1D9B  26D3  319A         	fcall	PL20	;call to abstracted procedure
 11062  1D9D  00F0               	movwf	??i1_commutate
 11063  1D9E  0825               	movf	((_B+1)^(0+384)+4),w
 11064  1D9F  3D23               	addwfc	((_B+1)^(0+384)+2),w
 11065  1DA0  00F1               	movwf	??i1_commutate+1
 11066  1DA1  0826               	movf	(_B^(0+384)+6),w
 11067  1DA2  0770               	addwf	??i1_commutate,w
 11068  1DA3  00F2               	movwf	??i1_commutate+2
 11069  1DA4  0827               	movf	((_B+1)^(0+384)+6),w
 11070  1DA5  3D71               	addwfc	??i1_commutate+1,w
 11071  1DA6  00F3               	movwf	??i1_commutate+3
 11072  1DA7  0828               	movf	(_B^(0+384)+8),w
 11073  1DA8  0772               	addwf	??i1_commutate+2,w
 11074  1DA9  00F4               	movwf	??i1_commutate+4
 11075  1DAA  0829               	movf	((_B+1)^(0+384)+8),w
 11076  1DAB  3D73               	addwfc	??i1_commutate+3,w
 11077  1DAC  00F5               	movwf	??i1_commutate+5
 11078  1DAD  082A               	movf	(_B^(0+384)+10),w
 11079  1DAE  0774               	addwf	??i1_commutate+4,w
 11080  1DAF  00F6               	movwf	??i1_commutate+6
 11081  1DB0  082B               	movf	((_B+1)^(0+384)+10),w
 11082  1DB1  3D75               	addwfc	??i1_commutate+5,w
 11083  1DB2  00F7               	movwf	??i1_commutate+7
 11084  1DB3  3F00               	moviw [0]fsr0
 11085  1DB4  0776               	addwf	??i1_commutate+6,w
 11086  1DB5  00F8               	movwf	??i1_commutate+8
 11087  1DB6  3F01               	moviw [1]fsr0
 11088  1DB7  3D77               	addwfc	??i1_commutate+7,w
 11089  1DB8  00F9               	movwf	??i1_commutate+9
 11090  1DB9  3F40               	moviw [0]fsr1
 11091  1DBA  0778               	addwf	??i1_commutate+8,w
 11092  1DBB  00FA               	movwf	??i1_commutate+10
 11093  1DBC  3F41               	moviw [1]fsr1
 11094  1DBD  3D79               	addwfc	??i1_commutate+9,w
 11095  1DBE  00FB               	movwf	??i1_commutate+11
 11096  1DBF  0820               	movf	_B^(0+384),w
 11097  1DC0  077A               	addwf	??i1_commutate+10,w
 11098  1DC1  0021               	movlb	1	; select bank1
 11099  1DC2  00B2               	movwf	_ui16_speed_fil^(0+128)
 11100  1DC3  0023               	movlb	3	; select bank3
 11101  1DC4  0821               	movf	(_B+1)^(0+384),w
 11102  1DC5  3D7B               	addwfc	??i1_commutate+11,w
 11103                           
 11104                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 11105                           
 11106                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 11107                           
 11108                           ;bldc.c: 1455: bemf_filter = 62;
 11109                           
 11110                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 11111  1DC6  26EB  319A         	fcall	PL32	;call to abstracted procedure
 11112                           
 11113                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 11114  1DC8  1DE3               	btfss	_MotorFlags,3
 11115  1DC9  2E04               	goto	i1l327
 11116                           
 11117                           ;bldc.c: 1463: {
 11118                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>>7;
 11119                           
 11120                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 11121  1DCA  26B8  319A         	fcall	PL18	;call to abstracted procedure
 11122  1DCC  1803               	skipnc
 11123  1DCD  2DD1               	goto	i1l7020
 11124                           
 11125                           ;bldc.c: 1474: {
 11126                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
 11127  1DCE  2750  319A         	fcall	PL44	;call to abstracted procedure
 11128                           
 11129                           ;bldc.c: 1478: }
 11130  1DD0  2DE5               	goto	i1l7044
 11131  1DD1                     i1l7020:	
 11132                           
 11133                           ;bldc.c: 1481: else
 11134                           ;bldc.c: 1482: {
 11135                           ;bldc.c: 1484: phase_delay_counter = 0;
 11136  1DD1  0023               	movlb	3	; select bank3
 11137  1DD2  01D6               	clrf	_phase_delay_counter^(0+384)
 11138  1DD3  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
 11139  1DD4  2DE5               	goto	i1l7044
 11140  1DD5                     i1l7022:	
 11141                           
 11142                           ;bldc.c: 1514: {
 11143                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
 11144  1DD5  30A6               	movlw	166
 11145  1DD6  2DE1               	goto	L56
 11146  1DD7                     i1l7024:	
 11147                           ;bldc.c: 1517: break;
 11148                           
 11149                           
 11150                           ;bldc.c: 1524: {
 11151                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
 11152  1DD7  27A8  319A         	fcall	PL100	;call to abstracted procedure
 11153                           
 11154                           ;bldc.c: 1527: break;
 11155  1DD9  2DF3               	goto	i1l7046
 11156  1DDA                     i1l7026:	
 11157                           
 11158                           ;bldc.c: 1534: {
 11159                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 800 * 2 ) 
      +                          ) ;
 11160  1DDA  307D               	movlw	125
 11161  1DDB  2DE1               	goto	L56
 11162  1DDC                     i1l7028:	
 11163                           ;bldc.c: 1537: break;
 11164                           
 11165                           
 11166                           ;bldc.c: 1544: {
 11167                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1200 * 2 )
      +                           ) ;
 11168  1DDC  3053               	movlw	83
 11169  1DDD  2DE1               	goto	L56
 11170  1DDE                     i1l7030:	
 11171                           ;bldc.c: 1547: break;
 11172                           
 11173                           
 11174                           ;bldc.c: 1554: {
 11175                           ;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 1600 * 2 )
      +                           ) ;
 11176  1DDE  303E               	movlw	62
 11177  1DDF  2DE1               	goto	L56
 11178  1DE0                     i1l7032:	
 11179                           ;bldc.c: 1557: break;
 11180                           
 11181                           
 11182                           ;bldc.c: 1564: {
 11183                           ;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           ) ;
 11184  1DE0  3032               	movlw	50
 11185  1DE1                     L56:	
 11186  1DE1  0022               	movlb	2	; select bank2
 11187  1DE2  00B1               	movwf	_ui16_comm_time_max^(0+256)
 11188  1DE3  01B2               	clrf	(_ui16_comm_time_max+1)^(0+256)
 11189                           
 11190                           ;bldc.c: 1567: break;
 11191  1DE4  2DF3               	goto	i1l7046
 11192  1DE5                     i1l7044:	
 11193                           
 11194                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11195                           ; Switch size 1, requested type "space"
 11196                           ; Number of cases is 1, Range of values is 0 to 0
 11197                           ; switch strategies available:
 11198                           ; Name         Instructions Cycles
 11199                           ; simple_byte            4     3 (average)
 11200                           ; direct_byte            8     6 (fixed)
 11201                           ; jumptable            260     6 (fixed)
 11202                           ;	Chosen strategy is simple_byte
 11203  1DE5  0021               	movlb	1	; select bank1
 11204  1DE6  0839               	movf	(_ui16_step_cnt+1)^(0+128),w
 11205  1DE7  3A00               	xorlw	0	; case 0
 11206  1DE8  1903               	skipnz
 11207  1DE9  2DEB               	goto	i1l14494
 11208  1DEA  2DE0               	goto	i1l7032
 11209  1DEB                     i1l14494:	
 11210                           
 11211                           ; Switch size 1, requested type "space"
 11212                           ; Number of cases is 10, Range of values is 0 to 9
 11213                           ; switch strategies available:
 11214                           ; Name         Instructions Cycles
 11215                           ; direct_byte           26     6 (fixed)
 11216                           ; simple_byte           31    16 (average)
 11217                           ; jumptable            260     6 (fixed)
 11218                           ;	Chosen strategy is direct_byte
 11219  1DEB  27C5  319A         	fcall	PL122	;call to abstracted procedure
 11220  1DED  1803               	skipnc
 11221  1DEE  2DE0               	goto	i1l7032
 11222  1DEF  3186               	movlp	high i1S14496
 11223  1DF0  3504               	lslf	4,w
 11224  1DF1  3ED8               	addlw	low i1S14496
 11225  1DF2  0082               	movwf	2
 11226  1DF3                     i1l7046:	
 11227                           
 11228                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
 11229  1DF3  3000               	movlw	0
 11230  1DF4  0232               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 11231  1DF5  3032               	movlw	50
 11232  1DF6  1903               	skipnz
 11233  1DF7  0231               	subwf	_ui16_comm_time_max^(0+256),w
 11234  1DF8  1803               	skipnc
 11235  1DF9  2DFD               	goto	i1l7050
 11236                           
 11237                           ;bldc.c: 1626: {
 11238                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
 11239  1DFA  3032               	movlw	50
 11240  1DFB  00B1               	movwf	_ui16_comm_time_max^(0+256)
 11241  1DFC  01B2               	clrf	(_ui16_comm_time_max+1)^(0+256)
 11242  1DFD                     i1l7050:	
 11243                           
 11244                           ;bldc.c: 1630: }
 11245                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
 11246  1DFD  0020               	movlb	0	; select bank0
 11247  1DFE  1E63               	btfss	_MotorFlags,4
 11248  1DFF  2E30               	goto	i1l345
 11249                           
 11250                           ;bldc.c: 1636: {
 11251                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
 11252  1E00  300A               	movlw	10
 11253  1E01  0021               	movlb	1	; select bank1
 11254  1E02  00E4               	movwf	_ui8_StartupPWM^(0+128)
 11255                           
 11256                           ;bldc.c: 1641: }
 11257                           ;bldc.c: 1644: }
 11258  1E03  2E30               	goto	i1l345
 11259  1E04                     i1l327:	
 11260                           
 11261                           ;bldc.c: 1647: else
 11262                           ;bldc.c: 1648: {
 11263                           ;bldc.c: 1652: if( rising_bemf_flag)
 11264  1E04  1C68               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 11265  1E05  2E0A               	goto	i1l7056
 11266                           
 11267                           ;bldc.c: 1654: {
 11268                           ;bldc.c: 1657: phase_delay_counter = 0;
 11269  1E06  0023               	movlb	3	; select bank3
 11270  1E07  01D6               	clrf	_phase_delay_counter^(0+384)
 11271  1E08  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
 11272                           
 11273                           ;bldc.c: 1659: }
 11274  1E09  2E15               	goto	i1l7058
 11275  1E0A                     i1l7056:	
 11276                           
 11277                           ;bldc.c: 1662: else
 11278                           ;bldc.c: 1663: {
 11279                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 11280  1E0A  085B               	movf	_comm_time+1,w
 11281  1E0B  00F1               	movwf	??i1_commutate+1
 11282  1E0C  085A               	movf	_comm_time,w
 11283  1E0D  00F0               	movwf	??i1_commutate
 11284  1E0E  36F1               	lsrf	??i1_commutate+1,f
 11285  1E0F  0CF0               	rrf	??i1_commutate,f
 11286  1E10  0870               	movf	??i1_commutate,w
 11287  1E11  0023               	movlb	3	; select bank3
 11288  1E12  00D6               	movwf	_phase_delay_counter^(0+384)
 11289  1E13  0871               	movf	??i1_commutate+1,w
 11290  1E14  00D7               	movwf	(_phase_delay_counter+1)^(0+384)
 11291  1E15                     i1l7058:	
 11292                           
 11293                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 11294                           
 11295                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
 11296                           
 11297                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 11298  1E15  278D  319A         	fcall	PL80	;call to abstracted procedure
 11299  1E17  1F63               	btfss	_MotorFlags,6
 11300  1E18  2E2E               	goto	i1l7082
 11301                           
 11302                           ;bldc.c: 1693: {
 11303                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
 11304  1E19  27C0  319A         	fcall	PL120	;call to abstracted procedure
 11305  1E1B  1903               	btfsc	3,2
 11306  1E1C  2E30               	goto	i1l345
 11307                           
 11308                           ;bldc.c: 1706: else
 11309                           ;bldc.c: 1707: {
 11310                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
 11311  1E1D  27D4  319A         	fcall	PL134	;call to abstracted procedure
 11312  1E1F  1803               	skipnc
 11313  1E20  2E28               	goto	i1l7076
 11314                           
 11315                           ;bldc.c: 1712: {
 11316                           ;bldc.c: 1714: CCPR1L--;
 11317                           
 11318                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
 11319  1E21  27AE  319A         	fcall	PL108	;call to abstracted procedure
 11320  1E23  1803               	skipnc
 11321  1E24  2E30               	goto	i1l345
 11322                           
 11323                           ;bldc.c: 1718: {
 11324                           ;bldc.c: 1720: CCPR1L--;
 11325  1E25  0025               	movlb	5	; select bank5
 11326  1E26  0391               	decf	17,f	;volatile
 11327  1E27  2E30               	goto	i1l345
 11328  1E28                     i1l7076:	
 11329                           
 11330                           ;bldc.c: 1728: else
 11331                           ;bldc.c: 1729: {
 11332                           ;bldc.c: 1731: CCPR1L++;
 11333                           
 11334                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
 11335  1E28  27A1  319A         	fcall	PL98	;call to abstracted procedure
 11336  1E2A  1803               	skipnc
 11337  1E2B  2E30               	goto	i1l345
 11338                           
 11339                           ;bldc.c: 1735: {
 11340                           ;bldc.c: 1737: CCPR1L++;
 11341  1E2C  0A91               	incf	17,f	;volatile
 11342  1E2D  2E30               	goto	i1l345
 11343  1E2E                     i1l7082:	
 11344                           
 11345                           ;bldc.c: 1768: else
 11346                           ;bldc.c: 1769: {
 11347                           ;bldc.c: 1771: CCPR1L = 0;
 11348  1E2E  0025               	movlb	5	; select bank5
 11349  1E2F  0191               	clrf	17	;volatile
 11350  1E30                     i1l345:	
 11351                           
 11352                           ;bldc.c: 1773: }
 11353                           ;bldc.c: 1777: }
 11354                           ;bldc.c: 1780: comm_time = 0;
 11355                           
 11356                           ;bldc.c: 1784: if( comm_state == 0xff )
 11357  1E30  27CF  319A         	fcall	PL130	;call to abstracted procedure
 11358  1E32  0F63               	incfsz	_comm_state^(0+128),w
 11359  1E33  2E82               	goto	i1l7232
 11360                           
 11361                           ;bldc.c: 1786: {
 11362                           ;bldc.c: 1788: comm_state = 6;
 11363  1E34  3006               	movlw	6
 11364  1E35  00E3               	movwf	_comm_state^(0+128)
 11365  1E36  2E82               	goto	i1l7232
 11366  1E37                     i1l7088:	
 11367                           
 11368                           ;bldc.c: 1800: {
 11369                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
 11370  1E37  3001               	movlw	1
 11371  1E38  0025               	movlb	5	; select bank5
 11372  1E39  0096               	movwf	22	;volatile
 11373                           
 11374                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
 11375  1E3A  0020               	movlb	0	; select bank0
 11376  1E3B  1F63               	btfss	_MotorFlags,6
 11377  1E3C  2E3F               	goto	i1l7094
 11378                           
 11379                           ;bldc.c: 1811: {
 11380                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 11381  1E3D  2781  319A         	fcall	PL72	;call to abstracted procedure
 11382  1E3F                     i1l7094:	
 11383                           
 11384                           ;bldc.c: 1815: }
 11385                           ;bldc.c: 1819: LATB2 = 0;
 11386                           
 11387                           ;bldc.c: 1820: LATB1 = 0;
 11388                           
 11389                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 11390                           
 11391                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 11392                           
 11393                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 11394                           
 11395                           ;bldc.c: 1824: CM1CON1 = 0x02;
 11396                           
 11397                           ;bldc.c: 1837: CM1CON0 = 0x84;
 11398                           
 11399                           ;bldc.c: 1838: rising_bemf_flag = 1;
 11400  1E3F  271F  319A         	fcall	PL38	;call to abstracted procedure
 11401  1E41  2E6F               	goto	L62
 11402  1E42                     i1l7112:	
 11403                           ;bldc.c: 1845: break;
 11404                           
 11405                           ;bldc.c: 1839: comm_state = 6;
 11406                           
 11407                           
 11408                           ;bldc.c: 1855: {
 11409                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
 11410  1E42  3001               	movlw	1
 11411  1E43  0025               	movlb	5	; select bank5
 11412  1E44  0096               	movwf	22	;volatile
 11413                           
 11414                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
 11415  1E45  0020               	movlb	0	; select bank0
 11416  1E46  1F63               	btfss	_MotorFlags,6
 11417  1E47  2E4A               	goto	i1l7118
 11418                           
 11419                           ;bldc.c: 1865: {
 11420                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 11421  1E48  2787  319A         	fcall	PL76	;call to abstracted procedure
 11422  1E4A                     i1l7118:	
 11423                           
 11424                           ;bldc.c: 1869: }
 11425                           ;bldc.c: 1873: LATB2 = 1;
 11426                           
 11427                           ;bldc.c: 1874: LATB1 = 0;
 11428                           
 11429                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 11430                           
 11431                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 11432                           
 11433                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 11434                           
 11435                           ;bldc.c: 1878: CM1CON1 = 0x01;
 11436                           
 11437                           ;bldc.c: 1892: CM1CON0 = 0x94;
 11438  1E4A  2761  319A         	fcall	PL46	;call to abstracted procedure
 11439  1E4C                     i1l7132:	
 11440                           
 11441                           ;bldc.c: 1893: rising_bemf_flag = 0;
 11442                           
 11443                           ;bldc.c: 1894: comm_state = 1;
 11444  1E4C  27BA  319A         	fcall	PL118	;call to abstracted procedure
 11445                           
 11446                           ;bldc.c: 1902: break;
 11447  1E4E  2E96               	goto	i1l7234
 11448  1E4F                     i1l7136:	
 11449                           
 11450                           ;bldc.c: 1912: {
 11451                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
 11452  1E4F  3002               	movlw	2
 11453  1E50  0025               	movlb	5	; select bank5
 11454  1E51  0096               	movwf	22	;volatile
 11455                           
 11456                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
 11457  1E52  0020               	movlb	0	; select bank0
 11458  1E53  1F63               	btfss	_MotorFlags,6
 11459  1E54  2E57               	goto	i1l7142
 11460                           
 11461                           ;bldc.c: 1922: {
 11462                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 11463  1E55  277B  319A         	fcall	PL68	;call to abstracted procedure
 11464  1E57                     i1l7142:	
 11465                           
 11466                           ;bldc.c: 1926: }
 11467                           ;bldc.c: 1929: LATC2 = 0;
 11468                           
 11469                           ;bldc.c: 1931: LATB1 = 0;
 11470                           
 11471                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 11472                           
 11473                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 11474                           
 11475                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 11476                           
 11477                           ;bldc.c: 1935: CM1CON1 = 0x00;
 11478                           
 11479                           ;bldc.c: 1949: CM1CON0 = 0x84;
 11480                           
 11481                           ;bldc.c: 1950: rising_bemf_flag = 1;
 11482  1E57  2740  319A         	fcall	PL42	;call to abstracted procedure
 11483  1E59  2E6F               	goto	L62
 11484  1E5A                     i1l7156:	
 11485                           ;bldc.c: 1956: break;
 11486                           
 11487                           ;bldc.c: 1951: comm_state = 2;
 11488                           
 11489                           
 11490                           ;bldc.c: 1966: {
 11491                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
 11492  1E5A  3002               	movlw	2
 11493  1E5B  0025               	movlb	5	; select bank5
 11494  1E5C  0096               	movwf	22	;volatile
 11495                           
 11496                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
 11497  1E5D  0020               	movlb	0	; select bank0
 11498  1E5E  1F63               	btfss	_MotorFlags,6
 11499  1E5F  2E62               	goto	i1l7162
 11500                           
 11501                           ;bldc.c: 1977: {
 11502                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 11503  1E60  2781  319A         	fcall	PL72	;call to abstracted procedure
 11504  1E62                     i1l7162:	
 11505                           
 11506                           ;bldc.c: 1981: }
 11507                           ;bldc.c: 1984: LATC2 = 0;
 11508                           
 11509                           ;bldc.c: 1986: LATB1 = 1;
 11510                           
 11511                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 11512                           
 11513                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 11514                           
 11515                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 11516                           
 11517                           ;bldc.c: 1990: CM1CON1 = 0x02;
 11518                           
 11519                           ;bldc.c: 2004: CM1CON0 = 0x94;
 11520                           
 11521                           ;bldc.c: 2005: rising_bemf_flag = 0;
 11522  1E62  270E  319A         	fcall	PL36	;call to abstracted procedure
 11523  1E64  2E7B               	goto	L63
 11524  1E65                     i1l7180:	
 11525                           ;bldc.c: 2011: break;
 11526                           
 11527                           ;bldc.c: 2006: comm_state = 3;
 11528                           
 11529                           
 11530                           ;bldc.c: 2020: {
 11531                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
 11532  1E65  3004               	movlw	4
 11533  1E66  0025               	movlb	5	; select bank5
 11534  1E67  0096               	movwf	22	;volatile
 11535                           
 11536                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
 11537  1E68  0020               	movlb	0	; select bank0
 11538  1E69  1F63               	btfss	_MotorFlags,6
 11539  1E6A  2E6D               	goto	i1l7186
 11540                           
 11541                           ;bldc.c: 2031: {
 11542                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 11543  1E6B  2787  319A         	fcall	PL76	;call to abstracted procedure
 11544  1E6D                     i1l7186:	
 11545                           
 11546                           ;bldc.c: 2035: }
 11547                           ;bldc.c: 2038: LATC2 = 0;
 11548                           
 11549                           ;bldc.c: 2039: LATB2 = 0;
 11550                           
 11551                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 11552                           
 11553                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 11554                           
 11555                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 11556                           
 11557                           ;bldc.c: 2044: CM1CON1 = 0x01;
 11558                           
 11559                           ;bldc.c: 2059: CM1CON0 = 0x84;
 11560                           
 11561                           ;bldc.c: 2060: rising_bemf_flag = 1;
 11562  1E6D  26FD  319A         	fcall	PL34	;call to abstracted procedure
 11563  1E6F                     L62:	
 11564  1E6F  1468               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 11565                           
 11566                           ;bldc.c: 2061: comm_state = 4;
 11567  1E70  2E7C               	goto	L60
 11568  1E71                     i1l7204:	
 11569                           ;bldc.c: 2066: break;
 11570                           
 11571                           
 11572                           ;bldc.c: 2076: {
 11573                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
 11574  1E71  3004               	movlw	4
 11575  1E72  0025               	movlb	5	; select bank5
 11576  1E73  0096               	movwf	22	;volatile
 11577                           
 11578                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
 11579  1E74  0020               	movlb	0	; select bank0
 11580  1E75  1F63               	btfss	_MotorFlags,6
 11581  1E76  2E79               	goto	i1l7210
 11582                           
 11583                           ;bldc.c: 2086: {
 11584                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 11585  1E77  277B  319A         	fcall	PL68	;call to abstracted procedure
 11586  1E79                     i1l7210:	
 11587                           
 11588                           ;bldc.c: 2090: }
 11589                           ;bldc.c: 2093: LATC2 = 1;
 11590                           
 11591                           ;bldc.c: 2094: LATB2 = 0;
 11592                           
 11593                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 11594                           
 11595                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 11596                           
 11597                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 11598                           
 11599                           ;bldc.c: 2099: CM1CON1 = 0x00;
 11600                           
 11601                           ;bldc.c: 2113: CM1CON0 = 0x94;
 11602                           
 11603                           ;bldc.c: 2114: rising_bemf_flag = 0;
 11604  1E79  2730  319A         	fcall	PL40	;call to abstracted procedure
 11605  1E7B                     L63:	
 11606  1E7B  1068               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 11607  1E7C                     L60:	
 11608                           
 11609                           ;bldc.c: 2115: comm_state = 5;
 11610  1E7C  0021               	movlb	1	; select bank1
 11611  1E7D  00E3               	movwf	_comm_state^(0+128)
 11612                           
 11613                           ;bldc.c: 2120: break;
 11614  1E7E  2E96               	goto	i1l7234
 11615  1E7F                     i1l7224:	
 11616                           
 11617                           ;bldc.c: 2129: {
 11618                           ;bldc.c: 2131: PSTR1CON = 0x00;
 11619                           
 11620                           ;bldc.c: 2132: CM1CON0 = 0x00;
 11621  1E7F  27CA  319A         	fcall	PL124	;call to abstracted procedure
 11622  1E81  2E4C               	goto	i1l7132
 11623  1E82                     i1l7232:	
 11624  1E82  0863               	movf	_comm_state^(0+128),w
 11625                           
 11626                           ; Switch size 1, requested type "space"
 11627                           ; Number of cases is 6, Range of values is 1 to 6
 11628                           ; switch strategies available:
 11629                           ; Name         Instructions Cycles
 11630                           ; simple_byte           19    10 (average)
 11631                           ; direct_byte           21     9 (fixed)
 11632                           ; jumptable            263     9 (fixed)
 11633                           ;	Chosen strategy is simple_byte
 11634  1E83  3A01               	xorlw	1	; case 1
 11635  1E84  1903               	skipnz
 11636  1E85  2E37               	goto	i1l7088
 11637  1E86  3A03               	xorlw	3	; case 2
 11638  1E87  1903               	skipnz
 11639  1E88  2E42               	goto	i1l7112
 11640  1E89  3A01               	xorlw	1	; case 3
 11641  1E8A  1903               	skipnz
 11642  1E8B  2E4F               	goto	i1l7136
 11643  1E8C  3A07               	xorlw	7	; case 4
 11644  1E8D  1903               	skipnz
 11645  1E8E  2E5A               	goto	i1l7156
 11646  1E8F  3A01               	xorlw	1	; case 5
 11647  1E90  1903               	skipnz
 11648  1E91  2E65               	goto	i1l7180
 11649  1E92  3A03               	xorlw	3	; case 6
 11650  1E93  1903               	skipnz
 11651  1E94  2E71               	goto	i1l7204
 11652  1E95  2E7F               	goto	i1l7224
 11653  1E96                     i1l7234:	
 11654                           
 11655                           ;bldc.c: 2146: {
 11656                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
 11657                           
 11658                           ;bldc.c: 2158: }
 11659                           ;bldc.c: 2161: comm_time = 0;
 11660                           
 11661                           ;bldc.c: 2150: }
 11662  1E96  2F9B               	ljmp	PL90	;call to abstracted procedure
 11663  1E97                     __end_ofi1_commutate:	
 11664  1E97                     __ptext57:	
 11665 ;; *************** function _BLDCWait *****************
 11666 ;; Defined at:
 11667 ;;		line 156 in file "../bldc.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;		None
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;		None
 11672 ;; Return value:  Size  Location     Type
 11673 ;;                  1    wreg      void 
 11674 ;; Registers used:
 11675 ;;		None
 11676 ;; Tracked objects:
 11677 ;;		On entry : 1E/1
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11681 ;;      Params:         0       0       0       0       0       0       0       0
 11682 ;;      Locals:         0       0       0       0       0       0       0       0
 11683 ;;      Temps:          0       0       0       0       0       0       0       0
 11684 ;;      Totals:         0       0       0       0       0       0       0       0
 11685 ;;Total ram usage:        0 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; This function calls:
 11688 ;;		Nothing
 11689 ;; This function is called by:
 11690 ;;		_interrrupt_bldc
 11691 ;; This function uses a non-reentrant model
 11692 ;;
 11693                           
 11694                           
 11695                           ;psect for function _BLDCWait
 11696  1E97                     _BLDCWait:	
 11697                           
 11698                           ;bldc.c: 161: __nop();
 11699                           
 11700                           ;incstack = 0
 11701                           ; Regs used in _BLDCWait: []
 11702  1E97  0000               	nop
 11703                           
 11704                           ;bldc.c: 162: __nop();
 11705  1E98  0000               	nop
 11706                           
 11707                           ;bldc.c: 163: __nop();
 11708  1E99  0000               	nop
 11709                           
 11710                           ;bldc.c: 164: __nop();
 11711  1E9A  0000               	nop
 11712                           
 11713                           ;bldc.c: 165: __nop();
 11714  1E9B  0000               	nop
 11715                           
 11716                           ;bldc.c: 166: __nop();
 11717  1E9C  0000               	nop
 11718                           
 11719                           ;bldc.c: 167: __nop();
 11720  1E9D  0000               	nop
 11721                           
 11722                           ;bldc.c: 168: __nop();
 11723  1E9E  0000               	nop
 11724                           
 11725                           ;bldc.c: 170: __nop();
 11726  1E9F  0000               	nop
 11727                           
 11728                           ;bldc.c: 171: __nop();
 11729  1EA0  0000               	nop
 11730                           
 11731                           ;bldc.c: 172: __nop();
 11732  1EA1  0000               	nop
 11733                           
 11734                           ;bldc.c: 173: __nop();
 11735  1EA2  0000               	nop
 11736                           
 11737                           ;bldc.c: 174: __nop();
 11738  1EA3  0000               	nop
 11739                           
 11740                           ;bldc.c: 175: __nop();
 11741  1EA4  0000               	nop
 11742                           
 11743                           ;bldc.c: 176: __nop();
 11744  1EA5  0000               	nop
 11745                           
 11746                           ;bldc.c: 177: __nop();
 11747  1EA6  0000               	nop
 11748                           
 11749                           ;bldc.c: 179: __nop();
 11750  1EA7  0000               	nop
 11751                           
 11752                           ;bldc.c: 180: __nop();
 11753  1EA8  0000               	nop
 11754                           
 11755                           ;bldc.c: 181: __nop();
 11756  1EA9  0000               	nop
 11757                           
 11758                           ;bldc.c: 182: __nop();
 11759  1EAA  0000               	nop
 11760                           
 11761                           ;bldc.c: 183: __nop();
 11762  1EAB  0000               	nop
 11763                           
 11764                           ;bldc.c: 184: __nop();
 11765  1EAC  0000               	nop
 11766                           
 11767                           ;bldc.c: 185: __nop();
 11768  1EAD  0000               	nop
 11769                           
 11770                           ;bldc.c: 186: __nop();
 11771  1EAE  0000               	nop
 11772                           
 11773                           ;bldc.c: 188: __nop();
 11774  1EAF  0000               	nop
 11775                           
 11776                           ;bldc.c: 189: __nop();
 11777  1EB0  0000               	nop
 11778                           
 11779                           ;bldc.c: 190: __nop();
 11780  1EB1  0000               	nop
 11781                           
 11782                           ;bldc.c: 191: __nop();
 11783  1EB2  0000               	nop
 11784                           
 11785                           ;bldc.c: 192: __nop();
 11786  1EB3  0000               	nop
 11787                           
 11788                           ;bldc.c: 193: __nop();
 11789  1EB4  0000               	nop
 11790                           
 11791                           ;bldc.c: 194: __nop();
 11792  1EB5  0000               	nop
 11793                           
 11794                           ;bldc.c: 195: __nop();
 11795  1EB6  0000               	nop
 11796  1EB7  0008               	return
 11797  1EB8                     __end_of_BLDCWait:	
 11798  1EB8                     PL18:	
 11799  1EB8  0022               	movlb	2	; select bank2
 11800  1EB9  0834               	movf	(_ui16_speed_rar+1)^(0+256),w
 11801  1EBA  0021               	movlb	1	; select bank1
 11802  1EBB  00B7               	movwf	(_ui16_phase_advancement+1)^(0+128)
 11803  1EBC  0022               	movlb	2	; select bank2
 11804  1EBD  0833               	movf	_ui16_speed_rar^(0+256),w
 11805  1EBE  0021               	movlb	1	; select bank1
 11806  1EBF  00B6               	movwf	_ui16_phase_advancement^(0+128)
 11807  1EC0  3001               	movlw	1
 11808  1EC1  36B7               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 11809  1EC2  0CB6               	rrf	_ui16_phase_advancement^(0+128),f
 11810  1EC3  36B7               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 11811  1EC4  0CB6               	rrf	_ui16_phase_advancement^(0+128),f
 11812  1EC5  36B7               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 11813  1EC6  0CB6               	rrf	_ui16_phase_advancement^(0+128),f
 11814  1EC7  05B7               	andwf	(_ui16_phase_advancement+1)^(0+128),f
 11815  1EC8  0020               	movlb	0	; select bank0
 11816  1EC9  085B               	movf	_comm_time+1,w
 11817  1ECA  0021               	movlb	1	; select bank1
 11818  1ECB  0237               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 11819  1ECC  1D03               	skipz
 11820  1ECD  0008               	return
 11821  1ECE  0020               	movlb	0	; select bank0
 11822  1ECF  085A               	movf	_comm_time,w
 11823  1ED0  0021               	movlb	1	; select bank1
 11824  1ED1  0236               	subwf	_ui16_phase_advancement^(0+128),w
 11825  1ED2  0008               	return
 11826  1ED3                     __end_ofPL18:	
 11827  1ED3                     PL20:	
 11828  1ED3  355C               	lslf	_Bcnt^(0+128),w
 11829  1ED4  3EA0               	addlw	(low (_B| (0+256)))& (0+255)
 11830  1ED5  0086               	movwf	6
 11831  1ED6  3001               	movlw	1	; select bank3/4
 11832  1ED7  0087               	movwf	7
 11833  1ED8  0020               	movlb	0	; select bank0
 11834  1ED9  085A               	movf	_comm_time,w
 11835  1EDA  3FC0               	movwi [0]fsr1
 11836  1EDB  085B               	movf	_comm_time+1,w
 11837  1EDC  3FC1               	movwi [1]fsr1
 11838  1EDD  0021               	movlb	1	; select bank1
 11839  1EDE  3007               	movlw	7
 11840  1EDF  0ADC               	incf	_Bcnt^(0+128),f
 11841  1EE0  05DC               	andwf	_Bcnt^(0+128),f
 11842  1EE1  30AE               	movlw	((low (_B| (0+256)))& (0+255)+14)
 11843  1EE2  0086               	movwf	6
 11844  1EE3  30AC               	movlw	((low (_B| (0+256)))& (0+255)+12)
 11845  1EE4  0084               	movwf	4
 11846  1EE5  3001               	movlw	1	; select bank3/4
 11847  1EE6  0085               	movwf	5
 11848  1EE7  0023               	movlb	3	; select bank3
 11849  1EE8  0824               	movf	(_B^(0+384)+4),w
 11850  1EE9  0722               	addwf	(_B^(0+384)+2),w
 11851  1EEA  0008               	return
 11852  1EEB                     __end_ofPL20:	
 11853  1EEB                     PL32:	
 11854  1EEB  0021               	movlb	1	; select bank1
 11855  1EEC  00B3               	movwf	(_ui16_speed_fil+1)^(0+128)
 11856  1EED  0020               	movlb	0	; select bank0
 11857  1EEE  085B               	movf	_comm_time+1,w
 11858  1EEF  0022               	movlb	2	; select bank2
 11859  1EF0  00B4               	movwf	(_ui16_speed_rar+1)^(0+256)
 11860  1EF1  0020               	movlb	0	; select bank0
 11861  1EF2  085A               	movf	_comm_time,w
 11862  1EF3  0022               	movlb	2	; select bank2
 11863  1EF4  00B3               	movwf	_ui16_speed_rar^(0+256)
 11864  1EF5  0020               	movlb	0	; select bank0
 11865  1EF6  12E3               	bcf	_MotorFlags,5
 11866  1EF7  0021               	movlb	1	; select bank1
 11867  1EF8  01DE               	clrf	_ui8_sampleState^(0+128)
 11868  1EF9  0ADE               	incf	_ui8_sampleState^(0+128),f
 11869  1EFA  0020               	movlb	0	; select bank0
 11870  1EFB  17E3               	bsf	_MotorFlags,7
 11871  1EFC  0008               	return
 11872  1EFD                     __end_ofPL32:	
 11873  1EFD                     PL34:	
 11874  1EFD  0022               	movlb	2	; select bank2
 11875  1EFE  110E               	bcf	14,2	;volatile
 11876  1EFF  110D               	bcf	13,2	;volatile
 11877  1F00  3011               	movlw	17
 11878  1F01  0021               	movlb	1	; select bank1
 11879  1F02  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 11880  1F03  3025               	movlw	37
 11881  1F04  00E0               	movwf	_ui8_UPhase_sel^(0+128)
 11882  1F05  3005               	movlw	5
 11883  1F06  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 11884  1F07  3001               	movlw	1
 11885  1F08  0022               	movlb	2	; select bank2
 11886  1F09  0092               	movwf	18	;volatile
 11887  1F0A  3084               	movlw	132
 11888  1F0B  0091               	movwf	17	;volatile
 11889  1F0C  0020               	movlb	0	; select bank0
 11890  1F0D  3404               	retlw	4
 11891  1F0E                     __end_ofPL34:	
 11892  1F0E                     PL36:	
 11893  1F0E  0022               	movlb	2	; select bank2
 11894  1F0F  110E               	bcf	14,2	;volatile
 11895  1F10  148D               	bsf	13,1	;volatile
 11896  1F11  3035               	movlw	53
 11897  1F12  0021               	movlb	1	; select bank1
 11898  1F13  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 11899  1F14  3005               	movlw	5
 11900  1F15  00E0               	movwf	_ui8_UPhase_sel^(0+128)
 11901  1F16  3025               	movlw	37
 11902  1F17  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 11903  1F18  3002               	movlw	2
 11904  1F19  0022               	movlb	2	; select bank2
 11905  1F1A  0092               	movwf	18	;volatile
 11906  1F1B  3094               	movlw	148
 11907  1F1C  0091               	movwf	17	;volatile
 11908  1F1D  0020               	movlb	0	; select bank0
 11909  1F1E  3403               	retlw	3
 11910  1F1F                     __end_ofPL36:	
 11911  1F1F                     PL38:	
 11912  1F1F  0022               	movlb	2	; select bank2
 11913  1F20  110D               	bcf	13,2	;volatile
 11914  1F21  108D               	bcf	13,1	;volatile
 11915  1F22  3009               	movlw	9
 11916  1F23  0021               	movlb	1	; select bank1
 11917  1F24  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 11918  1F25  3025               	movlw	37
 11919  1F26  01E0               	clrf	_ui8_UPhase_sel^(0+128)
 11920  1F27  0AE0               	incf	_ui8_UPhase_sel^(0+128),f
 11921  1F28  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 11922  1F29  3002               	movlw	2
 11923  1F2A  0022               	movlb	2	; select bank2
 11924  1F2B  0092               	movwf	18	;volatile
 11925  1F2C  3084               	movlw	132
 11926  1F2D  0091               	movwf	17	;volatile
 11927  1F2E  0020               	movlb	0	; select bank0
 11928  1F2F  3406               	retlw	6
 11929  1F30                     __end_ofPL38:	
 11930  1F30                     PL40:	
 11931  1F30  0022               	movlb	2	; select bank2
 11932  1F31  150E               	bsf	14,2	;volatile
 11933  1F32  110D               	bcf	13,2	;volatile
 11934  1F33  3011               	movlw	17
 11935  1F34  0021               	movlb	1	; select bank1
 11936  1F35  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 11937  1F36  3025               	movlw	37
 11938  1F37  00E0               	movwf	_ui8_UPhase_sel^(0+128)
 11939  1F38  01DF               	clrf	_ui8_Ubemf_sel^(0+128)
 11940  1F39  0ADF               	incf	_ui8_Ubemf_sel^(0+128),f
 11941  1F3A  0022               	movlb	2	; select bank2
 11942  1F3B  0192               	clrf	18	;volatile
 11943  1F3C  3094               	movlw	148
 11944  1F3D  0091               	movwf	17	;volatile
 11945  1F3E  0020               	movlb	0	; select bank0
 11946  1F3F  3405               	retlw	5
 11947  1F40                     __end_ofPL40:	
 11948  1F40                     PL42:	
 11949  1F40  0022               	movlb	2	; select bank2
 11950  1F41  110E               	bcf	14,2	;volatile
 11951  1F42  108D               	bcf	13,1	;volatile
 11952  1F43  3035               	movlw	53
 11953  1F44  0021               	movlb	1	; select bank1
 11954  1F45  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 11955  1F46  3005               	movlw	5
 11956  1F47  00E0               	movwf	_ui8_UPhase_sel^(0+128)
 11957  1F48  01DF               	clrf	_ui8_Ubemf_sel^(0+128)
 11958  1F49  0ADF               	incf	_ui8_Ubemf_sel^(0+128),f
 11959  1F4A  0022               	movlb	2	; select bank2
 11960  1F4B  0192               	clrf	18	;volatile
 11961  1F4C  3084               	movlw	132
 11962  1F4D  0091               	movwf	17	;volatile
 11963  1F4E  0020               	movlb	0	; select bank0
 11964  1F4F  3402               	retlw	2
 11965  1F50                     __end_ofPL42:	
 11966  1F50                     PL44:	
 11967  1F50  0020               	movlb	0	; select bank0
 11968  1F51  085B               	movf	_comm_time+1,w
 11969  1F52  0023               	movlb	3	; select bank3
 11970  1F53  00D7               	movwf	(_phase_delay_counter+1)^(0+384)
 11971  1F54  0020               	movlb	0	; select bank0
 11972  1F55  085A               	movf	_comm_time,w
 11973  1F56  0023               	movlb	3	; select bank3
 11974  1F57  00D6               	movwf	_phase_delay_counter^(0+384)
 11975  1F58  0021               	movlb	1	; select bank1
 11976  1F59  0836               	movf	_ui16_phase_advancement^(0+128),w
 11977  1F5A  0023               	movlb	3	; select bank3
 11978  1F5B  02D6               	subwf	_phase_delay_counter^(0+384),f
 11979  1F5C  0021               	movlb	1	; select bank1
 11980  1F5D  0837               	movf	(_ui16_phase_advancement+1)^(0+128),w
 11981  1F5E  0023               	movlb	3	; select bank3
 11982  1F5F  3BD7               	subwfb	(_phase_delay_counter+1)^(0+384),f
 11983  1F60  0008               	return
 11984  1F61                     __end_ofPL44:	
 11985  1F61                     PL46:	
 11986  1F61  0022               	movlb	2	; select bank2
 11987  1F62  150D               	bsf	13,2	;volatile
 11988  1F63  108D               	bcf	13,1	;volatile
 11989  1F64  3009               	movlw	9
 11990  1F65  0021               	movlb	1	; select bank1
 11991  1F66  00E1               	movwf	_ui8_IPhase_sel^(0+128)
 11992  1F67  3005               	movlw	5
 11993  1F68  01E0               	clrf	_ui8_UPhase_sel^(0+128)
 11994  1F69  0AE0               	incf	_ui8_UPhase_sel^(0+128),f
 11995  1F6A  00DF               	movwf	_ui8_Ubemf_sel^(0+128)
 11996  1F6B  3001               	movlw	1
 11997  1F6C  0022               	movlb	2	; select bank2
 11998  1F6D  0092               	movwf	18	;volatile
 11999  1F6E  3094               	movlw	148
 12000  1F6F  0091               	movwf	17	;volatile
 12001  1F70  0008               	return
 12002  1F71                     __end_ofPL46:	
 12003  1F71                     PL50:	
 12004  1F71  00FC               	movwf	??_interrrupt_bldc
 12005  1F72  01FD               	clrf	??_interrrupt_bldc+1
 12006  1F73  0020               	movlb	0	; select bank0
 12007  1F74  0859               	movf	_ui16_IPhase_bldc+1,w	;volatile
 12008  1F75  027D               	subwf	??_interrrupt_bldc+1,w
 12009  1F76  1D03               	skipz
 12010  1F77  0008               	return
 12011  1F78  0858               	movf	_ui16_IPhase_bldc,w	;volatile
 12012  1F79  027C               	subwf	??_interrrupt_bldc,w
 12013  1F7A  0008               	return
 12014  1F7B                     __end_ofPL50:	
 12015  1F7B                     PL68:	
 12016  1F7B  0022               	movlb	2	; select bank2
 12017  1F7C  080E               	movf	14,w	;volatile
 12018  1F7D  39E5               	andlw	229
 12019  1F7E  3818               	iorlw	24
 12020  1F7F  008E               	movwf	14	;volatile
 12021  1F80  0008               	return
 12022  1F81                     __end_ofPL68:	
 12023  1F81                     PL72:	
 12024  1F81  0022               	movlb	2	; select bank2
 12025  1F82  080E               	movf	14,w	;volatile
 12026  1F83  39E5               	andlw	229
 12027  1F84  380A               	iorlw	10
 12028  1F85  008E               	movwf	14	;volatile
 12029  1F86  0008               	return
 12030  1F87                     __end_ofPL72:	
 12031  1F87                     PL76:	
 12032  1F87  0022               	movlb	2	; select bank2
 12033  1F88  080E               	movf	14,w	;volatile
 12034  1F89  39E5               	andlw	229
 12035  1F8A  3812               	iorlw	18
 12036  1F8B  008E               	movwf	14	;volatile
 12037  1F8C  0008               	return
 12038  1F8D                     __end_ofPL76:	
 12039  1F8D                     PL80:	
 12040  1F8D  3032               	movlw	50
 12041  1F8E  01D6               	clrf	_phase_delay_counter^(0+384)
 12042  1F8F  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
 12043  1F90  0022               	movlb	2	; select bank2
 12044  1F91  00B1               	movwf	_ui16_comm_time_max^(0+256)
 12045  1F92  01B2               	clrf	(_ui16_comm_time_max+1)^(0+256)
 12046  1F93  0020               	movlb	0	; select bank0
 12047  1F94  0008               	return
 12048  1F95                     __end_ofPL80:	
 12049  1F95                     PL84:	
 12050  1F95  0859               	movf	_ui16_IPhase_bldc+1,w	;volatile
 12051  1F96  00F1               	movwf	i1___wmul@multiplier+1
 12052  1F97  0858               	movf	_ui16_IPhase_bldc,w	;volatile
 12053  1F98  00F0               	movwf	i1___wmul@multiplier
 12054  1F99  0022               	movlb	2	; select bank2
 12055  1F9A  0008               	return
 12056  1F9B                     __end_ofPL84:	
 12057  1F9B                     PL90:	
 12058  1F9B  3028               	movlw	40
 12059  1F9C  00E2               	movwf	_ui8_BlankingCount^(0+128)
 12060  1F9D  0020               	movlb	0	; select bank0
 12061  1F9E  01DA               	clrf	_comm_time
 12062  1F9F  01DB               	clrf	_comm_time+1
 12063  1FA0  0008               	return
 12064  1FA1                     __end_ofPL90:	
 12065  1FA1                     PL98:	
 12066  1FA1  0025               	movlb	5	; select bank5
 12067  1FA2  0A91               	incf	17,f	;volatile
 12068  1FA3  0020               	movlb	0	; select bank0
 12069  1FA4  0864               	movf	_ui8_duty_cycle_BLDC,w
 12070  1FA5  0025               	movlb	5	; select bank5
 12071  1FA6  0211               	subwf	17,w	;volatile
 12072  1FA7  0008               	return
 12073  1FA8                     __end_ofPL98:	
 12074  1FA8                     PL100:	
 12075  1FA8  30F4               	movlw	244
 12076  1FA9  0022               	movlb	2	; select bank2
 12077  1FAA  00B1               	movwf	_ui16_comm_time_max^(0+256)
 12078  1FAB  3001               	movlw	1
 12079  1FAC  00B2               	movwf	(_ui16_comm_time_max^(0+256)+1)
 12080  1FAD  0008               	return
 12081  1FAE                     __end_ofPL100:	
 12082  1FAE                     PL108:	
 12083  1FAE  0025               	movlb	5	; select bank5
 12084  1FAF  0391               	decf	17,f	;volatile
 12085  1FB0  0811               	movf	17,w	;volatile
 12086  1FB1  0020               	movlb	0	; select bank0
 12087  1FB2  0264               	subwf	_ui8_duty_cycle_BLDC,w
 12088  1FB3  0008               	return
 12089  1FB4                     __end_ofPL108:	
 12090  1FB4                     PL116:	
 12091  1FB4  081C               	movf	28,w	;volatile
 12092  1FB5  00BB               	movwf	(_analog_value^(0+128)+1)	;volatile
 12093  1FB6  081B               	movf	27,w	;volatile
 12094  1FB7  00BA               	movwf	_analog_value^(0+128)	;volatile
 12095  1FB8  083B               	movf	(_analog_value+1)^(0+128),w	;volatile
 12096  1FB9  0008               	return
 12097  1FBA                     __end_ofPL116:	
 12098  1FBA                     PL118:	
 12099  1FBA  0020               	movlb	0	; select bank0
 12100  1FBB  1068               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 12101  1FBC  0021               	movlb	1	; select bank1
 12102  1FBD  01E3               	clrf	_comm_state^(0+128)
 12103  1FBE  0AE3               	incf	_comm_state^(0+128),f
 12104  1FBF  0008               	return
 12105  1FC0                     __end_ofPL118:	
 12106  1FC0                     PL120:	
 12107  1FC0  0025               	movlb	5	; select bank5
 12108  1FC1  0811               	movf	17,w	;volatile
 12109  1FC2  0020               	movlb	0	; select bank0
 12110  1FC3  0664               	xorwf	_ui8_duty_cycle_BLDC,w
 12111  1FC4  0008               	return
 12112  1FC5                     __end_ofPL120:	
 12113  1FC5                     PL122:	
 12114  1FC5  0838               	movf	_ui16_step_cnt^(0+128),w
 12115  1FC6  0084               	movwf	4
 12116  1FC7  300A               	movlw	10
 12117  1FC8  0204               	subwf	4,w
 12118  1FC9  0008               	return
 12119  1FCA                     __end_ofPL122:	
 12120  1FCA                     PL124:	
 12121  1FCA  0025               	movlb	5	; select bank5
 12122  1FCB  0196               	clrf	22	;volatile
 12123  1FCC  0022               	movlb	2	; select bank2
 12124  1FCD  0191               	clrf	17	;volatile
 12125  1FCE  0008               	return
 12126  1FCF                     __end_ofPL124:	
 12127  1FCF                     PL130:	
 12128  1FCF  0020               	movlb	0	; select bank0
 12129  1FD0  01DA               	clrf	_comm_time
 12130  1FD1  01DB               	clrf	_comm_time+1
 12131  1FD2  0021               	movlb	1	; select bank1
 12132  1FD3  0008               	return
 12133  1FD4                     __end_ofPL130:	
 12134  1FD4                     PL134:	
 12135  1FD4  0025               	movlb	5	; select bank5
 12136  1FD5  0811               	movf	17,w	;volatile
 12137  1FD6  0020               	movlb	0	; select bank0
 12138  1FD7  0264               	subwf	_ui8_duty_cycle_BLDC,w
 12139  1FD8  0008               	return
 12140  1FD9                     __end_ofPL134:	
 12141  1FD9                     __ptext54:	
 12142 ;; *************** function i1___lwdiv *****************
 12143 ;; Defined at:
 12144 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 12145 ;; Parameters:    Size  Location     Type
 12146 ;;  divisor         2    0[COMMON] unsigned int 
 12147 ;;  dividend        2    2[COMMON] unsigned int 
 12148 ;; Auto vars:     Size  Location     Type
 12149 ;;  __lwdiv         2    5[COMMON] unsigned int 
 12150 ;;  __lwdiv         1    4[COMMON] unsigned char 
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  2    0[COMMON] unsigned int 
 12153 ;; Registers used:
 12154 ;;		wreg, status,2, status,0
 12155 ;; Tracked objects:
 12156 ;;		On entry : 1F/0
 12157 ;;		On exit  : 1F/0
 12158 ;;		Unchanged: 1F/0
 12159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12160 ;;      Params:         4       0       0       0       0       0       0       0
 12161 ;;      Locals:         3       0       0       0       0       0       0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0       0
 12163 ;;      Totals:         7       0       0       0       0       0       0       0
 12164 ;;Total ram usage:        7 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; This function calls:
 12167 ;;		Nothing
 12168 ;; This function is called by:
 12169 ;;		_interrrupt_bldc
 12170 ;; This function uses a non-reentrant model
 12171 ;;
 12172                           
 12173                           
 12174                           ;psect for function i1___lwdiv
 12175  1FD9                     i1___lwdiv:	
 12176                           
 12177                           ;incstack = 0
 12178                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 12179  1FD9  01F5               	clrf	i1___lwdiv@quotient
 12180  1FDA  01F6               	clrf	i1___lwdiv@quotient+1
 12181  1FDB  0870               	movf	i1___lwdiv@divisor,w
 12182  1FDC  0471               	iorwf	i1___lwdiv@divisor+1,w
 12183  1FDD  1903               	btfsc	3,2
 12184  1FDE  2FF9               	goto	i1l12516
 12185  1FDF  01F4               	clrf	i1___lwdiv@counter
 12186  1FE0                     L64:	
 12187  1FE0  0AF4               	incf	i1___lwdiv@counter,f
 12188  1FE1  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 12189  1FE2  2FE6               	goto	i1l12504
 12190  1FE3  35F0               	lslf	i1___lwdiv@divisor,f
 12191  1FE4  0DF1               	rlf	i1___lwdiv@divisor+1,f
 12192  1FE5  2FE0               	goto	L64
 12193  1FE6                     i1l12504:	
 12194  1FE6  35F5               	lslf	i1___lwdiv@quotient,f
 12195  1FE7  0DF6               	rlf	i1___lwdiv@quotient+1,f
 12196  1FE8  0871               	movf	i1___lwdiv@divisor+1,w
 12197  1FE9  0273               	subwf	i1___lwdiv@dividend+1,w
 12198  1FEA  1D03               	skipz
 12199  1FEB  2FEE               	goto	u1074_25
 12200  1FEC  0870               	movf	i1___lwdiv@divisor,w
 12201  1FED  0272               	subwf	i1___lwdiv@dividend,w
 12202  1FEE                     u1074_25:	
 12203  1FEE  1C03               	skipc
 12204  1FEF  2FF5               	goto	i1l12512
 12205  1FF0  0870               	movf	i1___lwdiv@divisor,w
 12206  1FF1  02F2               	subwf	i1___lwdiv@dividend,f
 12207  1FF2  0871               	movf	i1___lwdiv@divisor+1,w
 12208  1FF3  3BF3               	subwfb	i1___lwdiv@dividend+1,f
 12209  1FF4  1475               	bsf	i1___lwdiv@quotient,0
 12210  1FF5                     i1l12512:	
 12211  1FF5  36F1               	lsrf	i1___lwdiv@divisor+1,f
 12212  1FF6  0CF0               	rrf	i1___lwdiv@divisor,f
 12213  1FF7  0BF4               	decfsz	i1___lwdiv@counter,f
 12214  1FF8  2FE6               	goto	i1l12504
 12215  1FF9                     i1l12516:	
 12216  1FF9  0876               	movf	i1___lwdiv@quotient+1,w
 12217  1FFA  00F1               	movwf	?i1___lwdiv+1
 12218  1FFB  0875               	movf	i1___lwdiv@quotient,w
 12219  1FFC  00F0               	movwf	?i1___lwdiv
 12220  1FFD  0008               	return
 12221  1FFE                     __end_ofi1___lwdiv:	
 12222                           
 12223                           	psect	swtext1
 12224  06B0                     __pswtext1:	
 12225  06B0                     S14488:	
 12226  06B0  319A  2AFA         	ljmp	l5932
 12227  06B2  319A  2AFC         	ljmp	l5934
 12228  06B4  319A  2AFF         	ljmp	l5936
 12229  06B6  319B  2B01         	ljmp	l5938
 12230  06B8  319B  2B03         	ljmp	l5940
 12231  06BA  319B  2B05         	ljmp	l5942
 12232  06BC  319B  2B05         	ljmp	l5942
 12233  06BE  319B  2B05         	ljmp	l5942
 12234  06C0  319B  2B05         	ljmp	l5942
 12235  06C2  319B  2B05         	ljmp	l5942
 12236                           
 12237                           	psect	text8
 12238  041D                     __ptext8:	
 12239 ;; *************** function __ELINMIntInitialize *****************
 12240 ;; Defined at:
 12241 ;;		line 482 in file "../lin.c"
 12242 ;; Parameters:    Size  Location     Type
 12243 ;;		None
 12244 ;; Auto vars:     Size  Location     Type
 12245 ;;		None
 12246 ;; Return value:  Size  Location     Type
 12247 ;;                  1    wreg      unsigned char 
 12248 ;; Registers used:
 12249 ;;		wreg, status,2
 12250 ;; Tracked objects:
 12251 ;;		On entry : 1F/0
 12252 ;;		On exit  : 1F/0
 12253 ;;		Unchanged: 0/0
 12254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12255 ;;      Params:         0       0       0       0       0       0       0       0
 12256 ;;      Locals:         0       0       0       0       0       0       0       0
 12257 ;;      Temps:          0       0       0       0       0       0       0       0
 12258 ;;      Totals:         0       0       0       0       0       0       0       0
 12259 ;;Total ram usage:        0 bytes
 12260 ;; Hardware stack levels used:    1
 12261 ;; Hardware stack levels required when called:    3
 12262 ;; This function calls:
 12263 ;;		Nothing
 12264 ;; This function is called by:
 12265 ;;		_system_init
 12266 ;; This function uses a non-reentrant model
 12267 ;;
 12268                           
 12269                           
 12270                           ;psect for function __ELINMIntInitialize
 12271  041D                     __ELINMIntInitialize:	
 12272                           
 12273                           ;lin.c: 487: SPBRG = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)&0x00FF);
 12274                           
 12275                           ;incstack = 0
 12276                           ; Regs used in __ELINMIntInitialize: [wreg+status,2]
 12277  041D  309F               	movlw	159
 12278  041E  0023               	movlb	3	; select bank3
 12279  041F  009B               	movwf	27	;volatile
 12280                           
 12281                           ;lin.c: 488: SPBRGH = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)>>8);
 12282  0420  3001               	movlw	1
 12283  0421  009C               	movwf	28	;volatile
 12284                           
 12285                           ;lin.c: 489: TXSTA = 0x26;
 12286  0422  3026               	movlw	38
 12287  0423  009E               	movwf	30	;volatile
 12288                           
 12289                           ;lin.c: 490: RCSTA = 0x90;
 12290  0424  3090               	movlw	144
 12291  0425  009D               	movwf	29	;volatile
 12292                           
 12293                           ;lin.c: 491: BAUDCON = 0x48;
 12294  0426  3048               	movlw	72
 12295  0427  009F               	movwf	31	;volatile
 12296                           
 12297                           ;lin.c: 492: PIE1 = 0x00;
 12298  0428  0021               	movlb	1	; select bank1
 12299  0429  0191               	clrf	17	;volatile
 12300                           
 12301                           ;lin.c: 493: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
 12302  042A  0023               	movlb	3	; select bank3
 12303  042B  25A7               	fcall	PL66	;call to abstracted procedure
 12304                           
 12305                           ;lin.c: 494: _ELINMIntSpace = (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)/
      +                          2;
 12306  042C  0022               	movlb	2	; select bank2
 12307  042D  01DF               	clrf	__ELINMIntSpace^(0+256)
 12308                           
 12309                           ;lin.c: 495: _ELINMIntStatus.ELINMIntStatusByte = 0;
 12310  042E  0020               	movlb	0	; select bank0
 12311  042F  01E0               	clrf	__ELINMIntStatus
 12312                           
 12313                           ;lin.c: 496: _ELINMIntStatus1.ELINMIntStatusByte = 0;
 12314  0430  0021               	movlb	1	; select bank1
 12315  0431  01CF               	clrf	__ELINMIntStatus1^(0+128)
 12316                           
 12317                           ;lin.c: 497: _ELINMIntStatus.ELINMINTSTS.IDLE = 1;
 12318  0432  0020               	movlb	0	; select bank0
 12319  0433  15E0               	bsf	__ELINMIntStatus,3
 12320  0434  0008               	return
 12321  0435                     __end_of__ELINMIntInitialize:	
 12322  0435                     __ptext35:	
 12323 ;; *************** function __ELINMIntSendMessage *****************
 12324 ;; Defined at:
 12325 ;;		line 1178 in file "../lin.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;  _ELINM_idr      1    wreg     unsigned char 
 12328 ;;  _ELINM_size     1    5[BANK0 ] unsigned char 
 12329 ;;  _ELINM_fmin     2    6[BANK0 ] unsigned int 
 12330 ;;  _ELINM_fmax     2    8[BANK0 ] unsigned int 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  _ELINM_idr      1   10[BANK0 ] unsigned char 
 12333 ;;  _ELINM_chk      2   13[BANK0 ] unsigned int 
 12334 ;;  _ELINM_i        1   12[BANK0 ] unsigned char 
 12335 ;;  _ELINM_tid      1   11[BANK0 ] struct ELINMINT_ID
 12336 ;; Return value:  Size  Location     Type
 12337 ;;                  1    wreg      void 
 12338 ;; Registers used:
 12339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12340 ;; Tracked objects:
 12341 ;;		On entry : 1F/0
 12342 ;;		On exit  : 1F/0
 12343 ;;		Unchanged: 0/0
 12344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12345 ;;      Params:         0       5       0       0       0       0       0       0
 12346 ;;      Locals:         0       5       0       0       0       0       0       0
 12347 ;;      Temps:          0       0       0       0       0       0       0       0
 12348 ;;      Totals:         0      10       0       0       0       0       0       0
 12349 ;;Total ram usage:       10 bytes
 12350 ;; Hardware stack levels used:    1
 12351 ;; Hardware stack levels required when called:    4
 12352 ;; This function calls:
 12353 ;;		__ELINMIntCalcIDParity
 12354 ;; This function is called by:
 12355 ;;		_Transmit_LIN_8Bytes
 12356 ;;		__ELINMIntReceiveMessage
 12357 ;; This function uses a non-reentrant model
 12358 ;;
 12359                           
 12360                           
 12361                           ;psect for function __ELINMIntSendMessage
 12362  0435                     __ELINMIntSendMessage:	
 12363                           
 12364                           ;incstack = 0
 12365                           ; Regs used in __ELINMIntSendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12366                           ;__ELINMIntSendMessage@_ELINM_idr stored from wreg
 12367  0435  00AA               	movwf	__ELINMIntSendMessage@_ELINM_idr
 12368                           
 12369                           ;lin.c: 1186: char _ELINM_i;
 12370                           ;lin.c: 1187: ELINMINT_ID _ELINM_tid;
 12371                           ;lin.c: 1188: unsigned int _ELINM_chk;
 12372                           ;lin.c: 1191: _ELINM_tid.ID = _ELINM_idr;
 12373  0436  00AB               	movwf	__ELINMIntSendMessage@_ELINM_tid
 12374                           
 12375                           ;lin.c: 1192: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
 12376  0437  300F               	movlw	15
 12377  0438  05E0               	andwf	__ELINMIntStatus,f
 12378                           
 12379                           ;lin.c: 1194: _ELINMIntTHeaderMin = ( 34L * ( 100L * 1000000L / 19200L ) / 128L ) / 100;
 12380  0439  300D               	movlw	13
 12381  043A  0022               	movlb	2	; select bank2
 12382  043B  00AB               	movwf	__ELINMIntTHeaderMin^(0+256)
 12383  043C  3013               	movlw	19
 12384  043D  01AC               	clrf	(__ELINMIntTHeaderMin+1)^(0+256)
 12385                           
 12386                           ;lin.c: 1195: _ELINMIntTHeaderMax = ( ( ( ( 34L + 1 ) * 14L ) / 10L ) * ( 100L * 1000000
      +                          L / 19200L ) / 128L ) / 100;
 12387  043E  0023               	movlb	3	; select bank3
 12388  043F  00CC               	movwf	__ELINMIntTHeaderMax^(0+384)
 12389  0440  01CD               	clrf	(__ELINMIntTHeaderMax+1)^(0+384)
 12390                           
 12391                           ;lin.c: 1196: _ELINMIntTFrameMin = _ELINM_fmin;
 12392  0441  0020               	movlb	0	; select bank0
 12393  0442  0827               	movf	__ELINMIntSendMessage@_ELINM_fmin+1,w
 12394  0443  0022               	movlb	2	; select bank2
 12395  0444  00AE               	movwf	(__ELINMIntTFrameMin+1)^(0+256)
 12396  0445  0020               	movlb	0	; select bank0
 12397  0446  0826               	movf	__ELINMIntSendMessage@_ELINM_fmin,w
 12398  0447  0022               	movlb	2	; select bank2
 12399  0448  00AD               	movwf	__ELINMIntTFrameMin^(0+256)
 12400                           
 12401                           ;lin.c: 1197: _ELINMIntTFrameMax = _ELINM_fmax;
 12402  0449  0020               	movlb	0	; select bank0
 12403  044A  0829               	movf	__ELINMIntSendMessage@_ELINM_fmax+1,w
 12404  044B  0023               	movlb	3	; select bank3
 12405  044C  00CF               	movwf	(__ELINMIntTFrameMax+1)^(0+384)
 12406  044D  0020               	movlb	0	; select bank0
 12407  044E  0828               	movf	__ELINMIntSendMessage@_ELINM_fmax,w
 12408  044F  0023               	movlb	3	; select bank3
 12409  0450  00CE               	movwf	__ELINMIntTFrameMax^(0+384)
 12410                           
 12411                           ;lin.c: 1207: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
 12412  0451  0020               	movlb	0	; select bank0
 12413  0452  1DE0               	btfss	__ELINMIntStatus,3
 12414  0453  0008               	return
 12415                           
 12416                           ;lin.c: 1210: {
 12417                           ;lin.c: 1229: _ELINMIntMessageBuffer[ 0 ] = 0x55;
 12418  0454  3055               	movlw	85
 12419  0455  0024               	movlb	4	; select bank4
 12420  0456  00D0               	movwf	__ELINMIntMessageBuffer^(0+512)
 12421                           
 12422                           ;lin.c: 1230: _ELINMIntMessageBuffer[ 1 ] = _ELINMIntCalcIDParity( _ELINM_tid );
 12423  0457  0020               	movlb	0	; select bank0
 12424  0458  082B               	movf	__ELINMIntSendMessage@_ELINM_tid,w
 12425  0459  2499  3184         	fcall	__ELINMIntCalcIDParity
 12426  045B  0024               	movlb	4	; select bank4
 12427  045C  00D1               	movwf	(__ELINMIntMessageBuffer^(0+512)+1)
 12428                           
 12429                           ;lin.c: 1231: _ELINMIntMessageBufferPointer = 0;
 12430  045D  0021               	movlb	1	; select bank1
 12431  045E  01CC               	clrf	__ELINMIntMessageBufferPointer^(0+128)
 12432                           
 12433                           ;lin.c: 1238: if( _ELINMIntStatus.ELINMINTSTS.RX )
 12434  045F  0020               	movlb	0	; select bank0
 12435  0460  1CE0               	btfss	__ELINMIntStatus,1
 12436  0461  2C66               	goto	l12112
 12437                           
 12438                           ;lin.c: 1241: {
 12439                           ;lin.c: 1243: _ELINMIntMessageSize.SIZE = 2;
 12440  0462  3002               	movlw	2
 12441  0463  0021               	movlb	1	; select bank1
 12442  0464  00CE               	movwf	__ELINMIntMessageSize^(0+128)
 12443                           
 12444                           ;lin.c: 1246: }
 12445  0465  2C8A               	goto	l12128
 12446  0466                     l12112:	
 12447                           
 12448                           ;lin.c: 1249: else
 12449                           ;lin.c: 1250: {
 12450                           ;lin.c: 1252: _ELINMIntMessageSize.SIZE = _ELINM_size + 2;
 12451  0466  0825               	movf	__ELINMIntSendMessage@_ELINM_size,w
 12452  0467  3E02               	addlw	2
 12453  0468  0021               	movlb	1	; select bank1
 12454  0469  00CE               	movwf	__ELINMIntMessageSize^(0+128)
 12455                           
 12456                           ;lin.c: 1253: _ELINM_chk = 0;
 12457  046A  0020               	movlb	0	; select bank0
 12458  046B  3002               	movlw	2
 12459  046C  01AD               	clrf	__ELINMIntSendMessage@_ELINM_chk
 12460  046D  01AE               	clrf	__ELINMIntSendMessage@_ELINM_chk+1
 12461                           
 12462                           ;lin.c: 1256: for( _ELINM_i = 2;
 12463  046E  00AC               	movwf	__ELINMIntSendMessage@_ELINM_i
 12464  046F                     l12122:	
 12465                           ;lin.c: 1257: _ELINM_i < _ELINMIntMessageSize.SIZE;
 12466                           ;lin.c: 1258: _ELINM_i++ )
 12467                           
 12468  046F  0021               	movlb	1	; select bank1
 12469  0470  084E               	movf	__ELINMIntMessageSize^(0+128),w
 12470  0471  0020               	movlb	0	; select bank0
 12471  0472  022C               	subwf	__ELINMIntSendMessage@_ELINM_i,w
 12472  0473  1803               	btfsc	3,0
 12473  0474  2C7D               	goto	l12124
 12474                           
 12475                           ;lin.c: 1261: {
 12476                           ;lin.c: 1263: _ELINM_chk += _ELINMIntMessageBuffer[ _ELINM_i ];
 12477  0475  082C               	movf	__ELINMIntSendMessage@_ELINM_i,w
 12478  0476  25AE  3184         	fcall	PL106	;call to abstracted procedure
 12479  0478  07AD               	addwf	__ELINMIntSendMessage@_ELINM_chk,f
 12480  0479  1803               	skipnc
 12481  047A  0AAE               	incf	__ELINMIntSendMessage@_ELINM_chk+1,f
 12482  047B  0AAC               	incf	__ELINMIntSendMessage@_ELINM_i,f
 12483  047C  2C6F               	goto	l12122
 12484  047D                     l12124:	
 12485                           
 12486                           ;lin.c: 1266: }
 12487                           ;lin.c: 1269: _ELINMIntMessageBuffer[ _ELINMIntMessageSize.SIZE ]
 12488                           ;lin.c: 1270: = ( ~( _ELINM_chk + ( _ELINM_chk>>8 ) ) );
 12489  047D  0021               	movlb	1	; select bank1
 12490  047E  084E               	movf	__ELINMIntMessageSize^(0+128),w
 12491  047F  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
 12492  0480  0086               	movwf	6
 12493  0481  3002               	movlw	2	; select bank4/5
 12494  0482  0087               	movwf	7
 12495  0483  0020               	movlb	0	; select bank0
 12496  0484  082E               	movf	__ELINMIntSendMessage@_ELINM_chk+1,w
 12497  0485  072D               	addwf	__ELINMIntSendMessage@_ELINM_chk,w
 12498  0486  3AFF               	xorlw	255
 12499  0487  0081               	movwf	1
 12500                           
 12501                           ;lin.c: 1271: _ELINMIntMessageSize.SIZE++;
 12502  0488  0021               	movlb	1	; select bank1
 12503  0489  0ACE               	incf	__ELINMIntMessageSize^(0+128),f
 12504  048A                     l12128:	
 12505                           
 12506                           ;lin.c: 1274: }
 12507                           ;lin.c: 1277: SENDB = 1;
 12508  048A  0023               	movlb	3	; select bank3
 12509  048B  159E               	bsf	30,3	;volatile
 12510                           
 12511                           ;lin.c: 1278: TXREG = 0xFF;
 12512  048C  30FF               	movlw	255
 12513  048D  009A               	movwf	26	;volatile
 12514                           
 12515                           ;lin.c: 1279: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
 12516  048E  300F               	movlw	15
 12517  048F  0020               	movlb	0	; select bank0
 12518  0490  05E0               	andwf	__ELINMIntStatus,f
 12519                           
 12520                           ;lin.c: 1280: _ELINMIntStatus.ELINMINTSTS.TX = 1;
 12521  0491  1460               	bsf	__ELINMIntStatus,0
 12522                           
 12523                           ;lin.c: 1281: _ELINMIntStatus1.ELINMINTSTS.HEADER = 1;
 12524  0492  0021               	movlb	1	; select bank1
 12525  0493  14CF               	bsf	__ELINMIntStatus1^(0+128),1
 12526                           
 12527                           ;lin.c: 1282: _ELINMIntStatus1.ELINMINTSTS.FRAME = 1;
 12528  0494  154F               	bsf	__ELINMIntStatus1^(0+128),2
 12529                           
 12530                           ;lin.c: 1283: _ELINMIntReadBack = 0x00;
 12531  0495  01CD               	clrf	__ELINMIntReadBack^(0+128)
 12532                           
 12533                           ;lin.c: 1284: _ELINMIntStatus.ELINMINTSTS.IDLE = 0;
 12534  0496  0020               	movlb	0	; select bank0
 12535  0497  11E0               	bcf	__ELINMIntStatus,3
 12536  0498  0008               	return
 12537  0499                     __end_of__ELINMIntSendMessage:	
 12538  0499                     __ptext36:	
 12539 ;; *************** function __ELINMIntCalcIDParity *****************
 12540 ;; Defined at:
 12541 ;;		line 1048 in file "../lin.c"
 12542 ;; Parameters:    Size  Location     Type
 12543 ;;  ELINM_idtr      1    wreg     struct ELINMINT_ID
 12544 ;; Auto vars:     Size  Location     Type
 12545 ;;  ELINM_idtr      1    4[BANK0 ] struct ELINMINT_ID
 12546 ;; Return value:  Size  Location     Type
 12547 ;;                  1    wreg      unsigned char 
 12548 ;; Registers used:
 12549 ;;		wreg, status,2, status,0
 12550 ;; Tracked objects:
 12551 ;;		On entry : 1F/0
 12552 ;;		On exit  : 1F/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12555 ;;      Params:         0       0       0       0       0       0       0       0
 12556 ;;      Locals:         0       1       0       0       0       0       0       0
 12557 ;;      Temps:          0       0       0       0       0       0       0       0
 12558 ;;      Totals:         0       1       0       0       0       0       0       0
 12559 ;;Total ram usage:        1 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    3
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		__ELINMIntSendMessage
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           
 12570                           ;psect for function __ELINMIntCalcIDParity
 12571  0499                     __ELINMIntCalcIDParity:	
 12572                           
 12573                           ;incstack = 0
 12574                           ; Regs used in __ELINMIntCalcIDParity: [wreg+status,2+status,0]
 12575                           ;__ELINMIntCalcIDParity@ELINM_idtr stored from wreg
 12576  0499  00A4               	movwf	__ELINMIntCalcIDParity@ELINM_idtr
 12577                           
 12578                           ;lin.c: 1053: ELINM_idtr.ID &= 0x3F;
 12579  049A  303F               	movlw	63
 12580  049B  05A4               	andwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12581                           
 12582                           ;lin.c: 1056: if( ELINM_idtr.IDbits.ID0)
 12583  049C  1C24               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,0
 12584  049D  2CA0               	goto	l1011
 12585                           
 12586                           ;lin.c: 1059: {
 12587                           ;lin.c: 1061: ELINM_idtr.ID ^= 0x40;
 12588  049E  3040               	movlw	64
 12589  049F  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12590  04A0                     l1011:	
 12591                           
 12592                           ;lin.c: 1064: }
 12593                           ;lin.c: 1067: if( ELINM_idtr.IDbits.ID1 )
 12594  04A0  1CA4               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
 12595  04A1  2CA4               	goto	l1012
 12596                           
 12597                           ;lin.c: 1070: {
 12598                           ;lin.c: 1072: ELINM_idtr.ID ^= 0x40;
 12599  04A2  3040               	movlw	64
 12600  04A3  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12601  04A4                     l1012:	
 12602                           
 12603                           ;lin.c: 1075: }
 12604                           ;lin.c: 1078: if( ELINM_idtr.IDbits.ID2 )
 12605  04A4  1D24               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,2
 12606  04A5  2CA8               	goto	l1013
 12607                           
 12608                           ;lin.c: 1081: {
 12609                           ;lin.c: 1083: ELINM_idtr.ID ^= 0x40;
 12610  04A6  3040               	movlw	64
 12611  04A7  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12612  04A8                     l1013:	
 12613                           
 12614                           ;lin.c: 1086: }
 12615                           ;lin.c: 1089: if( ELINM_idtr.IDbits.ID4 )
 12616  04A8  1E24               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
 12617  04A9  2CAC               	goto	l1014
 12618                           
 12619                           ;lin.c: 1092: {
 12620                           ;lin.c: 1094: ELINM_idtr.ID ^= 0x40;
 12621  04AA  3040               	movlw	64
 12622  04AB  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12623  04AC                     l1014:	
 12624                           
 12625                           ;lin.c: 1097: }
 12626                           ;lin.c: 1100: ELINM_idtr.IDbits.ID7 = 1;
 12627  04AC  17A4               	bsf	__ELINMIntCalcIDParity@ELINM_idtr,7
 12628                           
 12629                           ;lin.c: 1103: if( ELINM_idtr.IDbits.ID1 )
 12630  04AD  1CA4               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
 12631  04AE  2CB1               	goto	l1015
 12632                           
 12633                           ;lin.c: 1106: {
 12634                           ;lin.c: 1108: ELINM_idtr.ID ^= 0x80;
 12635  04AF  3080               	movlw	128
 12636  04B0  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12637  04B1                     l1015:	
 12638                           
 12639                           ;lin.c: 1111: }
 12640                           ;lin.c: 1114: if( ELINM_idtr.IDbits.ID3 )
 12641  04B1  1DA4               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,3
 12642  04B2  2CB5               	goto	l1016
 12643                           
 12644                           ;lin.c: 1117: {
 12645                           ;lin.c: 1119: ELINM_idtr.ID ^= 0x80;
 12646  04B3  3080               	movlw	128
 12647  04B4  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12648  04B5                     l1016:	
 12649                           
 12650                           ;lin.c: 1122: }
 12651                           ;lin.c: 1125: if( ELINM_idtr.IDbits.ID4 )
 12652  04B5  1E24               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
 12653  04B6  2CB9               	goto	l1017
 12654                           
 12655                           ;lin.c: 1128: {
 12656                           ;lin.c: 1130: ELINM_idtr.ID ^= 0x80;
 12657  04B7  3080               	movlw	128
 12658  04B8  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12659  04B9                     l1017:	
 12660                           
 12661                           ;lin.c: 1133: }
 12662                           ;lin.c: 1136: if( ELINM_idtr.IDbits.ID5 )
 12663  04B9  1EA4               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,5
 12664  04BA  2CBD               	goto	l1018
 12665                           
 12666                           ;lin.c: 1139: {
 12667                           ;lin.c: 1141: ELINM_idtr.ID ^= 0x80;
 12668  04BB  3080               	movlw	128
 12669  04BC  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 12670  04BD                     l1018:	
 12671                           
 12672                           ;lin.c: 1144: }
 12673                           ;lin.c: 1147: return ( ( BYTE )ELINM_idtr.ID );
 12674  04BD  0824               	movf	__ELINMIntCalcIDParity@ELINM_idtr,w
 12675  04BE  0008               	return
 12676  04BF                     __end_of__ELINMIntCalcIDParity:	
 12677  04BF                     __ptext60:	
 12678 ;; *************** function _ELINMIntHandler *****************
 12679 ;; Defined at:
 12680 ;;		line 555 in file "../lin.c"
 12681 ;; Parameters:    Size  Location     Type
 12682 ;;		None
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;		None
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      void 
 12687 ;; Registers used:
 12688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12689 ;; Tracked objects:
 12690 ;;		On entry : 1F/0
 12691 ;;		On exit  : 1C/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12694 ;;      Params:         0       0       0       0       0       0       0       0
 12695 ;;      Locals:         0       0       0       0       0       0       0       0
 12696 ;;      Temps:          0       0       0       0       0       0       0       0
 12697 ;;      Totals:         0       0       0       0       0       0       0       0
 12698 ;;Total ram usage:        0 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:    1
 12701 ;; This function calls:
 12702 ;;		__ELINMIntResetProtocol
 12703 ;; This function is called by:
 12704 ;;		_interrupt_handler
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           
 12709                           ;psect for function _ELINMIntHandler
 12710  04BF                     _ELINMIntHandler:	
 12711                           
 12712                           ;lin.c: 560: if( SENDB == 0)
 12713                           
 12714                           ;incstack = 0
 12715                           ; Regs used in _ELINMIntHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12716  04BF  0023               	movlb	3	; select bank3
 12717  04C0  199E               	btfsc	30,3	;volatile
 12718  04C1  2D43               	goto	i1l8174
 12719                           
 12720                           ;lin.c: 563: {
 12721                           ;lin.c: 565: if( RCIF)
 12722  04C2  0020               	movlb	0	; select bank0
 12723  04C3  1E91               	btfss	17,5	;volatile
 12724  04C4  2D43               	goto	i1l8174
 12725                           
 12726                           ;lin.c: 568: {
 12727                           ;lin.c: 572: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
 12728  04C5  1DE0               	btfss	__ELINMIntStatus,3
 12729  04C6  2CDB               	goto	i1l964
 12730                           
 12731                           ;lin.c: 575: {
 12732                           ;lin.c: 577: if( ( RCSTA & 0x06 ) == 0)
 12733  04C7  0023               	movlb	3	; select bank3
 12734  04C8  081D               	movf	29,w	;volatile
 12735  04C9  3906               	andlw	6
 12736  04CA  1D03               	btfss	3,2
 12737  04CB  2D43               	goto	i1l8174
 12738                           
 12739                           ;lin.c: 580: {
 12740                           ;lin.c: 584: if( RCREG == 0x80)
 12741  04CC  3080               	movlw	128
 12742  04CD  0619               	xorwf	25,w	;volatile
 12743  04CE  1D03               	btfss	3,2
 12744  04CF  2D43               	goto	i1l8174
 12745                           
 12746                           ;lin.c: 587: {
 12747                           ;lin.c: 589: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
 12748  04D0  25A7  3184         	fcall	PL66	;call to abstracted procedure
 12749                           
 12750                           ;lin.c: 590: _ELINMIntReadBack = RCREG;
 12751  04D2  0819               	movf	25,w	;volatile
 12752  04D3  0021               	movlb	1	; select bank1
 12753  04D4  00CD               	movwf	__ELINMIntReadBack^(0+128)
 12754                           
 12755                           ;lin.c: 593: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT)
 12756  04D5  1ECF               	btfss	__ELINMIntStatus1^(0+128),5
 12757  04D6  2CD9               	goto	i1l967
 12758                           
 12759                           ;lin.c: 596: {
 12760                           ;lin.c: 598: _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT = 0;
 12761  04D7  12CF               	bcf	__ELINMIntStatus1^(0+128),5
 12762                           
 12763                           ;lin.c: 601: }
 12764  04D8  2D43               	goto	i1l8174
 12765  04D9                     i1l967:	
 12766                           
 12767                           ;lin.c: 604: else
 12768                           ;lin.c: 605: {
 12769                           ;lin.c: 607: _ELINMIntStatus1.ELINMINTSTS.WAKEUP = 1;
 12770  04D9  144F               	bsf	__ELINMIntStatus1^(0+128),0
 12771  04DA  2D43               	goto	i1l8174
 12772  04DB                     i1l964:	
 12773                           
 12774                           ;lin.c: 623: else
 12775                           ;lin.c: 624: {
 12776                           ;lin.c: 626: if( _ELINMIntStatus.ELINMINTSTS.TX)
 12777  04DB  1C60               	btfss	__ELINMIntStatus,0
 12778  04DC  2D16               	goto	i1l970
 12779                           
 12780                           ;lin.c: 629: {
 12781                           ;lin.c: 633: if( ( RCSTA & 0x06 ) && _ELINMIntMessageBufferPointer)
 12782  04DD  0023               	movlb	3	; select bank3
 12783  04DE  081D               	movf	29,w	;volatile
 12784  04DF  3906               	andlw	6
 12785  04E0  1903               	btfsc	3,2
 12786  04E1  2CE6               	goto	i1l8122
 12787  04E2  0021               	movlb	1	; select bank1
 12788  04E3  084C               	movf	__ELINMIntMessageBufferPointer^(0+128),w
 12789  04E4  1D03               	btfss	3,2
 12790  04E5  2D1D               	goto	i1l8154
 12791  04E6                     i1l8122:	
 12792                           ;lin.c: 642: }
 12793                           
 12794                           ;lin.c: 636: {
 12795                           ;lin.c: 638: _ELINMIntResetProtocol(
 12796                           ;lin.c: 639: 0x08 + 0x04 + 0x70 );
 12797                           
 12798                           
 12799                           ;lin.c: 645: else
 12800                           ;lin.c: 646: {
 12801                           ;lin.c: 651: if( _ELINMIntMessageBufferPointer == 2)
 12802  04E6  3002               	movlw	2
 12803  04E7  0021               	movlb	1	; select bank1
 12804  04E8  064C               	xorwf	__ELINMIntMessageBufferPointer^(0+128),w
 12805  04E9  1903               	btfsc	3,2
 12806                           
 12807                           ;lin.c: 654: {
 12808                           ;lin.c: 656: _ELINMIntStatus1.ELINMINTSTS.HEADER = 0;
 12809  04EA  10CF               	bcf	__ELINMIntStatus1^(0+128),1
 12810                           
 12811                           ;lin.c: 659: }
 12812                           ;lin.c: 662: if( _ELINMIntSpace)
 12813  04EB  0022               	movlb	2	; select bank2
 12814  04EC  085F               	movf	__ELINMIntSpace^(0+256),w
 12815  04ED  1903               	btfsc	3,2
 12816  04EE  2CF1               	goto	i1l8130
 12817                           
 12818                           ;lin.c: 665: {
 12819                           ;lin.c: 667: _ELINMIntSpace--;
 12820  04EF  03DF               	decf	__ELINMIntSpace^(0+256),f
 12821                           
 12822                           ;lin.c: 670: }
 12823  04F0  2D43               	goto	i1l8174
 12824  04F1                     i1l8130:	
 12825                           
 12826                           ;lin.c: 673: else
 12827                           ;lin.c: 674: {
 12828                           ;lin.c: 676: if( _ELINMIntReadBack != RCREG)
 12829  04F1  0021               	movlb	1	; select bank1
 12830  04F2  084D               	movf	__ELINMIntReadBack^(0+128),w
 12831  04F3  0023               	movlb	3	; select bank3
 12832  04F4  0619               	xorwf	25,w	;volatile
 12833  04F5  1903               	skipnz
 12834  04F6  2CF9               	goto	i1l8134
 12835                           
 12836                           ;lin.c: 679: {
 12837                           ;lin.c: 681: _ELINMIntResetProtocol(0x08 + 0x04 + 0x60 );
 12838  04F7  306C               	movlw	108
 12839  04F8  2D41               	goto	L65
 12840  04F9                     i1l8134:	
 12841                           ;lin.c: 684: }
 12842                           
 12843                           
 12844                           ;lin.c: 687: else
 12845                           ;lin.c: 688: {
 12846                           ;lin.c: 693: if( _ELINMIntMessageSize.SIZE)
 12847  04F9  0021               	movlb	1	; select bank1
 12848  04FA  084E               	movf	__ELINMIntMessageSize^(0+128),w
 12849  04FB  1903               	btfsc	3,2
 12850  04FC  2D0C               	goto	i1l978
 12851                           
 12852                           ;lin.c: 696: {
 12853                           ;lin.c: 698: _ELINMIntReadBack = RCREG;
 12854  04FD  0023               	movlb	3	; select bank3
 12855  04FE  0819               	movf	25,w	;volatile
 12856  04FF  0021               	movlb	1	; select bank1
 12857  0500  00CD               	movwf	__ELINMIntReadBack^(0+128)
 12858                           
 12859                           ;lin.c: 699: _ELINMIntReadBack = _ELINMIntMessageBuffer[ _ELINMIntMessageBufferPointer ]
      +                          ;
 12860  0501  084C               	movf	__ELINMIntMessageBufferPointer^(0+128),w
 12861  0502  25AE  3184         	fcall	PL106	;call to abstracted procedure
 12862  0504  00CD               	movwf	__ELINMIntReadBack^(0+128)
 12863                           
 12864                           ;lin.c: 700: TXREG = _ELINMIntReadBack; _ELINMIntMessageSize.SIZE--;
 12865  0505  0023               	movlb	3	; select bank3
 12866  0506  009A               	movwf	26	;volatile
 12867  0507  0021               	movlb	1	; select bank1
 12868  0508  03CE               	decf	__ELINMIntMessageSize^(0+128),f
 12869  0509                     i1l8144:	
 12870                           
 12871                           ;lin.c: 702: _ELINMIntSpace += (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)
      +                          /2;
 12872  0509  0021               	movlb	1	; select bank1
 12873  050A  0ACC               	incf	__ELINMIntMessageBufferPointer^(0+128),f
 12874                           
 12875                           ;lin.c: 705: }
 12876  050B  2D43               	goto	i1l8174
 12877  050C                     i1l978:	
 12878                           
 12879                           ;lin.c: 708: else
 12880                           ;lin.c: 709: {
 12881                           ;lin.c: 714: if( _ELINMIntStatus.ELINMINTSTS.RX)
 12882  050C  0020               	movlb	0	; select bank0
 12883  050D  1CE0               	btfss	__ELINMIntStatus,1
 12884  050E  2D13               	goto	i1l980
 12885                           
 12886                           ;lin.c: 717: {
 12887                           ;lin.c: 719: _ELINMIntStatus.ELINMINTSTS.TX = 0;
 12888  050F  1060               	bcf	__ELINMIntStatus,0
 12889                           
 12890                           ;lin.c: 720: _ELINMIntMessageBufferPointer = 0;
 12891  0510  0021               	movlb	1	; select bank1
 12892  0511  01CC               	clrf	__ELINMIntMessageBufferPointer^(0+128)
 12893                           
 12894                           ;lin.c: 723: }
 12895  0512  2D43               	goto	i1l8174
 12896  0513                     i1l980:	
 12897                           
 12898                           ;lin.c: 726: else
 12899                           ;lin.c: 727: {
 12900                           ;lin.c: 732: _ELINMIntStatus1.ELINMINTSTS.FRAME = 0;
 12901  0513  0021               	movlb	1	; select bank1
 12902  0514  114F               	bcf	__ELINMIntStatus1^(0+128),2
 12903  0515  2D40               	goto	i1l8172
 12904  0516                     i1l970:	
 12905                           ;lin.c: 733: _ELINMIntResetProtocol( 0x08 );
 12906                           
 12907                           
 12908                           ;lin.c: 755: else
 12909                           ;lin.c: 756: {
 12910                           ;lin.c: 758: if( _ELINMIntStatus.ELINMINTSTS.RX)
 12911  0516  1CE0               	btfss	__ELINMIntStatus,1
 12912  0517  2D43               	goto	i1l8174
 12913                           
 12914                           ;lin.c: 761: {
 12915                           ;lin.c: 765: if( RCSTA & 0x06)
 12916  0518  0023               	movlb	3	; select bank3
 12917  0519  081D               	movf	29,w	;volatile
 12918  051A  3906               	andlw	6
 12919  051B  1903               	btfsc	3,2
 12920  051C  2D1F               	goto	i1l8156
 12921  051D                     i1l8154:	
 12922                           
 12923                           ;lin.c: 768: {
 12924                           ;lin.c: 770: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x70 );
 12925  051D  307C               	movlw	124
 12926  051E  2D41               	goto	L65
 12927  051F                     i1l8156:	
 12928                           ;lin.c: 773: }
 12929                           
 12930                           
 12931                           ;lin.c: 776: else
 12932                           ;lin.c: 777: {
 12933                           ;lin.c: 779: if( _ELINMIntRXMessageSize.SIZE)
 12934  051F  0022               	movlb	2	; select bank2
 12935  0520  0860               	movf	__ELINMIntRXMessageSize^(0+256),w
 12936  0521  1903               	btfsc	3,2
 12937  0522  2D37               	goto	i1l8168
 12938                           
 12939                           ;lin.c: 782: {
 12940                           ;lin.c: 784: _ELINMIntMessageBuffer [ _ELINMIntMessageBufferPointer ] = RCREG;
 12941  0523  0021               	movlb	1	; select bank1
 12942  0524  084C               	movf	__ELINMIntMessageBufferPointer^(0+128),w
 12943  0525  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
 12944  0526  0086               	movwf	6
 12945  0527  3002               	movlw	2	; select bank4/5
 12946  0528  0087               	movwf	7
 12947  0529  0023               	movlb	3	; select bank3
 12948  052A  0819               	movf	25,w	;volatile
 12949  052B  0081               	movwf	1
 12950                           
 12951                           ;lin.c: 785: _ELINMIntRXMessageSize.SIZE--;
 12952  052C  0022               	movlb	2	; select bank2
 12953  052D  03E0               	decf	__ELINMIntRXMessageSize^(0+256),f
 12954                           
 12955                           ;lin.c: 786: _ELINMIntRXCRC.CRC += RCREG;
 12956  052E  0023               	movlb	3	; select bank3
 12957  052F  0819               	movf	25,w	;volatile
 12958  0530  07D0               	addwf	__ELINMIntRXCRC^(0+384),f
 12959  0531  1803               	skipnc
 12960  0532  0AD1               	incf	(__ELINMIntRXCRC+1)^(0+384),f
 12961                           
 12962                           ;lin.c: 789: if( _ELINMIntRXCRC.CRCbits.CRC8)
 12963  0533  1C51               	btfss	(__ELINMIntRXCRC^(0+384)+1),0
 12964  0534  2D09               	goto	i1l8144
 12965                           
 12966                           ;lin.c: 792: {
 12967                           ;lin.c: 794: _ELINMIntRXCRC.CRCL++;
 12968  0535  0AD0               	incf	__ELINMIntRXCRC^(0+384),f
 12969  0536  2D09               	goto	i1l8144
 12970  0537                     i1l8168:	
 12971                           
 12972                           ;lin.c: 813: _ELINMIntRXCRC.CRCL += RCREG + 1;
 12973  0537  0023               	movlb	3	; select bank3
 12974  0538  0819               	movf	25,w	;volatile
 12975  0539  3E01               	addlw	1
 12976  053A  07D0               	addwf	__ELINMIntRXCRC^(0+384),f
 12977                           
 12978                           ;lin.c: 816: if( _ELINMIntRXCRC.CRCL )
 12979  053B  0850               	movf	__ELINMIntRXCRC^(0+384),w
 12980  053C  1903               	btfsc	3,2
 12981  053D  2D40               	goto	i1l8172
 12982                           
 12983                           ;lin.c: 819: {
 12984                           ;lin.c: 821: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x50 );
 12985  053E  305C               	movlw	92
 12986  053F  2D41               	goto	L65
 12987  0540                     i1l8172:	
 12988                           ;lin.c: 824: }
 12989                           
 12990                           
 12991                           ;lin.c: 827: else
 12992                           ;lin.c: 828: {
 12993                           ;lin.c: 830: _ELINMIntResetProtocol( 0x08 );
 12994  0540  3008               	movlw	8
 12995  0541                     L65:	
 12996  0541  2598  3184         	fcall	__ELINMIntResetProtocol
 12997  0543                     i1l8174:	
 12998                           
 12999                           ;lin.c: 833: }
 13000                           ;lin.c: 836: }
 13001                           ;lin.c: 839: }
 13002                           ;lin.c: 843: }
 13003                           ;lin.c: 846: }
 13004                           ;lin.c: 849: }
 13005                           ;lin.c: 853: }
 13006                           ;lin.c: 856: }
 13007                           ;lin.c: 859: if( _ELINMIntStatus.ELINMINTSTS.IDLE == 0 )
 13008  0543  0020               	movlb	0	; select bank0
 13009  0544  19E0               	btfsc	__ELINMIntStatus,3
 13010  0545  2D84               	goto	i1l991
 13011                           
 13012                           ;lin.c: 862: {
 13013                           ;lin.c: 866: if( _ELINMIntStatus1.ELINMINTSTS.FRAME == 1)
 13014  0546  0021               	movlb	1	; select bank1
 13015  0547  1D4F               	btfss	__ELINMIntStatus1^(0+128),2
 13016  0548  2D7D               	goto	i1l8204
 13017                           
 13018                           ;lin.c: 869: {
 13019                           ;lin.c: 871: if( _ELINMIntStatus1.ELINMINTSTS.HEADER == 1)
 13020  0549  1CCF               	btfss	__ELINMIntStatus1^(0+128),1
 13021  054A  2D60               	goto	i1l8190
 13022                           
 13023                           ;lin.c: 874: {
 13024                           ;lin.c: 876: if( _ELINMIntTHeaderMin)
 13025  054B  0022               	movlb	2	; select bank2
 13026  054C  082B               	movf	__ELINMIntTHeaderMin^(0+256),w
 13027  054D  042C               	iorwf	(__ELINMIntTHeaderMin+1)^(0+256),w
 13028  054E  1903               	btfsc	3,2
 13029  054F  2D54               	goto	i1l8184
 13030                           
 13031                           ;lin.c: 879: {
 13032                           ;lin.c: 881: _ELINMIntTHeaderMin--;
 13033  0550  3001               	movlw	1
 13034  0551  02AB               	subwf	__ELINMIntTHeaderMin^(0+256),f
 13035  0552  3000               	movlw	0
 13036  0553  3BAC               	subwfb	(__ELINMIntTHeaderMin+1)^(0+256),f
 13037  0554                     i1l8184:	
 13038                           
 13039                           ;lin.c: 884: }
 13040                           ;lin.c: 887: if( _ELINMIntTHeaderMax)
 13041  0554  0023               	movlb	3	; select bank3
 13042  0555  084C               	movf	__ELINMIntTHeaderMax^(0+384),w
 13043  0556  044D               	iorwf	(__ELINMIntTHeaderMax+1)^(0+384),w
 13044  0557  1903               	btfsc	3,2
 13045  0558  2D5E               	goto	i1l8188
 13046                           
 13047                           ;lin.c: 890: {
 13048                           ;lin.c: 892: _ELINMIntTHeaderMax--;
 13049  0559  3001               	movlw	1
 13050  055A  02CC               	subwf	__ELINMIntTHeaderMax^(0+384),f
 13051  055B  3000               	movlw	0
 13052  055C  3BCD               	subwfb	(__ELINMIntTHeaderMax+1)^(0+384),f
 13053                           
 13054                           ;lin.c: 895: }
 13055  055D  2D68               	goto	i1l8194
 13056  055E                     i1l8188:	
 13057                           
 13058                           ;lin.c: 898: else
 13059                           ;lin.c: 899: {
 13060                           ;lin.c: 902: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x20 );
 13061  055E  302C               	movlw	44
 13062  055F  2D66               	goto	L66
 13063  0560                     i1l8190:	
 13064                           
 13065                           ;lin.c: 911: else
 13066                           ;lin.c: 912: {
 13067                           ;lin.c: 917: if( _ELINMIntTHeaderMin)
 13068  0560  0022               	movlb	2	; select bank2
 13069  0561  082B               	movf	__ELINMIntTHeaderMin^(0+256),w
 13070  0562  042C               	iorwf	(__ELINMIntTHeaderMin+1)^(0+256),w
 13071  0563  1903               	btfsc	3,2
 13072  0564  2D68               	goto	i1l8194
 13073                           
 13074                           ;lin.c: 920: {
 13075                           ;lin.c: 922: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x10 );
 13076  0565  301C               	movlw	28
 13077  0566                     L66:	
 13078  0566  2598  3184         	fcall	__ELINMIntResetProtocol
 13079  0568                     i1l8194:	
 13080                           
 13081                           ;lin.c: 925: }
 13082                           ;lin.c: 928: }
 13083                           ;lin.c: 931: if( _ELINMIntTFrameMin)
 13084  0568  0022               	movlb	2	; select bank2
 13085  0569  082D               	movf	__ELINMIntTFrameMin^(0+256),w
 13086  056A  042E               	iorwf	(__ELINMIntTFrameMin+1)^(0+256),w
 13087  056B  1903               	btfsc	3,2
 13088  056C  2D71               	goto	i1l8198
 13089                           
 13090                           ;lin.c: 934: {
 13091                           ;lin.c: 936: _ELINMIntTFrameMin--;
 13092  056D  3001               	movlw	1
 13093  056E  02AD               	subwf	__ELINMIntTFrameMin^(0+256),f
 13094  056F  3000               	movlw	0
 13095  0570  3BAE               	subwfb	(__ELINMIntTFrameMin+1)^(0+256),f
 13096  0571                     i1l8198:	
 13097                           
 13098                           ;lin.c: 939: }
 13099                           ;lin.c: 942: if( _ELINMIntTFrameMax)
 13100  0571  0023               	movlb	3	; select bank3
 13101  0572  084E               	movf	__ELINMIntTFrameMax^(0+384),w
 13102  0573  044F               	iorwf	(__ELINMIntTFrameMax+1)^(0+384),w
 13103  0574  1903               	btfsc	3,2
 13104  0575  2D7B               	goto	i1l8202
 13105                           
 13106                           ;lin.c: 945: {
 13107                           ;lin.c: 947: _ELINMIntTFrameMax--;
 13108  0576  3001               	movlw	1
 13109  0577  02CE               	subwf	__ELINMIntTFrameMax^(0+384),f
 13110  0578  3000               	movlw	0
 13111  0579  3BCF               	subwfb	(__ELINMIntTFrameMax+1)^(0+384),f
 13112                           
 13113                           ;lin.c: 950: }
 13114  057A  0008               	return
 13115  057B                     i1l8202:	
 13116                           
 13117                           ;lin.c: 953: else
 13118                           ;lin.c: 954: {
 13119                           ;lin.c: 957: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x40 );
 13120  057B  304C               	movlw	76
 13121  057C  2D98               	ljmp	__ELINMIntResetProtocol
 13122  057D                     i1l8204:	
 13123                           
 13124                           ;lin.c: 966: else
 13125                           ;lin.c: 967: {
 13126                           ;lin.c: 972: if( _ELINMIntTFrameMin)
 13127  057D  0022               	movlb	2	; select bank2
 13128  057E  082D               	movf	__ELINMIntTFrameMin^(0+256),w
 13129  057F  042E               	iorwf	(__ELINMIntTFrameMin+1)^(0+256),w
 13130  0580  1903               	btfsc	3,2
 13131  0581  0008               	return
 13132                           
 13133                           ;lin.c: 975: {
 13134                           ;lin.c: 977: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x30 );
 13135  0582  303C               	movlw	60
 13136  0583  2D98               	ljmp	__ELINMIntResetProtocol
 13137  0584                     i1l991:	
 13138                           
 13139                           ;lin.c: 990: else
 13140                           ;lin.c: 991: {
 13141                           ;lin.c: 993: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT == 0)
 13142  0584  0021               	movlb	1	; select bank1
 13143  0585  1ACF               	btfsc	__ELINMIntStatus1^(0+128),5
 13144  0586  0008               	return
 13145                           
 13146                           ;lin.c: 996: {
 13147                           ;lin.c: 998: if( _ELINMIntSleepTimeout)
 13148  0587  0023               	movlb	3	; select bank3
 13149  0588  0841               	movf	(__ELINMIntSleepTimeout+3)^(0+384),w
 13150  0589  0440               	iorwf	(__ELINMIntSleepTimeout+2)^(0+384),w
 13151  058A  043F               	iorwf	(__ELINMIntSleepTimeout+1)^(0+384),w
 13152  058B  043E               	iorwf	__ELINMIntSleepTimeout^(0+384),w
 13153  058C  1903               	skipnz
 13154  058D  2D95               	goto	i1l1006
 13155                           
 13156                           ;lin.c: 1001: {
 13157                           ;lin.c: 1003: _ELINMIntSleepTimeout--;
 13158  058E  3001               	movlw	1
 13159  058F  02BE               	subwf	__ELINMIntSleepTimeout^(0+384),f
 13160  0590  3000               	movlw	0
 13161  0591  3BBF               	subwfb	(__ELINMIntSleepTimeout+1)^(0+384),f
 13162  0592  3BC0               	subwfb	(__ELINMIntSleepTimeout+2)^(0+384),f
 13163  0593  3BC1               	subwfb	(__ELINMIntSleepTimeout+3)^(0+384),f
 13164                           
 13165                           ;lin.c: 1006: }
 13166  0594  0008               	return
 13167  0595                     i1l1006:	
 13168                           
 13169                           ;lin.c: 1009: else
 13170                           ;lin.c: 1010: {
 13171                           ;lin.c: 1012: _ELINMIntStatus1.ELINMINTSTS.SLEEP_TIMEOUT = 1;
 13172  0595  0021               	movlb	1	; select bank1
 13173  0596  174F               	bsf	__ELINMIntStatus1^(0+128),6
 13174  0597  0008               	return
 13175  0598                     __end_of_ELINMIntHandler:	
 13176  0598                     __ptext61:	
 13177 ;; *************** function __ELINMIntResetProtocol *****************
 13178 ;; Defined at:
 13179 ;;		line 524 in file "../lin.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;  code            1    wreg     unsigned char 
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;  code            1    0[COMMON] unsigned char 
 13184 ;; Return value:  Size  Location     Type
 13185 ;;                  1    wreg      void 
 13186 ;; Registers used:
 13187 ;;		wreg, status,2
 13188 ;; Tracked objects:
 13189 ;;		On entry : 1C/1
 13190 ;;		On exit  : 1F/3
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13193 ;;      Params:         0       0       0       0       0       0       0       0
 13194 ;;      Locals:         1       0       0       0       0       0       0       0
 13195 ;;      Temps:          0       0       0       0       0       0       0       0
 13196 ;;      Totals:         1       0       0       0       0       0       0       0
 13197 ;;Total ram usage:        1 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; This function calls:
 13200 ;;		Nothing
 13201 ;; This function is called by:
 13202 ;;		_ELINMIntHandler
 13203 ;; This function uses a non-reentrant model
 13204 ;;
 13205                           
 13206                           
 13207                           ;psect for function __ELINMIntResetProtocol
 13208  0598                     __ELINMIntResetProtocol:	
 13209                           
 13210                           ;incstack = 0
 13211                           ; Regs used in __ELINMIntResetProtocol: [wreg+status,2]
 13212                           ;__ELINMIntResetProtocol@code stored from wreg
 13213  0598  00F0               	movwf	__ELINMIntResetProtocol@code
 13214                           
 13215                           ;lin.c: 529: _ELINMIntReadBack = RCREG;
 13216  0599  0023               	movlb	3	; select bank3
 13217  059A  0819               	movf	25,w	;volatile
 13218  059B  0021               	movlb	1	; select bank1
 13219  059C  00CD               	movwf	__ELINMIntReadBack^(0+128)
 13220                           
 13221                           ;lin.c: 530: _ELINMIntStatus1.ELINMIntStatusByte = 0;
 13222  059D  01CF               	clrf	__ELINMIntStatus1^(0+128)
 13223                           
 13224                           ;lin.c: 531: _ELINMIntRXCRC.CRC = 0;
 13225  059E  0023               	movlb	3	; select bank3
 13226  059F  01D0               	clrf	__ELINMIntRXCRC^(0+384)
 13227  05A0  01D1               	clrf	(__ELINMIntRXCRC+1)^(0+384)
 13228                           
 13229                           ;lin.c: 532: _ELINMIntStatus.ELINMIntStatusByte = code;
 13230  05A1  0870               	movf	__ELINMIntResetProtocol@code,w
 13231  05A2  0020               	movlb	0	; select bank0
 13232  05A3  00E0               	movwf	__ELINMIntStatus
 13233                           
 13234                           ;lin.c: 533: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
 13235  05A4  0023               	movlb	3	; select bank3
 13236  05A5  25A7               	fcall	PL66	;call to abstracted procedure
 13237  05A6  0008               	return
 13238  05A7                     __end_of__ELINMIntResetProtocol:	
 13239  007E                     btemp	set	126	;btemp
 13240  007E                     int$flags	set	126
 13241  007E                     wtemp0	set	126
 13242  05A7                     PL66:	
 13243  05A7  3027               	movlw	39
 13244  05A8  01C1               	clrf	(__ELINMIntSleepTimeout+3)^(0+384)
 13245  05A9  01C0               	clrf	(__ELINMIntSleepTimeout+2)^(0+384)
 13246  05AA  00BF               	movwf	(__ELINMIntSleepTimeout+1)^(0+384)
 13247  05AB  30BB               	movlw	187
 13248  05AC  00BE               	movwf	__ELINMIntSleepTimeout^(0+384)
 13249  05AD  0008               	return
 13250  05AE                     __end_ofPL66:	
 13251  05AE                     PL106:	
 13252  05AE  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
 13253  05AF  0086               	movwf	6
 13254  05B0  3002               	movlw	2	; select bank4/5
 13255  05B1  0087               	movwf	7
 13256  05B2  0801               	movf	1,w
 13257  05B3  0008               	return
 13258  05B4                     __end_ofPL106:	
 13259                           
 13260                           	psect	text9
 13261  05B4                     __ptext9:	
 13262 ;; *************** function _PWM_Capture_init *****************
 13263 ;; Defined at:
 13264 ;;		line 78 in file "../pwm.c"
 13265 ;; Parameters:    Size  Location     Type
 13266 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
 13267 ;; Auto vars:     Size  Location     Type
 13268 ;;  ui8_CCP_Nb      1    4[BANK0 ] unsigned char 
 13269 ;; Return value:  Size  Location     Type
 13270 ;;                  1    wreg      void 
 13271 ;; Registers used:
 13272 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13273 ;; Tracked objects:
 13274 ;;		On entry : 16/1
 13275 ;;		On exit  : 18/0
 13276 ;;		Unchanged: 0/0
 13277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13278 ;;      Params:         0       0       0       0       0       0       0       0
 13279 ;;      Locals:         0       1       0       0       0       0       0       0
 13280 ;;      Temps:          0       0       0       0       0       0       0       0
 13281 ;;      Totals:         0       1       0       0       0       0       0       0
 13282 ;;Total ram usage:        1 bytes
 13283 ;; Hardware stack levels used:    1
 13284 ;; Hardware stack levels required when called:    3
 13285 ;; This function calls:
 13286 ;;		Nothing
 13287 ;; This function is called by:
 13288 ;;		_system_init
 13289 ;; This function uses a non-reentrant model
 13290 ;;
 13291                           
 13292                           
 13293                           ;psect for function _PWM_Capture_init
 13294  05B4                     _PWM_Capture_init:	
 13295                           
 13296                           ;incstack = 0
 13297                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
 13298                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
 13299  05B4  0020               	movlb	0	; select bank0
 13300  05B5  00A4               	movwf	PWM_Capture_init@ui8_CCP_Nb
 13301                           
 13302                           ;pwm.c: 83: ui8_PWMinDC_sav = 0;
 13303  05B6  0021               	movlb	1	; select bank1
 13304  05B7  01C6               	clrf	_ui8_PWMinDC_sav^(0+128)
 13305                           
 13306                           ;pwm.c: 84: ui8_PWMin_failCnt = 0;
 13307  05B8  0022               	movlb	2	; select bank2
 13308  05B9  01D2               	clrf	_ui8_PWMin_failCnt^(0+256)
 13309                           
 13310                           ;pwm.c: 93: switch( ui8_CCP_Nb )
 13311  05BA  0020               	movlb	0	; select bank0
 13312  05BB  0824               	movf	PWM_Capture_init@ui8_CCP_Nb,w
 13313                           
 13314                           ; Switch size 1, requested type "space"
 13315                           ; Number of cases is 5, Range of values is 1 to 5
 13316                           ; switch strategies available:
 13317                           ; Name         Instructions Cycles
 13318                           ; simple_byte           16     9 (average)
 13319                           ; direct_byte           19     9 (fixed)
 13320                           ; jumptable            263     9 (fixed)
 13321                           ;	Chosen strategy is simple_byte
 13322  05BC  3A01               	xorlw	1	; case 1
 13323  05BD  1903               	skipnz
 13324  05BE  2DCC               	goto	l6658
 13325  05BF  3A03               	xorlw	3	; case 2
 13326  05C0  1903               	skipnz
 13327  05C1  2DD8               	goto	l6666
 13328  05C2  3A01               	xorlw	1	; case 3
 13329  05C3  1903               	skipnz
 13330  05C4  2DE4               	goto	l6674
 13331  05C5  3A07               	xorlw	7	; case 4
 13332  05C6  1903               	skipnz
 13333  05C7  2DF0               	goto	l6682
 13334  05C8  3A01               	xorlw	1	; case 5
 13335  05C9  1903               	skipnz
 13336  05CA  2DFC               	goto	l6690
 13337  05CB  2E05               	goto	l1366
 13338  05CC                     l6658:	
 13339                           
 13340                           ;pwm.c: 99: {
 13341                           ;pwm.c: 101: CCP1CON = 0x00;
 13342  05CC  0025               	movlb	5	; select bank5
 13343  05CD  0193               	clrf	19	;volatile
 13344                           
 13345                           ;pwm.c: 102: CCPR1L = 0x00;
 13346  05CE  0191               	clrf	17	;volatile
 13347                           
 13348                           ;pwm.c: 103: CCPR1H = 0x00;
 13349  05CF  0192               	clrf	18	;volatile
 13350                           
 13351                           ;pwm.c: 104: CCP1IE = 1;
 13352  05D0  0021               	movlb	1	; select bank1
 13353  05D1  1511               	bsf	17,2	;volatile
 13354                           
 13355                           ;pwm.c: 105: CCP1IF = 0;
 13356  05D2  0020               	movlb	0	; select bank0
 13357  05D3  1111               	bcf	17,2	;volatile
 13358                           
 13359                           ;pwm.c: 106: CCP1CON = 0x05;
 13360  05D4  3005               	movlw	5
 13361  05D5  0025               	movlb	5	; select bank5
 13362  05D6  0093               	movwf	19	;volatile
 13363                           
 13364                           ;pwm.c: 107: break;
 13365  05D7  0008               	return
 13366  05D8                     l6666:	
 13367                           
 13368                           ;pwm.c: 114: {
 13369                           ;pwm.c: 116: CCP2CON = 0x00;
 13370  05D8  0025               	movlb	5	; select bank5
 13371  05D9  019A               	clrf	26	;volatile
 13372                           
 13373                           ;pwm.c: 117: CCPR2L = 0x00;
 13374  05DA  0198               	clrf	24	;volatile
 13375                           
 13376                           ;pwm.c: 118: CCPR2H = 0x00;
 13377  05DB  0199               	clrf	25	;volatile
 13378                           
 13379                           ;pwm.c: 119: CCP2IE = 1;
 13380  05DC  0021               	movlb	1	; select bank1
 13381  05DD  1412               	bsf	18,0	;volatile
 13382                           
 13383                           ;pwm.c: 120: CCP2IF = 0;
 13384  05DE  0020               	movlb	0	; select bank0
 13385  05DF  1012               	bcf	18,0	;volatile
 13386                           
 13387                           ;pwm.c: 121: CCP2CON = 0x05;
 13388  05E0  3005               	movlw	5
 13389  05E1  0025               	movlb	5	; select bank5
 13390  05E2  009A               	movwf	26	;volatile
 13391                           
 13392                           ;pwm.c: 122: break;
 13393  05E3  0008               	return
 13394  05E4                     l6674:	
 13395                           
 13396                           ;pwm.c: 129: {
 13397                           ;pwm.c: 131: CCP3CON = 0x00;
 13398  05E4  0026               	movlb	6	; select bank6
 13399  05E5  0193               	clrf	19	;volatile
 13400                           
 13401                           ;pwm.c: 132: CCPR3L = 0x00;
 13402  05E6  0191               	clrf	17	;volatile
 13403                           
 13404                           ;pwm.c: 133: CCPR3H = 0x00;
 13405  05E7  0192               	clrf	18	;volatile
 13406                           
 13407                           ;pwm.c: 134: CCP3IE = 1;
 13408  05E8  0021               	movlb	1	; select bank1
 13409  05E9  1613               	bsf	19,4	;volatile
 13410                           
 13411                           ;pwm.c: 135: CCP3IF = 0;
 13412  05EA  0020               	movlb	0	; select bank0
 13413  05EB  1213               	bcf	19,4	;volatile
 13414                           
 13415                           ;pwm.c: 136: CCP3CON = 0x05;
 13416  05EC  3005               	movlw	5
 13417  05ED  0026               	movlb	6	; select bank6
 13418  05EE  0093               	movwf	19	;volatile
 13419                           
 13420                           ;pwm.c: 137: break;
 13421  05EF  0008               	return
 13422  05F0                     l6682:	
 13423                           
 13424                           ;pwm.c: 144: {
 13425                           ;pwm.c: 146: CCP4CON = 0x00;
 13426  05F0  0026               	movlb	6	; select bank6
 13427  05F1  019A               	clrf	26	;volatile
 13428                           
 13429                           ;pwm.c: 147: CCPR4L = 0x00;
 13430  05F2  0198               	clrf	24	;volatile
 13431                           
 13432                           ;pwm.c: 148: CCPR4H = 0x00;
 13433  05F3  0199               	clrf	25	;volatile
 13434                           
 13435                           ;pwm.c: 149: CCP4IE = 1;
 13436  05F4  0021               	movlb	1	; select bank1
 13437  05F5  1693               	bsf	19,5	;volatile
 13438                           
 13439                           ;pwm.c: 150: CCP4IF = 0;
 13440  05F6  0020               	movlb	0	; select bank0
 13441  05F7  1293               	bcf	19,5	;volatile
 13442                           
 13443                           ;pwm.c: 151: CCP4CON = 0x05;
 13444  05F8  3005               	movlw	5
 13445  05F9  0026               	movlb	6	; select bank6
 13446  05FA  009A               	movwf	26	;volatile
 13447                           
 13448                           ;pwm.c: 152: break;
 13449  05FB  0008               	return
 13450  05FC                     l6690:	
 13451                           
 13452                           ;pwm.c: 159: {
 13453                           ;pwm.c: 161: CCP5CON = 0x00;
 13454  05FC  0026               	movlb	6	; select bank6
 13455  05FD  019E               	clrf	30	;volatile
 13456                           
 13457                           ;pwm.c: 162: CCPR5L = 0x00;
 13458  05FE  019C               	clrf	28	;volatile
 13459                           
 13460                           ;pwm.c: 163: CCPR5H = 0x00;
 13461  05FF  019D               	clrf	29	;volatile
 13462                           
 13463                           ;pwm.c: 164: CCP5IE = 1;
 13464  0600  0021               	movlb	1	; select bank1
 13465  0601  1713               	bsf	19,6	;volatile
 13466                           
 13467                           ;pwm.c: 165: CCP5IF = 0;
 13468  0602  0020               	movlb	0	; select bank0
 13469  0603  1313               	bcf	19,6	;volatile
 13470                           
 13471                           ;pwm.c: 166: CCP5CON = 0x05;
 13472                           
 13473                           ;pwm.c: 167: break;
 13474  0604  2E5B               	ljmp	PL128	;call to abstracted procedure
 13475  0605                     l1366:	
 13476  0605  0008               	return
 13477  0606                     __end_of_PWM_Capture_init:	
 13478  0606                     __ptext50:	
 13479 ;; *************** function _interrupt_PWMCapture *****************
 13480 ;; Defined at:
 13481 ;;		line 438 in file "../pwm.c"
 13482 ;; Parameters:    Size  Location     Type
 13483 ;;		None
 13484 ;; Auto vars:     Size  Location     Type
 13485 ;;		None
 13486 ;; Return value:  Size  Location     Type
 13487 ;;                  1    wreg      void 
 13488 ;; Registers used:
 13489 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13490 ;; Tracked objects:
 13491 ;;		On entry : 1F/0
 13492 ;;		On exit  : 1B/2
 13493 ;;		Unchanged: 0/0
 13494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13495 ;;      Params:         0       0       0       0       0       0       0       0
 13496 ;;      Locals:         0       0       0       0       0       0       0       0
 13497 ;;      Temps:          0       0       0       0       0       0       0       0
 13498 ;;      Totals:         0       0       0       0       0       0       0       0
 13499 ;;Total ram usage:        0 bytes
 13500 ;; Hardware stack levels used:    1
 13501 ;; This function calls:
 13502 ;;		Nothing
 13503 ;; This function is called by:
 13504 ;;		_interrupt_handler
 13505 ;; This function uses a non-reentrant model
 13506 ;;
 13507                           
 13508                           
 13509                           ;psect for function _interrupt_PWMCapture
 13510  0606                     _interrupt_PWMCapture:	
 13511                           
 13512                           ;pwm.c: 450: switch( ui8_Pulse_State )
 13513                           
 13514                           ;incstack = 0
 13515                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
 13516  0606  2E48               	goto	i1l8228
 13517  0607                     i1l1385:	
 13518                           ;pwm.c: 452: {
 13519                           ;pwm.c: 454: case 0:
 13520                           
 13521                           
 13522                           ;pwm.c: 456: {
 13523                           ;pwm.c: 460: ui8_Pulse_State = 1;
 13524                           
 13525                           ;pwm.c: 461: ui16_Capt_Val0.b.lo = CCPR5L;
 13526  0607  2655  3185         	fcall	PL102	;call to abstracted procedure
 13527  0609  00AC               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 13528                           
 13529                           ;pwm.c: 462: ui16_Capt_Val0.b.hi = CCPR5H;
 13530  060A  0026               	movlb	6	; select bank6
 13531  060B  081D               	movf	29,w	;volatile
 13532  060C  0021               	movlb	1	; select bank1
 13533  060D  00AD               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
 13534                           
 13535                           ;pwm.c: 463: CCP5CON = 0x04;
 13536                           
 13537                           ;pwm.c: 464: break;
 13538  060E  2E5F               	ljmp	PL132	;call to abstracted procedure
 13539  060F                     i1l8216:	
 13540                           
 13541                           ;pwm.c: 472: {
 13542                           ;pwm.c: 476: ui8_Pulse_State = 2;
 13543  060F  3002               	movlw	2
 13544  0610  00D4               	movwf	_ui8_Pulse_State^(0+256)
 13545                           
 13546                           ;pwm.c: 477: ui16_Capt_Val1.b.lo = CCPR5L;
 13547  0611  0026               	movlb	6	; select bank6
 13548  0612  081C               	movf	28,w	;volatile
 13549  0613  0021               	movlb	1	; select bank1
 13550  0614  00AA               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
 13551                           
 13552                           ;pwm.c: 478: ui16_Capt_Val1.b.hi = CCPR5H;
 13553  0615  0026               	movlb	6	; select bank6
 13554  0616  081D               	movf	29,w	;volatile
 13555  0617  0021               	movlb	1	; select bank1
 13556  0618  00AB               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
 13557                           
 13558                           ;pwm.c: 479: CCP5CON = 0x05;
 13559                           
 13560                           ;pwm.c: 480: break;
 13561  0619  2E5B               	ljmp	PL128	;call to abstracted procedure
 13562  061A                     i1l1388:	
 13563                           ;pwm.c: 483: }
 13564                           ;pwm.c: 486: case 2:
 13565                           
 13566                           
 13567                           ;pwm.c: 488: {
 13568                           ;pwm.c: 492: ui8_Pulse_State = 1;
 13569                           
 13570                           ;pwm.c: 493: ui16_Capt_Val2.b.lo = CCPR5L;
 13571  061A  2655  3185         	fcall	PL102	;call to abstracted procedure
 13572  061C  00A8               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
 13573                           
 13574                           ;pwm.c: 494: ui16_Capt_Val2.b.hi = CCPR5H;
 13575  061D  0026               	movlb	6	; select bank6
 13576  061E  081D               	movf	29,w	;volatile
 13577  061F  0021               	movlb	1	; select bank1
 13578  0620  00A9               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
 13579                           
 13580                           ;pwm.c: 495: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
 13581  0621  0829               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 13582  0622  0022               	movlb	2	; select bank2
 13583  0623  00A8               	movwf	(_ui16_PWM_Freq_In+1)^(0+256)
 13584  0624  0021               	movlb	1	; select bank1
 13585  0625  0828               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 13586  0626  0022               	movlb	2	; select bank2
 13587  0627  00A7               	movwf	_ui16_PWM_Freq_In^(0+256)
 13588  0628  0021               	movlb	1	; select bank1
 13589  0629  082C               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
 13590  062A  0022               	movlb	2	; select bank2
 13591  062B  02A7               	subwf	_ui16_PWM_Freq_In^(0+256),f
 13592  062C  0021               	movlb	1	; select bank1
 13593  062D  082D               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 13594  062E  0022               	movlb	2	; select bank2
 13595  062F  3BA8               	subwfb	(_ui16_PWM_Freq_In+1)^(0+256),f
 13596                           
 13597                           ;pwm.c: 496: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
 13598  0630  0021               	movlb	1	; select bank1
 13599  0631  082B               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
 13600  0632  0022               	movlb	2	; select bank2
 13601  0633  00E2               	movwf	(_ui16_Duty_Cycle_In+1)^(0+256)
 13602  0634  0021               	movlb	1	; select bank1
 13603  0635  082A               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
 13604  0636  0022               	movlb	2	; select bank2
 13605  0637  00E1               	movwf	_ui16_Duty_Cycle_In^(0+256)
 13606  0638  0021               	movlb	1	; select bank1
 13607  0639  082C               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
 13608  063A  0022               	movlb	2	; select bank2
 13609  063B  02E1               	subwf	_ui16_Duty_Cycle_In^(0+256),f
 13610  063C  0021               	movlb	1	; select bank1
 13611  063D  082D               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 13612  063E  0022               	movlb	2	; select bank2
 13613  063F  3BE2               	subwfb	(_ui16_Duty_Cycle_In+1)^(0+256),f
 13614                           
 13615                           ;pwm.c: 497: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
 13616  0640  0021               	movlb	1	; select bank1
 13617  0641  0829               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 13618  0642  00AD               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
 13619  0643  0828               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 13620  0644  00AC               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 13621                           
 13622                           ;pwm.c: 498: CCP5CON = 0x04;
 13623  0645  2E5F               	ljmp	PL132	;call to abstracted procedure
 13624  0646                     i1l8224:	
 13625                           
 13626                           ;pwm.c: 526: {
 13627                           ;pwm.c: 530: ui8_Pulse_State = 0;
 13628  0646  01D4               	clrf	_ui8_Pulse_State^(0+256)
 13629                           
 13630                           ;pwm.c: 531: break;
 13631  0647  0008               	return
 13632  0648                     i1l8228:	
 13633  0648  0022               	movlb	2	; select bank2
 13634  0649  0854               	movf	_ui8_Pulse_State^(0+256),w
 13635                           
 13636                           ; Switch size 1, requested type "space"
 13637                           ; Number of cases is 3, Range of values is 0 to 2
 13638                           ; switch strategies available:
 13639                           ; Name         Instructions Cycles
 13640                           ; simple_byte           10     6 (average)
 13641                           ; direct_byte           12     6 (fixed)
 13642                           ; jumptable            260     6 (fixed)
 13643                           ;	Chosen strategy is simple_byte
 13644  064A  3A00               	xorlw	0	; case 0
 13645  064B  1903               	skipnz
 13646  064C  2E07               	goto	i1l1385
 13647  064D  3A01               	xorlw	1	; case 1
 13648  064E  1903               	skipnz
 13649  064F  2E0F               	goto	i1l8216
 13650  0650  3A03               	xorlw	3	; case 2
 13651  0651  1903               	skipnz
 13652  0652  2E1A               	goto	i1l1388
 13653  0653  2E46               	goto	i1l8224
 13654  0654  0008               	return
 13655  0655                     __end_of_interrupt_PWMCapture:	
 13656  0655                     PL102:	
 13657  0655  01D4               	clrf	_ui8_Pulse_State^(0+256)
 13658  0656  0AD4               	incf	_ui8_Pulse_State^(0+256),f
 13659  0657  0026               	movlb	6	; select bank6
 13660  0658  081C               	movf	28,w	;volatile
 13661  0659  0021               	movlb	1	; select bank1
 13662  065A  0008               	return
 13663  065B                     __end_ofPL102:	
 13664  065B                     PL128:	
 13665  065B  3005               	movlw	5
 13666  065C  0026               	movlb	6	; select bank6
 13667  065D  009E               	movwf	30	;volatile
 13668  065E  0008               	return
 13669  065F                     __end_ofPL128:	
 13670  065F                     PL132:	
 13671  065F  3004               	movlw	4
 13672  0660  0026               	movlb	6	; select bank6
 13673  0661  009E               	movwf	30	;volatile
 13674  0662  0008               	return
 13675  0663                     __end_ofPL132:	
 13676                           
 13677                           	psect	text22
 13678  0663                     __ptext22:	
 13679 ;; *************** function _FILTER_Temp *****************
 13680 ;; Defined at:
 13681 ;;		line 400 in file "../adc.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;		None
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;		None
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  1    wreg      void 
 13688 ;; Registers used:
 13689 ;;		wreg, status,2, status,0
 13690 ;; Tracked objects:
 13691 ;;		On entry : 1F/3
 13692 ;;		On exit  : 1F/3
 13693 ;;		Unchanged: 0/0
 13694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13695 ;;      Params:         0       0       0       0       0       0       0       0
 13696 ;;      Locals:         0       0       0       0       0       0       0       0
 13697 ;;      Temps:          0       2       0       0       0       0       0       0
 13698 ;;      Totals:         0       2       0       0       0       0       0       0
 13699 ;;Total ram usage:        2 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; Hardware stack levels required when called:    3
 13702 ;; This function calls:
 13703 ;;		Nothing
 13704 ;; This function is called by:
 13705 ;;		_Get_Analog_Value
 13706 ;; This function uses a non-reentrant model
 13707 ;;
 13708                           
 13709                           
 13710                           ;psect for function _FILTER_Temp
 13711  0663                     _FILTER_Temp:	
 13712  0663                     l6388:	
 13713                           ;incstack = 0
 13714                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
 13715                           
 13716                           
 13717                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
 13718  0663  0864               	movf	_ui16_NTC_Temp_bldc^(0+384),w
 13719  0664  07DC               	addwf	_filterTempNTC^(0+384),f
 13720  0665  0865               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
 13721  0666  3DDD               	addwfc	(_filterTempNTC+1)^(0+384),f
 13722                           
 13723                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
 13724  0667  085D               	movf	(_filterTempNTC+1)^(0+384),w
 13725  0668  0020               	movlb	0	; select bank0
 13726  0669  00A5               	movwf	??_FILTER_Temp+1
 13727  066A  0023               	movlb	3	; select bank3
 13728  066B  085C               	movf	_filterTempNTC^(0+384),w
 13729  066C  0020               	movlb	0	; select bank0
 13730  066D  00A4               	movwf	??_FILTER_Temp
 13731  066E  3006               	movlw	6
 13732  066F                     u3595:	
 13733  066F  36A5               	lsrf	??_FILTER_Temp+1,f
 13734  0670  0CA4               	rrf	??_FILTER_Temp,f
 13735  0671  0B89               	decfsz	9,f
 13736  0672  2E6F               	goto	u3595
 13737  0673  0824               	movf	??_FILTER_Temp,w
 13738  0674  0022               	movlb	2	; select bank2
 13739  0675  00B5               	movwf	_ui16_NTC_Temp_bldc_mean^(0+256)
 13740  0676  0020               	movlb	0	; select bank0
 13741  0677  0825               	movf	??_FILTER_Temp+1,w
 13742  0678  0022               	movlb	2	; select bank2
 13743  0679  00B6               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256)
 13744                           
 13745                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
 13746  067A  0835               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
 13747  067B  0023               	movlb	3	; select bank3
 13748  067C  02DC               	subwf	_filterTempNTC^(0+384),f
 13749  067D  0022               	movlb	2	; select bank2
 13750  067E  0836               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
 13751  067F  0023               	movlb	3	; select bank3
 13752  0680  3BDD               	subwfb	(_filterTempNTC+1)^(0+384),f
 13753                           
 13754                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
 13755  0681  0862               	movf	_ui16_Temp_cal^(0+384),w
 13756  0682  0022               	movlb	2	; select bank2
 13757  0683  0735               	addwf	_ui16_NTC_Temp_bldc_mean^(0+256),w
 13758  0684  0023               	movlb	3	; select bank3
 13759  0685  00DA               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
 13760  0686  0863               	movf	(_ui16_Temp_cal+1)^(0+384),w
 13761  0687  0022               	movlb	2	; select bank2
 13762  0688  3D36               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
 13763  0689  0023               	movlb	3	; select bank3
 13764  068A  00DB               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
 13765  068B  0008               	return
 13766  068C                     __end_of_FILTER_Temp:	
 13767                           
 13768                           	psect	text41
 13769  1084                     __ptext41:	
 13770 ;; *************** function _BVH2_Appl_Layer *****************
 13771 ;; Defined at:
 13772 ;;		line 331 in file "../T_Link/BVH2_Appl_Layer.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;		None
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;  Sb3_Sum1        2   28[BANK4 ] short 
 13777 ;;  Sb3_Product1    2   15[BANK4 ] unsigned short 
 13778 ;;  Sb4_PI_sum      2   30[BANK4 ] short 
 13779 ;;  Sb2_Switch2     2   25[BANK4 ] unsigned short 
 13780 ;;  Sb2_Error       2   23[BANK4 ] short 
 13781 ;;  Sb2_Switch5     2   17[BANK4 ] unsigned short 
 13782 ;;  Sb1_Logical_    1   27[BANK4 ] unsigned char 
 13783 ;;  Sb2_Logical_    1   22[BANK4 ] unsigned char 
 13784 ;;  Sb1_Logical_    1   21[BANK4 ] unsigned char 
 13785 ;;  Sb1_Logical_    1   20[BANK4 ] unsigned char 
 13786 ;;  Cb24_Reset      1   19[BANK4 ] unsigned char 
 13787 ;;  Sb1_Logical_    1    8[BANK4 ] unsigned char 
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  1    wreg      void 
 13790 ;; Registers used:
 13791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13792 ;; Tracked objects:
 13793 ;;		On entry : 1F/1
 13794 ;;		On exit  : 1F/2
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13797 ;;      Params:         0       0       0       0       0       0       0       0
 13798 ;;      Locals:         0       0       0       0       0      32       0       0
 13799 ;;      Temps:          0       6       0       0       0       0       0       0
 13800 ;;      Totals:         0       6       0       0       0      32       0       0
 13801 ;;Total ram usage:       38 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    4
 13804 ;; This function calls:
 13805 ;;		_Cb1_Current_An___High_node_fcn1
 13806 ;;		_Cb34_PWM_Detection_node_fcn1
 13807 ;;		_Cb44_Pic_etat_monitor_node_fcn1
 13808 ;;		_Cb56_UbatHandling_node_fcn2
 13809 ;;		___aldiv
 13810 ;;		___lmul
 13811 ;;		___wmul
 13812 ;; This function is called by:
 13813 ;;		_main
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817                           
 13818                           ;psect for function _BVH2_Appl_Layer
 13819  1084                     _BVH2_Appl_Layer:	
 13820                           
 13821                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;
 13822                           ;BVH2_Appl_Layer.c: 335: static UInt16 Cb19_Counter = 0;
 13823                           ;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;
 13824                           ;BVH2_Appl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;
 13825                           ;BVH2_Appl_Layer.c: 338: static UInt8 Cb24_RestartCounter = 0;
 13826                           ;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;
 13827                           ;BVH2_Appl_Layer.c: 340: static UInt8 Cb9_StateCnt = 0;
 13828                           ;BVH2_Appl_Layer.c: 342: static struct tag_SIBFS_Current_Analysis_low_ SIBFS_Current_Ana
      +                          lysis_low_b = {
 13829                           ;BVH2_Appl_Layer.c: 343: 0 ,
 13830                           
 13831                           ;incstack = 0
 13832                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13833  1084  28C3               	goto	l13520
 13834  1085                     l13460:	
 13835                           
 13836                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
 13837  1085  3000               	movlw	0
 13838  1086  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 13839  1087  3033               	movlw	51
 13840  1088                     L21:	
 13841  1088  1903               	skipnz
 13842  1089  0224               	subwf	_Cb44_StateCnt^(0+128),w
 13843  108A  1C03               	skipc
 13844  108B  2896               	goto	l13468
 13845                           
 13846                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
 13847  108C  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13848  108D  39F8               	andlw	-8
 13849  108E  3805               	iorlw	5
 13850  108F  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13851                           
 13852                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
 13853  1090  0022               	movlb	2	; select bank2
 13854  1091  01C9               	clrf	_Cb44_oShutoff^(0+256)
 13855  1092                     l13466:	
 13856                           
 13857                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
 13858  1092  0021               	movlb	1	; select bank1
 13859  1093  01A4               	clrf	_Cb44_StateCnt^(0+128)
 13860  1094  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
 13861                           
 13862                           ;BVH2_Appl_Layer.c: 422: }
 13863  1095  28D8               	goto	l13522
 13864  1096                     l13468:	
 13865                           
 13866                           ;BVH2_Appl_Layer.c: 423: else {
 13867                           ;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 1 ;
 13868  1096  0021               	movlb	1	; select bank1
 13869  1097  0824               	movf	_Cb44_StateCnt^(0+128),w
 13870  1098  3E01               	addlw	1
 13871  1099  00A4               	movwf	_Cb44_StateCnt^(0+128)
 13872  109A  3000               	movlw	0
 13873  109B  3D25               	addwfc	(_Cb44_StateCnt+1)^(0+128),w
 13874  109C  00A5               	movwf	(_Cb44_StateCnt+1)^(0+128)
 13875  109D  28D8               	goto	l13522
 13876  109E                     l13470:	
 13877                           
 13878                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
 13879  109E  262F  3190         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
 13880                           
 13881                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
 13882  10A0  0C43               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13883  10A1  27E5  3190         	fcall	PL96	;call to abstracted procedure
 13884  10A3  1D03               	btfss	3,2
 13885  10A4  2896               	goto	l13468
 13886  10A5  28D8               	goto	l13522
 13887  10A6                     l13476:	
 13888                           
 13889                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
 13890  10A6  262F  3190         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
 13891                           
 13892                           ;BVH2_Appl_Layer.c: 445: break;
 13893  10A8  28D8               	goto	l13522
 13894  10A9                     l13478:	
 13895                           
 13896                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
 13897  10A9  3000               	movlw	0
 13898  10AA  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 13899  10AB  3010               	movlw	16
 13900  10AC  2888               	goto	L21
 13901  10AD                     l13494:	
 13902                           
 13903                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
 13904  10AD  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13905  10AE  39F8               	andlw	-8
 13906  10AF  3803               	iorlw	3
 13907  10B0  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13908                           
 13909                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
 13910  10B1  0022               	movlb	2	; select bank2
 13911  10B2  01C9               	clrf	_Cb44_oShutoff^(0+256)
 13912                           
 13913                           ;BVH2_Appl_Layer.c: 484: }
 13914  10B3  28D8               	goto	l13522
 13915  10B4                     l13508:	
 13916                           
 13917                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
 13918  10B4  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13919  10B5  39F8               	andlw	-8
 13920  10B6  3806               	iorlw	6
 13921  10B7  28C1               	goto	L22
 13922  10B8                     l1577:	
 13923                           ;BVH2_Appl_Layer.c: 515: }
 13924                           ;BVH2_Appl_Layer.c: 516: default: {
 13925                           
 13926                           
 13927                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
 13928  10B8  1AC3               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
 13929  10B9  28D8               	goto	l13522
 13930                           
 13931                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
 13932  10BA  16C3               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
 13933                           
 13934                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
 13935  10BB  086F               	movf	_ui8_ResetMatlab^(0+128),w
 13936  10BC  1903               	btfsc	3,2
 13937  10BD  28D8               	goto	l13522
 13938                           
 13939                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
 13940  10BE  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13941  10BF  39F8               	andlw	-8
 13942  10C0  3804               	iorlw	4
 13943  10C1                     L22:	
 13944  10C1  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13945  10C2  2892               	goto	l13466
 13946  10C3                     l13520:	
 13947  10C3  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13948  10C4  3907               	andlw	7
 13949                           
 13950                           ; Switch size 1, requested type "space"
 13951                           ; Number of cases is 6, Range of values is 1 to 6
 13952                           ; switch strategies available:
 13953                           ; Name         Instructions Cycles
 13954                           ; simple_byte           19    10 (average)
 13955                           ; direct_byte           21     9 (fixed)
 13956                           ; jumptable            263     9 (fixed)
 13957                           ;	Chosen strategy is simple_byte
 13958  10C5  3A01               	xorlw	1	; case 1
 13959  10C6  1903               	skipnz
 13960  10C7  28B4               	goto	l13508
 13961  10C8  3A03               	xorlw	3	; case 2
 13962  10C9  1903               	skipnz
 13963  10CA  28AD               	goto	l13494
 13964  10CB  3A01               	xorlw	1	; case 3
 13965  10CC  1903               	skipnz
 13966  10CD  28A6               	goto	l13476
 13967  10CE  3A07               	xorlw	7	; case 4
 13968  10CF  1903               	skipnz
 13969  10D0  2885               	goto	l13460
 13970  10D1  3A01               	xorlw	1	; case 5
 13971  10D2  1903               	skipnz
 13972  10D3  289E               	goto	l13470
 13973  10D4  3A03               	xorlw	3	; case 6
 13974  10D5  1903               	skipnz
 13975  10D6  28A9               	goto	l13478
 13976  10D7  28B8               	goto	l1577
 13977  10D8                     l13522:	
 13978                           
 13979                           ;BVH2_Appl_Layer.c: 538: Cb34_idPWM = ui8_PWM_dc_mat;
 13980  10D8  0020               	movlb	0	; select bank0
 13981  10D9  085E               	movf	_ui8_PWM_dc_mat,w
 13982  10DA  00DD               	movwf	_Cb34_idPWM
 13983                           
 13984                           ;BVH2_Appl_Layer.c: 543: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
 13985  10DB  0021               	movlb	1	; select bank1
 13986  10DC  1A44               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
 13987  10DD  28E2               	goto	l13546
 13988  10DE  28F0               	goto	l1580
 13989  10DF                     l13528:	
 13990                           
 13991                           ;BVH2_Appl_Layer.c: 549: Cb34_PWM_Detection_node_fcn1();
 13992  10DF  2669  3190         	fcall	_Cb34_PWM_Detection_node_fcn1
 13993                           
 13994                           ;BVH2_Appl_Layer.c: 552: break;
 13995  10E1  28F9               	goto	l13562
 13996  10E2                     l13546:	
 13997  10E2  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 13998  10E3  390F               	andlw	15
 13999                           
 14000                           ; Switch size 1, requested type "space"
 14001                           ; Number of cases is 8, Range of values is 1 to 8
 14002                           ; switch strategies available:
 14003                           ; Name         Instructions Cycles
 14004                           ; direct_byte           25     9 (fixed)
 14005                           ; simple_byte           25    13 (average)
 14006                           ; jumptable            263     9 (fixed)
 14007                           ;	Chosen strategy is direct_byte
 14008  10E4  3EFF               	addlw	-1
 14009  10E5  1C03               	skipc
 14010  10E6  28F9               	goto	l13562
 14011  10E7  0084               	movwf	4
 14012  10E8  3008               	movlw	8
 14013  10E9  0204               	subwf	4,w
 14014  10EA  1803               	skipnc
 14015  10EB  28F9               	goto	l13562
 14016  10EC  3187               	movlp	high S14490
 14017  10ED  3504               	lslf	4,w
 14018  10EE  3E00               	addlw	low S14490
 14019  10EF  0082               	movwf	2
 14020  10F0                     l1580:	
 14021                           
 14022                           ;BVH2_Appl_Layer.c: 615: else {
 14023                           ;BVH2_Appl_Layer.c: 616: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling = 1;
 14024  10F0  1644               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
 14025                           
 14026                           ;BVH2_Appl_Layer.c: 619: if (ui8_ResetMatlab == 1) {
 14027  10F1  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 14028  10F2  28F4               	goto	u11821
 14029  10F3  28F5               	goto	l13550
 14030  10F4                     u11821:	
 14031  10F4  28F9               	goto	l13562
 14032  10F5                     l13550:	
 14033                           
 14034                           ;BVH2_Appl_Layer.c: 621: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
 14035                           
 14036                           ;BVH2_Appl_Layer.c: 622: Cb34_odPumpOff = 1;
 14037                           
 14038                           ;BVH2_Appl_Layer.c: 623: Cb34_odFixedValueSel = 0;
 14039                           
 14040                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedLowValueSel = 0;
 14041  10F5  27B3  3190         	fcall	PL62	;call to abstracted procedure
 14042                           
 14043                           ;BVH2_Appl_Layer.c: 625: Cb34_oPWM_SC_Alarm = 0;
 14044  10F7  01CD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 14045                           
 14046                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_Alarm = 0;
 14047  10F8  01CE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 14048  10F9                     l13562:	
 14049                           
 14050                           ;BVH2_Appl_Layer.c: 627: }
 14051                           ;BVH2_Appl_Layer.c: 628: }
 14052                           ;BVH2_Appl_Layer.c: 633: bool_PWMin_Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
 14053  10F9  0022               	movlb	2	; select bank2
 14054  10FA  084D               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
 14055  10FB  00D9               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
 14056                           
 14057                           ;BVH2_Appl_Layer.c: 638: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
 14058  10FC  0021               	movlb	1	; select bank1
 14059  10FD  1DC2               	btfss	_SIBFS_UbatHandling_b^(0+128),3
 14060  10FE  291E               	goto	l1593
 14061                           
 14062                           ;BVH2_Appl_Layer.c: 642: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
 14063  10FF  1E42               	btfss	_SIBFS_UbatHandling_b^(0+128),4
 14064  1100  290C               	goto	l1594
 14065                           
 14066                           ;BVH2_Appl_Layer.c: 644: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
 14067  1101  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14068  1102  39F8               	andlw	-8
 14069  1103  3802               	iorlw	2
 14070  1104  00C2               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14071                           
 14072                           ;BVH2_Appl_Layer.c: 647: if (((UInt8)ui8_BattVolt_mat) < 139) {
 14073  1105  308B               	movlw	139
 14074  1106  0230               	subwf	_ui8_BattVolt_mat^(0+128),w
 14075  1107  1803               	skipnc
 14076  1108  2923               	goto	l1601
 14077  1109                     l13572:	
 14078                           
 14079                           ;BVH2_Appl_Layer.c: 648: Cb56_UbatHandling_node_fcn2();
 14080  1109  26DC  3190         	fcall	_Cb56_UbatHandling_node_fcn2
 14081  110B  2923               	goto	l1601
 14082  110C                     l1594:	
 14083                           
 14084                           ;BVH2_Appl_Layer.c: 653: else {
 14085                           ;BVH2_Appl_Layer.c: 655: if (SIBFS_UbatHandling_b.Cb59_SaturationLow) {
 14086  110C  1EC2               	btfss	_SIBFS_UbatHandling_b^(0+128),5
 14087  110D  2917               	goto	l1597
 14088                           
 14089                           ;BVH2_Appl_Layer.c: 657: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
 14090  110E  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14091  110F  39F8               	andlw	-8
 14092  1110  3803               	iorlw	3
 14093  1111  00C2               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14094                           
 14095                           ;BVH2_Appl_Layer.c: 660: if (((UInt8)ui8_BattVolt_mat) > 49) {
 14096  1112  3032               	movlw	50
 14097  1113  0230               	subwf	_ui8_BattVolt_mat^(0+128),w
 14098  1114  1803               	btfsc	3,0
 14099  1115  2909               	goto	l13572
 14100  1116  2923               	goto	l1601
 14101  1117                     l1597:	
 14102                           
 14103                           ;BVH2_Appl_Layer.c: 666: else {
 14104                           ;BVH2_Appl_Layer.c: 668: if (SIBFS_UbatHandling_b.Cb60_NormalUbat) {
 14105  1117  1F42               	btfss	_SIBFS_UbatHandling_b^(0+128),6
 14106  1118  2923               	goto	l1601
 14107                           
 14108                           ;BVH2_Appl_Layer.c: 670: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
 14109  1119  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14110  111A  39F8               	andlw	-8
 14111  111B  3801               	iorlw	1
 14112  111C  00C2               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14113  111D  2909               	goto	l13572
 14114  111E                     l1593:	
 14115                           
 14116                           ;BVH2_Appl_Layer.c: 680: else {
 14117                           ;BVH2_Appl_Layer.c: 681: SIBFS_UbatHandling_b.Cb57_Ubat_Handling = 1;
 14118  111E  15C2               	bsf	_SIBFS_UbatHandling_b^(0+128),3
 14119                           
 14120                           ;BVH2_Appl_Layer.c: 684: if (ui8_ResetMatlab == 1) {
 14121  111F  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 14122  1120  2923               	goto	l1601
 14123                           
 14124                           ;BVH2_Appl_Layer.c: 686: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 14125                           
 14126                           ;BVH2_Appl_Layer.c: 687: Cb56_odPumpOff = 0;
 14127                           
 14128                           ;BVH2_Appl_Layer.c: 688: Cb56_odFixedValueSel = 0;
 14129                           
 14130                           ;BVH2_Appl_Layer.c: 689: Cb56_oUbat_Alarm_High = 0;
 14131  1121  27D0  3190         	fcall	PL82	;call to abstracted procedure
 14132  1123                     l1601:	
 14133                           
 14134                           ;BVH2_Appl_Layer.c: 690: }
 14135                           ;BVH2_Appl_Layer.c: 691: }
 14136                           ;BVH2_Appl_Layer.c: 694: Sb1_Logical_Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueS
      +                          el));
 14137  1123  0024               	movlb	4	; select bank4
 14138  1124  01A9               	clrf	_BVH2_Appl_Layer$1207^(0+512)
 14139  1125  0022               	movlb	2	; select bank2
 14140  1126  084A               	movf	_Cb34_odPumpOff^(0+256),w
 14141  1127  1903               	btfsc	3,2
 14142  1128  2930               	goto	l13596
 14143  1129  0021               	movlb	1	; select bank1
 14144  112A  0841               	movf	_Cb56_odFixedValueSel^(0+128),w
 14145  112B  1D03               	btfss	3,2
 14146  112C  2930               	goto	l13596
 14147  112D  0024               	movlb	4	; select bank4
 14148  112E  01A9               	clrf	_BVH2_Appl_Layer$1207^(0+512)
 14149  112F  0AA9               	incf	_BVH2_Appl_Layer$1207^(0+512),f
 14150  1130                     l13596:	
 14151  1130  0024               	movlb	4	; select bank4
 14152  1131  0829               	movf	_BVH2_Appl_Layer$1207^(0+512),w
 14153  1132  00A8               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512)
 14154                           
 14155                           ;BVH2_Appl_Layer.c: 699: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
 14156  1133  0021               	movlb	1	; select bank1
 14157  1134  1CBD               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14158  1135  2945               	goto	l1605
 14159                           
 14160                           ;BVH2_Appl_Layer.c: 701: if (Cb51_Counter > 80) {
 14161  1136  3051               	movlw	81
 14162  1137  0022               	movlb	2	; select bank2
 14163  1138  0245               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+256),w
 14164  1139  1C03               	skipc
 14165  113A  2943               	goto	l13606
 14166                           
 14167                           ;BVH2_Appl_Layer.c: 704: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
 14168  113B  0021               	movlb	1	; select bank1
 14169  113C  10BD               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14170  113D                     L24:	
 14171                           
 14172                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
 14173  113D  15BD               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14174                           
 14175                           ;BVH2_Appl_Layer.c: 706: Cb51_oTempRedAlarm = 0;
 14176  113E  0022               	movlb	2	; select bank2
 14177  113F  01BF               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
 14178                           
 14179                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempAlarm = 0;
 14180  1140  01C0               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
 14181                           
 14182                           ;BVH2_Appl_Layer.c: 708: Cb51_odPumpOff = 0;
 14183  1141  01BE               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
 14184  1142  2973               	goto	L23
 14185  1143                     l13606:	
 14186                           ;BVH2_Appl_Layer.c: 710: }
 14187                           
 14188                           ;BVH2_Appl_Layer.c: 709: Cb51_Counter = 0 ;
 14189                           
 14190                           
 14191                           ;BVH2_Appl_Layer.c: 711: else {
 14192                           ;BVH2_Appl_Layer.c: 712: Cb51_Counter = Cb51_Counter + 1 ;
 14193  1143  0AC5               	incf	BVH2_Appl_Layer@Cb51_Counter^(0+256),f
 14194                           
 14195                           ;BVH2_Appl_Layer.c: 713: }
 14196                           ;BVH2_Appl_Layer.c: 716: }
 14197  1144  29E3               	goto	l13718
 14198  1145                     l1605:	
 14199                           
 14200                           ;BVH2_Appl_Layer.c: 717: else {
 14201                           ;BVH2_Appl_Layer.c: 719: if (SIBFS_Temperature_Alarm_b.Cb53_reset) {
 14202  1145  1D3D               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14203  1146  294A               	goto	l1609
 14204                           
 14205                           ;BVH2_Appl_Layer.c: 724: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
 14206  1147  113D               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14207                           
 14208                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
 14209  1148  14BD               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14210                           
 14211                           ;BVH2_Appl_Layer.c: 728: }
 14212  1149  29E3               	goto	l13718
 14213  114A                     l1609:	
 14214                           
 14215                           ;BVH2_Appl_Layer.c: 729: else {
 14216                           ;BVH2_Appl_Layer.c: 731: if (SIBFS_Temperature_Alarm_b.Cb54_greenTemp) {
 14217  114A  1DBD               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14218  114B  295E               	goto	l1611
 14219                           
 14220                           ;BVH2_Appl_Layer.c: 735: if (ui16_mat_inpTemp < 72) {
 14221  114C  3000               	movlw	0
 14222  114D  0022               	movlb	2	; select bank2
 14223  114E  0226               	subwf	(_ui16_mat_inpTemp+1)^(0+256),w
 14224  114F  3048               	movlw	72
 14225  1150  1903               	skipnz
 14226  1151  0225               	subwf	_ui16_mat_inpTemp^(0+256),w
 14227  1152  1803               	skipnc
 14228  1153  29E3               	goto	l13718
 14229                           
 14230                           ;BVH2_Appl_Layer.c: 738: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
 14231  1154  0021               	movlb	1	; select bank1
 14232  1155  11BD               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14233                           
 14234                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
 14235  1156  163D               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14236                           
 14237                           ;BVH2_Appl_Layer.c: 740: Cb51_oTempRedAlarm = 1;
 14238  1157  0022               	movlb	2	; select bank2
 14239  1158  01BF               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
 14240  1159  0ABF               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
 14241                           
 14242                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempAlarm = 1;
 14243  115A  01C0               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
 14244  115B  0AC0               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
 14245                           
 14246                           ;BVH2_Appl_Layer.c: 744: Cb51_odPumpOff = 0;
 14247  115C  01BE               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
 14248  115D  29E3               	goto	l13718
 14249  115E                     l1611:	
 14250                           
 14251                           ;BVH2_Appl_Layer.c: 749: else {
 14252                           ;BVH2_Appl_Layer.c: 751: if (SIBFS_Temperature_Alarm_b.Cb55_redTemp) {
 14253  115E  1E3D               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14254  115F  296B               	goto	l1614
 14255                           
 14256                           ;BVH2_Appl_Layer.c: 755: if (ui16_mat_inpTemp > 185) {
 14257  1160  3000               	movlw	0
 14258  1161  0022               	movlb	2	; select bank2
 14259  1162  0226               	subwf	(_ui16_mat_inpTemp+1)^(0+256),w
 14260  1163  30BA               	movlw	186
 14261  1164  1903               	skipnz
 14262  1165  0225               	subwf	_ui16_mat_inpTemp^(0+256),w
 14263  1166  1C03               	skipc
 14264  1167  29E3               	goto	l13718
 14265                           
 14266                           ;BVH2_Appl_Layer.c: 758: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
 14267  1168  0021               	movlb	1	; select bank1
 14268  1169  123D               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14269  116A  293D               	goto	L24
 14270  116B                     l1614:	
 14271                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
 14272                           
 14273                           
 14274                           ;BVH2_Appl_Layer.c: 768: else {
 14275                           ;BVH2_Appl_Layer.c: 770: if (!(SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm)) {
 14276  116B  183D               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
 14277  116C  29E3               	goto	l13718
 14278                           
 14279                           ;BVH2_Appl_Layer.c: 771: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
 14280  116D  143D               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
 14281                           
 14282                           ;BVH2_Appl_Layer.c: 775: if (ui8_ResetMatlab != 0) {
 14283  116E  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14284  116F  1903               	btfsc	3,2
 14285  1170  29E3               	goto	l13718
 14286                           
 14287                           ;BVH2_Appl_Layer.c: 777: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
 14288  1171  153D               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14289                           
 14290                           ;BVH2_Appl_Layer.c: 778: Cb51_Counter = 0 ;
 14291  1172  0022               	movlb	2	; select bank2
 14292  1173                     L23:	
 14293  1173  01C5               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+256)
 14294  1174  29E3               	goto	l13718
 14295  1175                     l13630:	
 14296                           
 14297                           ;BVH2_Appl_Layer.c: 792: if (Cb1_StateCnt > 50) {
 14298  1175  3000               	movlw	0
 14299  1176  0227               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14300  1177  3033               	movlw	51
 14301  1178  1903               	skipnz
 14302  1179  0226               	subwf	_Cb1_StateCnt^(0+128),w
 14303  117A  1C03               	skipc
 14304  117B  2982               	goto	l13640
 14305                           
 14306                           ;BVH2_Appl_Layer.c: 795: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14307                           ;BVH2_Appl_Layer.c: 796: (UInt8)5;
 14308  117C  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14309                           
 14310                           ;BVH2_Appl_Layer.c: 797: Cb1_oShutoff = 0;
 14311                           
 14312                           ;BVH2_Appl_Layer.c: 798: Cb1_oCurrentAlarm = 0;
 14313  117D  27DE  3190         	fcall	PL92	;call to abstracted procedure
 14314  117F                     l13638:	
 14315                           
 14316                           ;BVH2_Appl_Layer.c: 799: Cb1_RestartCounter = 0 ;
 14317  117F  0022               	movlb	2	; select bank2
 14318  1180  01D1               	clrf	_Cb1_RestartCounter^(0+256)
 14319                           
 14320                           ;BVH2_Appl_Layer.c: 800: }
 14321  1181  29FC               	goto	l1623
 14322  1182                     l13640:	
 14323                           
 14324                           ;BVH2_Appl_Layer.c: 801: else {
 14325                           ;BVH2_Appl_Layer.c: 802: Cb1_StateCnt = Cb1_StateCnt + 1 ;
 14326  1182  0826               	movf	_Cb1_StateCnt^(0+128),w
 14327  1183  3E01               	addlw	1
 14328  1184  00A6               	movwf	_Cb1_StateCnt^(0+128)
 14329  1185  3000               	movlw	0
 14330  1186  3D27               	addwfc	(_Cb1_StateCnt+1)^(0+128),w
 14331  1187  00A7               	movwf	(_Cb1_StateCnt+1)^(0+128)
 14332  1188  29FC               	goto	l1623
 14333  1189                     l13642:	
 14334                           
 14335                           ;BVH2_Appl_Layer.c: 810: Cb1_Current_An___High_node_fcn1();
 14336  1189  2613  3190         	fcall	_Cb1_Current_An___High_node_fcn1
 14337                           
 14338                           ;BVH2_Appl_Layer.c: 811: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
 14339  118B  0E45               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14340  118C  3903               	andlw	3
 14341  118D  3A03               	xorlw	3
 14342  118E  1D03               	btfss	3,2
 14343  118F  2982               	goto	l13640
 14344  1190  29FC               	goto	l1623
 14345  1191                     l13648:	
 14346                           
 14347                           ;BVH2_Appl_Layer.c: 820: if (Cb1_RestartCounter < 10) {
 14348  1191  300A               	movlw	10
 14349  1192  0022               	movlb	2	; select bank2
 14350  1193  0251               	subwf	_Cb1_RestartCounter^(0+256),w
 14351  1194  1803               	skipnc
 14352  1195  29FC               	goto	l1623
 14353  1196                     l13650:	
 14354                           
 14355                           ;BVH2_Appl_Layer.c: 823: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14356                           ;BVH2_Appl_Layer.c: 824: (UInt8)3;
 14357  1196  0021               	movlb	1	; select bank1
 14358  1197  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14359  1198  39F0               	andlw	-16
 14360  1199  3803               	iorlw	3
 14361  119A  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14362                           
 14363                           ;BVH2_Appl_Layer.c: 825: Cb1_oShutoff = 0;
 14364  119B  0022               	movlb	2	; select bank2
 14365  119C  01CF               	clrf	_Cb1_oShutoff^(0+256)
 14366                           
 14367                           ;BVH2_Appl_Layer.c: 826: Cb1_oCurrentAlarm = 1;
 14368  119D  01D0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 14369  119E  0AD0               	incf	_Cb1_oCurrentAlarm^(0+256),f
 14370  119F                     l13656:	
 14371                           
 14372                           ;BVH2_Appl_Layer.c: 827: Cb1_StateCnt = 0 ;
 14373  119F  0021               	movlb	1	; select bank1
 14374  11A0  01A6               	clrf	_Cb1_StateCnt^(0+128)
 14375  11A1  01A7               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14376  11A2  29FC               	goto	l1623
 14377  11A3                     l13658:	
 14378                           
 14379                           ;BVH2_Appl_Layer.c: 835: Cb1_Current_An___High_node_fcn1();
 14380  11A3  2613  3190         	fcall	_Cb1_Current_An___High_node_fcn1
 14381                           
 14382                           ;BVH2_Appl_Layer.c: 838: break;
 14383  11A5  29FC               	goto	l1623
 14384  11A6                     l13660:	
 14385                           
 14386                           ;BVH2_Appl_Layer.c: 842: if (Cb1_StateCnt > 200) {
 14387  11A6  3000               	movlw	0
 14388  11A7  0227               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14389  11A8  30C9               	movlw	201
 14390  11A9  1903               	skipnz
 14391  11AA  0226               	subwf	_Cb1_StateCnt^(0+128),w
 14392  11AB  1C03               	skipc
 14393  11AC  29B4               	goto	l13666
 14394                           
 14395                           ;BVH2_Appl_Layer.c: 844: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14396                           ;BVH2_Appl_Layer.c: 845: (UInt8)7;
 14397  11AD  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14398  11AE  39F0               	andlw	-16
 14399  11AF  3807               	iorlw	7
 14400  11B0  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14401                           
 14402                           ;BVH2_Appl_Layer.c: 846: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
 14403  11B1  0022               	movlb	2	; select bank2
 14404  11B2  0AD1               	incf	_Cb1_RestartCounter^(0+256),f
 14405                           
 14406                           ;BVH2_Appl_Layer.c: 847: }
 14407  11B3  29FC               	goto	l1623
 14408  11B4                     l13666:	
 14409                           
 14410                           ;BVH2_Appl_Layer.c: 848: else {
 14411                           ;BVH2_Appl_Layer.c: 851: if (bool_mat_currAlarm_bldc) {
 14412  11B4  084A               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14413  11B5  1903               	btfsc	3,2
 14414  11B6  2982               	goto	l13640
 14415  11B7                     l13668:	
 14416                           
 14417                           ;BVH2_Appl_Layer.c: 853: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14418                           ;BVH2_Appl_Layer.c: 854: (UInt8)1;
 14419  11B7  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14420  11B8  39F0               	andlw	-16
 14421  11B9  3801               	iorlw	1
 14422  11BA  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14423                           
 14424                           ;BVH2_Appl_Layer.c: 855: Cb1_StateCnt = 0 ;
 14425  11BB  01A6               	clrf	_Cb1_StateCnt^(0+128)
 14426  11BC  01A7               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14427                           
 14428                           ;BVH2_Appl_Layer.c: 856: Cb1_oShutoff = 1;
 14429  11BD  0022               	movlb	2	; select bank2
 14430  11BE  01CF               	clrf	_Cb1_oShutoff^(0+256)
 14431  11BF  0ACF               	incf	_Cb1_oShutoff^(0+256),f
 14432                           
 14433                           ;BVH2_Appl_Layer.c: 857: Cb1_oCurrentAlarm = 1;
 14434  11C0  01D0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 14435  11C1  0AD0               	incf	_Cb1_oCurrentAlarm^(0+256),f
 14436                           
 14437                           ;BVH2_Appl_Layer.c: 858: }
 14438  11C2  29FC               	goto	l1623
 14439  11C3                     l13678:	
 14440                           
 14441                           ;BVH2_Appl_Layer.c: 872: if (!(bool_mat_currAlarm_bldc)) {
 14442  11C3  084A               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14443  11C4  1903               	btfsc	3,2
 14444  11C5  2996               	goto	l13650
 14445                           
 14446                           ;BVH2_Appl_Layer.c: 880: else {
 14447                           ;BVH2_Appl_Layer.c: 881: if (Cb1_StateCnt > 1) {
 14448  11C6  3000               	movlw	0
 14449  11C7  0227               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14450  11C8  3002               	movlw	2
 14451  11C9  1903               	skipnz
 14452  11CA  0226               	subwf	_Cb1_StateCnt^(0+128),w
 14453  11CB  1803               	btfsc	3,0
 14454  11CC  29B7               	goto	l13668
 14455  11CD  2982               	goto	l13640
 14456  11CE                     l13700:	
 14457                           
 14458                           ;BVH2_Appl_Layer.c: 902: if (!(bool_mat_currAlarm_bldc)) {
 14459  11CE  084A               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14460  11CF  1D03               	btfss	3,2
 14461  11D0  2982               	goto	l13640
 14462                           
 14463                           ;BVH2_Appl_Layer.c: 905: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
 14464  11D1  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14465  11D2  39F0               	andlw	-16
 14466  11D3  3804               	iorlw	4
 14467  11D4  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14468  11D5  299F               	goto	l13656
 14469  11D6                     l1642:	
 14470                           ;BVH2_Appl_Layer.c: 914: }
 14471                           ;BVH2_Appl_Layer.c: 915: default: {
 14472                           
 14473                           
 14474                           ;BVH2_Appl_Layer.c: 917: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
 14475  11D6  1B45               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
 14476  11D7  29FC               	goto	l1623
 14477                           
 14478                           ;BVH2_Appl_Layer.c: 918: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
 14479  11D8  1745               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
 14480                           
 14481                           ;BVH2_Appl_Layer.c: 922: if (ui8_ResetMatlab != 0) {
 14482  11D9  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14483  11DA  1903               	btfsc	3,2
 14484  11DB  29FC               	goto	l1623
 14485                           
 14486                           ;BVH2_Appl_Layer.c: 924: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14487                           ;BVH2_Appl_Layer.c: 925: (UInt8)6;
 14488  11DC  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14489  11DD  39F0               	andlw	-16
 14490  11DE  3806               	iorlw	6
 14491  11DF  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14492                           
 14493                           ;BVH2_Appl_Layer.c: 926: Cb1_StateCnt = 0 ;
 14494  11E0  01A6               	clrf	_Cb1_StateCnt^(0+128)
 14495  11E1  01A7               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14496  11E2  297F               	goto	l13638
 14497  11E3                     l13718:	
 14498  11E3  0021               	movlb	1	; select bank1
 14499  11E4  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14500  11E5  390F               	andlw	15
 14501                           
 14502                           ; Switch size 1, requested type "space"
 14503                           ; Number of cases is 7, Range of values is 1 to 7
 14504                           ; switch strategies available:
 14505                           ; Name         Instructions Cycles
 14506                           ; simple_byte           22    12 (average)
 14507                           ; direct_byte           23     9 (fixed)
 14508                           ; jumptable            263     9 (fixed)
 14509                           ;	Chosen strategy is simple_byte
 14510  11E6  3A01               	xorlw	1	; case 1
 14511  11E7  1903               	skipnz
 14512  11E8  29CE               	goto	l13700
 14513  11E9  3A03               	xorlw	3	; case 2
 14514  11EA  1903               	skipnz
 14515  11EB  29C3               	goto	l13678
 14516  11EC  3A01               	xorlw	1	; case 3
 14517  11ED  1903               	skipnz
 14518  11EE  2989               	goto	l13642
 14519  11EF  3A07               	xorlw	7	; case 4
 14520  11F0  1903               	skipnz
 14521  11F1  29A6               	goto	l13660
 14522  11F2  3A01               	xorlw	1	; case 5
 14523  11F3  1903               	skipnz
 14524  11F4  29A3               	goto	l13658
 14525  11F5  3A03               	xorlw	3	; case 6
 14526  11F6  1903               	skipnz
 14527  11F7  2975               	goto	l13630
 14528  11F8  3A01               	xorlw	1	; case 7
 14529  11F9  1903               	skipnz
 14530  11FA  2991               	goto	l13648
 14531  11FB  29D6               	goto	l1642
 14532  11FC                     l1623:	
 14533                           
 14534                           ;BVH2_Appl_Layer.c: 934: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||
 14535                           ;BVH2_Appl_Layer.c: 935: Cb1_oShutoff || Cb44_oShutoff;
 14536  11FC  0024               	movlb	4	; select bank4
 14537  11FD  01AA               	clrf	_BVH2_Appl_Layer$1208^(0+512)
 14538  11FE  0AAA               	incf	_BVH2_Appl_Layer$1208^(0+512),f
 14539  11FF  0828               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512),w
 14540  1200  1D03               	btfss	3,2
 14541  1201  2A11               	goto	l13732
 14542  1202  0022               	movlb	2	; select bank2
 14543  1203  0847               	movf	_Cb56_odPumpOff^(0+256),w
 14544  1204  1D03               	btfss	3,2
 14545  1205  2A11               	goto	l13732
 14546  1206  083E               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
 14547  1207  1D03               	btfss	3,2
 14548  1208  2A11               	goto	l13732
 14549  1209  084F               	movf	_Cb1_oShutoff^(0+256),w
 14550  120A  1D03               	btfss	3,2
 14551  120B  2A11               	goto	l13732
 14552  120C  0849               	movf	_Cb44_oShutoff^(0+256),w
 14553  120D  1D03               	btfss	3,2
 14554  120E  2A11               	goto	l13732
 14555  120F  0024               	movlb	4	; select bank4
 14556  1210  01AA               	clrf	_BVH2_Appl_Layer$1208^(0+512)
 14557  1211                     l13732:	
 14558  1211  0024               	movlb	4	; select bank4
 14559  1212  082A               	movf	_BVH2_Appl_Layer$1208^(0+512),w
 14560  1213  00BB               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512)
 14561                           
 14562                           ;BVH2_Appl_Layer.c: 938: Cb24_Reset = ui8_ResetMatlab != 0 ;
 14563  1214  0021               	movlb	1	; select bank1
 14564  1215  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14565  1216  1903               	btfsc	3,2
 14566  1217  2A1A               	goto	u12160
 14567  1218  3001               	movlw	1
 14568  1219  2A1B               	goto	u12170
 14569  121A                     u12160:	
 14570  121A  3000               	movlw	0
 14571  121B                     u12170:	
 14572  121B  0024               	movlb	4	; select bank4
 14573  121C  00B3               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+512)
 14574                           
 14575                           ;BVH2_Appl_Layer.c: 943: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
 14576  121D  0021               	movlb	1	; select bank1
 14577  121E  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14578  121F  2B1E               	goto	l1647
 14579                           
 14580                           ;BVH2_Appl_Layer.c: 949: if (Sb1_Logical_Operator1 || Cb24_Reset) {
 14581  1220  0024               	movlb	4	; select bank4
 14582  1221  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 14583  1222  1D03               	btfss	3,2
 14584  1223  2A2F               	goto	l13758
 14585  1224  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 14586  1225  1D03               	btfss	3,2
 14587  1226  2A2F               	goto	l13758
 14588  1227  2B07               	goto	l13876
 14589  1228                     l13742:	
 14590                           
 14591                           ;BVH2_Appl_Layer.c: 954: Cb24_StateCnt = 0 ;
 14592  1228  0020               	movlb	0	; select bank0
 14593  1229  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 14594  122A  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14595  122B                     l13744:	
 14596                           
 14597                           ;BVH2_Appl_Layer.c: 955: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 14598  122B  30F8               	movlw	-8
 14599  122C  0021               	movlb	1	; select bank1
 14600  122D  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14601                           
 14602                           ;BVH2_Appl_Layer.c: 956: break;
 14603  122E  2A45               	goto	l1653
 14604  122F                     l13758:	
 14605  122F  0021               	movlb	1	; select bank1
 14606  1230  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14607  1231  3907               	andlw	7
 14608                           
 14609                           ; Switch size 1, requested type "space"
 14610                           ; Number of cases is 6, Range of values is 1 to 6
 14611                           ; switch strategies available:
 14612                           ; Name         Instructions Cycles
 14613                           ; simple_byte           19    10 (average)
 14614                           ; direct_byte           21     9 (fixed)
 14615                           ; jumptable            263     9 (fixed)
 14616                           ;	Chosen strategy is simple_byte
 14617  1232  3A01               	xorlw	1	; case 1
 14618  1233  1903               	skipnz
 14619  1234  2A2B               	goto	l13744
 14620  1235  3A03               	xorlw	3	; case 2
 14621  1236  1903               	skipnz
 14622  1237  2A2B               	goto	l13744
 14623  1238  3A01               	xorlw	1	; case 3
 14624  1239  1903               	skipnz
 14625  123A  2A28               	goto	l13742
 14626  123B  3A07               	xorlw	7	; case 4
 14627  123C  1903               	skipnz
 14628  123D  2A2B               	goto	l13744
 14629  123E  3A01               	xorlw	1	; case 5
 14630  123F  1903               	skipnz
 14631  1240  2A2B               	goto	l13744
 14632  1241  3A03               	xorlw	3	; case 6
 14633  1242  1903               	skipnz
 14634  1243  2A2B               	goto	l13744
 14635  1244  2A45               	goto	l1653
 14636  1245                     l1653:	
 14637                           
 14638                           ;BVH2_Appl_Layer.c: 979: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 14639  1245  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14640  1246  2B3B               	goto	L38
 14641  1247                     l13762:	
 14642                           ;BVH2_Appl_Layer.c: 984: }
 14643                           
 14644                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 14645                           
 14646                           
 14647                           ;BVH2_Appl_Layer.c: 990: if (Cb24_StateCnt) {
 14648  1247  0020               	movlb	0	; select bank0
 14649  1248  0854               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14650  1249  0455               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14651  124A  1903               	btfsc	3,2
 14652  124B  2A9E               	goto	L26
 14653                           
 14654                           ;BVH2_Appl_Layer.c: 994: Cb24_StateCnt = 0 ;
 14655  124C  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 14656  124D  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14657  124E                     l13766:	
 14658                           
 14659                           ;BVH2_Appl_Layer.c: 995: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int)
 14660                           ;BVH2_Appl_Layer.c: 996: (UInt8)2;
 14661  124E  0021               	movlb	1	; select bank1
 14662  124F  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14663  1250  39F8               	andlw	-8
 14664  1251  3802               	iorlw	2
 14665  1252  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14666                           
 14667                           ;BVH2_Appl_Layer.c: 997: }
 14668  1253  2B40               	goto	l13898
 14669  1254                     l13770:	
 14670                           ;BVH2_Appl_Layer.c: 998: else {
 14671                           ;BVH2_Appl_Layer.c: 999: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 14672                           
 14673                           
 14674                           ;BVH2_Appl_Layer.c: 1009: if (Cb24_StateCnt > 1000) {
 14675  1254  3003               	movlw	3
 14676  1255  0020               	movlb	0	; select bank0
 14677  1256  0255               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14678  1257  30E9               	movlw	233
 14679  1258  1903               	skipnz
 14680  1259  0254               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14681  125A  1C03               	skipc
 14682  125B  2A61               	goto	l13782
 14683                           
 14684                           ;BVH2_Appl_Layer.c: 1012: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14685                           ;BVH2_Appl_Layer.c: 1013: (UInt8)5;
 14686                           
 14687                           ;BVH2_Appl_Layer.c: 1014: Cb24_StateCnt = 0 ;
 14688                           
 14689                           ;BVH2_Appl_Layer.c: 1015: Cb24_BadCnt = 0 ;
 14690                           
 14691                           ;BVH2_Appl_Layer.c: 1016: Cb24_oMotorStalled = 0;
 14692  125C  27A6  3190         	fcall	PL52	;call to abstracted procedure
 14693  125E  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14694                           
 14695                           ;BVH2_Appl_Layer.c: 1019: Cb24_oStalledAlarm = 0;
 14696  125F  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14697                           
 14698                           ;BVH2_Appl_Layer.c: 1020: }
 14699  1260  2B40               	goto	l13898
 14700  1261                     l13782:	
 14701                           
 14702                           ;BVH2_Appl_Layer.c: 1021: else {
 14703                           ;BVH2_Appl_Layer.c: 1024: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 14704  1261  3000               	movlw	0
 14705  1262  0257               	subwf	_ui16_Speed_mat+1,w
 14706  1263  3005               	movlw	5
 14707  1264  1903               	skipnz
 14708  1265  0256               	subwf	_ui16_Speed_mat,w
 14709  1266  1C03               	skipc
 14710  1267  2A6F               	goto	l13786
 14711  1268  3001               	movlw	1
 14712  1269  0257               	subwf	_ui16_Speed_mat+1,w
 14713  126A  302D               	movlw	45
 14714  126B  1903               	skipnz
 14715  126C  0256               	subwf	_ui16_Speed_mat,w
 14716  126D  1C03               	skipc
 14717  126E  2A9E               	goto	L26
 14718  126F                     l13786:	
 14719                           
 14720                           ;BVH2_Appl_Layer.c: 1027: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14721                           ;BVH2_Appl_Layer.c: 1028: (UInt8)1;
 14722  126F  0021               	movlb	1	; select bank1
 14723  1270  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14724  1271  39F8               	andlw	-8
 14725  1272  3801               	iorlw	1
 14726  1273  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14727                           
 14728                           ;BVH2_Appl_Layer.c: 1029: Cb24_oStalledAlarm = 0;
 14729  1274  0022               	movlb	2	; select bank2
 14730  1275  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14731                           
 14732                           ;BVH2_Appl_Layer.c: 1030: Cb24_StateCnt = 0 ;
 14733  1276  0020               	movlb	0	; select bank0
 14734  1277  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 14735  1278  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14736                           
 14737                           ;BVH2_Appl_Layer.c: 1031: }
 14738  1279  2B40               	goto	l13898
 14739  127A                     l13794:	
 14740                           
 14741                           ;BVH2_Appl_Layer.c: 1044: if (Cb24_BadCnt > 100) {
 14742  127A  3000               	movlw	0
 14743  127B  0023               	movlb	3	; select bank3
 14744  127C  0243               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 14745  127D  3065               	movlw	101
 14746  127E  1903               	skipnz
 14747  127F  0242               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 14748  1280  1C03               	skipc
 14749  1281  2A89               	goto	l13804
 14750                           
 14751                           ;BVH2_Appl_Layer.c: 1047: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14752                           ;BVH2_Appl_Layer.c: 1048: (UInt8)4;
 14753                           
 14754                           ;BVH2_Appl_Layer.c: 1049: Cb24_StateCnt = 0 ;
 14755                           
 14756                           ;BVH2_Appl_Layer.c: 1050: Cb24_oMotorStalled = 1;
 14757  1282  27BD  3190         	fcall	PL64	;call to abstracted procedure
 14758  1284  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14759  1285  0AC2               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14760                           
 14761                           ;BVH2_Appl_Layer.c: 1051: Cb24_oStalledAlarm = 1;
 14762  1286  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14763  1287  0AC1               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14764                           
 14765                           ;BVH2_Appl_Layer.c: 1052: }
 14766  1288  2B40               	goto	l13898
 14767  1289                     l13804:	
 14768                           
 14769                           ;BVH2_Appl_Layer.c: 1053: else {
 14770                           ;BVH2_Appl_Layer.c: 1056: if ((ui16_Speed_mat >= 5) && (ui16_Speed_mat <= 300)) {
 14771  1289  27F8  3190         	fcall	PL126	;call to abstracted procedure
 14772  128B  1903               	skipnz
 14773  128C  0256               	subwf	_ui16_Speed_mat,w
 14774  128D  1C03               	skipc
 14775  128E  2A96               	goto	l13810
 14776  128F  3001               	movlw	1
 14777  1290  0257               	subwf	_ui16_Speed_mat+1,w
 14778  1291  302D               	movlw	45
 14779  1292  1903               	skipnz
 14780  1293  0256               	subwf	_ui16_Speed_mat,w
 14781  1294  1C03               	btfss	3,0
 14782  1295  2A4E               	goto	l13766
 14783  1296                     l13810:	
 14784                           
 14785                           ;BVH2_Appl_Layer.c: 1062: else {
 14786                           ;BVH2_Appl_Layer.c: 1063: Cb24_BadCnt = Cb24_BadCnt + 1 ;
 14787  1296  0023               	movlb	3	; select bank3
 14788  1297  0842               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 14789  1298  3E01               	addlw	1
 14790  1299  00C2               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 14791  129A  3000               	movlw	0
 14792  129B  3D43               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 14793  129C  00C3               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 14794                           
 14795                           ;BVH2_Appl_Layer.c: 1064: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 14796  129D  0020               	movlb	0	; select bank0
 14797  129E                     L26:	
 14798  129E  0854               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14799  129F  3E01               	addlw	1
 14800  12A0  00D4               	movwf	BVH2_Appl_Layer@Cb24_StateCnt
 14801  12A1  3000               	movlw	0
 14802  12A2  3D55               	addwfc	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14803  12A3  00D5               	movwf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14804  12A4  2B40               	goto	l13898
 14805  12A5                     l13814:	
 14806                           
 14807                           ;BVH2_Appl_Layer.c: 1089: if (Cb24_StateCnt > 10) {
 14808  12A5  3000               	movlw	0
 14809  12A6  0020               	movlb	0	; select bank0
 14810  12A7  0255               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14811  12A8  300B               	movlw	11
 14812  12A9  1903               	skipnz
 14813  12AA  0254               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14814  12AB  1C03               	skipc
 14815  12AC  2AE8               	goto	l13856
 14816                           
 14817                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_RestartCounter == 10) {
 14818  12AD  300A               	movlw	10
 14819  12AE  0022               	movlb	2	; select bank2
 14820  12AF  0646               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),w
 14821  12B0  1D03               	btfss	3,2
 14822  12B1  2ABE               	goto	l13828
 14823                           
 14824                           ;BVH2_Appl_Layer.c: 1092: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 14825  12B2  30F8               	movlw	-8
 14826  12B3  0021               	movlb	1	; select bank1
 14827  12B4  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14828                           
 14829                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 14830  12B5  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14831                           
 14832                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
 14833  12B6  1421               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 14834                           
 14835                           ;BVH2_Appl_Layer.c: 1095: Cb24_oStalledAlarm = 1;
 14836  12B7  0022               	movlb	2	; select bank2
 14837  12B8  3018               	movlw	24
 14838  12B9  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14839  12BA  0AC1               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14840  12BB  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14841  12BC  0AC2               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14842  12BD  2ADF               	goto	L28
 14843  12BE                     l13828:	
 14844                           ;BVH2_Appl_Layer.c: 1098: }
 14845                           
 14846                           ;BVH2_Appl_Layer.c: 1097: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14847                           
 14848                           
 14849                           ;BVH2_Appl_Layer.c: 1099: else {
 14850                           ;BVH2_Appl_Layer.c: 1102: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 14851  12BE  27F8  3190         	fcall	PL126	;call to abstracted procedure
 14852  12C0  1903               	skipnz
 14853  12C1  0256               	subwf	_ui16_Speed_mat,w
 14854  12C2  1C03               	skipc
 14855  12C3  2ACB               	goto	l13832
 14856  12C4  3001               	movlw	1
 14857  12C5  0257               	subwf	_ui16_Speed_mat+1,w
 14858  12C6  302D               	movlw	45
 14859  12C7  1903               	skipnz
 14860  12C8  0256               	subwf	_ui16_Speed_mat,w
 14861  12C9  1C03               	skipc
 14862  12CA  2AD3               	goto	l13842
 14863  12CB                     l13832:	
 14864                           
 14865                           ;BVH2_Appl_Layer.c: 1105: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14866                           ;BVH2_Appl_Layer.c: 1106: (UInt8)4;
 14867                           
 14868                           ;BVH2_Appl_Layer.c: 1107: Cb24_StateCnt = 0 ;
 14869                           
 14870                           ;BVH2_Appl_Layer.c: 1108: Cb24_oMotorStalled = 1;
 14871  12CB  27BD  3190         	fcall	PL64	;call to abstracted procedure
 14872  12CD  3018               	movlw	24
 14873  12CE  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14874  12CF  0AC2               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),f
 14875                           
 14876                           ;BVH2_Appl_Layer.c: 1109: Cb24_oStalledAlarm = 1;
 14877  12D0  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14878  12D1  0AC1               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14879                           
 14880                           ;BVH2_Appl_Layer.c: 1110: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14881  12D2  2ADF               	goto	L28
 14882  12D3                     l13842:	
 14883                           ;BVH2_Appl_Layer.c: 1111: }
 14884                           
 14885                           
 14886                           ;BVH2_Appl_Layer.c: 1112: else {
 14887                           ;BVH2_Appl_Layer.c: 1113: if (Cb24_StateCnt > 200) {
 14888  12D3  3000               	movlw	0
 14889  12D4  0255               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14890  12D5  30C9               	movlw	201
 14891  12D6  1903               	skipnz
 14892  12D7  0254               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14893  12D8  1C03               	skipc
 14894  12D9  2AE2               	goto	l13854
 14895                           
 14896                           ;BVH2_Appl_Layer.c: 1116: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14897                           ;BVH2_Appl_Layer.c: 1117: (UInt8)5;
 14898                           
 14899                           ;BVH2_Appl_Layer.c: 1118: Cb24_StateCnt = 0 ;
 14900                           
 14901                           ;BVH2_Appl_Layer.c: 1119: Cb24_BadCnt = 0 ;
 14902                           
 14903                           ;BVH2_Appl_Layer.c: 1120: Cb24_oMotorStalled = 0;
 14904  12DA  27A6  3190         	fcall	PL52	;call to abstracted procedure
 14905  12DC  3018               	movlw	24
 14906  12DD  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14907  12DE  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14908  12DF                     L28:	
 14909                           
 14910                           ;BVH2_Appl_Layer.c: 1124: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14911  12DF  0021               	movlb	1	; select bank1
 14912  12E0  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14913                           
 14914                           ;BVH2_Appl_Layer.c: 1125: }
 14915  12E1  2AEB               	goto	l1688
 14916  12E2                     l13854:	
 14917                           
 14918                           ;BVH2_Appl_Layer.c: 1126: else {
 14919                           ;BVH2_Appl_Layer.c: 1127: SIBFS_Motor_Stalled_b.Cb24_glflag = 1 ;
 14920  12E2  0021               	movlb	1	; select bank1
 14921  12E3  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14922  12E4  39E7               	andlw	-25
 14923  12E5  3808               	iorlw	8
 14924  12E6  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14925  12E7  2AEB               	goto	l1688
 14926  12E8                     l13856:	
 14927                           
 14928                           ;BVH2_Appl_Layer.c: 1132: else {
 14929                           ;BVH2_Appl_Layer.c: 1133: SIBFS_Motor_Stalled_b.Cb24_glflag = 0 ;
 14930  12E8  30E7               	movlw	-25
 14931  12E9  0021               	movlb	1	; select bank1
 14932  12EA  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14933  12EB                     l1688:	
 14934                           
 14935                           ;BVH2_Appl_Layer.c: 1134: }
 14936                           ;BVH2_Appl_Layer.c: 1135: if (SIBFS_Motor_Stalled_b.Cb24_glflag <= 2) {
 14937  12EB  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14938  12EC  27E5  3190         	fcall	PL96	;call to abstracted procedure
 14939  12EE  1D03               	btfss	3,2
 14940  12EF  2A9E               	goto	L26
 14941  12F0  2B40               	goto	l13898
 14942  12F1                     l13860:	
 14943                           
 14944                           ;BVH2_Appl_Layer.c: 1146: if (Cb24_StateCnt > 200) {
 14945  12F1  3000               	movlw	0
 14946  12F2  0020               	movlb	0	; select bank0
 14947  12F3  0255               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14948  12F4  30C9               	movlw	201
 14949  12F5  1903               	skipnz
 14950  12F6  0254               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14951  12F7  1C03               	skipc
 14952  12F8  2A9E               	goto	L26
 14953                           
 14954                           ;BVH2_Appl_Layer.c: 1150: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14955                           ;BVH2_Appl_Layer.c: 1151: (UInt8)6;
 14956  12F9  0021               	movlb	1	; select bank1
 14957  12FA  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14958  12FB  39F8               	andlw	-8
 14959  12FC  3806               	iorlw	6
 14960  12FD  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14961                           
 14962                           ;BVH2_Appl_Layer.c: 1152: Cb24_StateCnt = 0 ;
 14963  12FE  0020               	movlb	0	; select bank0
 14964  12FF  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 14965  1300  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14966                           
 14967                           ;BVH2_Appl_Layer.c: 1153: Cb24_oMotorStalled = 0;
 14968  1301  0022               	movlb	2	; select bank2
 14969  1302  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14970                           
 14971                           ;BVH2_Appl_Layer.c: 1154: Cb24_oStalledAlarm = 1;
 14972  1303  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14973  1304  0AC1               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
 14974                           
 14975                           ;BVH2_Appl_Layer.c: 1155: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
 14976  1305  0AC6               	incf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),f
 14977                           
 14978                           ;BVH2_Appl_Layer.c: 1156: }
 14979  1306  2B40               	goto	l13898
 14980  1307                     l13876:	
 14981  1307  0021               	movlb	1	; select bank1
 14982  1308  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14983  1309  3907               	andlw	7
 14984                           
 14985                           ; Switch size 1, requested type "space"
 14986                           ; Number of cases is 6, Range of values is 1 to 6
 14987                           ; switch strategies available:
 14988                           ; Name         Instructions Cycles
 14989                           ; simple_byte           19    10 (average)
 14990                           ; direct_byte           21     9 (fixed)
 14991                           ; jumptable            263     9 (fixed)
 14992                           ;	Chosen strategy is simple_byte
 14993  130A  3A01               	xorlw	1	; case 1
 14994  130B  1903               	skipnz
 14995  130C  2A7A               	goto	l13794
 14996  130D  3A03               	xorlw	3	; case 2
 14997  130E  1903               	skipnz
 14998  130F  2A54               	goto	l13770
 14999  1310  3A01               	xorlw	1	; case 3
 15000  1311  1903               	skipnz
 15001  1312  2A47               	goto	l13762
 15002  1313  3A07               	xorlw	7	; case 4
 15003  1314  1903               	skipnz
 15004  1315  2AF1               	goto	l13860
 15005  1316  3A01               	xorlw	1	; case 5
 15006  1317  1903               	skipnz
 15007  1318  2A4E               	goto	l13766
 15008  1319  3A03               	xorlw	3	; case 6
 15009  131A  1903               	skipnz
 15010  131B  2AA5               	goto	l13814
 15011  131C  2B40               	goto	l13898
 15012                           
 15013                           ;BVH2_Appl_Layer.c: 1166: }
 15014                           ;BVH2_Appl_Layer.c: 1169: }
 15015  131D  2B40               	goto	l13898
 15016  131E                     l1647:	
 15017                           
 15018                           ;BVH2_Appl_Layer.c: 1170: else {
 15019                           ;BVH2_Appl_Layer.c: 1172: if (SIBFS_Motor_Stalled_b.Cb32_default) {
 15020  131E  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15021  131F  2B32               	goto	l1694
 15022                           
 15023                           ;BVH2_Appl_Layer.c: 1177: if (!(Sb1_Logical_Operator1)) {
 15024  1320  0024               	movlb	4	; select bank4
 15025  1321  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 15026  1322  1D03               	btfss	3,2
 15027  1323  2B40               	goto	l13898
 15028                           
 15029                           ;BVH2_Appl_Layer.c: 1180: SIBFS_Motor_Stalled_b.Cb32_default = 0;
 15030  1324  0021               	movlb	1	; select bank1
 15031  1325  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15032                           
 15033                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
 15034  1326  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 15035                           
 15036                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
 15037  1327  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 15038  1328  39F8               	andlw	-8
 15039  1329  3803               	iorlw	3
 15040  132A  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 15041                           
 15042                           ;BVH2_Appl_Layer.c: 1183: Cb24_StateCnt = 0 ;
 15043  132B  0020               	movlb	0	; select bank0
 15044  132C  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 15045  132D  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 15046                           
 15047                           ;BVH2_Appl_Layer.c: 1184: Cb24_BadCnt = 0 ;
 15048  132E  0023               	movlb	3	; select bank3
 15049  132F  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 15050  1330  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 15051  1331  2B40               	goto	l13898
 15052  1332                     l1694:	
 15053                           
 15054                           ;BVH2_Appl_Layer.c: 1189: else {
 15055                           ;BVH2_Appl_Layer.c: 1191: if (!(SIBFS_Motor_Stalled_b.Cb33_Stop)) {
 15056  1332  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 15057                           
 15058                           ;BVH2_Appl_Layer.c: 1193: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
 15059  1333  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 15060  1334  2B40               	goto	l13898
 15061                           
 15062                           ;BVH2_Appl_Layer.c: 1194: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
 15063  1335  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 15064                           
 15065                           ;BVH2_Appl_Layer.c: 1197: if (Cb24_Reset) {
 15066  1336  0024               	movlb	4	; select bank4
 15067  1337  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 15068  1338  1903               	btfsc	3,2
 15069  1339  2B40               	goto	l13898
 15070                           
 15071                           ;BVH2_Appl_Layer.c: 1199: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 15072  133A  0021               	movlb	1	; select bank1
 15073  133B                     L38:	
 15074  133B  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15075                           
 15076                           ;BVH2_Appl_Layer.c: 981: Cb24_oMotorStalled = 0;
 15077  133C  0022               	movlb	2	; select bank2
 15078  133D  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 15079                           
 15080                           ;BVH2_Appl_Layer.c: 982: Cb24_oStalledAlarm = 0;
 15081  133E  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 15082                           
 15083                           ;BVH2_Appl_Layer.c: 983: Cb24_RestartCounter = 0 ;
 15084  133F  01C6               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256)
 15085  1340                     l13898:	
 15086                           
 15087                           ;BVH2_Appl_Layer.c: 1213: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
 15088  1340  0024               	movlb	4	; select bank4
 15089  1341  01AB               	clrf	_BVH2_Appl_Layer$1209^(0+512)
 15090  1342  0AAB               	incf	_BVH2_Appl_Layer$1209^(0+512),f
 15091  1343  0022               	movlb	2	; select bank2
 15092  1344  084B               	movf	_Cb34_odFixedValueSel^(0+256),w
 15093  1345  1D03               	btfss	3,2
 15094  1346  2B4D               	goto	l13906
 15095  1347  0021               	movlb	1	; select bank1
 15096  1348  0841               	movf	_Cb56_odFixedValueSel^(0+128),w
 15097  1349  1D03               	btfss	3,2
 15098  134A  2B4D               	goto	l13906
 15099  134B  0024               	movlb	4	; select bank4
 15100  134C  01AB               	clrf	_BVH2_Appl_Layer$1209^(0+512)
 15101  134D                     l13906:	
 15102  134D  0024               	movlb	4	; select bank4
 15103  134E  082B               	movf	_BVH2_Appl_Layer$1209^(0+512),w
 15104  134F  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512)
 15105                           
 15106                           ;BVH2_Appl_Layer.c: 1217: if (bool_start_demand_mat) {
 15107  1350  0021               	movlb	1	; select bank1
 15108  1351  0865               	movf	_bool_start_demand_mat^(0+128),w
 15109  1352  1903               	btfsc	3,2
 15110  1353  2B5B               	goto	l13912
 15111                           
 15112                           ;BVH2_Appl_Layer.c: 1218: Sb2_Switch5 = ui8_fixed_start_speed_mat;
 15113  1354  0023               	movlb	3	; select bank3
 15114  1355  0859               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
 15115  1356  0024               	movlb	4	; select bank4
 15116  1357  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15117  1358  0023               	movlb	3	; select bank3
 15118  1359  0858               	movf	_ui8_fixed_start_speed_mat^(0+384),w
 15119  135A  2B77               	goto	L29
 15120  135B                     l13912:	
 15121                           ;BVH2_Appl_Layer.c: 1219: }
 15122                           
 15123                           
 15124                           ;BVH2_Appl_Layer.c: 1220: else {
 15125                           ;BVH2_Appl_Layer.c: 1223: if (Cb34_odFixedLowValueSel) {
 15126  135B  0022               	movlb	2	; select bank2
 15127  135C  084C               	movf	_Cb34_odFixedLowValueSel^(0+256),w
 15128  135D  1903               	btfsc	3,2
 15129  135E  2B66               	goto	l13916
 15130                           
 15131                           ;BVH2_Appl_Layer.c: 1224: Sb2_Switch5 = ui16_Speed_demand_mat_min;
 15132  135F  0023               	movlb	3	; select bank3
 15133  1360  0845               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
 15134  1361  0024               	movlb	4	; select bank4
 15135  1362  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15136  1363  0023               	movlb	3	; select bank3
 15137  1364  0844               	movf	_ui16_Speed_demand_mat_min^(0+384),w
 15138  1365  2B77               	goto	L29
 15139  1366                     l13916:	
 15140                           ;BVH2_Appl_Layer.c: 1225: }
 15141                           
 15142                           
 15143                           ;BVH2_Appl_Layer.c: 1226: else {
 15144                           ;BVH2_Appl_Layer.c: 1229: if (Sb1_Logical_Operator5) {
 15145  1366  0024               	movlb	4	; select bank4
 15146  1367  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 15147  1368  1903               	btfsc	3,2
 15148  1369  2B71               	goto	l13920
 15149                           
 15150                           ;BVH2_Appl_Layer.c: 1230: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
 15151  136A  0023               	movlb	3	; select bank3
 15152  136B  0847               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
 15153  136C  0024               	movlb	4	; select bank4
 15154  136D  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15155  136E  0023               	movlb	3	; select bank3
 15156  136F  0846               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
 15157  1370  2B77               	goto	L29
 15158  1371                     l13920:	
 15159                           ;BVH2_Appl_Layer.c: 1231: }
 15160                           
 15161                           
 15162                           ;BVH2_Appl_Layer.c: 1232: else {
 15163                           ;BVH2_Appl_Layer.c: 1233: Sb2_Switch5 = ui16_Speed_demand_mat;
 15164  1371  0023               	movlb	3	; select bank3
 15165  1372  0849               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 15166  1373  0024               	movlb	4	; select bank4
 15167  1374  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15168  1375  0023               	movlb	3	; select bank3
 15169  1376  0848               	movf	_ui16_Speed_demand_mat^(0+384),w
 15170  1377                     L29:	
 15171  1377  0024               	movlb	4	; select bank4
 15172  1378  00B1               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+512)
 15173                           
 15174                           ;BVH2_Appl_Layer.c: 1234: }
 15175                           ;BVH2_Appl_Layer.c: 1235: }
 15176                           ;BVH2_Appl_Layer.c: 1236: }
 15177                           ;BVH2_Appl_Layer.c: 1239: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
 15178  1379  0020               	movlb	0	; select bank0
 15179  137A  0857               	movf	_ui16_Speed_mat+1,w
 15180  137B  0024               	movlb	4	; select bank4
 15181  137C  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512)
 15182  137D  0020               	movlb	0	; select bank0
 15183  137E  0856               	movf	_ui16_Speed_mat,w
 15184  137F  0024               	movlb	4	; select bank4
 15185  1380  00B7               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+512)
 15186  1381  0831               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+512),w
 15187  1382  02B7               	subwf	BVH2_Appl_Layer@Sb2_Error^(0+512),f
 15188  1383  0832               	movf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512),w
 15189  1384  3BB8               	subwfb	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),f
 15190                           
 15191                           ;BVH2_Appl_Layer.c: 1244: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 15192  1385  0021               	movlb	1	; select bank1
 15193  1386  18BE               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15194  1387  2BCF               	goto	l13964
 15195                           
 15196                           ;BVH2_Appl_Layer.c: 1264: else {
 15197                           ;BVH2_Appl_Layer.c: 1266: if (SIBFS_Dry_Running_b.Cb16_DryRunning) {
 15198  1388  1D3E               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15199  1389  2BC8               	goto	l1711
 15200                           
 15201                           ;BVH2_Appl_Layer.c: 1270: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 15202  138A  1DBE               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 15203                           
 15204                           ;BVH2_Appl_Layer.c: 1272: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 15205  138B  1E3E               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15206  138C  2BCF               	goto	l13964
 15207                           
 15208                           ;BVH2_Appl_Layer.c: 1279: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >
 15209                           ;BVH2_Appl_Layer.c: 1280: 400) || (ui16_Speed_mat < 80)) {
 15210  138D  0023               	movlb	3	; select bank3
 15211  138E  0868               	movf	_ui16_dryRun_Thresh^(0+384),w
 15212  138F  3E05               	addlw	5
 15213  1390  0020               	movlb	0	; select bank0
 15214  1391  00B2               	movwf	??_BVH2_Appl_Layer
 15215  1392  3000               	movlw	0
 15216  1393  0023               	movlb	3	; select bank3
 15217  1394  3D69               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 15218  1395  277D  3190         	fcall	PL24	;call to abstracted procedure
 15219  1397  1C03               	skipc
 15220  1398  2BA7               	goto	l1716
 15221  1399  3001               	movlw	1
 15222  139A  0257               	subwf	_ui16_Speed_mat+1,w
 15223  139B  3091               	movlw	145
 15224  139C  1903               	skipnz
 15225  139D  0256               	subwf	_ui16_Speed_mat,w
 15226  139E  1803               	skipnc
 15227  139F  2BA7               	goto	l1716
 15228  13A0  3000               	movlw	0
 15229  13A1  0257               	subwf	_ui16_Speed_mat+1,w
 15230  13A2  3050               	movlw	80
 15231  13A3  1903               	skipnz
 15232  13A4  0256               	subwf	_ui16_Speed_mat,w
 15233  13A5  1803               	skipnc
 15234  13A6  2BAB               	goto	l13942
 15235  13A7                     l1716:	
 15236                           
 15237                           ;BVH2_Appl_Layer.c: 1282: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 15238  13A7  0021               	movlb	1	; select bank1
 15239  13A8  123E               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15240                           
 15241                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 15242  13A9  113E               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15243  13AA  2BCD               	goto	l13960
 15244  13AB                     l13942:	
 15245                           ;BVH2_Appl_Layer.c: 1286: }
 15246                           
 15247                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 15248                           
 15249                           
 15250                           ;BVH2_Appl_Layer.c: 1287: else {
 15251                           ;BVH2_Appl_Layer.c: 1288: if ((ui8_PWM_dc_mat < 20) && (ui8_PWM_dc_mat > 4)) {
 15252  13AB  3014               	movlw	20
 15253  13AC  025E               	subwf	_ui8_PWM_dc_mat,w
 15254  13AD  1803               	skipnc
 15255  13AE  2BB3               	goto	l13950
 15256  13AF  3005               	movlw	5
 15257  13B0  025E               	subwf	_ui8_PWM_dc_mat,w
 15258  13B1  1803               	btfsc	3,0
 15259  13B2  2BA7               	goto	l1716
 15260  13B3                     l13950:	
 15261                           
 15262                           ;BVH2_Appl_Layer.c: 1295: else {
 15263                           ;BVH2_Appl_Layer.c: 1296: if (Cb14_StateCnt > 2000) {
 15264  13B3  3007               	movlw	7
 15265  13B4  0022               	movlb	2	; select bank2
 15266  13B5  0224               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256),w
 15267  13B6  30D1               	movlw	209
 15268  13B7  1903               	skipnz
 15269  13B8  0223               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256),w
 15270  13B9  1C03               	skipc
 15271  13BA  2BC1               	goto	l13954
 15272                           
 15273                           ;BVH2_Appl_Layer.c: 1298: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 15274  13BB  0021               	movlb	1	; select bank1
 15275  13BC  123E               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15276                           
 15277                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb17_redState = 1;
 15278  13BD  15BE               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 15279                           
 15280                           ;BVH2_Appl_Layer.c: 1300: Cb14_oDryRunAlarm = 1;
 15281  13BE  01BC               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 15282  13BF  0ABC               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
 15283                           
 15284                           ;BVH2_Appl_Layer.c: 1301: }
 15285  13C0  2BCF               	goto	l13964
 15286  13C1                     l13954:	
 15287                           
 15288                           ;BVH2_Appl_Layer.c: 1302: else {
 15289                           ;BVH2_Appl_Layer.c: 1303: Cb14_StateCnt = Cb14_StateCnt + 1 ;
 15290  13C1  0823               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256),w
 15291  13C2  3E01               	addlw	1
 15292  13C3  00A3               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256)
 15293  13C4  3000               	movlw	0
 15294  13C5  3D24               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256),w
 15295  13C6  00A4               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256)
 15296  13C7  2BCF               	goto	l13964
 15297  13C8                     l1711:	
 15298                           
 15299                           ;BVH2_Appl_Layer.c: 1314: else {
 15300                           ;BVH2_Appl_Layer.c: 1316: if (!(SIBFS_Dry_Running_b.Cb14_Dry_Running)) {
 15301  13C8  183E               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 15302  13C9  2BCF               	goto	l13964
 15303                           
 15304                           ;BVH2_Appl_Layer.c: 1317: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
 15305  13CA  143E               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 15306                           
 15307                           ;BVH2_Appl_Layer.c: 1320: if (ui8_ResetMatlab == 1) {
 15308  13CB  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 15309  13CC  2BCF               	goto	l13964
 15310  13CD                     l13960:	
 15311                           
 15312                           ;BVH2_Appl_Layer.c: 1322: SIBFS_Dry_Running_b.Cb15_greenState = 1;
 15313  13CD  14BE               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15314                           
 15315                           ;BVH2_Appl_Layer.c: 1285: Cb14_oDryRunAlarm = 0;
 15316  13CE  01BC               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 15317  13CF                     l13964:	
 15318                           
 15319                           ;BVH2_Appl_Layer.c: 1324: }
 15320                           ;BVH2_Appl_Layer.c: 1325: }
 15321                           ;BVH2_Appl_Layer.c: 1326: }
 15322                           ;BVH2_Appl_Layer.c: 1327: }
 15323                           ;BVH2_Appl_Layer.c: 1334: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenState) {
 15324  13CF  0020               	movlb	0	; select bank0
 15325  13D0  1CDC               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 15326  13D1  2BDF               	goto	l1725
 15327                           
 15328                           ;BVH2_Appl_Layer.c: 1339: if (Cb14_oDryRunAlarm) {
 15329  13D2  0021               	movlb	1	; select bank1
 15330  13D3  083C               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15331  13D4  1903               	btfsc	3,2
 15332  13D5  2C21               	goto	l14012
 15333                           
 15334                           ;BVH2_Appl_Layer.c: 1342: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 15335  13D6  0020               	movlb	0	; select bank0
 15336  13D7  10DC               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 15337                           
 15338                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
 15339  13D8  155C               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 15340  13D9                     L30:	
 15341                           
 15342                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 15343  13D9  15DC               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15344                           
 15345                           ;BVH2_Appl_Layer.c: 1345: Cb19_Counter = 0 ;
 15346                           
 15347                           ;BVH2_Appl_Layer.c: 1346: Cb19_oDryRun66 = 1;
 15348  13DA  27EC  3190         	fcall	PL112	;call to abstracted procedure
 15349  13DC  0AC3               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),f
 15350                           
 15351                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun55 = 0;
 15352  13DD  01C4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15353                           
 15354                           ;BVH2_Appl_Layer.c: 1348: }
 15355                           ;BVH2_Appl_Layer.c: 1351: }
 15356  13DE  2C21               	goto	l14012
 15357  13DF                     l1725:	
 15358                           
 15359                           ;BVH2_Appl_Layer.c: 1352: else {
 15360                           ;BVH2_Appl_Layer.c: 1354: if (SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm) {
 15361  13DF  1D5C               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 15362  13E0  2C12               	goto	l1728
 15363                           
 15364                           ;BVH2_Appl_Layer.c: 1359: if (!(Cb14_oDryRunAlarm)) {
 15365  13E1  0021               	movlb	1	; select bank1
 15366  13E2  083C               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15367  13E3  1D03               	btfss	3,2
 15368  13E4  2BEF               	goto	l1729
 15369                           
 15370                           ;BVH2_Appl_Layer.c: 1364: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 15371  13E5  0020               	movlb	0	; select bank0
 15372  13E6  1DDC               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15373  13E7  2BEA               	goto	l1730
 15374                           
 15375                           ;BVH2_Appl_Layer.c: 1365: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15376  13E8  11DC               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15377                           
 15378                           ;BVH2_Appl_Layer.c: 1366: }
 15379  13E9  2BED               	goto	l1731
 15380  13EA                     l1730:	
 15381                           
 15382                           ;BVH2_Appl_Layer.c: 1367: else {
 15383                           ;BVH2_Appl_Layer.c: 1369: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 15384  13EA  1E5C               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15385  13EB  2BED               	goto	l1731
 15386                           
 15387                           ;BVH2_Appl_Layer.c: 1370: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15388  13EC  125C               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15389  13ED                     l1731:	
 15390                           
 15391                           ;BVH2_Appl_Layer.c: 1371: }
 15392                           ;BVH2_Appl_Layer.c: 1372: }
 15393                           ;BVH2_Appl_Layer.c: 1373: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 15394  13ED  115C               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 15395  13EE  2C1A               	goto	L39
 15396  13EF                     l1729:	
 15397                           ;BVH2_Appl_Layer.c: 1378: }
 15398                           
 15399                           ;BVH2_Appl_Layer.c: 1374: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 15400                           
 15401                           
 15402                           ;BVH2_Appl_Layer.c: 1379: else {
 15403                           ;BVH2_Appl_Layer.c: 1381: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 15404  13EF  0020               	movlb	0	; select bank0
 15405  13F0  1DDC               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15406  13F1  2C07               	goto	l1734
 15407                           
 15408                           ;BVH2_Appl_Layer.c: 1384: if (Cb19_Counter > 400) {
 15409  13F2  27FC  3190         	fcall	PL136	;call to abstracted procedure
 15410  13F4  1903               	skipnz
 15411  13F5  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15412  13F6  1C03               	skipc
 15413  13F7  2C00               	goto	l13992
 15414                           
 15415                           ;BVH2_Appl_Layer.c: 1387: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15416  13F8  0020               	movlb	0	; select bank0
 15417  13F9  11DC               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15418                           
 15419                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
 15420  13FA  165C               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15421                           
 15422                           ;BVH2_Appl_Layer.c: 1389: Cb19_Counter = 0 ;
 15423                           
 15424                           ;BVH2_Appl_Layer.c: 1390: Cb19_oDryRun66 = 0;
 15425  13FB  27EC  3190         	fcall	PL112	;call to abstracted procedure
 15426                           
 15427                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun55 = 1;
 15428  13FD  01C4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15429  13FE  0AC4               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),f
 15430                           
 15431                           ;BVH2_Appl_Layer.c: 1392: }
 15432  13FF  2C21               	goto	l14012
 15433  1400                     l13992:	
 15434                           
 15435                           ;BVH2_Appl_Layer.c: 1393: else {
 15436                           ;BVH2_Appl_Layer.c: 1394: Cb19_Counter = Cb19_Counter + 1 ;
 15437  1400  0822               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15438  1401  3E01               	addlw	1
 15439  1402  00A2               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15440  1403  3000               	movlw	0
 15441  1404  3D23               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 15442  1405  00A3               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15443  1406  2C21               	goto	l14012
 15444  1407                     l1734:	
 15445                           
 15446                           ;BVH2_Appl_Layer.c: 1400: else {
 15447                           ;BVH2_Appl_Layer.c: 1402: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 15448  1407  1E5C               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15449  1408  2C21               	goto	l14012
 15450                           
 15451                           ;BVH2_Appl_Layer.c: 1405: if (Cb19_Counter > 400) {
 15452  1409  27FC  3190         	fcall	PL136	;call to abstracted procedure
 15453  140B  1903               	skipnz
 15454  140C  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15455  140D  1C03               	skipc
 15456  140E  2C00               	goto	l13992
 15457                           
 15458                           ;BVH2_Appl_Layer.c: 1408: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15459  140F  0020               	movlb	0	; select bank0
 15460  1410  125C               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15461  1411  2BD9               	goto	L30
 15462  1412                     l1728:	
 15463                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
 15464                           
 15465                           
 15466                           ;BVH2_Appl_Layer.c: 1426: else {
 15467                           ;BVH2_Appl_Layer.c: 1428: if (!(SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm)) {
 15468  1412  185C               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 15469  1413  2C21               	goto	l14012
 15470                           
 15471                           ;BVH2_Appl_Layer.c: 1429: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 15472  1414  145C               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 15473                           
 15474                           ;BVH2_Appl_Layer.c: 1433: if (!(Cb14_oDryRunAlarm)) {
 15475  1415  0021               	movlb	1	; select bank1
 15476  1416  083C               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15477  1417  1D03               	btfss	3,2
 15478  1418  2C21               	goto	l14012
 15479                           
 15480                           ;BVH2_Appl_Layer.c: 1435: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
 15481  1419  0020               	movlb	0	; select bank0
 15482  141A                     L39:	
 15483  141A  14DC               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 15484                           
 15485                           ;BVH2_Appl_Layer.c: 1375: Cb19_oDryRun55 = 0;
 15486  141B  0022               	movlb	2	; select bank2
 15487  141C  01C4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15488                           
 15489                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun66 = 0;
 15490  141D  01C3               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15491                           
 15492                           ;BVH2_Appl_Layer.c: 1377: Cb19_Counter = 0 ;
 15493  141E  0021               	movlb	1	; select bank1
 15494  141F  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15495  1420  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15496  1421                     l14012:	
 15497                           
 15498                           ;BVH2_Appl_Layer.c: 1439: }
 15499                           ;BVH2_Appl_Layer.c: 1440: }
 15500                           ;BVH2_Appl_Layer.c: 1441: }
 15501                           ;BVH2_Appl_Layer.c: 1442: }
 15502                           ;BVH2_Appl_Layer.c: 1447: bool_DryRunningAlarm = Cb19_oDryRun66;
 15503  1421  0022               	movlb	2	; select bank2
 15504  1422  0843               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 15505  1423  0021               	movlb	1	; select bank1
 15506  1424  00DA               	movwf	_bool_DryRunningAlarm^(0+128)
 15507                           
 15508                           ;BVH2_Appl_Layer.c: 1450: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 15509  1425  0022               	movlb	2	; select bank2
 15510  1426  0840               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 15511  1427  0021               	movlb	1	; select bank1
 15512  1428  00DB               	movwf	_bool_CPU_TempAlarm^(0+128)
 15513                           
 15514                           ;BVH2_Appl_Layer.c: 1455: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 15515  1429  1C3F               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15516  142A  2C36               	goto	l1744
 15517                           
 15518                           ;BVH2_Appl_Layer.c: 1460: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 15519  142B  278A  3190         	fcall	PL26	;call to abstracted procedure
 15520  142D  277D  3190         	fcall	PL24	;call to abstracted procedure
 15521  142F  1803               	skipnc
 15522  1430  2C6D               	goto	l14062
 15523                           
 15524                           ;BVH2_Appl_Layer.c: 1463: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 15525  1431  0021               	movlb	1	; select bank1
 15526  1432  103F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15527                           
 15528                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
 15529  1433  153F               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15530  1434                     l14022:	
 15531                           
 15532                           ;BVH2_Appl_Layer.c: 1465: Cb9_StateCnt = 0 ;
 15533  1434  01C0               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 15534  1435  2C6D               	goto	l14062
 15535  1436                     l1744:	
 15536                           
 15537                           ;BVH2_Appl_Layer.c: 1470: else {
 15538                           ;BVH2_Appl_Layer.c: 1472: if (SIBFS_Current_Analysis_low_b.Cb11_Wait) {
 15539  1436  1CBF               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15540  1437  2C4A               	goto	l1747
 15541                           
 15542                           ;BVH2_Appl_Layer.c: 1477: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 15543  1438  278A  3190         	fcall	PL26	;call to abstracted procedure
 15544  143A  277D  3190         	fcall	PL24	;call to abstracted procedure
 15545  143C  1803               	skipnc
 15546  143D  2C41               	goto	l14028
 15547                           
 15548                           ;BVH2_Appl_Layer.c: 1479: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15549  143E  0021               	movlb	1	; select bank1
 15550  143F  10BF               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15551  1440  2C57               	goto	L31
 15552  1441                     l14028:	
 15553                           ;BVH2_Appl_Layer.c: 1482: }
 15554                           
 15555                           ;BVH2_Appl_Layer.c: 1481: Cb9_oCurrentAlarm = 1;
 15556                           
 15557                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 15558                           
 15559                           
 15560                           ;BVH2_Appl_Layer.c: 1483: else {
 15561                           ;BVH2_Appl_Layer.c: 1484: if (Cb9_StateCnt > 100) {
 15562  1441  3065               	movlw	101
 15563  1442  0021               	movlb	1	; select bank1
 15564  1443  0240               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 15565  1444  1C03               	skipc
 15566  1445  2C48               	goto	l14034
 15567                           
 15568                           ;BVH2_Appl_Layer.c: 1486: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15569  1446  10BF               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15570  1447  2C6A               	goto	l14058
 15571  1448                     l14034:	
 15572                           ;BVH2_Appl_Layer.c: 1489: }
 15573                           
 15574                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15575                           
 15576                           
 15577                           ;BVH2_Appl_Layer.c: 1490: else {
 15578                           ;BVH2_Appl_Layer.c: 1491: Cb9_StateCnt = Cb9_StateCnt + 1 ;
 15579  1448  0AC0               	incf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),f
 15580  1449  2C6D               	goto	l14062
 15581  144A                     l1747:	
 15582                           
 15583                           ;BVH2_Appl_Layer.c: 1497: else {
 15584                           ;BVH2_Appl_Layer.c: 1499: if (SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent) {
 15585  144A  1D3F               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15586  144B  2C5C               	goto	l1753
 15587                           
 15588                           ;BVH2_Appl_Layer.c: 1504: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 15589  144C  2793  3190         	fcall	PL30	;call to abstracted procedure
 15590  144E  1803               	skipnc
 15591  144F  2C52               	goto	l14042
 15592                           
 15593                           ;BVH2_Appl_Layer.c: 1506: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15594  1450  113F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15595  1451  2C6A               	goto	l14058
 15596  1452                     l14042:	
 15597                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15598                           
 15599                           
 15600                           ;BVH2_Appl_Layer.c: 1510: else {
 15601                           ;BVH2_Appl_Layer.c: 1511: if (Cb9_StateCnt > 50) {
 15602  1452  3033               	movlw	51
 15603  1453  0240               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 15604  1454  1C03               	skipc
 15605  1455  2C48               	goto	l14034
 15606                           
 15607                           ;BVH2_Appl_Layer.c: 1513: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15608  1456  113F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15609  1457                     L31:	
 15610                           
 15611                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 15612  1457  15BF               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15613                           
 15614                           ;BVH2_Appl_Layer.c: 1515: Cb9_oCurrentAlarm = 1;
 15615  1458  0022               	movlb	2	; select bank2
 15616  1459  01BD               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 15617  145A  0ABD               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 15618                           
 15619                           ;BVH2_Appl_Layer.c: 1516: }
 15620  145B  2C6D               	goto	l14062
 15621  145C                     l1753:	
 15622                           
 15623                           ;BVH2_Appl_Layer.c: 1524: else {
 15624                           ;BVH2_Appl_Layer.c: 1526: if (SIBFS_Current_Analysis_low_b.Cb13_redState) {
 15625  145C  1DBF               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15626  145D  2C65               	goto	l1759
 15627                           
 15628                           ;BVH2_Appl_Layer.c: 1531: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 15629  145E  2793  3190         	fcall	PL30	;call to abstracted procedure
 15630  1460  1803               	skipnc
 15631  1461  2C6D               	goto	l14062
 15632                           
 15633                           ;BVH2_Appl_Layer.c: 1534: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 15634  1462  11BF               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15635                           
 15636                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
 15637  1463  14BF               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15638  1464  2C34               	goto	l14022
 15639  1465                     l1759:	
 15640                           
 15641                           ;BVH2_Appl_Layer.c: 1541: else {
 15642                           ;BVH2_Appl_Layer.c: 1543: if (!(SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low)) 
      +                          {
 15643  1465  1A3F               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 15644  1466  2C6D               	goto	l14062
 15645                           
 15646                           ;BVH2_Appl_Layer.c: 1544: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
 15647  1467  163F               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 15648                           
 15649                           ;BVH2_Appl_Layer.c: 1547: if (ui8_ResetMatlab == 1) {
 15650  1468  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 15651  1469  2C6D               	goto	l14062
 15652  146A                     l14058:	
 15653                           
 15654                           ;BVH2_Appl_Layer.c: 1549: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15655  146A  143F               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15656                           
 15657                           ;BVH2_Appl_Layer.c: 1488: Cb9_oCurrentAlarm = 0;
 15658  146B  0022               	movlb	2	; select bank2
 15659  146C  01BD               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 15660  146D                     l14062:	
 15661                           
 15662                           ;BVH2_Appl_Layer.c: 1551: }
 15663                           ;BVH2_Appl_Layer.c: 1552: }
 15664                           ;BVH2_Appl_Layer.c: 1553: }
 15665                           ;BVH2_Appl_Layer.c: 1554: }
 15666                           ;BVH2_Appl_Layer.c: 1555: }
 15667                           ;BVH2_Appl_Layer.c: 1556: }
 15668                           ;BVH2_Appl_Layer.c: 1561: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 15669  146D  0022               	movlb	2	; select bank2
 15670  146E  083D               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 15671  146F  0021               	movlb	1	; select bank1
 15672  1470  00D8               	movwf	_bool_HighCurrentAlarm^(0+128)
 15673                           
 15674                           ;BVH2_Appl_Layer.c: 1564: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 15675  1471  0022               	movlb	2	; select bank2
 15676  1472  084E               	movf	_Cb34_oPWM_Alarm^(0+256),w
 15677  1473  00DC               	movwf	_bool_PWMin_err_Alarm^(0+256)
 15678                           
 15679                           ;BVH2_Appl_Layer.c: 1567: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 15680  1474  0848               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 15681  1475  00DA               	movwf	_bool_UbatAlarm^(0+256)
 15682                           
 15683                           ;BVH2_Appl_Layer.c: 1568: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 15684  1476  0024               	movlb	4	; select bank4
 15685  1477  01AC               	clrf	_BVH2_Appl_Layer$1210^(0+512)
 15686  1478  0AAC               	incf	_BVH2_Appl_Layer$1210^(0+512),f
 15687  1479  0022               	movlb	2	; select bank2
 15688  147A  0841               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
 15689  147B  1D03               	btfss	3,2
 15690  147C  2C85               	goto	l14078
 15691  147D  0850               	movf	_Cb1_oCurrentAlarm^(0+256),w
 15692  147E  1D03               	btfss	3,2
 15693  147F  2C85               	goto	l14078
 15694  1480  0844               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),w
 15695  1481  1D03               	btfss	3,2
 15696  1482  2C85               	goto	l14078
 15697  1483  0024               	movlb	4	; select bank4
 15698  1484  01AC               	clrf	_BVH2_Appl_Layer$1210^(0+512)
 15699  1485                     l14078:	
 15700  1485  0024               	movlb	4	; select bank4
 15701  1486  082C               	movf	_BVH2_Appl_Layer$1210^(0+512),w
 15702  1487  0021               	movlb	1	; select bank1
 15703  1488  00D9               	movwf	_bool_MotorStalled^(0+128)
 15704                           
 15705                           ;BVH2_Appl_Layer.c: 1574: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 15706  1489  0022               	movlb	2	; select bank2
 15707  148A  083F               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 15708  148B  00DB               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 15709                           
 15710                           ;BVH2_Appl_Layer.c: 1575: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 15711  148C  0024               	movlb	4	; select bank4
 15712  148D  01AD               	clrf	_BVH2_Appl_Layer$1211^(0+512)
 15713  148E  0AAD               	incf	_BVH2_Appl_Layer$1211^(0+512),f
 15714  148F  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 15715  1490  1D03               	btfss	3,2
 15716  1491  2C9C               	goto	l14092
 15717  1492  0022               	movlb	2	; select bank2
 15718  1493  0842               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),w
 15719  1494  1D03               	btfss	3,2
 15720  1495  2C9C               	goto	l14092
 15721  1496  0021               	movlb	1	; select bank1
 15722  1497  083C               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15723  1498  1D03               	btfss	3,2
 15724  1499  2C9C               	goto	l14092
 15725  149A  0024               	movlb	4	; select bank4
 15726  149B  01AD               	clrf	_BVH2_Appl_Layer$1211^(0+512)
 15727  149C                     l14092:	
 15728  149C  0024               	movlb	4	; select bank4
 15729  149D  082D               	movf	_BVH2_Appl_Layer$1211^(0+512),w
 15730  149E  00B4               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512)
 15731                           
 15732                           ;BVH2_Appl_Layer.c: 1576: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 15733  149F  01AE               	clrf	_BVH2_Appl_Layer$1212^(0+512)
 15734  14A0  0AAE               	incf	_BVH2_Appl_Layer$1212^(0+512),f
 15735  14A1  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 15736  14A2  1D03               	btfss	3,2
 15737  14A3  2CAA               	goto	l14102
 15738  14A4  0021               	movlb	1	; select bank1
 15739  14A5  0849               	movf	_bool_ControlLoopMode^(0+128),w
 15740  14A6  1D03               	btfss	3,2
 15741  14A7  2CAA               	goto	l14102
 15742  14A8  0024               	movlb	4	; select bank4
 15743  14A9  01AE               	clrf	_BVH2_Appl_Layer$1212^(0+512)
 15744  14AA                     l14102:	
 15745  14AA  0024               	movlb	4	; select bank4
 15746  14AB  082E               	movf	_BVH2_Appl_Layer$1212^(0+512),w
 15747  14AC  00B6               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512)
 15748                           
 15749                           ;BVH2_Appl_Layer.c: 1577: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 15750  14AD  0022               	movlb	2	; select bank2
 15751  14AE  066D               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 15752  14AF  1903               	btfsc	3,2
 15753  14B0  2CBB               	goto	l14110
 15754  14B1  086E               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
 15755  14B2  1D03               	btfss	3,2
 15756  14B3  2CBB               	goto	l14110
 15757                           
 15758                           ;BVH2_Appl_Layer.c: 1578: {
 15759                           ;BVH2_Appl_Layer.c: 1579: X_Sb4_Intergrator = 80000 ;
 15760  14B4  3001               	movlw	1
 15761  14B5  01EC               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 15762  14B6  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 15763  14B7  3038               	movlw	56
 15764  14B8  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 15765  14B9  3080               	movlw	128
 15766  14BA  00E9               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 15767  14BB                     l14110:	
 15768                           
 15769                           ;BVH2_Appl_Layer.c: 1580: }
 15770                           ;BVH2_Appl_Layer.c: 1584: if (Sb1_Logical_Operator3) {
 15771  14BB  0024               	movlb	4	; select bank4
 15772  14BC  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 15773  14BD  1903               	btfsc	3,2
 15774  14BE  2CC1               	goto	l14114
 15775                           
 15776                           ;BVH2_Appl_Layer.c: 1585: Sb2_Switch2 = 0 ;
 15777  14BF  01B9               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15778  14C0  2D34               	goto	L34
 15779  14C1                     l14114:	
 15780                           ;BVH2_Appl_Layer.c: 1586: }
 15781                           
 15782                           
 15783                           ;BVH2_Appl_Layer.c: 1587: else {
 15784                           ;BVH2_Appl_Layer.c: 1590: if (bool_ControlLoopMode) {
 15785  14C1  0021               	movlb	1	; select bank1
 15786  14C2  0849               	movf	_bool_ControlLoopMode^(0+128),w
 15787  14C3  1903               	btfsc	3,2
 15788  14C4  2D36               	goto	l14134
 15789                           
 15790                           ;BVH2_Appl_Layer.c: 1593: if (Sb1_Logical_Operator5) {
 15791  14C5  0024               	movlb	4	; select bank4
 15792  14C6  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 15793  14C7  1903               	btfsc	3,2
 15794  14C8  2CCB               	goto	l14120
 15795  14C9                     l14118:	
 15796                           
 15797                           ;BVH2_Appl_Layer.c: 1594: Sb2_Switch2 = Sb2_Fixed_Power;
 15798  14C9  30CA               	movlw	202
 15799  14CA  2D33               	goto	L40
 15800  14CB                     l14120:	
 15801                           ;BVH2_Appl_Layer.c: 1595: }
 15802                           
 15803                           
 15804                           ;BVH2_Appl_Layer.c: 1596: else {
 15805                           ;BVH2_Appl_Layer.c: 1598: UInt16 Sb3_Product1 ;
 15806                           ;BVH2_Appl_Layer.c: 1599: Int16 Sb3_Sum1;
 15807                           ;BVH2_Appl_Layer.c: 1607: Sb3_Product1 = (UInt16) (((UInt16) (140 << 8)) / 160 );
 15808  14CB  30E0               	movlw	224
 15809  14CC  00AF               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+512)
 15810  14CD  01B0               	clrf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512)
 15811                           
 15812                           ;BVH2_Appl_Layer.c: 1613: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>
 15813                           ;BVH2_Appl_Layer.c: 1614: 8)) + ((Int16) (((Int16) (-((Int16) (UInt16) ((((UInt32) Sb3_P
      +                          roduct1) * 95) >> 7)))) + 200)));
 15814  14CE  0020               	movlb	0	; select bank0
 15815  14CF  085E               	movf	_ui8_PWM_dc_mat,w
 15816  14D0  00A4               	movwf	___lmul@multiplier
 15817  14D1  01A5               	clrf	___lmul@multiplier+1
 15818  14D2  01A6               	clrf	___lmul@multiplier+2
 15819  14D3  01A7               	clrf	___lmul@multiplier+3
 15820  14D4  0024               	movlb	4	; select bank4
 15821  14D5  082F               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+512),w
 15822  14D6  0020               	movlb	0	; select bank0
 15823  14D7  00A8               	movwf	___lmul@multiplicand
 15824  14D8  0024               	movlb	4	; select bank4
 15825  14D9  0830               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512),w
 15826  14DA  0020               	movlb	0	; select bank0
 15827  14DB  00A9               	movwf	___lmul@multiplicand+1
 15828  14DC  01AA               	clrf	___lmul@multiplicand+2
 15829  14DD  01AB               	clrf	___lmul@multiplicand+3
 15830  14DE  2644  3190         	fcall	___lmul
 15831  14E0  0826               	movf	?___lmul+2,w
 15832  14E1  0024               	movlb	4	; select bank4
 15833  14E2  00BD               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512)
 15834  14E3  0020               	movlb	0	; select bank0
 15835  14E4  0825               	movf	?___lmul+1,w
 15836  14E5  0024               	movlb	4	; select bank4
 15837  14E6  00BC               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512)
 15838  14E7  082F               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+512),w
 15839  14E8  0020               	movlb	0	; select bank0
 15840  14E9  00A4               	movwf	___lmul@multiplier
 15841  14EA  0024               	movlb	4	; select bank4
 15842  14EB  0830               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512),w
 15843  14EC  0020               	movlb	0	; select bank0
 15844  14ED  00A5               	movwf	___lmul@multiplier+1
 15845  14EE  305F               	movlw	95
 15846  14EF  01A6               	clrf	___lmul@multiplier+2
 15847  14F0  01A7               	clrf	___lmul@multiplier+3
 15848  14F1  00A8               	movwf	___lmul@multiplicand
 15849  14F2  01A9               	clrf	___lmul@multiplicand+1
 15850  14F3  01AA               	clrf	___lmul@multiplicand+2
 15851  14F4  01AB               	clrf	___lmul@multiplicand+3
 15852  14F5  2644  3190         	fcall	___lmul
 15853  14F7  0824               	movf	?___lmul,w
 15854  14F8  00B2               	movwf	??_BVH2_Appl_Layer
 15855  14F9  0825               	movf	?___lmul+1,w
 15856  14FA  00B3               	movwf	??_BVH2_Appl_Layer+1
 15857  14FB  0826               	movf	?___lmul+2,w
 15858  14FC  00B4               	movwf	??_BVH2_Appl_Layer+2
 15859  14FD  0827               	movf	?___lmul+3,w
 15860  14FE  00B5               	movwf	??_BVH2_Appl_Layer+3
 15861  14FF  3007               	movlw	7
 15862  1500                     u12945:	
 15863  1500  36B5               	lsrf	??_BVH2_Appl_Layer+3,f
 15864  1501  0CB4               	rrf	??_BVH2_Appl_Layer+2,f
 15865  1502  0CB3               	rrf	??_BVH2_Appl_Layer+1,f
 15866  1503  0CB2               	rrf	??_BVH2_Appl_Layer,f
 15867  1504  0B89               	decfsz	9,f
 15868  1505  2D00               	goto	u12945
 15869  1506  0832               	movf	??_BVH2_Appl_Layer,w
 15870  1507  0024               	movlb	4	; select bank4
 15871  1508  02BC               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 15872  1509  0020               	movlb	0	; select bank0
 15873  150A  0833               	movf	??_BVH2_Appl_Layer+1,w
 15874  150B  0024               	movlb	4	; select bank4
 15875  150C  3BBD               	subwfb	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 15876  150D  30C8               	movlw	200
 15877  150E  07BC               	addwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 15878  150F  1803               	skipnc
 15879  1510  0ABD               	incf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 15880                           
 15881                           ;BVH2_Appl_Layer.c: 1617: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 15882  1511  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 15883  1512  27D8  3190         	fcall	PL86	;call to abstracted procedure
 15884  1514  1D03               	skipz
 15885  1515  2D19               	goto	u12955
 15886  1516  30C9               	movlw	201
 15887  1517  0024               	movlb	4	; select bank4
 15888  1518  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15889  1519                     u12955:	
 15890  1519  1803               	skipnc
 15891  151A  2D31               	goto	l14132
 15892  151B  0024               	movlb	4	; select bank4
 15893  151C  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 15894  151D  27D8  3190         	fcall	PL86	;call to abstracted procedure
 15895  151F  1D03               	skipz
 15896  1520  2D24               	goto	u12965
 15897  1521  303C               	movlw	60
 15898  1522  0024               	movlb	4	; select bank4
 15899  1523  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15900  1524                     u12965:	
 15901  1524  1C03               	skipc
 15902  1525  2D29               	goto	l14130
 15903  1526  0024               	movlb	4	; select bank4
 15904  1527  083C               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15905  1528  2D2B               	goto	L35
 15906  1529                     l14130:	
 15907  1529  303C               	movlw	60
 15908  152A  0024               	movlb	4	; select bank4
 15909  152B                     L35:	
 15910  152B  00A4               	movwf	_BVH2_Appl_Layer$1215^(0+512)
 15911  152C  01A5               	clrf	(_BVH2_Appl_Layer$1215+1)^(0+512)
 15912  152D  0825               	movf	(_BVH2_Appl_Layer$1215+1)^(0+512),w
 15913  152E  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15914  152F  0824               	movf	_BVH2_Appl_Layer$1215^(0+512),w
 15915  1530  2D8D               	goto	L36
 15916  1531                     l14132:	
 15917  1531  30C8               	movlw	200
 15918  1532  0024               	movlb	4	; select bank4
 15919  1533                     L40:	
 15920  1533  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15921  1534                     L34:	
 15922  1534  01BA               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15923  1535  2D8E               	goto	l14148
 15924  1536                     l14134:	
 15925                           
 15926                           ;BVH2_Appl_Layer.c: 1620: else {
 15927                           ;BVH2_Appl_Layer.c: 1622: Int16 Sb4_PI_sum;
 15928                           ;BVH2_Appl_Layer.c: 1627: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / (
      +                          (Int32) 800))) + ((UInt16)
 15929                           ;BVH2_Appl_Layer.c: 1628: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 15930  1536  0020               	movlb	0	; select bank0
 15931  1537  3003               	movlw	3
 15932  1538  01A7               	clrf	___aldiv@divisor+3
 15933  1539  01A6               	clrf	___aldiv@divisor+2
 15934  153A  00A5               	movwf	___aldiv@divisor+1
 15935  153B  3020               	movlw	32
 15936  153C  00A4               	movwf	___aldiv@divisor
 15937  153D  0022               	movlb	2	; select bank2
 15938  153E  086C               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 15939  153F  0020               	movlb	0	; select bank0
 15940  1540  00AB               	movwf	___aldiv@dividend+3
 15941  1541  0022               	movlb	2	; select bank2
 15942  1542  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 15943  1543  0020               	movlb	0	; select bank0
 15944  1544  00AA               	movwf	___aldiv@dividend+2
 15945  1545  0022               	movlb	2	; select bank2
 15946  1546  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 15947  1547  0020               	movlb	0	; select bank0
 15948  1548  00A9               	movwf	___aldiv@dividend+1
 15949  1549  0022               	movlb	2	; select bank2
 15950  154A  0869               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 15951  154B  0020               	movlb	0	; select bank0
 15952  154C  00A8               	movwf	___aldiv@dividend
 15953  154D  2711  3190         	fcall	___aldiv
 15954  154F  0825               	movf	?___aldiv+1,w
 15955  1550  0024               	movlb	4	; select bank4
 15956  1551  00BF               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512)
 15957  1552  0020               	movlb	0	; select bank0
 15958  1553  0824               	movf	?___aldiv,w
 15959  1554  0024               	movlb	4	; select bank4
 15960  1555  00BE               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512)
 15961  1556  0022               	movlb	2	; select bank2
 15962  1557  085E               	movf	_ui8_Kp_mat^(0+256),w
 15963  1558  0020               	movlb	0	; select bank0
 15964  1559  00A4               	movwf	___wmul@multiplier
 15965  155A  01A5               	clrf	___wmul@multiplier+1
 15966  155B  27C7               	fcall	PL70	;call to abstracted procedure
 15967  155C  318E  260D  3190   	fcall	___wmul
 15968  155F  0824               	movf	?___wmul,w
 15969  1560  0024               	movlb	4	; select bank4
 15970  1561  07BE               	addwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),f
 15971  1562  0020               	movlb	0	; select bank0
 15972  1563  0825               	movf	?___wmul+1,w
 15973  1564  0024               	movlb	4	; select bank4
 15974  1565  3DBF               	addwfc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),f
 15975                           
 15976                           ;BVH2_Appl_Layer.c: 1631: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 15977  1566  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15978  1567  27D8  3190         	fcall	PL86	;call to abstracted procedure
 15979  1569  1D03               	skipz
 15980  156A  2D6E               	goto	u12975
 15981  156B  3001               	movlw	1
 15982  156C  0024               	movlb	4	; select bank4
 15983  156D  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15984  156E                     u12975:	
 15985  156E  1C03               	skipc
 15986  156F  2D78               	goto	l1790
 15987  1570  3000               	movlw	0
 15988  1571  0024               	movlb	4	; select bank4
 15989  1572  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15990  1573  30CB               	movlw	203
 15991  1574  1903               	skipnz
 15992  1575  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15993  1576  1803               	skipnc
 15994  1577  2CC9               	goto	l14118
 15995  1578                     l1790:	
 15996  1578  0024               	movlb	4	; select bank4
 15997  1579  1BBF               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),7
 15998  157A  2D87               	goto	l14144
 15999  157B  3000               	movlw	0
 16000  157C  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 16001  157D  3028               	movlw	40
 16002  157E  1903               	skipnz
 16003  157F  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 16004  1580  1C03               	skipc
 16005  1581  2D87               	goto	l14144
 16006  1582  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 16007  1583  00A7               	movwf	(_BVH2_Appl_Layer$1217+1)^(0+512)
 16008  1584  083E               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 16009  1585  00A6               	movwf	_BVH2_Appl_Layer$1217^(0+512)
 16010  1586  2D8A               	goto	l1794
 16011  1587                     l14144:	
 16012  1587  3028               	movlw	40
 16013  1588  00A6               	movwf	_BVH2_Appl_Layer$1217^(0+512)
 16014  1589  01A7               	clrf	(_BVH2_Appl_Layer$1217+1)^(0+512)
 16015  158A                     l1794:	
 16016  158A  0827               	movf	(_BVH2_Appl_Layer$1217+1)^(0+512),w
 16017  158B  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 16018  158C  0826               	movf	_BVH2_Appl_Layer$1217^(0+512),w
 16019  158D                     L36:	
 16020  158D  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 16021  158E                     l14148:	
 16022                           
 16023                           ;BVH2_Appl_Layer.c: 1640: bl_Pumpoff_Alarm = Sb1_Logical_Operator2;
 16024  158E  083A               	movf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512),w
 16025  158F  0020               	movlb	0	; select bank0
 16026  1590  00B3               	movwf	??_BVH2_Appl_Layer+1
 16027  1591  0024               	movlb	4	; select bank4
 16028  1592  0839               	movf	BVH2_Appl_Layer@Sb2_Switch2^(0+512),w
 16029  1593  0020               	movlb	0	; select bank0
 16030  1594  00B2               	movwf	??_BVH2_Appl_Layer
 16031  1595  36B3               	lsrf	??_BVH2_Appl_Layer+1,f
 16032  1596  0CB2               	rrf	??_BVH2_Appl_Layer,f
 16033  1597  0832               	movf	??_BVH2_Appl_Layer,w
 16034  1598  0022               	movlb	2	; select bank2
 16035  1599  00DD               	movwf	_ui8_duty_cycle_mat^(0+256)
 16036                           
 16037                           ;BVH2_Appl_Layer.c: 1641: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 16038  159A  0024               	movlb	4	; select bank4
 16039  159B  0836               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512),w
 16040  159C  0022               	movlb	2	; select bank2
 16041  159D  00ED               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 16042                           
 16043                           ;BVH2_Appl_Layer.c: 1645: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<
 16044                           ;BVH2_Appl_Layer.c: 1646: 3));
 16045  159E  0023               	movlb	3	; select bank3
 16046  159F  084B               	movf	(_ui8_Ki_mat+1)^(0+384),w
 16047  15A0  0020               	movlb	0	; select bank0
 16048  15A1  00A5               	movwf	___wmul@multiplier+1
 16049  15A2  0023               	movlb	3	; select bank3
 16050  15A3  084A               	movf	_ui8_Ki_mat^(0+384),w
 16051  15A4  0020               	movlb	0	; select bank0
 16052  15A5  00A4               	movwf	___wmul@multiplier
 16053  15A6  27C7               	fcall	PL70	;call to abstracted procedure
 16054  15A7  318E  260D  3190   	fcall	___wmul
 16055  15AA  0824               	movf	?___wmul,w
 16056  15AB  00B2               	movwf	??_BVH2_Appl_Layer
 16057  15AC  0825               	movf	?___wmul+1,w
 16058  15AD  00B3               	movwf	??_BVH2_Appl_Layer+1
 16059  15AE  35B2               	lslf	??_BVH2_Appl_Layer,f
 16060  15AF  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
 16061  15B0  35B2               	lslf	??_BVH2_Appl_Layer,f
 16062  15B1  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
 16063  15B2  35B2               	lslf	??_BVH2_Appl_Layer,f
 16064  15B3  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
 16065  15B4  0832               	movf	??_BVH2_Appl_Layer,w
 16066  15B5  00B4               	movwf	??_BVH2_Appl_Layer+2
 16067  15B6  0833               	movf	??_BVH2_Appl_Layer+1,w
 16068  15B7  00B5               	movwf	??_BVH2_Appl_Layer+3
 16069  15B8  3000               	movlw	0
 16070  15B9  1BB5               	btfsc	??_BVH2_Appl_Layer+3,7
 16071  15BA  30FF               	movlw	255
 16072  15BB  00B6               	movwf	??_BVH2_Appl_Layer+4
 16073  15BC  00B7               	movwf	??_BVH2_Appl_Layer+5
 16074  15BD  0834               	movf	??_BVH2_Appl_Layer+2,w
 16075  15BE  0022               	movlb	2	; select bank2
 16076  15BF  07E9               	addwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),f
 16077  15C0  0020               	movlb	0	; select bank0
 16078  15C1  0835               	movf	??_BVH2_Appl_Layer+3,w
 16079  15C2  0022               	movlb	2	; select bank2
 16080  15C3  3DEA               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),f
 16081  15C4  0020               	movlb	0	; select bank0
 16082  15C5  0836               	movf	??_BVH2_Appl_Layer+4,w
 16083  15C6  0022               	movlb	2	; select bank2
 16084  15C7  3DEB               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),f
 16085  15C8  0020               	movlb	0	; select bank0
 16086  15C9  0837               	movf	??_BVH2_Appl_Layer+5,w
 16087  15CA  0022               	movlb	2	; select bank2
 16088  15CB  3DEC               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),f
 16089                           
 16090                           ;BVH2_Appl_Layer.c: 1649: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 16091  15CC  1BEC               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 16092  15CD  2DD9               	goto	l14156
 16093  15CE  086C               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16094  15CF  1D03               	btfss	3,2
 16095  15D0  2E0A               	goto	l14162
 16096  15D1  3041               	movlw	65
 16097  15D2  0269               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 16098  15D3  3077               	movlw	119
 16099  15D4  3B6A               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16100  15D5  3002               	movlw	2
 16101  15D6  3B6B               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16102  15D7  1803               	btfsc	3,0
 16103  15D8  2E0A               	goto	l14162
 16104  15D9                     l14156:	
 16105  15D9  1BEC               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 16106  15DA  2DF5               	goto	l14160
 16107  15DB  086C               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16108  15DC  1D03               	btfss	3,2
 16109  15DD  2DE5               	goto	l14158
 16110  15DE  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16111  15DF  1D03               	btfss	3,2
 16112  15E0  2DE5               	goto	l14158
 16113  15E1  307D               	movlw	125
 16114  15E2  026A               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16115  15E3  1C03               	btfss	3,0
 16116  15E4  2DF5               	goto	l14160
 16117  15E5                     l14158:	
 16118  15E5  086C               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16119  15E6  0024               	movlb	4	; select bank4
 16120  15E7  00A3               	movwf	(_BVH2_Appl_Layer$1218+3)^(0+512)
 16121  15E8  0022               	movlb	2	; select bank2
 16122  15E9  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16123  15EA  0024               	movlb	4	; select bank4
 16124  15EB  00A2               	movwf	(_BVH2_Appl_Layer$1218+2)^(0+512)
 16125  15EC  0022               	movlb	2	; select bank2
 16126  15ED  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16127  15EE  0024               	movlb	4	; select bank4
 16128  15EF  00A1               	movwf	(_BVH2_Appl_Layer$1218+1)^(0+512)
 16129  15F0  0022               	movlb	2	; select bank2
 16130  15F1  0869               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 16131  15F2  0024               	movlb	4	; select bank4
 16132  15F3  00A0               	movwf	_BVH2_Appl_Layer$1218^(0+512)
 16133  15F4  2DFB               	goto	l1802
 16134  15F5                     l14160:	
 16135  15F5  0024               	movlb	4	; select bank4
 16136  15F6  307D               	movlw	125
 16137  15F7  01A3               	clrf	(_BVH2_Appl_Layer$1218+3)^(0+512)
 16138  15F8  01A2               	clrf	(_BVH2_Appl_Layer$1218+2)^(0+512)
 16139  15F9  00A1               	movwf	(_BVH2_Appl_Layer$1218+1)^(0+512)
 16140  15FA  01A0               	clrf	_BVH2_Appl_Layer$1218^(0+512)
 16141  15FB                     l1802:	
 16142  15FB  0823               	movf	(_BVH2_Appl_Layer$1218+3)^(0+512),w
 16143  15FC  0022               	movlb	2	; select bank2
 16144  15FD  00EC               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 16145  15FE  0024               	movlb	4	; select bank4
 16146  15FF  0822               	movf	(_BVH2_Appl_Layer$1218+2)^(0+512),w
 16147  1600  0022               	movlb	2	; select bank2
 16148  1601  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 16149  1602  0024               	movlb	4	; select bank4
 16150  1603  0821               	movf	(_BVH2_Appl_Layer$1218+1)^(0+512),w
 16151  1604  0022               	movlb	2	; select bank2
 16152  1605  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 16153  1606  0024               	movlb	4	; select bank4
 16154  1607  0820               	movf	_BVH2_Appl_Layer$1218^(0+512),w
 16155  1608  0022               	movlb	2	; select bank2
 16156  1609  2E10               	goto	L37
 16157  160A                     l14162:	
 16158  160A  3002               	movlw	2
 16159  160B  01EC               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 16160  160C  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 16161  160D  3077               	movlw	119
 16162  160E  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 16163  160F  3040               	movlw	64
 16164  1610                     L37:	
 16165  1610  00E9               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 16166                           
 16167                           ;BVH2_Appl_Layer.c: 1652: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 16168  1611  01EE               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 16169  1612  0008               	return
 16170  1613                     __end_of_BVH2_Appl_Layer:	
 16171  1613                     __ptext48:	
 16172 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 16173 ;; Defined at:
 16174 ;;		line 1676 in file "../T_Link/BVH2_Appl_Layer.c"
 16175 ;; Parameters:    Size  Location     Type
 16176 ;;		None
 16177 ;; Auto vars:     Size  Location     Type
 16178 ;;		None
 16179 ;; Return value:  Size  Location     Type
 16180 ;;                  1    wreg      void 
 16181 ;; Registers used:
 16182 ;;		wreg, status,2, status,0
 16183 ;; Tracked objects:
 16184 ;;		On entry : 1F/1
 16185 ;;		On exit  : 1F/1
 16186 ;;		Unchanged: 0/0
 16187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16188 ;;      Params:         0       0       0       0       0       0       0       0
 16189 ;;      Locals:         0       0       0       0       0       0       0       0
 16190 ;;      Temps:          0       0       0       0       0       0       0       0
 16191 ;;      Totals:         0       0       0       0       0       0       0       0
 16192 ;;Total ram usage:        0 bytes
 16193 ;; Hardware stack levels used:    1
 16194 ;; Hardware stack levels required when called:    3
 16195 ;; This function calls:
 16196 ;;		Nothing
 16197 ;; This function is called by:
 16198 ;;		_BVH2_Appl_Layer
 16199 ;; This function uses a non-reentrant model
 16200 ;;
 16201                           
 16202                           
 16203                           ;psect for function _Cb1_Current_An___High_node_fcn1
 16204  1613                     _Cb1_Current_An___High_node_fcn1:	
 16205                           
 16206                           ;BVH2_Appl_Layer.c: 1680: if (bool_mat_currAlarm_bldc) {
 16207                           
 16208                           ;incstack = 0
 16209                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 16210  1613  084A               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 16211  1614  1903               	btfsc	3,2
 16212  1615  2E23               	goto	l9948
 16213                           
 16214                           ;BVH2_Appl_Layer.c: 1682: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 16215                           ;BVH2_Appl_Layer.c: 1683: (UInt8)2;
 16216  1616  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 16217  1617  39F0               	andlw	-16
 16218  1618  3802               	iorlw	2
 16219  1619  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 16220                           
 16221                           ;BVH2_Appl_Layer.c: 1684: Cb1_StateCnt = 0 ;
 16222  161A  01A6               	clrf	_Cb1_StateCnt^(0+128)
 16223  161B  01A7               	clrf	(_Cb1_StateCnt+1)^(0+128)
 16224  161C  2E1F               	goto	l9946
 16225  161D                     L45:	
 16226                           ;BVH2_Appl_Layer.c: 1690: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 16227                           ;BVH2_Appl_Layer.c: 1691: (UInt8)5;
 16228                           
 16229                           
 16230                           ;BVH2_Appl_Layer.c: 1692: Cb1_oShutoff = 0;
 16231                           
 16232                           ;BVH2_Appl_Layer.c: 1693: Cb1_oCurrentAlarm = 0;
 16233  161D  27DE               	fcall	PL92	;call to abstracted procedure
 16234                           
 16235                           ;BVH2_Appl_Layer.c: 1694: Cb1_RestartCounter = 0 ;
 16236  161E  01D1               	clrf	_Cb1_RestartCounter^(0+256)
 16237  161F                     l9946:	
 16238                           
 16239                           ;BVH2_Appl_Layer.c: 1685: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 16240  161F  3030               	movlw	48
 16241  1620  0021               	movlb	1	; select bank1
 16242  1621  04C5               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 16243                           
 16244                           ;BVH2_Appl_Layer.c: 1686: }
 16245  1622  0008               	return
 16246  1623                     l9948:	
 16247                           
 16248                           ;BVH2_Appl_Layer.c: 1687: else {
 16249                           ;BVH2_Appl_Layer.c: 1688: if (Cb1_StateCnt > 100) {
 16250  1623  3000               	movlw	0
 16251  1624  0227               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 16252  1625  3065               	movlw	101
 16253  1626  1903               	skipnz
 16254  1627  0226               	subwf	_Cb1_StateCnt^(0+128),w
 16255                           
 16256                           ;BVH2_Appl_Layer.c: 1697: else {
 16257                           ;BVH2_Appl_Layer.c: 1698: SIBFS_Current_Analysis_High_b.Cb1_glflag = 1 ;
 16258  1628  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 16259  1629  1803               	btfsc	3,0
 16260  162A  2E1D               	goto	L45
 16261  162B  39CF               	andlw	-49
 16262  162C  3810               	iorlw	16
 16263  162D  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 16264  162E  0008               	return
 16265  162F                     __end_of_Cb1_Current_An___High_node_fcn1:	
 16266  162F                     __ptext46:	
 16267 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 16268 ;; Defined at:
 16269 ;;		line 1839 in file "../T_Link/BVH2_Appl_Layer.c"
 16270 ;; Parameters:    Size  Location     Type
 16271 ;;		None
 16272 ;; Auto vars:     Size  Location     Type
 16273 ;;		None
 16274 ;; Return value:  Size  Location     Type
 16275 ;;                  1    wreg      void 
 16276 ;; Registers used:
 16277 ;;		wreg, status,2, status,0
 16278 ;; Tracked objects:
 16279 ;;		On entry : 1F/1
 16280 ;;		On exit  : 1F/1
 16281 ;;		Unchanged: 0/0
 16282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16283 ;;      Params:         0       0       0       0       0       0       0       0
 16284 ;;      Locals:         0       0       0       0       0       0       0       0
 16285 ;;      Temps:          0       0       0       0       0       0       0       0
 16286 ;;      Totals:         0       0       0       0       0       0       0       0
 16287 ;;Total ram usage:        0 bytes
 16288 ;; Hardware stack levels used:    1
 16289 ;; Hardware stack levels required when called:    3
 16290 ;; This function calls:
 16291 ;;		Nothing
 16292 ;; This function is called by:
 16293 ;;		_BVH2_Appl_Layer
 16294 ;; This function uses a non-reentrant model
 16295 ;;
 16296                           
 16297                           
 16298                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
 16299  162F                     _Cb44_Pic_etat_monitor_node_fcn1:	
 16300                           
 16301                           ;BVH2_Appl_Layer.c: 1849: else {
 16302                           ;BVH2_Appl_Layer.c: 1850: if (Cb44_StateCnt > 5) {
 16303                           
 16304                           ;BVH2_Appl_Layer.c: 1843: if (bool_mat_pic_etat) {
 16305                           
 16306                           ;incstack = 0
 16307                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 16308  162F  3000               	movlw	0
 16309  1630  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 16310  1631  3006               	movlw	6
 16311  1632  1903               	skipnz
 16312  1633  0224               	subwf	_Cb44_StateCnt^(0+128),w
 16313                           
 16314                           ;BVH2_Appl_Layer.c: 1852: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 16315  1634  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 16316  1635  1C03               	skipc
 16317  1636  2E40               	goto	L43
 16318  1637  39F8               	andlw	-8
 16319  1638  3803               	iorlw	3
 16320  1639  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 16321                           
 16322                           ;BVH2_Appl_Layer.c: 1854: Cb44_oAlarm = 0;
 16323  163A  0022               	movlb	2	; select bank2
 16324  163B  3018               	movlw	24
 16325  163C  01C9               	clrf	_Cb44_oShutoff^(0+256)
 16326                           
 16327                           ;BVH2_Appl_Layer.c: 1855: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 16328  163D  0021               	movlb	1	; select bank1
 16329  163E  04C3               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 16330                           
 16331                           ;BVH2_Appl_Layer.c: 1856: }
 16332  163F  0008               	return
 16333  1640                     L43:	
 16334                           ;BVH2_Appl_Layer.c: 1857: else {
 16335                           ;BVH2_Appl_Layer.c: 1858: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 1 ;
 16336                           
 16337  1640  39E7               	andlw	-25
 16338  1641  3808               	iorlw	8
 16339  1642  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 16340  1643  0008               	return
 16341  1644                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 16342  1644                     __ptext43:	
 16343 ;; *************** function ___lmul *****************
 16344 ;; Defined at:
 16345 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
 16346 ;; Parameters:    Size  Location     Type
 16347 ;;  multiplier      4    4[BANK0 ] unsigned long 
 16348 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 16349 ;; Auto vars:     Size  Location     Type
 16350 ;;  product         4   12[BANK0 ] unsigned long 
 16351 ;; Return value:  Size  Location     Type
 16352 ;;                  4    4[BANK0 ] unsigned long 
 16353 ;; Registers used:
 16354 ;;		wreg, status,2, status,0
 16355 ;; Tracked objects:
 16356 ;;		On entry : 1F/0
 16357 ;;		On exit  : 1F/0
 16358 ;;		Unchanged: 0/0
 16359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16360 ;;      Params:         0       8       0       0       0       0       0       0
 16361 ;;      Locals:         0       4       0       0       0       0       0       0
 16362 ;;      Temps:          0       0       0       0       0       0       0       0
 16363 ;;      Totals:         0      12       0       0       0       0       0       0
 16364 ;;Total ram usage:       12 bytes
 16365 ;; Hardware stack levels used:    1
 16366 ;; Hardware stack levels required when called:    3
 16367 ;; This function calls:
 16368 ;;		Nothing
 16369 ;; This function is called by:
 16370 ;;		_BVH2_Appl_Layer
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           
 16375                           ;psect for function ___lmul
 16376  1644                     ___lmul:	
 16377                           
 16378                           ;incstack = 0
 16379                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 16380  1644  01AC               	clrf	___lmul@product
 16381  1645  01AD               	clrf	___lmul@product+1
 16382  1646  01AE               	clrf	___lmul@product+2
 16383  1647  01AF               	clrf	___lmul@product+3
 16384  1648                     l2071:	
 16385  1648  1C24               	btfss	___lmul@multiplier,0
 16386  1649  2E52               	goto	l9982
 16387  164A  0828               	movf	___lmul@multiplicand,w
 16388  164B  07AC               	addwf	___lmul@product,f
 16389  164C  0829               	movf	___lmul@multiplicand+1,w
 16390  164D  3DAD               	addwfc	___lmul@product+1,f
 16391  164E  082A               	movf	___lmul@multiplicand+2,w
 16392  164F  3DAE               	addwfc	___lmul@product+2,f
 16393  1650  082B               	movf	___lmul@multiplicand+3,w
 16394  1651  3DAF               	addwfc	___lmul@product+3,f
 16395  1652                     l9982:	
 16396  1652  35A8               	lslf	___lmul@multiplicand,f
 16397  1653  0DA9               	rlf	___lmul@multiplicand+1,f
 16398  1654  0DAA               	rlf	___lmul@multiplicand+2,f
 16399  1655  0DAB               	rlf	___lmul@multiplicand+3,f
 16400  1656  36A7               	lsrf	___lmul@multiplier+3,f
 16401  1657  0CA6               	rrf	___lmul@multiplier+2,f
 16402  1658  0CA5               	rrf	___lmul@multiplier+1,f
 16403  1659  0CA4               	rrf	___lmul@multiplier,f
 16404  165A  0827               	movf	___lmul@multiplier+3,w
 16405  165B  0426               	iorwf	___lmul@multiplier+2,w
 16406  165C  0425               	iorwf	___lmul@multiplier+1,w
 16407  165D  0424               	iorwf	___lmul@multiplier,w
 16408  165E  1D03               	skipz
 16409  165F  2E48               	goto	l2071
 16410  1660  082F               	movf	___lmul@product+3,w
 16411  1661  00A7               	movwf	?___lmul+3
 16412  1662  082E               	movf	___lmul@product+2,w
 16413  1663  00A6               	movwf	?___lmul+2
 16414  1664  082D               	movf	___lmul@product+1,w
 16415  1665  00A5               	movwf	?___lmul+1
 16416  1666  082C               	movf	___lmul@product,w
 16417  1667  00A4               	movwf	?___lmul
 16418  1668  0008               	return
 16419  1669                     __end_of___lmul:	
 16420  1669                     __ptext47:	
 16421 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 16422 ;; Defined at:
 16423 ;;		line 1720 in file "../T_Link/BVH2_Appl_Layer.c"
 16424 ;; Parameters:    Size  Location     Type
 16425 ;;		None
 16426 ;; Auto vars:     Size  Location     Type
 16427 ;;		None
 16428 ;; Return value:  Size  Location     Type
 16429 ;;                  1    wreg      void 
 16430 ;; Registers used:
 16431 ;;		wreg, status,2, status,0
 16432 ;; Tracked objects:
 16433 ;;		On entry : 1F/1
 16434 ;;		On exit  : 1D/0
 16435 ;;		Unchanged: 0/0
 16436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16437 ;;      Params:         0       0       0       0       0       0       0       0
 16438 ;;      Locals:         0       0       0       0       0       0       0       0
 16439 ;;      Temps:          0       0       0       0       0       0       0       0
 16440 ;;      Totals:         0       0       0       0       0       0       0       0
 16441 ;;Total ram usage:        0 bytes
 16442 ;; Hardware stack levels used:    1
 16443 ;; Hardware stack levels required when called:    3
 16444 ;; This function calls:
 16445 ;;		Nothing
 16446 ;; This function is called by:
 16447 ;;		_BVH2_Appl_Layer
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           
 16452                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 16453  1669                     _Cb34_PWM_Detection_node_fcn1:	
 16454                           
 16455                           ;BVH2_Appl_Layer.c: 1722: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 16456                           
 16457                           ;incstack = 0
 16458                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 16459  1669  0020               	movlb	0	; select bank0
 16460  166A  085D               	movf	_Cb34_idPWM,w
 16461  166B  1903               	btfsc	3,2
 16462  166C  2E71               	goto	l9806
 16463  166D  30C8               	movlw	200
 16464  166E  025D               	subwf	_Cb34_idPWM,w
 16465  166F  1C03               	skipc
 16466  1670  2E7B               	goto	l9818
 16467  1671                     l9806:	
 16468                           
 16469                           ;BVH2_Appl_Layer.c: 1724: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 16470  1671  0021               	movlb	1	; select bank1
 16471  1672  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16472  1673  39F0               	andlw	-16
 16473  1674  3807               	iorlw	7
 16474                           
 16475                           ;BVH2_Appl_Layer.c: 1725: Cb34_odPumpOff = 0;
 16476                           
 16477                           ;BVH2_Appl_Layer.c: 1726: Cb34_odFixedValueSel = 1;
 16478  1675  27F2               	fcall	PL114	;call to abstracted procedure
 16479                           
 16480                           ;BVH2_Appl_Layer.c: 1727: Cb34_odFixedLowValueSel = 0;
 16481  1676  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16482                           
 16483                           ;BVH2_Appl_Layer.c: 1728: Cb34_oPWM_SC_Alarm = 0;
 16484  1677  01CD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16485                           
 16486                           ;BVH2_Appl_Layer.c: 1729: Cb34_oPWM_Alarm = 1;
 16487  1678  01CE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 16488  1679  0ACE               	incf	_Cb34_oPWM_Alarm^(0+256),f
 16489                           
 16490                           ;BVH2_Appl_Layer.c: 1730: }
 16491  167A  0008               	return
 16492  167B                     l9818:	
 16493                           
 16494                           ;BVH2_Appl_Layer.c: 1731: else {
 16495                           ;BVH2_Appl_Layer.c: 1734: if ((ui16_PWM_Freq_mat < 36000) || (ui16_PWM_Freq_mat > 44000)
      +                          ) {
 16496  167B  308C               	movlw	140
 16497  167C  0022               	movlb	2	; select bank2
 16498  167D  022A               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 16499  167E  30A0               	movlw	160
 16500  167F  1903               	skipnz
 16501  1680  0229               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 16502  1681  1C03               	skipc
 16503  1682  2E8A               	goto	l9822
 16504  1683  30AB               	movlw	171
 16505  1684  022A               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 16506  1685  30E1               	movlw	225
 16507  1686  1903               	skipnz
 16508  1687  0229               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 16509  1688  1C03               	skipc
 16510  1689  2EA4               	goto	l9834
 16511  168A                     l9822:	
 16512                           
 16513                           ;BVH2_Appl_Layer.c: 1736: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 16514  168A  0021               	movlb	1	; select bank1
 16515  168B  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16516  168C  39F0               	andlw	-16
 16517  168D  3806               	iorlw	6
 16518  168E  2E93               	goto	L44
 16519  168F                     l9836:	
 16520                           
 16521                           ;BVH2_Appl_Layer.c: 1746: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 16522  168F  0021               	movlb	1	; select bank1
 16523  1690  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16524  1691  39F0               	andlw	-16
 16525  1692  3803               	iorlw	3
 16526  1693                     L44:	
 16527                           
 16528                           ;BVH2_Appl_Layer.c: 1737: Cb34_odPumpOff = 0;
 16529                           
 16530                           ;BVH2_Appl_Layer.c: 1738: Cb34_odFixedValueSel = 1;
 16531  1693  27F2  3190         	fcall	PL114	;call to abstracted procedure
 16532  1695  2E9F               	goto	l9828
 16533  1696                     l9850:	
 16534                           
 16535                           ;BVH2_Appl_Layer.c: 1757: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16536                           ;BVH2_Appl_Layer.c: 1758: (UInt8)8;
 16537  1696  0021               	movlb	1	; select bank1
 16538  1697  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16539  1698  39F0               	andlw	-16
 16540  1699  3808               	iorlw	8
 16541  169A  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16542                           
 16543                           ;BVH2_Appl_Layer.c: 1759: Cb34_odPumpOff = 1;
 16544  169B  0022               	movlb	2	; select bank2
 16545  169C  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 16546  169D  0ACA               	incf	_Cb34_odPumpOff^(0+256),f
 16547                           
 16548                           ;BVH2_Appl_Layer.c: 1760: Cb34_odFixedValueSel = 0;
 16549  169E  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 16550  169F                     l9828:	
 16551                           
 16552                           ;BVH2_Appl_Layer.c: 1739: Cb34_odFixedLowValueSel = 0;
 16553  169F  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16554                           
 16555                           ;BVH2_Appl_Layer.c: 1740: Cb34_oPWM_SC_Alarm = 1;
 16556  16A0  01CD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16557  16A1  0ACD               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 16558  16A2                     l9832:	
 16559                           
 16560                           ;BVH2_Appl_Layer.c: 1741: Cb34_oPWM_Alarm = 0;
 16561  16A2  01CE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 16562                           
 16563                           ;BVH2_Appl_Layer.c: 1742: }
 16564  16A3  0008               	return
 16565  16A4                     l9834:	
 16566                           
 16567                           ;BVH2_Appl_Layer.c: 1743: else {
 16568                           ;BVH2_Appl_Layer.c: 1744: if (Cb34_idPWM <= 5) {
 16569  16A4  3006               	movlw	6
 16570  16A5  0020               	movlb	0	; select bank0
 16571  16A6  025D               	subwf	_Cb34_idPWM,w
 16572  16A7  1C03               	btfss	3,0
 16573  16A8  2E8F               	goto	l9836
 16574                           
 16575                           ;BVH2_Appl_Layer.c: 1753: else {
 16576                           ;BVH2_Appl_Layer.c: 1754: if (Cb34_idPWM < 9) {
 16577  16A9  3009               	movlw	9
 16578  16AA  025D               	subwf	_Cb34_idPWM,w
 16579  16AB  1C03               	btfss	3,0
 16580  16AC  2E96               	goto	l9850
 16581                           
 16582                           ;BVH2_Appl_Layer.c: 1765: else {
 16583                           ;BVH2_Appl_Layer.c: 1766: if (Cb34_idPWM > 191) {
 16584  16AD  30C0               	movlw	192
 16585  16AE  025D               	subwf	_Cb34_idPWM,w
 16586  16AF  1C03               	skipc
 16587  16B0  2EB6               	goto	l9876
 16588                           
 16589                           ;BVH2_Appl_Layer.c: 1769: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16590                           ;BVH2_Appl_Layer.c: 1770: (UInt8)4;
 16591  16B1  0021               	movlb	1	; select bank1
 16592  16B2  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16593  16B3  39F0               	andlw	-16
 16594  16B4  3804               	iorlw	4
 16595  16B5  2E93               	goto	L44
 16596  16B6                     l9876:	
 16597                           
 16598                           ;BVH2_Appl_Layer.c: 1777: else {
 16599                           ;BVH2_Appl_Layer.c: 1778: if (Cb34_idPWM >= 23) {
 16600  16B6  3017               	movlw	23
 16601  16B7  025D               	subwf	_Cb34_idPWM,w
 16602  16B8  1C03               	skipc
 16603  16B9  2EC5               	goto	l9890
 16604                           
 16605                           ;BVH2_Appl_Layer.c: 1781: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16606                           ;BVH2_Appl_Layer.c: 1782: (UInt8)2;
 16607  16BA  0021               	movlb	1	; select bank1
 16608  16BB  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16609  16BC  39F0               	andlw	-16
 16610  16BD  3802               	iorlw	2
 16611  16BE  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16612                           
 16613                           ;BVH2_Appl_Layer.c: 1783: Cb34_odPumpOff = 0;
 16614  16BF  0022               	movlb	2	; select bank2
 16615  16C0  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 16616                           
 16617                           ;BVH2_Appl_Layer.c: 1784: Cb34_odFixedLowValueSel = 0;
 16618  16C1  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16619                           
 16620                           ;BVH2_Appl_Layer.c: 1785: Cb34_odFixedValueSel = 0;
 16621  16C2  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 16622  16C3                     l9886:	
 16623                           
 16624                           ;BVH2_Appl_Layer.c: 1786: Cb34_oPWM_SC_Alarm = 0;
 16625  16C3  01CD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16626  16C4  2EA2               	goto	l9832
 16627  16C5                     l9890:	
 16628                           
 16629                           ;BVH2_Appl_Layer.c: 1789: else {
 16630                           ;BVH2_Appl_Layer.c: 1790: if (Cb34_idPWM > 19) {
 16631  16C5  3014               	movlw	20
 16632  16C6  025D               	subwf	_Cb34_idPWM,w
 16633  16C7  1C03               	skipc
 16634  16C8  2ED4               	goto	l9904
 16635                           
 16636                           ;BVH2_Appl_Layer.c: 1793: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16637                           ;BVH2_Appl_Layer.c: 1794: (UInt8)5;
 16638  16C9  0021               	movlb	1	; select bank1
 16639  16CA  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16640  16CB  39F0               	andlw	-16
 16641  16CC  3805               	iorlw	5
 16642  16CD  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16643                           
 16644                           ;BVH2_Appl_Layer.c: 1795: Cb34_odPumpOff = 0;
 16645  16CE  0022               	movlb	2	; select bank2
 16646  16CF  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 16647                           
 16648                           ;BVH2_Appl_Layer.c: 1796: Cb34_odFixedValueSel = 0;
 16649  16D0  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 16650                           
 16651                           ;BVH2_Appl_Layer.c: 1797: Cb34_odFixedLowValueSel = 1;
 16652  16D1  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16653  16D2  0ACC               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 16654  16D3  2EC3               	goto	l9886
 16655  16D4                     l9904:	
 16656                           
 16657                           ;BVH2_Appl_Layer.c: 1801: else {
 16658                           ;BVH2_Appl_Layer.c: 1802: if (Cb34_idPWM <= 19) {
 16659  16D4  3014               	movlw	20
 16660  16D5  025D               	subwf	_Cb34_idPWM,w
 16661  16D6  1803               	skipnc
 16662  16D7  0008               	return
 16663                           
 16664                           ;BVH2_Appl_Layer.c: 1805: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16665                           ;BVH2_Appl_Layer.c: 1806: (UInt8)1;
 16666  16D8  0021               	movlb	1	; select bank1
 16667                           
 16668                           ;BVH2_Appl_Layer.c: 1807: Cb34_odPumpOff = 1;
 16669                           
 16670                           ;BVH2_Appl_Layer.c: 1808: Cb34_odFixedValueSel = 0;
 16671                           
 16672                           ;BVH2_Appl_Layer.c: 1809: Cb34_odFixedLowValueSel = 0;
 16673  16D9  27B3  3190         	fcall	PL62	;call to abstracted procedure
 16674  16DB  2EC3               	goto	l9886
 16675  16DC                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 16676  16DC                     __ptext45:	
 16677 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 16678 ;; Defined at:
 16679 ;;		line 1880 in file "../T_Link/BVH2_Appl_Layer.c"
 16680 ;; Parameters:    Size  Location     Type
 16681 ;;		None
 16682 ;; Auto vars:     Size  Location     Type
 16683 ;;		None
 16684 ;; Return value:  Size  Location     Type
 16685 ;;                  1    wreg      void 
 16686 ;; Registers used:
 16687 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16688 ;; Tracked objects:
 16689 ;;		On entry : 1F/1
 16690 ;;		On exit  : 1F/2
 16691 ;;		Unchanged: 0/0
 16692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16693 ;;      Params:         0       0       0       0       0       0       0       0
 16694 ;;      Locals:         0       0       0       0       0       0       0       0
 16695 ;;      Temps:          0       0       0       0       0       0       0       0
 16696 ;;      Totals:         0       0       0       0       0       0       0       0
 16697 ;;Total ram usage:        0 bytes
 16698 ;; Hardware stack levels used:    1
 16699 ;; Hardware stack levels required when called:    3
 16700 ;; This function calls:
 16701 ;;		Nothing
 16702 ;; This function is called by:
 16703 ;;		_BVH2_Appl_Layer
 16704 ;; This function uses a non-reentrant model
 16705 ;;
 16706                           
 16707                           
 16708                           ;psect for function _Cb56_UbatHandling_node_fcn2
 16709  16DC                     _Cb56_UbatHandling_node_fcn2:	
 16710                           
 16711                           ;BVH2_Appl_Layer.c: 1883: if (((UInt8)ui8_BattVolt_mat) > 147) {
 16712                           
 16713                           ;incstack = 0
 16714                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 16715  16DC  3094               	movlw	148
 16716  16DD  0230               	subwf	_ui8_BattVolt_mat^(0+128),w
 16717  16DE  1803               	btfsc	3,0
 16718  16DF  2EE7               	goto	l9922
 16719  16E0  2F00               	goto	l9928
 16720  16E1                     l1844:	
 16721                           ;BVH2_Appl_Layer.c: 1886: case 2: {
 16722                           
 16723                           
 16724                           ;BVH2_Appl_Layer.c: 1887: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 16725  16E1  1242               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 16726                           
 16727                           ;BVH2_Appl_Layer.c: 1888: break;
 16728  16E2  2EF0               	goto	l1845
 16729  16E3                     l1846:	
 16730                           ;BVH2_Appl_Layer.c: 1889: }
 16731                           ;BVH2_Appl_Layer.c: 1890: case 3: {
 16732                           
 16733                           
 16734                           ;BVH2_Appl_Layer.c: 1891: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 16735  16E3  12C2               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 16736                           
 16737                           ;BVH2_Appl_Layer.c: 1892: break;
 16738  16E4  2EF0               	goto	l1845
 16739  16E5                     l1847:	
 16740                           ;BVH2_Appl_Layer.c: 1893: }
 16741                           ;BVH2_Appl_Layer.c: 1894: default: {
 16742                           
 16743                           
 16744                           ;BVH2_Appl_Layer.c: 1895: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 16745  16E5  1342               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 16746                           
 16747                           ;BVH2_Appl_Layer.c: 1896: }
 16748                           ;BVH2_Appl_Layer.c: 1897: }
 16749  16E6  2EF0               	goto	l1845
 16750  16E7                     l9922:	
 16751  16E7  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 16752  16E8  3907               	andlw	7
 16753                           
 16754                           ; Switch size 1, requested type "space"
 16755                           ; Number of cases is 2, Range of values is 2 to 3
 16756                           ; switch strategies available:
 16757                           ; Name         Instructions Cycles
 16758                           ; simple_byte            7     4 (average)
 16759                           ; direct_byte           13     9 (fixed)
 16760                           ; jumptable            263     9 (fixed)
 16761                           ;	Chosen strategy is simple_byte
 16762  16E9  3A02               	xorlw	2	; case 2
 16763  16EA  1903               	skipnz
 16764  16EB  2EE1               	goto	l1844
 16765  16EC  3A01               	xorlw	1	; case 3
 16766  16ED  1903               	skipnz
 16767  16EE  2EE3               	goto	l1846
 16768  16EF  2EE5               	goto	l1847
 16769  16F0                     l1845:	
 16770                           
 16771                           ;BVH2_Appl_Layer.c: 1898: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 16772  16F0  1642               	bsf	_SIBFS_UbatHandling_b^(0+128),4
 16773  16F1                     L42:	
 16774                           
 16775                           ;BVH2_Appl_Layer.c: 1899: Cb56_odPumpOff = 1;
 16776  16F1  0022               	movlb	2	; select bank2
 16777  16F2  01C7               	clrf	_Cb56_odPumpOff^(0+256)
 16778  16F3  0AC7               	incf	_Cb56_odPumpOff^(0+256),f
 16779                           
 16780                           ;BVH2_Appl_Layer.c: 1900: Cb56_odFixedValueSel = 0;
 16781  16F4  0021               	movlb	1	; select bank1
 16782  16F5  01C1               	clrf	_Cb56_odFixedValueSel^(0+128)
 16783                           
 16784                           ;BVH2_Appl_Layer.c: 1901: Cb56_oUbat_Alarm_High = 1;
 16785  16F6  0022               	movlb	2	; select bank2
 16786  16F7  01C8               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 16787  16F8  0AC8               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 16788                           
 16789                           ;BVH2_Appl_Layer.c: 1902: }
 16790  16F9  0008               	return
 16791  16FA                     l1850:	
 16792                           ;BVH2_Appl_Layer.c: 1905: case 2: {
 16793                           
 16794                           
 16795                           ;BVH2_Appl_Layer.c: 1906: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 16796  16FA  1242               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 16797                           
 16798                           ;BVH2_Appl_Layer.c: 1907: break;
 16799  16FB  2F09               	goto	l9930
 16800  16FC                     l1852:	
 16801                           ;BVH2_Appl_Layer.c: 1908: }
 16802                           ;BVH2_Appl_Layer.c: 1909: case 3: {
 16803                           
 16804                           
 16805                           ;BVH2_Appl_Layer.c: 1910: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 16806  16FC  12C2               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 16807                           
 16808                           ;BVH2_Appl_Layer.c: 1911: break;
 16809  16FD  2F09               	goto	l9930
 16810  16FE                     l1853:	
 16811                           ;BVH2_Appl_Layer.c: 1912: }
 16812                           ;BVH2_Appl_Layer.c: 1913: default: {
 16813                           
 16814                           
 16815                           ;BVH2_Appl_Layer.c: 1914: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 16816  16FE  1342               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 16817                           
 16818                           ;BVH2_Appl_Layer.c: 1915: }
 16819                           ;BVH2_Appl_Layer.c: 1916: }
 16820  16FF  2F09               	goto	l9930
 16821  1700                     l9928:	
 16822  1700  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 16823  1701  3907               	andlw	7
 16824                           
 16825                           ; Switch size 1, requested type "space"
 16826                           ; Number of cases is 2, Range of values is 2 to 3
 16827                           ; switch strategies available:
 16828                           ; Name         Instructions Cycles
 16829                           ; simple_byte            7     4 (average)
 16830                           ; direct_byte           13     9 (fixed)
 16831                           ; jumptable            263     9 (fixed)
 16832                           ;	Chosen strategy is simple_byte
 16833  1702  3A02               	xorlw	2	; case 2
 16834  1703  1903               	skipnz
 16835  1704  2EFA               	goto	l1850
 16836  1705  3A01               	xorlw	1	; case 3
 16837  1706  1903               	skipnz
 16838  1707  2EFC               	goto	l1852
 16839  1708  2EFE               	goto	l1853
 16840  1709                     l9930:	
 16841                           
 16842                           ;BVH2_Appl_Layer.c: 1919: if (((UInt8)ui8_BattVolt_mat) < 45) {
 16843  1709  302D               	movlw	45
 16844  170A  0230               	subwf	_ui8_BattVolt_mat^(0+128),w
 16845  170B  1803               	skipnc
 16846  170C  2F0F               	goto	l1854
 16847                           
 16848                           ;BVH2_Appl_Layer.c: 1921: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 16849  170D  16C2               	bsf	_SIBFS_UbatHandling_b^(0+128),5
 16850  170E  2EF1               	goto	L42
 16851  170F                     l1854:	
 16852                           ;BVH2_Appl_Layer.c: 1922: Cb56_odPumpOff = 1;
 16853                           
 16854                           
 16855                           ;BVH2_Appl_Layer.c: 1926: else {
 16856                           ;BVH2_Appl_Layer.c: 1928: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 16857                           
 16858                           ;BVH2_Appl_Layer.c: 1929: Cb56_odPumpOff = 0;
 16859                           
 16860                           ;BVH2_Appl_Layer.c: 1930: Cb56_odFixedValueSel = 0;
 16861                           
 16862                           ;BVH2_Appl_Layer.c: 1931: Cb56_oUbat_Alarm_High = 0;
 16863  170F  27D0               	fcall	PL82	;call to abstracted procedure
 16864  1710  0008               	return
 16865  1711                     __end_of_Cb56_UbatHandling_node_fcn2:	
 16866  1711                     __ptext44:	
 16867 ;; *************** function ___aldiv *****************
 16868 ;; Defined at:
 16869 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
 16870 ;; Parameters:    Size  Location     Type
 16871 ;;  divisor         4    4[BANK0 ] long 
 16872 ;;  dividend        4    8[BANK0 ] long 
 16873 ;; Auto vars:     Size  Location     Type
 16874 ;;  quotient        4   14[BANK0 ] long 
 16875 ;;  sign            1   13[BANK0 ] unsigned char 
 16876 ;;  counter         1   12[BANK0 ] unsigned char 
 16877 ;; Return value:  Size  Location     Type
 16878 ;;                  4    4[BANK0 ] long 
 16879 ;; Registers used:
 16880 ;;		wreg, status,2, status,0
 16881 ;; Tracked objects:
 16882 ;;		On entry : 1F/0
 16883 ;;		On exit  : 1F/0
 16884 ;;		Unchanged: 0/0
 16885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16886 ;;      Params:         0       8       0       0       0       0       0       0
 16887 ;;      Locals:         0       6       0       0       0       0       0       0
 16888 ;;      Temps:          0       0       0       0       0       0       0       0
 16889 ;;      Totals:         0      14       0       0       0       0       0       0
 16890 ;;Total ram usage:       14 bytes
 16891 ;; Hardware stack levels used:    1
 16892 ;; Hardware stack levels required when called:    3
 16893 ;; This function calls:
 16894 ;;		Nothing
 16895 ;; This function is called by:
 16896 ;;		_BVH2_Appl_Layer
 16897 ;; This function uses a non-reentrant model
 16898 ;;
 16899                           
 16900                           
 16901                           ;psect for function ___aldiv
 16902  1711                     ___aldiv:	
 16903                           
 16904                           ;incstack = 0
 16905                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 16906  1711  01AD               	clrf	___aldiv@sign
 16907  1712  1FA7               	btfss	___aldiv@divisor+3,7
 16908  1713  2F21               	goto	l2115
 16909  1714  09A4               	comf	___aldiv@divisor,f
 16910  1715  09A5               	comf	___aldiv@divisor+1,f
 16911  1716  09A6               	comf	___aldiv@divisor+2,f
 16912  1717  09A7               	comf	___aldiv@divisor+3,f
 16913  1718  0AA4               	incf	___aldiv@divisor,f
 16914  1719  1903               	skipnz
 16915  171A  0AA5               	incf	___aldiv@divisor+1,f
 16916  171B  1903               	skipnz
 16917  171C  0AA6               	incf	___aldiv@divisor+2,f
 16918  171D  1903               	skipnz
 16919  171E  0AA7               	incf	___aldiv@divisor+3,f
 16920  171F  01AD               	clrf	___aldiv@sign
 16921  1720  0AAD               	incf	___aldiv@sign,f
 16922  1721                     l2115:	
 16923  1721  1FAB               	btfss	___aldiv@dividend+3,7
 16924  1722  2F30               	goto	l10000
 16925  1723  09A8               	comf	___aldiv@dividend,f
 16926  1724  09A9               	comf	___aldiv@dividend+1,f
 16927  1725  09AA               	comf	___aldiv@dividend+2,f
 16928  1726  09AB               	comf	___aldiv@dividend+3,f
 16929  1727  0AA8               	incf	___aldiv@dividend,f
 16930  1728  1903               	skipnz
 16931  1729  0AA9               	incf	___aldiv@dividend+1,f
 16932  172A  1903               	skipnz
 16933  172B  0AAA               	incf	___aldiv@dividend+2,f
 16934  172C  1903               	skipnz
 16935  172D  0AAB               	incf	___aldiv@dividend+3,f
 16936  172E  3001               	movlw	1
 16937  172F  06AD               	xorwf	___aldiv@sign,f
 16938  1730                     l10000:	
 16939  1730  01AE               	clrf	___aldiv@quotient
 16940  1731  01AF               	clrf	___aldiv@quotient+1
 16941  1732  01B0               	clrf	___aldiv@quotient+2
 16942  1733  01B1               	clrf	___aldiv@quotient+3
 16943  1734  0827               	movf	___aldiv@divisor+3,w
 16944  1735  0426               	iorwf	___aldiv@divisor+2,w
 16945  1736  0425               	iorwf	___aldiv@divisor+1,w
 16946  1737  0424               	iorwf	___aldiv@divisor,w
 16947  1738  1903               	skipnz
 16948  1739  2F66               	goto	l10022
 16949  173A  01AC               	clrf	___aldiv@counter
 16950  173B                     L41:	
 16951  173B  0AAC               	incf	___aldiv@counter,f
 16952  173C  1BA7               	btfsc	___aldiv@divisor+3,7
 16953  173D  2F43               	goto	l10010
 16954  173E  35A4               	lslf	___aldiv@divisor,f
 16955  173F  0DA5               	rlf	___aldiv@divisor+1,f
 16956  1740  0DA6               	rlf	___aldiv@divisor+2,f
 16957  1741  0DA7               	rlf	___aldiv@divisor+3,f
 16958  1742  2F3B               	goto	L41
 16959  1743                     l10010:	
 16960  1743  35AE               	lslf	___aldiv@quotient,f
 16961  1744  0DAF               	rlf	___aldiv@quotient+1,f
 16962  1745  0DB0               	rlf	___aldiv@quotient+2,f
 16963  1746  0DB1               	rlf	___aldiv@quotient+3,f
 16964  1747  0827               	movf	___aldiv@divisor+3,w
 16965  1748  022B               	subwf	___aldiv@dividend+3,w
 16966  1749  1D03               	skipz
 16967  174A  2F55               	goto	u7705
 16968  174B  0826               	movf	___aldiv@divisor+2,w
 16969  174C  022A               	subwf	___aldiv@dividend+2,w
 16970  174D  1D03               	skipz
 16971  174E  2F55               	goto	u7705
 16972  174F  0825               	movf	___aldiv@divisor+1,w
 16973  1750  0229               	subwf	___aldiv@dividend+1,w
 16974  1751  1D03               	skipz
 16975  1752  2F55               	goto	u7705
 16976  1753  0824               	movf	___aldiv@divisor,w
 16977  1754  0228               	subwf	___aldiv@dividend,w
 16978  1755                     u7705:	
 16979  1755  1C03               	skipc
 16980  1756  2F60               	goto	l10018
 16981  1757  0824               	movf	___aldiv@divisor,w
 16982  1758  02A8               	subwf	___aldiv@dividend,f
 16983  1759  0825               	movf	___aldiv@divisor+1,w
 16984  175A  3BA9               	subwfb	___aldiv@dividend+1,f
 16985  175B  0826               	movf	___aldiv@divisor+2,w
 16986  175C  3BAA               	subwfb	___aldiv@dividend+2,f
 16987  175D  0827               	movf	___aldiv@divisor+3,w
 16988  175E  3BAB               	subwfb	___aldiv@dividend+3,f
 16989  175F  142E               	bsf	___aldiv@quotient,0
 16990  1760                     l10018:	
 16991  1760  36A7               	lsrf	___aldiv@divisor+3,f
 16992  1761  0CA6               	rrf	___aldiv@divisor+2,f
 16993  1762  0CA5               	rrf	___aldiv@divisor+1,f
 16994  1763  0CA4               	rrf	___aldiv@divisor,f
 16995  1764  0BAC               	decfsz	___aldiv@counter,f
 16996  1765  2F43               	goto	l10010
 16997  1766                     l10022:	
 16998  1766  082D               	movf	___aldiv@sign,w
 16999  1767  1903               	btfsc	3,2
 17000  1768  2F74               	goto	l10026
 17001  1769  09AE               	comf	___aldiv@quotient,f
 17002  176A  09AF               	comf	___aldiv@quotient+1,f
 17003  176B  09B0               	comf	___aldiv@quotient+2,f
 17004  176C  09B1               	comf	___aldiv@quotient+3,f
 17005  176D  0AAE               	incf	___aldiv@quotient,f
 17006  176E  1903               	skipnz
 17007  176F  0AAF               	incf	___aldiv@quotient+1,f
 17008  1770  1903               	skipnz
 17009  1771  0AB0               	incf	___aldiv@quotient+2,f
 17010  1772  1903               	skipnz
 17011  1773  0AB1               	incf	___aldiv@quotient+3,f
 17012  1774                     l10026:	
 17013  1774  0831               	movf	___aldiv@quotient+3,w
 17014  1775  00A7               	movwf	?___aldiv+3
 17015  1776  0830               	movf	___aldiv@quotient+2,w
 17016  1777  00A6               	movwf	?___aldiv+2
 17017  1778  082F               	movf	___aldiv@quotient+1,w
 17018  1779  00A5               	movwf	?___aldiv+1
 17019  177A  082E               	movf	___aldiv@quotient,w
 17020  177B  00A4               	movwf	?___aldiv
 17021  177C  0008               	return
 17022  177D                     __end_of___aldiv:	
 17023  177D                     PL24:	
 17024  177D  0020               	movlb	0	; select bank0
 17025  177E  00B3               	movwf	??_BVH2_Appl_Layer+1
 17026  177F  0021               	movlb	1	; select bank1
 17027  1780  082F               	movf	(_ui16_mat_Current+1)^(0+128),w
 17028  1781  0020               	movlb	0	; select bank0
 17029  1782  0233               	subwf	??_BVH2_Appl_Layer+1,w
 17030  1783  1D03               	skipz
 17031  1784  0008               	return
 17032  1785  0021               	movlb	1	; select bank1
 17033  1786  082E               	movf	_ui16_mat_Current^(0+128),w
 17034  1787  0020               	movlb	0	; select bank0
 17035  1788  0232               	subwf	??_BVH2_Appl_Layer,w
 17036  1789  0008               	return
 17037  178A                     __end_ofPL24:	
 17038  178A                     PL26:	
 17039  178A  0023               	movlb	3	; select bank3
 17040  178B  0866               	movf	_ui16_Current_Thresh^(0+384),w
 17041  178C  3EFE               	addlw	254
 17042  178D  0020               	movlb	0	; select bank0
 17043  178E  00B2               	movwf	??_BVH2_Appl_Layer
 17044  178F  30FF               	movlw	255
 17045  1790  0023               	movlb	3	; select bank3
 17046  1791  3D67               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 17047  1792  0008               	return
 17048  1793                     __end_ofPL26:	
 17049  1793                     PL30:	
 17050  1793  0023               	movlb	3	; select bank3
 17051  1794  0866               	movf	_ui16_Current_Thresh^(0+384),w
 17052  1795  3E02               	addlw	2
 17053  1796  0020               	movlb	0	; select bank0
 17054  1797  00B2               	movwf	??_BVH2_Appl_Layer
 17055  1798  3000               	movlw	0
 17056  1799  0023               	movlb	3	; select bank3
 17057  179A  3D67               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 17058  179B  0020               	movlb	0	; select bank0
 17059  179C  00B3               	movwf	??_BVH2_Appl_Layer+1
 17060  179D  0021               	movlb	1	; select bank1
 17061  179E  022F               	subwf	(_ui16_mat_Current+1)^(0+128),w
 17062  179F  1D03               	skipz
 17063  17A0  0008               	return
 17064  17A1  0020               	movlb	0	; select bank0
 17065  17A2  0832               	movf	??_BVH2_Appl_Layer,w
 17066  17A3  0021               	movlb	1	; select bank1
 17067  17A4  022E               	subwf	_ui16_mat_Current^(0+128),w
 17068  17A5  0008               	return
 17069  17A6                     __end_ofPL30:	
 17070  17A6                     PL52:	
 17071  17A6  0021               	movlb	1	; select bank1
 17072  17A7  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 17073  17A8  39F8               	andlw	-8
 17074  17A9  3805               	iorlw	5
 17075  17AA  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 17076  17AB  0020               	movlb	0	; select bank0
 17077  17AC  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 17078  17AD  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 17079  17AE  0023               	movlb	3	; select bank3
 17080  17AF  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 17081  17B0  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 17082  17B1  0022               	movlb	2	; select bank2
 17083  17B2  0008               	return
 17084  17B3                     __end_ofPL52:	
 17085  17B3                     PL62:	
 17086  17B3  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 17087  17B4  39F0               	andlw	-16
 17088  17B5  3801               	iorlw	1
 17089  17B6  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 17090  17B7  0022               	movlb	2	; select bank2
 17091  17B8  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 17092  17B9  0ACA               	incf	_Cb34_odPumpOff^(0+256),f
 17093  17BA  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 17094  17BB  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 17095  17BC  0008               	return
 17096  17BD                     __end_ofPL62:	
 17097  17BD                     PL64:	
 17098  17BD  0021               	movlb	1	; select bank1
 17099  17BE  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 17100  17BF  39F8               	andlw	-8
 17101  17C0  3804               	iorlw	4
 17102  17C1  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 17103  17C2  0020               	movlb	0	; select bank0
 17104  17C3  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 17105  17C4  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 17106  17C5  0022               	movlb	2	; select bank2
 17107  17C6  0008               	return
 17108  17C7                     __end_ofPL64:	
 17109  17C7                     PL70:	
 17110  17C7  0024               	movlb	4	; select bank4
 17111  17C8  0838               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),w
 17112  17C9  0020               	movlb	0	; select bank0
 17113  17CA  00A7               	movwf	___wmul@multiplicand+1
 17114  17CB  0024               	movlb	4	; select bank4
 17115  17CC  0837               	movf	BVH2_Appl_Layer@Sb2_Error^(0+512),w
 17116  17CD  0020               	movlb	0	; select bank0
 17117  17CE  00A6               	movwf	___wmul@multiplicand
 17118  17CF  0008               	return
 17119  17D0                     __end_ofPL70:	
 17120  17D0                     PL82:	
 17121  17D0  1742               	bsf	_SIBFS_UbatHandling_b^(0+128),6
 17122  17D1  0022               	movlb	2	; select bank2
 17123  17D2  01C7               	clrf	_Cb56_odPumpOff^(0+256)
 17124  17D3  0021               	movlb	1	; select bank1
 17125  17D4  01C1               	clrf	_Cb56_odFixedValueSel^(0+128)
 17126  17D5  0022               	movlb	2	; select bank2
 17127  17D6  01C8               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 17128  17D7  0008               	return
 17129  17D8                     __end_ofPL82:	
 17130  17D8                     PL86:	
 17131  17D8  3A80               	xorlw	128
 17132  17D9  0020               	movlb	0	; select bank0
 17133  17DA  00B2               	movwf	??_BVH2_Appl_Layer
 17134  17DB  3080               	movlw	128
 17135  17DC  0232               	subwf	??_BVH2_Appl_Layer,w
 17136  17DD  0008               	return
 17137  17DE                     __end_ofPL86:	
 17138  17DE                     PL92:	
 17139  17DE  39F0               	andlw	-16
 17140  17DF  3805               	iorlw	5
 17141  17E0  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 17142  17E1  0022               	movlb	2	; select bank2
 17143  17E2  01CF               	clrf	_Cb1_oShutoff^(0+256)
 17144  17E3  01D0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 17145  17E4  0008               	return
 17146  17E5                     __end_ofPL92:	
 17147  17E5                     PL96:	
 17148  17E5  0020               	movlb	0	; select bank0
 17149  17E6  00B2               	movwf	??_BVH2_Appl_Layer
 17150  17E7  0CB2               	rrf	??_BVH2_Appl_Layer,f
 17151  17E8  0C32               	rrf	??_BVH2_Appl_Layer,w
 17152  17E9  3903               	andlw	3
 17153  17EA  3A03               	xorlw	3
 17154  17EB  0008               	return
 17155  17EC                     __end_ofPL96:	
 17156  17EC                     PL112:	
 17157  17EC  0021               	movlb	1	; select bank1
 17158  17ED  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 17159  17EE  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 17160  17EF  0022               	movlb	2	; select bank2
 17161  17F0  01C3               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 17162  17F1  0008               	return
 17163  17F2                     __end_ofPL112:	
 17164  17F2                     PL114:	
 17165  17F2  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 17166  17F3  0022               	movlb	2	; select bank2
 17167  17F4  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 17168  17F5  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 17169  17F6  0ACB               	incf	_Cb34_odFixedValueSel^(0+256),f
 17170  17F7  0008               	return
 17171  17F8                     __end_ofPL114:	
 17172  17F8                     PL126:	
 17173  17F8  3000               	movlw	0
 17174  17F9  0020               	movlb	0	; select bank0
 17175  17FA  0257               	subwf	_ui16_Speed_mat+1,w
 17176  17FB  3405               	retlw	5
 17177  17FC                     __end_ofPL126:	
 17178  17FC                     PL136:	
 17179  17FC  3001               	movlw	1
 17180  17FD  0021               	movlb	1	; select bank1
 17181  17FE  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 17182  17FF  3491               	retlw	145
 17183  1800                     __end_ofPL136:	
 17184                           
 17185                           	psect	swtext2
 17186  0700                     __pswtext2:	
 17187  0700                     S14490:	
 17188  0700  3190  28DF         	ljmp	l13528
 17189  0702  3190  28DF         	ljmp	l13528
 17190  0704  3190  28DF         	ljmp	l13528
 17191  0706  3190  28DF         	ljmp	l13528
 17192  0708  3190  28DF         	ljmp	l13528
 17193  070A  3190  28DF         	ljmp	l13528
 17194  070C  3190  28DF         	ljmp	l13528
 17195  070E  3190  28DF         	ljmp	l13528
 17196                           
 17197                           	psect	intentry
 17198  0004                     __pintentry:	
 17199 ;; *************** function _interrupt_handler *****************
 17200 ;; Defined at:
 17201 ;;		line 77 in file "../interrupt.c"
 17202 ;; Parameters:    Size  Location     Type
 17203 ;;		None
 17204 ;; Auto vars:     Size  Location     Type
 17205 ;;		None
 17206 ;; Return value:  Size  Location     Type
 17207 ;;                  1    wreg      void 
 17208 ;; Registers used:
 17209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17210 ;; Tracked objects:
 17211 ;;		On entry : 0/0
 17212 ;;		On exit  : 1F/0
 17213 ;;		Unchanged: 0/0
 17214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17215 ;;      Params:         0       0       0       0       0       0       0       0
 17216 ;;      Locals:         0       0       0       0       0       0       0       0
 17217 ;;      Temps:          0       0       0       0       0       0       0       0
 17218 ;;      Totals:         0       0       0       0       0       0       0       0
 17219 ;;Total ram usage:        0 bytes
 17220 ;; Hardware stack levels used:    1
 17221 ;; Hardware stack levels required when called:    2
 17222 ;; This function calls:
 17223 ;;		_ELINMIntHandler
 17224 ;;		_PWM_CTRL
 17225 ;;		_Task1ms
 17226 ;;		_interrrupt_bldc
 17227 ;;		_interrupt_PWMCapture
 17228 ;; This function is called by:
 17229 ;;		Interrupt level 1
 17230 ;; This function uses a non-reentrant model
 17231 ;;
 17232                           
 17233  0004                     _interrupt_handler:	
 17234                           
 17235                           ;incstack = 0
 17236  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17237                           
 17238                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17239  0005  3180               	pagesel	$
 17240                           
 17241                           ;interrupt.c: 81: if( TMR1IF )
 17242  0006  0020               	movlb	0	; select bank0
 17243  0007  1811               	btfsc	17,0	;volatile
 17244                           
 17245                           ;interrupt.c: 83: {
 17246                           ;interrupt.c: 85: TMR1IF = 0;
 17247  0008  1011               	bcf	17,0	;volatile
 17248                           
 17249                           ;interrupt.c: 87: }
 17250                           ;interrupt.c: 90: if( TMR4IF )
 17251  0009  1C93               	btfss	19,1	;volatile
 17252  000A  2812               	goto	i1l14182
 17253                           
 17254                           ;interrupt.c: 92: {
 17255                           ;interrupt.c: 94: TMR4IF = 0;
 17256  000B  1093               	bcf	19,1	;volatile
 17257                           
 17258                           ;interrupt.c: 96: PWM_CTRL( );
 17259  000C  3186  26EC  3180   	fcall	_PWM_CTRL
 17260                           
 17261                           ;interrupt.c: 98: Task1ms( );
 17262  000F  3187  2716  3180   	fcall	_Task1ms
 17263  0012                     i1l14182:	
 17264                           
 17265                           ;interrupt.c: 100: }
 17266                           ;interrupt.c: 106: if( TMR2IF )
 17267  0012  0020               	movlb	0	; select bank0
 17268  0013  1C91               	btfss	17,1	;volatile
 17269  0014  2819               	goto	i1l14188
 17270                           
 17271                           ;interrupt.c: 108: {
 17272                           ;interrupt.c: 110: TMR2IF = 0;
 17273  0015  1091               	bcf	17,1	;volatile
 17274                           
 17275                           ;interrupt.c: 112: interrrupt_bldc( );
 17276  0016  319B  23BE  3180   	fcall	_interrrupt_bldc
 17277  0019                     i1l14188:	
 17278                           
 17279                           ;interrupt.c: 114: }
 17280                           ;interrupt.c: 117: if( TMR6IF )
 17281  0019  0020               	movlb	0	; select bank0
 17282  001A  1D93               	btfss	19,3	;volatile
 17283  001B  2820               	goto	i1l14194
 17284                           
 17285                           ;interrupt.c: 119: {
 17286                           ;interrupt.c: 121: TMR6IF = 0;
 17287  001C  1193               	bcf	19,3	;volatile
 17288                           
 17289                           ;interrupt.c: 126: ELINMIntHandler( );
 17290  001D  3184  24BF  3180   	fcall	_ELINMIntHandler
 17291  0020                     i1l14194:	
 17292                           
 17293                           ;interrupt.c: 131: }
 17294                           ;interrupt.c: 134: if( CCP5IF )
 17295  0020  0020               	movlb	0	; select bank0
 17296  0021  1F13               	btfss	19,6	;volatile
 17297  0022  2826               	goto	i1l14200
 17298                           
 17299                           ;interrupt.c: 136: {
 17300                           ;interrupt.c: 138: CCP5IF = 0;
 17301  0023  1313               	bcf	19,6	;volatile
 17302                           
 17303                           ;interrupt.c: 140: interrupt_PWMCapture( );
 17304  0024  3186  2606         	fcall	_interrupt_PWMCapture
 17305  0026                     i1l14200:	
 17306                           
 17307                           ;interrupt.c: 142: }
 17308                           ;interrupt.c: 145: if( CCP2IF )
 17309  0026  0020               	movlb	0	; select bank0
 17310  0027  1812               	btfsc	18,0	;volatile
 17311                           
 17312                           ;interrupt.c: 147: {
 17313                           ;interrupt.c: 149: CCP2IF = 0;
 17314  0028  1012               	bcf	18,0	;volatile
 17315  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17316  002A  0009               	retfie
 17317  002B                     __end_of_interrupt_handler:	
 17318                           
 17319                           	psect	swtext3
 17320  06C4                     __pswtext3:	
 17321  06C4                     i1S14492:	
 17322  06C4  319B  2BEE         	ljmp	i1l12540
 17323  06C6  319C  2C05         	ljmp	i1l12552
 17324  06C8  319C  2C1F         	ljmp	i1l12592
 17325  06CA  319C  2C4E         	ljmp	i1l12630
 17326  06CC  319C  2C02         	ljmp	i1l12550
 17327  06CE  319C  2C02         	ljmp	i1l12550
 17328  06D0  319C  2C02         	ljmp	i1l12550
 17329  06D2  319C  2C63         	ljmp	i1l284
 17330  06D4  319C  2C68         	ljmp	i1l12664
 17331  06D6  319C  2CFF         	ljmp	i1l267
 17332                           
 17333                           	psect	swtext4
 17334  06D8                     __pswtext4:	
 17335  06D8                     i1S14496:	
 17336  06D8  319D  2DD5         	ljmp	i1l7022
 17337  06DA  319D  2DD7         	ljmp	i1l7024
 17338  06DC  319D  2DDA         	ljmp	i1l7026
 17339  06DE  319D  2DDC         	ljmp	i1l7028
 17340  06E0  319D  2DDE         	ljmp	i1l7030
 17341  06E2  319D  2DE0         	ljmp	i1l7032
 17342  06E4  319D  2DE0         	ljmp	i1l7032
 17343  06E6  319D  2DE0         	ljmp	i1l7032
 17344  06E8  319D  2DE0         	ljmp	i1l7032
 17345  06EA  319D  2DE0         	ljmp	i1l7032
 17346                           
 17347                           	psect	text58
 17348  0716                     __ptext58:	
 17349 ;; *************** function _Task1ms *****************
 17350 ;; Defined at:
 17351 ;;		line 52 in file "../interrupt.c"
 17352 ;; Parameters:    Size  Location     Type
 17353 ;;		None
 17354 ;; Auto vars:     Size  Location     Type
 17355 ;;		None
 17356 ;; Return value:  Size  Location     Type
 17357 ;;                  1    wreg      void 
 17358 ;; Registers used:
 17359 ;;		status,2, status,0
 17360 ;; Tracked objects:
 17361 ;;		On entry : 1C/0
 17362 ;;		On exit  : 1F/1
 17363 ;;		Unchanged: 0/0
 17364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17365 ;;      Params:         0       0       0       0       0       0       0       0
 17366 ;;      Locals:         0       0       0       0       0       0       0       0
 17367 ;;      Temps:          0       0       0       0       0       0       0       0
 17368 ;;      Totals:         0       0       0       0       0       0       0       0
 17369 ;;Total ram usage:        0 bytes
 17370 ;; Hardware stack levels used:    1
 17371 ;; This function calls:
 17372 ;;		Nothing
 17373 ;; This function is called by:
 17374 ;;		_interrupt_handler
 17375 ;; This function uses a non-reentrant model
 17376 ;;
 17377                           
 17378                           
 17379                           ;psect for function _Task1ms
 17380  0716                     _Task1ms:	
 17381                           
 17382                           ;interrupt.c: 56: ui8_Task_Cont1ms++;
 17383                           
 17384                           ;incstack = 0
 17385                           ; Regs used in _Task1ms: [status]
 17386  0716  0021               	movlb	1	; select bank1
 17387  0717  0AD0               	incf	_ui8_Task_Cont1ms^(0+128),f
 17388  0718  0008               	return
 17389  0719                     __end_of_Task1ms:	
 17390                           
 17391                           	psect	text59
 17392  06EC                     __ptext59:	
 17393 ;; *************** function _PWM_CTRL *****************
 17394 ;; Defined at:
 17395 ;;		line 198 in file "../pwm.c"
 17396 ;; Parameters:    Size  Location     Type
 17397 ;;		None
 17398 ;; Auto vars:     Size  Location     Type
 17399 ;;		None
 17400 ;; Return value:  Size  Location     Type
 17401 ;;                  1    wreg      void 
 17402 ;; Registers used:
 17403 ;;		wreg, status,2, status,0
 17404 ;; Tracked objects:
 17405 ;;		On entry : 1F/0
 17406 ;;		On exit  : 1C/0
 17407 ;;		Unchanged: 0/0
 17408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17409 ;;      Params:         0       0       0       0       0       0       0       0
 17410 ;;      Locals:         0       0       0       0       0       0       0       0
 17411 ;;      Temps:          0       0       0       0       0       0       0       0
 17412 ;;      Totals:         0       0       0       0       0       0       0       0
 17413 ;;Total ram usage:        0 bytes
 17414 ;; Hardware stack levels used:    1
 17415 ;; This function calls:
 17416 ;;		Nothing
 17417 ;; This function is called by:
 17418 ;;		_interrupt_handler
 17419 ;; This function uses a non-reentrant model
 17420 ;;
 17421                           
 17422                           
 17423                           ;psect for function _PWM_CTRL
 17424  06EC                     _PWM_CTRL:	
 17425                           
 17426                           ;pwm.c: 288: ui8_PWM_FreqCnt++;
 17427                           
 17428                           ;incstack = 0
 17429                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 17430  06EC  0021               	movlb	1	; select bank1
 17431  06ED  3064               	movlw	100
 17432  06EE  0AC7               	incf	_ui8_PWM_FreqCnt^(0+128),f
 17433                           
 17434                           ;pwm.c: 290: if( ui8_PWM_FreqCnt >= 100 )
 17435  06EF  0247               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 17436  06F0  1C03               	skipc
 17437  06F1  2EF6               	goto	i1l8096
 17438                           
 17439                           ;pwm.c: 292: {
 17440                           ;pwm.c: 294: ui8_PWM_FreqCnt = 0;
 17441  06F2  01C7               	clrf	_ui8_PWM_FreqCnt^(0+128)
 17442                           
 17443                           ;pwm.c: 295: LATC0 = 0;
 17444  06F3  0022               	movlb	2	; select bank2
 17445  06F4  100E               	bcf	14,0	;volatile
 17446                           
 17447                           ;pwm.c: 298: }
 17448  06F5  0008               	return
 17449  06F6                     i1l8096:	
 17450                           
 17451                           ;pwm.c: 301: else
 17452                           ;pwm.c: 302: {
 17453                           ;pwm.c: 304: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 17454  06F6  0022               	movlb	2	; select bank2
 17455  06F7  0855               	movf	_ui8_PWMoutvalue^(0+256),w
 17456  06F8  0021               	movlb	1	; select bank1
 17457  06F9  0247               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 17458  06FA  1C03               	skipc
 17459  06FB  0008               	return
 17460                           
 17461                           ;pwm.c: 306: {
 17462                           ;pwm.c: 308: LATC0 = 1;
 17463  06FC  0022               	movlb	2	; select bank2
 17464  06FD  140E               	bsf	14,0	;volatile
 17465  06FE  0008               	return
 17466  06FF                     __end_of_PWM_CTRL:	


Data Sizes:
    Strings     0
    Constant    101
    Data        16
    BSS         261
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     52      74
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      4      78
    BANK4            80     32      59
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sp___ELINMIntGetPointer	PTR unsigned char  size(1) Largest target is 11
		 -> _ELINMIntMessageBuffer(BANK4[11]), 

    pt	PTR unsigned char  size(1) Largest target is 11
		 -> NULL(NULL[0]), _ELINMIntMessageBuffer(BANK4[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrupt_handler->_interrrupt_bldc
    _interrrupt_bldc->i1_commutate
    _ELINMIntHandler->__ELINMIntResetProtocol

Critical Paths under _main in BANK0

    _main->_EOL
    _timer_init->_clear_timer
    _init_ports->_read_eeprom_data
    _InitMotorRun->_commutate
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    _SetDiagAlarm->_PWM_Write_Out
    _Receive_Diag->__ELINMIntReceiveMessage
    __ELINMIntReceiveMessage->__ELINMIntSendMessage
    _Get_Analog_Value->_FILTER_Ubat
    _EOL->_NegativeAnswer
    _write_eeprom_data->___lwdiv
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _NegativeAnswer->_Transmit_LIN_8Bytes
    _Transmit_LIN_8Bytes->__ELINMIntSendMessage
    __ELINMIntSendMessage->__ELINMIntCalcIDParity
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   67575
                                              0 BANK3      4     4      0
                    _BVH2_Appl_Layer
                                _EOL
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                       _Receive_Diag
                       _SetDiagAlarm
                            ___awdiv
                        _clear_timer
                   _read_eeprom_data
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0     468
                           _ADC_Init
                           _DiagInit
                       _EnableMCP201
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                __ELINMIntInitialize
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                              5 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0      90
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            0     0      0       0
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0       0
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0       0
                                              4 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) __ELINMIntInitialize                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    1     1      0     144
                                              7 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          0     0      0      54
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (2) _EnableMCP201                                         3     3      0      72
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      42
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     651
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      42
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (1) _Receive_Diag                                         2     2      0    2957
                                             18 BANK0      2     2      0
                __ELINMIntGetPointer
            __ELINMIntReceiveMessage
 ---------------------------------------------------------------------------------
 (2) __ELINMIntReceiveMessage                              3     1      2    2415
                                             15 BANK0      3     1      2
               __ELINMIntSendMessage
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                              4 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EOL                                                 27    27      0   59469
                                             25 BANK0     27    27      0
                           _ADC_Read
                           _ADC_Wait
                      _InitMotorStop
                     _NegativeAnswer
                          _PWMReadDC
                      _PWM_Write_Out
                _Transmit_LIN_8Bytes
                            ___lwdiv
                             ___wmul
                              _cksum
                   _read_eeprom_data
                  _write_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _write_eeprom_data                                    2     1      1    1356
                                             11 BANK0      2     1      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     2     2      0      90
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _cksum                                                8     6      2     204
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1634
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        1     1      0      42
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWMReadDC                                            0     0      0     456
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (3) ___tmul                                               9     3      6     404
                                              4 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___ltdiv                                             10     4      6      52
                                             13 BANK0     10     4      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _NegativeAnswer                                       1     1      0   24070
                                             24 BANK0      1     1      0
                _Transmit_LIN_8Bytes
 ---------------------------------------------------------------------------------
 (2) _Transmit_LIN_8Bytes                                  9     1      8   24028
                                             15 BANK0      9     1      8
                __ELINMIntGetPointer
               __ELINMIntSendMessage
 ---------------------------------------------------------------------------------
 (3) __ELINMIntSendMessage                                10     5      5    1950
                                              5 BANK0     10     5      5
              __ELINMIntCalcIDParity
 ---------------------------------------------------------------------------------
 (4) __ELINMIntCalcIDParity                                1     1      0     438
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) __ELINMIntGetPointer                                  2     1      1     500
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             3     1      2      54
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     38    38      0    3876
                                             18 BANK0      6     6      0
                                              0 BANK4     32    32      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1175
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                    0     0      0     208
                    _ELINMIntHandler
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (7) _interrupt_PWMCapture                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _interrrupt_bldc                                      6     6      0     186
                                             12 COMMON     2     2      0
                                              0 BANK0      4     4      0
                           _BLDCWait
                         i1_ADC_Read
                         i1_ADC_Wait
                          i1___lwdiv
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (8) i1_commutate                                         12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4      56
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) i1___lwdiv                                            7     3      4      52
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_ADC_Read                                           3     1      2      24
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (8) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Task1ms                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PWM_CTRL                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ELINMIntHandler                                      0     0      0      22
             __ELINMIntResetProtocol
 ---------------------------------------------------------------------------------
 (8) __ELINMIntResetProtocol                               1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _EOL
     _ADC_Read
     _ADC_Wait
     _InitMotorStop
     _NegativeAnswer
       _Transmit_LIN_8Bytes
         __ELINMIntGetPointer
         __ELINMIntSendMessage
           __ELINMIntCalcIDParity
     _PWMReadDC
       ___ltdiv
         ___tmul (ARG)
       ___tmul
     _PWM_Write_Out
     _Transmit_LIN_8Bytes
       __ELINMIntGetPointer
       __ELINMIntSendMessage
         __ELINMIntCalcIDParity
     ___lwdiv
     ___wmul
     _cksum
     _read_eeprom_data
     _write_eeprom_data
       ___lwdiv (ARG)
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
   _InitMotorStop
   _Receive_Diag
     __ELINMIntGetPointer
     __ELINMIntReceiveMessage
       __ELINMIntSendMessage
         __ELINMIntCalcIDParity
   _SetDiagAlarm
     _PWM_Write_Out
   ___awdiv
   _clear_timer
   _read_eeprom_data
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _EnableMCP201
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     __ELINMIntInitialize
     _init_bldc
       _InitMotorRun
         _commutate
     _init_ports
       _read_eeprom_data
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _ELINMIntHandler
     __ELINMIntResetProtocol
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     i1_ADC_Read
     i1_ADC_Wait
     i1___lwdiv
     i1___wmul
     i1_commutate
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     181       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     34      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      4      4E      12       97.5%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     20      3B      14       73.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     181      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Feb 12 15:07:04 2019

                               EOL@_dcnt_420 0044                                 EOL@_dcnt_421 0045  
                               EOL@_dcnt_413 003D                                 EOL@_dcnt_422 0046  
                               EOL@_dcnt_414 003E                                 EOL@_dcnt_423 0047  
                               EOL@_dcnt_415 003F                                 EOL@_dcnt_424 0048  
                               EOL@_dcnt_416 0040                                 EOL@_dcnt_425 0049  
                               EOL@_dcnt_417 0041                                 EOL@_dcnt_426 004A  
                               EOL@_dcnt_418 0042                                 EOL@_dcnt_427 004B  
                               EOL@_dcnt_419 0043                                 EOL@_dcnt_428 004C  
                               EOL@_dcnt_429 004D                            ?_PWM_Capture_init 0070  
                                          _B 01A0                                            pc 0002  
                                         PL2 0E2A                                           PL4 0E3A  
                                         PL6 0E48                                           PL8 03E1  
                                         l69 0F1B                                           _RD 0CA8  
                                         _WR 0CA9                                 ___awdiv@sign 0029  
                         ??_PWM_Capture_init 0024                                           _pt 005F  
                        ___wmul@multiplicand 0026                             i1___wmul@product 0074  
                   _SIBFS_Pic_etat_monitor_b 00C3             BVH2_Appl_Layer@X_Sb4_Intergrator 0169  
                        __end_of_system_init 0371                                          PL10 0E6A  
                                        PL20 1ED3                                          PL12 0E7B  
                                        PL30 1793                                          PL22 0E9D  
                                        PL14 0E80                                          PL40 1F30  
                                        PL32 1EEB                                          PL24 177D  
                                        PL16 0E8F                                          PL50 1F71  
                                        PL42 1F40                                          PL34 1EFD  
                                        PL26 178A                                          PL18 1EB8  
                                        PL60 0EB9                                          PL52 17A6  
                                        PL44 1F50                                          PL36 1F0E  
                                        PL28 03E9                                          PL70 17C7  
                                        PL62 17B3                                          PL54 0EA5  
                                        PL46 1F61                                          PL38 1F1F  
                                        PL80 1F8D                                          PL72 1F81  
                                        PL64 17BD                                          PL56 0EAB  
                                        PL48 03F0                                          PL90 1F9B  
                                        PL82 17D0                                          PL74 0EC0  
                                        PL66 05A7                                          PL58 0EB2  
                                        PL92 17DE                                          PL84 1F95  
                                        PL76 1F87                                          PL68 1F7B  
                                        PL94 0F2E                                          PL86 17D8  
                                        PL78 0EC9                                          PL96 17E5  
                                        PL88 0ED1  BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00BF  
                                        PL98 1FA1                                  ?i1_ADC_Read 0070  
                                        l327 1B29                                          l600 0AB5  
                                        l345 1B57                                          l610 0AC3  
                                        l620 0AEA                                          l604 0ABE  
                                        l605 0ABC                                          l630 0AF8  
                                        l614 0AE5                                          l534 02E2  
                                        l615 0AE3                                          l640 0B06  
                                        l624 0AF3                                          l536 02E8  
                                        l625 0AF1                                          l609 0AC5  
                                ?i1_ADC_Wait 0070                                          l650 0B2D  
                                        l634 0B01                                          l635 0AFF  
                                        l619 0AEC                                          l660 0B3B  
                                        l644 0B28                                          l645 0B26  
                                        l629 0AFA                                          l670 0B49  
                                        l654 0B36                                          l590 0AA7  
                                        l751 0DAA                                          l655 0B34  
                                        l639 0B08                                          l752 0DAE  
                                        l664 0B44                                          l584 0AA2  
                                        l665 0B42                                          l649 0B2F  
                                        l585 0AA0                                          l594 0AB0  
                                        l659 0B3D                                          l595 0AAE  
                                        l916 025F                                          l940 03C6  
                                        l669 0B4B                                          l589 0AA9  
                                        l941 03C4                                          l950 03D6  
                                        l599 0AB7                                          l919 0268  
                                        l951 03D4                                          l945 03CE  
                                        l946 03CC                                          l895 0DB2  
                                        _GIE 005F                                          _EOL 08FA  
                                        _RC5 0075                                          _PR2 001B  
                                        _sum 012F                             _ui16_IPhase_bldc 0058  
                               __CFG_BORV$LO 0000                                          wreg 0009  
                          _ui16_IPhase1_bldc 013B                           __ELINMIntTFrameMax 01CE  
                          _ui16_IPhase2_bldc 01D4                           __ELINMIntTFrameMin 012D  
                          _ui16_IPhase3_bldc 01D2                    BVH2_Appl_Layer@Cb24_Reset 0233  
                                       PL100 1FA8                                         PL110 0ED7  
                                       PL102 0655                                         PL120 1FC0  
                                       PL112 17EC                                         PL104 086B  
                                       PL130 1FCF                                         PL122 1FC5  
                                       PL114 17F2                                         PL106 05AE  
                                       PL132 065F                                         PL124 1FCA  
                                       PL116 1FB4                                         PL108 1FAE  
                                       PL134 1FD4                                         PL126 17F8  
                                       PL118 1FBA                                         PL136 17FC  
                                       PL128 065B                                 __CFG_LVP$OFF 0000  
                                       ?_EOL 0070                          __ELINMIntTHeaderMax 01CC  
                        __ELINMIntTHeaderMin 012B                      __end_of_interrrupt_bldc 1D54  
                                       l1011 04A0                                         l1012 04A4  
                                       l1013 04A8                                         l1014 04AC  
                                       l1015 04B1                                         l1016 04B5  
                                       l1017 04B9                                         l1018 04BD  
                                       _C1IE 0495                                         l2115 1721  
                                       l2071 1648                         __end_of_EnableMCP201 03DB  
                                       l1601 1123                                         l2065 0FA6  
                                       l1611 115E                                         l1605 1145  
                                       l1614 116B                                         l1366 0605  
                                       l1711 13C8                                         l1623 11FC  
                                       l1609 114A                                         l1802 15FB  
                                       l1730 13EA                                         l1642 11D6  
                                       l1731 13ED                                         l1716 13A7  
                                       l1580 10F0                                         l1725 13DF  
                                       l1653 1245                                         l1734 1407  
                                       l1647 131E                                         l1744 1436  
                                       l1728 1412                                         l1753 145C  
                                       l1729 13EF                                         l1593 111E  
                                       l1577 10B8                                         l1850 16FA  
                                       l1594 110C                                         l1747 144A  
                                       l1852 16FC                                         l1844 16E1  
                                       l6004 1B66                                         l1940 0333  
                                       l1853 16FE                                         l1845 16F0  
                                       l1597 1117                                         l1917 03A9  
                                       l1854 170F                                         l1846 16E3  
                                       l1790 1578                                         l1694 1332  
                                       l6022 1B69                                         l1847 16E5  
                                       l1759 1465                                         l1688 12EB  
                                       l6120 1BA0                                         l1794 158A  
                                       l6114 1B98                                         l6042 1B73  
                                       l6052 1B7E                                         l6028 1B71  
                                       l1973 0FDA                                         l6134 1BA6  
                                       l6046 1B76                                         l6142 1BA9  
                                       l6072 1B89                                         l6144 1BBD  
                                       l6090 1B8C                                         l6066 1B81  
                                       l6330 031C                                         l6236 02F0  
                                       l6332 031F                                         l6324 0315  
                                       l6326 0317                                         l6096 1B94  
                                       l6328 031A                                         l6336 0322  
                                       l5902 1AAE                                         l6640 0388  
                                       l6624 0374                                         l5930 1AF6  
                                       l6634 0380                                         l6388 0663  
                                       l5940 1B03                                         l5932 1AFA  
                                       l6628 0378                                         l9062 01A9  
                                       l5942 1B05                                         l5934 1AFC  
                                       l6646 0390                                         l6654 0398  
                                       l5960 1B22                                         l5936 1AFF  
                                       l9090 01D2                                         l6690 05FC  
                                       l6682 05F0                                         l6674 05E4  
                                       l6666 05D8                                         l6658 05CC  
                                       l5938 1B01                                         l5954 1B0A  
                                       l9068 01B2                                         l5956 1B18  
                                       l9094 01DA                                         l9086 01CE  
                                       l9078 01BF                                         l5966 1B2F  
                                       l5992 1B55                                         l5968 1B3C  
                                       l5986 1B4F                                         l5898 1AA3  
                                       _ADON 04E8                                         l5998 1B5E  
                                       l9822 168A                                         l9806 1671  
                                       l9904 16D4                                         l9832 16A2  
                                       _CFGS 0CAE                                         l9850 1696  
                                       l9834 16A4                                         l9818 167B  
                                       l9930 1709                                         l9922 16E7  
                                       l9836 168F                                         l9828 169F  
                                       l9928 1700                                         l9946 161F  
                                       l9890 16C5                                         l9948 1623  
                                       l9876 16B6                                         l9886 16C3  
                                       l9982 1652                                         _LATA 010C  
                                       _LATB 010D                                         _LATC 010E  
                                       _PIE1 0091                                         _PIE2 0092  
                                       _PIE3 0093                                         _PEIE 005E  
                                       u3585 040A                                         u3595 066F  
                                       _RCIF 008D                                         i1l69 1D6E  
                                       u7705 1755                                         u6905 01C7  
                                       _TMR0 0015                                         _TMR2 001A  
                                       _TMR4 0415                                         _TMR6 041C  
                                       _WREN 0CAA                                         _Bcnt 00DC  
                           _ui8_Task_Cont1ms 00D0                             _ui8_Task_Cont3ms 0158  
                           _ui8_Task_Cont5ms 0157                             _ui16_PWM_Freq_In 0127  
                 BVH2_Appl_Layer@Cb24_BadCnt 01C2                                         _main 0072  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                            _ui8_b_DResLocID_c 0062  
                        timer_init@ui8_TmrNb 0025                             __end_of_ADC_Init 03B4  
                           __end_of_ADC_Read 0F2E                             __end_of_ADC_Wait 0E0D  
                                       start 002B                              _ui8_sampleState 00DE  
                           __end_of_BLDCWait 1EB8                       __size_of_PWM_Write_Out 0005  
                         _ui16_comm_time_max 0131                                        S14490 0700  
                                      S14488 06B0              __end_of__ELINMIntReceiveMessage 02C3  
                                      ??_EOL 0039                                  i1_commutate 1D90  
                              ?_InitMotorRun 0070                              __end_of_Task1ms 0719  
                        __ELINMIntGetPointer 0E27                                __CFG_PLLEN$ON 0000  
                               cksum@counter 0026                                        l10000 1730  
                                      l10010 1743                                        l10022 1766  
                                      l10026 1774                                        l10018 1760  
                                      l12112 0466                                        l12122 046F  
                                      l12124 047D                                        l12128 048A  
                                      l12216 0FAE                                        l13120 0C3F  
                                      l12154 0F24                                        l12242 0F97  
                                      l12234 0F81                                        l13122 0C4E  
                                      l14012 1421                                        l12308 0FFB  
                                      l13300 0D1C                                        l13124 0C50  
                                      l12252 0F03                                        l14110 14BB  
                                      l14102 14AA                                        l14022 1434  
                                      l12246 0F9C                                        l13222 0CD8  
                                      l13214 0CD3                                        l13150 0C82  
                                      l13118 0C3C                                        l12430 0864  
                                      l14120 14CB                                        l12344 0F6E  
                                      l13216 0CD6                                        l13128 0C66  
                                      l12442 0E15                                        l14130 1529  
                                      l14114 14C1                                        l14042 1452  
                                      l14034 1448                                        l12338 0F66  
                                      l13250 0CF4                                        l13226 0CE0  
                                      l13170 0C9B                                        l13058 0B69  
                                      l12434 0867                                        l14210 0079  
                                      l14132 1531                                        l14028 1441  
                                      l13340 0D88                                        l13332 0D76  
                                      l13172 0C9E                                        l13148 0C7F  
                                      l12380 08C7                                        l12372 08A9  
                                      l12364 088B                                        l14300 0188  
                                      l12438 0E0F                                        l14118 14C9  
                                      l14134 1536                                        l14062 146D  
                                      l12470 0EF8                                        l12462 0EE9  
                                      l12294 0FE3                                        l13078 0BAF  
                                      l12382 08CB                                        l12374 08AD  
                                      l12366 088F                                        l14160 15F5  
                                      l14144 1587                                        l13520 10C3  
                                      l13328 0D6A                                        l13192 0CB7  
                                      l14312 0198                                        l14224 0099  
                                      l14162 160A                                        l14058 146A  
                                      l13522 10D8                                        l12474 0EFC  
                                      l13274 0D03                                        l13194 0CBA  
                                      l13098 0BF5                                        l12810 0937  
                                      l13346 0D8A                                        l14156 15D9  
                                      l14148 158E                                        l14092 149C  
                                      l13700 11CE                                        l13508 10B4  
                                      l13460 1085                                        l14252 00E2  
                                      l14158 15E5                                        l14078 1485  
                                      l13630 1175                                        l13606 1143  
                                      l13550 10F5                                        l13470 109E  
                                      l13294 0D0B                                        l12830 0972  
                                      l12806 0932                                        l14270 013C  
                                      l14254 0111                                        l13640 1182  
                                      l13528 10DF                                        l13296 0D13  
                                      l12824 0965                                        l14272 013E  
                                      l13810 1296                                        l13650 1196  
                                      l13642 1189                                        l13562 10F9  
                                      l13546 10E2                                        l13466 1092  
                                      l12922 0A26                                        l12818 094D  
                                      l14290 0177                                        l13804 1289  
                                      l13732 1211                                        l13660 11A6  
                                      l13572 1109                                        l13476 10A6  
                                      l13468 1096                                        l12844 0989  
                                      l12828 0969                                        l12780 02D6  
                                      l12772 02C9                                        l13814 12A5  
                                      l13742 1228                                        l13638 117F  
                                      l13718 11E3                                        l13494 10AD  
                                      l13478 10A9                                        l12934 0A3F  
                                      l12926 0A33                                        l12846 0991  
                                      l13920 1371                                        l13912 135B  
                                      l13832 12CB                                        l13744 122B  
                                      l13656 119F                                        l13648 1191  
                                      l12960 0A8E                                        l12952 0A7C  
                                      l12864 09B9                                        l12792 02ED  
                                      l12784 02DC                                        l12776 02D0  
                                      l13906 134D                                        l13842 12D3  
                                      l13770 1254                                        l13762 1247  
                                      l13666 11B4                                        l13658 11A3  
                                      l13916 1366                                        l13860 12F1  
                                      l13828 12BE                                        l13668 11B7  
                                      l13596 1130                                        l12956 0A89  
                                      l12868 09C5                                        l13950 13B3  
                                      l13942 13AB                                        l13854 12E2  
                                      l13782 1261                                        l13766 124E  
                                      l13758 122F                                        l13678 11C3  
                                      l12798 0922                                        l14486 1B10  
                                      l13960 13CD                                        l13856 12E8  
                                      l13954 13C1                                        l13794 127A  
                                      l13786 126F                                        l13964 13CF  
                                      l13876 1307                                        l13992 1400  
                                      l13898 1340                                        _C1OUT 088E  
                            __end_of___aldiv 177D                                        ?_main 0070  
                            __end_of___awdiv 01DF                                        _EEPGD 0CAF  
                                      u11315 0A63                              ___awdiv@divisor 0024  
                                      u11325 0A74                                        u12160 121A  
                                      _T1CON 0018                                        u12170 121B  
                                      u10475 0F8E                                        u11285 0A1E  
                                      _T2CON 001C                                        u11821 10F4  
                                      u10685 0EF1                                        _LATB1 0869  
                                      _LATB2 086A                                        _LATC0 0870  
                                      _LATC1 0871                                        _LATC2 0872  
                                      _LATC3 0873                                _InitMotorStop 01DF  
                                      _LATC4 0874                                        _T4CON 0417  
                                      u12945 1500                                        u12955 1519  
                            __end_of___ltdiv 0FA3                                        u12965 1524  
                                      u12975 156E                                        _T6CON 041E  
                            __end_of___lwdiv 0F01                                        i1l316 1D40  
                                      i1l327 1E04                                        i1l263 1BEA  
                                      i1l345 1E30                                        i1l267 1CFF  
                                      i1l284 1C63                                        i1l970 0516  
                                      i1l980 0513                                        i1l964 04DB  
                                      i1l991 0584                                        i1l967 04D9  
                                      i1l978 050C                              ___awdiv@counter 0028  
                                      _RCREG 0199                             ?_ELINMIntHandler 0070  
                                      _SENDB 0CF3                                        _RCSTA 019D  
                                      _TMR1H 0017                                        _TMR1L 0016  
                                      _SPBRG 019B                            _ui8_BlankingCount 00E2  
                          EnableMCP201@_dcnt 0024                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
                                      _TXREG 019A                                        _TXSTA 019E  
                        ___lmul@multiplicand 0028                            _ui16_PWM_Freq_mat 0129  
                     ?__ELINMIntCalcIDParity 0070                                        _cksum 0FD2  
                       ?__ELINMIntGetPointer 0024     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00BD  
                           __end_of_PWM_CTRL 06FF                 ?_Cb56_UbatHandling_node_fcn2 0070  
                           __end_ofi1___wmul 1D90            BVH2_Appl_Layer@Cb24_oMotorStalled 0142  
                                      status 0003                             __end_of_DiagInit 03C0  
                        i1___wmul@multiplier 0070                                        wtemp0 007E  
                         __size_of_PWMReadDC 003C               ??_Cb34_PWM_Detection_node_fcn1 0024  
                               __end_ofPL100 1FAE                                 __end_ofPL110 0EDC  
                               __end_ofPL102 065B                                 __end_ofPL120 1FC5  
                               __end_ofPL112 17F2                                 __end_ofPL104 0871  
                               __end_ofPL130 1FD4                                 __end_ofPL122 1FCA  
                               __end_ofPL114 17F8                                 __end_ofPL106 05B4  
                               __end_ofPL132 0663                                 __end_ofPL124 1FCF  
                               __end_ofPL116 1FBA                                 __end_ofPL108 1FB4  
                               __end_ofPL134 1FD9                                 __end_ofPL126 17FC  
                               __end_ofPL118 1FC0                                 __end_ofPL136 1800  
                               __end_ofPL128 065F                           __size_ofi1___lwdiv 0025  
                        __size_ofi1_ADC_Read 000E                          __size_ofi1_ADC_Wait 0019  
                             __CFG_MCLRE$OFF 0000                           _ui8_b_DResServID_c 00D7  
                            __initialization 002D                             _ui8_selected_lid 0069  
                BVH2_Appl_Layer@Cb51_Counter 0145                  BVH2_Appl_Layer@Cb19_Counter 00A2  
                             _NegativeAnswer 0FC0                                  _system_init 0334  
                         _ui8_duty_cycle_mat 015D                                 __end_of_main 019F  
                             ??_InitMotorRun 0030                              _PWM_trans_table 1800  
                        __ELINMIntInitialize 041D                         __size_of_clear_timer 0021  
                             ?_InitMotorStop 0070                                       ??_main 01EA  
                       __size_of_FILTER_Init 0018                         __size_of_FILTER_Ubat 006C  
                       __size_of_FILTER_Temp 0029                            ?_read_eeprom_data 0070  
                       _BVH2_Appl_Layer$1210 022C                         _BVH2_Appl_Layer$1211 022D  
                       _BVH2_Appl_Layer$1212 022E                         _BVH2_Appl_Layer$1207 0229  
                       _BVH2_Appl_Layer$1215 0224                         _BVH2_Appl_Layer$1208 022A  
                       _BVH2_Appl_Layer$1209 022B                         _BVH2_Appl_Layer$1217 0226  
                       _BVH2_Appl_Layer$1218 0220                                ?_Receive_Diag 0070  
                       _interrupt_PWMCapture 0606                            ?_Get_Analog_Value 0070  
               __end_of__ELINMIntSendMessage 0499                  _ui16_NTC_Temp_bldc_mean_cal 01DA  
                         ??_read_eeprom_data 0024                                _PWM_Write_Out 0E22  
                                     _ADCON0 009D                           ??_Get_Analog_Value 0030  
                                     _ADCON1 009E                                       ?_cksum 0024  
                      ??__ELINMIntGetPointer 0025                         ?__ELINMIntInitialize 0070  
                                     _CCP1AS 0295                                       _CCP1IE 048A  
                                     _CCP1IF 008A                                       _CCP2IE 0490  
                                     _CCP2IF 0090                                       _CCP3IE 049C  
                                     _CCP3IF 009C                                       _CCP4IE 049D  
                                     _CCP4IF 009D                                       _CCP5IE 049E  
                                     _CCP5IF 009E                                       _ADRESH 009C  
                                     _EEADRH 0192                                       _ADRESL 009B  
                                     _EEADRL 0191                                       _EEDATA 0193  
                                     _CCPR1H 0292                                       _CCPR2H 0299  
                                     _EEDATH 0194                                       _CCPR3H 0312  
                                     _CCPR1L 0291                                       _CCPR4H 0319  
                                     _CCPR2L 0298                                       _EEDATL 0193  
                                     _CCPR3L 0311                                       _CCPR5H 031D  
                                     _CCPR4L 0318                                       _CCPR5L 031C  
                                     _EECON1 0195                                       _EECON2 0196  
                           ___awdiv@dividend 0026                                    ADC_Read@i 0026  
                                     _ANSELA 018C                                       _ANSELB 018D  
                           ?_interrrupt_bldc 0070                                ?_SetDiagAlarm 0070  
                                     i1l1006 0595                                       i1l1385 0607  
                                     i1l1388 061A                                       i1l7020 1DD1  
                                     i1l7030 1DDE                                       i1l7022 1DD5  
                                     i1l7112 1E42                                       i1l7032 1DE0  
                                     i1l7024 1DD7                                       i1l7210 1E79  
                                     i1l7050 1DFD                                       i1l7026 1DDA  
                                     i1l7204 1E71                                       i1l7132 1E4C  
                                     i1l7028 1DDC                                       i1l7044 1DE5  
                                     i1l7142 1E57                                       i1l7118 1E4A  
                                     i1l7046 1DF3                                       i1l7224 1E7F  
                                     i1l7136 1E4F                                       i1l7232 1E82  
                                     i1l7056 1E0A                                       i1l8202 057B  
                                     i1l8130 04F1                                       i1l8122 04E6  
                                     i1l7162 1E62                                       i1l7234 1E96  
                                     i1l7082 1E2E                                       i1l7058 1E15  
                                     i1l8204 057D                                       i1l7180 1E65  
                                     i1l7156 1E5A                                       i1l7076 1E28  
                                     i1l8134 04F9                                       i1l7094 1E3F  
                                     i1l8144 0509                                       i1l7088 1E37  
                                     i1l8224 0646                                       i1l8216 060F  
                                     i1l8154 051D                                       i1l7186 1E6D  
                                     i1l8172 0540                                       i1l8156 051F  
                                     i1l8228 0648                              _ui8_PWM_FreqCnt 00C7  
                                     i1l8190 0560                                       i1l8174 0543  
                                     i1l8184 0554                                       i1l8168 0537  
                                     i1l8096 06F6                                       i1l8194 0568  
                                     i1l8188 055E                                       i1l8198 0571  
                                     i1l6984 1D76                                       i1l6992 1D9B  
                                     _INTCON 000B                                       _FVRCON 0117  
                         _ui8_Task_Cont100ms 00C8            __ELINMIntReceiveMessage@_ELINM_id 002F  
                                     _OSCCON 0099                ??_Cb56_UbatHandling_node_fcn2 0024  
                                     _TMR0IE 005D                                       _TMR1IE 0488  
                                     _TMR1IF 0088                                       _TMR2IE 0489  
                                     _TMR2IF 0089                                       _TMR4IE 0499  
                                     _TMR4IF 0099                                       _SPBRGH 019C  
                                     _TMR6IE 049B                                       _TMR6IF 009B  
                                     _WDTCON 0097         BVH2_Appl_Layer@Sb1_Logical_Operator1 023B  
       BVH2_Appl_Layer@Sb1_Logical_Operator2 0228         BVH2_Appl_Layer@Sb1_Logical_Operator3 0234  
       BVH2_Appl_Layer@Sb1_Logical_Operator5 0235                       __end_of_NegativeAnswer 0FD2  
                                  ??_Task1ms 0070                                   _MotorFlags 0063  
 BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016D                       __ELINMIntMessageBuffer 0250  
                                     ___lmul 1644                                    ??___aldiv 002C  
                                     ___tmul 0FA3                                       ___wmul 0E0D  
                                  ??___awdiv 0028                    BVH2_Appl_Layer@Sb4_PI_sum 023E  
                                  ??___ltdiv 0033                                    ??___lwdiv 0028  
                            _ui8_PWMinDC_sav 00C6                             ___awdiv@quotient 002A  
                                     _my_msg 01B0                            _write_eeprom_data 0D98  
          BVH2_Appl_Layer@Cb24_oStalledAlarm 0141                            __end_of_PWMReadDC 0F71  
                             ??_Receive_Diag 0032                            __end_ofi1___lwdiv 1FFE  
                         EOL@ui8_b_DResB0_RD 0050                           EOL@ui8_b_DResB1_RD 0051  
                         EOL@ui8_b_DResB2_RD 0052                           EOL@ui8_b_DResB3_RD 0053  
                      ?_interrupt_PWMCapture 0070                           EOL@ui8_b_DResB4_RD 004F  
                         EOL@ui8_b_DResB5_RD 004E                           ?_write_eeprom_data 002B  
                      __size_of_EnableMCP201 001B                                    ?_ADC_Init 0070  
                                  ?_ADC_Read 0024                                    ?_ADC_Wait 0070  
                             ?_PWM_Write_Out 0070                                    ?_BLDCWait 0070  
                   __size_of_BVH2_Appl_Layer 058F                        ??__ELINMIntInitialize 0024  
                             ??_SetDiagAlarm 0025                          ??_write_eeprom_data 002C  
           __size_of__ELINMIntReceiveMessage 0015             BVH2_Appl_Layer@Cb9_oCurrentAlarm 013D  
                    __end_of__initialization 006F                        __end_of_FILTER_IPhase 041D  
                    __end_of_PWM_trans_table 1865                     ??__ELINMIntResetProtocol 0070  
                            ?_NegativeAnswer 0070                          _ui8_duty_cycle_BLDC 0064  
                             __pcstackCOMMON 0070                              _ui8_PWMoutvalue 0155  
                               __pidataBANK0 0000                                 __pidataBANK1 0000  
                               __pidataBANK2 0000                           _ui16_dryRun_Thresh 01E8  
                              __end_of_cksum 1000                                 _EnableMCP201 03C0  
                            ??_InitMotorStop 0024         __size_of_Cb56_UbatHandling_node_fcn2 0035  
     __ELINMIntGetPointer@_ELINMInt_position 0024                    __end_of_write_eeprom_data 0DB1  
            __ELINMIntSendMessage@_ELINM_chk 002D              __ELINMIntSendMessage@_ELINM_idr 002A  
                                 __end_ofPL2 0E3A                                   __end_ofPL4 0E48  
                                 __end_ofPL6 0E6A                                   __end_ofPL8 03E9  
            __ELINMIntSendMessage@_ELINM_tid 002B                                    ?_PWM_CTRL 0070  
                               ??i1_ADC_Read 0072                                    ?i1___wmul 0070  
                               ??i1_ADC_Wait 0070                                    ?_DiagInit 0070  
                      Transmit_LIN_8Bytes@B0 002F                        Transmit_LIN_8Bytes@B1 0030  
                      Transmit_LIN_8Bytes@B2 0031                        Transmit_LIN_8Bytes@B3 0032  
                      Transmit_LIN_8Bytes@B4 0033                        Transmit_LIN_8Bytes@B5 0034  
                      Transmit_LIN_8Bytes@B6 0035                        Transmit_LIN_8Bytes@B7 0036  
                      Transmit_LIN_8Bytes@ID 0037                            _Cb1_oCurrentAlarm 0150  
                                 ??_ADC_Init 0024                                   ??_ADC_Read 0026  
                                 ??_ADC_Wait 0024                        _ui16_Speed_demand_mat 01C8  
                                 ??_BLDCWait 0070                  __end_of_Oscill_Source_Block 03E1  
                  __size_of_PWM_Capture_init 0052                         __ELINMIntMessageSize 00CE  
                         _ui16_Duty_Cycle_In 0161                                      ??_cksum 0026  
           write_eeprom_data@ui8_adress_data 002B                                 _analog_value 00BA  
                __end_of_Transmit_LIN_8Bytes 0DF4                         __end_of_InitMotorRun 0313  
                         __size_of_commutate 011B                                   __pbssBANK0 0054  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK4 0240  
                    _ui8_Duty_Cycle_In_Ratio 0153                           __size_of_init_bldc 0024  
                       _bool_ControlLoopMode 00C9                           __end_ofi1_ADC_Read 1D7B  
                         __end_ofi1_ADC_Wait 1D6D                                   __pmaintext 0072  
                       __ELINMIntSendMessage 0435                                      ?___lmul 0024  
                            _Cb34_oPWM_Alarm 014E                                      ?___tmul 0024  
                                    ?___wmul 0024                                 ?i1_commutate 0070  
                                 __pintentry 0004                                      _CM1CON0 0111  
                                    _CM1CON1 0112                                      _CCP1ASE 14AF  
                                    _CCP1CON 0293                                      _CCP2CON 029A  
                                    _CCP3CON 0313                                      _CCP4CON 031A  
    __end_of_Cb1_Current_An___High_node_fcn1 162F     __size_of_Cb1_Current_An___High_node_fcn1 001C  
          ??_Cb1_Current_An___High_node_fcn1 0024             ?_Cb1_Current_An___High_node_fcn1 0070  
            _Cb1_Current_An___High_node_fcn1 1613                                      _CCP5CON 031E  
                                    i1S14492 06C4                                      i1S14496 06D8  
                      _bool_CPU_TempRedAlarm 015B                                      _BAUDCON 019F  
                             ___lmul@product 002C                                   ??_PWM_CTRL 0070  
                                 ??i1___wmul 0074                       ??_interrupt_PWMCapture 0070  
                                 _ui8_Ki_mat 01CA                                      u1074_25 1FEE  
                                    u1083_25 1C3A                                      u1076_25 1BCA  
                            ??_PWM_Write_Out 0024                                   _ui8_Kp_mat 015E  
                                    i1l12512 1FF5                                      i1l12504 1FE6  
                                    i1l14200 0026                                      i1l12530 1BD8  
                                    i1l12516 1FF9                                      i1l12700 1CE2  
                                    i1l12612 1C45                                      i1l12604 1C3C  
                                    i1l12540 1BEE                                      i1l12630 1C4E  
                                    i1l12550 1C02                                      i1l12534 1BE2  
                                    i1l12526 1BCE                                      i1l12480 1D7D  
                                    i1l12552 1C05                                      i1l12484 1D83  
                                    i1l12740 1D2D                                      i1l12644 1C5D  
                                    i1l12716 1CF2                                      i1l12742 1D2F  
                                    i1l12670 1C72                                      i1l14182 0012  
                                    i1l12760 1D4D                                      i1l12736 1D24  
                                    i1l12744 1D33                                      i1l12680 1CA4  
                                    i1l12664 1C68                                      i1l12592 1C1F  
                                    i1l12762 1D52                                      i1l12746 1D35  
                                    i1l12682 1CA8                                      i1l12674 1C89  
                                    i1l12690 1CC2                                      i1l14194 0020  
                                    i1l12676 1C8D                                      i1l12692 1CCE  
                                    i1l14188 0019                                      i1l12686 1CBF  
                                    i1l12694 1CD6                                      i1l12688 1CC1  
                                    i1l14494 1DEB                                   ??_DiagInit 0025  
                    ??__ELINMIntCalcIDParity 0024                                      _PWM1CON 0294  
                                 _comm_state 00E3                  BVH2_Appl_Layer@Cb9_StateCnt 00C0  
                          ??_BVH2_Appl_Layer 0032                    _ui16_Speed_demand_mat_Max 01C6  
                  _ui16_Speed_demand_mat_min 01C4              __size_of__ELINMIntResetProtocol 000F  
                                    _Task1ms 0716                         __end_of_Receive_Diag 02AE  
                      ?__ELINMIntSendMessage 0025                                 ?_system_init 0070  
                                    ___aldiv 1711                      BVH2_Appl_Layer@Sb3_Sum1 023C  
                                    ___awdiv 019F                              __size_of___lmul 0025  
                            __size_of___tmul 001D                              __size_of___wmul 0015  
                                    ___ltdiv 0F71                                      ___lwdiv 0EDC  
                       __end_of_SetDiagAlarm 02F0                            __end_of_commutate 1BBE  
                 __size_of_write_eeprom_data 0019                                 _ui8_CompFlag 00DD  
                                 _init_ports 0854                                      __ptext1 0334  
                                    __ptext2 0371                                      __ptext3 0313  
                                    __ptext4 0854                                      __ptext5 068C  
                                    __ptext6 02F0                                      __ptext7 1AA3  
                                    __ptext8 041D                                      __ptext9 05B4  
                        _phase_delay_counter 01D6                                      _filter1 01E0  
                                    _filter3 01DE                                 __size_of_EOL 0493  
                          i1___lwdiv@divisor 0070                            __end_of_init_bldc 06B0  
                          i1___lwdiv@counter 0074                                _ui16_Temp_cal 01E2  
                           ___aldiv@dividend 0028                   BVH2_Appl_Layer@Sb2_Switch2 0239  
                 BVH2_Appl_Layer@Sb2_Switch5 0231                               __ELINMIntRXCRC 01D0  
                                    clrloop0 0711                      __ELINMIntReceiveMessage 02AE  
                                    _wkpoint 00ED                         end_of_initialization 006F  
                             __ELINMIntSpace 015F                     __size_of_ELINMIntHandler 00D9  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00BE         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0  
                     __ELINMIntRXMessageSize 0160                         _ui16_fir_IPhase_mean 0137  
                  __size_of_read_eeprom_data 000B                    __size_of_Get_Analog_Value 0005  
                           ___ltdiv@dividend 0030                             __CFG_CLKOUTEN$ON 0000  
                              ??_clear_timer 0024                             ___aldiv@quotient 002E  
            read_eeprom_data@ui8_adress_data 0025                        i1___wmul@multiplicand 0072  
                              ??_FILTER_Init 0027                                ??_FILTER_Ubat 0024  
                              ??_FILTER_Temp 0024                         _Cb56_odFixedValueSel 00C1  
                                 _timer_init 0371               PWM_Write_Out@ui8_DutyCycle_Out 0024  
                      _ui16_IPhase1_bldc_cal 0167                        EnableMCP201@_dcnt_712 0025  
                      EnableMCP201@_dcnt_713 0026                  __end_of__ELINMIntGetPointer 0E2A  
                     __ELINMIntResetProtocol 0598                        _ui16_IPhase2_bldc_cal 0165  
                           __CFG_FOSC$INTOSC 0000                        __size_of_InitMotorRun 0023  
                        _ui16_Current_Thresh 01E6                            NegativeAnswer@LID 0038  
                           _PWM_Capture_init 05B4                             ___ltdiv@quotient 0033  
                                  _PWMReadDC 0F35                        _ui16_IPhase3_bldc_cal 0163  
                          __size_of_ADC_Init 000A                            __size_of_ADC_Read 0015  
                              _ui16_step_cnt 00B8                                    i1___lwdiv 1FD9  
                          __size_of_ADC_Wait 0019                            __size_of_BLDCWait 0021  
                                 _windowPtr1 00E6                             _ui8_BattVolt_mat 00B0  
                           ??_NegativeAnswer 0038         BVH2_Appl_Layer@Sb2_Logical_Operator2 0236  
                     ??__ELINMIntSendMessage 002A                     __size_of_interrrupt_bldc 0196  
                          __ELINMIntReadBack 00CD                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 02F0                               __end_of___lmul 1669  
                     _ui16_phase_advancement 00B6                               __end_of___tmul 0FC0  
                             __end_of___wmul 0E22                                  ?_init_ports 0070  
                       __size_ofi1_commutate 0107                          __end_of_clear_timer 0334  
                              __pbitbssBANK0 0340                  __end_of__ELINMIntInitialize 0435  
                          __size_of_PWM_CTRL 0013                                  i1ADC_Read@i 0072  
                                __end_ofPL10 0E7B                                  __end_ofPL20 1EEB  
                                __end_ofPL12 0E80                                  __end_ofPL30 17A6  
                                __end_ofPL22 0EA5                                  __end_ofPL14 0E8F  
                                __end_ofPL40 1F40                                  __end_ofPL32 1EFD  
                                __end_ofPL24 178A                                  __end_ofPL16 0E9D  
                                __end_ofPL50 1F7B                                  __end_ofPL42 1F50  
                                __end_ofPL34 1F0E                                  __end_ofPL26 1793  
                                __end_ofPL18 1ED3                                  __end_ofPL60 0EC0  
                                __end_ofPL52 17B3                                  __end_ofPL44 1F61  
                                __end_ofPL36 1F1F                                  __end_ofPL28 03F0  
                                __end_ofPL70 17D0                                  __end_ofPL62 17BD  
                                __end_ofPL54 0EAB                                  __end_ofPL46 1F71  
                                __end_ofPL38 1F30                                  __end_ofPL80 1F95  
                                __end_ofPL72 1F87                                  __end_ofPL64 17C7  
                                __end_ofPL56 0EB2                                  __end_ofPL48 03FA  
                                __end_ofPL90 1FA1                                  __end_ofPL82 17D8  
                                __end_ofPL74 0EC9                                  __end_ofPL66 05AE  
                                __end_ofPL58 0EB9                                  __end_ofPL92 17E5  
                                __end_ofPL84 1F9B                                  __end_ofPL76 1F8D  
                                __end_ofPL68 1F81                                  __end_ofPL94 0F35  
                                __end_ofPL86 17DE                                  __end_ofPL78 0ED1  
                                __end_ofPL96 17EC                                  __end_ofPL88 0ED7  
                                __end_ofPL98 1FA8             __ELINMIntSendMessage@_ELINM_fmax 0028  
           __ELINMIntSendMessage@_ELINM_fmin 0026                          start_initialization 002D  
                          __size_ofi1___wmul 0015                    ??__ELINMIntReceiveMessage 0031  
           __ELINMIntSendMessage@_ELINM_size 0025                                  __end_of_EOL 0D8D  
                        __end_of_FILTER_Init 0F19                          __end_of_FILTER_Ubat 025E  
                        __end_of_FILTER_Temp 068C                            __size_of_DiagInit 000C  
                                 ?_PWMReadDC 0070                                    _ErrorCode 00CB  
                                 ?i1___lwdiv 0070          __end_of_Cb56_UbatHandling_node_fcn2 1711  
                _Cb56_UbatHandling_node_fcn2 16DC                               _ui8_IPhase_sel 00E1  
                               _Cb1_StateCnt 00A6                        __size_of_Receive_Diag 0050  
                             Receive_Diag@id 0033                            ??_ELINMIntHandler 0071  
                      __size_of_SetDiagAlarm 002D                      _ui16_NTC_Temp_bldc_mean 0135  
                             _ui8_PWM_dc_mat 005E                                     ??___lmul 002C  
                                   ??___tmul 002A                                     ??___wmul 0028  
                                __pdataBANK0 0069                                  __pdataBANK1 00E7  
                                __pdataBANK2 0169                   read_eeprom_data@ui8_adress 0024  
                       __size_of_system_init 003D                                 _Cb1_oShutoff 014F  
                                ?_timer_init 0070                               ___tmul@product 002A  
                      __end_of_InitMotorStop 01ED                                     EOL@_dcnt 003C  
                     __size_of_FILTER_IPhase 0023                              _ui8_Pulse_State 0154  
                                  ___latbits 0002                              _BVH2_Appl_Layer 1084  
                               _Receive_Diag 025E                                __pcstackBANK0 0020  
                              __pcstackBANK3 01EA                                __pcstackBANK4 0220  
             __size_of__ELINMIntCalcIDParity 0026                __end_of__ELINMIntCalcIDParity 04BF  
                          _bool_MotorStalled 00D9                                 _SetDiagAlarm 02C3  
               __size_of_Oscill_Source_Block 0006                          __size_of_init_ports 0017  
                           _read_eeprom_data 0D8D                                    __pnvBANK1 00EF  
                                  __pnvBANK3 01E6               BVH2_Appl_Layer@Cb51_oTempAlarm 0140  
                           _Get_Analog_Value 01ED                 __size_of_Transmit_LIN_8Bytes 0043  
                                   ?_Task1ms 0070                             ___lwdiv@dividend 0026  
                                _clear_timer 0313                                     ?___aldiv 0024  
              __ELINMIntSendMessage@_ELINM_i 002C                                     ?___awdiv 0024  
                                   ?___ltdiv 002D                                     ?___lwdiv 0024  
                      _bool_HighCurrentAlarm 00D8                         clear_timer@ui8_TmrNb 0024  
                          ??_interrrupt_bldc 007C                _SIBFS_Current_Analysis_High_b 00C5  
                             _ui8_UPhase_sel 00E0                               _bool_UbatAlarm 015A  
                                _FILTER_Init 0F01                                  _FILTER_Ubat 01F2  
                                _FILTER_Temp 0663                                    _comm_time 005A  
                                  __pswtext1 06B0                                    __pswtext2 0700  
                                  __pswtext3 06C4                                    __pswtext4 06D8  
                         _Cb34_oPWM_SC_Alarm 014D                            _interrupt_handler 0004  
                                  _ict_stamp 00EE                              _ui16_Ubemf_bldc 00B4  
                                  _commutate 1AA3                        _SIBFS_PWM_Detection_b 00C4  
                __ELINMIntResetProtocol@code 0070                                     _ADC_Init 03AA  
                                   _ADC_Read 0F19                __size_of_interrupt_PWMCapture 004F  
                       _bool_DryRunningAlarm 00DA                                     _ADC_Wait 0DF4  
                         ?_interrupt_handler 0070                        __end_of_PWM_Write_Out 0E27  
                                   _BLDCWait 1E97                                  ??_PWMReadDC 0037  
                           __CFG_WDTE$SWDTEN 0000                            _I_calibrationInit 0871  
                           ___lwdiv@quotient 0029                                  ??i1___lwdiv 0074  
                                  _init_bldc 068C                               __size_of_cksum 002E  
    BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 005C                           ?_I_calibrationInit 0070  
                        ??_interrupt_handler 007E                        _Cb56_oUbat_Alarm_High 0148  
                            ___aldiv@divisor 0024                              ___aldiv@counter 002C  
                             ___wmul@product 0028                          __size_of_timer_init 0039  
                                  clear_ram0 0710                                _FILTER_IPhase 03FA  
          __ELINMIntGetPointer@_ELINMInt_tag 0025                          ??_I_calibrationInit 0027  
                            ___ltdiv@divisor 002D                               _Cb34_odPumpOff 014A  
                            ___ltdiv@counter 0036                                     _GO_nDONE 04E9  
                   __end_of_PWM_Capture_init 0606                                  _ui8_failure 016F  
                                   _PSTR1CON 0296                      ?__ELINMIntResetProtocol 0070  
                  __end_of_interrupt_handler 002B                      __end_of_BVH2_Appl_Layer 1613  
                                   _PWM_CTRL 06EC                               _ui8_b_DResB0_c 0061  
                             _ui8_b_DResB1_c 00D6                               _ui8_b_DResB2_c 00D5  
                             _ui8_b_DResB3_c 00D4                               _ui8_b_DResB4_c 00D3  
                          ___wmul@multiplier 0024                                     i1___wmul 1D7B  
                                 ?_commutate 0070                                    cksum@addr 002A  
                    interrrupt_bldc@ui32_tmp 0020                                     _DiagInit 03B4  
                  __end_of_I_calibrationInit 08FA                          ___tmul@multiplicand 0027  
                        _ui16_fir_Bat_mittel 0139                    _ui8_fixed_start_speed_mat 01D8  
                      __ELINMIntSleepTimeout 01BE                                   ?_init_bldc 0070  
                          ___lmul@multiplier 0024                               _ui16_Capt_Val0 00AC  
                             _ui16_Capt_Val1 00AA                               _ui16_Capt_Val2 00A8  
                             _ui16_I_cal_Ph1 00EB                               _ui16_I_cal_Ph2 00E9  
                             _ui16_I_cal_Ph3 00E7                             __ELINMIntStatus1 00CF  
                             ?_FILTER_IPhase 0070                           _bool_CPU_TempAlarm 00DB  
                           _ui16_mat_Current 00AE                             __size_of_Task1ms 0003  
                       _SIBFS_UbatHandling_b 00C2                      _Cb34_odFixedLowValueSel 014C  
             __end_of__ELINMIntResetProtocol 05A7                                ?_EnableMCP201 0070  
                   BVH2_Appl_Layer@Sb2_Error 0237                             __size_of___aldiv 006C  
                           __size_of___awdiv 0040                BVH2_Appl_Layer@Cb19_oDryRun55 0144  
              BVH2_Appl_Layer@Cb19_oDryRun66 0143                             __size_of___ltdiv 0032  
                           __size_of___lwdiv 0025                                 ??_init_ports 0026  
                          _ui8_lastTaskvalue 0156                             _ui16_mat_inpTemp 0125  
                             _ui8_StartupPWM 00E4                         _bool_PWMin_err_Alarm 015C  
              __ELINMIntMessageBufferPointer 00CC                                     _checksum 01B8  
                         _Cb1_RestartCounter 0151             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00BC  
                         _ui16_NTC_Temp_bldc 01E4                              ___lwdiv@divisor 0024  
                             _Cb56_odPumpOff 0147                              ___lwdiv@counter 0028  
                                   __ptext10 03DB                                     __ptext11 0871  
                                   __ptext20 01ED                                     __ptext12 0F01  
                                   __ptext21 01F2                                     __ptext13 03C0  
                                   __ptext30 0F35                                     __ptext22 0663  
                                   __ptext14 03B4                                     __ptext31 0FA3  
                                   __ptext23 03FA                                     __ptext15 03AA  
                                   __ptext40 0F19                                     __ptext32 0F71  
                                   __ptext24 08FA                                     __ptext16 019F  
                                   __ptext41 1084                                     __ptext33 0FC0  
                                   __ptext25 0D98                                     __ptext17 02C3  
                                   __ptext50 0606                                     __ptext42 0E0D  
                                   __ptext34 0DB1                                     __ptext26 0D8D  
                                   __ptext18 025E                                     __ptext51 1BBE  
                                   __ptext43 1644                                     __ptext35 0435  
                                   __ptext27 0FD2                                     __ptext19 02AE  
                                   __ptext60 04BF                                     __ptext52 1D90  
                                   __ptext44 1711                                     __ptext36 0499  
                                   __ptext28 0EDC                                     __ptext61 0598  
                                   __ptext53 1D7B                                     __ptext45 16DC  
                                   __ptext37 0E27                                     __ptext29 0E22  
                                   __ptext54 1FD9                                     __ptext46 162F  
                                   __ptext38 01DF                                     __ptext55 1D54  
                                   __ptext47 1669                                     __ptext39 0DF4  
                                   __ptext56 1D6D                                     __ptext48 1613  
                                   __ptext57 1E97                                     __ptext58 0716  
                                   __ptext59 06EC                              _ELINMIntHandler 04BF  
               __size_of__ELINMIntGetPointer 0003                               _ui16_Ubat_bldc 0066  
                    _bool_mat_currAlarm_bldc 00CA                 BVH2_Appl_Layer@Cb14_StateCnt 0123  
                              _Cb44_StateCnt 00A4                           i1___lwdiv@dividend 0072  
              BVH2_Appl_Layer@Cb51_odPumpOff 013E                                __size_of_main 012D  
                                 _Cb34_idPWM 005D                                     _phaseCal 00D2  
                         __end_of_init_ports 086B                                  _inputArray1 0240  
                             _ui16_Speed_mat 0056                 BVH2_Appl_Layer@Cb24_StateCnt 0054  
                BVH2_Appl_Layer@Sb3_Product1 022F                __size_of__ELINMIntSendMessage 0064  
                              ??i1_commutate 0070                               ??_EnableMCP201 0024  
                                   int$flags 007E            BVH2_Appl_Layer@Cb51_oTempRedAlarm 013F  
                              _ui8_Ubemf_sel 00DF                                _Cb44_oShutoff 0149  
                 __size_of_interrupt_handler 0027                                     cksum@sum 0028  
                           ?_BVH2_Appl_Layer 0070                                 ??_timer_init 0025  
                        _Oscill_Source_Block 03DB                           i1___lwdiv@quotient 0075  
                                 i1_ADC_Read 1D6D                                   i1_ADC_Wait 1D54  
                                ??_commutate 0024                              __ELINMIntStatus 0060  
                   __end_of_read_eeprom_data 0D98                     __end_of_Get_Analog_Value 01F2  
                        _Transmit_LIN_8Bytes 0DB1                   __size_of_I_calibrationInit 0089  
                           _ui8_given_supply 00D1      __end_of_Cb44_Pic_etat_monitor_node_fcn1 1644  
   __size_of_Cb44_Pic_etat_monitor_node_fcn1 0015            ??_Cb44_Pic_etat_monitor_node_fcn1 0024  
           ?_Cb44_Pic_etat_monitor_node_fcn1 0070              _Cb44_Pic_etat_monitor_node_fcn1 162F  
       __end_of_Cb34_PWM_Detection_node_fcn1 16DC        __size_of_Cb34_PWM_Detection_node_fcn1 0073  
               _Cb34_PWM_Detection_node_fcn1 1669                                  ??_init_bldc 0030  
               __size_of__ELINMIntInitialize 0018                                     intlevel1 0000  
        __ELINMIntReceiveMessage@_ELINM_size 0030                             _rising_bemf_flag 0340  
                            ??_FILTER_IPhase 0024                    _bool_PWMin_Freq_err_Alarm 0159  
                write_eeprom_data@ui8_adress 002C                         ?_Oscill_Source_Block 0070  
                            _interrrupt_bldc 1BBE                           __end_of_timer_init 03AA  
                       ?_Transmit_LIN_8Bytes 002F                                 ?_clear_timer 0070  
                      _bool_start_demand_mat 00E5                                ??_system_init 0030  
                          _ui8_PWMin_failCnt 0152                   PWM_Capture_init@ui8_CCP_Nb 0024  
                    __size_of_NegativeAnswer 0012                            ___tmul@multiplier 0024  
                               ?_FILTER_Init 0070                                 ?_FILTER_Ubat 0070  
                               ?_FILTER_Temp 0070                                __pstringtext1 1800  
                   ?__ELINMIntReceiveMessage 002F                                   _OPTION_REG 0095  
                    __end_of_ELINMIntHandler 0598           __ELINMIntReceiveMessage@_ELINM_tag 0031  
                        __end_ofi1_commutate 1E97                                 ___aldiv@sign 002D  
BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016E                ?_Cb34_PWM_Detection_node_fcn1 0070  
                      __ELINMIntCalcIDParity 0499           BVH2_Appl_Layer@Cb24_RestartCounter 0146  
                      ??_Oscill_Source_Block 0024                         _Cb34_odFixedValueSel 014B  
           __ELINMIntCalcIDParity@ELINM_idtr 0024                              _ui8_error_Flags 0065  
                            _ui8_current_cal 0120                        ??_Transmit_LIN_8Bytes 0037  
                     __size_of_InitMotorStop 000E                 __end_of_interrupt_PWMCapture 0655  
                             _ui16_speed_fil 00B2                               _ui16_speed_rar 0133  
                              _filterTempNTC 01DC  
