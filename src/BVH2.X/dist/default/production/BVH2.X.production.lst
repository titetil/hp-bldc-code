

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Jul 31 15:14:36 2020

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     8                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text20,local,class=CODE,merge=1,delta=2
    24                           	psect	text26,local,class=CODE,merge=1,delta=2
    25                           	psect	text27,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext2,local,class=CONST,delta=2
    27                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text34,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text37,local,class=CODE,merge=1,delta=2
    31                           	psect	swtext3,local,class=CONST,delta=2
    32                           	psect	swtext4,local,class=CONST,delta=2
    33                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text45,local,class=CODE,merge=1,delta=2
    35                           	psect	text46,local,class=CODE,merge=1,delta=2
    36                           	psect	pa_nodes0,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 2.00
    40                           ; Generated 27/05/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F1936 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  0010                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  0110                     	;# 
   125  0111                     	;# 
   126  0112                     	;# 
   127  0113                     	;# 
   128  0114                     	;# 
   129  0115                     	;# 
   130  0116                     	;# 
   131  0117                     	;# 
   132  0118                     	;# 
   133  0119                     	;# 
   134  011A                     	;# 
   135  011B                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0193                     	;# 
   145  0194                     	;# 
   146  0195                     	;# 
   147  0196                     	;# 
   148  0199                     	;# 
   149  019A                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019D                     	;# 
   157  019E                     	;# 
   158  019F                     	;# 
   159  020D                     	;# 
   160  0210                     	;# 
   161  0211                     	;# 
   162  0212                     	;# 
   163  0213                     	;# 
   164  0214                     	;# 
   165  0215                     	;# 
   166  0215                     	;# 
   167  0216                     	;# 
   168  0217                     	;# 
   169  0291                     	;# 
   170  0291                     	;# 
   171  0292                     	;# 
   172  0293                     	;# 
   173  0294                     	;# 
   174  0295                     	;# 
   175  0295                     	;# 
   176  0296                     	;# 
   177  0298                     	;# 
   178  0298                     	;# 
   179  0299                     	;# 
   180  029A                     	;# 
   181  029B                     	;# 
   182  029C                     	;# 
   183  029C                     	;# 
   184  029D                     	;# 
   185  029E                     	;# 
   186  029F                     	;# 
   187  0311                     	;# 
   188  0311                     	;# 
   189  0312                     	;# 
   190  0313                     	;# 
   191  0314                     	;# 
   192  0315                     	;# 
   193  0315                     	;# 
   194  0316                     	;# 
   195  0318                     	;# 
   196  0318                     	;# 
   197  0319                     	;# 
   198  031A                     	;# 
   199  031C                     	;# 
   200  031C                     	;# 
   201  031D                     	;# 
   202  031E                     	;# 
   203  0394                     	;# 
   204  0395                     	;# 
   205  0396                     	;# 
   206  0415                     	;# 
   207  0416                     	;# 
   208  0417                     	;# 
   209  041C                     	;# 
   210  041D                     	;# 
   211  041E                     	;# 
   212  0791                     	;# 
   213  0792                     	;# 
   214  0793                     	;# 
   215  0794                     	;# 
   216  0795                     	;# 
   217  0798                     	;# 
   218  0799                     	;# 
   219  07A0                     	;# 
   220  07A1                     	;# 
   221  07A3                     	;# 
   222  07A4                     	;# 
   223  07A6                     	;# 
   224  07A7                     	;# 
   225  07A9                     	;# 
   226  07AA                     	;# 
   227  0FE4                     	;# 
   228  0FE5                     	;# 
   229  0FE6                     	;# 
   230  0FE7                     	;# 
   231  0FE8                     	;# 
   232  0FE9                     	;# 
   233  0FEA                     	;# 
   234  0FEB                     	;# 
   235  0FED                     	;# 
   236  0FEE                     	;# 
   237  0FEF                     	;# 
   238  0000                     	;# 
   239  0001                     	;# 
   240  0002                     	;# 
   241  0003                     	;# 
   242  0004                     	;# 
   243  0005                     	;# 
   244  0006                     	;# 
   245  0007                     	;# 
   246  0008                     	;# 
   247  0009                     	;# 
   248  000A                     	;# 
   249  000B                     	;# 
   250  000C                     	;# 
   251  000D                     	;# 
   252  000E                     	;# 
   253  0010                     	;# 
   254  0011                     	;# 
   255  0012                     	;# 
   256  0013                     	;# 
   257  0015                     	;# 
   258  0016                     	;# 
   259  0016                     	;# 
   260  0017                     	;# 
   261  0018                     	;# 
   262  0019                     	;# 
   263  001A                     	;# 
   264  001B                     	;# 
   265  001C                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  0090                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  0110                     	;# 
   290  0111                     	;# 
   291  0112                     	;# 
   292  0113                     	;# 
   293  0114                     	;# 
   294  0115                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  0118                     	;# 
   298  0119                     	;# 
   299  011A                     	;# 
   300  011B                     	;# 
   301  011D                     	;# 
   302  018C                     	;# 
   303  018D                     	;# 
   304  0191                     	;# 
   305  0191                     	;# 
   306  0192                     	;# 
   307  0193                     	;# 
   308  0193                     	;# 
   309  0193                     	;# 
   310  0194                     	;# 
   311  0195                     	;# 
   312  0196                     	;# 
   313  0199                     	;# 
   314  019A                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019B                     	;# 
   319  019C                     	;# 
   320  019C                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  019F                     	;# 
   324  020D                     	;# 
   325  0210                     	;# 
   326  0211                     	;# 
   327  0212                     	;# 
   328  0213                     	;# 
   329  0214                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0216                     	;# 
   333  0217                     	;# 
   334  0291                     	;# 
   335  0291                     	;# 
   336  0292                     	;# 
   337  0293                     	;# 
   338  0294                     	;# 
   339  0295                     	;# 
   340  0295                     	;# 
   341  0296                     	;# 
   342  0298                     	;# 
   343  0298                     	;# 
   344  0299                     	;# 
   345  029A                     	;# 
   346  029B                     	;# 
   347  029C                     	;# 
   348  029C                     	;# 
   349  029D                     	;# 
   350  029E                     	;# 
   351  029F                     	;# 
   352  0311                     	;# 
   353  0311                     	;# 
   354  0312                     	;# 
   355  0313                     	;# 
   356  0314                     	;# 
   357  0315                     	;# 
   358  0315                     	;# 
   359  0316                     	;# 
   360  0318                     	;# 
   361  0318                     	;# 
   362  0319                     	;# 
   363  031A                     	;# 
   364  031C                     	;# 
   365  031C                     	;# 
   366  031D                     	;# 
   367  031E                     	;# 
   368  0394                     	;# 
   369  0395                     	;# 
   370  0396                     	;# 
   371  0415                     	;# 
   372  0416                     	;# 
   373  0417                     	;# 
   374  041C                     	;# 
   375  041D                     	;# 
   376  041E                     	;# 
   377  0791                     	;# 
   378  0792                     	;# 
   379  0793                     	;# 
   380  0794                     	;# 
   381  0795                     	;# 
   382  0798                     	;# 
   383  0799                     	;# 
   384  07A0                     	;# 
   385  07A1                     	;# 
   386  07A3                     	;# 
   387  07A4                     	;# 
   388  07A6                     	;# 
   389  07A7                     	;# 
   390  07A9                     	;# 
   391  07AA                     	;# 
   392  0FE4                     	;# 
   393  0FE5                     	;# 
   394  0FE6                     	;# 
   395  0FE7                     	;# 
   396  0FE8                     	;# 
   397  0FE9                     	;# 
   398  0FEA                     	;# 
   399  0FEB                     	;# 
   400  0FED                     	;# 
   401  0FEE                     	;# 
   402  0FEF                     	;# 
   403  0000                     	;# 
   404  0001                     	;# 
   405  0002                     	;# 
   406  0003                     	;# 
   407  0004                     	;# 
   408  0005                     	;# 
   409  0006                     	;# 
   410  0007                     	;# 
   411  0008                     	;# 
   412  0009                     	;# 
   413  000A                     	;# 
   414  000B                     	;# 
   415  000C                     	;# 
   416  000D                     	;# 
   417  000E                     	;# 
   418  0010                     	;# 
   419  0011                     	;# 
   420  0012                     	;# 
   421  0013                     	;# 
   422  0015                     	;# 
   423  0016                     	;# 
   424  0016                     	;# 
   425  0017                     	;# 
   426  0018                     	;# 
   427  0019                     	;# 
   428  001A                     	;# 
   429  001B                     	;# 
   430  001C                     	;# 
   431  001E                     	;# 
   432  001F                     	;# 
   433  008C                     	;# 
   434  008D                     	;# 
   435  008E                     	;# 
   436  0090                     	;# 
   437  0091                     	;# 
   438  0092                     	;# 
   439  0093                     	;# 
   440  0095                     	;# 
   441  0096                     	;# 
   442  0097                     	;# 
   443  0098                     	;# 
   444  0099                     	;# 
   445  009A                     	;# 
   446  009B                     	;# 
   447  009B                     	;# 
   448  009C                     	;# 
   449  009D                     	;# 
   450  009E                     	;# 
   451  010C                     	;# 
   452  010D                     	;# 
   453  010E                     	;# 
   454  0110                     	;# 
   455  0111                     	;# 
   456  0112                     	;# 
   457  0113                     	;# 
   458  0114                     	;# 
   459  0115                     	;# 
   460  0116                     	;# 
   461  0117                     	;# 
   462  0118                     	;# 
   463  0119                     	;# 
   464  011A                     	;# 
   465  011B                     	;# 
   466  011D                     	;# 
   467  018C                     	;# 
   468  018D                     	;# 
   469  0191                     	;# 
   470  0191                     	;# 
   471  0192                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0193                     	;# 
   475  0194                     	;# 
   476  0195                     	;# 
   477  0196                     	;# 
   478  0199                     	;# 
   479  019A                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019C                     	;# 
   485  019C                     	;# 
   486  019D                     	;# 
   487  019E                     	;# 
   488  019F                     	;# 
   489  020D                     	;# 
   490  0210                     	;# 
   491  0211                     	;# 
   492  0212                     	;# 
   493  0213                     	;# 
   494  0214                     	;# 
   495  0215                     	;# 
   496  0215                     	;# 
   497  0216                     	;# 
   498  0217                     	;# 
   499  0291                     	;# 
   500  0291                     	;# 
   501  0292                     	;# 
   502  0293                     	;# 
   503  0294                     	;# 
   504  0295                     	;# 
   505  0295                     	;# 
   506  0296                     	;# 
   507  0298                     	;# 
   508  0298                     	;# 
   509  0299                     	;# 
   510  029A                     	;# 
   511  029B                     	;# 
   512  029C                     	;# 
   513  029C                     	;# 
   514  029D                     	;# 
   515  029E                     	;# 
   516  029F                     	;# 
   517  0311                     	;# 
   518  0311                     	;# 
   519  0312                     	;# 
   520  0313                     	;# 
   521  0314                     	;# 
   522  0315                     	;# 
   523  0315                     	;# 
   524  0316                     	;# 
   525  0318                     	;# 
   526  0318                     	;# 
   527  0319                     	;# 
   528  031A                     	;# 
   529  031C                     	;# 
   530  031C                     	;# 
   531  031D                     	;# 
   532  031E                     	;# 
   533  0394                     	;# 
   534  0395                     	;# 
   535  0396                     	;# 
   536  0415                     	;# 
   537  0416                     	;# 
   538  0417                     	;# 
   539  041C                     	;# 
   540  041D                     	;# 
   541  041E                     	;# 
   542  0791                     	;# 
   543  0792                     	;# 
   544  0793                     	;# 
   545  0794                     	;# 
   546  0795                     	;# 
   547  0798                     	;# 
   548  0799                     	;# 
   549  07A0                     	;# 
   550  07A1                     	;# 
   551  07A3                     	;# 
   552  07A4                     	;# 
   553  07A6                     	;# 
   554  07A7                     	;# 
   555  07A9                     	;# 
   556  07AA                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0010                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  008E                     	;# 
   601  0090                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0093                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0098                     	;# 
   609  0099                     	;# 
   610  009A                     	;# 
   611  009B                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  010C                     	;# 
   617  010D                     	;# 
   618  010E                     	;# 
   619  0110                     	;# 
   620  0111                     	;# 
   621  0112                     	;# 
   622  0113                     	;# 
   623  0114                     	;# 
   624  0115                     	;# 
   625  0116                     	;# 
   626  0117                     	;# 
   627  0118                     	;# 
   628  0119                     	;# 
   629  011A                     	;# 
   630  011B                     	;# 
   631  011D                     	;# 
   632  018C                     	;# 
   633  018D                     	;# 
   634  0191                     	;# 
   635  0191                     	;# 
   636  0192                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0193                     	;# 
   640  0194                     	;# 
   641  0195                     	;# 
   642  0196                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019C                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  020D                     	;# 
   655  0210                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0216                     	;# 
   663  0217                     	;# 
   664  0291                     	;# 
   665  0291                     	;# 
   666  0292                     	;# 
   667  0293                     	;# 
   668  0294                     	;# 
   669  0295                     	;# 
   670  0295                     	;# 
   671  0296                     	;# 
   672  0298                     	;# 
   673  0298                     	;# 
   674  0299                     	;# 
   675  029A                     	;# 
   676  029B                     	;# 
   677  029C                     	;# 
   678  029C                     	;# 
   679  029D                     	;# 
   680  029E                     	;# 
   681  029F                     	;# 
   682  0311                     	;# 
   683  0311                     	;# 
   684  0312                     	;# 
   685  0313                     	;# 
   686  0314                     	;# 
   687  0315                     	;# 
   688  0315                     	;# 
   689  0316                     	;# 
   690  0318                     	;# 
   691  0318                     	;# 
   692  0319                     	;# 
   693  031A                     	;# 
   694  031C                     	;# 
   695  031C                     	;# 
   696  031D                     	;# 
   697  031E                     	;# 
   698  0394                     	;# 
   699  0395                     	;# 
   700  0396                     	;# 
   701  0415                     	;# 
   702  0416                     	;# 
   703  0417                     	;# 
   704  041C                     	;# 
   705  041D                     	;# 
   706  041E                     	;# 
   707  0791                     	;# 
   708  0792                     	;# 
   709  0793                     	;# 
   710  0794                     	;# 
   711  0795                     	;# 
   712  0798                     	;# 
   713  0799                     	;# 
   714  07A0                     	;# 
   715  07A1                     	;# 
   716  07A3                     	;# 
   717  07A4                     	;# 
   718  07A6                     	;# 
   719  07A7                     	;# 
   720  07A9                     	;# 
   721  07AA                     	;# 
   722  0FE4                     	;# 
   723  0FE5                     	;# 
   724  0FE6                     	;# 
   725  0FE7                     	;# 
   726  0FE8                     	;# 
   727  0FE9                     	;# 
   728  0FEA                     	;# 
   729  0FEB                     	;# 
   730  0FED                     	;# 
   731  0FEE                     	;# 
   732  0FEF                     	;# 
   733  0000                     	;# 
   734  0001                     	;# 
   735  0002                     	;# 
   736  0003                     	;# 
   737  0004                     	;# 
   738  0005                     	;# 
   739  0006                     	;# 
   740  0007                     	;# 
   741  0008                     	;# 
   742  0009                     	;# 
   743  000A                     	;# 
   744  000B                     	;# 
   745  000C                     	;# 
   746  000D                     	;# 
   747  000E                     	;# 
   748  0010                     	;# 
   749  0011                     	;# 
   750  0012                     	;# 
   751  0013                     	;# 
   752  0015                     	;# 
   753  0016                     	;# 
   754  0016                     	;# 
   755  0017                     	;# 
   756  0018                     	;# 
   757  0019                     	;# 
   758  001A                     	;# 
   759  001B                     	;# 
   760  001C                     	;# 
   761  001E                     	;# 
   762  001F                     	;# 
   763  008C                     	;# 
   764  008D                     	;# 
   765  008E                     	;# 
   766  0090                     	;# 
   767  0091                     	;# 
   768  0092                     	;# 
   769  0093                     	;# 
   770  0095                     	;# 
   771  0096                     	;# 
   772  0097                     	;# 
   773  0098                     	;# 
   774  0099                     	;# 
   775  009A                     	;# 
   776  009B                     	;# 
   777  009B                     	;# 
   778  009C                     	;# 
   779  009D                     	;# 
   780  009E                     	;# 
   781  010C                     	;# 
   782  010D                     	;# 
   783  010E                     	;# 
   784  0110                     	;# 
   785  0111                     	;# 
   786  0112                     	;# 
   787  0113                     	;# 
   788  0114                     	;# 
   789  0115                     	;# 
   790  0116                     	;# 
   791  0117                     	;# 
   792  0118                     	;# 
   793  0119                     	;# 
   794  011A                     	;# 
   795  011B                     	;# 
   796  011D                     	;# 
   797  018C                     	;# 
   798  018D                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0194                     	;# 
   806  0195                     	;# 
   807  0196                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019B                     	;# 
   814  019C                     	;# 
   815  019C                     	;# 
   816  019D                     	;# 
   817  019E                     	;# 
   818  019F                     	;# 
   819  020D                     	;# 
   820  0210                     	;# 
   821  0211                     	;# 
   822  0212                     	;# 
   823  0213                     	;# 
   824  0214                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0216                     	;# 
   828  0217                     	;# 
   829  0291                     	;# 
   830  0291                     	;# 
   831  0292                     	;# 
   832  0293                     	;# 
   833  0294                     	;# 
   834  0295                     	;# 
   835  0295                     	;# 
   836  0296                     	;# 
   837  0298                     	;# 
   838  0298                     	;# 
   839  0299                     	;# 
   840  029A                     	;# 
   841  029B                     	;# 
   842  029C                     	;# 
   843  029C                     	;# 
   844  029D                     	;# 
   845  029E                     	;# 
   846  029F                     	;# 
   847  0311                     	;# 
   848  0311                     	;# 
   849  0312                     	;# 
   850  0313                     	;# 
   851  0314                     	;# 
   852  0315                     	;# 
   853  0315                     	;# 
   854  0316                     	;# 
   855  0318                     	;# 
   856  0318                     	;# 
   857  0319                     	;# 
   858  031A                     	;# 
   859  031C                     	;# 
   860  031C                     	;# 
   861  031D                     	;# 
   862  031E                     	;# 
   863  0394                     	;# 
   864  0395                     	;# 
   865  0396                     	;# 
   866  0415                     	;# 
   867  0416                     	;# 
   868  0417                     	;# 
   869  041C                     	;# 
   870  041D                     	;# 
   871  041E                     	;# 
   872  0791                     	;# 
   873  0792                     	;# 
   874  0793                     	;# 
   875  0794                     	;# 
   876  0795                     	;# 
   877  0798                     	;# 
   878  0799                     	;# 
   879  07A0                     	;# 
   880  07A1                     	;# 
   881  07A3                     	;# 
   882  07A4                     	;# 
   883  07A6                     	;# 
   884  07A7                     	;# 
   885  07A9                     	;# 
   886  07AA                     	;# 
   887  0FE4                     	;# 
   888  0FE5                     	;# 
   889  0FE6                     	;# 
   890  0FE7                     	;# 
   891  0FE8                     	;# 
   892  0FE9                     	;# 
   893  0FEA                     	;# 
   894  0FEB                     	;# 
   895  0FED                     	;# 
   896  0FEE                     	;# 
   897  0FEF                     	;# 
   898  0000                     	;# 
   899  0001                     	;# 
   900  0002                     	;# 
   901  0003                     	;# 
   902  0004                     	;# 
   903  0005                     	;# 
   904  0006                     	;# 
   905  0007                     	;# 
   906  0008                     	;# 
   907  0009                     	;# 
   908  000A                     	;# 
   909  000B                     	;# 
   910  000C                     	;# 
   911  000D                     	;# 
   912  000E                     	;# 
   913  0010                     	;# 
   914  0011                     	;# 
   915  0012                     	;# 
   916  0013                     	;# 
   917  0015                     	;# 
   918  0016                     	;# 
   919  0016                     	;# 
   920  0017                     	;# 
   921  0018                     	;# 
   922  0019                     	;# 
   923  001A                     	;# 
   924  001B                     	;# 
   925  001C                     	;# 
   926  001E                     	;# 
   927  001F                     	;# 
   928  008C                     	;# 
   929  008D                     	;# 
   930  008E                     	;# 
   931  0090                     	;# 
   932  0091                     	;# 
   933  0092                     	;# 
   934  0093                     	;# 
   935  0095                     	;# 
   936  0096                     	;# 
   937  0097                     	;# 
   938  0098                     	;# 
   939  0099                     	;# 
   940  009A                     	;# 
   941  009B                     	;# 
   942  009B                     	;# 
   943  009C                     	;# 
   944  009D                     	;# 
   945  009E                     	;# 
   946  010C                     	;# 
   947  010D                     	;# 
   948  010E                     	;# 
   949  0110                     	;# 
   950  0111                     	;# 
   951  0112                     	;# 
   952  0113                     	;# 
   953  0114                     	;# 
   954  0115                     	;# 
   955  0116                     	;# 
   956  0117                     	;# 
   957  0118                     	;# 
   958  0119                     	;# 
   959  011A                     	;# 
   960  011B                     	;# 
   961  011D                     	;# 
   962  018C                     	;# 
   963  018D                     	;# 
   964  0191                     	;# 
   965  0191                     	;# 
   966  0192                     	;# 
   967  0193                     	;# 
   968  0193                     	;# 
   969  0193                     	;# 
   970  0194                     	;# 
   971  0195                     	;# 
   972  0196                     	;# 
   973  0199                     	;# 
   974  019A                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019C                     	;# 
   980  019C                     	;# 
   981  019D                     	;# 
   982  019E                     	;# 
   983  019F                     	;# 
   984  020D                     	;# 
   985  0210                     	;# 
   986  0211                     	;# 
   987  0212                     	;# 
   988  0213                     	;# 
   989  0214                     	;# 
   990  0215                     	;# 
   991  0215                     	;# 
   992  0216                     	;# 
   993  0217                     	;# 
   994  0291                     	;# 
   995  0291                     	;# 
   996  0292                     	;# 
   997  0293                     	;# 
   998  0294                     	;# 
   999  0295                     	;# 
  1000  0295                     	;# 
  1001  0296                     	;# 
  1002  0298                     	;# 
  1003  0298                     	;# 
  1004  0299                     	;# 
  1005  029A                     	;# 
  1006  029B                     	;# 
  1007  029C                     	;# 
  1008  029C                     	;# 
  1009  029D                     	;# 
  1010  029E                     	;# 
  1011  029F                     	;# 
  1012  0311                     	;# 
  1013  0311                     	;# 
  1014  0312                     	;# 
  1015  0313                     	;# 
  1016  0314                     	;# 
  1017  0315                     	;# 
  1018  0315                     	;# 
  1019  0316                     	;# 
  1020  0318                     	;# 
  1021  0318                     	;# 
  1022  0319                     	;# 
  1023  031A                     	;# 
  1024  031C                     	;# 
  1025  031C                     	;# 
  1026  031D                     	;# 
  1027  031E                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0415                     	;# 
  1032  0416                     	;# 
  1033  0417                     	;# 
  1034  041C                     	;# 
  1035  041D                     	;# 
  1036  041E                     	;# 
  1037  0791                     	;# 
  1038  0792                     	;# 
  1039  0793                     	;# 
  1040  0794                     	;# 
  1041  0795                     	;# 
  1042  0798                     	;# 
  1043  0799                     	;# 
  1044  07A0                     	;# 
  1045  07A1                     	;# 
  1046  07A3                     	;# 
  1047  07A4                     	;# 
  1048  07A6                     	;# 
  1049  07A7                     	;# 
  1050  07A9                     	;# 
  1051  07AA                     	;# 
  1052  0FE4                     	;# 
  1053  0FE5                     	;# 
  1054  0FE6                     	;# 
  1055  0FE7                     	;# 
  1056  0FE8                     	;# 
  1057  0FE9                     	;# 
  1058  0FEA                     	;# 
  1059  0FEB                     	;# 
  1060  0FED                     	;# 
  1061  0FEE                     	;# 
  1062  0FEF                     	;# 
  1063  0000                     	;# 
  1064  0001                     	;# 
  1065  0002                     	;# 
  1066  0003                     	;# 
  1067  0004                     	;# 
  1068  0005                     	;# 
  1069  0006                     	;# 
  1070  0007                     	;# 
  1071  0008                     	;# 
  1072  0009                     	;# 
  1073  000A                     	;# 
  1074  000B                     	;# 
  1075  000C                     	;# 
  1076  000D                     	;# 
  1077  000E                     	;# 
  1078  0010                     	;# 
  1079  0011                     	;# 
  1080  0012                     	;# 
  1081  0013                     	;# 
  1082  0015                     	;# 
  1083  0016                     	;# 
  1084  0016                     	;# 
  1085  0017                     	;# 
  1086  0018                     	;# 
  1087  0019                     	;# 
  1088  001A                     	;# 
  1089  001B                     	;# 
  1090  001C                     	;# 
  1091  001E                     	;# 
  1092  001F                     	;# 
  1093  008C                     	;# 
  1094  008D                     	;# 
  1095  008E                     	;# 
  1096  0090                     	;# 
  1097  0091                     	;# 
  1098  0092                     	;# 
  1099  0093                     	;# 
  1100  0095                     	;# 
  1101  0096                     	;# 
  1102  0097                     	;# 
  1103  0098                     	;# 
  1104  0099                     	;# 
  1105  009A                     	;# 
  1106  009B                     	;# 
  1107  009B                     	;# 
  1108  009C                     	;# 
  1109  009D                     	;# 
  1110  009E                     	;# 
  1111  010C                     	;# 
  1112  010D                     	;# 
  1113  010E                     	;# 
  1114  0110                     	;# 
  1115  0111                     	;# 
  1116  0112                     	;# 
  1117  0113                     	;# 
  1118  0114                     	;# 
  1119  0115                     	;# 
  1120  0116                     	;# 
  1121  0117                     	;# 
  1122  0118                     	;# 
  1123  0119                     	;# 
  1124  011A                     	;# 
  1125  011B                     	;# 
  1126  011D                     	;# 
  1127  018C                     	;# 
  1128  018D                     	;# 
  1129  0191                     	;# 
  1130  0191                     	;# 
  1131  0192                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0193                     	;# 
  1135  0194                     	;# 
  1136  0195                     	;# 
  1137  0196                     	;# 
  1138  0199                     	;# 
  1139  019A                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019B                     	;# 
  1143  019B                     	;# 
  1144  019C                     	;# 
  1145  019C                     	;# 
  1146  019D                     	;# 
  1147  019E                     	;# 
  1148  019F                     	;# 
  1149  020D                     	;# 
  1150  0210                     	;# 
  1151  0211                     	;# 
  1152  0212                     	;# 
  1153  0213                     	;# 
  1154  0214                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0216                     	;# 
  1158  0217                     	;# 
  1159  0291                     	;# 
  1160  0291                     	;# 
  1161  0292                     	;# 
  1162  0293                     	;# 
  1163  0294                     	;# 
  1164  0295                     	;# 
  1165  0295                     	;# 
  1166  0296                     	;# 
  1167  0298                     	;# 
  1168  0298                     	;# 
  1169  0299                     	;# 
  1170  029A                     	;# 
  1171  029B                     	;# 
  1172  029C                     	;# 
  1173  029C                     	;# 
  1174  029D                     	;# 
  1175  029E                     	;# 
  1176  029F                     	;# 
  1177  0311                     	;# 
  1178  0311                     	;# 
  1179  0312                     	;# 
  1180  0313                     	;# 
  1181  0314                     	;# 
  1182  0315                     	;# 
  1183  0315                     	;# 
  1184  0316                     	;# 
  1185  0318                     	;# 
  1186  0318                     	;# 
  1187  0319                     	;# 
  1188  031A                     	;# 
  1189  031C                     	;# 
  1190  031C                     	;# 
  1191  031D                     	;# 
  1192  031E                     	;# 
  1193  0394                     	;# 
  1194  0395                     	;# 
  1195  0396                     	;# 
  1196  0415                     	;# 
  1197  0416                     	;# 
  1198  0417                     	;# 
  1199  041C                     	;# 
  1200  041D                     	;# 
  1201  041E                     	;# 
  1202  0791                     	;# 
  1203  0792                     	;# 
  1204  0793                     	;# 
  1205  0794                     	;# 
  1206  0795                     	;# 
  1207  0798                     	;# 
  1208  0799                     	;# 
  1209  07A0                     	;# 
  1210  07A1                     	;# 
  1211  07A3                     	;# 
  1212  07A4                     	;# 
  1213  07A6                     	;# 
  1214  07A7                     	;# 
  1215  07A9                     	;# 
  1216  07AA                     	;# 
  1217  0FE4                     	;# 
  1218  0FE5                     	;# 
  1219  0FE6                     	;# 
  1220  0FE7                     	;# 
  1221  0FE8                     	;# 
  1222  0FE9                     	;# 
  1223  0FEA                     	;# 
  1224  0FEB                     	;# 
  1225  0FED                     	;# 
  1226  0FEE                     	;# 
  1227  0FEF                     	;# 
  1228  0000                     	;# 
  1229  0001                     	;# 
  1230  0002                     	;# 
  1231  0003                     	;# 
  1232  0004                     	;# 
  1233  0005                     	;# 
  1234  0006                     	;# 
  1235  0007                     	;# 
  1236  0008                     	;# 
  1237  0009                     	;# 
  1238  000A                     	;# 
  1239  000B                     	;# 
  1240  000C                     	;# 
  1241  000D                     	;# 
  1242  000E                     	;# 
  1243  0010                     	;# 
  1244  0011                     	;# 
  1245  0012                     	;# 
  1246  0013                     	;# 
  1247  0015                     	;# 
  1248  0016                     	;# 
  1249  0016                     	;# 
  1250  0017                     	;# 
  1251  0018                     	;# 
  1252  0019                     	;# 
  1253  001A                     	;# 
  1254  001B                     	;# 
  1255  001C                     	;# 
  1256  001E                     	;# 
  1257  001F                     	;# 
  1258  008C                     	;# 
  1259  008D                     	;# 
  1260  008E                     	;# 
  1261  0090                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0093                     	;# 
  1265  0095                     	;# 
  1266  0096                     	;# 
  1267  0097                     	;# 
  1268  0098                     	;# 
  1269  0099                     	;# 
  1270  009A                     	;# 
  1271  009B                     	;# 
  1272  009B                     	;# 
  1273  009C                     	;# 
  1274  009D                     	;# 
  1275  009E                     	;# 
  1276  010C                     	;# 
  1277  010D                     	;# 
  1278  010E                     	;# 
  1279  0110                     	;# 
  1280  0111                     	;# 
  1281  0112                     	;# 
  1282  0113                     	;# 
  1283  0114                     	;# 
  1284  0115                     	;# 
  1285  0116                     	;# 
  1286  0117                     	;# 
  1287  0118                     	;# 
  1288  0119                     	;# 
  1289  011A                     	;# 
  1290  011B                     	;# 
  1291  011D                     	;# 
  1292  018C                     	;# 
  1293  018D                     	;# 
  1294  0191                     	;# 
  1295  0191                     	;# 
  1296  0192                     	;# 
  1297  0193                     	;# 
  1298  0193                     	;# 
  1299  0193                     	;# 
  1300  0194                     	;# 
  1301  0195                     	;# 
  1302  0196                     	;# 
  1303  0199                     	;# 
  1304  019A                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019D                     	;# 
  1312  019E                     	;# 
  1313  019F                     	;# 
  1314  020D                     	;# 
  1315  0210                     	;# 
  1316  0211                     	;# 
  1317  0212                     	;# 
  1318  0213                     	;# 
  1319  0214                     	;# 
  1320  0215                     	;# 
  1321  0215                     	;# 
  1322  0216                     	;# 
  1323  0217                     	;# 
  1324  0291                     	;# 
  1325  0291                     	;# 
  1326  0292                     	;# 
  1327  0293                     	;# 
  1328  0294                     	;# 
  1329  0295                     	;# 
  1330  0295                     	;# 
  1331  0296                     	;# 
  1332  0298                     	;# 
  1333  0298                     	;# 
  1334  0299                     	;# 
  1335  029A                     	;# 
  1336  029B                     	;# 
  1337  029C                     	;# 
  1338  029C                     	;# 
  1339  029D                     	;# 
  1340  029E                     	;# 
  1341  029F                     	;# 
  1342  0311                     	;# 
  1343  0311                     	;# 
  1344  0312                     	;# 
  1345  0313                     	;# 
  1346  0314                     	;# 
  1347  0315                     	;# 
  1348  0315                     	;# 
  1349  0316                     	;# 
  1350  0318                     	;# 
  1351  0318                     	;# 
  1352  0319                     	;# 
  1353  031A                     	;# 
  1354  031C                     	;# 
  1355  031C                     	;# 
  1356  031D                     	;# 
  1357  031E                     	;# 
  1358  0394                     	;# 
  1359  0395                     	;# 
  1360  0396                     	;# 
  1361  0415                     	;# 
  1362  0416                     	;# 
  1363  0417                     	;# 
  1364  041C                     	;# 
  1365  041D                     	;# 
  1366  041E                     	;# 
  1367  0791                     	;# 
  1368  0792                     	;# 
  1369  0793                     	;# 
  1370  0794                     	;# 
  1371  0795                     	;# 
  1372  0798                     	;# 
  1373  0799                     	;# 
  1374  07A0                     	;# 
  1375  07A1                     	;# 
  1376  07A3                     	;# 
  1377  07A4                     	;# 
  1378  07A6                     	;# 
  1379  07A7                     	;# 
  1380  07A9                     	;# 
  1381  07AA                     	;# 
  1382  0FE4                     	;# 
  1383  0FE5                     	;# 
  1384  0FE6                     	;# 
  1385  0FE7                     	;# 
  1386  0FE8                     	;# 
  1387  0FE9                     	;# 
  1388  0FEA                     	;# 
  1389  0FEB                     	;# 
  1390  0FED                     	;# 
  1391  0FEE                     	;# 
  1392  0FEF                     	;# 
  1393  0000                     	;# 
  1394  0001                     	;# 
  1395  0002                     	;# 
  1396  0003                     	;# 
  1397  0004                     	;# 
  1398  0005                     	;# 
  1399  0006                     	;# 
  1400  0007                     	;# 
  1401  0008                     	;# 
  1402  0009                     	;# 
  1403  000A                     	;# 
  1404  000B                     	;# 
  1405  000C                     	;# 
  1406  000D                     	;# 
  1407  000E                     	;# 
  1408  0010                     	;# 
  1409  0011                     	;# 
  1410  0012                     	;# 
  1411  0013                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  001E                     	;# 
  1422  001F                     	;# 
  1423  008C                     	;# 
  1424  008D                     	;# 
  1425  008E                     	;# 
  1426  0090                     	;# 
  1427  0091                     	;# 
  1428  0092                     	;# 
  1429  0093                     	;# 
  1430  0095                     	;# 
  1431  0096                     	;# 
  1432  0097                     	;# 
  1433  0098                     	;# 
  1434  0099                     	;# 
  1435  009A                     	;# 
  1436  009B                     	;# 
  1437  009B                     	;# 
  1438  009C                     	;# 
  1439  009D                     	;# 
  1440  009E                     	;# 
  1441  010C                     	;# 
  1442  010D                     	;# 
  1443  010E                     	;# 
  1444  0110                     	;# 
  1445  0111                     	;# 
  1446  0112                     	;# 
  1447  0113                     	;# 
  1448  0114                     	;# 
  1449  0115                     	;# 
  1450  0116                     	;# 
  1451  0117                     	;# 
  1452  0118                     	;# 
  1453  0119                     	;# 
  1454  011A                     	;# 
  1455  011B                     	;# 
  1456  011D                     	;# 
  1457  018C                     	;# 
  1458  018D                     	;# 
  1459  0191                     	;# 
  1460  0191                     	;# 
  1461  0192                     	;# 
  1462  0193                     	;# 
  1463  0193                     	;# 
  1464  0193                     	;# 
  1465  0194                     	;# 
  1466  0195                     	;# 
  1467  0196                     	;# 
  1468  0199                     	;# 
  1469  019A                     	;# 
  1470  019B                     	;# 
  1471  019B                     	;# 
  1472  019B                     	;# 
  1473  019B                     	;# 
  1474  019C                     	;# 
  1475  019C                     	;# 
  1476  019D                     	;# 
  1477  019E                     	;# 
  1478  019F                     	;# 
  1479  020D                     	;# 
  1480  0210                     	;# 
  1481  0211                     	;# 
  1482  0212                     	;# 
  1483  0213                     	;# 
  1484  0214                     	;# 
  1485  0215                     	;# 
  1486  0215                     	;# 
  1487  0216                     	;# 
  1488  0217                     	;# 
  1489  0291                     	;# 
  1490  0291                     	;# 
  1491  0292                     	;# 
  1492  0293                     	;# 
  1493  0294                     	;# 
  1494  0295                     	;# 
  1495  0295                     	;# 
  1496  0296                     	;# 
  1497  0298                     	;# 
  1498  0298                     	;# 
  1499  0299                     	;# 
  1500  029A                     	;# 
  1501  029B                     	;# 
  1502  029C                     	;# 
  1503  029C                     	;# 
  1504  029D                     	;# 
  1505  029E                     	;# 
  1506  029F                     	;# 
  1507  0311                     	;# 
  1508  0311                     	;# 
  1509  0312                     	;# 
  1510  0313                     	;# 
  1511  0314                     	;# 
  1512  0315                     	;# 
  1513  0315                     	;# 
  1514  0316                     	;# 
  1515  0318                     	;# 
  1516  0318                     	;# 
  1517  0319                     	;# 
  1518  031A                     	;# 
  1519  031C                     	;# 
  1520  031C                     	;# 
  1521  031D                     	;# 
  1522  031E                     	;# 
  1523  0394                     	;# 
  1524  0395                     	;# 
  1525  0396                     	;# 
  1526  0415                     	;# 
  1527  0416                     	;# 
  1528  0417                     	;# 
  1529  041C                     	;# 
  1530  041D                     	;# 
  1531  041E                     	;# 
  1532  0791                     	;# 
  1533  0792                     	;# 
  1534  0793                     	;# 
  1535  0794                     	;# 
  1536  0795                     	;# 
  1537  0798                     	;# 
  1538  0799                     	;# 
  1539  07A0                     	;# 
  1540  07A1                     	;# 
  1541  07A3                     	;# 
  1542  07A4                     	;# 
  1543  07A6                     	;# 
  1544  07A7                     	;# 
  1545  07A9                     	;# 
  1546  07AA                     	;# 
  1547  0FE4                     	;# 
  1548  0FE5                     	;# 
  1549  0FE6                     	;# 
  1550  0FE7                     	;# 
  1551  0FE8                     	;# 
  1552  0FE9                     	;# 
  1553  0FEA                     	;# 
  1554  0FEB                     	;# 
  1555  0FED                     	;# 
  1556  0FEE                     	;# 
  1557  0FEF                     	;# 
  1558  0000                     	;# 
  1559  0001                     	;# 
  1560  0002                     	;# 
  1561  0003                     	;# 
  1562  0004                     	;# 
  1563  0005                     	;# 
  1564  0006                     	;# 
  1565  0007                     	;# 
  1566  0008                     	;# 
  1567  0009                     	;# 
  1568  000A                     	;# 
  1569  000B                     	;# 
  1570  000C                     	;# 
  1571  000D                     	;# 
  1572  000E                     	;# 
  1573  0010                     	;# 
  1574  0011                     	;# 
  1575  0012                     	;# 
  1576  0013                     	;# 
  1577  0015                     	;# 
  1578  0016                     	;# 
  1579  0016                     	;# 
  1580  0017                     	;# 
  1581  0018                     	;# 
  1582  0019                     	;# 
  1583  001A                     	;# 
  1584  001B                     	;# 
  1585  001C                     	;# 
  1586  001E                     	;# 
  1587  001F                     	;# 
  1588  008C                     	;# 
  1589  008D                     	;# 
  1590  008E                     	;# 
  1591  0090                     	;# 
  1592  0091                     	;# 
  1593  0092                     	;# 
  1594  0093                     	;# 
  1595  0095                     	;# 
  1596  0096                     	;# 
  1597  0097                     	;# 
  1598  0098                     	;# 
  1599  0099                     	;# 
  1600  009A                     	;# 
  1601  009B                     	;# 
  1602  009B                     	;# 
  1603  009C                     	;# 
  1604  009D                     	;# 
  1605  009E                     	;# 
  1606  010C                     	;# 
  1607  010D                     	;# 
  1608  010E                     	;# 
  1609  0110                     	;# 
  1610  0111                     	;# 
  1611  0112                     	;# 
  1612  0113                     	;# 
  1613  0114                     	;# 
  1614  0115                     	;# 
  1615  0116                     	;# 
  1616  0117                     	;# 
  1617  0118                     	;# 
  1618  0119                     	;# 
  1619  011A                     	;# 
  1620  011B                     	;# 
  1621  011D                     	;# 
  1622  018C                     	;# 
  1623  018D                     	;# 
  1624  0191                     	;# 
  1625  0191                     	;# 
  1626  0192                     	;# 
  1627  0193                     	;# 
  1628  0193                     	;# 
  1629  0193                     	;# 
  1630  0194                     	;# 
  1631  0195                     	;# 
  1632  0196                     	;# 
  1633  0199                     	;# 
  1634  019A                     	;# 
  1635  019B                     	;# 
  1636  019B                     	;# 
  1637  019B                     	;# 
  1638  019B                     	;# 
  1639  019C                     	;# 
  1640  019C                     	;# 
  1641  019D                     	;# 
  1642  019E                     	;# 
  1643  019F                     	;# 
  1644  020D                     	;# 
  1645  0210                     	;# 
  1646  0211                     	;# 
  1647  0212                     	;# 
  1648  0213                     	;# 
  1649  0214                     	;# 
  1650  0215                     	;# 
  1651  0215                     	;# 
  1652  0216                     	;# 
  1653  0217                     	;# 
  1654  0291                     	;# 
  1655  0291                     	;# 
  1656  0292                     	;# 
  1657  0293                     	;# 
  1658  0294                     	;# 
  1659  0295                     	;# 
  1660  0295                     	;# 
  1661  0296                     	;# 
  1662  0298                     	;# 
  1663  0298                     	;# 
  1664  0299                     	;# 
  1665  029A                     	;# 
  1666  029B                     	;# 
  1667  029C                     	;# 
  1668  029C                     	;# 
  1669  029D                     	;# 
  1670  029E                     	;# 
  1671  029F                     	;# 
  1672  0311                     	;# 
  1673  0311                     	;# 
  1674  0312                     	;# 
  1675  0313                     	;# 
  1676  0314                     	;# 
  1677  0315                     	;# 
  1678  0315                     	;# 
  1679  0316                     	;# 
  1680  0318                     	;# 
  1681  0318                     	;# 
  1682  0319                     	;# 
  1683  031A                     	;# 
  1684  031C                     	;# 
  1685  031C                     	;# 
  1686  031D                     	;# 
  1687  031E                     	;# 
  1688  0394                     	;# 
  1689  0395                     	;# 
  1690  0396                     	;# 
  1691  0415                     	;# 
  1692  0416                     	;# 
  1693  0417                     	;# 
  1694  041C                     	;# 
  1695  041D                     	;# 
  1696  041E                     	;# 
  1697  0791                     	;# 
  1698  0792                     	;# 
  1699  0793                     	;# 
  1700  0794                     	;# 
  1701  0795                     	;# 
  1702  0798                     	;# 
  1703  0799                     	;# 
  1704  07A0                     	;# 
  1705  07A1                     	;# 
  1706  07A3                     	;# 
  1707  07A4                     	;# 
  1708  07A6                     	;# 
  1709  07A7                     	;# 
  1710  07A9                     	;# 
  1711  07AA                     	;# 
  1712  0FE4                     	;# 
  1713  0FE5                     	;# 
  1714  0FE6                     	;# 
  1715  0FE7                     	;# 
  1716  0FE8                     	;# 
  1717  0FE9                     	;# 
  1718  0FEA                     	;# 
  1719  0FEB                     	;# 
  1720  0FED                     	;# 
  1721  0FEE                     	;# 
  1722  0FEF                     	;# 
  1723  0000                     	;# 
  1724  0001                     	;# 
  1725  0002                     	;# 
  1726  0003                     	;# 
  1727  0004                     	;# 
  1728  0005                     	;# 
  1729  0006                     	;# 
  1730  0007                     	;# 
  1731  0008                     	;# 
  1732  0009                     	;# 
  1733  000A                     	;# 
  1734  000B                     	;# 
  1735  000C                     	;# 
  1736  000D                     	;# 
  1737  000E                     	;# 
  1738  0010                     	;# 
  1739  0011                     	;# 
  1740  0012                     	;# 
  1741  0013                     	;# 
  1742  0015                     	;# 
  1743  0016                     	;# 
  1744  0016                     	;# 
  1745  0017                     	;# 
  1746  0018                     	;# 
  1747  0019                     	;# 
  1748  001A                     	;# 
  1749  001B                     	;# 
  1750  001C                     	;# 
  1751  001E                     	;# 
  1752  001F                     	;# 
  1753  008C                     	;# 
  1754  008D                     	;# 
  1755  008E                     	;# 
  1756  0090                     	;# 
  1757  0091                     	;# 
  1758  0092                     	;# 
  1759  0093                     	;# 
  1760  0095                     	;# 
  1761  0096                     	;# 
  1762  0097                     	;# 
  1763  0098                     	;# 
  1764  0099                     	;# 
  1765  009A                     	;# 
  1766  009B                     	;# 
  1767  009B                     	;# 
  1768  009C                     	;# 
  1769  009D                     	;# 
  1770  009E                     	;# 
  1771  010C                     	;# 
  1772  010D                     	;# 
  1773  010E                     	;# 
  1774  0110                     	;# 
  1775  0111                     	;# 
  1776  0112                     	;# 
  1777  0113                     	;# 
  1778  0114                     	;# 
  1779  0115                     	;# 
  1780  0116                     	;# 
  1781  0117                     	;# 
  1782  0118                     	;# 
  1783  0119                     	;# 
  1784  011A                     	;# 
  1785  011B                     	;# 
  1786  011D                     	;# 
  1787  018C                     	;# 
  1788  018D                     	;# 
  1789  0191                     	;# 
  1790  0191                     	;# 
  1791  0192                     	;# 
  1792  0193                     	;# 
  1793  0193                     	;# 
  1794  0193                     	;# 
  1795  0194                     	;# 
  1796  0195                     	;# 
  1797  0196                     	;# 
  1798  0199                     	;# 
  1799  019A                     	;# 
  1800  019B                     	;# 
  1801  019B                     	;# 
  1802  019B                     	;# 
  1803  019B                     	;# 
  1804  019C                     	;# 
  1805  019C                     	;# 
  1806  019D                     	;# 
  1807  019E                     	;# 
  1808  019F                     	;# 
  1809  020D                     	;# 
  1810  0210                     	;# 
  1811  0211                     	;# 
  1812  0212                     	;# 
  1813  0213                     	;# 
  1814  0214                     	;# 
  1815  0215                     	;# 
  1816  0215                     	;# 
  1817  0216                     	;# 
  1818  0217                     	;# 
  1819  0291                     	;# 
  1820  0291                     	;# 
  1821  0292                     	;# 
  1822  0293                     	;# 
  1823  0294                     	;# 
  1824  0295                     	;# 
  1825  0295                     	;# 
  1826  0296                     	;# 
  1827  0298                     	;# 
  1828  0298                     	;# 
  1829  0299                     	;# 
  1830  029A                     	;# 
  1831  029B                     	;# 
  1832  029C                     	;# 
  1833  029C                     	;# 
  1834  029D                     	;# 
  1835  029E                     	;# 
  1836  029F                     	;# 
  1837  0311                     	;# 
  1838  0311                     	;# 
  1839  0312                     	;# 
  1840  0313                     	;# 
  1841  0314                     	;# 
  1842  0315                     	;# 
  1843  0315                     	;# 
  1844  0316                     	;# 
  1845  0318                     	;# 
  1846  0318                     	;# 
  1847  0319                     	;# 
  1848  031A                     	;# 
  1849  031C                     	;# 
  1850  031C                     	;# 
  1851  031D                     	;# 
  1852  031E                     	;# 
  1853  0394                     	;# 
  1854  0395                     	;# 
  1855  0396                     	;# 
  1856  0415                     	;# 
  1857  0416                     	;# 
  1858  0417                     	;# 
  1859  041C                     	;# 
  1860  041D                     	;# 
  1861  041E                     	;# 
  1862  0791                     	;# 
  1863  0792                     	;# 
  1864  0793                     	;# 
  1865  0794                     	;# 
  1866  0795                     	;# 
  1867  0798                     	;# 
  1868  0799                     	;# 
  1869  07A0                     	;# 
  1870  07A1                     	;# 
  1871  07A3                     	;# 
  1872  07A4                     	;# 
  1873  07A6                     	;# 
  1874  07A7                     	;# 
  1875  07A9                     	;# 
  1876  07AA                     	;# 
  1877  0FE4                     	;# 
  1878  0FE5                     	;# 
  1879  0FE6                     	;# 
  1880  0FE7                     	;# 
  1881  0FE8                     	;# 
  1882  0FE9                     	;# 
  1883  0FEA                     	;# 
  1884  0FEB                     	;# 
  1885  0FED                     	;# 
  1886  0FEE                     	;# 
  1887  0FEF                     	;# 
  1888                           
  1889                           	psect	idataBANK2
  1890  0000                     __pidataBANK2:	
  1891                           
  1892                           	psect	stringtext1
  1893  1800                     __pstringtext1:	
  1894  1800                     _PWM_trans_table:	
  1895  1800  3400               	retlw	0
  1896  1801  3400               	retlw	0
  1897  1802  3400               	retlw	0
  1898  1803  3400               	retlw	0
  1899  1804  3400               	retlw	0
  1900  1805  3400               	retlw	0
  1901  1806  3400               	retlw	0
  1902  1807  3400               	retlw	0
  1903  1808  3400               	retlw	0
  1904  1809  3400               	retlw	0
  1905  180A  345A               	retlw	90
  1906  180B  345A               	retlw	90
  1907  180C  345A               	retlw	90
  1908  180D  345A               	retlw	90
  1909  180E  345A               	retlw	90
  1910  180F  345A               	retlw	90
  1911  1810  345A               	retlw	90
  1912  1811  345A               	retlw	90
  1913  1812  345A               	retlw	90
  1914  1813  345A               	retlw	90
  1915  1814  345A               	retlw	90
  1916  1815  345B               	retlw	91
  1917  1816  345B               	retlw	91
  1918  1817  345C               	retlw	92
  1919  1818  345D               	retlw	93
  1920  1819  345D               	retlw	93
  1921  181A  345E               	retlw	94
  1922  181B  345F               	retlw	95
  1923  181C  345F               	retlw	95
  1924  181D  3460               	retlw	96
  1925  181E  3460               	retlw	96
  1926  181F  3461               	retlw	97
  1927  1820  3462               	retlw	98
  1928  1821  3462               	retlw	98
  1929  1822  3463               	retlw	99
  1930  1823  3464               	retlw	100
  1931  1824  3464               	retlw	100
  1932  1825  3465               	retlw	101
  1933  1826  3466               	retlw	102
  1934  1827  3466               	retlw	102
  1935  1828  3467               	retlw	103
  1936  1829  3468               	retlw	104
  1937  182A  3468               	retlw	104
  1938  182B  3469               	retlw	105
  1939  182C  346A               	retlw	106
  1940  182D  346A               	retlw	106
  1941  182E  346B               	retlw	107
  1942  182F  346B               	retlw	107
  1943  1830  346C               	retlw	108
  1944  1831  346D               	retlw	109
  1945  1832  346D               	retlw	109
  1946  1833  346E               	retlw	110
  1947  1834  346F               	retlw	111
  1948  1835  346F               	retlw	111
  1949  1836  3470               	retlw	112
  1950  1837  3471               	retlw	113
  1951  1838  3471               	retlw	113
  1952  1839  3472               	retlw	114
  1953  183A  3473               	retlw	115
  1954  183B  3473               	retlw	115
  1955  183C  3474               	retlw	116
  1956  183D  3475               	retlw	117
  1957  183E  3475               	retlw	117
  1958  183F  3476               	retlw	118
  1959  1840  3476               	retlw	118
  1960  1841  3477               	retlw	119
  1961  1842  3478               	retlw	120
  1962  1843  3478               	retlw	120
  1963  1844  3479               	retlw	121
  1964  1845  347A               	retlw	122
  1965  1846  347A               	retlw	122
  1966  1847  347B               	retlw	123
  1967  1848  347C               	retlw	124
  1968  1849  347C               	retlw	124
  1969  184A  347D               	retlw	125
  1970  184B  347E               	retlw	126
  1971  184C  347E               	retlw	126
  1972  184D  347F               	retlw	127
  1973  184E  3480               	retlw	128
  1974  184F  3480               	retlw	128
  1975  1850  3481               	retlw	129
  1976  1851  3481               	retlw	129
  1977  1852  3482               	retlw	130
  1978  1853  3483               	retlw	131
  1979  1854  3483               	retlw	131
  1980  1855  3484               	retlw	132
  1981  1856  3485               	retlw	133
  1982  1857  3485               	retlw	133
  1983  1858  3486               	retlw	134
  1984  1859  3487               	retlw	135
  1985  185A  3487               	retlw	135
  1986  185B  3488               	retlw	136
  1987  185C  3489               	retlw	137
  1988  185D  3489               	retlw	137
  1989  185E  348A               	retlw	138
  1990  185F  348B               	retlw	139
  1991  1860  348B               	retlw	139
  1992  1861  348C               	retlw	140
  1993  1862  348C               	retlw	140
  1994  1863  348D               	retlw	141
  1995  1864  348E               	retlw	142
  1996  1865  348E               	retlw	142
  1997  1866  348F               	retlw	143
  1998  1867  3490               	retlw	144
  1999  1868  3490               	retlw	144
  2000  1869  3491               	retlw	145
  2001  186A  3492               	retlw	146
  2002  186B  3492               	retlw	146
  2003  186C  3493               	retlw	147
  2004  186D  3494               	retlw	148
  2005  186E  3494               	retlw	148
  2006  186F  3495               	retlw	149
  2007  1870  3496               	retlw	150
  2008  1871  3496               	retlw	150
  2009  1872  3497               	retlw	151
  2010  1873  3497               	retlw	151
  2011  1874  3498               	retlw	152
  2012  1875  3499               	retlw	153
  2013  1876  3499               	retlw	153
  2014  1877  349A               	retlw	154
  2015  1878  349B               	retlw	155
  2016  1879  349B               	retlw	155
  2017  187A  349C               	retlw	156
  2018  187B  349D               	retlw	157
  2019  187C  349D               	retlw	157
  2020  187D  349E               	retlw	158
  2021  187E  349F               	retlw	159
  2022  187F  349F               	retlw	159
  2023  1880  34A0               	retlw	160
  2024  1881  34A1               	retlw	161
  2025  1882  34A1               	retlw	161
  2026  1883  34A2               	retlw	162
  2027  1884  34A2               	retlw	162
  2028  1885  34A3               	retlw	163
  2029  1886  34A4               	retlw	164
  2030  1887  34A4               	retlw	164
  2031  1888  34A5               	retlw	165
  2032  1889  34A6               	retlw	166
  2033  188A  34A6               	retlw	166
  2034  188B  34A7               	retlw	167
  2035  188C  34A8               	retlw	168
  2036  188D  34A8               	retlw	168
  2037  188E  34A9               	retlw	169
  2038  188F  34AA               	retlw	170
  2039  1890  34AA               	retlw	170
  2040  1891  34AB               	retlw	171
  2041  1892  34AC               	retlw	172
  2042  1893  34AC               	retlw	172
  2043  1894  34AD               	retlw	173
  2044  1895  34AD               	retlw	173
  2045  1896  34AE               	retlw	174
  2046  1897  34AF               	retlw	175
  2047  1898  34AF               	retlw	175
  2048  1899  34B0               	retlw	176
  2049  189A  34B1               	retlw	177
  2050  189B  34B1               	retlw	177
  2051  189C  34B2               	retlw	178
  2052  189D  34B3               	retlw	179
  2053  189E  34B3               	retlw	179
  2054  189F  34B4               	retlw	180
  2055  18A0  34B5               	retlw	181
  2056  18A1  34B5               	retlw	181
  2057  18A2  34B6               	retlw	182
  2058  18A3  34B7               	retlw	183
  2059  18A4  34B7               	retlw	183
  2060  18A5  34B8               	retlw	184
  2061  18A6  34B8               	retlw	184
  2062  18A7  34B9               	retlw	185
  2063  18A8  34BA               	retlw	186
  2064  18A9  34BA               	retlw	186
  2065  18AA  34BB               	retlw	187
  2066  18AB  34BC               	retlw	188
  2067  18AC  34BC               	retlw	188
  2068  18AD  34BD               	retlw	189
  2069  18AE  34BE               	retlw	190
  2070  18AF  34BE               	retlw	190
  2071  18B0  34BF               	retlw	191
  2072  18B1  34C0               	retlw	192
  2073  18B2  34C0               	retlw	192
  2074  18B3  34C1               	retlw	193
  2075  18B4  34C2               	retlw	194
  2076  18B5  34C2               	retlw	194
  2077  18B6  34C3               	retlw	195
  2078  18B7  34C3               	retlw	195
  2079  18B8  34C4               	retlw	196
  2080  18B9  34C5               	retlw	197
  2081  18BA  34C5               	retlw	197
  2082  18BB  34C6               	retlw	198
  2083  18BC  34C7               	retlw	199
  2084  18BD  34C7               	retlw	199
  2085  18BE  34C8               	retlw	200
  2086  18BF  34C8               	retlw	200
  2087  18C0  34C8               	retlw	200
  2088  18C1  34C8               	retlw	200
  2089  18C2  34C8               	retlw	200
  2090  18C3  34C8               	retlw	200
  2091  18C4  34C8               	retlw	200
  2092  18C5  34C8               	retlw	200
  2093  18C6  34C8               	retlw	200
  2094  18C7  34C8               	retlw	200
  2095  18C8  34C8               	retlw	200
  2096  18C9  34C8               	retlw	200
  2097  18CA                     __end_of_PWM_trans_table:	
  2098                           
  2099                           	psect	nvBANK1
  2100  00EF                     __pnvBANK1:	
  2101  00EF                     _ui8_ResetMatlab:	
  2102  00EF                     	ds	1
  2103                           
  2104                           	psect	nvBANK2
  2105  016E                     __pnvBANK2:	
  2106  016E                     _ui16_Current_Thresh:	
  2107  016E                     	ds	2
  2108                           
  2109                           	psect	nvBANK3
  2110  01E2                     __pnvBANK3:	
  2111  01E2                     _ui16_dryRun_Thresh:	
  2112  01E2                     	ds	2
  2113  0017                     _TMR1H	set	23
  2114  0016                     _TMR1L	set	22
  2115  001A                     _TMR2	set	26
  2116  0015                     _TMR0	set	21
  2117  0018                     _T1CON	set	24
  2118  000B                     _INTCON	set	11
  2119  001C                     _T2CON	set	28
  2120  001B                     _PR2	set	27
  2121  005D                     _TMR0IE	set	93
  2122  0064                     _RA4	set	100
  2123  009D                     _CCP4IF	set	157
  2124  009C                     _CCP3IF	set	156
  2125  008A                     _CCP1IF	set	138
  2126  0090                     _CCP2IF	set	144
  2127  009E                     _CCP5IF	set	158
  2128  009B                     _TMR6IF	set	155
  2129  0089                     _TMR2IF	set	137
  2130  0099                     _TMR4IF	set	153
  2131  0088                     _TMR1IF	set	136
  2132  005F                     _GIE	set	95
  2133  005E                     _PEIE	set	94
  2134  0097                     _WDTCON	set	151
  2135  0099                     _OSCCON	set	153
  2136  0093                     _PIE3	set	147
  2137  0092                     _PIE2	set	146
  2138  0091                     _PIE1	set	145
  2139  0095                     _OPTION_REG	set	149
  2140  008E                     _TRISC	set	142
  2141  008D                     _TRISB	set	141
  2142  008C                     _TRISA	set	140
  2143  009B                     _ADRESL	set	155
  2144  009C                     _ADRESH	set	156
  2145  009D                     _ADCON0	set	157
  2146  009E                     _ADCON1	set	158
  2147  049B                     _TMR6IE	set	1179
  2148  0499                     _TMR4IE	set	1177
  2149  0488                     _TMR1IE	set	1160
  2150  049E                     _CCP5IE	set	1182
  2151  049D                     _CCP4IE	set	1181
  2152  049C                     _CCP3IE	set	1180
  2153  048A                     _CCP1IE	set	1162
  2154  0489                     _TMR2IE	set	1161
  2155  0490                     _CCP2IE	set	1168
  2156  0495                     _C1IE	set	1173
  2157  04E9                     _GO_nDONE	set	1257
  2158  04E8                     _ADON	set	1256
  2159  010D                     _LATB	set	269
  2160  010C                     _LATA	set	268
  2161  010E                     _LATC	set	270
  2162  0112                     _CM1CON1	set	274
  2163  0111                     _CM1CON0	set	273
  2164  0117                     _FVRCON	set	279
  2165  0870                     _LATC0	set	2160
  2166  0874                     _LATC4	set	2164
  2167  0873                     _LATC3	set	2163
  2168  0871                     _LATC1	set	2161
  2169  0872                     _LATC2	set	2162
  2170  0869                     _LATB1	set	2153
  2171  086A                     _LATB2	set	2154
  2172  088E                     _C1OUT	set	2190
  2173  018D                     _ANSELB	set	397
  2174  018C                     _ANSELA	set	396
  2175  0193                     _EEDATL	set	403
  2176  0191                     _EEADRL	set	401
  2177  0CA8                     _RD	set	3240
  2178  0CAE                     _CFGS	set	3246
  2179  0CAF                     _EEPGD	set	3247
  2180  0292                     _CCPR1H	set	658
  2181  0299                     _CCPR2H	set	665
  2182  0298                     _CCPR2L	set	664
  2183  029A                     _CCP2CON	set	666
  2184  0291                     _CCPR1L	set	657
  2185  0293                     _CCP1CON	set	659
  2186  0295                     _CCP1AS	set	661
  2187  0294                     _PWM1CON	set	660
  2188  0296                     _PSTR1CON	set	662
  2189  14AF                     _CCP1ASE	set	5295
  2190  031D                     _CCPR5H	set	797
  2191  031C                     _CCPR5L	set	796
  2192  031E                     _CCP5CON	set	798
  2193  0319                     _CCPR4H	set	793
  2194  0318                     _CCPR4L	set	792
  2195  031A                     _CCP4CON	set	794
  2196  0312                     _CCPR3H	set	786
  2197  0311                     _CCPR3L	set	785
  2198  0313                     _CCP3CON	set	787
  2199  041C                     _TMR6	set	1052
  2200  0415                     _TMR4	set	1045
  2201  041E                     _T6CON	set	1054
  2202  0417                     _T4CON	set	1047
  2203                           
  2204                           ; #config settings
  2205  0000                     
  2206                           	psect	cinit
  2207  0811                     start_initialization:	
  2208  0811                     __initialization:	
  2209                           
  2210                           ; Initialize objects allocated to BANK2
  2211  0811  0022               	movlb	2	; select bank2
  2212                           
  2213                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  2214  0812  3080               	movlw	128
  2215  0813  00E2               	movwf	__pdataBANK2& (0+127)
  2216  0814  3038               	movlw	56
  2217  0815  00E3               	movwf	(__pdataBANK2+1)& (0+127)
  2218  0816  3001               	movlw	1
  2219  0817  00E4               	movwf	(__pdataBANK2+2)& (0+127)
  2220  0818  01E5               	clrf	(__pdataBANK2+3)& (0+127)
  2221                           
  2222                           ;initializer for _ui16_I_cal_Ph3
  2223  0819  00E6               	movwf	(__pdataBANK2+4)& (0+127)
  2224  081A  01E7               	clrf	(__pdataBANK2+5)& (0+127)
  2225                           
  2226                           ;initializer for _ui16_I_cal_Ph2
  2227  081B  00E8               	movwf	(__pdataBANK2+6)& (0+127)
  2228  081C  01E9               	clrf	(__pdataBANK2+7)& (0+127)
  2229                           
  2230                           ;initializer for _ui16_I_cal_Ph1
  2231  081D  00EA               	movwf	(__pdataBANK2+8)& (0+127)
  2232  081E  01EB               	clrf	(__pdataBANK2+9)& (0+127)
  2233                           
  2234                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  2235  081F  00EC               	movwf	(__pdataBANK2+10)& (0+127)
  2236                           
  2237                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  2238  0820  00ED               	movwf	(__pdataBANK2+11)& (0+127)
  2239                           
  2240                           ; Clear objects allocated to BITBANK0
  2241  0821  0020               	movlb	0	; select bank0
  2242  0822  303C               	movlw	low __pbssBANK0
  2243  0823  01D3               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2244                           
  2245                           ; Clear objects allocated to BANK0
  2246  0824  0084               	movwf	4
  2247  0825  3000               	movlw	high __pbssBANK0
  2248  0826  0085               	movwf	5
  2249  0827  3017               	movlw	23
  2250  0828  3183  2310  3188   	fcall	clear_ram0
  2251                           
  2252                           ; Clear objects allocated to BANK1
  2253  082B  30A0               	movlw	low __pbssBANK1
  2254  082C  0084               	movwf	4
  2255  082D  3000               	movlw	high __pbssBANK1
  2256  082E  0085               	movwf	5
  2257  082F  304F               	movlw	79
  2258  0830  3183  2310  3188   	fcall	clear_ram0
  2259                           
  2260                           ; Clear objects allocated to BANK2
  2261  0833  3020               	movlw	low __pbssBANK2
  2262  0834  0084               	movwf	4
  2263  0835  3001               	movlw	high __pbssBANK2
  2264  0836  0085               	movwf	5
  2265  0837  3042               	movlw	66
  2266  0838  3183  2310  3188   	fcall	clear_ram0
  2267                           
  2268                           ; Clear objects allocated to BANK3
  2269  083B  30A0               	movlw	low __pbssBANK3
  2270  083C  0084               	movwf	4
  2271  083D  3001               	movlw	high __pbssBANK3
  2272  083E  0085               	movwf	5
  2273  083F  3024               	movlw	36
  2274  0840  3183  2310  3188   	fcall	clear_ram0
  2275  0843                     end_of_initialization:	
  2276                           ;End of C runtime variable initialization code
  2277                           
  2278  0843                     __end_of__initialization:	
  2279  0843  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2280  0844  0020               	movlb	0
  2281  0845  2846               	ljmp	_main	;jump to C main() function
  2282  0846                     __pmaintext:	
  2283 ;;
  2284 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2285 ;;
  2286 ;; *************** function _main *****************
  2287 ;; Defined at:
  2288 ;;		line 630 in file "../main.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : B1F/0
  2299 ;;		On exit  : 1F/1
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2302 ;;      Params:         0       0       0       0       0       0       0       0
  2303 ;;      Locals:         0       0       0       0       0       0       0       0
  2304 ;;      Temps:          0       4       0       0       0       0       0       0
  2305 ;;      Totals:         0       4       0       0       0       0       0       0
  2306 ;;Total ram usage:        4 bytes
  2307 ;; Hardware stack levels required when called:    7
  2308 ;; This function calls:
  2309 ;;		_BVH2_Appl_Layer
  2310 ;;		_Get_Analog_Value
  2311 ;;		_InitMotorRun
  2312 ;;		_InitMotorStop
  2313 ;;		_PWMReadDC
  2314 ;;		_SetDiagAlarm
  2315 ;;		___awdiv
  2316 ;;		___wmul
  2317 ;;		_clear_timer
  2318 ;;		_system_init
  2319 ;; This function is called by:
  2320 ;;		Startup code after reset
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           
  2325                           ;psect for function _main
  2326  0846                     _main:	
  2327                           
  2328                           ;main.c: 642: system_init( );
  2329                           
  2330                           ;incstack = 0
  2331                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2332  0846  3190  2021  3188   	fcall	_system_init
  2333                           
  2334                           ;main.c: 643: clear_timer( 4 );
  2335  0849  3004               	movlw	4
  2336  084A  2730  3188         	fcall	_clear_timer
  2337                           
  2338                           ;main.c: 644: ui8_lastTaskvalue = 0;
  2339  084C  0021               	movlb	1	; select bank1
  2340  084D  01D3               	clrf	_ui8_lastTaskvalue^(0+128)
  2341  084E                     l10093:	
  2342                           
  2343                           ;main.c: 697: {;main.c: 699: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  2344  084E  0021               	movlb	1	; select bank1
  2345  084F  0860               	movf	_ui8_Task_Cont1ms^(0+128),w
  2346  0850  0020               	movlb	0	; select bank0
  2347  0851  00B8               	movwf	??_main
  2348  0852  01B9               	clrf	??_main+1
  2349  0853  0839               	movf	??_main+1,w
  2350  0854  00BB               	movwf	??_main+3
  2351  0855  0021               	movlb	1	; select bank1
  2352  0856  0853               	movf	_ui8_lastTaskvalue^(0+128),w
  2353  0857  0020               	movlb	0	; select bank0
  2354  0858  0238               	subwf	??_main,w
  2355  0859  00BA               	movwf	??_main+2
  2356  085A  1C03               	skipc
  2357  085B  03BB               	decf	??_main+3,f
  2358  085C  043B               	iorwf	??_main+3,w
  2359  085D  1903               	btfsc	3,2
  2360  085E  284E               	goto	l10093
  2361                           
  2362                           ;main.c: 701: {;main.c: 707: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  2363  085F  0021               	movlb	1	; select bank1
  2364  0860  0860               	movf	_ui8_Task_Cont1ms^(0+128),w
  2365  0861  00D3               	movwf	_ui8_lastTaskvalue^(0+128)
  2366  0862  30FA               	movlw	250
  2367                           
  2368                           ;main.c: 710: ui8_Task_Cont3ms++;
  2369  0863  0AD6               	incf	_ui8_Task_Cont3ms^(0+128),f
  2370                           
  2371                           ;main.c: 711: ui8_Task_Cont5ms++;
  2372  0864  0AD5               	incf	_ui8_Task_Cont5ms^(0+128),f
  2373                           
  2374                           ;main.c: 712: ui8_Task_Cont100ms++;
  2375  0865  0AD4               	incf	_ui8_Task_Cont100ms^(0+128),f
  2376                           
  2377                           ;main.c: 931: PR2 = 200 * 5/4;
  2378  0866  0020               	movlb	0	; select bank0
  2379  0867  009B               	movwf	27	;volatile
  2380                           
  2381                           ;main.c: 932: ui8_duty_cycle_BLDC = ui8_duty_cycle_mat*5/4;
  2382  0868  3004               	movlw	4
  2383  0869  00AA               	movwf	___awdiv@divisor
  2384  086A  01AB               	clrf	___awdiv@divisor+1
  2385  086B  0021               	movlb	1	; select bank1
  2386  086C  085F               	movf	_ui8_duty_cycle_mat^(0+128),w
  2387  086D  0020               	movlb	0	; select bank0
  2388  086E  00A4               	movwf	___wmul@multiplier
  2389  086F  3005               	movlw	5
  2390  0870  01A5               	clrf	___wmul@multiplier+1
  2391  0871  00A6               	movwf	___wmul@multiplicand
  2392  0872  01A7               	clrf	___wmul@multiplicand+1
  2393  0873  2130               	fcall	___wmul
  2394  0874  0825               	movf	?___wmul+1,w
  2395  0875  00AD               	movwf	___awdiv@dividend+1
  2396  0876  0824               	movf	?___wmul,w
  2397  0877  00AC               	movwf	___awdiv@dividend
  2398  0878  3182  2207  3188   	fcall	___awdiv
  2399  087B  082A               	movf	?___awdiv,w
  2400  087C  00CE               	movwf	_ui8_duty_cycle_BLDC
  2401                           
  2402                           ;main.c: 949: Get_Analog_Value( );
  2403  087D  271B  3188         	fcall	_Get_Analog_Value
  2404                           
  2405                           ;main.c: 995: if( ui8_Task_Cont3ms > 2 )
  2406  087F  3003               	movlw	3
  2407  0880  0021               	movlb	1	; select bank1
  2408  0881  0256               	subwf	_ui8_Task_Cont3ms^(0+128),w
  2409  0882  1803               	btfsc	3,0
  2410                           
  2411                           ;main.c: 997: {;main.c: 999: ui8_Task_Cont3ms = 0;
  2412  0883  01D6               	clrf	_ui8_Task_Cont3ms^(0+128)
  2413                           
  2414                           ;main.c: 1034: };main.c: 1040: if( ui8_Task_Cont5ms > 4 )
  2415  0884  3005               	movlw	5
  2416  0885  0255               	subwf	_ui8_Task_Cont5ms^(0+128),w
  2417  0886  1C03               	skipc
  2418  0887  2922               	goto	l10171
  2419                           
  2420                           ;main.c: 1042: {;main.c: 1046: ui8_Task_Cont5ms = 0;
  2421  0888  01D5               	clrf	_ui8_Task_Cont5ms^(0+128)
  2422  0889  0064               	clrwdt	;# 
  2423                           
  2424                           ;main.c: 1054: ui8_PWM_dc_mat = PWMReadDC( );
  2425  088A  3180  2028  3188   	fcall	_PWMReadDC
  2426  088D  0021               	movlb	1	; select bank1
  2427  088E  00DE               	movwf	_ui8_PWM_dc_mat^(0+128)
  2428                           
  2429                           ;main.c: 1057: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  2430  088F  0022               	movlb	2	; select bank2
  2431  0890  0834               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
  2432  0891  00B6               	movwf	(_ui16_PWM_Freq_mat+1)^(0+256)
  2433  0892  0833               	movf	_ui16_PWM_Freq_In^(0+256),w
  2434  0893  00B5               	movwf	_ui16_PWM_Freq_mat^(0+256)
  2435                           
  2436                           ;main.c: 1058: ui16_Speed_mat = ui16_speed_fil;
  2437  0894  0838               	movf	(_ui16_speed_fil+1)^(0+256),w
  2438  0895  0020               	movlb	0	; select bank0
  2439  0896  00C3               	movwf	_ui16_Speed_mat+1
  2440  0897  0022               	movlb	2	; select bank2
  2441  0898  0837               	movf	_ui16_speed_fil^(0+256),w
  2442  0899  0020               	movlb	0	; select bank0
  2443  089A  00C2               	movwf	_ui16_Speed_mat
  2444                           
  2445                           ;main.c: 1059: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  2446  089B  0022               	movlb	2	; select bank2
  2447  089C  0846               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+256),w
  2448  089D  00B2               	movwf	(_ui16_mat_inpTemp+1)^(0+256)
  2449  089E  0845               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+256),w
  2450  089F  00B1               	movwf	_ui16_mat_inpTemp^(0+256)
  2451                           
  2452                           ;main.c: 1060: ui8_Ki_mat = 5;
  2453  08A0  3005               	movlw	5
  2454  08A1  00AF               	movwf	_ui8_Ki_mat^(0+256)
  2455  08A2  01B0               	clrf	(_ui8_Ki_mat+1)^(0+256)
  2456                           
  2457                           ;main.c: 1061: ui8_Kp_mat = 0;
  2458  08A3  0021               	movlb	1	; select bank1
  2459  08A4  01DD               	clrf	_ui8_Kp_mat^(0+128)
  2460                           
  2461                           ;main.c: 1109: ui16_Speed_demand_mat = PWM_trans_table[ ( ui8_PWM_dc_mat ) ];
  2462  08A5  085E               	movf	_ui8_PWM_dc_mat^(0+128),w
  2463  08A6  3E00               	addlw	low (_PWM_trans_table| (0+32768))
  2464  08A7  0084               	movwf	4
  2465  08A8  3098               	movlw	high (_PWM_trans_table| (0+32768))
  2466  08A9  1803               	skipnc
  2467  08AA  3E01               	addlw	1
  2468  08AB  0085               	movwf	5
  2469  08AC  0800               	movf	0,w	;code access
  2470  08AD  0022               	movlb	2	; select bank2
  2471  08AE  00AD               	movwf	_ui16_Speed_demand_mat^(0+256)
  2472  08AF  30C8               	movlw	low ((_PWM_trans_table+200)| (0+32768))
  2473  08B0  01AE               	clrf	(_ui16_Speed_demand_mat+1)^(0+256)
  2474                           
  2475                           ;main.c: 1112: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 200 ] );
  2476  08B1  0084               	movwf	4
  2477  08B2  3098               	movlw	high ((_PWM_trans_table+200)| (0+32768))
  2478  08B3  0085               	movwf	5
  2479  08B4  0800               	movf	0,w	;code access
  2480  08B5  00AB               	movwf	_ui16_Speed_demand_mat_Max^(0+256)
  2481  08B6  3000               	movlw	low (_PWM_trans_table| (0+32768))
  2482  08B7  01AC               	clrf	(_ui16_Speed_demand_mat_Max+1)^(0+256)
  2483                           
  2484                           ;main.c: 1115: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 0 ] );
  2485  08B8  0084               	movwf	4
  2486  08B9  3098               	movlw	high (_PWM_trans_table| (0+32768))
  2487  08BA  0085               	movwf	5
  2488  08BB  0800               	movf	0,w	;code access
  2489  08BC  00A9               	movwf	_ui16_Speed_demand_mat_min^(0+256)
  2490  08BD  01AA               	clrf	(_ui16_Speed_demand_mat_min+1)^(0+256)
  2491                           
  2492                           ;main.c: 1134: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  2493  08BE  0852               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  2494  08BF  0020               	movlb	0	; select bank0
  2495  08C0  00B9               	movwf	??_main+1
  2496  08C1  0022               	movlb	2	; select bank2
  2497  08C2  0851               	movf	_ui16_fir_Bat_mittel^(0+256),w
  2498  08C3  0020               	movlb	0	; select bank0
  2499  08C4  00B8               	movwf	??_main
  2500  08C5  36B9               	lsrf	??_main+1,f
  2501  08C6  0CB8               	rrf	??_main,f
  2502  08C7  36B9               	lsrf	??_main+1,f
  2503  08C8  0CB8               	rrf	??_main,f
  2504  08C9  0838               	movf	??_main,w
  2505  08CA  0021               	movlb	1	; select bank1
  2506  08CB  00AC               	movwf	_ui8_BattVolt_mat^(0+128)
  2507  08CC  01AD               	clrf	(_ui8_BattVolt_mat+1)^(0+128)
  2508                           
  2509                           ;main.c: 1135: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  2510  08CD  0022               	movlb	2	; select bank2
  2511  08CE  0850               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  2512  08CF  0021               	movlb	1	; select bank1
  2513  08D0  00AB               	movwf	(_ui16_mat_Current+1)^(0+128)
  2514  08D1  0022               	movlb	2	; select bank2
  2515  08D2  084F               	movf	_ui16_fir_IPhase_mean^(0+256),w
  2516  08D3  0021               	movlb	1	; select bank1
  2517  08D4  00AA               	movwf	_ui16_mat_Current^(0+128)
  2518                           
  2519                           ;main.c: 1136: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  2520  08D5  3000               	movlw	0
  2521  08D6  0020               	movlb	0	; select bank0
  2522  08D7  184D               	btfsc	_MotorFlags,0
  2523  08D8  3001               	movlw	1
  2524  08D9  0021               	movlb	1	; select bank1
  2525  08DA  00DC               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  2526                           
  2527                           ;main.c: 1147: bool_ControlLoopMode = 0;
  2528  08DB  01DB               	clrf	_bool_ControlLoopMode^(0+128)
  2529                           
  2530                           ;main.c: 1155: BVH2_Appl_Layer( );
  2531  08DC  2145  3188         	fcall	_BVH2_Appl_Layer
  2532                           
  2533                           ;main.c: 1158: ui8_ResetMatlab = 0;
  2534  08DE  0021               	movlb	1	; select bank1
  2535  08DF  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  2536                           
  2537                           ;main.c: 1164: if( ui8_duty_cycle_mat == 0 )
  2538  08E0  085F               	movf	_ui8_duty_cycle_mat^(0+128),w
  2539  08E1  1D03               	btfss	3,2
  2540  08E2  28E6               	goto	l10151
  2541                           
  2542                           ;main.c: 1166: {;main.c: 1168: InitMotorStop( );
  2543  08E3  2722  3188         	fcall	_InitMotorStop
  2544                           
  2545                           ;main.c: 1171: }
  2546  08E5  28E9               	goto	l10153
  2547  08E6                     l10151:	
  2548                           
  2549                           ;main.c: 1174: else;main.c: 1175: {;main.c: 1177: InitMotorRun( );
  2550  08E6  3192  223D  3188   	fcall	_InitMotorRun
  2551  08E9                     l10153:	
  2552                           
  2553                           ;main.c: 1180: };main.c: 1187: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  2554  08E9  0021               	movlb	1	; select bank1
  2555  08EA  085A               	movf	_bool_PWMin_err_Alarm^(0+128),w
  2556  08EB  3901               	andlw	1
  2557  08EC  0020               	movlb	0	; select bank0
  2558  08ED  104F               	bcf	_ui8_error_Flags,0
  2559  08EE  1D03               	skipz
  2560  08EF  144F               	bsf	_ui8_error_Flags,0
  2561                           
  2562                           ;main.c: 1188: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  2563  08F0  0021               	movlb	1	; select bank1
  2564  08F1  0864               	movf	_bool_CPU_TempAlarm^(0+128),w
  2565  08F2  3901               	andlw	1
  2566  08F3  0020               	movlb	0	; select bank0
  2567  08F4  10CF               	bcf	_ui8_error_Flags,1
  2568  08F5  1D03               	skipz
  2569  08F6  14CF               	bsf	_ui8_error_Flags,1
  2570                           
  2571                           ;main.c: 1189: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  2572  08F7  0021               	movlb	1	; select bank1
  2573  08F8  0859               	movf	_bool_CPU_TempRedAlarm^(0+128),w
  2574  08F9  3901               	andlw	1
  2575  08FA  0020               	movlb	0	; select bank0
  2576  08FB  13CF               	bcf	_ui8_error_Flags,7
  2577  08FC  1D03               	skipz
  2578  08FD  17CF               	bsf	_ui8_error_Flags,7
  2579                           
  2580                           ;main.c: 1190: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  2581  08FE  0021               	movlb	1	; select bank1
  2582  08FF  0861               	movf	_bool_HighCurrentAlarm^(0+128),w
  2583  0900  3901               	andlw	1
  2584  0901  0020               	movlb	0	; select bank0
  2585  0902  114F               	bcf	_ui8_error_Flags,2
  2586  0903  1D03               	skipz
  2587  0904  154F               	bsf	_ui8_error_Flags,2
  2588                           
  2589                           ;main.c: 1191: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  2590  0905  0021               	movlb	1	; select bank1
  2591  0906  0862               	movf	_bool_MotorStalled^(0+128),w
  2592  0907  3901               	andlw	1
  2593  0908  0020               	movlb	0	; select bank0
  2594  0909  11CF               	bcf	_ui8_error_Flags,3
  2595  090A  1D03               	skipz
  2596  090B  15CF               	bsf	_ui8_error_Flags,3
  2597                           
  2598                           ;main.c: 1192: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  2599  090C  0021               	movlb	1	; select bank1
  2600  090D  0863               	movf	_bool_DryRunningAlarm^(0+128),w
  2601  090E  3901               	andlw	1
  2602  090F  0020               	movlb	0	; select bank0
  2603  0910  124F               	bcf	_ui8_error_Flags,4
  2604  0911  1D03               	skipz
  2605  0912  164F               	bsf	_ui8_error_Flags,4
  2606                           
  2607                           ;main.c: 1193: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  2608  0913  0021               	movlb	1	; select bank1
  2609  0914  0858               	movf	_bool_UbatAlarm^(0+128),w
  2610  0915  3901               	andlw	1
  2611  0916  0020               	movlb	0	; select bank0
  2612  0917  134F               	bcf	_ui8_error_Flags,6
  2613  0918  1D03               	skipz
  2614  0919  174F               	bsf	_ui8_error_Flags,6
  2615                           
  2616                           ;main.c: 1194: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  2617  091A  0021               	movlb	1	; select bank1
  2618  091B  0857               	movf	_bool_PWMin_Freq_err_Alarm^(0+128),w
  2619  091C  3901               	andlw	1
  2620  091D  0020               	movlb	0	; select bank0
  2621  091E  12CF               	bcf	_ui8_error_Flags,5
  2622  091F  1D03               	skipz
  2623  0920  16CF               	bsf	_ui8_error_Flags,5
  2624                           
  2625                           ;main.c: 1199: MotorFlags.bits.B0 = 0;
  2626  0921  104D               	bcf	_MotorFlags,0
  2627  0922                     l10171:	
  2628                           
  2629                           ;main.c: 1255: };main.c: 1261: if( ui8_Task_Cont100ms == 25 )
  2630  0922  3019               	movlw	25
  2631  0923  0021               	movlb	1	; select bank1
  2632  0924  0654               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2633  0925  1D03               	btfss	3,2
  2634  0926  292A               	goto	l10181
  2635                           
  2636                           ;main.c: 1263: {;main.c: 1274: SetDiagAlarm( );
  2637  0927  3191  21F0  3188   	fcall	_SetDiagAlarm
  2638  092A                     l10181:	
  2639                           
  2640                           ;main.c: 1476: };main.c: 1482: if( ui8_Task_Cont100ms > 100 )
  2641  092A  3065               	movlw	101
  2642  092B  0254               	subwf	_ui8_Task_Cont100ms^(0+128),w
  2643  092C  1803               	btfsc	3,0
  2644                           
  2645                           ;main.c: 1484: {;main.c: 1488: ui8_Task_Cont100ms = 0;
  2646  092D  01D4               	clrf	_ui8_Task_Cont100ms^(0+128)
  2647                           
  2648                           ;main.c: 1528: };main.c: 1556: bool_start_demand_mat = 0;
  2649  092E  01EE               	clrf	_bool_start_demand_mat^(0+128)
  2650                           
  2651                           ;main.c: 1562: }
  2652  092F  284E               	goto	l10093
  2653  0930                     __end_of_main:	
  2654  0930                     __ptext29:	
  2655 ;; *************** function ___wmul *****************
  2656 ;; Defined at:
  2657 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;  multiplier      2    4[BANK0 ] unsigned int 
  2660 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  product         2    8[BANK0 ] unsigned int 
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  2    4[BANK0 ] unsigned int 
  2665 ;; Registers used:
  2666 ;;		wreg, status,2, status,0
  2667 ;; Tracked objects:
  2668 ;;		On entry : 1F/0
  2669 ;;		On exit  : 1F/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2672 ;;      Params:         0       4       0       0       0       0       0       0
  2673 ;;      Locals:         0       2       0       0       0       0       0       0
  2674 ;;      Temps:          0       0       0       0       0       0       0       0
  2675 ;;      Totals:         0       6       0       0       0       0       0       0
  2676 ;;Total ram usage:        6 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    3
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_interrrupt_bldc
  2683 ;;		_main
  2684 ;;		_BVH2_Appl_Layer
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function ___wmul
  2690  0930                     ___wmul:	
  2691                           
  2692                           ;incstack = 0
  2693                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2694  0930  01A8               	clrf	___wmul@product
  2695  0931  01A9               	clrf	___wmul@product+1
  2696  0932                     l9013:	
  2697  0932  1C24               	btfss	___wmul@multiplier,0
  2698  0933  2938               	goto	l9017
  2699  0934  0826               	movf	___wmul@multiplicand,w
  2700  0935  07A8               	addwf	___wmul@product,f
  2701  0936  0827               	movf	___wmul@multiplicand+1,w
  2702  0937  3DA9               	addwfc	___wmul@product+1,f
  2703  0938                     l9017:	
  2704  0938  35A6               	lslf	___wmul@multiplicand,f
  2705  0939  0DA7               	rlf	___wmul@multiplicand+1,f
  2706  093A  36A5               	lsrf	___wmul@multiplier+1,f
  2707  093B  0CA4               	rrf	___wmul@multiplier,f
  2708  093C  0824               	movf	___wmul@multiplier,w
  2709  093D  0425               	iorwf	___wmul@multiplier+1,w
  2710  093E  1D03               	btfss	3,2
  2711  093F  2932               	goto	l9013
  2712  0940  0829               	movf	___wmul@product+1,w
  2713  0941  00A5               	movwf	?___wmul+1
  2714  0942  0828               	movf	___wmul@product,w
  2715  0943  00A4               	movwf	?___wmul
  2716  0944  0008               	return
  2717  0945                     __end_of___wmul:	
  2718  0945                     __ptext28:	
  2719 ;; *************** function _BVH2_Appl_Layer *****************
  2720 ;; Defined at:
  2721 ;;		line 331 in file "../T_Link/BVH2_Appl_Layer.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  Sb3_Sum1        2   26[BANK3 ] short 
  2726 ;;  Sb3_Product1    2   15[BANK3 ] unsigned short 
  2727 ;;  Sb4_PI_sum      2   28[BANK3 ] short 
  2728 ;;  Sb2_Error       2   23[BANK3 ] short 
  2729 ;;  Sb2_Switch5     2   17[BANK3 ] unsigned short 
  2730 ;;  Sb2_Switch2     2    0        unsigned short 
  2731 ;;  Sb1_Logical_    1   25[BANK3 ] unsigned char 
  2732 ;;  Sb2_Logical_    1   22[BANK3 ] unsigned char 
  2733 ;;  Sb1_Logical_    1   21[BANK3 ] unsigned char 
  2734 ;;  Sb1_Logical_    1   20[BANK3 ] unsigned char 
  2735 ;;  Cb24_Reset      1   19[BANK3 ] unsigned char 
  2736 ;;  Sb1_Logical_    1    8[BANK3 ] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 1F/1
  2743 ;;		On exit  : 1F/2
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2746 ;;      Params:         0       0       0       0       0       0       0       0
  2747 ;;      Locals:         0       0       0       0      30       0       0       0
  2748 ;;      Temps:          0       6       0       0       0       0       0       0
  2749 ;;      Totals:         0       6       0       0      30       0       0       0
  2750 ;;Total ram usage:       36 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    4
  2753 ;; This function calls:
  2754 ;;		_Cb1_Current_An___High_node_fcn1
  2755 ;;		_Cb34_PWM_Detection_node_fcn1
  2756 ;;		_Cb44_Pic_etat_monitor_node_fcn1
  2757 ;;		_Cb56_UbatHandling_node_fcn2
  2758 ;;		___aldiv
  2759 ;;		___lmul
  2760 ;;		___wmul
  2761 ;; This function is called by:
  2762 ;;		_main
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           
  2767                           ;psect for function _BVH2_Appl_Layer
  2768  0945                     _BVH2_Appl_Layer:	
  2769                           
  2770                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;;BVH2_Appl_Layer.c: 335: static
      +                           UInt16 Cb19_Counter = 0;;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;;BVH2_Ap
      +                          pl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;;BVH2_Appl_Layer.c: 338: static UInt8 C
      +                          b24_RestartCounter = 0;;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;;BVH2_Appl
      +                          _Layer.c: 340: static UInt8 Cb9_StateCnt = 0;;BVH2_Appl_Layer.c: 342: static struct tag_
      +                          SIBFS_Current_Analysis_low_ SIBFS_Current_Analysis_low_b = {;BVH2_Appl_Layer.c: 343: 0 ,
  2771                           
  2772                           ;incstack = 0
  2773                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2774  0945  2984               	goto	l9413
  2775  0946                     l9353:	
  2776                           
  2777                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
  2778  0946  3000               	movlw	0
  2779  0947  0020               	movlb	0	; select bank0
  2780  0948  023F               	subwf	_Cb44_StateCnt+1,w
  2781  0949  3033               	movlw	51
  2782  094A                     L16:	
  2783  094A  1903               	skipnz
  2784  094B  023E               	subwf	_Cb44_StateCnt,w
  2785  094C  1C03               	skipc
  2786  094D  2958               	goto	l9361
  2787                           
  2788                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
  2789  094E  0021               	movlb	1	; select bank1
  2790  094F  0849               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  2791  0950  39F8               	andlw	-8
  2792  0951  3805               	iorlw	5
  2793  0952  00C9               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  2794                           
  2795                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
  2796  0953  01C1               	clrf	_Cb44_oShutoff^(0+128)
  2797  0954                     l9359:	
  2798                           
  2799                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
  2800  0954  0020               	movlb	0	; select bank0
  2801  0955  01BE               	clrf	_Cb44_StateCnt
  2802  0956  01BF               	clrf	_Cb44_StateCnt+1
  2803                           
  2804                           ;BVH2_Appl_Layer.c: 422: }
  2805  0957  2999               	goto	l9415
  2806  0958                     l9361:	
  2807                           
  2808                           ;BVH2_Appl_Layer.c: 423: else {;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 
      +                          1 ;
  2809  0958  083E               	movf	_Cb44_StateCnt,w
  2810  0959  3E01               	addlw	1
  2811  095A  00BE               	movwf	_Cb44_StateCnt
  2812  095B  3000               	movlw	0
  2813  095C  3D3F               	addwfc	_Cb44_StateCnt+1,w
  2814  095D  00BF               	movwf	_Cb44_StateCnt+1
  2815  095E  2999               	goto	l9415
  2816  095F                     l9363:	
  2817                           
  2818                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
  2819  095F  26DF  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  2820                           
  2821                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
  2822  0961  0C49               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  2823  0962  27AD  3188         	fcall	PL58	;call to abstracted procedure
  2824  0964  1D03               	btfss	3,2
  2825  0965  2958               	goto	l9361
  2826  0966  2999               	goto	l9415
  2827  0967                     l9369:	
  2828                           
  2829                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
  2830  0967  26DF  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
  2831                           
  2832                           ;BVH2_Appl_Layer.c: 445: break;
  2833  0969  2999               	goto	l9415
  2834  096A                     l9371:	
  2835                           
  2836                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
  2837  096A  3000               	movlw	0
  2838  096B  0020               	movlb	0	; select bank0
  2839  096C  023F               	subwf	_Cb44_StateCnt+1,w
  2840  096D  3010               	movlw	16
  2841  096E  294A               	goto	L16
  2842  096F                     l9387:	
  2843                           
  2844                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
  2845  096F  0849               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  2846  0970  39F8               	andlw	-8
  2847  0971  3803               	iorlw	3
  2848  0972  00C9               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  2849                           
  2850                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
  2851  0973  01C1               	clrf	_Cb44_oShutoff^(0+128)
  2852                           
  2853                           ;BVH2_Appl_Layer.c: 484: }
  2854  0974  2999               	goto	l9415
  2855  0975                     l9401:	
  2856                           
  2857                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
  2858  0975  0849               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  2859  0976  39F8               	andlw	-8
  2860  0977  3806               	iorlw	6
  2861  0978  2982               	goto	L17
  2862  0979                     l1368:	
  2863                           ;BVH2_Appl_Layer.c: 515: };BVH2_Appl_Layer.c: 516: default: {
  2864                           
  2865                           
  2866                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
  2867  0979  1AC9               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
  2868  097A  2999               	goto	l9415
  2869                           
  2870                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
  2871  097B  16C9               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
  2872                           
  2873                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
  2874  097C  086F               	movf	_ui8_ResetMatlab^(0+128),w
  2875  097D  1903               	btfsc	3,2
  2876  097E  2999               	goto	l9415
  2877                           
  2878                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
  2879  097F  0849               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  2880  0980  39F8               	andlw	-8
  2881  0981  3804               	iorlw	4
  2882  0982                     L17:	
  2883  0982  00C9               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  2884  0983  2954               	goto	l9359
  2885  0984                     l9413:	
  2886  0984  0849               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  2887  0985  3907               	andlw	7
  2888                           
  2889                           ; Switch size 1, requested type "space"
  2890                           ; Number of cases is 6, Range of values is 1 to 6
  2891                           ; switch strategies available:
  2892                           ; Name         Instructions Cycles
  2893                           ; simple_byte           19    10 (average)
  2894                           ; direct_byte           21     9 (fixed)
  2895                           ; jumptable            263     9 (fixed)
  2896                           ;	Chosen strategy is simple_byte
  2897  0986  3A01               	xorlw	1	; case 1
  2898  0987  1903               	skipnz
  2899  0988  2975               	goto	l9401
  2900  0989  3A03               	xorlw	3	; case 2
  2901  098A  1903               	skipnz
  2902  098B  296F               	goto	l9387
  2903  098C  3A01               	xorlw	1	; case 3
  2904  098D  1903               	skipnz
  2905  098E  2967               	goto	l9369
  2906  098F  3A07               	xorlw	7	; case 4
  2907  0990  1903               	skipnz
  2908  0991  2946               	goto	l9353
  2909  0992  3A01               	xorlw	1	; case 5
  2910  0993  1903               	skipnz
  2911  0994  295F               	goto	l9363
  2912  0995  3A03               	xorlw	3	; case 6
  2913  0996  1903               	skipnz
  2914  0997  296A               	goto	l9371
  2915  0998  2979               	goto	l1368
  2916  0999                     l9415:	
  2917                           
  2918                           ;BVH2_Appl_Layer.c: 538: Cb34_idPWM = ui8_PWM_dc_mat;
  2919  0999  0021               	movlb	1	; select bank1
  2920  099A  085E               	movf	_ui8_PWM_dc_mat^(0+128),w
  2921  099B  0020               	movlb	0	; select bank0
  2922  099C  00CB               	movwf	_Cb34_idPWM
  2923                           
  2924                           ;BVH2_Appl_Layer.c: 543: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
  2925  099D  0021               	movlb	1	; select bank1
  2926  099E  1A4A               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
  2927  099F  29A5               	goto	l9439
  2928  09A0  29B3               	goto	l1371
  2929  09A1                     l9421:	
  2930                           
  2931                           ;BVH2_Appl_Layer.c: 549: Cb34_PWM_Detection_node_fcn1();
  2932  09A1  3180  20BC  3188   	fcall	_Cb34_PWM_Detection_node_fcn1
  2933                           
  2934                           ;BVH2_Appl_Layer.c: 552: break;
  2935  09A4  29BD               	goto	l9455
  2936  09A5                     l9439:	
  2937  09A5  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
  2938  09A6  390F               	andlw	15
  2939                           
  2940                           ; Switch size 1, requested type "space"
  2941                           ; Number of cases is 8, Range of values is 1 to 8
  2942                           ; switch strategies available:
  2943                           ; Name         Instructions Cycles
  2944                           ; direct_byte           25     9 (fixed)
  2945                           ; simple_byte           25    13 (average)
  2946                           ; jumptable            263     9 (fixed)
  2947                           ;	Chosen strategy is direct_byte
  2948  09A7  3EFF               	addlw	-1
  2949  09A8  1C03               	skipc
  2950  09A9  29BD               	goto	l9455
  2951  09AA  0084               	movwf	4
  2952  09AB  3008               	movlw	8
  2953  09AC  0204               	subwf	4,w
  2954  09AD  1803               	skipnc
  2955  09AE  29BD               	goto	l9455
  2956  09AF  3183               	movlp	high S10359
  2957  09B0  3504               	lslf	4,w
  2958  09B1  3E00               	addlw	low S10359
  2959  09B2  0082               	movwf	2
  2960  09B3                     l1371:	
  2961                           
  2962                           ;BVH2_Appl_Layer.c: 615: else {;BVH2_Appl_Layer.c: 616: SIBFS_PWM_Detection_b.Cb35_PWMin
      +                          put_handling = 1;
  2963  09B3  164A               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
  2964                           
  2965                           ;BVH2_Appl_Layer.c: 619: if (ui8_ResetMatlab == 1) {
  2966  09B4  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  2967  09B5  29B7               	goto	u7381
  2968  09B6  29B8               	goto	l9443
  2969  09B7                     u7381:	
  2970  09B7  29BD               	goto	l9455
  2971  09B8                     l9443:	
  2972                           
  2973                           ;BVH2_Appl_Layer.c: 621: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
  2974                           
  2975                           ;BVH2_Appl_Layer.c: 622: Cb34_odPumpOff = 1;
  2976                           
  2977                           ;BVH2_Appl_Layer.c: 623: Cb34_odFixedValueSel = 0;
  2978                           
  2979                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedLowValueSel = 0;
  2980  09B8  3181  2135  3188   	fcall	PL40	;call to abstracted procedure
  2981                           
  2982                           ;BVH2_Appl_Layer.c: 625: Cb34_oPWM_SC_Alarm = 0;
  2983  09BB  01C5               	clrf	_Cb34_oPWM_SC_Alarm^(0+128)
  2984                           
  2985                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_Alarm = 0;
  2986  09BC  01C6               	clrf	_Cb34_oPWM_Alarm^(0+128)
  2987  09BD                     l9455:	
  2988                           
  2989                           ;BVH2_Appl_Layer.c: 627: };BVH2_Appl_Layer.c: 628: };BVH2_Appl_Layer.c: 633: bool_PWMin_
      +                          Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
  2990  09BD  0021               	movlb	1	; select bank1
  2991  09BE  0845               	movf	_Cb34_oPWM_SC_Alarm^(0+128),w
  2992  09BF  00D7               	movwf	_bool_PWMin_Freq_err_Alarm^(0+128)
  2993                           
  2994                           ;BVH2_Appl_Layer.c: 638: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
  2995  09C0  0020               	movlb	0	; select bank0
  2996  09C1  1DCC               	btfss	_SIBFS_UbatHandling_b,3
  2997  09C2  29E4               	goto	l1384
  2998                           
  2999                           ;BVH2_Appl_Layer.c: 642: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
  3000  09C3  1E4C               	btfss	_SIBFS_UbatHandling_b,4
  3001  09C4  29D1               	goto	l1385
  3002                           
  3003                           ;BVH2_Appl_Layer.c: 644: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
  3004  09C5  084C               	movf	_SIBFS_UbatHandling_b,w
  3005  09C6  39F8               	andlw	-8
  3006  09C7  3802               	iorlw	2
  3007  09C8  00CC               	movwf	_SIBFS_UbatHandling_b
  3008                           
  3009                           ;BVH2_Appl_Layer.c: 647: if (((UInt8)ui8_BattVolt_mat) < 139) {
  3010  09C9  308B               	movlw	139
  3011  09CA  0021               	movlb	1	; select bank1
  3012  09CB  022C               	subwf	_ui8_BattVolt_mat^(0+128),w
  3013  09CC  1803               	skipnc
  3014  09CD  29EA               	goto	l1392
  3015  09CE                     l9465:	
  3016                           
  3017                           ;BVH2_Appl_Layer.c: 648: Cb56_UbatHandling_node_fcn2();
  3018  09CE  27C1  3188         	fcall	_Cb56_UbatHandling_node_fcn2
  3019  09D0  29EA               	goto	l1392
  3020  09D1                     l1385:	
  3021                           
  3022                           ;BVH2_Appl_Layer.c: 653: else {;BVH2_Appl_Layer.c: 655: if (SIBFS_UbatHandling_b.Cb59_Sa
      +                          turationLow) {
  3023  09D1  1ECC               	btfss	_SIBFS_UbatHandling_b,5
  3024  09D2  29DD               	goto	l1388
  3025                           
  3026                           ;BVH2_Appl_Layer.c: 657: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
  3027  09D3  084C               	movf	_SIBFS_UbatHandling_b,w
  3028  09D4  39F8               	andlw	-8
  3029  09D5  3803               	iorlw	3
  3030  09D6  00CC               	movwf	_SIBFS_UbatHandling_b
  3031                           
  3032                           ;BVH2_Appl_Layer.c: 660: if (((UInt8)ui8_BattVolt_mat) > 49) {
  3033  09D7  3032               	movlw	50
  3034  09D8  0021               	movlb	1	; select bank1
  3035  09D9  022C               	subwf	_ui8_BattVolt_mat^(0+128),w
  3036  09DA  1803               	btfsc	3,0
  3037  09DB  29CE               	goto	l9465
  3038  09DC  29EA               	goto	l1392
  3039  09DD                     l1388:	
  3040                           
  3041                           ;BVH2_Appl_Layer.c: 666: else {;BVH2_Appl_Layer.c: 668: if (SIBFS_UbatHandling_b.Cb60_No
      +                          rmalUbat) {
  3042  09DD  1F4C               	btfss	_SIBFS_UbatHandling_b,6
  3043  09DE  29EA               	goto	l1392
  3044                           
  3045                           ;BVH2_Appl_Layer.c: 670: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
  3046  09DF  084C               	movf	_SIBFS_UbatHandling_b,w
  3047  09E0  39F8               	andlw	-8
  3048  09E1  3801               	iorlw	1
  3049  09E2  00CC               	movwf	_SIBFS_UbatHandling_b
  3050  09E3  29CE               	goto	l9465
  3051  09E4                     l1384:	
  3052                           
  3053                           ;BVH2_Appl_Layer.c: 680: else {;BVH2_Appl_Layer.c: 681: SIBFS_UbatHandling_b.Cb57_Ubat_H
      +                          andling = 1;
  3054  09E4  15CC               	bsf	_SIBFS_UbatHandling_b,3
  3055                           
  3056                           ;BVH2_Appl_Layer.c: 684: if (ui8_ResetMatlab == 1) {
  3057  09E5  0021               	movlb	1	; select bank1
  3058  09E6  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  3059  09E7  29EA               	goto	l1392
  3060                           
  3061                           ;BVH2_Appl_Layer.c: 686: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
  3062                           
  3063                           ;BVH2_Appl_Layer.c: 687: Cb56_odPumpOff = 0;
  3064                           
  3065                           ;BVH2_Appl_Layer.c: 688: Cb56_odFixedValueSel = 0;
  3066                           
  3067                           ;BVH2_Appl_Layer.c: 689: Cb56_oUbat_Alarm_High = 0;
  3068  09E8  27F9  3188         	fcall	PL54	;call to abstracted procedure
  3069  09EA                     l1392:	
  3070                           
  3071                           ;BVH2_Appl_Layer.c: 690: };BVH2_Appl_Layer.c: 691: };BVH2_Appl_Layer.c: 694: Sb1_Logical
      +                          _Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueSel));
  3072  09EA  0023               	movlb	3	; select bank3
  3073  09EB  01CD               	clrf	_BVH2_Appl_Layer$1035^(0+384)
  3074  09EC  0021               	movlb	1	; select bank1
  3075  09ED  0842               	movf	_Cb34_odPumpOff^(0+128),w
  3076  09EE  1903               	btfsc	3,2
  3077  09EF  29F6               	goto	l9489
  3078  09F0  083F               	movf	_Cb56_odFixedValueSel^(0+128),w
  3079  09F1  1D03               	btfss	3,2
  3080  09F2  29F6               	goto	l9489
  3081  09F3  0023               	movlb	3	; select bank3
  3082  09F4  01CD               	clrf	_BVH2_Appl_Layer$1035^(0+384)
  3083  09F5  0ACD               	incf	_BVH2_Appl_Layer$1035^(0+384),f
  3084  09F6                     l9489:	
  3085  09F6  0023               	movlb	3	; select bank3
  3086  09F7  084D               	movf	_BVH2_Appl_Layer$1035^(0+384),w
  3087  09F8  00CC               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+384)
  3088                           
  3089                           ;BVH2_Appl_Layer.c: 699: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
  3090  09F9  0021               	movlb	1	; select bank1
  3091  09FA  1CB8               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  3092  09FB  2A0A               	goto	l1396
  3093                           
  3094                           ;BVH2_Appl_Layer.c: 701: if (Cb51_Counter > 80) {
  3095  09FC  3051               	movlw	81
  3096  09FD  023C               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+128),w
  3097  09FE  1C03               	skipc
  3098  09FF  2A08               	goto	l9499
  3099                           
  3100                           ;BVH2_Appl_Layer.c: 704: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
  3101  0A00  10B8               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  3102  0A01                     L18:	
  3103                           
  3104                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  3105  0A01  15B8               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  3106                           
  3107                           ;BVH2_Appl_Layer.c: 706: Cb51_oTempRedAlarm = 0;
  3108  0A02  0022               	movlb	2	; select bank2
  3109  0A03  01DB               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  3110                           
  3111                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempAlarm = 0;
  3112  0A04  01DC               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  3113                           
  3114                           ;BVH2_Appl_Layer.c: 708: Cb51_odPumpOff = 0;
  3115  0A05  01DA               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  3116                           
  3117                           ;BVH2_Appl_Layer.c: 709: Cb51_Counter = 0 ;
  3118  0A06  0021               	movlb	1	; select bank1
  3119  0A07  2A37               	goto	l9521
  3120  0A08                     l9499:	
  3121                           ;BVH2_Appl_Layer.c: 710: }
  3122                           
  3123                           
  3124                           ;BVH2_Appl_Layer.c: 711: else {;BVH2_Appl_Layer.c: 712: Cb51_Counter = Cb51_Counter + 1 
      +                          ;
  3125  0A08  0ABC               	incf	BVH2_Appl_Layer@Cb51_Counter^(0+128),f
  3126                           
  3127                           ;BVH2_Appl_Layer.c: 713: };BVH2_Appl_Layer.c: 716: }
  3128  0A09  2AA9               	goto	l9611
  3129  0A0A                     l1396:	
  3130                           
  3131                           ;BVH2_Appl_Layer.c: 717: else {;BVH2_Appl_Layer.c: 719: if (SIBFS_Temperature_Alarm_b.Cb
      +                          53_reset) {
  3132  0A0A  1D38               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  3133  0A0B  2A0F               	goto	l1400
  3134                           
  3135                           ;BVH2_Appl_Layer.c: 724: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
  3136  0A0C  1138               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  3137                           
  3138                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
  3139  0A0D  14B8               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
  3140                           
  3141                           ;BVH2_Appl_Layer.c: 728: }
  3142  0A0E  2AA9               	goto	l9611
  3143  0A0F                     l1400:	
  3144                           
  3145                           ;BVH2_Appl_Layer.c: 729: else {;BVH2_Appl_Layer.c: 731: if (SIBFS_Temperature_Alarm_b.Cb
      +                          54_greenTemp) {
  3146  0A0F  1DB8               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  3147  0A10  2A23               	goto	l1402
  3148                           
  3149                           ;BVH2_Appl_Layer.c: 735: if (ui16_mat_inpTemp < 72) {
  3150  0A11  3000               	movlw	0
  3151  0A12  0022               	movlb	2	; select bank2
  3152  0A13  0232               	subwf	(_ui16_mat_inpTemp+1)^(0+256),w
  3153  0A14  3048               	movlw	72
  3154  0A15  1903               	skipnz
  3155  0A16  0231               	subwf	_ui16_mat_inpTemp^(0+256),w
  3156  0A17  1803               	skipnc
  3157  0A18  2AA9               	goto	l9611
  3158                           
  3159                           ;BVH2_Appl_Layer.c: 738: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
  3160  0A19  0021               	movlb	1	; select bank1
  3161  0A1A  11B8               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
  3162                           
  3163                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
  3164  0A1B  1638               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  3165                           
  3166                           ;BVH2_Appl_Layer.c: 740: Cb51_oTempRedAlarm = 1;
  3167  0A1C  0022               	movlb	2	; select bank2
  3168  0A1D  01DB               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
  3169  0A1E  0ADB               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
  3170                           
  3171                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempAlarm = 1;
  3172  0A1F  01DC               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
  3173  0A20  0ADC               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
  3174                           
  3175                           ;BVH2_Appl_Layer.c: 744: Cb51_odPumpOff = 0;
  3176  0A21  01DA               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
  3177  0A22  2AA9               	goto	l9611
  3178  0A23                     l1402:	
  3179                           
  3180                           ;BVH2_Appl_Layer.c: 749: else {;BVH2_Appl_Layer.c: 751: if (SIBFS_Temperature_Alarm_b.Cb
      +                          55_redTemp) {
  3181  0A23  1E38               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  3182  0A24  2A30               	goto	l1405
  3183                           
  3184                           ;BVH2_Appl_Layer.c: 755: if (ui16_mat_inpTemp > 185) {
  3185  0A25  3000               	movlw	0
  3186  0A26  0022               	movlb	2	; select bank2
  3187  0A27  0232               	subwf	(_ui16_mat_inpTemp+1)^(0+256),w
  3188  0A28  30BA               	movlw	186
  3189  0A29  1903               	skipnz
  3190  0A2A  0231               	subwf	_ui16_mat_inpTemp^(0+256),w
  3191  0A2B  1C03               	skipc
  3192  0A2C  2AA9               	goto	l9611
  3193                           
  3194                           ;BVH2_Appl_Layer.c: 758: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
  3195  0A2D  0021               	movlb	1	; select bank1
  3196  0A2E  1238               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
  3197  0A2F  2A01               	goto	L18
  3198  0A30                     l1405:	
  3199                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
  3200                           
  3201                           
  3202                           ;BVH2_Appl_Layer.c: 768: else {;BVH2_Appl_Layer.c: 770: if (!(SIBFS_Temperature_Alarm_b.
      +                          Cb51_Temperature_Alarm)) {
  3203  0A30  1838               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  3204  0A31  2AA9               	goto	l9611
  3205                           
  3206                           ;BVH2_Appl_Layer.c: 771: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
  3207  0A32  1438               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
  3208                           
  3209                           ;BVH2_Appl_Layer.c: 775: if (ui8_ResetMatlab != 0) {
  3210  0A33  086F               	movf	_ui8_ResetMatlab^(0+128),w
  3211  0A34  1903               	btfsc	3,2
  3212  0A35  2AA9               	goto	l9611
  3213                           
  3214                           ;BVH2_Appl_Layer.c: 777: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
  3215  0A36  1538               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
  3216  0A37                     l9521:	
  3217                           
  3218                           ;BVH2_Appl_Layer.c: 778: Cb51_Counter = 0 ;
  3219  0A37  01BC               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+128)
  3220  0A38  2AA9               	goto	l9611
  3221  0A39                     l9523:	
  3222                           
  3223                           ;BVH2_Appl_Layer.c: 792: if (Cb1_StateCnt > 50) {
  3224  0A39  3000               	movlw	0
  3225  0A3A  0020               	movlb	0	; select bank0
  3226  0A3B  0241               	subwf	_Cb1_StateCnt+1,w
  3227  0A3C  3033               	movlw	51
  3228  0A3D  1903               	skipnz
  3229  0A3E  0240               	subwf	_Cb1_StateCnt,w
  3230  0A3F  1C03               	skipc
  3231  0A40  2A46               	goto	l9533
  3232                           
  3233                           ;BVH2_Appl_Layer.c: 795: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 796: (UInt8)5;
  3234                           
  3235                           ;BVH2_Appl_Layer.c: 797: Cb1_oShutoff = 0;
  3236                           
  3237                           ;BVH2_Appl_Layer.c: 798: Cb1_oCurrentAlarm = 0;
  3238  0A41  279F  3188         	fcall	PL46	;call to abstracted procedure
  3239  0A43                     l9531:	
  3240                           
  3241                           ;BVH2_Appl_Layer.c: 799: Cb1_RestartCounter = 0 ;
  3242  0A43  0021               	movlb	1	; select bank1
  3243  0A44  01CC               	clrf	_Cb1_RestartCounter^(0+128)
  3244                           
  3245                           ;BVH2_Appl_Layer.c: 800: }
  3246  0A45  2AC2               	goto	l1414
  3247  0A46                     l9533:	
  3248                           
  3249                           ;BVH2_Appl_Layer.c: 801: else {;BVH2_Appl_Layer.c: 802: Cb1_StateCnt = Cb1_StateCnt + 1 
      +                          ;
  3250  0A46  0020               	movlb	0	; select bank0
  3251  0A47  0840               	movf	_Cb1_StateCnt,w
  3252  0A48  3E01               	addlw	1
  3253  0A49  00C0               	movwf	_Cb1_StateCnt
  3254  0A4A  3000               	movlw	0
  3255  0A4B  3D41               	addwfc	_Cb1_StateCnt+1,w
  3256  0A4C  00C1               	movwf	_Cb1_StateCnt+1
  3257  0A4D  2AC2               	goto	l1414
  3258  0A4E                     l9535:	
  3259                           
  3260                           ;BVH2_Appl_Layer.c: 810: Cb1_Current_An___High_node_fcn1();
  3261  0A4E  26C2  3188         	fcall	_Cb1_Current_An___High_node_fcn1
  3262                           
  3263                           ;BVH2_Appl_Layer.c: 811: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
  3264  0A50  0E4B               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3265  0A51  3903               	andlw	3
  3266  0A52  3A03               	xorlw	3
  3267  0A53  1D03               	btfss	3,2
  3268  0A54  2A46               	goto	l9533
  3269  0A55  2AC2               	goto	l1414
  3270  0A56                     l9541:	
  3271                           
  3272                           ;BVH2_Appl_Layer.c: 820: if (Cb1_RestartCounter < 10) {
  3273  0A56  300A               	movlw	10
  3274  0A57  024C               	subwf	_Cb1_RestartCounter^(0+128),w
  3275  0A58  1803               	skipnc
  3276  0A59  2AC2               	goto	l1414
  3277  0A5A                     l9543:	
  3278                           
  3279                           ;BVH2_Appl_Layer.c: 823: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 824: (UInt8)3;
  3280  0A5A  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3281  0A5B  39F0               	andlw	-16
  3282  0A5C  3803               	iorlw	3
  3283  0A5D  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  3284                           
  3285                           ;BVH2_Appl_Layer.c: 825: Cb1_oShutoff = 0;
  3286  0A5E  01C7               	clrf	_Cb1_oShutoff^(0+128)
  3287                           
  3288                           ;BVH2_Appl_Layer.c: 826: Cb1_oCurrentAlarm = 1;
  3289  0A5F  01C8               	clrf	_Cb1_oCurrentAlarm^(0+128)
  3290  0A60  0AC8               	incf	_Cb1_oCurrentAlarm^(0+128),f
  3291  0A61                     l9549:	
  3292                           
  3293                           ;BVH2_Appl_Layer.c: 827: Cb1_StateCnt = 0 ;
  3294  0A61  0020               	movlb	0	; select bank0
  3295  0A62  01C0               	clrf	_Cb1_StateCnt
  3296  0A63  01C1               	clrf	_Cb1_StateCnt+1
  3297  0A64  2AC2               	goto	l1414
  3298  0A65                     l9551:	
  3299                           
  3300                           ;BVH2_Appl_Layer.c: 835: Cb1_Current_An___High_node_fcn1();
  3301  0A65  26C2  3188         	fcall	_Cb1_Current_An___High_node_fcn1
  3302                           
  3303                           ;BVH2_Appl_Layer.c: 838: break;
  3304  0A67  2AC2               	goto	l1414
  3305  0A68                     l9553:	
  3306                           
  3307                           ;BVH2_Appl_Layer.c: 842: if (Cb1_StateCnt > 200) {
  3308  0A68  3000               	movlw	0
  3309  0A69  0020               	movlb	0	; select bank0
  3310  0A6A  0241               	subwf	_Cb1_StateCnt+1,w
  3311  0A6B  30C9               	movlw	201
  3312  0A6C  1903               	skipnz
  3313  0A6D  0240               	subwf	_Cb1_StateCnt,w
  3314  0A6E  1C03               	skipc
  3315  0A6F  2A77               	goto	l9559
  3316                           
  3317                           ;BVH2_Appl_Layer.c: 844: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 845: (UInt8)7;
  3318  0A70  0021               	movlb	1	; select bank1
  3319  0A71  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3320  0A72  39F0               	andlw	-16
  3321  0A73  3807               	iorlw	7
  3322  0A74  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  3323                           
  3324                           ;BVH2_Appl_Layer.c: 846: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
  3325  0A75  0ACC               	incf	_Cb1_RestartCounter^(0+128),f
  3326                           
  3327                           ;BVH2_Appl_Layer.c: 847: }
  3328  0A76  2AC2               	goto	l1414
  3329  0A77                     l9559:	
  3330                           
  3331                           ;BVH2_Appl_Layer.c: 848: else {;BVH2_Appl_Layer.c: 851: if (bool_mat_currAlarm_bldc) {
  3332  0A77  0021               	movlb	1	; select bank1
  3333  0A78  085C               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  3334  0A79  1903               	btfsc	3,2
  3335  0A7A  2A46               	goto	l9533
  3336  0A7B                     l9561:	
  3337                           
  3338                           ;BVH2_Appl_Layer.c: 853: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 854: (UInt8)1;
  3339  0A7B  0021               	movlb	1	; select bank1
  3340  0A7C  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3341  0A7D  39F0               	andlw	-16
  3342  0A7E  3801               	iorlw	1
  3343  0A7F  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  3344                           
  3345                           ;BVH2_Appl_Layer.c: 855: Cb1_StateCnt = 0 ;
  3346  0A80  0020               	movlb	0	; select bank0
  3347  0A81  01C0               	clrf	_Cb1_StateCnt
  3348  0A82  01C1               	clrf	_Cb1_StateCnt+1
  3349                           
  3350                           ;BVH2_Appl_Layer.c: 856: Cb1_oShutoff = 1;
  3351  0A83  0021               	movlb	1	; select bank1
  3352  0A84  01C7               	clrf	_Cb1_oShutoff^(0+128)
  3353  0A85  0AC7               	incf	_Cb1_oShutoff^(0+128),f
  3354                           
  3355                           ;BVH2_Appl_Layer.c: 857: Cb1_oCurrentAlarm = 1;
  3356  0A86  01C8               	clrf	_Cb1_oCurrentAlarm^(0+128)
  3357  0A87  0AC8               	incf	_Cb1_oCurrentAlarm^(0+128),f
  3358                           
  3359                           ;BVH2_Appl_Layer.c: 858: }
  3360  0A88  2AC2               	goto	l1414
  3361  0A89                     l9571:	
  3362                           
  3363                           ;BVH2_Appl_Layer.c: 872: if (!(bool_mat_currAlarm_bldc)) {
  3364  0A89  085C               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  3365  0A8A  1903               	btfsc	3,2
  3366  0A8B  2A5A               	goto	l9543
  3367                           
  3368                           ;BVH2_Appl_Layer.c: 880: else {;BVH2_Appl_Layer.c: 881: if (Cb1_StateCnt > 1) {
  3369  0A8C  3000               	movlw	0
  3370  0A8D  0020               	movlb	0	; select bank0
  3371  0A8E  0241               	subwf	_Cb1_StateCnt+1,w
  3372  0A8F  3002               	movlw	2
  3373  0A90  1903               	skipnz
  3374  0A91  0240               	subwf	_Cb1_StateCnt,w
  3375  0A92  1803               	btfsc	3,0
  3376  0A93  2A7B               	goto	l9561
  3377  0A94  2A46               	goto	l9533
  3378  0A95                     l9593:	
  3379                           
  3380                           ;BVH2_Appl_Layer.c: 902: if (!(bool_mat_currAlarm_bldc)) {
  3381  0A95  085C               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  3382  0A96  1D03               	btfss	3,2
  3383  0A97  2A46               	goto	l9533
  3384                           
  3385                           ;BVH2_Appl_Layer.c: 905: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
  3386  0A98  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3387  0A99  39F0               	andlw	-16
  3388  0A9A  3804               	iorlw	4
  3389  0A9B  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  3390  0A9C  2A61               	goto	l9549
  3391  0A9D                     l1433:	
  3392                           ;BVH2_Appl_Layer.c: 914: };BVH2_Appl_Layer.c: 915: default: {
  3393                           
  3394                           
  3395                           ;BVH2_Appl_Layer.c: 917: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
  3396  0A9D  1B4B               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
  3397  0A9E  2AC2               	goto	l1414
  3398                           
  3399                           ;BVH2_Appl_Layer.c: 918: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
  3400  0A9F  174B               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
  3401                           
  3402                           ;BVH2_Appl_Layer.c: 922: if (ui8_ResetMatlab != 0) {
  3403  0AA0  086F               	movf	_ui8_ResetMatlab^(0+128),w
  3404  0AA1  1903               	btfsc	3,2
  3405  0AA2  2AC2               	goto	l1414
  3406                           
  3407                           ;BVH2_Appl_Layer.c: 924: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int);BVH2_Appl_Layer.c: 925: (UInt8)6;
  3408  0AA3  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3409  0AA4  39F0               	andlw	-16
  3410  0AA5  3806               	iorlw	6
  3411                           
  3412                           ;BVH2_Appl_Layer.c: 926: Cb1_StateCnt = 0 ;
  3413  0AA6  27B8  3188         	fcall	PL80	;call to abstracted procedure
  3414  0AA8  2A43               	goto	l9531
  3415  0AA9                     l9611:	
  3416  0AA9  0021               	movlb	1	; select bank1
  3417  0AAA  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  3418  0AAB  390F               	andlw	15
  3419                           
  3420                           ; Switch size 1, requested type "space"
  3421                           ; Number of cases is 7, Range of values is 1 to 7
  3422                           ; switch strategies available:
  3423                           ; Name         Instructions Cycles
  3424                           ; simple_byte           22    12 (average)
  3425                           ; direct_byte           23     9 (fixed)
  3426                           ; jumptable            263     9 (fixed)
  3427                           ;	Chosen strategy is simple_byte
  3428  0AAC  3A01               	xorlw	1	; case 1
  3429  0AAD  1903               	skipnz
  3430  0AAE  2A95               	goto	l9593
  3431  0AAF  3A03               	xorlw	3	; case 2
  3432  0AB0  1903               	skipnz
  3433  0AB1  2A89               	goto	l9571
  3434  0AB2  3A01               	xorlw	1	; case 3
  3435  0AB3  1903               	skipnz
  3436  0AB4  2A4E               	goto	l9535
  3437  0AB5  3A07               	xorlw	7	; case 4
  3438  0AB6  1903               	skipnz
  3439  0AB7  2A68               	goto	l9553
  3440  0AB8  3A01               	xorlw	1	; case 5
  3441  0AB9  1903               	skipnz
  3442  0ABA  2A65               	goto	l9551
  3443  0ABB  3A03               	xorlw	3	; case 6
  3444  0ABC  1903               	skipnz
  3445  0ABD  2A39               	goto	l9523
  3446  0ABE  3A01               	xorlw	1	; case 7
  3447  0ABF  1903               	skipnz
  3448  0AC0  2A56               	goto	l9541
  3449  0AC1  2A9D               	goto	l1433
  3450  0AC2                     l1414:	
  3451                           
  3452                           ;BVH2_Appl_Layer.c: 934: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||;BVH2_Appl_Layer.c: 935: Cb1_oShutoff || Cb44_oShutoff;
  3453  0AC2  0023               	movlb	3	; select bank3
  3454  0AC3  01CE               	clrf	_BVH2_Appl_Layer$1036^(0+384)
  3455  0AC4  0ACE               	incf	_BVH2_Appl_Layer$1036^(0+384),f
  3456  0AC5  084C               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+384),w
  3457  0AC6  1D03               	btfss	3,2
  3458  0AC7  2AD9               	goto	l9625
  3459  0AC8  0021               	movlb	1	; select bank1
  3460  0AC9  083E               	movf	_Cb56_odPumpOff^(0+128),w
  3461  0ACA  1D03               	btfss	3,2
  3462  0ACB  2AD9               	goto	l9625
  3463  0ACC  0022               	movlb	2	; select bank2
  3464  0ACD  085A               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
  3465  0ACE  1D03               	btfss	3,2
  3466  0ACF  2AD9               	goto	l9625
  3467  0AD0  0021               	movlb	1	; select bank1
  3468  0AD1  0847               	movf	_Cb1_oShutoff^(0+128),w
  3469  0AD2  1D03               	btfss	3,2
  3470  0AD3  2AD9               	goto	l9625
  3471  0AD4  0841               	movf	_Cb44_oShutoff^(0+128),w
  3472  0AD5  1D03               	btfss	3,2
  3473  0AD6  2AD9               	goto	l9625
  3474  0AD7  0023               	movlb	3	; select bank3
  3475  0AD8  01CE               	clrf	_BVH2_Appl_Layer$1036^(0+384)
  3476  0AD9                     l9625:	
  3477  0AD9  0023               	movlb	3	; select bank3
  3478  0ADA  084E               	movf	_BVH2_Appl_Layer$1036^(0+384),w
  3479  0ADB  00DD               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+384)
  3480                           
  3481                           ;BVH2_Appl_Layer.c: 938: Cb24_Reset = ui8_ResetMatlab != 0 ;
  3482  0ADC  0021               	movlb	1	; select bank1
  3483  0ADD  086F               	movf	_ui8_ResetMatlab^(0+128),w
  3484  0ADE  1903               	btfsc	3,2
  3485  0ADF  2AE2               	goto	u7720
  3486  0AE0  3001               	movlw	1
  3487  0AE1  2AE3               	goto	u7730
  3488  0AE2                     u7720:	
  3489  0AE2  3000               	movlw	0
  3490  0AE3                     u7730:	
  3491  0AE3  0023               	movlb	3	; select bank3
  3492  0AE4  00D7               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+384)
  3493                           
  3494                           ;BVH2_Appl_Layer.c: 943: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
  3495  0AE5  0021               	movlb	1	; select bank1
  3496  0AE6  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  3497  0AE7  2BE2               	goto	l1438
  3498                           
  3499                           ;BVH2_Appl_Layer.c: 949: if (Sb1_Logical_Operator1 || Cb24_Reset) {
  3500  0AE8  0023               	movlb	3	; select bank3
  3501  0AE9  085D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+384),w
  3502  0AEA  1D03               	btfss	3,2
  3503  0AEB  2AF7               	goto	l9651
  3504  0AEC  0857               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+384),w
  3505  0AED  1D03               	btfss	3,2
  3506  0AEE  2AF7               	goto	l9651
  3507  0AEF  2BCB               	goto	l9769
  3508  0AF0                     l9635:	
  3509                           
  3510                           ;BVH2_Appl_Layer.c: 954: Cb24_StateCnt = 0 ;
  3511  0AF0  0020               	movlb	0	; select bank0
  3512  0AF1  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  3513  0AF2  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3514  0AF3                     l9637:	
  3515                           
  3516                           ;BVH2_Appl_Layer.c: 955: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  3517  0AF3  30F8               	movlw	-8
  3518  0AF4  0021               	movlb	1	; select bank1
  3519  0AF5  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  3520                           
  3521                           ;BVH2_Appl_Layer.c: 956: break;
  3522  0AF6  2B0D               	goto	l1444
  3523  0AF7                     l9651:	
  3524  0AF7  0021               	movlb	1	; select bank1
  3525  0AF8  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3526  0AF9  3907               	andlw	7
  3527                           
  3528                           ; Switch size 1, requested type "space"
  3529                           ; Number of cases is 6, Range of values is 1 to 6
  3530                           ; switch strategies available:
  3531                           ; Name         Instructions Cycles
  3532                           ; simple_byte           19    10 (average)
  3533                           ; direct_byte           21     9 (fixed)
  3534                           ; jumptable            263     9 (fixed)
  3535                           ;	Chosen strategy is simple_byte
  3536  0AFA  3A01               	xorlw	1	; case 1
  3537  0AFB  1903               	skipnz
  3538  0AFC  2AF3               	goto	l9637
  3539  0AFD  3A03               	xorlw	3	; case 2
  3540  0AFE  1903               	skipnz
  3541  0AFF  2AF3               	goto	l9637
  3542  0B00  3A01               	xorlw	1	; case 3
  3543  0B01  1903               	skipnz
  3544  0B02  2AF0               	goto	l9635
  3545  0B03  3A07               	xorlw	7	; case 4
  3546  0B04  1903               	skipnz
  3547  0B05  2AF3               	goto	l9637
  3548  0B06  3A01               	xorlw	1	; case 5
  3549  0B07  1903               	skipnz
  3550  0B08  2AF3               	goto	l9637
  3551  0B09  3A03               	xorlw	3	; case 6
  3552  0B0A  1903               	skipnz
  3553  0B0B  2AF3               	goto	l9637
  3554  0B0C  2B0D               	goto	l1444
  3555  0B0D                     l1444:	
  3556                           
  3557                           ;BVH2_Appl_Layer.c: 979: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  3558  0B0D  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  3559  0B0E  2BFF               	goto	L29
  3560  0B0F                     l9655:	
  3561                           ;BVH2_Appl_Layer.c: 984: }
  3562                           
  3563                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  3564                           
  3565                           
  3566                           ;BVH2_Appl_Layer.c: 990: if (Cb24_StateCnt) {
  3567  0B0F  0020               	movlb	0	; select bank0
  3568  0B10  083C               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3569  0B11  043D               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3570  0B12  1903               	btfsc	3,2
  3571  0B13  2B63               	goto	L20
  3572                           
  3573                           ;BVH2_Appl_Layer.c: 994: Cb24_StateCnt = 0 ;
  3574  0B14  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  3575  0B15  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3576  0B16                     l9659:	
  3577                           
  3578                           ;BVH2_Appl_Layer.c: 995: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int);BVH2_Appl_Layer.c: 996: (UInt8)2;
  3579  0B16  0021               	movlb	1	; select bank1
  3580  0B17  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3581  0B18  39F8               	andlw	-8
  3582  0B19  3802               	iorlw	2
  3583  0B1A  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  3584                           
  3585                           ;BVH2_Appl_Layer.c: 997: }
  3586  0B1B  2C05               	goto	l9791
  3587  0B1C                     l9663:	
  3588                           ;BVH2_Appl_Layer.c: 998: else {;BVH2_Appl_Layer.c: 999: Cb24_StateCnt = Cb24_StateCnt + 
      +                          1 ;
  3589                           
  3590                           
  3591                           ;BVH2_Appl_Layer.c: 1009: if (Cb24_StateCnt > 1000) {
  3592  0B1C  3003               	movlw	3
  3593  0B1D  0020               	movlb	0	; select bank0
  3594  0B1E  023D               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3595  0B1F  30E9               	movlw	233
  3596  0B20  1903               	skipnz
  3597  0B21  023C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3598  0B22  1C03               	skipc
  3599  0B23  2B28               	goto	l9675
  3600                           
  3601                           ;BVH2_Appl_Layer.c: 1012: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1013: (UInt8)5;
  3602                           
  3603                           ;BVH2_Appl_Layer.c: 1014: Cb24_StateCnt = 0 ;
  3604                           
  3605                           ;BVH2_Appl_Layer.c: 1015: Cb24_BadCnt = 0 ;
  3606                           
  3607                           ;BVH2_Appl_Layer.c: 1016: Cb24_oMotorStalled = 0;
  3608                           
  3609                           ;BVH2_Appl_Layer.c: 1019: Cb24_oStalledAlarm = 0;
  3610  0B24  277A  3188         	fcall	PL30	;call to abstracted procedure
  3611  0B26  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3612                           
  3613                           ;BVH2_Appl_Layer.c: 1020: }
  3614  0B27  2C05               	goto	l9791
  3615  0B28                     l9675:	
  3616                           
  3617                           ;BVH2_Appl_Layer.c: 1021: else {;BVH2_Appl_Layer.c: 1024: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  3618  0B28  3000               	movlw	0
  3619  0B29  0243               	subwf	_ui16_Speed_mat+1,w
  3620  0B2A  3005               	movlw	5
  3621  0B2B  1903               	skipnz
  3622  0B2C  0242               	subwf	_ui16_Speed_mat,w
  3623  0B2D  1C03               	skipc
  3624  0B2E  2B36               	goto	l9679
  3625  0B2F  3001               	movlw	1
  3626  0B30  0243               	subwf	_ui16_Speed_mat+1,w
  3627  0B31  302D               	movlw	45
  3628  0B32  1903               	skipnz
  3629  0B33  0242               	subwf	_ui16_Speed_mat,w
  3630  0B34  1C03               	skipc
  3631  0B35  2B63               	goto	L20
  3632  0B36                     l9679:	
  3633                           
  3634                           ;BVH2_Appl_Layer.c: 1027: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1028: (UInt8)1;
  3635  0B36  0021               	movlb	1	; select bank1
  3636  0B37  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3637  0B38  39F8               	andlw	-8
  3638  0B39  3801               	iorlw	1
  3639  0B3A  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  3640                           
  3641                           ;BVH2_Appl_Layer.c: 1029: Cb24_oStalledAlarm = 0;
  3642  0B3B  0022               	movlb	2	; select bank2
  3643  0B3C  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3644                           
  3645                           ;BVH2_Appl_Layer.c: 1030: Cb24_StateCnt = 0 ;
  3646  0B3D  0020               	movlb	0	; select bank0
  3647  0B3E  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  3648  0B3F  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3649                           
  3650                           ;BVH2_Appl_Layer.c: 1031: }
  3651  0B40  2C05               	goto	l9791
  3652  0B41                     l9687:	
  3653                           
  3654                           ;BVH2_Appl_Layer.c: 1044: if (Cb24_BadCnt > 100) {
  3655  0B41  3000               	movlw	0
  3656  0B42  0022               	movlb	2	; select bank2
  3657  0B43  0224               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256),w
  3658  0B44  3065               	movlw	101
  3659  0B45  1903               	skipnz
  3660  0B46  0223               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256),w
  3661  0B47  1C03               	skipc
  3662  0B48  2B4E               	goto	l9697
  3663                           
  3664                           ;BVH2_Appl_Layer.c: 1047: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1048: (UInt8)4;
  3665                           
  3666                           ;BVH2_Appl_Layer.c: 1049: Cb24_StateCnt = 0 ;
  3667                           
  3668                           ;BVH2_Appl_Layer.c: 1050: Cb24_oMotorStalled = 1;
  3669                           
  3670                           ;BVH2_Appl_Layer.c: 1051: Cb24_oStalledAlarm = 1;
  3671  0B49  2789  3188         	fcall	PL32	;call to abstracted procedure
  3672  0B4B  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3673  0B4C  0ADD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  3674                           
  3675                           ;BVH2_Appl_Layer.c: 1052: }
  3676  0B4D  2C05               	goto	l9791
  3677  0B4E                     l9697:	
  3678                           
  3679                           ;BVH2_Appl_Layer.c: 1053: else {;BVH2_Appl_Layer.c: 1056: if ((ui16_Speed_mat >= 5) && (
      +                          ui16_Speed_mat <= 300)) {
  3680  0B4E  27B4  3188         	fcall	PL76	;call to abstracted procedure
  3681  0B50  1903               	skipnz
  3682  0B51  0242               	subwf	_ui16_Speed_mat,w
  3683  0B52  1C03               	skipc
  3684  0B53  2B5B               	goto	l9703
  3685  0B54  3001               	movlw	1
  3686  0B55  0243               	subwf	_ui16_Speed_mat+1,w
  3687  0B56  302D               	movlw	45
  3688  0B57  1903               	skipnz
  3689  0B58  0242               	subwf	_ui16_Speed_mat,w
  3690  0B59  1C03               	btfss	3,0
  3691  0B5A  2B16               	goto	l9659
  3692  0B5B                     l9703:	
  3693                           
  3694                           ;BVH2_Appl_Layer.c: 1062: else {;BVH2_Appl_Layer.c: 1063: Cb24_BadCnt = Cb24_BadCnt + 1 
      +                          ;
  3695  0B5B  0022               	movlb	2	; select bank2
  3696  0B5C  0823               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256),w
  3697  0B5D  3E01               	addlw	1
  3698  0B5E  00A3               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256)
  3699  0B5F  3000               	movlw	0
  3700  0B60  3D24               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256),w
  3701  0B61  00A4               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256)
  3702                           
  3703                           ;BVH2_Appl_Layer.c: 1064: Cb24_StateCnt = Cb24_StateCnt + 1 ;
  3704  0B62  0020               	movlb	0	; select bank0
  3705  0B63                     L20:	
  3706  0B63  083C               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3707  0B64  3E01               	addlw	1
  3708  0B65  00BC               	movwf	BVH2_Appl_Layer@Cb24_StateCnt
  3709  0B66  3000               	movlw	0
  3710  0B67  3D3D               	addwfc	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3711  0B68  00BD               	movwf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3712  0B69  2C05               	goto	l9791
  3713  0B6A                     l9707:	
  3714                           
  3715                           ;BVH2_Appl_Layer.c: 1089: if (Cb24_StateCnt > 10) {
  3716  0B6A  3000               	movlw	0
  3717  0B6B  0020               	movlb	0	; select bank0
  3718  0B6C  023D               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3719  0B6D  300B               	movlw	11
  3720  0B6E  1903               	skipnz
  3721  0B6F  023C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3722  0B70  1C03               	skipc
  3723  0B71  2BAA               	goto	l9749
  3724                           
  3725                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_RestartCounter == 10) {
  3726  0B72  300A               	movlw	10
  3727  0B73  0021               	movlb	1	; select bank1
  3728  0B74  063D               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),w
  3729  0B75  1D03               	btfss	3,2
  3730  0B76  2B83               	goto	l9721
  3731                           
  3732                           ;BVH2_Appl_Layer.c: 1092: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
  3733  0B77  30F8               	movlw	-8
  3734  0B78  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  3735                           
  3736                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
  3737  0B79  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  3738                           
  3739                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb33_Stop = 1;
  3740  0B7A  1421               	bsf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  3741                           
  3742                           ;BVH2_Appl_Layer.c: 1095: Cb24_oStalledAlarm = 1;
  3743  0B7B  0022               	movlb	2	; select bank2
  3744  0B7C  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3745  0B7D  0ADD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  3746                           
  3747                           ;BVH2_Appl_Layer.c: 1096: Cb24_oMotorStalled = 1;
  3748  0B7E  0021               	movlb	1	; select bank1
  3749  0B7F  3018               	movlw	24
  3750  0B80  01B4               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  3751  0B81  0AB4               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  3752  0B82  2BA2               	goto	L22
  3753  0B83                     l9721:	
  3754                           ;BVH2_Appl_Layer.c: 1098: }
  3755                           
  3756                           ;BVH2_Appl_Layer.c: 1097: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  3757                           
  3758                           
  3759                           ;BVH2_Appl_Layer.c: 1099: else {;BVH2_Appl_Layer.c: 1102: if ((ui16_Speed_mat < 5) || (u
      +                          i16_Speed_mat > 300)) {
  3760  0B83  27B4  3188         	fcall	PL76	;call to abstracted procedure
  3761  0B85  1903               	skipnz
  3762  0B86  0242               	subwf	_ui16_Speed_mat,w
  3763  0B87  1C03               	skipc
  3764  0B88  2B90               	goto	l9725
  3765  0B89  3001               	movlw	1
  3766  0B8A  0243               	subwf	_ui16_Speed_mat+1,w
  3767  0B8B  302D               	movlw	45
  3768  0B8C  1903               	skipnz
  3769  0B8D  0242               	subwf	_ui16_Speed_mat,w
  3770  0B8E  1C03               	skipc
  3771  0B8F  2B96               	goto	l9735
  3772  0B90                     l9725:	
  3773                           
  3774                           ;BVH2_Appl_Layer.c: 1105: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1106: (UInt8)4;
  3775                           
  3776                           ;BVH2_Appl_Layer.c: 1107: Cb24_StateCnt = 0 ;
  3777                           
  3778                           ;BVH2_Appl_Layer.c: 1108: Cb24_oMotorStalled = 1;
  3779                           
  3780                           ;BVH2_Appl_Layer.c: 1109: Cb24_oStalledAlarm = 1;
  3781  0B90  2789  3188         	fcall	PL32	;call to abstracted procedure
  3782  0B92  3018               	movlw	24
  3783  0B93  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3784  0B94  0ADD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  3785                           
  3786                           ;BVH2_Appl_Layer.c: 1110: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  3787  0B95  2BA1               	goto	L30
  3788  0B96                     l9735:	
  3789                           ;BVH2_Appl_Layer.c: 1111: }
  3790                           
  3791                           
  3792                           ;BVH2_Appl_Layer.c: 1112: else {;BVH2_Appl_Layer.c: 1113: if (Cb24_StateCnt > 200) {
  3793  0B96  3000               	movlw	0
  3794  0B97  023D               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3795  0B98  30C9               	movlw	201
  3796  0B99  1903               	skipnz
  3797  0B9A  023C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3798  0B9B  1C03               	skipc
  3799  0B9C  2BA4               	goto	l9747
  3800                           
  3801                           ;BVH2_Appl_Layer.c: 1116: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1117: (UInt8)5;
  3802                           
  3803                           ;BVH2_Appl_Layer.c: 1118: Cb24_StateCnt = 0 ;
  3804                           
  3805                           ;BVH2_Appl_Layer.c: 1119: Cb24_BadCnt = 0 ;
  3806                           
  3807                           ;BVH2_Appl_Layer.c: 1120: Cb24_oMotorStalled = 0;
  3808                           
  3809                           ;BVH2_Appl_Layer.c: 1123: Cb24_oStalledAlarm = 0;
  3810  0B9D  277A  3188         	fcall	PL30	;call to abstracted procedure
  3811  0B9F  3018               	movlw	24
  3812  0BA0  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3813  0BA1                     L30:	
  3814                           
  3815                           ;BVH2_Appl_Layer.c: 1124: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
  3816  0BA1  0021               	movlb	1	; select bank1
  3817  0BA2                     L22:	
  3818  0BA2  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  3819                           
  3820                           ;BVH2_Appl_Layer.c: 1125: }
  3821  0BA3  2BAD               	goto	l1479
  3822  0BA4                     l9747:	
  3823                           
  3824                           ;BVH2_Appl_Layer.c: 1126: else {;BVH2_Appl_Layer.c: 1127: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 1 ;
  3825  0BA4  0021               	movlb	1	; select bank1
  3826  0BA5  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3827  0BA6  39E7               	andlw	-25
  3828  0BA7  3808               	iorlw	8
  3829  0BA8  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  3830  0BA9  2BAD               	goto	l1479
  3831  0BAA                     l9749:	
  3832                           
  3833                           ;BVH2_Appl_Layer.c: 1132: else {;BVH2_Appl_Layer.c: 1133: SIBFS_Motor_Stalled_b.Cb24_glf
      +                          lag = 0 ;
  3834  0BAA  30E7               	movlw	-25
  3835  0BAB  0021               	movlb	1	; select bank1
  3836  0BAC  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
  3837  0BAD                     l1479:	
  3838                           
  3839                           ;BVH2_Appl_Layer.c: 1134: };BVH2_Appl_Layer.c: 1135: if (SIBFS_Motor_Stalled_b.Cb24_glfl
      +                          ag <= 2) {
  3840  0BAD  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3841  0BAE  27AD  3188         	fcall	PL58	;call to abstracted procedure
  3842  0BB0  1D03               	btfss	3,2
  3843  0BB1  2B63               	goto	L20
  3844  0BB2  2C05               	goto	l9791
  3845  0BB3                     l9753:	
  3846                           
  3847                           ;BVH2_Appl_Layer.c: 1146: if (Cb24_StateCnt > 200) {
  3848  0BB3  3000               	movlw	0
  3849  0BB4  0020               	movlb	0	; select bank0
  3850  0BB5  023D               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
  3851  0BB6  30C9               	movlw	201
  3852  0BB7  1903               	skipnz
  3853  0BB8  023C               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
  3854  0BB9  1C03               	skipc
  3855  0BBA  2B63               	goto	L20
  3856                           
  3857                           ;BVH2_Appl_Layer.c: 1150: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int);BVH2_Appl_Layer.c: 1151: (UInt8)6;
  3858  0BBB  0021               	movlb	1	; select bank1
  3859  0BBC  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3860  0BBD  39F8               	andlw	-8
  3861  0BBE  3806               	iorlw	6
  3862  0BBF  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  3863                           
  3864                           ;BVH2_Appl_Layer.c: 1152: Cb24_StateCnt = 0 ;
  3865  0BC0  0020               	movlb	0	; select bank0
  3866  0BC1  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  3867  0BC2  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3868                           
  3869                           ;BVH2_Appl_Layer.c: 1153: Cb24_oMotorStalled = 0;
  3870  0BC3  0021               	movlb	1	; select bank1
  3871  0BC4  01B4               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  3872                           
  3873                           ;BVH2_Appl_Layer.c: 1154: Cb24_oStalledAlarm = 1;
  3874  0BC5  0022               	movlb	2	; select bank2
  3875  0BC6  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3876  0BC7  0ADD               	incf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),f
  3877                           
  3878                           ;BVH2_Appl_Layer.c: 1155: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
  3879  0BC8  0021               	movlb	1	; select bank1
  3880  0BC9  0ABD               	incf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128),f
  3881                           
  3882                           ;BVH2_Appl_Layer.c: 1156: }
  3883  0BCA  2C05               	goto	l9791
  3884  0BCB                     l9769:	
  3885  0BCB  0021               	movlb	1	; select bank1
  3886  0BCC  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3887  0BCD  3907               	andlw	7
  3888                           
  3889                           ; Switch size 1, requested type "space"
  3890                           ; Number of cases is 6, Range of values is 1 to 6
  3891                           ; switch strategies available:
  3892                           ; Name         Instructions Cycles
  3893                           ; simple_byte           19    10 (average)
  3894                           ; direct_byte           21     9 (fixed)
  3895                           ; jumptable            263     9 (fixed)
  3896                           ;	Chosen strategy is simple_byte
  3897  0BCE  3A01               	xorlw	1	; case 1
  3898  0BCF  1903               	skipnz
  3899  0BD0  2B41               	goto	l9687
  3900  0BD1  3A03               	xorlw	3	; case 2
  3901  0BD2  1903               	skipnz
  3902  0BD3  2B1C               	goto	l9663
  3903  0BD4  3A01               	xorlw	1	; case 3
  3904  0BD5  1903               	skipnz
  3905  0BD6  2B0F               	goto	l9655
  3906  0BD7  3A07               	xorlw	7	; case 4
  3907  0BD8  1903               	skipnz
  3908  0BD9  2BB3               	goto	l9753
  3909  0BDA  3A01               	xorlw	1	; case 5
  3910  0BDB  1903               	skipnz
  3911  0BDC  2B16               	goto	l9659
  3912  0BDD  3A03               	xorlw	3	; case 6
  3913  0BDE  1903               	skipnz
  3914  0BDF  2B6A               	goto	l9707
  3915  0BE0  2C05               	goto	l9791
  3916                           
  3917                           ;BVH2_Appl_Layer.c: 1166: };BVH2_Appl_Layer.c: 1169: }
  3918  0BE1  2C05               	goto	l9791
  3919  0BE2                     l1438:	
  3920                           
  3921                           ;BVH2_Appl_Layer.c: 1170: else {;BVH2_Appl_Layer.c: 1172: if (SIBFS_Motor_Stalled_b.Cb32
      +                          _default) {
  3922  0BE2  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  3923  0BE3  2BF6               	goto	l1485
  3924                           
  3925                           ;BVH2_Appl_Layer.c: 1177: if (!(Sb1_Logical_Operator1)) {
  3926  0BE4  0023               	movlb	3	; select bank3
  3927  0BE5  085D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+384),w
  3928  0BE6  1D03               	btfss	3,2
  3929  0BE7  2C05               	goto	l9791
  3930                           
  3931                           ;BVH2_Appl_Layer.c: 1180: SIBFS_Motor_Stalled_b.Cb32_default = 0;
  3932  0BE8  0021               	movlb	1	; select bank1
  3933  0BE9  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  3934                           
  3935                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
  3936  0BEA  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
  3937                           
  3938                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
  3939  0BEB  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  3940  0BEC  39F8               	andlw	-8
  3941  0BED  3803               	iorlw	3
  3942  0BEE  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  3943                           
  3944                           ;BVH2_Appl_Layer.c: 1183: Cb24_StateCnt = 0 ;
  3945  0BEF  0020               	movlb	0	; select bank0
  3946  0BF0  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  3947  0BF1  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  3948                           
  3949                           ;BVH2_Appl_Layer.c: 1184: Cb24_BadCnt = 0 ;
  3950  0BF2  0022               	movlb	2	; select bank2
  3951  0BF3  01A3               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256)
  3952  0BF4  01A4               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256)
  3953  0BF5  2C05               	goto	l9791
  3954  0BF6                     l1485:	
  3955                           
  3956                           ;BVH2_Appl_Layer.c: 1189: else {;BVH2_Appl_Layer.c: 1191: if (!(SIBFS_Motor_Stalled_b.Cb
      +                          33_Stop)) {
  3957  0BF6  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
  3958                           
  3959                           ;BVH2_Appl_Layer.c: 1193: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
  3960  0BF7  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
  3961  0BF8  2C05               	goto	l9791
  3962                           
  3963                           ;BVH2_Appl_Layer.c: 1194: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
  3964  0BF9  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
  3965                           
  3966                           ;BVH2_Appl_Layer.c: 1197: if (Cb24_Reset) {
  3967  0BFA  0023               	movlb	3	; select bank3
  3968  0BFB  0857               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+384),w
  3969  0BFC  1903               	btfsc	3,2
  3970  0BFD  2C05               	goto	l9791
  3971                           
  3972                           ;BVH2_Appl_Layer.c: 1199: SIBFS_Motor_Stalled_b.Cb32_default = 1;
  3973  0BFE  0021               	movlb	1	; select bank1
  3974  0BFF                     L29:	
  3975  0BFF  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
  3976                           
  3977                           ;BVH2_Appl_Layer.c: 981: Cb24_oMotorStalled = 0;
  3978  0C00  01B4               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  3979                           
  3980                           ;BVH2_Appl_Layer.c: 982: Cb24_oStalledAlarm = 0;
  3981  0C01  0022               	movlb	2	; select bank2
  3982  0C02  01DD               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
  3983                           
  3984                           ;BVH2_Appl_Layer.c: 983: Cb24_RestartCounter = 0 ;
  3985  0C03  0021               	movlb	1	; select bank1
  3986  0C04  01BD               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+128)
  3987  0C05                     l9791:	
  3988                           
  3989                           ;BVH2_Appl_Layer.c: 1213: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
  3990  0C05  0023               	movlb	3	; select bank3
  3991  0C06  01CF               	clrf	_BVH2_Appl_Layer$1037^(0+384)
  3992  0C07  0ACF               	incf	_BVH2_Appl_Layer$1037^(0+384),f
  3993  0C08  0021               	movlb	1	; select bank1
  3994  0C09  0843               	movf	_Cb34_odFixedValueSel^(0+128),w
  3995  0C0A  1D03               	btfss	3,2
  3996  0C0B  2C11               	goto	l9799
  3997  0C0C  083F               	movf	_Cb56_odFixedValueSel^(0+128),w
  3998  0C0D  1D03               	btfss	3,2
  3999  0C0E  2C11               	goto	l9799
  4000  0C0F  0023               	movlb	3	; select bank3
  4001  0C10  01CF               	clrf	_BVH2_Appl_Layer$1037^(0+384)
  4002  0C11                     l9799:	
  4003  0C11  0023               	movlb	3	; select bank3
  4004  0C12  084F               	movf	_BVH2_Appl_Layer$1037^(0+384),w
  4005  0C13  00D9               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+384)
  4006                           
  4007                           ;BVH2_Appl_Layer.c: 1217: if (bool_start_demand_mat) {
  4008  0C14  0021               	movlb	1	; select bank1
  4009  0C15  086E               	movf	_bool_start_demand_mat^(0+128),w
  4010  0C16  1903               	btfsc	3,2
  4011  0C17  2C1F               	goto	l9805
  4012                           
  4013                           ;BVH2_Appl_Layer.c: 1218: Sb2_Switch5 = ui8_fixed_start_speed_mat;
  4014  0C18  0022               	movlb	2	; select bank2
  4015  0C19  0844               	movf	(_ui8_fixed_start_speed_mat+1)^(0+256),w
  4016  0C1A  0023               	movlb	3	; select bank3
  4017  0C1B  00D6               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384)
  4018  0C1C  0022               	movlb	2	; select bank2
  4019  0C1D  0843               	movf	_ui8_fixed_start_speed_mat^(0+256),w
  4020  0C1E  2C3A               	goto	L23
  4021  0C1F                     l9805:	
  4022                           ;BVH2_Appl_Layer.c: 1219: }
  4023                           
  4024                           
  4025                           ;BVH2_Appl_Layer.c: 1220: else {;BVH2_Appl_Layer.c: 1223: if (Cb34_odFixedLowValueSel) {
  4026  0C1F  0844               	movf	_Cb34_odFixedLowValueSel^(0+128),w
  4027  0C20  1903               	btfsc	3,2
  4028  0C21  2C29               	goto	l9809
  4029                           
  4030                           ;BVH2_Appl_Layer.c: 1224: Sb2_Switch5 = ui16_Speed_demand_mat_min;
  4031  0C22  0022               	movlb	2	; select bank2
  4032  0C23  082A               	movf	(_ui16_Speed_demand_mat_min+1)^(0+256),w
  4033  0C24  0023               	movlb	3	; select bank3
  4034  0C25  00D6               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384)
  4035  0C26  0022               	movlb	2	; select bank2
  4036  0C27  0829               	movf	_ui16_Speed_demand_mat_min^(0+256),w
  4037  0C28  2C3A               	goto	L23
  4038  0C29                     l9809:	
  4039                           ;BVH2_Appl_Layer.c: 1225: }
  4040                           
  4041                           
  4042                           ;BVH2_Appl_Layer.c: 1226: else {;BVH2_Appl_Layer.c: 1229: if (Sb1_Logical_Operator5) {
  4043  0C29  0023               	movlb	3	; select bank3
  4044  0C2A  0859               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+384),w
  4045  0C2B  1903               	btfsc	3,2
  4046  0C2C  2C34               	goto	l9813
  4047                           
  4048                           ;BVH2_Appl_Layer.c: 1230: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
  4049  0C2D  0022               	movlb	2	; select bank2
  4050  0C2E  082C               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+256),w
  4051  0C2F  0023               	movlb	3	; select bank3
  4052  0C30  00D6               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384)
  4053  0C31  0022               	movlb	2	; select bank2
  4054  0C32  082B               	movf	_ui16_Speed_demand_mat_Max^(0+256),w
  4055  0C33  2C3A               	goto	L23
  4056  0C34                     l9813:	
  4057                           ;BVH2_Appl_Layer.c: 1231: }
  4058                           
  4059                           
  4060                           ;BVH2_Appl_Layer.c: 1232: else {;BVH2_Appl_Layer.c: 1233: Sb2_Switch5 = ui16_Speed_deman
      +                          d_mat;
  4061  0C34  0022               	movlb	2	; select bank2
  4062  0C35  082E               	movf	(_ui16_Speed_demand_mat+1)^(0+256),w
  4063  0C36  0023               	movlb	3	; select bank3
  4064  0C37  00D6               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384)
  4065  0C38  0022               	movlb	2	; select bank2
  4066  0C39  082D               	movf	_ui16_Speed_demand_mat^(0+256),w
  4067  0C3A                     L23:	
  4068  0C3A  0023               	movlb	3	; select bank3
  4069  0C3B  00D5               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+384)
  4070                           
  4071                           ;BVH2_Appl_Layer.c: 1234: };BVH2_Appl_Layer.c: 1235: };BVH2_Appl_Layer.c: 1236: };BVH2_A
      +                          ppl_Layer.c: 1239: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
  4072  0C3C  0020               	movlb	0	; select bank0
  4073  0C3D  0843               	movf	_ui16_Speed_mat+1,w
  4074  0C3E  0023               	movlb	3	; select bank3
  4075  0C3F  00DC               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+384)
  4076  0C40  0020               	movlb	0	; select bank0
  4077  0C41  0842               	movf	_ui16_Speed_mat,w
  4078  0C42  0023               	movlb	3	; select bank3
  4079  0C43  00DB               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+384)
  4080  0C44  0855               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+384),w
  4081  0C45  02DB               	subwf	BVH2_Appl_Layer@Sb2_Error^(0+384),f
  4082  0C46  0856               	movf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+384),w
  4083  0C47  3BDC               	subwfb	(BVH2_Appl_Layer@Sb2_Error+1)^(0+384),f
  4084                           
  4085                           ;BVH2_Appl_Layer.c: 1244: if (SIBFS_Dry_Running_b.Cb15_greenState) {
  4086  0C48  0021               	movlb	1	; select bank1
  4087  0C49  18B9               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
  4088  0C4A  2C93               	goto	l9857
  4089                           
  4090                           ;BVH2_Appl_Layer.c: 1264: else {;BVH2_Appl_Layer.c: 1266: if (SIBFS_Dry_Running_b.Cb16_D
      +                          ryRunning) {
  4091  0C4B  1D39               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
  4092  0C4C  2C8C               	goto	l1502
  4093                           
  4094                           ;BVH2_Appl_Layer.c: 1270: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
  4095  0C4D  1DB9               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
  4096                           
  4097                           ;BVH2_Appl_Layer.c: 1272: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
  4098  0C4E  1E39               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
  4099  0C4F  2C93               	goto	l9857
  4100                           
  4101                           ;BVH2_Appl_Layer.c: 1279: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >;BVH2_Appl_Layer.c: 1280: 400) || (ui16_Speed_mat < 80)) {
  4102  0C50  0023               	movlb	3	; select bank3
  4103  0C51  0862               	movf	_ui16_dryRun_Thresh^(0+384),w
  4104  0C52  3E05               	addlw	5
  4105  0C53  0020               	movlb	0	; select bank0
  4106  0C54  00B2               	movwf	??_BVH2_Appl_Layer
  4107  0C55  3000               	movlw	0
  4108  0C56  0023               	movlb	3	; select bank3
  4109  0C57  3D63               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
  4110  0C58  2751  3188         	fcall	PL6	;call to abstracted procedure
  4111  0C5A  1C03               	skipc
  4112  0C5B  2C6A               	goto	l1507
  4113  0C5C  3001               	movlw	1
  4114  0C5D  0243               	subwf	_ui16_Speed_mat+1,w
  4115  0C5E  3091               	movlw	145
  4116  0C5F  1903               	skipnz
  4117  0C60  0242               	subwf	_ui16_Speed_mat,w
  4118  0C61  1803               	skipnc
  4119  0C62  2C6A               	goto	l1507
  4120  0C63  3000               	movlw	0
  4121  0C64  0243               	subwf	_ui16_Speed_mat+1,w
  4122  0C65  3050               	movlw	80
  4123  0C66  1903               	skipnz
  4124  0C67  0242               	subwf	_ui16_Speed_mat,w
  4125  0C68  1803               	skipnc
  4126  0C69  2C6E               	goto	l9835
  4127  0C6A                     l1507:	
  4128                           
  4129                           ;BVH2_Appl_Layer.c: 1282: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
  4130  0C6A  0021               	movlb	1	; select bank1
  4131  0C6B  1239               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
  4132                           
  4133                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
  4134  0C6C  1139               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
  4135  0C6D  2C91               	goto	l9853
  4136  0C6E                     l9835:	
  4137                           ;BVH2_Appl_Layer.c: 1286: }
  4138                           
  4139                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb15_greenState = 1;
  4140                           
  4141                           
  4142                           ;BVH2_Appl_Layer.c: 1287: else {;BVH2_Appl_Layer.c: 1288: if ((ui8_PWM_dc_mat < 20) && (
      +                          ui8_PWM_dc_mat > 4)) {
  4143  0C6E  3014               	movlw	20
  4144  0C6F  0021               	movlb	1	; select bank1
  4145  0C70  025E               	subwf	_ui8_PWM_dc_mat^(0+128),w
  4146  0C71  1803               	skipnc
  4147  0C72  2C77               	goto	l9843
  4148  0C73  3005               	movlw	5
  4149  0C74  025E               	subwf	_ui8_PWM_dc_mat^(0+128),w
  4150  0C75  1803               	btfsc	3,0
  4151  0C76  2C6A               	goto	l1507
  4152  0C77                     l9843:	
  4153                           
  4154                           ;BVH2_Appl_Layer.c: 1295: else {;BVH2_Appl_Layer.c: 1296: if (Cb14_StateCnt > 2000) {
  4155  0C77  3007               	movlw	7
  4156  0C78  0022               	movlb	2	; select bank2
  4157  0C79  0226               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256),w
  4158  0C7A  30D1               	movlw	209
  4159  0C7B  1903               	skipnz
  4160  0C7C  0225               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256),w
  4161  0C7D  1C03               	skipc
  4162  0C7E  2C85               	goto	l9847
  4163                           
  4164                           ;BVH2_Appl_Layer.c: 1298: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
  4165  0C7F  0021               	movlb	1	; select bank1
  4166  0C80  1239               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
  4167                           
  4168                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb17_redState = 1;
  4169  0C81  15B9               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
  4170                           
  4171                           ;BVH2_Appl_Layer.c: 1300: Cb14_oDryRunAlarm = 1;
  4172  0C82  01B7               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
  4173  0C83  0AB7               	incf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),f
  4174                           
  4175                           ;BVH2_Appl_Layer.c: 1301: }
  4176  0C84  2C93               	goto	l9857
  4177  0C85                     l9847:	
  4178                           
  4179                           ;BVH2_Appl_Layer.c: 1302: else {;BVH2_Appl_Layer.c: 1303: Cb14_StateCnt = Cb14_StateCnt 
      +                          + 1 ;
  4180  0C85  0825               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256),w
  4181  0C86  3E01               	addlw	1
  4182  0C87  00A5               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256)
  4183  0C88  3000               	movlw	0
  4184  0C89  3D26               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256),w
  4185  0C8A  00A6               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256)
  4186  0C8B  2C93               	goto	l9857
  4187  0C8C                     l1502:	
  4188                           
  4189                           ;BVH2_Appl_Layer.c: 1314: else {;BVH2_Appl_Layer.c: 1316: if (!(SIBFS_Dry_Running_b.Cb14
      +                          _Dry_Running)) {
  4190  0C8C  1839               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
  4191  0C8D  2C93               	goto	l9857
  4192                           
  4193                           ;BVH2_Appl_Layer.c: 1317: SIBFS_Dry_Running_b.Cb14_Dry_Running = 1;
  4194  0C8E  1439               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
  4195                           
  4196                           ;BVH2_Appl_Layer.c: 1320: if (ui8_ResetMatlab == 1) {
  4197  0C8F  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  4198  0C90  2C93               	goto	l9857
  4199  0C91                     l9853:	
  4200                           
  4201                           ;BVH2_Appl_Layer.c: 1322: SIBFS_Dry_Running_b.Cb15_greenState = 1;
  4202  0C91  14B9               	bsf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
  4203                           
  4204                           ;BVH2_Appl_Layer.c: 1285: Cb14_oDryRunAlarm = 0;
  4205  0C92  01B7               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
  4206  0C93                     l9857:	
  4207                           
  4208                           ;BVH2_Appl_Layer.c: 1324: };BVH2_Appl_Layer.c: 1325: };BVH2_Appl_Layer.c: 1326: };BVH2_A
      +                          ppl_Layer.c: 1327: };BVH2_Appl_Layer.c: 1334: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenSta
      +                          te) {
  4209  0C93  0020               	movlb	0	; select bank0
  4210  0C94  1CCA               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
  4211  0C95  2CA5               	goto	l1516
  4212                           
  4213                           ;BVH2_Appl_Layer.c: 1339: if (Cb14_oDryRunAlarm) {
  4214  0C96  0021               	movlb	1	; select bank1
  4215  0C97  0837               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
  4216  0C98  1903               	btfsc	3,2
  4217  0C99  2CE8               	goto	l9905
  4218                           
  4219                           ;BVH2_Appl_Layer.c: 1342: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
  4220  0C9A  0020               	movlb	0	; select bank0
  4221  0C9B  10CA               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
  4222                           
  4223                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 1;
  4224  0C9C  154A               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
  4225  0C9D                     L24:	
  4226                           
  4227                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
  4228  0C9D  15CA               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4229                           
  4230                           ;BVH2_Appl_Layer.c: 1345: Cb19_Counter = 0 ;
  4231  0C9E  0021               	movlb	1	; select bank1
  4232  0C9F  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
  4233  0CA0  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
  4234                           
  4235                           ;BVH2_Appl_Layer.c: 1346: Cb19_oDryRun66 = 1;
  4236  0CA1  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128)
  4237  0CA2  0AB5               	incf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128),f
  4238                           
  4239                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun55 = 0;
  4240  0CA3  01B6               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128)
  4241                           
  4242                           ;BVH2_Appl_Layer.c: 1348: };BVH2_Appl_Layer.c: 1351: }
  4243  0CA4  2CE8               	goto	l9905
  4244  0CA5                     l1516:	
  4245                           
  4246                           ;BVH2_Appl_Layer.c: 1352: else {;BVH2_Appl_Layer.c: 1354: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b21_DryRunningAlarm) {
  4247  0CA5  1D4A               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
  4248  0CA6  2CDA               	goto	l1519
  4249                           
  4250                           ;BVH2_Appl_Layer.c: 1359: if (!(Cb14_oDryRunAlarm)) {
  4251  0CA7  0021               	movlb	1	; select bank1
  4252  0CA8  0837               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
  4253  0CA9  1D03               	btfss	3,2
  4254  0CAA  2CB5               	goto	l1520
  4255                           
  4256                           ;BVH2_Appl_Layer.c: 1364: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
  4257  0CAB  0020               	movlb	0	; select bank0
  4258  0CAC  1DCA               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4259  0CAD  2CB0               	goto	l1521
  4260                           
  4261                           ;BVH2_Appl_Layer.c: 1365: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
  4262  0CAE  11CA               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4263                           
  4264                           ;BVH2_Appl_Layer.c: 1366: }
  4265  0CAF  2CB3               	goto	l1522
  4266  0CB0                     l1521:	
  4267                           
  4268                           ;BVH2_Appl_Layer.c: 1367: else {;BVH2_Appl_Layer.c: 1369: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
  4269  0CB0  1E4A               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4270  0CB1  2CB3               	goto	l1522
  4271                           
  4272                           ;BVH2_Appl_Layer.c: 1370: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
  4273  0CB2  124A               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4274  0CB3                     l1522:	
  4275                           
  4276                           ;BVH2_Appl_Layer.c: 1371: };BVH2_Appl_Layer.c: 1372: };BVH2_Appl_Layer.c: 1373: SIBFS_Dr
      +                          y_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
  4277  0CB3  114A               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
  4278  0CB4  2CE2               	goto	L31
  4279  0CB5                     l1520:	
  4280                           ;BVH2_Appl_Layer.c: 1378: }
  4281                           
  4282                           ;BVH2_Appl_Layer.c: 1374: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
  4283                           
  4284                           
  4285                           ;BVH2_Appl_Layer.c: 1379: else {;BVH2_Appl_Layer.c: 1381: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b22_DryRun66) {
  4286  0CB5  0020               	movlb	0	; select bank0
  4287  0CB6  1DCA               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4288  0CB7  2CCF               	goto	l1525
  4289                           
  4290                           ;BVH2_Appl_Layer.c: 1384: if (Cb19_Counter > 400) {
  4291  0CB8  27BD  3188         	fcall	PL88	;call to abstracted procedure
  4292  0CBA  1903               	skipnz
  4293  0CBB  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
  4294  0CBC  1C03               	skipc
  4295  0CBD  2CC8               	goto	l9885
  4296                           
  4297                           ;BVH2_Appl_Layer.c: 1387: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
  4298  0CBE  0020               	movlb	0	; select bank0
  4299  0CBF  11CA               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
  4300                           
  4301                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 1;
  4302  0CC0  164A               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4303                           
  4304                           ;BVH2_Appl_Layer.c: 1389: Cb19_Counter = 0 ;
  4305  0CC1  0021               	movlb	1	; select bank1
  4306  0CC2  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
  4307  0CC3  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
  4308                           
  4309                           ;BVH2_Appl_Layer.c: 1390: Cb19_oDryRun66 = 0;
  4310  0CC4  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128)
  4311                           
  4312                           ;BVH2_Appl_Layer.c: 1391: Cb19_oDryRun55 = 1;
  4313  0CC5  01B6               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128)
  4314  0CC6  0AB6               	incf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128),f
  4315                           
  4316                           ;BVH2_Appl_Layer.c: 1392: }
  4317  0CC7  2CE8               	goto	l9905
  4318  0CC8                     l9885:	
  4319                           
  4320                           ;BVH2_Appl_Layer.c: 1393: else {;BVH2_Appl_Layer.c: 1394: Cb19_Counter = Cb19_Counter + 
      +                          1 ;
  4321  0CC8  0822               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
  4322  0CC9  3E01               	addlw	1
  4323  0CCA  00A2               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
  4324  0CCB  3000               	movlw	0
  4325  0CCC  3D23               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
  4326  0CCD  00A3               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
  4327  0CCE  2CE8               	goto	l9905
  4328  0CCF                     l1525:	
  4329                           
  4330                           ;BVH2_Appl_Layer.c: 1400: else {;BVH2_Appl_Layer.c: 1402: if (SIBFS_Dry_RunningAlarm_b.C
      +                          b23_DryRun55) {
  4331  0CCF  1E4A               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4332  0CD0  2CE8               	goto	l9905
  4333                           
  4334                           ;BVH2_Appl_Layer.c: 1405: if (Cb19_Counter > 400) {
  4335  0CD1  27BD  3188         	fcall	PL88	;call to abstracted procedure
  4336  0CD3  1903               	skipnz
  4337  0CD4  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
  4338  0CD5  1C03               	skipc
  4339  0CD6  2CC8               	goto	l9885
  4340                           
  4341                           ;BVH2_Appl_Layer.c: 1408: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
  4342  0CD7  0020               	movlb	0	; select bank0
  4343  0CD8  124A               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
  4344  0CD9  2C9D               	goto	L24
  4345  0CDA                     l1519:	
  4346                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 1;
  4347                           
  4348                           
  4349                           ;BVH2_Appl_Layer.c: 1426: else {;BVH2_Appl_Layer.c: 1428: if (!(SIBFS_Dry_RunningAlarm_b
      +                          .Cb19_Dry_RunningAlarm)) {
  4350  0CDA  184A               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
  4351  0CDB  2CE8               	goto	l9905
  4352                           
  4353                           ;BVH2_Appl_Layer.c: 1429: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
  4354  0CDC  144A               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
  4355                           
  4356                           ;BVH2_Appl_Layer.c: 1433: if (!(Cb14_oDryRunAlarm)) {
  4357  0CDD  0021               	movlb	1	; select bank1
  4358  0CDE  0837               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
  4359  0CDF  1D03               	btfss	3,2
  4360  0CE0  2CE8               	goto	l9905
  4361                           
  4362                           ;BVH2_Appl_Layer.c: 1435: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 1;
  4363  0CE1  0020               	movlb	0	; select bank0
  4364  0CE2                     L31:	
  4365  0CE2  14CA               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
  4366                           
  4367                           ;BVH2_Appl_Layer.c: 1375: Cb19_oDryRun55 = 0;
  4368  0CE3  0021               	movlb	1	; select bank1
  4369  0CE4  01B6               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128)
  4370                           
  4371                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun66 = 0;
  4372  0CE5  01B5               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128)
  4373                           
  4374                           ;BVH2_Appl_Layer.c: 1377: Cb19_Counter = 0 ;
  4375  0CE6  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
  4376  0CE7  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
  4377  0CE8                     l9905:	
  4378                           
  4379                           ;BVH2_Appl_Layer.c: 1439: };BVH2_Appl_Layer.c: 1440: };BVH2_Appl_Layer.c: 1441: };BVH2_A
      +                          ppl_Layer.c: 1442: };BVH2_Appl_Layer.c: 1447: bool_DryRunningAlarm = Cb19_oDryRun66;
  4380  0CE8  0021               	movlb	1	; select bank1
  4381  0CE9  0835               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+128),w
  4382  0CEA  00E3               	movwf	_bool_DryRunningAlarm^(0+128)
  4383                           
  4384                           ;BVH2_Appl_Layer.c: 1450: bool_CPU_TempAlarm = Cb51_oTempAlarm;
  4385  0CEB  0022               	movlb	2	; select bank2
  4386  0CEC  085C               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
  4387  0CED  0021               	movlb	1	; select bank1
  4388  0CEE  00E4               	movwf	_bool_CPU_TempAlarm^(0+128)
  4389                           
  4390                           ;BVH2_Appl_Layer.c: 1455: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
  4391  0CEF  1C3A               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
  4392  0CF0  2CFC               	goto	l1535
  4393                           
  4394                           ;BVH2_Appl_Layer.c: 1460: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
  4395  0CF1  275E  3188         	fcall	PL8	;call to abstracted procedure
  4396  0CF3  2751  3188         	fcall	PL6	;call to abstracted procedure
  4397  0CF5  1803               	skipnc
  4398  0CF6  2D33               	goto	l9955
  4399                           
  4400                           ;BVH2_Appl_Layer.c: 1463: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
  4401  0CF7  0021               	movlb	1	; select bank1
  4402  0CF8  103A               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
  4403                           
  4404                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 1;
  4405  0CF9  153A               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
  4406  0CFA                     l9915:	
  4407                           
  4408                           ;BVH2_Appl_Layer.c: 1465: Cb9_StateCnt = 0 ;
  4409  0CFA  01BB               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
  4410  0CFB  2D33               	goto	l9955
  4411  0CFC                     l1535:	
  4412                           
  4413                           ;BVH2_Appl_Layer.c: 1470: else {;BVH2_Appl_Layer.c: 1472: if (SIBFS_Current_Analysis_low
      +                          _b.Cb11_Wait) {
  4414  0CFC  1CBA               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
  4415  0CFD  2D10               	goto	l1538
  4416                           
  4417                           ;BVH2_Appl_Layer.c: 1477: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
  4418  0CFE  275E  3188         	fcall	PL8	;call to abstracted procedure
  4419  0D00  2751  3188         	fcall	PL6	;call to abstracted procedure
  4420  0D02  1803               	skipnc
  4421  0D03  2D07               	goto	l9921
  4422                           
  4423                           ;BVH2_Appl_Layer.c: 1479: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
  4424  0D04  0021               	movlb	1	; select bank1
  4425  0D05  10BA               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
  4426  0D06  2D1D               	goto	L25
  4427  0D07                     l9921:	
  4428                           ;BVH2_Appl_Layer.c: 1482: }
  4429                           
  4430                           ;BVH2_Appl_Layer.c: 1481: Cb9_oCurrentAlarm = 1;
  4431                           
  4432                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
  4433                           
  4434                           
  4435                           ;BVH2_Appl_Layer.c: 1483: else {;BVH2_Appl_Layer.c: 1484: if (Cb9_StateCnt > 100) {
  4436  0D07  3065               	movlw	101
  4437  0D08  0021               	movlb	1	; select bank1
  4438  0D09  023B               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
  4439  0D0A  1C03               	skipc
  4440  0D0B  2D0E               	goto	l9927
  4441                           
  4442                           ;BVH2_Appl_Layer.c: 1486: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
  4443  0D0C  10BA               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
  4444  0D0D  2D30               	goto	l9951
  4445  0D0E                     l9927:	
  4446                           ;BVH2_Appl_Layer.c: 1489: }
  4447                           
  4448                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
  4449                           
  4450                           
  4451                           ;BVH2_Appl_Layer.c: 1490: else {;BVH2_Appl_Layer.c: 1491: Cb9_StateCnt = Cb9_StateCnt + 
      +                          1 ;
  4452  0D0E  0ABB               	incf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),f
  4453  0D0F  2D33               	goto	l9955
  4454  0D10                     l1538:	
  4455                           
  4456                           ;BVH2_Appl_Layer.c: 1497: else {;BVH2_Appl_Layer.c: 1499: if (SIBFS_Current_Analysis_low
      +                          _b.Cb12_CntOverCurrent) {
  4457  0D10  1D3A               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
  4458  0D11  2D22               	goto	l1544
  4459                           
  4460                           ;BVH2_Appl_Layer.c: 1504: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
  4461  0D12  2767  3188         	fcall	PL10	;call to abstracted procedure
  4462  0D14  1803               	skipnc
  4463  0D15  2D18               	goto	l9935
  4464                           
  4465                           ;BVH2_Appl_Layer.c: 1506: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
  4466  0D16  113A               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
  4467  0D17  2D30               	goto	l9951
  4468  0D18                     l9935:	
  4469                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
  4470                           
  4471                           
  4472                           ;BVH2_Appl_Layer.c: 1510: else {;BVH2_Appl_Layer.c: 1511: if (Cb9_StateCnt > 50) {
  4473  0D18  3033               	movlw	51
  4474  0D19  023B               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
  4475  0D1A  1C03               	skipc
  4476  0D1B  2D0E               	goto	l9927
  4477                           
  4478                           ;BVH2_Appl_Layer.c: 1513: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
  4479  0D1C  113A               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
  4480  0D1D                     L25:	
  4481                           
  4482                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
  4483  0D1D  15BA               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
  4484                           
  4485                           ;BVH2_Appl_Layer.c: 1515: Cb9_oCurrentAlarm = 1;
  4486  0D1E  0022               	movlb	2	; select bank2
  4487  0D1F  01D9               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
  4488  0D20  0AD9               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
  4489                           
  4490                           ;BVH2_Appl_Layer.c: 1516: }
  4491  0D21  2D33               	goto	l9955
  4492  0D22                     l1544:	
  4493                           
  4494                           ;BVH2_Appl_Layer.c: 1524: else {;BVH2_Appl_Layer.c: 1526: if (SIBFS_Current_Analysis_low
      +                          _b.Cb13_redState) {
  4495  0D22  1DBA               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
  4496  0D23  2D2B               	goto	l1550
  4497                           
  4498                           ;BVH2_Appl_Layer.c: 1531: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
  4499  0D24  2767  3188         	fcall	PL10	;call to abstracted procedure
  4500  0D26  1803               	skipnc
  4501  0D27  2D33               	goto	l9955
  4502                           
  4503                           ;BVH2_Appl_Layer.c: 1534: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
  4504  0D28  11BA               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
  4505                           
  4506                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb11_Wait = 1;
  4507  0D29  14BA               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
  4508  0D2A  2CFA               	goto	l9915
  4509  0D2B                     l1550:	
  4510                           
  4511                           ;BVH2_Appl_Layer.c: 1541: else {;BVH2_Appl_Layer.c: 1543: if (!(SIBFS_Current_Analysis_l
      +                          ow_b.Cb9_Current_Analysis_low)) {
  4512  0D2B  1A3A               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
  4513  0D2C  2D33               	goto	l9955
  4514                           
  4515                           ;BVH2_Appl_Layer.c: 1544: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 1;
  4516  0D2D  163A               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
  4517                           
  4518                           ;BVH2_Appl_Layer.c: 1547: if (ui8_ResetMatlab == 1) {
  4519  0D2E  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
  4520  0D2F  2D33               	goto	l9955
  4521  0D30                     l9951:	
  4522                           
  4523                           ;BVH2_Appl_Layer.c: 1549: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
  4524  0D30  143A               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
  4525                           
  4526                           ;BVH2_Appl_Layer.c: 1488: Cb9_oCurrentAlarm = 0;
  4527  0D31  0022               	movlb	2	; select bank2
  4528  0D32  01D9               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
  4529  0D33                     l9955:	
  4530                           
  4531                           ;BVH2_Appl_Layer.c: 1551: };BVH2_Appl_Layer.c: 1552: };BVH2_Appl_Layer.c: 1553: };BVH2_A
      +                          ppl_Layer.c: 1554: };BVH2_Appl_Layer.c: 1555: };BVH2_Appl_Layer.c: 1556: };BVH2_Appl_Lay
      +                          er.c: 1561: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
  4532  0D33  0022               	movlb	2	; select bank2
  4533  0D34  0859               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
  4534  0D35  0021               	movlb	1	; select bank1
  4535  0D36  00E1               	movwf	_bool_HighCurrentAlarm^(0+128)
  4536                           
  4537                           ;BVH2_Appl_Layer.c: 1564: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
  4538  0D37  0846               	movf	_Cb34_oPWM_Alarm^(0+128),w
  4539  0D38  00DA               	movwf	_bool_PWMin_err_Alarm^(0+128)
  4540                           
  4541                           ;BVH2_Appl_Layer.c: 1567: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
  4542  0D39  0840               	movf	_Cb56_oUbat_Alarm_High^(0+128),w
  4543  0D3A  00D8               	movwf	_bool_UbatAlarm^(0+128)
  4544                           
  4545                           ;BVH2_Appl_Layer.c: 1568: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
  4546  0D3B  0023               	movlb	3	; select bank3
  4547  0D3C  01D0               	clrf	_BVH2_Appl_Layer$1038^(0+384)
  4548  0D3D  0AD0               	incf	_BVH2_Appl_Layer$1038^(0+384),f
  4549  0D3E  0022               	movlb	2	; select bank2
  4550  0D3F  085D               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
  4551  0D40  1D03               	btfss	3,2
  4552  0D41  2D4B               	goto	l9971
  4553  0D42  0021               	movlb	1	; select bank1
  4554  0D43  0848               	movf	_Cb1_oCurrentAlarm^(0+128),w
  4555  0D44  1D03               	btfss	3,2
  4556  0D45  2D4B               	goto	l9971
  4557  0D46  0836               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+128),w
  4558  0D47  1D03               	btfss	3,2
  4559  0D48  2D4B               	goto	l9971
  4560  0D49  0023               	movlb	3	; select bank3
  4561  0D4A  01D0               	clrf	_BVH2_Appl_Layer$1038^(0+384)
  4562  0D4B                     l9971:	
  4563  0D4B  0023               	movlb	3	; select bank3
  4564  0D4C  0850               	movf	_BVH2_Appl_Layer$1038^(0+384),w
  4565  0D4D  0021               	movlb	1	; select bank1
  4566  0D4E  00E2               	movwf	_bool_MotorStalled^(0+128)
  4567                           
  4568                           ;BVH2_Appl_Layer.c: 1574: ui8_debug_out0 = (UInt8) Sb2_Switch5;
  4569  0D4F  0022               	movlb	2	; select bank2
  4570  0D50  085B               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
  4571  0D51  0021               	movlb	1	; select bank1
  4572  0D52  00D9               	movwf	_bool_CPU_TempRedAlarm^(0+128)
  4573                           
  4574                           ;BVH2_Appl_Layer.c: 1575: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
  4575  0D53  0023               	movlb	3	; select bank3
  4576  0D54  01D1               	clrf	_BVH2_Appl_Layer$1039^(0+384)
  4577  0D55  0AD1               	incf	_BVH2_Appl_Layer$1039^(0+384),f
  4578  0D56  085D               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+384),w
  4579  0D57  1D03               	btfss	3,2
  4580  0D58  2D62               	goto	l9985
  4581  0D59  0021               	movlb	1	; select bank1
  4582  0D5A  0834               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),w
  4583  0D5B  1D03               	btfss	3,2
  4584  0D5C  2D62               	goto	l9985
  4585  0D5D  0837               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
  4586  0D5E  1D03               	btfss	3,2
  4587  0D5F  2D62               	goto	l9985
  4588  0D60  0023               	movlb	3	; select bank3
  4589  0D61  01D1               	clrf	_BVH2_Appl_Layer$1039^(0+384)
  4590  0D62                     l9985:	
  4591  0D62  0023               	movlb	3	; select bank3
  4592  0D63  0851               	movf	_BVH2_Appl_Layer$1039^(0+384),w
  4593  0D64  00D8               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+384)
  4594                           
  4595                           ;BVH2_Appl_Layer.c: 1576: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
  4596  0D65  01D2               	clrf	_BVH2_Appl_Layer$1040^(0+384)
  4597  0D66  0AD2               	incf	_BVH2_Appl_Layer$1040^(0+384),f
  4598  0D67  0858               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+384),w
  4599  0D68  1D03               	btfss	3,2
  4600  0D69  2D70               	goto	l9995
  4601  0D6A  0021               	movlb	1	; select bank1
  4602  0D6B  085B               	movf	_bool_ControlLoopMode^(0+128),w
  4603  0D6C  1D03               	btfss	3,2
  4604  0D6D  2D70               	goto	l9995
  4605  0D6E  0023               	movlb	3	; select bank3
  4606  0D6F  01D2               	clrf	_BVH2_Appl_Layer$1040^(0+384)
  4607  0D70                     l9995:	
  4608  0D70  0023               	movlb	3	; select bank3
  4609  0D71  0852               	movf	_BVH2_Appl_Layer$1040^(0+384),w
  4610  0D72  00DA               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+384)
  4611                           
  4612                           ;BVH2_Appl_Layer.c: 1577: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
  4613  0D73  0022               	movlb	2	; select bank2
  4614  0D74  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
  4615  0D75  1903               	btfsc	3,2
  4616  0D76  2D81               	goto	l10003
  4617  0D77  086D               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
  4618  0D78  1D03               	btfss	3,2
  4619  0D79  2D81               	goto	l10003
  4620                           
  4621                           ;BVH2_Appl_Layer.c: 1578: {;BVH2_Appl_Layer.c: 1579: X_Sb4_Intergrator = 80000 ;
  4622  0D7A  3001               	movlw	1
  4623  0D7B  01E5               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
  4624  0D7C  00E4               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
  4625  0D7D  3038               	movlw	56
  4626  0D7E  00E3               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
  4627  0D7F  3080               	movlw	128
  4628  0D80  00E2               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
  4629  0D81                     l10003:	
  4630                           
  4631                           ;BVH2_Appl_Layer.c: 1585: Sb2_Switch2 = 0 ;
  4632  0D81  0023               	movlb	3	; select bank3
  4633  0D82  0858               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+384),w
  4634  0D83  1D03               	btfss	3,2
  4635  0D84  2E46               	goto	l10037
  4636                           
  4637                           ;BVH2_Appl_Layer.c: 1587: else {;BVH2_Appl_Layer.c: 1590: if (bool_ControlLoopMode) {
  4638                           
  4639                           ;BVH2_Appl_Layer.c: 1586: }
  4640  0D85  0021               	movlb	1	; select bank1
  4641  0D86  085B               	movf	_bool_ControlLoopMode^(0+128),w
  4642  0D87  1903               	btfsc	3,2
  4643  0D88  2DF1               	goto	l10025
  4644                           
  4645                           ;BVH2_Appl_Layer.c: 1594: Sb2_Switch2 = Sb2_Fixed_Power;
  4646  0D89  0023               	movlb	3	; select bank3
  4647  0D8A  0859               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+384),w
  4648  0D8B  1D03               	btfss	3,2
  4649  0D8C  2E46               	goto	l10037
  4650                           
  4651                           ;BVH2_Appl_Layer.c: 1596: else {;BVH2_Appl_Layer.c: 1598: UInt16 Sb3_Product1 ;;BVH2_App
      +                          l_Layer.c: 1599: Int16 Sb3_Sum1;;BVH2_Appl_Layer.c: 1607: Sb3_Product1 = (UInt16) (((UIn
      +                          t16) (140 << 8)) / 160 );
  4652  0D8D  30E0               	movlw	224
  4653  0D8E  00D3               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+384)
  4654  0D8F  01D4               	clrf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+384)
  4655                           
  4656                           ;BVH2_Appl_Layer.c: 1613: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>;BVH2_Appl_Layer.c: 1614: 8)) + ((Int16) (((Int16) (-((Int16) (
      +                          UInt16) ((((UInt32) Sb3_Product1) * 95) >> 7)))) + 200)));
  4657  0D90  0021               	movlb	1	; select bank1
  4658  0D91  085E               	movf	_ui8_PWM_dc_mat^(0+128),w
  4659  0D92  0020               	movlb	0	; select bank0
  4660  0D93  00A4               	movwf	___lmul@multiplier
  4661  0D94  01A5               	clrf	___lmul@multiplier+1
  4662  0D95  01A6               	clrf	___lmul@multiplier+2
  4663  0D96  01A7               	clrf	___lmul@multiplier+3
  4664  0D97  0023               	movlb	3	; select bank3
  4665  0D98  0853               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+384),w
  4666  0D99  0020               	movlb	0	; select bank0
  4667  0D9A  00A8               	movwf	___lmul@multiplicand
  4668  0D9B  0023               	movlb	3	; select bank3
  4669  0D9C  0854               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+384),w
  4670  0D9D  0020               	movlb	0	; select bank0
  4671  0D9E  00A9               	movwf	___lmul@multiplicand+1
  4672  0D9F  01AA               	clrf	___lmul@multiplicand+2
  4673  0DA0  01AB               	clrf	___lmul@multiplicand+3
  4674  0DA1  26F6  3188         	fcall	___lmul
  4675  0DA3  0826               	movf	?___lmul+2,w
  4676  0DA4  0023               	movlb	3	; select bank3
  4677  0DA5  00DF               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384)
  4678  0DA6  0020               	movlb	0	; select bank0
  4679  0DA7  0825               	movf	?___lmul+1,w
  4680  0DA8  0023               	movlb	3	; select bank3
  4681  0DA9  00DE               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384)
  4682  0DAA  0853               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+384),w
  4683  0DAB  0020               	movlb	0	; select bank0
  4684  0DAC  00A4               	movwf	___lmul@multiplier
  4685  0DAD  0023               	movlb	3	; select bank3
  4686  0DAE  0854               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+384),w
  4687  0DAF  0020               	movlb	0	; select bank0
  4688  0DB0  00A5               	movwf	___lmul@multiplier+1
  4689  0DB1  305F               	movlw	95
  4690  0DB2  01A6               	clrf	___lmul@multiplier+2
  4691  0DB3  01A7               	clrf	___lmul@multiplier+3
  4692  0DB4  00A8               	movwf	___lmul@multiplicand
  4693  0DB5  01A9               	clrf	___lmul@multiplicand+1
  4694  0DB6  01AA               	clrf	___lmul@multiplicand+2
  4695  0DB7  01AB               	clrf	___lmul@multiplicand+3
  4696  0DB8  26F6  3188         	fcall	___lmul
  4697  0DBA  0824               	movf	?___lmul,w
  4698  0DBB  00B2               	movwf	??_BVH2_Appl_Layer
  4699  0DBC  0825               	movf	?___lmul+1,w
  4700  0DBD  00B3               	movwf	??_BVH2_Appl_Layer+1
  4701  0DBE  0826               	movf	?___lmul+2,w
  4702  0DBF  00B4               	movwf	??_BVH2_Appl_Layer+2
  4703  0DC0  0827               	movf	?___lmul+3,w
  4704  0DC1  00B5               	movwf	??_BVH2_Appl_Layer+3
  4705  0DC2  3007               	movlw	7
  4706  0DC3                     u8505:	
  4707  0DC3  36B5               	lsrf	??_BVH2_Appl_Layer+3,f
  4708  0DC4  0CB4               	rrf	??_BVH2_Appl_Layer+2,f
  4709  0DC5  0CB3               	rrf	??_BVH2_Appl_Layer+1,f
  4710  0DC6  0CB2               	rrf	??_BVH2_Appl_Layer,f
  4711  0DC7  0B89               	decfsz	9,f
  4712  0DC8  2DC3               	goto	u8505
  4713  0DC9  0832               	movf	??_BVH2_Appl_Layer,w
  4714  0DCA  0023               	movlb	3	; select bank3
  4715  0DCB  02DE               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),f
  4716  0DCC  0020               	movlb	0	; select bank0
  4717  0DCD  0833               	movf	??_BVH2_Appl_Layer+1,w
  4718  0DCE  0023               	movlb	3	; select bank3
  4719  0DCF  3BDF               	subwfb	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384),f
  4720  0DD0  30C8               	movlw	200
  4721  0DD1  07DE               	addwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),f
  4722  0DD2  1803               	skipnc
  4723  0DD3  0ADF               	incf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384),f
  4724                           
  4725                           ;BVH2_Appl_Layer.c: 1617: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
  4726  0DD4  085F               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384),w
  4727  0DD5  27A7  3188         	fcall	PL50	;call to abstracted procedure
  4728  0DD7  1D03               	skipz
  4729  0DD8  2DDC               	goto	u8515
  4730  0DD9  30C9               	movlw	201
  4731  0DDA  0023               	movlb	3	; select bank3
  4732  0DDB  025E               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),w
  4733  0DDC                     u8515:	
  4734  0DDC  1803               	skipnc
  4735  0DDD  2E46               	goto	l10037
  4736  0DDE  0023               	movlb	3	; select bank3
  4737  0DDF  085F               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+384),w
  4738  0DE0  27A7  3188         	fcall	PL50	;call to abstracted procedure
  4739  0DE2  1D03               	skipz
  4740  0DE3  2DE7               	goto	u8525
  4741  0DE4  303C               	movlw	60
  4742  0DE5  0023               	movlb	3	; select bank3
  4743  0DE6  025E               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),w
  4744  0DE7                     u8525:	
  4745  0DE7  1C03               	skipc
  4746  0DE8  2DEC               	goto	l10023
  4747  0DE9  0023               	movlb	3	; select bank3
  4748  0DEA  085E               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+384),w
  4749  0DEB  2DEE               	goto	L27
  4750  0DEC                     l10023:	
  4751  0DEC  303C               	movlw	60
  4752  0DED  0023               	movlb	3	; select bank3
  4753  0DEE                     L27:	
  4754  0DEE  00C4               	movwf	_BVH2_Appl_Layer$1043^(0+384)
  4755  0DEF  01C5               	clrf	(_BVH2_Appl_Layer$1043+1)^(0+384)
  4756  0DF0  2E46               	goto	l10037
  4757  0DF1                     l10025:	
  4758                           
  4759                           ;BVH2_Appl_Layer.c: 1620: else {;BVH2_Appl_Layer.c: 1622: Int16 Sb4_PI_sum;;BVH2_Appl_La
      +                          yer.c: 1627: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / ((Int32) 800))
      +                          ) + ((UInt16);BVH2_Appl_Layer.c: 1628: (Sb2_Error * ((Int16) ui8_Kp_mat))));
  4760  0DF1  0020               	movlb	0	; select bank0
  4761  0DF2  3003               	movlw	3
  4762  0DF3  01A7               	clrf	___aldiv@divisor+3
  4763  0DF4  01A6               	clrf	___aldiv@divisor+2
  4764  0DF5  00A5               	movwf	___aldiv@divisor+1
  4765  0DF6  3020               	movlw	32
  4766  0DF7  00A4               	movwf	___aldiv@divisor
  4767  0DF8  0022               	movlb	2	; select bank2
  4768  0DF9  0865               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
  4769  0DFA  0020               	movlb	0	; select bank0
  4770  0DFB  00AB               	movwf	___aldiv@dividend+3
  4771  0DFC  0022               	movlb	2	; select bank2
  4772  0DFD  0864               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
  4773  0DFE  0020               	movlb	0	; select bank0
  4774  0DFF  00AA               	movwf	___aldiv@dividend+2
  4775  0E00  0022               	movlb	2	; select bank2
  4776  0E01  0863               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
  4777  0E02  0020               	movlb	0	; select bank0
  4778  0E03  00A9               	movwf	___aldiv@dividend+1
  4779  0E04  0022               	movlb	2	; select bank2
  4780  0E05  0862               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
  4781  0E06  0020               	movlb	0	; select bank0
  4782  0E07  00A8               	movwf	___aldiv@dividend
  4783  0E08  3181  213E  3188   	fcall	___aldiv
  4784  0E0B  0825               	movf	?___aldiv+1,w
  4785  0E0C  0023               	movlb	3	; select bank3
  4786  0E0D  00E1               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384)
  4787  0E0E  0020               	movlb	0	; select bank0
  4788  0E0F  0824               	movf	?___aldiv,w
  4789  0E10  0023               	movlb	3	; select bank3
  4790  0E11  00E0               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384)
  4791  0E12  0021               	movlb	1	; select bank1
  4792  0E13  085D               	movf	_ui8_Kp_mat^(0+128),w
  4793  0E14  0020               	movlb	0	; select bank0
  4794  0E15  00A4               	movwf	___wmul@multiplier
  4795  0E16  01A5               	clrf	___wmul@multiplier+1
  4796  0E17  2796  3188         	fcall	PL44	;call to abstracted procedure
  4797  0E19  2130  3188         	fcall	___wmul
  4798  0E1B  0824               	movf	?___wmul,w
  4799  0E1C  0023               	movlb	3	; select bank3
  4800  0E1D  07E0               	addwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),f
  4801  0E1E  0020               	movlb	0	; select bank0
  4802  0E1F  0825               	movf	?___wmul+1,w
  4803  0E20  0023               	movlb	3	; select bank3
  4804  0E21  3DE1               	addwfc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),f
  4805                           
  4806                           ;BVH2_Appl_Layer.c: 1631: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
  4807  0E22  0861               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),w
  4808  0E23  27A7  3188         	fcall	PL50	;call to abstracted procedure
  4809  0E25  1D03               	skipz
  4810  0E26  2E2A               	goto	u8535
  4811  0E27  3001               	movlw	1
  4812  0E28  0023               	movlb	3	; select bank3
  4813  0E29  0260               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),w
  4814  0E2A                     u8535:	
  4815  0E2A  1C03               	skipc
  4816  0E2B  2E34               	goto	l1581
  4817  0E2C  3000               	movlw	0
  4818  0E2D  0023               	movlb	3	; select bank3
  4819  0E2E  0261               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),w
  4820  0E2F  30CB               	movlw	203
  4821  0E30  1903               	skipnz
  4822  0E31  0260               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),w
  4823  0E32  1803               	skipnc
  4824  0E33  2E46               	goto	l10037
  4825  0E34                     l1581:	
  4826  0E34  0023               	movlb	3	; select bank3
  4827  0E35  1BE1               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),7
  4828  0E36  2E43               	goto	l10035
  4829  0E37  3000               	movlw	0
  4830  0E38  0261               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),w
  4831  0E39  3028               	movlw	40
  4832  0E3A  1903               	skipnz
  4833  0E3B  0260               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),w
  4834  0E3C  1C03               	skipc
  4835  0E3D  2E43               	goto	l10035
  4836  0E3E  0861               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+384),w
  4837  0E3F  00C7               	movwf	(_BVH2_Appl_Layer$1045+1)^(0+384)
  4838  0E40  0860               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+384),w
  4839  0E41  00C6               	movwf	_BVH2_Appl_Layer$1045^(0+384)
  4840  0E42  2E46               	goto	l10037
  4841  0E43                     l10035:	
  4842  0E43  3028               	movlw	40
  4843  0E44  00C6               	movwf	_BVH2_Appl_Layer$1045^(0+384)
  4844  0E45  01C7               	clrf	(_BVH2_Appl_Layer$1045+1)^(0+384)
  4845  0E46                     l10037:	
  4846                           
  4847                           ;BVH2_Appl_Layer.c: 1641: bl_Pumpoff_Alarm = Sb1_Logical_Operator2;
  4848  0E46  0022               	movlb	2	; select bank2
  4849  0E47  082D               	movf	_ui16_Speed_demand_mat^(0+256),w
  4850  0E48  0021               	movlb	1	; select bank1
  4851  0E49  00DF               	movwf	_ui8_duty_cycle_mat^(0+128)
  4852                           
  4853                           ;BVH2_Appl_Layer.c: 1642: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
  4854  0E4A  0023               	movlb	3	; select bank3
  4855  0E4B  085A               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+384),w
  4856  0E4C  0022               	movlb	2	; select bank2
  4857  0E4D  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
  4858                           
  4859                           ;BVH2_Appl_Layer.c: 1646: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<;BVH2_Appl_Layer.c: 1647: 3));
  4860  0E4E  0830               	movf	(_ui8_Ki_mat+1)^(0+256),w
  4861  0E4F  0020               	movlb	0	; select bank0
  4862  0E50  00A5               	movwf	___wmul@multiplier+1
  4863  0E51  0022               	movlb	2	; select bank2
  4864  0E52  082F               	movf	_ui8_Ki_mat^(0+256),w
  4865  0E53  0020               	movlb	0	; select bank0
  4866  0E54  00A4               	movwf	___wmul@multiplier
  4867  0E55  2796  3188         	fcall	PL44	;call to abstracted procedure
  4868  0E57  2130  3188         	fcall	___wmul
  4869  0E59  0824               	movf	?___wmul,w
  4870  0E5A  00B2               	movwf	??_BVH2_Appl_Layer
  4871  0E5B  0825               	movf	?___wmul+1,w
  4872  0E5C  00B3               	movwf	??_BVH2_Appl_Layer+1
  4873  0E5D  35B2               	lslf	??_BVH2_Appl_Layer,f
  4874  0E5E  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
  4875  0E5F  35B2               	lslf	??_BVH2_Appl_Layer,f
  4876  0E60  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
  4877  0E61  35B2               	lslf	??_BVH2_Appl_Layer,f
  4878  0E62  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
  4879  0E63  0832               	movf	??_BVH2_Appl_Layer,w
  4880  0E64  00B4               	movwf	??_BVH2_Appl_Layer+2
  4881  0E65  0833               	movf	??_BVH2_Appl_Layer+1,w
  4882  0E66  00B5               	movwf	??_BVH2_Appl_Layer+3
  4883  0E67  3000               	movlw	0
  4884  0E68  1BB5               	btfsc	??_BVH2_Appl_Layer+3,7
  4885  0E69  30FF               	movlw	255
  4886  0E6A  00B6               	movwf	??_BVH2_Appl_Layer+4
  4887  0E6B  00B7               	movwf	??_BVH2_Appl_Layer+5
  4888  0E6C  0834               	movf	??_BVH2_Appl_Layer+2,w
  4889  0E6D  0022               	movlb	2	; select bank2
  4890  0E6E  07E2               	addwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),f
  4891  0E6F  0020               	movlb	0	; select bank0
  4892  0E70  0835               	movf	??_BVH2_Appl_Layer+3,w
  4893  0E71  0022               	movlb	2	; select bank2
  4894  0E72  3DE3               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),f
  4895  0E73  0020               	movlb	0	; select bank0
  4896  0E74  0836               	movf	??_BVH2_Appl_Layer+4,w
  4897  0E75  0022               	movlb	2	; select bank2
  4898  0E76  3DE4               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),f
  4899  0E77  0020               	movlb	0	; select bank0
  4900  0E78  0837               	movf	??_BVH2_Appl_Layer+5,w
  4901  0E79  0022               	movlb	2	; select bank2
  4902  0E7A  3DE5               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),f
  4903                           
  4904                           ;BVH2_Appl_Layer.c: 1650: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
  4905  0E7B  1BE5               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
  4906  0E7C  2E88               	goto	l10043
  4907  0E7D  0865               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
  4908  0E7E  1D03               	btfss	3,2
  4909  0E7F  2EB9               	goto	l10049
  4910  0E80  3041               	movlw	65
  4911  0E81  0262               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
  4912  0E82  3077               	movlw	119
  4913  0E83  3B63               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
  4914  0E84  3002               	movlw	2
  4915  0E85  3B64               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
  4916  0E86  1803               	btfsc	3,0
  4917  0E87  2EB9               	goto	l10049
  4918  0E88                     l10043:	
  4919  0E88  1BE5               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
  4920  0E89  2EA4               	goto	l10047
  4921  0E8A  0865               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
  4922  0E8B  1D03               	btfss	3,2
  4923  0E8C  2E94               	goto	l10045
  4924  0E8D  0864               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
  4925  0E8E  1D03               	btfss	3,2
  4926  0E8F  2E94               	goto	l10045
  4927  0E90  307D               	movlw	125
  4928  0E91  0263               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
  4929  0E92  1C03               	btfss	3,0
  4930  0E93  2EA4               	goto	l10047
  4931  0E94                     l10045:	
  4932  0E94  0865               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
  4933  0E95  0023               	movlb	3	; select bank3
  4934  0E96  00CB               	movwf	(_BVH2_Appl_Layer$1046+3)^(0+384)
  4935  0E97  0022               	movlb	2	; select bank2
  4936  0E98  0864               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
  4937  0E99  0023               	movlb	3	; select bank3
  4938  0E9A  00CA               	movwf	(_BVH2_Appl_Layer$1046+2)^(0+384)
  4939  0E9B  0022               	movlb	2	; select bank2
  4940  0E9C  0863               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
  4941  0E9D  0023               	movlb	3	; select bank3
  4942  0E9E  00C9               	movwf	(_BVH2_Appl_Layer$1046+1)^(0+384)
  4943  0E9F  0022               	movlb	2	; select bank2
  4944  0EA0  0862               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
  4945  0EA1  0023               	movlb	3	; select bank3
  4946  0EA2  00C8               	movwf	_BVH2_Appl_Layer$1046^(0+384)
  4947  0EA3  2EAA               	goto	l1593
  4948  0EA4                     l10047:	
  4949  0EA4  0023               	movlb	3	; select bank3
  4950  0EA5  307D               	movlw	125
  4951  0EA6  01CB               	clrf	(_BVH2_Appl_Layer$1046+3)^(0+384)
  4952  0EA7  01CA               	clrf	(_BVH2_Appl_Layer$1046+2)^(0+384)
  4953  0EA8  00C9               	movwf	(_BVH2_Appl_Layer$1046+1)^(0+384)
  4954  0EA9  01C8               	clrf	_BVH2_Appl_Layer$1046^(0+384)
  4955  0EAA                     l1593:	
  4956  0EAA  084B               	movf	(_BVH2_Appl_Layer$1046+3)^(0+384),w
  4957  0EAB  0022               	movlb	2	; select bank2
  4958  0EAC  00E5               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
  4959  0EAD  0023               	movlb	3	; select bank3
  4960  0EAE  084A               	movf	(_BVH2_Appl_Layer$1046+2)^(0+384),w
  4961  0EAF  0022               	movlb	2	; select bank2
  4962  0EB0  00E4               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
  4963  0EB1  0023               	movlb	3	; select bank3
  4964  0EB2  0849               	movf	(_BVH2_Appl_Layer$1046+1)^(0+384),w
  4965  0EB3  0022               	movlb	2	; select bank2
  4966  0EB4  00E3               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
  4967  0EB5  0023               	movlb	3	; select bank3
  4968  0EB6  0848               	movf	_BVH2_Appl_Layer$1046^(0+384),w
  4969  0EB7  0022               	movlb	2	; select bank2
  4970  0EB8  2EBF               	goto	L28
  4971  0EB9                     l10049:	
  4972  0EB9  3002               	movlw	2
  4973  0EBA  01E5               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
  4974  0EBB  00E4               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
  4975  0EBC  3077               	movlw	119
  4976  0EBD  00E3               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
  4977  0EBE  3040               	movlw	64
  4978  0EBF                     L28:	
  4979  0EBF  00E2               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
  4980                           
  4981                           ;BVH2_Appl_Layer.c: 1653: Sb1_BVH2_Appl_Layer_FirstRun = 0;
  4982  0EC0  01ED               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
  4983  0EC1  0008               	return
  4984  0EC2                     __end_of_BVH2_Appl_Layer:	
  4985  0EC2                     __ptext35:	
  4986 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
  4987 ;; Defined at:
  4988 ;;		line 1677 in file "../T_Link/BVH2_Appl_Layer.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;		None
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;		None
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  1    wreg      void 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0
  4997 ;; Tracked objects:
  4998 ;;		On entry : 1F/1
  4999 ;;		On exit  : 1F/1
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5002 ;;      Params:         0       0       0       0       0       0       0       0
  5003 ;;      Locals:         0       0       0       0       0       0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0       0
  5005 ;;      Totals:         0       0       0       0       0       0       0       0
  5006 ;;Total ram usage:        0 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    3
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_BVH2_Appl_Layer
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           
  5017                           ;psect for function _Cb1_Current_An___High_node_fcn1
  5018  0EC2                     _Cb1_Current_An___High_node_fcn1:	
  5019                           
  5020                           ;BVH2_Appl_Layer.c: 1681: if (bool_mat_currAlarm_bldc) {
  5021                           
  5022                           ;incstack = 0
  5023                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
  5024  0EC2  085C               	movf	_bool_mat_currAlarm_bldc^(0+128),w
  5025  0EC3  1903               	btfsc	3,2
  5026  0EC4  2ED1               	goto	l7575
  5027                           
  5028                           ;BVH2_Appl_Layer.c: 1683: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1684: (UInt8)2;
  5029  0EC5  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  5030  0EC6  39F0               	andlw	-16
  5031  0EC7  3802               	iorlw	2
  5032                           
  5033                           ;BVH2_Appl_Layer.c: 1685: Cb1_StateCnt = 0 ;
  5034  0EC8  27B8  3188         	fcall	PL80	;call to abstracted procedure
  5035  0ECA  2ECD               	goto	l7573
  5036  0ECB                     l7577:	
  5037                           
  5038                           ;BVH2_Appl_Layer.c: 1691: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int);BVH2_Appl_Layer.c: 1692: (UInt8)5;
  5039                           
  5040                           ;BVH2_Appl_Layer.c: 1693: Cb1_oShutoff = 0;
  5041                           
  5042                           ;BVH2_Appl_Layer.c: 1694: Cb1_oCurrentAlarm = 0;
  5043  0ECB  279F               	fcall	PL46	;call to abstracted procedure
  5044                           
  5045                           ;BVH2_Appl_Layer.c: 1695: Cb1_RestartCounter = 0 ;
  5046  0ECC  01CC               	clrf	_Cb1_RestartCounter^(0+128)
  5047  0ECD                     l7573:	
  5048                           
  5049                           ;BVH2_Appl_Layer.c: 1686: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
  5050  0ECD  3030               	movlw	48
  5051  0ECE  0021               	movlb	1	; select bank1
  5052  0ECF  04CB               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
  5053                           
  5054                           ;BVH2_Appl_Layer.c: 1687: }
  5055  0ED0  0008               	return
  5056  0ED1                     l7575:	
  5057                           
  5058                           ;BVH2_Appl_Layer.c: 1688: else {;BVH2_Appl_Layer.c: 1689: if (Cb1_StateCnt > 100) {
  5059  0ED1  3000               	movlw	0
  5060  0ED2  0020               	movlb	0	; select bank0
  5061  0ED3  0241               	subwf	_Cb1_StateCnt+1,w
  5062  0ED4  3065               	movlw	101
  5063  0ED5  1903               	skipnz
  5064  0ED6  0240               	subwf	_Cb1_StateCnt,w
  5065  0ED7  1803               	btfsc	3,0
  5066  0ED8  2ECB               	goto	l7577
  5067                           
  5068                           ;BVH2_Appl_Layer.c: 1698: else {;BVH2_Appl_Layer.c: 1699: SIBFS_Current_Analysis_High_b.
      +                          Cb1_glflag = 1 ;
  5069  0ED9  0021               	movlb	1	; select bank1
  5070  0EDA  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  5071  0EDB  39CF               	andlw	-49
  5072  0EDC  3810               	iorlw	16
  5073  0EDD  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  5074  0EDE  0008               	return
  5075  0EDF                     __end_of_Cb1_Current_An___High_node_fcn1:	
  5076  0EDF                     __ptext33:	
  5077 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
  5078 ;; Defined at:
  5079 ;;		line 1842 in file "../T_Link/BVH2_Appl_Layer.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;		None
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  1    wreg      void 
  5086 ;; Registers used:
  5087 ;;		wreg, status,2, status,0
  5088 ;; Tracked objects:
  5089 ;;		On entry : 1F/1
  5090 ;;		On exit  : 1F/1
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5093 ;;      Params:         0       0       0       0       0       0       0       0
  5094 ;;      Locals:         0       0       0       0       0       0       0       0
  5095 ;;      Temps:          0       0       0       0       0       0       0       0
  5096 ;;      Totals:         0       0       0       0       0       0       0       0
  5097 ;;Total ram usage:        0 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    3
  5100 ;; This function calls:
  5101 ;;		Nothing
  5102 ;; This function is called by:
  5103 ;;		_BVH2_Appl_Layer
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           
  5108                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
  5109  0EDF                     _Cb44_Pic_etat_monitor_node_fcn1:	
  5110                           
  5111                           ;BVH2_Appl_Layer.c: 1852: else {;BVH2_Appl_Layer.c: 1853: if (Cb44_StateCnt > 5) {
  5112                           
  5113                           ;BVH2_Appl_Layer.c: 1846: if (bool_mat_pic_etat) {
  5114                           
  5115                           ;incstack = 0
  5116                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
  5117  0EDF  3000               	movlw	0
  5118  0EE0  0020               	movlb	0	; select bank0
  5119  0EE1  023F               	subwf	_Cb44_StateCnt+1,w
  5120  0EE2  3006               	movlw	6
  5121  0EE3  1903               	skipnz
  5122  0EE4  023E               	subwf	_Cb44_StateCnt,w
  5123  0EE5  1C03               	skipc
  5124  0EE6  2EF0               	goto	l7425
  5125                           
  5126                           ;BVH2_Appl_Layer.c: 1855: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
  5127  0EE7  0021               	movlb	1	; select bank1
  5128  0EE8  0849               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  5129  0EE9  39F8               	andlw	-8
  5130  0EEA  3803               	iorlw	3
  5131  0EEB  00C9               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  5132  0EEC  3018               	movlw	24
  5133                           
  5134                           ;BVH2_Appl_Layer.c: 1857: Cb44_oAlarm = 0;
  5135  0EED  01C1               	clrf	_Cb44_oShutoff^(0+128)
  5136                           
  5137                           ;BVH2_Appl_Layer.c: 1858: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
  5138  0EEE  04C9               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
  5139                           
  5140                           ;BVH2_Appl_Layer.c: 1859: }
  5141  0EEF  0008               	return
  5142  0EF0                     l7425:	
  5143                           
  5144                           ;BVH2_Appl_Layer.c: 1860: else {;BVH2_Appl_Layer.c: 1861: SIBFS_Pic_etat_monitor_b.Cb44_
      +                          glflag = 1 ;
  5145  0EF0  0021               	movlb	1	; select bank1
  5146  0EF1  0849               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
  5147  0EF2  39E7               	andlw	-25
  5148  0EF3  3808               	iorlw	8
  5149  0EF4  00C9               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
  5150  0EF5  0008               	return
  5151  0EF6                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
  5152  0EF6                     __ptext30:	
  5153 ;; *************** function ___lmul *****************
  5154 ;; Defined at:
  5155 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  multiplier      4    4[BANK0 ] unsigned long 
  5158 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;  product         4   12[BANK0 ] unsigned long 
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  4    4[BANK0 ] unsigned long 
  5163 ;; Registers used:
  5164 ;;		wreg, status,2, status,0
  5165 ;; Tracked objects:
  5166 ;;		On entry : 1F/0
  5167 ;;		On exit  : 1F/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5170 ;;      Params:         0       8       0       0       0       0       0       0
  5171 ;;      Locals:         0       4       0       0       0       0       0       0
  5172 ;;      Temps:          0       0       0       0       0       0       0       0
  5173 ;;      Totals:         0      12       0       0       0       0       0       0
  5174 ;;Total ram usage:       12 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    3
  5177 ;; This function calls:
  5178 ;;		Nothing
  5179 ;; This function is called by:
  5180 ;;		_BVH2_Appl_Layer
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           
  5185                           ;psect for function ___lmul
  5186  0EF6                     ___lmul:	
  5187                           
  5188                           ;incstack = 0
  5189                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5190  0EF6  01AC               	clrf	___lmul@product
  5191  0EF7  01AD               	clrf	___lmul@product+1
  5192  0EF8  01AE               	clrf	___lmul@product+2
  5193  0EF9  01AF               	clrf	___lmul@product+3
  5194  0EFA                     l1851:	
  5195  0EFA  1C24               	btfss	___lmul@multiplier,0
  5196  0EFB  2F04               	goto	l7609
  5197  0EFC  0828               	movf	___lmul@multiplicand,w
  5198  0EFD  07AC               	addwf	___lmul@product,f
  5199  0EFE  0829               	movf	___lmul@multiplicand+1,w
  5200  0EFF  3DAD               	addwfc	___lmul@product+1,f
  5201  0F00  082A               	movf	___lmul@multiplicand+2,w
  5202  0F01  3DAE               	addwfc	___lmul@product+2,f
  5203  0F02  082B               	movf	___lmul@multiplicand+3,w
  5204  0F03  3DAF               	addwfc	___lmul@product+3,f
  5205  0F04                     l7609:	
  5206  0F04  35A8               	lslf	___lmul@multiplicand,f
  5207  0F05  0DA9               	rlf	___lmul@multiplicand+1,f
  5208  0F06  0DAA               	rlf	___lmul@multiplicand+2,f
  5209  0F07  0DAB               	rlf	___lmul@multiplicand+3,f
  5210  0F08  36A7               	lsrf	___lmul@multiplier+3,f
  5211  0F09  0CA6               	rrf	___lmul@multiplier+2,f
  5212  0F0A  0CA5               	rrf	___lmul@multiplier+1,f
  5213  0F0B  0CA4               	rrf	___lmul@multiplier,f
  5214  0F0C  0827               	movf	___lmul@multiplier+3,w
  5215  0F0D  0426               	iorwf	___lmul@multiplier+2,w
  5216  0F0E  0425               	iorwf	___lmul@multiplier+1,w
  5217  0F0F  0424               	iorwf	___lmul@multiplier,w
  5218  0F10  1D03               	skipz
  5219  0F11  2EFA               	goto	l1851
  5220  0F12  082F               	movf	___lmul@product+3,w
  5221  0F13  00A7               	movwf	?___lmul+3
  5222  0F14  082E               	movf	___lmul@product+2,w
  5223  0F15  00A6               	movwf	?___lmul+2
  5224  0F16  082D               	movf	___lmul@product+1,w
  5225  0F17  00A5               	movwf	?___lmul+1
  5226  0F18  082C               	movf	___lmul@product,w
  5227  0F19  00A4               	movwf	?___lmul
  5228  0F1A  0008               	return
  5229  0F1B                     __end_of___lmul:	
  5230  0F1B                     __ptext24:	
  5231 ;; *************** function _Get_Analog_Value *****************
  5232 ;; Defined at:
  5233 ;;		line 442 in file "../adc.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      void 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 1F/0
  5244 ;;		On exit  : 1F/2
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5247 ;;      Params:         0       0       0       0       0       0       0       0
  5248 ;;      Locals:         0       0       0       0       0       0       0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0       0
  5250 ;;      Totals:         0       0       0       0       0       0       0       0
  5251 ;;Total ram usage:        0 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    4
  5254 ;; This function calls:
  5255 ;;		_FILTER_IPhase
  5256 ;;		_FILTER_Temp
  5257 ;;		_FILTER_Ubat
  5258 ;; This function is called by:
  5259 ;;		_main
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           
  5264                           ;psect for function _Get_Analog_Value
  5265  0F1B                     _Get_Analog_Value:	
  5266                           
  5267                           ;adc.c: 446: FILTER_Ubat( );
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5271  0F1B  3192  225F  3188   	fcall	_FILTER_Ubat
  5272                           
  5273                           ;adc.c: 447: FILTER_IPhase( );
  5274  0F1E  3182  228E         	fcall	_FILTER_IPhase
  5275                           
  5276                           ;adc.c: 448: FILTER_Temp( );
  5277  0F20  3182  2A6C         	ljmp	l5219
  5278  0F22                     __end_of_Get_Analog_Value:	
  5279  0F22                     __ptext23:	
  5280 ;; *************** function _InitMotorStop *****************
  5281 ;; Defined at:
  5282 ;;		line 2221 in file "../bldc.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;		None
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;		None
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  1    wreg      void 
  5289 ;; Registers used:
  5290 ;;		status,2
  5291 ;; Tracked objects:
  5292 ;;		On entry : 1F/1
  5293 ;;		On exit  : 1F/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5296 ;;      Params:         0       0       0       0       0       0       0       0
  5297 ;;      Locals:         0       0       0       0       0       0       0       0
  5298 ;;      Temps:          0       0       0       0       0       0       0       0
  5299 ;;      Totals:         0       0       0       0       0       0       0       0
  5300 ;;Total ram usage:        0 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    3
  5303 ;; This function calls:
  5304 ;;		Nothing
  5305 ;; This function is called by:
  5306 ;;		_main
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function _InitMotorStop
  5312  0F22                     _InitMotorStop:	
  5313                           
  5314                           ;bldc.c: 2226: if( 1 == MotorFlags.bits.B6 )
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in _InitMotorStop: [status,2]
  5318  0F22  0020               	movlb	0	; select bank0
  5319  0F23  1F4D               	btfss	_MotorFlags,6
  5320  0F24  0008               	return
  5321                           
  5322                           ;bldc.c: 2229: {;bldc.c: 2231: LATC1 = 0;
  5323  0F25  0022               	movlb	2	; select bank2
  5324  0F26  108E               	bcf	14,1	;volatile
  5325                           
  5326                           ;bldc.c: 2232: LATC3 = 0;
  5327  0F27  118E               	bcf	14,3	;volatile
  5328                           
  5329                           ;bldc.c: 2233: LATC4 = 0;
  5330  0F28  120E               	bcf	14,4	;volatile
  5331                           
  5332                           ;bldc.c: 2235: CCP1ASE = 0;
  5333  0F29  0025               	movlb	5	; select bank5
  5334  0F2A  1395               	bcf	21,7	;volatile
  5335                           
  5336                           ;bldc.c: 2236: CCPR1L = 0;
  5337  0F2B  0191               	clrf	17	;volatile
  5338                           
  5339                           ;bldc.c: 2237: MotorFlags.bits.B6 = 0;
  5340  0F2C  0020               	movlb	0	; select bank0
  5341  0F2D  134D               	bcf	_MotorFlags,6
  5342                           
  5343                           ;bldc.c: 2238: MotorFlags.bits.B7 = 0;
  5344  0F2E  13CD               	bcf	_MotorFlags,7
  5345  0F2F  0008               	return
  5346  0F30                     __end_of_InitMotorStop:	
  5347  0F30                     __ptext3:	
  5348 ;; *************** function _clear_timer *****************
  5349 ;; Defined at:
  5350 ;;		line 302 in file "../timer.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  ui8_TmrNb       1    wreg     unsigned char 
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;  ui8_TmrNb       1    4[BANK0 ] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  1    wreg      void 
  5357 ;; Registers used:
  5358 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5359 ;; Tracked objects:
  5360 ;;		On entry : 1F/0
  5361 ;;		On exit  : 17/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5364 ;;      Params:         0       0       0       0       0       0       0       0
  5365 ;;      Locals:         0       1       0       0       0       0       0       0
  5366 ;;      Temps:          0       0       0       0       0       0       0       0
  5367 ;;      Totals:         0       1       0       0       0       0       0       0
  5368 ;;Total ram usage:        1 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    3
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_main
  5375 ;;		_timer_init
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           
  5380                           ;psect for function _clear_timer
  5381  0F30                     _clear_timer:	
  5382                           
  5383                           ;incstack = 0
  5384                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  5385                           ;clear_timer@ui8_TmrNb stored from wreg
  5386  0F30  00A4               	movwf	clear_timer@ui8_TmrNb
  5387                           
  5388                           ;timer.c: 306: switch( ui8_TmrNb )
  5389  0F31  2F3F               	goto	l5179
  5390  0F32                     l5167:	
  5391                           
  5392                           ;timer.c: 312: {;timer.c: 314: TMR0 = 0;
  5393  0F32  0195               	clrf	21	;volatile
  5394                           
  5395                           ;timer.c: 315: break;
  5396  0F33  0008               	return
  5397  0F34                     l5169:	
  5398                           
  5399                           ;timer.c: 322: {;timer.c: 324: TMR1L = 0x00;
  5400  0F34  0196               	clrf	22	;volatile
  5401                           
  5402                           ;timer.c: 325: TMR1H = 0x00;
  5403  0F35  0197               	clrf	23	;volatile
  5404                           
  5405                           ;timer.c: 326: break;
  5406  0F36  0008               	return
  5407  0F37                     l5171:	
  5408                           
  5409                           ;timer.c: 333: {;timer.c: 335: TMR2 = 0;
  5410  0F37  019A               	clrf	26	;volatile
  5411                           
  5412                           ;timer.c: 336: break;
  5413  0F38  0008               	return
  5414  0F39                     l5173:	
  5415                           
  5416                           ;timer.c: 343: {;timer.c: 345: TMR4 = 0;
  5417  0F39  0028               	movlb	8	; select bank8
  5418  0F3A  0195               	clrf	21	;volatile
  5419                           
  5420                           ;timer.c: 346: break;
  5421  0F3B  0008               	return
  5422  0F3C                     l5175:	
  5423                           
  5424                           ;timer.c: 353: {;timer.c: 355: TMR6 = 0;
  5425  0F3C  0028               	movlb	8	; select bank8
  5426  0F3D  019C               	clrf	28	;volatile
  5427                           
  5428                           ;timer.c: 356: break;
  5429  0F3E  0008               	return
  5430  0F3F                     l5179:	
  5431  0F3F  0824               	movf	clear_timer@ui8_TmrNb,w
  5432                           
  5433                           ; Switch size 1, requested type "space"
  5434                           ; Number of cases is 5, Range of values is 0 to 6
  5435                           ; switch strategies available:
  5436                           ; Name         Instructions Cycles
  5437                           ; simple_byte           16     9 (average)
  5438                           ; direct_byte           20     6 (fixed)
  5439                           ; jumptable            260     6 (fixed)
  5440                           ;	Chosen strategy is simple_byte
  5441  0F40  3A00               	xorlw	0	; case 0
  5442  0F41  1903               	skipnz
  5443  0F42  2F32               	goto	l5167
  5444  0F43  3A01               	xorlw	1	; case 1
  5445  0F44  1903               	skipnz
  5446  0F45  2F34               	goto	l5169
  5447  0F46  3A03               	xorlw	3	; case 2
  5448  0F47  1903               	skipnz
  5449  0F48  2F37               	goto	l5171
  5450  0F49  3A06               	xorlw	6	; case 4
  5451  0F4A  1903               	skipnz
  5452  0F4B  2F39               	goto	l5173
  5453  0F4C  3A02               	xorlw	2	; case 6
  5454  0F4D  1903               	skipnz
  5455  0F4E  2F3C               	goto	l5175
  5456  0F4F  2F50               	goto	l1732
  5457  0F50                     l1732:	
  5458  0F50  0008               	return
  5459  0F51                     __end_of_clear_timer:	
  5460  0F51                     PL6:	
  5461  0F51  0020               	movlb	0	; select bank0
  5462  0F52  00B3               	movwf	??_BVH2_Appl_Layer+1
  5463  0F53  0021               	movlb	1	; select bank1
  5464  0F54  082B               	movf	(_ui16_mat_Current+1)^(0+128),w
  5465  0F55  0020               	movlb	0	; select bank0
  5466  0F56  0233               	subwf	??_BVH2_Appl_Layer+1,w
  5467  0F57  1D03               	skipz
  5468  0F58  0008               	return
  5469  0F59  0021               	movlb	1	; select bank1
  5470  0F5A  082A               	movf	_ui16_mat_Current^(0+128),w
  5471  0F5B  0020               	movlb	0	; select bank0
  5472  0F5C  0232               	subwf	??_BVH2_Appl_Layer,w
  5473  0F5D  0008               	return
  5474  0F5E                     __end_ofPL6:	
  5475  0F5E                     PL8:	
  5476  0F5E  0022               	movlb	2	; select bank2
  5477  0F5F  086E               	movf	_ui16_Current_Thresh^(0+256),w
  5478  0F60  3EFE               	addlw	254
  5479  0F61  0020               	movlb	0	; select bank0
  5480  0F62  00B2               	movwf	??_BVH2_Appl_Layer
  5481  0F63  30FF               	movlw	255
  5482  0F64  0022               	movlb	2	; select bank2
  5483  0F65  3D6F               	addwfc	(_ui16_Current_Thresh+1)^(0+256),w
  5484  0F66  0008               	return
  5485  0F67                     __end_ofPL8:	
  5486  0F67                     PL10:	
  5487  0F67  0022               	movlb	2	; select bank2
  5488  0F68  086E               	movf	_ui16_Current_Thresh^(0+256),w
  5489  0F69  3E02               	addlw	2
  5490  0F6A  0020               	movlb	0	; select bank0
  5491  0F6B  00B2               	movwf	??_BVH2_Appl_Layer
  5492  0F6C  3000               	movlw	0
  5493  0F6D  0022               	movlb	2	; select bank2
  5494  0F6E  3D6F               	addwfc	(_ui16_Current_Thresh+1)^(0+256),w
  5495  0F6F  0020               	movlb	0	; select bank0
  5496  0F70  00B3               	movwf	??_BVH2_Appl_Layer+1
  5497  0F71  0021               	movlb	1	; select bank1
  5498  0F72  022B               	subwf	(_ui16_mat_Current+1)^(0+128),w
  5499  0F73  1D03               	skipz
  5500  0F74  0008               	return
  5501  0F75  0020               	movlb	0	; select bank0
  5502  0F76  0832               	movf	??_BVH2_Appl_Layer,w
  5503  0F77  0021               	movlb	1	; select bank1
  5504  0F78  022A               	subwf	_ui16_mat_Current^(0+128),w
  5505  0F79  0008               	return
  5506  0F7A                     __end_ofPL10:	
  5507  0F7A                     PL30:	
  5508  0F7A  0021               	movlb	1	; select bank1
  5509  0F7B  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  5510  0F7C  39F8               	andlw	-8
  5511  0F7D  3805               	iorlw	5
  5512  0F7E  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  5513  0F7F  0020               	movlb	0	; select bank0
  5514  0F80  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  5515  0F81  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  5516  0F82  0022               	movlb	2	; select bank2
  5517  0F83  01A3               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+256)
  5518  0F84  01A4               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+256)
  5519  0F85  0021               	movlb	1	; select bank1
  5520  0F86  01B4               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  5521  0F87  0022               	movlb	2	; select bank2
  5522  0F88  0008               	return
  5523  0F89                     __end_ofPL30:	
  5524  0F89                     PL32:	
  5525  0F89  0021               	movlb	1	; select bank1
  5526  0F8A  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
  5527  0F8B  39F8               	andlw	-8
  5528  0F8C  3804               	iorlw	4
  5529  0F8D  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
  5530  0F8E  0020               	movlb	0	; select bank0
  5531  0F8F  01BC               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
  5532  0F90  01BD               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
  5533  0F91  0021               	movlb	1	; select bank1
  5534  0F92  01B4               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128)
  5535  0F93  0AB4               	incf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+128),f
  5536  0F94  0022               	movlb	2	; select bank2
  5537  0F95  0008               	return
  5538  0F96                     __end_ofPL32:	
  5539  0F96                     PL44:	
  5540  0F96  0023               	movlb	3	; select bank3
  5541  0F97  085C               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+384),w
  5542  0F98  0020               	movlb	0	; select bank0
  5543  0F99  00A7               	movwf	___wmul@multiplicand+1
  5544  0F9A  0023               	movlb	3	; select bank3
  5545  0F9B  085B               	movf	BVH2_Appl_Layer@Sb2_Error^(0+384),w
  5546  0F9C  0020               	movlb	0	; select bank0
  5547  0F9D  00A6               	movwf	___wmul@multiplicand
  5548  0F9E  0008               	return
  5549  0F9F                     __end_ofPL44:	
  5550  0F9F                     PL46:	
  5551  0F9F  0021               	movlb	1	; select bank1
  5552  0FA0  084B               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
  5553  0FA1  39F0               	andlw	-16
  5554  0FA2  3805               	iorlw	5
  5555  0FA3  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  5556  0FA4  01C7               	clrf	_Cb1_oShutoff^(0+128)
  5557  0FA5  01C8               	clrf	_Cb1_oCurrentAlarm^(0+128)
  5558  0FA6  0008               	return
  5559  0FA7                     __end_ofPL46:	
  5560  0FA7                     PL50:	
  5561  0FA7  3A80               	xorlw	128
  5562  0FA8  0020               	movlb	0	; select bank0
  5563  0FA9  00B2               	movwf	??_BVH2_Appl_Layer
  5564  0FAA  3080               	movlw	128
  5565  0FAB  0232               	subwf	??_BVH2_Appl_Layer,w
  5566  0FAC  0008               	return
  5567  0FAD                     __end_ofPL50:	
  5568  0FAD                     PL58:	
  5569  0FAD  0020               	movlb	0	; select bank0
  5570  0FAE  00B2               	movwf	??_BVH2_Appl_Layer
  5571  0FAF  0CB2               	rrf	??_BVH2_Appl_Layer,f
  5572  0FB0  0C32               	rrf	??_BVH2_Appl_Layer,w
  5573  0FB1  3903               	andlw	3
  5574  0FB2  3A03               	xorlw	3
  5575  0FB3  0008               	return
  5576  0FB4                     __end_ofPL58:	
  5577  0FB4                     PL76:	
  5578  0FB4  3000               	movlw	0
  5579  0FB5  0020               	movlb	0	; select bank0
  5580  0FB6  0243               	subwf	_ui16_Speed_mat+1,w
  5581  0FB7  3405               	retlw	5
  5582  0FB8                     __end_ofPL76:	
  5583  0FB8                     PL80:	
  5584  0FB8  00CB               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
  5585  0FB9  0020               	movlb	0	; select bank0
  5586  0FBA  01C0               	clrf	_Cb1_StateCnt
  5587  0FBB  01C1               	clrf	_Cb1_StateCnt+1
  5588  0FBC  0008               	return
  5589  0FBD                     __end_ofPL80:	
  5590  0FBD                     PL88:	
  5591  0FBD  3001               	movlw	1
  5592  0FBE  0021               	movlb	1	; select bank1
  5593  0FBF  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
  5594  0FC0  3491               	retlw	145
  5595  0FC1                     __end_ofPL88:	
  5596  0FC1                     __ptext32:	
  5597 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
  5598 ;; Defined at:
  5599 ;;		line 1883 in file "../T_Link/BVH2_Appl_Layer.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;		None
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;		None
  5604 ;; Return value:  Size  Location     Type
  5605 ;;                  1    wreg      void 
  5606 ;; Registers used:
  5607 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5608 ;; Tracked objects:
  5609 ;;		On entry : 1E/1
  5610 ;;		On exit  : 1F/1
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5613 ;;      Params:         0       0       0       0       0       0       0       0
  5614 ;;      Locals:         0       0       0       0       0       0       0       0
  5615 ;;      Temps:          0       0       0       0       0       0       0       0
  5616 ;;      Totals:         0       0       0       0       0       0       0       0
  5617 ;;Total ram usage:        0 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    3
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_BVH2_Appl_Layer
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           
  5628                           ;psect for function _Cb56_UbatHandling_node_fcn2
  5629  0FC1                     _Cb56_UbatHandling_node_fcn2:	
  5630                           
  5631                           ;BVH2_Appl_Layer.c: 1886: if (((UInt8)ui8_BattVolt_mat) > 147) {
  5632                           
  5633                           ;incstack = 0
  5634                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
  5635  0FC1  3094               	movlw	148
  5636  0FC2  0021               	movlb	1	; select bank1
  5637  0FC3  022C               	subwf	_ui8_BattVolt_mat^(0+128),w
  5638  0FC4  1803               	btfsc	3,0
  5639  0FC5  2FCD               	goto	l7549
  5640  0FC6  2FE5               	goto	l7555
  5641  0FC7                     l1636:	
  5642                           ;BVH2_Appl_Layer.c: 1889: case 2: {
  5643                           
  5644                           
  5645                           ;BVH2_Appl_Layer.c: 1890: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
  5646  0FC7  124C               	bcf	_SIBFS_UbatHandling_b,4
  5647                           
  5648                           ;BVH2_Appl_Layer.c: 1891: break;
  5649  0FC8  2FD7               	goto	l1637
  5650  0FC9                     l1638:	
  5651                           ;BVH2_Appl_Layer.c: 1892: };BVH2_Appl_Layer.c: 1893: case 3: {
  5652                           
  5653                           
  5654                           ;BVH2_Appl_Layer.c: 1894: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
  5655  0FC9  12CC               	bcf	_SIBFS_UbatHandling_b,5
  5656                           
  5657                           ;BVH2_Appl_Layer.c: 1895: break;
  5658  0FCA  2FD7               	goto	l1637
  5659  0FCB                     l1639:	
  5660                           ;BVH2_Appl_Layer.c: 1896: };BVH2_Appl_Layer.c: 1897: default: {
  5661                           
  5662                           
  5663                           ;BVH2_Appl_Layer.c: 1898: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
  5664  0FCB  134C               	bcf	_SIBFS_UbatHandling_b,6
  5665                           
  5666                           ;BVH2_Appl_Layer.c: 1899: };BVH2_Appl_Layer.c: 1900: }
  5667  0FCC  2FD7               	goto	l1637
  5668  0FCD                     l7549:	
  5669  0FCD  0020               	movlb	0	; select bank0
  5670  0FCE  084C               	movf	_SIBFS_UbatHandling_b,w
  5671  0FCF  3907               	andlw	7
  5672                           
  5673                           ; Switch size 1, requested type "space"
  5674                           ; Number of cases is 2, Range of values is 2 to 3
  5675                           ; switch strategies available:
  5676                           ; Name         Instructions Cycles
  5677                           ; simple_byte            7     4 (average)
  5678                           ; direct_byte           13     9 (fixed)
  5679                           ; jumptable            263     9 (fixed)
  5680                           ;	Chosen strategy is simple_byte
  5681  0FD0  3A02               	xorlw	2	; case 2
  5682  0FD1  1903               	skipnz
  5683  0FD2  2FC7               	goto	l1636
  5684  0FD3  3A01               	xorlw	1	; case 3
  5685  0FD4  1903               	skipnz
  5686  0FD5  2FC9               	goto	l1638
  5687  0FD6  2FCB               	goto	l1639
  5688  0FD7                     l1637:	
  5689                           
  5690                           ;BVH2_Appl_Layer.c: 1901: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
  5691  0FD7  164C               	bsf	_SIBFS_UbatHandling_b,4
  5692  0FD8                     L33:	
  5693                           
  5694                           ;BVH2_Appl_Layer.c: 1902: Cb56_odPumpOff = 1;
  5695  0FD8  0021               	movlb	1	; select bank1
  5696  0FD9  01BE               	clrf	_Cb56_odPumpOff^(0+128)
  5697  0FDA  0ABE               	incf	_Cb56_odPumpOff^(0+128),f
  5698                           
  5699                           ;BVH2_Appl_Layer.c: 1903: Cb56_odFixedValueSel = 0;
  5700  0FDB  01BF               	clrf	_Cb56_odFixedValueSel^(0+128)
  5701                           
  5702                           ;BVH2_Appl_Layer.c: 1904: Cb56_oUbat_Alarm_High = 1;
  5703  0FDC  01C0               	clrf	_Cb56_oUbat_Alarm_High^(0+128)
  5704  0FDD  0AC0               	incf	_Cb56_oUbat_Alarm_High^(0+128),f
  5705                           
  5706                           ;BVH2_Appl_Layer.c: 1905: }
  5707  0FDE  0008               	return
  5708  0FDF                     l1642:	
  5709                           ;BVH2_Appl_Layer.c: 1908: case 2: {
  5710                           
  5711                           
  5712                           ;BVH2_Appl_Layer.c: 1909: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
  5713  0FDF  124C               	bcf	_SIBFS_UbatHandling_b,4
  5714                           
  5715                           ;BVH2_Appl_Layer.c: 1910: break;
  5716  0FE0  2FEF               	goto	l7557
  5717  0FE1                     l1644:	
  5718                           ;BVH2_Appl_Layer.c: 1911: };BVH2_Appl_Layer.c: 1912: case 3: {
  5719                           
  5720                           
  5721                           ;BVH2_Appl_Layer.c: 1913: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
  5722  0FE1  12CC               	bcf	_SIBFS_UbatHandling_b,5
  5723                           
  5724                           ;BVH2_Appl_Layer.c: 1914: break;
  5725  0FE2  2FEF               	goto	l7557
  5726  0FE3                     l1645:	
  5727                           ;BVH2_Appl_Layer.c: 1915: };BVH2_Appl_Layer.c: 1916: default: {
  5728                           
  5729                           
  5730                           ;BVH2_Appl_Layer.c: 1917: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
  5731  0FE3  134C               	bcf	_SIBFS_UbatHandling_b,6
  5732                           
  5733                           ;BVH2_Appl_Layer.c: 1918: };BVH2_Appl_Layer.c: 1919: }
  5734  0FE4  2FEF               	goto	l7557
  5735  0FE5                     l7555:	
  5736  0FE5  0020               	movlb	0	; select bank0
  5737  0FE6  084C               	movf	_SIBFS_UbatHandling_b,w
  5738  0FE7  3907               	andlw	7
  5739                           
  5740                           ; Switch size 1, requested type "space"
  5741                           ; Number of cases is 2, Range of values is 2 to 3
  5742                           ; switch strategies available:
  5743                           ; Name         Instructions Cycles
  5744                           ; simple_byte            7     4 (average)
  5745                           ; direct_byte           13     9 (fixed)
  5746                           ; jumptable            263     9 (fixed)
  5747                           ;	Chosen strategy is simple_byte
  5748  0FE8  3A02               	xorlw	2	; case 2
  5749  0FE9  1903               	skipnz
  5750  0FEA  2FDF               	goto	l1642
  5751  0FEB  3A01               	xorlw	1	; case 3
  5752  0FEC  1903               	skipnz
  5753  0FED  2FE1               	goto	l1644
  5754  0FEE  2FE3               	goto	l1645
  5755  0FEF                     l7557:	
  5756                           
  5757                           ;BVH2_Appl_Layer.c: 1922: if (((UInt8)ui8_BattVolt_mat) < 45) {
  5758  0FEF  302D               	movlw	45
  5759  0FF0  0021               	movlb	1	; select bank1
  5760  0FF1  022C               	subwf	_ui8_BattVolt_mat^(0+128),w
  5761  0FF2  1803               	skipnc
  5762  0FF3  2FF7               	goto	l1646
  5763                           
  5764                           ;BVH2_Appl_Layer.c: 1924: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
  5765  0FF4  0020               	movlb	0	; select bank0
  5766  0FF5  16CC               	bsf	_SIBFS_UbatHandling_b,5
  5767  0FF6  2FD8               	goto	L33
  5768  0FF7                     l1646:	
  5769                           ;BVH2_Appl_Layer.c: 1925: Cb56_odPumpOff = 1;
  5770                           
  5771                           
  5772                           ;BVH2_Appl_Layer.c: 1929: else {;BVH2_Appl_Layer.c: 1931: SIBFS_UbatHandling_b.Cb60_Norm
      +                          alUbat = 1;
  5773                           
  5774                           ;BVH2_Appl_Layer.c: 1932: Cb56_odPumpOff = 0;
  5775                           
  5776                           ;BVH2_Appl_Layer.c: 1933: Cb56_odFixedValueSel = 0;
  5777                           
  5778                           ;BVH2_Appl_Layer.c: 1934: Cb56_oUbat_Alarm_High = 0;
  5779  0FF7  27F9               	fcall	PL54	;call to abstracted procedure
  5780  0FF8  0008               	return
  5781  0FF9                     __end_of_Cb56_UbatHandling_node_fcn2:	
  5782  0FF9                     PL54:	
  5783  0FF9  0020               	movlb	0	; select bank0
  5784  0FFA  174C               	bsf	_SIBFS_UbatHandling_b,6
  5785  0FFB  0021               	movlb	1	; select bank1
  5786  0FFC  01BE               	clrf	_Cb56_odPumpOff^(0+128)
  5787  0FFD  01BF               	clrf	_Cb56_odFixedValueSel^(0+128)
  5788  0FFE  01C0               	clrf	_Cb56_oUbat_Alarm_High^(0+128)
  5789  0FFF  0008               	return
  5790  1000                     __end_ofPL54:	
  5791                           
  5792                           	psect	bitbssBANK0
  5793  0298                     __pbitbssBANK0:	
  5794  0298                     _rising_bemf_flag:	
  5795  0298                     	ds	1
  5796                           
  5797                           	psect	bssBANK0
  5798  003C                     __pbssBANK0:	
  5799  003C                     BVH2_Appl_Layer@Cb24_StateCnt:	
  5800  003C                     	ds	2
  5801  003E                     _Cb44_StateCnt:	
  5802  003E                     	ds	2
  5803  0040                     _Cb1_StateCnt:	
  5804  0040                     	ds	2
  5805  0042                     _ui16_Speed_mat:	
  5806  0042                     	ds	2
  5807  0044                     _ui16_IPhase_bldc:	
  5808  0044                     	ds	2
  5809  0046                     _comm_time:	
  5810  0046                     	ds	2
  5811  0048                     _analog_value:	
  5812  0048                     	ds	2
  5813  004A                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  5814  004A                     	ds	1
  5815  004B                     _Cb34_idPWM:	
  5816  004B                     	ds	1
  5817  004C                     _SIBFS_UbatHandling_b:	
  5818  004C                     	ds	1
  5819  004D                     _MotorFlags:	
  5820  004D                     	ds	1
  5821  004E                     _ui8_duty_cycle_BLDC:	
  5822  004E                     	ds	1
  5823  004F                     _ui8_error_Flags:	
  5824  004F                     	ds	1
  5825  0050                     _windowPtr1:	
  5826  0050                     	ds	1
  5827  0051                     _ui16_Ubat_bldc:	
  5828  0051                     	ds	2
  5829                           
  5830                           	psect	bssBANK1
  5831  00A0                     __pbssBANK1:	
  5832  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  5833  00A0                     	ds	2
  5834  00A2                     BVH2_Appl_Layer@Cb19_Counter:	
  5835  00A2                     	ds	2
  5836  00A4                     _ui16_Capt_Val2:	
  5837  00A4                     	ds	2
  5838  00A6                     _ui16_Capt_Val1:	
  5839  00A6                     	ds	2
  5840  00A8                     _ui16_Capt_Val0:	
  5841  00A8                     	ds	2
  5842  00AA                     _ui16_mat_Current:	
  5843  00AA                     	ds	2
  5844  00AC                     _ui8_BattVolt_mat:	
  5845  00AC                     	ds	2
  5846  00AE                     _ui16_Ubemf_bldc:	
  5847  00AE                     	ds	2
  5848  00B0                     _ui16_phase_advancement:	
  5849  00B0                     	ds	2
  5850  00B2                     _ui16_step_cnt:	
  5851  00B2                     	ds	2
  5852  00B4                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  5853  00B4                     	ds	1
  5854  00B5                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  5855  00B5                     	ds	1
  5856  00B6                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  5857  00B6                     	ds	1
  5858  00B7                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  5859  00B7                     	ds	1
  5860  00B8                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  5861  00B8                     	ds	1
  5862  00B9                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  5863  00B9                     	ds	1
  5864  00BA                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  5865  00BA                     	ds	1
  5866  00BB                     BVH2_Appl_Layer@Cb9_StateCnt:	
  5867  00BB                     	ds	1
  5868  00BC                     BVH2_Appl_Layer@Cb51_Counter:	
  5869  00BC                     	ds	1
  5870  00BD                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  5871  00BD                     	ds	1
  5872  00BE                     _Cb56_odPumpOff:	
  5873  00BE                     	ds	1
  5874  00BF                     _Cb56_odFixedValueSel:	
  5875  00BF                     	ds	1
  5876  00C0                     _Cb56_oUbat_Alarm_High:	
  5877  00C0                     	ds	1
  5878  00C1                     _Cb44_oShutoff:	
  5879  00C1                     	ds	1
  5880  00C2                     _Cb34_odPumpOff:	
  5881  00C2                     	ds	1
  5882  00C3                     _Cb34_odFixedValueSel:	
  5883  00C3                     	ds	1
  5884  00C4                     _Cb34_odFixedLowValueSel:	
  5885  00C4                     	ds	1
  5886  00C5                     _Cb34_oPWM_SC_Alarm:	
  5887  00C5                     	ds	1
  5888  00C6                     _Cb34_oPWM_Alarm:	
  5889  00C6                     	ds	1
  5890  00C7                     _Cb1_oShutoff:	
  5891  00C7                     	ds	1
  5892  00C8                     _Cb1_oCurrentAlarm:	
  5893  00C8                     	ds	1
  5894  00C9                     _SIBFS_Pic_etat_monitor_b:	
  5895  00C9                     	ds	1
  5896  00CA                     _SIBFS_PWM_Detection_b:	
  5897  00CA                     	ds	1
  5898  00CB                     _SIBFS_Current_Analysis_High_b:	
  5899  00CB                     	ds	1
  5900  00CC                     _Cb1_RestartCounter:	
  5901  00CC                     	ds	1
  5902  00CD                     _ui8_PWMin_failCnt:	
  5903  00CD                     	ds	1
  5904  00CE                     _ui8_PWMinDC_sav:	
  5905  00CE                     	ds	1
  5906  00CF                     _ui8_Duty_Cycle_In_Ratio:	
  5907  00CF                     	ds	1
  5908  00D0                     _ui8_Pulse_State:	
  5909  00D0                     	ds	1
  5910  00D1                     _ui8_PWMoutvalue:	
  5911  00D1                     	ds	1
  5912  00D2                     _ui8_PWM_FreqCnt:	
  5913  00D2                     	ds	1
  5914  00D3                     _ui8_lastTaskvalue:	
  5915  00D3                     	ds	1
  5916  00D4                     _ui8_Task_Cont100ms:	
  5917  00D4                     	ds	1
  5918  00D5                     _ui8_Task_Cont5ms:	
  5919  00D5                     	ds	1
  5920  00D6                     _ui8_Task_Cont3ms:	
  5921  00D6                     	ds	1
  5922  00D7                     _bool_PWMin_Freq_err_Alarm:	
  5923  00D7                     	ds	1
  5924  00D8                     _bool_UbatAlarm:	
  5925  00D8                     	ds	1
  5926  00D9                     _bool_CPU_TempRedAlarm:	
  5927  00D9                     	ds	1
  5928  00DA                     _bool_PWMin_err_Alarm:	
  5929  00DA                     	ds	1
  5930  00DB                     _bool_ControlLoopMode:	
  5931  00DB                     	ds	1
  5932  00DC                     _bool_mat_currAlarm_bldc:	
  5933  00DC                     	ds	1
  5934  00DD                     _ui8_Kp_mat:	
  5935  00DD                     	ds	1
  5936  00DE                     _ui8_PWM_dc_mat:	
  5937  00DE                     	ds	1
  5938  00DF                     _ui8_duty_cycle_mat:	
  5939  00DF                     	ds	1
  5940  00E0                     _ui8_Task_Cont1ms:	
  5941  00E0                     	ds	1
  5942  00E1                     _bool_HighCurrentAlarm:	
  5943  00E1                     	ds	1
  5944  00E2                     _bool_MotorStalled:	
  5945  00E2                     	ds	1
  5946  00E3                     _bool_DryRunningAlarm:	
  5947  00E3                     	ds	1
  5948  00E4                     _bool_CPU_TempAlarm:	
  5949  00E4                     	ds	1
  5950  00E5                     _Bcnt:	
  5951  00E5                     	ds	1
  5952  00E6                     _ui8_CompFlag:	
  5953  00E6                     	ds	1
  5954  00E7                     _ui8_sampleState:	
  5955  00E7                     	ds	1
  5956  00E8                     _ui8_Ubemf_sel:	
  5957  00E8                     	ds	1
  5958  00E9                     _ui8_UPhase_sel:	
  5959  00E9                     	ds	1
  5960  00EA                     _ui8_IPhase_sel:	
  5961  00EA                     	ds	1
  5962  00EB                     _ui8_BlankingCount:	
  5963  00EB                     	ds	1
  5964  00EC                     _comm_state:	
  5965  00EC                     	ds	1
  5966  00ED                     _ui8_StartupPWM:	
  5967  00ED                     	ds	1
  5968  00EE                     _bool_start_demand_mat:	
  5969  00EE                     	ds	1
  5970                           
  5971                           	psect	bssBANK2
  5972  0120                     __pbssBANK2:	
  5973  0120                     _ui8_current_cal:	
  5974  0120                     	ds	3
  5975  0123                     BVH2_Appl_Layer@Cb24_BadCnt:	
  5976  0123                     	ds	2
  5977  0125                     BVH2_Appl_Layer@Cb14_StateCnt:	
  5978  0125                     	ds	2
  5979  0127                     _ui16_PWM_Input_State:	
  5980  0127                     	ds	2
  5981  0129                     _ui16_Speed_demand_mat_min:	
  5982  0129                     	ds	2
  5983  012B                     _ui16_Speed_demand_mat_Max:	
  5984  012B                     	ds	2
  5985  012D                     _ui16_Speed_demand_mat:	
  5986  012D                     	ds	2
  5987  012F                     _ui8_Ki_mat:	
  5988  012F                     	ds	2
  5989  0131                     _ui16_mat_inpTemp:	
  5990  0131                     	ds	2
  5991  0133                     _ui16_PWM_Freq_In:	
  5992  0133                     	ds	2
  5993  0135                     _ui16_PWM_Freq_mat:	
  5994  0135                     	ds	2
  5995  0137                     _ui16_speed_fil:	
  5996  0137                     	ds	2
  5997  0139                     _ui16_IPhase3_bldc:	
  5998  0139                     	ds	2
  5999  013B                     _ui16_IPhase2_bldc:	
  6000  013B                     	ds	2
  6001  013D                     _phase_delay_counter:	
  6002  013D                     	ds	2
  6003  013F                     _ui16_comm_time_max:	
  6004  013F                     	ds	2
  6005  0141                     _ui16_speed_rar:	
  6006  0141                     	ds	2
  6007  0143                     _ui8_fixed_start_speed_mat:	
  6008  0143                     	ds	2
  6009  0145                     _ui16_NTC_Temp_bldc_mean_cal:	
  6010  0145                     	ds	2
  6011  0147                     _filterTempNTC:	
  6012  0147                     	ds	2
  6013  0149                     _filter3:	
  6014  0149                     	ds	2
  6015  014B                     _filter1:	
  6016  014B                     	ds	2
  6017  014D                     _ui16_NTC_Temp_bldc_mean:	
  6018  014D                     	ds	2
  6019  014F                     _ui16_fir_IPhase_mean:	
  6020  014F                     	ds	2
  6021  0151                     _ui16_fir_Bat_mittel:	
  6022  0151                     	ds	2
  6023  0153                     _ui16_Temp_cal:	
  6024  0153                     	ds	2
  6025  0155                     _ui16_NTC_Temp_bldc:	
  6026  0155                     	ds	2
  6027  0157                     _ui16_IPhase1_bldc:	
  6028  0157                     	ds	2
  6029  0159                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  6030  0159                     	ds	1
  6031  015A                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  6032  015A                     	ds	1
  6033  015B                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  6034  015B                     	ds	1
  6035  015C                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  6036  015C                     	ds	1
  6037  015D                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  6038  015D                     	ds	1
  6039  015E                     _ui16_Duty_Cycle_In:	
  6040  015E                     	ds	2
  6041  0160                     _ui16_IPhase1_bldc_cal:	
  6042  0160                     	ds	2
  6043                           
  6044                           	psect	dataBANK2
  6045  0162                     __pdataBANK2:	
  6046  0162                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  6047  0162                     	ds	4
  6048  0166                     _ui16_I_cal_Ph3:	
  6049  0166                     	ds	2
  6050  0168                     _ui16_I_cal_Ph2:	
  6051  0168                     	ds	2
  6052  016A                     _ui16_I_cal_Ph1:	
  6053  016A                     	ds	2
  6054  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  6055  016C                     	ds	1
  6056  016D                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  6057  016D                     	ds	1
  6058                           
  6059                           	psect	bssBANK3
  6060  01A0                     __pbssBANK3:	
  6061  01A0                     _B:	
  6062  01A0                     	ds	16
  6063  01B0                     _inputArray1:	
  6064  01B0                     	ds	16
  6065  01C0                     _ui16_IPhase3_bldc_cal:	
  6066  01C0                     	ds	2
  6067  01C2                     _ui16_IPhase2_bldc_cal:	
  6068  01C2                     	ds	2
  6069                           
  6070                           	psect	clrtext
  6071  0310                     clear_ram0:	
  6072                           ;	Called with FSR0 containing the base address, and
  6073                           ;	WREG with the size to clear
  6074                           
  6075  0310  0064               	clrwdt	;clear the watchdog before getting into this loop
  6076  0311                     clrloop0:	
  6077  0311  0180               	clrf	0	;clear RAM location pointed to by FSR
  6078  0312  3101               	addfsr 0,1
  6079  0313  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6080  0314  2B11               	goto	clrloop0	;have we reached the end yet?
  6081  0315  3400               	retlw	0	;all done for this memory range, return
  6082                           
  6083                           	psect	cstackBANK3
  6084  01C4                     __pcstackBANK3:	
  6085  01C4                     _BVH2_Appl_Layer$1043:	
  6086                           
  6087                           ; 2 bytes @ 0x0
  6088  01C4                     	ds	2
  6089  01C6                     _BVH2_Appl_Layer$1045:	
  6090                           
  6091                           ; 2 bytes @ 0x2
  6092  01C6                     	ds	2
  6093  01C8                     _BVH2_Appl_Layer$1046:	
  6094                           
  6095                           ; 4 bytes @ 0x4
  6096  01C8                     	ds	4
  6097  01CC                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  6098                           
  6099                           ; 1 bytes @ 0x8
  6100  01CC                     	ds	1
  6101  01CD                     _BVH2_Appl_Layer$1035:	
  6102                           
  6103                           ; 1 bytes @ 0x9
  6104  01CD                     	ds	1
  6105  01CE                     _BVH2_Appl_Layer$1036:	
  6106                           
  6107                           ; 1 bytes @ 0xA
  6108  01CE                     	ds	1
  6109  01CF                     _BVH2_Appl_Layer$1037:	
  6110                           
  6111                           ; 1 bytes @ 0xB
  6112  01CF                     	ds	1
  6113  01D0                     _BVH2_Appl_Layer$1038:	
  6114                           
  6115                           ; 1 bytes @ 0xC
  6116  01D0                     	ds	1
  6117  01D1                     _BVH2_Appl_Layer$1039:	
  6118                           
  6119                           ; 1 bytes @ 0xD
  6120  01D1                     	ds	1
  6121  01D2                     _BVH2_Appl_Layer$1040:	
  6122                           
  6123                           ; 1 bytes @ 0xE
  6124  01D2                     	ds	1
  6125  01D3                     BVH2_Appl_Layer@Sb3_Product1:	
  6126                           
  6127                           ; 2 bytes @ 0xF
  6128  01D3                     	ds	2
  6129  01D5                     BVH2_Appl_Layer@Sb2_Switch5:	
  6130                           
  6131                           ; 2 bytes @ 0x11
  6132  01D5                     	ds	2
  6133  01D7                     BVH2_Appl_Layer@Cb24_Reset:	
  6134                           
  6135                           ; 1 bytes @ 0x13
  6136  01D7                     	ds	1
  6137  01D8                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  6138                           
  6139                           ; 1 bytes @ 0x14
  6140  01D8                     	ds	1
  6141  01D9                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  6142                           
  6143                           ; 1 bytes @ 0x15
  6144  01D9                     	ds	1
  6145  01DA                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  6146                           
  6147                           ; 1 bytes @ 0x16
  6148  01DA                     	ds	1
  6149  01DB                     BVH2_Appl_Layer@Sb2_Error:	
  6150                           
  6151                           ; 2 bytes @ 0x17
  6152  01DB                     	ds	2
  6153  01DD                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  6154                           
  6155                           ; 1 bytes @ 0x19
  6156  01DD                     	ds	1
  6157  01DE                     BVH2_Appl_Layer@Sb3_Sum1:	
  6158                           
  6159                           ; 2 bytes @ 0x1A
  6160  01DE                     	ds	2
  6161  01E0                     BVH2_Appl_Layer@Sb4_PI_sum:	
  6162                           
  6163                           ; 2 bytes @ 0x1C
  6164  01E0                     	ds	2
  6165                           
  6166                           	psect	cstackCOMMON
  6167  0070                     __pcstackCOMMON:	
  6168  0070                     ?_InitMotorRun:	
  6169  0070                     ?_commutate:	
  6170                           ; 1 bytes @ 0x0
  6171                           
  6172  0070                     ?_PWM_Write_Out:	
  6173                           ; 1 bytes @ 0x0
  6174                           
  6175  0070                     ?_read_eeprom_data:	
  6176                           ; 1 bytes @ 0x0
  6177                           
  6178  0070                     ?_PWMReadDC:	
  6179                           ; 1 bytes @ 0x0
  6180                           
  6181  0070                     ?_PWM_CTRL:	
  6182                           ; 1 bytes @ 0x0
  6183                           
  6184  0070                     ??_PWM_CTRL:	
  6185                           ; 1 bytes @ 0x0
  6186                           
  6187  0070                     ?_interrupt_PWMCapture:	
  6188                           ; 1 bytes @ 0x0
  6189                           
  6190  0070                     ??_interrupt_PWMCapture:	
  6191                           ; 1 bytes @ 0x0
  6192                           
  6193  0070                     ?_Oscill_Source_Block:	
  6194                           ; 1 bytes @ 0x0
  6195                           
  6196  0070                     ?_timer_init:	
  6197                           ; 1 bytes @ 0x0
  6198                           
  6199  0070                     ?_PWM_Capture_init:	
  6200                           ; 1 bytes @ 0x0
  6201                           
  6202  0070                     ?_clear_timer:	
  6203                           ; 1 bytes @ 0x0
  6204                           
  6205  0070                     ?_BVH2_Appl_Layer:	
  6206                           ; 1 bytes @ 0x0
  6207                           
  6208  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  6209                           ; 1 bytes @ 0x0
  6210                           
  6211  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  6212                           ; 1 bytes @ 0x0
  6213                           
  6214  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  6215                           ; 1 bytes @ 0x0
  6216                           
  6217  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  6218                           ; 1 bytes @ 0x0
  6219                           
  6220  0070                     ?_ADC_Init:	
  6221                           ; 1 bytes @ 0x0
  6222                           
  6223  0070                     ?_ADC_Wait:	
  6224                           ; 1 bytes @ 0x0
  6225                           
  6226  0070                     ?_FILTER_Init:	
  6227                           ; 1 bytes @ 0x0
  6228                           
  6229  0070                     ?_FILTER_Ubat:	
  6230                           ; 1 bytes @ 0x0
  6231                           
  6232  0070                     ?_FILTER_IPhase:	
  6233                           ; 1 bytes @ 0x0
  6234                           
  6235  0070                     ?_FILTER_Temp:	
  6236                           ; 1 bytes @ 0x0
  6237                           
  6238  0070                     ?_Get_Analog_Value:	
  6239                           ; 1 bytes @ 0x0
  6240                           
  6241  0070                     ?_BLDCWait:	
  6242                           ; 1 bytes @ 0x0
  6243                           
  6244  0070                     ??_BLDCWait:	
  6245                           ; 1 bytes @ 0x0
  6246                           
  6247  0070                     ?_init_bldc:	
  6248                           ; 1 bytes @ 0x0
  6249                           
  6250  0070                     ?_interrrupt_bldc:	
  6251                           ; 1 bytes @ 0x0
  6252                           
  6253  0070                     ?_InitMotorStop:	
  6254                           ; 1 bytes @ 0x0
  6255                           
  6256  0070                     ?_DiagInit:	
  6257                           ; 1 bytes @ 0x0
  6258                           
  6259  0070                     ?_SetDiagAlarm:	
  6260                           ; 1 bytes @ 0x0
  6261                           
  6262  0070                     ?_Task1ms:	
  6263                           ; 1 bytes @ 0x0
  6264                           
  6265  0070                     ??_Task1ms:	
  6266                           ; 1 bytes @ 0x0
  6267                           
  6268  0070                     ?_interrupt_handler:	
  6269                           ; 1 bytes @ 0x0
  6270                           
  6271  0070                     ?_I_calibrationInit:	
  6272                           ; 1 bytes @ 0x0
  6273                           
  6274  0070                     ?_init_ports:	
  6275                           ; 1 bytes @ 0x0
  6276                           
  6277  0070                     ?_system_init:	
  6278                           ; 1 bytes @ 0x0
  6279                           
  6280  0070                     ?_main:	
  6281                           ; 1 bytes @ 0x0
  6282                           
  6283  0070                     ?i1_ADC_Wait:	
  6284                           ; 1 bytes @ 0x0
  6285                           
  6286  0070                     ??i1_ADC_Wait:	
  6287                           ; 1 bytes @ 0x0
  6288                           
  6289  0070                     ?i1_commutate:	
  6290                           ; 1 bytes @ 0x0
  6291                           
  6292  0070                     ??i1_commutate:	
  6293                           ; 1 bytes @ 0x0
  6294                           
  6295  0070                     ?___lwdiv:	
  6296                           ; 1 bytes @ 0x0
  6297                           
  6298  0070                     ?i1_ADC_Read:	
  6299                           ; 2 bytes @ 0x0
  6300                           
  6301  0070                     ?i1___wmul:	
  6302                           ; 2 bytes @ 0x0
  6303                           
  6304  0070                     ___lwdiv@divisor:	
  6305                           ; 2 bytes @ 0x0
  6306                           
  6307  0070                     i1___wmul@multiplier:	
  6308                           ; 2 bytes @ 0x0
  6309                           
  6310                           
  6311                           ; 2 bytes @ 0x0
  6312  0070                     	ds	2
  6313  0072                     ??i1_ADC_Read:	
  6314  0072                     i1ADC_Read@i:	
  6315                           ; 1 bytes @ 0x2
  6316                           
  6317  0072                     ___lwdiv@dividend:	
  6318                           ; 1 bytes @ 0x2
  6319                           
  6320  0072                     i1___wmul@multiplicand:	
  6321                           ; 2 bytes @ 0x2
  6322                           
  6323                           
  6324                           ; 2 bytes @ 0x2
  6325  0072                     	ds	2
  6326  0074                     ??___lwdiv:	
  6327  0074                     ??i1___wmul:	
  6328                           ; 1 bytes @ 0x4
  6329                           
  6330  0074                     ___lwdiv@quotient:	
  6331                           ; 1 bytes @ 0x4
  6332                           
  6333  0074                     i1___wmul@product:	
  6334                           ; 2 bytes @ 0x4
  6335                           
  6336                           
  6337                           ; 2 bytes @ 0x4
  6338  0074                     	ds	2
  6339  0076                     ___lwdiv@counter:	
  6340                           
  6341                           ; 1 bytes @ 0x6
  6342  0076                     	ds	6
  6343  007C                     ??_interrrupt_bldc:	
  6344                           
  6345                           ; 1 bytes @ 0xC
  6346  007C                     	ds	2
  6347  007E                     ??_interrupt_handler:	
  6348                           
  6349                           	psect	cstackBANK0
  6350  0020                     __pcstackBANK0:	
  6351                           ; 1 bytes @ 0xE
  6352                           
  6353  0020                     interrrupt_bldc@ui32_tmp:	
  6354                           
  6355                           ; 4 bytes @ 0x0
  6356  0020                     	ds	4
  6357  0024                     ??_commutate:	
  6358  0024                     ??_PWM_Write_Out:	
  6359                           ; 1 bytes @ 0x4
  6360                           
  6361  0024                     ??_read_eeprom_data:	
  6362                           ; 1 bytes @ 0x4
  6363                           
  6364  0024                     ??_Oscill_Source_Block:	
  6365                           ; 1 bytes @ 0x4
  6366                           
  6367  0024                     ??_PWM_Capture_init:	
  6368                           ; 1 bytes @ 0x4
  6369                           
  6370  0024                     ??_clear_timer:	
  6371                           ; 1 bytes @ 0x4
  6372                           
  6373  0024                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  6374                           ; 1 bytes @ 0x4
  6375                           
  6376  0024                     ??_Cb34_PWM_Detection_node_fcn1:	
  6377                           ; 1 bytes @ 0x4
  6378                           
  6379  0024                     ??_Cb56_UbatHandling_node_fcn2:	
  6380                           ; 1 bytes @ 0x4
  6381                           
  6382  0024                     ??_Cb1_Current_An___High_node_fcn1:	
  6383                           ; 1 bytes @ 0x4
  6384                           
  6385  0024                     ??_ADC_Init:	
  6386                           ; 1 bytes @ 0x4
  6387                           
  6388  0024                     ??_ADC_Wait:	
  6389                           ; 1 bytes @ 0x4
  6390                           
  6391  0024                     ??_FILTER_Ubat:	
  6392                           ; 1 bytes @ 0x4
  6393                           
  6394  0024                     ??_FILTER_IPhase:	
  6395                           ; 1 bytes @ 0x4
  6396                           
  6397  0024                     ??_FILTER_Temp:	
  6398                           ; 1 bytes @ 0x4
  6399                           
  6400  0024                     ??_InitMotorStop:	
  6401                           ; 1 bytes @ 0x4
  6402                           
  6403  0024                     ??_init_ports:	
  6404                           ; 1 bytes @ 0x4
  6405                           
  6406  0024                     ?_ADC_Read:	
  6407                           ; 1 bytes @ 0x4
  6408                           
  6409  0024                     ?___wmul:	
  6410                           ; 2 bytes @ 0x4
  6411                           
  6412  0024                     ?___tmul:	
  6413                           ; 2 bytes @ 0x4
  6414                           
  6415  0024                     ?___lmul:	
  6416                           ; 3 bytes @ 0x4
  6417                           
  6418  0024                     ?___aldiv:	
  6419                           ; 4 bytes @ 0x4
  6420                           
  6421  0024                     read_eeprom_data@ui8_adress:	
  6422                           ; 4 bytes @ 0x4
  6423                           
  6424  0024                     PWM_Capture_init@ui8_CCP_Nb:	
  6425                           ; 1 bytes @ 0x4
  6426                           
  6427  0024                     PWM_Write_Out@ui8_DutyCycle_Out:	
  6428                           ; 1 bytes @ 0x4
  6429                           
  6430  0024                     clear_timer@ui8_TmrNb:	
  6431                           ; 1 bytes @ 0x4
  6432                           
  6433  0024                     ___wmul@multiplier:	
  6434                           ; 1 bytes @ 0x4
  6435                           
  6436  0024                     ___tmul@multiplier:	
  6437                           ; 2 bytes @ 0x4
  6438                           
  6439  0024                     ___lmul@multiplier:	
  6440                           ; 3 bytes @ 0x4
  6441                           
  6442  0024                     ___aldiv@divisor:	
  6443                           ; 4 bytes @ 0x4
  6444                           
  6445                           
  6446                           ; 4 bytes @ 0x4
  6447  0024                     	ds	1
  6448  0025                     ??_timer_init:	
  6449  0025                     ??_DiagInit:	
  6450                           ; 1 bytes @ 0x5
  6451                           
  6452  0025                     ??_SetDiagAlarm:	
  6453                           ; 1 bytes @ 0x5
  6454                           
  6455  0025                     read_eeprom_data@ui8_adress_data:	
  6456                           ; 1 bytes @ 0x5
  6457                           
  6458  0025                     timer_init@ui8_TmrNb:	
  6459                           ; 1 bytes @ 0x5
  6460                           
  6461                           
  6462                           ; 1 bytes @ 0x5
  6463  0025                     	ds	1
  6464  0026                     ??_ADC_Read:	
  6465  0026                     ADC_Read@i:	
  6466                           ; 1 bytes @ 0x6
  6467                           
  6468  0026                     ___wmul@multiplicand:	
  6469                           ; 1 bytes @ 0x6
  6470                           
  6471                           
  6472                           ; 2 bytes @ 0x6
  6473  0026                     	ds	1
  6474  0027                     ??_FILTER_Init:	
  6475  0027                     ??_I_calibrationInit:	
  6476                           ; 1 bytes @ 0x7
  6477                           
  6478  0027                     ___tmul@multiplicand:	
  6479                           ; 1 bytes @ 0x7
  6480                           
  6481                           
  6482                           ; 3 bytes @ 0x7
  6483  0027                     	ds	1
  6484  0028                     ??___wmul:	
  6485  0028                     ___wmul@product:	
  6486                           ; 1 bytes @ 0x8
  6487                           
  6488  0028                     ___lmul@multiplicand:	
  6489                           ; 2 bytes @ 0x8
  6490                           
  6491  0028                     ___aldiv@dividend:	
  6492                           ; 4 bytes @ 0x8
  6493                           
  6494                           
  6495                           ; 4 bytes @ 0x8
  6496  0028                     	ds	2
  6497  002A                     ??___tmul:	
  6498  002A                     ?___awdiv:	
  6499                           ; 1 bytes @ 0xA
  6500                           
  6501  002A                     ___awdiv@divisor:	
  6502                           ; 2 bytes @ 0xA
  6503                           
  6504  002A                     ___tmul@product:	
  6505                           ; 2 bytes @ 0xA
  6506                           
  6507                           
  6508                           ; 3 bytes @ 0xA
  6509  002A                     	ds	2
  6510  002C                     ??___lmul:	
  6511  002C                     ??___aldiv:	
  6512                           ; 1 bytes @ 0xC
  6513                           
  6514  002C                     ___aldiv@counter:	
  6515                           ; 1 bytes @ 0xC
  6516                           
  6517  002C                     ___awdiv@dividend:	
  6518                           ; 1 bytes @ 0xC
  6519                           
  6520  002C                     ___lmul@product:	
  6521                           ; 2 bytes @ 0xC
  6522                           
  6523                           
  6524                           ; 4 bytes @ 0xC
  6525  002C                     	ds	1
  6526  002D                     ?___ltdiv:	
  6527  002D                     ___aldiv@sign:	
  6528                           ; 3 bytes @ 0xD
  6529                           
  6530  002D                     ___ltdiv@divisor:	
  6531                           ; 1 bytes @ 0xD
  6532                           
  6533                           
  6534                           ; 3 bytes @ 0xD
  6535  002D                     	ds	1
  6536  002E                     ??___awdiv:	
  6537  002E                     ___awdiv@counter:	
  6538                           ; 1 bytes @ 0xE
  6539                           
  6540  002E                     ___aldiv@quotient:	
  6541                           ; 1 bytes @ 0xE
  6542                           
  6543                           
  6544                           ; 4 bytes @ 0xE
  6545  002E                     	ds	1
  6546  002F                     ___awdiv@sign:	
  6547                           
  6548                           ; 1 bytes @ 0xF
  6549  002F                     	ds	1
  6550  0030                     ??_InitMotorRun:	
  6551  0030                     ??_Get_Analog_Value:	
  6552                           ; 1 bytes @ 0x10
  6553                           
  6554  0030                     ??_init_bldc:	
  6555                           ; 1 bytes @ 0x10
  6556                           
  6557  0030                     ??_system_init:	
  6558                           ; 1 bytes @ 0x10
  6559                           
  6560  0030                     ___awdiv@quotient:	
  6561                           ; 1 bytes @ 0x10
  6562                           
  6563  0030                     ___ltdiv@dividend:	
  6564                           ; 2 bytes @ 0x10
  6565                           
  6566                           
  6567                           ; 3 bytes @ 0x10
  6568  0030                     	ds	2
  6569  0032                     ??_BVH2_Appl_Layer:	
  6570                           
  6571                           ; 1 bytes @ 0x12
  6572  0032                     	ds	1
  6573  0033                     ??___ltdiv:	
  6574  0033                     ___ltdiv@quotient:	
  6575                           ; 1 bytes @ 0x13
  6576                           
  6577                           
  6578                           ; 3 bytes @ 0x13
  6579  0033                     	ds	3
  6580  0036                     ___ltdiv@counter:	
  6581                           
  6582                           ; 1 bytes @ 0x16
  6583  0036                     	ds	1
  6584  0037                     ??_PWMReadDC:	
  6585                           
  6586                           ; 1 bytes @ 0x17
  6587  0037                     	ds	1
  6588  0038                     ??_main:	
  6589                           
  6590                           ; 1 bytes @ 0x18
  6591  0038                     	ds	4
  6592                           
  6593                           	psect	text1
  6594  1021                     __ptext1:	
  6595 ;; *************** function _system_init *****************
  6596 ;; Defined at:
  6597 ;;		line 545 in file "../main.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;		None
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : B1F/0
  6608 ;;		On exit  : 1F/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6611 ;;      Params:         0       0       0       0       0       0       0       0
  6612 ;;      Locals:         0       0       0       0       0       0       0       0
  6613 ;;      Temps:          0       0       0       0       0       0       0       0
  6614 ;;      Totals:         0       0       0       0       0       0       0       0
  6615 ;;Total ram usage:        0 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    6
  6618 ;; This function calls:
  6619 ;;		_ADC_Init
  6620 ;;		_DiagInit
  6621 ;;		_FILTER_Init
  6622 ;;		_I_calibrationInit
  6623 ;;		_Oscill_Source_Block
  6624 ;;		_PWM_Capture_init
  6625 ;;		_init_bldc
  6626 ;;		_init_ports
  6627 ;;		_timer_init
  6628 ;; This function is called by:
  6629 ;;		_main
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           
  6634                           ;psect for function _system_init
  6635  1021                     _system_init:	
  6636                           
  6637                           ;main.c: 549: OPTION_REG = 0b10000001;
  6638                           
  6639                           ;incstack = 0
  6640                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6641  1021  3081               	movlw	129
  6642  1022  0021               	movlb	1	; select bank1
  6643  1023  0095               	movwf	21	;volatile
  6644                           
  6645                           ;main.c: 558: ui8_ResetMatlab = 1;
  6646  1024  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  6647  1025  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  6648                           
  6649                           ;main.c: 559: GIE = 0;
  6650  1026  138B               	bcf	11,7	;volatile
  6651                           
  6652                           ;main.c: 560: INTCON = 0;
  6653  1027  018B               	clrf	11	;volatile
  6654                           
  6655                           ;main.c: 561: PIE1 = 0;
  6656  1028  0191               	clrf	17	;volatile
  6657                           
  6658                           ;main.c: 562: PIE2 = 0;
  6659  1029  0192               	clrf	18	;volatile
  6660                           
  6661                           ;main.c: 565: ui16_Timer_VaL1 = 0;
  6662  102A  0193               	clrf	19	;volatile
  6663  102B  3049               	movlw	73
  6664                           
  6665                           ;main.c: 566: ui8_Task_Cont3ms = 0;
  6666  102C  01D6               	clrf	_ui8_Task_Cont3ms^(0+128)
  6667                           
  6668                           ;main.c: 567: ui8_Task_Cont5ms = 0;
  6669  102D  01D5               	clrf	_ui8_Task_Cont5ms^(0+128)
  6670                           
  6671                           ;main.c: 571: ui8_Sync_Cont10ms = 0;
  6672  102E  01D4               	clrf	_ui8_Task_Cont100ms^(0+128)
  6673                           
  6674                           ;main.c: 573: ui16_dryRun_Thresh = 73;
  6675  102F  0023               	movlb	3	; select bank3
  6676  1030  00E2               	movwf	_ui16_dryRun_Thresh^(0+384)
  6677  1031  3068               	movlw	104
  6678  1032  01E3               	clrf	(_ui16_dryRun_Thresh+1)^(0+384)
  6679                           
  6680                           ;main.c: 575: ui16_Current_Thresh = 360;
  6681  1033  0022               	movlb	2	; select bank2
  6682  1034  00EE               	movwf	_ui16_Current_Thresh^(0+256)
  6683  1035  3001               	movlw	1
  6684  1036  00EF               	movwf	(_ui16_Current_Thresh^(0+256)+1)
  6685                           
  6686                           ;main.c: 577: init_ports( );
  6687  1037  21E0  3190         	fcall	_init_ports
  6688                           
  6689                           ;main.c: 588: Oscill_Source_Block( );
  6690  1039  2181  3190         	fcall	_Oscill_Source_Block
  6691                           
  6692                           ;main.c: 589: timer_init( 1 );
  6693  103B  3001               	movlw	1
  6694  103C  2056  3190         	fcall	_timer_init
  6695                           
  6696                           ;main.c: 590: timer_init( 4 );
  6697  103E  3004               	movlw	4
  6698  103F  2056  3190         	fcall	_timer_init
  6699                           
  6700                           ;main.c: 591: timer_init( 6 );
  6701  1041  3006               	movlw	6
  6702  1042  2056  3190         	fcall	_timer_init
  6703                           
  6704                           ;main.c: 594: PWM_Capture_init( 5 );
  6705  1044  3005               	movlw	5
  6706  1045  2186  3190         	fcall	_PWM_Capture_init
  6707                           
  6708                           ;main.c: 595: ADC_Init( );
  6709  1047  2094  3190         	fcall	_ADC_Init
  6710                           
  6711                           ;main.c: 596: DiagInit( );
  6712  1049  209E  3190         	fcall	_DiagInit
  6713                           
  6714                           ;main.c: 597: FILTER_Init( );
  6715  104B  20AB  3190         	fcall	_FILTER_Init
  6716                           
  6717                           ;main.c: 600: ui16_Temp_cal = 0;
  6718  104D  0022               	movlb	2	; select bank2
  6719  104E  01D3               	clrf	_ui16_Temp_cal^(0+256)
  6720  104F  01D4               	clrf	(_ui16_Temp_cal+1)^(0+256)
  6721                           
  6722                           ;main.c: 610: I_calibrationInit();
  6723  1050  20C4  3190         	fcall	_I_calibrationInit
  6724                           
  6725                           ;main.c: 612: init_bldc( );
  6726  1052  221A               	fcall	_init_bldc
  6727                           
  6728                           ;main.c: 614: PEIE = 1;
  6729  1053  170B               	bsf	11,6	;volatile
  6730                           
  6731                           ;main.c: 615: GIE = 1;
  6732  1054  178B               	bsf	11,7	;volatile
  6733  1055  0008               	return
  6734  1056                     __end_of_system_init:	
  6735  1056                     __ptext2:	
  6736 ;; *************** function _timer_init *****************
  6737 ;; Defined at:
  6738 ;;		line 73 in file "../timer.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;  ui8_TmrNb       1    wreg     unsigned char 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  ui8_TmrNb       1    5[BANK0 ] unsigned char 
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      void 
  6745 ;; Registers used:
  6746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 16/1
  6749 ;;		On exit  : 16/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6752 ;;      Params:         0       0       0       0       0       0       0       0
  6753 ;;      Locals:         0       1       0       0       0       0       0       0
  6754 ;;      Temps:          0       0       0       0       0       0       0       0
  6755 ;;      Totals:         0       1       0       0       0       0       0       0
  6756 ;;Total ram usage:        1 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:    4
  6759 ;; This function calls:
  6760 ;;		_clear_timer
  6761 ;; This function is called by:
  6762 ;;		_system_init
  6763 ;; This function uses a non-reentrant model
  6764 ;;
  6765                           
  6766                           
  6767                           ;psect for function _timer_init
  6768  1056                     _timer_init:	
  6769                           
  6770                           ;incstack = 0
  6771                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6772                           ;timer_init@ui8_TmrNb stored from wreg
  6773  1056  0020               	movlb	0	; select bank0
  6774  1057  00A5               	movwf	timer_init@ui8_TmrNb
  6775                           
  6776                           ;timer.c: 77: switch( ui8_TmrNb )
  6777  1058  2882               	goto	l5375
  6778  1059                     l5345:	
  6779                           
  6780                           ;timer.c: 83: {;timer.c: 86: clear_timer( 0 );
  6781  1059  3000               	movlw	0
  6782  105A  318F  2730         	fcall	_clear_timer
  6783                           
  6784                           ;timer.c: 87: TMR0IE = 0;
  6785  105C  128B               	bcf	11,5	;volatile
  6786                           
  6787                           ;timer.c: 88: break;
  6788  105D  0008               	return
  6789  105E                     l5349:	
  6790                           
  6791                           ;timer.c: 95: {;timer.c: 98: clear_timer( 1 );
  6792  105E  3001               	movlw	1
  6793  105F  318F  2730         	fcall	_clear_timer
  6794                           
  6795                           ;timer.c: 99: T1CON = 0b01110101;
  6796  1061  3075               	movlw	117
  6797  1062  0020               	movlb	0	; select bank0
  6798  1063  0098               	movwf	24	;volatile
  6799                           
  6800                           ;timer.c: 100: TMR1IE = 0;
  6801  1064  0021               	movlb	1	; select bank1
  6802  1065  1011               	bcf	17,0	;volatile
  6803                           
  6804                           ;timer.c: 101: break;
  6805  1066  0008               	return
  6806  1067                     l5355:	
  6807                           
  6808                           ;timer.c: 108: {;timer.c: 111: clear_timer( 2 );
  6809  1067  3002               	movlw	2
  6810  1068  318F  2730         	fcall	_clear_timer
  6811                           
  6812                           ;timer.c: 112: T2CON = 0b00000111;
  6813  106A  3007               	movlw	7
  6814  106B  0020               	movlb	0	; select bank0
  6815  106C  009C               	movwf	28	;volatile
  6816                           
  6817                           ;timer.c: 113: TMR2IE = 0;
  6818  106D  0021               	movlb	1	; select bank1
  6819  106E  1091               	bcf	17,1	;volatile
  6820                           
  6821                           ;timer.c: 114: break;
  6822  106F  0008               	return
  6823  1070                     l5361:	
  6824                           
  6825                           ;timer.c: 121: {;timer.c: 124: clear_timer( 4 );
  6826  1070  3004               	movlw	4
  6827  1071  318F  2730         	fcall	_clear_timer
  6828                           
  6829                           ;timer.c: 125: T4CON = 0b00001110;
  6830  1073  300E               	movlw	14
  6831  1074  0028               	movlb	8	; select bank8
  6832  1075  0097               	movwf	23	;volatile
  6833                           
  6834                           ;timer.c: 129: TMR4IE = 1;
  6835  1076  0021               	movlb	1	; select bank1
  6836  1077  1493               	bsf	19,1	;volatile
  6837                           
  6838                           ;timer.c: 131: break;
  6839  1078  0008               	return
  6840  1079                     l5367:	
  6841                           
  6842                           ;timer.c: 138: {;timer.c: 141: clear_timer( 6 );
  6843  1079  3006               	movlw	6
  6844  107A  318F  2730         	fcall	_clear_timer
  6845                           
  6846                           ;timer.c: 142: T6CON = 0b00000101;
  6847  107C  3005               	movlw	5
  6848  107D  0028               	movlb	8	; select bank8
  6849  107E  009E               	movwf	30	;volatile
  6850                           
  6851                           ;timer.c: 161: TMR6IE = 0;
  6852  107F  0021               	movlb	1	; select bank1
  6853  1080  1193               	bcf	19,3	;volatile
  6854                           
  6855                           ;timer.c: 169: break;
  6856  1081  0008               	return
  6857  1082                     l5375:	
  6858  1082  0825               	movf	timer_init@ui8_TmrNb,w
  6859                           
  6860                           ; Switch size 1, requested type "space"
  6861                           ; Number of cases is 5, Range of values is 0 to 6
  6862                           ; switch strategies available:
  6863                           ; Name         Instructions Cycles
  6864                           ; simple_byte           16     9 (average)
  6865                           ; direct_byte           20     6 (fixed)
  6866                           ; jumptable            260     6 (fixed)
  6867                           ;	Chosen strategy is simple_byte
  6868  1083  3A00               	xorlw	0	; case 0
  6869  1084  1903               	skipnz
  6870  1085  2859               	goto	l5345
  6871  1086  3A01               	xorlw	1	; case 1
  6872  1087  1903               	skipnz
  6873  1088  285E               	goto	l5349
  6874  1089  3A03               	xorlw	3	; case 2
  6875  108A  1903               	skipnz
  6876  108B  2867               	goto	l5355
  6877  108C  3A06               	xorlw	6	; case 4
  6878  108D  1903               	skipnz
  6879  108E  2870               	goto	l5361
  6880  108F  3A02               	xorlw	2	; case 6
  6881  1090  1903               	skipnz
  6882  1091  2879               	goto	l5367
  6883  1092  2893               	goto	l1709
  6884  1093                     l1709:	
  6885  1093  0008               	return
  6886  1094                     __end_of_timer_init:	
  6887  1094                     __ptext16:	
  6888 ;; *************** function _ADC_Init *****************
  6889 ;; Defined at:
  6890 ;;		line 102 in file "../adc.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;		None
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;		None
  6895 ;; Return value:  Size  Location     Type
  6896 ;;                  1    wreg      void 
  6897 ;; Registers used:
  6898 ;;		wreg, status,2
  6899 ;; Tracked objects:
  6900 ;;		On entry : 18/1
  6901 ;;		On exit  : 1F/2
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6904 ;;      Params:         0       0       0       0       0       0       0       0
  6905 ;;      Locals:         0       0       0       0       0       0       0       0
  6906 ;;      Temps:          0       0       0       0       0       0       0       0
  6907 ;;      Totals:         0       0       0       0       0       0       0       0
  6908 ;;Total ram usage:        0 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    3
  6911 ;; This function calls:
  6912 ;;		Nothing
  6913 ;; This function is called by:
  6914 ;;		_system_init
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           
  6919                           ;psect for function _ADC_Init
  6920  1094                     _ADC_Init:	
  6921                           
  6922                           ;adc.c: 106: ADCON1 = 0b10100000;
  6923                           
  6924                           ;incstack = 0
  6925                           ; Regs used in _ADC_Init: [wreg+status,2]
  6926  1094  30A0               	movlw	160
  6927  1095  0021               	movlb	1	; select bank1
  6928  1096  009E               	movwf	30	;volatile
  6929                           
  6930                           ;adc.c: 108: ADCON0 = 0b00000000;
  6931  1097  019D               	clrf	29	;volatile
  6932                           
  6933                           ;adc.c: 109: ADON = 1;
  6934  1098  141D               	bsf	29,0	;volatile
  6935                           
  6936                           ;adc.c: 111: ui8_temp_calibration = 0;
  6937  1099  0022               	movlb	2	; select bank2
  6938  109A  0817               	movf	23,w	;volatile
  6939  109B  3830               	iorlw	48
  6940  109C  0097               	movwf	23	;volatile
  6941  109D  0008               	return
  6942  109E                     __end_of_ADC_Init:	
  6943  109E                     __ptext15:	
  6944 ;; *************** function _DiagInit *****************
  6945 ;; Defined at:
  6946 ;;		line 148 in file "../diag.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;		None
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;		None
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  1    wreg      void 
  6953 ;; Registers used:
  6954 ;;		wreg, status,2, status,0, pclath, cstack
  6955 ;; Tracked objects:
  6956 ;;		On entry : 1F/2
  6957 ;;		On exit  : 1F/3
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6960 ;;      Params:         0       0       0       0       0       0       0       0
  6961 ;;      Locals:         0       0       0       0       0       0       0       0
  6962 ;;      Temps:          0       0       0       0       0       0       0       0
  6963 ;;      Totals:         0       0       0       0       0       0       0       0
  6964 ;;Total ram usage:        0 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; Hardware stack levels required when called:    4
  6967 ;; This function calls:
  6968 ;;		_PWM_Write_Out
  6969 ;; This function is called by:
  6970 ;;		_system_init
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function _DiagInit
  6976  109E                     _DiagInit:	
  6977                           
  6978                           ;diag.c: 162: ui8_error_Flags.b = 0;
  6979                           
  6980                           ;incstack = 0
  6981                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  6982  109E  0020               	movlb	0	; select bank0
  6983  109F  300B               	movlw	11
  6984  10A0  01CF               	clrf	_ui8_error_Flags
  6985                           
  6986                           ;diag.c: 163: PWM_Write_Out( 11 );
  6987  10A1  2215               	fcall	_PWM_Write_Out
  6988                           
  6989                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  6990  10A2  0022               	movlb	2	; select bank2
  6991  10A3  01E0               	clrf	_ui16_IPhase1_bldc_cal^(0+256)
  6992  10A4  01E1               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  6993                           
  6994                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  6995  10A5  0023               	movlb	3	; select bank3
  6996  10A6  01C2               	clrf	_ui16_IPhase2_bldc_cal^(0+384)
  6997  10A7  01C3               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+384)
  6998                           
  6999                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  7000  10A8  01C0               	clrf	_ui16_IPhase3_bldc_cal^(0+384)
  7001  10A9  01C1               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+384)
  7002  10AA  0008               	return
  7003  10AB                     __end_of_DiagInit:	
  7004  10AB                     __ptext12:	
  7005 ;; *************** function _FILTER_Init *****************
  7006 ;; Defined at:
  7007 ;;		line 226 in file "../adc.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;		None
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;		None
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  1    wreg      void 
  7014 ;; Registers used:
  7015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7016 ;; Tracked objects:
  7017 ;;		On entry : 1F/3
  7018 ;;		On exit  : 1F/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7021 ;;      Params:         0       0       0       0       0       0       0       0
  7022 ;;      Locals:         0       0       0       0       0       0       0       0
  7023 ;;      Temps:          0       0       0       0       0       0       0       0
  7024 ;;      Totals:         0       0       0       0       0       0       0       0
  7025 ;;Total ram usage:        0 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    4
  7028 ;; This function calls:
  7029 ;;		_ADC_Read
  7030 ;;		_ADC_Wait
  7031 ;; This function is called by:
  7032 ;;		_system_init
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function _FILTER_Init
  7038  10AB                     _FILTER_Init:	
  7039                           
  7040                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  7041                           
  7042                           ;incstack = 0
  7043                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7044  10AB  0020               	movlb	0	; select bank0
  7045  10AC  01D0               	clrf	_windowPtr1
  7046  10AD                     l5189:	
  7047  10AD  3008               	movlw	8
  7048  10AE  0250               	subwf	_windowPtr1,w
  7049  10AF  1803               	btfsc	3,0
  7050  10B0  0008               	return
  7051                           
  7052                           ;adc.c: 232: {;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  7053  10B1  3031               	movlw	49
  7054  10B2  0021               	movlb	1	; select bank1
  7055  10B3  009D               	movwf	29	;volatile
  7056                           
  7057                           ;adc.c: 235: ADC_Wait( );
  7058  10B4  2157  3190         	fcall	_ADC_Wait
  7059                           
  7060                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  7061  10B6  2170  3190         	fcall	_ADC_Read
  7062  10B8  0825               	movf	?_ADC_Read+1,w
  7063  10B9  00D2               	movwf	_ui16_Ubat_bldc+1	;volatile
  7064  10BA  0824               	movf	?_ADC_Read,w
  7065  10BB  00D1               	movwf	_ui16_Ubat_bldc	;volatile
  7066                           
  7067                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  7068  10BC  22C9  3190         	fcall	PL66	;call to abstracted procedure
  7069  10BE  305E               	movlw	94
  7070  10BF  3FC0               	movwi [0]fsr1
  7071  10C0  3001               	movlw	1
  7072  10C1  3FC1               	movwi [1]fsr1
  7073  10C2  0AD0               	incf	_windowPtr1,f
  7074  10C3  28AD               	goto	l5189
  7075  10C4                     __end_of_FILTER_Init:	
  7076  10C4                     __ptext10:	
  7077 ;; *************** function _I_calibrationInit *****************
  7078 ;; Defined at:
  7079 ;;		line 174 in file "../main.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      void 
  7086 ;; Registers used:
  7087 ;;		wreg, status,2, status,0, pclath, cstack
  7088 ;; Tracked objects:
  7089 ;;		On entry : 1F/2
  7090 ;;		On exit  : 1F/2
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7093 ;;      Params:         0       0       0       0       0       0       0       0
  7094 ;;      Locals:         0       0       0       0       0       0       0       0
  7095 ;;      Temps:          0       1       0       0       0       0       0       0
  7096 ;;      Totals:         0       1       0       0       0       0       0       0
  7097 ;;Total ram usage:        1 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    4
  7100 ;; This function calls:
  7101 ;;		_ADC_Read
  7102 ;;		_ADC_Wait
  7103 ;;		_read_eeprom_data
  7104 ;; This function is called by:
  7105 ;;		_system_init
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _I_calibrationInit
  7111  10C4                     _I_calibrationInit:	
  7112                           
  7113                           ;main.c: 178: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
  7117  10C4  3003               	movlw	3
  7118  10C5  214C  3190         	fcall	_read_eeprom_data
  7119  10C7  3A00               	xorlw	0
  7120  10C8  1903               	skipnz
  7121  10C9  28DE               	goto	l5273
  7122  10CA  3003               	movlw	3
  7123  10CB  214C  3190         	fcall	_read_eeprom_data
  7124  10CD  3AFF               	xorlw	255
  7125  10CE  1903               	skipnz
  7126  10CF  28DE               	goto	l5273
  7127                           
  7128                           ;main.c: 180: {;main.c: 182: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eep
      +                          rom_data( 0x03 );
  7129  10D0  3003               	movlw	3
  7130  10D1  214C  3190         	fcall	_read_eeprom_data
  7131  10D3  00A7               	movwf	??_I_calibrationInit
  7132  10D4  3002               	movlw	2
  7133  10D5  214C  3190         	fcall	_read_eeprom_data
  7134  10D7  0022               	movlb	2	; select bank2
  7135  10D8  00EB               	movwf	(_ui16_I_cal_Ph1+1)^(0+256)
  7136  10D9  0020               	movlb	0	; select bank0
  7137  10DA  0827               	movf	??_I_calibrationInit,w
  7138  10DB  0022               	movlb	2	; select bank2
  7139  10DC  00EA               	movwf	_ui16_I_cal_Ph1^(0+256)
  7140                           
  7141                           ;main.c: 185: }
  7142  10DD  28E2               	goto	l5275
  7143  10DE                     l5273:	
  7144                           
  7145                           ;main.c: 188: else;main.c: 189: {;main.c: 191: ui16_I_cal_Ph1 = 0x0100;
  7146  10DE  0022               	movlb	2	; select bank2
  7147  10DF  3001               	movlw	1
  7148  10E0  01EA               	clrf	_ui16_I_cal_Ph1^(0+256)
  7149  10E1  00EB               	movwf	(_ui16_I_cal_Ph1^(0+256)+1)
  7150  10E2                     l5275:	
  7151                           
  7152                           ;main.c: 194: };main.c: 197: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 
      +                          0x05 ) != 0xFF)
  7153  10E2  3005               	movlw	5
  7154  10E3  214C  3190         	fcall	_read_eeprom_data
  7155  10E5  3A00               	xorlw	0
  7156  10E6  1903               	skipnz
  7157  10E7  28FC               	goto	l5281
  7158  10E8  3005               	movlw	5
  7159  10E9  214C  3190         	fcall	_read_eeprom_data
  7160  10EB  3AFF               	xorlw	255
  7161  10EC  1903               	skipnz
  7162  10ED  28FC               	goto	l5281
  7163                           
  7164                           ;main.c: 199: {;main.c: 201: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eep
      +                          rom_data( 0x05 );
  7165  10EE  3005               	movlw	5
  7166  10EF  214C  3190         	fcall	_read_eeprom_data
  7167  10F1  00A7               	movwf	??_I_calibrationInit
  7168  10F2  3004               	movlw	4
  7169  10F3  214C  3190         	fcall	_read_eeprom_data
  7170  10F5  0022               	movlb	2	; select bank2
  7171  10F6  00E9               	movwf	(_ui16_I_cal_Ph2+1)^(0+256)
  7172  10F7  0020               	movlb	0	; select bank0
  7173  10F8  0827               	movf	??_I_calibrationInit,w
  7174  10F9  0022               	movlb	2	; select bank2
  7175  10FA  00E8               	movwf	_ui16_I_cal_Ph2^(0+256)
  7176                           
  7177                           ;main.c: 204: }
  7178  10FB  2900               	goto	l5283
  7179  10FC                     l5281:	
  7180                           
  7181                           ;main.c: 207: else;main.c: 208: {;main.c: 210: ui16_I_cal_Ph2 = 0x0100;
  7182  10FC  0022               	movlb	2	; select bank2
  7183  10FD  3001               	movlw	1
  7184  10FE  01E8               	clrf	_ui16_I_cal_Ph2^(0+256)
  7185  10FF  00E9               	movwf	(_ui16_I_cal_Ph2^(0+256)+1)
  7186  1100                     l5283:	
  7187                           
  7188                           ;main.c: 213: };main.c: 216: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 
      +                          0x07 ) != 0xFF)
  7189  1100  3007               	movlw	7
  7190  1101  214C  3190         	fcall	_read_eeprom_data
  7191  1103  3A00               	xorlw	0
  7192  1104  1903               	skipnz
  7193  1105  291A               	goto	l5289
  7194  1106  3007               	movlw	7
  7195  1107  214C  3190         	fcall	_read_eeprom_data
  7196  1109  3AFF               	xorlw	255
  7197  110A  1903               	skipnz
  7198  110B  291A               	goto	l5289
  7199                           
  7200                           ;main.c: 218: {;main.c: 220: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eep
      +                          rom_data( 0x07 );
  7201  110C  3007               	movlw	7
  7202  110D  214C  3190         	fcall	_read_eeprom_data
  7203  110F  00A7               	movwf	??_I_calibrationInit
  7204  1110  3006               	movlw	6
  7205  1111  214C  3190         	fcall	_read_eeprom_data
  7206  1113  0022               	movlb	2	; select bank2
  7207  1114  00E7               	movwf	(_ui16_I_cal_Ph3+1)^(0+256)
  7208  1115  0020               	movlb	0	; select bank0
  7209  1116  0827               	movf	??_I_calibrationInit,w
  7210  1117  0022               	movlb	2	; select bank2
  7211  1118  00E6               	movwf	_ui16_I_cal_Ph3^(0+256)
  7212                           
  7213                           ;main.c: 222: }
  7214  1119  291E               	goto	l5291
  7215  111A                     l5289:	
  7216                           
  7217                           ;main.c: 225: else;main.c: 226: {;main.c: 228: ui16_I_cal_Ph3 = 0x0100;
  7218  111A  0022               	movlb	2	; select bank2
  7219  111B  3001               	movlw	1
  7220  111C  01E6               	clrf	_ui16_I_cal_Ph3^(0+256)
  7221  111D  00E7               	movwf	(_ui16_I_cal_Ph3^(0+256)+1)
  7222  111E                     l5291:	
  7223                           
  7224                           ;main.c: 231: };main.c: 324: LATC2 = 0;
  7225  111E  110E               	bcf	14,2	;volatile
  7226                           
  7227                           ;main.c: 325: LATB2 = 0;
  7228  111F  110D               	bcf	13,2	;volatile
  7229                           
  7230                           ;main.c: 326: LATB1 = 0;
  7231  1120  108D               	bcf	13,1	;volatile
  7232                           
  7233                           ;main.c: 327: LATC = LATC | 0b00011010;
  7234  1121  080E               	movf	14,w	;volatile
  7235  1122  381A               	iorlw	26
  7236  1123  008E               	movwf	14	;volatile
  7237                           
  7238                           ;main.c: 329: ADC_Wait();
  7239  1124  2157  3190         	fcall	_ADC_Wait
  7240                           
  7241                           ;main.c: 330: ADC_Wait();
  7242  1126  2157  3190         	fcall	_ADC_Wait
  7243                           
  7244                           ;main.c: 332: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
  7245  1128  3011               	movlw	17
  7246  1129  0021               	movlb	1	; select bank1
  7247  112A  009D               	movwf	29	;volatile
  7248                           
  7249                           ;main.c: 333: ADC_Wait();
  7250  112B  2157  3190         	fcall	_ADC_Wait
  7251                           
  7252                           ;main.c: 334: ( GO_nDONE = 1 );
  7253  112D  0021               	movlb	1	; select bank1
  7254  112E  149D               	bsf	29,1	;volatile
  7255                           
  7256                           ;main.c: 337: ui8_current_cal[2] = ADC_Read();
  7257  112F  2170  3190         	fcall	_ADC_Read
  7258  1131  0824               	movf	?_ADC_Read,w
  7259  1132  0022               	movlb	2	; select bank2
  7260  1133  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
  7261                           
  7262                           ;main.c: 339: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
  7263  1134  3035               	movlw	53
  7264  1135  0021               	movlb	1	; select bank1
  7265  1136  009D               	movwf	29	;volatile
  7266                           
  7267                           ;main.c: 340: ADC_Wait();
  7268  1137  2157  3190         	fcall	_ADC_Wait
  7269                           
  7270                           ;main.c: 341: ( GO_nDONE = 1 );
  7271  1139  0021               	movlb	1	; select bank1
  7272  113A  149D               	bsf	29,1	;volatile
  7273                           
  7274                           ;main.c: 344: ui8_current_cal[1] = ADC_Read();
  7275  113B  2170  3190         	fcall	_ADC_Read
  7276  113D  0824               	movf	?_ADC_Read,w
  7277  113E  0022               	movlb	2	; select bank2
  7278  113F  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
  7279                           
  7280                           ;main.c: 346: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
  7281  1140  3009               	movlw	9
  7282  1141  0021               	movlb	1	; select bank1
  7283  1142  009D               	movwf	29	;volatile
  7284                           
  7285                           ;main.c: 347: ADC_Wait();
  7286  1143  2157  3190         	fcall	_ADC_Wait
  7287                           
  7288                           ;main.c: 348: ( GO_nDONE = 1 );
  7289  1145  0021               	movlb	1	; select bank1
  7290  1146  149D               	bsf	29,1	;volatile
  7291                           
  7292                           ;main.c: 351: ui8_current_cal[0] = ADC_Read();
  7293  1147  2170               	fcall	_ADC_Read
  7294  1148  0824               	movf	?_ADC_Read,w
  7295  1149  0022               	movlb	2	; select bank2
  7296  114A  00A0               	movwf	_ui8_current_cal^(0+256)
  7297  114B  0008               	return
  7298  114C                     __end_of_I_calibrationInit:	
  7299  114C                     __ptext11:	
  7300 ;; *************** function _read_eeprom_data *****************
  7301 ;; Defined at:
  7302 ;;		line 52 in file "../eeprom.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  ui8_adress      1    wreg     unsigned char 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;  ui8_adress      1    4[BANK0 ] unsigned char 
  7307 ;;  ui8_adress_d    1    5[BANK0 ] unsigned char 
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      unsigned char 
  7310 ;; Registers used:
  7311 ;;		wreg
  7312 ;; Tracked objects:
  7313 ;;		On entry : 1D/2
  7314 ;;		On exit  : 1F/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7317 ;;      Params:         0       0       0       0       0       0       0       0
  7318 ;;      Locals:         0       2       0       0       0       0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0
  7320 ;;      Totals:         0       2       0       0       0       0       0       0
  7321 ;;Total ram usage:        2 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    3
  7324 ;; This function calls:
  7325 ;;		Nothing
  7326 ;; This function is called by:
  7327 ;;		_I_calibrationInit
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           
  7332                           ;psect for function _read_eeprom_data
  7333  114C                     _read_eeprom_data:	
  7334                           
  7335                           ;incstack = 0
  7336                           ; Regs used in _read_eeprom_data: [wreg]
  7337                           ;read_eeprom_data@ui8_adress stored from wreg
  7338  114C  0020               	movlb	0	; select bank0
  7339  114D  00A4               	movwf	read_eeprom_data@ui8_adress
  7340                           
  7341                           ;eeprom.c: 56: unsigned char ui8_adress_data;;eeprom.c: 58: EEADRL = ui8_adress;
  7342  114E  0023               	movlb	3	; select bank3
  7343  114F  0091               	movwf	17	;volatile
  7344                           
  7345                           ;eeprom.c: 59: EEPGD = 0;
  7346  1150  1395               	bcf	21,7	;volsfr
  7347                           
  7348                           ;eeprom.c: 60: CFGS = 0;
  7349  1151  1315               	bcf	21,6	;volsfr
  7350                           
  7351                           ;eeprom.c: 61: RD = 1;
  7352  1152  1415               	bsf	21,0	;volsfr
  7353                           
  7354                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
  7355  1153  0813               	movf	19,w	;volatile
  7356  1154  0020               	movlb	0	; select bank0
  7357  1155  00A5               	movwf	read_eeprom_data@ui8_adress_data
  7358                           
  7359                           ;eeprom.c: 64: return ui8_adress_data;
  7360  1156  0008               	return
  7361  1157                     __end_of_read_eeprom_data:	
  7362  1157                     __ptext13:	
  7363 ;; *************** function _ADC_Wait *****************
  7364 ;; Defined at:
  7365 ;;		line 128 in file "../adc.c"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;		None
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;		None
  7370 ;; Return value:  Size  Location     Type
  7371 ;;                  1    wreg      void 
  7372 ;; Registers used:
  7373 ;;		None
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/2
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7379 ;;      Params:         0       0       0       0       0       0       0       0
  7380 ;;      Locals:         0       0       0       0       0       0       0       0
  7381 ;;      Temps:          0       0       0       0       0       0       0       0
  7382 ;;      Totals:         0       0       0       0       0       0       0       0
  7383 ;;Total ram usage:        0 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; Hardware stack levels required when called:    3
  7386 ;; This function calls:
  7387 ;;		Nothing
  7388 ;; This function is called by:
  7389 ;;		_FILTER_Init
  7390 ;;		_I_calibrationInit
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           
  7395                           ;psect for function _ADC_Wait
  7396  1157                     _ADC_Wait:	
  7397                           
  7398                           ;adc.c: 133: __nop();
  7399                           
  7400                           ;incstack = 0
  7401                           ; Regs used in _ADC_Wait: []
  7402  1157  0000               	nop
  7403                           
  7404                           ;adc.c: 134: __nop();
  7405  1158  0000               	nop
  7406                           
  7407                           ;adc.c: 135: __nop();
  7408  1159  0000               	nop
  7409                           
  7410                           ;adc.c: 136: __nop();
  7411  115A  0000               	nop
  7412                           
  7413                           ;adc.c: 137: __nop();
  7414  115B  0000               	nop
  7415                           
  7416                           ;adc.c: 138: __nop();
  7417  115C  0000               	nop
  7418                           
  7419                           ;adc.c: 139: __nop();
  7420  115D  0000               	nop
  7421                           
  7422                           ;adc.c: 140: __nop();
  7423  115E  0000               	nop
  7424                           
  7425                           ;adc.c: 142: __nop();
  7426  115F  0000               	nop
  7427                           
  7428                           ;adc.c: 143: __nop();
  7429  1160  0000               	nop
  7430                           
  7431                           ;adc.c: 144: __nop();
  7432  1161  0000               	nop
  7433                           
  7434                           ;adc.c: 145: __nop();
  7435  1162  0000               	nop
  7436                           
  7437                           ;adc.c: 146: __nop();
  7438  1163  0000               	nop
  7439                           
  7440                           ;adc.c: 147: __nop();
  7441  1164  0000               	nop
  7442                           
  7443                           ;adc.c: 148: __nop();
  7444  1165  0000               	nop
  7445                           
  7446                           ;adc.c: 149: __nop();
  7447  1166  0000               	nop
  7448                           
  7449                           ;adc.c: 151: __nop();
  7450  1167  0000               	nop
  7451                           
  7452                           ;adc.c: 152: __nop();
  7453  1168  0000               	nop
  7454                           
  7455                           ;adc.c: 153: __nop();
  7456  1169  0000               	nop
  7457                           
  7458                           ;adc.c: 154: __nop();
  7459  116A  0000               	nop
  7460                           
  7461                           ;adc.c: 155: __nop();
  7462  116B  0000               	nop
  7463                           
  7464                           ;adc.c: 156: __nop();
  7465  116C  0000               	nop
  7466                           
  7467                           ;adc.c: 157: __nop();
  7468  116D  0000               	nop
  7469                           
  7470                           ;adc.c: 158: __nop();
  7471  116E  0000               	nop
  7472  116F  0008               	return
  7473  1170                     __end_of_ADC_Wait:	
  7474  1170                     __ptext14:	
  7475 ;; *************** function _ADC_Read *****************
  7476 ;; Defined at:
  7477 ;;		line 175 in file "../adc.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;		None
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;  i               1    6[BANK0 ] unsigned char 
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  2    4[BANK0 ] unsigned int 
  7484 ;; Registers used:
  7485 ;;		wreg, status,2, status,0
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/1
  7488 ;;		On exit  : 1F/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7491 ;;      Params:         0       2       0       0       0       0       0       0
  7492 ;;      Locals:         0       1       0       0       0       0       0       0
  7493 ;;      Temps:          0       0       0       0       0       0       0       0
  7494 ;;      Totals:         0       3       0       0       0       0       0       0
  7495 ;;Total ram usage:        3 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    3
  7498 ;; This function calls:
  7499 ;;		Nothing
  7500 ;; This function is called by:
  7501 ;;		_FILTER_Init
  7502 ;;		_I_calibrationInit
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           
  7507                           ;psect for function _ADC_Read
  7508  1170                     _ADC_Read:	
  7509                           
  7510                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
  7511                           
  7512                           ;incstack = 0
  7513                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  7514  1170  0020               	movlb	0	; select bank0
  7515  1171  01A6               	clrf	ADC_Read@i
  7516  1172                     l69:	
  7517                           ;adc.c: 182: while( GO_nDONE )
  7518                           
  7519  1172  0021               	movlb	1	; select bank1
  7520  1173  1C9D               	btfss	29,1	;volatile
  7521  1174  297B               	goto	l5117
  7522                           
  7523                           ;adc.c: 184: {;adc.c: 186: i++;
  7524  1175  0020               	movlb	0	; select bank0
  7525  1176  3041               	movlw	65
  7526  1177  0AA6               	incf	ADC_Read@i,f
  7527                           
  7528                           ;adc.c: 189: if( i > 64 )
  7529  1178  0226               	subwf	ADC_Read@i,w
  7530  1179  1C03               	skipc
  7531  117A  2972               	goto	l69
  7532  117B                     l5117:	
  7533                           
  7534                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
  7535  117B  0021               	movlb	1	; select bank1
  7536                           
  7537                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  7538                           
  7539                           ;adc.c: 204: return analog_value.w;
  7540  117C  27A0               	fcall	PL34	;call to abstracted procedure
  7541  117D  00A5               	movwf	?_ADC_Read+1
  7542  117E  0848               	movf	_analog_value,w	;volatile
  7543  117F  00A4               	movwf	?_ADC_Read
  7544  1180  0008               	return
  7545  1181                     __end_of_ADC_Read:	
  7546  1181                     __ptext9:	
  7547 ;; *************** function _Oscill_Source_Block *****************
  7548 ;; Defined at:
  7549 ;;		line 478 in file "../timer.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;		None
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;		None
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  1    wreg      void 
  7556 ;; Registers used:
  7557 ;;		wreg
  7558 ;; Tracked objects:
  7559 ;;		On entry : B1F/1
  7560 ;;		On exit  : B1F/1
  7561 ;;		Unchanged: B00/0
  7562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7563 ;;      Params:         0       0       0       0       0       0       0       0
  7564 ;;      Locals:         0       0       0       0       0       0       0       0
  7565 ;;      Temps:          0       0       0       0       0       0       0       0
  7566 ;;      Totals:         0       0       0       0       0       0       0       0
  7567 ;;Total ram usage:        0 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; Hardware stack levels required when called:    3
  7570 ;; This function calls:
  7571 ;;		Nothing
  7572 ;; This function is called by:
  7573 ;;		_system_init
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           
  7578                           ;psect for function _Oscill_Source_Block
  7579  1181                     _Oscill_Source_Block:	
  7580                           
  7581                           ;timer.c: 482: OSCCON = 0xF0;
  7582                           
  7583                           ;incstack = 0
  7584                           ; Regs used in _Oscill_Source_Block: [wreg]
  7585  1181  30F0               	movlw	240
  7586  1182  0099               	movwf	25	;volatile
  7587                           
  7588                           ;timer.c: 483: WDTCON = 0b00010001;
  7589  1183  3011               	movlw	17
  7590  1184  0097               	movwf	23	;volatile
  7591  1185  0008               	return
  7592  1186                     __end_of_Oscill_Source_Block:	
  7593  1186                     __ptext8:	
  7594 ;; *************** function _PWM_Capture_init *****************
  7595 ;; Defined at:
  7596 ;;		line 79 in file "../pwm.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  ui8_CCP_Nb      1    4[BANK0 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;                  1    wreg      void 
  7603 ;; Registers used:
  7604 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7605 ;; Tracked objects:
  7606 ;;		On entry : 16/1
  7607 ;;		On exit  : 18/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7610 ;;      Params:         0       0       0       0       0       0       0       0
  7611 ;;      Locals:         0       1       0       0       0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0
  7613 ;;      Totals:         0       1       0       0       0       0       0       0
  7614 ;;Total ram usage:        1 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    3
  7617 ;; This function calls:
  7618 ;;		Nothing
  7619 ;; This function is called by:
  7620 ;;		_system_init
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           
  7625                           ;psect for function _PWM_Capture_init
  7626  1186                     _PWM_Capture_init:	
  7627                           
  7628                           ;incstack = 0
  7629                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  7630                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  7631  1186  0020               	movlb	0	; select bank0
  7632  1187  00A4               	movwf	PWM_Capture_init@ui8_CCP_Nb
  7633                           
  7634                           ;pwm.c: 84: ui8_PWMinDC_sav = 0;
  7635  1188  0021               	movlb	1	; select bank1
  7636  1189  01CE               	clrf	_ui8_PWMinDC_sav^(0+128)
  7637                           
  7638                           ;pwm.c: 85: ui8_PWMin_failCnt = 0;
  7639  118A  01CD               	clrf	_ui8_PWMin_failCnt^(0+128)
  7640                           
  7641                           ;pwm.c: 94: switch( ui8_CCP_Nb )
  7642  118B  0020               	movlb	0	; select bank0
  7643  118C  0824               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  7644                           
  7645                           ; Switch size 1, requested type "space"
  7646                           ; Number of cases is 5, Range of values is 1 to 5
  7647                           ; switch strategies available:
  7648                           ; Name         Instructions Cycles
  7649                           ; simple_byte           16     9 (average)
  7650                           ; direct_byte           19     9 (fixed)
  7651                           ; jumptable            263     9 (fixed)
  7652                           ;	Chosen strategy is simple_byte
  7653  118D  3A01               	xorlw	1	; case 1
  7654  118E  1903               	skipnz
  7655  118F  299D               	goto	l5379
  7656  1190  3A03               	xorlw	3	; case 2
  7657  1191  1903               	skipnz
  7658  1192  29A9               	goto	l5387
  7659  1193  3A01               	xorlw	1	; case 3
  7660  1194  1903               	skipnz
  7661  1195  29B5               	goto	l5395
  7662  1196  3A07               	xorlw	7	; case 4
  7663  1197  1903               	skipnz
  7664  1198  29C1               	goto	l5403
  7665  1199  3A01               	xorlw	1	; case 5
  7666  119A  1903               	skipnz
  7667  119B  29CD               	goto	l5411
  7668  119C  29DF               	goto	l1153
  7669  119D                     l5379:	
  7670                           
  7671                           ;pwm.c: 100: {;pwm.c: 102: CCP1CON = 0x00;
  7672  119D  0025               	movlb	5	; select bank5
  7673  119E  0193               	clrf	19	;volatile
  7674                           
  7675                           ;pwm.c: 103: CCPR1L = 0x00;
  7676  119F  0191               	clrf	17	;volatile
  7677                           
  7678                           ;pwm.c: 104: CCPR1H = 0x00;
  7679  11A0  0192               	clrf	18	;volatile
  7680                           
  7681                           ;pwm.c: 105: CCP1IE = 1;
  7682  11A1  0021               	movlb	1	; select bank1
  7683  11A2  1511               	bsf	17,2	;volatile
  7684                           
  7685                           ;pwm.c: 106: CCP1IF = 0;
  7686  11A3  0020               	movlb	0	; select bank0
  7687  11A4  1111               	bcf	17,2	;volatile
  7688                           
  7689                           ;pwm.c: 107: CCP1CON = 0x05;
  7690  11A5  3005               	movlw	5
  7691  11A6  0025               	movlb	5	; select bank5
  7692  11A7  0093               	movwf	19	;volatile
  7693                           
  7694                           ;pwm.c: 108: break;
  7695  11A8  0008               	return
  7696  11A9                     l5387:	
  7697                           
  7698                           ;pwm.c: 115: {;pwm.c: 117: CCP2CON = 0x00;
  7699  11A9  0025               	movlb	5	; select bank5
  7700  11AA  019A               	clrf	26	;volatile
  7701                           
  7702                           ;pwm.c: 118: CCPR2L = 0x00;
  7703  11AB  0198               	clrf	24	;volatile
  7704                           
  7705                           ;pwm.c: 119: CCPR2H = 0x00;
  7706  11AC  0199               	clrf	25	;volatile
  7707                           
  7708                           ;pwm.c: 120: CCP2IE = 1;
  7709  11AD  0021               	movlb	1	; select bank1
  7710  11AE  1412               	bsf	18,0	;volatile
  7711                           
  7712                           ;pwm.c: 121: CCP2IF = 0;
  7713  11AF  0020               	movlb	0	; select bank0
  7714  11B0  1012               	bcf	18,0	;volatile
  7715                           
  7716                           ;pwm.c: 122: CCP2CON = 0x05;
  7717  11B1  3005               	movlw	5
  7718  11B2  0025               	movlb	5	; select bank5
  7719  11B3  009A               	movwf	26	;volatile
  7720                           
  7721                           ;pwm.c: 123: break;
  7722  11B4  0008               	return
  7723  11B5                     l5395:	
  7724                           
  7725                           ;pwm.c: 130: {;pwm.c: 132: CCP3CON = 0x00;
  7726  11B5  0026               	movlb	6	; select bank6
  7727  11B6  0193               	clrf	19	;volatile
  7728                           
  7729                           ;pwm.c: 133: CCPR3L = 0x00;
  7730  11B7  0191               	clrf	17	;volatile
  7731                           
  7732                           ;pwm.c: 134: CCPR3H = 0x00;
  7733  11B8  0192               	clrf	18	;volatile
  7734                           
  7735                           ;pwm.c: 135: CCP3IE = 1;
  7736  11B9  0021               	movlb	1	; select bank1
  7737  11BA  1613               	bsf	19,4	;volatile
  7738                           
  7739                           ;pwm.c: 136: CCP3IF = 0;
  7740  11BB  0020               	movlb	0	; select bank0
  7741  11BC  1213               	bcf	19,4	;volatile
  7742                           
  7743                           ;pwm.c: 137: CCP3CON = 0x05;
  7744  11BD  3005               	movlw	5
  7745  11BE  0026               	movlb	6	; select bank6
  7746  11BF  0093               	movwf	19	;volatile
  7747                           
  7748                           ;pwm.c: 138: break;
  7749  11C0  0008               	return
  7750  11C1                     l5403:	
  7751                           
  7752                           ;pwm.c: 145: {;pwm.c: 147: CCP4CON = 0x00;
  7753  11C1  0026               	movlb	6	; select bank6
  7754  11C2  019A               	clrf	26	;volatile
  7755                           
  7756                           ;pwm.c: 148: CCPR4L = 0x00;
  7757  11C3  0198               	clrf	24	;volatile
  7758                           
  7759                           ;pwm.c: 149: CCPR4H = 0x00;
  7760  11C4  0199               	clrf	25	;volatile
  7761                           
  7762                           ;pwm.c: 150: CCP4IE = 1;
  7763  11C5  0021               	movlb	1	; select bank1
  7764  11C6  1693               	bsf	19,5	;volatile
  7765                           
  7766                           ;pwm.c: 151: CCP4IF = 0;
  7767  11C7  0020               	movlb	0	; select bank0
  7768  11C8  1293               	bcf	19,5	;volatile
  7769                           
  7770                           ;pwm.c: 152: CCP4CON = 0x05;
  7771  11C9  3005               	movlw	5
  7772  11CA  0026               	movlb	6	; select bank6
  7773  11CB  009A               	movwf	26	;volatile
  7774                           
  7775                           ;pwm.c: 153: break;
  7776  11CC  0008               	return
  7777  11CD                     l5411:	
  7778                           
  7779                           ;pwm.c: 160: {;pwm.c: 162: ui16_PWM_Input_State = RA4;
  7780  11CD  1003               	clrc
  7781  11CE  1A0C               	btfsc	12,4	;volatile
  7782  11CF  1403               	setc
  7783  11D0  3000               	movlw	0
  7784  11D1  3D09               	addwfc	9,w
  7785  11D2  0022               	movlb	2	; select bank2
  7786  11D3  00A7               	movwf	_ui16_PWM_Input_State^(0+256)
  7787  11D4  01A8               	clrf	(_ui16_PWM_Input_State+1)^(0+256)
  7788                           
  7789                           ;pwm.c: 163: CCP5CON = 0x00;
  7790  11D5  0026               	movlb	6	; select bank6
  7791  11D6  019E               	clrf	30	;volatile
  7792                           
  7793                           ;pwm.c: 164: CCPR5L = 0x00;
  7794  11D7  019C               	clrf	28	;volatile
  7795                           
  7796                           ;pwm.c: 165: CCPR5H = 0x00;
  7797  11D8  019D               	clrf	29	;volatile
  7798                           
  7799                           ;pwm.c: 166: CCP5IE = 1;
  7800  11D9  0021               	movlb	1	; select bank1
  7801  11DA  1713               	bsf	19,6	;volatile
  7802                           
  7803                           ;pwm.c: 167: CCP5IF = 0;
  7804  11DB  0020               	movlb	0	; select bank0
  7805  11DC  1313               	bcf	19,6	;volatile
  7806                           
  7807                           ;pwm.c: 168: CCP5CON = 0x05;
  7808                           
  7809                           ;pwm.c: 169: break;
  7810  11DD  3181  29FF         	ljmp	PL78	;call to abstracted procedure
  7811  11DF                     l1153:	
  7812  11DF  0008               	return
  7813  11E0                     __end_of_PWM_Capture_init:	
  7814  11E0                     __ptext4:	
  7815 ;; *************** function _init_ports *****************
  7816 ;; Defined at:
  7817 ;;		line 404 in file "../main.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;		None
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;		None
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg, status,2
  7826 ;; Tracked objects:
  7827 ;;		On entry : B1F/2
  7828 ;;		On exit  : B1F/1
  7829 ;;		Unchanged: B00/0
  7830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7831 ;;      Params:         0       0       0       0       0       0       0       0
  7832 ;;      Locals:         0       0       0       0       0       0       0       0
  7833 ;;      Temps:          0       0       0       0       0       0       0       0
  7834 ;;      Totals:         0       0       0       0       0       0       0       0
  7835 ;;Total ram usage:        0 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    3
  7838 ;; This function calls:
  7839 ;;		Nothing
  7840 ;; This function is called by:
  7841 ;;		_system_init
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           
  7846                           ;psect for function _init_ports
  7847  11E0                     _init_ports:	
  7848                           
  7849                           ;main.c: 411: ANSELA = 0b00100111;
  7850                           
  7851                           ;incstack = 0
  7852                           ; Regs used in _init_ports: [wreg+status,2]
  7853  11E0  3027               	movlw	39
  7854  11E1  0023               	movlb	3	; select bank3
  7855  11E2  008C               	movwf	12	;volatile
  7856                           
  7857                           ;main.c: 412: ANSELB = 0b00101001;
  7858  11E3  3029               	movlw	41
  7859  11E4  008D               	movwf	13	;volatile
  7860                           
  7861                           ;main.c: 415: LATA = 0;
  7862  11E5  0022               	movlb	2	; select bank2
  7863  11E6  018C               	clrf	12	;volatile
  7864                           
  7865                           ;main.c: 416: LATB = 0;
  7866  11E7  018D               	clrf	13	;volatile
  7867                           
  7868                           ;main.c: 417: LATC = 0;
  7869  11E8  018E               	clrf	14	;volatile
  7870                           
  7871                           ;main.c: 498: TRISA = 0b01111111;
  7872  11E9  307F               	movlw	127
  7873  11EA  0021               	movlb	1	; select bank1
  7874  11EB  008C               	movwf	12	;volatile
  7875                           
  7876                           ;main.c: 507: TRISB = 0b00111001;
  7877  11EC  3039               	movlw	57
  7878  11ED  008D               	movwf	13	;volatile
  7879                           
  7880                           ;main.c: 516: TRISC = 0b00000000;
  7881  11EE  018E               	clrf	14	;volatile
  7882  11EF  0008               	return
  7883  11F0                     __end_of_init_ports:	
  7884  11F0                     __ptext18:	
  7885 ;; *************** function _SetDiagAlarm *****************
  7886 ;; Defined at:
  7887 ;;		line 210 in file "../diag.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0, pclath, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 1F/1
  7898 ;;		On exit  : 1F/1
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7901 ;;      Params:         0       0       0       0       0       0       0       0
  7902 ;;      Locals:         0       0       0       0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0
  7904 ;;      Totals:         0       0       0       0       0       0       0       0
  7905 ;;Total ram usage:        0 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    4
  7908 ;; This function calls:
  7909 ;;		_PWM_Write_Out
  7910 ;; This function is called by:
  7911 ;;		_main
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           
  7916                           ;psect for function _SetDiagAlarm
  7917  11F0                     _SetDiagAlarm:	
  7918                           
  7919                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  7920                           
  7921                           ;incstack = 0
  7922                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  7923  11F0  0020               	movlb	0	; select bank0
  7924  11F1  1F4F               	btfss	_ui8_error_Flags,6
  7925  11F2  29F5               	goto	l6219
  7926                           
  7927                           ;diag.c: 221: {;diag.c: 223: PWM_Write_Out( 88 );
  7928  11F3  3058               	movlw	88
  7929  11F4  2A15               	ljmp	_PWM_Write_Out
  7930  11F5                     l6219:	
  7931                           ;diag.c: 226: }
  7932                           
  7933                           
  7934                           ;diag.c: 229: else;diag.c: 230: {;diag.c: 232: if( bool_CPU_TempAlarm )
  7935  11F5  0021               	movlb	1	; select bank1
  7936  11F6  0864               	movf	_bool_CPU_TempAlarm^(0+128),w
  7937  11F7  1903               	btfsc	3,2
  7938  11F8  29FB               	goto	l6223
  7939                           
  7940                           ;diag.c: 235: {;diag.c: 237: PWM_Write_Out( 33 );
  7941  11F9  3021               	movlw	33
  7942  11FA  2A15               	ljmp	_PWM_Write_Out
  7943  11FB                     l6223:	
  7944                           ;diag.c: 240: }
  7945                           
  7946                           
  7947                           ;diag.c: 243: else;diag.c: 244: {;diag.c: 246: if( bool_DryRunningAlarm )
  7948  11FB  0863               	movf	_bool_DryRunningAlarm^(0+128),w
  7949  11FC  1903               	btfsc	3,2
  7950  11FD  2A00               	goto	l6227
  7951                           
  7952                           ;diag.c: 248: {;diag.c: 250: PWM_Write_Out( 66 );
  7953  11FE  3042               	movlw	66
  7954  11FF  2A15               	ljmp	_PWM_Write_Out
  7955  1200                     l6227:	
  7956                           ;diag.c: 253: }
  7957                           
  7958                           
  7959                           ;diag.c: 256: else;diag.c: 257: {;diag.c: 259: if( bool_MotorStalled )
  7960  1200  0862               	movf	_bool_MotorStalled^(0+128),w
  7961  1201  1903               	btfsc	3,2
  7962  1202  2A05               	goto	l6231
  7963                           
  7964                           ;diag.c: 261: {;diag.c: 263: PWM_Write_Out( 55 );
  7965  1203  3037               	movlw	55
  7966  1204  2A15               	ljmp	_PWM_Write_Out
  7967  1205                     l6231:	
  7968                           ;diag.c: 266: }
  7969                           
  7970                           
  7971                           ;diag.c: 269: else;diag.c: 270: {;diag.c: 272: if( bool_HighCurrentAlarm )
  7972  1205  0861               	movf	_bool_HighCurrentAlarm^(0+128),w
  7973  1206  1903               	btfsc	3,2
  7974  1207  2A0A               	goto	l520
  7975                           
  7976                           ;diag.c: 274: {;diag.c: 276: PWM_Write_Out( 44 );
  7977  1208  302C               	movlw	44
  7978  1209  2A15               	ljmp	_PWM_Write_Out
  7979  120A                     l520:	
  7980                           ;diag.c: 278: }
  7981                           
  7982                           
  7983                           ;diag.c: 281: else;diag.c: 282: {;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  7984  120A  0020               	movlb	0	; select bank0
  7985  120B  1ECF               	btfss	_ui8_error_Flags,5
  7986  120C  2A0F               	goto	l522
  7987                           
  7988                           ;diag.c: 287: {;diag.c: 289: PWM_Write_Out( 77 );
  7989  120D  304D               	movlw	77
  7990  120E  2A15               	ljmp	_PWM_Write_Out
  7991  120F                     l522:	
  7992                           ;diag.c: 292: }
  7993                           
  7994                           
  7995                           ;diag.c: 295: else;diag.c: 296: {;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  7996  120F  1C4F               	btfss	_ui8_error_Flags,0
  7997  1210  2A13               	goto	l6239
  7998                           
  7999                           ;diag.c: 300: {;diag.c: 302: PWM_Write_Out( 22 );
  8000  1211  3016               	movlw	22
  8001  1212  2A15               	ljmp	_PWM_Write_Out
  8002  1213                     l6239:	
  8003                           ;diag.c: 305: }
  8004                           
  8005                           
  8006                           ;diag.c: 308: else;diag.c: 309: {;diag.c: 311: PWM_Write_Out( 11 );
  8007  1213  300B               	movlw	11
  8008  1214  2A15               	ljmp	_PWM_Write_Out
  8009  1215                     __end_of_SetDiagAlarm:	
  8010  1215                     __ptext19:	
  8011 ;; *************** function _PWM_Write_Out *****************
  8012 ;; Defined at:
  8013 ;;		line 342 in file "../pwm.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;  ui8_DutyCycl    1    wreg     unsigned char 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  ui8_DutyCycl    1    4[BANK0 ] unsigned char 
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  1    wreg      void 
  8020 ;; Registers used:
  8021 ;;		wreg
  8022 ;; Tracked objects:
  8023 ;;		On entry : 1E/0
  8024 ;;		On exit  : 1F/1
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8027 ;;      Params:         0       0       0       0       0       0       0       0
  8028 ;;      Locals:         0       1       0       0       0       0       0       0
  8029 ;;      Temps:          0       0       0       0       0       0       0       0
  8030 ;;      Totals:         0       1       0       0       0       0       0       0
  8031 ;;Total ram usage:        1 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    3
  8034 ;; This function calls:
  8035 ;;		Nothing
  8036 ;; This function is called by:
  8037 ;;		_DiagInit
  8038 ;;		_SetDiagAlarm
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           
  8043                           ;psect for function _PWM_Write_Out
  8044  1215                     _PWM_Write_Out:	
  8045                           
  8046                           ;incstack = 0
  8047                           ; Regs used in _PWM_Write_Out: [wreg]
  8048                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
  8049  1215  0020               	movlb	0	; select bank0
  8050  1216  00A4               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
  8051                           
  8052                           ;pwm.c: 346: ui8_PWMoutvalue = ui8_DutyCycle_Out;
  8053  1217  0021               	movlb	1	; select bank1
  8054  1218  00D1               	movwf	_ui8_PWMoutvalue^(0+128)
  8055  1219  0008               	return
  8056  121A                     __end_of_PWM_Write_Out:	
  8057  121A                     __ptext5:	
  8058 ;; *************** function _init_bldc *****************
  8059 ;; Defined at:
  8060 ;;		line 207 in file "../bldc.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;		None
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 1F/2
  8071 ;;		On exit  : 1F/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8074 ;;      Params:         0       0       0       0       0       0       0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0       0
  8077 ;;      Totals:         0       0       0       0       0       0       0       0
  8078 ;;Total ram usage:        0 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    5
  8081 ;; This function calls:
  8082 ;;		_InitMotorRun
  8083 ;; This function is called by:
  8084 ;;		_system_init
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           
  8089                           ;psect for function _init_bldc
  8090  121A                     _init_bldc:	
  8091                           
  8092                           ;bldc.c: 218: PSTR1CON = 0;
  8093                           
  8094                           ;incstack = 0
  8095                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8096  121A  0025               	movlb	5	; select bank5
  8097  121B  0196               	clrf	22	;volatile
  8098                           
  8099                           ;bldc.c: 222: CM1CON0 = 0x80;
  8100  121C  3080               	movlw	128
  8101  121D  0022               	movlb	2	; select bank2
  8102  121E  0091               	movwf	17	;volatile
  8103                           
  8104                           ;bldc.c: 228: CM1CON1 = 0x00;
  8105  121F  0192               	clrf	18	;volatile
  8106                           
  8107                           ;bldc.c: 230: C1IE = 0;
  8108  1220  0021               	movlb	1	; select bank1
  8109  1221  1292               	bcf	18,5	;volatile
  8110                           
  8111                           ;bldc.c: 235: PWM1CON = 0x87;
  8112  1222  3087               	movlw	135
  8113  1223  0025               	movlb	5	; select bank5
  8114  1224  0094               	movwf	20	;volatile
  8115                           
  8116                           ;bldc.c: 239: CCP1AS = 0x800;
  8117  1225  0195               	clrf	21	;volatile
  8118                           
  8119                           ;bldc.c: 240: CCP1CON = 0x0C;
  8120  1226  300C               	movlw	12
  8121  1227  0093               	movwf	19	;volatile
  8122                           
  8123                           ;bldc.c: 246: CCPR1L = 0;
  8124  1228  0191               	clrf	17	;volatile
  8125                           
  8126                           ;bldc.c: 248: CCP2IE = 0;
  8127  1229  0021               	movlb	1	; select bank1
  8128  122A  1012               	bcf	18,0	;volatile
  8129                           
  8130                           ;bldc.c: 249: CCP2CON = 0x04;
  8131  122B  3004               	movlw	4
  8132  122C  0025               	movlb	5	; select bank5
  8133  122D  009A               	movwf	26	;volatile
  8134                           
  8135                           ;bldc.c: 250: CCPR2L = 0xff;
  8136  122E  30FF               	movlw	255
  8137  122F  0098               	movwf	24	;volatile
  8138                           
  8139                           ;bldc.c: 251: CCPR2H = 0xff;
  8140  1230  0099               	movwf	25	;volatile
  8141                           
  8142                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  8143  1231  3064               	movlw	100
  8144  1232  0020               	movlb	0	; select bank0
  8145  1233  009B               	movwf	27	;volatile
  8146                           
  8147                           ;bldc.c: 255: T2CON = 0x05;
  8148  1234  3005               	movlw	5
  8149  1235  009C               	movwf	28	;volatile
  8150                           
  8151                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  8152  1236  3028               	movlw	40
  8153  1237  0021               	movlb	1	; select bank1
  8154  1238  00EB               	movwf	_ui8_BlankingCount^(0+128)
  8155                           
  8156                           ;bldc.c: 264: TMR2IE = 1;
  8157  1239  1491               	bsf	17,1	;volatile
  8158                           
  8159                           ;bldc.c: 267: MotorFlags.b = 0;
  8160  123A  0020               	movlb	0	; select bank0
  8161  123B  01CD               	clrf	_MotorFlags
  8162                           
  8163                           ;bldc.c: 270: InitMotorRun( );
  8164  123C  2A3D               	ljmp	l5121
  8165  123D                     __end_of_init_bldc:	
  8166  123D                     __ptext6:	
  8167 ;; *************** function _InitMotorRun *****************
  8168 ;; Defined at:
  8169 ;;		line 2170 in file "../bldc.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;		None
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;		None
  8174 ;; Return value:  Size  Location     Type
  8175 ;;                  1    wreg      void 
  8176 ;; Registers used:
  8177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 1E/1
  8180 ;;		On exit  : 1F/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8183 ;;      Params:         0       0       0       0       0       0       0       0
  8184 ;;      Locals:         0       0       0       0       0       0       0       0
  8185 ;;      Temps:          0       0       0       0       0       0       0       0
  8186 ;;      Totals:         0       0       0       0       0       0       0       0
  8187 ;;Total ram usage:        0 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    4
  8190 ;; This function calls:
  8191 ;;		_commutate
  8192 ;; This function is called by:
  8193 ;;		_init_bldc
  8194 ;;		_main
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           
  8199                           ;psect for function _InitMotorRun
  8200  123D                     _InitMotorRun:	
  8201  123D                     l5121:	
  8202                           ;incstack = 0
  8203                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8204                           
  8205                           
  8206                           ;bldc.c: 2175: if( 0 == MotorFlags.bits.B6 )
  8207  123D  0020               	movlb	0	; select bank0
  8208  123E  1B4D               	btfsc	_MotorFlags,6
  8209  123F  0008               	return
  8210  1240  30A6               	movlw	166
  8211                           
  8212                           ;bldc.c: 2178: {;bldc.c: 2180: MotorFlags.bits.B5 = 0;
  8213  1241  12CD               	bcf	_MotorFlags,5
  8214                           
  8215                           ;bldc.c: 2181: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  8216  1242  0022               	movlb	2	; select bank2
  8217  1243  00BF               	movwf	_ui16_comm_time_max^(0+256)
  8218  1244  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
  8219                           
  8220                           ;bldc.c: 2182: comm_state = 1;
  8221  1245  0021               	movlb	1	; select bank1
  8222  1246  01EC               	clrf	_comm_state^(0+128)
  8223  1247  0AEC               	incf	_comm_state^(0+128),f
  8224                           
  8225                           ;bldc.c: 2183: ui16_step_cnt = 0;
  8226  1248  01B2               	clrf	_ui16_step_cnt^(0+128)
  8227  1249  01B3               	clrf	(_ui16_step_cnt+1)^(0+128)
  8228                           
  8229                           ;bldc.c: 2184: ui8_duty_cycle_BLDC = 0;
  8230  124A  0020               	movlb	0	; select bank0
  8231  124B  01CE               	clrf	_ui8_duty_cycle_BLDC
  8232                           
  8233                           ;bldc.c: 2186: bemf_filter = 0;
  8234  124C  01C6               	clrf	_comm_time
  8235  124D  01C7               	clrf	_comm_time+1
  8236                           
  8237                           ;bldc.c: 2188: phase_delay_counter_debug = 0;
  8238  124E  0022               	movlb	2	; select bank2
  8239  124F  01BD               	clrf	_phase_delay_counter^(0+256)
  8240  1250  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
  8241                           
  8242                           ;bldc.c: 2189: PSTR1CON = 0;
  8243  1251  0025               	movlb	5	; select bank5
  8244  1252  0196               	clrf	22	;volatile
  8245                           
  8246                           ;bldc.c: 2192: MotorFlags.bits.B3 = 1 ;
  8247  1253  0020               	movlb	0	; select bank0
  8248  1254  15CD               	bsf	_MotorFlags,3
  8249                           
  8250                           ;bldc.c: 2194: ui16_phase_angle = 128;
  8251  1255  174D               	bsf	_MotorFlags,6
  8252                           
  8253                           ;bldc.c: 2195: ui8_StartupPWM = 0 ;
  8254  1256  0021               	movlb	1	; select bank1
  8255  1257  01ED               	clrf	_ui8_StartupPWM^(0+128)
  8256                           
  8257                           ;bldc.c: 2196: CCPR1L = 0 ;
  8258  1258  0025               	movlb	5	; select bank5
  8259  1259  0191               	clrf	17	;volatile
  8260                           
  8261                           ;bldc.c: 2198: ui8_zero_cros_cnt = 0 ;
  8262  125A  0021               	movlb	1	; select bank1
  8263  125B  01E7               	clrf	_ui8_sampleState^(0+128)
  8264                           
  8265                           ;bldc.c: 2199: MotorFlags.bits.B4 = 1 ;
  8266  125C  0020               	movlb	0	; select bank0
  8267  125D  164D               	bsf	_MotorFlags,4
  8268                           
  8269                           ;bldc.c: 2207: commutate( );
  8270  125E  2ACF               	ljmp	l4843
  8271  125F                     __end_of_InitMotorRun:	
  8272  125F                     __ptext25:	
  8273 ;; *************** function _FILTER_Ubat *****************
  8274 ;; Defined at:
  8275 ;;		line 264 in file "../adc.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;		None
  8278 ;; Auto vars:     Size  Location     Type
  8279 ;;		None
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  1    wreg      void 
  8282 ;; Registers used:
  8283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8284 ;; Tracked objects:
  8285 ;;		On entry : 1F/0
  8286 ;;		On exit  : 1D/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8289 ;;      Params:         0       0       0       0       0       0       0       0
  8290 ;;      Locals:         0       0       0       0       0       0       0       0
  8291 ;;      Temps:          0      12       0       0       0       0       0       0
  8292 ;;      Totals:         0      12       0       0       0       0       0       0
  8293 ;;Total ram usage:       12 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    3
  8296 ;; This function calls:
  8297 ;;		Nothing
  8298 ;; This function is called by:
  8299 ;;		_Get_Analog_Value
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           
  8304                           ;psect for function _FILTER_Ubat
  8305  125F                     _FILTER_Ubat:	
  8306                           
  8307                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  8308                           
  8309                           ;incstack = 0
  8310                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  8311  125F  22C9  3190         	fcall	PL66	;call to abstracted procedure
  8312  1261  0851               	movf	_ui16_Ubat_bldc,w	;volatile
  8313  1262  3FC0               	movwi [0]fsr1
  8314  1263  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8315  1264  3FC1               	movwi [1]fsr1
  8316                           
  8317                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  8318  1265  30BE               	movlw	((low (_inputArray1| (0+256)))& (0+255)+14)
  8319  1266  0086               	movwf	6
  8320  1267  30BC               	movlw	((low (_inputArray1| (0+256)))& (0+255)+12)
  8321  1268  0084               	movwf	4
  8322  1269  3001               	movlw	1	; select bank3/4
  8323  126A  0085               	movwf	5
  8324  126B  0023               	movlb	3	; select bank3
  8325  126C  0834               	movf	(_inputArray1^(0+384)+4),w
  8326  126D  0732               	addwf	(_inputArray1^(0+384)+2),w
  8327  126E  0020               	movlb	0	; select bank0
  8328  126F  00A4               	movwf	??_FILTER_Ubat
  8329  1270  0023               	movlb	3	; select bank3
  8330  1271  0835               	movf	((_inputArray1+1)^(0+384)+4),w
  8331  1272  3D33               	addwfc	((_inputArray1+1)^(0+384)+2),w
  8332  1273  0020               	movlb	0	; select bank0
  8333  1274  00A5               	movwf	??_FILTER_Ubat+1
  8334  1275  0023               	movlb	3	; select bank3
  8335  1276  0836               	movf	(_inputArray1^(0+384)+6),w
  8336  1277  0020               	movlb	0	; select bank0
  8337  1278  0724               	addwf	??_FILTER_Ubat,w
  8338  1279  00A6               	movwf	??_FILTER_Ubat+2
  8339  127A  0023               	movlb	3	; select bank3
  8340  127B  0837               	movf	((_inputArray1+1)^(0+384)+6),w
  8341  127C  0020               	movlb	0	; select bank0
  8342  127D  3D25               	addwfc	??_FILTER_Ubat+1,w
  8343  127E  00A7               	movwf	??_FILTER_Ubat+3
  8344  127F  0023               	movlb	3	; select bank3
  8345  1280  0838               	movf	(_inputArray1^(0+384)+8),w
  8346  1281  0020               	movlb	0	; select bank0
  8347  1282  0726               	addwf	??_FILTER_Ubat+2,w
  8348  1283  00A8               	movwf	??_FILTER_Ubat+4
  8349  1284  0023               	movlb	3	; select bank3
  8350  1285  0839               	movf	((_inputArray1+1)^(0+384)+8),w
  8351  1286  0020               	movlb	0	; select bank0
  8352  1287  3D27               	addwfc	??_FILTER_Ubat+3,w
  8353  1288  00A9               	movwf	??_FILTER_Ubat+5
  8354  1289  0023               	movlb	3	; select bank3
  8355  128A  083A               	movf	(_inputArray1^(0+384)+10),w
  8356  128B  0020               	movlb	0	; select bank0
  8357  128C  0728               	addwf	??_FILTER_Ubat+4,w
  8358  128D  00AA               	movwf	??_FILTER_Ubat+6
  8359  128E  0023               	movlb	3	; select bank3
  8360  128F  083B               	movf	((_inputArray1+1)^(0+384)+10),w
  8361  1290  0020               	movlb	0	; select bank0
  8362  1291  3D29               	addwfc	??_FILTER_Ubat+5,w
  8363  1292  00AB               	movwf	??_FILTER_Ubat+7
  8364  1293  3F00               	moviw [0]fsr0
  8365  1294  072A               	addwf	??_FILTER_Ubat+6,w
  8366  1295  00AC               	movwf	??_FILTER_Ubat+8
  8367  1296  3F01               	moviw [1]fsr0
  8368  1297  3D2B               	addwfc	??_FILTER_Ubat+7,w
  8369  1298  00AD               	movwf	??_FILTER_Ubat+9
  8370  1299  3F40               	moviw [0]fsr1
  8371  129A  072C               	addwf	??_FILTER_Ubat+8,w
  8372  129B  00AE               	movwf	??_FILTER_Ubat+10
  8373  129C  3F41               	moviw [1]fsr1
  8374  129D  3D2D               	addwfc	??_FILTER_Ubat+9,w
  8375  129E  00AF               	movwf	??_FILTER_Ubat+11
  8376  129F  0023               	movlb	3	; select bank3
  8377  12A0  0830               	movf	_inputArray1^(0+384),w
  8378  12A1  0020               	movlb	0	; select bank0
  8379  12A2  072E               	addwf	??_FILTER_Ubat+10,w
  8380  12A3  0022               	movlb	2	; select bank2
  8381  12A4  00CB               	movwf	_filter1^(0+256)
  8382  12A5  0023               	movlb	3	; select bank3
  8383  12A6  0831               	movf	(_inputArray1+1)^(0+384),w
  8384  12A7  0020               	movlb	0	; select bank0
  8385  12A8  3D2F               	addwfc	??_FILTER_Ubat+11,w
  8386  12A9  0022               	movlb	2	; select bank2
  8387  12AA  00CC               	movwf	(_filter1+1)^(0+256)
  8388                           
  8389                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  8390  12AB  0020               	movlb	0	; select bank0
  8391  12AC  00A5               	movwf	??_FILTER_Ubat+1
  8392  12AD  0022               	movlb	2	; select bank2
  8393  12AE  084B               	movf	_filter1^(0+256),w
  8394  12AF  0020               	movlb	0	; select bank0
  8395  12B0  00A4               	movwf	??_FILTER_Ubat
  8396  12B1  36A5               	lsrf	??_FILTER_Ubat+1,f
  8397  12B2  0CA4               	rrf	??_FILTER_Ubat,f
  8398  12B3  36A5               	lsrf	??_FILTER_Ubat+1,f
  8399  12B4  0CA4               	rrf	??_FILTER_Ubat,f
  8400  12B5  36A5               	lsrf	??_FILTER_Ubat+1,f
  8401  12B6  0CA4               	rrf	??_FILTER_Ubat,f
  8402  12B7  0824               	movf	??_FILTER_Ubat,w
  8403  12B8  0022               	movlb	2	; select bank2
  8404  12B9  00D1               	movwf	_ui16_fir_Bat_mittel^(0+256)
  8405  12BA  0020               	movlb	0	; select bank0
  8406  12BB  0825               	movf	??_FILTER_Ubat+1,w
  8407  12BC  0022               	movlb	2	; select bank2
  8408  12BD  00D2               	movwf	(_ui16_fir_Bat_mittel+1)^(0+256)
  8409                           
  8410                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  8411  12BE  3008               	movlw	8
  8412  12BF  0020               	movlb	0	; select bank0
  8413  12C0  0AD0               	incf	_windowPtr1,f
  8414  12C1  0250               	subwf	_windowPtr1,w
  8415  12C2  1C03               	skipc
  8416  12C3  0008               	return
  8417                           
  8418                           ;adc.c: 277: {;adc.c: 279: windowPtr1 = 0;
  8419  12C4  01D0               	clrf	_windowPtr1
  8420                           
  8421                           ;adc.c: 280: filter1 = 0;
  8422  12C5  0022               	movlb	2	; select bank2
  8423  12C6  01CB               	clrf	_filter1^(0+256)
  8424  12C7  01CC               	clrf	(_filter1+1)^(0+256)
  8425  12C8  0008               	return
  8426  12C9                     __end_of_FILTER_Ubat:	
  8427  12C9                     PL66:	
  8428  12C9  3550               	lslf	_windowPtr1,w
  8429  12CA  3EB0               	addlw	(low (_inputArray1| (0+256)))& (0+255)
  8430  12CB  0086               	movwf	6
  8431  12CC  3001               	movlw	1	; select bank3/4
  8432  12CD  0087               	movwf	7
  8433  12CE  0008               	return
  8434  12CF                     __end_ofPL66:	
  8435  12CF                     __ptext7:	
  8436 ;; *************** function _commutate *****************
  8437 ;; Defined at:
  8438 ;;		line 1426 in file "../bldc.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;		None
  8441 ;; Auto vars:     Size  Location     Type
  8442 ;;		None
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  1    wreg      void 
  8445 ;; Registers used:
  8446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8447 ;; Tracked objects:
  8448 ;;		On entry : 1F/0
  8449 ;;		On exit  : 1F/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8452 ;;      Params:         0       0       0       0       0       0       0       0
  8453 ;;      Locals:         0       0       0       0       0       0       0       0
  8454 ;;      Temps:          0      12       0       0       0       0       0       0
  8455 ;;      Totals:         0      12       0       0       0       0       0       0
  8456 ;;Total ram usage:       12 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    3
  8459 ;; This function calls:
  8460 ;;		Nothing
  8461 ;; This function is called by:
  8462 ;;		_InitMotorRun
  8463 ;; This function uses a non-reentrant model
  8464 ;;
  8465                           
  8466                           
  8467                           ;psect for function _commutate
  8468  12CF                     _commutate:	
  8469  12CF                     l4843:	
  8470                           ;incstack = 0
  8471                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0]
  8472                           
  8473                           
  8474                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  8475  12CF  3000               	movlw	0
  8476  12D0  0021               	movlb	1	; select bank1
  8477  12D1  0233               	subwf	(_ui16_step_cnt+1)^(0+128),w
  8478  12D2  300A               	movlw	10
  8479  12D3  1903               	skipnz
  8480  12D4  0232               	subwf	_ui16_step_cnt^(0+128),w
  8481  12D5  1803               	skipnc
  8482  12D6  2ADA               	goto	l4847
  8483                           
  8484                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
  8485  12D7  0AB2               	incf	_ui16_step_cnt^(0+128),f
  8486  12D8  1903               	skipnz
  8487  12D9  0AB3               	incf	(_ui16_step_cnt+1)^(0+128),f
  8488  12DA                     l4847:	
  8489                           
  8490                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  8491                           
  8492                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  8493                           
  8494                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  8495  12DA  26F8  3190         	fcall	PL4	;call to abstracted procedure
  8496  12DC  0020               	movlb	0	; select bank0
  8497  12DD  00A4               	movwf	??_commutate
  8498  12DE  0023               	movlb	3	; select bank3
  8499  12DF  0825               	movf	((_B+1)^(0+384)+4),w
  8500  12E0  3D23               	addwfc	((_B+1)^(0+384)+2),w
  8501  12E1  0020               	movlb	0	; select bank0
  8502  12E2  00A5               	movwf	??_commutate+1
  8503  12E3  0023               	movlb	3	; select bank3
  8504  12E4  0826               	movf	(_B^(0+384)+6),w
  8505  12E5  0020               	movlb	0	; select bank0
  8506  12E6  0724               	addwf	??_commutate,w
  8507  12E7  00A6               	movwf	??_commutate+2
  8508  12E8  0023               	movlb	3	; select bank3
  8509  12E9  0827               	movf	((_B+1)^(0+384)+6),w
  8510  12EA  0020               	movlb	0	; select bank0
  8511  12EB  3D25               	addwfc	??_commutate+1,w
  8512  12EC  00A7               	movwf	??_commutate+3
  8513  12ED  0023               	movlb	3	; select bank3
  8514  12EE  0828               	movf	(_B^(0+384)+8),w
  8515  12EF  0020               	movlb	0	; select bank0
  8516  12F0  0726               	addwf	??_commutate+2,w
  8517  12F1  00A8               	movwf	??_commutate+4
  8518  12F2  0023               	movlb	3	; select bank3
  8519  12F3  0829               	movf	((_B+1)^(0+384)+8),w
  8520  12F4  0020               	movlb	0	; select bank0
  8521  12F5  3D27               	addwfc	??_commutate+3,w
  8522  12F6  00A9               	movwf	??_commutate+5
  8523  12F7  0023               	movlb	3	; select bank3
  8524  12F8  082A               	movf	(_B^(0+384)+10),w
  8525  12F9  0020               	movlb	0	; select bank0
  8526  12FA  0728               	addwf	??_commutate+4,w
  8527  12FB  00AA               	movwf	??_commutate+6
  8528  12FC  0023               	movlb	3	; select bank3
  8529  12FD  082B               	movf	((_B+1)^(0+384)+10),w
  8530  12FE  0020               	movlb	0	; select bank0
  8531  12FF  3D29               	addwfc	??_commutate+5,w
  8532  1300  00AB               	movwf	??_commutate+7
  8533  1301  3F00               	moviw [0]fsr0
  8534  1302  072A               	addwf	??_commutate+6,w
  8535  1303  00AC               	movwf	??_commutate+8
  8536  1304  3F01               	moviw [1]fsr0
  8537  1305  3D2B               	addwfc	??_commutate+7,w
  8538  1306  00AD               	movwf	??_commutate+9
  8539  1307  3F40               	moviw [0]fsr1
  8540  1308  072C               	addwf	??_commutate+8,w
  8541  1309  00AE               	movwf	??_commutate+10
  8542  130A  3F41               	moviw [1]fsr1
  8543  130B  3D2D               	addwfc	??_commutate+9,w
  8544  130C  00AF               	movwf	??_commutate+11
  8545  130D  0023               	movlb	3	; select bank3
  8546  130E  0820               	movf	_B^(0+384),w
  8547  130F  0020               	movlb	0	; select bank0
  8548  1310  072E               	addwf	??_commutate+10,w
  8549  1311  0022               	movlb	2	; select bank2
  8550  1312  00B7               	movwf	_ui16_speed_fil^(0+256)
  8551  1313  0023               	movlb	3	; select bank3
  8552  1314  0821               	movf	(_B+1)^(0+384),w
  8553  1315  0020               	movlb	0	; select bank0
  8554  1316  3D2F               	addwfc	??_commutate+11,w
  8555                           
  8556                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  8557                           
  8558                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  8559                           
  8560                           ;bldc.c: 1455: bemf_filter = 62;
  8561                           
  8562                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  8563  1317  2732  3190         	fcall	PL16	;call to abstracted procedure
  8564                           
  8565                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  8566  1319  1DCD               	btfss	_MotorFlags,3
  8567  131A  2B55               	goto	l327
  8568                           
  8569                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
  8570                           
  8571                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  8572  131B  26DD  3190         	fcall	PL2	;call to abstracted procedure
  8573  131D  1803               	skipnc
  8574  131E  2B22               	goto	l4875
  8575                           
  8576                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
  8577  131F  2755  3190         	fcall	PL20	;call to abstracted procedure
  8578                           
  8579                           ;bldc.c: 1478: }
  8580  1321  2B36               	goto	l4899
  8581  1322                     l4875:	
  8582                           
  8583                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
  8584  1322  0022               	movlb	2	; select bank2
  8585  1323  01BD               	clrf	_phase_delay_counter^(0+256)
  8586  1324  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
  8587  1325  2B36               	goto	l4899
  8588  1326                     l4877:	
  8589                           
  8590                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
  8591  1326  30A6               	movlw	166
  8592  1327  2B32               	goto	L4
  8593  1328                     l4879:	
  8594                           ;bldc.c: 1517: break;
  8595                           
  8596                           
  8597                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
  8598  1328  27D5  3190         	fcall	PL62	;call to abstracted procedure
  8599                           
  8600                           ;bldc.c: 1527: break;
  8601  132A  2B44               	goto	l4901
  8602  132B                     l4881:	
  8603                           
  8604                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
  8605  132B  307D               	movlw	125
  8606  132C  2B32               	goto	L4
  8607  132D                     l4883:	
  8608                           ;bldc.c: 1537: break;
  8609                           
  8610                           
  8611                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
  8612  132D  3053               	movlw	83
  8613  132E  2B32               	goto	L4
  8614  132F                     l4885:	
  8615                           ;bldc.c: 1547: break;
  8616                           
  8617                           
  8618                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
  8619  132F  303E               	movlw	62
  8620  1330  2B32               	goto	L4
  8621  1331                     l4887:	
  8622                           ;bldc.c: 1557: break;
  8623                           
  8624                           
  8625                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
  8626  1331  3032               	movlw	50
  8627  1332                     L4:	
  8628  1332  0022               	movlb	2	; select bank2
  8629  1333  00BF               	movwf	_ui16_comm_time_max^(0+256)
  8630  1334  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
  8631                           
  8632                           ;bldc.c: 1567: break;
  8633  1335  2B44               	goto	l4901
  8634  1336                     l4899:	
  8635                           
  8636                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8637                           ; Switch size 1, requested type "space"
  8638                           ; Number of cases is 1, Range of values is 0 to 0
  8639                           ; switch strategies available:
  8640                           ; Name         Instructions Cycles
  8641                           ; simple_byte            4     3 (average)
  8642                           ; direct_byte            8     6 (fixed)
  8643                           ; jumptable            260     6 (fixed)
  8644                           ;	Chosen strategy is simple_byte
  8645  1336  0021               	movlb	1	; select bank1
  8646  1337  0833               	movf	(_ui16_step_cnt+1)^(0+128),w
  8647  1338  3A00               	xorlw	0	; case 0
  8648  1339  1903               	skipnz
  8649  133A  2B3C               	goto	l10355
  8650  133B  2B31               	goto	l4887
  8651  133C                     l10355:	
  8652                           
  8653                           ; Switch size 1, requested type "space"
  8654                           ; Number of cases is 10, Range of values is 0 to 9
  8655                           ; switch strategies available:
  8656                           ; Name         Instructions Cycles
  8657                           ; direct_byte           26     6 (fixed)
  8658                           ; simple_byte           31    16 (average)
  8659                           ; jumptable            260     6 (fixed)
  8660                           ;	Chosen strategy is direct_byte
  8661  133C  27E7  3190         	fcall	PL72	;call to abstracted procedure
  8662  133E  1803               	skipnc
  8663  133F  2B31               	goto	l4887
  8664  1340  3182               	movlp	high S10357
  8665  1341  3504               	lslf	4,w
  8666  1342  3EAB               	addlw	low S10357
  8667  1343  0082               	movwf	2
  8668  1344                     l4901:	
  8669                           
  8670                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
  8671  1344  3000               	movlw	0
  8672  1345  0240               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  8673  1346  3032               	movlw	50
  8674  1347  1903               	skipnz
  8675  1348  023F               	subwf	_ui16_comm_time_max^(0+256),w
  8676  1349  1803               	skipnc
  8677  134A  2B4E               	goto	l4905
  8678                           
  8679                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
  8680  134B  3032               	movlw	50
  8681  134C  00BF               	movwf	_ui16_comm_time_max^(0+256)
  8682  134D  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
  8683  134E                     l4905:	
  8684                           
  8685                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
  8686  134E  0020               	movlb	0	; select bank0
  8687  134F  1E4D               	btfss	_MotorFlags,4
  8688  1350  2B83               	goto	l345
  8689                           
  8690                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
  8691  1351  300A               	movlw	10
  8692  1352  0021               	movlb	1	; select bank1
  8693  1353  00ED               	movwf	_ui8_StartupPWM^(0+128)
  8694                           
  8695                           ;bldc.c: 1641: };bldc.c: 1644: }
  8696  1354  2B83               	goto	l345
  8697  1355                     l327:	
  8698                           
  8699                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
  8700  1355  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  8701  1356  2B5B               	goto	l4911
  8702                           
  8703                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
  8704  1357  0022               	movlb	2	; select bank2
  8705  1358  01BD               	clrf	_phase_delay_counter^(0+256)
  8706  1359  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
  8707                           
  8708                           ;bldc.c: 1659: }
  8709  135A  2B68               	goto	l4913
  8710  135B                     l4911:	
  8711                           
  8712                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  8713  135B  0847               	movf	_comm_time+1,w
  8714  135C  00A5               	movwf	??_commutate+1
  8715  135D  0846               	movf	_comm_time,w
  8716  135E  00A4               	movwf	??_commutate
  8717  135F  36A5               	lsrf	??_commutate+1,f
  8718  1360  0CA4               	rrf	??_commutate,f
  8719  1361  0824               	movf	??_commutate,w
  8720  1362  0022               	movlb	2	; select bank2
  8721  1363  00BD               	movwf	_phase_delay_counter^(0+256)
  8722  1364  0020               	movlb	0	; select bank0
  8723  1365  0825               	movf	??_commutate+1,w
  8724  1366  0022               	movlb	2	; select bank2
  8725  1367  00BE               	movwf	(_phase_delay_counter+1)^(0+256)
  8726  1368                     l4913:	
  8727                           
  8728                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  8729                           
  8730                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
  8731                           
  8732                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  8733  1368  27C7  3190         	fcall	PL56	;call to abstracted procedure
  8734  136A  1F4D               	btfss	_MotorFlags,6
  8735  136B  2B81               	goto	l4937
  8736                           
  8737                           ;bldc.c: 1693: {;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  8738  136C  27FB  3190         	fcall	PL90	;call to abstracted procedure
  8739  136E  1903               	btfsc	3,2
  8740  136F  2B83               	goto	l345
  8741                           
  8742                           ;bldc.c: 1706: else;bldc.c: 1707: {;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  8743  1370  27F6  3190         	fcall	PL86	;call to abstracted procedure
  8744  1372  1803               	skipnc
  8745  1373  2B7B               	goto	l4931
  8746                           
  8747                           ;bldc.c: 1712: {;bldc.c: 1714: CCPR1L--;
  8748                           
  8749                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  8750  1374  27DB  3190         	fcall	PL64	;call to abstracted procedure
  8751  1376  1803               	skipnc
  8752  1377  2B83               	goto	l345
  8753                           
  8754                           ;bldc.c: 1718: {;bldc.c: 1720: CCPR1L--;
  8755  1378  0025               	movlb	5	; select bank5
  8756  1379  0391               	decf	17,f	;volatile
  8757  137A  2B83               	goto	l345
  8758  137B                     l4931:	
  8759                           
  8760                           ;bldc.c: 1728: else;bldc.c: 1729: {;bldc.c: 1731: CCPR1L++;
  8761                           
  8762                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  8763  137B  27CE  3190         	fcall	PL60	;call to abstracted procedure
  8764  137D  1803               	skipnc
  8765  137E  2B83               	goto	l345
  8766                           
  8767                           ;bldc.c: 1735: {;bldc.c: 1737: CCPR1L++;
  8768  137F  0A91               	incf	17,f	;volatile
  8769  1380  2B83               	goto	l345
  8770  1381                     l4937:	
  8771                           
  8772                           ;bldc.c: 1768: else;bldc.c: 1769: {;bldc.c: 1771: CCPR1L = 0;
  8773  1381  0025               	movlb	5	; select bank5
  8774  1382  0191               	clrf	17	;volatile
  8775  1383                     l345:	
  8776                           
  8777                           ;bldc.c: 1773: };bldc.c: 1777: };bldc.c: 1780: comm_time = 0;
  8778                           
  8779                           ;bldc.c: 1784: if( comm_state == 0xff )
  8780  1383  27F1  3190         	fcall	PL82	;call to abstracted procedure
  8781  1385  0F6C               	incfsz	_comm_state^(0+128),w
  8782  1386  2BD5               	goto	l5087
  8783                           
  8784                           ;bldc.c: 1786: {;bldc.c: 1788: comm_state = 6;
  8785  1387  3006               	movlw	6
  8786  1388  00EC               	movwf	_comm_state^(0+128)
  8787  1389  2BD5               	goto	l5087
  8788  138A                     l4943:	
  8789                           
  8790                           ;bldc.c: 1800: {;bldc.c: 1806: PSTR1CON = 0b00000001;
  8791  138A  3001               	movlw	1
  8792  138B  0025               	movlb	5	; select bank5
  8793  138C  0096               	movwf	22	;volatile
  8794                           
  8795                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  8796  138D  0020               	movlb	0	; select bank0
  8797  138E  1F4D               	btfss	_MotorFlags,6
  8798  138F  2B92               	goto	l4949
  8799                           
  8800                           ;bldc.c: 1811: {;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  8801  1390  27AF  3190         	fcall	PL38	;call to abstracted procedure
  8802  1392                     l4949:	
  8803                           
  8804                           ;bldc.c: 1815: };bldc.c: 1819: LATB2 = 0;
  8805                           
  8806                           ;bldc.c: 1820: LATB1 = 0;
  8807                           
  8808                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  8809                           
  8810                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  8811                           
  8812                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  8813                           
  8814                           ;bldc.c: 1824: CM1CON1 = 0x02;
  8815                           
  8816                           ;bldc.c: 1837: CM1CON0 = 0x84;
  8817                           
  8818                           ;bldc.c: 1838: rising_bemf_flag = 1;
  8819  1392  2744  3190         	fcall	PL18	;call to abstracted procedure
  8820  1394  2BC2               	goto	L10
  8821  1395                     l4967:	
  8822                           ;bldc.c: 1845: break;
  8823                           
  8824                           ;bldc.c: 1839: comm_state = 6;
  8825                           
  8826                           
  8827                           ;bldc.c: 1855: {;bldc.c: 1860: PSTR1CON = 0b00000001;
  8828  1395  3001               	movlw	1
  8829  1396  0025               	movlb	5	; select bank5
  8830  1397  0096               	movwf	22	;volatile
  8831                           
  8832                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  8833  1398  0020               	movlb	0	; select bank0
  8834  1399  1F4D               	btfss	_MotorFlags,6
  8835  139A  2B9D               	goto	l4973
  8836                           
  8837                           ;bldc.c: 1865: {;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  8838  139B  27B5  3190         	fcall	PL42	;call to abstracted procedure
  8839  139D                     l4973:	
  8840                           
  8841                           ;bldc.c: 1869: };bldc.c: 1873: LATB2 = 1;
  8842                           
  8843                           ;bldc.c: 1874: LATB1 = 0;
  8844                           
  8845                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  8846                           
  8847                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  8848                           
  8849                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  8850                           
  8851                           ;bldc.c: 1878: CM1CON1 = 0x01;
  8852                           
  8853                           ;bldc.c: 1892: CM1CON0 = 0x94;
  8854  139D  2786  3190         	fcall	PL26	;call to abstracted procedure
  8855  139F                     l4987:	
  8856                           
  8857                           ;bldc.c: 1893: rising_bemf_flag = 0;
  8858                           
  8859                           ;bldc.c: 1894: comm_state = 1;
  8860  139F  27E1  3190         	fcall	PL70	;call to abstracted procedure
  8861                           
  8862                           ;bldc.c: 1902: break;
  8863  13A1  2BE9               	goto	l5089
  8864  13A2                     l4991:	
  8865                           
  8866                           ;bldc.c: 1912: {;bldc.c: 1917: PSTR1CON = 0b00000010;
  8867  13A2  3002               	movlw	2
  8868  13A3  0025               	movlb	5	; select bank5
  8869  13A4  0096               	movwf	22	;volatile
  8870                           
  8871                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  8872  13A5  0020               	movlb	0	; select bank0
  8873  13A6  1F4D               	btfss	_MotorFlags,6
  8874  13A7  2BAA               	goto	l4997
  8875                           
  8876                           ;bldc.c: 1922: {;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  8877  13A8  27A9  3190         	fcall	PL36	;call to abstracted procedure
  8878  13AA                     l4997:	
  8879                           
  8880                           ;bldc.c: 1926: };bldc.c: 1929: LATC2 = 0;
  8881                           
  8882                           ;bldc.c: 1931: LATB1 = 0;
  8883                           
  8884                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  8885                           
  8886                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  8887                           
  8888                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  8889                           
  8890                           ;bldc.c: 1935: CM1CON1 = 0x00;
  8891                           
  8892                           ;bldc.c: 1949: CM1CON0 = 0x84;
  8893                           
  8894                           ;bldc.c: 1950: rising_bemf_flag = 1;
  8895  13AA  2766  3190         	fcall	PL22	;call to abstracted procedure
  8896  13AC  2BC2               	goto	L10
  8897  13AD                     l5011:	
  8898                           ;bldc.c: 1956: break;
  8899                           
  8900                           ;bldc.c: 1951: comm_state = 2;
  8901                           
  8902                           
  8903                           ;bldc.c: 1966: {;bldc.c: 1972: PSTR1CON = 0b00000010;
  8904  13AD  3002               	movlw	2
  8905  13AE  0025               	movlb	5	; select bank5
  8906  13AF  0096               	movwf	22	;volatile
  8907                           
  8908                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  8909  13B0  0020               	movlb	0	; select bank0
  8910  13B1  1F4D               	btfss	_MotorFlags,6
  8911  13B2  2BB5               	goto	l5017
  8912                           
  8913                           ;bldc.c: 1977: {;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  8914  13B3  27AF  3190         	fcall	PL38	;call to abstracted procedure
  8915  13B5                     l5017:	
  8916                           
  8917                           ;bldc.c: 1981: };bldc.c: 1984: LATC2 = 0;
  8918                           
  8919                           ;bldc.c: 1986: LATB1 = 1;
  8920                           
  8921                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  8922                           
  8923                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  8924                           
  8925                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  8926                           
  8927                           ;bldc.c: 1990: CM1CON1 = 0x02;
  8928                           
  8929                           ;bldc.c: 2004: CM1CON0 = 0x94;
  8930                           
  8931                           ;bldc.c: 2005: rising_bemf_flag = 0;
  8932  13B5  2721  3190         	fcall	PL14	;call to abstracted procedure
  8933  13B7  2BCE               	goto	L11
  8934  13B8                     l5035:	
  8935                           ;bldc.c: 2011: break;
  8936                           
  8937                           ;bldc.c: 2006: comm_state = 3;
  8938                           
  8939                           
  8940                           ;bldc.c: 2020: {;bldc.c: 2026: PSTR1CON = 0b00000100;
  8941  13B8  3004               	movlw	4
  8942  13B9  0025               	movlb	5	; select bank5
  8943  13BA  0096               	movwf	22	;volatile
  8944                           
  8945                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  8946  13BB  0020               	movlb	0	; select bank0
  8947  13BC  1F4D               	btfss	_MotorFlags,6
  8948  13BD  2BC0               	goto	l5041
  8949                           
  8950                           ;bldc.c: 2031: {;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  8951  13BE  27B5  3190         	fcall	PL42	;call to abstracted procedure
  8952  13C0                     l5041:	
  8953                           
  8954                           ;bldc.c: 2035: };bldc.c: 2038: LATC2 = 0;
  8955                           
  8956                           ;bldc.c: 2039: LATB2 = 0;
  8957                           
  8958                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  8959                           
  8960                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  8961                           
  8962                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  8963                           
  8964                           ;bldc.c: 2044: CM1CON1 = 0x01;
  8965                           
  8966                           ;bldc.c: 2059: CM1CON0 = 0x84;
  8967                           
  8968                           ;bldc.c: 2060: rising_bemf_flag = 1;
  8969  13C0  2710  3190         	fcall	PL12	;call to abstracted procedure
  8970  13C2                     L10:	
  8971  13C2  1453               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  8972                           
  8973                           ;bldc.c: 2061: comm_state = 4;
  8974  13C3  2BCF               	goto	L8
  8975  13C4                     l5059:	
  8976                           ;bldc.c: 2066: break;
  8977                           
  8978                           
  8979                           ;bldc.c: 2076: {;bldc.c: 2081: PSTR1CON = 0b00000100;
  8980  13C4  3004               	movlw	4
  8981  13C5  0025               	movlb	5	; select bank5
  8982  13C6  0096               	movwf	22	;volatile
  8983                           
  8984                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  8985  13C7  0020               	movlb	0	; select bank0
  8986  13C8  1F4D               	btfss	_MotorFlags,6
  8987  13C9  2BCC               	goto	l5065
  8988                           
  8989                           ;bldc.c: 2086: {;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  8990  13CA  27A9  3190         	fcall	PL36	;call to abstracted procedure
  8991  13CC                     l5065:	
  8992                           
  8993                           ;bldc.c: 2090: };bldc.c: 2093: LATC2 = 1;
  8994                           
  8995                           ;bldc.c: 2094: LATB2 = 0;
  8996                           
  8997                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  8998                           
  8999                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9000                           
  9001                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9002                           
  9003                           ;bldc.c: 2099: CM1CON1 = 0x00;
  9004                           
  9005                           ;bldc.c: 2113: CM1CON0 = 0x94;
  9006                           
  9007                           ;bldc.c: 2114: rising_bemf_flag = 0;
  9008  13CC  2776  3190         	fcall	PL24	;call to abstracted procedure
  9009  13CE                     L11:	
  9010  13CE  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9011  13CF                     L8:	
  9012                           
  9013                           ;bldc.c: 2115: comm_state = 5;
  9014  13CF  0021               	movlb	1	; select bank1
  9015  13D0  00EC               	movwf	_comm_state^(0+128)
  9016                           
  9017                           ;bldc.c: 2120: break;
  9018  13D1  2BE9               	goto	l5089
  9019  13D2                     l5079:	
  9020                           
  9021                           ;bldc.c: 2129: {;bldc.c: 2131: PSTR1CON = 0x00;
  9022                           
  9023                           ;bldc.c: 2132: CM1CON0 = 0x00;
  9024  13D2  27EC  3190         	fcall	PL74	;call to abstracted procedure
  9025  13D4  2B9F               	goto	l4987
  9026  13D5                     l5087:	
  9027  13D5  086C               	movf	_comm_state^(0+128),w
  9028                           
  9029                           ; Switch size 1, requested type "space"
  9030                           ; Number of cases is 6, Range of values is 1 to 6
  9031                           ; switch strategies available:
  9032                           ; Name         Instructions Cycles
  9033                           ; simple_byte           19    10 (average)
  9034                           ; direct_byte           21     9 (fixed)
  9035                           ; jumptable            263     9 (fixed)
  9036                           ;	Chosen strategy is simple_byte
  9037  13D6  3A01               	xorlw	1	; case 1
  9038  13D7  1903               	skipnz
  9039  13D8  2B8A               	goto	l4943
  9040  13D9  3A03               	xorlw	3	; case 2
  9041  13DA  1903               	skipnz
  9042  13DB  2B95               	goto	l4967
  9043  13DC  3A01               	xorlw	1	; case 3
  9044  13DD  1903               	skipnz
  9045  13DE  2BA2               	goto	l4991
  9046  13DF  3A07               	xorlw	7	; case 4
  9047  13E0  1903               	skipnz
  9048  13E1  2BAD               	goto	l5011
  9049  13E2  3A01               	xorlw	1	; case 5
  9050  13E3  1903               	skipnz
  9051  13E4  2BB8               	goto	l5035
  9052  13E5  3A03               	xorlw	3	; case 6
  9053  13E6  1903               	skipnz
  9054  13E7  2BC4               	goto	l5059
  9055  13E8  2BD2               	goto	l5079
  9056  13E9                     l5089:	
  9057                           
  9058                           ;bldc.c: 2146: {;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
  9059                           
  9060                           ;bldc.c: 2158: };bldc.c: 2161: comm_time = 0;
  9061                           
  9062                           ;bldc.c: 2150: }
  9063  13E9  2FC1               	ljmp	PL52	;call to abstracted procedure
  9064  13EA                     __end_of_commutate:	
  9065  13EA                     __ptext38:	
  9066 ;; *************** function _interrrupt_bldc *****************
  9067 ;; Defined at:
  9068 ;;		line 281 in file "../bldc.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;  ui32_tmp        4    0[BANK0 ] unsigned long 
  9073 ;; Return value:  Size  Location     Type
  9074 ;;                  1    wreg      void 
  9075 ;; Registers used:
  9076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9077 ;; Tracked objects:
  9078 ;;		On entry : 1F/0
  9079 ;;		On exit  : 1C/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9082 ;;      Params:         0       0       0       0       0       0       0       0
  9083 ;;      Locals:         0       4       0       0       0       0       0       0
  9084 ;;      Temps:          2       0       0       0       0       0       0       0
  9085 ;;      Totals:         2       4       0       0       0       0       0       0
  9086 ;;Total ram usage:        6 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    1
  9089 ;; This function calls:
  9090 ;;		_BLDCWait
  9091 ;;		___lwdiv
  9092 ;;		i1_ADC_Read
  9093 ;;		i1_ADC_Wait
  9094 ;;		i1___wmul
  9095 ;;		i1_commutate
  9096 ;; This function is called by:
  9097 ;;		_interrupt_handler
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           
  9102                           ;psect for function _interrrupt_bldc
  9103  13EA                     _interrrupt_bldc:	
  9104                           
  9105                           ;bldc.c: 286: unsigned long ui32_tmp ;;bldc.c: 288: ++comm_time ;
  9106                           
  9107                           ;incstack = 0
  9108                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9109  13EA  0AC6               	incf	_comm_time,f
  9110  13EB  1903               	skipnz
  9111  13EC  0AC7               	incf	_comm_time+1,f
  9112                           
  9113                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
  9114  13ED  0847               	movf	_comm_time+1,w
  9115  13EE  0022               	movlb	2	; select bank2
  9116  13EF  0240               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  9117  13F0  1D03               	skipz
  9118  13F1  2BF6               	goto	u699_25
  9119  13F2  0020               	movlb	0	; select bank0
  9120  13F3  0846               	movf	_comm_time,w
  9121  13F4  0022               	movlb	2	; select bank2
  9122  13F5  023F               	subwf	_ui16_comm_time_max^(0+256),w
  9123  13F6                     u699_25:	
  9124  13F6  1803               	skipnc
  9125  13F7  2BFA               	goto	i1l9075
  9126                           
  9127                           ;bldc.c: 294: {;bldc.c: 296: commutate( );
  9128  13F8  25B5  3190         	fcall	i1_commutate
  9129  13FA                     i1l9075:	
  9130                           
  9131                           ;bldc.c: 298: };bldc.c: 302: if( ui16_step_cnt < 10 )
  9132  13FA  3000               	movlw	0
  9133  13FB  0021               	movlb	1	; select bank1
  9134  13FC  0233               	subwf	(_ui16_step_cnt+1)^(0+128),w
  9135  13FD  300A               	movlw	10
  9136  13FE  1903               	skipnz
  9137  13FF  0232               	subwf	_ui16_step_cnt^(0+128),w
  9138  1400  1C03               	btfss	3,0
  9139  1401  2C04               	goto	i1l9079
  9140                           
  9141                           ;bldc.c: 311: else;bldc.c: 312: {;bldc.c: 322: MotorFlags.bits.B3 = 0;
  9142  1402  0020               	movlb	0	; select bank0
  9143  1403  11CD               	bcf	_MotorFlags,3
  9144  1404                     i1l9079:	
  9145                           
  9146                           ;bldc.c: 328: };bldc.c: 331: if (ui16_step_cnt >= 3 )
  9147  1404  3000               	movlw	0
  9148  1405  0021               	movlb	1	; select bank1
  9149  1406  0233               	subwf	(_ui16_step_cnt+1)^(0+128),w
  9150  1407  3003               	movlw	3
  9151  1408  1903               	skipnz
  9152  1409  0232               	subwf	_ui16_step_cnt^(0+128),w
  9153  140A  1C03               	skipc
  9154  140B  2C0E               	goto	i1l9083
  9155                           
  9156                           ;bldc.c: 333: {;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
  9157  140C  0020               	movlb	0	; select bank0
  9158  140D  124D               	bcf	_MotorFlags,4
  9159  140E                     i1l9083:	
  9160                           
  9161                           ;bldc.c: 337: };bldc.c: 340: BLDCWait( );
  9162  140E  26BC  3190         	fcall	_BLDCWait
  9163                           
  9164                           ;bldc.c: 346: if( C1OUT )
  9165  1410  0022               	movlb	2	; select bank2
  9166  1411  1F11               	btfss	17,6	;volatile
  9167  1412  2C16               	goto	i1l263
  9168                           
  9169                           ;bldc.c: 349: {;bldc.c: 351: ui8_CompFlag = 0x00;
  9170  1413  0021               	movlb	1	; select bank1
  9171  1414  01E6               	clrf	_ui8_CompFlag^(0+128)
  9172                           
  9173                           ;bldc.c: 353: }
  9174  1415  2D16               	goto	i1l9265
  9175  1416                     i1l263:	
  9176                           
  9177                           ;bldc.c: 356: else;bldc.c: 357: {;bldc.c: 362: ui8_CompFlag = 0x01;
  9178  1416  0021               	movlb	1	; select bank1
  9179  1417  01E6               	clrf	_ui8_CompFlag^(0+128)
  9180  1418  0AE6               	incf	_ui8_CompFlag^(0+128),f
  9181  1419  2D16               	goto	i1l9265
  9182  141A                     i1l9089:	
  9183                           
  9184                           ;bldc.c: 378: {;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
  9185  141A  302D               	movlw	45
  9186  141B  009D               	movwf	29	;volatile
  9187                           
  9188                           ;bldc.c: 387: ADC_Wait( );
  9189  141C  2579  3190         	fcall	i1_ADC_Wait
  9190                           
  9191                           ;bldc.c: 391: ( GO_nDONE = 1 );
  9192  141E  0021               	movlb	1	; select bank1
  9193  141F  149D               	bsf	29,1	;volatile
  9194                           
  9195                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
  9196  1420  2592  3190         	fcall	i1_ADC_Read
  9197  1422  0871               	movf	?i1_ADC_Read+1,w
  9198  1423  0022               	movlb	2	; select bank2
  9199  1424  00D6               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+256)
  9200  1425  0870               	movf	?i1_ADC_Read,w
  9201  1426  00D5               	movwf	_ui16_NTC_Temp_bldc^(0+256)
  9202                           
  9203                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  9204  1427  3031               	movlw	49
  9205  1428  0021               	movlb	1	; select bank1
  9206  1429                     L41:	
  9207  1429  009D               	movwf	29	;volatile
  9208  142A                     L36:	
  9209                           
  9210                           ;bldc.c: 403: ADC_Wait( );
  9211  142A  2579  3190         	fcall	i1_ADC_Wait
  9212                           
  9213                           ;bldc.c: 407: ( GO_nDONE = 1 );
  9214  142C  0021               	movlb	1	; select bank1
  9215  142D  149D               	bsf	29,1	;volatile
  9216  142E                     i1l9099:	
  9217                           
  9218                           ;bldc.c: 410: ui8_sampleState++;
  9219  142E  0021               	movlb	1	; select bank1
  9220  142F  0AE7               	incf	_ui8_sampleState^(0+128),f
  9221                           
  9222                           ;bldc.c: 413: break;
  9223  1430  2D23               	goto	i1l267
  9224  1431                     i1l9101:	
  9225                           
  9226                           ;bldc.c: 421: {;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
  9227  1431  0868               	movf	_ui8_Ubemf_sel^(0+128),w
  9228  1432  009D               	movwf	29	;volatile
  9229                           
  9230                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
  9231  1433  081B               	movf	27,w	;volatile
  9232  1434  0020               	movlb	0	; select bank0
  9233  1435  00D1               	movwf	_ui16_Ubat_bldc	;volatile
  9234                           
  9235                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
  9236  1436  0021               	movlb	1	; select bank1
  9237  1437  081C               	movf	28,w	;volatile
  9238  1438  0020               	movlb	0	; select bank0
  9239  1439  00D2               	movwf	_ui16_Ubat_bldc+1	;volatile
  9240                           
  9241                           ;bldc.c: 454: __nop();
  9242  143A  0000               	nop
  9243                           
  9244                           ;bldc.c: 455: __nop();
  9245  143B  0000               	nop
  9246                           
  9247                           ;bldc.c: 456: __nop();
  9248  143C  0000               	nop
  9249                           
  9250                           ;bldc.c: 457: __nop();
  9251  143D  0000               	nop
  9252                           
  9253                           ;bldc.c: 458: __nop();
  9254  143E  0000               	nop
  9255                           
  9256                           ;bldc.c: 459: __nop();
  9257  143F  0000               	nop
  9258                           
  9259                           ;bldc.c: 460: __nop();
  9260  1440  0000               	nop
  9261                           
  9262                           ;bldc.c: 461: __nop();
  9263  1441  0000               	nop
  9264                           
  9265                           ;bldc.c: 463: __nop();
  9266  1442  0000               	nop
  9267                           
  9268                           ;bldc.c: 464: __nop();
  9269  1443  0000               	nop
  9270                           
  9271                           ;bldc.c: 465: __nop();
  9272  1444  0000               	nop
  9273                           
  9274                           ;bldc.c: 466: __nop();
  9275  1445  0000               	nop
  9276                           
  9277                           ;bldc.c: 467: __nop();
  9278  1446  0000               	nop
  9279                           
  9280                           ;bldc.c: 468: __nop();
  9281  1447  0000               	nop
  9282                           
  9283                           ;bldc.c: 469: __nop();
  9284  1448  0000               	nop
  9285                           
  9286                           ;bldc.c: 470: __nop();
  9287  1449  0000               	nop
  9288  144A  2C2A               	goto	L36
  9289  144B                     i1l9141:	
  9290                           ;bldc.c: 474: ADC_Wait();
  9291                           
  9292                           
  9293                           ;bldc.c: 491: {;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
  9294  144B  081B               	movf	27,w	;volatile
  9295  144C  00AE               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
  9296                           
  9297                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
  9298  144D  081C               	movf	28,w	;volatile
  9299  144E  00AF               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
  9300                           
  9301                           ;bldc.c: 511: ( GO_nDONE = 1 );
  9302  144F  149D               	bsf	29,1	;volatile
  9303                           
  9304                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui8_duty_cycle_BLDC != 0 ) )
  9305  1450  0020               	movlb	0	; select bank0
  9306  1451  1F4D               	btfss	_MotorFlags,6
  9307  1452  2C68               	goto	i1l9153
  9308  1453  084E               	movf	_ui8_duty_cycle_BLDC,w
  9309  1454  1903               	btfsc	3,2
  9310  1455  2C68               	goto	i1l9153
  9311                           
  9312                           ;bldc.c: 521: {;bldc.c: 523: if( rising_bemf_flag )
  9313  1456  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9314  1457  2C71               	goto	i1l9161
  9315                           
  9316                           ;bldc.c: 525: {;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
  9317  1458  0021               	movlb	1	; select bank1
  9318  1459  082E               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  9319  145A  3E64               	addlw	100
  9320  145B  00FC               	movwf	??_interrrupt_bldc
  9321  145C  3000               	movlw	0
  9322  145D  3D2F               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  9323  145E  00FD               	movwf	??_interrrupt_bldc+1
  9324  145F  0020               	movlb	0	; select bank0
  9325  1460  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
  9326  1461  027D               	subwf	??_interrrupt_bldc+1,w
  9327  1462  1D03               	skipz
  9328  1463  2C66               	goto	u706_25
  9329  1464  0851               	movf	_ui16_Ubat_bldc,w	;volatile
  9330  1465  027C               	subwf	??_interrrupt_bldc,w
  9331  1466                     u706_25:	
  9332  1466  1803               	skipnc
  9333  1467  2D23               	goto	i1l267
  9334  1468                     i1l9153:	
  9335                           
  9336                           ;bldc.c: 530: {;bldc.c: 534: ui8_sampleState++;
  9337  1468  0021               	movlb	1	; select bank1
  9338  1469  0AE7               	incf	_ui8_sampleState^(0+128),f
  9339                           
  9340                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
  9341  146A  0869               	movf	_ui8_UPhase_sel^(0+128),w
  9342  146B  009D               	movwf	29	;volatile
  9343                           
  9344                           ;bldc.c: 540: ADC_Wait( );
  9345  146C  2579  3190         	fcall	i1_ADC_Wait
  9346                           
  9347                           ;bldc.c: 544: ( GO_nDONE = 1 );
  9348  146E  0021               	movlb	1	; select bank1
  9349  146F  149D               	bsf	29,1	;volatile
  9350                           
  9351                           ;bldc.c: 547: }
  9352  1470  2D23               	goto	i1l267
  9353  1471                     i1l9161:	
  9354                           
  9355                           ;bldc.c: 562: else;bldc.c: 563: {;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
  9356  1471  3000               	movlw	0
  9357  1472  0021               	movlb	1	; select bank1
  9358  1473  022F               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  9359  1474  301F               	movlw	31
  9360  1475  1903               	skipnz
  9361  1476  022E               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  9362  1477  1803               	btfsc	3,0
  9363  1478  2C68               	goto	i1l9153
  9364  1479  2D23               	goto	i1l267
  9365  147A                     i1l9179:	
  9366                           ;bldc.c: 593: };bldc.c: 596: };bldc.c: 601: }
  9367                           
  9368                           
  9369                           ;bldc.c: 665: ui8_BlankingCount = 0;
  9370  147A  01EB               	clrf	_ui8_BlankingCount^(0+128)
  9371                           
  9372                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
  9373  147B  2592  3190         	fcall	i1_ADC_Read
  9374                           
  9375                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
  9376  147D  1CCF               	btfss	_ui8_error_Flags,1
  9377  147E  2C88               	goto	i1l9193
  9378                           
  9379                           ;bldc.c: 677: {;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
  9380  147F  0021               	movlb	1	; select bank1
  9381  1480  086A               	movf	_ui8_IPhase_sel^(0+128),w
  9382  1481  009D               	movwf	29	;volatile
  9383                           
  9384                           ;bldc.c: 682: ADC_Wait( );
  9385  1482  2579  3190         	fcall	i1_ADC_Wait
  9386                           
  9387                           ;bldc.c: 683: ( GO_nDONE = 1 );
  9388  1484  0021               	movlb	1	; select bank1
  9389  1485  149D               	bsf	29,1	;volatile
  9390                           
  9391                           ;bldc.c: 686: ui8_sampleState = 9;
  9392  1486  3009               	movlw	9
  9393  1487  2D14               	goto	L37
  9394  1488                     i1l9193:	
  9395                           ;bldc.c: 688: }
  9396                           
  9397                           
  9398                           ;bldc.c: 691: else;bldc.c: 692: {;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  9399  1488  3075               	movlw	117
  9400  1489  0021               	movlb	1	; select bank1
  9401  148A  009D               	movwf	29	;volatile
  9402                           
  9403                           ;bldc.c: 697: ADC_Wait( );
  9404  148B  2579  3190         	fcall	i1_ADC_Wait
  9405  148D  2C2E               	goto	i1l9099
  9406  148E                     i1l284:	
  9407                           ;bldc.c: 754: };bldc.c: 757: case 8:
  9408                           
  9409                           
  9410                           ;bldc.c: 759: {;bldc.c: 764: ( GO_nDONE = 1 );
  9411  148E  149D               	bsf	29,1	;volatile
  9412                           
  9413                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
  9414  148F  2592  3190         	fcall	i1_ADC_Read
  9415                           
  9416                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
  9417  1491  0021               	movlb	1	; select bank1
  9418  1492  086A               	movf	_ui8_IPhase_sel^(0+128),w
  9419  1493  2C29               	goto	L41
  9420  1494                     i1l9213:	
  9421                           ;bldc.c: 776: ADC_Wait( );
  9422                           
  9423                           
  9424                           ;bldc.c: 795: {;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
  9425  1494  2592  3190         	fcall	i1_ADC_Read
  9426  1496  0871               	movf	?i1_ADC_Read+1,w
  9427  1497  00C5               	movwf	_ui16_IPhase_bldc+1	;volatile
  9428  1498  0870               	movf	?i1_ADC_Read,w
  9429  1499  00C4               	movwf	_ui16_IPhase_bldc	;volatile
  9430                           
  9431                           ;bldc.c: 806: if (MotorFlags.bits.B6)
  9432  149A  1B4D               	btfsc	_MotorFlags,6
  9433  149B  2CE7               	goto	i1l9239
  9434  149C  2CF3               	goto	i1l9241
  9435  149D                     i1l9219:	
  9436                           
  9437                           ;bldc.c: 816: {;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0
      +                          ]) )
  9438  149D  0022               	movlb	2	; select bank2
  9439  149E  0820               	movf	_ui8_current_cal^(0+256),w
  9440  149F  2796  3190         	fcall	PL28	;call to abstracted procedure
  9441  14A1  1803               	skipnc
  9442  14A2  2CB2               	goto	i1l9223
  9443                           
  9444                           ;bldc.c: 820: {;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[0])*ui16_I_cal_Ph1)>>8);
  9445  14A3  27BB  3190         	fcall	PL48	;call to abstracted procedure
  9446  14A5  0820               	movf	_ui8_current_cal^(0+256),w
  9447  14A6  02F0               	subwf	i1___wmul@multiplier,f
  9448  14A7  1C03               	skipc
  9449  14A8  03F1               	decf	i1___wmul@multiplier+1,f
  9450  14A9  086B               	movf	(_ui16_I_cal_Ph1+1)^(0+256),w
  9451  14AA  00F3               	movwf	i1___wmul@multiplicand+1
  9452  14AB  086A               	movf	_ui16_I_cal_Ph1^(0+256),w
  9453  14AC  00F2               	movwf	i1___wmul@multiplicand
  9454  14AD  25A0  3190         	fcall	i1___wmul
  9455  14AF  0871               	movf	?i1___wmul+1,w
  9456  14B0  00D7               	movwf	_ui16_IPhase1_bldc^(0+256)	;volatile
  9457  14B1  2CB4               	goto	L38
  9458  14B2                     i1l9223:	
  9459                           ;bldc.c: 824: }
  9460                           
  9461                           
  9462                           ;bldc.c: 827: else;bldc.c: 828: {;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
  9463  14B2  0022               	movlb	2	; select bank2
  9464  14B3  01D7               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  9465  14B4                     L38:	
  9466  14B4  01D8               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  9467  14B5  2CFA               	goto	i1l9243
  9468  14B6                     i1l9225:	
  9469                           
  9470                           ;bldc.c: 842: {;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1
      +                          ] ) )
  9471  14B6  0022               	movlb	2	; select bank2
  9472  14B7  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  9473  14B8  2796  3190         	fcall	PL28	;call to abstracted procedure
  9474  14BA  1803               	skipnc
  9475  14BB  2CCB               	goto	i1l9229
  9476                           
  9477                           ;bldc.c: 846: {;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[1])*ui16_I_cal_Ph2)>>8);
  9478  14BC  27BB  3190         	fcall	PL48	;call to abstracted procedure
  9479  14BE  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  9480  14BF  02F0               	subwf	i1___wmul@multiplier,f
  9481  14C0  1C03               	skipc
  9482  14C1  03F1               	decf	i1___wmul@multiplier+1,f
  9483  14C2  0869               	movf	(_ui16_I_cal_Ph2+1)^(0+256),w
  9484  14C3  00F3               	movwf	i1___wmul@multiplicand+1
  9485  14C4  0868               	movf	_ui16_I_cal_Ph2^(0+256),w
  9486  14C5  00F2               	movwf	i1___wmul@multiplicand
  9487  14C6  25A0  3190         	fcall	i1___wmul
  9488  14C8  0871               	movf	?i1___wmul+1,w
  9489  14C9  00BB               	movwf	_ui16_IPhase2_bldc^(0+256)	;volatile
  9490  14CA  2CCD               	goto	L39
  9491  14CB                     i1l9229:	
  9492                           ;bldc.c: 851: }
  9493                           
  9494                           
  9495                           ;bldc.c: 854: else;bldc.c: 855: {;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
  9496  14CB  0022               	movlb	2	; select bank2
  9497  14CC  01BB               	clrf	_ui16_IPhase2_bldc^(0+256)	;volatile
  9498  14CD                     L39:	
  9499  14CD  01BC               	clrf	(_ui16_IPhase2_bldc+1)^(0+256)	;volatile
  9500  14CE  2CFA               	goto	i1l9243
  9501  14CF                     i1l9231:	
  9502                           
  9503                           ;bldc.c: 869: {;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]
      +                          ) )
  9504  14CF  0022               	movlb	2	; select bank2
  9505  14D0  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  9506  14D1  2796  3190         	fcall	PL28	;call to abstracted procedure
  9507  14D3  1803               	skipnc
  9508  14D4  2CE4               	goto	i1l9235
  9509                           
  9510                           ;bldc.c: 873: {;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_c
      +                          al[2])*ui16_I_cal_Ph3)>>8);
  9511  14D5  27BB  3190         	fcall	PL48	;call to abstracted procedure
  9512  14D7  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  9513  14D8  02F0               	subwf	i1___wmul@multiplier,f
  9514  14D9  1C03               	skipc
  9515  14DA  03F1               	decf	i1___wmul@multiplier+1,f
  9516  14DB  0867               	movf	(_ui16_I_cal_Ph3+1)^(0+256),w
  9517  14DC  00F3               	movwf	i1___wmul@multiplicand+1
  9518  14DD  0866               	movf	_ui16_I_cal_Ph3^(0+256),w
  9519  14DE  00F2               	movwf	i1___wmul@multiplicand
  9520  14DF  25A0  3190         	fcall	i1___wmul
  9521  14E1  0871               	movf	?i1___wmul+1,w
  9522  14E2  00B9               	movwf	_ui16_IPhase3_bldc^(0+256)	;volatile
  9523  14E3  2CF9               	goto	L40
  9524  14E4                     i1l9235:	
  9525                           ;bldc.c: 877: }
  9526                           
  9527                           
  9528                           ;bldc.c: 880: else;bldc.c: 881: {;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
  9529  14E4  0022               	movlb	2	; select bank2
  9530  14E5  2CF8               	goto	L42
  9531  14E6                     i1l9237:	
  9532  14E6  2CF3               	goto	i1l9241
  9533  14E7                     i1l9239:	
  9534                           ;bldc.c: 902: };bldc.c: 904: }
  9535                           
  9536                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
  9537                           
  9538                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
  9539                           
  9540                           ;bldc.c: 895: {;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
  9541                           
  9542  14E7  0021               	movlb	1	; select bank1
  9543  14E8  086A               	movf	_ui8_IPhase_sel^(0+128),w
  9544                           
  9545                           ; Switch size 1, requested type "space"
  9546                           ; Number of cases is 3, Range of values is 9 to 53
  9547                           ; switch strategies available:
  9548                           ; Name         Instructions Cycles
  9549                           ; simple_byte           10     6 (average)
  9550                           ; direct_byte           99     9 (fixed)
  9551                           ; jumptable            263     9 (fixed)
  9552                           ;	Chosen strategy is simple_byte
  9553  14E9  3A09               	xorlw	9	; case 9
  9554  14EA  1903               	skipnz
  9555  14EB  2C9D               	goto	i1l9219
  9556  14EC  3A18               	xorlw	24	; case 17
  9557  14ED  1903               	skipnz
  9558  14EE  2CCF               	goto	i1l9231
  9559  14EF  3A24               	xorlw	36	; case 53
  9560  14F0  1903               	skipnz
  9561  14F1  2CB6               	goto	i1l9225
  9562  14F2  2CE6               	goto	i1l9237
  9563  14F3                     i1l9241:	
  9564                           
  9565                           ;bldc.c: 910: else;bldc.c: 911: {;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
  9566  14F3  0022               	movlb	2	; select bank2
  9567  14F4  01D7               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  9568  14F5  01D8               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  9569                           
  9570                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
  9571  14F6  01BB               	clrf	_ui16_IPhase2_bldc^(0+256)	;volatile
  9572  14F7  01BC               	clrf	(_ui16_IPhase2_bldc+1)^(0+256)	;volatile
  9573  14F8                     L42:	
  9574                           
  9575                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
  9576  14F8  01B9               	clrf	_ui16_IPhase3_bldc^(0+256)	;volatile
  9577  14F9                     L40:	
  9578  14F9  01BA               	clrf	(_ui16_IPhase3_bldc+1)^(0+256)	;volatile
  9579  14FA                     i1l9243:	
  9580                           
  9581                           ;bldc.c: 918: };bldc.c: 956: if( (ui16_IPhase_bldc.w > 500+40) )
  9582  14FA  3002               	movlw	2
  9583  14FB  0020               	movlb	0	; select bank0
  9584  14FC  0245               	subwf	_ui16_IPhase_bldc+1,w	;volatile
  9585  14FD  301D               	movlw	29
  9586  14FE  1903               	skipnz
  9587  14FF  0244               	subwf	_ui16_IPhase_bldc,w	;volatile
  9588  1500  1C03               	skipc
  9589  1501  2D06               	goto	i1l9249
  9590  1502  30E5               	movlw	229
  9591                           
  9592                           ;bldc.c: 958: {;bldc.c: 960: MotorFlags.bits.B0 = 1;
  9593  1503  144D               	bsf	_MotorFlags,0
  9594                           
  9595                           ;bldc.c: 964: LATC = LATC & 0b11100101;
  9596  1504  0022               	movlb	2	; select bank2
  9597  1505  058E               	andwf	14,f	;volatile
  9598  1506                     i1l9249:	
  9599                           ;bldc.c: 970: }
  9600                           
  9601                           
  9602                           ;bldc.c: 978: };bldc.c: 984: ADC_Wait( );
  9603  1506  2579  3190         	fcall	i1_ADC_Wait
  9604                           
  9605                           ;bldc.c: 988: ( GO_nDONE = 1 );
  9606  1508  0021               	movlb	1	; select bank1
  9607  1509  149D               	bsf	29,1	;volatile
  9608                           
  9609                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
  9610  150A  0020               	movlb	0	; select bank0
  9611  150B  1CCF               	btfss	_ui8_error_Flags,1
  9612  150C  2C2E               	goto	i1l9099
  9613                           
  9614                           ;bldc.c: 993: {;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  9615  150D  3075               	movlw	117
  9616  150E  0021               	movlb	1	; select bank1
  9617  150F  009D               	movwf	29	;volatile
  9618                           
  9619                           ;bldc.c: 998: ADC_Wait( );
  9620  1510  2579  3190         	fcall	i1_ADC_Wait
  9621                           
  9622                           ;bldc.c: 1001: ui8_sampleState = 5;
  9623  1512  3005               	movlw	5
  9624  1513  0021               	movlb	1	; select bank1
  9625  1514                     L37:	
  9626  1514  00E7               	movwf	_ui8_sampleState^(0+128)
  9627                           
  9628                           ;bldc.c: 1003: }
  9629  1515  2D23               	goto	i1l267
  9630  1516                     i1l9265:	
  9631  1516  0867               	movf	_ui8_sampleState^(0+128),w
  9632                           
  9633                           ; Switch size 1, requested type "space"
  9634                           ; Number of cases is 10, Range of values is 1 to 10
  9635                           ; switch strategies available:
  9636                           ; Name         Instructions Cycles
  9637                           ; direct_byte           29     9 (fixed)
  9638                           ; simple_byte           31    16 (average)
  9639                           ; jumptable            263     9 (fixed)
  9640                           ;	Chosen strategy is direct_byte
  9641  1517  3EFF               	addlw	-1
  9642  1518  1C03               	skipc
  9643  1519  2D23               	goto	i1l267
  9644  151A  0084               	movwf	4
  9645  151B  300A               	movlw	10
  9646  151C  0204               	subwf	4,w
  9647  151D  1803               	skipnc
  9648  151E  2D23               	goto	i1l267
  9649  151F  3182               	movlp	high i1S10361
  9650  1520  3504               	lslf	4,w
  9651  1521  3EBF               	addlw	low i1S10361
  9652  1522  0082               	movwf	2
  9653  1523                     i1l267:	
  9654                           
  9655                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
  9656  1523  0020               	movlb	0	; select bank0
  9657  1524  1F4D               	btfss	_MotorFlags,6
  9658  1525  2D58               	goto	i1l9293
  9659                           
  9660                           ;bldc.c: 1071: {;bldc.c: 1073: if( MotorFlags.bits.B3)
  9661  1526  1DCD               	btfss	_MotorFlags,3
  9662  1527  2D5A               	goto	i1l9295
  9663                           
  9664                           ;bldc.c: 1075: {;bldc.c: 1077: bool_start_demand_mat = 1 ;
  9665  1528  0021               	movlb	1	; select bank1
  9666  1529  3041               	movlw	65
  9667  152A  01EE               	clrf	_bool_start_demand_mat^(0+128)
  9668  152B  0AEE               	incf	_bool_start_demand_mat^(0+128),f
  9669                           
  9670                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
  9671  152C  0022               	movlb	2	; select bank2
  9672  152D  00C3               	movwf	_ui8_fixed_start_speed_mat^(0+256)
  9673  152E  01C4               	clrf	(_ui8_fixed_start_speed_mat+1)^(0+256)
  9674                           
  9675                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
  9676  152F  0020               	movlb	0	; select bank0
  9677  1530  0846               	movf	_comm_time,w
  9678  1531  3903               	andlw	3
  9679  1532  1D03               	btfss	3,2
  9680  1533  2D5A               	goto	i1l9295
  9681                           
  9682                           ;bldc.c: 1111: else;bldc.c: 1112: {;bldc.c: 1114: if (ui16_Ubat_bldc.w)
  9683                           
  9684                           ;bldc.c: 1100: {;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
  9685                           
  9686                           ;bldc.c: 1096: {;bldc.c: 1098: if (ui16_Ubat_bldc.w)
  9687                           
  9688                           ;bldc.c: 1092: {;bldc.c: 1094: if (MotorFlags.bits.B4)
  9689  1534  0851               	movf	_ui16_Ubat_bldc,w	;volatile
  9690  1535  0452               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
  9691  1536  1903               	btfsc	3,2
  9692  1537  2D49               	goto	i1l9285
  9693                           
  9694                           ;bldc.c: 1116: {;bldc.c: 1119: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
  9695  1538  0852               	movf	_ui16_Ubat_bldc+1,w	;volatile
  9696  1539  00F1               	movwf	___lwdiv@divisor+1
  9697  153A  0851               	movf	_ui16_Ubat_bldc,w	;volatile
  9698  153B  00F0               	movwf	___lwdiv@divisor
  9699  153C  3080               	movlw	128
  9700  153D  00F2               	movwf	___lwdiv@dividend
  9701  153E  303E               	movlw	62
  9702  153F  00F3               	movwf	___lwdiv@dividend+1
  9703  1540  3182  2247  3190   	fcall	___lwdiv
  9704  1543  0870               	movf	?___lwdiv,w
  9705  1544  00A0               	movwf	interrrupt_bldc@ui32_tmp
  9706  1545  0871               	movf	?___lwdiv+1,w
  9707  1546  00A1               	movwf	interrrupt_bldc@ui32_tmp+1
  9708  1547  01A2               	clrf	interrrupt_bldc@ui32_tmp+2
  9709  1548  01A3               	clrf	interrrupt_bldc@ui32_tmp+3
  9710  1549                     i1l9285:	
  9711                           
  9712                           ;bldc.c: 1121: };bldc.c: 1124: };bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui
      +                          32_tmp) )
  9713  1549  0021               	movlb	1	; select bank1
  9714  154A  086D               	movf	_ui8_StartupPWM^(0+128),w
  9715  154B  0020               	movlb	0	; select bank0
  9716  154C  0220               	subwf	interrrupt_bldc@ui32_tmp,w
  9717  154D  1803               	skipnc
  9718  154E  2D52               	goto	i1l9289
  9719                           
  9720                           ;bldc.c: 1129: {;bldc.c: 1131: ui8_StartupPWM--;
  9721  154F  0021               	movlb	1	; select bank1
  9722  1550  03ED               	decf	_ui8_StartupPWM^(0+128),f
  9723                           
  9724                           ;bldc.c: 1133: }
  9725  1551  2D54               	goto	i1l9291
  9726  1552                     i1l9289:	
  9727                           
  9728                           ;bldc.c: 1136: else;bldc.c: 1137: {;bldc.c: 1139: ui8_StartupPWM++;
  9729  1552  0021               	movlb	1	; select bank1
  9730  1553  0AED               	incf	_ui8_StartupPWM^(0+128),f
  9731  1554                     i1l9291:	
  9732                           
  9733                           ;bldc.c: 1141: };bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
  9734  1554  086D               	movf	_ui8_StartupPWM^(0+128),w
  9735  1555  0025               	movlb	5	; select bank5
  9736  1556  0091               	movwf	17	;volatile
  9737  1557  2D5A               	goto	i1l9295
  9738  1558                     i1l9293:	
  9739                           
  9740                           ;bldc.c: 1155: else;bldc.c: 1156: {;bldc.c: 1159: CCPR1L = 0;
  9741  1558  0025               	movlb	5	; select bank5
  9742  1559  0191               	clrf	17	;volatile
  9743  155A                     i1l9295:	
  9744                           
  9745                           ;bldc.c: 1161: };bldc.c: 1165: if( 0 == ui8_BlankingCount )
  9746  155A  0021               	movlb	1	; select bank1
  9747  155B  086B               	movf	_ui8_BlankingCount^(0+128),w
  9748  155C  1D03               	btfss	3,2
  9749  155D  2D77               	goto	i1l9311
  9750                           
  9751                           ;bldc.c: 1168: {;bldc.c: 1177: if( ui8_CompFlag )
  9752  155E  0866               	movf	_ui8_CompFlag^(0+128),w
  9753  155F  1903               	btfsc	3,2
  9754  1560  2D65               	goto	i1l316
  9755                           
  9756                           ;bldc.c: 1187: {;bldc.c: 1191: ui8_zero_cros_cnt++;
  9757  1561  0020               	movlb	0	; select bank0
  9758  1562  1ACD               	btfsc	_MotorFlags,5
  9759  1563  2D65               	goto	i1l316
  9760                           
  9761                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
  9762  1564  16CD               	bsf	_MotorFlags,5
  9763  1565                     i1l316:	
  9764                           ;bldc.c: 1196: };bldc.c: 1199: };bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
  9765                           
  9766                           
  9767                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
  9768  1565  0020               	movlb	0	; select bank0
  9769  1566  1ECD               	btfss	_MotorFlags,5
  9770  1567  0008               	return
  9771                           
  9772                           ;bldc.c: 1353: {;bldc.c: 1357: if( 0 == phase_delay_counter )
  9773  1568  0022               	movlb	2	; select bank2
  9774  1569  083D               	movf	_phase_delay_counter^(0+256),w
  9775  156A  043E               	iorwf	(_phase_delay_counter+1)^(0+256),w
  9776  156B  1D03               	btfss	3,2
  9777  156C  2D72               	goto	i1l9309
  9778                           
  9779                           ;bldc.c: 1360: {;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
  9780  156D  0020               	movlb	0	; select bank0
  9781  156E  19CD               	btfsc	_MotorFlags,3
  9782  156F  0008               	return
  9783                           
  9784                           ;bldc.c: 1364: {;bldc.c: 1378: commutate( );
  9785  1570  25B5               	fcall	i1_commutate
  9786  1571  0008               	return
  9787  1572                     i1l9309:	
  9788                           
  9789                           ;bldc.c: 1389: else;bldc.c: 1390: {;bldc.c: 1392: phase_delay_counter--;
  9790  1572  30FF               	movlw	-1
  9791  1573  07BD               	addwf	_phase_delay_counter^(0+256),f
  9792  1574  1C03               	skipc
  9793  1575  03BE               	decf	(_phase_delay_counter+1)^(0+256),f
  9794                           
  9795                           ;bldc.c: 1394: };bldc.c: 1398: };bldc.c: 1401: }
  9796  1576  0008               	return
  9797  1577                     i1l9311:	
  9798                           
  9799                           ;bldc.c: 1408: bemf_filter = 62;
  9800  1577  03EB               	decf	_ui8_BlankingCount^(0+128),f
  9801  1578  0008               	return
  9802  1579                     __end_of_interrrupt_bldc:	
  9803  1579                     __ptext41:	
  9804 ;; *************** function i1_ADC_Wait *****************
  9805 ;; Defined at:
  9806 ;;		line 128 in file "../adc.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;		None
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;		None
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  1    wreg      void 
  9813 ;; Registers used:
  9814 ;;		None
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/1
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9820 ;;      Params:         0       0       0       0       0       0       0       0
  9821 ;;      Locals:         0       0       0       0       0       0       0       0
  9822 ;;      Temps:          0       0       0       0       0       0       0       0
  9823 ;;      Totals:         0       0       0       0       0       0       0       0
  9824 ;;Total ram usage:        0 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; This function calls:
  9827 ;;		Nothing
  9828 ;; This function is called by:
  9829 ;;		_interrrupt_bldc
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           
  9834                           ;psect for function i1_ADC_Wait
  9835  1579                     i1_ADC_Wait:	
  9836                           
  9837                           ;adc.c: 133: __nop();
  9838                           
  9839                           ;incstack = 0
  9840                           ; Regs used in i1_ADC_Wait: []
  9841  1579  0000               	nop
  9842                           
  9843                           ;adc.c: 134: __nop();
  9844  157A  0000               	nop
  9845                           
  9846                           ;adc.c: 135: __nop();
  9847  157B  0000               	nop
  9848                           
  9849                           ;adc.c: 136: __nop();
  9850  157C  0000               	nop
  9851                           
  9852                           ;adc.c: 137: __nop();
  9853  157D  0000               	nop
  9854                           
  9855                           ;adc.c: 138: __nop();
  9856  157E  0000               	nop
  9857                           
  9858                           ;adc.c: 139: __nop();
  9859  157F  0000               	nop
  9860                           
  9861                           ;adc.c: 140: __nop();
  9862  1580  0000               	nop
  9863                           
  9864                           ;adc.c: 142: __nop();
  9865  1581  0000               	nop
  9866                           
  9867                           ;adc.c: 143: __nop();
  9868  1582  0000               	nop
  9869                           
  9870                           ;adc.c: 144: __nop();
  9871  1583  0000               	nop
  9872                           
  9873                           ;adc.c: 145: __nop();
  9874  1584  0000               	nop
  9875                           
  9876                           ;adc.c: 146: __nop();
  9877  1585  0000               	nop
  9878                           
  9879                           ;adc.c: 147: __nop();
  9880  1586  0000               	nop
  9881                           
  9882                           ;adc.c: 148: __nop();
  9883  1587  0000               	nop
  9884                           
  9885                           ;adc.c: 149: __nop();
  9886  1588  0000               	nop
  9887                           
  9888                           ;adc.c: 151: __nop();
  9889  1589  0000               	nop
  9890                           
  9891                           ;adc.c: 152: __nop();
  9892  158A  0000               	nop
  9893                           
  9894                           ;adc.c: 153: __nop();
  9895  158B  0000               	nop
  9896                           
  9897                           ;adc.c: 154: __nop();
  9898  158C  0000               	nop
  9899                           
  9900                           ;adc.c: 155: __nop();
  9901  158D  0000               	nop
  9902                           
  9903                           ;adc.c: 156: __nop();
  9904  158E  0000               	nop
  9905                           
  9906                           ;adc.c: 157: __nop();
  9907  158F  0000               	nop
  9908                           
  9909                           ;adc.c: 158: __nop();
  9910  1590  0000               	nop
  9911  1591  0008               	return
  9912  1592                     __end_ofi1_ADC_Wait:	
  9913  1592                     __ptext42:	
  9914 ;; *************** function i1_ADC_Read *****************
  9915 ;; Defined at:
  9916 ;;		line 175 in file "../adc.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;  ADC_Read        1    2[COMMON] unsigned char 
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  2    0[COMMON] unsigned int 
  9923 ;; Registers used:
  9924 ;;		wreg, status,2, status,0
  9925 ;; Tracked objects:
  9926 ;;		On entry : 1E/1
  9927 ;;		On exit  : 1F/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9930 ;;      Params:         2       0       0       0       0       0       0       0
  9931 ;;      Locals:         1       0       0       0       0       0       0       0
  9932 ;;      Temps:          0       0       0       0       0       0       0       0
  9933 ;;      Totals:         3       0       0       0       0       0       0       0
  9934 ;;Total ram usage:        3 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; This function calls:
  9937 ;;		Nothing
  9938 ;; This function is called by:
  9939 ;;		_interrrupt_bldc
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           
  9944                           ;psect for function i1_ADC_Read
  9945  1592                     i1_ADC_Read:	
  9946                           
  9947                           ;adc.c: 179: unsigned char i;;adc.c: 180: i = 0;
  9948                           
  9949                           ;incstack = 0
  9950                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
  9951  1592  01F2               	clrf	i1ADC_Read@i
  9952  1593                     i1l69:	
  9953                           ;adc.c: 182: while( GO_nDONE )
  9954                           
  9955  1593  0021               	movlb	1	; select bank1
  9956  1594  1C9D               	btfss	29,1	;volatile
  9957  1595  2D9B               	goto	i1l5683
  9958  1596  3041               	movlw	65
  9959                           
  9960                           ;adc.c: 184: {;adc.c: 186: i++;
  9961  1597  0AF2               	incf	i1ADC_Read@i,f
  9962                           
  9963                           ;adc.c: 189: if( i > 64 )
  9964  1598  0272               	subwf	i1ADC_Read@i,w
  9965  1599  1C03               	skipc
  9966  159A  2D93               	goto	i1l69
  9967  159B                     i1l5683:	
  9968                           
  9969                           ;adc.c: 195: };adc.c: 198: };adc.c: 201: analog_value.b.hi = ADRESH;
  9970                           
  9971                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  9972                           
  9973                           ;adc.c: 204: return analog_value.w;
  9974  159B  27A0               	fcall	PL34	;call to abstracted procedure
  9975  159C  00F1               	movwf	?i1_ADC_Read+1
  9976  159D  0848               	movf	_analog_value,w	;volatile
  9977  159E  00F0               	movwf	?i1_ADC_Read
  9978  159F  0008               	return
  9979  15A0                     __end_ofi1_ADC_Read:	
  9980  15A0                     __ptext40:	
  9981 ;; *************** function i1___wmul *****************
  9982 ;; Defined at:
  9983 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;  multiplier      2    0[COMMON] unsigned int 
  9986 ;;  multiplicand    2    2[COMMON] unsigned int 
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;  __wmul          2    4[COMMON] unsigned int 
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  2    0[COMMON] unsigned int 
  9991 ;; Registers used:
  9992 ;;		wreg, status,2, status,0
  9993 ;; Tracked objects:
  9994 ;;		On entry : 1F/2
  9995 ;;		On exit  : 1F/2
  9996 ;;		Unchanged: 1F/0
  9997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9998 ;;      Params:         4       0       0       0       0       0       0       0
  9999 ;;      Locals:         2       0       0       0       0       0       0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0
 10001 ;;      Totals:         6       0       0       0       0       0       0       0
 10002 ;;Total ram usage:        6 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; This function calls:
 10005 ;;		Nothing
 10006 ;; This function is called by:
 10007 ;;		_interrrupt_bldc
 10008 ;; This function uses a non-reentrant model
 10009 ;;
 10010                           
 10011                           
 10012                           ;psect for function i1___wmul
 10013  15A0                     i1___wmul:	
 10014                           
 10015                           ;incstack = 0
 10016                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 10017  15A0  01F4               	clrf	i1___wmul@product
 10018  15A1  01F5               	clrf	i1___wmul@product+1
 10019  15A2                     i1l9055:	
 10020  15A2  1C70               	btfss	i1___wmul@multiplier,0
 10021  15A3  2DA8               	goto	i1l9059
 10022  15A4  0872               	movf	i1___wmul@multiplicand,w
 10023  15A5  07F4               	addwf	i1___wmul@product,f
 10024  15A6  0873               	movf	i1___wmul@multiplicand+1,w
 10025  15A7  3DF5               	addwfc	i1___wmul@product+1,f
 10026  15A8                     i1l9059:	
 10027  15A8  35F2               	lslf	i1___wmul@multiplicand,f
 10028  15A9  0DF3               	rlf	i1___wmul@multiplicand+1,f
 10029  15AA  36F1               	lsrf	i1___wmul@multiplier+1,f
 10030  15AB  0CF0               	rrf	i1___wmul@multiplier,f
 10031  15AC  0870               	movf	i1___wmul@multiplier,w
 10032  15AD  0471               	iorwf	i1___wmul@multiplier+1,w
 10033  15AE  1D03               	btfss	3,2
 10034  15AF  2DA2               	goto	i1l9055
 10035  15B0  0875               	movf	i1___wmul@product+1,w
 10036  15B1  00F1               	movwf	?i1___wmul+1
 10037  15B2  0874               	movf	i1___wmul@product,w
 10038  15B3  00F0               	movwf	?i1___wmul
 10039  15B4  0008               	return
 10040  15B5                     __end_ofi1___wmul:	
 10041  15B5                     __ptext39:	
 10042 ;; *************** function i1_commutate *****************
 10043 ;; Defined at:
 10044 ;;		line 1426 in file "../bldc.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;		None
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;		None
 10049 ;; Return value:  Size  Location     Type
 10050 ;;                  1    wreg      void 
 10051 ;; Registers used:
 10052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10053 ;; Tracked objects:
 10054 ;;		On entry : 1D/2
 10055 ;;		On exit  : 1F/0
 10056 ;;		Unchanged: 0/0
 10057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10058 ;;      Params:         0       0       0       0       0       0       0       0
 10059 ;;      Locals:         0       0       0       0       0       0       0       0
 10060 ;;      Temps:         12       0       0       0       0       0       0       0
 10061 ;;      Totals:        12       0       0       0       0       0       0       0
 10062 ;;Total ram usage:       12 bytes
 10063 ;; Hardware stack levels used:    1
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_interrrupt_bldc
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           
 10072                           ;psect for function i1_commutate
 10073  15B5                     i1_commutate:	
 10074                           
 10075                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
 10076                           
 10077                           ;incstack = 0
 10078                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0]
 10079  15B5  3000               	movlw	0
 10080  15B6  0021               	movlb	1	; select bank1
 10081  15B7  0233               	subwf	(_ui16_step_cnt+1)^(0+128),w
 10082  15B8  300A               	movlw	10
 10083  15B9  1903               	skipnz
 10084  15BA  0232               	subwf	_ui16_step_cnt^(0+128),w
 10085  15BB  1803               	skipnc
 10086  15BC  2DC0               	goto	i1l5691
 10087                           
 10088                           ;bldc.c: 1433: {;bldc.c: 1435: ui16_step_cnt++;
 10089  15BD  0AB2               	incf	_ui16_step_cnt^(0+128),f
 10090  15BE  1903               	skipnz
 10091  15BF  0AB3               	incf	(_ui16_step_cnt+1)^(0+128),f
 10092  15C0                     i1l5691:	
 10093                           
 10094                           ;bldc.c: 1437: };bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
 10095                           
 10096                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
 10097                           
 10098                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
 10099  15C0  26F8  3190         	fcall	PL4	;call to abstracted procedure
 10100  15C2  00F0               	movwf	??i1_commutate
 10101  15C3  0825               	movf	((_B+1)^(0+384)+4),w
 10102  15C4  3D23               	addwfc	((_B+1)^(0+384)+2),w
 10103  15C5  00F1               	movwf	??i1_commutate+1
 10104  15C6  0826               	movf	(_B^(0+384)+6),w
 10105  15C7  0770               	addwf	??i1_commutate,w
 10106  15C8  00F2               	movwf	??i1_commutate+2
 10107  15C9  0827               	movf	((_B+1)^(0+384)+6),w
 10108  15CA  3D71               	addwfc	??i1_commutate+1,w
 10109  15CB  00F3               	movwf	??i1_commutate+3
 10110  15CC  0828               	movf	(_B^(0+384)+8),w
 10111  15CD  0772               	addwf	??i1_commutate+2,w
 10112  15CE  00F4               	movwf	??i1_commutate+4
 10113  15CF  0829               	movf	((_B+1)^(0+384)+8),w
 10114  15D0  3D73               	addwfc	??i1_commutate+3,w
 10115  15D1  00F5               	movwf	??i1_commutate+5
 10116  15D2  082A               	movf	(_B^(0+384)+10),w
 10117  15D3  0774               	addwf	??i1_commutate+4,w
 10118  15D4  00F6               	movwf	??i1_commutate+6
 10119  15D5  082B               	movf	((_B+1)^(0+384)+10),w
 10120  15D6  3D75               	addwfc	??i1_commutate+5,w
 10121  15D7  00F7               	movwf	??i1_commutate+7
 10122  15D8  3F00               	moviw [0]fsr0
 10123  15D9  0776               	addwf	??i1_commutate+6,w
 10124  15DA  00F8               	movwf	??i1_commutate+8
 10125  15DB  3F01               	moviw [1]fsr0
 10126  15DC  3D77               	addwfc	??i1_commutate+7,w
 10127  15DD  00F9               	movwf	??i1_commutate+9
 10128  15DE  3F40               	moviw [0]fsr1
 10129  15DF  0778               	addwf	??i1_commutate+8,w
 10130  15E0  00FA               	movwf	??i1_commutate+10
 10131  15E1  3F41               	moviw [1]fsr1
 10132  15E2  3D79               	addwfc	??i1_commutate+9,w
 10133  15E3  00FB               	movwf	??i1_commutate+11
 10134  15E4  0820               	movf	_B^(0+384),w
 10135  15E5  077A               	addwf	??i1_commutate+10,w
 10136  15E6  0022               	movlb	2	; select bank2
 10137  15E7  00B7               	movwf	_ui16_speed_fil^(0+256)
 10138  15E8  0023               	movlb	3	; select bank3
 10139  15E9  0821               	movf	(_B+1)^(0+384),w
 10140  15EA  3D7B               	addwfc	??i1_commutate+11,w
 10141                           
 10142                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
 10143                           
 10144                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
 10145                           
 10146                           ;bldc.c: 1455: bemf_filter = 62;
 10147                           
 10148                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
 10149  15EB  2732  3190         	fcall	PL16	;call to abstracted procedure
 10150                           
 10151                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
 10152  15ED  1DCD               	btfss	_MotorFlags,3
 10153  15EE  2E29               	goto	i1l327
 10154                           
 10155                           ;bldc.c: 1463: {;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>
      +                          >7;
 10156                           
 10157                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
 10158  15EF  26DD  3190         	fcall	PL2	;call to abstracted procedure
 10159  15F1  1803               	skipnc
 10160  15F2  2DF6               	goto	i1l5719
 10161                           
 10162                           ;bldc.c: 1474: {;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advanc
      +                          ement );
 10163  15F3  2755  3190         	fcall	PL20	;call to abstracted procedure
 10164                           
 10165                           ;bldc.c: 1478: }
 10166  15F5  2E0A               	goto	i1l5743
 10167  15F6                     i1l5719:	
 10168                           
 10169                           ;bldc.c: 1481: else;bldc.c: 1482: {;bldc.c: 1484: phase_delay_counter = 0;
 10170  15F6  0022               	movlb	2	; select bank2
 10171  15F7  01BD               	clrf	_phase_delay_counter^(0+256)
 10172  15F8  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
 10173  15F9  2E0A               	goto	i1l5743
 10174  15FA                     i1l5721:	
 10175                           
 10176                           ;bldc.c: 1514: {;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 600 * 2 ) ) ;
 10177  15FA  30A6               	movlw	166
 10178  15FB  2E06               	goto	L46
 10179  15FC                     i1l5723:	
 10180                           ;bldc.c: 1517: break;
 10181                           
 10182                           
 10183                           ;bldc.c: 1524: {;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 200 * 2 ) ) ;
 10184  15FC  27D5  3190         	fcall	PL62	;call to abstracted procedure
 10185                           
 10186                           ;bldc.c: 1527: break;
 10187  15FE  2E18               	goto	i1l5745
 10188  15FF                     i1l5725:	
 10189                           
 10190                           ;bldc.c: 1534: {;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 800 * 2 ) ) ;
 10191  15FF  307D               	movlw	125
 10192  1600  2E06               	goto	L46
 10193  1601                     i1l5727:	
 10194                           ;bldc.c: 1537: break;
 10195                           
 10196                           
 10197                           ;bldc.c: 1544: {;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1200 * 2 ) ) ;
 10198  1601  3053               	movlw	83
 10199  1602  2E06               	goto	L46
 10200  1603                     i1l5729:	
 10201                           ;bldc.c: 1547: break;
 10202                           
 10203                           
 10204                           ;bldc.c: 1554: {;bldc.c: 1556: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 1600 * 2 ) ) ;
 10205  1603  303E               	movlw	62
 10206  1604  2E06               	goto	L46
 10207  1605                     i1l5731:	
 10208                           ;bldc.c: 1557: break;
 10209                           
 10210                           
 10211                           ;bldc.c: 1564: {;bldc.c: 1566: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) ) ;
 10212  1605  3032               	movlw	50
 10213  1606                     L46:	
 10214  1606  0022               	movlb	2	; select bank2
 10215  1607  00BF               	movwf	_ui16_comm_time_max^(0+256)
 10216  1608  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
 10217                           
 10218                           ;bldc.c: 1567: break;
 10219  1609  2E18               	goto	i1l5745
 10220  160A                     i1l5743:	
 10221                           
 10222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10223                           ; Switch size 1, requested type "space"
 10224                           ; Number of cases is 1, Range of values is 0 to 0
 10225                           ; switch strategies available:
 10226                           ; Name         Instructions Cycles
 10227                           ; simple_byte            4     3 (average)
 10228                           ; direct_byte            8     6 (fixed)
 10229                           ; jumptable            260     6 (fixed)
 10230                           ;	Chosen strategy is simple_byte
 10231  160A  0021               	movlb	1	; select bank1
 10232  160B  0833               	movf	(_ui16_step_cnt+1)^(0+128),w
 10233  160C  3A00               	xorlw	0	; case 0
 10234  160D  1903               	skipnz
 10235  160E  2E10               	goto	i1l10363
 10236  160F  2E05               	goto	i1l5731
 10237  1610                     i1l10363:	
 10238                           
 10239                           ; Switch size 1, requested type "space"
 10240                           ; Number of cases is 10, Range of values is 0 to 9
 10241                           ; switch strategies available:
 10242                           ; Name         Instructions Cycles
 10243                           ; direct_byte           26     6 (fixed)
 10244                           ; simple_byte           31    16 (average)
 10245                           ; jumptable            260     6 (fixed)
 10246                           ;	Chosen strategy is direct_byte
 10247  1610  27E7  3190         	fcall	PL72	;call to abstracted procedure
 10248  1612  1803               	skipnc
 10249  1613  2E05               	goto	i1l5731
 10250  1614  3182               	movlp	high i1S10365
 10251  1615  3504               	lslf	4,w
 10252  1616  3ED3               	addlw	low i1S10365
 10253  1617  0082               	movwf	2
 10254  1618                     i1l5745:	
 10255                           
 10256                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 *
      +                           2 ) ) )
 10257  1618  3000               	movlw	0
 10258  1619  0240               	subwf	(_ui16_comm_time_max+1)^(0+256),w
 10259  161A  3032               	movlw	50
 10260  161B  1903               	skipnz
 10261  161C  023F               	subwf	_ui16_comm_time_max^(0+256),w
 10262  161D  1803               	skipnc
 10263  161E  2E22               	goto	i1l5749
 10264                           
 10265                           ;bldc.c: 1626: {;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL 
      +                          ) / ( 2000 * 2 ) );
 10266  161F  3032               	movlw	50
 10267  1620  00BF               	movwf	_ui16_comm_time_max^(0+256)
 10268  1621  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
 10269  1622                     i1l5749:	
 10270                           
 10271                           ;bldc.c: 1630: };bldc.c: 1634: if (MotorFlags.bits.B4)
 10272  1622  0020               	movlb	0	; select bank0
 10273  1623  1E4D               	btfss	_MotorFlags,4
 10274  1624  2E55               	goto	i1l345
 10275                           
 10276                           ;bldc.c: 1636: {;bldc.c: 1639: ui8_StartupPWM = 10 ;
 10277  1625  300A               	movlw	10
 10278  1626  0021               	movlb	1	; select bank1
 10279  1627  00ED               	movwf	_ui8_StartupPWM^(0+128)
 10280                           
 10281                           ;bldc.c: 1641: };bldc.c: 1644: }
 10282  1628  2E55               	goto	i1l345
 10283  1629                     i1l327:	
 10284                           
 10285                           ;bldc.c: 1647: else;bldc.c: 1648: {;bldc.c: 1652: if( rising_bemf_flag)
 10286  1629  1C53               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10287  162A  2E2F               	goto	i1l5755
 10288                           
 10289                           ;bldc.c: 1654: {;bldc.c: 1657: phase_delay_counter = 0;
 10290  162B  0022               	movlb	2	; select bank2
 10291  162C  01BD               	clrf	_phase_delay_counter^(0+256)
 10292  162D  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
 10293                           
 10294                           ;bldc.c: 1659: }
 10295  162E  2E3A               	goto	i1l5757
 10296  162F                     i1l5755:	
 10297                           
 10298                           ;bldc.c: 1662: else;bldc.c: 1663: {;bldc.c: 1666: phase_delay_counter = comm_time>>1;
 10299  162F  0847               	movf	_comm_time+1,w
 10300  1630  00F1               	movwf	??i1_commutate+1
 10301  1631  0846               	movf	_comm_time,w
 10302  1632  00F0               	movwf	??i1_commutate
 10303  1633  36F1               	lsrf	??i1_commutate+1,f
 10304  1634  0CF0               	rrf	??i1_commutate,f
 10305  1635  0870               	movf	??i1_commutate,w
 10306  1636  0022               	movlb	2	; select bank2
 10307  1637  00BD               	movwf	_phase_delay_counter^(0+256)
 10308  1638  0871               	movf	??i1_commutate+1,w
 10309  1639  00BE               	movwf	(_phase_delay_counter+1)^(0+256)
 10310  163A                     i1l5757:	
 10311                           
 10312                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
 10313                           
 10314                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 2000 * 2 )
      +                           );
 10315                           
 10316                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
 10317  163A  27C7  3190         	fcall	PL56	;call to abstracted procedure
 10318  163C  1F4D               	btfss	_MotorFlags,6
 10319  163D  2E53               	goto	i1l5781
 10320                           
 10321                           ;bldc.c: 1693: {;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
 10322  163E  27FB  3190         	fcall	PL90	;call to abstracted procedure
 10323  1640  1903               	btfsc	3,2
 10324  1641  2E55               	goto	i1l345
 10325                           
 10326                           ;bldc.c: 1706: else;bldc.c: 1707: {;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
 10327  1642  27F6  3190         	fcall	PL86	;call to abstracted procedure
 10328  1644  1803               	skipnc
 10329  1645  2E4D               	goto	i1l5775
 10330                           
 10331                           ;bldc.c: 1712: {;bldc.c: 1714: CCPR1L--;
 10332                           
 10333                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
 10334  1646  27DB  3190         	fcall	PL64	;call to abstracted procedure
 10335  1648  1803               	skipnc
 10336  1649  2E55               	goto	i1l345
 10337                           
 10338                           ;bldc.c: 1718: {;bldc.c: 1720: CCPR1L--;
 10339  164A  0025               	movlb	5	; select bank5
 10340  164B  0391               	decf	17,f	;volatile
 10341  164C  2E55               	goto	i1l345
 10342  164D                     i1l5775:	
 10343                           
 10344                           ;bldc.c: 1728: else;bldc.c: 1729: {;bldc.c: 1731: CCPR1L++;
 10345                           
 10346                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
 10347  164D  27CE  3190         	fcall	PL60	;call to abstracted procedure
 10348  164F  1803               	skipnc
 10349  1650  2E55               	goto	i1l345
 10350                           
 10351                           ;bldc.c: 1735: {;bldc.c: 1737: CCPR1L++;
 10352  1651  0A91               	incf	17,f	;volatile
 10353  1652  2E55               	goto	i1l345
 10354  1653                     i1l5781:	
 10355                           
 10356                           ;bldc.c: 1768: else;bldc.c: 1769: {;bldc.c: 1771: CCPR1L = 0;
 10357  1653  0025               	movlb	5	; select bank5
 10358  1654  0191               	clrf	17	;volatile
 10359  1655                     i1l345:	
 10360                           
 10361                           ;bldc.c: 1773: };bldc.c: 1777: };bldc.c: 1780: comm_time = 0;
 10362                           
 10363                           ;bldc.c: 1784: if( comm_state == 0xff )
 10364  1655  27F1  3190         	fcall	PL82	;call to abstracted procedure
 10365  1657  0F6C               	incfsz	_comm_state^(0+128),w
 10366  1658  2EA7               	goto	i1l5931
 10367                           
 10368                           ;bldc.c: 1786: {;bldc.c: 1788: comm_state = 6;
 10369  1659  3006               	movlw	6
 10370  165A  00EC               	movwf	_comm_state^(0+128)
 10371  165B  2EA7               	goto	i1l5931
 10372  165C                     i1l5787:	
 10373                           
 10374                           ;bldc.c: 1800: {;bldc.c: 1806: PSTR1CON = 0b00000001;
 10375  165C  3001               	movlw	1
 10376  165D  0025               	movlb	5	; select bank5
 10377  165E  0096               	movwf	22	;volatile
 10378                           
 10379                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
 10380  165F  0020               	movlb	0	; select bank0
 10381  1660  1F4D               	btfss	_MotorFlags,6
 10382  1661  2E64               	goto	i1l5793
 10383                           
 10384                           ;bldc.c: 1811: {;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 10385  1662  27AF  3190         	fcall	PL38	;call to abstracted procedure
 10386  1664                     i1l5793:	
 10387                           
 10388                           ;bldc.c: 1815: };bldc.c: 1819: LATB2 = 0;
 10389                           
 10390                           ;bldc.c: 1820: LATB1 = 0;
 10391                           
 10392                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 10393                           
 10394                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 10395                           
 10396                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 10397                           
 10398                           ;bldc.c: 1824: CM1CON1 = 0x02;
 10399                           
 10400                           ;bldc.c: 1837: CM1CON0 = 0x84;
 10401                           
 10402                           ;bldc.c: 1838: rising_bemf_flag = 1;
 10403  1664  2744  3190         	fcall	PL18	;call to abstracted procedure
 10404  1666  2E94               	goto	L52
 10405  1667                     i1l5811:	
 10406                           ;bldc.c: 1845: break;
 10407                           
 10408                           ;bldc.c: 1839: comm_state = 6;
 10409                           
 10410                           
 10411                           ;bldc.c: 1855: {;bldc.c: 1860: PSTR1CON = 0b00000001;
 10412  1667  3001               	movlw	1
 10413  1668  0025               	movlb	5	; select bank5
 10414  1669  0096               	movwf	22	;volatile
 10415                           
 10416                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
 10417  166A  0020               	movlb	0	; select bank0
 10418  166B  1F4D               	btfss	_MotorFlags,6
 10419  166C  2E6F               	goto	i1l5817
 10420                           
 10421                           ;bldc.c: 1865: {;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 10422  166D  27B5  3190         	fcall	PL42	;call to abstracted procedure
 10423  166F                     i1l5817:	
 10424                           
 10425                           ;bldc.c: 1869: };bldc.c: 1873: LATB2 = 1;
 10426                           
 10427                           ;bldc.c: 1874: LATB1 = 0;
 10428                           
 10429                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
 10430                           
 10431                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
 10432                           
 10433                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 10434                           
 10435                           ;bldc.c: 1878: CM1CON1 = 0x01;
 10436                           
 10437                           ;bldc.c: 1892: CM1CON0 = 0x94;
 10438  166F  2786  3190         	fcall	PL26	;call to abstracted procedure
 10439  1671                     i1l5831:	
 10440                           
 10441                           ;bldc.c: 1893: rising_bemf_flag = 0;
 10442                           
 10443                           ;bldc.c: 1894: comm_state = 1;
 10444  1671  27E1  3190         	fcall	PL70	;call to abstracted procedure
 10445                           
 10446                           ;bldc.c: 1902: break;
 10447  1673  2EBB               	goto	i1l5933
 10448  1674                     i1l5835:	
 10449                           
 10450                           ;bldc.c: 1912: {;bldc.c: 1917: PSTR1CON = 0b00000010;
 10451  1674  3002               	movlw	2
 10452  1675  0025               	movlb	5	; select bank5
 10453  1676  0096               	movwf	22	;volatile
 10454                           
 10455                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
 10456  1677  0020               	movlb	0	; select bank0
 10457  1678  1F4D               	btfss	_MotorFlags,6
 10458  1679  2E7C               	goto	i1l5841
 10459                           
 10460                           ;bldc.c: 1922: {;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 10461  167A  27A9  3190         	fcall	PL36	;call to abstracted procedure
 10462  167C                     i1l5841:	
 10463                           
 10464                           ;bldc.c: 1926: };bldc.c: 1929: LATC2 = 0;
 10465                           
 10466                           ;bldc.c: 1931: LATB1 = 0;
 10467                           
 10468                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 10469                           
 10470                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 10471                           
 10472                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 10473                           
 10474                           ;bldc.c: 1935: CM1CON1 = 0x00;
 10475                           
 10476                           ;bldc.c: 1949: CM1CON0 = 0x84;
 10477                           
 10478                           ;bldc.c: 1950: rising_bemf_flag = 1;
 10479  167C  2766  3190         	fcall	PL22	;call to abstracted procedure
 10480  167E  2E94               	goto	L52
 10481  167F                     i1l5855:	
 10482                           ;bldc.c: 1956: break;
 10483                           
 10484                           ;bldc.c: 1951: comm_state = 2;
 10485                           
 10486                           
 10487                           ;bldc.c: 1966: {;bldc.c: 1972: PSTR1CON = 0b00000010;
 10488  167F  3002               	movlw	2
 10489  1680  0025               	movlb	5	; select bank5
 10490  1681  0096               	movwf	22	;volatile
 10491                           
 10492                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
 10493  1682  0020               	movlb	0	; select bank0
 10494  1683  1F4D               	btfss	_MotorFlags,6
 10495  1684  2E87               	goto	i1l5861
 10496                           
 10497                           ;bldc.c: 1977: {;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
 10498  1685  27AF  3190         	fcall	PL38	;call to abstracted procedure
 10499  1687                     i1l5861:	
 10500                           
 10501                           ;bldc.c: 1981: };bldc.c: 1984: LATC2 = 0;
 10502                           
 10503                           ;bldc.c: 1986: LATB1 = 1;
 10504                           
 10505                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
 10506                           
 10507                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
 10508                           
 10509                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
 10510                           
 10511                           ;bldc.c: 1990: CM1CON1 = 0x02;
 10512                           
 10513                           ;bldc.c: 2004: CM1CON0 = 0x94;
 10514                           
 10515                           ;bldc.c: 2005: rising_bemf_flag = 0;
 10516  1687  2721  3190         	fcall	PL14	;call to abstracted procedure
 10517  1689  2EA0               	goto	L53
 10518  168A                     i1l5879:	
 10519                           ;bldc.c: 2011: break;
 10520                           
 10521                           ;bldc.c: 2006: comm_state = 3;
 10522                           
 10523                           
 10524                           ;bldc.c: 2020: {;bldc.c: 2026: PSTR1CON = 0b00000100;
 10525  168A  3004               	movlw	4
 10526  168B  0025               	movlb	5	; select bank5
 10527  168C  0096               	movwf	22	;volatile
 10528                           
 10529                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
 10530  168D  0020               	movlb	0	; select bank0
 10531  168E  1F4D               	btfss	_MotorFlags,6
 10532  168F  2E92               	goto	i1l5885
 10533                           
 10534                           ;bldc.c: 2031: {;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
 10535  1690  27B5  3190         	fcall	PL42	;call to abstracted procedure
 10536  1692                     i1l5885:	
 10537                           
 10538                           ;bldc.c: 2035: };bldc.c: 2038: LATC2 = 0;
 10539                           
 10540                           ;bldc.c: 2039: LATB2 = 0;
 10541                           
 10542                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 10543                           
 10544                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 10545                           
 10546                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
 10547                           
 10548                           ;bldc.c: 2044: CM1CON1 = 0x01;
 10549                           
 10550                           ;bldc.c: 2059: CM1CON0 = 0x84;
 10551                           
 10552                           ;bldc.c: 2060: rising_bemf_flag = 1;
 10553  1692  2710  3190         	fcall	PL12	;call to abstracted procedure
 10554  1694                     L52:	
 10555  1694  1453               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10556                           
 10557                           ;bldc.c: 2061: comm_state = 4;
 10558  1695  2EA1               	goto	L50
 10559  1696                     i1l5903:	
 10560                           ;bldc.c: 2066: break;
 10561                           
 10562                           
 10563                           ;bldc.c: 2076: {;bldc.c: 2081: PSTR1CON = 0b00000100;
 10564  1696  3004               	movlw	4
 10565  1697  0025               	movlb	5	; select bank5
 10566  1698  0096               	movwf	22	;volatile
 10567                           
 10568                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
 10569  1699  0020               	movlb	0	; select bank0
 10570  169A  1F4D               	btfss	_MotorFlags,6
 10571  169B  2E9E               	goto	i1l5909
 10572                           
 10573                           ;bldc.c: 2086: {;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
 10574  169C  27A9  3190         	fcall	PL36	;call to abstracted procedure
 10575  169E                     i1l5909:	
 10576                           
 10577                           ;bldc.c: 2090: };bldc.c: 2093: LATC2 = 1;
 10578                           
 10579                           ;bldc.c: 2094: LATB2 = 0;
 10580                           
 10581                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
 10582                           
 10583                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
 10584                           
 10585                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
 10586                           
 10587                           ;bldc.c: 2099: CM1CON1 = 0x00;
 10588                           
 10589                           ;bldc.c: 2113: CM1CON0 = 0x94;
 10590                           
 10591                           ;bldc.c: 2114: rising_bemf_flag = 0;
 10592  169E  2776  3190         	fcall	PL24	;call to abstracted procedure
 10593  16A0                     L53:	
 10594  16A0  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10595  16A1                     L50:	
 10596                           
 10597                           ;bldc.c: 2115: comm_state = 5;
 10598  16A1  0021               	movlb	1	; select bank1
 10599  16A2  00EC               	movwf	_comm_state^(0+128)
 10600                           
 10601                           ;bldc.c: 2120: break;
 10602  16A3  2EBB               	goto	i1l5933
 10603  16A4                     i1l5923:	
 10604                           
 10605                           ;bldc.c: 2129: {;bldc.c: 2131: PSTR1CON = 0x00;
 10606                           
 10607                           ;bldc.c: 2132: CM1CON0 = 0x00;
 10608  16A4  27EC  3190         	fcall	PL74	;call to abstracted procedure
 10609  16A6  2E71               	goto	i1l5831
 10610  16A7                     i1l5931:	
 10611  16A7  086C               	movf	_comm_state^(0+128),w
 10612                           
 10613                           ; Switch size 1, requested type "space"
 10614                           ; Number of cases is 6, Range of values is 1 to 6
 10615                           ; switch strategies available:
 10616                           ; Name         Instructions Cycles
 10617                           ; simple_byte           19    10 (average)
 10618                           ; direct_byte           21     9 (fixed)
 10619                           ; jumptable            263     9 (fixed)
 10620                           ;	Chosen strategy is simple_byte
 10621  16A8  3A01               	xorlw	1	; case 1
 10622  16A9  1903               	skipnz
 10623  16AA  2E5C               	goto	i1l5787
 10624  16AB  3A03               	xorlw	3	; case 2
 10625  16AC  1903               	skipnz
 10626  16AD  2E67               	goto	i1l5811
 10627  16AE  3A01               	xorlw	1	; case 3
 10628  16AF  1903               	skipnz
 10629  16B0  2E74               	goto	i1l5835
 10630  16B1  3A07               	xorlw	7	; case 4
 10631  16B2  1903               	skipnz
 10632  16B3  2E7F               	goto	i1l5855
 10633  16B4  3A01               	xorlw	1	; case 5
 10634  16B5  1903               	skipnz
 10635  16B6  2E8A               	goto	i1l5879
 10636  16B7  3A03               	xorlw	3	; case 6
 10637  16B8  1903               	skipnz
 10638  16B9  2E96               	goto	i1l5903
 10639  16BA  2EA4               	goto	i1l5923
 10640  16BB                     i1l5933:	
 10641                           
 10642                           ;bldc.c: 2146: {;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL )
      +                          ;
 10643                           
 10644                           ;bldc.c: 2158: };bldc.c: 2161: comm_time = 0;
 10645                           
 10646                           ;bldc.c: 2150: }
 10647  16BB  2FC1               	ljmp	PL52	;call to abstracted procedure
 10648  16BC                     __end_ofi1_commutate:	
 10649  16BC                     __ptext44:	
 10650 ;; *************** function _BLDCWait *****************
 10651 ;; Defined at:
 10652 ;;		line 156 in file "../bldc.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;		None
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;		None
 10657 ;; Return value:  Size  Location     Type
 10658 ;;                  1    wreg      void 
 10659 ;; Registers used:
 10660 ;;		None
 10661 ;; Tracked objects:
 10662 ;;		On entry : 1E/1
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10666 ;;      Params:         0       0       0       0       0       0       0       0
 10667 ;;      Locals:         0       0       0       0       0       0       0       0
 10668 ;;      Temps:          0       0       0       0       0       0       0       0
 10669 ;;      Totals:         0       0       0       0       0       0       0       0
 10670 ;;Total ram usage:        0 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; This function calls:
 10673 ;;		Nothing
 10674 ;; This function is called by:
 10675 ;;		_interrrupt_bldc
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           
 10680                           ;psect for function _BLDCWait
 10681  16BC                     _BLDCWait:	
 10682                           
 10683                           ;bldc.c: 161: __nop();
 10684                           
 10685                           ;incstack = 0
 10686                           ; Regs used in _BLDCWait: []
 10687  16BC  0000               	nop
 10688                           
 10689                           ;bldc.c: 162: __nop();
 10690  16BD  0000               	nop
 10691                           
 10692                           ;bldc.c: 163: __nop();
 10693  16BE  0000               	nop
 10694                           
 10695                           ;bldc.c: 164: __nop();
 10696  16BF  0000               	nop
 10697                           
 10698                           ;bldc.c: 165: __nop();
 10699  16C0  0000               	nop
 10700                           
 10701                           ;bldc.c: 166: __nop();
 10702  16C1  0000               	nop
 10703                           
 10704                           ;bldc.c: 167: __nop();
 10705  16C2  0000               	nop
 10706                           
 10707                           ;bldc.c: 168: __nop();
 10708  16C3  0000               	nop
 10709                           
 10710                           ;bldc.c: 170: __nop();
 10711  16C4  0000               	nop
 10712                           
 10713                           ;bldc.c: 171: __nop();
 10714  16C5  0000               	nop
 10715                           
 10716                           ;bldc.c: 172: __nop();
 10717  16C6  0000               	nop
 10718                           
 10719                           ;bldc.c: 173: __nop();
 10720  16C7  0000               	nop
 10721                           
 10722                           ;bldc.c: 174: __nop();
 10723  16C8  0000               	nop
 10724                           
 10725                           ;bldc.c: 175: __nop();
 10726  16C9  0000               	nop
 10727                           
 10728                           ;bldc.c: 176: __nop();
 10729  16CA  0000               	nop
 10730                           
 10731                           ;bldc.c: 177: __nop();
 10732  16CB  0000               	nop
 10733                           
 10734                           ;bldc.c: 179: __nop();
 10735  16CC  0000               	nop
 10736                           
 10737                           ;bldc.c: 180: __nop();
 10738  16CD  0000               	nop
 10739                           
 10740                           ;bldc.c: 181: __nop();
 10741  16CE  0000               	nop
 10742                           
 10743                           ;bldc.c: 182: __nop();
 10744  16CF  0000               	nop
 10745                           
 10746                           ;bldc.c: 183: __nop();
 10747  16D0  0000               	nop
 10748                           
 10749                           ;bldc.c: 184: __nop();
 10750  16D1  0000               	nop
 10751                           
 10752                           ;bldc.c: 185: __nop();
 10753  16D2  0000               	nop
 10754                           
 10755                           ;bldc.c: 186: __nop();
 10756  16D3  0000               	nop
 10757                           
 10758                           ;bldc.c: 188: __nop();
 10759  16D4  0000               	nop
 10760                           
 10761                           ;bldc.c: 189: __nop();
 10762  16D5  0000               	nop
 10763                           
 10764                           ;bldc.c: 190: __nop();
 10765  16D6  0000               	nop
 10766                           
 10767                           ;bldc.c: 191: __nop();
 10768  16D7  0000               	nop
 10769                           
 10770                           ;bldc.c: 192: __nop();
 10771  16D8  0000               	nop
 10772                           
 10773                           ;bldc.c: 193: __nop();
 10774  16D9  0000               	nop
 10775                           
 10776                           ;bldc.c: 194: __nop();
 10777  16DA  0000               	nop
 10778                           
 10779                           ;bldc.c: 195: __nop();
 10780  16DB  0000               	nop
 10781  16DC  0008               	return
 10782  16DD                     __end_of_BLDCWait:	
 10783  16DD                     PL2:	
 10784  16DD  0022               	movlb	2	; select bank2
 10785  16DE  0842               	movf	(_ui16_speed_rar+1)^(0+256),w
 10786  16DF  0021               	movlb	1	; select bank1
 10787  16E0  00B1               	movwf	(_ui16_phase_advancement+1)^(0+128)
 10788  16E1  0022               	movlb	2	; select bank2
 10789  16E2  0841               	movf	_ui16_speed_rar^(0+256),w
 10790  16E3  0021               	movlb	1	; select bank1
 10791  16E4  00B0               	movwf	_ui16_phase_advancement^(0+128)
 10792  16E5  3001               	movlw	1
 10793  16E6  36B1               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 10794  16E7  0CB0               	rrf	_ui16_phase_advancement^(0+128),f
 10795  16E8  36B1               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 10796  16E9  0CB0               	rrf	_ui16_phase_advancement^(0+128),f
 10797  16EA  36B1               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
 10798  16EB  0CB0               	rrf	_ui16_phase_advancement^(0+128),f
 10799  16EC  05B1               	andwf	(_ui16_phase_advancement+1)^(0+128),f
 10800  16ED  0020               	movlb	0	; select bank0
 10801  16EE  0847               	movf	_comm_time+1,w
 10802  16EF  0021               	movlb	1	; select bank1
 10803  16F0  0231               	subwf	(_ui16_phase_advancement+1)^(0+128),w
 10804  16F1  1D03               	skipz
 10805  16F2  0008               	return
 10806  16F3  0020               	movlb	0	; select bank0
 10807  16F4  0846               	movf	_comm_time,w
 10808  16F5  0021               	movlb	1	; select bank1
 10809  16F6  0230               	subwf	_ui16_phase_advancement^(0+128),w
 10810  16F7  0008               	return
 10811  16F8                     __end_ofPL2:	
 10812  16F8                     PL4:	
 10813  16F8  3565               	lslf	_Bcnt^(0+128),w
 10814  16F9  3EA0               	addlw	(low (_B| (0+256)))& (0+255)
 10815  16FA  0086               	movwf	6
 10816  16FB  3001               	movlw	1	; select bank3/4
 10817  16FC  0087               	movwf	7
 10818  16FD  0020               	movlb	0	; select bank0
 10819  16FE  0846               	movf	_comm_time,w
 10820  16FF  3FC0               	movwi [0]fsr1
 10821  1700  0847               	movf	_comm_time+1,w
 10822  1701  3FC1               	movwi [1]fsr1
 10823  1702  0021               	movlb	1	; select bank1
 10824  1703  3007               	movlw	7
 10825  1704  0AE5               	incf	_Bcnt^(0+128),f
 10826  1705  05E5               	andwf	_Bcnt^(0+128),f
 10827  1706  30AE               	movlw	((low (_B| (0+256)))& (0+255)+14)
 10828  1707  0086               	movwf	6
 10829  1708  30AC               	movlw	((low (_B| (0+256)))& (0+255)+12)
 10830  1709  0084               	movwf	4
 10831  170A  3001               	movlw	1	; select bank3/4
 10832  170B  0085               	movwf	5
 10833  170C  0023               	movlb	3	; select bank3
 10834  170D  0824               	movf	(_B^(0+384)+4),w
 10835  170E  0722               	addwf	(_B^(0+384)+2),w
 10836  170F  0008               	return
 10837  1710                     __end_ofPL4:	
 10838  1710                     PL12:	
 10839  1710  0022               	movlb	2	; select bank2
 10840  1711  110E               	bcf	14,2	;volatile
 10841  1712  110D               	bcf	13,2	;volatile
 10842  1713  3011               	movlw	17
 10843  1714  0021               	movlb	1	; select bank1
 10844  1715  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 10845  1716  3025               	movlw	37
 10846  1717  00E9               	movwf	_ui8_UPhase_sel^(0+128)
 10847  1718  3005               	movlw	5
 10848  1719  00E8               	movwf	_ui8_Ubemf_sel^(0+128)
 10849  171A  3001               	movlw	1
 10850  171B  0022               	movlb	2	; select bank2
 10851  171C  0092               	movwf	18	;volatile
 10852  171D  3084               	movlw	132
 10853  171E  0091               	movwf	17	;volatile
 10854  171F  0020               	movlb	0	; select bank0
 10855  1720  3404               	retlw	4
 10856  1721                     __end_ofPL12:	
 10857  1721                     PL14:	
 10858  1721  0022               	movlb	2	; select bank2
 10859  1722  110E               	bcf	14,2	;volatile
 10860  1723  148D               	bsf	13,1	;volatile
 10861  1724  3035               	movlw	53
 10862  1725  0021               	movlb	1	; select bank1
 10863  1726  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 10864  1727  3005               	movlw	5
 10865  1728  00E9               	movwf	_ui8_UPhase_sel^(0+128)
 10866  1729  3025               	movlw	37
 10867  172A  00E8               	movwf	_ui8_Ubemf_sel^(0+128)
 10868  172B  3002               	movlw	2
 10869  172C  0022               	movlb	2	; select bank2
 10870  172D  0092               	movwf	18	;volatile
 10871  172E  3094               	movlw	148
 10872  172F  0091               	movwf	17	;volatile
 10873  1730  0020               	movlb	0	; select bank0
 10874  1731  3403               	retlw	3
 10875  1732                     __end_ofPL14:	
 10876  1732                     PL16:	
 10877  1732  0022               	movlb	2	; select bank2
 10878  1733  00B8               	movwf	(_ui16_speed_fil+1)^(0+256)
 10879  1734  0020               	movlb	0	; select bank0
 10880  1735  0847               	movf	_comm_time+1,w
 10881  1736  0022               	movlb	2	; select bank2
 10882  1737  00C2               	movwf	(_ui16_speed_rar+1)^(0+256)
 10883  1738  0020               	movlb	0	; select bank0
 10884  1739  0846               	movf	_comm_time,w
 10885  173A  0022               	movlb	2	; select bank2
 10886  173B  00C1               	movwf	_ui16_speed_rar^(0+256)
 10887  173C  0020               	movlb	0	; select bank0
 10888  173D  12CD               	bcf	_MotorFlags,5
 10889  173E  0021               	movlb	1	; select bank1
 10890  173F  01E7               	clrf	_ui8_sampleState^(0+128)
 10891  1740  0AE7               	incf	_ui8_sampleState^(0+128),f
 10892  1741  0020               	movlb	0	; select bank0
 10893  1742  17CD               	bsf	_MotorFlags,7
 10894  1743  0008               	return
 10895  1744                     __end_ofPL16:	
 10896  1744                     PL18:	
 10897  1744  0022               	movlb	2	; select bank2
 10898  1745  110D               	bcf	13,2	;volatile
 10899  1746  108D               	bcf	13,1	;volatile
 10900  1747  3009               	movlw	9
 10901  1748  0021               	movlb	1	; select bank1
 10902  1749  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 10903  174A  3025               	movlw	37
 10904  174B  01E9               	clrf	_ui8_UPhase_sel^(0+128)
 10905  174C  0AE9               	incf	_ui8_UPhase_sel^(0+128),f
 10906  174D  00E8               	movwf	_ui8_Ubemf_sel^(0+128)
 10907  174E  3002               	movlw	2
 10908  174F  0022               	movlb	2	; select bank2
 10909  1750  0092               	movwf	18	;volatile
 10910  1751  3084               	movlw	132
 10911  1752  0091               	movwf	17	;volatile
 10912  1753  0020               	movlb	0	; select bank0
 10913  1754  3406               	retlw	6
 10914  1755                     __end_ofPL18:	
 10915  1755                     PL20:	
 10916  1755  0020               	movlb	0	; select bank0
 10917  1756  0847               	movf	_comm_time+1,w
 10918  1757  0022               	movlb	2	; select bank2
 10919  1758  00BE               	movwf	(_phase_delay_counter+1)^(0+256)
 10920  1759  0020               	movlb	0	; select bank0
 10921  175A  0846               	movf	_comm_time,w
 10922  175B  0022               	movlb	2	; select bank2
 10923  175C  00BD               	movwf	_phase_delay_counter^(0+256)
 10924  175D  0021               	movlb	1	; select bank1
 10925  175E  0830               	movf	_ui16_phase_advancement^(0+128),w
 10926  175F  0022               	movlb	2	; select bank2
 10927  1760  02BD               	subwf	_phase_delay_counter^(0+256),f
 10928  1761  0021               	movlb	1	; select bank1
 10929  1762  0831               	movf	(_ui16_phase_advancement+1)^(0+128),w
 10930  1763  0022               	movlb	2	; select bank2
 10931  1764  3BBE               	subwfb	(_phase_delay_counter+1)^(0+256),f
 10932  1765  0008               	return
 10933  1766                     __end_ofPL20:	
 10934  1766                     PL22:	
 10935  1766  0022               	movlb	2	; select bank2
 10936  1767  110E               	bcf	14,2	;volatile
 10937  1768  108D               	bcf	13,1	;volatile
 10938  1769  3035               	movlw	53
 10939  176A  0021               	movlb	1	; select bank1
 10940  176B  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 10941  176C  3005               	movlw	5
 10942  176D  00E9               	movwf	_ui8_UPhase_sel^(0+128)
 10943  176E  01E8               	clrf	_ui8_Ubemf_sel^(0+128)
 10944  176F  0AE8               	incf	_ui8_Ubemf_sel^(0+128),f
 10945  1770  0022               	movlb	2	; select bank2
 10946  1771  0192               	clrf	18	;volatile
 10947  1772  3084               	movlw	132
 10948  1773  0091               	movwf	17	;volatile
 10949  1774  0020               	movlb	0	; select bank0
 10950  1775  3402               	retlw	2
 10951  1776                     __end_ofPL22:	
 10952  1776                     PL24:	
 10953  1776  0022               	movlb	2	; select bank2
 10954  1777  150E               	bsf	14,2	;volatile
 10955  1778  110D               	bcf	13,2	;volatile
 10956  1779  3011               	movlw	17
 10957  177A  0021               	movlb	1	; select bank1
 10958  177B  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 10959  177C  3025               	movlw	37
 10960  177D  00E9               	movwf	_ui8_UPhase_sel^(0+128)
 10961  177E  01E8               	clrf	_ui8_Ubemf_sel^(0+128)
 10962  177F  0AE8               	incf	_ui8_Ubemf_sel^(0+128),f
 10963  1780  0022               	movlb	2	; select bank2
 10964  1781  0192               	clrf	18	;volatile
 10965  1782  3094               	movlw	148
 10966  1783  0091               	movwf	17	;volatile
 10967  1784  0020               	movlb	0	; select bank0
 10968  1785  3405               	retlw	5
 10969  1786                     __end_ofPL24:	
 10970  1786                     PL26:	
 10971  1786  0022               	movlb	2	; select bank2
 10972  1787  150D               	bsf	13,2	;volatile
 10973  1788  108D               	bcf	13,1	;volatile
 10974  1789  3009               	movlw	9
 10975  178A  0021               	movlb	1	; select bank1
 10976  178B  00EA               	movwf	_ui8_IPhase_sel^(0+128)
 10977  178C  3005               	movlw	5
 10978  178D  01E9               	clrf	_ui8_UPhase_sel^(0+128)
 10979  178E  0AE9               	incf	_ui8_UPhase_sel^(0+128),f
 10980  178F  00E8               	movwf	_ui8_Ubemf_sel^(0+128)
 10981  1790  3001               	movlw	1
 10982  1791  0022               	movlb	2	; select bank2
 10983  1792  0092               	movwf	18	;volatile
 10984  1793  3094               	movlw	148
 10985  1794  0091               	movwf	17	;volatile
 10986  1795  0008               	return
 10987  1796                     __end_ofPL26:	
 10988  1796                     PL28:	
 10989  1796  00FC               	movwf	??_interrrupt_bldc
 10990  1797  01FD               	clrf	??_interrrupt_bldc+1
 10991  1798  0020               	movlb	0	; select bank0
 10992  1799  0845               	movf	_ui16_IPhase_bldc+1,w	;volatile
 10993  179A  027D               	subwf	??_interrrupt_bldc+1,w
 10994  179B  1D03               	skipz
 10995  179C  0008               	return
 10996  179D  0844               	movf	_ui16_IPhase_bldc,w	;volatile
 10997  179E  027C               	subwf	??_interrrupt_bldc,w
 10998  179F  0008               	return
 10999  17A0                     __end_ofPL28:	
 11000  17A0                     PL34:	
 11001  17A0  081C               	movf	28,w	;volatile
 11002  17A1  0020               	movlb	0	; select bank0
 11003  17A2  00C9               	movwf	_analog_value+1	;volatile
 11004  17A3  0021               	movlb	1	; select bank1
 11005  17A4  081B               	movf	27,w	;volatile
 11006  17A5  0020               	movlb	0	; select bank0
 11007  17A6  00C8               	movwf	_analog_value	;volatile
 11008  17A7  0849               	movf	_analog_value+1,w	;volatile
 11009  17A8  0008               	return
 11010  17A9                     __end_ofPL34:	
 11011  17A9                     PL36:	
 11012  17A9  0022               	movlb	2	; select bank2
 11013  17AA  080E               	movf	14,w	;volatile
 11014  17AB  39E5               	andlw	229
 11015  17AC  3818               	iorlw	24
 11016  17AD  008E               	movwf	14	;volatile
 11017  17AE  0008               	return
 11018  17AF                     __end_ofPL36:	
 11019  17AF                     PL38:	
 11020  17AF  0022               	movlb	2	; select bank2
 11021  17B0  080E               	movf	14,w	;volatile
 11022  17B1  39E5               	andlw	229
 11023  17B2  380A               	iorlw	10
 11024  17B3  008E               	movwf	14	;volatile
 11025  17B4  0008               	return
 11026  17B5                     __end_ofPL38:	
 11027  17B5                     PL42:	
 11028  17B5  0022               	movlb	2	; select bank2
 11029  17B6  080E               	movf	14,w	;volatile
 11030  17B7  39E5               	andlw	229
 11031  17B8  3812               	iorlw	18
 11032  17B9  008E               	movwf	14	;volatile
 11033  17BA  0008               	return
 11034  17BB                     __end_ofPL42:	
 11035  17BB                     PL48:	
 11036  17BB  0845               	movf	_ui16_IPhase_bldc+1,w	;volatile
 11037  17BC  00F1               	movwf	i1___wmul@multiplier+1
 11038  17BD  0844               	movf	_ui16_IPhase_bldc,w	;volatile
 11039  17BE  00F0               	movwf	i1___wmul@multiplier
 11040  17BF  0022               	movlb	2	; select bank2
 11041  17C0  0008               	return
 11042  17C1                     __end_ofPL48:	
 11043  17C1                     PL52:	
 11044  17C1  3028               	movlw	40
 11045  17C2  00EB               	movwf	_ui8_BlankingCount^(0+128)
 11046  17C3  0020               	movlb	0	; select bank0
 11047  17C4  01C6               	clrf	_comm_time
 11048  17C5  01C7               	clrf	_comm_time+1
 11049  17C6  0008               	return
 11050  17C7                     __end_ofPL52:	
 11051  17C7                     PL56:	
 11052  17C7  3032               	movlw	50
 11053  17C8  01BD               	clrf	_phase_delay_counter^(0+256)
 11054  17C9  01BE               	clrf	(_phase_delay_counter+1)^(0+256)
 11055  17CA  00BF               	movwf	_ui16_comm_time_max^(0+256)
 11056  17CB  01C0               	clrf	(_ui16_comm_time_max+1)^(0+256)
 11057  17CC  0020               	movlb	0	; select bank0
 11058  17CD  0008               	return
 11059  17CE                     __end_ofPL56:	
 11060  17CE                     PL60:	
 11061  17CE  0025               	movlb	5	; select bank5
 11062  17CF  0A91               	incf	17,f	;volatile
 11063  17D0  0020               	movlb	0	; select bank0
 11064  17D1  084E               	movf	_ui8_duty_cycle_BLDC,w
 11065  17D2  0025               	movlb	5	; select bank5
 11066  17D3  0211               	subwf	17,w	;volatile
 11067  17D4  0008               	return
 11068  17D5                     __end_ofPL60:	
 11069  17D5                     PL62:	
 11070  17D5  30F4               	movlw	244
 11071  17D6  0022               	movlb	2	; select bank2
 11072  17D7  00BF               	movwf	_ui16_comm_time_max^(0+256)
 11073  17D8  3001               	movlw	1
 11074  17D9  00C0               	movwf	(_ui16_comm_time_max^(0+256)+1)
 11075  17DA  0008               	return
 11076  17DB                     __end_ofPL62:	
 11077  17DB                     PL64:	
 11078  17DB  0025               	movlb	5	; select bank5
 11079  17DC  0391               	decf	17,f	;volatile
 11080  17DD  0811               	movf	17,w	;volatile
 11081  17DE  0020               	movlb	0	; select bank0
 11082  17DF  024E               	subwf	_ui8_duty_cycle_BLDC,w
 11083  17E0  0008               	return
 11084  17E1                     __end_ofPL64:	
 11085  17E1                     PL70:	
 11086  17E1  0020               	movlb	0	; select bank0
 11087  17E2  1053               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 11088  17E3  0021               	movlb	1	; select bank1
 11089  17E4  01EC               	clrf	_comm_state^(0+128)
 11090  17E5  0AEC               	incf	_comm_state^(0+128),f
 11091  17E6  0008               	return
 11092  17E7                     __end_ofPL70:	
 11093  17E7                     PL72:	
 11094  17E7  0832               	movf	_ui16_step_cnt^(0+128),w
 11095  17E8  0084               	movwf	4
 11096  17E9  300A               	movlw	10
 11097  17EA  0204               	subwf	4,w
 11098  17EB  0008               	return
 11099  17EC                     __end_ofPL72:	
 11100  17EC                     PL74:	
 11101  17EC  0025               	movlb	5	; select bank5
 11102  17ED  0196               	clrf	22	;volatile
 11103  17EE  0022               	movlb	2	; select bank2
 11104  17EF  0191               	clrf	17	;volatile
 11105  17F0  0008               	return
 11106  17F1                     __end_ofPL74:	
 11107  17F1                     PL82:	
 11108  17F1  0020               	movlb	0	; select bank0
 11109  17F2  01C6               	clrf	_comm_time
 11110  17F3  01C7               	clrf	_comm_time+1
 11111  17F4  0021               	movlb	1	; select bank1
 11112  17F5  0008               	return
 11113  17F6                     __end_ofPL82:	
 11114  17F6                     PL86:	
 11115  17F6  0025               	movlb	5	; select bank5
 11116  17F7  0811               	movf	17,w	;volatile
 11117  17F8  0020               	movlb	0	; select bank0
 11118  17F9  024E               	subwf	_ui8_duty_cycle_BLDC,w
 11119  17FA  0008               	return
 11120  17FB                     __end_ofPL86:	
 11121  17FB                     PL90:	
 11122  17FB  0025               	movlb	5	; select bank5
 11123  17FC  0811               	movf	17,w	;volatile
 11124  17FD  0020               	movlb	0	; select bank0
 11125  17FE  064E               	xorwf	_ui8_duty_cycle_BLDC,w
 11126  17FF  0008               	return
 11127  1800                     __end_ofPL90:	
 11128                           
 11129                           	psect	swtext1
 11130  02AB                     __pswtext1:	
 11131  02AB                     S10357:	
 11132  02AB  3193  2B26         	ljmp	l4877
 11133  02AD  3193  2B28         	ljmp	l4879
 11134  02AF  3193  2B2B         	ljmp	l4881
 11135  02B1  3193  2B2D         	ljmp	l4883
 11136  02B3  3193  2B2F         	ljmp	l4885
 11137  02B5  3193  2B31         	ljmp	l4887
 11138  02B7  3193  2B31         	ljmp	l4887
 11139  02B9  3193  2B31         	ljmp	l4887
 11140  02BB  3193  2B31         	ljmp	l4887
 11141  02BD  3193  2B31         	ljmp	l4887
 11142                           
 11143                           	psect	text17
 11144  0207                     __ptext17:	
 11145 ;; *************** function ___awdiv *****************
 11146 ;; Defined at:
 11147 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;  divisor         2   10[BANK0 ] int 
 11150 ;;  dividend        2   12[BANK0 ] int 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  quotient        2   16[BANK0 ] int 
 11153 ;;  sign            1   15[BANK0 ] unsigned char 
 11154 ;;  counter         1   14[BANK0 ] unsigned char 
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  2   10[BANK0 ] int 
 11157 ;; Registers used:
 11158 ;;		wreg, status,2, status,0
 11159 ;; Tracked objects:
 11160 ;;		On entry : 1F/0
 11161 ;;		On exit  : 1F/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11164 ;;      Params:         0       4       0       0       0       0       0       0
 11165 ;;      Locals:         0       4       0       0       0       0       0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0
 11167 ;;      Totals:         0       8       0       0       0       0       0       0
 11168 ;;Total ram usage:        8 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    3
 11171 ;; This function calls:
 11172 ;;		Nothing
 11173 ;; This function is called by:
 11174 ;;		_main
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           
 11179                           ;psect for function ___awdiv
 11180  0207                     ___awdiv:	
 11181                           
 11182                           ;incstack = 0
 11183                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11184  0207  01AF               	clrf	___awdiv@sign
 11185  0208  1FAB               	btfss	___awdiv@divisor+1,7
 11186  0209  2A11               	goto	l7077
 11187  020A  09AA               	comf	___awdiv@divisor,f
 11188  020B  09AB               	comf	___awdiv@divisor+1,f
 11189  020C  0AAA               	incf	___awdiv@divisor,f
 11190  020D  1903               	skipnz
 11191  020E  0AAB               	incf	___awdiv@divisor+1,f
 11192  020F  01AF               	clrf	___awdiv@sign
 11193  0210  0AAF               	incf	___awdiv@sign,f
 11194  0211                     l7077:	
 11195  0211  1FAD               	btfss	___awdiv@dividend+1,7
 11196  0212  2A1A               	goto	l7083
 11197  0213  09AC               	comf	___awdiv@dividend,f
 11198  0214  09AD               	comf	___awdiv@dividend+1,f
 11199  0215  0AAC               	incf	___awdiv@dividend,f
 11200  0216  1903               	skipnz
 11201  0217  0AAD               	incf	___awdiv@dividend+1,f
 11202  0218  3001               	movlw	1
 11203  0219  06AF               	xorwf	___awdiv@sign,f
 11204  021A                     l7083:	
 11205  021A  01B0               	clrf	___awdiv@quotient
 11206  021B  01B1               	clrf	___awdiv@quotient+1
 11207  021C  082A               	movf	___awdiv@divisor,w
 11208  021D  042B               	iorwf	___awdiv@divisor+1,w
 11209  021E  1903               	btfsc	3,2
 11210  021F  2A3A               	goto	l7105
 11211  0220  01AE               	clrf	___awdiv@counter
 11212  0221                     L12:	
 11213  0221  0AAE               	incf	___awdiv@counter,f
 11214  0222  1BAB               	btfsc	___awdiv@divisor+1,7
 11215  0223  2A27               	goto	l7093
 11216  0224  35AA               	lslf	___awdiv@divisor,f
 11217  0225  0DAB               	rlf	___awdiv@divisor+1,f
 11218  0226  2A21               	goto	L12
 11219  0227                     l7093:	
 11220  0227  35B0               	lslf	___awdiv@quotient,f
 11221  0228  0DB1               	rlf	___awdiv@quotient+1,f
 11222  0229  082B               	movf	___awdiv@divisor+1,w
 11223  022A  022D               	subwf	___awdiv@dividend+1,w
 11224  022B  1D03               	skipz
 11225  022C  2A2F               	goto	u4675
 11226  022D  082A               	movf	___awdiv@divisor,w
 11227  022E  022C               	subwf	___awdiv@dividend,w
 11228  022F                     u4675:	
 11229  022F  1C03               	skipc
 11230  0230  2A36               	goto	l7101
 11231  0231  082A               	movf	___awdiv@divisor,w
 11232  0232  02AC               	subwf	___awdiv@dividend,f
 11233  0233  082B               	movf	___awdiv@divisor+1,w
 11234  0234  3BAD               	subwfb	___awdiv@dividend+1,f
 11235  0235  1430               	bsf	___awdiv@quotient,0
 11236  0236                     l7101:	
 11237  0236  36AB               	lsrf	___awdiv@divisor+1,f
 11238  0237  0CAA               	rrf	___awdiv@divisor,f
 11239  0238  0BAE               	decfsz	___awdiv@counter,f
 11240  0239  2A27               	goto	l7093
 11241  023A                     l7105:	
 11242  023A  082F               	movf	___awdiv@sign,w
 11243  023B  1903               	btfsc	3,2
 11244  023C  2A42               	goto	l7109
 11245  023D  09B0               	comf	___awdiv@quotient,f
 11246  023E  09B1               	comf	___awdiv@quotient+1,f
 11247  023F  0AB0               	incf	___awdiv@quotient,f
 11248  0240  1903               	skipnz
 11249  0241  0AB1               	incf	___awdiv@quotient+1,f
 11250  0242                     l7109:	
 11251  0242  0831               	movf	___awdiv@quotient+1,w
 11252  0243  00AB               	movwf	?___awdiv+1
 11253  0244  0830               	movf	___awdiv@quotient,w
 11254  0245  00AA               	movwf	?___awdiv
 11255  0246  0008               	return
 11256  0247                     __end_of___awdiv:	
 11257                           
 11258                           	psect	text20
 11259  0028                     __ptext20:	
 11260 ;; *************** function _PWMReadDC *****************
 11261 ;; Defined at:
 11262 ;;		line 363 in file "../pwm.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;		None
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;		None
 11267 ;; Return value:  Size  Location     Type
 11268 ;;                  1    wreg      unsigned char 
 11269 ;; Registers used:
 11270 ;;		wreg, status,2, status,0, pclath, cstack
 11271 ;; Tracked objects:
 11272 ;;		On entry : 0/1
 11273 ;;		On exit  : 1C/0
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11276 ;;      Params:         0       0       0       0       0       0       0       0
 11277 ;;      Locals:         0       0       0       0       0       0       0       0
 11278 ;;      Temps:          0       0       0       0       0       0       0       0
 11279 ;;      Totals:         0       0       0       0       0       0       0       0
 11280 ;;Total ram usage:        0 bytes
 11281 ;; Hardware stack levels used:    1
 11282 ;; Hardware stack levels required when called:    4
 11283 ;; This function calls:
 11284 ;;		___ltdiv
 11285 ;;		___tmul
 11286 ;; This function is called by:
 11287 ;;		_main
 11288 ;; This function uses a non-reentrant model
 11289 ;;
 11290                           
 11291                           
 11292                           ;psect for function _PWMReadDC
 11293  0028                     _PWMReadDC:	
 11294                           
 11295                           ;pwm.c: 368: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
 11296                           
 11297                           ;incstack = 0
 11298                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
 11299  0028  0022               	movlb	2	; select bank2
 11300  0029  0833               	movf	_ui16_PWM_Freq_In^(0+256),w
 11301  002A  0020               	movlb	0	; select bank0
 11302  002B  00AD               	movwf	___ltdiv@divisor
 11303  002C  0022               	movlb	2	; select bank2
 11304  002D  0834               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
 11305  002E  0020               	movlb	0	; select bank0
 11306  002F  00AE               	movwf	___ltdiv@divisor+1
 11307  0030  01AF               	clrf	___ltdiv@divisor+2
 11308  0031  0022               	movlb	2	; select bank2
 11309  0032  085E               	movf	_ui16_Duty_Cycle_In^(0+256),w
 11310  0033  0020               	movlb	0	; select bank0
 11311  0034  00A4               	movwf	___tmul@multiplier
 11312  0035  0022               	movlb	2	; select bank2
 11313  0036  085F               	movf	(_ui16_Duty_Cycle_In+1)^(0+256),w
 11314  0037  0020               	movlb	0	; select bank0
 11315  0038  00A5               	movwf	___tmul@multiplier+1
 11316  0039  30C8               	movlw	200
 11317  003A  01A6               	clrf	___tmul@multiplier+2
 11318  003B  00A7               	movwf	___tmul@multiplicand
 11319  003C  01A8               	clrf	___tmul@multiplicand+1
 11320  003D  01A9               	clrf	___tmul@multiplicand+2
 11321  003E  209F  3180         	fcall	___tmul
 11322  0040  0824               	movf	?___tmul,w
 11323  0041  00B0               	movwf	___ltdiv@dividend
 11324  0042  0825               	movf	?___tmul+1,w
 11325  0043  00B1               	movwf	___ltdiv@dividend+1
 11326  0044  0826               	movf	?___tmul+2,w
 11327  0045  00B2               	movwf	___ltdiv@dividend+2
 11328  0046  206D  3180         	fcall	___ltdiv
 11329  0048  082D               	movf	?___ltdiv,w
 11330  0049  0021               	movlb	1	; select bank1
 11331  004A  00CE               	movwf	_ui8_PWMinDC_sav^(0+128)
 11332                           
 11333                           ;pwm.c: 370: if( ui8_PWMinDC_sav == 0 )
 11334  004B  084E               	movf	_ui8_PWMinDC_sav^(0+128),w
 11335  004C  1D03               	btfss	3,2
 11336  004D  2856               	goto	l9327
 11337  004E  3005               	movlw	5
 11338                           
 11339                           ;pwm.c: 372: {;pwm.c: 376: ui8_PWMin_failCnt++;
 11340  004F  0ACD               	incf	_ui8_PWMin_failCnt^(0+128),f
 11341                           
 11342                           ;pwm.c: 378: if( ui8_PWMin_failCnt >= 5 )
 11343  0050  024D               	subwf	_ui8_PWMin_failCnt^(0+128),w
 11344  0051  1C03               	skipc
 11345  0052  285C               	goto	l9333
 11346                           
 11347                           ;pwm.c: 380: {;pwm.c: 382: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
 11348  0053  084E               	movf	_ui8_PWMinDC_sav^(0+128),w
 11349  0054  00CF               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+128)
 11350  0055  285C               	goto	l9333
 11351  0056                     l9327:	
 11352                           
 11353                           ;pwm.c: 393: else;pwm.c: 394: {;pwm.c: 398: ui8_PWMin_failCnt = 0;
 11354  0056  01CD               	clrf	_ui8_PWMin_failCnt^(0+128)
 11355                           
 11356                           ;pwm.c: 401: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
 11357  0057  084E               	movf	_ui8_PWMinDC_sav^(0+128),w
 11358  0058  00CF               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+128)
 11359                           
 11360                           ;pwm.c: 403: ui16_Duty_Cycle_In = 0;
 11361  0059  0022               	movlb	2	; select bank2
 11362  005A  01DE               	clrf	_ui16_Duty_Cycle_In^(0+256)
 11363  005B  01DF               	clrf	(_ui16_Duty_Cycle_In+1)^(0+256)
 11364  005C                     l9333:	
 11365                           
 11366                           ;pwm.c: 405: };pwm.c: 410: if(ui8_Duty_Cycle_In_Ratio == 0)
 11367  005C  0021               	movlb	1	; select bank1
 11368  005D  084F               	movf	_ui8_Duty_Cycle_In_Ratio^(0+128),w
 11369  005E  1D03               	btfss	3,2
 11370  005F  286A               	goto	l9347
 11371                           
 11372                           ;pwm.c: 411: {;pwm.c: 413: if(ui16_PWM_Input_State == 1)
 11373  0060  0022               	movlb	2	; select bank2
 11374  0061  0327               	decf	_ui16_PWM_Input_State^(0+256),w
 11375  0062  0428               	iorwf	(_ui16_PWM_Input_State+1)^(0+256),w
 11376                           
 11377                           ;pwm.c: 414: {;pwm.c: 415: ui16_PWM_Freq_In = 40000;
 11378  0063  3040               	movlw	64
 11379  0064  00B3               	movwf	_ui16_PWM_Freq_In^(0+256)
 11380  0065  309C               	movlw	156
 11381  0066  00B4               	movwf	(_ui16_PWM_Freq_In^(0+256)+1)
 11382  0067  1903               	btfsc	3,2
 11383                           
 11384                           ;pwm.c: 416: return 20;
 11385  0068  3414               	retlw	20
 11386  0069  34C8               	retlw	200
 11387  006A                     l9347:	
 11388                           ;pwm.c: 421: return 200;
 11389                           
 11390                           ;pwm.c: 418: else;pwm.c: 419: {;pwm.c: 420: ui16_PWM_Freq_In = 40000;
 11391                           
 11392                           
 11393                           ;pwm.c: 424: else;pwm.c: 425: {;pwm.c: 426: return ( 200 - ui8_Duty_Cycle_In_Ratio );
 11394  006A  084F               	movf	_ui8_Duty_Cycle_In_Ratio^(0+128),w
 11395  006B  3CC8               	sublw	200
 11396  006C  0008               	return
 11397  006D                     __end_of_PWMReadDC:	
 11398  006D                     __ptext22:	
 11399 ;; *************** function ___ltdiv *****************
 11400 ;; Defined at:
 11401 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltdiv.c"
 11402 ;; Parameters:    Size  Location     Type
 11403 ;;  divisor         3   13[BANK0 ] unsigned um
 11404 ;;  dividend        3   16[BANK0 ] unsigned um
 11405 ;; Auto vars:     Size  Location     Type
 11406 ;;  quotient        3   19[BANK0 ] unsigned um
 11407 ;;  counter         1   22[BANK0 ] unsigned char 
 11408 ;; Return value:  Size  Location     Type
 11409 ;;                  3   13[BANK0 ] unsigned um
 11410 ;; Registers used:
 11411 ;;		wreg, status,2, status,0
 11412 ;; Tracked objects:
 11413 ;;		On entry : 1F/0
 11414 ;;		On exit  : 1F/0
 11415 ;;		Unchanged: 0/0
 11416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11417 ;;      Params:         0       6       0       0       0       0       0       0
 11418 ;;      Locals:         0       4       0       0       0       0       0       0
 11419 ;;      Temps:          0       0       0       0       0       0       0       0
 11420 ;;      Totals:         0      10       0       0       0       0       0       0
 11421 ;;Total ram usage:       10 bytes
 11422 ;; Hardware stack levels used:    1
 11423 ;; Hardware stack levels required when called:    3
 11424 ;; This function calls:
 11425 ;;		Nothing
 11426 ;; This function is called by:
 11427 ;;		_PWMReadDC
 11428 ;; This function uses a non-reentrant model
 11429 ;;
 11430                           
 11431                           
 11432                           ;psect for function ___ltdiv
 11433  006D                     ___ltdiv:	
 11434                           
 11435                           ;incstack = 0
 11436                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
 11437  006D  01B3               	clrf	___ltdiv@quotient
 11438  006E  01B4               	clrf	___ltdiv@quotient+1
 11439  006F  01B5               	clrf	___ltdiv@quotient+2
 11440  0070  082F               	movf	___ltdiv@divisor+2,w
 11441  0071  042E               	iorwf	___ltdiv@divisor+1,w
 11442  0072  042D               	iorwf	___ltdiv@divisor,w
 11443  0073  1903               	skipnz
 11444  0074  2898               	goto	l9049
 11445  0075  01B6               	clrf	___ltdiv@counter
 11446  0076                     L14:	
 11447  0076  0AB6               	incf	___ltdiv@counter,f
 11448  0077  1BAF               	btfsc	___ltdiv@divisor+2,7
 11449  0078  287D               	goto	l9037
 11450  0079  35AD               	lslf	___ltdiv@divisor,f
 11451  007A  0DAE               	rlf	___ltdiv@divisor+1,f
 11452  007B  0DAF               	rlf	___ltdiv@divisor+2,f
 11453  007C  2876               	goto	L14
 11454  007D                     l9037:	
 11455  007D  35B3               	lslf	___ltdiv@quotient,f
 11456  007E  0DB4               	rlf	___ltdiv@quotient+1,f
 11457  007F  0DB5               	rlf	___ltdiv@quotient+2,f
 11458  0080  082F               	movf	___ltdiv@divisor+2,w
 11459  0081  0232               	subwf	___ltdiv@dividend+2,w
 11460  0082  1D03               	skipz
 11461  0083  288A               	goto	u6955
 11462  0084  082E               	movf	___ltdiv@divisor+1,w
 11463  0085  0231               	subwf	___ltdiv@dividend+1,w
 11464  0086  1D03               	skipz
 11465  0087  288A               	goto	u6955
 11466  0088  082D               	movf	___ltdiv@divisor,w
 11467  0089  0230               	subwf	___ltdiv@dividend,w
 11468  008A                     u6955:	
 11469  008A  1C03               	skipc
 11470  008B  2893               	goto	l9045
 11471  008C  082D               	movf	___ltdiv@divisor,w
 11472  008D  02B0               	subwf	___ltdiv@dividend,f
 11473  008E  082E               	movf	___ltdiv@divisor+1,w
 11474  008F  3BB1               	subwfb	___ltdiv@dividend+1,f
 11475  0090  082F               	movf	___ltdiv@divisor+2,w
 11476  0091  3BB2               	subwfb	___ltdiv@dividend+2,f
 11477  0092  1433               	bsf	___ltdiv@quotient,0
 11478  0093                     l9045:	
 11479  0093  36AF               	lsrf	___ltdiv@divisor+2,f
 11480  0094  0CAE               	rrf	___ltdiv@divisor+1,f
 11481  0095  0CAD               	rrf	___ltdiv@divisor,f
 11482  0096  0BB6               	decfsz	___ltdiv@counter,f
 11483  0097  287D               	goto	l9037
 11484  0098                     l9049:	
 11485  0098  0833               	movf	___ltdiv@quotient,w
 11486  0099  00AD               	movwf	?___ltdiv
 11487  009A  0834               	movf	___ltdiv@quotient+1,w
 11488  009B  00AE               	movwf	?___ltdiv+1
 11489  009C  0835               	movf	___ltdiv@quotient+2,w
 11490  009D  00AF               	movwf	?___ltdiv+2
 11491  009E  0008               	return
 11492  009F                     __end_of___ltdiv:	
 11493  009F                     __ptext21:	
 11494 ;; *************** function ___tmul *****************
 11495 ;; Defined at:
 11496 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul24.c"
 11497 ;; Parameters:    Size  Location     Type
 11498 ;;  multiplier      3    4[BANK0 ] unsigned um
 11499 ;;  multiplicand    3    7[BANK0 ] unsigned um
 11500 ;; Auto vars:     Size  Location     Type
 11501 ;;  product         3   10[BANK0 ] unsigned um
 11502 ;; Return value:  Size  Location     Type
 11503 ;;                  3    4[BANK0 ] unsigned um
 11504 ;; Registers used:
 11505 ;;		wreg, status,2, status,0
 11506 ;; Tracked objects:
 11507 ;;		On entry : 1F/0
 11508 ;;		On exit  : 1F/0
 11509 ;;		Unchanged: 0/0
 11510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11511 ;;      Params:         0       6       0       0       0       0       0       0
 11512 ;;      Locals:         0       3       0       0       0       0       0       0
 11513 ;;      Temps:          0       0       0       0       0       0       0       0
 11514 ;;      Totals:         0       9       0       0       0       0       0       0
 11515 ;;Total ram usage:        9 bytes
 11516 ;; Hardware stack levels used:    1
 11517 ;; Hardware stack levels required when called:    3
 11518 ;; This function calls:
 11519 ;;		Nothing
 11520 ;; This function is called by:
 11521 ;;		_PWMReadDC
 11522 ;; This function uses a non-reentrant model
 11523 ;;
 11524                           
 11525                           
 11526                           ;psect for function ___tmul
 11527  009F                     ___tmul:	
 11528                           
 11529                           ;incstack = 0
 11530                           ; Regs used in ___tmul: [wreg+status,2+status,0]
 11531  009F  01AA               	clrf	___tmul@product
 11532  00A0  01AB               	clrf	___tmul@product+1
 11533  00A1  01AC               	clrf	___tmul@product+2
 11534  00A2                     l1845:	
 11535  00A2  1C24               	btfss	___tmul@multiplier,0
 11536  00A3  28AA               	goto	l5613
 11537  00A4  0827               	movf	___tmul@multiplicand,w
 11538  00A5  07AA               	addwf	___tmul@product,f
 11539  00A6  0828               	movf	___tmul@multiplicand+1,w
 11540  00A7  3DAB               	addwfc	___tmul@product+1,f
 11541  00A8  0829               	movf	___tmul@multiplicand+2,w
 11542  00A9  3DAC               	addwfc	___tmul@product+2,f
 11543  00AA                     l5613:	
 11544  00AA  35A7               	lslf	___tmul@multiplicand,f
 11545  00AB  0DA8               	rlf	___tmul@multiplicand+1,f
 11546  00AC  0DA9               	rlf	___tmul@multiplicand+2,f
 11547  00AD  36A6               	lsrf	___tmul@multiplier+2,f
 11548  00AE  0CA5               	rrf	___tmul@multiplier+1,f
 11549  00AF  0CA4               	rrf	___tmul@multiplier,f
 11550  00B0  0826               	movf	___tmul@multiplier+2,w
 11551  00B1  0425               	iorwf	___tmul@multiplier+1,w
 11552  00B2  0424               	iorwf	___tmul@multiplier,w
 11553  00B3  1D03               	skipz
 11554  00B4  28A2               	goto	l1845
 11555  00B5  082A               	movf	___tmul@product,w
 11556  00B6  00A4               	movwf	?___tmul
 11557  00B7  082B               	movf	___tmul@product+1,w
 11558  00B8  00A5               	movwf	?___tmul+1
 11559  00B9  082C               	movf	___tmul@product+2,w
 11560  00BA  00A6               	movwf	?___tmul+2
 11561  00BB  0008               	return
 11562  00BC                     __end_of___tmul:	
 11563                           
 11564                           	psect	text26
 11565  026C                     __ptext26:	
 11566 ;; *************** function _FILTER_Temp *****************
 11567 ;; Defined at:
 11568 ;;		line 400 in file "../adc.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;		None
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;		None
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  1    wreg      void 
 11575 ;; Registers used:
 11576 ;;		wreg, status,2, status,0
 11577 ;; Tracked objects:
 11578 ;;		On entry : 1F/2
 11579 ;;		On exit  : 1F/2
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11582 ;;      Params:         0       0       0       0       0       0       0       0
 11583 ;;      Locals:         0       0       0       0       0       0       0       0
 11584 ;;      Temps:          0       2       0       0       0       0       0       0
 11585 ;;      Totals:         0       2       0       0       0       0       0       0
 11586 ;;Total ram usage:        2 bytes
 11587 ;; Hardware stack levels used:    1
 11588 ;; Hardware stack levels required when called:    3
 11589 ;; This function calls:
 11590 ;;		Nothing
 11591 ;; This function is called by:
 11592 ;;		_Get_Analog_Value
 11593 ;; This function uses a non-reentrant model
 11594 ;;
 11595                           
 11596                           
 11597                           ;psect for function _FILTER_Temp
 11598  026C                     _FILTER_Temp:	
 11599  026C                     l5219:	
 11600                           ;incstack = 0
 11601                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
 11602                           
 11603                           
 11604                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
 11605  026C  0855               	movf	_ui16_NTC_Temp_bldc^(0+256),w
 11606  026D  07C7               	addwf	_filterTempNTC^(0+256),f
 11607  026E  0856               	movf	(_ui16_NTC_Temp_bldc+1)^(0+256),w
 11608  026F  3DC8               	addwfc	(_filterTempNTC+1)^(0+256),f
 11609                           
 11610                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
 11611  0270  0848               	movf	(_filterTempNTC+1)^(0+256),w
 11612  0271  0020               	movlb	0	; select bank0
 11613  0272  00A5               	movwf	??_FILTER_Temp+1
 11614  0273  0022               	movlb	2	; select bank2
 11615  0274  0847               	movf	_filterTempNTC^(0+256),w
 11616  0275  0020               	movlb	0	; select bank0
 11617  0276  00A4               	movwf	??_FILTER_Temp
 11618  0277  3006               	movlw	6
 11619  0278                     u2395:	
 11620  0278  36A5               	lsrf	??_FILTER_Temp+1,f
 11621  0279  0CA4               	rrf	??_FILTER_Temp,f
 11622  027A  0B89               	decfsz	9,f
 11623  027B  2A78               	goto	u2395
 11624  027C  0824               	movf	??_FILTER_Temp,w
 11625  027D  0022               	movlb	2	; select bank2
 11626  027E  00CD               	movwf	_ui16_NTC_Temp_bldc_mean^(0+256)
 11627  027F  0020               	movlb	0	; select bank0
 11628  0280  0825               	movf	??_FILTER_Temp+1,w
 11629  0281  0022               	movlb	2	; select bank2
 11630  0282  00CE               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256)
 11631                           
 11632                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
 11633  0283  084D               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
 11634  0284  02C7               	subwf	_filterTempNTC^(0+256),f
 11635  0285  084E               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
 11636  0286  3BC8               	subwfb	(_filterTempNTC+1)^(0+256),f
 11637                           
 11638                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
 11639  0287  0853               	movf	_ui16_Temp_cal^(0+256),w
 11640  0288  074D               	addwf	_ui16_NTC_Temp_bldc_mean^(0+256),w
 11641  0289  00C5               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+256)
 11642  028A  0854               	movf	(_ui16_Temp_cal+1)^(0+256),w
 11643  028B  3D4E               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
 11644  028C  00C6               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+256)
 11645  028D  0008               	return
 11646  028E                     __end_of_FILTER_Temp:	
 11647                           
 11648                           	psect	text27
 11649  028E                     __ptext27:	
 11650 ;; *************** function _FILTER_IPhase *****************
 11651 ;; Defined at:
 11652 ;;		line 357 in file "../adc.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;		None
 11655 ;; Auto vars:     Size  Location     Type
 11656 ;;		None
 11657 ;; Return value:  Size  Location     Type
 11658 ;;                  1    wreg      void 
 11659 ;; Registers used:
 11660 ;;		wreg, status,2, status,0
 11661 ;; Tracked objects:
 11662 ;;		On entry : 1D/0
 11663 ;;		On exit  : 1F/2
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11666 ;;      Params:         0       0       0       0       0       0       0       0
 11667 ;;      Locals:         0       0       0       0       0       0       0       0
 11668 ;;      Temps:          0       2       0       0       0       0       0       0
 11669 ;;      Totals:         0       2       0       0       0       0       0       0
 11670 ;;Total ram usage:        2 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    3
 11673 ;; This function calls:
 11674 ;;		Nothing
 11675 ;; This function is called by:
 11676 ;;		_Get_Analog_Value
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           
 11681                           ;psect for function _FILTER_IPhase
 11682  028E                     _FILTER_IPhase:	
 11683                           
 11684                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
 11685                           
 11686                           ;incstack = 0
 11687                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
 11688  028E  0022               	movlb	2	; select bank2
 11689  028F  0857               	movf	_ui16_IPhase1_bldc^(0+256),w	;volatile
 11690  0290  07C9               	addwf	_filter3^(0+256),f
 11691  0291  0858               	movf	(_ui16_IPhase1_bldc+1)^(0+256),w	;volatile
 11692  0292  3DCA               	addwfc	(_filter3+1)^(0+256),f
 11693                           
 11694                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
 11695  0293  084A               	movf	(_filter3+1)^(0+256),w
 11696  0294  0020               	movlb	0	; select bank0
 11697  0295  00A5               	movwf	??_FILTER_IPhase+1
 11698  0296  0022               	movlb	2	; select bank2
 11699  0297  0849               	movf	_filter3^(0+256),w
 11700  0298  0020               	movlb	0	; select bank0
 11701  0299  00A4               	movwf	??_FILTER_IPhase
 11702  029A  3006               	movlw	6
 11703  029B                     u2385:	
 11704  029B  36A5               	lsrf	??_FILTER_IPhase+1,f
 11705  029C  0CA4               	rrf	??_FILTER_IPhase,f
 11706  029D  0B89               	decfsz	9,f
 11707  029E  2A9B               	goto	u2385
 11708  029F  0824               	movf	??_FILTER_IPhase,w
 11709  02A0  0022               	movlb	2	; select bank2
 11710  02A1  00CF               	movwf	_ui16_fir_IPhase_mean^(0+256)
 11711  02A2  0020               	movlb	0	; select bank0
 11712  02A3  0825               	movf	??_FILTER_IPhase+1,w
 11713  02A4  0022               	movlb	2	; select bank2
 11714  02A5  00D0               	movwf	(_ui16_fir_IPhase_mean+1)^(0+256)
 11715                           
 11716                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
 11717  02A6  084F               	movf	_ui16_fir_IPhase_mean^(0+256),w
 11718  02A7  02C9               	subwf	_filter3^(0+256),f
 11719  02A8  0850               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
 11720  02A9  3BCA               	subwfb	(_filter3+1)^(0+256),f
 11721  02AA  0008               	return
 11722  02AB                     __end_of_FILTER_IPhase:	
 11723                           
 11724                           	psect	swtext2
 11725  0300                     __pswtext2:	
 11726  0300                     S10359:	
 11727  0300  3189  29A1         	ljmp	l9421
 11728  0302  3189  29A1         	ljmp	l9421
 11729  0304  3189  29A1         	ljmp	l9421
 11730  0306  3189  29A1         	ljmp	l9421
 11731  0308  3189  29A1         	ljmp	l9421
 11732  030A  3189  29A1         	ljmp	l9421
 11733  030C  3189  29A1         	ljmp	l9421
 11734  030E  3189  29A1         	ljmp	l9421
 11735                           
 11736                           	psect	text31
 11737  013E                     __ptext31:	
 11738 ;; *************** function ___aldiv *****************
 11739 ;; Defined at:
 11740 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  divisor         4    4[BANK0 ] long 
 11743 ;;  dividend        4    8[BANK0 ] long 
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;  quotient        4   14[BANK0 ] long 
 11746 ;;  sign            1   13[BANK0 ] unsigned char 
 11747 ;;  counter         1   12[BANK0 ] unsigned char 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  4    4[BANK0 ] long 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0
 11752 ;; Tracked objects:
 11753 ;;		On entry : 1F/0
 11754 ;;		On exit  : 1F/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11757 ;;      Params:         0       8       0       0       0       0       0       0
 11758 ;;      Locals:         0       6       0       0       0       0       0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0
 11760 ;;      Totals:         0      14       0       0       0       0       0       0
 11761 ;;Total ram usage:       14 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    3
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		_BVH2_Appl_Layer
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           
 11772                           ;psect for function ___aldiv
 11773  013E                     ___aldiv:	
 11774                           
 11775                           ;incstack = 0
 11776                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11777  013E  01AD               	clrf	___aldiv@sign
 11778  013F  1FA7               	btfss	___aldiv@divisor+3,7
 11779  0140  294E               	goto	l1911
 11780  0141  09A4               	comf	___aldiv@divisor,f
 11781  0142  09A5               	comf	___aldiv@divisor+1,f
 11782  0143  09A6               	comf	___aldiv@divisor+2,f
 11783  0144  09A7               	comf	___aldiv@divisor+3,f
 11784  0145  0AA4               	incf	___aldiv@divisor,f
 11785  0146  1903               	skipnz
 11786  0147  0AA5               	incf	___aldiv@divisor+1,f
 11787  0148  1903               	skipnz
 11788  0149  0AA6               	incf	___aldiv@divisor+2,f
 11789  014A  1903               	skipnz
 11790  014B  0AA7               	incf	___aldiv@divisor+3,f
 11791  014C  01AD               	clrf	___aldiv@sign
 11792  014D  0AAD               	incf	___aldiv@sign,f
 11793  014E                     l1911:	
 11794  014E  1FAB               	btfss	___aldiv@dividend+3,7
 11795  014F  295D               	goto	l7627
 11796  0150  09A8               	comf	___aldiv@dividend,f
 11797  0151  09A9               	comf	___aldiv@dividend+1,f
 11798  0152  09AA               	comf	___aldiv@dividend+2,f
 11799  0153  09AB               	comf	___aldiv@dividend+3,f
 11800  0154  0AA8               	incf	___aldiv@dividend,f
 11801  0155  1903               	skipnz
 11802  0156  0AA9               	incf	___aldiv@dividend+1,f
 11803  0157  1903               	skipnz
 11804  0158  0AAA               	incf	___aldiv@dividend+2,f
 11805  0159  1903               	skipnz
 11806  015A  0AAB               	incf	___aldiv@dividend+3,f
 11807  015B  3001               	movlw	1
 11808  015C  06AD               	xorwf	___aldiv@sign,f
 11809  015D                     l7627:	
 11810  015D  01AE               	clrf	___aldiv@quotient
 11811  015E  01AF               	clrf	___aldiv@quotient+1
 11812  015F  01B0               	clrf	___aldiv@quotient+2
 11813  0160  01B1               	clrf	___aldiv@quotient+3
 11814  0161  0827               	movf	___aldiv@divisor+3,w
 11815  0162  0426               	iorwf	___aldiv@divisor+2,w
 11816  0163  0425               	iorwf	___aldiv@divisor+1,w
 11817  0164  0424               	iorwf	___aldiv@divisor,w
 11818  0165  1903               	skipnz
 11819  0166  2993               	goto	l7649
 11820  0167  01AC               	clrf	___aldiv@counter
 11821  0168                     L32:	
 11822  0168  0AAC               	incf	___aldiv@counter,f
 11823  0169  1BA7               	btfsc	___aldiv@divisor+3,7
 11824  016A  2970               	goto	l7637
 11825  016B  35A4               	lslf	___aldiv@divisor,f
 11826  016C  0DA5               	rlf	___aldiv@divisor+1,f
 11827  016D  0DA6               	rlf	___aldiv@divisor+2,f
 11828  016E  0DA7               	rlf	___aldiv@divisor+3,f
 11829  016F  2968               	goto	L32
 11830  0170                     l7637:	
 11831  0170  35AE               	lslf	___aldiv@quotient,f
 11832  0171  0DAF               	rlf	___aldiv@quotient+1,f
 11833  0172  0DB0               	rlf	___aldiv@quotient+2,f
 11834  0173  0DB1               	rlf	___aldiv@quotient+3,f
 11835  0174  0827               	movf	___aldiv@divisor+3,w
 11836  0175  022B               	subwf	___aldiv@dividend+3,w
 11837  0176  1D03               	skipz
 11838  0177  2982               	goto	u5065
 11839  0178  0826               	movf	___aldiv@divisor+2,w
 11840  0179  022A               	subwf	___aldiv@dividend+2,w
 11841  017A  1D03               	skipz
 11842  017B  2982               	goto	u5065
 11843  017C  0825               	movf	___aldiv@divisor+1,w
 11844  017D  0229               	subwf	___aldiv@dividend+1,w
 11845  017E  1D03               	skipz
 11846  017F  2982               	goto	u5065
 11847  0180  0824               	movf	___aldiv@divisor,w
 11848  0181  0228               	subwf	___aldiv@dividend,w
 11849  0182                     u5065:	
 11850  0182  1C03               	skipc
 11851  0183  298D               	goto	l7645
 11852  0184  0824               	movf	___aldiv@divisor,w
 11853  0185  02A8               	subwf	___aldiv@dividend,f
 11854  0186  0825               	movf	___aldiv@divisor+1,w
 11855  0187  3BA9               	subwfb	___aldiv@dividend+1,f
 11856  0188  0826               	movf	___aldiv@divisor+2,w
 11857  0189  3BAA               	subwfb	___aldiv@dividend+2,f
 11858  018A  0827               	movf	___aldiv@divisor+3,w
 11859  018B  3BAB               	subwfb	___aldiv@dividend+3,f
 11860  018C  142E               	bsf	___aldiv@quotient,0
 11861  018D                     l7645:	
 11862  018D  36A7               	lsrf	___aldiv@divisor+3,f
 11863  018E  0CA6               	rrf	___aldiv@divisor+2,f
 11864  018F  0CA5               	rrf	___aldiv@divisor+1,f
 11865  0190  0CA4               	rrf	___aldiv@divisor,f
 11866  0191  0BAC               	decfsz	___aldiv@counter,f
 11867  0192  2970               	goto	l7637
 11868  0193                     l7649:	
 11869  0193  082D               	movf	___aldiv@sign,w
 11870  0194  1903               	btfsc	3,2
 11871  0195  29A1               	goto	l7653
 11872  0196  09AE               	comf	___aldiv@quotient,f
 11873  0197  09AF               	comf	___aldiv@quotient+1,f
 11874  0198  09B0               	comf	___aldiv@quotient+2,f
 11875  0199  09B1               	comf	___aldiv@quotient+3,f
 11876  019A  0AAE               	incf	___aldiv@quotient,f
 11877  019B  1903               	skipnz
 11878  019C  0AAF               	incf	___aldiv@quotient+1,f
 11879  019D  1903               	skipnz
 11880  019E  0AB0               	incf	___aldiv@quotient+2,f
 11881  019F  1903               	skipnz
 11882  01A0  0AB1               	incf	___aldiv@quotient+3,f
 11883  01A1                     l7653:	
 11884  01A1  0831               	movf	___aldiv@quotient+3,w
 11885  01A2  00A7               	movwf	?___aldiv+3
 11886  01A3  0830               	movf	___aldiv@quotient+2,w
 11887  01A4  00A6               	movwf	?___aldiv+2
 11888  01A5  082F               	movf	___aldiv@quotient+1,w
 11889  01A6  00A5               	movwf	?___aldiv+1
 11890  01A7  082E               	movf	___aldiv@quotient,w
 11891  01A8  00A4               	movwf	?___aldiv
 11892  01A9  0008               	return
 11893  01AA                     __end_of___aldiv:	
 11894                           
 11895                           	psect	text34
 11896  00BC                     __ptext34:	
 11897 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 11898 ;; Defined at:
 11899 ;;		line 1721 in file "../T_Link/BVH2_Appl_Layer.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;		None
 11902 ;; Auto vars:     Size  Location     Type
 11903 ;;		None
 11904 ;; Return value:  Size  Location     Type
 11905 ;;                  1    wreg      void 
 11906 ;; Registers used:
 11907 ;;		wreg, status,2, status,0
 11908 ;; Tracked objects:
 11909 ;;		On entry : 1F/1
 11910 ;;		On exit  : 1E/0
 11911 ;;		Unchanged: 0/0
 11912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11913 ;;      Params:         0       0       0       0       0       0       0       0
 11914 ;;      Locals:         0       0       0       0       0       0       0       0
 11915 ;;      Temps:          0       0       0       0       0       0       0       0
 11916 ;;      Totals:         0       0       0       0       0       0       0       0
 11917 ;;Total ram usage:        0 bytes
 11918 ;; Hardware stack levels used:    1
 11919 ;; Hardware stack levels required when called:    3
 11920 ;; This function calls:
 11921 ;;		Nothing
 11922 ;; This function is called by:
 11923 ;;		_BVH2_Appl_Layer
 11924 ;; This function uses a non-reentrant model
 11925 ;;
 11926                           
 11927                           
 11928                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 11929  00BC                     _Cb34_PWM_Detection_node_fcn1:	
 11930                           
 11931                           ;BVH2_Appl_Layer.c: 1723: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 11932                           
 11933                           ;incstack = 0
 11934                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 11935  00BC  0020               	movlb	0	; select bank0
 11936  00BD  084B               	movf	_Cb34_idPWM,w
 11937  00BE  30C8               	movlw	200
 11938  00BF  1903               	btfsc	3,2
 11939  00C0  28C5               	goto	L35
 11940  00C1  024B               	subwf	_Cb34_idPWM,w
 11941  00C2  1C03               	skipc
 11942  00C3  28D5               	goto	l7445
 11943                           
 11944                           ;BVH2_Appl_Layer.c: 1724: if (Cb34_idPWM > 199) {
 11945  00C4  30C8               	movlw	200
 11946  00C5                     L35:	
 11947  00C5  024B               	subwf	_Cb34_idPWM,w
 11948  00C6  1C03               	skipc
 11949  00C7  0008               	return
 11950                           
 11951                           ;BVH2_Appl_Layer.c: 1726: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 11952  00C8  0021               	movlb	1	; select bank1
 11953  00C9  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 11954  00CA  39F0               	andlw	-16
 11955  00CB  3807               	iorlw	7
 11956  00CC  00CA               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 11957                           
 11958                           ;BVH2_Appl_Layer.c: 1727: Cb34_odPumpOff = 0;
 11959  00CD  01C2               	clrf	_Cb34_odPumpOff^(0+128)
 11960                           
 11961                           ;BVH2_Appl_Layer.c: 1728: Cb34_odFixedValueSel = 1;
 11962  00CE  01C3               	clrf	_Cb34_odFixedValueSel^(0+128)
 11963  00CF  0AC3               	incf	_Cb34_odFixedValueSel^(0+128),f
 11964                           
 11965                           ;BVH2_Appl_Layer.c: 1729: Cb34_odFixedLowValueSel = 0;
 11966  00D0  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 11967                           
 11968                           ;BVH2_Appl_Layer.c: 1730: Cb34_oPWM_SC_Alarm = 0;
 11969  00D1  01C5               	clrf	_Cb34_oPWM_SC_Alarm^(0+128)
 11970                           
 11971                           ;BVH2_Appl_Layer.c: 1731: Cb34_oPWM_Alarm = 1;
 11972  00D2  01C6               	clrf	_Cb34_oPWM_Alarm^(0+128)
 11973  00D3  0AC6               	incf	_Cb34_oPWM_Alarm^(0+128),f
 11974                           
 11975                           ;BVH2_Appl_Layer.c: 1732: };BVH2_Appl_Layer.c: 1733: }
 11976  00D4  0008               	return
 11977  00D5                     l7445:	
 11978                           
 11979                           ;BVH2_Appl_Layer.c: 1734: else {;BVH2_Appl_Layer.c: 1737: if ((ui16_PWM_Freq_mat < 36000
      +                          ) || (ui16_PWM_Freq_mat > 44000)) {
 11980  00D5  308C               	movlw	140
 11981  00D6  0022               	movlb	2	; select bank2
 11982  00D7  0236               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 11983  00D8  30A0               	movlw	160
 11984  00D9  1903               	skipnz
 11985  00DA  0235               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 11986  00DB  1C03               	skipc
 11987  00DC  28E4               	goto	l7449
 11988  00DD  30AB               	movlw	171
 11989  00DE  0236               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 11990  00DF  30E1               	movlw	225
 11991  00E0  1903               	skipnz
 11992  00E1  0235               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 11993  00E2  1C03               	skipc
 11994  00E3  28FF               	goto	l7461
 11995  00E4                     l7449:	
 11996                           
 11997                           ;BVH2_Appl_Layer.c: 1739: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 11998  00E4  0021               	movlb	1	; select bank1
 11999  00E5  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12000  00E6  39F0               	andlw	-16
 12001  00E7  3806               	iorlw	6
 12002  00E8  28ED               	goto	L34
 12003  00E9                     l7463:	
 12004                           
 12005                           ;BVH2_Appl_Layer.c: 1749: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 12006  00E9  0021               	movlb	1	; select bank1
 12007  00EA  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12008  00EB  39F0               	andlw	-16
 12009  00EC  3803               	iorlw	3
 12010  00ED                     L34:	
 12011  00ED  00CA               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12012                           
 12013                           ;BVH2_Appl_Layer.c: 1740: Cb34_odPumpOff = 0;
 12014  00EE  01C2               	clrf	_Cb34_odPumpOff^(0+128)
 12015                           
 12016                           ;BVH2_Appl_Layer.c: 1741: Cb34_odFixedValueSel = 1;
 12017  00EF  01C3               	clrf	_Cb34_odFixedValueSel^(0+128)
 12018  00F0  0AC3               	incf	_Cb34_odFixedValueSel^(0+128),f
 12019  00F1  28FA               	goto	l7455
 12020  00F2                     l7477:	
 12021                           
 12022                           ;BVH2_Appl_Layer.c: 1760: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1761: (UInt8)8;
 12023  00F2  0021               	movlb	1	; select bank1
 12024  00F3  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12025  00F4  39F0               	andlw	-16
 12026  00F5  3808               	iorlw	8
 12027  00F6  00CA               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12028                           
 12029                           ;BVH2_Appl_Layer.c: 1762: Cb34_odPumpOff = 1;
 12030  00F7  01C2               	clrf	_Cb34_odPumpOff^(0+128)
 12031  00F8  0AC2               	incf	_Cb34_odPumpOff^(0+128),f
 12032                           
 12033                           ;BVH2_Appl_Layer.c: 1763: Cb34_odFixedValueSel = 0;
 12034  00F9  01C3               	clrf	_Cb34_odFixedValueSel^(0+128)
 12035  00FA                     l7455:	
 12036                           
 12037                           ;BVH2_Appl_Layer.c: 1742: Cb34_odFixedLowValueSel = 0;
 12038  00FA  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12039                           
 12040                           ;BVH2_Appl_Layer.c: 1743: Cb34_oPWM_SC_Alarm = 1;
 12041  00FB  01C5               	clrf	_Cb34_oPWM_SC_Alarm^(0+128)
 12042  00FC  0AC5               	incf	_Cb34_oPWM_SC_Alarm^(0+128),f
 12043  00FD                     l7459:	
 12044                           
 12045                           ;BVH2_Appl_Layer.c: 1744: Cb34_oPWM_Alarm = 0;
 12046  00FD  01C6               	clrf	_Cb34_oPWM_Alarm^(0+128)
 12047                           
 12048                           ;BVH2_Appl_Layer.c: 1745: }
 12049  00FE  0008               	return
 12050  00FF                     l7461:	
 12051                           
 12052                           ;BVH2_Appl_Layer.c: 1746: else {;BVH2_Appl_Layer.c: 1747: if (Cb34_idPWM <= 5) {
 12053  00FF  3006               	movlw	6
 12054  0100  0020               	movlb	0	; select bank0
 12055  0101  024B               	subwf	_Cb34_idPWM,w
 12056  0102  1C03               	btfss	3,0
 12057  0103  28E9               	goto	l7463
 12058                           
 12059                           ;BVH2_Appl_Layer.c: 1756: else {;BVH2_Appl_Layer.c: 1757: if (Cb34_idPWM < 9) {
 12060  0104  3009               	movlw	9
 12061  0105  024B               	subwf	_Cb34_idPWM,w
 12062  0106  1C03               	btfss	3,0
 12063  0107  28F2               	goto	l7477
 12064                           
 12065                           ;BVH2_Appl_Layer.c: 1768: else {;BVH2_Appl_Layer.c: 1769: if (Cb34_idPWM > 191) {
 12066  0108  30C0               	movlw	192
 12067  0109  024B               	subwf	_Cb34_idPWM,w
 12068  010A  1C03               	skipc
 12069  010B  2911               	goto	l7503
 12070                           
 12071                           ;BVH2_Appl_Layer.c: 1772: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1773: (UInt8)4;
 12072  010C  0021               	movlb	1	; select bank1
 12073  010D  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12074  010E  39F0               	andlw	-16
 12075  010F  3804               	iorlw	4
 12076  0110  28ED               	goto	L34
 12077  0111                     l7503:	
 12078                           
 12079                           ;BVH2_Appl_Layer.c: 1780: else {;BVH2_Appl_Layer.c: 1781: if (Cb34_idPWM >= 23) {
 12080  0111  3017               	movlw	23
 12081  0112  024B               	subwf	_Cb34_idPWM,w
 12082  0113  1C03               	skipc
 12083  0114  291F               	goto	l7517
 12084                           
 12085                           ;BVH2_Appl_Layer.c: 1784: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1785: (UInt8)2;
 12086  0115  0021               	movlb	1	; select bank1
 12087  0116  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12088  0117  39F0               	andlw	-16
 12089  0118  3802               	iorlw	2
 12090  0119  00CA               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12091                           
 12092                           ;BVH2_Appl_Layer.c: 1786: Cb34_odPumpOff = 0;
 12093  011A  01C2               	clrf	_Cb34_odPumpOff^(0+128)
 12094                           
 12095                           ;BVH2_Appl_Layer.c: 1787: Cb34_odFixedLowValueSel = 0;
 12096  011B  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12097                           
 12098                           ;BVH2_Appl_Layer.c: 1788: Cb34_odFixedValueSel = 0;
 12099  011C  01C3               	clrf	_Cb34_odFixedValueSel^(0+128)
 12100  011D                     l7513:	
 12101                           
 12102                           ;BVH2_Appl_Layer.c: 1789: Cb34_oPWM_SC_Alarm = 0;
 12103  011D  01C5               	clrf	_Cb34_oPWM_SC_Alarm^(0+128)
 12104  011E  28FD               	goto	l7459
 12105  011F                     l7517:	
 12106                           
 12107                           ;BVH2_Appl_Layer.c: 1792: else {;BVH2_Appl_Layer.c: 1793: if (Cb34_idPWM > 19) {
 12108  011F  3014               	movlw	20
 12109  0120  024B               	subwf	_Cb34_idPWM,w
 12110  0121  1C03               	skipc
 12111  0122  292D               	goto	l7531
 12112                           
 12113                           ;BVH2_Appl_Layer.c: 1796: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1797: (UInt8)5;
 12114  0123  0021               	movlb	1	; select bank1
 12115  0124  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12116  0125  39F0               	andlw	-16
 12117  0126  3805               	iorlw	5
 12118  0127  00CA               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12119                           
 12120                           ;BVH2_Appl_Layer.c: 1798: Cb34_odPumpOff = 0;
 12121  0128  01C2               	clrf	_Cb34_odPumpOff^(0+128)
 12122                           
 12123                           ;BVH2_Appl_Layer.c: 1799: Cb34_odFixedValueSel = 0;
 12124  0129  01C3               	clrf	_Cb34_odFixedValueSel^(0+128)
 12125                           
 12126                           ;BVH2_Appl_Layer.c: 1800: Cb34_odFixedLowValueSel = 1;
 12127  012A  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12128  012B  0AC4               	incf	_Cb34_odFixedLowValueSel^(0+128),f
 12129  012C  291D               	goto	l7513
 12130  012D                     l7531:	
 12131                           
 12132                           ;BVH2_Appl_Layer.c: 1804: else {;BVH2_Appl_Layer.c: 1805: if (Cb34_idPWM <= 19) {
 12133  012D  3014               	movlw	20
 12134  012E  024B               	subwf	_Cb34_idPWM,w
 12135  012F  1803               	skipnc
 12136  0130  0008               	return
 12137                           
 12138                           ;BVH2_Appl_Layer.c: 1808: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t);BVH2_Appl_Layer.c: 1809: (UInt8)1;
 12139  0131  0021               	movlb	1	; select bank1
 12140                           
 12141                           ;BVH2_Appl_Layer.c: 1810: Cb34_odPumpOff = 1;
 12142                           
 12143                           ;BVH2_Appl_Layer.c: 1811: Cb34_odFixedValueSel = 0;
 12144                           
 12145                           ;BVH2_Appl_Layer.c: 1812: Cb34_odFixedLowValueSel = 0;
 12146  0132  2135  3180         	fcall	PL40	;call to abstracted procedure
 12147  0134  291D               	goto	l7513
 12148  0135                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 12149  0135                     PL40:	
 12150  0135  084A               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 12151  0136  39F0               	andlw	-16
 12152  0137  3801               	iorlw	1
 12153  0138  00CA               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 12154  0139  01C2               	clrf	_Cb34_odPumpOff^(0+128)
 12155  013A  0AC2               	incf	_Cb34_odPumpOff^(0+128),f
 12156  013B  01C3               	clrf	_Cb34_odFixedValueSel^(0+128)
 12157  013C  01C4               	clrf	_Cb34_odFixedLowValueSel^(0+128)
 12158  013D  0008               	return
 12159  013E                     __end_ofPL40:	
 12160                           
 12161                           	psect	intentry
 12162  0004                     __pintentry:	
 12163 ;; *************** function _interrupt_handler *****************
 12164 ;; Defined at:
 12165 ;;		line 77 in file "../interrupt.c"
 12166 ;; Parameters:    Size  Location     Type
 12167 ;;		None
 12168 ;; Auto vars:     Size  Location     Type
 12169 ;;		None
 12170 ;; Return value:  Size  Location     Type
 12171 ;;                  1    wreg      void 
 12172 ;; Registers used:
 12173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12174 ;; Tracked objects:
 12175 ;;		On entry : 0/0
 12176 ;;		On exit  : 1F/0
 12177 ;;		Unchanged: 0/0
 12178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12179 ;;      Params:         0       0       0       0       0       0       0       0
 12180 ;;      Locals:         0       0       0       0       0       0       0       0
 12181 ;;      Temps:          0       0       0       0       0       0       0       0
 12182 ;;      Totals:         0       0       0       0       0       0       0       0
 12183 ;;Total ram usage:        0 bytes
 12184 ;; Hardware stack levels used:    1
 12185 ;; Hardware stack levels required when called:    2
 12186 ;; This function calls:
 12187 ;;		_PWM_CTRL
 12188 ;;		_Task1ms
 12189 ;;		_interrrupt_bldc
 12190 ;;		_interrupt_PWMCapture
 12191 ;; This function is called by:
 12192 ;;		Interrupt level 1
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196  0004                     _interrupt_handler:	
 12197                           
 12198                           ;incstack = 0
 12199  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12200                           
 12201                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12202  0005  3180               	pagesel	$
 12203                           
 12204                           ;interrupt.c: 81: if( TMR1IF )
 12205  0006  0020               	movlb	0	; select bank0
 12206  0007  1811               	btfsc	17,0	;volatile
 12207                           
 12208                           ;interrupt.c: 83: {;interrupt.c: 85: TMR1IF = 0;
 12209  0008  1011               	bcf	17,0	;volatile
 12210                           
 12211                           ;interrupt.c: 87: };interrupt.c: 90: if( TMR4IF )
 12212  0009  1C93               	btfss	19,1	;volatile
 12213  000A  2812               	goto	i1l10069
 12214                           
 12215                           ;interrupt.c: 92: {;interrupt.c: 94: TMR4IF = 0;
 12216  000B  1093               	bcf	19,1	;volatile
 12217                           
 12218                           ;interrupt.c: 96: PWM_CTRL( );
 12219  000C  3182  22E7  3180   	fcall	_PWM_CTRL
 12220                           
 12221                           ;interrupt.c: 98: Task1ms( );
 12222  000F  3183  2316  3180   	fcall	_Task1ms
 12223  0012                     i1l10069:	
 12224                           
 12225                           ;interrupt.c: 100: };interrupt.c: 106: if( TMR2IF )
 12226  0012  0020               	movlb	0	; select bank0
 12227  0013  1C91               	btfss	17,1	;volatile
 12228  0014  2819               	goto	i1l10075
 12229                           
 12230                           ;interrupt.c: 108: {;interrupt.c: 110: TMR2IF = 0;
 12231  0015  1091               	bcf	17,1	;volatile
 12232                           
 12233                           ;interrupt.c: 112: interrrupt_bldc( );
 12234  0016  3193  23EA  3180   	fcall	_interrrupt_bldc
 12235  0019                     i1l10075:	
 12236                           
 12237                           ;interrupt.c: 114: };interrupt.c: 117: if( TMR6IF )
 12238  0019  0020               	movlb	0	; select bank0
 12239  001A  1993               	btfsc	19,3	;volatile
 12240                           
 12241                           ;interrupt.c: 119: {;interrupt.c: 121: TMR6IF = 0;
 12242  001B  1193               	bcf	19,3	;volatile
 12243                           
 12244                           ;interrupt.c: 131: };interrupt.c: 134: if( CCP5IF )
 12245  001C  1F13               	btfss	19,6	;volatile
 12246  001D  2821               	goto	i1l10083
 12247                           
 12248                           ;interrupt.c: 136: {;interrupt.c: 138: CCP5IF = 0;
 12249  001E  1313               	bcf	19,6	;volatile
 12250                           
 12251                           ;interrupt.c: 140: interrupt_PWMCapture( );
 12252  001F  3181  21AA         	fcall	_interrupt_PWMCapture
 12253  0021                     i1l10083:	
 12254                           
 12255                           ;interrupt.c: 142: };interrupt.c: 145: if( CCP2IF )
 12256  0021  0020               	movlb	0	; select bank0
 12257  0022  1812               	btfsc	18,0	;volatile
 12258                           
 12259                           ;interrupt.c: 147: {;interrupt.c: 149: CCP2IF = 0;
 12260  0023  1012               	bcf	18,0	;volatile
 12261  0024  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12262  0025  0009               	retfie
 12263  0026                     __end_of_interrupt_handler:	
 12264                           
 12265                           	psect	text37
 12266  01AA                     __ptext37:	
 12267 ;; *************** function _interrupt_PWMCapture *****************
 12268 ;; Defined at:
 12269 ;;		line 458 in file "../pwm.c"
 12270 ;; Parameters:    Size  Location     Type
 12271 ;;		None
 12272 ;; Auto vars:     Size  Location     Type
 12273 ;;		None
 12274 ;; Return value:  Size  Location     Type
 12275 ;;                  1    wreg      void 
 12276 ;; Registers used:
 12277 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12278 ;; Tracked objects:
 12279 ;;		On entry : 1F/0
 12280 ;;		On exit  : 18/0
 12281 ;;		Unchanged: 0/0
 12282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12283 ;;      Params:         0       0       0       0       0       0       0       0
 12284 ;;      Locals:         0       0       0       0       0       0       0       0
 12285 ;;      Temps:          0       0       0       0       0       0       0       0
 12286 ;;      Totals:         0       0       0       0       0       0       0       0
 12287 ;;Total ram usage:        0 bytes
 12288 ;; Hardware stack levels used:    1
 12289 ;; This function calls:
 12290 ;;		Nothing
 12291 ;; This function is called by:
 12292 ;;		_interrupt_handler
 12293 ;; This function uses a non-reentrant model
 12294 ;;
 12295                           
 12296                           
 12297                           ;psect for function _interrupt_PWMCapture
 12298  01AA                     _interrupt_PWMCapture:	
 12299                           
 12300                           ;pwm.c: 470: switch( ui8_Pulse_State )
 12301                           
 12302                           ;incstack = 0
 12303                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
 12304  01AA  29EC               	goto	i1l6305
 12305  01AB                     i1l1176:	
 12306                           ;pwm.c: 472: {;pwm.c: 474: case 0:
 12307                           
 12308                           
 12309                           ;pwm.c: 476: {;pwm.c: 480: ui8_Pulse_State = 1;
 12310                           
 12311                           ;pwm.c: 481: ui16_Capt_Val0.b.lo = CCPR5L;
 12312  01AB  21F9  3181         	fcall	PL68	;call to abstracted procedure
 12313  01AD  00A8               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 12314                           
 12315                           ;pwm.c: 482: ui16_Capt_Val0.b.hi = CCPR5H;
 12316  01AE  0026               	movlb	6	; select bank6
 12317  01AF  081D               	movf	29,w	;volatile
 12318  01B0  0021               	movlb	1	; select bank1
 12319  01B1  00A9               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
 12320                           
 12321                           ;pwm.c: 483: CCP5CON = 0x04;
 12322                           
 12323                           ;pwm.c: 484: break;
 12324  01B2  2A03               	ljmp	PL84	;call to abstracted procedure
 12325  01B3                     i1l6293:	
 12326                           
 12327                           ;pwm.c: 492: {;pwm.c: 496: ui8_Pulse_State = 2;
 12328  01B3  3002               	movlw	2
 12329  01B4  00D0               	movwf	_ui8_Pulse_State^(0+128)
 12330                           
 12331                           ;pwm.c: 497: ui16_Capt_Val1.b.lo = CCPR5L;
 12332  01B5  0026               	movlb	6	; select bank6
 12333  01B6  081C               	movf	28,w	;volatile
 12334  01B7  0021               	movlb	1	; select bank1
 12335  01B8  00A6               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
 12336                           
 12337                           ;pwm.c: 498: ui16_Capt_Val1.b.hi = CCPR5H;
 12338  01B9  0026               	movlb	6	; select bank6
 12339  01BA  081D               	movf	29,w	;volatile
 12340  01BB  0021               	movlb	1	; select bank1
 12341  01BC  00A7               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
 12342                           
 12343                           ;pwm.c: 499: CCP5CON = 0x05;
 12344                           
 12345                           ;pwm.c: 500: break;
 12346  01BD  29FF               	ljmp	PL78	;call to abstracted procedure
 12347  01BE                     i1l1179:	
 12348                           ;pwm.c: 503: };pwm.c: 506: case 2:
 12349                           
 12350                           
 12351                           ;pwm.c: 508: {;pwm.c: 512: ui8_Pulse_State = 1;
 12352                           
 12353                           ;pwm.c: 513: ui16_Capt_Val2.b.lo = CCPR5L;
 12354  01BE  21F9  3181         	fcall	PL68	;call to abstracted procedure
 12355  01C0  00A4               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
 12356                           
 12357                           ;pwm.c: 514: ui16_Capt_Val2.b.hi = CCPR5H;
 12358  01C1  0026               	movlb	6	; select bank6
 12359  01C2  081D               	movf	29,w	;volatile
 12360  01C3  0021               	movlb	1	; select bank1
 12361  01C4  00A5               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
 12362                           
 12363                           ;pwm.c: 515: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
 12364  01C5  0825               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 12365  01C6  0022               	movlb	2	; select bank2
 12366  01C7  00B4               	movwf	(_ui16_PWM_Freq_In+1)^(0+256)
 12367  01C8  0021               	movlb	1	; select bank1
 12368  01C9  0824               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 12369  01CA  0022               	movlb	2	; select bank2
 12370  01CB  00B3               	movwf	_ui16_PWM_Freq_In^(0+256)
 12371  01CC  0021               	movlb	1	; select bank1
 12372  01CD  0828               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
 12373  01CE  0022               	movlb	2	; select bank2
 12374  01CF  02B3               	subwf	_ui16_PWM_Freq_In^(0+256),f
 12375  01D0  0021               	movlb	1	; select bank1
 12376  01D1  0829               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 12377  01D2  0022               	movlb	2	; select bank2
 12378  01D3  3BB4               	subwfb	(_ui16_PWM_Freq_In+1)^(0+256),f
 12379                           
 12380                           ;pwm.c: 516: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
 12381  01D4  0021               	movlb	1	; select bank1
 12382  01D5  0827               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
 12383  01D6  0022               	movlb	2	; select bank2
 12384  01D7  00DF               	movwf	(_ui16_Duty_Cycle_In+1)^(0+256)
 12385  01D8  0021               	movlb	1	; select bank1
 12386  01D9  0826               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
 12387  01DA  0022               	movlb	2	; select bank2
 12388  01DB  00DE               	movwf	_ui16_Duty_Cycle_In^(0+256)
 12389  01DC  0021               	movlb	1	; select bank1
 12390  01DD  0828               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
 12391  01DE  0022               	movlb	2	; select bank2
 12392  01DF  02DE               	subwf	_ui16_Duty_Cycle_In^(0+256),f
 12393  01E0  0021               	movlb	1	; select bank1
 12394  01E1  0829               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
 12395  01E2  0022               	movlb	2	; select bank2
 12396  01E3  3BDF               	subwfb	(_ui16_Duty_Cycle_In+1)^(0+256),f
 12397                           
 12398                           ;pwm.c: 517: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
 12399  01E4  0021               	movlb	1	; select bank1
 12400  01E5  0825               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
 12401  01E6  00A9               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
 12402  01E7  0824               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
 12403  01E8  00A8               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
 12404                           
 12405                           ;pwm.c: 518: CCP5CON = 0x04;
 12406  01E9  2A03               	ljmp	PL84	;call to abstracted procedure
 12407  01EA                     i1l6301:	
 12408                           
 12409                           ;pwm.c: 546: {;pwm.c: 550: ui8_Pulse_State = 0;
 12410  01EA  01D0               	clrf	_ui8_Pulse_State^(0+128)
 12411                           
 12412                           ;pwm.c: 551: break;
 12413  01EB  0008               	return
 12414  01EC                     i1l6305:	
 12415  01EC  0021               	movlb	1	; select bank1
 12416  01ED  0850               	movf	_ui8_Pulse_State^(0+128),w
 12417                           
 12418                           ; Switch size 1, requested type "space"
 12419                           ; Number of cases is 3, Range of values is 0 to 2
 12420                           ; switch strategies available:
 12421                           ; Name         Instructions Cycles
 12422                           ; simple_byte           10     6 (average)
 12423                           ; direct_byte           12     6 (fixed)
 12424                           ; jumptable            260     6 (fixed)
 12425                           ;	Chosen strategy is simple_byte
 12426  01EE  3A00               	xorlw	0	; case 0
 12427  01EF  1903               	skipnz
 12428  01F0  29AB               	goto	i1l1176
 12429  01F1  3A01               	xorlw	1	; case 1
 12430  01F2  1903               	skipnz
 12431  01F3  29B3               	goto	i1l6293
 12432  01F4  3A03               	xorlw	3	; case 2
 12433  01F5  1903               	skipnz
 12434  01F6  29BE               	goto	i1l1179
 12435  01F7  29EA               	goto	i1l6301
 12436  01F8  0008               	return
 12437  01F9                     __end_of_interrupt_PWMCapture:	
 12438  01F9                     PL68:	
 12439  01F9  01D0               	clrf	_ui8_Pulse_State^(0+128)
 12440  01FA  0AD0               	incf	_ui8_Pulse_State^(0+128),f
 12441  01FB  0026               	movlb	6	; select bank6
 12442  01FC  081C               	movf	28,w	;volatile
 12443  01FD  0021               	movlb	1	; select bank1
 12444  01FE  0008               	return
 12445  01FF                     __end_ofPL68:	
 12446  01FF                     PL78:	
 12447  01FF  3005               	movlw	5
 12448  0200  0026               	movlb	6	; select bank6
 12449  0201  009E               	movwf	30	;volatile
 12450  0202  0008               	return
 12451  0203                     __end_ofPL78:	
 12452  0203                     PL84:	
 12453  0203  3004               	movlw	4
 12454  0204  0026               	movlb	6	; select bank6
 12455  0205  009E               	movwf	30	;volatile
 12456  0206  0008               	return
 12457  0207                     __end_ofPL84:	
 12458                           
 12459                           	psect	swtext3
 12460  02BF                     __pswtext3:	
 12461  02BF                     i1S10361:	
 12462  02BF  3194  2C1A         	ljmp	i1l9089
 12463  02C1  3194  2C31         	ljmp	i1l9101
 12464  02C3  3194  2C4B         	ljmp	i1l9141
 12465  02C5  3194  2C7A         	ljmp	i1l9179
 12466  02C7  3194  2C2E         	ljmp	i1l9099
 12467  02C9  3194  2C2E         	ljmp	i1l9099
 12468  02CB  3194  2C2E         	ljmp	i1l9099
 12469  02CD  3194  2C8E         	ljmp	i1l284
 12470  02CF  3194  2C94         	ljmp	i1l9213
 12471  02D1  3195  2D23         	ljmp	i1l267
 12472                           
 12473                           	psect	swtext4
 12474  02D3                     __pswtext4:	
 12475  02D3                     i1S10365:	
 12476  02D3  3195  2DFA         	ljmp	i1l5721
 12477  02D5  3195  2DFC         	ljmp	i1l5723
 12478  02D7  3195  2DFF         	ljmp	i1l5725
 12479  02D9  3196  2E01         	ljmp	i1l5727
 12480  02DB  3196  2E03         	ljmp	i1l5729
 12481  02DD  3196  2E05         	ljmp	i1l5731
 12482  02DF  3196  2E05         	ljmp	i1l5731
 12483  02E1  3196  2E05         	ljmp	i1l5731
 12484  02E3  3196  2E05         	ljmp	i1l5731
 12485  02E5  3196  2E05         	ljmp	i1l5731
 12486                           
 12487                           	psect	text43
 12488  0247                     __ptext43:	
 12489 ;; *************** function ___lwdiv *****************
 12490 ;; Defined at:
 12491 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
 12492 ;; Parameters:    Size  Location     Type
 12493 ;;  divisor         2    0[COMMON] unsigned int 
 12494 ;;  dividend        2    2[COMMON] unsigned int 
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;  quotient        2    4[COMMON] unsigned int 
 12497 ;;  counter         1    6[COMMON] unsigned char 
 12498 ;; Return value:  Size  Location     Type
 12499 ;;                  2    0[COMMON] unsigned int 
 12500 ;; Registers used:
 12501 ;;		wreg, status,2, status,0
 12502 ;; Tracked objects:
 12503 ;;		On entry : 1F/0
 12504 ;;		On exit  : 1F/0
 12505 ;;		Unchanged: 1F/0
 12506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12507 ;;      Params:         4       0       0       0       0       0       0       0
 12508 ;;      Locals:         3       0       0       0       0       0       0       0
 12509 ;;      Temps:          0       0       0       0       0       0       0       0
 12510 ;;      Totals:         7       0       0       0       0       0       0       0
 12511 ;;Total ram usage:        7 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; This function calls:
 12514 ;;		Nothing
 12515 ;; This function is called by:
 12516 ;;		_interrrupt_bldc
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           
 12521                           ;psect for function ___lwdiv
 12522  0247                     ___lwdiv:	
 12523                           
 12524                           ;incstack = 0
 12525                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12526  0247  01F4               	clrf	___lwdiv@quotient
 12527  0248  01F5               	clrf	___lwdiv@quotient+1
 12528  0249  0870               	movf	___lwdiv@divisor,w
 12529  024A  0471               	iorwf	___lwdiv@divisor+1,w
 12530  024B  1903               	btfsc	3,2
 12531  024C  2A67               	goto	i1l7705
 12532  024D  01F6               	clrf	___lwdiv@counter
 12533  024E                     L54:	
 12534  024E  0AF6               	incf	___lwdiv@counter,f
 12535  024F  1BF1               	btfsc	___lwdiv@divisor+1,7
 12536  0250  2A54               	goto	i1l7693
 12537  0251  35F0               	lslf	___lwdiv@divisor,f
 12538  0252  0DF1               	rlf	___lwdiv@divisor+1,f
 12539  0253  2A4E               	goto	L54
 12540  0254                     i1l7693:	
 12541  0254  35F4               	lslf	___lwdiv@quotient,f
 12542  0255  0DF5               	rlf	___lwdiv@quotient+1,f
 12543  0256  0871               	movf	___lwdiv@divisor+1,w
 12544  0257  0273               	subwf	___lwdiv@dividend+1,w
 12545  0258  1D03               	skipz
 12546  0259  2A5C               	goto	u515_25
 12547  025A  0870               	movf	___lwdiv@divisor,w
 12548  025B  0272               	subwf	___lwdiv@dividend,w
 12549  025C                     u515_25:	
 12550  025C  1C03               	skipc
 12551  025D  2A63               	goto	i1l7701
 12552  025E  0870               	movf	___lwdiv@divisor,w
 12553  025F  02F2               	subwf	___lwdiv@dividend,f
 12554  0260  0871               	movf	___lwdiv@divisor+1,w
 12555  0261  3BF3               	subwfb	___lwdiv@dividend+1,f
 12556  0262  1474               	bsf	___lwdiv@quotient,0
 12557  0263                     i1l7701:	
 12558  0263  36F1               	lsrf	___lwdiv@divisor+1,f
 12559  0264  0CF0               	rrf	___lwdiv@divisor,f
 12560  0265  0BF6               	decfsz	___lwdiv@counter,f
 12561  0266  2A54               	goto	i1l7693
 12562  0267                     i1l7705:	
 12563  0267  0875               	movf	___lwdiv@quotient+1,w
 12564  0268  00F1               	movwf	?___lwdiv+1
 12565  0269  0874               	movf	___lwdiv@quotient,w
 12566  026A  00F0               	movwf	?___lwdiv
 12567  026B  0008               	return
 12568  026C                     __end_of___lwdiv:	
 12569                           
 12570                           	psect	text45
 12571  0316                     __ptext45:	
 12572 ;; *************** function _Task1ms *****************
 12573 ;; Defined at:
 12574 ;;		line 52 in file "../interrupt.c"
 12575 ;; Parameters:    Size  Location     Type
 12576 ;;		None
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;		None
 12579 ;; Return value:  Size  Location     Type
 12580 ;;                  1    wreg      void 
 12581 ;; Registers used:
 12582 ;;		status,2, status,0
 12583 ;; Tracked objects:
 12584 ;;		On entry : 1C/0
 12585 ;;		On exit  : 1F/1
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12588 ;;      Params:         0       0       0       0       0       0       0       0
 12589 ;;      Locals:         0       0       0       0       0       0       0       0
 12590 ;;      Temps:          0       0       0       0       0       0       0       0
 12591 ;;      Totals:         0       0       0       0       0       0       0       0
 12592 ;;Total ram usage:        0 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; This function calls:
 12595 ;;		Nothing
 12596 ;; This function is called by:
 12597 ;;		_interrupt_handler
 12598 ;; This function uses a non-reentrant model
 12599 ;;
 12600                           
 12601                           
 12602                           ;psect for function _Task1ms
 12603  0316                     _Task1ms:	
 12604                           
 12605                           ;interrupt.c: 56: ui8_Task_Cont1ms++;
 12606                           
 12607                           ;incstack = 0
 12608                           ; Regs used in _Task1ms: [status]
 12609  0316  0021               	movlb	1	; select bank1
 12610  0317  0AE0               	incf	_ui8_Task_Cont1ms^(0+128),f
 12611  0318  0008               	return
 12612  0319                     __end_of_Task1ms:	
 12613                           
 12614                           	psect	text46
 12615  02E7                     __ptext46:	
 12616 ;; *************** function _PWM_CTRL *****************
 12617 ;; Defined at:
 12618 ;;		line 200 in file "../pwm.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;		None
 12621 ;; Auto vars:     Size  Location     Type
 12622 ;;		None
 12623 ;; Return value:  Size  Location     Type
 12624 ;;                  1    wreg      void 
 12625 ;; Registers used:
 12626 ;;		wreg, status,2, status,0
 12627 ;; Tracked objects:
 12628 ;;		On entry : 1F/0
 12629 ;;		On exit  : 1C/0
 12630 ;;		Unchanged: 0/0
 12631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12632 ;;      Params:         0       0       0       0       0       0       0       0
 12633 ;;      Locals:         0       0       0       0       0       0       0       0
 12634 ;;      Temps:          0       0       0       0       0       0       0       0
 12635 ;;      Totals:         0       0       0       0       0       0       0       0
 12636 ;;Total ram usage:        0 bytes
 12637 ;; Hardware stack levels used:    1
 12638 ;; This function calls:
 12639 ;;		Nothing
 12640 ;; This function is called by:
 12641 ;;		_interrupt_handler
 12642 ;; This function uses a non-reentrant model
 12643 ;;
 12644                           
 12645                           
 12646                           ;psect for function _PWM_CTRL
 12647  02E7                     _PWM_CTRL:	
 12648                           
 12649                           ;pwm.c: 290: ui8_PWM_FreqCnt++;
 12650                           
 12651                           ;incstack = 0
 12652                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 12653  02E7  0021               	movlb	1	; select bank1
 12654  02E8  3064               	movlw	100
 12655  02E9  0AD2               	incf	_ui8_PWM_FreqCnt^(0+128),f
 12656                           
 12657                           ;pwm.c: 292: if( ui8_PWM_FreqCnt >= 100 )
 12658  02EA  0252               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 12659  02EB  1C03               	skipc
 12660  02EC  2AF1               	goto	i1l6285
 12661                           
 12662                           ;pwm.c: 294: {;pwm.c: 296: ui8_PWM_FreqCnt = 0;
 12663  02ED  01D2               	clrf	_ui8_PWM_FreqCnt^(0+128)
 12664                           
 12665                           ;pwm.c: 297: LATC0 = 0;
 12666  02EE  0022               	movlb	2	; select bank2
 12667  02EF  100E               	bcf	14,0	;volatile
 12668                           
 12669                           ;pwm.c: 300: }
 12670  02F0  0008               	return
 12671  02F1                     i1l6285:	
 12672                           
 12673                           ;pwm.c: 303: else;pwm.c: 304: {;pwm.c: 306: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 12674  02F1  0851               	movf	_ui8_PWMoutvalue^(0+128),w
 12675  02F2  0252               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 12676  02F3  1C03               	skipc
 12677  02F4  0008               	return
 12678                           
 12679                           ;pwm.c: 308: {;pwm.c: 310: LATC0 = 1;
 12680  02F5  0022               	movlb	2	; select bank2
 12681  02F6  140E               	bsf	14,0	;volatile
 12682  02F7  0008               	return
 12683  02F8                     __end_of_PWM_CTRL:	
 12684  007E                     btemp	set	126	;btemp
 12685  007E                     int$flags	set	126
 12686  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    202
    Data        12
    BSS         204
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      52
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80     30      68
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrupt_handler->_interrrupt_bldc
    _interrrupt_bldc->i1_commutate

Critical Paths under _main in BANK0

    _main->_BVH2_Appl_Layer
    _timer_init->_clear_timer
    _InitMotorRun->_commutate
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    ___awdiv->___wmul
    _SetDiagAlarm->_PWM_Write_Out
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _Get_Analog_Value->_FILTER_Ubat
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4422
                                             24 BANK0      4     4      0
                    _BVH2_Appl_Layer
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                          _PWMReadDC
                       _SetDiagAlarm
                            ___awdiv
                             ___wmul
                        _clear_timer
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0     181
                           _ADC_Init
                           _DiagInit
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                              5 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            0     0      0       0
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0       0
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0       0
                                              4 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    1     1      0      69
                                              7 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     2     2      0      45
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          0     0      0      24
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             3     1      2      24
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     452
                                             10 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      22
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWMReadDC                                            0     0      0     296
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     244
                                              4 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ltdiv                                             10     4      6      52
                                             13 BANK0     10     4      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                              4 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     38    38      0    3009
                                             18 BANK0      6     6      0
                                              0 BANK3     30    30      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     440
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupt_handler                                    0     0      0     573
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (6) _interrupt_PWMCapture                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _interrrupt_bldc                                      6     6      0     573
                                             12 COMMON     2     2      0
                                              0 BANK0      4     4      0
                           _BLDCWait
                            ___lwdiv
                         i1_ADC_Read
                         i1_ADC_Wait
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (7) i1_commutate                                         12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4      56
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_ADC_Read                                           3     1      2      24
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     439
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (7) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Task1ms                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PWM_CTRL                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
   _InitMotorStop
   _PWMReadDC
     ___ltdiv
       ___tmul (ARG)
     ___tmul
   _SetDiagAlarm
     _PWM_Write_Out
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _clear_timer
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     _init_bldc
       _InitMotorRun
         _commutate
     _init_ports
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     ___lwdiv
     i1_ADC_Read
     i1_ADC_Wait
     i1___wmul
     i1_commutate
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     126       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      34       6       65.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     1E      44      12       85.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     126      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Jul 31 15:14:36 2020

                          ?_PWM_Capture_init 0070                                            _B 01A0  
                                          pc 0002                                           PL2 16DD  
                                         PL4 16F8                                           PL6 0F51  
                                         PL8 0F5E                                           l69 1172  
                                         _RD 0CA8                                 ___awdiv@sign 002F  
                         ??_PWM_Capture_init 0024                          ___wmul@multiplicand 0026  
                           i1___wmul@product 0074                     _SIBFS_Pic_etat_monitor_b 00C9  
           BVH2_Appl_Layer@X_Sb4_Intergrator 0162                          __end_of_system_init 1056  
                                        PL10 0F67                                          PL20 1755  
                                        PL12 1710                                          PL30 0F7A  
                                        PL22 1766                                          PL14 1721  
                                        PL40 0135                                          PL32 0F89  
                                        PL24 1776                                          PL16 1732  
                                        PL50 0FA7                                          PL42 17B5  
                                        PL34 17A0                                          PL26 1786  
                                        PL18 1744                                          PL60 17CE  
                                        PL52 17C1                                          PL44 0F96  
                                        PL36 17A9                                          PL28 1796  
                                        PL70 17E1                                          PL62 17D5  
                                        PL54 0FF9                                          PL46 0F9F  
                                        PL38 17AF                                          PL80 0FB8  
                                        PL72 17E7                                          PL64 17DB  
                                        PL56 17C7                                          PL48 17BB  
                                        PL90 17FB                                          PL82 17F1  
                                        PL74 17EC                                          PL66 12C9  
                                        PL58 0FAD                                          PL84 0203  
                                        PL76 0FB4                                          PL68 01F9  
                                        PL86 17F6                                          PL78 01FF  
                                        PL88 0FBD  BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00BA  
                                ?i1_ADC_Read 0070                                          l327 1355  
                                        l520 120A                                          l345 1383  
                                        l522 120F                                  ?i1_ADC_Wait 0070  
                                        _GIE 005F                                          _RA4 0064  
                                        _PR2 001B                             _ui16_IPhase_bldc 0044  
                               __CFG_BORV$LO 0000                                          wreg 0009  
                          _ui16_IPhase1_bldc 0157                            _ui16_IPhase2_bldc 013B  
                          _ui16_IPhase3_bldc 0139                    BVH2_Appl_Layer@Cb24_Reset 01D7  
                               __CFG_LVP$OFF 0000                      __end_of_interrrupt_bldc 1579  
                                       _C1IE 0495                                         l1400 0A0F  
                                       l1153 11DF                                         l1402 0A23  
                                       l1405 0A30                                         l1502 0C8C  
                                       l1414 0AC2                                         l1520 0CB5  
                                       l1521 0CB0                                         l1433 0A9D  
                                       l1522 0CB3                                         l1507 0C6A  
                                       l1371 09B3                                         l1516 0CA5  
                                       l1444 0B0D                                         l1525 0CCF  
                                       l1550 0D2B                                         l1438 0BE2  
                                       l1535 0CFC                                         l1519 0CDA  
                                       l1544 0D22                                         l1392 09EA  
                                       l1384 09E4                                         l1368 0979  
                                       l1385 09D1                                         l1642 0FDF  
                                       l1538 0D10                                         l5011 13AD  
                                       l1644 0FE1                                         l1636 0FC7  
                                       l1396 0A0A                                         l1388 09DD  
                                       l1732 0F50                                         l1645 0FE3  
                                       l1637 0FD7                                         l1581 0E34  
                                       l1485 0BF6                                         l1709 1093  
                                       l1646 0FF7                                         l1638 0FC9  
                                       l1639 0FCB                                         l1911 014E  
                                       l1479 0BAD                                         l1593 0EAA  
                                       l5041 13C0                                         l5017 13B5  
                                       l5121 123D                                         l1851 0EFA  
                                       l5035 13B8                                         l1845 00A2  
                                       l5117 117B                                         l5065 13CC  
                                       l5219 026C                                         l5411 11CD  
                                       l5403 11C1                                         l5059 13C4  
                                       l5171 0F37                                         l7101 0236  
                                       l5173 0F39                                         l6231 1205  
                                       l6223 11FB                                         l5079 13D2  
                                       l5087 13D5                                         l5175 0F3C  
                                       l5167 0F32                                         l7105 023A  
                                       l5281 10FC                                         l5273 10DE  
                                       l5089 13E9                                         l5169 0F34  
                                       l5361 1070                                         l5345 1059  
                                       l6227 1200                                         l6219 11F5  
                                       l5291 111E                                         l5283 1100  
                                       l5275 10E2                                         l5179 0F3F  
                                       l5355 1067                                         l5613 00AA  
                                       l7109 0242                                         l5189 10AD  
                                       l4901 1344                                         l5349 105E  
                                       l6239 1213                                         l4911 135B  
                                       l5367 1079                                         l5375 1082  
                                       l5289 111A                                         l4913 1368  
                                       l4905 134E                                         l7083 021A  
                                       l5395 11B5                                         l5387 11A9  
                                       l5379 119D                                         l4931 137B  
                                       l4843 12CF                                         l9013 0932  
                                       l7093 0227                                         l7077 0211  
                                       l7503 0111                                         l4943 138A  
                                       l4847 12DA                                         l7513 011D  
                                       l7425 0EF0                                         l9017 0938  
                                       l4937 1381                                         l4881 132B  
                                       l7531 012D                                         l4883 132D  
                                       l4875 1322                                         l7517 011F  
                                       l7461 00FF                                         l7445 00D5  
                                       l9045 0093                                         l9037 007D  
                                       l4973 139D                                         l4949 1392  
                                       l4885 132F                                         l4877 1326  
                                       l7463 00E9                                         l7455 00FA  
                                       l4991 13A2                                         l4967 1395  
                                       l4887 1331                                         l4879 1328  
                                       l7449 00E4                                         l7609 0F04  
                                       l9401 0975                                         l9049 0098  
                                       l7459 00FD                                         l7555 0FE5  
                                       l7627 015D                                         l4987 139F  
                                       l4899 1336                                         l7573 0ECD  
                                       l7477 00F2                                         l7557 0FEF  
                                       l7549 0FCD                                         l7653 01A1  
                                       l7645 018D                                         l7637 0170  
                                       l9421 09A1                                         l9413 0984  
                                       l9333 005C                                         l4997 13AA  
                                       l7575 0ED1                                         l9415 0999  
                                       l9327 0056                                         l7577 0ECB  
                                       l7649 0193                                         l9521 0A37  
                                       l9361 0958                                         l9353 0946  
                                       l9531 0A43                                         l9523 0A39  
                                       l9611 0AA9                                         l9443 09B8  
                                       l9371 096A                                         l9363 095F  
                                       l9347 006A                                         _ADON 04E8  
                                       l9541 0A56                                         l9533 0A46  
                                       l9703 0B5B                                         l9551 0A65  
                                       l9543 0A5A                                         l9535 0A4E  
                                       l9455 09BD                                         l9439 09A5  
                                       l9359 0954                                         l9721 0B83  
                                       l9625 0AD9                                         l9561 0A7B  
                                       l9553 0A68                                         l9465 09CE  
                                       l9369 0967                                         l9707 0B6A  
                                       l9635 0AF0                                         l9651 0AF7  
                                       l9571 0A89                                         l9387 096F  
                                       l9813 0C34                                         l9805 0C1F  
                                       l9725 0B90                                         l9637 0AF3  
                                       l9549 0A61                                         l9735 0B96  
                                       l9663 0B1C                                         l9655 0B0F  
                                       l9559 0A77                                         l9921 0D07  
                                       l9905 0CE8                                         l9809 0C29  
                                       l9753 0BB3                                         l9593 0A95  
                                       l9489 09F6                                         _CFGS 0CAE  
                                       l9915 0CFA                                         l9843 0C77  
                                       l9835 0C6E                                         l9747 0BA4  
                                       l9675 0B28                                         l9659 0B16  
                                       l9499 0A08                                         l9853 0C91  
                                       l9749 0BAA                                         l9951 0D30  
                                       l9935 0D18                                         l9927 0D0E  
                                       l9847 0C85                                         l9687 0B41  
                                       l9679 0B36                                         l9791 0C05  
                                       l9857 0C93                                         l9697 0B4E  
                                       l9769 0BCB                                         l9971 0D4B  
                                       l9955 0D33                                         l9885 0CC8  
                                       l9799 0C11                                         l9985 0D62  
                                       l9995 0D70                                         _LATA 010C  
                                       _LATB 010D                                         _LATC 010E  
                                       _PIE1 0091                                         _PIE2 0092  
                                       u2385 029B                                         _PIE3 0093  
                                       u2395 0278                                         u5065 0182  
                                       _PEIE 005E                                         u4675 022F  
                                       i1l69 1593                                         u7381 09B7  
                                       u7720 0AE2                                         u8505 0DC3  
                                       u7730 0AE3                                         u8515 0DDC  
                                       u8525 0DE7                                         u8535 0E2A  
                                       u6955 008A                                         _TMR0 0015  
                                       _TMR2 001A                                         _TMR4 0415  
                                       _TMR6 041C                                         _Bcnt 00E5  
                           _ui8_Task_Cont1ms 00E0                             _ui8_Task_Cont3ms 00D6  
                           _ui8_Task_Cont5ms 00D5                             _ui16_PWM_Freq_In 0133  
                 BVH2_Appl_Layer@Cb24_BadCnt 0123                                         _main 0846  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       fsr1l 0006                                         btemp 007E  
                        timer_init@ui8_TmrNb 0025                             __end_of_ADC_Init 109E  
                           __end_of_ADC_Read 1181                             __end_of_ADC_Wait 1170  
                                       start 0026                              _ui8_sampleState 00E7  
                           __end_of_BLDCWait 16DD                       __size_of_PWM_Write_Out 0005  
                         _ui16_comm_time_max 013F                                        S10357 02AB  
                                      S10359 0300                                  i1_commutate 15B5  
                              ?_InitMotorRun 0070                              __end_of_Task1ms 0319  
                              __CFG_PLLEN$ON 0000                                        l10003 0D81  
                                      l10023 0DEC                                        l10025 0DF1  
                                      l10043 0E88                                        l10035 0E43  
                                      l10045 0E94                                        l10037 0E46  
                                      l10047 0EA4                                        l10151 08E6  
                                      l10049 0EB9                                        l10153 08E9  
                                      l10171 0922                                        l10181 092A  
                                      l10093 084E                                        l10355 133C  
                                      _C1OUT 088E                              __end_of___aldiv 01AA  
                                      ?_main 0070                              __end_of___awdiv 0247  
                                      _EEPGD 0CAF                              ___awdiv@divisor 002A  
                                      _T1CON 0018                                        _T2CON 001C  
                                      _LATB1 0869                                        _LATB2 086A  
                                      _LATC0 0870                                        _LATC1 0871  
                                      _LATC2 0872                                        _LATC3 0873  
                              _InitMotorStop 0F22                                        _LATC4 0874  
                                      _T4CON 0417                              __end_of___ltdiv 009F  
                                      _T6CON 041E                              __end_of___lwdiv 026C  
                                      i1l316 1565                                        i1l327 1629  
                                      i1l263 1416                                        i1l345 1655  
                                      i1l267 1523                                        i1l284 148E  
                            ___awdiv@counter 002E                                        _TMR1H 0017  
                                      _TMR1L 0016                            _ui8_BlankingCount 00EB  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E                          ___lmul@multiplicand 0028  
                          _ui16_PWM_Freq_mat 0135     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00B8  
                           __end_of_PWM_CTRL 02F8                 ?_Cb56_UbatHandling_node_fcn2 0070  
                           __end_ofi1___wmul 15B5            BVH2_Appl_Layer@Cb24_oMotorStalled 00B4  
                                      status 0003                             __end_of_DiagInit 10AB  
                        i1___wmul@multiplier 0070                                        wtemp0 007E  
                         __size_of_PWMReadDC 0045               ??_Cb34_PWM_Detection_node_fcn1 0024  
                        __size_ofi1_ADC_Read 000E                          __size_ofi1_ADC_Wait 0019  
                             __CFG_MCLRE$OFF 0000                              __initialization 0811  
                BVH2_Appl_Layer@Cb51_Counter 00BC                  BVH2_Appl_Layer@Cb19_Counter 00A2  
                                _system_init 1021                           _ui8_duty_cycle_mat 00DF  
                               __end_of_main 0930                               ??_InitMotorRun 0030  
                            _PWM_trans_table 1800                         __size_of_clear_timer 0021  
                             ?_InitMotorStop 0070                                       ??_main 0038  
                       __size_of_FILTER_Init 0019                         __size_of_FILTER_Ubat 006A  
                       __size_of_FILTER_Temp 0022                            ?_read_eeprom_data 0070  
                       _BVH2_Appl_Layer$1040 01D2                         _BVH2_Appl_Layer$1035 01CD  
                       _BVH2_Appl_Layer$1043 01C4                         _BVH2_Appl_Layer$1036 01CE  
                       _BVH2_Appl_Layer$1037 01CF                         _BVH2_Appl_Layer$1045 01C6  
                       _BVH2_Appl_Layer$1038 01D0                         _BVH2_Appl_Layer$1046 01C8  
                       _BVH2_Appl_Layer$1039 01D1                         _interrupt_PWMCapture 01AA  
                          ?_Get_Analog_Value 0070                  _ui16_NTC_Temp_bldc_mean_cal 0145  
                         ??_read_eeprom_data 0024                                _PWM_Write_Out 1215  
                                     _ADCON0 009D                           ??_Get_Analog_Value 0030  
                                     _ADCON1 009E                                       _CCP1AS 0295  
                                     _CCP1IE 048A                                       _CCP1IF 008A  
                                     _CCP2IE 0490                                       _CCP2IF 0090  
                                     _CCP3IE 049C                                       _CCP3IF 009C  
                                     _CCP4IE 049D                                       _CCP4IF 009D  
                                     _CCP5IE 049E                                       _CCP5IF 009E  
                                     _ADRESH 009C                                       _ADRESL 009B  
                                     _EEADRL 0191                                       _CCPR1H 0292  
                                     _CCPR2H 0299                                       _CCPR3H 0312  
                                     _CCPR1L 0291                                       _CCPR4H 0319  
                                     _CCPR2L 0298                                       _EEDATL 0193  
                                     _CCPR3L 0311                                       _CCPR5H 031D  
                                     _CCPR4L 0318                                       _CCPR5L 031C  
                           ___awdiv@dividend 002C                                    ADC_Read@i 0026  
                                     _ANSELA 018C                                       _ANSELB 018D  
                           ?_interrrupt_bldc 0070                                ?_SetDiagAlarm 0070  
                                     i1l1176 01AB                                       i1l1179 01BE  
                                     i1l6301 01EA                                       i1l6305 01EC  
                                     i1l5721 15FA                                       i1l5811 1667  
                                     i1l5731 1605                                       i1l5723 15FC  
                                     i1l6285 02F1                                       i1l5725 15FF  
                                     i1l9101 1431                                       i1l6293 01B3  
                                     i1l5903 1696                                       i1l5831 1671  
                                     i1l5727 1601                                       i1l5743 160A  
                                     i1l5719 15F6                                       i1l5841 167C  
                                     i1l5817 166F                                       i1l5729 1603  
                                     i1l5745 1618                                       i1l5683 159B  
                                     i1l5923 16A4                                       i1l5835 1674  
                                     i1l5931 16A7                                       i1l5755 162F  
                                     i1l5691 15C0                                       i1l7701 0263  
                                     i1l5909 169E                                       i1l5861 1687  
                                     i1l5933 16BB                                       i1l5781 1653  
                                     i1l5757 163A                                       i1l5749 1622  
                                     i1l9213 1494                                       i1l9141 144B  
                            _ui8_PWM_FreqCnt 00D2                                       i1l9055 15A2  
                                     i1l5855 167F                                       i1l5775 164D  
                                     i1l9311 1577                                       i1l9231 14CF  
                                     i1l9223 14B2                                       i1l7705 0267  
                                     i1l5793 1664                                       i1l9225 14B6  
                                     i1l9241 14F3                                       i1l9161 1471  
                                     i1l9153 1468                                       i1l9059 15A8  
                                     i1l5787 165C                                       i1l9235 14E4  
                                     i1l9243 14FA                                       i1l9219 149D  
                                     i1l9083 140E                                       i1l9075 13FA  
                                     i1l5885 1692                                       i1l9309 1572  
                                     i1l9237 14E6                                       i1l9229 14CB  
                                     i1l5879 168A                                       i1l9239 14E7  
                                     i1l9079 1404                                       i1l9249 1506  
                                     i1l9193 1488                                       i1l9089 141A  
                                     i1l9265 1516                                       i1l9291 1554  
                                     i1l9179 147A                                       i1l9099 142E  
                                     i1l7693 0254                                       i1l9285 1549  
                                     i1l9293 1558                                       i1l9295 155A  
                                     _INTCON 000B                                       i1l9289 1552  
                                     _FVRCON 0117                           _ui8_Task_Cont100ms 00D4  
                                     u515_25 025C                                       _OSCCON 0099  
                                     u706_25 1466                ??_Cb56_UbatHandling_node_fcn2 0024  
                                     _TMR0IE 005D                                       _TMR1IE 0488  
                                     _TMR1IF 0088                                       _TMR2IE 0489  
                                     _TMR2IF 0089                                       _TMR4IE 0499  
                                     _TMR4IF 0099                                       _TMR6IE 049B  
                                     _TMR6IF 009B                                       u699_25 13F6  
                                     _WDTCON 0097         BVH2_Appl_Layer@Sb1_Logical_Operator1 01DD  
       BVH2_Appl_Layer@Sb1_Logical_Operator2 01CC         BVH2_Appl_Layer@Sb1_Logical_Operator3 01D8  
       BVH2_Appl_Layer@Sb1_Logical_Operator5 01D9                                    ??_Task1ms 0070  
                                 _MotorFlags 004D   BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C  
                                     ___lmul 0EF6                                    ??___aldiv 002C  
                                     ___tmul 009F                                       ___wmul 0930  
                                  ??___awdiv 002E                    BVH2_Appl_Layer@Sb4_PI_sum 01E0  
                                  ??___ltdiv 0033                                    ??___lwdiv 0074  
                            _ui8_PWMinDC_sav 00CE                             ___awdiv@quotient 0030  
          BVH2_Appl_Layer@Cb24_oStalledAlarm 015D                            __end_of_PWMReadDC 006D  
                      ?_interrupt_PWMCapture 0070                                    ?_ADC_Init 0070  
                                  ?_ADC_Read 0024                                    ?_ADC_Wait 0070  
                             ?_PWM_Write_Out 0070                                    ?_BLDCWait 0070  
                   __size_of_BVH2_Appl_Layer 057D                               ??_SetDiagAlarm 0025  
           BVH2_Appl_Layer@Cb9_oCurrentAlarm 0159                      __end_of__initialization 0843  
                      __end_of_FILTER_IPhase 02AB                      __end_of_PWM_trans_table 18CA  
                        _ui8_duty_cycle_BLDC 004E                               __pcstackCOMMON 0070  
                            _ui8_PWMoutvalue 00D1                                 __pidataBANK2 0000  
                         _ui16_dryRun_Thresh 01E2                              ??_InitMotorStop 0024  
       __size_of_Cb56_UbatHandling_node_fcn2 0038                                   __end_ofPL2 16F8  
                                 __end_ofPL4 1710                                   __end_ofPL6 0F5E  
                                 __end_ofPL8 0F67                                    ?_PWM_CTRL 0070  
                               ??i1_ADC_Read 0072                                    ?i1___wmul 0070  
                               ??i1_ADC_Wait 0070                                    ?_DiagInit 0070  
                          _Cb1_oCurrentAlarm 00C8                                   ??_ADC_Init 0024  
                                 ??_ADC_Read 0026                                   ??_ADC_Wait 0024  
                      _ui16_Speed_demand_mat 012D                                   ??_BLDCWait 0070  
                __end_of_Oscill_Source_Block 1186                    __size_of_PWM_Capture_init 005A  
                         _ui16_Duty_Cycle_In 015E                                 _analog_value 0048  
                       __end_of_InitMotorRun 125F                           __size_of_commutate 011B  
                                 __pbssBANK0 003C                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01A0  
                    _ui8_Duty_Cycle_In_Ratio 00CF                           __size_of_init_bldc 0023  
                       _bool_ControlLoopMode 00DB                           __end_ofi1_ADC_Read 15A0  
                         __end_ofi1_ADC_Wait 1592                                   __pmaintext 0846  
                                    ?___lmul 0024                              _Cb34_oPWM_Alarm 00C6  
                                    ?___tmul 0024                                      ?___wmul 0024  
                               ?i1_commutate 0070                                   __pintentry 0004  
                                    _CM1CON0 0111                                      _CM1CON1 0112  
                                    _CCP1ASE 14AF                                      i1S10361 02BF  
                                    i1S10365 02D3                                      _CCP1CON 0293  
                                    _CCP2CON 029A                                      _CCP3CON 0313  
                                    _CCP4CON 031A      __end_of_Cb1_Current_An___High_node_fcn1 0EDF  
   __size_of_Cb1_Current_An___High_node_fcn1 001D            ??_Cb1_Current_An___High_node_fcn1 0024  
           ?_Cb1_Current_An___High_node_fcn1 0070              _Cb1_Current_An___High_node_fcn1 0EC2  
                                    _CCP5CON 031E                        _bool_CPU_TempRedAlarm 00D9  
                             ___lmul@product 002C                                   ??_PWM_CTRL 0070  
                                 ??i1___wmul 0074                       ??_interrupt_PWMCapture 0070  
                                 _ui8_Ki_mat 012F                              ??_PWM_Write_Out 0024  
                                 _ui8_Kp_mat 00DD                                      i1l10083 0021  
                                    i1l10075 0019                                      i1l10069 0012  
                                    i1l10363 1610                                   ??_DiagInit 0025  
                                    _PWM1CON 0294                                   _comm_state 00EC  
                BVH2_Appl_Layer@Cb9_StateCnt 00BB                            ??_BVH2_Appl_Layer 0032  
                  _ui16_Speed_demand_mat_Max 012B                    _ui16_Speed_demand_mat_min 0129  
                                    _Task1ms 0316                                 ?_system_init 0070  
                                    ___aldiv 013E                      BVH2_Appl_Layer@Sb3_Sum1 01DE  
                                    ___awdiv 0207                              __size_of___lmul 0025  
                            __size_of___tmul 001D                              __size_of___wmul 0015  
                                    ___ltdiv 006D                                      ___lwdiv 0247  
                       __end_of_SetDiagAlarm 1215                            __end_of_commutate 13EA  
                               _ui8_CompFlag 00E6                                   _init_ports 11E0  
                                    __ptext1 1021                                      __ptext2 1056  
                                    __ptext3 0F30                                      __ptext4 11E0  
                                    __ptext5 121A                                      __ptext6 123D  
                                    __ptext7 12CF                                      __ptext8 1186  
                                    __ptext9 1181                          _phase_delay_counter 013D  
                                    _filter1 014B                                      _filter3 0149  
                          __end_of_init_bldc 123D                                _ui16_Temp_cal 0153  
                           ___aldiv@dividend 0028                   BVH2_Appl_Layer@Sb2_Switch5 01D5  
                                    clrloop0 0311                         end_of_initialization 0843  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00B9         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0  
                       _ui16_fir_IPhase_mean 014F                    __size_of_read_eeprom_data 000B  
                  __size_of_Get_Analog_Value 0007                             ___ltdiv@dividend 0030  
                           __CFG_CLKOUTEN$ON 0000                                ??_clear_timer 0024  
                           ___aldiv@quotient 002E              read_eeprom_data@ui8_adress_data 0025  
                      i1___wmul@multiplicand 0072                                ??_FILTER_Init 0027  
                              ??_FILTER_Ubat 0024                                ??_FILTER_Temp 0024  
                       _Cb56_odFixedValueSel 00BF                                   _timer_init 1056  
             PWM_Write_Out@ui8_DutyCycle_Out 0024                        _ui16_IPhase1_bldc_cal 0160  
                      _ui16_IPhase2_bldc_cal 01C2                             __CFG_FOSC$INTOSC 0000  
                      __size_of_InitMotorRun 0022                          _ui16_Current_Thresh 016E  
                           _PWM_Capture_init 1186                             ___ltdiv@quotient 0033  
                                  _PWMReadDC 0028                        _ui16_IPhase3_bldc_cal 01C0  
                          __size_of_ADC_Init 000A                            __size_of_ADC_Read 0011  
                              _ui16_step_cnt 00B2                            __size_of_ADC_Wait 0019  
                          __size_of_BLDCWait 0021                                   _windowPtr1 0050  
                           _ui8_BattVolt_mat 00AC         BVH2_Appl_Layer@Sb2_Logical_Operator2 01DA  
                   __size_of_interrrupt_bldc 018F                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 123D                               __end_of___lmul 0F1B  
                     _ui16_phase_advancement 00B0                               __end_of___tmul 00BC  
                             __end_of___wmul 0945                                  ?_init_ports 0070  
                       __size_ofi1_commutate 0107                          __end_of_clear_timer 0F51  
                              __pbitbssBANK0 0298                            __size_of_PWM_CTRL 0011  
                                i1ADC_Read@i 0072                                  __end_ofPL10 0F7A  
                                __end_ofPL20 1766                                  __end_ofPL12 1721  
                                __end_ofPL30 0F89                                  __end_ofPL22 1776  
                                __end_ofPL14 1732                                  __end_ofPL40 013E  
                                __end_ofPL32 0F96                                  __end_ofPL24 1786  
                                __end_ofPL16 1744                                  __end_ofPL50 0FAD  
                                __end_ofPL42 17BB                                  __end_ofPL34 17A9  
                                __end_ofPL26 1796                                  __end_ofPL18 1755  
                                __end_ofPL60 17D5                                  __end_ofPL52 17C7  
                                __end_ofPL44 0F9F                                  __end_ofPL36 17AF  
                                __end_ofPL28 17A0                                  __end_ofPL70 17E7  
                                __end_ofPL62 17DB                                  __end_ofPL54 1000  
                                __end_ofPL46 0FA7                                  __end_ofPL38 17B5  
                                __end_ofPL80 0FBD                                  __end_ofPL72 17EC  
                                __end_ofPL64 17E1                                  __end_ofPL56 17CE  
                                __end_ofPL48 17C1                                  __end_ofPL90 1800  
                                __end_ofPL82 17F6                                  __end_ofPL74 17F1  
                                __end_ofPL66 12CF                                  __end_ofPL58 0FB4  
                                __end_ofPL84 0207                                  __end_ofPL76 0FB8  
                                __end_ofPL68 01FF                                  __end_ofPL86 17FB  
                                __end_ofPL78 0203                                  __end_ofPL88 0FC1  
                        start_initialization 0811                            __size_ofi1___wmul 0015  
                        __end_of_FILTER_Init 10C4                          __end_of_FILTER_Ubat 12C9  
                        __end_of_FILTER_Temp 028E                            __size_of_DiagInit 000D  
                                 ?_PWMReadDC 0070          __end_of_Cb56_UbatHandling_node_fcn2 0FF9  
                _Cb56_UbatHandling_node_fcn2 0FC1                               _ui8_IPhase_sel 00EA  
                               _Cb1_StateCnt 0040                        __size_of_SetDiagAlarm 0025  
                    _ui16_NTC_Temp_bldc_mean 014D                               _ui8_PWM_dc_mat 00DE  
                                   ??___lmul 002C                                     ??___tmul 002A  
                                   ??___wmul 0028                                  __pdataBANK2 0162  
                 read_eeprom_data@ui8_adress 0024                         __size_of_system_init 0035  
                               _Cb1_oShutoff 00C7                                  ?_timer_init 0070  
                             ___tmul@product 002A                        __end_of_InitMotorStop 0F30  
                     __size_of_FILTER_IPhase 001D                              _ui8_Pulse_State 00D0  
                                  ___latbits 0002                              _BVH2_Appl_Layer 0945  
                              __pcstackBANK0 0020                                __pcstackBANK3 01C4  
                          _bool_MotorStalled 00E2                                 _SetDiagAlarm 11F0  
               __size_of_Oscill_Source_Block 0005                          __size_of_init_ports 0010  
                           _read_eeprom_data 114C                                    __pnvBANK1 00EF  
                                  __pnvBANK2 016E                                    __pnvBANK3 01E2  
             BVH2_Appl_Layer@Cb51_oTempAlarm 015C                             _Get_Analog_Value 0F1B  
                                   ?_Task1ms 0070                             ___lwdiv@dividend 0072  
                                _clear_timer 0F30                                     ?___aldiv 0024  
                                   ?___awdiv 002A                                     ?___ltdiv 002D  
                                   ?___lwdiv 0070                        _bool_HighCurrentAlarm 00E1  
                       clear_timer@ui8_TmrNb 0024                            ??_interrrupt_bldc 007C  
              _SIBFS_Current_Analysis_High_b 00CB                               _ui8_UPhase_sel 00E9  
                             _bool_UbatAlarm 00D8                                  _FILTER_Init 10AB  
                                _FILTER_Ubat 125F                                  _FILTER_Temp 026C  
                                  _comm_time 0046                                    __pswtext1 02AB  
                                  __pswtext2 0300                                    __pswtext3 02BF  
                                  __pswtext4 02D3                           _Cb34_oPWM_SC_Alarm 00C5  
                          _interrupt_handler 0004                              _ui16_Ubemf_bldc 00AE  
                                  _commutate 12CF                        _SIBFS_PWM_Detection_b 00CA  
                                   _ADC_Init 1094                                     _ADC_Read 1170  
              __size_of_interrupt_PWMCapture 004F                         _bool_DryRunningAlarm 00E3  
                                   _ADC_Wait 1157                           ?_interrupt_handler 0070  
                      __end_of_PWM_Write_Out 121A                                     _BLDCWait 16BC  
                                ??_PWMReadDC 0037                             __CFG_WDTE$SWDTEN 0000  
                          _I_calibrationInit 10C4                             ___lwdiv@quotient 0074  
                                  _init_bldc 121A      BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 004A  
                         ?_I_calibrationInit 0070                          ??_interrupt_handler 007E  
                      _Cb56_oUbat_Alarm_High 00C0                              ___aldiv@divisor 0024  
                            ___aldiv@counter 002C                               ___wmul@product 0028  
                        __size_of_timer_init 003E                                    clear_ram0 0310  
                              _FILTER_IPhase 028E                          ??_I_calibrationInit 0027  
                            ___ltdiv@divisor 002D                               _Cb34_odPumpOff 00C2  
                            ___ltdiv@counter 0036                                     _GO_nDONE 04E9  
                   __end_of_PWM_Capture_init 11E0                                     _PSTR1CON 0296  
                  __end_of_interrupt_handler 0026                      __end_of_BVH2_Appl_Layer 0EC2  
                                   _PWM_CTRL 02E7                            ___wmul@multiplier 0024  
                                   i1___wmul 15A0                                   ?_commutate 0070  
                    interrrupt_bldc@ui32_tmp 0020                                     _DiagInit 109E  
                  __end_of_I_calibrationInit 114C                          ___tmul@multiplicand 0027  
                        _ui16_fir_Bat_mittel 0151                    _ui8_fixed_start_speed_mat 0143  
                                 ?_init_bldc 0070                            ___lmul@multiplier 0024  
                             _ui16_Capt_Val0 00A8                               _ui16_Capt_Val1 00A6  
                             _ui16_Capt_Val2 00A4                               _ui16_I_cal_Ph1 016A  
                             _ui16_I_cal_Ph2 0168                               _ui16_I_cal_Ph3 0166  
                             ?_FILTER_IPhase 0070                           _bool_CPU_TempAlarm 00E4  
                           _ui16_mat_Current 00AA                             __size_of_Task1ms 0003  
                       _SIBFS_UbatHandling_b 004C                      _Cb34_odFixedLowValueSel 00C4  
                   BVH2_Appl_Layer@Sb2_Error 01DB                             __size_of___aldiv 006C  
                           __size_of___awdiv 0040                BVH2_Appl_Layer@Cb19_oDryRun55 00B6  
              BVH2_Appl_Layer@Cb19_oDryRun66 00B5                             __size_of___ltdiv 0032  
                           __size_of___lwdiv 0025                                 ??_init_ports 0024  
                          _ui8_lastTaskvalue 00D3                             _ui16_mat_inpTemp 0131  
                             _ui8_StartupPWM 00ED                         _bool_PWMin_err_Alarm 00DA  
                         _Cb1_RestartCounter 00CC             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00B7  
                         _ui16_NTC_Temp_bldc 0155                              ___lwdiv@divisor 0070  
                             _Cb56_odPumpOff 00BE                              ___lwdiv@counter 0076  
                                   __ptext10 10C4                                     __ptext11 114C  
                                   __ptext20 0028                                     __ptext12 10AB  
                                   __ptext21 009F                                     __ptext13 1157  
                                   __ptext30 0EF6                                     __ptext22 006D  
                                   __ptext14 1170                                     __ptext31 013E  
                                   __ptext23 0F22                                     __ptext15 109E  
                                   __ptext40 15A0                                     __ptext32 0FC1  
                                   __ptext24 0F1B                                     __ptext16 1094  
                                   __ptext41 1579                                     __ptext33 0EDF  
                                   __ptext25 125F                                     __ptext17 0207  
                                   __ptext42 1592                                     __ptext34 00BC  
                                   __ptext26 026C                                     __ptext18 11F0  
                                   __ptext43 0247                                     __ptext35 0EC2  
                                   __ptext27 028E                                     __ptext19 1215  
                                   __ptext44 16BC                                     __ptext28 0945  
                                   __ptext45 0316                                     __ptext37 01AA  
                                   __ptext29 0930                                     __ptext46 02E7  
                                   __ptext38 13EA                                     __ptext39 15B5  
                             _ui16_Ubat_bldc 0051                      _bool_mat_currAlarm_bldc 00DC  
               BVH2_Appl_Layer@Cb14_StateCnt 0125                                _Cb44_StateCnt 003E  
              BVH2_Appl_Layer@Cb51_odPumpOff 015A                                __size_of_main 00EA  
                                 _Cb34_idPWM 004B                           __end_of_init_ports 11F0  
                                _inputArray1 01B0                               _ui16_Speed_mat 0042  
               BVH2_Appl_Layer@Cb24_StateCnt 003C                  BVH2_Appl_Layer@Sb3_Product1 01D3  
                              ??i1_commutate 0070                                     int$flags 007E  
          BVH2_Appl_Layer@Cb51_oTempRedAlarm 015B                                _ui8_Ubemf_sel 00E8  
                              _Cb44_oShutoff 00C1                         _ui16_PWM_Input_State 0127  
                 __size_of_interrupt_handler 0022                             ?_BVH2_Appl_Layer 0070  
                               ??_timer_init 0025                          _Oscill_Source_Block 1181  
                                 i1_ADC_Read 1592                                   i1_ADC_Wait 1579  
                                ??_commutate 0024                     __end_of_read_eeprom_data 1157  
                   __end_of_Get_Analog_Value 0F22                   __size_of_I_calibrationInit 0088  
    __end_of_Cb44_Pic_etat_monitor_node_fcn1 0EF6     __size_of_Cb44_Pic_etat_monitor_node_fcn1 0017  
          ??_Cb44_Pic_etat_monitor_node_fcn1 0024             ?_Cb44_Pic_etat_monitor_node_fcn1 0070  
            _Cb44_Pic_etat_monitor_node_fcn1 0EDF         __end_of_Cb34_PWM_Detection_node_fcn1 0135  
      __size_of_Cb34_PWM_Detection_node_fcn1 0079                 _Cb34_PWM_Detection_node_fcn1 00BC  
                                ??_init_bldc 0030                                     intlevel1 0000  
                           _rising_bemf_flag 0298                              ??_FILTER_IPhase 0024  
                  _bool_PWMin_Freq_err_Alarm 00D7                         ?_Oscill_Source_Block 0070  
                            _interrrupt_bldc 13EA                           __end_of_timer_init 1094  
                               ?_clear_timer 0070                        _bool_start_demand_mat 00EE  
                              ??_system_init 0030                            _ui8_PWMin_failCnt 00CD  
                 PWM_Capture_init@ui8_CCP_Nb 0024                            ___tmul@multiplier 0024  
                               ?_FILTER_Init 0070                                 ?_FILTER_Ubat 0070  
                               ?_FILTER_Temp 0070                                __pstringtext1 1800  
                                 _OPTION_REG 0095                          __end_ofi1_commutate 16BC  
                               ___aldiv@sign 002D  BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016D  
              ?_Cb34_PWM_Detection_node_fcn1 0070           BVH2_Appl_Layer@Cb24_RestartCounter 00BD  
                      ??_Oscill_Source_Block 0024                         _Cb34_odFixedValueSel 00C3  
                            _ui8_error_Flags 004F                              _ui8_current_cal 0120  
                     __size_of_InitMotorStop 000E                 __end_of_interrupt_PWMCapture 01F9  
                             _ui16_speed_fil 0137                               _ui16_speed_rar 0141  
                              _filterTempNTC 0147  
